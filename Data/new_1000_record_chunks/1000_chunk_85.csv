record_number,buggy_code,fixed_code
84001,"public OEntityRef<Void> deleteEntity(String entitySetName,Object... key){
  return createDeleteOEntityRefImpl(entitySetName,key);
}","public OEntityRef<Void> deleteEntity(String entitySetName,Object... key){
  FeedCustomizationMapping mapping=getFeedCustomizationMapping(entitySetName);
  return new OEntityRefImpl<Void,Feed<Entry>,Entry>(true,client,null,serviceRootUri,getMetadata(),entitySetName,key,mapping);
}"
84002,"public <T>OEntityRef<T> getEntity(Class<T> entityType,String entitySetName,Object... key){
  return createGetOEntityRefImpl(entityType,entitySetName,key);
}","public <T>OEntityRef<T> getEntity(Class<T> entityType,String entitySetName,Object... key){
  FeedCustomizationMapping mapping=getFeedCustomizationMapping(entitySetName);
  return new OEntityRefImpl<T,Feed<Entry>,Entry>(false,client,entityType,serviceRootUri,getMetadata(),entitySetName,key,mapping);
}"
84003,"public OCreate<OEntity> createEntity(String entitySetName){
  return createOCreateImpl(entitySetName);
}","public OCreate<OEntity> createEntity(String entitySetName){
  FeedCustomizationMapping mapping=getFeedCustomizationMapping(entitySetName);
  return new OCreateImpl<OEntity,Feed<Entry>,Entry>(client,serviceRootUri,getMetadata(),entitySetName,mapping);
}"
84004,"public OModify<OEntity> updateEntity(OEntity entity,String entitySetName,Object... key){
  return createOModifyImpl(entity,entitySetName,key);
}","public OModify<OEntity> updateEntity(OEntity entity,String entitySetName,Object... key){
  return new OModifyImpl<OEntity,Feed<Entry>,Entry>(entity,client,serviceRootUri,entitySetName,key);
}"
84005,"public <T>OQuery<T> getEntities(Class<T> entityType,String entitySetName){
  return createOQueryImpl(entityType,entitySetName);
}","public <T>OQuery<T> getEntities(Class<T> entityType,String entitySetName){
  FeedCustomizationMapping mapping=getFeedCustomizationMapping(entitySetName);
  return new OQueryImpl<T,Feed<Entry>,Entry>(client,entityType,serviceRootUri,getMetadata(),entitySetName,mapping);
}"
84006,"public OModify<OEntity> mergeEntity(String entitySetName,Object... key){
  return createOModifyImpl(null,entitySetName,key);
}","public OModify<OEntity> mergeEntity(String entitySetName,Object... key){
  return new OModifyImpl<OEntity,Feed<Entry>,Entry>(null,client,serviceRootUri,entitySetName,key);
}"
84007,"public XmlDataProducer(){
  String namespace=""String_Node_Str"";
  List<EdmProperty> properties=new ArrayList<EdmProperty>();
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  List<EdmEntityType> entityTypes=new ArrayList<EdmEntityType>();
  EdmEntityType type=new EdmEntityType(namespace,null,""String_Node_Str"",null,Arrays.asList(""String_Node_Str""),properties,null);
  entityTypes.add(type);
  List<EdmEntitySet> entitySets=new ArrayList<EdmEntitySet>();
  entitySets.add(new EdmEntitySet(""String_Node_Str"",type));
  EdmEntityContainer container=new EdmEntityContainer(namespace + ""String_Node_Str"",true,null,entitySets,null,null);
  EdmSchema modelSchema=new EdmSchema(namespace + ""String_Node_Str"",null,entityTypes,null,null,Enumerable.create(container).toList());
  EdmSchema containerSchema=new EdmSchema(namespace + ""String_Node_Str"",null,null,null,null,Enumerable.create(container).toList());
  metadata=new EdmDataServices(ODataConstants.DATA_SERVICE_VERSION,Enumerable.create(modelSchema,containerSchema).toList());
  xmlInputFactory=XMLInputFactory.newInstance();
}","public XmlDataProducer(){
  String namespace=""String_Node_Str"";
  List<EdmProperty> properties=new ArrayList<EdmProperty>();
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  List<EdmEntityType> entityTypes=new ArrayList<EdmEntityType>();
  EdmEntityType type=new EdmEntityType(namespace,null,""String_Node_Str"",null,Arrays.asList(""String_Node_Str""),properties,null);
  entityTypes.add(type);
  List<EdmEntitySet> entitySets=new ArrayList<EdmEntitySet>();
  entitySets.add(new EdmEntitySet(""String_Node_Str"",type));
  EdmEntityContainer container=new EdmEntityContainer(namespace + ""String_Node_Str"",true,null,entitySets,null,null);
  EdmSchema modelSchema=new EdmSchema(namespace + ""String_Node_Str"",null,entityTypes,null,null,null);
  EdmSchema containerSchema=new EdmSchema(namespace + ""String_Node_Str"",null,null,null,null,Enumerable.create(container).toList());
  metadata=new EdmDataServices(ODataConstants.DATA_SERVICE_VERSION,Enumerable.create(modelSchema,containerSchema).toList());
  xmlInputFactory=XMLInputFactory.newInstance();
}"
84008,"private static Iterable<OProperty<?>> parseProperties(XMLEventReader2 reader,StartElement2 propertiesElement){
  List<OProperty<?>> rt=new ArrayList<OProperty<?>>();
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    if (event.isEndElement() && event.asEndElement().getName().equals(propertiesElement.getName())) {
      return rt;
    }
    if (event.isStartElement() && event.asStartElement().getName().getNamespaceURI().equals(NS_DATASERVICES)) {
      String name=event.asStartElement().getName().getLocalPart();
      Attribute2 typeAttribute=event.asStartElement().getAttributeByName(M_TYPE);
      Attribute2 nullAttribute=event.asStartElement().getAttributeByName(M_NULL);
      boolean isNull=nullAttribute != null && ""String_Node_Str"".equals(nullAttribute.getValue());
      OProperty<?> op=null;
      String type=null;
      boolean isComplexType=false;
      if (typeAttribute != null) {
        type=typeAttribute.getValue();
        EdmType et=EdmType.get(type);
        isComplexType=!et.isPrimitive();
      }
      if (isComplexType) {
        op=OProperties.complex(name,type,isNull ? null : Enumerable.create(parseProperties(reader,event.asStartElement())).toList());
      }
 else {
        op=OProperties.parse(name,type,isNull ? null : reader.getElementText());
      }
      rt.add(op);
    }
  }
  throw new RuntimeException();
}","public static Iterable<OProperty<?>> parseProperties(XMLEventReader2 reader,StartElement2 propertiesElement){
  List<OProperty<?>> rt=new ArrayList<OProperty<?>>();
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    if (event.isEndElement() && event.asEndElement().getName().equals(propertiesElement.getName())) {
      return rt;
    }
    if (event.isStartElement() && event.asStartElement().getName().getNamespaceURI().equals(NS_DATASERVICES)) {
      String name=event.asStartElement().getName().getLocalPart();
      Attribute2 typeAttribute=event.asStartElement().getAttributeByName(M_TYPE);
      Attribute2 nullAttribute=event.asStartElement().getAttributeByName(M_NULL);
      boolean isNull=nullAttribute != null && ""String_Node_Str"".equals(nullAttribute.getValue());
      OProperty<?> op=null;
      String type=null;
      boolean isComplexType=false;
      if (typeAttribute != null) {
        type=typeAttribute.getValue();
        EdmType et=EdmType.get(type);
        isComplexType=!et.isPrimitive();
      }
      if (isComplexType) {
        op=OProperties.complex(name,type,isNull ? null : Enumerable.create(parseProperties(reader,event.asStartElement())).toList());
      }
 else {
        op=OProperties.parse(name,type,isNull ? null : reader.getElementText());
      }
      rt.add(op);
    }
  }
  throw new RuntimeException();
}"
84009,"private static CommonExpression readExpression(List<Token> tokens){
  CommonExpression rt=null;
  tokens=trimWhitespace(tokens);
  Token lastToken=tokens.get(tokens.size() - 1);
  if (lastToken.type == TokenType.WORD && (lastToken.value.equals(""String_Node_Str"") || lastToken.value.equals(""String_Node_Str""))) {
    return Expression.orderBy(readExpression(tokens.subList(0,tokens.size() - 1)),lastToken.value.equals(""String_Node_Str""));
  }
  tokens=processParentheses(tokens);
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.WORD && tokens.get(1).type == TokenType.QUOTED_STRING) {
    String word=tokens.get(0).value;
    String value=unquote(tokens.get(1).value);
    if (word.equals(""String_Node_Str"")) {
      DateTime dt=DATETIME_FORMATTER.parseDateTime(value);
      return Expression.dateTime(new LocalDateTime(dt));
    }
 else     if (word.equals(""String_Node_Str"")) {
      DateTime dt=TIME_FORMATTER.parseDateTime(value);
      return Expression.time(new LocalTime(dt));
    }
 else     if (word.equals(""String_Node_Str"")) {
      DateTime dt=DATETIMEOFFSET_FORMATTER.parseDateTime(value);
      return Expression.dateTimeOffset(dt);
    }
 else     if (word.equals(""String_Node_Str"")) {
      return Expression.guid(Guid.fromString(value));
    }
 else     if (word.equals(""String_Node_Str"")) {
      return Expression.decimal(new BigDecimal(value));
    }
 else     if (word.equals(""String_Node_Str"") || word.equals(""String_Node_Str"")) {
      try {
        byte[] bValue=Hex.decodeHex(value.toCharArray());
        return Expression.binary(bValue);
      }
 catch (      DecoderException e) {
        throw new RuntimeException(e);
      }
    }
  }
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"")) {
    long longValue=Long.parseLong(tokens.get(0).value);
    return Expression.int64(longValue);
  }
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"")) {
    float floatValue=Float.parseFloat(tokens.get(0).value);
    return Expression.single(floatValue);
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).value.equals(""String_Node_Str"")) {
    float floatValue=Float.parseFloat(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.single(floatValue);
  }
  if (tokens.size() == 3 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.SYMBOL && tokens.get(2).value.equals(""String_Node_Str"") && tokens.get(3).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(3).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 3 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER) {
    int e=Integer.parseInt(tokens.get(2).value);
    if (e < 1) {
      double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
      return Expression.double_(doubleValue);
    }
  }
  if (tokens.size() == 6 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).type == TokenType.WORD && tokens.get(3).value.equals(""String_Node_Str"") && tokens.get(4).type == TokenType.SYMBOL && tokens.get(4).value.equals(""String_Node_Str"") && tokens.get(5).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value+ ""String_Node_Str""+ tokens.get(5).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 5 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).type == TokenType.WORD && tokens.get(3).value.equals(""String_Node_Str"") && tokens.get(4).type == TokenType.NUMBER) {
    int e=Integer.parseInt(tokens.get(4).value);
    if (e < 1) {
      double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value+ ""String_Node_Str""+ tokens.get(4).value);
      return Expression.double_(doubleValue);
    }
  }
  if (tokens.size() == 1) {
    final Token token=tokens.get(0);
    if (token.type == TokenType.QUOTED_STRING) {
      return Expression.string(unquote(token.value));
    }
 else     if (token.type == TokenType.WORD) {
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.null_();
      }
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.boolean_(true);
      }
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.boolean_(false);
      }
      return Expression.simpleProperty(token.value);
    }
 else     if (token.type == TokenType.NUMBER) {
      int value=Integer.parseInt(token.value);
      return Expression.integral(value);
    }
 else     if (token.type == TokenType.EXPRESSION) {
      return ((ExpressionToken)token).expression;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      assertType(lhs,BoolCommonExpression.class);
      assertType(rhs,BoolCommonExpression.class);
      return Expression.or((BoolCommonExpression)lhs,(BoolCommonExpression)rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      assertType(lhs,BoolCommonExpression.class);
      assertType(rhs,BoolCommonExpression.class);
      return Expression.and((BoolCommonExpression)lhs,(BoolCommonExpression)rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.eq(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.ne(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.lt(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.gt(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.le(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.ge(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.add(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.sub(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.mul(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.div(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.mod(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processUnaryExpression(tokens,""String_Node_Str"",true,new Func1<CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression expression){
      return Expression.not(expression);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processUnaryExpression(tokens,""String_Node_Str"",false,new Func1<CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression expression){
      return Expression.negate(expression);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  throw new RuntimeException(""String_Node_Str"");
}","private static CommonExpression readExpression(List<Token> tokens){
  CommonExpression rt=null;
  tokens=trimWhitespace(tokens);
  Token lastToken=tokens.get(tokens.size() - 1);
  if (lastToken.type == TokenType.WORD && (lastToken.value.equals(""String_Node_Str"") || lastToken.value.equals(""String_Node_Str""))) {
    return Expression.orderBy(readExpression(tokens.subList(0,tokens.size() - 1)),lastToken.value.equals(""String_Node_Str""));
  }
  tokens=processParentheses(tokens);
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.WORD && tokens.get(1).type == TokenType.QUOTED_STRING) {
    String word=tokens.get(0).value;
    String value=unquote(tokens.get(1).value);
    if (word.equals(""String_Node_Str"")) {
      DateTime dt=DATETIME_FORMATTER.parseDateTime(value);
      return Expression.dateTime(new LocalDateTime(dt));
    }
 else     if (word.equals(""String_Node_Str"")) {
      DateTime dt=TIME_FORMATTER.parseDateTime(value);
      return Expression.time(new LocalTime(dt));
    }
 else     if (word.equals(""String_Node_Str"")) {
      DateTime dt=DATETIMEOFFSET_FORMATTER.parseDateTime(value);
      return Expression.dateTimeOffset(dt);
    }
 else     if (word.equals(""String_Node_Str"")) {
      return Expression.guid(Guid.fromString(value));
    }
 else     if (word.equals(""String_Node_Str"")) {
      return Expression.decimal(new BigDecimal(value));
    }
 else     if (word.equals(""String_Node_Str"") || word.equals(""String_Node_Str"")) {
      try {
        byte[] bValue=Hex.decodeHex(value.toCharArray());
        return Expression.binary(bValue);
      }
 catch (      DecoderException e) {
        throw new RuntimeException(e);
      }
    }
  }
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"")) {
    long longValue=Long.parseLong(tokens.get(0).value);
    return Expression.int64(longValue);
  }
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"")) {
    float floatValue=Float.parseFloat(tokens.get(0).value);
    return Expression.single(floatValue);
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).value.equals(""String_Node_Str"")) {
    float floatValue=Float.parseFloat(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.single(floatValue);
  }
  if (tokens.size() == 3 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.SYMBOL && tokens.get(2).value.equals(""String_Node_Str"") && tokens.get(3).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(3).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 3 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER) {
    int e=Integer.parseInt(tokens.get(2).value);
    if (e < 1) {
      double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
      return Expression.double_(doubleValue);
    }
  }
  if (tokens.size() == 6 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).type == TokenType.WORD && tokens.get(3).value.equals(""String_Node_Str"") && tokens.get(4).type == TokenType.SYMBOL && tokens.get(4).value.equals(""String_Node_Str"") && tokens.get(5).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value+ ""String_Node_Str""+ tokens.get(5).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 5 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).type == TokenType.WORD && tokens.get(3).value.equals(""String_Node_Str"") && tokens.get(4).type == TokenType.NUMBER) {
    int e=Integer.parseInt(tokens.get(4).value);
    if (e < 1) {
      double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value+ ""String_Node_Str""+ tokens.get(4).value);
      return Expression.double_(doubleValue);
    }
  }
  if (tokens.size() == 1) {
    final Token token=tokens.get(0);
    if (token.type == TokenType.QUOTED_STRING) {
      return Expression.string(unquote(token.value));
    }
 else     if (token.type == TokenType.WORD) {
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.null_();
      }
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.boolean_(true);
      }
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.boolean_(false);
      }
      return Expression.simpleProperty(token.value);
    }
 else     if (token.type == TokenType.NUMBER) {
      try {
        int value=Integer.parseInt(token.value);
        return Expression.integral(value);
      }
 catch (      NumberFormatException e) {
        long value=Long.parseLong(token.value);
        return Expression.int64(value);
      }
    }
 else     if (token.type == TokenType.EXPRESSION) {
      return ((ExpressionToken)token).expression;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      assertType(lhs,BoolCommonExpression.class);
      assertType(rhs,BoolCommonExpression.class);
      return Expression.or((BoolCommonExpression)lhs,(BoolCommonExpression)rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      assertType(lhs,BoolCommonExpression.class);
      assertType(rhs,BoolCommonExpression.class);
      return Expression.and((BoolCommonExpression)lhs,(BoolCommonExpression)rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.eq(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.ne(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.lt(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.gt(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.le(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.ge(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.add(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.sub(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.mul(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.div(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.mod(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processUnaryExpression(tokens,""String_Node_Str"",true,new Func1<CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression expression){
      return Expression.not(expression);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processUnaryExpression(tokens,""String_Node_Str"",false,new Func1<CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression expression){
      return Expression.negate(expression);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  throw new RuntimeException(""String_Node_Str"");
}"
84010,"public static boolean evaluate(BoolCommonExpression expression,Object target,PropertyModel properties){
  if (expression instanceof EqExpression) {
    return equals((EqExpression)expression,target,properties);
  }
  if (expression instanceof NeExpression) {
    return !equals((NeExpression)expression,target,properties);
  }
  if (expression instanceof AndExpression) {
    AndExpression e=(AndExpression)expression;
    return evaluate(e.getLHS(),target,properties) && evaluate(e.getRHS(),target,properties);
  }
  if (expression instanceof OrExpression) {
    OrExpression e=(OrExpression)expression;
    return evaluate(e.getLHS(),target,properties) || evaluate(e.getRHS(),target,properties);
  }
  if (expression instanceof BooleanLiteral) {
    return ((BooleanLiteral)expression).getValue();
  }
  if (expression instanceof GtExpression) {
    return compareTo((GtExpression)expression,target,properties) > 0;
  }
  if (expression instanceof LtExpression) {
    return compareTo((LtExpression)expression,target,properties) < 0;
  }
  if (expression instanceof GeExpression) {
    return compareTo((GeExpression)expression,target,properties) >= 0;
  }
  if (expression instanceof LeExpression) {
    return compareTo((LeExpression)expression,target,properties) <= 0;
  }
  if (expression instanceof NotExpression) {
    NotExpression e=(NotExpression)expression;
    Boolean rt=(Boolean)evaluate(e.getExpression(),target,properties);
    return !rt;
  }
  if (expression instanceof SubstringOfMethodCallExpression) {
    SubstringOfMethodCallExpression e=(SubstringOfMethodCallExpression)expression;
    String targetValue=(String)evaluate(e.getTarget(),target,properties);
    String searchValue=(String)evaluate(e.getValue(),target,properties);
    return targetValue != null && searchValue != null && targetValue.contains(searchValue);
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + expression);
}","public static boolean evaluate(BoolCommonExpression expression,Object target,PropertyModel properties){
  if (expression instanceof EqExpression) {
    return equals((EqExpression)expression,target,properties);
  }
  if (expression instanceof NeExpression) {
    return !equals((NeExpression)expression,target,properties);
  }
  if (expression instanceof AndExpression) {
    AndExpression e=(AndExpression)expression;
    return evaluate(e.getLHS(),target,properties) && evaluate(e.getRHS(),target,properties);
  }
  if (expression instanceof OrExpression) {
    OrExpression e=(OrExpression)expression;
    return evaluate(e.getLHS(),target,properties) || evaluate(e.getRHS(),target,properties);
  }
  if (expression instanceof BooleanLiteral) {
    return ((BooleanLiteral)expression).getValue();
  }
  if (expression instanceof GtExpression) {
    return compareTo((GtExpression)expression,target,properties) > 0;
  }
  if (expression instanceof LtExpression) {
    return compareTo((LtExpression)expression,target,properties) < 0;
  }
  if (expression instanceof GeExpression) {
    return compareTo((GeExpression)expression,target,properties) >= 0;
  }
  if (expression instanceof LeExpression) {
    return compareTo((LeExpression)expression,target,properties) <= 0;
  }
  if (expression instanceof NotExpression) {
    NotExpression e=(NotExpression)expression;
    Boolean rt=(Boolean)evaluate(e.getExpression(),target,properties);
    return !rt;
  }
  if (expression instanceof SubstringOfMethodCallExpression) {
    SubstringOfMethodCallExpression e=(SubstringOfMethodCallExpression)expression;
    String targetValue=(String)evaluate(e.getTarget(),target,properties);
    String searchValue=(String)evaluate(e.getValue(),target,properties);
    return targetValue != null && searchValue != null && targetValue.contains(searchValue);
  }
  if (expression instanceof ParenExpression) {
    Object o=null;
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + expression);
}"
84011,"public static Object parseIdObject(String id){
  String cleanid=null;
  if (id != null && id.length() > 0) {
    if (id.startsWith(""String_Node_Str"") && id.endsWith(""String_Node_Str"")) {
      cleanid=id.substring(1,id.length() - 1);
    }
  }
  if (cleanid == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Object idObject;
  if (cleanid.startsWith(""String_Node_Str"") && cleanid.endsWith(""String_Node_Str"")) {
    idObject=cleanid.substring(1,cleanid.length() - 1);
  }
 else {
    idObject=Integer.parseInt(cleanid);
  }
  return idObject;
}","public static Object parseIdObject(String id){
  String cleanid=null;
  if (id != null && id.length() > 0) {
    if (id.startsWith(""String_Node_Str"") && id.endsWith(""String_Node_Str"")) {
      cleanid=id.substring(1,id.length() - 1);
    }
  }
  if (cleanid == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Object idObject;
  if (cleanid.startsWith(""String_Node_Str"") && cleanid.endsWith(""String_Node_Str"")) {
    idObject=cleanid.substring(1,cleanid.length() - 1);
  }
 else   if (cleanid.endsWith(""String_Node_Str"")) {
    idObject=Long.parseLong(cleanid.substring(0,cleanid.length() - 1));
  }
 else {
    idObject=Integer.parseInt(cleanid);
  }
  return idObject;
}"
84012,"private Object idObject(String id){
  String cleanid=null;
  if (id != null && id.length() > 0) {
    if (id.startsWith(""String_Node_Str"") && id.endsWith(""String_Node_Str"")) {
      cleanid=id.substring(1,id.length() - 1);
    }
  }
  if (cleanid == null)   throw new RuntimeException(""String_Node_Str"");
  Object idObject;
  if (cleanid.startsWith(""String_Node_Str"") && cleanid.endsWith(""String_Node_Str"")) {
    idObject=cleanid.substring(1,cleanid.length() - 1);
  }
 else {
    idObject=Integer.parseInt(cleanid);
  }
  return idObject;
}","private Object idObject(String id){
  String cleanid=null;
  if (id != null && id.length() > 0) {
    if (id.startsWith(""String_Node_Str"") && id.endsWith(""String_Node_Str"")) {
      cleanid=id.substring(1,id.length() - 1);
    }
  }
  if (cleanid == null)   throw new RuntimeException(""String_Node_Str"");
  Object idObject;
  if (cleanid.startsWith(""String_Node_Str"") && cleanid.endsWith(""String_Node_Str"")) {
    idObject=cleanid.substring(1,cleanid.length() - 1);
  }
 else   if (cleanid.endsWith(""String_Node_Str"")) {
    idObject=Long.parseLong(cleanid.substring(0,cleanid.length() - 1));
  }
 else {
    idObject=Integer.parseInt(cleanid);
  }
  return idObject;
}"
84013,"public void setAnswer(E answer){
  if (isValidAnswer(answer)) {
    this.answer=answer;
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}","public void setAnswer(E answer){
}"
84014,"public void playCard(Player activePlayer,Supply supply,Card cardToPlay){
  if (!this.cardsInPlay.contains(cardToPlay)) {
    this.cardsInPlay.add(cardToPlay);
  }
  this.playedCards.add(cardToPlay);
  activePlayer.playCard(cardToPlay,this,supply);
}","public void playCard(Player activePlayer,Supply supply,Card cardToPlay){
  if (!this.cardsInPlay.contains(cardToPlay)) {
    if (!this.playedCards.contains(cardToPlay)) {
      this.cardsInPlay.add(cardToPlay);
    }
  }
  this.playedCards.add(cardToPlay);
  activePlayer.playCard(cardToPlay,this,supply);
}"
84015,"private List<Player> findWinners(){
  List<Player> winners=new ArrayList<Player>();
  int highestPoints=Integer.MIN_VALUE;
  for (  Player player : getPlayers()) {
    if (player.countVictoryPoints(null) > highestPoints) {
      winners=new ArrayList<Player>();
      winners.add(player);
      highestPoints=player.countVictoryPoints(null);
    }
 else     if (player.countVictoryPoints(null) == highestPoints) {
      if (player.getTurnCounter() < winners.get(0).getTurnCounter()) {
        winners=new ArrayList<Player>();
        winners.add(player);
      }
 else       if (player.getTurnCounter() == winners.get(0).getTurnCounter()) {
        winners.add(player);
      }
    }
  }
  return winners;
}","private List<Player> findWinners(){
  List<Player> winners=new ArrayList<Player>();
  int highestPoints=Integer.MIN_VALUE;
  for (  Player player : getPlayers()) {
    if (player.countVictoryPoints(null) > highestPoints) {
      winners.clear();
      winners.add(player);
      highestPoints=player.countVictoryPoints(null);
    }
 else     if (player.countVictoryPoints(null) == highestPoints) {
      if (player.getTurnCounter() < winners.get(0).getTurnCounter()) {
        winners.clear();
        winners.add(player);
      }
 else       if (player.getTurnCounter() == winners.get(0).getTurnCounter()) {
        winners.add(player);
      }
    }
  }
  return winners;
}"
84016,"private void updateCardImages(){
  for (int i=0; i < cardImages.size(); i++) {
    if (cardImages.get(i).getLongOverlayText() != revealedCards.get(i).getChoosenOption().getName()) {
      cardImages.get(i).setLongOverlayText(revealedCards.get(i).getChoosenOption().getName());
    }
  }
}","private void updateCardImages(){
  for (int i=0; i < cardImages.size(); i++) {
    if (!cardImages.get(i).getLongOverlayText().equals(revealedCards.get(i).getChoosenOption().getName())) {
      cardImages.get(i).setLongOverlayText(revealedCards.get(i).getChoosenOption().getName());
    }
  }
}"
84017,"@Override public void itemStateChanged(ItemEvent e){
  if (e.getSource() instanceof Checkbox) {
    Checkbox checkbox=(Checkbox)e.getSource();
    if (checkboxCardMapping.containsKey(checkbox)) {
      controller.cardChangedState(checkboxCardMapping.get(checkbox),checkbox.getState());
      return;
    }
  }
  new RuntimeException(""String_Node_Str"" + e.getSource());
}","@Override public void itemStateChanged(ItemEvent e){
  if (e.getSource() instanceof Checkbox) {
    Checkbox checkbox=(Checkbox)e.getSource();
    if (checkboxCardMapping.containsKey(checkbox)) {
      controller.cardChangedState(checkboxCardMapping.get(checkbox),checkbox.getState());
      return;
    }
  }
  throw new RuntimeException(""String_Node_Str"" + e.getSource());
}"
84018,"@Test public void eigenvalues(){
  double[][] mat1={{3,0,0},{1,3,1},{2,-1,1}};
  double[][] mat={{0,-1},{1,0}};
  ComplexNumber[] evs1=SquareMatrixOps.eigenvalues(new Matrix(mat1));
  ComplexNumber[] exp1={new ComplexNumber(3,0),new ComplexNumber(2,0),new ComplexNumber(2,0)};
  for (  ComplexNumber ev : evs1) {
    System.out.println(""String_Node_Str"");
    double[][] fuck={{0,0,0},{1,0,1},{2,-1,-2}};
    System.out.println(""String_Node_Str"" + SquareMatrixOps.determinant(new Matrix(fuck)));
    Matrix m=new Matrix(mat1);
    System.out.println(m.subtract(Pattern.diag(ev,m.rows())));
    System.out.println(SquareMatrixOps.determinant(m.subtract(Pattern.diag(ev,m.rows()))));
    assertTrue(SquareMatrixOps.determinant(m.subtract(Pattern.diag(ev,m.rows()))).isZero());
  }
  if (1 == 1)   return;
  double[][] mat2={{0,-1},{1,0}};
  ComplexNumber[] evs2=SquareMatrixOps.eigenvalues(new Matrix(mat2));
  Vector[] vecs=SquareMatrixOps.eigenvectors(new Matrix(mat1),evs1);
  double epsilon=ComplexNumber.getEpsilon();
  ComplexNumber.setEpsilon(1e-6);
  assertTrue(compareArrays(evs1,exp1));
  ComplexNumber.setEpsilon(epsilon);
}","@Test public void eigenvalues(){
  double[][] mat1={{3,0,0},{1,3,1},{2,-1,1}};
  double[][] mat={{0,-1},{1,0}};
  ComplexNumber[] evs1=SquareMatrixOps.eigenvalues(new Matrix(mat1));
  ComplexNumber[] exp1={new ComplexNumber(3,0),new ComplexNumber(2,0),new ComplexNumber(2,0)};
  for (  ComplexNumber ev : evs1) {
    Matrix m=new Matrix(mat1);
    assertTrue(SquareMatrixOps.determinant(m.subtract(Pattern.diag(ev,m.rows()))).isZero());
  }
  if (1 == 1)   return;
  double[][] mat2={{0,-1},{1,0}};
  ComplexNumber[] evs2=SquareMatrixOps.eigenvalues(new Matrix(mat2));
  Vector[] vecs=SquareMatrixOps.eigenvectors(new Matrix(mat1),evs1);
  double epsilon=ComplexNumber.getEpsilon();
  ComplexNumber.setEpsilon(1e-6);
  assertTrue(compareArrays(evs1,exp1));
  ComplexNumber.setEpsilon(epsilon);
}"
84019,"@Test public void det(){
  double[][] f={{1,2,3},{4,5,6},{7,8,7}};
  double[][] g={{1,2},{3,4}};
  double[][] h={{3,0,6,-3},{0,2,3,0},{-4,-7,2,0},{2,0,1,10}};
  ComplexNumber[][] i={{new ComplexNumber(2,1),new ComplexNumber(3,-1),new ComplexNumber(4,-3)},{new ComplexNumber(4,0),new ComplexNumber(6,-1),new ComplexNumber(2,5)},{new ComplexNumber(0,3),new ComplexNumber(2,-1),new ComplexNumber(1,3)}};
  Matrix m=new Matrix(f);
  Matrix t=new Matrix(g);
  Matrix u=new Matrix(h);
  Matrix z=new Matrix(i);
  assertTrue(SquareMatrixOps.determinant(m).equals(new ComplexNumber(6,0)));
  assertTrue(SquareMatrixOps.determinant(t).equals(new ComplexNumber(-2,0)));
  assertTrue(SquareMatrixOps.determinant(new Matrix(9)).equals(new ComplexNumber(1,0)));
  assertTrue(SquareMatrixOps.determinant(u).equals(new ComplexNumber(1404,0)));
  assertTrue(SquareMatrixOps.determinant(z).equals(new ComplexNumber(-118,-84)));
}","@Test public void det(){
  double[][] f={{1,2,3},{4,5,6},{7,8,7}};
  double[][] g={{1,2},{3,4}};
  double[][] h={{3,0,6,-3},{0,2,3,0},{-4,-7,2,0},{2,0,1,10}};
  double[][] sing_arr={{0,0,0},{1,0,1},{2,-1,-2}};
  ComplexNumber[][] i={{new ComplexNumber(2,1),new ComplexNumber(3,-1),new ComplexNumber(4,-3)},{new ComplexNumber(4,0),new ComplexNumber(6,-1),new ComplexNumber(2,5)},{new ComplexNumber(0,3),new ComplexNumber(2,-1),new ComplexNumber(1,3)}};
  Matrix m=new Matrix(f);
  Matrix t=new Matrix(g);
  Matrix u=new Matrix(h);
  Matrix z=new Matrix(i);
  Matrix singular=new Matrix(sing_arr);
  assertTrue(SquareMatrixOps.determinant(singular).isZero());
  assertTrue(SquareMatrixOps.determinant(m).equals(new ComplexNumber(6,0)));
  assertTrue(SquareMatrixOps.determinant(t).equals(new ComplexNumber(-2,0)));
  assertTrue(SquareMatrixOps.determinant(new Matrix(9)).equals(new ComplexNumber(1,0)));
  assertTrue(SquareMatrixOps.determinant(u).equals(new ComplexNumber(1404,0)));
  assertTrue(SquareMatrixOps.determinant(z).equals(new ComplexNumber(-118,-84)));
}"
84020,"@Test public void eigenvalues(){
  double[][] mat1={{3,0,0},{1,3,1},{2,-1,1}};
  ComplexNumber[] evs1=SquareMatrixOps.eigenvalues(new Matrix(mat1));
  ComplexNumber[] exp1={new ComplexNumber(3,0),new ComplexNumber(2,0),new ComplexNumber(2,0)};
  for (  ComplexNumber ev : evs1) {
    System.out.println(ev);
  }
  Vector[] vecs=SquareMatrixOps.eigenvectors(new Matrix(mat1),evs1);
  for (  Vector v : vecs) {
    System.out.println(v);
  }
  double epsilon=ComplexNumber.getEpsilon();
  ComplexNumber.setEpsilon(1e-6);
  assertTrue(compareArrays(evs1,exp1));
  ComplexNumber.setEpsilon(epsilon);
}","@Test public void eigenvalues(){
  double[][] mat1={{3,0,0},{1,3,1},{2,-1,1}};
  double[][] mat={{0,-1},{1,0}};
  ComplexNumber[] evs1=SquareMatrixOps.eigenvalues(new Matrix(mat1));
  ComplexNumber[] exp1={new ComplexNumber(3,0),new ComplexNumber(2,0),new ComplexNumber(2,0)};
  for (  ComplexNumber ev : evs1) {
    System.out.println(""String_Node_Str"");
    double[][] fuck={{0,0,0},{1,0,1},{2,-1,-2}};
    System.out.println(""String_Node_Str"" + SquareMatrixOps.determinant(new Matrix(fuck)));
    Matrix m=new Matrix(mat1);
    System.out.println(m.subtract(Pattern.diag(ev,m.rows())));
    System.out.println(SquareMatrixOps.determinant(m.subtract(Pattern.diag(ev,m.rows()))));
    assertTrue(SquareMatrixOps.determinant(m.subtract(Pattern.diag(ev,m.rows()))).isZero());
  }
  if (1 == 1)   return;
  double[][] mat2={{0,-1},{1,0}};
  ComplexNumber[] evs2=SquareMatrixOps.eigenvalues(new Matrix(mat2));
  Vector[] vecs=SquareMatrixOps.eigenvectors(new Matrix(mat1),evs1);
  double epsilon=ComplexNumber.getEpsilon();
  ComplexNumber.setEpsilon(1e-6);
  assertTrue(compareArrays(evs1,exp1));
  ComplexNumber.setEpsilon(epsilon);
}"
84021,"/** 
 * Send a PImage to four Rainbowduino Device arranged as cube The image gets resized and converted to a Rainbowduino compatible format.
 * @param addrTopLeft the address of the top left rainbowduino
 * @param addrTopRight the address of the top right rainbowduino
 * @param addrBottomLeft the address of the bottom left rainbowduino
 * @param addrBottomRight the address of the bottom right rainbowduino
 * @param data
 * @return true if send was successful
 */
public boolean sendRgbFrame(byte addrTopLeft,byte addrTopRight,byte addrBottomLeft,byte addrBottomRight,PImage data){
  PImage topLeftImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  PImage topRightImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  PImage bottomLeftImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  PImage bottomRightImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  data.loadPixels();
  topLeftImg.copy(data,0,0,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  topRightImg.copy(data,data.width / 2,0,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  bottomLeftImg.copy(data,0,data.width / 2,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  bottomRightImg.copy(data,data.width / 2,data.width / 2,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  data.updatePixels();
  topLeftImg.loadPixels();
  int[] resizedImageTopLeft=RainbowduinoHelper.resizeImage(topLeftImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,topLeftImg.width,topLeftImg.height);
  topLeftImg.updatePixels();
  topRightImg.loadPixels();
  int[] resizedImageTopRight=RainbowduinoHelper.resizeImage(topRightImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,topRightImg.width,topRightImg.height);
  topRightImg.updatePixels();
  bottomLeftImg.loadPixels();
  int[] resizedImageBottomLeft=RainbowduinoHelper.resizeImage(bottomLeftImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,bottomLeftImg.width,bottomLeftImg.height);
  bottomLeftImg.updatePixels();
  bottomRightImg.loadPixels();
  int[] resizedImageBottomRight=RainbowduinoHelper.resizeImage(bottomRightImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,bottomRightImg.width,bottomRightImg.height);
  bottomRightImg.updatePixels();
  boolean btl=sendFrame(addrTopLeft,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageTopLeft));
  boolean btr=sendFrame(addrTopRight,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageTopRight));
  boolean bbl=sendFrame(addrBottomLeft,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageBottomLeft));
  boolean bbr=sendFrame(addrBottomRight,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageBottomRight));
  return btl && btr && bbl&& bbr;
}","/** 
 * Send a PImage to four Rainbowduino Device arranged as cube The image gets resized and converted to a Rainbowduino compatible format.
 * @param addrTopLeft the address of the top left rainbowduino
 * @param addrTopRight the address of the top right rainbowduino
 * @param addrBottomLeft the address of the bottom left rainbowduino
 * @param addrBottomRight the address of the bottom right rainbowduino
 * @param data
 * @return true if send was successful
 */
public boolean sendRgbFrame(byte addrTopLeft,byte addrTopRight,byte addrBottomLeft,byte addrBottomRight,PImage data){
  PImage topLeftImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  PImage topRightImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  PImage bottomLeftImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  PImage bottomRightImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  data.loadPixels();
  topLeftImg.copy(data,0,0,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  topRightImg.copy(data,data.width / 2,0,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  bottomLeftImg.copy(data,0,data.height / 2,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  bottomRightImg.copy(data,data.width / 2,data.height / 2,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  data.updatePixels();
  topLeftImg.loadPixels();
  int[] resizedImageTopLeft=RainbowduinoHelper.resizeImage(topLeftImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,topLeftImg.width,topLeftImg.height);
  topLeftImg.updatePixels();
  topRightImg.loadPixels();
  int[] resizedImageTopRight=RainbowduinoHelper.resizeImage(topRightImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,topRightImg.width,topRightImg.height);
  topRightImg.updatePixels();
  bottomLeftImg.loadPixels();
  int[] resizedImageBottomLeft=RainbowduinoHelper.resizeImage(bottomLeftImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,bottomLeftImg.width,bottomLeftImg.height);
  bottomLeftImg.updatePixels();
  bottomRightImg.loadPixels();
  int[] resizedImageBottomRight=RainbowduinoHelper.resizeImage(bottomRightImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,bottomRightImg.width,bottomRightImg.height);
  bottomRightImg.updatePixels();
  boolean btl=sendFrame(addrTopLeft,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageTopLeft));
  boolean btr=sendFrame(addrTopRight,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageTopRight));
  boolean bbl=sendFrame(addrBottomLeft,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageBottomLeft));
  boolean bbr=sendFrame(addrBottomRight,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageBottomRight));
  return btl && btr && bbl&& bbr;
}"
84022,"private void saveToTable(SearchNode n){
  if (transpositionTable.size() < TABLE_SIZE)   transpositionTable.put(n.gameState,n);
}","private void saveToTable(SearchNode n){
  if (transpositionTable.size() < TABLE_SIZE && n.depth >= 2) {
    transpositionTable.put(n.gameState,n);
  }
}"
84023,"private Action iterative_deepening(State root) throws InvalidActionException {
  ActionValuePair evenGuess=new ActionValuePair(null,0);
  ActionValuePair oddGuess=new ActionValuePair(null,0);
  SearchNode rootNode=new SearchNode();
  rootNode.gameState=root;
  rootNode.maxnode=this.maximizer;
  int d;
  for (d=1; d < this.maxdepth; d++) {
    rootNode.depth=d;
    try {
      if (d % 2 == 0)       evenGuess=MTD(rootNode,evenGuess,d);
 else       oddGuess=MTD(rootNode,oddGuess,d);
    }
 catch (    IllegalStateException ex) {
      break;
    }
    System.out.printf(""String_Node_Str"",0.001 * (System.currentTimeMillis() - startTimeMillis));
    System.out.print(""String_Node_Str"" + d + ""String_Node_Str""+ (d % 2 == 0 ? evenGuess : oddGuess));
    System.out.println();
    if (times_up())     break;
  }
  String ps=saveSearchStatistics(d);
  System.out.print(ps);
  if (d % 2 == 0)   return evenGuess.action;
 else   return oddGuess.action;
}","private Action iterative_deepening(State root) throws InvalidActionException {
  ActionValuePair evenGuess=new ActionValuePair(null,0);
  ActionValuePair oddGuess=new ActionValuePair(null,0);
  SearchNode rootNode=new SearchNode();
  rootNode.gameState=root;
  rootNode.maxnode=this.maximizer;
  int d;
  boolean early_exit=false;
  for (d=1; d < this.maxdepth; d++) {
    rootNode.depth=d;
    try {
      if (d % 2 == 0)       evenGuess=MTD(rootNode,evenGuess,d);
 else       oddGuess=MTD(rootNode,oddGuess,d);
    }
 catch (    IllegalStateException ex) {
      early_exit=true;
      break;
    }
    System.out.printf(""String_Node_Str"",0.001 * (System.currentTimeMillis() - startTimeMillis));
    System.out.print(""String_Node_Str"" + d + ""String_Node_Str""+ (d % 2 == 0 ? evenGuess : oddGuess));
    System.out.println();
    if (times_up()) {
      early_exit=true;
      break;
    }
  }
  String ps=saveSearchStatistics(d);
  System.out.print(ps);
  if (!early_exit) {
  }
 else {
    System.out.println(""String_Node_Str"" + d);
  }
  d--;
  Action move;
  if (d % 2 == 0)   move=evenGuess.action;
 else   move=oddGuess.action;
  System.out.println(""String_Node_Str"" + move);
  return move;
}"
84024,"@SuppressWarnings(""String_Node_Str"") private ActionValuePair MT(SearchNode n,int gamma,int depth) throws InvalidActionException, IllegalStateException {
  checkedNodes++;
  if (DEBUG)   GraphVizPrinter.setState(n.gameState);
  if (depth > 4) {
    if (times_up())     throw new IllegalStateException(""String_Node_Str"");
  }
  populateFromTable(n);
  ActionValuePair bestAction=new ActionValuePair(null,0);
  if (depth == 0 || n.gameState.getStatus() != Status.Ongoing) {
    leafNodes++;
    if (n.f_minus == LOSE && n.f_plus == WIN) {
      bestAction.value=(int)n.gameState.heuristic();
    }
 else     if (n.f_plus == WIN) {
      bestAction.value=n.f_minus;
    }
 else {
      bestAction.value=n.f_plus;
    }
    if (DEBUG)     GraphVizPrinter.setRelation(n.gameState,bestAction.value,n.gameState.getParentState());
  }
 else {
    bestAction.value=n.maxnode ? LOSE : WIN;
    List<ActionValuePair> actions=buildAVPList(n.gameState.getActions());
    int[] depthsToSearch;
    if (depth > 4) {
      depthsToSearch=new int[2];
      depthsToSearch[0]=depth - 2;
      depthsToSearch[1]=depth;
    }
 else {
      depthsToSearch=new int[1];
      depthsToSearch[0]=depth;
    }
    for (int i=0; i < depthsToSearch.length; i++) {
      loopsHit++;
      for (      ActionValuePair avp : actions) {
        actionsChecked++;
        if (n.maxnode) {
          if (bestAction.value >= gamma)           break;
        }
 else {
          if (bestAction.value < gamma)           break;
        }
        State childState=avp.action.applyTo(n.gameState);
        SearchNode c=new SearchNode();
        c.gameState=childState;
        c.maxnode=!n.maxnode;
        c.depth=depthsToSearch[i];
        populateFromTable(c);
        int currentBound=n.maxnode ? c.f_plus : c.f_minus;
        ActionValuePair bestChildAction;
        if ((n.maxnode && currentBound >= gamma) || (!n.maxnode && currentBound < gamma)) {
          bestChildAction=MT(c,gamma,depthsToSearch[i] - 1);
        }
 else {
          bestChildAction=new ActionValuePair(null,currentBound);
        }
        bestChildAction.action=avp.action;
        avp.value=bestChildAction.value;
        if (n.maxnode)         bestAction=maxAVP(bestAction,bestChildAction);
 else         bestAction=minAVP(bestAction,bestChildAction);
      }
      if (depthsToSearch.length > 1 && i == 0) {
        if (n.maxnode) {
          Collections.sort(actions,Collections.reverseOrder());
        }
 else {
          Collections.sort(actions);
        }
      }
    }
    if (DEBUG)     GraphVizPrinter.setRelation(n.gameState,bestAction.value,n.gameState.getParentState(),gamma - 1,gamma);
  }
  if (bestAction.value >= gamma) {
    n.f_minus=bestAction.value;
    n.type=EntryType.LOWERBOUND;
  }
 else {
    n.f_plus=bestAction.value;
    n.type=EntryType.UPPERBOUND;
  }
  n.bestAction=bestAction.action;
  n.depth=depth;
  saveToTable(n);
  return bestAction;
}","@SuppressWarnings(""String_Node_Str"") private ActionValuePair MT(SearchNode n,int gamma,int depth,int iter) throws InvalidActionException, IllegalStateException {
  checkedNodes++;
  if (DEBUG)   GraphVizPrinter.setState(n.gameState);
  if (depth > 4) {
    if (times_up())     throw new IllegalStateException(""String_Node_Str"");
  }
  populateFromTable(n);
  ActionValuePair bestAction=new ActionValuePair(null,0);
  if (depth == 0 || n.gameState.getStatus() != Status.Ongoing) {
    leafNodes++;
    if (n.f_minus == LOSE && n.f_plus == WIN) {
      bestAction.value=(int)n.gameState.heuristic();
      int a=1;
    }
 else     if (n.f_plus == WIN) {
      bestAction.value=n.f_minus;
    }
 else {
      bestAction.value=n.f_plus;
    }
    if (DEBUG)     GraphVizPrinter.setRelation(n.gameState,bestAction.value,n.gameState.getParentState(),iter);
  }
 else {
    List<ActionValuePair> actions=buildAVPList(n.gameState.getActions(),n.bestAction);
    int[] depthsToSearch;
    if (depth > 4) {
      depthsToSearch=new int[2];
      depthsToSearch[0]=depth - 2;
      depthsToSearch[1]=depth;
    }
 else {
      depthsToSearch=new int[1];
      depthsToSearch[0]=depth;
    }
    for (int i=0; i < depthsToSearch.length; i++) {
      loopsHit++;
      bestAction.value=n.maxnode ? LOSE : WIN;
      for (      ActionValuePair avp : actions) {
        actionsChecked++;
        if (n.maxnode) {
          if (bestAction.value >= gamma)           break;
        }
 else {
          if (bestAction.value < gamma)           break;
        }
        State childState=avp.action.applyTo(n.gameState);
        SearchNode c=new SearchNode();
        c.gameState=childState;
        c.maxnode=!n.maxnode;
        c.depth=depthsToSearch[i];
        populateFromTable(c);
        int currentBound=n.maxnode ? c.f_plus : c.f_minus;
        ActionValuePair bestChildAction;
        if ((n.maxnode && currentBound >= gamma) || (!n.maxnode && currentBound < gamma)) {
          bestChildAction=MT(c,gamma,depthsToSearch[i] - 1,iter);
        }
 else {
          bestChildAction=new ActionValuePair(null,currentBound);
        }
        bestChildAction.action=avp.action;
        avp.value=bestChildAction.value;
        if (n.maxnode)         bestAction=maxAVP(bestAction,bestChildAction);
 else         bestAction=minAVP(bestAction,bestChildAction);
      }
      if (depthsToSearch.length > 1 && i == 0) {
        if (n.maxnode) {
          Collections.sort(actions,Collections.reverseOrder());
        }
 else {
          Collections.sort(actions);
        }
      }
    }
    if (DEBUG)     GraphVizPrinter.setRelation(n.gameState,bestAction.value,n.gameState.getParentState(),gamma - 1,gamma,iter);
  }
  if (bestAction.value >= gamma) {
    n.f_minus=bestAction.value;
    n.type=EntryType.LOWERBOUND;
  }
 else {
    n.f_plus=bestAction.value;
    n.type=EntryType.UPPERBOUND;
  }
  n.bestAction=bestAction.action;
  n.depth=depth;
  saveToTable(n);
  return bestAction;
}"
84025,"@Override public Action decide(State state){
  leafNodes=0;
  checkedNodes=0;
  loopsHit=0;
  actionsChecked=0;
  cacheHits=0;
  startTimeMillis=System.currentTimeMillis();
  transpositionTable=new HashMap<State,SearchNode>(TABLE_SIZE);
  try {
    Action a=iterative_deepening(state);
    if (DEBUG)     GraphVizPrinter.setDecision(a.applyTo(state));
    if (DEBUG)     GraphVizPrinter.printGraphToFile();
    return a;
  }
 catch (  InvalidActionException e) {
    e.printStackTrace();
    return null;
  }
}","@Override public Action decide(State state){
  leafNodes=0;
  checkedNodes=0;
  loopsHit=0;
  actionsChecked=0;
  cacheHits=0;
  startTimeMillis=System.currentTimeMillis();
  transpositionTable=new HashMap<State,SearchNode>(TABLE_SIZE);
  try {
    if (DEBUG)     GraphVizPrinter.setState(state);
    Action a=iterative_deepening(state);
    if (DEBUG)     GraphVizPrinter.setDecision(a.applyTo(state));
    if (DEBUG)     GraphVizPrinter.printGraphToFile();
    return a;
  }
 catch (  InvalidActionException e) {
    e.printStackTrace();
    return null;
  }
}"
84026,"private boolean times_up(){
  return (System.currentTimeMillis() - startTimeMillis) > searchTime;
}","private boolean times_up(){
  boolean timesUp=(System.currentTimeMillis() - startTimeMillis) > searchTime;
  return timesUp;
}"
84027,"private ActionValuePair MTD(SearchNode n,ActionValuePair firstGuess,int depth) throws InvalidActionException {
  ActionValuePair g=firstGuess;
  int f_plus=WIN;
  int f_minus=LOSE;
  do {
    int gamma;
    if (g.value == f_minus) {
      gamma=g.value + 1;
    }
 else {
      gamma=g.value;
    }
    g=MT(n,gamma,depth);
    if (g.value < gamma) {
      f_plus=g.value;
    }
 else {
      f_minus=g.value;
    }
  }
 while (f_plus != f_minus);
  return g;
}","private ActionValuePair MTD(SearchNode n,ActionValuePair firstGuess,int depth) throws InvalidActionException {
  ActionValuePair g=firstGuess;
  int f_plus=WIN;
  int f_minus=LOSE;
  int iter=0;
  do {
    int gamma;
    if (g.value == f_minus) {
      gamma=g.value + 1;
    }
 else {
      gamma=g.value;
    }
    g=MT(n,gamma,depth,iter);
    if (g.value < gamma) {
      f_plus=g.value;
    }
 else {
      f_minus=g.value;
    }
    iter++;
  }
 while (f_plus != f_minus);
  return g;
}"
84028,"public boolean lose(Player player,boolean died){
  Player loser=player;
  Player winner;
  if (starter == player) {
    winner=target;
  }
 else {
    winner=starter;
  }
  loser.sendMessage(Duels.getMessage(""String_Node_Str""));
  winner.sendMessage(Duels.getMessage(""String_Node_Str""));
  String winnerName=winner.getName();
  String loserName=loser.getName();
  double winnerRating=Duels.highscores.getDouble(winnerName + ""String_Node_Str"",Duels.STARTING_RATING);
  double loserRating=Duels.highscores.getDouble(loserName + ""String_Node_Str"",Duels.STARTING_RATING);
  double winnerChance=1 / (1 + Math.pow(10,(loserRating - winnerRating) / 400));
  double outcome;
  if (died && Duels.RANKING_WEIGHT != 0) {
    outcome=((double)winner.getHealth()) / 20;
    outcome=Math.pow(outcome,1 / Duels.RANKING_WEIGHT);
  }
 else {
    outcome=1;
  }
  double change=Duels.RANKING_MAGNITUDE * (outcome - winnerChance);
  Duels.highscores.set(winnerName + ""String_Node_Str"",winnerRating + change);
  Duels.highscores.set(loserName + ""String_Node_Str"",loserRating - change);
  Duels.highscores.set(winnerName + ""String_Node_Str"",Duels.highscores.getInt(winnerName + ""String_Node_Str"",0) + 1);
  Duels.highscores.set(loserName + ""String_Node_Str"",Duels.highscores.getInt(loserName + ""String_Node_Str"",0) + 1);
  Duels.highscores.set(winnerName + ""String_Node_Str"",Duels.highscores.getInt(winnerName + ""String_Node_Str"",0) + 1);
  Duels.highscores.set(loserName + ""String_Node_Str"",Duels.highscores.getInt(loserName + ""String_Node_Str"",0) + 1);
  if (Duels.economy != null) {
    Duels.economy.depositPlayer(winner.getName(),starterStake + targetStake);
  }
  Duels.duels.remove(winner);
  Duels.duels.remove(loser);
  if (!keepItems) {
    Inventory loserInv=loser.getInventory();
    Inventory winnerInv=winner.getInventory();
    ItemStack[] transfer=loserInv.getContents();
    loserInv.clear();
    for (int i=0; i < transfer.length; i++) {
      if (transfer[i] != null) {
        HashMap<Integer,ItemStack> left=winnerInv.addItem(transfer[i]);
        if (!left.isEmpty()) {
          ItemStack[] drop=(ItemStack[])left.values().toArray();
          winner.getWorld().dropItemNaturally(winner.getLocation(),drop[0]);
        }
      }
    }
    return false;
  }
  return true;
}","public boolean lose(Player player,boolean died){
  Player loser=player;
  Player winner;
  if (starter == player) {
    winner=target;
  }
 else {
    winner=starter;
  }
  loser.sendMessage(Duels.getMessage(""String_Node_Str""));
  winner.sendMessage(Duels.getMessage(""String_Node_Str""));
  String winnerName=winner.getName();
  String loserName=loser.getName();
  double winnerRating=Duels.highscores.getDouble(winnerName + ""String_Node_Str"",Duels.STARTING_RATING);
  double loserRating=Duels.highscores.getDouble(loserName + ""String_Node_Str"",Duels.STARTING_RATING);
  double winnerChance=1 / (1 + Math.pow(10,(loserRating - winnerRating) / 400));
  double outcome;
  if (died && Duels.RANKING_WEIGHT != 0) {
    outcome=(double)winner.getHealth() / 20;
    outcome=Math.pow(outcome,1 / Duels.RANKING_WEIGHT);
  }
 else {
    outcome=1;
  }
  double change=Duels.RANKING_MAGNITUDE * (outcome - winnerChance);
  Duels.highscores.set(winnerName + ""String_Node_Str"",winnerRating + change);
  Duels.highscores.set(loserName + ""String_Node_Str"",loserRating - change);
  Duels.highscores.set(winnerName + ""String_Node_Str"",Duels.highscores.getInt(winnerName + ""String_Node_Str"",0) + 1);
  Duels.highscores.set(loserName + ""String_Node_Str"",Duels.highscores.getInt(loserName + ""String_Node_Str"",0) + 1);
  Duels.highscores.set(winnerName + ""String_Node_Str"",Duels.highscores.getInt(winnerName + ""String_Node_Str"",0) + 1);
  Duels.highscores.set(loserName + ""String_Node_Str"",Duels.highscores.getInt(loserName + ""String_Node_Str"",0) + 1);
  if (Duels.economy != null) {
    Duels.economy.depositPlayer(winner.getName(),starterStake + targetStake);
  }
  Duels.duels.remove(winner);
  Duels.duels.remove(loser);
  if (!keepItems) {
    Inventory loserInv=loser.getInventory();
    Inventory winnerInv=winner.getInventory();
    ItemStack[] transfer=loserInv.getContents();
    loserInv.clear();
    for (    ItemStack element : transfer) {
      if (element != null) {
        HashMap<Integer,ItemStack> left=winnerInv.addItem(element);
        if (!left.isEmpty()) {
          ItemStack[] drop=(ItemStack[])left.values().toArray();
          winner.getWorld().dropItemNaturally(winner.getLocation(),drop[0]);
        }
      }
    }
    return false;
  }
  return true;
}"
84029,"/** 
 * Default constructor.
 * @param properties
 */
public SearchService(Properties properties){
  String host=properties.getProperty(""String_Node_Str"");
  if (host != null) {
    host=_host;
  }
  String port=properties.getProperty(""String_Node_Str"");
  if (port != null) {
    _port=Integer.parseInt(port);
  }
  _indexCommand=properties.getProperty(""String_Node_Str"");
  _configFile=properties.getProperty(""String_Node_Str"");
  if (_indexCommand == null || _configFile == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Default constructor.
 * @param properties
 */
public SearchService(Properties properties){
  String host=properties.getProperty(""String_Node_Str"");
  if (host == null) {
    host=_host;
  }
  String port=properties.getProperty(""String_Node_Str"");
  if (port == null) {
    _port=Integer.parseInt(port);
  }
  _indexCommand=properties.getProperty(""String_Node_Str"");
  _configFile=properties.getProperty(""String_Node_Str"");
  if (_indexCommand == null || _configFile == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
84030,"/** 
 * Default constructor.
 * @param properties
 */
public SearchService(Properties properties){
  String host=properties.getProperty(""String_Node_Str"");
  if (host == null) {
    host=_host;
  }
  String port=properties.getProperty(""String_Node_Str"");
  if (port == null) {
    _port=Integer.parseInt(port);
  }
  _indexCommand=properties.getProperty(""String_Node_Str"");
  _configFile=properties.getProperty(""String_Node_Str"");
  if (_indexCommand == null || _configFile == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Default constructor.
 * @param properties
 */
public SearchService(Properties properties){
  String host=properties.getProperty(""String_Node_Str"");
  if (host != null) {
    _host=host;
  }
  String port=properties.getProperty(""String_Node_Str"");
  if (port != null) {
    _port=Integer.parseInt(port);
  }
  _indexCommand=properties.getProperty(""String_Node_Str"");
  _configFile=properties.getProperty(""String_Node_Str"");
  if (_indexCommand == null || _configFile == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
84031,"public void tick(){
  delta=Gdx.graphics.getDeltaTime();
  GameInstance.getInstance().update(delta);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
  ra.update();
{
    for (    NoteJumper nj : noteJumpers) {
      if (!nj.bofNote.isPlayedAt(ra.getTick())) {
        nj.alive=false;
      }
    }
    boolean found;
    do {
      found=false;
      for (int i=0; i < noteJumpers.size; i++) {
        if (noteJumpers.get(i) != null && noteJumpers.get(i).alive == false) {
          noteJumpers.removeIndex(i);
          found=true;
          break;
        }
      }
    }
 while (found);
  }
  angleXBack+=MathUtils.sin(startTime) * delta * 10f;
  angleYBack+=MathUtils.cos(startTime) * delta * 5f;
  angleXFront+=MathUtils.sin(startTime) * delta * 10f;
  angleYFront+=MathUtils.cos(startTime) * delta * 5f;
  if (GameInstance.getInstance().player.position.y < -1185.0) {
    cam.position.set(cam.position.x,-1185.0f,29);
  }
 else {
    cam.position.set(cam.position.x,GameInstance.getInstance().player.position.y,29);
  }
  if (shakeCam > 0) {
    cam.rotate(MathUtils.sin(shakeCam) / 10.f,0,0,1);
    shakeCam=Math.max(0,shakeCam - (delta * 100f));
  }
 else {
    cam.up.set(0,1,0);
  }
  cam.update();
  for (int i=0; i < GameInstance.getInstance().bullets.size; ++i) {
    Ammo bullet=GameInstance.getInstance().bullets.get(i);
    bulletSplash=false;
    if (bullet instanceof Rocket) {
      if (((Rocket)bullet).hit) {
        disortFactor=1;
        bulletSplash=true;
        if (shakeCam == 0) {
          shakeCam=20;
        }
      }
    }
    if (bullet instanceof Mine) {
      if (((Mine)bullet).hit) {
        disortFactor=1;
        bulletSplash=true;
        if (shakeCam == 0) {
          shakeCam=20;
        }
      }
    }
  }
  if (bulletSplash) {
    disortFactor=Math.max(0,disortFactor - (delta * 5.f));
  }
  bloomFactor=Math.max(0,bloomFactor - delta);
  disortFactor=Math.max(0,disortFactor - delta);
  highlightTimer-=delta;
  if (highlightTimer < 0) {
    highlightCnt++;
    highlightTimer=0.0001f;
  }
  if (GameInstance.getInstance().showWeaponTextYAnimate < Gdx.graphics.getHeight() + 100) {
    GameInstance.getInstance().showWeaponTextYAnimate=Math.min(Gdx.graphics.getHeight() + 100,GameInstance.getInstance().showWeaponTextYAnimate + (delta * 300f));
  }
  animateFont=Math.max(1.0f,animateFont - (delta * 10.f));
  for (int i=0; i < GameInstance.getInstance().blocks.size; ++i) {
    Block block=GameInstance.getInstance().blocks.get(i);
    if (block.id == highlightCnt) {
      block.highlightAnimate=0.4f;
    }
    block.highlightAnimate=Math.max(0,block.highlightAnimate - delta);
    if (block instanceof JumpBlock) {
      JumpBlock jumbBlock=(JumpBlock)block;
      jumbBlock.update();
{
        float jani=jumpani;
        model.idt();
        tmp.setToTranslation(jumbBlock.position.x,jumbBlock.position.y + (jani),0);
        model.mul(tmp);
        tmp.setToScaling(0.90f,0.95f * (1 - jani),0.95f);
        model.mul(tmp);
        transShader.setUniformMatrix(""String_Node_Str"",model);
        transShader.setUniformf(""String_Node_Str"",Resources.getInstance().jumpBlockColor[0],Resources.getInstance().jumpBlockColor[1],Resources.getInstance().jumpBlockColor[2],Resources.getInstance().jumpBlockColor[3] + jumbBlock.jumpAnim + block.highlightAnimate);
        blockModel.render(transShader,GL20.GL_TRIANGLES);
        transShader.setUniformf(""String_Node_Str"",Resources.getInstance().jumpBlockEdgeColor[0],Resources.getInstance().jumpBlockEdgeColor[1],Resources.getInstance().jumpBlockEdgeColor[2],Resources.getInstance().jumpBlockEdgeColor[3] + jumbBlock.jumpAnim);
        wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
      }
    }
 else {
      if (oldSongCounter != songCounter) {
        oldSongCounter=songCounter;
        colorMix=0;
      }
      colorMix=Math.min(1,colorMix + delta / 50.f);
      if (songCounter == 0) {
        Resources.getInstance().blockColor[0]=Resources.getInstance().blockColor1[0] * colorMix + (Resources.getInstance().blockColor2[0] * (1 - colorMix));
        Resources.getInstance().blockColor[1]=Resources.getInstance().blockColor1[1] * colorMix + (Resources.getInstance().blockColor2[1] * (1 - colorMix));
        Resources.getInstance().blockColor[2]=Resources.getInstance().blockColor1[2] * colorMix + (Resources.getInstance().blockColor2[2] * (1 - colorMix));
        Resources.getInstance().blockColor[3]=Resources.getInstance().blockColor1[3] * colorMix + (Resources.getInstance().blockColor2[3] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[0]=Resources.getInstance().blockEdgeColor1[0] * colorMix + (Resources.getInstance().blockEdgeColor2[0] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[1]=Resources.getInstance().blockEdgeColor1[1] * colorMix + (Resources.getInstance().blockEdgeColor2[1] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[2]=Resources.getInstance().blockEdgeColor1[2] * colorMix + (Resources.getInstance().blockEdgeColor2[2] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[3]=Resources.getInstance().blockEdgeColor1[3] * colorMix + (Resources.getInstance().blockEdgeColor2[3] * (1 - colorMix));
      }
 else       if (songCounter == 1) {
        Resources.getInstance().blockColor[0]=Resources.getInstance().blockColor2[0] * colorMix + (Resources.getInstance().blockColor3[0] * (1 - colorMix));
        Resources.getInstance().blockColor[1]=Resources.getInstance().blockColor2[1] * colorMix + (Resources.getInstance().blockColor3[1] * (1 - colorMix));
        Resources.getInstance().blockColor[2]=Resources.getInstance().blockColor2[2] * colorMix + (Resources.getInstance().blockColor3[2] * (1 - colorMix));
        Resources.getInstance().blockColor[3]=Resources.getInstance().blockColor2[3] * colorMix + (Resources.getInstance().blockColor3[3] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[0]=Resources.getInstance().blockEdgeColor2[0] * colorMix + (Resources.getInstance().blockEdgeColor3[0] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[1]=Resources.getInstance().blockEdgeColor2[1] * colorMix + (Resources.getInstance().blockEdgeColor3[1] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[2]=Resources.getInstance().blockEdgeColor2[2] * colorMix + (Resources.getInstance().blockEdgeColor3[2] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[3]=Resources.getInstance().blockEdgeColor2[3] * colorMix + (Resources.getInstance().blockEdgeColor3[3] * (1 - colorMix));
      }
 else       if (songCounter == 2) {
        Resources.getInstance().blockColor[0]=Resources.getInstance().blockColor3[0] * colorMix + (Resources.getInstance().blockColor4[0] * (1 - colorMix));
        Resources.getInstance().blockColor[1]=Resources.getInstance().blockColor3[1] * colorMix + (Resources.getInstance().blockColor4[1] * (1 - colorMix));
        Resources.getInstance().blockColor[2]=Resources.getInstance().blockColor3[2] * colorMix + (Resources.getInstance().blockColor4[2] * (1 - colorMix));
        Resources.getInstance().blockColor[3]=Resources.getInstance().blockColor3[3] * colorMix + (Resources.getInstance().blockColor4[3] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[0]=Resources.getInstance().blockEdgeColor3[0] * colorMix + (Resources.getInstance().blockEdgeColor4[0] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[1]=Resources.getInstance().blockEdgeColor3[1] * colorMix + (Resources.getInstance().blockEdgeColor4[1] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[2]=Resources.getInstance().blockEdgeColor3[2] * colorMix + (Resources.getInstance().blockEdgeColor4[2] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[3]=Resources.getInstance().blockEdgeColor3[3] * colorMix + (Resources.getInstance().blockEdgeColor4[3] * (1 - colorMix));
      }
 else       if (songCounter == 3) {
        Resources.getInstance().blockColor[0]=Resources.getInstance().blockColor4[0] * colorMix + (Resources.getInstance().blockColor5[0] * (1 - colorMix));
        Resources.getInstance().blockColor[1]=Resources.getInstance().blockColor4[1] * colorMix + (Resources.getInstance().blockColor5[1] * (1 - colorMix));
        Resources.getInstance().blockColor[2]=Resources.getInstance().blockColor4[2] * colorMix + (Resources.getInstance().blockColor5[2] * (1 - colorMix));
        Resources.getInstance().blockColor[3]=Resources.getInstance().blockColor4[3] * colorMix + (Resources.getInstance().blockColor5[3] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[0]=Resources.getInstance().blockEdgeColor4[0] * colorMix + (Resources.getInstance().blockEdgeColor5[0] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[1]=Resources.getInstance().blockEdgeColor4[1] * colorMix + (Resources.getInstance().blockEdgeColor5[1] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[2]=Resources.getInstance().blockEdgeColor4[2] * colorMix + (Resources.getInstance().blockEdgeColor5[2] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[3]=Resources.getInstance().blockEdgeColor4[3] * colorMix + (Resources.getInstance().blockEdgeColor5[3] * (1 - colorMix));
      }
 else       if (songCounter == 4) {
        Resources.getInstance().blockColor[0]=Resources.getInstance().blockColor5[0] * colorMix + (Resources.getInstance().blockColor6[0] * (1 - colorMix));
        Resources.getInstance().blockColor[1]=Resources.getInstance().blockColor5[1] * colorMix + (Resources.getInstance().blockColor6[1] * (1 - colorMix));
        Resources.getInstance().blockColor[2]=Resources.getInstance().blockColor5[2] * colorMix + (Resources.getInstance().blockColor6[2] * (1 - colorMix));
        Resources.getInstance().blockColor[3]=Resources.getInstance().blockColor5[3] * colorMix + (Resources.getInstance().blockColor6[3] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[0]=Resources.getInstance().blockEdgeColor5[0] * colorMix + (Resources.getInstance().blockEdgeColor6[0] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[1]=Resources.getInstance().blockEdgeColor5[1] * colorMix + (Resources.getInstance().blockEdgeColor6[1] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[2]=Resources.getInstance().blockEdgeColor5[2] * colorMix + (Resources.getInstance().blockEdgeColor6[2] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[3]=Resources.getInstance().blockEdgeColor5[3] * colorMix + (Resources.getInstance().blockEdgeColor6[3] * (1 - colorMix));
      }
 else       if (songCounter == 5) {
        Resources.getInstance().blockColor[0]=Resources.getInstance().blockColor6[0] * colorMix + (Resources.getInstance().blockColor7[0] * (1 - colorMix));
        Resources.getInstance().blockColor[1]=Resources.getInstance().blockColor6[1] * colorMix + (Resources.getInstance().blockColor7[1] * (1 - colorMix));
        Resources.getInstance().blockColor[2]=Resources.getInstance().blockColor6[2] * colorMix + (Resources.getInstance().blockColor7[2] * (1 - colorMix));
        Resources.getInstance().blockColor[3]=Resources.getInstance().blockColor6[3] * colorMix + (Resources.getInstance().blockColor7[3] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[0]=Resources.getInstance().blockEdgeColor6[0] * colorMix + (Resources.getInstance().blockEdgeColor7[0] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[1]=Resources.getInstance().blockEdgeColor6[1] * colorMix + (Resources.getInstance().blockEdgeColor7[1] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[2]=Resources.getInstance().blockEdgeColor6[2] * colorMix + (Resources.getInstance().blockEdgeColor7[2] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[3]=Resources.getInstance().blockEdgeColor6[3] * colorMix + (Resources.getInstance().blockEdgeColor7[3] * (1 - colorMix));
      }
    }
  }
}","public void tick(){
  delta=Gdx.graphics.getDeltaTime();
  GameInstance.getInstance().update(delta);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
  ra.update();
{
    for (    NoteJumper nj : noteJumpers) {
      if (!nj.bofNote.isPlayedAt(ra.getTick())) {
        nj.alive=false;
      }
    }
    boolean found;
    do {
      found=false;
      for (int i=0; i < noteJumpers.size; i++) {
        if (noteJumpers.get(i) != null && noteJumpers.get(i).alive == false) {
          noteJumpers.removeIndex(i);
          found=true;
          break;
        }
      }
    }
 while (found);
  }
  angleXBack+=MathUtils.sin(startTime) * delta * 10f;
  angleYBack+=MathUtils.cos(startTime) * delta * 5f;
  angleXFront+=MathUtils.sin(startTime) * delta * 10f;
  angleYFront+=MathUtils.cos(startTime) * delta * 5f;
  if (GameInstance.getInstance().player.position.y < -1185.0) {
    cam.position.set(cam.position.x,-1185.0f,29);
  }
 else {
    cam.position.set(cam.position.x,GameInstance.getInstance().player.position.y,29);
  }
  if (shakeCam > 0) {
    cam.rotate(MathUtils.sin(shakeCam) / 10.f,0,0,1);
    shakeCam=Math.max(0,shakeCam - (delta * 100f));
  }
 else {
    cam.up.set(0,1,0);
  }
  cam.update();
  for (int i=0; i < GameInstance.getInstance().bullets.size; ++i) {
    Ammo bullet=GameInstance.getInstance().bullets.get(i);
    bulletSplash=false;
    if (bullet instanceof Rocket) {
      if (((Rocket)bullet).hit) {
        disortFactor=1;
        bulletSplash=true;
        if (shakeCam == 0) {
          shakeCam=20;
        }
      }
    }
    if (bullet instanceof Mine) {
      if (((Mine)bullet).hit) {
        disortFactor=1;
        bulletSplash=true;
        if (shakeCam == 0) {
          shakeCam=20;
        }
      }
    }
  }
  if (bulletSplash) {
    disortFactor=Math.max(0,disortFactor - (delta * 5.f));
  }
  bloomFactor=Math.max(0,bloomFactor - delta);
  disortFactor=Math.max(0,disortFactor - delta);
  highlightTimer-=delta;
  if (highlightTimer < 0) {
    highlightCnt++;
    highlightTimer=0.0001f;
  }
  if (GameInstance.getInstance().showWeaponTextYAnimate < Gdx.graphics.getHeight() + 100) {
    GameInstance.getInstance().showWeaponTextYAnimate=Math.min(Gdx.graphics.getHeight() + 100,GameInstance.getInstance().showWeaponTextYAnimate + (delta * 300f));
  }
  animateFont=Math.max(1.0f,animateFont - (delta * 10.f));
  for (int i=0; i < GameInstance.getInstance().blocks.size; ++i) {
    Block block=GameInstance.getInstance().blocks.get(i);
    if (block.id == highlightCnt) {
      block.highlightAnimate=0.4f;
    }
    block.highlightAnimate=Math.max(0,block.highlightAnimate - delta);
    if (block instanceof JumpBlock) {
      JumpBlock jumbBlock=(JumpBlock)block;
      jumbBlock.update();
    }
 else {
      if (oldSongCounter != songCounter) {
        oldSongCounter=songCounter;
        colorMix=0;
      }
      colorMix=Math.min(1,colorMix + delta / 50.f);
      if (songCounter == 0) {
        Resources.getInstance().blockColor[0]=Resources.getInstance().blockColor1[0] * colorMix + (Resources.getInstance().blockColor2[0] * (1 - colorMix));
        Resources.getInstance().blockColor[1]=Resources.getInstance().blockColor1[1] * colorMix + (Resources.getInstance().blockColor2[1] * (1 - colorMix));
        Resources.getInstance().blockColor[2]=Resources.getInstance().blockColor1[2] * colorMix + (Resources.getInstance().blockColor2[2] * (1 - colorMix));
        Resources.getInstance().blockColor[3]=Resources.getInstance().blockColor1[3] * colorMix + (Resources.getInstance().blockColor2[3] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[0]=Resources.getInstance().blockEdgeColor1[0] * colorMix + (Resources.getInstance().blockEdgeColor2[0] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[1]=Resources.getInstance().blockEdgeColor1[1] * colorMix + (Resources.getInstance().blockEdgeColor2[1] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[2]=Resources.getInstance().blockEdgeColor1[2] * colorMix + (Resources.getInstance().blockEdgeColor2[2] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[3]=Resources.getInstance().blockEdgeColor1[3] * colorMix + (Resources.getInstance().blockEdgeColor2[3] * (1 - colorMix));
      }
 else       if (songCounter == 1) {
        Resources.getInstance().blockColor[0]=Resources.getInstance().blockColor2[0] * colorMix + (Resources.getInstance().blockColor3[0] * (1 - colorMix));
        Resources.getInstance().blockColor[1]=Resources.getInstance().blockColor2[1] * colorMix + (Resources.getInstance().blockColor3[1] * (1 - colorMix));
        Resources.getInstance().blockColor[2]=Resources.getInstance().blockColor2[2] * colorMix + (Resources.getInstance().blockColor3[2] * (1 - colorMix));
        Resources.getInstance().blockColor[3]=Resources.getInstance().blockColor2[3] * colorMix + (Resources.getInstance().blockColor3[3] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[0]=Resources.getInstance().blockEdgeColor2[0] * colorMix + (Resources.getInstance().blockEdgeColor3[0] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[1]=Resources.getInstance().blockEdgeColor2[1] * colorMix + (Resources.getInstance().blockEdgeColor3[1] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[2]=Resources.getInstance().blockEdgeColor2[2] * colorMix + (Resources.getInstance().blockEdgeColor3[2] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[3]=Resources.getInstance().blockEdgeColor2[3] * colorMix + (Resources.getInstance().blockEdgeColor3[3] * (1 - colorMix));
      }
 else       if (songCounter == 2) {
        Resources.getInstance().blockColor[0]=Resources.getInstance().blockColor3[0] * colorMix + (Resources.getInstance().blockColor4[0] * (1 - colorMix));
        Resources.getInstance().blockColor[1]=Resources.getInstance().blockColor3[1] * colorMix + (Resources.getInstance().blockColor4[1] * (1 - colorMix));
        Resources.getInstance().blockColor[2]=Resources.getInstance().blockColor3[2] * colorMix + (Resources.getInstance().blockColor4[2] * (1 - colorMix));
        Resources.getInstance().blockColor[3]=Resources.getInstance().blockColor3[3] * colorMix + (Resources.getInstance().blockColor4[3] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[0]=Resources.getInstance().blockEdgeColor3[0] * colorMix + (Resources.getInstance().blockEdgeColor4[0] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[1]=Resources.getInstance().blockEdgeColor3[1] * colorMix + (Resources.getInstance().blockEdgeColor4[1] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[2]=Resources.getInstance().blockEdgeColor3[2] * colorMix + (Resources.getInstance().blockEdgeColor4[2] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[3]=Resources.getInstance().blockEdgeColor3[3] * colorMix + (Resources.getInstance().blockEdgeColor4[3] * (1 - colorMix));
      }
 else       if (songCounter == 3) {
        Resources.getInstance().blockColor[0]=Resources.getInstance().blockColor4[0] * colorMix + (Resources.getInstance().blockColor5[0] * (1 - colorMix));
        Resources.getInstance().blockColor[1]=Resources.getInstance().blockColor4[1] * colorMix + (Resources.getInstance().blockColor5[1] * (1 - colorMix));
        Resources.getInstance().blockColor[2]=Resources.getInstance().blockColor4[2] * colorMix + (Resources.getInstance().blockColor5[2] * (1 - colorMix));
        Resources.getInstance().blockColor[3]=Resources.getInstance().blockColor4[3] * colorMix + (Resources.getInstance().blockColor5[3] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[0]=Resources.getInstance().blockEdgeColor4[0] * colorMix + (Resources.getInstance().blockEdgeColor5[0] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[1]=Resources.getInstance().blockEdgeColor4[1] * colorMix + (Resources.getInstance().blockEdgeColor5[1] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[2]=Resources.getInstance().blockEdgeColor4[2] * colorMix + (Resources.getInstance().blockEdgeColor5[2] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[3]=Resources.getInstance().blockEdgeColor4[3] * colorMix + (Resources.getInstance().blockEdgeColor5[3] * (1 - colorMix));
      }
 else       if (songCounter == 4) {
        Resources.getInstance().blockColor[0]=Resources.getInstance().blockColor5[0] * colorMix + (Resources.getInstance().blockColor6[0] * (1 - colorMix));
        Resources.getInstance().blockColor[1]=Resources.getInstance().blockColor5[1] * colorMix + (Resources.getInstance().blockColor6[1] * (1 - colorMix));
        Resources.getInstance().blockColor[2]=Resources.getInstance().blockColor5[2] * colorMix + (Resources.getInstance().blockColor6[2] * (1 - colorMix));
        Resources.getInstance().blockColor[3]=Resources.getInstance().blockColor5[3] * colorMix + (Resources.getInstance().blockColor6[3] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[0]=Resources.getInstance().blockEdgeColor5[0] * colorMix + (Resources.getInstance().blockEdgeColor6[0] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[1]=Resources.getInstance().blockEdgeColor5[1] * colorMix + (Resources.getInstance().blockEdgeColor6[1] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[2]=Resources.getInstance().blockEdgeColor5[2] * colorMix + (Resources.getInstance().blockEdgeColor6[2] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[3]=Resources.getInstance().blockEdgeColor5[3] * colorMix + (Resources.getInstance().blockEdgeColor6[3] * (1 - colorMix));
      }
 else       if (songCounter == 5) {
        Resources.getInstance().blockColor[0]=Resources.getInstance().blockColor6[0] * colorMix + (Resources.getInstance().blockColor7[0] * (1 - colorMix));
        Resources.getInstance().blockColor[1]=Resources.getInstance().blockColor6[1] * colorMix + (Resources.getInstance().blockColor7[1] * (1 - colorMix));
        Resources.getInstance().blockColor[2]=Resources.getInstance().blockColor6[2] * colorMix + (Resources.getInstance().blockColor7[2] * (1 - colorMix));
        Resources.getInstance().blockColor[3]=Resources.getInstance().blockColor6[3] * colorMix + (Resources.getInstance().blockColor7[3] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[0]=Resources.getInstance().blockEdgeColor6[0] * colorMix + (Resources.getInstance().blockEdgeColor7[0] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[1]=Resources.getInstance().blockEdgeColor6[1] * colorMix + (Resources.getInstance().blockEdgeColor7[1] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[2]=Resources.getInstance().blockEdgeColor6[2] * colorMix + (Resources.getInstance().blockEdgeColor7[2] * (1 - colorMix));
        Resources.getInstance().blockEdgeColor[3]=Resources.getInstance().blockEdgeColor6[3] * colorMix + (Resources.getInstance().blockEdgeColor7[3] * (1 - colorMix));
      }
    }
  }
}"
84032,"private String docXml(Element parent){
  Element doc=parent.element(""String_Node_Str"");
  doc.content().removeAll(doc.elements(""String_Node_Str""));
  String xml=doc.asXML();
  StringWriter w=new StringWriter();
  MarkupParser parser=new MarkupParser(new ConfluenceDialect());
  HtmlDocumentBuilder builder=new HtmlDocumentBuilder(w){
    @Override public void lineBreak(){
    }
  }
;
  builder.setEmitAsDocument(false);
  parser.setBuilder(builder);
  parser.parse(xml);
  return w.toString();
}","private String docXml(Element parent){
  Element doc=parent.element(""String_Node_Str"");
  doc.content().removeAll(doc.elements(""String_Node_Str""));
  String xml=doc.getText();
  StringWriter w=new StringWriter();
  MarkupParser parser=new MarkupParser(new ConfluenceDialect());
  HtmlDocumentBuilder builder=new HtmlDocumentBuilder(w){
    @Override public void lineBreak(){
    }
  }
;
  builder.setEmitAsDocument(false);
  parser.setBuilder(builder);
  parser.parse(xml);
  return w.toString();
}"
84033,"public void mergeClips(Collection<SpriteClip> mergeClips){
  if (mergeClips == null) {
    return;
  }
  if (mergeClips.size() == 1) {
    SpriteClip selectedClip=mergeClips.iterator().next();
    Collection<SpriteClip> overlappingSprites=new HashSet();
    overlappingSprites.add(selectedClip);
    for (    SpriteClip currentClip : clips) {
      if (selectedClip != currentClip && currentClip.getBoundingBox().intersects(selectedClip.getBoundingBox())) {
        overlappingSprites.add(currentClip);
      }
    }
    if (overlappingSprites.size() >= 2) {
      clips.removeAll(overlappingSprites);
      SpriteClip newMergedClip=SpriteClip.makeMergedClip(overlappingSprites);
      clips.add(newMergedClip);
    }
  }
 else {
    clips.removeAll(mergeClips);
    SpriteClip newMergedClip=SpriteClip.makeMergedClip(mergeClips);
    clips.add(newMergedClip);
  }
}","public void mergeClips(Collection<SpriteClip> mergeClips){
  if (mergeClips == null || mergeClips.size() == 0) {
    return;
  }
  if (mergeClips.size() == 1) {
    SpriteClip selectedClip=mergeClips.iterator().next();
    Collection<SpriteClip> overlappingSprites=new HashSet();
    overlappingSprites.add(selectedClip);
    for (    SpriteClip currentClip : clips) {
      if (selectedClip != currentClip && currentClip.getBoundingBox().intersects(selectedClip.getBoundingBox())) {
        overlappingSprites.add(currentClip);
      }
    }
    if (overlappingSprites.size() >= 2) {
      clips.removeAll(overlappingSprites);
      SpriteClip newMergedClip=SpriteClip.makeMergedClip(overlappingSprites);
      clips.add(newMergedClip);
    }
  }
 else {
    clips.removeAll(mergeClips);
    SpriteClip newMergedClip=SpriteClip.makeMergedClip(mergeClips);
    clips.add(newMergedClip);
  }
}"
84034,"@Override public boolean isSystemView(String catalogName,String schemaName,String viewName){
  return super.isSystemView(catalogName,schemaName,viewName) || schemaName.equals(""String_Node_Str"") || schemaName.equals(""String_Node_Str"");
}","@Override public boolean isSystemView(String catalogName,String schemaName,String viewName){
  return super.isSystemView(catalogName,schemaName,viewName) || schemaName.equals(""String_Node_Str"") || viewName.toLowerCase().equals(""String_Node_Str"");
}"
84035,"@Override public boolean isSystemTable(String catalogName,String schemaName,String tableName){
  return super.isSystemTable(catalogName,schemaName,tableName) || schemaName.equals(""String_Node_Str"") || schemaName.equals(""String_Node_Str"");
}","@Override public boolean isSystemTable(String catalogName,String schemaName,String tableName){
  return super.isSystemTable(catalogName,schemaName,tableName) || schemaName.equals(""String_Node_Str"") || tableName.toLowerCase().startsWith(""String_Node_Str"");
}"
84036,"/** 
 * Return singleton SqlGeneratorFactory
 */
public static ChangeFactory getInstance(){
  if (instance == null) {
    instance=new ChangeFactory();
  }
  return instance;
}","/** 
 * Return singleton SqlGeneratorFactory
 */
public static synchronized ChangeFactory getInstance(){
  if (instance == null) {
    instance=new ChangeFactory();
  }
  return instance;
}"
84037,"public ColumnConfig setValueDate(String valueDate){
  if (valueDate == null || valueDate.equalsIgnoreCase(""String_Node_Str"")) {
    this.valueDate=null;
  }
  try {
    this.valueDate=new ISODateFormat().parse(valueDate);
  }
 catch (  ParseException e) {
    this.valueComputed=new DatabaseFunction(valueDate);
  }
  return this;
}","public ColumnConfig setValueDate(String valueDate){
  if (valueDate == null || valueDate.equalsIgnoreCase(""String_Node_Str"")) {
    this.valueDate=null;
  }
 else {
    try {
      this.valueDate=new ISODateFormat().parse(valueDate);
    }
 catch (    ParseException e) {
      this.valueComputed=new DatabaseFunction(valueDate);
    }
  }
  return this;
}"
84038,"public DatabaseChangeLog parse(String physicalChangeLogLocation,ChangeLogParameters changeLogParameters,ResourceAccessor resourceAccessor) throws ChangeLogParseException {
  DatabaseChangeLog changeLog=new DatabaseChangeLog();
  changeLog.setPhysicalFilePath(physicalChangeLogLocation);
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new InputStreamReader(openChangeLogFile(physicalChangeLogLocation,resourceAccessor)));
    StringBuffer currentSql=new StringBuffer();
    StringBuffer currentRollbackSql=new StringBuffer();
    ChangeSet changeSet=null;
    RawSQLChange change=null;
    Pattern changeSetPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern rollbackPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern stripCommentsPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern splitStatementsPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern endDelimiterPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern runOnChangePattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern runAlwaysPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern contextPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern runInTransactionPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern dbmsPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern failOnErrorPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    String line;
    while ((line=reader.readLine()) != null) {
      Matcher changeSetPatternMatcher=changeSetPattern.matcher(line);
      if (changeSetPatternMatcher.matches()) {
        String finalCurrentSql=StringUtils.trimToNull(currentSql.toString());
        if (changeSet != null) {
          if (finalCurrentSql == null) {
            throw new ChangeLogParseException(""String_Node_Str"" + changeSet.toString(false));
          }
          change.setSql(finalCurrentSql);
          if (StringUtils.trimToNull(currentRollbackSql.toString()) != null) {
            try {
              if (currentRollbackSql.toString().trim().toLowerCase().matches(""String_Node_Str"")) {
                changeSet.addRollbackChange(new EmptyChange());
              }
 else {
                RawSQLChange rollbackChange=new RawSQLChange();
                rollbackChange.setSql(currentRollbackSql.toString());
                changeSet.addRollbackChange(rollbackChange);
              }
            }
 catch (            UnsupportedChangeException e) {
              throw new RuntimeException(e);
            }
          }
        }
        Matcher stripCommentsPatternMatcher=stripCommentsPattern.matcher(line);
        Matcher splitStatementsPatternMatcher=splitStatementsPattern.matcher(line);
        Matcher endDelimiterPatternMatcher=endDelimiterPattern.matcher(line);
        Matcher runOnChangePatternMatcher=runOnChangePattern.matcher(line);
        Matcher runAlwaysPatternMatcher=runAlwaysPattern.matcher(line);
        Matcher contextPatternMatcher=contextPattern.matcher(line);
        Matcher runInTransactionPatternMatcher=runInTransactionPattern.matcher(line);
        Matcher dbmsPatternMatcher=dbmsPattern.matcher(line);
        Matcher failOnErrorPatternMatcher=failOnErrorPattern.matcher(line);
        boolean stripComments=parseBoolean(stripCommentsPatternMatcher,changeSet,true);
        boolean splitStatements=parseBoolean(splitStatementsPatternMatcher,changeSet,true);
        boolean runOnChange=parseBoolean(runOnChangePatternMatcher,changeSet,false);
        boolean runAlways=parseBoolean(runAlwaysPatternMatcher,changeSet,false);
        boolean runInTransaction=parseBoolean(runInTransactionPatternMatcher,changeSet,true);
        boolean failOnError=parseBoolean(failOnErrorPatternMatcher,changeSet,true);
        String endDelimiter=parseString(endDelimiterPatternMatcher);
        String context=parseString(contextPatternMatcher);
        String dbms=parseString(dbmsPatternMatcher);
        changeSet=new ChangeSet(changeSetPatternMatcher.group(2),changeSetPatternMatcher.group(1),runAlways,runOnChange,physicalChangeLogLocation,context,dbms,runInTransaction);
        changeSet.setFailOnError(failOnError);
        changeLog.addChangeSet(changeSet);
        change=new RawSQLChange();
        change.setSql(finalCurrentSql);
        change.setResourceAccessor(resourceAccessor);
        change.setSplitStatements(splitStatements);
        change.setStripComments(stripComments);
        change.setEndDelimiter(endDelimiter);
        changeSet.addChange(change);
        currentSql=new StringBuffer();
        currentRollbackSql=new StringBuffer();
      }
 else {
        if (changeSet != null) {
          Matcher rollbackMatcher=rollbackPattern.matcher(line);
          if (rollbackMatcher.matches()) {
            if (rollbackMatcher.groupCount() == 1) {
              currentRollbackSql.append(rollbackMatcher.group(1)).append(""String_Node_Str"");
            }
          }
 else {
            currentSql.append(line).append(""String_Node_Str"");
          }
        }
      }
    }
    if (changeSet != null) {
      change.setSql(StringUtils.trimToNull(currentSql.toString()));
      if (StringUtils.trimToNull(currentRollbackSql.toString()) != null) {
        try {
          if (currentRollbackSql.toString().trim().toLowerCase().matches(""String_Node_Str"")) {
            changeSet.addRollbackChange(new EmptyChange());
          }
 else {
            RawSQLChange rollbackChange=new RawSQLChange();
            rollbackChange.setSql(currentRollbackSql.toString());
            changeSet.addRollbackChange(rollbackChange);
          }
        }
 catch (        UnsupportedChangeException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new ChangeLogParseException(e);
  }
  return changeLog;
}","public DatabaseChangeLog parse(String physicalChangeLogLocation,ChangeLogParameters changeLogParameters,ResourceAccessor resourceAccessor) throws ChangeLogParseException {
  DatabaseChangeLog changeLog=new DatabaseChangeLog();
  changeLog.setPhysicalFilePath(physicalChangeLogLocation);
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new InputStreamReader(openChangeLogFile(physicalChangeLogLocation,resourceAccessor)));
    StringBuffer currentSql=new StringBuffer();
    StringBuffer currentRollbackSql=new StringBuffer();
    ChangeSet changeSet=null;
    RawSQLChange change=null;
    Pattern changeSetPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern rollbackPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern stripCommentsPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern splitStatementsPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern endDelimiterPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern runOnChangePattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern runAlwaysPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern contextPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern runInTransactionPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern dbmsPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Pattern failOnErrorPattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    String line;
    while ((line=reader.readLine()) != null) {
      Matcher changeSetPatternMatcher=changeSetPattern.matcher(line);
      if (changeSetPatternMatcher.matches()) {
        String finalCurrentSql=StringUtils.trimToNull(currentSql.toString());
        if (changeSet != null) {
          if (finalCurrentSql == null) {
            throw new ChangeLogParseException(""String_Node_Str"" + changeSet.toString(false));
          }
          change.setSql(finalCurrentSql);
          if (StringUtils.trimToNull(currentRollbackSql.toString()) != null) {
            try {
              if (currentRollbackSql.toString().trim().toLowerCase().matches(""String_Node_Str"")) {
                changeSet.addRollbackChange(new EmptyChange());
              }
 else {
                RawSQLChange rollbackChange=new RawSQLChange();
                rollbackChange.setSql(currentRollbackSql.toString());
                changeSet.addRollbackChange(rollbackChange);
              }
            }
 catch (            UnsupportedChangeException e) {
              throw new RuntimeException(e);
            }
          }
        }
        Matcher stripCommentsPatternMatcher=stripCommentsPattern.matcher(line);
        Matcher splitStatementsPatternMatcher=splitStatementsPattern.matcher(line);
        Matcher endDelimiterPatternMatcher=endDelimiterPattern.matcher(line);
        Matcher runOnChangePatternMatcher=runOnChangePattern.matcher(line);
        Matcher runAlwaysPatternMatcher=runAlwaysPattern.matcher(line);
        Matcher contextPatternMatcher=contextPattern.matcher(line);
        Matcher runInTransactionPatternMatcher=runInTransactionPattern.matcher(line);
        Matcher dbmsPatternMatcher=dbmsPattern.matcher(line);
        Matcher failOnErrorPatternMatcher=failOnErrorPattern.matcher(line);
        boolean stripComments=parseBoolean(stripCommentsPatternMatcher,changeSet,true);
        boolean splitStatements=parseBoolean(splitStatementsPatternMatcher,changeSet,true);
        boolean runOnChange=parseBoolean(runOnChangePatternMatcher,changeSet,false);
        boolean runAlways=parseBoolean(runAlwaysPatternMatcher,changeSet,false);
        boolean runInTransaction=parseBoolean(runInTransactionPatternMatcher,changeSet,true);
        boolean failOnError=parseBoolean(failOnErrorPatternMatcher,changeSet,true);
        String endDelimiter=parseString(endDelimiterPatternMatcher);
        String context=parseString(contextPatternMatcher);
        String dbms=parseString(dbmsPatternMatcher);
        changeSet=new ChangeSet(changeSetPatternMatcher.group(2),changeSetPatternMatcher.group(1),runAlways,runOnChange,physicalChangeLogLocation,context,dbms,runInTransaction);
        changeSet.setFailOnError(failOnError);
        changeLog.addChangeSet(changeSet);
        change=new RawSQLChange();
        change.setSql(finalCurrentSql);
        change.setResourceAccessor(resourceAccessor);
        change.setSplitStatements(splitStatements);
        change.setStripComments(stripComments);
        change.setEndDelimiter(endDelimiter);
        changeSet.addChange(change);
        currentSql=new StringBuffer();
        currentRollbackSql=new StringBuffer();
      }
 else {
        if (changeSet != null) {
          Matcher rollbackMatcher=rollbackPattern.matcher(line);
          if (rollbackMatcher.matches()) {
            if (rollbackMatcher.groupCount() == 1) {
              currentRollbackSql.append(rollbackMatcher.group(1)).append(""String_Node_Str"");
            }
          }
 else {
            currentSql.append(line).append(""String_Node_Str"");
          }
        }
      }
    }
    if (changeSet != null) {
      change.setSql(StringUtils.trimToNull(currentSql.toString()));
      if (StringUtils.trimToNull(currentRollbackSql.toString()) != null) {
        try {
          if (currentRollbackSql.toString().trim().toLowerCase().matches(""String_Node_Str"")) {
            changeSet.addRollbackChange(new EmptyChange());
          }
 else {
            RawSQLChange rollbackChange=new RawSQLChange();
            rollbackChange.setSql(currentRollbackSql.toString());
            changeSet.addRollbackChange(rollbackChange);
          }
        }
 catch (        UnsupportedChangeException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new ChangeLogParseException(e);
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException ignore) {
      }
    }
  }
  return changeLog;
}"
84039,"protected void readTables(DatabaseSnapshot snapshot,String schema,DatabaseMetaData databaseMetaData) throws SQLException, DatabaseException {
  Database database=snapshot.getDatabase();
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  ResultSet rs=databaseMetaData.getTables(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),null,new String[]{""String_Node_Str"",""String_Node_Str""});
  try {
    while (rs.next()) {
      Table table=readTable(rs,database);
      table.setSchema(schema);
      if (database.isLiquibaseTable(table.getName())) {
        if (table.getName().equalsIgnoreCase(database.getDatabaseChangeLogTableName())) {
          snapshot.setDatabaseChangeLogTable(table);
          continue;
        }
        if (table.getName().equalsIgnoreCase(database.getDatabaseChangeLogLockTableName())) {
          snapshot.setDatabaseChangeLogLockTable(table);
          continue;
        }
      }
      if (database.isSystemTable(table.getRawCatalogName(),table.getRawSchemaName(),table.getName()) || database.isSystemView(table.getRawCatalogName(),table.getRawSchemaName(),table.getName())) {
        continue;
      }
      snapshot.getTables().add(table);
    }
  }
  finally {
    rs.close();
  }
}","protected void readTables(DatabaseSnapshot snapshot,String schema,DatabaseMetaData databaseMetaData) throws SQLException, DatabaseException {
  Database database=snapshot.getDatabase();
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  ResultSet rs=databaseMetaData.getTables(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),null,new String[]{""String_Node_Str"",""String_Node_Str""});
  try {
    while (rs.next()) {
      Table table=readTable(rs,database);
      table.setSchema(schema);
      if (database.isLiquibaseTable(table.getName())) {
        if (table.getName().equalsIgnoreCase(database.getDatabaseChangeLogTableName())) {
          snapshot.setDatabaseChangeLogTable(table);
          continue;
        }
        if (table.getName().equalsIgnoreCase(database.getDatabaseChangeLogLockTableName())) {
          snapshot.setDatabaseChangeLogLockTable(table);
          continue;
        }
      }
      if (database.isSystemTable(table.getRawCatalogName(),table.getRawSchemaName(),table.getName()) || database.isSystemView(table.getRawCatalogName(),table.getRawSchemaName(),table.getName())) {
        continue;
      }
      snapshot.getTables().add(table);
    }
  }
  finally {
    try {
      rs.close();
    }
 catch (    SQLException ignore) {
    }
  }
}"
84040,"protected void readIndexes(DatabaseSnapshot snapshot,String schema,DatabaseMetaData databaseMetaData) throws DatabaseException, SQLException {
  Database database=snapshot.getDatabase();
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  for (  Table table : snapshot.getTables()) {
    ResultSet rs;
    Statement statement=null;
    if (database instanceof OracleDatabase) {
      statement=((JdbcConnection)database.getConnection()).getUnderlyingConnection().createStatement();
      String sql=""String_Node_Str"" + database.convertRequestedSchemaToSchema(schema) + ""String_Node_Str""+ table.getName()+ ""String_Node_Str"";
      rs=statement.executeQuery(sql);
    }
 else {
      rs=databaseMetaData.getIndexInfo(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),table.getName(),false,true);
    }
    Map<String,Index> indexMap=new HashMap<String,Index>();
    while (rs.next()) {
      String indexName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
      if (database instanceof InformixDatabase && indexName.startsWith(""String_Node_Str"")) {
        indexName=""String_Node_Str"" + indexName.substring(1);
      }
      short type=rs.getShort(""String_Node_Str"");
      boolean nonUnique=true;
      try {
        nonUnique=rs.getBoolean(""String_Node_Str"");
      }
 catch (      SQLException e) {
      }
      String columnName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
      short position=rs.getShort(""String_Node_Str"");
      if (database instanceof InformixDatabase && type != DatabaseMetaData.tableIndexStatistic && position == 0) {
        System.out.println(this.getClass().getName() + ""String_Node_Str"" + ++position);
      }
      String filterCondition=rs.getString(""String_Node_Str"");
      if (type == DatabaseMetaData.tableIndexStatistic) {
        continue;
      }
      if (columnName == null) {
        continue;
      }
      Index indexInformation;
      if (indexMap.containsKey(indexName)) {
        indexInformation=indexMap.get(indexName);
      }
 else {
        indexInformation=new Index();
        indexInformation.setTable(table);
        indexInformation.setName(indexName);
        indexInformation.setUnique(!nonUnique);
        indexInformation.setFilterCondition(filterCondition);
        indexMap.put(indexName,indexInformation);
      }
      for (int i=indexInformation.getColumns().size(); i < position; i++) {
        indexInformation.getColumns().add(null);
      }
      indexInformation.getColumns().set(position - 1,columnName);
    }
    for (    Map.Entry<String,Index> entry : indexMap.entrySet()) {
      snapshot.getIndexes().add(entry.getValue());
    }
    rs.close();
    if (statement != null) {
      statement.close();
    }
  }
  Set<Index> indexesToRemove=new HashSet<Index>();
  for (  Index index : snapshot.getIndexes()) {
    for (    PrimaryKey pk : snapshot.getPrimaryKeys()) {
      if (index.getTable().getName().equalsIgnoreCase(pk.getTable().getName()) && index.getColumnNames().equals(pk.getColumnNames())) {
        index.addAssociatedWith(Index.MARK_PRIMARY_KEY);
      }
    }
    for (    ForeignKey fk : snapshot.getForeignKeys()) {
      if (index.getTable().getName().equalsIgnoreCase(fk.getForeignKeyTable().getName()) && index.getColumnNames().equals(fk.getForeignKeyColumns())) {
        index.addAssociatedWith(Index.MARK_FOREIGN_KEY);
      }
    }
    for (    UniqueConstraint uc : snapshot.getUniqueConstraints()) {
      if (index.getTable().getName().equalsIgnoreCase(uc.getTable().getName()) && index.getColumnNames().equals(uc.getColumnNames())) {
        index.addAssociatedWith(Index.MARK_UNIQUE_CONSTRAINT);
      }
    }
  }
  snapshot.getIndexes().removeAll(indexesToRemove);
}","protected void readIndexes(DatabaseSnapshot snapshot,String schema,DatabaseMetaData databaseMetaData) throws DatabaseException, SQLException {
  Database database=snapshot.getDatabase();
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  for (  Table table : snapshot.getTables()) {
    ResultSet rs=null;
    Statement statement=null;
    try {
      if (database instanceof OracleDatabase) {
        statement=((JdbcConnection)database.getConnection()).getUnderlyingConnection().createStatement();
        String sql=""String_Node_Str"" + database.convertRequestedSchemaToSchema(schema) + ""String_Node_Str""+ table.getName()+ ""String_Node_Str"";
        rs=statement.executeQuery(sql);
      }
 else {
        rs=databaseMetaData.getIndexInfo(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),table.getName(),false,true);
      }
      Map<String,Index> indexMap=new HashMap<String,Index>();
      while (rs.next()) {
        String indexName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
        if (database instanceof InformixDatabase && indexName.startsWith(""String_Node_Str"")) {
          indexName=""String_Node_Str"" + indexName.substring(1);
        }
        short type=rs.getShort(""String_Node_Str"");
        boolean nonUnique=true;
        try {
          nonUnique=rs.getBoolean(""String_Node_Str"");
        }
 catch (        SQLException e) {
        }
        String columnName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
        short position=rs.getShort(""String_Node_Str"");
        if (database instanceof InformixDatabase && type != DatabaseMetaData.tableIndexStatistic && position == 0) {
          System.out.println(this.getClass().getName() + ""String_Node_Str"" + ++position);
        }
        String filterCondition=rs.getString(""String_Node_Str"");
        if (type == DatabaseMetaData.tableIndexStatistic) {
          continue;
        }
        if (columnName == null) {
          continue;
        }
        Index indexInformation;
        if (indexMap.containsKey(indexName)) {
          indexInformation=indexMap.get(indexName);
        }
 else {
          indexInformation=new Index();
          indexInformation.setTable(table);
          indexInformation.setName(indexName);
          indexInformation.setUnique(!nonUnique);
          indexInformation.setFilterCondition(filterCondition);
          indexMap.put(indexName,indexInformation);
        }
        for (int i=indexInformation.getColumns().size(); i < position; i++) {
          indexInformation.getColumns().add(null);
        }
        indexInformation.getColumns().set(position - 1,columnName);
      }
      for (      Map.Entry<String,Index> entry : indexMap.entrySet()) {
        snapshot.getIndexes().add(entry.getValue());
      }
    }
  finally {
      if (rs != null) {
        try {
          rs.close();
        }
 catch (        SQLException ignored) {
        }
      }
      if (statement != null) {
        try {
          statement.close();
        }
 catch (        SQLException ignored) {
        }
      }
    }
  }
  Set<Index> indexesToRemove=new HashSet<Index>();
  for (  Index index : snapshot.getIndexes()) {
    for (    PrimaryKey pk : snapshot.getPrimaryKeys()) {
      if (index.getTable().getName().equalsIgnoreCase(pk.getTable().getName()) && index.getColumnNames().equals(pk.getColumnNames())) {
        index.addAssociatedWith(Index.MARK_PRIMARY_KEY);
      }
    }
    for (    ForeignKey fk : snapshot.getForeignKeys()) {
      if (index.getTable().getName().equalsIgnoreCase(fk.getForeignKeyTable().getName()) && index.getColumnNames().equals(fk.getForeignKeyColumns())) {
        index.addAssociatedWith(Index.MARK_FOREIGN_KEY);
      }
    }
    for (    UniqueConstraint uc : snapshot.getUniqueConstraints()) {
      if (index.getTable().getName().equalsIgnoreCase(uc.getTable().getName()) && index.getColumnNames().equals(uc.getColumnNames())) {
        index.addAssociatedWith(Index.MARK_UNIQUE_CONSTRAINT);
      }
    }
  }
  snapshot.getIndexes().removeAll(indexesToRemove);
}"
84041,"protected void readPrimaryKeys(DatabaseSnapshot snapshot,String schema,DatabaseMetaData databaseMetaData) throws DatabaseException, SQLException {
  Database database=snapshot.getDatabase();
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  List<PrimaryKey> foundPKs=new ArrayList<PrimaryKey>();
  for (  Table table : snapshot.getTables()) {
    ResultSet rs=databaseMetaData.getPrimaryKeys(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),table.getName());
    while (rs.next()) {
      String tableName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
      String columnName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
      short position=rs.getShort(""String_Node_Str"");
      boolean foundExistingPK=false;
      for (      PrimaryKey pk : foundPKs) {
        if (pk.getTable().getName().equals(tableName)) {
          pk.addColumnName(position - 1,columnName);
          foundExistingPK=true;
        }
      }
      if (!foundExistingPK) {
        PrimaryKey primaryKey=new PrimaryKey();
        primaryKey.setTable(table);
        primaryKey.addColumnName(position - 1,columnName);
        primaryKey.setName(convertPrimaryKeyName(rs.getString(""String_Node_Str"")));
        foundPKs.add(primaryKey);
      }
    }
    rs.close();
  }
  snapshot.getPrimaryKeys().addAll(foundPKs);
}","protected void readPrimaryKeys(DatabaseSnapshot snapshot,String schema,DatabaseMetaData databaseMetaData) throws DatabaseException, SQLException {
  Database database=snapshot.getDatabase();
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  List<PrimaryKey> foundPKs=new ArrayList<PrimaryKey>();
  for (  Table table : snapshot.getTables()) {
    ResultSet rs=databaseMetaData.getPrimaryKeys(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),table.getName());
    try {
      while (rs.next()) {
        String tableName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
        String columnName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
        short position=rs.getShort(""String_Node_Str"");
        boolean foundExistingPK=false;
        for (        PrimaryKey pk : foundPKs) {
          if (pk.getTable().getName().equals(tableName)) {
            pk.addColumnName(position - 1,columnName);
            foundExistingPK=true;
          }
        }
        if (!foundExistingPK) {
          PrimaryKey primaryKey=new PrimaryKey();
          primaryKey.setTable(table);
          primaryKey.addColumnName(position - 1,columnName);
          primaryKey.setName(convertPrimaryKeyName(rs.getString(""String_Node_Str"")));
          foundPKs.add(primaryKey);
        }
      }
    }
  finally {
      rs.close();
    }
  }
  snapshot.getPrimaryKeys().addAll(foundPKs);
}"
84042,"public boolean hasTable(String schemaName,String tableName,Database database){
  try {
    ResultSet rs=getMetaData(database).getTables(database.convertRequestedSchemaToCatalog(schemaName),database.convertRequestedSchemaToSchema(schemaName),convertTableNameToDatabaseTableName(tableName),new String[]{""String_Node_Str""});
    try {
      return rs.next();
    }
  finally {
      rs.close();
    }
  }
 catch (  Exception e) {
    throw new UnexpectedLiquibaseException(e);
  }
}","public boolean hasTable(String schemaName,String tableName,Database database){
  try {
    ResultSet rs=getMetaData(database).getTables(database.convertRequestedSchemaToCatalog(schemaName),database.convertRequestedSchemaToSchema(schemaName),convertTableNameToDatabaseTableName(tableName),new String[]{""String_Node_Str""});
    try {
      return rs.next();
    }
  finally {
      try {
        rs.close();
      }
 catch (      SQLException ignore) {
      }
    }
  }
 catch (  Exception e) {
    throw new UnexpectedLiquibaseException(e);
  }
}"
84043,"public Column getColumn(String schemaName,String tableName,String columnName,Database database) throws DatabaseException {
  ResultSet rs=null;
  try {
    rs=getMetaData(database).getColumns(database.convertRequestedSchemaToCatalog(schemaName),database.convertRequestedSchemaToSchema(schemaName),convertTableNameToDatabaseTableName(tableName),convertColumnNameToDatabaseTableName(columnName));
    if (!rs.next()) {
      return null;
    }
    return readColumn(rs,database);
  }
 catch (  Exception e) {
    throw new DatabaseException(e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
  }
}","public Column getColumn(String schemaName,String tableName,String columnName,Database database) throws DatabaseException {
  ResultSet rs=null;
  try {
    rs=getMetaData(database).getColumns(database.convertRequestedSchemaToCatalog(schemaName),database.convertRequestedSchemaToSchema(schemaName),convertTableNameToDatabaseTableName(tableName),convertColumnNameToDatabaseTableName(columnName));
    if (!rs.next()) {
      return null;
    }
    return readColumn(rs,database);
  }
 catch (  Exception e) {
    throw new DatabaseException(e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException ignore) {
      }
    }
  }
}"
84044,"public boolean isColumnAutoIncrement(Database database,String schemaName,String tableName,String columnName) throws SQLException, DatabaseException {
  if (!database.supportsAutoIncrement()) {
    return false;
  }
  boolean autoIncrement=false;
  Statement statement=null;
  ResultSet selectRS=null;
  try {
    statement=((JdbcConnection)database.getConnection()).getUnderlyingConnection().createStatement();
    selectRS=statement.executeQuery(""String_Node_Str"" + database.escapeColumnName(schemaName,tableName,columnName) + ""String_Node_Str""+ database.escapeTableName(schemaName,tableName)+ ""String_Node_Str"");
    ResultSetMetaData meta=selectRS.getMetaData();
    autoIncrement=meta.isAutoIncrement(1);
  }
  finally {
    if (selectRS != null) {
      selectRS.close();
    }
    if (statement != null) {
      statement.close();
    }
  }
  return autoIncrement;
}","public boolean isColumnAutoIncrement(Database database,String schemaName,String tableName,String columnName) throws SQLException, DatabaseException {
  if (!database.supportsAutoIncrement()) {
    return false;
  }
  boolean autoIncrement=false;
  Statement statement=null;
  ResultSet selectRS=null;
  try {
    statement=((JdbcConnection)database.getConnection()).getUnderlyingConnection().createStatement();
    selectRS=statement.executeQuery(""String_Node_Str"" + database.escapeColumnName(schemaName,tableName,columnName) + ""String_Node_Str""+ database.escapeTableName(schemaName,tableName)+ ""String_Node_Str"");
    ResultSetMetaData meta=selectRS.getMetaData();
    autoIncrement=meta.isAutoIncrement(1);
  }
  finally {
    if (selectRS != null) {
      try {
        selectRS.close();
      }
 catch (      SQLException ignored) {
      }
    }
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException ignored) {
      }
    }
  }
  return autoIncrement;
}"
84045,"protected void readViews(DatabaseSnapshot snapshot,String schema,DatabaseMetaData databaseMetaData) throws SQLException, DatabaseException {
  Database database=snapshot.getDatabase();
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  ResultSet rs=databaseMetaData.getTables(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),null,new String[]{""String_Node_Str""});
  try {
    while (rs.next()) {
      View view=readView(rs,database);
      if (database.isSystemView(view.getRawCatalogName(),view.getRawSchemaName(),view.getName())) {
        continue;
      }
      snapshot.getViews().add(view);
    }
  }
  finally {
    rs.close();
  }
}","protected void readViews(DatabaseSnapshot snapshot,String schema,DatabaseMetaData databaseMetaData) throws SQLException, DatabaseException {
  Database database=snapshot.getDatabase();
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  ResultSet rs=databaseMetaData.getTables(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),null,new String[]{""String_Node_Str""});
  try {
    while (rs.next()) {
      View view=readView(rs,database);
      if (database.isSystemView(view.getRawCatalogName(),view.getRawSchemaName(),view.getName())) {
        continue;
      }
      snapshot.getViews().add(view);
    }
  }
  finally {
    try {
      rs.close();
    }
 catch (    SQLException ignore) {
    }
  }
}"
84046,"protected void readColumns(DatabaseSnapshot snapshot,String schema,DatabaseMetaData databaseMetaData) throws SQLException, DatabaseException {
  Database database=snapshot.getDatabase();
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  Statement selectStatement=((JdbcConnection)database.getConnection()).getUnderlyingConnection().createStatement();
  ResultSet rs=databaseMetaData.getColumns(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),null,null);
  while (rs.next()) {
    Column column=readColumn(rs,database);
    if (column == null) {
      continue;
    }
    Table tempTable=column.getTable();
    column.setTable(null);
    Table table;
    if (database.isLiquibaseTable(tempTable.getName())) {
      if (tempTable.getName().equalsIgnoreCase(database.getDatabaseChangeLogTableName())) {
        table=snapshot.getDatabaseChangeLogTable();
      }
 else       if (tempTable.getName().equalsIgnoreCase(database.getDatabaseChangeLogLockTableName())) {
        table=snapshot.getDatabaseChangeLogLockTable();
      }
 else {
        throw new UnexpectedLiquibaseException(""String_Node_Str"" + tempTable.getName());
      }
    }
 else {
      table=snapshot.getTable(tempTable.getName());
    }
    if (table == null) {
      View view=snapshot.getView(tempTable.getName());
      if (view == null) {
        LogFactory.getLogger().debug(""String_Node_Str"" + tempTable.getName() + ""String_Node_Str""+ column.getName());
        continue;
      }
 else {
        column.setView(view);
        column.setAutoIncrement(false);
        view.getColumns().add(column);
      }
    }
 else {
      column.setTable(table);
      column.setAutoIncrement(isColumnAutoIncrement(database,table.getSchema(),table.getName(),column.getName()));
      table.getColumns().add(column);
    }
    column.setPrimaryKey(snapshot.isPrimaryKey(column));
  }
  rs.close();
  selectStatement.close();
}","protected void readColumns(DatabaseSnapshot snapshot,String schema,DatabaseMetaData databaseMetaData) throws SQLException, DatabaseException {
  Database database=snapshot.getDatabase();
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  Statement selectStatement=null;
  ResultSet rs=null;
  try {
    selectStatement=((JdbcConnection)database.getConnection()).getUnderlyingConnection().createStatement();
    rs=databaseMetaData.getColumns(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),null,null);
    while (rs.next()) {
      Column column=readColumn(rs,database);
      if (column == null) {
        continue;
      }
      Table tempTable=column.getTable();
      column.setTable(null);
      Table table;
      if (database.isLiquibaseTable(tempTable.getName())) {
        if (tempTable.getName().equalsIgnoreCase(database.getDatabaseChangeLogTableName())) {
          table=snapshot.getDatabaseChangeLogTable();
        }
 else         if (tempTable.getName().equalsIgnoreCase(database.getDatabaseChangeLogLockTableName())) {
          table=snapshot.getDatabaseChangeLogLockTable();
        }
 else {
          throw new UnexpectedLiquibaseException(""String_Node_Str"" + tempTable.getName());
        }
      }
 else {
        table=snapshot.getTable(tempTable.getName());
      }
      if (table == null) {
        View view=snapshot.getView(tempTable.getName());
        if (view == null) {
          LogFactory.getLogger().debug(""String_Node_Str"" + tempTable.getName() + ""String_Node_Str""+ column.getName());
          continue;
        }
 else {
          column.setView(view);
          column.setAutoIncrement(false);
          view.getColumns().add(column);
        }
      }
 else {
        column.setTable(table);
        column.setAutoIncrement(isColumnAutoIncrement(database,table.getSchema(),table.getName(),column.getName()));
        table.getColumns().add(column);
      }
      column.setPrimaryKey(snapshot.isPrimaryKey(column));
    }
  }
  finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException ignored) {
      }
    }
    if (selectStatement != null) {
      try {
        selectStatement.close();
      }
 catch (      SQLException ignored) {
      }
    }
  }
}"
84047,"public List<ForeignKey> getForeignKeys(String schemaName,String foreignKeyTableName,Database database) throws DatabaseException {
  List<ForeignKey> fkList=new ArrayList<ForeignKey>();
  try {
    String dbCatalog=database.convertRequestedSchemaToCatalog(schemaName);
    String dbSchema=database.convertRequestedSchemaToSchema(schemaName);
    ResultSet rs=getMetaData(database).getImportedKeys(dbCatalog,dbSchema,convertTableNameToDatabaseTableName(foreignKeyTableName));
    while (rs.next()) {
      ForeignKeyInfo fkInfo=fillForeignKeyInfo(rs);
      fkList.add(generateForeignKey(fkInfo,database,fkList));
    }
    rs.close();
    return fkList;
  }
 catch (  Exception e) {
    throw new DatabaseException(e);
  }
}","public List<ForeignKey> getForeignKeys(String schemaName,String foreignKeyTableName,Database database) throws DatabaseException {
  List<ForeignKey> fkList=new ArrayList<ForeignKey>();
  try {
    String dbCatalog=database.convertRequestedSchemaToCatalog(schemaName);
    String dbSchema=database.convertRequestedSchemaToSchema(schemaName);
    ResultSet rs=getMetaData(database).getImportedKeys(dbCatalog,dbSchema,convertTableNameToDatabaseTableName(foreignKeyTableName));
    try {
      while (rs.next()) {
        ForeignKeyInfo fkInfo=fillForeignKeyInfo(rs);
        fkList.add(generateForeignKey(fkInfo,database,fkList));
      }
    }
  finally {
      rs.close();
    }
    return fkList;
  }
 catch (  Exception e) {
    throw new DatabaseException(e);
  }
}"
84048,"public Table getTable(String schemaName,String tableName,Database database) throws DatabaseException {
  ResultSet rs=null;
  try {
    DatabaseMetaData metaData=getMetaData(database);
    rs=metaData.getTables(database.convertRequestedSchemaToCatalog(schemaName),database.convertRequestedSchemaToSchema(schemaName),convertTableNameToDatabaseTableName(tableName),new String[]{""String_Node_Str""});
    if (!rs.next()) {
      return null;
    }
    Table table=readTable(rs,database);
    rs.close();
    rs=metaData.getColumns(database.convertRequestedSchemaToCatalog(schemaName),database.convertRequestedSchemaToSchema(schemaName),convertTableNameToDatabaseTableName(tableName),null);
    while (rs.next()) {
      table.getColumns().add(readColumn(rs,database));
    }
    return table;
  }
 catch (  Exception e) {
    throw new DatabaseException(e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
  }
}","public Table getTable(String schemaName,String tableName,Database database) throws DatabaseException {
  ResultSet rs=null;
  try {
    DatabaseMetaData metaData=getMetaData(database);
    rs=metaData.getTables(database.convertRequestedSchemaToCatalog(schemaName),database.convertRequestedSchemaToSchema(schemaName),convertTableNameToDatabaseTableName(tableName),new String[]{""String_Node_Str""});
    Table table;
    try {
      if (!rs.next()) {
        return null;
      }
      table=readTable(rs,database);
    }
  finally {
      rs.close();
    }
    rs=metaData.getColumns(database.convertRequestedSchemaToCatalog(schemaName),database.convertRequestedSchemaToSchema(schemaName),convertTableNameToDatabaseTableName(tableName),null);
    try {
      while (rs.next()) {
        table.getColumns().add(readColumn(rs,database));
      }
    }
  finally {
      rs.close();
    }
    return table;
  }
 catch (  Exception e) {
    throw new DatabaseException(e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException ignore) {
      }
    }
  }
}"
84049,"/** 
 * MySQL specific implementation
 */
@Override protected void getColumnTypeAndDefValue(Column columnInfo,ResultSet rs,Database database) throws SQLException, DatabaseException {
  String columnTypeName=rs.getString(""String_Node_Str"");
  String columnName=rs.getString(""String_Node_Str"");
  String tableName=rs.getString(""String_Node_Str"");
  String schemaName=rs.getString(""String_Node_Str"");
  Map<String,List<String>> tableSchema=new HashMap<String,List<String>>();
  if (!schemaCache.containsKey(tableName)) {
    Statement selectStatement=((JdbcConnection)database.getConnection()).getUnderlyingConnection().createStatement();
    ResultSet rsColumnType=selectStatement.executeQuery(""String_Node_Str"" + database.escapeTableName(schemaName,tableName));
    while (rsColumnType.next()) {
      List<String> colSchema=new ArrayList<String>();
      colSchema.add(rsColumnType.getString(""String_Node_Str""));
      colSchema.add(rsColumnType.getString(""String_Node_Str""));
      tableSchema.put(rsColumnType.getString(""String_Node_Str""),colSchema);
    }
    rsColumnType.close();
    schemaCache.put(tableName,tableSchema);
  }
  tableSchema=schemaCache.get(tableName);
  if (columnTypeName.toLowerCase().startsWith(""String_Node_Str"") || columnTypeName.toLowerCase().startsWith(""String_Node_Str"")) {
    columnInfo.setTypeName(tableSchema.get(columnName).get(0));
    try {
      String tmpDefaultValue=(String)TypeConverterFactory.getInstance().findTypeConverter(database).convertDatabaseValueToObject(tableSchema.get(columnName).get(1),columnInfo.getDataType(),columnInfo.getColumnSize(),columnInfo.getDecimalDigits(),database);
      if (""String_Node_Str"".equals(tmpDefaultValue)) {
        columnInfo.setDefaultValue(null);
      }
 else {
        columnInfo.setDefaultValue(tmpDefaultValue);
      }
    }
 catch (    ParseException e) {
      throw new DatabaseException(e);
    }
  }
 else   if (columnTypeName.toLowerCase().equals(""String_Node_Str"") || columnTypeName.toLowerCase().equals(""String_Node_Str"")) {
    columnInfo.setTypeName(columnTypeName);
    columnInfo.setDefaultValue(null);
  }
 else   if (columnTypeName.toLowerCase().equals(""String_Node_Str"") && !""String_Node_Str"".equals(tableSchema.get(columnName).get(1))) {
    columnInfo.setTypeName(columnTypeName);
    columnInfo.setDefaultValue(tableSchema.get(columnName).get(1));
  }
 else {
    super.getColumnTypeAndDefValue(columnInfo,rs,database);
  }
}","/** 
 * MySQL specific implementation
 */
@Override protected void getColumnTypeAndDefValue(Column columnInfo,ResultSet rs,Database database) throws SQLException, DatabaseException {
  String columnTypeName=rs.getString(""String_Node_Str"");
  String columnName=rs.getString(""String_Node_Str"");
  String tableName=rs.getString(""String_Node_Str"");
  String schemaName=rs.getString(""String_Node_Str"");
  Map<String,List<String>> tableSchema=new HashMap<String,List<String>>();
  if (!schemaCache.containsKey(tableName)) {
    Statement selectStatement=null;
    ResultSet rsColumnType=null;
    try {
      selectStatement=((JdbcConnection)database.getConnection()).getUnderlyingConnection().createStatement();
      rsColumnType=selectStatement.executeQuery(""String_Node_Str"" + database.escapeTableName(schemaName,tableName));
      while (rsColumnType.next()) {
        List<String> colSchema=new ArrayList<String>();
        colSchema.add(rsColumnType.getString(""String_Node_Str""));
        colSchema.add(rsColumnType.getString(""String_Node_Str""));
        tableSchema.put(rsColumnType.getString(""String_Node_Str""),colSchema);
      }
    }
  finally {
      if (rsColumnType != null) {
        try {
          rsColumnType.close();
        }
 catch (        SQLException ignore) {
        }
      }
      if (selectStatement != null) {
        try {
          selectStatement.close();
        }
 catch (        SQLException ignore) {
        }
      }
    }
    schemaCache.put(tableName,tableSchema);
  }
  tableSchema=schemaCache.get(tableName);
  if (columnTypeName.toLowerCase().startsWith(""String_Node_Str"") || columnTypeName.toLowerCase().startsWith(""String_Node_Str"")) {
    columnInfo.setTypeName(tableSchema.get(columnName).get(0));
    try {
      String tmpDefaultValue=(String)TypeConverterFactory.getInstance().findTypeConverter(database).convertDatabaseValueToObject(tableSchema.get(columnName).get(1),columnInfo.getDataType(),columnInfo.getColumnSize(),columnInfo.getDecimalDigits(),database);
      if (""String_Node_Str"".equals(tmpDefaultValue)) {
        columnInfo.setDefaultValue(null);
      }
 else {
        columnInfo.setDefaultValue(tmpDefaultValue);
      }
    }
 catch (    ParseException e) {
      throw new DatabaseException(e);
    }
  }
 else   if (columnTypeName.toLowerCase().equals(""String_Node_Str"") || columnTypeName.toLowerCase().equals(""String_Node_Str"")) {
    columnInfo.setTypeName(columnTypeName);
    columnInfo.setDefaultValue(null);
  }
 else   if (columnTypeName.toLowerCase().equals(""String_Node_Str"") && !""String_Node_Str"".equals(tableSchema.get(columnName).get(1))) {
    columnInfo.setTypeName(columnTypeName);
    columnInfo.setDefaultValue(tableSchema.get(columnName).get(1));
  }
 else {
    super.getColumnTypeAndDefValue(columnInfo,rs,database);
  }
}"
84050,"protected boolean handleIncludedChangeLog(String fileName,boolean isRelativePath,String relativeBaseFileName) throws LiquibaseException {
  if (!(fileName.endsWith(""String_Node_Str"") || fileName.endsWith(""String_Node_Str""))) {
    log.debug(relativeBaseFileName + ""String_Node_Str"" + fileName+ ""String_Node_Str"");
    return false;
  }
  if (fileName.equalsIgnoreCase(""String_Node_Str"") || fileName.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
  if (isRelativePath) {
    fileName=FilenameUtils.concat(FilenameUtils.getFullPath(relativeBaseFileName),fileName);
  }
  DatabaseChangeLog changeLog=ChangeLogParserFactory.getInstance().getParser(fileName,resourceAccessor).parse(fileName,changeLogParameters,resourceAccessor);
  PreconditionContainer preconditions=changeLog.getPreconditions();
  if (preconditions != null) {
    if (null == databaseChangeLog.getPreconditions()) {
      databaseChangeLog.setPreconditions(new PreconditionContainer());
    }
    databaseChangeLog.getPreconditions().addNestedPrecondition(preconditions);
  }
  for (  ChangeSet changeSet : changeLog.getChangeSets()) {
    databaseChangeLog.addChangeSet(changeSet);
  }
  return true;
}","protected boolean handleIncludedChangeLog(String fileName,boolean isRelativePath,String relativeBaseFileName) throws LiquibaseException {
  if (!(fileName.endsWith(""String_Node_Str"") || fileName.endsWith(""String_Node_Str""))) {
    log.debug(relativeBaseFileName + ""String_Node_Str"" + fileName+ ""String_Node_Str"");
    return false;
  }
  if (fileName.equalsIgnoreCase(""String_Node_Str"") || fileName.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
  if (isRelativePath) {
    String tempFile=FilenameUtils.concat(FilenameUtils.getFullPath(relativeBaseFileName),fileName);
    if (tempFile != null && new File(tempFile).exists() == true) {
      fileName=tempFile;
    }
 else {
      fileName=FilenameUtils.getFullPath(relativeBaseFileName) + fileName;
    }
  }
  DatabaseChangeLog changeLog=ChangeLogParserFactory.getInstance().getParser(fileName,resourceAccessor).parse(fileName,changeLogParameters,resourceAccessor);
  PreconditionContainer preconditions=changeLog.getPreconditions();
  if (preconditions != null) {
    if (null == databaseChangeLog.getPreconditions()) {
      databaseChangeLog.setPreconditions(new PreconditionContainer());
    }
    databaseChangeLog.getPreconditions().addNestedPrecondition(preconditions);
  }
  for (  ChangeSet changeSet : changeLog.getChangeSets()) {
    databaseChangeLog.addChangeSet(changeSet);
  }
  return true;
}"
84051,"public ChangeLogIterator(List<RanChangeSet> changeSetList,DatabaseChangeLog changeLog,ChangeSetFilter... changeSetFilters){
  final List<ChangeSet> changeSets=new ArrayList<ChangeSet>();
  for (  RanChangeSet ranChangeSet : changeSetList) {
    changeSets.add(changeLog.getChangeSet(ranChangeSet));
  }
  this.databaseChangeLog=(new DatabaseChangeLog(null){
    @Override public List<ChangeSet> getChangeSets(){
      return changeSets;
    }
  }
);
  this.changeSetFilters=Arrays.asList(changeSetFilters);
}","public ChangeLogIterator(List<RanChangeSet> changeSetList,DatabaseChangeLog changeLog,ChangeSetFilter... changeSetFilters){
  final List<ChangeSet> changeSets=new ArrayList<ChangeSet>();
  for (  RanChangeSet ranChangeSet : changeSetList) {
    ChangeSet changeSet=changeLog.getChangeSet(ranChangeSet);
    if (changeSet != null) {
      changeSets.add(changeSet);
    }
  }
  this.databaseChangeLog=(new DatabaseChangeLog(null){
    @Override public List<ChangeSet> getChangeSets(){
      return changeSets;
    }
  }
);
  this.changeSetFilters=Arrays.asList(changeSetFilters);
}"
84052,"private void checkViews(DiffResult diffResult){
  for (  View baseView : referenceSnapshot.getViews()) {
    if (!targetSnapshot.getViews().contains(baseView)) {
      diffResult.addMissingView(baseView);
    }
 else {
      for (      View targetView : targetSnapshot.getViews()) {
        if (targetView.getName().equals(baseView.getName())) {
          if (!targetView.getDefinition().equals(baseView.getDefinition())) {
            diffResult.addChangedView(targetView);
          }
        }
      }
    }
  }
  for (  View targetView : targetSnapshot.getViews()) {
    if (!referenceSnapshot.getViews().contains(targetView)) {
      diffResult.addUnexpectedView(targetView);
    }
 else {
      for (      View referenceView : referenceSnapshot.getViews()) {
        if (referenceView.getName().equals(targetView.getName())) {
          if (!referenceView.getDefinition().equals(targetView.getDefinition())) {
            diffResult.addChangedView(referenceView);
          }
        }
      }
    }
  }
}","private void checkViews(DiffResult diffResult){
  for (  View baseView : referenceSnapshot.getViews()) {
    if (!targetSnapshot.getViews().contains(baseView)) {
      diffResult.addMissingView(baseView);
    }
  }
  for (  View targetView : targetSnapshot.getViews()) {
    if (!referenceSnapshot.getViews().contains(targetView)) {
      diffResult.addUnexpectedView(targetView);
    }
 else {
      for (      View referenceView : referenceSnapshot.getViews()) {
        if (referenceView.getName().equals(targetView.getName())) {
          if (!referenceView.getDefinition().equals(targetView.getDefinition())) {
            diffResult.addChangedView(referenceView);
          }
        }
      }
    }
  }
}"
84053,"private void addUnexpectedPrimaryKeyChanges(List<ChangeSet> changes){
  for (  PrimaryKey pk : getUnexpectedPrimaryKeys()) {
    if (!getUnexpectedTables().contains(pk.getTable())) {
      DropPrimaryKeyChange change=new DropPrimaryKeyChange();
      change.setTableName(pk.getTable().getName());
      change.setSchemaName(pk.getTable().getSchema());
      change.setConstraintName(pk.getName());
      change.setTableName(pk.getTablespace());
      changes.add(generateChangeSet(change));
    }
  }
}","private void addUnexpectedPrimaryKeyChanges(List<ChangeSet> changes){
  for (  PrimaryKey pk : getUnexpectedPrimaryKeys()) {
    if (!getUnexpectedTables().contains(pk.getTable())) {
      DropPrimaryKeyChange change=new DropPrimaryKeyChange();
      change.setTableName(pk.getTable().getName());
      change.setSchemaName(pk.getTable().getSchema());
      change.setConstraintName(pk.getName());
      changes.add(generateChangeSet(change));
    }
  }
}"
84054,"public int getDatabaseMajorVersion() throws DatabaseException {
  try {
    return connection.getDatabaseMajorVersion();
  }
 catch (  DatabaseException e) {
    throw new DatabaseException(e);
  }
}","public int getDatabaseMajorVersion() throws DatabaseException {
  if (connection == null) {
    return -1;
  }
  try {
    return connection.getDatabaseMajorVersion();
  }
 catch (  DatabaseException e) {
    throw new DatabaseException(e);
  }
}"
84055,"public int getDatabaseMinorVersion() throws DatabaseException {
  try {
    return connection.getDatabaseMinorVersion();
  }
 catch (  DatabaseException e) {
    throw new DatabaseException(e);
  }
}","public int getDatabaseMinorVersion() throws DatabaseException {
  if (connection == null) {
    return -1;
  }
  try {
    return connection.getDatabaseMinorVersion();
  }
 catch (  DatabaseException e) {
    throw new DatabaseException(e);
  }
}"
84056,"public String getDatabaseProductVersion() throws DatabaseException {
  try {
    return connection.getDatabaseProductVersion();
  }
 catch (  DatabaseException e) {
    throw new DatabaseException(e);
  }
}","public String getDatabaseProductVersion() throws DatabaseException {
  if (connection == null) {
    return null;
  }
  try {
    return connection.getDatabaseProductVersion();
  }
 catch (  DatabaseException e) {
    throw new DatabaseException(e);
  }
}"
84057,"/** 
 * Returns the name of the database product according to the underlying database.
 */
public String getDatabaseProductName(){
  try {
    return connection.getDatabaseProductName();
  }
 catch (  DatabaseException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * Returns the name of the database product according to the underlying database.
 */
public String getDatabaseProductName(){
  if (connection == null) {
    return null;
  }
  try {
    return connection.getDatabaseProductName();
  }
 catch (  DatabaseException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}"
84058,"@Override public int hashCode(){
  return (connection != null ? connection.hashCode() : 0);
}","@Override public int hashCode(){
  return (connection != null ? connection.hashCode() : super.hashCode());
}"
84059,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  AbstractDatabase that=(AbstractDatabase)o;
  return !(connection != null ? !connection.equals(that.connection) : that.connection != null);
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  AbstractDatabase that=(AbstractDatabase)o;
  if (connection == null) {
    if (that.connection == null) {
      return this == that;
    }
 else {
      return false;
    }
  }
 else {
    return connection.equals(that.connection);
  }
}"
84060,"private void checkViews(DiffResult diffResult){
  for (  View baseView : referenceSnapshot.getViews()) {
    if (!targetSnapshot.getViews().contains(baseView)) {
      diffResult.addMissingView(baseView);
    }
 else {
      View targetView=null;
      for (      View view : targetSnapshot.getViews()) {
        if (view.getName().equals(baseView.getName())) {
          if (!view.getDefinition().equals(baseView.getDefinition())) {
            diffResult.addChangedView(view);
          }
        }
      }
    }
  }
  for (  View targetView : targetSnapshot.getViews()) {
    if (!referenceSnapshot.getViews().contains(targetView)) {
      diffResult.addUnexpectedView(targetView);
    }
 else {
      for (      View view : targetSnapshot.getViews()) {
        if (view.getName().equals(targetView.getName())) {
          if (!view.getDefinition().equals(targetView.getDefinition())) {
            diffResult.addChangedView(view);
          }
        }
      }
    }
  }
}","private void checkViews(DiffResult diffResult){
  for (  View baseView : referenceSnapshot.getViews()) {
    if (!targetSnapshot.getViews().contains(baseView)) {
      diffResult.addMissingView(baseView);
    }
 else {
      for (      View targetView : targetSnapshot.getViews()) {
        if (targetView.getName().equals(baseView.getName())) {
          if (!targetView.getDefinition().equals(baseView.getDefinition())) {
            diffResult.addChangedView(targetView);
          }
        }
      }
    }
  }
  for (  View targetView : targetSnapshot.getViews()) {
    if (!referenceSnapshot.getViews().contains(targetView)) {
      diffResult.addUnexpectedView(targetView);
    }
 else {
      for (      View referenceView : referenceSnapshot.getViews()) {
        if (referenceView.getName().equals(targetView.getName())) {
          if (!referenceView.getDefinition().equals(targetView.getDefinition())) {
            diffResult.addChangedView(referenceView);
          }
        }
      }
    }
  }
}"
84061,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  if (null == this.getColumnNames())   return false;
  UniqueConstraint that=(UniqueConstraint)o;
  boolean result=false;
  result=!(getColumnNames() != null ? !getColumnNames().equalsIgnoreCase(that.getColumnNames()) : that.getColumnNames() != null) && isDeferrable() == that.isDeferrable() && isInitiallyDeferred() == that.isInitiallyDeferred() && isDisabled() == that.isDisabled();
  if (result) {
    if (null == this.getTable()) {
      result=null == that.getTable();
    }
 else     if (null == this.getTable()) {
      result=false;
    }
 else {
      result=this.getTable().getName().equals(that.getTable().getName());
    }
  }
  return result;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  if (null == this.getColumnNames())   return false;
  UniqueConstraint that=(UniqueConstraint)o;
  boolean result=false;
  result=!(getColumnNames() != null ? !getColumnNames().equalsIgnoreCase(that.getColumnNames()) : that.getColumnNames() != null) && isDeferrable() == that.isDeferrable() && isInitiallyDeferred() == that.isInitiallyDeferred() && isDisabled() == that.isDisabled();
  if (result) {
    if (null == this.getTable()) {
      result=null == that.getTable();
    }
 else     if (null == that.getTable()) {
      result=false;
    }
 else {
      result=this.getTable().getName().equals(that.getTable().getName());
    }
  }
  return result;
}"
84062,"private void addMissingIndexChanges(List<ChangeSet> changes){
  for (  Index index : getMissingIndexes()) {
    CreateIndexChange change=new CreateIndexChange();
    change.setTableName(index.getTable().getName());
    change.setSchemaName(index.getTable().getSchema());
    change.setIndexName(index.getName());
    change.setUnique(index.isUnique());
    change.setAssociatedWith(index.getAssociatedWithAsString());
    for (    String columnName : index.getColumns()) {
      ColumnConfig column=new ColumnConfig();
      column.setName(columnName);
      change.addColumn(column);
    }
    changes.add(generateChangeSet(change));
  }
}","private void addMissingIndexChanges(List<ChangeSet> changes){
  for (  Index index : getMissingIndexes()) {
    CreateIndexChange change=new CreateIndexChange();
    change.setTableName(index.getTable().getName());
    change.setTablespace(index.getTablespace());
    change.setSchemaName(index.getTable().getSchema());
    change.setIndexName(index.getName());
    change.setUnique(index.isUnique());
    change.setAssociatedWith(index.getAssociatedWithAsString());
    for (    String columnName : index.getColumns()) {
      ColumnConfig column=new ColumnConfig();
      column.setName(columnName);
      change.addColumn(column);
    }
    changes.add(generateChangeSet(change));
  }
}"
84063,"protected void readIndexes(DatabaseSnapshot snapshot,String schema,DatabaseMetaData databaseMetaData) throws DatabaseException, SQLException {
  Database database=snapshot.getDatabase();
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  String query=""String_Node_Str"" + database.convertRequestedSchemaToSchema(schema) + ""String_Node_Str"";
  Statement statement=((JdbcConnection)database.getConnection()).getUnderlyingConnection().createStatement();
  ResultSet rs=statement.executeQuery(query);
  while (rs.next()) {
    String indexName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
    String tableName=rs.getString(""String_Node_Str"");
    String tableSpace=rs.getString(""String_Node_Str"");
    String columnName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
    if (columnName == null) {
      continue;
    }
    short type=rs.getShort(""String_Node_Str"");
    boolean nonUnique=true;
    try {
      nonUnique=rs.getBoolean(""String_Node_Str"");
    }
 catch (    SQLException e) {
    }
    short position=rs.getShort(""String_Node_Str"");
    String filterCondition=rs.getString(""String_Node_Str"");
    if (type == DatabaseMetaData.tableIndexStatistic) {
      continue;
    }
    Index index;
    index=new Index();
    index.setTable(snapshot.getTable(tableName));
    index.setTablespace(tableSpace);
    index.setName(indexName);
    index.setUnique(!nonUnique);
    index.setFilterCondition(filterCondition);
    for (int i=index.getColumns().size(); i < position; i++) {
      index.getColumns().add(null);
    }
    index.getColumns().set(position - 1,columnName);
    snapshot.getIndexes().add(index);
  }
  JdbcUtils.closeResultSet(rs);
  JdbcUtils.closeStatement(statement);
  for (  Index index : snapshot.getIndexes()) {
    for (    PrimaryKey pk : snapshot.getPrimaryKeys()) {
      if (index.getTable().getName().equalsIgnoreCase(pk.getTable().getName()) && index.getColumnNames().equals(pk.getColumnNames())) {
        index.addAssociatedWith(Index.MARK_PRIMARY_KEY);
      }
    }
    for (    ForeignKey fk : snapshot.getForeignKeys()) {
      if (index.getTable().getName().equalsIgnoreCase(fk.getForeignKeyTable().getName()) && index.getColumnNames().equals(fk.getForeignKeyColumns())) {
        index.addAssociatedWith(Index.MARK_FOREIGN_KEY);
      }
    }
    for (    UniqueConstraint uc : snapshot.getUniqueConstraints()) {
      if (index.getTable().getName().equalsIgnoreCase(uc.getTable().getName()) && index.getColumnNames().equals(uc.getColumnNames())) {
        index.addAssociatedWith(Index.MARK_UNIQUE_CONSTRAINT);
      }
    }
  }
}","protected void readIndexes(DatabaseSnapshot snapshot,String schema,DatabaseMetaData databaseMetaData) throws DatabaseException, SQLException {
  Database database=snapshot.getDatabase();
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  String query=""String_Node_Str"" + database.convertRequestedSchemaToSchema(schema) + ""String_Node_Str"";
  Statement statement=((JdbcConnection)database.getConnection()).getUnderlyingConnection().createStatement();
  ResultSet rs=statement.executeQuery(query);
  Map<String,Index> indexMap=new HashMap<String,Index>();
  while (rs.next()) {
    String indexName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
    String tableName=rs.getString(""String_Node_Str"");
    String tableSpace=rs.getString(""String_Node_Str"");
    String columnName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
    if (columnName == null) {
      continue;
    }
    short type=rs.getShort(""String_Node_Str"");
    boolean nonUnique=true;
    try {
      nonUnique=rs.getBoolean(""String_Node_Str"");
    }
 catch (    SQLException e) {
    }
    short position=rs.getShort(""String_Node_Str"");
    String filterCondition=rs.getString(""String_Node_Str"");
    if (type == DatabaseMetaData.tableIndexStatistic) {
      continue;
    }
    Index index;
    if (indexMap.containsKey(indexName)) {
      index=indexMap.get(indexName);
    }
 else {
      index=new Index();
      index.setTable(snapshot.getTable(tableName));
      index.setTablespace(tableSpace);
      index.setName(indexName);
      index.setUnique(!nonUnique);
      index.setFilterCondition(filterCondition);
      indexMap.put(indexName,index);
    }
    for (int i=index.getColumns().size(); i < position; i++) {
      index.getColumns().add(null);
    }
    index.getColumns().set(position - 1,columnName);
  }
  JdbcUtils.closeResultSet(rs);
  JdbcUtils.closeStatement(statement);
  for (  Map.Entry<String,Index> entry : indexMap.entrySet()) {
    snapshot.getIndexes().add(entry.getValue());
  }
  for (  Index index : snapshot.getIndexes()) {
    for (    PrimaryKey pk : snapshot.getPrimaryKeys()) {
      if (index.getTable().getName().equalsIgnoreCase(pk.getTable().getName()) && index.getColumnNames().equals(pk.getColumnNames())) {
        index.addAssociatedWith(Index.MARK_PRIMARY_KEY);
      }
    }
    for (    ForeignKey fk : snapshot.getForeignKeys()) {
      if (index.getTable().getName().equalsIgnoreCase(fk.getForeignKeyTable().getName()) && index.getColumnNames().equals(fk.getForeignKeyColumns())) {
        index.addAssociatedWith(Index.MARK_FOREIGN_KEY);
      }
    }
    for (    UniqueConstraint uc : snapshot.getUniqueConstraints()) {
      if (index.getTable().getName().equalsIgnoreCase(uc.getTable().getName()) && index.getColumnNames().equals(uc.getColumnNames())) {
        index.addAssociatedWith(Index.MARK_UNIQUE_CONSTRAINT);
      }
    }
  }
}"
84064,"private void addUnexpectedPrimaryKeyChanges(List<ChangeSet> changes){
  for (  PrimaryKey pk : getUnexpectedPrimaryKeys()) {
    if (!getUnexpectedTables().contains(pk.getTable())) {
      DropPrimaryKeyChange change=new DropPrimaryKeyChange();
      change.setTableName(pk.getTable().getName());
      change.setSchemaName(pk.getTable().getSchema());
      change.setConstraintName(pk.getName());
      changes.add(generateChangeSet(change));
    }
  }
}","private void addUnexpectedPrimaryKeyChanges(List<ChangeSet> changes){
  for (  PrimaryKey pk : getUnexpectedPrimaryKeys()) {
    if (!getUnexpectedTables().contains(pk.getTable())) {
      DropPrimaryKeyChange change=new DropPrimaryKeyChange();
      change.setTableName(pk.getTable().getName());
      change.setSchemaName(pk.getTable().getSchema());
      change.setConstraintName(pk.getName());
      change.setTableName(pk.getTablespace());
      changes.add(generateChangeSet(change));
    }
  }
}"
84065,"private void addMissingPrimaryKeyChanges(List<ChangeSet> changes){
  for (  PrimaryKey pk : getMissingPrimaryKeys()) {
    AddPrimaryKeyChange change=new AddPrimaryKeyChange();
    change.setTableName(pk.getTable().getName());
    change.setSchemaName(pk.getTable().getSchema());
    change.setConstraintName(pk.getName());
    change.setColumnNames(pk.getColumnNames());
    changes.add(generateChangeSet(change));
  }
}","private void addMissingPrimaryKeyChanges(List<ChangeSet> changes){
  for (  PrimaryKey pk : getMissingPrimaryKeys()) {
    AddPrimaryKeyChange change=new AddPrimaryKeyChange();
    change.setTableName(pk.getTable().getName());
    change.setSchemaName(pk.getTable().getSchema());
    change.setConstraintName(pk.getName());
    change.setColumnNames(pk.getColumnNames());
    change.setTablespace(pk.getTablespace());
    changes.add(generateChangeSet(change));
  }
}"
84066,"public static CheckSum parse(String checksumValue){
  if (checksumValue.startsWith(CheckSum.getCurrentVersion() + ""String_Node_Str"")) {
    return new CheckSum(checksumValue.substring(2),getCurrentVersion());
  }
 else {
    return new CheckSum(checksumValue,1);
  }
}","public static CheckSum parse(String checksumValue){
  if (checksumValue == null) {
    return null;
  }
  if (checksumValue.startsWith(CheckSum.getCurrentVersion() + ""String_Node_Str"")) {
    return new CheckSum(checksumValue.substring(2),getCurrentVersion());
  }
 else {
    return new CheckSum(checksumValue,1);
  }
}"
84067,"public boolean isNullable(){
  return getConstraints() != null && getConstraints().isNullable();
}","public boolean isNullable(){
  return getConstraints() == null || getConstraints().isNullable();
}"
84068,"@Override public ValidationErrors validate(Database database){
  return customChange.validate(database);
}","@Override public ValidationErrors validate(Database database){
  try {
    return customChange.validate(database);
  }
 catch (  AbstractMethodError e) {
    return new ValidationErrors();
  }
}"
84069,"@SuppressWarnings({""String_Node_Str""}) public boolean accepts(ChangeSet changeSet){
  for (  RanChangeSet ranChangeSet : ranChangeSets) {
    if (ranChangeSet.getId().equals(changeSet.getId()) && ranChangeSet.getAuthor().equals(changeSet.getAuthor()) && isPathEquals(changeSet,ranChangeSet)) {
      if (!changeSet.generateCheckSum().equals(ranChangeSet.getLastCheckSum())) {
        UpdateStatement md5sumUpdateStatement=new UpdateStatement(database.getDefaultSchemaName(),database.getDatabaseChangeLogTableName());
        md5sumUpdateStatement.addNewColumnValue(""String_Node_Str"",changeSet.generateCheckSum());
        md5sumUpdateStatement.setWhereClause(""String_Node_Str"");
        md5sumUpdateStatement.addWhereParameter(changeSet.getId());
        md5sumUpdateStatement.addWhereParameter(changeSet.getAuthor());
        md5sumUpdateStatement.addWhereParameter(changeSet.getFilePath());
        try {
          ExecutorService.getInstance().getWriteExecutor(database).update(md5sumUpdateStatement,new ArrayList<SqlVisitor>());
        }
 catch (        JDBCException e) {
          throw new RuntimeException(e);
        }
      }
      if (changeSet.shouldAlwaysRun()) {
        return true;
      }
 else       if (changeSet.shouldRunOnChange() && !changeSet.generateCheckSum().equals(ranChangeSet.getLastCheckSum())) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  return true;
}","@SuppressWarnings({""String_Node_Str""}) public boolean accepts(ChangeSet changeSet){
  for (  RanChangeSet ranChangeSet : ranChangeSets) {
    if (ranChangeSet.getId().equals(changeSet.getId()) && ranChangeSet.getAuthor().equals(changeSet.getAuthor()) && isPathEquals(changeSet,ranChangeSet)) {
      if (!changeSet.generateCheckSum().equals(ranChangeSet.getLastCheckSum())) {
        UpdateStatement md5sumUpdateStatement=new UpdateStatement(database.getDefaultSchemaName(),database.getDatabaseChangeLogTableName());
        md5sumUpdateStatement.addNewColumnValue(""String_Node_Str"",changeSet.generateCheckSum().toString());
        md5sumUpdateStatement.setWhereClause(""String_Node_Str"");
        md5sumUpdateStatement.addWhereParameter(changeSet.getId());
        md5sumUpdateStatement.addWhereParameter(changeSet.getAuthor());
        md5sumUpdateStatement.addWhereParameter(changeSet.getFilePath());
        try {
          ExecutorService.getInstance().getWriteExecutor(database).update(md5sumUpdateStatement,new ArrayList<SqlVisitor>());
        }
 catch (        JDBCException e) {
          throw new RuntimeException(e);
        }
      }
      if (changeSet.shouldAlwaysRun()) {
        return true;
      }
 else       if (changeSet.shouldRunOnChange() && !changeSet.generateCheckSum().equals(ranChangeSet.getLastCheckSum())) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  return true;
}"
84070,"/** 
 * Returns the ChangeSets that have been run against the current database.
 */
public List<RanChangeSet> getRanChangeSetList() throws JDBCException {
  if (this.ranChangeSetList != null) {
    return this.ranChangeSetList;
  }
  String databaseChangeLogTableName=escapeTableName(getLiquibaseSchemaName(),getDatabaseChangeLogTableName());
  ranChangeSetList=new ArrayList<RanChangeSet>();
  if (doesChangeLogTableExist()) {
    log.info(""String_Node_Str"" + databaseChangeLogTableName);
    SqlStatement select=new SelectFromDatabaseChangeLogStatement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setOrderBy(""String_Node_Str"",""String_Node_Str"");
    List<Map> results=ExecutorService.getInstance().getReadExecutor(this).queryForList(select);
    for (    Map rs : results) {
      String fileName=rs.get(""String_Node_Str"").toString();
      String author=rs.get(""String_Node_Str"").toString();
      String id=rs.get(""String_Node_Str"").toString();
      String md5sum=rs.get(""String_Node_Str"").toString();
      Date dateExecuted=(Date)rs.get(""String_Node_Str"");
      String tag=rs.get(""String_Node_Str"").toString();
      RanChangeSet ranChangeSet=new RanChangeSet(fileName,id,author,CheckSum.parse(md5sum),dateExecuted,tag);
      ranChangeSetList.add(ranChangeSet);
    }
  }
  return ranChangeSetList;
}","/** 
 * Returns the ChangeSets that have been run against the current database.
 */
public List<RanChangeSet> getRanChangeSetList() throws JDBCException {
  if (this.ranChangeSetList != null) {
    return this.ranChangeSetList;
  }
  String databaseChangeLogTableName=escapeTableName(getLiquibaseSchemaName(),getDatabaseChangeLogTableName());
  ranChangeSetList=new ArrayList<RanChangeSet>();
  if (doesChangeLogTableExist()) {
    log.info(""String_Node_Str"" + databaseChangeLogTableName);
    SqlStatement select=new SelectFromDatabaseChangeLogStatement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setOrderBy(""String_Node_Str"",""String_Node_Str"");
    List<Map> results=ExecutorService.getInstance().getReadExecutor(this).queryForList(select);
    for (    Map rs : results) {
      String fileName=rs.get(""String_Node_Str"").toString();
      String author=rs.get(""String_Node_Str"").toString();
      String id=rs.get(""String_Node_Str"").toString();
      String md5sum=rs.get(""String_Node_Str"") == null ? null : rs.get(""String_Node_Str"").toString();
      Date dateExecuted=(Date)rs.get(""String_Node_Str"");
      String tag=rs.get(""String_Node_Str"") == null ? null : rs.get(""String_Node_Str"").toString();
      RanChangeSet ranChangeSet=new RanChangeSet(fileName,id,author,CheckSum.parse(md5sum),dateExecuted,tag);
      ranChangeSetList.add(ranChangeSet);
    }
  }
  return ranChangeSetList;
}"
84071,"/** 
 * This method will check the database ChangeLog table used to keep track of the changes in the file. If the table does not exist it will create one otherwise it will not do anything besides outputting a log message.
 */
public void checkDatabaseChangeLogTable() throws JDBCException {
  WriteExecutor writeExecutor=ExecutorService.getInstance().getWriteExecutor(this);
  if (!writeExecutor.executesStatements()) {
    if (((LoggingExecutor)writeExecutor).alreadyCreatedChangeTable()) {
      return;
    }
 else {
      ((LoggingExecutor)writeExecutor).setAlreadyCreatedChangeTable(true);
    }
  }
  DatabaseConnection connection=getConnection();
  ResultSet checkColumnsRS=null;
  List<SqlStatement> statementsToExecute=new ArrayList<SqlStatement>();
  boolean changeLogCreateAttempted=false;
  try {
    if (doesChangeLogTableExist()) {
      checkColumnsRS=connection.getMetaData().getColumns(convertRequestedSchemaToCatalog(getLiquibaseSchemaName()),convertRequestedSchemaToSchema(getLiquibaseSchemaName()),getDatabaseChangeLogTableName(),null);
      boolean hasDescription=false;
      boolean hasComments=false;
      boolean hasTag=false;
      boolean hasLiquibase=false;
      boolean hasOrderExecuted=false;
      boolean checksumNotRightSize=false;
      while (checkColumnsRS.next()) {
        String columnName=checkColumnsRS.getString(""String_Node_Str"");
        if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasDescription=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasComments=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasTag=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasLiquibase=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasOrderExecuted=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName) && checkColumnsRS.getInt(""String_Node_Str"") != 35) {
          checksumNotRightSize=true;
        }
      }
      if (!hasDescription) {
        writeExecutor.comment(""String_Node_Str"");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasTag) {
        writeExecutor.comment(""String_Node_Str"");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasComments) {
        writeExecutor.comment(""String_Node_Str"");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasLiquibase) {
        writeExecutor.comment(""String_Node_Str"");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasOrderExecuted) {
        writeExecutor.comment(""String_Node_Str"");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null,new NotNullConstraint(),new UniqueConstraint()));
      }
      if (!checksumNotRightSize) {
        writeExecutor.comment(""String_Node_Str"");
        ColumnConfig checksumColumn=new ColumnConfig();
        checksumColumn.setName(""String_Node_Str"");
        checksumColumn.setType(""String_Node_Str"");
        statementsToExecute.add(new ModifyColumnsStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),checksumColumn));
      }
      ResultSet md5sumRS=connection.createStatement().executeQuery(""String_Node_Str"" + escapeTableName(getLiquibaseSchemaName(),getDatabaseChangeLogTableName()) + ""String_Node_Str"");
      if (md5sumRS.next()) {
        String md5sum=md5sumRS.getString(1);
        if (!md5sum.startsWith(CheckSum.getCurrentVersion() + ""String_Node_Str"")) {
          writeExecutor.comment(""String_Node_Str"");
          statementsToExecute.add(new RawSqlStatement(""String_Node_Str"" + escapeTableName(getLiquibaseSchemaName(),getDatabaseChangeLogTableName()) + ""String_Node_Str""));
        }
      }
    }
 else     if (!changeLogCreateAttempted) {
      writeExecutor.comment(""String_Node_Str"");
      SqlStatement createTableStatement=new CreateDatabaseChangeLogTableStatement();
      if (!canCreateChangeLogTable()) {
        throw new JDBCException(""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName()) + ""String_Node_Str""+ ""String_Node_Str""+ createTableStatement);
      }
      statementsToExecute.add(createTableStatement);
      log.info(""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName()));
    }
    for (    SqlStatement sql : statementsToExecute) {
      writeExecutor.execute(sql,new ArrayList<SqlVisitor>());
      this.commit();
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (checkColumnsRS != null) {
      try {
        checkColumnsRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}","/** 
 * This method will check the database ChangeLog table used to keep track of the changes in the file. If the table does not exist it will create one otherwise it will not do anything besides outputting a log message.
 */
public void checkDatabaseChangeLogTable() throws JDBCException {
  WriteExecutor writeExecutor=ExecutorService.getInstance().getWriteExecutor(this);
  if (!writeExecutor.executesStatements()) {
    if (((LoggingExecutor)writeExecutor).alreadyCreatedChangeTable()) {
      return;
    }
 else {
      ((LoggingExecutor)writeExecutor).setAlreadyCreatedChangeTable(true);
    }
  }
  DatabaseConnection connection=getConnection();
  ResultSet checkColumnsRS=null;
  List<SqlStatement> statementsToExecute=new ArrayList<SqlStatement>();
  boolean changeLogCreateAttempted=false;
  try {
    if (doesChangeLogTableExist()) {
      checkColumnsRS=connection.getMetaData().getColumns(convertRequestedSchemaToCatalog(getLiquibaseSchemaName()),convertRequestedSchemaToSchema(getLiquibaseSchemaName()),getDatabaseChangeLogTableName(),null);
      boolean hasDescription=false;
      boolean hasComments=false;
      boolean hasTag=false;
      boolean hasLiquibase=false;
      boolean hasOrderExecuted=false;
      boolean checksumNotRightSize=false;
      while (checkColumnsRS.next()) {
        String columnName=checkColumnsRS.getString(""String_Node_Str"");
        if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasDescription=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasComments=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasTag=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasLiquibase=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasOrderExecuted=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName) && checkColumnsRS.getInt(""String_Node_Str"") != 35) {
          checksumNotRightSize=true;
        }
      }
      if (!hasDescription) {
        writeExecutor.comment(""String_Node_Str"");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasTag) {
        writeExecutor.comment(""String_Node_Str"");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasComments) {
        writeExecutor.comment(""String_Node_Str"");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasLiquibase) {
        writeExecutor.comment(""String_Node_Str"");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasOrderExecuted) {
        writeExecutor.comment(""String_Node_Str"");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null,new NotNullConstraint(),new UniqueConstraint()));
      }
      if (checksumNotRightSize) {
        writeExecutor.comment(""String_Node_Str"");
        ColumnConfig checksumColumn=new ColumnConfig();
        checksumColumn.setName(""String_Node_Str"");
        checksumColumn.setType(""String_Node_Str"");
        statementsToExecute.add(new ModifyColumnsStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),checksumColumn));
      }
      ResultSet md5sumRS=connection.createStatement().executeQuery(""String_Node_Str"" + escapeTableName(getLiquibaseSchemaName(),getDatabaseChangeLogTableName()) + ""String_Node_Str"");
      if (md5sumRS.next()) {
        String md5sum=md5sumRS.getString(1);
        if (!md5sum.startsWith(CheckSum.getCurrentVersion() + ""String_Node_Str"")) {
          writeExecutor.comment(""String_Node_Str"");
          statementsToExecute.add(new RawSqlStatement(""String_Node_Str"" + escapeTableName(getLiquibaseSchemaName(),getDatabaseChangeLogTableName()) + ""String_Node_Str""));
        }
      }
    }
 else     if (!changeLogCreateAttempted) {
      writeExecutor.comment(""String_Node_Str"");
      SqlStatement createTableStatement=new CreateDatabaseChangeLogTableStatement();
      if (!canCreateChangeLogTable()) {
        throw new JDBCException(""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName()) + ""String_Node_Str""+ ""String_Node_Str""+ createTableStatement);
      }
      statementsToExecute.add(createTableStatement);
      log.info(""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName()));
    }
    for (    SqlStatement sql : statementsToExecute) {
      writeExecutor.execute(sql,new ArrayList<SqlVisitor>());
      this.commit();
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (checkColumnsRS != null) {
      try {
        checkColumnsRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}"
84072,"public Sql[] generateSql(ModifyColumnsStatement statement,Database database,SqlGeneratorChain sqlGeneratorChain){
  if (database instanceof SQLiteDatabase) {
    return generateStatementsForSQLiteDatabase(statement,database);
  }
  List<Sql> sql=new ArrayList<Sql>();
  for (  ColumnConfig column : statement.getColumns()) {
    String alterTable=""String_Node_Str"" + database.escapeTableName(statement.getSchemaName(),statement.getTableName());
    alterTable+=""String_Node_Str"" + getModifyString(database) + ""String_Node_Str"";
    alterTable+=database.escapeColumnName(statement.getSchemaName(),statement.getTableName(),column.getName());
    alterTable+=getPreDataTypeString(database);
    alterTable+=database.getColumnType(column.getType(),false);
    if (supportsExtraMetaData(database)) {
      if (!column.isNullable()) {
        alterTable+=""String_Node_Str"";
      }
 else {
        if (database instanceof SybaseDatabase || database instanceof SybaseASADatabase) {
          alterTable+=""String_Node_Str"";
        }
      }
      alterTable+=getDefaultClause(column,database);
      if (column.isAutoIncrement()) {
        alterTable+=""String_Node_Str"" + database.getAutoIncrementClause();
      }
      if (column.isPrimaryKey()) {
        alterTable+=""String_Node_Str"";
      }
    }
    alterTable+=getPostDataTypeString(database);
    sql.add(new UnparsedSql(alterTable));
  }
  return sql.toArray(new Sql[sql.size()]);
}","public Sql[] generateSql(ModifyColumnsStatement statement,Database database,SqlGeneratorChain sqlGeneratorChain){
  if (database instanceof SQLiteDatabase) {
    return generateStatementsForSQLiteDatabase(statement,database);
  }
  List<Sql> sql=new ArrayList<Sql>();
  for (  ColumnConfig column : statement.getColumns()) {
    String alterTable=""String_Node_Str"" + database.escapeTableName(statement.getSchemaName(),statement.getTableName());
    alterTable+=""String_Node_Str"" + getModifyString(database) + ""String_Node_Str"";
    alterTable+=database.escapeColumnName(statement.getSchemaName(),statement.getTableName(),column.getName());
    alterTable+=getPreDataTypeString(database);
    alterTable+=database.getColumnType(column.getType(),false);
    if (supportsExtraMetaData(database)) {
      if (!column.isNullable()) {
        alterTable+=""String_Node_Str"";
      }
 else {
        if (database instanceof SybaseDatabase || database instanceof SybaseASADatabase) {
          alterTable+=""String_Node_Str"";
        }
      }
      alterTable+=getDefaultClause(column,database);
      if (column.isAutoIncrement() != null && column.isAutoIncrement()) {
        alterTable+=""String_Node_Str"" + database.getAutoIncrementClause();
      }
      if (column.isPrimaryKey()) {
        alterTable+=""String_Node_Str"";
      }
    }
    alterTable+=getPostDataTypeString(database);
    sql.add(new UnparsedSql(alterTable));
  }
  return sql.toArray(new Sql[sql.size()]);
}"
84073,"private void writeHeader(Object object,FileWriter fileWriter) throws IOException {
  String title=createTitle(object);
  fileWriter.append(""String_Node_Str"").append(""String_Node_Str"").append(title).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(title).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
}","private void writeHeader(Object object,FileWriter fileWriter) throws IOException {
  String title=createTitle(object);
  fileWriter.append(""String_Node_Str"").append(""String_Node_Str"").append(title).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(title.replaceAll(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
}"
84074,"protected SqlGenerator getGenerator(SqlStatement statement,Database database){
  SortedSet<SqlGenerator> validGenerators=getGenerators(statement,database);
  if (validGenerators.size() == 0) {
    return null;
  }
 else {
    return validGenerators.first();
  }
}","public SqlGenerator getGenerator(SqlStatement statement,Database database){
  SortedSet<SqlGenerator> validGenerators=getGenerators(statement,database);
  if (validGenerators.size() == 0) {
    return null;
  }
 else {
    return validGenerators.first();
  }
}"
84075,"protected void readIndexes(String schema) throws JDBCException, SQLException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  for (  Table table : tablesMap.values()) {
    ResultSet rs;
    Statement statement=null;
    if (database instanceof OracleDatabase) {
      statement=database.getConnection().createStatement();
      String sql=""String_Node_Str"" + database.convertRequestedSchemaToSchema(schema) + ""String_Node_Str""+ table.getName()+ ""String_Node_Str"";
      rs=statement.executeQuery(sql);
    }
 else {
      rs=databaseMetaData.getIndexInfo(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),table.getName(),false,true);
    }
    Map<String,Index> indexMap=new HashMap<String,Index>();
    while (rs.next()) {
      String indexName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
      short type=rs.getShort(""String_Node_Str"");
      boolean nonUnique=true;
      try {
        nonUnique=rs.getBoolean(""String_Node_Str"");
      }
 catch (      SQLException e) {
      }
      String columnName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
      short position=rs.getShort(""String_Node_Str"");
      String filterCondition=rs.getString(""String_Node_Str"");
      if (type == DatabaseMetaData.tableIndexStatistic) {
        continue;
      }
      if (columnName == null) {
        continue;
      }
      Index indexInformation;
      if (indexMap.containsKey(indexName)) {
        indexInformation=indexMap.get(indexName);
      }
 else {
        indexInformation=new Index();
        indexInformation.setTable(table);
        indexInformation.setName(indexName);
        indexInformation.setUnique(!nonUnique);
        indexInformation.setFilterCondition(filterCondition);
        indexMap.put(indexName,indexInformation);
      }
      final int columnsBefore=indexInformation.getColumns().size() + 1;
      for (int i=position; i > columnsBefore; --i) {
        indexInformation.getColumns().add(null);
      }
    }
    for (    Map.Entry<String,Index> entry : indexMap.entrySet()) {
      indexes.add(entry.getValue());
    }
    rs.close();
    if (statement != null) {
      statement.close();
    }
  }
  Set<Index> indexesToRemove=new HashSet<Index>();
  for (  Index index : indexes) {
    for (    PrimaryKey pk : primaryKeys) {
      if (index.getTable().getName().equalsIgnoreCase(pk.getTable().getName()) && index.getColumnNames().equals(pk.getColumnNames())) {
        indexesToRemove.add(index);
      }
    }
    for (    ForeignKey fk : foreignKeys) {
      if (index.getTable().getName().equalsIgnoreCase(fk.getForeignKeyTable().getName()) && index.getColumnNames().equals(fk.getForeignKeyColumns())) {
        indexesToRemove.add(index);
      }
    }
    for (    UniqueConstraint uc : uniqueConstraints) {
      if (index.getTable().getName().equalsIgnoreCase(uc.getTable().getName()) && index.getColumnNames().equals(uc.getColumnNames())) {
        indexesToRemove.add(index);
      }
    }
  }
  indexes.removeAll(indexesToRemove);
}","protected void readIndexes(String schema) throws JDBCException, SQLException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  for (  Table table : tablesMap.values()) {
    ResultSet rs;
    Statement statement=null;
    if (database instanceof OracleDatabase) {
      statement=database.getConnection().createStatement();
      String sql=""String_Node_Str"" + database.convertRequestedSchemaToSchema(schema) + ""String_Node_Str""+ table.getName()+ ""String_Node_Str"";
      rs=statement.executeQuery(sql);
    }
 else {
      rs=databaseMetaData.getIndexInfo(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),table.getName(),false,true);
    }
    Map<String,Index> indexMap=new HashMap<String,Index>();
    while (rs.next()) {
      String indexName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
      short type=rs.getShort(""String_Node_Str"");
      boolean nonUnique=true;
      try {
        nonUnique=rs.getBoolean(""String_Node_Str"");
      }
 catch (      SQLException e) {
      }
      String columnName=convertFromDatabaseName(rs.getString(""String_Node_Str""));
      short position=rs.getShort(""String_Node_Str"");
      String filterCondition=rs.getString(""String_Node_Str"");
      if (type == DatabaseMetaData.tableIndexStatistic) {
        continue;
      }
      if (columnName == null) {
        continue;
      }
      Index indexInformation;
      if (indexMap.containsKey(indexName)) {
        indexInformation=indexMap.get(indexName);
      }
 else {
        indexInformation=new Index();
        indexInformation.setTable(table);
        indexInformation.setName(indexName);
        indexInformation.setUnique(!nonUnique);
        indexInformation.setFilterCondition(filterCondition);
        indexMap.put(indexName,indexInformation);
      }
      for (int i=indexInformation.getColumns().size(); i < position; i++) {
        indexInformation.getColumns().add(null);
      }
      indexInformation.getColumns().set(position - 1,columnName);
    }
    for (    Map.Entry<String,Index> entry : indexMap.entrySet()) {
      indexes.add(entry.getValue());
    }
    rs.close();
    if (statement != null) {
      statement.close();
    }
  }
  Set<Index> indexesToRemove=new HashSet<Index>();
  for (  Index index : indexes) {
    for (    PrimaryKey pk : primaryKeys) {
      if (index.getTable().getName().equalsIgnoreCase(pk.getTable().getName()) && index.getColumnNames().equals(pk.getColumnNames())) {
        indexesToRemove.add(index);
      }
    }
    for (    ForeignKey fk : foreignKeys) {
      if (index.getTable().getName().equalsIgnoreCase(fk.getForeignKeyTable().getName()) && index.getColumnNames().equals(fk.getForeignKeyColumns())) {
        indexesToRemove.add(index);
      }
    }
    for (    UniqueConstraint uc : uniqueConstraints) {
      if (index.getTable().getName().equalsIgnoreCase(uc.getTable().getName()) && index.getColumnNames().equals(uc.getColumnNames())) {
        indexesToRemove.add(index);
      }
    }
  }
  indexes.removeAll(indexesToRemove);
}"
84076,"public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  String schemaName=getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName();
  CreateTableStatement statement=new CreateTableStatement(schemaName,getTableName());
  for (  ColumnConfig column : getColumns()) {
    ConstraintsConfig constraints=column.getConstraints();
    boolean isAutoIncrement=column.isAutoIncrement() != null && column.isAutoIncrement();
    String defaultValue=null;
    if (column.hasDefaultValue()) {
      defaultValue=StringUtils.trimToNull(column.getDefaultColumnValue(database));
    }
    if (constraints != null && constraints.isPrimaryKey() != null && constraints.isPrimaryKey()) {
      statement.addPrimaryKeyColumn(column.getName(),database.getColumnType(column.getType(),isAutoIncrement),defaultValue,constraints.getPrimaryKeyName());
    }
 else {
      statement.addColumn(column.getName(),database.getColumnType(column.getType(),column.isAutoIncrement()),defaultValue);
    }
    if (constraints != null) {
      if (constraints.isNullable() != null && !constraints.isNullable()) {
        statement.addColumnConstraint(new NotNullConstraint(column.getName()));
      }
      if (constraints.getReferences() != null) {
        if (StringUtils.trimToNull(constraints.getForeignKeyName()) == null) {
          throw new UnsupportedChangeException(""String_Node_Str"");
        }
        ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(constraints.getForeignKeyName(),constraints.getReferences());
        fkConstraint.setColumn(column.getName());
        fkConstraint.setDeleteCascade(constraints.isDeleteCascade() != null && constraints.isDeleteCascade());
        fkConstraint.setInitiallyDeferred(constraints.isInitiallyDeferred() != null && constraints.isInitiallyDeferred());
        fkConstraint.setDeferrable(constraints.isDeferrable() != null && constraints.isDeferrable());
        statement.addColumnConstraint(fkConstraint);
      }
      if (constraints.isUnique() != null && constraints.isUnique()) {
        statement.addColumnConstraint(new UniqueConstraint(constraints.getUniqueConstraintName()).addColumns(column.getName()));
      }
    }
    if (isAutoIncrement) {
      statement.addColumnConstraint(new AutoIncrementConstraint(column.getName()));
    }
  }
  statement.setTablespace(StringUtils.trimToNull(getTablespace()));
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  statements.add(statement);
  return statements.toArray(new SqlStatement[statements.size()]);
}","public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  String schemaName=getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName();
  CreateTableStatement statement=new CreateTableStatement(schemaName,getTableName());
  for (  ColumnConfig column : getColumns()) {
    ConstraintsConfig constraints=column.getConstraints();
    boolean isAutoIncrement=column.isAutoIncrement() != null && column.isAutoIncrement();
    String defaultValue=null;
    if (column.hasDefaultValue()) {
      defaultValue=StringUtils.trimToNull(column.getDefaultColumnValue(database));
    }
    if (constraints != null && constraints.isPrimaryKey() != null && constraints.isPrimaryKey()) {
      statement.addPrimaryKeyColumn(column.getName(),database.getColumnType(column.getType(),isAutoIncrement),defaultValue,constraints.getPrimaryKeyName());
    }
 else {
      statement.addColumn(column.getName(),database.getColumnType(column.getType(),column.isAutoIncrement()),defaultValue);
    }
    if (constraints != null) {
      if (constraints.isNullable() != null && !constraints.isNullable()) {
        statement.addColumnConstraint(new NotNullConstraint(column.getName()));
      }
      if (constraints.getReferences() != null) {
        if (StringUtils.trimToNull(constraints.getForeignKeyName()) == null) {
          throw new UnsupportedChangeException(""String_Node_Str"");
        }
        ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(constraints.getForeignKeyName(),constraints.getReferences());
        fkConstraint.setColumn(column.getName());
        fkConstraint.setDeleteCascade(constraints.isDeleteCascade() != null && constraints.isDeleteCascade());
        fkConstraint.setInitiallyDeferred(constraints.isInitiallyDeferred() != null && constraints.isInitiallyDeferred());
        fkConstraint.setDeferrable(constraints.isDeferrable() != null && constraints.isDeferrable());
        statement.addColumnConstraint(fkConstraint);
      }
      if (constraints.isUnique() != null && constraints.isUnique()) {
        statement.addColumnConstraint(new UniqueConstraint(constraints.getUniqueConstraintName()).addColumns(column.getName()));
      }
    }
    if (isAutoIncrement) {
      statement.addColumnConstraint(new AutoIncrementConstraint(column.getName()));
    }
  }
  statement.setTablespace(StringUtils.trimToNull(getTablespace()));
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  statements.add(statement);
  if (StringUtils.trimToNull(remarks) != null) {
    SetTableRemarksStatement remarksStatement=new SetTableRemarksStatement(schemaName,tableName,remarks);
    if (remarksStatement.supportsDatabase(database)) {
      statements.add(remarksStatement);
    }
  }
  for (  ColumnConfig column : getColumns()) {
    String columnRemarks=StringUtils.trimToNull(column.getRemarks());
    if (columnRemarks != null) {
      SetColumnRemarksStatement remarksStatement=new SetColumnRemarksStatement(schemaName,tableName,column.getName(),columnRemarks);
      if (remarksStatement.supportsDatabase(database)) {
        statements.add(remarksStatement);
      }
    }
  }
  return statements.toArray(new SqlStatement[statements.size()]);
}"
84077,"public void startElement(String uri,String localName,String qName,Attributes baseAttributes) throws SAXException {
  Attributes atts=new ExpandingAttributes(baseAttributes);
  try {
    if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String version=uri.substring(uri.lastIndexOf(""String_Node_Str"") + 1);
      if (!version.equals(XMLChangeLogParser.getSchemaVersion())) {
        log.warning(databaseChangeLog.getPhysicalFilePath() + ""String_Node_Str"" + version+ ""String_Node_Str""+ XMLChangeLogParser.getSchemaVersion());
      }
      databaseChangeLog.setLogicalFilePath(atts.getValue(""String_Node_Str""));
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String fileName=atts.getValue(""String_Node_Str"");
      boolean isRelativeToChangelogFile=Boolean.parseBoolean(atts.getValue(""String_Node_Str""));
      handleIncludedChangeLog(fileName,isRelativeToChangelogFile,databaseChangeLog.getPhysicalFilePath());
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String pathName=atts.getValue(""String_Node_Str"");
      Enumeration<URL> resources=fileOpener.getResources(pathName);
      while (resources.hasMoreElements()) {
        URL dirUrl=resources.nextElement();
        if (dirUrl.getAuthority() != null) {
          continue;
        }
        File dir=new File(new URI(dirUrl.toExternalForm()));
        if (!dir.exists()) {
          throw new SAXException(""String_Node_Str"" + pathName + ""String_Node_Str""+ dir.toString());
        }
        File[] files=dir.listFiles(new FilenameFilter(){
          public boolean accept(          File dir,          String name){
            return name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"");
          }
        }
);
        for (        File file : files) {
          handleIncludedChangeLog(pathName + file.getName(),false,databaseChangeLog.getPhysicalFilePath());
        }
      }
    }
 else     if (changeSet == null && ""String_Node_Str"".equals(qName)) {
      boolean alwaysRun=false;
      boolean runOnChange=false;
      if (""String_Node_Str"".equalsIgnoreCase(atts.getValue(""String_Node_Str""))) {
        alwaysRun=true;
      }
      if (""String_Node_Str"".equalsIgnoreCase(atts.getValue(""String_Node_Str""))) {
        runOnChange=true;
      }
      changeSet=new ChangeSet(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""),alwaysRun,runOnChange,databaseChangeLog.getFilePath(),databaseChangeLog.getPhysicalFilePath(),atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""),Boolean.valueOf(atts.getValue(""String_Node_Str"")));
      if (StringUtils.trimToNull(atts.getValue(""String_Node_Str"")) != null) {
        changeSet.setFailOnError(Boolean.parseBoolean(atts.getValue(""String_Node_Str"")));
      }
    }
 else     if (changeSet != null && ""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
      String id=atts.getValue(""String_Node_Str"");
      if (id != null) {
        String path=atts.getValue(""String_Node_Str"");
        if (path == null) {
          path=databaseChangeLog.getFilePath();
        }
        String author=atts.getValue(""String_Node_Str"");
        ChangeSet changeSet=databaseChangeLog.getChangeSet(path,author,id);
        if (changeSet == null) {
          throw new SAXException(""String_Node_Str"" + path + ""String_Node_Str""+ author+ ""String_Node_Str""+ id);
        }
 else {
          for (          Change change : changeSet.getChanges()) {
            this.changeSet.addRollbackChange(change);
          }
        }
      }
      inRollback=true;
    }
 else     if (""String_Node_Str"".equals(qName)) {
      rootPrecondition=new Preconditions();
      rootPrecondition.setOnFail(StringUtils.trimToNull(atts.getValue(""String_Node_Str"")));
      rootPrecondition.setOnError(StringUtils.trimToNull(atts.getValue(""String_Node_Str"")));
      preconditionLogicStack.push(rootPrecondition);
    }
 else     if (currentPrecondition != null && currentPrecondition instanceof CustomPreconditionWrapper && qName.equals(""String_Node_Str"")) {
      ((CustomPreconditionWrapper)currentPrecondition).setParam(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
    }
 else     if (rootPrecondition != null) {
      currentPrecondition=PreconditionFactory.getInstance().create(qName);
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(currentPrecondition,attributeName,attributeValue);
      }
      preconditionLogicStack.peek().addNestedPrecondition(currentPrecondition);
      if (currentPrecondition instanceof PreconditionLogic) {
        preconditionLogicStack.push(((PreconditionLogic)currentPrecondition));
      }
      if (""String_Node_Str"".equals(qName)) {
        text=new StringBuffer();
      }
    }
 else     if (""String_Node_Str"".equals(qName)) {
      inModifySql=true;
      if (StringUtils.trimToNull(atts.getValue(""String_Node_Str"")) != null) {
        modifySqlDbmsList=StringUtils.splitAndTrim(atts.getValue(""String_Node_Str""),""String_Node_Str"");
      }
    }
 else     if (inModifySql) {
      SqlVisitor sqlVisitor=SqlVisitorFactory.getInstance().create(qName);
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(sqlVisitor,attributeName,attributeValue);
      }
      sqlVisitor.setApplicableDbms(modifySqlDbmsList);
      changeSet.addSqlVisitor(sqlVisitor);
    }
 else     if (changeSet != null && change == null) {
      change=ChangeFactory.getInstance().create(qName);
      change.setChangeSet(changeSet);
      text=new StringBuffer();
      if (change == null) {
        throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
      }
      change.setFileOpener(fileOpener);
      if (change instanceof CustomChangeWrapper) {
        ((CustomChangeWrapper)change).setClassLoader(fileOpener.toClassLoader());
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(change,attributeName,attributeValue);
      }
      change.setUp();
    }
 else     if (change != null && ""String_Node_Str"".equals(qName)) {
      ColumnConfig column;
      if (change instanceof LoadDataChange) {
        column=new LoadDataColumnConfig();
      }
 else {
        column=new ColumnConfig();
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(column,attributeName,attributeValue);
      }
      if (change instanceof ChangeWithColumns) {
        ((ChangeWithColumns)change).addColumn(column);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + change.getClass().getName());
      }
    }
 else     if (change != null && ""String_Node_Str"".equals(qName)) {
      ConstraintsConfig constraints=new ConstraintsConfig();
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(constraints,attributeName,attributeValue);
      }
      ColumnConfig lastColumn;
      if (change instanceof AddColumnChange) {
        lastColumn=((AddColumnChange)change).getLastColumn();
      }
 else       if (change instanceof CreateTableChange) {
        lastColumn=((CreateTableChange)change).getColumns().get(((CreateTableChange)change).getColumns().size() - 1);
      }
 else       if (change instanceof ModifyColumnChange) {
        lastColumn=((ModifyColumnChange)change).getColumns().get(((ModifyColumnChange)change).getColumns().size() - 1);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + change.getClass().getName());
      }
      lastColumn.setConstraints(constraints);
    }
 else     if (""String_Node_Str"".equals(qName)) {
      if (change instanceof CustomChangeWrapper) {
        if (atts.getValue(""String_Node_Str"") == null) {
          paramName=atts.getValue(""String_Node_Str"");
          text=new StringBuffer();
        }
 else {
          ((CustomChangeWrapper)change).setParam(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
        }
      }
 else {
        throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
      }
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      if (StringUtils.trimToNull(atts.getValue(""String_Node_Str"")) == null) {
        this.setParameterValue(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
      }
 else {
        Properties props=new Properties();
        InputStream propertiesStream=fileOpener.getResourceAsStream(atts.getValue(""String_Node_Str""));
        if (propertiesStream == null) {
          log.info(""String_Node_Str"" + atts.getValue(""String_Node_Str""));
        }
 else {
          props.load(propertiesStream);
          for (          Map.Entry entry : props.entrySet()) {
            this.setParameterValue(entry.getKey().toString(),entry.getValue().toString());
          }
        }
      }
    }
 else     if (change instanceof ExecuteShellCommandChange && ""String_Node_Str"".equals(qName)) {
      ((ExecuteShellCommandChange)change).addArg(atts.getValue(""String_Node_Str""));
    }
 else {
      throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    e.printStackTrace();
    throw new SAXException(e);
  }
}","public void startElement(String uri,String localName,String qName,Attributes baseAttributes) throws SAXException {
  Attributes atts=new ExpandingAttributes(baseAttributes);
  try {
    if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String version=uri.substring(uri.lastIndexOf(""String_Node_Str"") + 1);
      if (!version.equals(XMLChangeLogParser.getSchemaVersion())) {
        log.warning(databaseChangeLog.getPhysicalFilePath() + ""String_Node_Str"" + version+ ""String_Node_Str""+ XMLChangeLogParser.getSchemaVersion());
      }
      databaseChangeLog.setLogicalFilePath(atts.getValue(""String_Node_Str""));
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String fileName=atts.getValue(""String_Node_Str"");
      boolean isRelativeToChangelogFile=Boolean.parseBoolean(atts.getValue(""String_Node_Str""));
      handleIncludedChangeLog(fileName,isRelativeToChangelogFile,databaseChangeLog.getPhysicalFilePath());
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String pathName=atts.getValue(""String_Node_Str"");
      if (!(pathName.endsWith(""String_Node_Str"") || pathName.endsWith(""String_Node_Str""))) {
        pathName=pathName + ""String_Node_Str"";
      }
      log.finest(""String_Node_Str"" + pathName);
      log.finest(""String_Node_Str"" + fileOpener.getClass().getName());
      Enumeration<URL> resources=fileOpener.getResources(pathName);
      boolean foundResource=false;
      while (resources.hasMoreElements()) {
        URL fileUrl=resources.nextElement();
        if (!fileUrl.toExternalForm().startsWith(""String_Node_Str"")) {
          log.finest(fileUrl.toExternalForm() + ""String_Node_Str"");
          continue;
        }
        File file=new File(fileUrl.toExternalForm().replaceFirst(""String_Node_Str"",""String_Node_Str""));
        log.finest(""String_Node_Str"" + file.getCanonicalPath());
        if (!file.exists()) {
          throw new SAXException(""String_Node_Str"" + pathName + ""String_Node_Str""+ file.toString());
        }
        if (file.isDirectory()) {
          log.finest(file.getCanonicalPath() + ""String_Node_Str"");
          continue;
        }
        foundResource=true;
        if (!(file.getName().endsWith(""String_Node_Str"") || file.getName().endsWith(""String_Node_Str""))) {
          log.finest(file.getCanonicalPath() + ""String_Node_Str"");
          continue;
        }
        handleIncludedChangeLog(pathName + file.getName(),false,databaseChangeLog.getPhysicalFilePath());
      }
      if (!foundResource) {
        throw new SAXException(""String_Node_Str"" + pathName);
      }
    }
 else     if (changeSet == null && ""String_Node_Str"".equals(qName)) {
      boolean alwaysRun=false;
      boolean runOnChange=false;
      if (""String_Node_Str"".equalsIgnoreCase(atts.getValue(""String_Node_Str""))) {
        alwaysRun=true;
      }
      if (""String_Node_Str"".equalsIgnoreCase(atts.getValue(""String_Node_Str""))) {
        runOnChange=true;
      }
      changeSet=new ChangeSet(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""),alwaysRun,runOnChange,databaseChangeLog.getFilePath(),databaseChangeLog.getPhysicalFilePath(),atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""),Boolean.valueOf(atts.getValue(""String_Node_Str"")));
      if (StringUtils.trimToNull(atts.getValue(""String_Node_Str"")) != null) {
        changeSet.setFailOnError(Boolean.parseBoolean(atts.getValue(""String_Node_Str"")));
      }
    }
 else     if (changeSet != null && ""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
      String id=atts.getValue(""String_Node_Str"");
      if (id != null) {
        String path=atts.getValue(""String_Node_Str"");
        if (path == null) {
          path=databaseChangeLog.getFilePath();
        }
        String author=atts.getValue(""String_Node_Str"");
        ChangeSet changeSet=databaseChangeLog.getChangeSet(path,author,id);
        if (changeSet == null) {
          throw new SAXException(""String_Node_Str"" + path + ""String_Node_Str""+ author+ ""String_Node_Str""+ id);
        }
 else {
          for (          Change change : changeSet.getChanges()) {
            this.changeSet.addRollbackChange(change);
          }
        }
      }
      inRollback=true;
    }
 else     if (""String_Node_Str"".equals(qName)) {
      rootPrecondition=new Preconditions();
      rootPrecondition.setOnFail(StringUtils.trimToNull(atts.getValue(""String_Node_Str"")));
      rootPrecondition.setOnError(StringUtils.trimToNull(atts.getValue(""String_Node_Str"")));
      preconditionLogicStack.push(rootPrecondition);
    }
 else     if (currentPrecondition != null && currentPrecondition instanceof CustomPreconditionWrapper && qName.equals(""String_Node_Str"")) {
      ((CustomPreconditionWrapper)currentPrecondition).setParam(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
    }
 else     if (rootPrecondition != null) {
      currentPrecondition=PreconditionFactory.getInstance().create(qName);
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(currentPrecondition,attributeName,attributeValue);
      }
      preconditionLogicStack.peek().addNestedPrecondition(currentPrecondition);
      if (currentPrecondition instanceof PreconditionLogic) {
        preconditionLogicStack.push(((PreconditionLogic)currentPrecondition));
      }
      if (""String_Node_Str"".equals(qName)) {
        text=new StringBuffer();
      }
    }
 else     if (""String_Node_Str"".equals(qName)) {
      inModifySql=true;
      if (StringUtils.trimToNull(atts.getValue(""String_Node_Str"")) != null) {
        modifySqlDbmsList=StringUtils.splitAndTrim(atts.getValue(""String_Node_Str""),""String_Node_Str"");
      }
    }
 else     if (inModifySql) {
      SqlVisitor sqlVisitor=SqlVisitorFactory.getInstance().create(qName);
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(sqlVisitor,attributeName,attributeValue);
      }
      sqlVisitor.setApplicableDbms(modifySqlDbmsList);
      changeSet.addSqlVisitor(sqlVisitor);
    }
 else     if (changeSet != null && change == null) {
      change=ChangeFactory.getInstance().create(qName);
      change.setChangeSet(changeSet);
      text=new StringBuffer();
      if (change == null) {
        throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
      }
      change.setFileOpener(fileOpener);
      if (change instanceof CustomChangeWrapper) {
        ((CustomChangeWrapper)change).setClassLoader(fileOpener.toClassLoader());
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(change,attributeName,attributeValue);
      }
      change.setUp();
    }
 else     if (change != null && ""String_Node_Str"".equals(qName)) {
      ColumnConfig column;
      if (change instanceof LoadDataChange) {
        column=new LoadDataColumnConfig();
      }
 else {
        column=new ColumnConfig();
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(column,attributeName,attributeValue);
      }
      if (change instanceof ChangeWithColumns) {
        ((ChangeWithColumns)change).addColumn(column);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + change.getClass().getName());
      }
    }
 else     if (change != null && ""String_Node_Str"".equals(qName)) {
      ConstraintsConfig constraints=new ConstraintsConfig();
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(constraints,attributeName,attributeValue);
      }
      ColumnConfig lastColumn;
      if (change instanceof AddColumnChange) {
        lastColumn=((AddColumnChange)change).getLastColumn();
      }
 else       if (change instanceof CreateTableChange) {
        lastColumn=((CreateTableChange)change).getColumns().get(((CreateTableChange)change).getColumns().size() - 1);
      }
 else       if (change instanceof ModifyColumnChange) {
        lastColumn=((ModifyColumnChange)change).getColumns().get(((ModifyColumnChange)change).getColumns().size() - 1);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + change.getClass().getName());
      }
      lastColumn.setConstraints(constraints);
    }
 else     if (""String_Node_Str"".equals(qName)) {
      if (change instanceof CustomChangeWrapper) {
        if (atts.getValue(""String_Node_Str"") == null) {
          paramName=atts.getValue(""String_Node_Str"");
          text=new StringBuffer();
        }
 else {
          ((CustomChangeWrapper)change).setParam(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
        }
      }
 else {
        throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
      }
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      if (StringUtils.trimToNull(atts.getValue(""String_Node_Str"")) == null) {
        this.setParameterValue(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
      }
 else {
        Properties props=new Properties();
        InputStream propertiesStream=fileOpener.getResourceAsStream(atts.getValue(""String_Node_Str""));
        if (propertiesStream == null) {
          log.info(""String_Node_Str"" + atts.getValue(""String_Node_Str""));
        }
 else {
          props.load(propertiesStream);
          for (          Map.Entry entry : props.entrySet()) {
            this.setParameterValue(entry.getKey().toString(),entry.getValue().toString());
          }
        }
      }
    }
 else     if (change instanceof ExecuteShellCommandChange && ""String_Node_Str"".equals(qName)) {
      ((ExecuteShellCommandChange)change).addArg(atts.getValue(""String_Node_Str""));
    }
 else {
      throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    e.printStackTrace();
    throw new SAXException(e);
  }
}"
84078,"public static Database createDatabaseObject(ClassLoader classLoader,String url,String username,String password,String driver,String defaultSchemaName,String databaseClass) throws JDBCException {
  if (driver == null) {
    driver=DatabaseFactory.getInstance().findDefaultDriver(url);
  }
  try {
    if (url.startsWith(""String_Node_Str"")) {
      try {
        return (Database)Class.forName(HibernateDatabase.class.getName(),true,classLoader).getConstructor(String.class).newInstance(url.substring(""String_Node_Str"".length()));
      }
 catch (      NoClassDefFoundError e) {
        throw new MigrationFailedException(null,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
      }
    }
    Driver driverObject;
    DatabaseFactory databaseFactory=DatabaseFactory.getInstance();
    if (databaseClass != null) {
      databaseFactory.addDatabaseImplementation((Database)Class.forName(databaseClass,true,classLoader).newInstance());
    }
    try {
      if (driver == null) {
        driver=databaseFactory.findDefaultDriver(url);
      }
      if (driver == null) {
        throw new RuntimeException(""String_Node_Str"" + url + ""String_Node_Str"");
      }
      driverObject=(Driver)Class.forName(driver,true,classLoader).newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + e.getMessage());
    }
    Properties info=new Properties();
    if (username != null) {
      info.put(""String_Node_Str"",username);
    }
    if (password != null) {
      info.put(""String_Node_Str"",password);
    }
    Connection connection=driverObject.connect(url,info);
    if (connection == null) {
      throw new JDBCException(""String_Node_Str"" + url + ""String_Node_Str""+ driver.getClass().getName()+ ""String_Node_Str"");
    }
    Database database=databaseFactory.findCorrectDatabaseImplementation(connection);
    database.setDefaultSchemaName(StringUtils.trimToNull(defaultSchemaName));
    return database;
  }
 catch (  Exception e) {
    throw new JDBCException(e);
  }
}","public static Database createDatabaseObject(ClassLoader classLoader,String url,String username,String password,String driver,String defaultSchemaName,String databaseClass) throws JDBCException {
  if (driver == null) {
    driver=DatabaseFactory.getInstance().findDefaultDriver(url);
  }
  try {
    if (url.startsWith(""String_Node_Str"")) {
      try {
        return createHibernateDatabase(classLoader,url);
      }
 catch (      NoClassDefFoundError e) {
        try {
          return createHibernateDatabase(Thread.currentThread().getContextClassLoader(),url);
        }
 catch (        NoClassDefFoundError e1) {
          throw new MigrationFailedException(null,""String_Node_Str"" + e1.getMessage() + ""String_Node_Str"");
        }
      }
    }
    Driver driverObject;
    DatabaseFactory databaseFactory=DatabaseFactory.getInstance();
    if (databaseClass != null) {
      databaseFactory.addDatabaseImplementation((Database)Class.forName(databaseClass,true,classLoader).newInstance());
    }
    try {
      if (driver == null) {
        driver=databaseFactory.findDefaultDriver(url);
      }
      if (driver == null) {
        throw new RuntimeException(""String_Node_Str"" + url + ""String_Node_Str"");
      }
      driverObject=(Driver)Class.forName(driver,true,classLoader).newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + e.getMessage());
    }
    Properties info=new Properties();
    if (username != null) {
      info.put(""String_Node_Str"",username);
    }
    if (password != null) {
      info.put(""String_Node_Str"",password);
    }
    Connection connection=driverObject.connect(url,info);
    if (connection == null) {
      throw new JDBCException(""String_Node_Str"" + url + ""String_Node_Str""+ driver.getClass().getName()+ ""String_Node_Str"");
    }
    Database database=databaseFactory.findCorrectDatabaseImplementation(connection);
    database.setDefaultSchemaName(StringUtils.trimToNull(defaultSchemaName));
    return database;
  }
 catch (  Exception e) {
    throw new JDBCException(e);
  }
}"
84079,"/** 
 * Creates a snapshot of the given database.
 */
public SqlDatabaseSnapshot(Database database,Set<DiffStatusListener> statusListeners,String requestedSchema) throws JDBCException {
  try {
    this.schema=requestedSchema;
    this.database=database;
    this.databaseMetaData=database.getConnection().getMetaData();
    this.statusListeners=statusListeners;
    readTablesAndViews(requestedSchema);
    readForeignKeyInformation(requestedSchema);
    readPrimaryKeys(requestedSchema);
    readColumns(requestedSchema);
    readUniqueConstraints(requestedSchema);
    readIndexes(requestedSchema);
    readSequences(requestedSchema);
    this.tables=new HashSet<Table>(tablesMap.values());
    this.views=new HashSet<View>(viewsMap.values());
    this.columns=new HashSet<Column>(columnsMap.values());
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
}","/** 
 * Creates a snapshot of the given database.
 */
public SqlDatabaseSnapshot(Database database,Set<DiffStatusListener> statusListeners,String requestedSchema) throws JDBCException {
  if (requestedSchema == null) {
    requestedSchema=database.getDefaultSchemaName();
  }
  try {
    this.schema=requestedSchema;
    this.database=database;
    this.databaseMetaData=database.getConnection().getMetaData();
    this.statusListeners=statusListeners;
    readTablesAndViews(requestedSchema);
    readForeignKeyInformation(requestedSchema);
    readPrimaryKeys(requestedSchema);
    readColumns(requestedSchema);
    readUniqueConstraints(requestedSchema);
    readIndexes(requestedSchema);
    readSequences(requestedSchema);
    this.tables=new HashSet<Table>(tablesMap.values());
    this.views=new HashSet<View>(viewsMap.values());
    this.columns=new HashSet<Column>(columnsMap.values());
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
}"
84080,"/** 
 * This method will actually execute each of the changes in the list against the specified database.
 * @return should change set be marked as ran
 */
public boolean execute(Database database) throws MigrationFailedException {
  boolean skipChange=false;
  boolean markRan=true;
  try {
    if (runInTransaction) {
      database.setAutoCommit(false);
    }
    database.getJdbcTemplate().comment(""String_Node_Str"" + toString());
    if (StringUtils.trimToNull(getComments()) != null) {
      String comments=getComments();
      String[] lines=comments.split(""String_Node_Str"");
      for (int i=0; i < lines.length; i++) {
        if (i > 0) {
          lines[i]=database.getLineComment() + ""String_Node_Str"" + lines[i];
        }
      }
      database.getJdbcTemplate().comment(StringUtils.join(Arrays.asList(lines),""String_Node_Str""));
    }
    if (database.getJdbcTemplate().executesStatements() && rootPrecondition != null) {
      try {
        rootPrecondition.check(database,null);
      }
 catch (      PreconditionFailedException e) {
        StringBuffer message=new StringBuffer();
        message.append(StreamUtil.getLineSeparator());
        for (        FailedPrecondition invalid : e.getFailedPreconditions()) {
          message.append(""String_Node_Str"").append(invalid.toString());
          message.append(StreamUtil.getLineSeparator());
        }
        if (rootPrecondition.getOnFail().equals(Preconditions.FailOption.HALT)) {
          e.printStackTrace();
          throw new MigrationFailedException(this,message.toString());
        }
 else         if (rootPrecondition.getOnFail().equals(Preconditions.FailOption.CONTINUE)) {
          skipChange=true;
          markRan=false;
          log.log(Level.INFO,""String_Node_Str"" + toString() + ""String_Node_Str""+ message);
        }
 else         if (rootPrecondition.getOnFail().equals(Preconditions.FailOption.MARK_RAN)) {
          skipChange=true;
          log.log(Level.INFO,""String_Node_Str"" + toString() + ""String_Node_Str""+ message);
        }
 else         if (rootPrecondition.getOnFail().equals(Preconditions.FailOption.WARN)) {
          log.log(Level.WARNING,""String_Node_Str"" + toString() + ""String_Node_Str""+ message);
        }
 else {
          throw new MigrationFailedException(this,""String_Node_Str"" + rootPrecondition.getOnFail());
        }
      }
catch (      PreconditionErrorException e) {
        StringBuffer message=new StringBuffer();
        message.append(StreamUtil.getLineSeparator());
        for (        ErrorPrecondition invalid : e.getErrorPreconditions()) {
          message.append(""String_Node_Str"").append(invalid.toString());
          message.append(StreamUtil.getLineSeparator());
        }
        if (rootPrecondition.getOnError().equals(Preconditions.ErrorOption.HALT)) {
          throw new MigrationFailedException(this,message.toString());
        }
 else         if (rootPrecondition.getOnError().equals(Preconditions.ErrorOption.CONTINUE)) {
          skipChange=true;
          markRan=false;
          log.log(Level.INFO,""String_Node_Str"" + toString() + ""String_Node_Str""+ message);
        }
 else         if (rootPrecondition.getOnError().equals(Preconditions.ErrorOption.MARK_RAN)) {
          skipChange=true;
          markRan=true;
          log.log(Level.INFO,""String_Node_Str"" + toString() + ""String_Node_Str""+ message);
        }
 else         if (rootPrecondition.getOnError().equals(Preconditions.ErrorOption.WARN)) {
          log.log(Level.WARNING,""String_Node_Str"" + toString() + ""String_Node_Str""+ message);
        }
 else {
          throw new MigrationFailedException(this,""String_Node_Str"" + rootPrecondition.getOnError());
        }
        database.rollback();
      }
    }
    if (!skipChange) {
      for (      Change change : changes) {
        try {
          change.setUp();
        }
 catch (        SetupException se) {
          throw new MigrationFailedException(this,se);
        }
      }
      log.finest(""String_Node_Str"" + toString());
      for (      Change change : getChanges()) {
        change.executeStatements(database,sqlVisitors);
        log.finest(change.getConfirmationMessage());
      }
      if (!runInTransaction) {
        database.commit();
      }
      log.finest(""String_Node_Str"" + toString() + ""String_Node_Str"");
      database.commit();
    }
 else {
      log.finest(""String_Node_Str"" + toString());
    }
  }
 catch (  Exception e) {
    try {
      database.rollback();
    }
 catch (    Exception e1) {
      throw new MigrationFailedException(this,e);
    }
    if (getFailOnError() != null && !getFailOnError()) {
      log.log(Level.INFO,""String_Node_Str"" + toString(false) + ""String_Node_Str"",e);
    }
 else {
      if (e instanceof MigrationFailedException) {
        throw ((MigrationFailedException)e);
      }
 else {
        throw new MigrationFailedException(this,e);
      }
    }
  }
 finally {
    if (runInTransaction) {
      try {
        database.setAutoCommit(true);
      }
 catch (      JDBCException e) {
        throw new MigrationFailedException(this,""String_Node_Str"");
      }
    }
  }
  return markRan;
}","/** 
 * This method will actually execute each of the changes in the list against the specified database.
 * @return should change set be marked as ran
 */
public boolean execute(Database database) throws MigrationFailedException {
  boolean skipChange=false;
  boolean markRan=true;
  try {
    database.setAutoCommit(!runInTransaction);
    database.getJdbcTemplate().comment(""String_Node_Str"" + toString());
    if (StringUtils.trimToNull(getComments()) != null) {
      String comments=getComments();
      String[] lines=comments.split(""String_Node_Str"");
      for (int i=0; i < lines.length; i++) {
        if (i > 0) {
          lines[i]=database.getLineComment() + ""String_Node_Str"" + lines[i];
        }
      }
      database.getJdbcTemplate().comment(StringUtils.join(Arrays.asList(lines),""String_Node_Str""));
    }
    if (database.getJdbcTemplate().executesStatements() && rootPrecondition != null) {
      try {
        rootPrecondition.check(database,null);
      }
 catch (      PreconditionFailedException e) {
        StringBuffer message=new StringBuffer();
        message.append(StreamUtil.getLineSeparator());
        for (        FailedPrecondition invalid : e.getFailedPreconditions()) {
          message.append(""String_Node_Str"").append(invalid.toString());
          message.append(StreamUtil.getLineSeparator());
        }
        if (rootPrecondition.getOnFail().equals(Preconditions.FailOption.HALT)) {
          e.printStackTrace();
          throw new MigrationFailedException(this,message.toString());
        }
 else         if (rootPrecondition.getOnFail().equals(Preconditions.FailOption.CONTINUE)) {
          skipChange=true;
          markRan=false;
          log.log(Level.INFO,""String_Node_Str"" + toString() + ""String_Node_Str""+ message);
        }
 else         if (rootPrecondition.getOnFail().equals(Preconditions.FailOption.MARK_RAN)) {
          skipChange=true;
          log.log(Level.INFO,""String_Node_Str"" + toString() + ""String_Node_Str""+ message);
        }
 else         if (rootPrecondition.getOnFail().equals(Preconditions.FailOption.WARN)) {
          log.log(Level.WARNING,""String_Node_Str"" + toString() + ""String_Node_Str""+ message);
        }
 else {
          throw new MigrationFailedException(this,""String_Node_Str"" + rootPrecondition.getOnFail());
        }
      }
catch (      PreconditionErrorException e) {
        StringBuffer message=new StringBuffer();
        message.append(StreamUtil.getLineSeparator());
        for (        ErrorPrecondition invalid : e.getErrorPreconditions()) {
          message.append(""String_Node_Str"").append(invalid.toString());
          message.append(StreamUtil.getLineSeparator());
        }
        if (rootPrecondition.getOnError().equals(Preconditions.ErrorOption.HALT)) {
          throw new MigrationFailedException(this,message.toString());
        }
 else         if (rootPrecondition.getOnError().equals(Preconditions.ErrorOption.CONTINUE)) {
          skipChange=true;
          markRan=false;
          log.log(Level.INFO,""String_Node_Str"" + toString() + ""String_Node_Str""+ message);
        }
 else         if (rootPrecondition.getOnError().equals(Preconditions.ErrorOption.MARK_RAN)) {
          skipChange=true;
          markRan=true;
          log.log(Level.INFO,""String_Node_Str"" + toString() + ""String_Node_Str""+ message);
        }
 else         if (rootPrecondition.getOnError().equals(Preconditions.ErrorOption.WARN)) {
          log.log(Level.WARNING,""String_Node_Str"" + toString() + ""String_Node_Str""+ message);
        }
 else {
          throw new MigrationFailedException(this,""String_Node_Str"" + rootPrecondition.getOnError());
        }
        database.rollback();
      }
    }
    if (!skipChange) {
      for (      Change change : changes) {
        try {
          change.setUp();
        }
 catch (        SetupException se) {
          throw new MigrationFailedException(this,se);
        }
      }
      log.finest(""String_Node_Str"" + toString());
      for (      Change change : getChanges()) {
        change.executeStatements(database,sqlVisitors);
        log.finest(change.getConfirmationMessage());
      }
      if (runInTransaction) {
        database.commit();
      }
      log.finest(""String_Node_Str"" + toString() + ""String_Node_Str"");
    }
 else {
      log.finest(""String_Node_Str"" + toString());
    }
  }
 catch (  Exception e) {
    try {
      database.rollback();
    }
 catch (    Exception e1) {
      throw new MigrationFailedException(this,e);
    }
    if (getFailOnError() != null && !getFailOnError()) {
      log.log(Level.INFO,""String_Node_Str"" + toString(false) + ""String_Node_Str"",e);
    }
 else {
      if (e instanceof MigrationFailedException) {
        throw ((MigrationFailedException)e);
      }
 else {
        throw new MigrationFailedException(this,e);
      }
    }
  }
 finally {
    if (!runInTransaction && !database.getAutoCommitMode()) {
      try {
        database.setAutoCommit(false);
      }
 catch (      JDBCException e) {
        throw new MigrationFailedException(this,""String_Node_Str"");
      }
    }
  }
  return markRan;
}"
84081,"/** 
 * MySQL specific implementation
 */
protected void getColumnTypeAndDefValue(Column columnInfo,ResultSet rs,Database database) throws SQLException, JDBCException {
  String columnTypeName=rs.getString(""String_Node_Str"");
  String columnName=rs.getString(""String_Node_Str"");
  String tableName=rs.getString(""String_Node_Str"");
  String schemaName=rs.getString(""String_Node_Str"");
  Map<String,List<String>> tableSchema=new HashMap<String,List<String>>();
  if (!schemaCache.containsKey(tableName)) {
    Statement selectStatement=database.getConnection().createStatement();
    ResultSet rsColumnType=selectStatement.executeQuery(""String_Node_Str"" + database.escapeTableName(schemaName,tableName));
    while (rsColumnType.next()) {
      List<String> colSchema=new ArrayList<String>();
      colSchema.add(rsColumnType.getString(""String_Node_Str""));
      colSchema.add(rsColumnType.getString(""String_Node_Str""));
      tableSchema.put(rsColumnType.getString(""String_Node_Str""),colSchema);
    }
    rsColumnType.close();
    schemaCache.put(tableName,tableSchema);
  }
  tableSchema=schemaCache.get(tableName);
  if (columnTypeName.toLowerCase().startsWith(""String_Node_Str"") || columnTypeName.toLowerCase().startsWith(""String_Node_Str"")) {
    columnInfo.setTypeName(tableSchema.get(columnName).get(0));
    try {
      String tmpDefaultValue=(String)database.convertDatabaseValueToJavaObject(tableSchema.get(columnName).get(1),columnInfo.getDataType(),columnInfo.getColumnSize(),columnInfo.getDecimalDigits());
      if (""String_Node_Str"".equals(tmpDefaultValue)) {
        columnInfo.setDefaultValue(null);
      }
 else {
        columnInfo.setDefaultValue(tmpDefaultValue);
      }
    }
 catch (    ParseException e) {
      throw new JDBCException(e);
    }
  }
 else   if (columnTypeName.toLowerCase().equals(""String_Node_Str"") || columnTypeName.toLowerCase().equals(""String_Node_Str"")) {
    columnInfo.setTypeName(columnTypeName);
    columnInfo.setDefaultValue(null);
  }
 else   if (columnTypeName.toLowerCase().equals(""String_Node_Str"") && !tableSchema.get(columnName).get(1).equals(""String_Node_Str"")) {
    columnInfo.setTypeName(columnTypeName);
    columnInfo.setDefaultValue(tableSchema.get(columnName).get(1));
  }
 else {
    super.getColumnTypeAndDefValue(columnInfo,rs,database);
  }
}","/** 
 * MySQL specific implementation
 */
protected void getColumnTypeAndDefValue(Column columnInfo,ResultSet rs,Database database) throws SQLException, JDBCException {
  String columnTypeName=rs.getString(""String_Node_Str"");
  String columnName=rs.getString(""String_Node_Str"");
  String tableName=rs.getString(""String_Node_Str"");
  String schemaName=rs.getString(""String_Node_Str"");
  Map<String,List<String>> tableSchema=new HashMap<String,List<String>>();
  if (!schemaCache.containsKey(tableName)) {
    Statement selectStatement=database.getConnection().createStatement();
    ResultSet rsColumnType=selectStatement.executeQuery(""String_Node_Str"" + database.escapeTableName(schemaName,tableName));
    while (rsColumnType.next()) {
      List<String> colSchema=new ArrayList<String>();
      colSchema.add(rsColumnType.getString(""String_Node_Str""));
      colSchema.add(rsColumnType.getString(""String_Node_Str""));
      tableSchema.put(rsColumnType.getString(""String_Node_Str""),colSchema);
    }
    rsColumnType.close();
    schemaCache.put(tableName,tableSchema);
  }
  tableSchema=schemaCache.get(tableName);
  if (columnTypeName.toLowerCase().startsWith(""String_Node_Str"") || columnTypeName.toLowerCase().startsWith(""String_Node_Str"")) {
    columnInfo.setTypeName(tableSchema.get(columnName).get(0));
    try {
      String tmpDefaultValue=(String)database.convertDatabaseValueToJavaObject(tableSchema.get(columnName).get(1),columnInfo.getDataType(),columnInfo.getColumnSize(),columnInfo.getDecimalDigits());
      if (""String_Node_Str"".equals(tmpDefaultValue)) {
        columnInfo.setDefaultValue(null);
      }
 else {
        columnInfo.setDefaultValue(tmpDefaultValue);
      }
    }
 catch (    ParseException e) {
      throw new JDBCException(e);
    }
  }
 else   if (columnTypeName.toLowerCase().equals(""String_Node_Str"") || columnTypeName.toLowerCase().equals(""String_Node_Str"")) {
    columnInfo.setTypeName(columnTypeName);
    columnInfo.setDefaultValue(null);
  }
 else   if (columnTypeName.toLowerCase().equals(""String_Node_Str"") && !""String_Node_Str"".equals(tableSchema.get(columnName).get(1))) {
    columnInfo.setTypeName(columnTypeName);
    columnInfo.setDefaultValue(tableSchema.get(columnName).get(1));
  }
 else {
    super.getColumnTypeAndDefValue(columnInfo,rs,database);
  }
}"
84082,"public UIFacade getFacade(){
  return facade;
}","@SuppressWarnings(""String_Node_Str"") public UIFacade getFacade(){
  if (facade == null) {
    System.out.println(""String_Node_Str"");
    ClassLoader cl=UIFacade.class.getClassLoader();
    try {
      Class<UIFacade> swingUIClazz=(Class<UIFacade>)cl.loadClass(UI_IMPL_CLASSNAME);
      Constructor<UIFacade> con=swingUIClazz.getConstructor(new Class[0]);
      facade=con.newInstance(new Object[0]);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  return facade;
}"
84083,"public void close() throws SQLException {
  con.rollback();
  con.close();
}","public void close() throws SQLException {
  rollback();
  con.close();
}"
84084,"public void rollback(Savepoint savepoint) throws SQLException {
  con.rollback(savepoint);
}","public void rollback(Savepoint savepoint) throws SQLException {
  if (!con.getAutoCommit()) {
    con.rollback(savepoint);
  }
}"
84085,"public TestLiquibase(){
  super(""String_Node_Str"",new ClassLoaderFileOpener(),null);
  inputStream=createMock(InputStream.class);
  replay(inputStream);
}","public TestLiquibase(){
  super(""String_Node_Str"",new ClassLoaderFileOpener(),((Database)null));
  inputStream=createMock(InputStream.class);
  replay(inputStream);
}"
84086,"private SqlStatement[] generateStatementsForSQLiteDatabase(Database database) throws UnsupportedChangeException {
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  AlterTableVisitor rename_alter_visitor=new AlterTableVisitor(){
    public ColumnConfig[] getColumnsToAdd(){
      return new ColumnConfig[0];
    }
    public boolean copyThisColumn(    ColumnConfig column){
      return true;
    }
    public boolean createThisColumn(    ColumnConfig column){
      String[] split_columns=getColumnNames().split(""String_Node_Str"");
      for (      String split_column : split_columns) {
        if (column.getName().equals(split_column)) {
          column.getConstraints().setPrimaryKey(new Boolean(true));
        }
      }
      return true;
    }
    public boolean createThisIndex(    Index index){
      return true;
    }
  }
;
  try {
    statements.addAll(SQLiteDatabase.getAlterTableStatements(rename_alter_visitor,database,getSchemaName(),getTableName()));
  }
 catch (  JDBCException e) {
    e.printStackTrace();
  }
  return statements.toArray(new SqlStatement[statements.size()]);
}","private SqlStatement[] generateStatementsForSQLiteDatabase(Database database) throws UnsupportedChangeException {
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  AlterTableVisitor rename_alter_visitor=new AlterTableVisitor(){
    public ColumnConfig[] getColumnsToAdd(){
      return new ColumnConfig[0];
    }
    public boolean copyThisColumn(    ColumnConfig column){
      return true;
    }
    public boolean createThisColumn(    ColumnConfig column){
      String[] split_columns=getColumnNames().split(""String_Node_Str"");
      for (      String split_column : split_columns) {
        if (column.getName().equals(split_column)) {
          column.getConstraints().setPrimaryKey(true);
        }
      }
      return true;
    }
    public boolean createThisIndex(    Index index){
      return true;
    }
  }
;
  try {
    statements.addAll(SQLiteDatabase.getAlterTableStatements(rename_alter_visitor,database,getSchemaName(),getTableName()));
  }
 catch (  JDBCException e) {
    e.printStackTrace();
  }
  return statements.toArray(new SqlStatement[statements.size()]);
}"
84087,"public boolean createThisColumn(ColumnConfig column){
  String[] split_columns=getColumnNames().split(""String_Node_Str"");
  for (  String split_column : split_columns) {
    if (column.getName().equals(split_column)) {
      column.getConstraints().setPrimaryKey(new Boolean(true));
    }
  }
  return true;
}","public boolean createThisColumn(ColumnConfig column){
  String[] split_columns=getColumnNames().split(""String_Node_Str"");
  for (  String split_column : split_columns) {
    if (column.getName().equals(split_column)) {
      column.getConstraints().setPrimaryKey(true);
    }
  }
  return true;
}"
84088,"public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  if (database instanceof SQLiteDatabase) {
    return generateStatementsForSQLiteDatabase(database);
  }
  return new SqlStatement[]{new RenameColumnStatement(getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName(),getTableName(),getOldColumnName(),getNewColumnName(),getColumnDataType())};
}","public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  if (database instanceof SQLiteDatabase) {
    return generateStatementsForSQLiteDatabase(database);
  }
  return new SqlStatement[]{new RenameColumnStatement(getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName(),getTableName(),getOldColumnName(),getNewColumnName(),getColumnDataType())};
}"
84089,"public String format(LogRecord rec){
  return new String(rec.getMessage() + ""String_Node_Str"");
}","public String format(LogRecord rec){
  return rec.getMessage() + ""String_Node_Str"";
}"
84090,"public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Index index=(Index)o;
  boolean equals=true;
  for (  String column : index.getColumns()) {
    if (!columns.contains(column)) {
      equals=false;
    }
  }
  if (this.unique != index.isUnique()) {
    equals=false;
  }
  return equals || table.getName().equalsIgnoreCase(index.table.getName());
}","public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Index index=(Index)o;
  boolean equals=true;
  for (  String column : index.getColumns()) {
    if (!columns.contains(column)) {
      equals=false;
    }
  }
  if (!this.unique.equals(index.isUnique())) {
    equals=false;
  }
  return equals || table.getName().equalsIgnoreCase(index.table.getName());
}"
84091,"public String toString(){
  StringBuffer stringBuffer=new StringBuffer();
  stringBuffer.append(getName());
  if (!this.unique.booleanValue()) {
    stringBuffer.append(""String_Node_Str"");
  }
  stringBuffer.append(""String_Node_Str"").append(table.getName()).append(""String_Node_Str"");
  for (  String column : columns) {
    stringBuffer.append(column).append(""String_Node_Str"");
  }
  stringBuffer.delete(stringBuffer.length() - 2,stringBuffer.length());
  stringBuffer.append(""String_Node_Str"");
  return stringBuffer.toString();
}","public String toString(){
  StringBuffer stringBuffer=new StringBuffer();
  stringBuffer.append(getName());
  if (!this.unique) {
    stringBuffer.append(""String_Node_Str"");
  }
  stringBuffer.append(""String_Node_Str"").append(table.getName()).append(""String_Node_Str"");
  for (  String column : columns) {
    stringBuffer.append(column).append(""String_Node_Str"");
  }
  stringBuffer.delete(stringBuffer.length() - 2,stringBuffer.length());
  stringBuffer.append(""String_Node_Str"");
  return stringBuffer.toString();
}"
84092,"public int compareTo(ForeignKey o){
  int returnValue=0;
  if (this.getForeignKeyTable() != null && o.getForeignKeyTable() != null) {
    returnValue=this.getForeignKeyTable().compareTo(o.getForeignKeyTable());
  }
  if (returnValue == 0 && this.getForeignKeyColumns() != null && o.getForeignKeyColumns() != null) {
    returnValue=this.getForeignKeyColumns().compareTo(o.getForeignKeyColumns());
  }
  if (returnValue == 0 && this.getName() != null && o.getName() != null) {
    returnValue=this.getName().compareTo(o.getName());
  }
  if (returnValue == 0 && this.getPrimaryKeyTable() != null && o.getPrimaryKeyTable() != null) {
    returnValue=this.getPrimaryKeyTable().compareTo(o.getPrimaryKeyTable());
  }
  if (returnValue == 0 && this.getPrimaryKeyColumns() != null && o.getPrimaryKeyColumns() != null) {
    returnValue=this.getPrimaryKeyColumns().compareTo(o.getPrimaryKeyColumns());
  }
  if (returnValue == 0 && this.updateRule != null && o.getUpdateRule() != null)   returnValue=this.updateRule.compareTo(o.getUpdateRule());
  if (returnValue == 0 && this.deleteRule != null && o.getDeleteRule() != null)   returnValue=this.deleteRule.compareTo(o.getDeleteRule());
  return returnValue;
}","public int compareTo(ForeignKey o){
  int returnValue=0;
  if (this.getForeignKeyTable() != null && o.getForeignKeyTable() != null) {
    returnValue=this.getForeignKeyTable().compareTo(o.getForeignKeyTable());
  }
  if (returnValue == 0 && this.getForeignKeyColumns() != null && o.getForeignKeyColumns() != null) {
    returnValue=this.getForeignKeyColumns().compareToIgnoreCase(o.getForeignKeyColumns());
  }
  if (returnValue == 0 && this.getName() != null && o.getName() != null) {
    returnValue=this.getName().compareToIgnoreCase(o.getName());
  }
  if (returnValue == 0 && this.getPrimaryKeyTable() != null && o.getPrimaryKeyTable() != null) {
    returnValue=this.getPrimaryKeyTable().compareTo(o.getPrimaryKeyTable());
  }
  if (returnValue == 0 && this.getPrimaryKeyColumns() != null && o.getPrimaryKeyColumns() != null) {
    returnValue=this.getPrimaryKeyColumns().compareToIgnoreCase(o.getPrimaryKeyColumns());
  }
  if (returnValue == 0 && this.updateRule != null && o.getUpdateRule() != null)   returnValue=this.updateRule.compareTo(o.getUpdateRule());
  if (returnValue == 0 && this.deleteRule != null && o.getDeleteRule() != null)   returnValue=this.deleteRule.compareTo(o.getDeleteRule());
  return returnValue;
}"
84093,"public int hashCode(){
  int result=0;
  if (primaryKeyTable != null) {
    result=primaryKeyTable.hashCode();
  }
  if (this.name != null) {
    result=31 * result + this.name.toUpperCase().hashCode();
  }
  if (primaryKeyColumns != null) {
    result=31 * result + primaryKeyColumns.toUpperCase().hashCode();
  }
  if (foreignKeyTable != null) {
    result=31 * result + foreignKeyTable.hashCode();
  }
  if (foreignKeyColumns != null) {
    result=31 * result + foreignKeyColumns.toUpperCase().hashCode();
  }
  if (this.updateRule != null)   result=31 * result + this.updateRule.hashCode();
  if (this.deleteRule != null)   result=31 * result + this.deleteRule.hashCode();
  return result;
}","public int hashCode(){
  int result=0;
  if (primaryKeyTable != null) {
    result=primaryKeyTable.hashCode();
  }
  if (primaryKeyColumns != null) {
    result=31 * result + primaryKeyColumns.toUpperCase().hashCode();
  }
  if (foreignKeyTable != null) {
    result=31 * result + foreignKeyTable.hashCode();
  }
  if (foreignKeyColumns != null) {
    result=31 * result + foreignKeyColumns.toUpperCase().hashCode();
  }
  if (this.updateRule != null)   result=31 * result + this.updateRule.hashCode();
  if (this.deleteRule != null)   result=31 * result + this.deleteRule.hashCode();
  return result;
}"
84094,"public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  ForeignKey that=(ForeignKey)o;
  return getForeignKeyColumns().equalsIgnoreCase(that.getForeignKeyColumns()) && foreignKeyTable.equals(that.foreignKeyTable) && this.name.equalsIgnoreCase(that.getName())&& getPrimaryKeyColumns().equalsIgnoreCase(that.getPrimaryKeyColumns())&& primaryKeyTable.equals(that.primaryKeyTable);
}","public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  ForeignKey that=(ForeignKey)o;
  return getForeignKeyColumns().equalsIgnoreCase(that.getForeignKeyColumns()) && foreignKeyTable.equals(that.foreignKeyTable) && getPrimaryKeyColumns().equalsIgnoreCase(that.getPrimaryKeyColumns())&& primaryKeyTable.equals(that.primaryKeyTable);
}"
84095,"public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Index index=(Index)o;
  boolean equals=true;
  for (  String column : index.getColumns()) {
    if (!columns.contains(column)) {
      equals=false;
    }
  }
  if (!this.unique.equals(index.isUnique())) {
    equals=false;
  }
  return equals || table.getName().equalsIgnoreCase(index.table.getName());
}","public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Index index=(Index)o;
  boolean equals=true;
  for (  String column : index.getColumns()) {
    if (!columns.contains(column)) {
      equals=false;
    }
  }
  if (this.unique == null && index.isUnique() != null) {
    equals=false;
  }
 else   if (!this.unique.equals(index.isUnique())) {
    equals=false;
  }
  return equals || table.getName().equalsIgnoreCase(index.table.getName());
}"
84096,"public int compareTo(Table o){
  return this.getName().compareTo(o.getName());
}","public int compareTo(Table o){
  return this.getName().compareToIgnoreCase(o.getName());
}"
84097,"public void startElement(String uri,String localName,String qName,Attributes baseAttributes) throws SAXException {
  Attributes atts=new ExpandingAttributes(baseAttributes);
  try {
    if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String version=uri.substring(uri.lastIndexOf(""String_Node_Str"") + 1);
      if (!version.equals(XMLChangeLogParser.getSchemaVersion())) {
        log.warning(databaseChangeLog.getPhysicalFilePath() + ""String_Node_Str"" + version+ ""String_Node_Str""+ XMLChangeLogParser.getSchemaVersion());
      }
      databaseChangeLog.setLogicalFilePath(atts.getValue(""String_Node_Str""));
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String fileName=atts.getValue(""String_Node_Str"");
      handleIncludedChangeLog(fileName);
    }
 else     if (changeSet == null && ""String_Node_Str"".equals(qName)) {
      boolean alwaysRun=false;
      boolean runOnChange=false;
      if (""String_Node_Str"".equalsIgnoreCase(atts.getValue(""String_Node_Str""))) {
        alwaysRun=true;
      }
      if (""String_Node_Str"".equalsIgnoreCase(atts.getValue(""String_Node_Str""))) {
        runOnChange=true;
      }
      changeSet=new ChangeSet(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""),alwaysRun,runOnChange,databaseChangeLog.getFilePath(),databaseChangeLog.getPhysicalFilePath(),atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
      if (StringUtils.trimToNull(atts.getValue(""String_Node_Str"")) != null) {
        changeSet.setFailOnError(Boolean.parseBoolean(atts.getValue(""String_Node_Str"")));
      }
    }
 else     if (changeSet != null && ""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
      String id=atts.getValue(""String_Node_Str"");
      if (id != null) {
        String path=atts.getValue(""String_Node_Str"");
        if (path == null) {
          path=databaseChangeLog.getFilePath();
        }
        String author=atts.getValue(""String_Node_Str"");
        ChangeSet changeSet=databaseChangeLog.getChangeSet(path,author,id);
        if (changeSet == null) {
          throw new SAXException(""String_Node_Str"" + path + ""String_Node_Str""+ author+ ""String_Node_Str""+ id);
        }
 else {
          for (          Change change : changeSet.getChanges()) {
            this.changeSet.addRollbackChange(change);
          }
        }
      }
      inRollback=true;
    }
 else     if (""String_Node_Str"".equals(qName)) {
      rootPrecondition=new AndPrecondition();
      rootPrecondition.setSkipOnFail(Boolean.parseBoolean(atts.getValue(""String_Node_Str"")));
      preconditionLogicStack.push(rootPrecondition);
    }
 else     if (rootPrecondition != null) {
      currentPrecondition=PreconditionFactory.getInstance().create(qName);
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(currentPrecondition,attributeName,attributeValue);
      }
      preconditionLogicStack.peek().addNestedPrecondition(currentPrecondition);
      if (currentPrecondition instanceof PreconditionLogic) {
        preconditionLogicStack.push(((PreconditionLogic)currentPrecondition));
      }
      if (""String_Node_Str"".equals(qName)) {
        text=new StringBuffer();
      }
    }
 else     if (changeSet != null && change == null) {
      change=ChangeFactory.getInstance().create(qName);
      change.setChangeSet(changeSet);
      text=new StringBuffer();
      if (change == null) {
        throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
      }
      change.setFileOpener(fileOpener);
      if (change instanceof CustomChangeWrapper) {
        ((CustomChangeWrapper)change).setClassLoader(fileOpener.toClassLoader());
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(change,attributeName,attributeValue);
      }
      change.setUp();
    }
 else     if (change != null && ""String_Node_Str"".equals(qName)) {
      ColumnConfig column;
      if (change instanceof LoadDataChange) {
        column=new LoadDataColumnConfig();
      }
 else {
        column=new ColumnConfig();
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(column,attributeName,attributeValue);
      }
      if (change instanceof ChangeWithColumns) {
        ((ChangeWithColumns)change).addColumn(column);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + change.getClass().getName());
      }
    }
 else     if (change != null && ""String_Node_Str"".equals(qName)) {
      ConstraintsConfig constraints=new ConstraintsConfig();
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(constraints,attributeName,attributeValue);
      }
      ColumnConfig lastColumn;
      if (change instanceof AddColumnChange) {
        lastColumn=((AddColumnChange)change).getLastColumn();
      }
 else       if (change instanceof CreateTableChange) {
        lastColumn=((CreateTableChange)change).getColumns().get(((CreateTableChange)change).getColumns().size() - 1);
      }
 else       if (change instanceof ModifyColumnChange) {
        lastColumn=((ModifyColumnChange)change).getColumns().get(((ModifyColumnChange)change).getColumns().size() - 1);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + change.getClass().getName());
      }
      lastColumn.setConstraints(constraints);
    }
 else     if (""String_Node_Str"".equals(qName)) {
      if (change instanceof CustomChangeWrapper) {
        ((CustomChangeWrapper)change).setParam(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
      }
 else {
        throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
      }
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      if (StringUtils.trimToNull(atts.getValue(""String_Node_Str"")) == null) {
        this.setParameterValue(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
      }
 else {
        Properties props=new Properties();
        InputStream propertiesStream=fileOpener.getResourceAsStream(atts.getValue(""String_Node_Str""));
        if (propertiesStream == null) {
          log.info(""String_Node_Str"" + atts.getValue(""String_Node_Str""));
        }
 else {
          props.load(propertiesStream);
          for (          Map.Entry entry : props.entrySet()) {
            this.setParameterValue(entry.getKey().toString(),entry.getValue().toString());
          }
        }
      }
    }
 else     if (change instanceof ExecuteShellCommandChange && ""String_Node_Str"".equals(qName)) {
      ((ExecuteShellCommandChange)change).addArg(atts.getValue(""String_Node_Str""));
    }
 else {
      throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    e.printStackTrace();
    throw new SAXException(e);
  }
}","public void startElement(String uri,String localName,String qName,Attributes baseAttributes) throws SAXException {
  Attributes atts=new ExpandingAttributes(baseAttributes);
  try {
    if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String version=uri.substring(uri.lastIndexOf(""String_Node_Str"") + 1);
      if (!version.equals(XMLChangeLogParser.getSchemaVersion())) {
        log.warning(databaseChangeLog.getPhysicalFilePath() + ""String_Node_Str"" + version+ ""String_Node_Str""+ XMLChangeLogParser.getSchemaVersion());
      }
      databaseChangeLog.setLogicalFilePath(atts.getValue(""String_Node_Str""));
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String fileName=atts.getValue(""String_Node_Str"");
      handleIncludedChangeLog(fileName);
    }
 else     if (changeSet == null && ""String_Node_Str"".equals(qName)) {
      boolean alwaysRun=false;
      boolean runOnChange=false;
      if (""String_Node_Str"".equalsIgnoreCase(atts.getValue(""String_Node_Str""))) {
        alwaysRun=true;
      }
      if (""String_Node_Str"".equalsIgnoreCase(atts.getValue(""String_Node_Str""))) {
        runOnChange=true;
      }
      changeSet=new ChangeSet(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""),alwaysRun,runOnChange,databaseChangeLog.getFilePath(),databaseChangeLog.getPhysicalFilePath(),atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
      if (StringUtils.trimToNull(atts.getValue(""String_Node_Str"")) != null) {
        changeSet.setFailOnError(Boolean.parseBoolean(atts.getValue(""String_Node_Str"")));
      }
    }
 else     if (changeSet != null && ""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
      String id=atts.getValue(""String_Node_Str"");
      if (id != null) {
        String path=atts.getValue(""String_Node_Str"");
        if (path == null) {
          path=databaseChangeLog.getFilePath();
        }
        String author=atts.getValue(""String_Node_Str"");
        ChangeSet changeSet=databaseChangeLog.getChangeSet(path,author,id);
        if (changeSet == null) {
          throw new SAXException(""String_Node_Str"" + path + ""String_Node_Str""+ author+ ""String_Node_Str""+ id);
        }
 else {
          for (          Change change : changeSet.getChanges()) {
            this.changeSet.addRollbackChange(change);
          }
        }
      }
      inRollback=true;
    }
 else     if (""String_Node_Str"".equals(qName)) {
      rootPrecondition=new AndPrecondition();
      rootPrecondition.setOnFail(StringUtils.trimToNull(atts.getValue(""String_Node_Str"")));
      preconditionLogicStack.push(rootPrecondition);
    }
 else     if (rootPrecondition != null) {
      currentPrecondition=PreconditionFactory.getInstance().create(qName);
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(currentPrecondition,attributeName,attributeValue);
      }
      preconditionLogicStack.peek().addNestedPrecondition(currentPrecondition);
      if (currentPrecondition instanceof PreconditionLogic) {
        preconditionLogicStack.push(((PreconditionLogic)currentPrecondition));
      }
      if (""String_Node_Str"".equals(qName)) {
        text=new StringBuffer();
      }
    }
 else     if (changeSet != null && change == null) {
      change=ChangeFactory.getInstance().create(qName);
      change.setChangeSet(changeSet);
      text=new StringBuffer();
      if (change == null) {
        throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
      }
      change.setFileOpener(fileOpener);
      if (change instanceof CustomChangeWrapper) {
        ((CustomChangeWrapper)change).setClassLoader(fileOpener.toClassLoader());
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(change,attributeName,attributeValue);
      }
      change.setUp();
    }
 else     if (change != null && ""String_Node_Str"".equals(qName)) {
      ColumnConfig column;
      if (change instanceof LoadDataChange) {
        column=new LoadDataColumnConfig();
      }
 else {
        column=new ColumnConfig();
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(column,attributeName,attributeValue);
      }
      if (change instanceof ChangeWithColumns) {
        ((ChangeWithColumns)change).addColumn(column);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + change.getClass().getName());
      }
    }
 else     if (change != null && ""String_Node_Str"".equals(qName)) {
      ConstraintsConfig constraints=new ConstraintsConfig();
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(constraints,attributeName,attributeValue);
      }
      ColumnConfig lastColumn;
      if (change instanceof AddColumnChange) {
        lastColumn=((AddColumnChange)change).getLastColumn();
      }
 else       if (change instanceof CreateTableChange) {
        lastColumn=((CreateTableChange)change).getColumns().get(((CreateTableChange)change).getColumns().size() - 1);
      }
 else       if (change instanceof ModifyColumnChange) {
        lastColumn=((ModifyColumnChange)change).getColumns().get(((ModifyColumnChange)change).getColumns().size() - 1);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + change.getClass().getName());
      }
      lastColumn.setConstraints(constraints);
    }
 else     if (""String_Node_Str"".equals(qName)) {
      if (change instanceof CustomChangeWrapper) {
        ((CustomChangeWrapper)change).setParam(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
      }
 else {
        throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
      }
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      if (StringUtils.trimToNull(atts.getValue(""String_Node_Str"")) == null) {
        this.setParameterValue(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
      }
 else {
        Properties props=new Properties();
        InputStream propertiesStream=fileOpener.getResourceAsStream(atts.getValue(""String_Node_Str""));
        if (propertiesStream == null) {
          log.info(""String_Node_Str"" + atts.getValue(""String_Node_Str""));
        }
 else {
          props.load(propertiesStream);
          for (          Map.Entry entry : props.entrySet()) {
            this.setParameterValue(entry.getKey().toString(),entry.getValue().toString());
          }
        }
      }
    }
 else     if (change instanceof ExecuteShellCommandChange && ""String_Node_Str"".equals(qName)) {
      ((ExecuteShellCommandChange)change).addArg(atts.getValue(""String_Node_Str""));
    }
 else {
      throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    e.printStackTrace();
    throw new SAXException(e);
  }
}"
84098,"protected String getDefaultDatabaseSchemaName() throws JDBCException {
  if (defaultDatabaseSchemaName == null) {
    try {
      List<String> searchPaths=getSearchPaths();
      if (searchPaths != null && searchPaths.size() > 0) {
        for (        String searchPath : searchPaths) {
          if (searchPath != null && searchPath.length() > 0) {
            defaultDatabaseSchemaName=searchPath;
            if (defaultDatabaseSchemaName.equals(""String_Node_Str"") && getConnectionUsername() != null) {
              if (!schemaExists(getConnectionUsername())) {
                defaultDatabaseSchemaName=null;
              }
            }
            if (defaultDatabaseSchemaName != null)             break;
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      log.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  return defaultDatabaseSchemaName;
}","protected String getDefaultDatabaseSchemaName() throws JDBCException {
  if (defaultDatabaseSchemaName == null) {
    try {
      List<String> searchPaths=getSearchPaths();
      if (searchPaths != null && searchPaths.size() > 0) {
        for (        String searchPath : searchPaths) {
          if (searchPath != null && searchPath.length() > 0) {
            defaultDatabaseSchemaName=searchPath;
            if (defaultDatabaseSchemaName.equals(""String_Node_Str"") && getConnectionUsername() != null) {
              if (!schemaExists(getConnectionUsername())) {
                defaultDatabaseSchemaName=null;
              }
 else {
                defaultDatabaseSchemaName=getConnectionUsername();
              }
            }
            if (defaultDatabaseSchemaName != null)             break;
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      log.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  return defaultDatabaseSchemaName;
}"
84099,"public String getDefaultCatalogName() throws JDBCException {
  if (defaultCatalogName == null) {
    try {
      List<String> searchPaths=getSearchPaths();
      if (searchPaths != null && searchPaths.size() > 0) {
        for (        String searchPath : searchPaths) {
          if (searchPath != null && searchPath.length() > 0) {
            defaultCatalogName=searchPath;
            if (defaultCatalogName.equals(""String_Node_Str"") && getConnectionUsername() != null) {
              if (!catalogExists(getConnectionUsername())) {
                defaultCatalogName=null;
              }
 else {
                defaultCatalogName=getConnectionUsername();
              }
            }
            if (defaultCatalogName != null)             break;
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      log.log(Level.SEVERE,""String_Node_Str"",e);
    }
    if (defaultCatalogName == null) {
      defaultCatalogName=""String_Node_Str"";
    }
  }
  return defaultCatalogName;
}","public String getDefaultCatalogName() throws JDBCException {
  return super.getDefaultCatalogName();
}"
84100,"protected Liquibase createLiquibase() throws Exception {
  FileOpener antFO=new AntFileOpener(getProject(),classpath);
  FileOpener fsFO=new FileSystemFileOpener();
  Database database=createDatabaseObject(getDriver(),getUrl(),getUsername(),getPassword(),getDefaultSchemaName());
  Liquibase liquibase=new Liquibase(getChangeLogFile().trim(),new CompositeFileOpener(antFO,fsFO),database);
  liquibase.setCurrentDateTimeFunction(currentDateTimeFunction);
  return liquibase;
}","protected Liquibase createLiquibase() throws Exception {
  FileOpener antFO=new AntFileOpener(getProject(),classpath);
  FileOpener fsFO=new FileSystemFileOpener();
  Database database=createDatabaseObject(getDriver(),getUrl(),getUsername(),getPassword(),getDefaultSchemaName());
  String changeLogFile=null;
  if (getChangeLogFile() != null) {
    changeLogFile=getChangeLogFile().trim();
  }
  Liquibase liquibase=new Liquibase(changeLogFile,new CompositeFileOpener(antFO,fsFO),database);
  liquibase.setCurrentDateTimeFunction(currentDateTimeFunction);
  return liquibase;
}"
84101,"public String getColumnType(String columnType,Boolean autoIncrement){
  if (columnType.startsWith(""String_Node_Str"")) {
    return columnType.replace(""String_Node_Str"",""String_Node_Str"");
  }
  String type=super.getColumnType(columnType,autoIncrement);
  if (type.startsWith(""String_Node_Str"")) {
    return getClobType();
  }
 else   if (type.toLowerCase().startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (type.toLowerCase().startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (autoIncrement != null && autoIncrement) {
    if (""String_Node_Str"".equals(type.toLowerCase())) {
      return ""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(type.toLowerCase())) {
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
  return type;
}","public String getColumnType(String columnType,Boolean autoIncrement){
  if (columnType.startsWith(""String_Node_Str"")) {
    return columnType.replace(""String_Node_Str"",""String_Node_Str"");
  }
  String type=super.getColumnType(columnType,autoIncrement);
  if (type.startsWith(""String_Node_Str"")) {
    return getClobType();
  }
 else   if (type.toLowerCase().startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (type.toLowerCase().startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (autoIncrement != null && autoIncrement) {
    if (""String_Node_Str"".equals(type.toLowerCase())) {
      return ""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(type.toLowerCase()) || ""String_Node_Str"".equals(type.toLowerCase())) {
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
  return type;
}"
84102,"public String getViewDefinition(String schemaName,String viewName) throws JDBCException {
  if (schemaName == null) {
    schemaName=convertRequestedSchemaToSchema(schemaName);
  }
  String definition=(String)this.getJdbcTemplate().queryForObject(getViewDefinitionSql(schemaName,viewName),String.class);
  if (definition == null) {
    return null;
  }
  return definition.replaceFirst(""String_Node_Str"",""String_Node_Str"");
}","public String getViewDefinition(String schemaName,String viewName) throws JDBCException {
  if (schemaName != null) {
    schemaName=convertRequestedSchemaToSchema(schemaName);
  }
  String definition=(String)this.getJdbcTemplate().queryForObject(getViewDefinitionSql(schemaName,viewName),String.class);
  if (definition == null) {
    return null;
  }
  return definition.replaceFirst(""String_Node_Str"",""String_Node_Str"");
}"
84103,"private void nodeToStringBuffer(Element node,StringBuffer buffer){
  buffer.append(""String_Node_Str"").append(node.getNodeName());
  SortedMap<String,String> attributeMap=new TreeMap<String,String>();
  NamedNodeMap attributes=node.getAttributes();
  for (int i=0; i < attributes.getLength(); i++) {
    Node attribute=attributes.item(i);
    attributeMap.put(attribute.getNodeName(),attribute.getNodeValue());
  }
  for (  Map.Entry entry : attributeMap.entrySet()) {
    String value=(String)entry.getValue();
    if (value != null) {
      buffer.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(attributeMap.get(value)).append(""String_Node_Str"");
    }
  }
  buffer.append(""String_Node_Str"").append(StringUtils.trimToEmpty(XMLUtil.getTextContent(node)));
  NodeList childNodes=node.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node childNode=childNodes.item(i);
    if (childNode instanceof Element) {
      nodeToStringBuffer(((Element)childNode),buffer);
    }
  }
  buffer.append(""String_Node_Str"").append(node.getNodeName()).append(""String_Node_Str"");
}","private void nodeToStringBuffer(Element node,StringBuffer buffer){
  buffer.append(""String_Node_Str"").append(node.getNodeName());
  SortedMap<String,String> attributeMap=new TreeMap<String,String>();
  NamedNodeMap attributes=node.getAttributes();
  for (int i=0; i < attributes.getLength(); i++) {
    Node attribute=attributes.item(i);
    attributeMap.put(attribute.getNodeName(),attribute.getNodeValue());
  }
  for (  Map.Entry entry : attributeMap.entrySet()) {
    String value=(String)entry.getValue();
    if (value != null) {
      buffer.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(value).append(""String_Node_Str"");
    }
  }
  buffer.append(""String_Node_Str"").append(StringUtils.trimToEmpty(XMLUtil.getTextContent(node)));
  NodeList childNodes=node.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node childNode=childNodes.item(i);
    if (childNode instanceof Element) {
      nodeToStringBuffer(((Element)childNode),buffer);
    }
  }
  buffer.append(""String_Node_Str"").append(node.getNodeName()).append(""String_Node_Str"");
}"
84104,"public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  String schemaName=getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName();
  CreateTableStatement statement=new CreateTableStatement(schemaName,getTableName());
  for (  ColumnConfig column : getColumns()) {
    ConstraintsConfig constraints=column.getConstraints();
    boolean isAutoIncrement=column.isAutoIncrement() != null && column.isAutoIncrement();
    if (constraints != null && constraints.isPrimaryKey() != null && constraints.isPrimaryKey()) {
      statement.addPrimaryKeyColumn(column.getName(),constraints.getPrimaryKeyName(),database.getColumnType(column.getType(),isAutoIncrement));
    }
 else {
      String defaultValue=null;
      if (column.hasDefaultValue()) {
        defaultValue=StringUtils.trimToNull(column.getDefaultColumnValue(database));
      }
      statement.addColumn(column.getName(),database.getColumnType(column.getType(),column.isAutoIncrement()),defaultValue);
    }
    if (constraints != null) {
      if (constraints.isNullable() != null && !constraints.isNullable()) {
        statement.addColumnConstraint(new NotNullConstraint(column.getName()));
      }
      if (constraints.getReferences() != null) {
        if (StringUtils.trimToNull(constraints.getForeignKeyName()) == null) {
          throw new UnsupportedChangeException(""String_Node_Str"");
        }
        ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(constraints.getForeignKeyName(),constraints.getReferences());
        fkConstraint.setColumn(column.getName());
        fkConstraint.setDeleteCascade(constraints.isDeleteCascade() != null && constraints.isDeleteCascade());
        fkConstraint.setInitiallyDeferred(constraints.isInitiallyDeferred() != null && constraints.isInitiallyDeferred());
        fkConstraint.setDeferrable(constraints.isDeferrable() != null && constraints.isDeferrable());
        statement.addColumnConstraint(fkConstraint);
      }
      if (constraints.isUnique() != null && constraints.isUnique()) {
        statement.addColumnConstraint(new UniqueConstraint(constraints.getUniqueConstraintName()).addColumns(column.getName()));
      }
    }
    if (isAutoIncrement) {
      statement.addColumnConstraint(new AutoIncrementConstraint(column.getName()));
    }
  }
  statement.setTablespace(StringUtils.trimToNull(getTablespace()));
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  statements.add(statement);
  return statements.toArray(new SqlStatement[statements.size()]);
}","public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  String schemaName=getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName();
  CreateTableStatement statement=new CreateTableStatement(schemaName,getTableName());
  for (  ColumnConfig column : getColumns()) {
    ConstraintsConfig constraints=column.getConstraints();
    boolean isAutoIncrement=column.isAutoIncrement() != null && column.isAutoIncrement();
    if (constraints != null && constraints.isPrimaryKey() != null && constraints.isPrimaryKey()) {
      statement.addPrimaryKeyColumn(column.getName(),database.getColumnType(column.getType(),isAutoIncrement),constraints.getPrimaryKeyName());
    }
 else {
      String defaultValue=null;
      if (column.hasDefaultValue()) {
        defaultValue=StringUtils.trimToNull(column.getDefaultColumnValue(database));
      }
      statement.addColumn(column.getName(),database.getColumnType(column.getType(),column.isAutoIncrement()),defaultValue);
    }
    if (constraints != null) {
      if (constraints.isNullable() != null && !constraints.isNullable()) {
        statement.addColumnConstraint(new NotNullConstraint(column.getName()));
      }
      if (constraints.getReferences() != null) {
        if (StringUtils.trimToNull(constraints.getForeignKeyName()) == null) {
          throw new UnsupportedChangeException(""String_Node_Str"");
        }
        ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(constraints.getForeignKeyName(),constraints.getReferences());
        fkConstraint.setColumn(column.getName());
        fkConstraint.setDeleteCascade(constraints.isDeleteCascade() != null && constraints.isDeleteCascade());
        fkConstraint.setInitiallyDeferred(constraints.isInitiallyDeferred() != null && constraints.isInitiallyDeferred());
        fkConstraint.setDeferrable(constraints.isDeferrable() != null && constraints.isDeferrable());
        statement.addColumnConstraint(fkConstraint);
      }
      if (constraints.isUnique() != null && constraints.isUnique()) {
        statement.addColumnConstraint(new UniqueConstraint(constraints.getUniqueConstraintName()).addColumns(column.getName()));
      }
    }
    if (isAutoIncrement) {
      statement.addColumnConstraint(new AutoIncrementConstraint(column.getName()));
    }
  }
  statement.setTablespace(StringUtils.trimToNull(getTablespace()));
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  statements.add(statement);
  return statements.toArray(new SqlStatement[statements.size()]);
}"
84105,"public CreateTableStatement addPrimaryKeyColumn(String columnName,String keyName,String columnType,ColumnConstraint... constraints){
  PrimaryKeyConstraint pkConstraint=new PrimaryKeyConstraint(keyName);
  pkConstraint.addColumns(columnName);
  List<ColumnConstraint> allConstraints=new ArrayList<ColumnConstraint>();
  allConstraints.addAll(Arrays.asList(constraints));
  allConstraints.add(new NotNullConstraint(columnName));
  allConstraints.add(pkConstraint);
  addColumn(columnName,columnType,allConstraints.toArray(new ColumnConstraint[allConstraints.size()]));
  return this;
}","public CreateTableStatement addPrimaryKeyColumn(String columnName,String columnType,String keyName,ColumnConstraint... constraints){
  PrimaryKeyConstraint pkConstraint=new PrimaryKeyConstraint(keyName);
  pkConstraint.addColumns(columnName);
  List<ColumnConstraint> allConstraints=new ArrayList<ColumnConstraint>();
  allConstraints.addAll(Arrays.asList(constraints));
  allConstraints.add(new NotNullConstraint(columnName));
  allConstraints.add(pkConstraint);
  addColumn(columnName,columnType,allConstraints.toArray(new ColumnConstraint[allConstraints.size()]));
  return this;
}"
84106,"public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String version=uri.substring(uri.lastIndexOf(""String_Node_Str"") + 1);
      if (!version.equals(XMLChangeLogParser.getSchemaVersion())) {
        log.warning(databaseChangeLog.getPhysicalFilePath() + ""String_Node_Str"" + version+ ""String_Node_Str""+ XMLChangeLogParser.getSchemaVersion());
      }
      databaseChangeLog.setLogicalFilePath(atts.getValue(""String_Node_Str""));
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String fileName=atts.getValue(""String_Node_Str"");
      handleIncludedChangeLog(fileName);
    }
 else     if (changeSet == null && ""String_Node_Str"".equals(qName)) {
      boolean alwaysRun=false;
      boolean runOnChange=false;
      if (""String_Node_Str"".equalsIgnoreCase(atts.getValue(""String_Node_Str""))) {
        alwaysRun=true;
      }
      if (""String_Node_Str"".equalsIgnoreCase(atts.getValue(""String_Node_Str""))) {
        runOnChange=true;
      }
      changeSet=new ChangeSet(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""),alwaysRun,runOnChange,databaseChangeLog.getFilePath(),databaseChangeLog.getPhysicalFilePath(),atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
      if (StringUtils.trimToNull(atts.getValue(""String_Node_Str"")) != null) {
        changeSet.setFailOnError(Boolean.parseBoolean(atts.getValue(""String_Node_Str"")));
      }
    }
 else     if (changeSet != null && ""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (changeSet != null && change == null) {
      change=ChangeFactory.getInstance().create(qName);
      change.setChangeSet(changeSet);
      text=new StringBuffer();
      if (change == null) {
        throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
      }
      change.setFileOpener(fileOpener);
      if (change instanceof CustomChangeWrapper) {
        ((CustomChangeWrapper)change).setClassLoader(fileOpener.toClassLoader());
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(change,attributeName,attributeValue);
      }
      change.setUp();
    }
 else     if (change != null && ""String_Node_Str"".equals(qName)) {
      ColumnConfig column=new ColumnConfig();
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(column,attributeName,attributeValue);
      }
      if (change instanceof AddColumnChange) {
        ((AddColumnChange)change).addColumn(column);
      }
 else       if (change instanceof CreateTableChange) {
        ((CreateTableChange)change).addColumn(column);
      }
 else       if (change instanceof InsertDataChange) {
        ((InsertDataChange)change).addColumn(column);
      }
 else       if (change instanceof UpdateDataChange) {
        ((UpdateDataChange)change).addColumn(column);
      }
 else       if (change instanceof CreateIndexChange) {
        ((CreateIndexChange)change).addColumn(column);
      }
 else       if (change instanceof ModifyColumnChange) {
        ((ModifyColumnChange)change).addColumn(column);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + change.getClass().getName());
      }
    }
 else     if (change != null && ""String_Node_Str"".equals(qName)) {
      ConstraintsConfig constraints=new ConstraintsConfig();
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(constraints,attributeName,attributeValue);
      }
      ColumnConfig lastColumn;
      if (change instanceof AddColumnChange) {
        lastColumn=((AddColumnChange)change).getLastColumn();
      }
 else       if (change instanceof CreateTableChange) {
        lastColumn=((CreateTableChange)change).getColumns().get(((CreateTableChange)change).getColumns().size() - 1);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + change.getClass().getName());
      }
      lastColumn.setConstraints(constraints);
    }
 else     if (""String_Node_Str"".equals(qName)) {
      rootPrecondition=new AndPrecondition();
      preconditionLogicStack.push(rootPrecondition);
    }
 else     if (rootPrecondition != null) {
      currentPrecondition=PreconditionFactory.getInstance().create(qName);
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(currentPrecondition,attributeName,attributeValue);
      }
      preconditionLogicStack.peek().addNestedPrecondition(currentPrecondition);
      if (currentPrecondition instanceof PreconditionLogic) {
        preconditionLogicStack.push(((PreconditionLogic)currentPrecondition));
      }
      if (""String_Node_Str"".equals(qName)) {
        text=new StringBuffer();
      }
    }
 else     if (""String_Node_Str"".equals(qName)) {
      if (change instanceof CustomChangeWrapper) {
        ((CustomChangeWrapper)change).setParam(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
      }
 else {
        throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
      }
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (change instanceof ExecuteShellCommandChange && ""String_Node_Str"".equals(qName)) {
      ((ExecuteShellCommandChange)change).addArg(atts.getValue(""String_Node_Str""));
    }
 else {
      throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    e.printStackTrace();
    throw new SAXException(e);
  }
}","public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String version=uri.substring(uri.lastIndexOf(""String_Node_Str"") + 1);
      if (!version.equals(XMLChangeLogParser.getSchemaVersion())) {
        log.warning(databaseChangeLog.getPhysicalFilePath() + ""String_Node_Str"" + version+ ""String_Node_Str""+ XMLChangeLogParser.getSchemaVersion());
      }
      databaseChangeLog.setLogicalFilePath(atts.getValue(""String_Node_Str""));
    }
 else     if (""String_Node_Str"".equals(qName)) {
      String fileName=atts.getValue(""String_Node_Str"");
      handleIncludedChangeLog(fileName);
    }
 else     if (changeSet == null && ""String_Node_Str"".equals(qName)) {
      boolean alwaysRun=false;
      boolean runOnChange=false;
      if (""String_Node_Str"".equalsIgnoreCase(atts.getValue(""String_Node_Str""))) {
        alwaysRun=true;
      }
      if (""String_Node_Str"".equalsIgnoreCase(atts.getValue(""String_Node_Str""))) {
        runOnChange=true;
      }
      changeSet=new ChangeSet(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""),alwaysRun,runOnChange,databaseChangeLog.getFilePath(),databaseChangeLog.getPhysicalFilePath(),atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
      if (StringUtils.trimToNull(atts.getValue(""String_Node_Str"")) != null) {
        changeSet.setFailOnError(Boolean.parseBoolean(atts.getValue(""String_Node_Str"")));
      }
    }
 else     if (changeSet != null && ""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (changeSet != null && change == null) {
      change=ChangeFactory.getInstance().create(qName);
      change.setChangeSet(changeSet);
      text=new StringBuffer();
      if (change == null) {
        throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
      }
      change.setFileOpener(fileOpener);
      if (change instanceof CustomChangeWrapper) {
        ((CustomChangeWrapper)change).setClassLoader(fileOpener.toClassLoader());
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(change,attributeName,attributeValue);
      }
      change.setUp();
    }
 else     if (change != null && ""String_Node_Str"".equals(qName)) {
      ColumnConfig column=new ColumnConfig();
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(column,attributeName,attributeValue);
      }
      if (change instanceof AddColumnChange) {
        ((AddColumnChange)change).addColumn(column);
      }
 else       if (change instanceof CreateTableChange) {
        ((CreateTableChange)change).addColumn(column);
      }
 else       if (change instanceof InsertDataChange) {
        ((InsertDataChange)change).addColumn(column);
      }
 else       if (change instanceof UpdateDataChange) {
        ((UpdateDataChange)change).addColumn(column);
      }
 else       if (change instanceof CreateIndexChange) {
        ((CreateIndexChange)change).addColumn(column);
      }
 else       if (change instanceof ModifyColumnChange) {
        ((ModifyColumnChange)change).addColumn(column);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + change.getClass().getName());
      }
    }
 else     if (change != null && ""String_Node_Str"".equals(qName)) {
      ConstraintsConfig constraints=new ConstraintsConfig();
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(constraints,attributeName,attributeValue);
      }
      ColumnConfig lastColumn;
      if (change instanceof AddColumnChange) {
        lastColumn=((AddColumnChange)change).getLastColumn();
      }
 else       if (change instanceof CreateTableChange) {
        lastColumn=((CreateTableChange)change).getColumns().get(((CreateTableChange)change).getColumns().size() - 1);
      }
 else       if (change instanceof ModifyColumnChange) {
        lastColumn=((ModifyColumnChange)change).getColumns().get(((ModifyColumnChange)change).getColumns().size() - 1);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + change.getClass().getName());
      }
      lastColumn.setConstraints(constraints);
    }
 else     if (""String_Node_Str"".equals(qName)) {
      rootPrecondition=new AndPrecondition();
      preconditionLogicStack.push(rootPrecondition);
    }
 else     if (rootPrecondition != null) {
      currentPrecondition=PreconditionFactory.getInstance().create(qName);
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(currentPrecondition,attributeName,attributeValue);
      }
      preconditionLogicStack.peek().addNestedPrecondition(currentPrecondition);
      if (currentPrecondition instanceof PreconditionLogic) {
        preconditionLogicStack.push(((PreconditionLogic)currentPrecondition));
      }
      if (""String_Node_Str"".equals(qName)) {
        text=new StringBuffer();
      }
    }
 else     if (""String_Node_Str"".equals(qName)) {
      if (change instanceof CustomChangeWrapper) {
        ((CustomChangeWrapper)change).setParam(atts.getValue(""String_Node_Str""),atts.getValue(""String_Node_Str""));
      }
 else {
        throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
      }
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (change instanceof ExecuteShellCommandChange && ""String_Node_Str"".equals(qName)) {
      ((ExecuteShellCommandChange)change).addArg(atts.getValue(""String_Node_Str""));
    }
 else {
      throw new MigrationFailedException(changeSet,""String_Node_Str"" + qName);
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    e.printStackTrace();
    throw new SAXException(e);
  }
}"
84107,"/** 
 * Returns the type name and any parameters suitable for SQL.
 */
public String getDataTypeString(Database database){
  List<Integer> noParens=Arrays.asList(Types.ARRAY,Types.BIGINT,Types.BINARY,Types.BIT,Types.BLOB,Types.BOOLEAN,Types.CLOB,Types.DATALINK,Types.DATE,Types.DISTINCT,Types.INTEGER,Types.JAVA_OBJECT,Types.LONGVARBINARY,Types.NULL,Types.OTHER,Types.REF,Types.SMALLINT,Types.STRUCT,Types.TIME,Types.TIMESTAMP,Types.TINYINT,Types.LONGVARCHAR);
  List<Integer> oneParam=Arrays.asList(Types.CHAR,Types.VARCHAR,Types.VARBINARY);
  List<Integer> twoParams=Arrays.asList(Types.DECIMAL,Types.DOUBLE,Types.FLOAT,Types.NUMERIC,Types.REAL);
  String translatedTypeName=this.getTypeName();
  if (database instanceof PostgresDatabase) {
    if (""String_Node_Str"".equals(translatedTypeName)) {
      translatedTypeName=""String_Node_Str"";
    }
  }
  String dataType;
  if (noParens.contains(this.getDataType())) {
    dataType=translatedTypeName;
  }
 else   if (oneParam.contains(this.getDataType())) {
    if (database instanceof PostgresDatabase && translatedTypeName.equals(""String_Node_Str"")) {
      return translatedTypeName;
    }
 else     if (database instanceof MSSQLDatabase && translatedTypeName.equals(""String_Node_Str"")) {
      return translatedTypeName;
    }
    dataType=translatedTypeName + ""String_Node_Str"" + this.getColumnSize()+ ""String_Node_Str"";
  }
 else   if (twoParams.contains(this.getDataType())) {
    if (database instanceof PostgresDatabase && this.getColumnSize() == 131089) {
      dataType=""String_Node_Str"";
    }
 else     if (database instanceof MSSQLDatabase && translatedTypeName.equalsIgnoreCase(""String_Node_Str"")) {
      dataType=translatedTypeName.toUpperCase();
    }
 else {
      dataType=translatedTypeName + ""String_Node_Str"" + this.getColumnSize()+ ""String_Node_Str""+ this.getDecimalDigits()+ ""String_Node_Str"";
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + this.getDataType() + ""String_Node_Str""+ this.getTypeName()+ ""String_Node_Str"");
  }
  return dataType;
}","/** 
 * Returns the type name and any parameters suitable for SQL.
 */
public String getDataTypeString(Database database){
  List<Integer> noParens=Arrays.asList(Types.ARRAY,Types.BIGINT,Types.BINARY,Types.BIT,Types.BLOB,Types.BOOLEAN,Types.CLOB,Types.DATALINK,Types.DATE,Types.DISTINCT,Types.INTEGER,Types.JAVA_OBJECT,Types.LONGVARBINARY,Types.NULL,Types.OTHER,Types.REF,Types.SMALLINT,Types.STRUCT,Types.TIME,Types.TIMESTAMP,Types.TINYINT,Types.LONGVARCHAR);
  List<Integer> oneParam=Arrays.asList(Types.CHAR,Types.VARCHAR,Types.VARBINARY);
  List<Integer> twoParams=Arrays.asList(Types.DECIMAL,Types.DOUBLE,Types.FLOAT,Types.NUMERIC,Types.REAL);
  String translatedTypeName=this.getTypeName();
  if (database instanceof PostgresDatabase) {
    if (""String_Node_Str"".equals(translatedTypeName)) {
      translatedTypeName=""String_Node_Str"";
    }
  }
  String dataType;
  if (noParens.contains(this.getDataType())) {
    dataType=translatedTypeName;
  }
 else   if (oneParam.contains(this.getDataType())) {
    if (database instanceof PostgresDatabase && translatedTypeName.equals(""String_Node_Str"")) {
      return translatedTypeName;
    }
 else     if (database instanceof MSSQLDatabase && translatedTypeName.equals(""String_Node_Str"")) {
      return translatedTypeName;
    }
 else     if (database instanceof MySQLDatabase && (translatedTypeName.startsWith(""String_Node_Str"") || translatedTypeName.startsWith(""String_Node_Str""))) {
      return translatedTypeName;
    }
    dataType=translatedTypeName + ""String_Node_Str"" + this.getColumnSize()+ ""String_Node_Str"";
  }
 else   if (twoParams.contains(this.getDataType())) {
    if (database instanceof PostgresDatabase && this.getColumnSize() == 131089) {
      dataType=""String_Node_Str"";
    }
 else     if (database instanceof MSSQLDatabase && translatedTypeName.equalsIgnoreCase(""String_Node_Str"")) {
      dataType=translatedTypeName.toUpperCase();
    }
 else {
      dataType=translatedTypeName + ""String_Node_Str"" + this.getColumnSize()+ ""String_Node_Str""+ this.getDecimalDigits()+ ""String_Node_Str"";
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + this.getDataType() + ""String_Node_Str""+ this.getTypeName()+ ""String_Node_Str"");
  }
  return dataType;
}"
84108,"private void readColumns(String schema) throws SQLException, JDBCException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  Statement selectStatement=database.getConnection().createStatement();
  ResultSet rs=databaseMetaData.getColumns(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),null,null);
  while (rs.next()) {
    Column columnInfo=new Column();
    String tableName=rs.getString(""String_Node_Str"");
    String columnName=rs.getString(""String_Node_Str"");
    String schemaName=rs.getString(""String_Node_Str"");
    String catalogName=rs.getString(""String_Node_Str"");
    String remarks=rs.getString(""String_Node_Str"");
    if (database.isSystemTable(catalogName,schemaName,tableName) || database.isLiquibaseTable(tableName)) {
      continue;
    }
    Table table=tablesMap.get(tableName);
    if (table == null) {
      View view=viewsMap.get(tableName);
      if (view == null) {
        log.info(""String_Node_Str"" + tableName + ""String_Node_Str""+ columnName);
        continue;
      }
 else {
        columnInfo.setView(view);
        view.getColumns().add(columnInfo);
      }
    }
 else {
      columnInfo.setTable(table);
      table.getColumns().add(columnInfo);
    }
    columnInfo.setName(columnName);
    columnInfo.setDataType(rs.getInt(""String_Node_Str""));
    columnInfo.setColumnSize(rs.getInt(""String_Node_Str""));
    columnInfo.setDecimalDigits(rs.getInt(""String_Node_Str""));
    Object defaultValue=rs.getObject(""String_Node_Str"");
    try {
      columnInfo.setDefaultValue(database.convertDatabaseValueToJavaObject(defaultValue,columnInfo.getDataType(),columnInfo.getColumnSize(),columnInfo.getDecimalDigits()));
    }
 catch (    ParseException e) {
      throw new JDBCException(e);
    }
    int nullable=rs.getInt(""String_Node_Str"");
    if (nullable == DatabaseMetaData.columnNoNulls) {
      columnInfo.setNullable(false);
    }
 else     if (nullable == DatabaseMetaData.columnNullable) {
      columnInfo.setNullable(true);
    }
    columnInfo.setPrimaryKey(isPrimaryKey(columnInfo));
    columnInfo.setAutoIncrement(database.isColumnAutoIncrement(schema,tableName,columnName));
    columnInfo.setTypeName(database.getColumnType(rs.getString(""String_Node_Str""),columnInfo.isAutoIncrement()));
    columnInfo.setRemarks(remarks);
    columnsMap.put(tableName + ""String_Node_Str"" + columnName,columnInfo);
  }
  rs.close();
  selectStatement.close();
}","private void readColumns(String schema) throws SQLException, JDBCException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  Statement selectStatement=database.getConnection().createStatement();
  ResultSet rs=databaseMetaData.getColumns(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),null,null);
  while (rs.next()) {
    Column columnInfo=new Column();
    String tableName=rs.getString(""String_Node_Str"");
    String columnName=rs.getString(""String_Node_Str"");
    String schemaName=rs.getString(""String_Node_Str"");
    String catalogName=rs.getString(""String_Node_Str"");
    String remarks=rs.getString(""String_Node_Str"");
    if (database.isSystemTable(catalogName,schemaName,tableName) || database.isLiquibaseTable(tableName)) {
      continue;
    }
    Table table=tablesMap.get(tableName);
    if (table == null) {
      View view=viewsMap.get(tableName);
      if (view == null) {
        log.info(""String_Node_Str"" + tableName + ""String_Node_Str""+ columnName);
        continue;
      }
 else {
        columnInfo.setView(view);
        view.getColumns().add(columnInfo);
      }
    }
 else {
      columnInfo.setTable(table);
      table.getColumns().add(columnInfo);
    }
    columnInfo.setName(columnName);
    columnInfo.setDataType(rs.getInt(""String_Node_Str""));
    columnInfo.setColumnSize(rs.getInt(""String_Node_Str""));
    columnInfo.setDecimalDigits(rs.getInt(""String_Node_Str""));
    int nullable=rs.getInt(""String_Node_Str"");
    if (nullable == DatabaseMetaData.columnNoNulls) {
      columnInfo.setNullable(false);
    }
 else     if (nullable == DatabaseMetaData.columnNullable) {
      columnInfo.setNullable(true);
    }
    columnInfo.setPrimaryKey(isPrimaryKey(columnInfo));
    columnInfo.setAutoIncrement(database.isColumnAutoIncrement(schema,tableName,columnName));
    getColumnTypeAndDefValue(columnInfo,rs);
    columnInfo.setRemarks(remarks);
    columnsMap.put(tableName + ""String_Node_Str"" + columnName,columnInfo);
  }
  rs.close();
  selectStatement.close();
}"
84109,"public String escapeColumnNameList(String columnNames){
  StringBuffer sb=new StringBuffer();
  for (  String columnName : columnNames.split(""String_Node_Str"")) {
    if (sb.length() > 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"").append(columnName).append(""String_Node_Str"");
  }
  return sb.toString();
}","public String escapeColumnNameList(String columnNames){
  StringBuffer sb=new StringBuffer();
  for (  String columnName : columnNames.split(""String_Node_Str"")) {
    if (sb.length() > 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"").append(columnName.trim()).append(""String_Node_Str"");
  }
  return sb.toString();
}"
84110,"public HibernateDatabaseSnapshot(HibernateDatabase database) throws JDBCException {
  try {
    Configuration cfg=database.createConfiguration();
    cfg.configure(database.getConfigFile());
    this.database=database;
    Dialect dialect=new HibernateGenericDialect(cfg.getProperty(""String_Node_Str""));
    cfg.buildMappings();
    Mapping mapping=cfg.buildMapping();
    Iterator tableMappings=cfg.getTableMappings();
    while (tableMappings.hasNext()) {
      org.hibernate.mapping.Table hibernateTable=(org.hibernate.mapping.Table)tableMappings.next();
      if (hibernateTable.isPhysicalTable()) {
        Table table=new Table(hibernateTable.getName());
        System.out.println(""String_Node_Str"" + table.getName());
        tablesMap.put(table.getName(),table);
        Iterator columnIterator=hibernateTable.getColumnIterator();
        while (columnIterator.hasNext()) {
          org.hibernate.mapping.Column hibernateColumn=(org.hibernate.mapping.Column)columnIterator.next();
          Column column=new Column();
          column.setName(hibernateColumn.getName());
          column.setDataType(hibernateColumn.getSqlTypeCode(mapping));
          if (column.isNumeric()) {
            column.setColumnSize(hibernateColumn.getPrecision());
          }
 else {
            column.setColumnSize(hibernateColumn.getLength());
          }
          column.setDecimalDigits(hibernateColumn.getScale());
          column.setDefaultValue(hibernateColumn.getDefaultValue());
          column.setNullable(hibernateColumn.isNullable());
          column.setPrimaryKey(isPrimaryKey(hibernateTable,hibernateColumn));
          column.setTable(table);
          column.setTypeName(hibernateColumn.getSqlType(dialect,mapping).replaceFirst(""String_Node_Str"",""String_Node_Str""));
          column.setUnique(hibernateColumn.isUnique());
          column.setCertainDataType(false);
          columnsMap.put(table.getName() + ""String_Node_Str"" + column.getName(),column);
          table.getColumns().add(column);
        }
        Iterator indexIterator=hibernateTable.getIndexIterator();
        while (indexIterator.hasNext()) {
          org.hibernate.mapping.Index hibernateIndex=(org.hibernate.mapping.Index)indexIterator.next();
          Index index=new Index();
          index.setTable(table);
          index.setName(hibernateIndex.getName());
          columnIterator=hibernateIndex.getColumnIterator();
          while (columnIterator.hasNext()) {
            org.hibernate.mapping.Column hibernateColumn=(org.hibernate.mapping.Column)columnIterator.next();
            index.getColumns().add(hibernateColumn.getName());
          }
          indexes.add(index);
        }
        org.hibernate.mapping.PrimaryKey hibernatePrimaryKey=hibernateTable.getPrimaryKey();
        if (hibernatePrimaryKey != null) {
          PrimaryKey pk=new PrimaryKey();
          pk.setName(hibernatePrimaryKey.getName());
          pk.setTable(table);
          for (          Object hibernateColumn : hibernatePrimaryKey.getColumns()) {
            pk.getColumnNamesAsList().add(((org.hibernate.mapping.Column)hibernateColumn).getName());
          }
          primaryKeys.add(pk);
        }
      }
    }
    this.tables=new HashSet<Table>(tablesMap.values());
    this.columns=new HashSet<Column>(columnsMap.values());
    tableMappings=cfg.getTableMappings();
    while (tableMappings.hasNext()) {
      org.hibernate.mapping.Table hibernateTable=(org.hibernate.mapping.Table)tableMappings.next();
      if (hibernateTable.isPhysicalTable()) {
        Iterator fkIterator=hibernateTable.getForeignKeyIterator();
        while (fkIterator.hasNext()) {
          org.hibernate.mapping.ForeignKey hibernateForeignKey=(org.hibernate.mapping.ForeignKey)fkIterator.next();
          if (hibernateForeignKey.getTable() != null && hibernateForeignKey.getReferencedTable() != null && hibernateForeignKey.isPhysicalConstraint()) {
            ForeignKey fk=new ForeignKey();
            fk.setName(hibernateForeignKey.getName());
            fk.setForeignKeyTable(getTable(hibernateForeignKey.getTable().getName()));
            List<String> fkColumns=new ArrayList<String>();
            for (            Object column : hibernateForeignKey.getColumns()) {
              fkColumns.add(((org.hibernate.mapping.Column)column).getName());
            }
            fk.setForeignKeyColumns(StringUtils.join(fkColumns,""String_Node_Str""));
            fk.setPrimaryKeyTable(getTable(hibernateForeignKey.getReferencedTable().getName()));
            fkColumns=new ArrayList<String>();
            for (            Object column : hibernateForeignKey.getReferencedColumns()) {
              fkColumns.add(((org.hibernate.mapping.Column)column).getName());
            }
            if (fkColumns.size() == 0) {
              for (              Object column : hibernateForeignKey.getReferencedTable().getPrimaryKey().getColumns()) {
                fkColumns.add(((org.hibernate.mapping.Column)column).getName());
              }
            }
            fk.setPrimaryKeyColumns(StringUtils.join(fkColumns,""String_Node_Str""));
            foreignKeys.add(fk);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    throw new JDBCException(e);
  }
}","public HibernateDatabaseSnapshot(HibernateDatabase database) throws JDBCException {
  try {
    Configuration cfg=database.createConfiguration();
    cfg.configure(database.getConfigFile());
    this.database=database;
    Dialect dialect=new HibernateGenericDialect(cfg.getProperty(""String_Node_Str""));
    cfg.buildMappings();
    Mapping mapping=cfg.buildMapping();
    Iterator tableMappings=cfg.getTableMappings();
    while (tableMappings.hasNext()) {
      org.hibernate.mapping.Table hibernateTable=(org.hibernate.mapping.Table)tableMappings.next();
      if (hibernateTable.isPhysicalTable()) {
        Table table=new Table(hibernateTable.getName());
        System.out.println(""String_Node_Str"" + table.getName());
        tablesMap.put(table.getName(),table);
        Iterator columnIterator=hibernateTable.getColumnIterator();
        while (columnIterator.hasNext()) {
          org.hibernate.mapping.Column hibernateColumn=(org.hibernate.mapping.Column)columnIterator.next();
          Column column=new Column();
          column.setName(hibernateColumn.getName());
          column.setDataType(hibernateColumn.getSqlTypeCode(mapping));
          if (column.isNumeric()) {
            column.setColumnSize(hibernateColumn.getPrecision());
          }
 else {
            column.setColumnSize(hibernateColumn.getLength());
          }
          column.setDecimalDigits(hibernateColumn.getScale());
          column.setDefaultValue(hibernateColumn.getDefaultValue());
          column.setNullable(hibernateColumn.isNullable());
          column.setPrimaryKey(isPrimaryKey(hibernateTable,hibernateColumn));
          column.setTable(table);
          column.setTypeName(hibernateColumn.getSqlType(dialect,mapping).replaceFirst(""String_Node_Str"",""String_Node_Str""));
          column.setUnique(hibernateColumn.isUnique());
          column.setCertainDataType(false);
          columnsMap.put(table.getName() + ""String_Node_Str"" + column.getName(),column);
          table.getColumns().add(column);
        }
        Iterator indexIterator=hibernateTable.getIndexIterator();
        while (indexIterator.hasNext()) {
          org.hibernate.mapping.Index hibernateIndex=(org.hibernate.mapping.Index)indexIterator.next();
          Index index=new Index();
          index.setTable(table);
          index.setName(hibernateIndex.getName());
          columnIterator=hibernateIndex.getColumnIterator();
          while (columnIterator.hasNext()) {
            org.hibernate.mapping.Column hibernateColumn=(org.hibernate.mapping.Column)columnIterator.next();
            index.getColumns().add(hibernateColumn.getName());
          }
          indexes.add(index);
        }
        Iterator uniqueIterator=hibernateTable.getUniqueKeyIterator();
        while (uniqueIterator.hasNext()) {
          org.hibernate.mapping.UniqueKey hiberateUnique=(org.hibernate.mapping.UniqueKey)uniqueIterator.next();
          Index index=new Index();
          index.setTable(table);
          index.setName(hiberateUnique.getName());
          columnIterator=hiberateUnique.getColumnIterator();
          while (columnIterator.hasNext()) {
            org.hibernate.mapping.Column hibernateColumn=(org.hibernate.mapping.Column)columnIterator.next();
            index.getColumns().add(hibernateColumn.getName());
          }
          indexes.add(index);
        }
        org.hibernate.mapping.PrimaryKey hibernatePrimaryKey=hibernateTable.getPrimaryKey();
        if (hibernatePrimaryKey != null) {
          PrimaryKey pk=new PrimaryKey();
          pk.setName(hibernatePrimaryKey.getName());
          pk.setTable(table);
          for (          Object hibernateColumn : hibernatePrimaryKey.getColumns()) {
            pk.getColumnNamesAsList().add(((org.hibernate.mapping.Column)hibernateColumn).getName());
          }
          primaryKeys.add(pk);
        }
      }
    }
    this.tables=new HashSet<Table>(tablesMap.values());
    this.columns=new HashSet<Column>(columnsMap.values());
    tableMappings=cfg.getTableMappings();
    while (tableMappings.hasNext()) {
      org.hibernate.mapping.Table hibernateTable=(org.hibernate.mapping.Table)tableMappings.next();
      if (hibernateTable.isPhysicalTable()) {
        Iterator fkIterator=hibernateTable.getForeignKeyIterator();
        while (fkIterator.hasNext()) {
          org.hibernate.mapping.ForeignKey hibernateForeignKey=(org.hibernate.mapping.ForeignKey)fkIterator.next();
          if (hibernateForeignKey.getTable() != null && hibernateForeignKey.getReferencedTable() != null && hibernateForeignKey.isPhysicalConstraint()) {
            ForeignKey fk=new ForeignKey();
            fk.setName(hibernateForeignKey.getName());
            fk.setForeignKeyTable(getTable(hibernateForeignKey.getTable().getName()));
            List<String> fkColumns=new ArrayList<String>();
            for (            Object column : hibernateForeignKey.getColumns()) {
              fkColumns.add(((org.hibernate.mapping.Column)column).getName());
            }
            fk.setForeignKeyColumns(StringUtils.join(fkColumns,""String_Node_Str""));
            fk.setPrimaryKeyTable(getTable(hibernateForeignKey.getReferencedTable().getName()));
            fkColumns=new ArrayList<String>();
            for (            Object column : hibernateForeignKey.getReferencedColumns()) {
              fkColumns.add(((org.hibernate.mapping.Column)column).getName());
            }
            if (fkColumns.size() == 0) {
              for (              Object column : hibernateForeignKey.getReferencedTable().getPrimaryKey().getColumns()) {
                fkColumns.add(((org.hibernate.mapping.Column)column).getName());
              }
            }
            fk.setPrimaryKeyColumns(StringUtils.join(fkColumns,""String_Node_Str""));
            foreignKeys.add(fk);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    throw new JDBCException(e);
  }
}"
84111,"public void removeRanStatus(ChangeSet changeSet) throws JDBCException {
  String sql=""String_Node_Str"";
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getId()));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getAuthor()));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getFilePath()));
  this.getJdbcTemplate().execute(new RawSqlStatement(sql));
  commit();
}","public void removeRanStatus(ChangeSet changeSet) throws JDBCException {
  String sql=""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName()) + ""String_Node_Str"";
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getId()));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getAuthor()));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getFilePath()));
  this.getJdbcTemplate().execute(new RawSqlStatement(sql));
  commit();
}"
84112,"@Test public void generateStatement_primaryKey() throws Exception {
  AddColumnChange refactoring=new AddColumnChange();
  refactoring.setSchemaName(""String_Node_Str"");
  refactoring.setTableName(""String_Node_Str"");
  ColumnConfig column=new ColumnConfig();
  column.setName(""String_Node_Str"");
  column.setType(""String_Node_Str"");
  ConstraintsConfig constraints=new ConstraintsConfig();
  constraints.setNullable(Boolean.FALSE);
  constraints.setPrimaryKey(Boolean.TRUE);
  column.setConstraints(constraints);
  refactoring.addColumn(column);
  SqlStatement[] sqlStatements=refactoring.generateStatements(new MockDatabase());
  assertEquals(2,sqlStatements.length);
  assertTrue(sqlStatements[0] instanceof AddColumnStatement);
  assertFalse(((AddColumnStatement)sqlStatements[0]).isPrimaryKey());
}","@Test public void generateStatement_primaryKey() throws Exception {
  AddColumnChange refactoring=new AddColumnChange();
  refactoring.setSchemaName(""String_Node_Str"");
  refactoring.setTableName(""String_Node_Str"");
  ColumnConfig column=new ColumnConfig();
  column.setName(""String_Node_Str"");
  column.setType(""String_Node_Str"");
  ConstraintsConfig constraints=new ConstraintsConfig();
  constraints.setNullable(Boolean.FALSE);
  constraints.setPrimaryKey(Boolean.TRUE);
  column.setConstraints(constraints);
  refactoring.addColumn(column);
  SqlStatement[] sqlStatements=refactoring.generateStatements(new MockDatabase());
  assertEquals(1,sqlStatements.length);
  assertTrue(sqlStatements[0] instanceof AddColumnStatement);
  assertTrue(((AddColumnStatement)sqlStatements[0]).isPrimaryKey());
}"
84113,"@Test public void generateStatement_autoIncrement() throws Exception {
  AddColumnChange refactoring=new AddColumnChange();
  refactoring.setSchemaName(""String_Node_Str"");
  refactoring.setTableName(""String_Node_Str"");
  ColumnConfig column=new ColumnConfig();
  column.setName(""String_Node_Str"");
  column.setType(""String_Node_Str"");
  ConstraintsConfig constraints=new ConstraintsConfig();
  constraints.setNullable(Boolean.FALSE);
  constraints.setPrimaryKey(Boolean.TRUE);
  column.setAutoIncrement(Boolean.TRUE);
  column.setConstraints(constraints);
  refactoring.addColumn(column);
  SqlStatement[] sqlStatements=refactoring.generateStatements(new MockDatabase());
  assertEquals(2,sqlStatements.length);
  assertTrue(sqlStatements[0] instanceof AddColumnStatement);
  assertFalse(((AddColumnStatement)sqlStatements[0]).isPrimaryKey());
}","@Test public void generateStatement_autoIncrement() throws Exception {
  AddColumnChange refactoring=new AddColumnChange();
  refactoring.setSchemaName(""String_Node_Str"");
  refactoring.setTableName(""String_Node_Str"");
  ColumnConfig column=new ColumnConfig();
  column.setName(""String_Node_Str"");
  column.setType(""String_Node_Str"");
  ConstraintsConfig constraints=new ConstraintsConfig();
  constraints.setNullable(Boolean.FALSE);
  constraints.setPrimaryKey(Boolean.TRUE);
  column.setAutoIncrement(Boolean.TRUE);
  column.setConstraints(constraints);
  refactoring.addColumn(column);
  SqlStatement[] sqlStatements=refactoring.generateStatements(new MockDatabase());
  assertEquals(1,sqlStatements.length);
  assertTrue(sqlStatements[0] instanceof AddColumnStatement);
  assertTrue(((AddColumnStatement)sqlStatements[0]).isPrimaryKey());
  assertTrue(((AddColumnStatement)sqlStatements[0]).isAutoIncrement());
}"
84114,"public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  List<SqlStatement> sql=new ArrayList<SqlStatement>();
  String schemaName=getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName();
  for (  ColumnConfig aColumn : columns) {
    Set<ColumnConstraint> constraints=new HashSet<ColumnConstraint>();
    if (aColumn.getConstraints() != null) {
      if (aColumn.getConstraints().isNullable() != null && !aColumn.getConstraints().isNullable()) {
        constraints.add(new NotNullConstraint());
      }
    }
    AddColumnStatement addColumnStatement=new AddColumnStatement(schemaName,getTableName(),aColumn.getName(),aColumn.getType(),aColumn.getDefaultValueObject(),constraints.toArray(new ColumnConstraint[constraints.size()]));
    sql.add(addColumnStatement);
    if (aColumn.getValueObject() != null) {
      UpdateStatement updateStatement=new UpdateStatement(schemaName,getTableName());
      updateStatement.addNewColumnValue(aColumn.getName(),aColumn.getValueObject());
      sql.add(updateStatement);
    }
  }
  for (  ColumnConfig aColumn : columns) {
    if (aColumn.getConstraints() != null) {
      if (aColumn.getConstraints().isPrimaryKey() != null && aColumn.getConstraints().isPrimaryKey()) {
        AddPrimaryKeyChange change=new AddPrimaryKeyChange();
        change.setSchemaName(schemaName);
        change.setTableName(getTableName());
        change.setColumnNames(aColumn.getName());
        sql.addAll(Arrays.asList(change.generateStatements(database)));
      }
    }
  }
  if (database instanceof DB2Database) {
    sql.add(new ReorganizeTableStatement(schemaName,getTableName()));
  }
  return sql.toArray(new SqlStatement[sql.size()]);
}","public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  List<SqlStatement> sql=new ArrayList<SqlStatement>();
  String schemaName=getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName();
  for (  ColumnConfig aColumn : columns) {
    Set<ColumnConstraint> constraints=new HashSet<ColumnConstraint>();
    if (aColumn.getConstraints() != null) {
      if (aColumn.getConstraints().isNullable() != null && !aColumn.getConstraints().isNullable()) {
        constraints.add(new NotNullConstraint());
      }
      if (aColumn.getConstraints().isPrimaryKey() != null && aColumn.getConstraints().isPrimaryKey()) {
        constraints.add(new PrimaryKeyConstraint());
      }
    }
    if (aColumn.isAutoIncrement() != null && aColumn.isAutoIncrement()) {
      constraints.add(new AutoIncrementConstraint(aColumn.getName()));
    }
    AddColumnStatement addColumnStatement=new AddColumnStatement(schemaName,getTableName(),aColumn.getName(),aColumn.getType(),aColumn.getDefaultValueObject(),constraints.toArray(new ColumnConstraint[constraints.size()]));
    sql.add(addColumnStatement);
    if (aColumn.getValueObject() != null) {
      UpdateStatement updateStatement=new UpdateStatement(schemaName,getTableName());
      updateStatement.addNewColumnValue(aColumn.getName(),aColumn.getValueObject());
      sql.add(updateStatement);
    }
  }
  if (database instanceof DB2Database) {
    sql.add(new ReorganizeTableStatement(schemaName,getTableName()));
  }
  return sql.toArray(new SqlStatement[sql.size()]);
}"
84115,"private boolean isAutoIncrement(){
  for (  ColumnConstraint constraint : getConstraints()) {
    if (constraint instanceof AutoIncrementConstraint) {
      return true;
    }
  }
  return false;
}","public boolean isAutoIncrement(){
  for (  ColumnConstraint constraint : getConstraints()) {
    if (constraint instanceof AutoIncrementConstraint) {
      return true;
    }
  }
  return false;
}"
84116,"public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  Object defaultValue=null;
  try {
    if (getDefaultValue() != null) {
      defaultValue=getDefaultValue();
    }
 else     if (getDefaultValueBoolean() != null) {
      defaultValue=Boolean.valueOf(getDefaultValueBoolean());
    }
 else     if (getDefaultValueNumeric() != null) {
      defaultValue=NumberFormat.getInstance().parse(getDefaultValueNumeric());
    }
 else     if (getDefaultValueDate() != null) {
      defaultValue=new ISODateFormat().parse(getDefaultValueDate());
    }
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
  return new SqlStatement[]{new AddDefaultValueStatement(getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName(),getTableName(),getColumnName(),defaultValue)};
}","public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  Object defaultValue=null;
  if (getDefaultValue() != null) {
    defaultValue=getDefaultValue();
  }
 else   if (getDefaultValueBoolean() != null) {
    defaultValue=Boolean.valueOf(getDefaultValueBoolean());
  }
 else   if (getDefaultValueNumeric() != null) {
    try {
      defaultValue=NumberFormat.getInstance().parse(getDefaultValueNumeric());
    }
 catch (    ParseException e) {
      defaultValue=new ComputedNumericValue(getDefaultValueNumeric());
    }
  }
 else   if (getDefaultValueDate() != null) {
    try {
      defaultValue=new ISODateFormat().parse(getDefaultValueDate());
    }
 catch (    ParseException e) {
      defaultValue=new ComputedDateValue(getDefaultValueDate());
    }
  }
  return new SqlStatement[]{new AddDefaultValueStatement(getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName(),getTableName(),getColumnName(),defaultValue)};
}"
84117,"public String convertJavaObjectToString(Object value){
  if (value != null) {
    if (value instanceof String) {
      if (""String_Node_Str"".equalsIgnoreCase(((String)value))) {
        return null;
      }
      return ""String_Node_Str"" + ((String)value).replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    }
 else     if (value instanceof Number) {
      return value.toString();
    }
 else     if (value instanceof Boolean) {
      String returnValue;
      if (((Boolean)value)) {
        returnValue=this.getTrueBooleanValue();
      }
 else {
        returnValue=this.getFalseBooleanValue();
      }
      if (returnValue.matches(""String_Node_Str"")) {
        return returnValue;
      }
 else {
        return ""String_Node_Str"" + returnValue + ""String_Node_Str"";
      }
    }
 else     if (value instanceof java.sql.Date) {
      return this.getDateLiteral(((java.sql.Date)value));
    }
 else     if (value instanceof java.sql.Time) {
      return this.getDateLiteral(((java.sql.Time)value));
    }
 else     if (value instanceof java.sql.Timestamp) {
      return this.getDateLiteral(((java.sql.Timestamp)value));
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + value.getClass().getName());
    }
  }
 else {
    return null;
  }
}","public String convertJavaObjectToString(Object value){
  if (value != null) {
    if (value instanceof String) {
      if (""String_Node_Str"".equalsIgnoreCase(((String)value))) {
        return null;
      }
      return ""String_Node_Str"" + ((String)value).replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    }
 else     if (value instanceof Number) {
      return value.toString();
    }
 else     if (value instanceof Boolean) {
      String returnValue;
      if (((Boolean)value)) {
        returnValue=this.getTrueBooleanValue();
      }
 else {
        returnValue=this.getFalseBooleanValue();
      }
      if (returnValue.matches(""String_Node_Str"")) {
        return returnValue;
      }
 else {
        return ""String_Node_Str"" + returnValue + ""String_Node_Str"";
      }
    }
 else     if (value instanceof java.sql.Date) {
      return this.getDateLiteral(((java.sql.Date)value));
    }
 else     if (value instanceof java.sql.Time) {
      return this.getDateLiteral(((java.sql.Time)value));
    }
 else     if (value instanceof java.sql.Timestamp) {
      return this.getDateLiteral(((java.sql.Timestamp)value));
    }
 else     if (value instanceof ComputedDateValue) {
      return ((ComputedDateValue)value).getValue();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + value.getClass().getName());
    }
  }
 else {
    return null;
  }
}"
84118,"public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  List<SqlStatement> sql=new ArrayList<SqlStatement>();
  for (  ColumnConfig aColumn : columns) {
    String schemaName=getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName();
    if (database instanceof SybaseDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ aColumn.getType()));
    }
 else     if (database instanceof MSSQLDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ aColumn.getType()));
    }
 else     if (database instanceof MySQLDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ aColumn.getType()));
    }
 else     if (database instanceof OracleDatabase || database instanceof MaxDBDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ aColumn.getType()+ ""String_Node_Str""));
    }
 else     if (database instanceof DerbyDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ aColumn.getType()));
    }
 else     if (database instanceof HsqlDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ aColumn.getType()));
    }
 else     if (database instanceof CacheDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ aColumn.getType()));
    }
 else     if (database instanceof DB2Database) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ aColumn.getType()));
      sql.add(new ReorganizeTableStatement(schemaName,getTableName()));
    }
 else {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ aColumn.getType()));
    }
  }
  return sql.toArray(new SqlStatement[sql.size()]);
}","public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  List<SqlStatement> sql=new ArrayList<SqlStatement>();
  for (  ColumnConfig aColumn : columns) {
    String schemaName=getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName();
    if (database instanceof SybaseDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ database.getColumnType(aColumn.getType(),false)));
    }
 else     if (database instanceof MSSQLDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ database.getColumnType(aColumn.getType(),false)));
    }
 else     if (database instanceof MySQLDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ database.getColumnType(aColumn.getType(),false)));
    }
 else     if (database instanceof OracleDatabase || database instanceof MaxDBDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ database.getColumnType(aColumn.getType(),false)+ ""String_Node_Str""));
    }
 else     if (database instanceof DerbyDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ database.getColumnType(aColumn.getType(),false)));
    }
 else     if (database instanceof HsqlDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ database.getColumnType(aColumn.getType(),false)));
    }
 else     if (database instanceof CacheDatabase) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ database.getColumnType(aColumn.getType(),false)));
    }
 else     if (database instanceof DB2Database) {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ database.getColumnType(aColumn.getType(),false)));
      sql.add(new ReorganizeTableStatement(schemaName,getTableName()));
    }
 else {
      sql.add(new RawSqlStatement(""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ aColumn.getName()+ ""String_Node_Str""+ database.getColumnType(aColumn.getType(),false)));
    }
  }
  return sql.toArray(new SqlStatement[sql.size()]);
}"
84119,"private void readIndexes(String schema) throws JDBCException, SQLException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  for (  Table table : tablesMap.values()) {
    ResultSet rs;
    Statement statement=null;
    if (database instanceof OracleDatabase) {
      statement=database.getConnection().createStatement();
      String sql=""String_Node_Str"" + database.convertRequestedSchemaToSchema(schema) + ""String_Node_Str""+ table.getName()+ ""String_Node_Str"";
      rs=statement.executeQuery(sql);
    }
 else {
      rs=databaseMetaData.getIndexInfo(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),table.getName(),false,true);
    }
    Map<String,Index> indexMap=new HashMap<String,Index>();
    while (rs.next()) {
      String indexName=rs.getString(""String_Node_Str"");
      short type=rs.getShort(""String_Node_Str"");
      String columnName=rs.getString(""String_Node_Str"");
      short position=rs.getShort(""String_Node_Str"");
      String filterCondition=rs.getString(""String_Node_Str"");
      if (type == DatabaseMetaData.tableIndexStatistic) {
        continue;
      }
      if (columnName == null) {
        continue;
      }
      Index indexInformation;
      if (indexMap.containsKey(indexName)) {
        indexInformation=indexMap.get(indexName);
      }
 else {
        indexInformation=new Index();
        indexInformation.setTable(table);
        indexInformation.setName(indexName);
        indexInformation.setFilterCondition(filterCondition);
        indexMap.put(indexName,indexInformation);
      }
      indexInformation.getColumns().add(position - 1,columnName);
    }
    for (    String key : indexMap.keySet()) {
      indexes.add(indexMap.get(key));
    }
    rs.close();
    if (statement != null) {
      statement.close();
    }
  }
  Set<Index> indexesToRemove=new HashSet<Index>();
  for (  Index index : indexes) {
    for (    PrimaryKey pk : primaryKeys) {
      if (index.getTable().getName().equalsIgnoreCase(pk.getTable().getName()) && index.getColumnNames().equals(pk.getColumnNames())) {
        indexesToRemove.add(index);
      }
    }
  }
  indexes.removeAll(indexesToRemove);
}","private void readIndexes(String schema) throws JDBCException, SQLException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  for (  Table table : tablesMap.values()) {
    ResultSet rs;
    Statement statement=null;
    if (database instanceof OracleDatabase) {
      statement=database.getConnection().createStatement();
      String sql=""String_Node_Str"" + database.convertRequestedSchemaToSchema(schema) + ""String_Node_Str""+ table.getName()+ ""String_Node_Str"";
      rs=statement.executeQuery(sql);
    }
 else {
      rs=databaseMetaData.getIndexInfo(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),table.getName(),false,true);
    }
    Map<String,Index> indexMap=new HashMap<String,Index>();
    while (rs.next()) {
      String indexName=rs.getString(""String_Node_Str"");
      short type=rs.getShort(""String_Node_Str"");
      String columnName=rs.getString(""String_Node_Str"");
      short position=rs.getShort(""String_Node_Str"");
      String filterCondition=rs.getString(""String_Node_Str"");
      if (type == DatabaseMetaData.tableIndexStatistic) {
        continue;
      }
      if (columnName == null) {
        continue;
      }
      Index indexInformation;
      if (indexMap.containsKey(indexName)) {
        indexInformation=indexMap.get(indexName);
      }
 else {
        indexInformation=new Index();
        indexInformation.setTable(table);
        indexInformation.setName(indexName);
        indexInformation.setFilterCondition(filterCondition);
        indexMap.put(indexName,indexInformation);
      }
      indexInformation.getColumns().add(position - 1,columnName);
    }
    for (    Map.Entry<String,Index> entry : indexMap.entrySet()) {
      indexes.add(entry.getValue());
    }
    rs.close();
    if (statement != null) {
      statement.close();
    }
  }
  Set<Index> indexesToRemove=new HashSet<Index>();
  for (  Index index : indexes) {
    for (    PrimaryKey pk : primaryKeys) {
      if (index.getTable().getName().equalsIgnoreCase(pk.getTable().getName()) && index.getColumnNames().equals(pk.getColumnNames())) {
        indexesToRemove.add(index);
      }
    }
  }
  indexes.removeAll(indexesToRemove);
}"
84120,"public UniqueConstraint(String name,Table table,Column... columns){
  this.table=table;
  this.columns.addAll(Arrays.asList(columns));
}","public UniqueConstraint(String name,Table table,Column... columns){
  this.name=name;
  this.table=table;
  this.columns.addAll(Arrays.asList(columns));
}"
84121,"protected void writeBody(FileWriter fileWriter,Object object,List<Change> ranChanges,List<Change> changesToRun,Migrator migrator) throws IOException {
  if (changesToRun.size() == 0) {
    fileWriter.append(""String_Node_Str"");
  }
  fileWriter.append(""String_Node_Str"");
  ChangeSet lastRunChangeSet=null;
  for (  Change change : changesToRun) {
    ChangeSet thisChangeSet=change.getChangeSet();
    if (thisChangeSet.equals(lastRunChangeSet)) {
      continue;
    }
    lastRunChangeSet=thisChangeSet;
    String anchor=thisChangeSet.toString(false).replaceAll(""String_Node_Str"",""String_Node_Str"");
    fileWriter.append(""String_Node_Str"").append(anchor).append(""String_Node_Str"");
    try {
      thisChangeSet.execute(null);
    }
 catch (    MigrationFailedException e) {
      fileWriter.append(""String_Node_Str"").append(change.getChangeName()).append(""String_Node_Str"").append(e.getMessage()).append(""String_Node_Str"");
    }
  }
  fileWriter.append(""String_Node_Str"");
}","protected void writeBody(FileWriter fileWriter,Object object,List<Change> ranChanges,List<Change> changesToRun,Migrator migrator) throws IOException {
  if (changesToRun.size() == 0) {
    fileWriter.append(""String_Node_Str"");
  }
  fileWriter.append(""String_Node_Str"");
  ChangeSet lastRunChangeSet=null;
  for (  Change change : changesToRun) {
    ChangeSet thisChangeSet=change.getChangeSet();
    if (thisChangeSet.equals(lastRunChangeSet)) {
      continue;
    }
    lastRunChangeSet=thisChangeSet;
    String anchor=thisChangeSet.toString(false).replaceAll(""String_Node_Str"",""String_Node_Str"");
    fileWriter.append(""String_Node_Str"").append(anchor).append(""String_Node_Str"");
    try {
      thisChangeSet.execute(migrator.getDatabase());
    }
 catch (    MigrationFailedException e) {
      fileWriter.append(""String_Node_Str"").append(change.getChangeName()).append(""String_Node_Str"").append(e.getMessage()).append(""String_Node_Str"");
    }
  }
  fileWriter.append(""String_Node_Str"");
}"
84122,"/** 
 * Tags the database changelog with the given string.
 */
public void tag(String tagString) throws JDBCException {
  try {
    int totalRows=this.getJdbcTemplate().queryForInt(new RawSqlStatement(""String_Node_Str"" + getDatabaseChangeLogTableName()));
    if (totalRows == 0) {
      throw new JDBCException(""String_Node_Str"");
    }
    Timestamp lastExecutedDate=(Timestamp)this.getJdbcTemplate().queryForObject(createChangeToTagSQL(),Timestamp.class);
    int rowsUpdated=this.getJdbcTemplate().update(createTagSQL(tagString,lastExecutedDate));
    if (rowsUpdated == 0) {
      throw new JDBCException(""String_Node_Str"");
    }
    this.commit();
  }
 catch (  Exception e) {
    throw new JDBCException(e);
  }
}","/** 
 * Tags the database changelog with the given string.
 */
public void tag(String tagString) throws JDBCException {
  try {
    int totalRows=this.getJdbcTemplate().queryForInt(new RawSqlStatement(""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName())));
    if (totalRows == 0) {
      throw new JDBCException(""String_Node_Str"");
    }
    Timestamp lastExecutedDate=(Timestamp)this.getJdbcTemplate().queryForObject(createChangeToTagSQL(),Timestamp.class);
    int rowsUpdated=this.getJdbcTemplate().update(createTagSQL(tagString,lastExecutedDate));
    if (rowsUpdated == 0) {
      throw new JDBCException(""String_Node_Str"" + lastExecutedDate.toString());
    }
    this.commit();
  }
 catch (  Exception e) {
    throw new JDBCException(e);
  }
}"
84123,"/** 
 * Returns SQL to return the date of the most recient changeset execution.
 */
protected SqlStatement createChangeToTagSQL(){
  return new RawSqlStatement(""String_Node_Str"" + getDatabaseChangeLogTableName());
}","/** 
 * Returns SQL to return the date of the most recient changeset execution.
 */
protected SqlStatement createChangeToTagSQL(){
  return new RawSqlStatement(""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName()));
}"
84124,"/** 
 * Returns the ChangeSets that have been run against the current database.
 */
public List<RanChangeSet> getRanChangeSetList() throws JDBCException {
  try {
    String databaseChangeLogTableName=getDatabaseChangeLogTableName();
    List<RanChangeSet> ranChangeSetList=new ArrayList<RanChangeSet>();
    if (doesChangeLogTableExist()) {
      log.info(""String_Node_Str"" + databaseChangeLogTableName);
      String sql=""String_Node_Str"" + databaseChangeLogTableName + ""String_Node_Str"".toUpperCase();
      Statement statement=getConnection().createStatement();
      ResultSet rs=statement.executeQuery(sql);
      while (rs.next()) {
        String fileName=rs.getString(""String_Node_Str"");
        String author=rs.getString(""String_Node_Str"");
        String id=rs.getString(""String_Node_Str"");
        String md5sum=rs.getString(""String_Node_Str"");
        Date dateExecuted=rs.getTimestamp(""String_Node_Str"");
        String tag=rs.getString(""String_Node_Str"");
        RanChangeSet ranChangeSet=new RanChangeSet(fileName,id,author,md5sum,dateExecuted,tag);
        ranChangeSetList.add(ranChangeSet);
      }
      rs.close();
      statement.close();
    }
    return ranChangeSetList;
  }
 catch (  SQLException e) {
    if (!getJdbcTemplate().executesStatements()) {
      return new ArrayList<RanChangeSet>();
    }
 else {
      throw new JDBCException(e);
    }
  }
}","/** 
 * Returns the ChangeSets that have been run against the current database.
 */
public List<RanChangeSet> getRanChangeSetList() throws JDBCException {
  try {
    String databaseChangeLogTableName=escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName());
    List<RanChangeSet> ranChangeSetList=new ArrayList<RanChangeSet>();
    if (doesChangeLogTableExist()) {
      log.info(""String_Node_Str"" + databaseChangeLogTableName);
      String sql=""String_Node_Str"" + databaseChangeLogTableName + ""String_Node_Str"".toUpperCase();
      Statement statement=getConnection().createStatement();
      ResultSet rs=statement.executeQuery(sql);
      while (rs.next()) {
        String fileName=rs.getString(""String_Node_Str"");
        String author=rs.getString(""String_Node_Str"");
        String id=rs.getString(""String_Node_Str"");
        String md5sum=rs.getString(""String_Node_Str"");
        Date dateExecuted=rs.getTimestamp(""String_Node_Str"");
        String tag=rs.getString(""String_Node_Str"");
        RanChangeSet ranChangeSet=new RanChangeSet(fileName,id,author,md5sum,dateExecuted,tag);
        ranChangeSetList.add(ranChangeSet);
      }
      rs.close();
      statement.close();
    }
    return ranChangeSetList;
  }
 catch (  SQLException e) {
    if (!getJdbcTemplate().executesStatements()) {
      return new ArrayList<RanChangeSet>();
    }
 else {
      throw new JDBCException(e);
    }
  }
}"
84125,"/** 
 * This method will check the database ChangeLogLock table used to keep track of if a machine is updating the database. If the table does not exist it will create one otherwise it will not do anything besides outputting a log message.
 */
public void checkDatabaseChangeLogLockTable() throws JDBCException {
  DatabaseConnection connection=getConnection();
  ResultSet rs=null;
  boolean knowMustInsertIntoLockTable=false;
  try {
    rs=connection.getMetaData().getTables(convertRequestedSchemaToCatalog(getDefaultSchemaName()),convertRequestedSchemaToSchema(getDefaultSchemaName()),getDatabaseChangeLogLockTableName(),new String[]{""String_Node_Str""});
    if (!rs.next()) {
      if (!changeLogLockCreateAttempted) {
        changeLogLockCreateAttempted=true;
        SqlStatement createTableStatement=getCreateChangeLogLockSQL();
        getJdbcTemplate().comment(""String_Node_Str"");
        this.getJdbcTemplate().execute(createTableStatement);
        this.commit();
        log.info(""String_Node_Str"" + getDatabaseChangeLogLockTableName());
        changeLogLockTableExists=true;
        knowMustInsertIntoLockTable=true;
      }
    }
 else {
      changeLogLockTableExists=true;
    }
    rs.close();
    if (changeLogLockTableExists) {
      int rows=-1;
      if (!knowMustInsertIntoLockTable) {
        RawSqlStatement selectStatement=new RawSqlStatement(""String_Node_Str"" + getDatabaseChangeLogLockTableName() + ""String_Node_Str"");
        rows=this.getJdbcTemplate().queryForInt(selectStatement);
      }
      if (knowMustInsertIntoLockTable || rows == 0) {
        this.getJdbcTemplate().update(getChangeLogLockInsertSQL());
        this.commit();
        log.info(""String_Node_Str"" + getDatabaseChangeLogLockTableName());
        rs.close();
      }
    }
 else {
      throw new JDBCException(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}","/** 
 * This method will check the database ChangeLogLock table used to keep track of if a machine is updating the database. If the table does not exist it will create one otherwise it will not do anything besides outputting a log message.
 */
public void checkDatabaseChangeLogLockTable() throws JDBCException {
  DatabaseConnection connection=getConnection();
  ResultSet rs=null;
  boolean knowMustInsertIntoLockTable=false;
  try {
    rs=connection.getMetaData().getTables(convertRequestedSchemaToCatalog(getDefaultSchemaName()),convertRequestedSchemaToSchema(getDefaultSchemaName()),getDatabaseChangeLogLockTableName(),new String[]{""String_Node_Str""});
    if (!rs.next()) {
      if (!changeLogLockCreateAttempted) {
        changeLogLockCreateAttempted=true;
        SqlStatement createTableStatement=getCreateChangeLogLockSQL();
        getJdbcTemplate().comment(""String_Node_Str"");
        this.getJdbcTemplate().execute(createTableStatement);
        this.commit();
        log.info(""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogLockTableName()));
        changeLogLockTableExists=true;
        knowMustInsertIntoLockTable=true;
      }
    }
 else {
      changeLogLockTableExists=true;
    }
    rs.close();
    if (changeLogLockTableExists) {
      int rows=-1;
      if (!knowMustInsertIntoLockTable) {
        RawSqlStatement selectStatement=new RawSqlStatement(""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogLockTableName()) + ""String_Node_Str"");
        rows=this.getJdbcTemplate().queryForInt(selectStatement);
      }
      if (knowMustInsertIntoLockTable || rows == 0) {
        this.getJdbcTemplate().update(getChangeLogLockInsertSQL());
        this.commit();
        log.info(""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogLockTableName()));
        rs.close();
      }
    }
 else {
      throw new JDBCException(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}"
84126,"public boolean doesTagExist(String tag) throws JDBCException {
  int count=this.getJdbcTemplate().queryForInt(new RawSqlStatement(""String_Node_Str"" + getDatabaseChangeLogTableName() + ""String_Node_Str""+ tag+ ""String_Node_Str""));
  return count > 0;
}","public boolean doesTagExist(String tag) throws JDBCException {
  int count=this.getJdbcTemplate().queryForInt(new RawSqlStatement(""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName()) + ""String_Node_Str""+ tag+ ""String_Node_Str""));
  return count > 0;
}"
84127,"/** 
 * Returns the run status for the given ChangeSet
 */
public ChangeSet.RunStatus getRunStatus(ChangeSet changeSet) throws JDBCException, DatabaseHistoryException {
  if (!doesChangeLogTableExist()) {
    return ChangeSet.RunStatus.NOT_RAN;
  }
  RanChangeSet foundRan=getRanChangeSet(changeSet);
  if (foundRan == null) {
    return ChangeSet.RunStatus.NOT_RAN;
  }
 else {
    if (foundRan.getMd5sum() == null) {
      try {
        log.info(""String_Node_Str"" + changeSet.toString());
        DatabaseConnection connection=getConnection();
        PreparedStatement updatePstmt=connection.prepareStatement(""String_Node_Str"" + getDatabaseChangeLogTableName() + ""String_Node_Str"");
        updatePstmt.setString(1,changeSet.getMd5sum());
        updatePstmt.setString(2,changeSet.getId());
        updatePstmt.setString(3,changeSet.getAuthor());
        updatePstmt.setString(4,changeSet.getFilePath());
        updatePstmt.executeUpdate();
        updatePstmt.close();
        this.commit();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
      return ChangeSet.RunStatus.ALREADY_RAN;
    }
 else {
      if (foundRan.getMd5sum().equals(changeSet.getMd5sum())) {
        return ChangeSet.RunStatus.ALREADY_RAN;
      }
 else {
        if (changeSet.shouldRunOnChange()) {
          return ChangeSet.RunStatus.RUN_AGAIN;
        }
 else {
          return ChangeSet.RunStatus.INVALID_MD5SUM;
        }
      }
    }
  }
}","/** 
 * Returns the run status for the given ChangeSet
 */
public ChangeSet.RunStatus getRunStatus(ChangeSet changeSet) throws JDBCException, DatabaseHistoryException {
  if (!doesChangeLogTableExist()) {
    return ChangeSet.RunStatus.NOT_RAN;
  }
  RanChangeSet foundRan=getRanChangeSet(changeSet);
  if (foundRan == null) {
    return ChangeSet.RunStatus.NOT_RAN;
  }
 else {
    if (foundRan.getMd5sum() == null) {
      try {
        log.info(""String_Node_Str"" + changeSet.toString());
        DatabaseConnection connection=getConnection();
        PreparedStatement updatePstmt=connection.prepareStatement(""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName()) + ""String_Node_Str"");
        updatePstmt.setString(1,changeSet.getMd5sum());
        updatePstmt.setString(2,changeSet.getId());
        updatePstmt.setString(3,changeSet.getAuthor());
        updatePstmt.setString(4,changeSet.getFilePath());
        updatePstmt.executeUpdate();
        updatePstmt.close();
        this.commit();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
      return ChangeSet.RunStatus.ALREADY_RAN;
    }
 else {
      if (foundRan.getMd5sum().equals(changeSet.getMd5sum())) {
        return ChangeSet.RunStatus.ALREADY_RAN;
      }
 else {
        if (changeSet.shouldRunOnChange()) {
          return ChangeSet.RunStatus.RUN_AGAIN;
        }
 else {
          return ChangeSet.RunStatus.INVALID_MD5SUM;
        }
      }
    }
  }
}"
84128,"/** 
 * Returns SQL to tag the database.  SQL Contains two ?: <ol> <li>tag string</li> <li>date executed</li> </ol>
 */
protected SqlStatement createTagSQL(String tagName,Date dateExecuted){
  UpdateStatement statement=new UpdateStatement(null,getDatabaseChangeLogTableName());
  statement.addNewColumnValue(""String_Node_Str"",tagName);
  statement.setWhereClause(""String_Node_Str"");
  statement.addWhereParameter(dateExecuted);
  return statement;
}","/** 
 * Returns SQL to tag the database.  SQL Contains two ?: <ol> <li>tag string</li> <li>date executed</li> </ol>
 */
protected SqlStatement createTagSQL(String tagName,Date dateExecuted){
  UpdateStatement statement=new UpdateStatement(getDefaultSchemaName(),getDatabaseChangeLogTableName());
  statement.addNewColumnValue(""String_Node_Str"",tagName);
  statement.setWhereClause(""String_Node_Str"");
  statement.addWhereParameter(dateExecuted);
  return statement;
}"
84129,"/** 
 * This method will check the database ChangeLog table used to keep track of the changes in the file. If the table does not exist it will create one otherwise it will not do anything besides outputting a log message.
 */
public void checkDatabaseChangeLogTable() throws JDBCException {
  DatabaseConnection connection=getConnection();
  ResultSet checkTableRS=null;
  ResultSet checkColumnsRS=null;
  List<SqlStatement> statementsToExecute=new ArrayList<SqlStatement>();
  try {
    checkTableRS=connection.getMetaData().getTables(convertRequestedSchemaToCatalog(getDefaultSchemaName()),convertRequestedSchemaToSchema(getDefaultSchemaName()),getDatabaseChangeLogTableName(),new String[]{""String_Node_Str""});
    if (checkTableRS.next()) {
      changeLogTableExists=true;
      checkColumnsRS=connection.getMetaData().getColumns(convertRequestedSchemaToCatalog(getDefaultSchemaName()),convertRequestedSchemaToSchema(getDefaultSchemaName()),getDatabaseChangeLogTableName(),null);
      boolean hasDescription=false;
      boolean hasComments=false;
      boolean hasTag=false;
      boolean hasLiquibase=false;
      while (checkColumnsRS.next()) {
        String columnName=checkColumnsRS.getString(""String_Node_Str"");
        if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasDescription=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasComments=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasTag=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasLiquibase=true;
        }
      }
      if (!hasDescription) {
        statementsToExecute.add(new AddColumnStatement(getDefaultSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasTag) {
        statementsToExecute.add(new AddColumnStatement(getDefaultSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasComments) {
        statementsToExecute.add(new AddColumnStatement(getDefaultSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasLiquibase) {
        statementsToExecute.add(new AddColumnStatement(getDefaultSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
    }
 else     if (!changeLogCreateAttempted) {
      changeLogCreateAttempted=true;
      getJdbcTemplate().comment(""String_Node_Str"");
      SqlStatement createTableStatement=getCreateChangeLogSQL();
      if (!canCreateChangeLogTable()) {
        throw new JDBCException(""String_Node_Str"" + getDatabaseChangeLogTableName() + ""String_Node_Str""+ ""String_Node_Str""+ createTableStatement);
      }
      statementsToExecute.add(createTableStatement);
      log.info(""String_Node_Str"" + getDatabaseChangeLogTableName());
      changeLogTableExists=true;
    }
    for (    SqlStatement sql : statementsToExecute) {
      this.getJdbcTemplate().execute(sql);
      this.commit();
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (checkTableRS != null) {
      try {
        checkTableRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (checkColumnsRS != null) {
      try {
        checkColumnsRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}","/** 
 * This method will check the database ChangeLog table used to keep track of the changes in the file. If the table does not exist it will create one otherwise it will not do anything besides outputting a log message.
 */
public void checkDatabaseChangeLogTable() throws JDBCException {
  DatabaseConnection connection=getConnection();
  ResultSet checkTableRS=null;
  ResultSet checkColumnsRS=null;
  List<SqlStatement> statementsToExecute=new ArrayList<SqlStatement>();
  try {
    checkTableRS=connection.getMetaData().getTables(convertRequestedSchemaToCatalog(getDefaultSchemaName()),convertRequestedSchemaToSchema(getDefaultSchemaName()),getDatabaseChangeLogTableName(),new String[]{""String_Node_Str""});
    if (checkTableRS.next()) {
      changeLogTableExists=true;
      checkColumnsRS=connection.getMetaData().getColumns(convertRequestedSchemaToCatalog(getDefaultSchemaName()),convertRequestedSchemaToSchema(getDefaultSchemaName()),getDatabaseChangeLogTableName(),null);
      boolean hasDescription=false;
      boolean hasComments=false;
      boolean hasTag=false;
      boolean hasLiquibase=false;
      while (checkColumnsRS.next()) {
        String columnName=checkColumnsRS.getString(""String_Node_Str"");
        if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasDescription=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasComments=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasTag=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasLiquibase=true;
        }
      }
      if (!hasDescription) {
        statementsToExecute.add(new AddColumnStatement(getDefaultSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasTag) {
        statementsToExecute.add(new AddColumnStatement(getDefaultSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasComments) {
        statementsToExecute.add(new AddColumnStatement(getDefaultSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
      if (!hasLiquibase) {
        statementsToExecute.add(new AddColumnStatement(getDefaultSchemaName(),getDatabaseChangeLogTableName(),""String_Node_Str"",""String_Node_Str"",null));
      }
    }
 else     if (!changeLogCreateAttempted) {
      changeLogCreateAttempted=true;
      getJdbcTemplate().comment(""String_Node_Str"");
      SqlStatement createTableStatement=getCreateChangeLogSQL();
      if (!canCreateChangeLogTable()) {
        throw new JDBCException(""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName()) + ""String_Node_Str""+ ""String_Node_Str""+ createTableStatement);
      }
      statementsToExecute.add(createTableStatement);
      log.info(""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName()));
      changeLogTableExists=true;
    }
    for (    SqlStatement sql : statementsToExecute) {
      this.getJdbcTemplate().execute(sql);
      this.commit();
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (checkTableRS != null) {
      try {
        checkTableRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (checkColumnsRS != null) {
      try {
        checkColumnsRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}"
84130,"protected SqlStatement getCreateChangeLogLockSQL(){
  return new RawSqlStatement((""String_Node_Str"" + getDatabaseChangeLogLockTableName() + ""String_Node_Str""+ getBooleanType()+ ""String_Node_Str""+ getDateTimeType()+ ""String_Node_Str""));
}","protected SqlStatement getCreateChangeLogLockSQL(){
  return new RawSqlStatement((""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogLockTableName()) + ""String_Node_Str""+ getBooleanType()+ ""String_Node_Str""+ getDateTimeType()+ ""String_Node_Str""));
}"
84131,"protected SqlStatement getCreateChangeLogSQL(){
  return new RawSqlStatement((""String_Node_Str"" + getDatabaseChangeLogTableName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ getDateTimeType()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
}","protected SqlStatement getCreateChangeLogSQL(){
  return new RawSqlStatement((""String_Node_Str"" + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ getDateTimeType()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
}"
84132,"public String getSqlStatement(Database database) throws StatementNotSupportedOnDatabaseException {
  if (!supportsDatabase(database)) {
    throw new StatementNotSupportedOnDatabaseException(this,database);
  }
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  buffer.append(getSequenceName());
  if (getIncrementBy() != null) {
    if (database instanceof FirebirdDatabase || database instanceof HsqlDatabase) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
 else {
      buffer.append(""String_Node_Str"").append(getIncrementBy());
    }
  }
  if (getMinValue() != null) {
    if (database instanceof FirebirdDatabase || database instanceof HsqlDatabase) {
      buffer.append(""String_Node_Str"").append(getMinValue());
    }
 else {
      buffer.append(""String_Node_Str"").append(getMinValue());
    }
  }
  if (getMaxValue() != null) {
    if (database instanceof FirebirdDatabase || database instanceof HsqlDatabase) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
 else {
      buffer.append(""String_Node_Str"").append(getMaxValue());
    }
  }
  if (getOrdered() != null) {
    if (database instanceof OracleDatabase || database instanceof DB2Database || database instanceof MaxDBDatabase) {
      if (getOrdered()) {
        buffer.append(""String_Node_Str"");
      }
    }
 else {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
  }
  return buffer.toString();
}","public String getSqlStatement(Database database) throws StatementNotSupportedOnDatabaseException {
  if (!supportsDatabase(database)) {
    throw new StatementNotSupportedOnDatabaseException(this,database);
  }
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  buffer.append(database.escapeSequenceName(getSchemaName(),getSequenceName()));
  if (getIncrementBy() != null) {
    if (database instanceof FirebirdDatabase || database instanceof HsqlDatabase) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
 else {
      buffer.append(""String_Node_Str"").append(getIncrementBy());
    }
  }
  if (getMinValue() != null) {
    if (database instanceof FirebirdDatabase || database instanceof HsqlDatabase) {
      buffer.append(""String_Node_Str"").append(getMinValue());
    }
 else {
      buffer.append(""String_Node_Str"").append(getMinValue());
    }
  }
  if (getMaxValue() != null) {
    if (database instanceof FirebirdDatabase || database instanceof HsqlDatabase) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
 else {
      buffer.append(""String_Node_Str"").append(getMaxValue());
    }
  }
  if (getOrdered() != null) {
    if (database instanceof OracleDatabase || database instanceof DB2Database || database instanceof MaxDBDatabase) {
      if (getOrdered()) {
        buffer.append(""String_Node_Str"");
      }
    }
 else {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
  }
  return buffer.toString();
}"
84133,"public String getSqlStatement(Database database) throws StatementNotSupportedOnDatabaseException {
  if (getTableSchemaName() != null && !database.supportsSchemas()) {
    throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
  }
  if (database instanceof MySQLDatabase) {
    if (getTableName() == null) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
    return ""String_Node_Str"" + getIndexName() + ""String_Node_Str""+ database.escapeTableName(getTableSchemaName(),getTableName());
  }
 else   if (database instanceof MSSQLDatabase) {
    if (getTableName() == null) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
    return ""String_Node_Str"" + database.escapeTableName(getTableSchemaName(),getTableName()) + ""String_Node_Str""+ getIndexName();
  }
 else   if (database instanceof OracleDatabase) {
    return ""String_Node_Str"" + getIndexName();
  }
  return ""String_Node_Str"" + getIndexName();
}","public String getSqlStatement(Database database) throws StatementNotSupportedOnDatabaseException {
  String schemaName=getTableSchemaName();
  if (schemaName != null && !database.supportsSchemas()) {
    throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
  }
  if (database instanceof MySQLDatabase) {
    if (getTableName() == null) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
    return ""String_Node_Str"" + getIndexName() + ""String_Node_Str""+ database.escapeTableName(schemaName,getTableName());
  }
 else   if (database instanceof MSSQLDatabase) {
    if (getTableName() == null) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
    return ""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ getIndexName();
  }
  return ""String_Node_Str"" + database.escapeTableName(schemaName,getIndexName());
}"
84134,"@Test public void foreignKey_defaultDeferrable() throws Exception {
  CreateTableChange change=new CreateTableChange();
  ColumnConfig columnConfig=new ColumnConfig();
  columnConfig.setName(""String_Node_Str"");
  ConstraintsConfig constraints=new ConstraintsConfig();
  constraints.setReferences(""String_Node_Str"");
  columnConfig.setConstraints(constraints);
  change.addColumn(columnConfig);
  CreateTableStatement statement=(CreateTableStatement)change.generateStatements(new MockDatabase())[0];
  ForeignKeyConstraint keyConstraint=statement.getForeignKeyConstraints().iterator().next();
  assertFalse(keyConstraint.isDeferrable());
  assertFalse(keyConstraint.isInitiallyDeferred());
}","@Test public void foreignKey_defaultDeferrable() throws Exception {
  CreateTableChange change=new CreateTableChange();
  ColumnConfig columnConfig=new ColumnConfig();
  columnConfig.setName(""String_Node_Str"");
  ConstraintsConfig constraints=new ConstraintsConfig();
  constraints.setReferences(""String_Node_Str"");
  constraints.setForeignKeyName(""String_Node_Str"");
  columnConfig.setConstraints(constraints);
  change.addColumn(columnConfig);
  CreateTableStatement statement=(CreateTableStatement)change.generateStatements(new MockDatabase())[0];
  ForeignKeyConstraint keyConstraint=statement.getForeignKeyConstraints().iterator().next();
  assertFalse(keyConstraint.isDeferrable());
  assertFalse(keyConstraint.isInitiallyDeferred());
}"
84135,"@Test public void foreignKey_deferrable() throws Exception {
  CreateTableChange change=new CreateTableChange();
  ColumnConfig columnConfig=new ColumnConfig();
  columnConfig.setName(""String_Node_Str"");
  ConstraintsConfig constraints=new ConstraintsConfig();
  constraints.setReferences(""String_Node_Str"");
  constraints.setDeferrable(true);
  constraints.setInitiallyDeferred(true);
  columnConfig.setConstraints(constraints);
  change.addColumn(columnConfig);
  CreateTableStatement statement=(CreateTableStatement)change.generateStatements(new MockDatabase())[0];
  ForeignKeyConstraint keyConstraint=statement.getForeignKeyConstraints().iterator().next();
  assertTrue(keyConstraint.isDeferrable());
  assertTrue(keyConstraint.isInitiallyDeferred());
}","@Test public void foreignKey_deferrable() throws Exception {
  CreateTableChange change=new CreateTableChange();
  ColumnConfig columnConfig=new ColumnConfig();
  columnConfig.setName(""String_Node_Str"");
  ConstraintsConfig constraints=new ConstraintsConfig();
  constraints.setForeignKeyName(""String_Node_Str"");
  constraints.setReferences(""String_Node_Str"");
  constraints.setDeferrable(true);
  constraints.setInitiallyDeferred(true);
  columnConfig.setConstraints(constraints);
  change.addColumn(columnConfig);
  CreateTableStatement statement=(CreateTableStatement)change.generateStatements(new MockDatabase())[0];
  ForeignKeyConstraint keyConstraint=statement.getForeignKeyConstraints().iterator().next();
  assertTrue(keyConstraint.isDeferrable());
  assertTrue(keyConstraint.isInitiallyDeferred());
}"
84136,"@Test public void foreignKey_notDeferrable() throws Exception {
  CreateTableChange change=new CreateTableChange();
  ColumnConfig columnConfig=new ColumnConfig();
  columnConfig.setName(""String_Node_Str"");
  ConstraintsConfig constraints=new ConstraintsConfig();
  constraints.setReferences(""String_Node_Str"");
  constraints.setDeferrable(false);
  constraints.setInitiallyDeferred(false);
  columnConfig.setConstraints(constraints);
  change.addColumn(columnConfig);
  CreateTableStatement statement=(CreateTableStatement)change.generateStatements(new MockDatabase())[0];
  ForeignKeyConstraint keyConstraint=statement.getForeignKeyConstraints().iterator().next();
  assertFalse(keyConstraint.isDeferrable());
  assertFalse(keyConstraint.isInitiallyDeferred());
}","@Test public void foreignKey_notDeferrable() throws Exception {
  CreateTableChange change=new CreateTableChange();
  ColumnConfig columnConfig=new ColumnConfig();
  columnConfig.setName(""String_Node_Str"");
  ConstraintsConfig constraints=new ConstraintsConfig();
  constraints.setForeignKeyName(""String_Node_Str"");
  constraints.setReferences(""String_Node_Str"");
  constraints.setDeferrable(false);
  constraints.setInitiallyDeferred(false);
  columnConfig.setConstraints(constraints);
  change.addColumn(columnConfig);
  CreateTableStatement statement=(CreateTableStatement)change.generateStatements(new MockDatabase())[0];
  ForeignKeyConstraint keyConstraint=statement.getForeignKeyConstraints().iterator().next();
  assertFalse(keyConstraint.isDeferrable());
  assertFalse(keyConstraint.isInitiallyDeferred());
}"
84137,"@Test public void listLocks_tableExistsWithLock() throws Exception {
  Database database=createMock(Database.class);
  JdbcTemplate template=createMock(JdbcTemplate.class);
  expect(database.getJdbcTemplate()).andReturn(template).anyTimes();
  expect(database.doesChangeLogLockTableExist()).andReturn(true);
  expect(database.getDatabaseChangeLogLockTableName()).andReturn(""String_Node_Str"");
  expectLastCall();
  List<Map> locksList=new ArrayList<Map>();
  Map lock=new HashMap();
  lock.put(""String_Node_Str"",1);
  lock.put(""String_Node_Str"",new Date());
  lock.put(""String_Node_Str"",Boolean.TRUE);
  lock.put(""String_Node_Str"",""String_Node_Str"");
  locksList.add(lock);
  expect(template.queryForList(isA(SqlStatement.class))).andReturn(locksList);
  replay(database);
  replay(template);
  LockHandler handler=LockHandler.getInstance(database);
  DatabaseChangeLogLock[] locks=handler.listLocks();
  assertEquals(1,locks.length);
  verify(database);
  verify(template);
}","@Test public void listLocks_tableExistsWithLock() throws Exception {
  Database database=createMock(Database.class);
  JdbcTemplate template=createMock(JdbcTemplate.class);
  expect(database.getJdbcTemplate()).andReturn(template).anyTimes();
  expect(database.doesChangeLogLockTableExist()).andReturn(true);
  expect(database.getDatabaseChangeLogLockTableName()).andReturn(""String_Node_Str"");
  expect(database.getDefaultSchemaName()).andReturn(""String_Node_Str"");
  expect(database.escapeTableName(""String_Node_Str"",""String_Node_Str"")).andReturn(""String_Node_Str"");
  expectLastCall();
  List<Map> locksList=new ArrayList<Map>();
  Map lock=new HashMap();
  lock.put(""String_Node_Str"",1);
  lock.put(""String_Node_Str"",new Date());
  lock.put(""String_Node_Str"",Boolean.TRUE);
  lock.put(""String_Node_Str"",""String_Node_Str"");
  locksList.add(lock);
  expect(template.queryForList(isA(SqlStatement.class))).andReturn(locksList);
  replay(database);
  replay(template);
  LockHandler handler=LockHandler.getInstance(database);
  DatabaseChangeLogLock[] locks=handler.listLocks();
  assertEquals(1,locks.length);
  verify(database);
  verify(template);
}"
84138,"@Test public void listLocks_tableExistsNoLocks() throws Exception {
  Database database=createMock(Database.class);
  JdbcTemplate template=createMock(JdbcTemplate.class);
  expect(database.getJdbcTemplate()).andReturn(template).anyTimes();
  expect(database.doesChangeLogLockTableExist()).andReturn(true);
  expect(database.getDatabaseChangeLogLockTableName()).andReturn(""String_Node_Str"");
  expectLastCall();
  List<Map> locksList=new ArrayList<Map>();
  expect(template.queryForList(isA(SqlStatement.class))).andReturn(locksList);
  replay(database);
  replay(template);
  LockHandler handler=LockHandler.getInstance(database);
  DatabaseChangeLogLock[] locks=handler.listLocks();
  assertEquals(0,locks.length);
  verify(database);
  verify(template);
}","@Test public void listLocks_tableExistsNoLocks() throws Exception {
  Database database=createMock(Database.class);
  JdbcTemplate template=createMock(JdbcTemplate.class);
  expect(database.getJdbcTemplate()).andReturn(template).anyTimes();
  expect(database.doesChangeLogLockTableExist()).andReturn(true);
  expect(database.getDefaultSchemaName()).andReturn(""String_Node_Str"");
  expect(database.getDatabaseChangeLogLockTableName()).andReturn(""String_Node_Str"");
  expectLastCall();
  expect(database.escapeTableName(""String_Node_Str"",""String_Node_Str"")).andReturn(""String_Node_Str"");
  List<Map> locksList=new ArrayList<Map>();
  expect(template.queryForList(isA(SqlStatement.class))).andReturn(locksList);
  replay(database);
  replay(template);
  LockHandler handler=LockHandler.getInstance(database);
  DatabaseChangeLogLock[] locks=handler.listLocks();
  assertEquals(0,locks.length);
  verify(database);
  verify(template);
}"
84139,"@Test public void listLocks_tableExistsUnlocked() throws Exception {
  Database database=createMock(Database.class);
  JdbcTemplate template=createMock(JdbcTemplate.class);
  expect(database.getJdbcTemplate()).andReturn(template).anyTimes();
  expect(database.doesChangeLogLockTableExist()).andReturn(true);
  expect(database.getDatabaseChangeLogLockTableName()).andReturn(""String_Node_Str"");
  expectLastCall();
  List<Map> locksList=new ArrayList<Map>();
  Map lock=new HashMap();
  lock.put(""String_Node_Str"",1);
  lock.put(""String_Node_Str"",new Date());
  lock.put(""String_Node_Str"",Boolean.FALSE);
  lock.put(""String_Node_Str"",""String_Node_Str"");
  locksList.add(lock);
  expect(template.queryForList(isA(SqlStatement.class))).andReturn(locksList);
  replay(database);
  replay(template);
  LockHandler handler=LockHandler.getInstance(database);
  DatabaseChangeLogLock[] locks=handler.listLocks();
  assertEquals(0,locks.length);
  verify(database);
  verify(template);
}","@Test public void listLocks_tableExistsUnlocked() throws Exception {
  Database database=createMock(Database.class);
  JdbcTemplate template=createMock(JdbcTemplate.class);
  expect(database.getJdbcTemplate()).andReturn(template).anyTimes();
  expect(database.doesChangeLogLockTableExist()).andReturn(true);
  expect(database.getDatabaseChangeLogLockTableName()).andReturn(""String_Node_Str"");
  expectLastCall();
  expect(database.getDefaultSchemaName()).andReturn(""String_Node_Str"");
  expect(database.escapeTableName(""String_Node_Str"",""String_Node_Str"")).andReturn(""String_Node_Str"");
  List<Map> locksList=new ArrayList<Map>();
  Map lock=new HashMap();
  lock.put(""String_Node_Str"",1);
  lock.put(""String_Node_Str"",new Date());
  lock.put(""String_Node_Str"",Boolean.FALSE);
  lock.put(""String_Node_Str"",""String_Node_Str"");
  locksList.add(lock);
  expect(template.queryForList(isA(SqlStatement.class))).andReturn(locksList);
  replay(database);
  replay(template);
  LockHandler handler=LockHandler.getInstance(database);
  DatabaseChangeLogLock[] locks=handler.listLocks();
  assertEquals(0,locks.length);
  verify(database);
  verify(template);
}"
84140,"public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  String schemaName=getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName();
  CreateTableStatement statement=new CreateTableStatement(schemaName,getTableName());
  for (  ColumnConfig column : getColumns()) {
    ConstraintsConfig constraints=column.getConstraints();
    boolean isAutoIncrement=column.isAutoIncrement() != null && column.isAutoIncrement();
    if (constraints != null && constraints.isPrimaryKey() != null && constraints.isPrimaryKey()) {
      statement.addPrimaryKeyColumn(column.getName(),database.getColumnType(column.getType(),isAutoIncrement));
    }
 else {
      String defaultValue=null;
      if (column.hasDefaultValue()) {
        defaultValue=StringUtils.trimToNull(column.getDefaultColumnValue(database));
      }
      statement.addColumn(column.getName(),database.getColumnType(column.getType(),column.isAutoIncrement()),defaultValue);
    }
    if (constraints != null) {
      if (constraints.isNullable() != null && !constraints.isNullable()) {
        statement.addColumnConstraint(new NotNullConstraint(column.getName()));
      }
      if (constraints.getReferences() != null) {
        if (StringUtils.trimToNull(constraints.getForeignKeyName()) == null) {
          throw new UnsupportedChangeException(""String_Node_Str"");
        }
        ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(constraints.getForeignKeyName(),database.escapeTableName(schemaName,constraints.getReferences()));
        fkConstraint.setColumn(column.getName());
        fkConstraint.setDeleteCascade(constraints.isDeleteCascade() != null && constraints.isDeleteCascade());
        fkConstraint.setInitiallyDeferred(constraints.isInitiallyDeferred() != null && constraints.isInitiallyDeferred());
        fkConstraint.setDeferrable(constraints.isDeferrable() != null && constraints.isDeferrable());
        statement.addColumnConstraint(fkConstraint);
      }
      if (constraints.isUnique() != null && constraints.isUnique()) {
        statement.addColumnConstraint(new UniqueConstraint(constraints.getUniqueConstraintName()).addColumns(column.getName()));
      }
    }
    if (isAutoIncrement) {
      statement.addColumnConstraint(new AutoIncrementConstraint(column.getName()));
    }
  }
  statement.setTablespace(StringUtils.trimToNull(getTablespace()));
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  statements.add(statement);
  return statements.toArray(new SqlStatement[statements.size()]);
}","public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  String schemaName=getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName();
  CreateTableStatement statement=new CreateTableStatement(schemaName,getTableName());
  for (  ColumnConfig column : getColumns()) {
    ConstraintsConfig constraints=column.getConstraints();
    boolean isAutoIncrement=column.isAutoIncrement() != null && column.isAutoIncrement();
    if (constraints != null && constraints.isPrimaryKey() != null && constraints.isPrimaryKey()) {
      statement.addPrimaryKeyColumn(column.getName(),database.getColumnType(column.getType(),isAutoIncrement));
    }
 else {
      String defaultValue=null;
      if (column.hasDefaultValue()) {
        defaultValue=StringUtils.trimToNull(column.getDefaultColumnValue(database));
      }
      statement.addColumn(column.getName(),database.getColumnType(column.getType(),column.isAutoIncrement()),defaultValue);
    }
    if (constraints != null) {
      if (constraints.isNullable() != null && !constraints.isNullable()) {
        statement.addColumnConstraint(new NotNullConstraint(column.getName()));
      }
      if (constraints.getReferences() != null) {
        if (StringUtils.trimToNull(constraints.getForeignKeyName()) == null) {
          throw new UnsupportedChangeException(""String_Node_Str"");
        }
        ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(constraints.getForeignKeyName(),constraints.getReferences());
        fkConstraint.setColumn(column.getName());
        fkConstraint.setDeleteCascade(constraints.isDeleteCascade() != null && constraints.isDeleteCascade());
        fkConstraint.setInitiallyDeferred(constraints.isInitiallyDeferred() != null && constraints.isInitiallyDeferred());
        fkConstraint.setDeferrable(constraints.isDeferrable() != null && constraints.isDeferrable());
        statement.addColumnConstraint(fkConstraint);
      }
      if (constraints.isUnique() != null && constraints.isUnique()) {
        statement.addColumnConstraint(new UniqueConstraint(constraints.getUniqueConstraintName()).addColumns(column.getName()));
      }
    }
    if (isAutoIncrement) {
      statement.addColumnConstraint(new AutoIncrementConstraint(column.getName()));
    }
  }
  statement.setTablespace(StringUtils.trimToNull(getTablespace()));
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  statements.add(statement);
  return statements.toArray(new SqlStatement[statements.size()]);
}"
84141,"public String getSqlStatement(Database database) throws StatementNotSupportedOnDatabaseException {
  String schemaName=getTableSchemaName();
  if (schemaName != null && !database.supportsSchemas()) {
    throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
  }
  if (database instanceof MySQLDatabase) {
    if (getTableName() == null) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
    return ""String_Node_Str"" + getIndexName() + ""String_Node_Str""+ database.escapeTableName(schemaName,getTableName());
  }
 else   if (database instanceof MSSQLDatabase) {
    if (getTableName() == null) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
    return ""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ getIndexName();
  }
  return ""String_Node_Str"" + database.escapeTableName(schemaName,getIndexName());
}","public String getSqlStatement(Database database) throws StatementNotSupportedOnDatabaseException {
  String schemaName=getTableSchemaName();
  if (schemaName != null && !database.supportsSchemas()) {
    throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
  }
  if (database instanceof MySQLDatabase) {
    if (getTableName() == null) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
    return ""String_Node_Str"" + getIndexName() + ""String_Node_Str""+ database.escapeTableName(schemaName,getTableName());
  }
 else   if (database instanceof MSSQLDatabase) {
    if (getTableName() == null) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
    return ""String_Node_Str"" + database.escapeTableName(schemaName,getTableName()) + ""String_Node_Str""+ getIndexName();
  }
  return ""String_Node_Str"" + getIndexName();
}"
84142,"protected Migrator createMigrator(FileOpener fo){
  return new Migrator(""String_Node_Str"",fo);
}","protected Migrator createMigrator(FileOpener fo) throws MojoExecutionException {
  return new Migrator(""String_Node_Str"",fo);
}"
84143,"public void execute() throws MojoExecutionException, MojoFailureException {
  getLog().info(MavenUtils.LOG_SEPARATOR);
  String shouldRunProperty=System.getProperty(Migrator.SHOULD_RUN_SYSTEM_PROPERTY);
  if (shouldRunProperty != null && !Boolean.valueOf(shouldRunProperty).booleanValue()) {
    getLog().warn(""String_Node_Str"" + Migrator.SHOULD_RUN_SYSTEM_PROPERTY + ""String_Node_Str"");
    return;
  }
  ClassLoader artifactClassLoader=getMavenArtifactClassLoader();
  configureFieldsAndValues(getFileOpener(artifactClassLoader));
  displayMojoSettings();
  checkRequiredParametersAreSpecified();
  Connection connection=null;
  try {
    connection=MavenUtils.getDatabaseConnection(artifactClassLoader,driver,url,username,password);
    Migrator migrator=createMigrator(getFileOpener(artifactClassLoader));
    configureMigrator(migrator,connection);
    getLog().info(""String_Node_Str"" + url);
    if (promptOnNonLocalDatabase && !migrator.isSafeToRunMigration()) {
      if (migrator.swingPromptForNonLocalDatabase()) {
        throw new LiquibaseException(""String_Node_Str"");
      }
    }
    performLiquibaseTask(migrator);
  }
 catch (  LiquibaseException e) {
    releaseConnection(connection);
    throw new MojoFailureException(e.getMessage());
  }
  releaseConnection(connection);
  getLog().info(MavenUtils.LOG_SEPARATOR);
  getLog().info(""String_Node_Str"");
}","public void execute() throws MojoExecutionException, MojoFailureException {
  getLog().info(MavenUtils.LOG_SEPARATOR);
  String shouldRunProperty=System.getProperty(Migrator.SHOULD_RUN_SYSTEM_PROPERTY);
  if (shouldRunProperty != null && !Boolean.valueOf(shouldRunProperty).booleanValue()) {
    getLog().warn(""String_Node_Str"" + Migrator.SHOULD_RUN_SYSTEM_PROPERTY + ""String_Node_Str"");
    return;
  }
  ClassLoader artifactClassLoader=getMavenArtifactClassLoader();
  configureFieldsAndValues(getFileOpener(artifactClassLoader));
  displayMojoSettings();
  checkRequiredParametersAreSpecified();
  Connection connection=null;
  try {
    connection=MavenUtils.getDatabaseConnection(artifactClassLoader,driver,url,username,password);
    Migrator migrator=createMigrator(getFileOpener(artifactClassLoader));
    configureMigrator(migrator,connection);
    getLog().info(""String_Node_Str"" + url);
    if (isPromptOnNonLocalDatabase() && !migrator.isSafeToRunMigration()) {
      if (migrator.swingPromptForNonLocalDatabase()) {
        throw new LiquibaseException(""String_Node_Str"");
      }
    }
    performLiquibaseTask(migrator);
  }
 catch (  LiquibaseException e) {
    releaseConnection(connection);
    throw new MojoFailureException(e.getMessage());
  }
  releaseConnection(connection);
  getLog().info(MavenUtils.LOG_SEPARATOR);
  getLog().info(""String_Node_Str"");
}"
84144,"private void setFieldValue(Field field,String value) throws IllegalAccessException {
  if (field.getType().equals(Boolean.class)) {
    field.set(this,Boolean.valueOf(value));
  }
 else {
    field.set(this,value);
  }
}","private void setFieldValue(Field field,String value) throws IllegalAccessException {
  if (field.getType().equals(Boolean.class) || field.getType().equals(boolean.class)) {
    field.set(this,Boolean.valueOf(value));
  }
 else {
    field.set(this,value);
  }
}"
84145,"@Override protected Migrator createMigrator(FileOpener fo){
  return new Migrator(changeLogFile.trim(),fo);
}","@Override protected Migrator createMigrator(FileOpener fo) throws MojoExecutionException {
  Migrator m=new Migrator(changeLogFile.trim(),fo);
  performMigratorConfiguration(m);
  return m;
}"
84146,"@Override protected void performMigratorConfiguration(Migrator migrator) throws MojoExecutionException {
  Writer w=null;
  try {
    if (!migrationSqlOutputFile.exists()) {
      migrationSqlOutputFile.getParentFile().mkdirs();
    }
    w=new FileWriter(migrationSqlOutputFile);
  }
 catch (  IOException e) {
    getLog().error(e);
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  getLog().info(""String_Node_Str"" + migrationSqlOutputFile.getAbsolutePath());
  if (changeLogSqlOnly) {
    getLog().info(""String_Node_Str"");
    migrator.setMode(Migrator.Mode.OUTPUT_CHANGELOG_ONLY_SQL_MODE);
  }
 else {
    migrator.setMode(Migrator.Mode.OUTPUT_SQL_MODE);
  }
  migrator.setOutputSQLWriter(w);
}","@Override protected void performMigratorConfiguration(Migrator migrator) throws MojoExecutionException {
  Writer w=null;
  try {
    if (!migrationSqlOutputFile.exists()) {
      migrationSqlOutputFile.getParentFile().mkdirs();
    }
    w=new FileWriter(migrationSqlOutputFile);
  }
 catch (  IOException e) {
    getLog().error(e);
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  getLog().info(""String_Node_Str"" + migrationSqlOutputFile.getAbsolutePath());
  if (changeLogSqlOnly) {
    getLog().info(""String_Node_Str"");
    migrator.setMode(Migrator.Mode.OUTPUT_CHANGELOG_ONLY_SQL_MODE);
  }
 else {
    getLog().info(""String_Node_Str"");
    migrator.setMode(Migrator.Mode.OUTPUT_SQL_MODE);
  }
  migrator.setOutputSQLWriter(w);
}"
84147,"@Test public void resolveEntity() throws Exception {
  MigratorSchemaResolver migratorSchemaResolver=new MigratorSchemaResolver();
  assertNotNull(migratorSchemaResolver.resolveEntity(null,""String_Node_Str""));
  assertNull(migratorSchemaResolver.resolveEntity(null,""String_Node_Str""));
}","@Test public void resolveEntity() throws Exception {
  LiquibaseSchemaResolver liquibaseSchemaResolver=new LiquibaseSchemaResolver();
  assertNotNull(liquibaseSchemaResolver.resolveEntity(null,""String_Node_Str""));
  assertNull(liquibaseSchemaResolver.resolveEntity(null,""String_Node_Str""));
}"
84148,"/** 
 * Prints changeLog that would bring the base database to be the same as the target database
 */
public void printChangeLog(PrintStream out,Database targetDatabase,XmlWriter xmlWriter) throws ParserConfigurationException, IOException {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder documentBuilder=factory.newDocumentBuilder();
  documentBuilder.setEntityResolver(new MigratorSchemaResolver());
  Document doc=documentBuilder.newDocument();
  Element changeLogElement=doc.createElement(""String_Node_Str"");
  changeLogElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  changeLogElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  changeLogElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  doc.appendChild(changeLogElement);
  List<Change> changes=new ArrayList<Change>();
  addMissingTableChanges(changes,targetDatabase);
  addUnexpectedTableChanges(changes);
  addMissingColumnChanges(changes,targetDatabase);
  addUnexpectedColumnChanges(changes);
  addChangedColumnChanges(changes);
  addMissingPrimaryKeyChanges(changes);
  addUnexpectedPrimaryKeyChanges(changes);
  addMissingIndexChanges(changes);
  addUnexpectedIndexChanges(changes);
  addMissingForeignKeyChanges(changes);
  addUnexpectedForeignKeyChanges(changes);
  addMissingSequenceChanges(changes);
  addUnexpectedSequenceChanges(changes);
  addMissingViewChanges(changes);
  addUnexpectedViewChanges(changes);
  for (  Change change : changes) {
    Element changeSet=doc.createElement(""String_Node_Str"");
    changeSet.setAttribute(""String_Node_Str"",""String_Node_Str"");
    changeSet.setAttribute(""String_Node_Str"",generateId());
    changeSet.appendChild(change.createNode(doc));
    doc.getDocumentElement().appendChild(changeSet);
  }
  xmlWriter.write(doc,out);
  out.flush();
}","/** 
 * Prints changeLog that would bring the base database to be the same as the target database
 */
public void printChangeLog(PrintStream out,Database targetDatabase,XmlWriter xmlWriter) throws ParserConfigurationException, IOException {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder documentBuilder=factory.newDocumentBuilder();
  documentBuilder.setEntityResolver(new LiquibaseSchemaResolver());
  Document doc=documentBuilder.newDocument();
  Element changeLogElement=doc.createElement(""String_Node_Str"");
  changeLogElement.setAttribute(""String_Node_Str"",""String_Node_Str"" + XMLChangeLogParser.getSchemaVersion());
  changeLogElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  changeLogElement.setAttribute(""String_Node_Str"",""String_Node_Str"" + XMLChangeLogParser.getSchemaVersion() + ""String_Node_Str""+ XMLChangeLogParser.getSchemaVersion()+ ""String_Node_Str"");
  doc.appendChild(changeLogElement);
  List<Change> changes=new ArrayList<Change>();
  addMissingTableChanges(changes,targetDatabase);
  addUnexpectedTableChanges(changes);
  addMissingColumnChanges(changes,targetDatabase);
  addUnexpectedColumnChanges(changes);
  addChangedColumnChanges(changes);
  addMissingPrimaryKeyChanges(changes);
  addUnexpectedPrimaryKeyChanges(changes);
  addMissingIndexChanges(changes);
  addUnexpectedIndexChanges(changes);
  addMissingForeignKeyChanges(changes);
  addUnexpectedForeignKeyChanges(changes);
  addMissingSequenceChanges(changes);
  addUnexpectedSequenceChanges(changes);
  addMissingViewChanges(changes);
  addUnexpectedViewChanges(changes);
  for (  Change change : changes) {
    Element changeSet=doc.createElement(""String_Node_Str"");
    changeSet.setAttribute(""String_Node_Str"",""String_Node_Str"");
    changeSet.setAttribute(""String_Node_Str"",generateId());
    changeSet.appendChild(change.createNode(doc));
    doc.getDocumentElement().appendChild(changeSet);
  }
  xmlWriter.write(doc,out);
  out.flush();
}"
84149,"public DatabaseChangeLog parse(String physicalChangeLogLocation,FileOpener fileOpener) throws ChangeLogParseException {
  SAXParserFactory saxParserFactory=SAXParserFactory.newInstance();
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    saxParserFactory.setValidating(false);
    saxParserFactory.setNamespaceAware(false);
  }
 else {
    saxParserFactory.setValidating(true);
    saxParserFactory.setNamespaceAware(true);
  }
  InputStream inputStream=null;
  try {
    SAXParser parser=saxParserFactory.newSAXParser();
    try {
      parser.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    SAXNotRecognizedException e) {
      ;
    }
catch (    SAXNotSupportedException e) {
      ;
    }
    XMLReader xmlReader=parser.getXMLReader();
    xmlReader.setEntityResolver(new MigratorSchemaResolver());
    xmlReader.setErrorHandler(new ErrorHandler(){
      public void warning(      SAXParseException exception) throws SAXException {
        LogFactory.getLogger().warning(exception.getMessage());
        throw exception;
      }
      public void error(      SAXParseException exception) throws SAXException {
        LogFactory.getLogger().severe(exception.getMessage());
        throw exception;
      }
      public void fatalError(      SAXParseException exception) throws SAXException {
        LogFactory.getLogger().severe(exception.getMessage());
        throw exception;
      }
    }
);
    inputStream=fileOpener.getResourceAsStream(physicalChangeLogLocation);
    if (inputStream == null) {
      throw new ChangeLogParseException(physicalChangeLogLocation + ""String_Node_Str"");
    }
    XMLChangeLogHandler contentHandler=new XMLChangeLogHandler(physicalChangeLogLocation,fileOpener);
    xmlReader.setContentHandler(contentHandler);
    xmlReader.parse(new InputSource(inputStream));
    return contentHandler.getDatabaseChangeLog();
  }
 catch (  ChangeLogParseException e) {
    throw e;
  }
catch (  IOException e) {
    throw new ChangeLogParseException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  SAXParseException e) {
    throw new ChangeLogParseException(""String_Node_Str"" + e.getLineNumber() + ""String_Node_Str""+ e.getColumnNumber()+ ""String_Node_Str""+ ""String_Node_Str""+ e.getMessage());
  }
catch (  SAXException e) {
    Throwable parentCause=e.getException();
    while (parentCause != null) {
      if (parentCause instanceof ChangeLogParseException) {
        throw ((ChangeLogParseException)parentCause);
      }
      parentCause=parentCause.getCause();
    }
    String reason=e.getMessage();
    String causeReason=null;
    if (e.getCause() != null) {
      causeReason=e.getCause().getMessage();
    }
    if (reason == null) {
      if (causeReason != null) {
        reason=causeReason;
      }
 else {
        reason=""String_Node_Str"";
      }
    }
    throw new ChangeLogParseException(""String_Node_Str"" + reason,e);
  }
catch (  Exception e) {
    throw new ChangeLogParseException(e);
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      IOException e) {
        ;
      }
    }
  }
}","public DatabaseChangeLog parse(String physicalChangeLogLocation,FileOpener fileOpener) throws ChangeLogParseException {
  SAXParserFactory saxParserFactory=SAXParserFactory.newInstance();
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    saxParserFactory.setValidating(false);
    saxParserFactory.setNamespaceAware(false);
  }
 else {
    saxParserFactory.setValidating(true);
    saxParserFactory.setNamespaceAware(true);
  }
  InputStream inputStream=null;
  try {
    SAXParser parser=saxParserFactory.newSAXParser();
    try {
      parser.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    SAXNotRecognizedException e) {
      ;
    }
catch (    SAXNotSupportedException e) {
      ;
    }
    XMLReader xmlReader=parser.getXMLReader();
    xmlReader.setEntityResolver(new LiquibaseSchemaResolver());
    xmlReader.setErrorHandler(new ErrorHandler(){
      public void warning(      SAXParseException exception) throws SAXException {
        LogFactory.getLogger().warning(exception.getMessage());
        throw exception;
      }
      public void error(      SAXParseException exception) throws SAXException {
        LogFactory.getLogger().severe(exception.getMessage());
        throw exception;
      }
      public void fatalError(      SAXParseException exception) throws SAXException {
        LogFactory.getLogger().severe(exception.getMessage());
        throw exception;
      }
    }
);
    inputStream=fileOpener.getResourceAsStream(physicalChangeLogLocation);
    if (inputStream == null) {
      throw new ChangeLogParseException(physicalChangeLogLocation + ""String_Node_Str"");
    }
    XMLChangeLogHandler contentHandler=new XMLChangeLogHandler(physicalChangeLogLocation,fileOpener);
    xmlReader.setContentHandler(contentHandler);
    xmlReader.parse(new InputSource(inputStream));
    return contentHandler.getDatabaseChangeLog();
  }
 catch (  ChangeLogParseException e) {
    throw e;
  }
catch (  IOException e) {
    throw new ChangeLogParseException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  SAXParseException e) {
    throw new ChangeLogParseException(""String_Node_Str"" + e.getLineNumber() + ""String_Node_Str""+ e.getColumnNumber()+ ""String_Node_Str""+ ""String_Node_Str""+ e.getMessage());
  }
catch (  SAXException e) {
    Throwable parentCause=e.getException();
    while (parentCause != null) {
      if (parentCause instanceof ChangeLogParseException) {
        throw ((ChangeLogParseException)parentCause);
      }
      parentCause=parentCause.getCause();
    }
    String reason=e.getMessage();
    String causeReason=null;
    if (e.getCause() != null) {
      causeReason=e.getCause().getMessage();
    }
    if (reason == null) {
      if (causeReason != null) {
        reason=causeReason;
      }
 else {
        reason=""String_Node_Str"";
      }
    }
    throw new ChangeLogParseException(""String_Node_Str"" + reason,e);
  }
catch (  Exception e) {
    throw new ChangeLogParseException(e);
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      IOException e) {
        ;
      }
    }
  }
}"
84150,"/** 
 * This method will actually execute each of the changes in the list against the specified database.
 */
public void execute() throws MigrationFailedException {
  for (  Change change : changes) {
    try {
      change.setUp();
    }
 catch (    SetupException se) {
      throw new MigrationFailedException(this,se);
    }
  }
  Migrator migrator=getDatabaseChangeLog().getMigrator();
  DatabaseConnection connection=migrator.getDatabase().getConnection();
  try {
    Writer outputSQLWriter=getDatabaseChangeLog().getMigrator().getOutputSQLWriter();
    if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
      log.finest(""String_Node_Str"" + toString());
      for (      Change change : getChanges()) {
        change.executeStatements(migrator.getDatabase());
        log.finest(change.getConfirmationMessage());
      }
      connection.commit();
      log.finest(""String_Node_Str"" + toString() + ""String_Node_Str"");
    }
 else     if (migrator.getMode().equals(Migrator.Mode.OUTPUT_SQL_MODE)) {
      outputSQLWriter.write(""String_Node_Str"" + toString() + StreamUtil.getLineSeparator());
      writeComments(outputSQLWriter);
      for (      Change change : getChanges()) {
        change.saveStatements(getDatabaseChangeLog().getMigrator().getDatabase(),outputSQLWriter);
      }
    }
 else     if (migrator.getMode().equals(Migrator.Mode.EXECUTE_ROLLBACK_MODE)) {
      log.finest(""String_Node_Str"" + toString());
      if (rollBackStatements != null && rollBackStatements.length > 0) {
        for (        SqlStatement rollback : rollBackStatements) {
          try {
            new JdbcTemplate(migrator.getDatabase()).execute(rollback);
          }
 catch (          JDBCException e) {
            throw new RollbackFailedException(""String_Node_Str"" + rollback.getSqlStatement(migrator.getDatabase()) + ""String_Node_Str"");
          }
        }
      }
 else {
        List<Change> changes=getChanges();
        for (int i=changes.size() - 1; i >= 0; i--) {
          Change change=changes.get(i);
          change.executeRollbackStatements(migrator.getDatabase());
          log.finest(change.getConfirmationMessage());
        }
      }
      connection.commit();
      log.finest(""String_Node_Str"" + toString() + ""String_Node_Str"");
    }
 else     if (migrator.getMode().equals(Migrator.Mode.OUTPUT_ROLLBACK_SQL_MODE) || migrator.getMode().equals(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE)) {
      outputSQLWriter.write(""String_Node_Str"" + toString() + StreamUtil.getLineSeparator());
      writeComments(outputSQLWriter);
      if (rollBackStatements != null && rollBackStatements.length > 0) {
        for (        SqlStatement statement : rollBackStatements) {
          outputSQLWriter.append(statement.getSqlStatement(migrator.getDatabase())).append(statement.getEndDelimiter(migrator.getDatabase())).append(StreamUtil.getLineSeparator()).append(StreamUtil.getLineSeparator());
        }
      }
 else {
        for (int i=changes.size() - 1; i >= 0; i--) {
          Change change=changes.get(i);
          change.saveRollbackStatement(getDatabaseChangeLog().getMigrator().getDatabase(),outputSQLWriter);
        }
      }
    }
 else     if (migrator.getMode().equals(Migrator.Mode.OUTPUT_CHANGELOG_ONLY_SQL_MODE)) {
    }
 else {
      throw new MigrationFailedException(this,""String_Node_Str"" + migrator.getMode());
    }
    connection.commit();
  }
 catch (  Exception e) {
    try {
      connection.rollback();
    }
 catch (    SQLException e1) {
      throw new MigrationFailedException(this,e);
    }
    throw new MigrationFailedException(this,e);
  }
}","/** 
 * This method will actually execute each of the changes in the list against the specified database.
 */
public void execute(Database database) throws MigrationFailedException {
  try {
    database.getJdbcTemplate().comment(""String_Node_Str"" + toString());
    for (    Change change : changes) {
      try {
        change.setUp();
      }
 catch (      SetupException se) {
        throw new MigrationFailedException(this,se);
      }
    }
    log.finest(""String_Node_Str"" + toString());
    for (    Change change : getChanges()) {
      change.executeStatements(database);
      log.finest(change.getConfirmationMessage());
    }
    database.commit();
    log.finest(""String_Node_Str"" + toString() + ""String_Node_Str"");
    database.commit();
  }
 catch (  Exception e) {
    try {
      database.rollback();
    }
 catch (    Exception e1) {
      throw new MigrationFailedException(this,e);
    }
    throw new MigrationFailedException(this,e);
  }
}"
84151,"public ChangeSet(String id,String author,boolean alwaysRun,boolean runOnChange,DatabaseChangeLog databaseChangeLog,String contextList,String dbmsList){
  this.changes=new ArrayList<Change>();
  log=Logger.getLogger(Migrator.DEFAULT_LOG_NAME);
  this.id=id;
  this.author=author;
  this.databaseChangeLog=databaseChangeLog;
  this.alwaysRun=alwaysRun;
  this.runOnChange=runOnChange;
  if (StringUtils.trimToNull(contextList) != null) {
    String[] strings=contextList.toLowerCase().split(""String_Node_Str"");
    contexts=new HashSet<String>();
    for (    String string : strings) {
      contexts.add(string.trim().toLowerCase());
    }
  }
  if (StringUtils.trimToNull(dbmsList) != null) {
    String[] strings=dbmsList.toLowerCase().split(""String_Node_Str"");
    dbmsSet=new HashSet<String>();
    for (    String string : strings) {
      dbmsSet.add(string.trim().toLowerCase());
    }
  }
}","public ChangeSet(String id,String author,boolean alwaysRun,boolean runOnChange,String filePath,String physicalFilePath,String contextList,String dbmsList){
  this.changes=new ArrayList<Change>();
  log=LogFactory.getLogger();
  this.id=id;
  this.author=author;
  this.filePath=filePath;
  this.physicalFilePath=physicalFilePath;
  this.alwaysRun=alwaysRun;
  this.runOnChange=runOnChange;
  if (StringUtils.trimToNull(contextList) != null) {
    String[] strings=contextList.toLowerCase().split(""String_Node_Str"");
    contexts=new HashSet<String>();
    for (    String string : strings) {
      contexts.add(string.trim().toLowerCase());
    }
  }
  if (StringUtils.trimToNull(dbmsList) != null) {
    String[] strings=dbmsList.toLowerCase().split(""String_Node_Str"");
    dbmsSet=new HashSet<String>();
    for (    String string : strings) {
      dbmsSet.add(string.trim().toLowerCase());
    }
  }
}"
84152,"protected String[] getSchemasToDrop() throws JDBCException {
  return new String[]{""String_Node_Str"".toUpperCase(),DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection).getSchemaName()};
}","protected String[] getSchemasToDrop() throws JDBCException {
  return new String[]{""String_Node_Str"".toUpperCase(),database.getSchemaName()};
}"
84153,"public void testRollbackableChangeLogScriptOnFutureDatabase() throws Exception {
  if (connection == null) {
    return;
  }
  StringWriter writer=new StringWriter();
  Migrator migrator=createMigrator(rollbackChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(rollbackChangeLog);
  migrator.setMode(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE);
  migrator.setOutputSQLWriter(writer);
  migrator.setRollbackToDate(new Date(0));
  migrator.migrate();
}","public void testRollbackableChangeLogScriptOnFutureDatabase() throws Exception {
  if (database == null) {
    return;
  }
  StringWriter writer=new StringWriter();
  Migrator migrator=createMigrator(rollbackChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(rollbackChangeLog);
  migrator.futureRollbackSQL(this.contexts,writer);
}"
84154,"public void testDiff() throws Exception {
  if (connection == null) {
    return;
  }
  runCompleteChangeLog();
  Diff diff=new Diff(connection,connection);
  DiffResult diffResult=diff.compare();
  assertEquals(0,diffResult.getMissingColumns().size());
  assertEquals(0,diffResult.getMissingForeignKeys().size());
  assertEquals(0,diffResult.getMissingIndexes().size());
  assertEquals(0,diffResult.getMissingPrimaryKeys().size());
  assertEquals(0,diffResult.getMissingSequences().size());
  assertEquals(0,diffResult.getMissingColumns().size());
  assertEquals(0,diffResult.getMissingTables().size());
  assertEquals(0,diffResult.getMissingViews().size());
  assertEquals(0,diffResult.getUnexpectedColumns().size());
  assertEquals(0,diffResult.getUnexpectedForeignKeys().size());
  assertEquals(0,diffResult.getUnexpectedIndexes().size());
  assertEquals(0,diffResult.getUnexpectedPrimaryKeys().size());
  assertEquals(0,diffResult.getUnexpectedSequences().size());
  assertEquals(0,diffResult.getUnexpectedColumns().size());
  assertEquals(0,diffResult.getUnexpectedTables().size());
  assertEquals(0,diffResult.getUnexpectedViews().size());
}","public void testDiff() throws Exception {
  if (database == null) {
    return;
  }
  runCompleteChangeLog();
  Diff diff=new Diff(database.getConnection(),database.getConnection());
  DiffResult diffResult=diff.compare();
  assertEquals(0,diffResult.getMissingColumns().size());
  assertEquals(0,diffResult.getMissingForeignKeys().size());
  assertEquals(0,diffResult.getMissingIndexes().size());
  assertEquals(0,diffResult.getMissingPrimaryKeys().size());
  assertEquals(0,diffResult.getMissingSequences().size());
  assertEquals(0,diffResult.getMissingColumns().size());
  assertEquals(0,diffResult.getMissingTables().size());
  assertEquals(0,diffResult.getMissingViews().size());
  assertEquals(0,diffResult.getUnexpectedColumns().size());
  assertEquals(0,diffResult.getUnexpectedForeignKeys().size());
  assertEquals(0,diffResult.getUnexpectedIndexes().size());
  assertEquals(0,diffResult.getUnexpectedPrimaryKeys().size());
  assertEquals(0,diffResult.getUnexpectedSequences().size());
  assertEquals(0,diffResult.getUnexpectedColumns().size());
  assertEquals(0,diffResult.getUnexpectedTables().size());
  assertEquals(0,diffResult.getUnexpectedViews().size());
}"
84155,"public void testClearChecksums() throws Exception {
  if (connection == null) {
    return;
  }
  Migrator migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  migrator.migrate();
  migrator.clearCheckSums();
}","public void testClearChecksums() throws Exception {
  if (database == null) {
    return;
  }
  Migrator migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  migrator.update(this.contexts);
  migrator.clearCheckSums();
}"
84156,"protected void tearDown() throws Exception {
  if (connection != null) {
    if (shouldRollBack()) {
      connection.rollback();
    }
  }
  super.tearDown();
}","protected void tearDown() throws Exception {
  if (database != null) {
    if (shouldRollBack()) {
      database.rollback();
    }
  }
  super.tearDown();
}"
84157,"public void testRunChangeLog() throws Exception {
  if (connection == null) {
    return;
  }
  runCompleteChangeLog();
}","public void testRunChangeLog() throws Exception {
  if (database == null) {
    return;
  }
  runCompleteChangeLog();
}"
84158,"public void testTagEmptyDatabase() throws Exception {
  if (connection == null) {
    return;
  }
  Migrator migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  migrator.checkDatabaseChangeLogTable();
  try {
    migrator.tag(""String_Node_Str"");
  }
 catch (  JDBCException e) {
    assertEquals(""String_Node_Str"",e.getMessage());
  }
}","public void testTagEmptyDatabase() throws Exception {
  if (database == null) {
    return;
  }
  Migrator migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  migrator.checkDatabaseChangeLogTable();
  try {
    migrator.tag(""String_Node_Str"");
  }
 catch (  JDBCException e) {
    assertEquals(""String_Node_Str"",e.getMessage());
  }
}"
84159,"public void testUnrunChangeSetsEmptyDatabase() throws Exception {
  if (connection == null) {
    return;
  }
  Migrator migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  List<ChangeSet> list=migrator.listUnrunChangeSets();
  assertTrue(list.size() > 0);
}","public void testUnrunChangeSetsEmptyDatabase() throws Exception {
  if (database == null) {
    return;
  }
  Migrator migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  List<ChangeSet> list=migrator.listUnrunChangeSets(this.contexts);
  assertTrue(list.size() > 0);
}"
84160,"public void testOutputChangeLog() throws Exception {
  if (connection == null) {
    return;
  }
  StringWriter output=new StringWriter();
  Migrator migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  migrator.setOutputSQLWriter(output);
  migrator.setMode(Migrator.Mode.OUTPUT_SQL_MODE);
  migrator.migrate();
}","public void testOutputChangeLog() throws Exception {
  if (database == null) {
    return;
  }
  StringWriter output=new StringWriter();
  Migrator migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  migrator.update(this.contexts,output);
}"
84161,"public void testRerunDiffChangeLog() throws Exception {
  if (connection == null) {
    return;
  }
  runCompleteChangeLog();
  DatabaseSnapshot originalSnapshot=new DatabaseSnapshot(DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection));
  Diff diff=new Diff(connection);
  DiffResult diffResult=diff.compare();
  File tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  FileOutputStream output=new FileOutputStream(tempFile);
  try {
    diffResult.printChangeLog(new PrintStream(output),DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection));
    output.flush();
  }
  finally {
    output.close();
  }
  Migrator migrator=createMigrator(tempFile.getName());
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(tempFile.getName());
  try {
    migrator.migrate();
  }
 catch (  ValidationFailedException e) {
    e.printDescriptiveError(System.out);
    throw e;
  }
  tempFile.deleteOnExit();
  DatabaseSnapshot finalSnapshot=new DatabaseSnapshot(DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection));
  DiffResult finalDiffResult=new Diff(originalSnapshot,finalSnapshot).compare();
  assertEquals(0,finalDiffResult.getMissingColumns().size());
  assertEquals(0,finalDiffResult.getMissingForeignKeys().size());
  assertEquals(0,finalDiffResult.getMissingIndexes().size());
  assertEquals(0,finalDiffResult.getMissingPrimaryKeys().size());
  assertEquals(0,finalDiffResult.getMissingSequences().size());
  assertEquals(0,finalDiffResult.getMissingTables().size());
  assertEquals(0,finalDiffResult.getMissingViews().size());
  assertEquals(0,finalDiffResult.getUnexpectedColumns().size());
  assertEquals(0,finalDiffResult.getUnexpectedForeignKeys().size());
  assertEquals(0,finalDiffResult.getUnexpectedIndexes().size());
  assertEquals(0,finalDiffResult.getUnexpectedPrimaryKeys().size());
  assertEquals(0,finalDiffResult.getUnexpectedSequences().size());
  assertEquals(0,finalDiffResult.getUnexpectedTables().size());
  assertEquals(0,finalDiffResult.getUnexpectedViews().size());
}","public void testRerunDiffChangeLog() throws Exception {
  if (database == null) {
    return;
  }
  runCompleteChangeLog();
  DatabaseSnapshot originalSnapshot=new DatabaseSnapshot(database);
  Diff diff=new Diff(database.getConnection());
  DiffResult diffResult=diff.compare();
  File tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  FileOutputStream output=new FileOutputStream(tempFile);
  try {
    diffResult.printChangeLog(new PrintStream(output),database);
    output.flush();
  }
  finally {
    output.close();
  }
  Migrator migrator=createMigrator(tempFile.getName());
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(tempFile.getName());
  try {
    migrator.update(this.contexts);
  }
 catch (  ValidationFailedException e) {
    e.printDescriptiveError(System.out);
    throw e;
  }
  tempFile.deleteOnExit();
  DatabaseSnapshot finalSnapshot=new DatabaseSnapshot(database);
  DiffResult finalDiffResult=new Diff(originalSnapshot,finalSnapshot).compare();
  assertEquals(0,finalDiffResult.getMissingColumns().size());
  assertEquals(0,finalDiffResult.getMissingForeignKeys().size());
  assertEquals(0,finalDiffResult.getMissingIndexes().size());
  assertEquals(0,finalDiffResult.getMissingPrimaryKeys().size());
  assertEquals(0,finalDiffResult.getMissingSequences().size());
  assertEquals(0,finalDiffResult.getMissingTables().size());
  assertEquals(0,finalDiffResult.getMissingViews().size());
  assertEquals(0,finalDiffResult.getUnexpectedColumns().size());
  assertEquals(0,finalDiffResult.getUnexpectedForeignKeys().size());
  assertEquals(0,finalDiffResult.getUnexpectedIndexes().size());
  assertEquals(0,finalDiffResult.getUnexpectedPrimaryKeys().size());
  assertEquals(0,finalDiffResult.getUnexpectedSequences().size());
  assertEquals(0,finalDiffResult.getUnexpectedTables().size());
  assertEquals(0,finalDiffResult.getUnexpectedViews().size());
}"
84162,"public void testRollbackableChangeLog() throws Exception {
  if (connection == null) {
    return;
  }
  Migrator migrator=createMigrator(rollbackChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(rollbackChangeLog);
  migrator.setMode(Migrator.Mode.EXECUTE_MODE);
  migrator.migrate();
  migrator=createMigrator(rollbackChangeLog);
  migrator.setMode(Migrator.Mode.EXECUTE_ROLLBACK_MODE);
  migrator.setRollbackToDate(new Date(0));
  migrator.migrate();
  migrator=createMigrator(rollbackChangeLog);
  migrator.setMode(Migrator.Mode.EXECUTE_MODE);
  migrator.migrate();
  migrator=createMigrator(rollbackChangeLog);
  migrator.setMode(Migrator.Mode.EXECUTE_ROLLBACK_MODE);
  migrator.setRollbackToDate(new Date(0));
  migrator.migrate();
}","public void testRollbackableChangeLog() throws Exception {
  if (database == null) {
    return;
  }
  Migrator migrator=createMigrator(rollbackChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(rollbackChangeLog);
  migrator.update(this.contexts);
  migrator=createMigrator(rollbackChangeLog);
  migrator.rollback(new Date(0),this.contexts);
  migrator=createMigrator(rollbackChangeLog);
  migrator.update(this.contexts);
  migrator=createMigrator(rollbackChangeLog);
  migrator.rollback(new Date(0),this.contexts);
}"
84163,"public void testAbsolutePathChangeLog() throws Exception {
  if (connection == null) {
    return;
  }
  Enumeration<URL> urls=new JUnitFileOpener().getResources(includedChangeLog);
  URL completeChangeLogURL=urls.nextElement();
  String absolutePathOfChangeLog=completeChangeLogURL.toExternalForm();
  absolutePathOfChangeLog=absolutePathOfChangeLog.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    absolutePathOfChangeLog=absolutePathOfChangeLog.replace('/','\\');
  }
 else {
    absolutePathOfChangeLog=""String_Node_Str"" + absolutePathOfChangeLog;
  }
  Migrator migrator=createMigrator(absolutePathOfChangeLog,new FileSystemFileOpener());
  migrator.dropAll(getSchemasToDrop());
  migrator.migrate();
  migrator.migrate();
  migrator.dropAll(getSchemasToDrop());
}","public void testAbsolutePathChangeLog() throws Exception {
  if (database == null) {
    return;
  }
  Enumeration<URL> urls=new JUnitFileOpener().getResources(includedChangeLog);
  URL completeChangeLogURL=urls.nextElement();
  String absolutePathOfChangeLog=completeChangeLogURL.toExternalForm();
  absolutePathOfChangeLog=absolutePathOfChangeLog.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    absolutePathOfChangeLog=absolutePathOfChangeLog.replace('/','\\');
  }
 else {
    absolutePathOfChangeLog=""String_Node_Str"" + absolutePathOfChangeLog;
  }
  Migrator migrator=createMigrator(absolutePathOfChangeLog,new FileSystemFileOpener());
  migrator.dropAll(getSchemasToDrop());
  migrator.update(this.contexts);
  migrator.update(this.contexts);
  migrator.dropAll(getSchemasToDrop());
}"
84164,"protected void setUp() throws Exception {
  super.setUp();
  if (connection != null) {
    if (!connection.getAutoCommit()) {
      connection.rollback();
    }
    createMigrator(completeChangeLog).forceReleaseLock();
  }
}","protected void setUp() throws Exception {
  super.setUp();
  if (database != null) {
    if (!database.getConnection().getAutoCommit()) {
      database.rollback();
    }
    LockHandler.getInstance(database).forceReleaseLock();
  }
}"
84165,"private Migrator createMigrator(String changeLogFile,FileOpener fileOpener) throws JDBCException {
  Migrator migrator=new Migrator(changeLogFile,fileOpener);
  migrator.setContexts(""String_Node_Str"");
  migrator.init(connection);
  return migrator;
}","private Migrator createMigrator(String changeLogFile,FileOpener fileOpener) throws JDBCException {
  return new Migrator(changeLogFile,fileOpener,database);
}"
84166,"protected AbstractSimpleChangeLogRunnerTest(String changelogDir,String url) throws Exception {
  this.completeChangeLog=""String_Node_Str"" + changelogDir + ""String_Node_Str"";
  this.rollbackChangeLog=""String_Node_Str"" + changelogDir + ""String_Node_Str"";
  this.includedChangeLog=""String_Node_Str"" + changelogDir + ""String_Node_Str"";
  this.connection=TestContext.getInstance().getConnection(url);
  Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.SEVERE);
}","protected AbstractSimpleChangeLogRunnerTest(String changelogDir,String url) throws Exception {
  this.completeChangeLog=""String_Node_Str"" + changelogDir + ""String_Node_Str"";
  this.rollbackChangeLog=""String_Node_Str"" + changelogDir + ""String_Node_Str"";
  this.includedChangeLog=""String_Node_Str"" + changelogDir + ""String_Node_Str"";
  DatabaseConnection connection=TestContext.getInstance().getConnection(url);
  LogFactory.getLogger().setLevel(Level.SEVERE);
  if (connection != null) {
    database=DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection);
  }
}"
84167,"public void testRollbackableChangeLogScriptOnExistingDatabase() throws Exception {
  if (connection == null) {
    return;
  }
  Migrator migrator=createMigrator(rollbackChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(rollbackChangeLog);
  migrator.setMode(Migrator.Mode.EXECUTE_MODE);
  migrator.migrate();
  StringWriter writer=new StringWriter();
  migrator=createMigrator(rollbackChangeLog);
  migrator.setMode(Migrator.Mode.OUTPUT_ROLLBACK_SQL_MODE);
  migrator.setOutputSQLWriter(writer);
  migrator.setRollbackToDate(new Date(0));
  migrator.migrate();
}","public void testRollbackableChangeLogScriptOnExistingDatabase() throws Exception {
  if (database == null) {
    return;
  }
  Migrator migrator=createMigrator(rollbackChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(rollbackChangeLog);
  migrator.update(this.contexts);
  StringWriter writer=new StringWriter();
  migrator=createMigrator(rollbackChangeLog);
  migrator.rollback(new Date(0),this.contexts,writer);
}"
84168,"public void testTag() throws Exception {
  if (connection == null) {
    return;
  }
  Migrator migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  migrator.migrate();
  migrator.tag(""String_Node_Str"");
}","public void testTag() throws Exception {
  if (database == null) {
    return;
  }
  Migrator migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  migrator.update(this.contexts);
  migrator.tag(""String_Node_Str"");
}"
84169,"private void runCompleteChangeLog() throws Exception {
  Migrator migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  try {
    migrator.migrate();
  }
 catch (  ValidationFailedException e) {
    e.printDescriptiveError(System.out);
    throw e;
  }
}","private void runCompleteChangeLog() throws Exception {
  Migrator migrator=createMigrator(completeChangeLog);
  migrator.dropAll(getSchemasToDrop());
  migrator=createMigrator(completeChangeLog);
  try {
    migrator.update(this.contexts);
  }
 catch (  ValidationFailedException e) {
    e.printDescriptiveError(System.out);
    throw e;
  }
}"
84170,"@Before public void setUp(){
  factory=new ChangeFactory();
}","@Before public void setUp(){
  factory=ChangeFactory.getInstance();
}"
84171,"protected void performLiquibaseTask(Migrator migrator) throws LiquibaseException {
  migrator.migrate();
}","protected void performLiquibaseTask(Migrator migrator) throws LiquibaseException {
  super.performLiquibaseTask(migrator);
  migrator.migrate();
}"
84172,"protected void performLiquibaseTask(Migrator migrator) throws LiquibaseException {
  migrator.migrate();
}","protected void performLiquibaseTask(Migrator migrator) throws LiquibaseException {
  super.performLiquibaseTask(migrator);
  migrator.migrate();
}"
84173,"public Object convertDatabaseValueToJavaObject(Object defaultValue,int dataType,int columnSize,int decimalDigits) throws ParseException {
  if (defaultValue != null) {
    if (defaultValue instanceof String) {
      if (dataType == Types.DATE || dataType == Types.TIME || dataType == Types.TIMESTAMP) {
        if (((String)defaultValue).indexOf(""String_Node_Str"") > 0) {
          defaultValue=((String)defaultValue).replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (((String)defaultValue).indexOf(""String_Node_Str"") > 0) {
          defaultValue=((String)defaultValue).replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          defaultValue=((String)defaultValue).replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
  }
  return super.convertDatabaseValueToJavaObject(defaultValue,dataType,columnSize,decimalDigits);
}","public Object convertDatabaseValueToJavaObject(Object defaultValue,int dataType,int columnSize,int decimalDigits) throws ParseException {
  if (defaultValue != null) {
    if (defaultValue instanceof String) {
      if (dataType == Types.DATE || dataType == Types.TIME || dataType == Types.TIMESTAMP) {
        if (((String)defaultValue).indexOf(""String_Node_Str"") > 0) {
          defaultValue=((String)defaultValue).replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (((String)defaultValue).indexOf(""String_Node_Str"") > 0) {
          defaultValue=((String)defaultValue).replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          defaultValue=((String)defaultValue).replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
        }
      }
      defaultValue=((String)defaultValue).replaceFirst(""String_Node_Str"",""String_Node_Str"");
    }
  }
  return super.convertDatabaseValueToJavaObject(defaultValue,dataType,columnSize,decimalDigits);
}"
84174,"private void readColumns(String schema) throws SQLException, JDBCException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  Statement selectStatement=database.getConnection().createStatement();
  ResultSet rs=databaseMetaData.getColumns(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),null,null);
  while (rs.next()) {
    Column columnInfo=new Column();
    String tableName=rs.getString(""String_Node_Str"");
    String columnName=rs.getString(""String_Node_Str"");
    String schemaName=rs.getString(""String_Node_Str"");
    String catalogName=rs.getString(""String_Node_Str"");
    if (database.isSystemTable(catalogName,schemaName,tableName) || database.isLiquibaseTable(tableName)) {
      continue;
    }
    Table table=tablesMap.get(tableName);
    if (table == null) {
      View view=viewsMap.get(tableName);
      if (view == null) {
        log.info(""String_Node_Str"" + tableName + ""String_Node_Str""+ columnName);
        continue;
      }
 else {
        columnInfo.setView(view);
        view.getColumns().add(columnInfo);
      }
    }
 else {
      columnInfo.setTable(table);
      table.getColumns().add(columnInfo);
    }
    columnInfo.setName(columnName);
    columnInfo.setDataType(rs.getInt(""String_Node_Str""));
    columnInfo.setColumnSize(rs.getInt(""String_Node_Str""));
    columnInfo.setDecimalDigits(rs.getInt(""String_Node_Str""));
    columnInfo.setTypeName(rs.getString(""String_Node_Str""));
    Object defaultValue=rs.getObject(""String_Node_Str"");
    try {
      columnInfo.setDefaultValue(database.convertDatabaseValueToJavaObject(defaultValue,columnInfo.getDataType(),columnInfo.getColumnSize(),columnInfo.getDecimalDigits()));
    }
 catch (    ParseException e) {
      throw new JDBCException(e);
    }
    int nullable=rs.getInt(""String_Node_Str"");
    if (nullable == DatabaseMetaData.columnNoNulls) {
      columnInfo.setNullable(false);
    }
 else     if (nullable == DatabaseMetaData.columnNullable) {
      columnInfo.setNullable(true);
    }
    columnInfo.setPrimaryKey(isPrimaryKey(columnInfo));
    if (database.supportsAutoIncrement()) {
      ResultSet selectRS=null;
      try {
        selectRS=selectStatement.executeQuery(""String_Node_Str"" + columnName + ""String_Node_Str""+ database.escapeTableName(schema,tableName)+ ""String_Node_Str"");
        ResultSetMetaData meta=selectRS.getMetaData();
        columnInfo.setAutoIncrement(meta.isAutoIncrement(1));
      }
  finally {
        if (selectRS != null) {
          selectRS.close();
        }
      }
    }
    columnsMap.put(tableName + ""String_Node_Str"" + columnName,columnInfo);
  }
  rs.close();
  selectStatement.close();
}","private void readColumns(String schema) throws SQLException, JDBCException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  Statement selectStatement=database.getConnection().createStatement();
  ResultSet rs=databaseMetaData.getColumns(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),null,null);
  while (rs.next()) {
    Column columnInfo=new Column();
    String tableName=rs.getString(""String_Node_Str"");
    String columnName=rs.getString(""String_Node_Str"");
    String schemaName=rs.getString(""String_Node_Str"");
    String catalogName=rs.getString(""String_Node_Str"");
    if (database.isSystemTable(catalogName,schemaName,tableName) || database.isLiquibaseTable(tableName)) {
      continue;
    }
    Table table=tablesMap.get(tableName);
    if (table == null) {
      View view=viewsMap.get(tableName);
      if (view == null) {
        log.info(""String_Node_Str"" + tableName + ""String_Node_Str""+ columnName);
        continue;
      }
 else {
        columnInfo.setView(view);
        view.getColumns().add(columnInfo);
      }
    }
 else {
      columnInfo.setTable(table);
      table.getColumns().add(columnInfo);
    }
    columnInfo.setName(columnName);
    columnInfo.setDataType(rs.getInt(""String_Node_Str""));
    columnInfo.setColumnSize(rs.getInt(""String_Node_Str""));
    columnInfo.setDecimalDigits(rs.getInt(""String_Node_Str""));
    Object defaultValue=rs.getObject(""String_Node_Str"");
    try {
      columnInfo.setDefaultValue(database.convertDatabaseValueToJavaObject(defaultValue,columnInfo.getDataType(),columnInfo.getColumnSize(),columnInfo.getDecimalDigits()));
    }
 catch (    ParseException e) {
      throw new JDBCException(e);
    }
    int nullable=rs.getInt(""String_Node_Str"");
    if (nullable == DatabaseMetaData.columnNoNulls) {
      columnInfo.setNullable(false);
    }
 else     if (nullable == DatabaseMetaData.columnNullable) {
      columnInfo.setNullable(true);
    }
    columnInfo.setPrimaryKey(isPrimaryKey(columnInfo));
    if (database.supportsAutoIncrement()) {
      ResultSet selectRS=null;
      try {
        selectRS=selectStatement.executeQuery(""String_Node_Str"" + columnName + ""String_Node_Str""+ database.escapeTableName(schema,tableName)+ ""String_Node_Str"");
        ResultSetMetaData meta=selectRS.getMetaData();
        columnInfo.setAutoIncrement(meta.isAutoIncrement(1));
      }
  finally {
        if (selectRS != null) {
          selectRS.close();
        }
      }
    }
    columnInfo.setTypeName(database.getColumnType(rs.getString(""String_Node_Str""),columnInfo.isAutoIncrement()));
    columnsMap.put(tableName + ""String_Node_Str"" + columnName,columnInfo);
  }
  rs.close();
  selectStatement.close();
}"
84175,"private void addMissingTableChanges(List<Change> changes,Database database){
  for (  Table missingTable : getMissingTables()) {
    if (baseDatabase.isLiquibaseTable(missingTable.getName())) {
      continue;
    }
    CreateTableChange change=new CreateTableChange();
    change.setTableName(missingTable.getName());
    for (    Column column : missingTable.getColumns()) {
      ColumnConfig columnConfig=new ColumnConfig();
      columnConfig.setName(column.getName());
      columnConfig.setType(column.getDataTypeString(database));
      if (column.isNullable() != null && !column.isNullable()) {
        ConstraintsConfig constraintsConfig=new ConstraintsConfig();
        constraintsConfig.setNullable(false);
        columnConfig.setConstraints(constraintsConfig);
      }
      Object defaultValue=column.getDefaultValue();
      if (defaultValue == null) {
      }
 else       if (defaultValue instanceof Date) {
        columnConfig.setDefaultValueDate((Date)defaultValue);
      }
 else       if (defaultValue instanceof Boolean) {
        columnConfig.setDefaultValueBoolean(((Boolean)defaultValue));
      }
 else       if (defaultValue instanceof Number) {
        columnConfig.setDefaultValueNumeric(((Number)defaultValue));
      }
 else {
        columnConfig.setDefaultValue(defaultValue.toString());
      }
      change.addColumn(columnConfig);
    }
    changes.add(change);
  }
}","private void addMissingTableChanges(List<Change> changes,Database database){
  for (  Table missingTable : getMissingTables()) {
    if (baseDatabase.isLiquibaseTable(missingTable.getName())) {
      continue;
    }
    CreateTableChange change=new CreateTableChange();
    change.setTableName(missingTable.getName());
    for (    Column column : missingTable.getColumns()) {
      ColumnConfig columnConfig=new ColumnConfig();
      columnConfig.setName(column.getName());
      columnConfig.setType(column.getDataTypeString(database));
      ConstraintsConfig constraintsConfig=null;
      if (column.isPrimaryKey()) {
        if (constraintsConfig == null) {
          constraintsConfig=new ConstraintsConfig();
        }
        constraintsConfig.setPrimaryKey(true);
        PrimaryKey pkToRemove=null;
        for (        PrimaryKey pk : getMissingPrimaryKeys()) {
          if (pk.getTableName().equalsIgnoreCase(missingTable.getName())) {
            pkToRemove=pk;
          }
        }
        if (pkToRemove != null) {
          getMissingPrimaryKeys().remove(pkToRemove);
        }
      }
      if (column.isAutoIncrement()) {
        columnConfig.setAutoIncrement(true);
      }
      if (column.isNullable() != null && !column.isNullable()) {
        if (constraintsConfig == null) {
          constraintsConfig=new ConstraintsConfig();
        }
        constraintsConfig.setNullable(false);
      }
      if (constraintsConfig != null) {
        columnConfig.setConstraints(constraintsConfig);
      }
      Object defaultValue=column.getDefaultValue();
      if (defaultValue == null) {
      }
 else       if (column.isAutoIncrement()) {
      }
 else       if (defaultValue instanceof Date) {
        columnConfig.setDefaultValueDate((Date)defaultValue);
      }
 else       if (defaultValue instanceof Boolean) {
        columnConfig.setDefaultValueBoolean(((Boolean)defaultValue));
      }
 else       if (defaultValue instanceof Number) {
        columnConfig.setDefaultValueNumeric(((Number)defaultValue));
      }
 else {
        columnConfig.setDefaultValue(defaultValue.toString());
      }
      change.addColumn(columnConfig);
    }
    changes.add(change);
  }
}"
84176,Migrator getMigrator(Database database);,"Migrator getMigrator(String changeLogFile,Database database);"
84177,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  ideFacade.getMigrator(database).clearCheckSums();
  ideFacade.displayMessage(""String_Node_Str"",""String_Node_Str"");
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  ideFacade.getMigrator(null,database).clearCheckSums();
  ideFacade.displayMessage(""String_Node_Str"",""String_Node_Str"");
}"
84178,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  if (ideFacade.confirm(getTitle(),""String_Node_Str"")) {
    ideFacade.getMigrator(database).dropAll();
    ideFacade.displayOutput(""String_Node_Str"",""String_Node_Str"");
  }
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  if (ideFacade.confirm(getTitle(),""String_Node_Str"")) {
    ideFacade.getMigrator(null,database).dropAll();
    ideFacade.displayOutput(""String_Node_Str"",""String_Node_Str"");
  }
}"
84179,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  File input=ideFacade.promptForDirectory(getTitle(),""String_Node_Str"",null);
  if (input != null) {
    try {
      ideFacade.getMigrator(database).generateDocumentation(input.getCanonicalPath());
    }
 catch (    IOException e) {
      throw new LiquibaseException(e);
    }
  }
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  File input=ideFacade.promptForDirectory(getTitle(),""String_Node_Str"",null);
  if (input != null) {
    try {
      String changeLogFile=ideFacade.selectChangeLogFile();
      if (changeLogFile == null) {
        return;
      }
      ideFacade.getMigrator(null,database).generateDocumentation(input.getCanonicalPath());
    }
 catch (    IOException e) {
      throw new LiquibaseException(e);
    }
  }
}"
84180,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  try {
    String output=""String_Node_Str"";
    DatabaseChangeLogLock[] locks=ideFacade.getMigrator(database).listLocks();
    for (    DatabaseChangeLogLock lock : locks) {
      output+=""String_Node_Str"" + lock.getLockedBy() + ""String_Node_Str""+ DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT).format(lock.getLockGranted())+ ""String_Node_Str"";
    }
    ideFacade.displayOutput(""String_Node_Str"",output);
  }
 catch (  IOException e) {
    throw new LiquibaseException(e);
  }
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  try {
    String output=""String_Node_Str"";
    DatabaseChangeLogLock[] locks=ideFacade.getMigrator(null,database).listLocks();
    for (    DatabaseChangeLogLock lock : locks) {
      output+=""String_Node_Str"" + lock.getLockedBy() + ""String_Node_Str""+ DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT).format(lock.getLockGranted())+ ""String_Node_Str"";
    }
    ideFacade.displayOutput(""String_Node_Str"",output);
  }
 catch (  IOException e) {
    throw new LiquibaseException(e);
  }
}"
84181,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  ideFacade.getMigrator(database).migrate();
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  String changeLogFile=ideFacade.selectChangeLogFile();
  if (changeLogFile == null) {
    return;
  }
  ideFacade.getMigrator(changeLogFile,database).migrate();
}"
84182,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  StringWriter stringWriter=new StringWriter();
  ideFacade.getMigrator(database).migrateSQL(stringWriter);
  ideFacade.displayOutput(""String_Node_Str"",stringWriter.toString());
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  StringWriter stringWriter=new StringWriter();
  String changeLogFile=ideFacade.selectChangeLogFile();
  if (changeLogFile == null) {
    return;
  }
  ideFacade.getMigrator(changeLogFile,database).migrateSQL(stringWriter);
  ideFacade.displayOutput(""String_Node_Str"",stringWriter.toString());
}"
84183,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  ideFacade.getMigrator(database).releaseLock();
  ideFacade.displayMessage(""String_Node_Str"",""String_Node_Str"");
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  ideFacade.getMigrator(null,database).releaseLock();
  ideFacade.displayMessage(""String_Node_Str"",""String_Node_Str"");
}"
84184,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  Integer input=ideFacade.promptForInteger(getTitle(),""String_Node_Str"",1);
  if (input != null) {
    ideFacade.getMigrator(database).rollbackCount(input);
  }
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  Integer input=ideFacade.promptForInteger(getTitle(),""String_Node_Str"",1);
  if (input != null) {
    ideFacade.getMigrator(null,database).rollbackCount(input);
  }
}"
84185,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  Integer input=ideFacade.promptForInteger(getTitle(),""String_Node_Str"",1);
  if (input != null) {
    StringWriter writer=new StringWriter();
    ideFacade.getMigrator(database).rollbackCountSQL(input,writer);
    ideFacade.displayOutput(""String_Node_Str"",writer.toString());
  }
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  Integer input=ideFacade.promptForInteger(getTitle(),""String_Node_Str"",1);
  if (input != null) {
    StringWriter writer=new StringWriter();
    ideFacade.getMigrator(null,database).rollbackCountSQL(input,writer);
    ideFacade.displayOutput(""String_Node_Str"",writer.toString());
  }
}"
84186,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  StringWriter writer=new StringWriter();
  ideFacade.getMigrator(database).futureRollbackSQL(writer);
  ideFacade.displayOutput(""String_Node_Str"",writer.toString());
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  StringWriter writer=new StringWriter();
  String changeLogFile=ideFacade.selectChangeLogFile();
  if (changeLogFile == null) {
    return;
  }
  ideFacade.getMigrator(changeLogFile,database).futureRollbackSQL(writer);
  ideFacade.displayOutput(""String_Node_Str"",writer.toString());
}"
84187,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  Date input=ideFacade.promptForDateTime(getTitle(),""String_Node_Str"",new Date());
  if (input != null) {
    ideFacade.getMigrator(database).rollbackToDate(input);
  }
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  Date input=ideFacade.promptForDateTime(getTitle(),""String_Node_Str"",new Date());
  if (input != null) {
    String changeLogFile=ideFacade.selectChangeLogFile();
    if (changeLogFile == null) {
      return;
    }
    ideFacade.getMigrator(changeLogFile,database).rollbackToDate(input);
  }
}"
84188,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  Date input=ideFacade.promptForDateTime(getTitle(),""String_Node_Str"",new Date());
  if (input != null) {
    StringWriter writer=new StringWriter();
    ideFacade.getMigrator(database).rollbackToDateSQL(input,writer);
    ideFacade.displayOutput(""String_Node_Str"",writer.toString());
  }
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  Date input=ideFacade.promptForDateTime(getTitle(),""String_Node_Str"",new Date());
  if (input != null) {
    StringWriter writer=new StringWriter();
    ideFacade.getMigrator(null,database).rollbackToDateSQL(input,writer);
    ideFacade.displayOutput(""String_Node_Str"",writer.toString());
  }
}"
84189,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  String input=ideFacade.promptForString(getTitle(),""String_Node_Str"",null);
  if (input != null) {
    ideFacade.getMigrator(database).rollback(input);
  }
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  String input=ideFacade.promptForString(getTitle(),""String_Node_Str"",null);
  if (input != null) {
    ideFacade.getMigrator(null,database).rollback(input);
  }
}"
84190,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  String input=ideFacade.promptForString(getTitle(),""String_Node_Str"",null);
  if (input != null) {
    StringWriter writer=new StringWriter();
    ideFacade.getMigrator(database).rollbackSQL(input,writer);
    ideFacade.displayOutput(""String_Node_Str"",writer.toString());
  }
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  String input=ideFacade.promptForString(getTitle(),""String_Node_Str"",null);
  if (input != null) {
    StringWriter writer=new StringWriter();
    ideFacade.getMigrator(null,database).rollbackSQL(input,writer);
    ideFacade.displayOutput(""String_Node_Str"",writer.toString());
  }
}"
84191,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  ideFacade.getMigrator(database).reportStatus(true,new PrintStream(byteArrayOutputStream));
  ideFacade.displayOutput(""String_Node_Str"",byteArrayOutputStream.toString());
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  String changeLogFile=ideFacade.selectChangeLogFile();
  if (changeLogFile == null) {
    return;
  }
  ideFacade.getMigrator(changeLogFile,database).reportStatus(true,new PrintStream(byteArrayOutputStream));
  ideFacade.displayOutput(""String_Node_Str"",byteArrayOutputStream.toString());
}"
84192,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  String input=ideFacade.promptForString(getTitle(),""String_Node_Str"",null);
  if (input != null) {
    ideFacade.getMigrator(database).tag(input);
  }
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  String input=ideFacade.promptForString(getTitle(),""String_Node_Str"",null);
  if (input != null) {
    ideFacade.getMigrator(null,database).tag(input);
  }
}"
84193,"public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  String message;
  try {
    ideFacade.getMigrator(database).validate();
    message=""String_Node_Str"";
  }
 catch (  ValidationFailedException e) {
    ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
    e.printDescriptiveError(new PrintStream(byteArrayOutputStream));
    message=byteArrayOutputStream.toString();
  }
catch (  Exception e) {
    throw new LiquibaseException(e);
  }
  ideFacade.displayOutput(""String_Node_Str"",message);
}","public void actionPerform(Database database,IdeFacade ideFacade) throws LiquibaseException {
  String message;
  try {
    String changeLogFile=ideFacade.selectChangeLogFile();
    if (changeLogFile == null) {
      return;
    }
    ideFacade.getMigrator(changeLogFile,database).validate();
    message=""String_Node_Str"";
  }
 catch (  ValidationFailedException e) {
    ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
    e.printDescriptiveError(new PrintStream(byteArrayOutputStream));
    message=byteArrayOutputStream.toString();
  }
catch (  Exception e) {
    throw new LiquibaseException(e);
  }
  ideFacade.displayOutput(""String_Node_Str"",message);
}"
84194,"public void executeChangeSet(IdeFacade ide,Database database,ChangeMetaDataWizardPage metaDataPage,Change... changes) throws MigrationFailedException {
  ProgressMonitor monitor=ide.getProgressMonitor();
  Migrator migrator=ide.getMigrator(database);
  ChangeLogWriter changeLogWriter=ide.getChangeLogWriter();
  DatabaseChangeLog changeLog=ide.getRootChangeLog();
  monitor.beginTask(""String_Node_Str"",100);
  ChangeSet changeSet=null;
  try {
    monitor.subTask(""String_Node_Str"");
    migrator.getDatabase().checkDatabaseChangeLogTable(migrator);
    migrator.getDatabase().checkDatabaseChangeLogLockTable(migrator);
    monitor.worked(25);
    monitor.subTask(""String_Node_Str"");
    changeSet=new ChangeSet(metaDataPage.getId(),metaDataPage.getAuthor(),metaDataPage.isAlwaysRun(),metaDataPage.isRunOnChange(),changeLog,StringUtils.trimToNull(metaDataPage.getContext()),StringUtils.trimToNull(metaDataPage.getDbms()));
    changeSet.setComments(metaDataPage.getComments());
    for (    Change change : changes) {
      changeSet.addChange(change);
    }
    liquibase.database.Database liquibaseDatabase=migrator.getDatabase();
    for (    Change change : changeSet.getChanges()) {
      for (      SqlStatement sql : change.generateStatements(liquibaseDatabase)) {
        new JdbcTemplate(liquibaseDatabase).execute(sql);
      }
    }
    monitor.worked(25);
    monitor.subTask(""String_Node_Str"");
    migrator.markChangeSetAsRan(changeSet);
    monitor.worked(25);
    monitor.subTask(""String_Node_Str"");
    changeLogWriter.appendChangeSet(changeSet);
    monitor.done();
  }
 catch (  Exception e) {
    throw new MigrationFailedException(changeSet,e);
  }
}","public void executeChangeSet(IdeFacade ide,Database database,ChangeMetaDataWizardPage metaDataPage,Change... changes) throws MigrationFailedException {
  ProgressMonitor monitor=ide.getProgressMonitor();
  Migrator migrator=ide.getMigrator(null,database);
  ChangeLogWriter changeLogWriter=ide.getChangeLogWriter();
  DatabaseChangeLog changeLog=ide.getRootChangeLog();
  monitor.beginTask(""String_Node_Str"",100);
  ChangeSet changeSet=null;
  try {
    monitor.subTask(""String_Node_Str"");
    migrator.getDatabase().checkDatabaseChangeLogTable(migrator);
    migrator.getDatabase().checkDatabaseChangeLogLockTable(migrator);
    monitor.worked(25);
    monitor.subTask(""String_Node_Str"");
    changeSet=new ChangeSet(metaDataPage.getId(),metaDataPage.getAuthor(),metaDataPage.isAlwaysRun(),metaDataPage.isRunOnChange(),changeLog,StringUtils.trimToNull(metaDataPage.getContext()),StringUtils.trimToNull(metaDataPage.getDbms()));
    changeSet.setComments(metaDataPage.getComments());
    for (    Change change : changes) {
      changeSet.addChange(change);
    }
    liquibase.database.Database liquibaseDatabase=migrator.getDatabase();
    for (    Change change : changeSet.getChanges()) {
      for (      SqlStatement sql : change.generateStatements(liquibaseDatabase)) {
        new JdbcTemplate(liquibaseDatabase).execute(sql);
      }
    }
    monitor.worked(25);
    monitor.subTask(""String_Node_Str"");
    migrator.markChangeSetAsRan(changeSet);
    monitor.worked(25);
    monitor.subTask(""String_Node_Str"");
    changeLogWriter.appendChangeSet(changeSet);
    monitor.done();
  }
 catch (  Exception e) {
    throw new MigrationFailedException(changeSet,e);
  }
}"
84195,"private void addChangedColumnChanges(List<Change> changes){
  for (  Column column : getChangedColumns()) {
    if (!shouldModifyColumn(column)) {
      continue;
    }
    Column baseColumn=baseSnapshot.getColumn(column);
    if (column.isDataTypeDifferent(baseColumn)) {
      ColumnConfig columnConfig=new ColumnConfig();
      columnConfig.setName(column.getName());
      columnConfig.setType(baseColumn.getDataTypeString(targetDatabase));
      ModifyColumnChange change=new ModifyColumnChange();
      change.setTableName(column.getTable().getName());
      change.setColumn(columnConfig);
      changes.add(change);
    }
    if (column.isNullabilityDifferent(baseColumn)) {
      if (baseColumn.isNullable() == null || baseColumn.isNullable()) {
        DropNotNullConstraintChange change=new DropNotNullConstraintChange();
        change.setTableName(column.getTable().getName());
        change.setColumnName(column.getName());
        change.setColumnDataType(baseColumn.getDataTypeString(targetDatabase));
        changes.add(change);
      }
 else {
        AddNotNullConstraintChange change=new AddNotNullConstraintChange();
        change.setTableName(column.getTable().getName());
        change.setColumnName(column.getName());
        change.setColumnDataType(baseColumn.getDataTypeString(targetDatabase));
        changes.add(change);
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
}","private void addChangedColumnChanges(List<Change> changes){
  for (  Column column : getChangedColumns()) {
    if (!shouldModifyColumn(column)) {
      continue;
    }
    boolean foundDifference=false;
    Column baseColumn=baseSnapshot.getColumn(column);
    if (column.isDataTypeDifferent(baseColumn)) {
      ColumnConfig columnConfig=new ColumnConfig();
      columnConfig.setName(column.getName());
      columnConfig.setType(baseColumn.getDataTypeString(targetDatabase));
      ModifyColumnChange change=new ModifyColumnChange();
      change.setTableName(column.getTable().getName());
      change.setColumn(columnConfig);
      changes.add(change);
      foundDifference=true;
    }
    if (column.isNullabilityDifferent(baseColumn)) {
      if (baseColumn.isNullable() == null || baseColumn.isNullable()) {
        DropNotNullConstraintChange change=new DropNotNullConstraintChange();
        change.setTableName(column.getTable().getName());
        change.setColumnName(column.getName());
        change.setColumnDataType(baseColumn.getDataTypeString(targetDatabase));
        changes.add(change);
        foundDifference=true;
      }
 else {
        AddNotNullConstraintChange change=new AddNotNullConstraintChange();
        change.setTableName(column.getTable().getName());
        change.setColumnName(column.getName());
        change.setColumnDataType(baseColumn.getDataTypeString(targetDatabase));
        changes.add(change);
        foundDifference=true;
      }
    }
    if (!foundDifference) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
}"
84196,"public InputStream getResourceAsStream(String arg0) throws IOException {
  return getChangeLogResource().getInputStream();
}","public InputStream getResourceAsStream(String file) throws IOException {
  Resource resource=getResource(file);
  return resource.getInputStream();
}"
84197,"public Enumeration<URL> getResources(String arg0) throws IOException {
  Vector<URL> tmp=new Vector<URL>();
  tmp.add(getChangeLogResource().getURL());
  return tmp.elements();
}","public Enumeration<URL> getResources(String packageName) throws IOException {
  Vector<URL> tmp=new Vector<URL>();
  tmp.add(getResource(packageName).getURL());
  return tmp.elements();
}"
84198,"/** 
 * Executed automatically when the bean is initialized.
 */
public void afterPropertiesSet() throws LiquibaseException {
  Connection c=null;
  try {
    c=getDataSource().getConnection();
    Migrator migrator=createMigrator(c);
    migrator.init(c);
    setup(migrator);
    if (isWriteSqlFileEnabled() && getSqlOutputDir() != null) {
      if (migrator.listUnrunChangeSets().size() > 0) {
        log.log(Level.WARNING,getExecuteDisabledWarningMessage());
      }
      writeSqlFile(migrator);
    }
    if (isExecuteEnabled()) {
      executeSql(migrator);
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
catch (  IOException e) {
    throw new LiquibaseException(e);
  }
 finally {
    if (c != null) {
      try {
        c.close();
      }
 catch (      SQLException e) {
        ;
      }
    }
  }
}","/** 
 * Executed automatically when the bean is initialized.
 */
public void afterPropertiesSet() throws LiquibaseException {
  Connection c=null;
  try {
    c=getDataSource().getConnection();
    Migrator migrator=createMigrator(c);
    if (StringUtils.trimToNull(contexts) != null) {
      migrator.setContexts(contexts);
    }
    setup(migrator);
    if (isWriteSqlFileEnabled() && getSqlOutputDir() != null) {
      if (migrator.listUnrunChangeSets().size() > 0) {
        log.log(Level.WARNING,getExecuteDisabledWarningMessage());
      }
      writeSqlFile(migrator);
    }
    if (isExecuteEnabled()) {
      executeSql(migrator);
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
catch (  IOException e) {
    throw new LiquibaseException(e);
  }
 finally {
    if (c != null) {
      try {
        c.close();
      }
 catch (      SQLException e) {
        ;
      }
    }
  }
}"
84199,"private Migrator createMigrator(Connection c) throws IOException, JDBCException {
  Migrator m=new Migrator(getChangeLogResource().getURL().toString(),new SpringResourceOpener());
  m.init(c);
  return m;
}","private Migrator createMigrator(Connection c) throws IOException, JDBCException {
  Migrator m=new Migrator(getChangeLog(),new SpringResourceOpener(getChangeLog()));
  m.init(c);
  return m;
}"
84200,"@Test public void createTable_standard() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      CreateTableStatement statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"",false).addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
      assertNotNull(table.getColumn(""String_Node_Str""));
      assertNotNull(table.getColumn(""String_Node_Str""));
      assertNotNull(table.getColumn(""String_Node_Str""));
      assertTrue(table.getColumn(""String_Node_Str"").isPrimaryKey());
      assertNull(StringUtils.trimToNull(table.getColumn(""String_Node_Str"").getDefaultValue()));
      assertTrue(table.getColumn(""String_Node_Str"").getDefaultValue().indexOf(""String_Node_Str"") >= 0);
      assertFalse(table.getColumn(""String_Node_Str"").isAutoIncrement());
    }
  }
);
}","@Test public void createTable_standard() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      CreateTableStatement statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
      assertNotNull(table.getColumn(""String_Node_Str""));
      assertNotNull(table.getColumn(""String_Node_Str""));
      assertNotNull(table.getColumn(""String_Node_Str""));
      assertTrue(table.getColumn(""String_Node_Str"").isPrimaryKey());
      assertNull(StringUtils.trimToNull(table.getColumn(""String_Node_Str"").getDefaultValue()));
      assertTrue(table.getColumn(""String_Node_Str"").getDefaultValue().indexOf(""String_Node_Str"") >= 0);
      assertFalse(table.getColumn(""String_Node_Str"").isAutoIncrement());
    }
  }
);
}"
84201,"@Test public void createTable_deleteCascadeForeignKeyColumn() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      CreateTableStatement statement=new CreateTableStatement(FK_TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"",false).addColumn(""String_Node_Str"",""String_Node_Str"");
      new JdbcTemplate(database).execute(statement);
      String foreignKeyName=""String_Node_Str"";
      ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(foreignKeyName,FK_TABLE_NAME + ""String_Node_Str"");
      fkConstraint.setDeleteCascade(true);
      statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"",false).addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",fkConstraint);
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
      assertNotNull(table.getColumn(""String_Node_Str""));
      ForeignKey foundForeignKey=snapshot.getForeignKey(foreignKeyName);
      assertNotNull(foundForeignKey);
      assertEquals(FK_TABLE_NAME,foundForeignKey.getPrimaryKeyTable().getName().toUpperCase());
      assertEquals(""String_Node_Str"",foundForeignKey.getPrimaryKeyColumn().toUpperCase());
      assertEquals(TABLE_NAME,foundForeignKey.getForeignKeyTable().getName().toUpperCase());
      assertEquals(""String_Node_Str"",foundForeignKey.getForeignKeyColumn().toUpperCase());
    }
  }
);
}","@Test public void createTable_deleteCascadeForeignKeyColumn() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      CreateTableStatement statement=new CreateTableStatement(FK_TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"");
      new JdbcTemplate(database).execute(statement);
      String foreignKeyName=""String_Node_Str"";
      ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(foreignKeyName,FK_TABLE_NAME + ""String_Node_Str"");
      fkConstraint.setDeleteCascade(true);
      statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",fkConstraint);
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
      assertNotNull(table.getColumn(""String_Node_Str""));
      ForeignKey foundForeignKey=snapshot.getForeignKey(foreignKeyName);
      assertNotNull(foundForeignKey);
      assertEquals(FK_TABLE_NAME,foundForeignKey.getPrimaryKeyTable().getName().toUpperCase());
      assertEquals(""String_Node_Str"",foundForeignKey.getPrimaryKeyColumn().toUpperCase());
      assertEquals(TABLE_NAME,foundForeignKey.getForeignKeyTable().getName().toUpperCase());
      assertEquals(""String_Node_Str"",foundForeignKey.getForeignKeyColumn().toUpperCase());
    }
  }
);
}"
84202,"@Test public void createTable_autoincrementPK() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      if (!database.supportsAutoIncrement()) {
        return;
      }
      CreateTableStatement statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"",true).addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
      assertNotNull(table.getColumn(""String_Node_Str""));
      assertTrue(table.getColumn(""String_Node_Str"").isPrimaryKey());
      assertTrue(table.getColumn(""String_Node_Str"").isAutoIncrement());
    }
  }
);
}","@Test public void createTable_autoincrementPK() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      if (!database.supportsAutoIncrement()) {
        return;
      }
      CreateTableStatement statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      statement.addColumnConstraint(new AutoIncrementConstraint(""String_Node_Str""));
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
      assertNotNull(table.getColumn(""String_Node_Str""));
      assertTrue(table.getColumn(""String_Node_Str"").isPrimaryKey());
      assertTrue(table.getColumn(""String_Node_Str"").isAutoIncrement());
    }
  }
);
}"
84203,"@Test public void createTable_foreignKeyColumn() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      String foreignKeyName=""String_Node_Str"";
      ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(foreignKeyName,TABLE_NAME + ""String_Node_Str"");
      CreateTableStatement statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"",false).addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",fkConstraint);
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
      assertNotNull(table.getColumn(""String_Node_Str""));
      ForeignKey foundForeignKey=snapshot.getForeignKey(foreignKeyName);
      assertNotNull(foundForeignKey);
      assertEquals(TABLE_NAME,foundForeignKey.getPrimaryKeyTable().getName().toUpperCase());
      assertEquals(""String_Node_Str"",foundForeignKey.getPrimaryKeyColumn().toUpperCase());
      assertEquals(TABLE_NAME,foundForeignKey.getForeignKeyTable().getName().toUpperCase());
      assertEquals(""String_Node_Str"",foundForeignKey.getForeignKeyColumn().toUpperCase());
    }
  }
);
}","@Test public void createTable_foreignKeyColumn() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      String foreignKeyName=""String_Node_Str"";
      ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(foreignKeyName,TABLE_NAME + ""String_Node_Str"");
      CreateTableStatement statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",fkConstraint);
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
      assertNotNull(table.getColumn(""String_Node_Str""));
      ForeignKey foundForeignKey=snapshot.getForeignKey(foreignKeyName);
      assertNotNull(foundForeignKey);
      assertEquals(TABLE_NAME,foundForeignKey.getPrimaryKeyTable().getName().toUpperCase());
      assertEquals(""String_Node_Str"",foundForeignKey.getPrimaryKeyColumn().toUpperCase());
      assertEquals(TABLE_NAME,foundForeignKey.getForeignKeyTable().getName().toUpperCase());
      assertEquals(""String_Node_Str"",foundForeignKey.getForeignKeyColumn().toUpperCase());
    }
  }
);
}"
84204,"@Test public void addPrimaryKeyColumn_multiColumn(){
  CreateTableStatement statement=new CreateTableStatement(""String_Node_Str"");
  statement.addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"",false);
  statement.addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"",false);
  assertEquals(2,statement.getPrimaryKeyConstraint().getColumns().size());
}","@Test public void addPrimaryKeyColumn_multiColumn(){
  CreateTableStatement statement=new CreateTableStatement(""String_Node_Str"");
  statement.addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"");
  statement.addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"");
  assertEquals(2,statement.getPrimaryKeyConstraint().getColumns().size());
}"
84205,"@Test public void createTable_tablespace() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      if (!database.supportsTablespaces()) {
        return;
      }
      CreateTableStatement statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"",false).addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setTablespace(""String_Node_Str"");
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
    }
  }
);
}","@Test public void createTable_tablespace() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      if (!database.supportsTablespaces()) {
        return;
      }
      CreateTableStatement statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setTablespace(""String_Node_Str"");
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
    }
  }
);
}"
84206,"@Test public void createTable_uniqueColumn() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      if (database instanceof HsqlDatabase) {
        return;
      }
      UniqueConstraint uniqueConstraint=new UniqueConstraint(""String_Node_Str"");
      NotNullConstraint notNullConstraint=new NotNullConstraint();
      CreateTableStatement statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"",false).addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",uniqueConstraint,notNullConstraint);
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
      assertNotNull(table.getColumn(""String_Node_Str""));
    }
  }
);
}","@Test public void createTable_uniqueColumn() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      if (database instanceof HsqlDatabase) {
        return;
      }
      UniqueConstraint uniqueConstraint=new UniqueConstraint(""String_Node_Str"");
      NotNullConstraint notNullConstraint=new NotNullConstraint();
      CreateTableStatement statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",uniqueConstraint,notNullConstraint);
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
      assertNotNull(table.getColumn(""String_Node_Str""));
    }
  }
);
}"
84207,"@Test public void addPrimaryKeyColumn_oneColumn(){
  CreateTableStatement statement=new CreateTableStatement(""String_Node_Str"");
  statement.addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"",false);
  assertEquals(1,statement.getPrimaryKeyConstraint().getColumns().size());
}","@Test public void addPrimaryKeyColumn_oneColumn(){
  CreateTableStatement statement=new CreateTableStatement(""String_Node_Str"");
  statement.addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"");
  assertEquals(1,statement.getPrimaryKeyConstraint().getColumns().size());
}"
84208,"@Test public void createTable_deferrableForeignKeyColumn() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      if (!database.supportsInitiallyDeferrableColumns()) {
        return;
      }
      String foreignKeyName=""String_Node_Str"";
      ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(foreignKeyName,TABLE_NAME + ""String_Node_Str"");
      fkConstraint.setDeferrable(true);
      fkConstraint.setInitiallyDeferred(true);
      CreateTableStatement statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"",false).addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",fkConstraint);
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
      assertNotNull(table.getColumn(""String_Node_Str""));
      ForeignKey foundForeignKey=snapshot.getForeignKey(foreignKeyName);
      assertNotNull(foundForeignKey);
      assertEquals(TABLE_NAME,foundForeignKey.getPrimaryKeyTable().getName().toUpperCase());
      assertEquals(""String_Node_Str"",foundForeignKey.getPrimaryKeyColumn().toUpperCase());
      assertEquals(TABLE_NAME,foundForeignKey.getForeignKeyTable().getName().toUpperCase());
      assertEquals(""String_Node_Str"",foundForeignKey.getForeignKeyColumn().toUpperCase());
      assertTrue(foundForeignKey.isDeferrable());
      assertTrue(foundForeignKey.isInitiallyDeferred());
    }
  }
);
}","@Test public void createTable_deferrableForeignKeyColumn() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws JDBCException {
      if (!database.supportsInitiallyDeferrableColumns()) {
        return;
      }
      String foreignKeyName=""String_Node_Str"";
      ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(foreignKeyName,TABLE_NAME + ""String_Node_Str"");
      fkConstraint.setDeferrable(true);
      fkConstraint.setInitiallyDeferred(true);
      CreateTableStatement statement=new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",fkConstraint);
      new JdbcTemplate(database).execute(statement);
      DatabaseSnapshot snapshot=new DatabaseSnapshot(database);
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
      assertNotNull(table.getColumn(""String_Node_Str""));
      ForeignKey foundForeignKey=snapshot.getForeignKey(foreignKeyName);
      assertNotNull(foundForeignKey);
      assertEquals(TABLE_NAME,foundForeignKey.getPrimaryKeyTable().getName().toUpperCase());
      assertEquals(""String_Node_Str"",foundForeignKey.getPrimaryKeyColumn().toUpperCase());
      assertEquals(TABLE_NAME,foundForeignKey.getForeignKeyTable().getName().toUpperCase());
      assertEquals(""String_Node_Str"",foundForeignKey.getForeignKeyColumn().toUpperCase());
      assertTrue(foundForeignKey.isDeferrable());
      assertTrue(foundForeignKey.isInitiallyDeferred());
    }
  }
);
}"
84209,"public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  CreateTableStatement statement=new CreateTableStatement(tableName);
  for (  ColumnConfig column : getColumns()) {
    ConstraintsConfig constraints=column.getConstraints();
    if (constraints != null && constraints.isPrimaryKey() != null && constraints.isPrimaryKey()) {
      boolean isAutoIncrement=column.isAutoIncrement() != null && column.isAutoIncrement();
      statement.addPrimaryKeyColumn(column.getName(),database.getColumnType(column.getType(),column.isAutoIncrement()),isAutoIncrement);
    }
 else {
      String defaultValue=null;
      if (column.hasDefaultValue()) {
        defaultValue=StringUtils.trimToNull(column.getDefaultColumnValue(database));
      }
      statement.addColumn(column.getName(),database.getColumnType(column.getType(),column.isAutoIncrement()),defaultValue);
    }
    if (constraints != null) {
      if (constraints.isNullable() != null && !constraints.isNullable()) {
        statement.addColumnConstraint(new NotNullConstraint(column.getName()));
      }
      if (constraints.getReferences() != null) {
        ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(constraints.getForeignKeyName(),constraints.getReferences());
        fkConstraint.setColumn(column.getName());
        fkConstraint.setDeleteCascade(constraints.isDeleteCascade() != null && constraints.isDeleteCascade());
        fkConstraint.setInitiallyDeferred(constraints.isInitiallyDeferred() != null && constraints.isInitiallyDeferred());
        fkConstraint.setDeferrable(constraints.isDeferrable() != null && constraints.isDeferrable());
        statement.addColumnConstraint(fkConstraint);
      }
      if (constraints.isUnique() != null && constraints.isUnique()) {
        statement.addColumnConstraint(new UniqueConstraint().addColumns(column.getName()));
      }
    }
  }
  statement.setTablespace(StringUtils.trimToNull(getTablespace()));
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  statements.add(statement);
  return statements.toArray(new SqlStatement[statements.size()]);
}","public SqlStatement[] generateStatements(Database database) throws UnsupportedChangeException {
  CreateTableStatement statement=new CreateTableStatement(tableName);
  for (  ColumnConfig column : getColumns()) {
    ConstraintsConfig constraints=column.getConstraints();
    boolean isAutoIncrement=column.isAutoIncrement() != null && column.isAutoIncrement();
    if (constraints != null && constraints.isPrimaryKey() != null && constraints.isPrimaryKey()) {
      statement.addPrimaryKeyColumn(column.getName(),database.getColumnType(column.getType(),isAutoIncrement));
    }
 else {
      String defaultValue=null;
      if (column.hasDefaultValue()) {
        defaultValue=StringUtils.trimToNull(column.getDefaultColumnValue(database));
      }
      statement.addColumn(column.getName(),database.getColumnType(column.getType(),column.isAutoIncrement()),defaultValue);
    }
    if (constraints != null) {
      if (constraints.isNullable() != null && !constraints.isNullable()) {
        statement.addColumnConstraint(new NotNullConstraint(column.getName()));
      }
      if (constraints.getReferences() != null) {
        ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint(constraints.getForeignKeyName(),constraints.getReferences());
        fkConstraint.setColumn(column.getName());
        fkConstraint.setDeleteCascade(constraints.isDeleteCascade() != null && constraints.isDeleteCascade());
        fkConstraint.setInitiallyDeferred(constraints.isInitiallyDeferred() != null && constraints.isInitiallyDeferred());
        fkConstraint.setDeferrable(constraints.isDeferrable() != null && constraints.isDeferrable());
        statement.addColumnConstraint(fkConstraint);
      }
      if (constraints.isUnique() != null && constraints.isUnique()) {
        statement.addColumnConstraint(new UniqueConstraint().addColumns(column.getName()));
      }
    }
    if (isAutoIncrement) {
      statement.addColumnConstraint(new AutoIncrementConstraint(column.getName()));
    }
  }
  statement.setTablespace(StringUtils.trimToNull(getTablespace()));
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  statements.add(statement);
  return statements.toArray(new SqlStatement[statements.size()]);
}"
84210,"public String getViewDefinition(String viewName) throws JDBCException {
  return (String)new JdbcTemplate(this).queryForObject(getViewDefinitionSql(viewName),String.class);
}","public String getViewDefinition(String viewName) throws JDBCException {
  String definition=(String)new JdbcTemplate(this).queryForObject(getViewDefinitionSql(viewName),String.class);
  return definition.replaceFirst(""String_Node_Str"",""String_Node_Str"");
}"
84211,"protected void dropViews(DatabaseConnection conn) throws JDBCException {
  ResultSet rs=null;
  try {
    rs=conn.getMetaData().getTables(getCatalogName(),getSchemaName(),null,new String[]{""String_Node_Str""});
    while (rs.next()) {
      String tableName=rs.getString(""String_Node_Str"");
      if (getSystemTablesAndViews().contains(tableName)) {
        continue;
      }
      DropViewChange dropChange=new DropViewChange();
      dropChange.setViewName(tableName);
      try {
        log.finest(""String_Node_Str"" + tableName);
        dropChange.executeStatements(this);
      }
 catch (      UnsupportedChangeException e) {
        throw new JDBCException(""String_Node_Str"" + tableName + ""String_Node_Str""+ e.getMessage(),e);
      }
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}","protected void dropViews(DatabaseConnection conn) throws JDBCException {
  ResultSet rs=null;
  try {
    rs=conn.getMetaData().getTables(getCatalogName(),getSchemaName(),null,new String[]{""String_Node_Str""});
    while (rs.next()) {
      String tableName=rs.getString(""String_Node_Str"");
      String schemaName=rs.getString(""String_Node_Str"");
      String catalogName=rs.getString(""String_Node_Str"");
      if (isSystemView(catalogName,schemaName,tableName)) {
        continue;
      }
      DropViewChange dropChange=new DropViewChange();
      dropChange.setViewName(tableName);
      try {
        log.finest(""String_Node_Str"" + tableName);
        dropChange.executeStatements(this);
      }
 catch (      UnsupportedChangeException e) {
        throw new JDBCException(""String_Node_Str"" + tableName + ""String_Node_Str""+ e.getMessage(),e);
      }
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}"
84212,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(COLUMN_NAME,COLUMN_TYPE).addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(COLUMN_NAME,COLUMN_TYPE).addColumn(""String_Node_Str"",""String_Node_Str""),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn(COLUMN_NAME,COLUMN_TYPE).addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(COLUMN_NAME,COLUMN_TYPE).addColumn(""String_Node_Str"",""String_Node_Str""),database);
}"
84213,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addColumn(""String_Node_Str"",""String_Node_Str""),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addColumn(""String_Node_Str"",""String_Node_Str""),database);
}"
84214,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(BASE_TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(BASE_COLUMN_NAME,""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(REF_TABLE_NAME).addPrimaryKeyColumn(REF_COL_NAME,""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,BASE_TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(BASE_COLUMN_NAME,""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,REF_TABLE_NAME).addPrimaryKeyColumn(REF_COL_NAME,""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str""),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,BASE_TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(BASE_COLUMN_NAME,""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(null,REF_TABLE_NAME).addPrimaryKeyColumn(REF_COL_NAME,""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,BASE_TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(BASE_COLUMN_NAME,""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,REF_TABLE_NAME).addPrimaryKeyColumn(REF_COL_NAME,""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str""),database);
}"
84215,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addColumn(COLUMN_NAME,""String_Node_Str"",new NotNullConstraint()).addColumn(COLUMN2_NAME,""String_Node_Str"",new NotNullConstraint()),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addColumn(COLUMN_NAME,""String_Node_Str"",new NotNullConstraint()).addColumn(COLUMN2_NAME,""String_Node_Str"",new NotNullConstraint()),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addColumn(COLUMN_NAME,""String_Node_Str"",new NotNullConstraint()).addColumn(COLUMN2_NAME,""String_Node_Str"",new NotNullConstraint()),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addColumn(COLUMN_NAME,""String_Node_Str"",new NotNullConstraint()).addColumn(COLUMN2_NAME,""String_Node_Str"",new NotNullConstraint()),database);
}"
84216,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addColumn(""String_Node_Str"",""String_Node_Str"",new NotNullConstraint()).addColumn(COLUMN_NAME,""String_Node_Str"",new NotNullConstraint()),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addColumn(""String_Node_Str"",""String_Node_Str"",new NotNullConstraint()).addColumn(COLUMN_NAME,""String_Node_Str"",new NotNullConstraint()),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addColumn(""String_Node_Str"",""String_Node_Str"",new NotNullConstraint()).addColumn(COLUMN_NAME,""String_Node_Str"",new NotNullConstraint()),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addColumn(""String_Node_Str"",""String_Node_Str"",new NotNullConstraint()).addColumn(COLUMN_NAME,""String_Node_Str"",new NotNullConstraint()),database);
}"
84217,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str"").addColumn(COLUMN_NAME2,""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str"").addColumn(COLUMN_NAME2,""String_Node_Str""),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str"").addColumn(COLUMN_NAME2,""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str"").addColumn(COLUMN_NAME2,""String_Node_Str""),database);
}"
84218,"protected SqlStatement generateTestStatement(){
  return new CreateTableStatement(null);
}","protected SqlStatement generateTestStatement(){
  return new CreateTableStatement(null,null);
}"
84219,"@Test public void execute_altSchema() throws Exception {
  final String definition=""String_Node_Str"" + TABLE_NAME;
  new DatabaseTestTemplate().testOnAvailableDatabases(new SqlStatementDatabaseTest(TestContext.ALT_SCHEMA,new CreateViewStatement(TestContext.ALT_SCHEMA,VIEW_NAME,definition)){
    protected boolean supportsTest(    Database database){
      return !(database instanceof HsqlDatabase || database instanceof OracleDatabase);
    }
    protected boolean expectedException(    Database database,    JDBCException exception){
      return !database.supportsSchemas();
    }
    protected void preExecuteAssert(    DatabaseSnapshot snapshot){
      assertNull(snapshot.getView(VIEW_NAME));
    }
    protected void postExecuteAssert(    DatabaseSnapshot snapshot){
      View view=snapshot.getView(VIEW_NAME);
      assertNotNull(view);
      assertEquals(2,view.getColumns().size());
    }
  }
);
}","@Test public void execute_altSchema() throws Exception {
  final String definition=""String_Node_Str"" + TestContext.ALT_SCHEMA + ""String_Node_Str""+ TABLE_NAME;
  new DatabaseTestTemplate().testOnAvailableDatabases(new SqlStatementDatabaseTest(TestContext.ALT_SCHEMA,new CreateViewStatement(TestContext.ALT_SCHEMA,VIEW_NAME,definition)){
    protected boolean supportsTest(    Database database){
      return !(database instanceof HsqlDatabase || database instanceof OracleDatabase);
    }
    protected boolean expectedException(    Database database,    JDBCException exception){
      return !database.supportsSchemas();
    }
    protected void preExecuteAssert(    DatabaseSnapshot snapshot){
      assertNull(snapshot.getView(VIEW_NAME));
    }
    protected void postExecuteAssert(    DatabaseSnapshot snapshot){
      View view=snapshot.getView(VIEW_NAME);
      assertNotNull(view);
      assertEquals(2,view.getColumns().size());
    }
  }
);
}"
84220,"protected void setupDatabase(Database database) throws Exception {
  dropViewIfExists(null,VIEW_NAME,database);
  dropViewIfExists(TestContext.ALT_SCHEMA,VIEW_NAME,database);
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str""),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropViewIfExists(null,VIEW_NAME,database);
  dropViewIfExists(TestContext.ALT_SCHEMA,VIEW_NAME,database);
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str""),database);
}"
84221,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str""),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str""),database);
}"
84222,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str"",""String_Node_Str""),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str"",""String_Node_Str""),database);
}"
84223,"protected void setupDatabase(Database database) throws Exception {
  dropTableIfExists(null,TABLE_NAME,database);
  dropAndCreateTable(new CreateTableStatement(FK_TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",new ForeignKeyConstraint(CONSTRAINT_NAME,FK_TABLE_NAME + ""String_Node_Str"")).addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropTableIfExists(TestContext.ALT_SCHEMA,TABLE_NAME,database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,FK_TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",new ForeignKeyConstraint(ALT_SCHEMA_NAME,TestContext.ALT_SCHEMA + ""String_Node_Str"" + FK_TABLE_NAME+ ""String_Node_Str"")).addColumn(""String_Node_Str"",""String_Node_Str""),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropTableIfExists(null,TABLE_NAME,database);
  dropAndCreateTable(new CreateTableStatement(null,FK_TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",new ForeignKeyConstraint(CONSTRAINT_NAME,FK_TABLE_NAME + ""String_Node_Str"")).addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropTableIfExists(TestContext.ALT_SCHEMA,TABLE_NAME,database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,FK_TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(""String_Node_Str"",""String_Node_Str"",new ForeignKeyConstraint(ALT_SCHEMA_NAME,TestContext.ALT_SCHEMA + ""String_Node_Str"" + FK_TABLE_NAME+ ""String_Node_Str"")).addColumn(""String_Node_Str"",""String_Node_Str""),database);
}"
84224,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str"",new NotNullConstraint()),database);
  new JdbcTemplate(database).execute(new CreateIndexStatement(IDX_NAME,null,TABLE_NAME,COLUMN_NAME));
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str"",new NotNullConstraint()),database);
  if (database.supportsSchemas()) {
    new JdbcTemplate(database).execute(new CreateIndexStatement(ALT_IDX_NAME,TestContext.ALT_SCHEMA,TABLE_NAME,COLUMN_NAME));
  }
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str"",new NotNullConstraint()),database);
  new JdbcTemplate(database).execute(new CreateIndexStatement(IDX_NAME,null,TABLE_NAME,COLUMN_NAME));
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COLUMN_NAME,""String_Node_Str"",new NotNullConstraint()),database);
  if (database.supportsSchemas()) {
    new JdbcTemplate(database).execute(new CreateIndexStatement(ALT_IDX_NAME,TestContext.ALT_SCHEMA,TABLE_NAME,COLUMN_NAME));
  }
}"
84225,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addColumn(COLUMN_NAME,""String_Node_Str"",new PrimaryKeyConstraint(PK_NAME).addColumns(COLUMN_NAME),new NotNullConstraint()).addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addColumn(COLUMN_NAME,""String_Node_Str"",new PrimaryKeyConstraint(PK_NAME).addColumns(COLUMN_NAME),new NotNullConstraint()).addColumn(""String_Node_Str"",""String_Node_Str""),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addColumn(COLUMN_NAME,""String_Node_Str"",new PrimaryKeyConstraint(PK_NAME).addColumns(COLUMN_NAME),new NotNullConstraint()).addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addColumn(COLUMN_NAME,""String_Node_Str"",new PrimaryKeyConstraint(PK_NAME).addColumns(COLUMN_NAME),new NotNullConstraint()).addColumn(""String_Node_Str"",""String_Node_Str""),database);
}"
84226,"@Test public void execute_cascadeConstraints() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new SqlStatementDatabaseTest(null,new DropTableStatement(null,TABLE_NAME,true)){
    protected boolean expectedException(    Database database,    JDBCException exception){
      return database instanceof DerbyDatabase || database instanceof DB2Database || database instanceof FirebirdDatabase;
    }
    protected void preExecuteAssert(    DatabaseSnapshot snapshot){
      assertNotNull(snapshot.getTable(TABLE_NAME));
    }
    protected void postExecuteAssert(    DatabaseSnapshot snapshot){
      assertNull(snapshot.getTable(TABLE_NAME));
    }
  }
);
}","@Test public void execute_cascadeConstraints() throws Exception {
  new DatabaseTestTemplate().testOnAvailableDatabases(new SqlStatementDatabaseTest(null,new DropTableStatement(null,TABLE_NAME,true)){
    protected boolean expectedException(    Database database,    JDBCException exception){
      return database instanceof DerbyDatabase || database instanceof DB2Database || database instanceof FirebirdDatabase|| database instanceof MSSQLDatabase;
    }
    protected void preExecuteAssert(    DatabaseSnapshot snapshot){
      assertNotNull(snapshot.getTable(TABLE_NAME));
    }
    protected void postExecuteAssert(    DatabaseSnapshot snapshot){
      assertNull(snapshot.getTable(TABLE_NAME));
    }
  }
);
}"
84227,"protected boolean expectedException(Database database,JDBCException exception){
  return database instanceof DerbyDatabase || database instanceof DB2Database || database instanceof FirebirdDatabase;
}","protected boolean expectedException(Database database,JDBCException exception){
  return database instanceof DerbyDatabase || database instanceof DB2Database || database instanceof FirebirdDatabase|| database instanceof MSSQLDatabase;
}"
84228,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
}"
84229,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COL_NAME,""String_Node_Str"",new NotNullConstraint(),new UniqueConstraint(CONSTRAINT_NAME)),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COL_NAME,""String_Node_Str"",new NotNullConstraint(),new UniqueConstraint(CONSTRAINT_NAME)),database);
}"
84230,"protected void setupDatabase(Database database) throws Exception {
  dropViewIfExists(null,VIEW_NAME,database);
  dropViewIfExists(TestContext.ALT_SCHEMA,VIEW_NAME,database);
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
  new JdbcTemplate(database).execute(new CreateViewStatement(null,VIEW_NAME,""String_Node_Str"" + TABLE_NAME));
  if (database.supportsSchemas()) {
    new JdbcTemplate(database).execute(new CreateViewStatement(TestContext.ALT_SCHEMA,VIEW_NAME,""String_Node_Str"" + TestContext.ALT_SCHEMA + ""String_Node_Str""+ TABLE_NAME));
  }
}","protected void setupDatabase(Database database) throws Exception {
  dropViewIfExists(null,VIEW_NAME,database);
  dropViewIfExists(TestContext.ALT_SCHEMA,VIEW_NAME,database);
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
  new JdbcTemplate(database).execute(new CreateViewStatement(null,VIEW_NAME,""String_Node_Str"" + TABLE_NAME));
  if (database.supportsSchemas()) {
    new JdbcTemplate(database).execute(new CreateViewStatement(TestContext.ALT_SCHEMA,VIEW_NAME,""String_Node_Str"" + TestContext.ALT_SCHEMA + ""String_Node_Str""+ TABLE_NAME));
  }
}"
84231,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addColumn(VARCHAR_COL_NAME,""String_Node_Str"").addColumn(DATE_COL_NAME,""String_Node_Str"").addColumn(BOOLEAN_COL_NAME,database.getBooleanType()).addColumn(INT_COL_NAME,""String_Node_Str"").addColumn(FLOAT_COL_NAME,""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addColumn(VARCHAR_COL_NAME,""String_Node_Str"").addColumn(DATE_COL_NAME,""String_Node_Str"").addColumn(BOOLEAN_COL_NAME,database.getBooleanType()).addColumn(INT_COL_NAME,""String_Node_Str"").addColumn(FLOAT_COL_NAME,""String_Node_Str""),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addColumn(VARCHAR_COL_NAME,""String_Node_Str"").addColumn(DATE_COL_NAME,""String_Node_Str"").addColumn(BOOLEAN_COL_NAME,database.getBooleanType()).addColumn(INT_COL_NAME,""String_Node_Str"").addColumn(FLOAT_COL_NAME,""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addColumn(VARCHAR_COL_NAME,""String_Node_Str"").addColumn(DATE_COL_NAME,""String_Node_Str"").addColumn(BOOLEAN_COL_NAME,database.getBooleanType()).addColumn(INT_COL_NAME,""String_Node_Str"").addColumn(FLOAT_COL_NAME,""String_Node_Str""),database);
}"
84232,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COL_NAME,DATA_TYPE),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COL_NAME,DATA_TYPE),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COL_NAME,DATA_TYPE),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str"").addColumn(COL_NAME,DATA_TYPE),database);
}"
84233,"protected void setupDatabase(Database database) throws Exception {
  dropTableIfExists(null,NEW_TABLE_NAME,database);
  dropTableIfExists(TestContext.ALT_SCHEMA,NEW_TABLE_NAME,database);
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropTableIfExists(null,NEW_TABLE_NAME,database);
  dropTableIfExists(TestContext.ALT_SCHEMA,NEW_TABLE_NAME,database);
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
}"
84234,"protected void setupDatabase(Database database) throws Exception {
  dropViewIfExists(null,NEW_VIEW_NAME,database);
  dropViewIfExists(TestContext.ALT_SCHEMA,NEW_VIEW_NAME,database);
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateView(new CreateViewStatement(null,VIEW_NAME,""String_Node_Str"" + TABLE_NAME),database);
  dropAndCreateView(new CreateViewStatement(TestContext.ALT_SCHEMA,VIEW_NAME,""String_Node_Str"" + TABLE_NAME),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropViewIfExists(null,NEW_VIEW_NAME,database);
  dropViewIfExists(TestContext.ALT_SCHEMA,NEW_VIEW_NAME,database);
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addPrimaryKeyColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateView(new CreateViewStatement(null,VIEW_NAME,""String_Node_Str"" + TABLE_NAME),database);
  dropAndCreateView(new CreateViewStatement(TestContext.ALT_SCHEMA,VIEW_NAME,""String_Node_Str"" + TABLE_NAME),database);
}"
84235,"protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(TABLE_NAME).addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addColumn(""String_Node_Str"",""String_Node_Str""),database);
}","protected void setupDatabase(Database database) throws Exception {
  dropAndCreateTable(new CreateTableStatement(null,TABLE_NAME).addColumn(""String_Node_Str"",""String_Node_Str""),database);
  dropAndCreateTable(new CreateTableStatement(TestContext.ALT_SCHEMA,TABLE_NAME).addColumn(""String_Node_Str"",""String_Node_Str""),database);
}"
84236,"private DatabaseConnection openConnection(final String url) throws Exception {
  if (connectionsAttempted.containsKey(url)) {
    return connectionsByUrl.get(url);
  }
  connectionsAttempted.put(url,Boolean.TRUE);
  if (System.getProperty(""String_Node_Str"") != null) {
    boolean shouldTest=false;
    String[] databasesToTest=System.getProperty(""String_Node_Str"").split(""String_Node_Str"");
    for (    String database : databasesToTest) {
      if (url.indexOf(database) >= 0) {
        shouldTest=true;
      }
    }
    if (!shouldTest) {
      System.out.println(""String_Node_Str"" + url);
      return null;
    }
  }
  String username=getUsername(url);
  String password=getPassword(url);
  JUnitJDBCDriverClassLoader jdbcDriverLoader=JUnitJDBCDriverClassLoader.getInstance();
  final Driver driver=(Driver)Class.forName(DatabaseFactory.getInstance().findDefaultDriver(url),true,jdbcDriverLoader).newInstance();
  Properties info=new Properties();
  info.put(""String_Node_Str"",username);
  if (password != null) {
    info.put(""String_Node_Str"",password);
  }
  final Connection connection;
  try {
    connection=driver.connect(url,info);
  }
 catch (  SQLException e) {
    System.out.println(""String_Node_Str"" + url + ""String_Node_Str"");
    return null;
  }
  if (connection == null) {
    throw new JDBCException(""String_Node_Str"" + url + ""String_Node_Str""+ driver.getClass().getName()+ ""String_Node_Str"");
  }
  connection.setAutoCommit(false);
  try {
    if (url.startsWith(""String_Node_Str"")) {
      connection.createStatement().execute(""String_Node_Str"" + ALT_SCHEMA + ""String_Node_Str"");
    }
 else     if (url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) {
      connection.createStatement().execute(""String_Node_Str"" + ALT_SCHEMA);
    }
    if (!connection.getAutoCommit()) {
      connection.commit();
    }
  }
 catch (  SQLException e) {
    ;
  }
  Database availableDatabase=DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection);
  DatabaseConnection databaseConnection=availableDatabase.getConnection();
  connectionsByUrl.put(url,databaseConnection);
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    public void run(){
      try {
        try {
          if (!connection.getAutoCommit()) {
            connection.rollback();
          }
        }
 catch (        SQLException e) {
          ;
        }
        connection.close();
      }
 catch (      SQLException e) {
        System.out.println(""String_Node_Str"" + url);
        e.printStackTrace();
      }
    }
  }
));
  return databaseConnection;
}","private DatabaseConnection openConnection(final String url) throws Exception {
  if (connectionsAttempted.containsKey(url)) {
    return connectionsByUrl.get(url);
  }
  connectionsAttempted.put(url,Boolean.TRUE);
  if (System.getProperty(""String_Node_Str"") != null) {
    boolean shouldTest=false;
    String[] databasesToTest=System.getProperty(""String_Node_Str"").split(""String_Node_Str"");
    for (    String database : databasesToTest) {
      if (url.indexOf(database) >= 0) {
        shouldTest=true;
      }
    }
    if (!shouldTest) {
      System.out.println(""String_Node_Str"" + url);
      return null;
    }
  }
  String username=getUsername(url);
  String password=getPassword(url);
  JUnitJDBCDriverClassLoader jdbcDriverLoader=JUnitJDBCDriverClassLoader.getInstance();
  final Driver driver=(Driver)Class.forName(DatabaseFactory.getInstance().findDefaultDriver(url),true,jdbcDriverLoader).newInstance();
  Properties info=new Properties();
  info.put(""String_Node_Str"",username);
  if (password != null) {
    info.put(""String_Node_Str"",password);
  }
  Connection connection;
  try {
    connection=driver.connect(url,info);
  }
 catch (  SQLException e) {
    System.out.println(""String_Node_Str"" + url + ""String_Node_Str"");
    return null;
  }
  if (connection == null) {
    throw new JDBCException(""String_Node_Str"" + url + ""String_Node_Str""+ driver.getClass().getName()+ ""String_Node_Str"");
  }
  Database database=DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection);
  final DatabaseConnection databaseConnection=database.getConnection();
  databaseConnection.setAutoCommit(false);
  try {
    if (url.startsWith(""String_Node_Str"")) {
      databaseConnection.createStatement().execute(""String_Node_Str"" + ALT_SCHEMA + ""String_Node_Str"");
    }
 else     if (url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) {
      databaseConnection.createStatement().execute(""String_Node_Str"" + ALT_SCHEMA);
    }
    if (!databaseConnection.getAutoCommit()) {
      databaseConnection.commit();
    }
  }
 catch (  SQLException e) {
    ;
  }
  connectionsByUrl.put(url,databaseConnection);
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    public void run(){
      try {
        try {
          if (!databaseConnection.getAutoCommit()) {
            databaseConnection.rollback();
          }
        }
 catch (        SQLException e) {
          ;
        }
        databaseConnection.close();
      }
 catch (      SQLException e) {
        System.out.println(""String_Node_Str"" + url);
        e.printStackTrace();
      }
    }
  }
));
  return databaseConnection;
}"
84237,"public void run(){
  try {
    try {
      if (!connection.getAutoCommit()) {
        connection.rollback();
      }
    }
 catch (    SQLException e) {
      ;
    }
    connection.close();
  }
 catch (  SQLException e) {
    System.out.println(""String_Node_Str"" + url);
    e.printStackTrace();
  }
}","public void run(){
  try {
    try {
      if (!databaseConnection.getAutoCommit()) {
        databaseConnection.rollback();
      }
    }
 catch (    SQLException e) {
      ;
    }
    databaseConnection.close();
  }
 catch (  SQLException e) {
    System.out.println(""String_Node_Str"" + url);
    e.printStackTrace();
  }
}"
84238,"public Set<Database> getAvailableDatabases() throws Exception {
  if (availableDatabases == null) {
    availableDatabases=new HashSet<Database>();
    for (    DatabaseConnection conn : getAvailableConnections()) {
      availableDatabases.add(DatabaseFactory.getInstance().findCorrectDatabaseImplementation(conn));
    }
  }
  return availableDatabases;
}","public Set<Database> getAvailableDatabases() throws Exception {
  if (availableDatabases.size() == 0) {
    for (    DatabaseConnection conn : getAvailableConnections()) {
      availableDatabases.add(DatabaseFactory.getInstance().findCorrectDatabaseImplementation(conn));
    }
  }
  return availableDatabases;
}"
84239,"public String convertRequestedSchemaToSchema(String requestedSchema) throws JDBCException {
  return requestedSchema;
}","public String convertRequestedSchemaToSchema(String requestedSchema) throws JDBCException {
  if (requestedSchema == null) {
    return ""String_Node_Str"";
  }
  return requestedSchema;
}"
84240,"public SqlStatement getViewDefinitionSql(String schemaName,String viewName) throws JDBCException {
  String sql=""String_Node_Str"" + viewName.toUpperCase() + ""String_Node_Str"";
  if (StringUtils.trimToNull(schemaName) != null) {
    sql+=""String_Node_Str"" + schemaName + ""String_Node_Str"";
  }
  return new RawSqlStatement(sql);
}","public SqlStatement getViewDefinitionSql(String schemaName,String viewName) throws JDBCException {
  String sql=""String_Node_Str"" + viewName.toUpperCase() + ""String_Node_Str"";
  sql+=""String_Node_Str"" + convertRequestedSchemaToSchema(schemaName) + ""String_Node_Str"";
  sql+=""String_Node_Str"" + getCatalogName() + ""String_Node_Str"";
  return new RawSqlStatement(sql);
}"
84241,"public String getSqlStatement(Database database) throws StatementNotSupportedOnDatabaseException {
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"").append(database.escapeTableName(getSchemaName(),getTableName()));
  if (isCascadeConstraints()) {
    if (database instanceof DerbyDatabase || database instanceof DB2Database || database instanceof FirebirdDatabase) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
    if (database instanceof OracleDatabase) {
      buffer.append(""String_Node_Str"");
    }
 else {
      buffer.append(""String_Node_Str"");
    }
  }
  return buffer.toString();
}","public String getSqlStatement(Database database) throws StatementNotSupportedOnDatabaseException {
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"").append(database.escapeTableName(getSchemaName(),getTableName()));
  if (isCascadeConstraints()) {
    if (database instanceof DerbyDatabase || database instanceof DB2Database || database instanceof MSSQLDatabase|| database instanceof FirebirdDatabase) {
      throw new StatementNotSupportedOnDatabaseException(""String_Node_Str"",this,database);
    }
    if (database instanceof OracleDatabase) {
      buffer.append(""String_Node_Str"");
    }
 else {
      buffer.append(""String_Node_Str"");
    }
  }
  return buffer.toString();
}"
84242,"public ChangeSet(String id,String author,boolean alwaysRun,boolean runOnChange,DatabaseChangeLog databaseChangeLog,String contextList,String dbmsList){
  this.changes=new ArrayList<Change>();
  log=Logger.getLogger(Migrator.DEFAULT_LOG_NAME);
  this.id=id;
  this.author=author;
  this.databaseChangeLog=databaseChangeLog;
  this.alwaysRun=alwaysRun;
  this.runOnChange=runOnChange;
  if (StringUtils.trimToNull(contextList) != null) {
    String[] strings=contextList.toLowerCase().split(""String_Node_Str"");
    if (contexts == null) {
      contexts=new HashSet<String>();
    }
    for (    String string : strings) {
      contexts.add(string.trim().toLowerCase());
    }
  }
  if (StringUtils.trimToNull(dbmsList) != null) {
    String[] strings=dbmsList.toLowerCase().split(""String_Node_Str"");
    if (dbmsSet == null) {
      dbmsSet=new HashSet<String>();
    }
    for (    String string : strings) {
      dbmsSet.add(string.trim().toLowerCase());
    }
  }
}","public ChangeSet(String id,String author,boolean alwaysRun,boolean runOnChange,DatabaseChangeLog databaseChangeLog,String contextList,String dbmsList){
  this.changes=new ArrayList<Change>();
  log=Logger.getLogger(Migrator.DEFAULT_LOG_NAME);
  this.id=id;
  this.author=author;
  this.databaseChangeLog=databaseChangeLog;
  this.alwaysRun=alwaysRun;
  this.runOnChange=runOnChange;
  if (StringUtils.trimToNull(contextList) != null) {
    String[] strings=contextList.toLowerCase().split(""String_Node_Str"");
    contexts=new HashSet<String>();
    for (    String string : strings) {
      contexts.add(string.trim().toLowerCase());
    }
  }
  if (StringUtils.trimToNull(dbmsList) != null) {
    String[] strings=dbmsList.toLowerCase().split(""String_Node_Str"");
    dbmsSet=new HashSet<String>();
    for (    String string : strings) {
      dbmsSet.add(string.trim().toLowerCase());
    }
  }
}"
84243,"@SuppressWarnings({""String_Node_Str""}) public boolean isNullabilityDifferent(Column otherColumn){
  if (this.isNullable() == null && otherColumn.isNullable() == null) {
    return false;
  }
  if (this.isNullable() == null & otherColumn.isNullable() != null) {
    return true;
  }
  if (this.isNullable() != null & otherColumn.isNullable() == null) {
    return true;
  }
  return !this.isNullable().equals(otherColumn.isNullable());
}","@SuppressWarnings({""String_Node_Str""}) public boolean isNullabilityDifferent(Column otherColumn){
  if (this.isNullable() == null && otherColumn.isNullable() == null) {
    return false;
  }
  if (this.isNullable() == null && otherColumn.isNullable() != null) {
    return true;
  }
  if (this.isNullable() != null && otherColumn.isNullable() == null) {
    return true;
  }
  return !this.isNullable().equals(otherColumn.isNullable());
}"
84244,"public int compareTo(ForeignKey o){
  int returnValue=0;
  if (this.getForeignKeyTable() != null & o.getForeignKeyTable() != null) {
    returnValue=this.getForeignKeyTable().compareTo(o.getForeignKeyTable());
  }
  if (returnValue == 0 && this.getForeignKeyColumn() != null & o.getForeignKeyColumn() != null) {
    returnValue=this.getForeignKeyColumn().compareTo(o.getForeignKeyColumn());
  }
  if (returnValue == 0 && this.getPrimaryKeyTable() != null & o.getPrimaryKeyTable() != null) {
    returnValue=this.getPrimaryKeyTable().compareTo(o.getPrimaryKeyTable());
  }
  if (returnValue == 0 && this.getPrimaryKeyColumn() != null & o.getPrimaryKeyColumn() != null) {
    returnValue=this.getPrimaryKeyColumn().compareTo(o.getPrimaryKeyColumn());
  }
  return returnValue;
}","public int compareTo(ForeignKey o){
  int returnValue=0;
  if (this.getForeignKeyTable() != null && o.getForeignKeyTable() != null) {
    returnValue=this.getForeignKeyTable().compareTo(o.getForeignKeyTable());
  }
  if (returnValue == 0 && this.getForeignKeyColumn() != null && o.getForeignKeyColumn() != null) {
    returnValue=this.getForeignKeyColumn().compareTo(o.getForeignKeyColumn());
  }
  if (returnValue == 0 && this.getPrimaryKeyTable() != null && o.getPrimaryKeyTable() != null) {
    returnValue=this.getPrimaryKeyTable().compareTo(o.getPrimaryKeyTable());
  }
  if (returnValue == 0 && this.getPrimaryKeyColumn() != null && o.getPrimaryKeyColumn() != null) {
    returnValue=this.getPrimaryKeyColumn().compareTo(o.getPrimaryKeyColumn());
  }
  return returnValue;
}"
84245,"protected Migrator(String changeLogFile,FileOpener fileOpener,boolean alreadyHasChangeLogLock){
  log=Logger.getLogger(Migrator.DEFAULT_LOG_NAME);
  this.changeLogFile=changeLogFile.replace(""String_Node_Str"",""String_Node_Str"");
  this.fileOpener=fileOpener;
  SAXParserFactory saxParserFactory=SAXParserFactory.newInstance();
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    saxParserFactory.setValidating(false);
    saxParserFactory.setNamespaceAware(false);
  }
 else {
    saxParserFactory.setValidating(true);
    saxParserFactory.setNamespaceAware(true);
  }
  try {
    SAXParser parser=saxParserFactory.newSAXParser();
    try {
      parser.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    SAXNotRecognizedException e) {
      ;
    }
catch (    SAXNotSupportedException e) {
      ;
    }
    xmlReader=parser.getXMLReader();
    xmlReader.setEntityResolver(new MigratorSchemaResolver());
    xmlReader.setErrorHandler(new ErrorHandler(){
      public void warning(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).warning(exception.getMessage());
        throw exception;
      }
      public void error(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).severe(exception.getMessage());
        throw exception;
      }
      public void fatalError(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).severe(exception.getMessage());
        throw exception;
      }
    }
);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  setMode(Mode.EXECUTE_MODE);
  this.hasChangeLogLock=alreadyHasChangeLogLock;
  this.buildVersion=findVersion();
}","protected Migrator(String changeLogFile,FileOpener fileOpener,boolean alreadyHasChangeLogLock){
  log=Logger.getLogger(Migrator.DEFAULT_LOG_NAME);
  if (changeLogFile != null) {
    this.changeLogFile=changeLogFile.replace(""String_Node_Str"",""String_Node_Str"");
  }
  this.fileOpener=fileOpener;
  SAXParserFactory saxParserFactory=SAXParserFactory.newInstance();
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    saxParserFactory.setValidating(false);
    saxParserFactory.setNamespaceAware(false);
  }
 else {
    saxParserFactory.setValidating(true);
    saxParserFactory.setNamespaceAware(true);
  }
  try {
    SAXParser parser=saxParserFactory.newSAXParser();
    try {
      parser.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    SAXNotRecognizedException e) {
      ;
    }
catch (    SAXNotSupportedException e) {
      ;
    }
    xmlReader=parser.getXMLReader();
    xmlReader.setEntityResolver(new MigratorSchemaResolver());
    xmlReader.setErrorHandler(new ErrorHandler(){
      public void warning(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).warning(exception.getMessage());
        throw exception;
      }
      public void error(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).severe(exception.getMessage());
        throw exception;
      }
      public void fatalError(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).severe(exception.getMessage());
        throw exception;
      }
    }
);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  setMode(Mode.EXECUTE_MODE);
  this.hasChangeLogLock=alreadyHasChangeLogLock;
  this.buildVersion=findVersion();
}"
84246,"public void testAbsolutePathChangeLog() throws Exception {
  Enumeration<URL> urls=new JUnitFileOpener().getResources(includedChangeLog);
  URL completeChangeLogURL=urls.nextElement();
  String absolutePathOfChangeLog=completeChangeLogURL.toExternalForm();
  absolutePathOfChangeLog=absolutePathOfChangeLog.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    absolutePathOfChangeLog=absolutePathOfChangeLog.replace('/','\\');
  }
  Migrator migrator=createMigrator(absolutePathOfChangeLog,new FileSystemFileOpener());
  migrator.dropAll();
  migrator.migrate();
  migrator.migrate();
  migrator.dropAll();
}","public void testAbsolutePathChangeLog() throws Exception {
  Enumeration<URL> urls=new JUnitFileOpener().getResources(includedChangeLog);
  URL completeChangeLogURL=urls.nextElement();
  String absolutePathOfChangeLog=completeChangeLogURL.toExternalForm();
  absolutePathOfChangeLog=absolutePathOfChangeLog.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    absolutePathOfChangeLog=absolutePathOfChangeLog.replace('/','\\');
  }
 else {
    absolutePathOfChangeLog=""String_Node_Str"" + absolutePathOfChangeLog;
  }
  Migrator migrator=createMigrator(absolutePathOfChangeLog,new FileSystemFileOpener());
  migrator.dropAll();
  migrator.migrate();
  migrator.migrate();
  migrator.dropAll();
}"
84247,"protected Migrator createMigrator(String changeLogFile) throws Exception {
  JUnitFileOpener fileOpener=new JUnitFileOpener();
  Migrator migrator=new Migrator(changeLogFile,fileOpener);
  migrator.setContexts(""String_Node_Str"");
  migrator.init(connection);
  return migrator;
}","private Migrator createMigrator(String changeLogFile,FileOpener fileOpener) throws JDBCException {
  Migrator migrator=new Migrator(changeLogFile,fileOpener);
  migrator.setContexts(""String_Node_Str"");
  migrator.init(connection);
  return migrator;
}"
84248,"protected AbstractSimpleChangeLogRunnerTest(String changelogDir,String driverName,String url){
  this.completeChangeLog=""String_Node_Str"" + changelogDir + ""String_Node_Str"";
  this.rollbackChangeLog=""String_Node_Str"" + changelogDir + ""String_Node_Str"";
  this.driverName=driverName;
  this.url=url;
  username=""String_Node_Str"";
  password=""String_Node_Str"";
  Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.OFF);
}","protected AbstractSimpleChangeLogRunnerTest(String changelogDir,String driverName,String url){
  this.completeChangeLog=""String_Node_Str"" + changelogDir + ""String_Node_Str"";
  this.rollbackChangeLog=""String_Node_Str"" + changelogDir + ""String_Node_Str"";
  this.includedChangeLog=""String_Node_Str"" + changelogDir + ""String_Node_Str"";
  this.driverName=driverName;
  this.url=url;
  username=""String_Node_Str"";
  password=""String_Node_Str"";
  Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.OFF);
}"
84249,"public Enumeration<URL> getResources(String packageName) throws IOException {
  String directoryPath=(new File(packageName).isAbsolute() || baseDirectory == null) ? packageName : baseDirectory + File.separator + packageName;
  File[] files=new File(directoryPath).listFiles();
  List<URL> results=new ArrayList<URL>();
  for (  File f : files) {
    results.add(new URL(""String_Node_Str"" + f.getCanonicalPath()));
  }
  final Iterator<URL> it=results.iterator();
  Enumeration<URL> eURL=new Enumeration<URL>(){
    public boolean hasMoreElements(){
      return it.hasNext();
    }
    public URL nextElement(){
      return it.next();
    }
  }
;
  return eURL;
}","public Enumeration<URL> getResources(String packageName) throws IOException {
  String directoryPath=(new File(packageName).isAbsolute() || baseDirectory == null) ? packageName : baseDirectory + File.separator + packageName;
  File[] files=new File(directoryPath).listFiles();
  List<URL> results=new ArrayList<URL>();
  for (  File f : files) {
    results.add(new URL(""String_Node_Str"" + f.getCanonicalPath()));
  }
  final Iterator<URL> it=results.iterator();
  return new Enumeration<URL>(){
    public boolean hasMoreElements(){
      return it.hasNext();
    }
    public URL nextElement(){
      return it.next();
    }
  }
;
}"
84250,"protected Migrator(String changeLogFile,FileOpener fileOpener,boolean alreadyHasChangeLogLock){
  log=Logger.getLogger(Migrator.DEFAULT_LOG_NAME);
  this.changeLogFile=changeLogFile;
  this.fileOpener=fileOpener;
  SAXParserFactory saxParserFactory=SAXParserFactory.newInstance();
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    saxParserFactory.setValidating(false);
    saxParserFactory.setNamespaceAware(false);
  }
 else {
    saxParserFactory.setValidating(true);
    saxParserFactory.setNamespaceAware(true);
  }
  try {
    SAXParser parser=saxParserFactory.newSAXParser();
    try {
      parser.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    SAXNotRecognizedException e) {
      ;
    }
catch (    SAXNotSupportedException e) {
      ;
    }
    xmlReader=parser.getXMLReader();
    xmlReader.setEntityResolver(new MigratorSchemaResolver());
    xmlReader.setErrorHandler(new ErrorHandler(){
      public void warning(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).warning(exception.getMessage());
        throw exception;
      }
      public void error(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).severe(exception.getMessage());
        throw exception;
      }
      public void fatalError(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).severe(exception.getMessage());
        throw exception;
      }
    }
);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  setMode(Mode.EXECUTE_MODE);
  this.hasChangeLogLock=alreadyHasChangeLogLock;
  this.buildVersion=findVersion();
}","protected Migrator(String changeLogFile,FileOpener fileOpener,boolean alreadyHasChangeLogLock){
  log=Logger.getLogger(Migrator.DEFAULT_LOG_NAME);
  this.changeLogFile=changeLogFile.replace(""String_Node_Str"",""String_Node_Str"");
  this.fileOpener=fileOpener;
  SAXParserFactory saxParserFactory=SAXParserFactory.newInstance();
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    saxParserFactory.setValidating(false);
    saxParserFactory.setNamespaceAware(false);
  }
 else {
    saxParserFactory.setValidating(true);
    saxParserFactory.setNamespaceAware(true);
  }
  try {
    SAXParser parser=saxParserFactory.newSAXParser();
    try {
      parser.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    SAXNotRecognizedException e) {
      ;
    }
catch (    SAXNotSupportedException e) {
      ;
    }
    xmlReader=parser.getXMLReader();
    xmlReader.setEntityResolver(new MigratorSchemaResolver());
    xmlReader.setErrorHandler(new ErrorHandler(){
      public void warning(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).warning(exception.getMessage());
        throw exception;
      }
      public void error(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).severe(exception.getMessage());
        throw exception;
      }
      public void fatalError(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).severe(exception.getMessage());
        throw exception;
      }
    }
);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  setMode(Mode.EXECUTE_MODE);
  this.hasChangeLogLock=alreadyHasChangeLogLock;
  this.buildVersion=findVersion();
}"
84251,"/** 
 * After the change set has been ran against the database this method will update the change log table with the information.
 */
public void markChangeSetAsRan(ChangeSet changeSet) throws JDBCException, IOException {
  String dateValue=getDatabase().getCurrentDateTimeFunction();
  String sql=""String_Node_Str"" + dateValue + ""String_Node_Str"";
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(escapeStringForDatabase(changeSet.getId())));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getAuthor()));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getDatabaseChangeLog().getFilePath()));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getMd5sum()));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(limitSize(changeSet.getDescription())));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(limitSize(StringUtils.trimToEmpty(changeSet.getComments()))));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getDatabaseChangeLog().getMigrator().getBuildVersion()));
  Writer sqlOutputWriter=getOutputSQLWriter();
  if (sqlOutputWriter == null) {
    DatabaseConnection connection=getDatabase().getConnection();
    try {
      Statement statement=connection.createStatement();
      statement.executeUpdate(sql);
      statement.close();
      connection.commit();
    }
 catch (    SQLException e) {
      throw new JDBCException(e);
    }
  }
 else {
    sqlOutputWriter.write(sql + ""String_Node_Str"" + StreamUtil.getLineSeparator()+ StreamUtil.getLineSeparator());
  }
  getRanChangeSetList().add(new RanChangeSet(changeSet));
}","/** 
 * After the change set has been ran against the database this method will update the change log table with the information.
 */
public void markChangeSetAsRan(ChangeSet changeSet) throws JDBCException, IOException {
  String dateValue=getDatabase().getCurrentDateTimeFunction();
  String sql=""String_Node_Str"" + dateValue + ""String_Node_Str"";
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(escapeStringForDatabase(changeSet.getId())));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getAuthor()));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getDatabaseChangeLog().getFilePath().replace(""String_Node_Str"",""String_Node_Str"")));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getMd5sum()));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(limitSize(changeSet.getDescription())));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(limitSize(StringUtils.trimToEmpty(changeSet.getComments()))));
  sql=sql.replaceFirst(""String_Node_Str"",escapeStringForDatabase(changeSet.getDatabaseChangeLog().getMigrator().getBuildVersion()));
  Writer sqlOutputWriter=getOutputSQLWriter();
  if (sqlOutputWriter == null) {
    DatabaseConnection connection=getDatabase().getConnection();
    try {
      Statement statement=connection.createStatement();
      statement.executeUpdate(sql);
      statement.close();
      connection.commit();
    }
 catch (    SQLException e) {
      throw new JDBCException(e);
    }
  }
 else {
    sqlOutputWriter.write(sql + ""String_Node_Str"" + StreamUtil.getLineSeparator()+ StreamUtil.getLineSeparator());
  }
  getRanChangeSetList().add(new RanChangeSet(changeSet));
}"
84252,"@Test public void getUUIDType(){
  assertNull(getDatabase().getUUIDType());
}","@Test public void getUUIDType(){
  assertEquals(""String_Node_Str"",getDatabase().getUUIDType());
}"
84253,"@Test public void getUUIDType(){
  assertNull(getDatabase().getUUIDType());
}","@Test public void getUUIDType(){
  assertEquals(""String_Node_Str"",getDatabase().getUUIDType());
}"
84254,"protected SqlStatement getViewDefinitionSql(String name) throws JDBCException {
  String sql=""String_Node_Str"" + name + ""String_Node_Str"";
  if (getSchemaName() != null) {
    sql+=""String_Node_Str"" + getSchemaName() + ""String_Node_Str"";
  }
  if (getCatalogName() != null) {
    sql+=""String_Node_Str"" + getCatalogName() + ""String_Node_Str"";
  }
  return new RawSqlStatement(sql);
}","protected SqlStatement getViewDefinitionSql(String viewName) throws JDBCException {
  String sql=""String_Node_Str"" + viewName + ""String_Node_Str"";
  if (getSchemaName() != null) {
    sql+=""String_Node_Str"" + getSchemaName() + ""String_Node_Str"";
  }
  if (getCatalogName() != null) {
    sql+=""String_Node_Str"" + getCatalogName() + ""String_Node_Str"";
  }
  return new RawSqlStatement(sql);
}"
84255,"public String getViewDefinition(String name) throws JDBCException {
  return (String)new JdbcTemplate(this).queryForObject(getViewDefinitionSql(name),String.class);
}","public String getViewDefinition(String viewName) throws JDBCException {
  return (String)new JdbcTemplate(this).queryForObject(getViewDefinitionSql(viewName),String.class);
}"
84256,"protected String getUUIDType(){
  return null;
}","protected String getUUIDType(){
  return ""String_Node_Str"";
}"
84257,"protected String getUUIDType(){
  return null;
}","protected String getUUIDType(){
  return ""String_Node_Str"";
}"
84258,"/** 
 * Returns the type name and any parameters suitable for SQL.
 */
public String getDataTypeString(Database database){
  List<Integer> noParens=Arrays.asList(Types.ARRAY,Types.BIGINT,Types.BINARY,Types.BIT,Types.BLOB,Types.BOOLEAN,Types.CLOB,Types.DATALINK,Types.DATE,Types.DISTINCT,Types.INTEGER,Types.JAVA_OBJECT,Types.LONGVARBINARY,Types.NULL,Types.OTHER,Types.REF,Types.SMALLINT,Types.STRUCT,Types.TIME,Types.TIMESTAMP,Types.TINYINT,Types.VARBINARY);
  List<Integer> oneParam=Arrays.asList(Types.CHAR,Types.LONGVARCHAR,Types.VARCHAR);
  List<Integer> twoParams=Arrays.asList(Types.DECIMAL,Types.DOUBLE,Types.FLOAT,Types.NUMERIC,Types.REAL);
  String translatedTypeName=this.getTypeName();
  if (database instanceof PostgresDatabase) {
    if (""String_Node_Str"".equals(translatedTypeName)) {
      translatedTypeName=""String_Node_Str"";
    }
  }
  String dataType;
  if (noParens.contains(this.getDataType())) {
    dataType=translatedTypeName;
  }
 else   if (oneParam.contains(this.getDataType())) {
    dataType=translatedTypeName + ""String_Node_Str"" + this.getColumnSize()+ ""String_Node_Str"";
  }
 else   if (twoParams.contains(this.getDataType())) {
    dataType=translatedTypeName + ""String_Node_Str"" + this.getColumnSize()+ ""String_Node_Str""+ this.getDecimalDigits()+ ""String_Node_Str"";
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + this.getDataType() + ""String_Node_Str""+ this.getTypeName()+ ""String_Node_Str"");
  }
  return dataType;
}","/** 
 * Returns the type name and any parameters suitable for SQL.
 */
public String getDataTypeString(Database database){
  List<Integer> noParens=Arrays.asList(Types.ARRAY,Types.BIGINT,Types.BINARY,Types.BIT,Types.BLOB,Types.BOOLEAN,Types.CLOB,Types.DATALINK,Types.DATE,Types.DISTINCT,Types.INTEGER,Types.JAVA_OBJECT,Types.LONGVARBINARY,Types.NULL,Types.OTHER,Types.REF,Types.SMALLINT,Types.STRUCT,Types.TIME,Types.TIMESTAMP,Types.TINYINT,Types.LONGVARCHAR);
  List<Integer> oneParam=Arrays.asList(Types.CHAR,Types.VARCHAR,Types.VARBINARY);
  List<Integer> twoParams=Arrays.asList(Types.DECIMAL,Types.DOUBLE,Types.FLOAT,Types.NUMERIC,Types.REAL);
  String translatedTypeName=this.getTypeName();
  if (database instanceof PostgresDatabase) {
    if (""String_Node_Str"".equals(translatedTypeName)) {
      translatedTypeName=""String_Node_Str"";
    }
  }
  String dataType;
  if (noParens.contains(this.getDataType())) {
    dataType=translatedTypeName;
  }
 else   if (oneParam.contains(this.getDataType())) {
    dataType=translatedTypeName + ""String_Node_Str"" + this.getColumnSize()+ ""String_Node_Str"";
  }
 else   if (twoParams.contains(this.getDataType())) {
    dataType=translatedTypeName + ""String_Node_Str"" + this.getColumnSize()+ ""String_Node_Str""+ this.getDecimalDigits()+ ""String_Node_Str"";
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + this.getDataType() + ""String_Node_Str""+ this.getTypeName()+ ""String_Node_Str"");
  }
  return dataType;
}"
84259,"/** 
 * Returns true if it is ""save"" to migrate the database. Currently, ""safe"" is defined as running in an output-sql mode or against a database on localhost. It is fine to run the migrator against a ""non-safe"" database, the method is mainly used to determine if the user should be prompted before continuing.
 */
public boolean isSafeToRunMigration() throws JDBCException {
  if (Mode.OUTPUT_SQL_MODE.equals(getMode()) || Mode.OUTPUT_CHANGELOG_ONLY_SQL_MODE.equals(getMode())) {
    return true;
  }
  return getDatabase().getConnectionURL().indexOf(""String_Node_Str"") >= 0;
}","/** 
 * Returns true if it is ""save"" to migrate the database. Currently, ""safe"" is defined as running in an output-sql mode or against a database on localhost. It is fine to run the migrator against a ""non-safe"" database, the method is mainly used to determine if the user should be prompted before continuing.
 */
public boolean isSafeToRunMigration() throws JDBCException {
  return Mode.OUTPUT_SQL_MODE.equals(getMode()) || Mode.OUTPUT_CHANGELOG_ONLY_SQL_MODE.equals(getMode()) || getDatabase().getConnectionURL().indexOf(""String_Node_Str"") >= 0;
}"
84260,"public InputSource resolveEntity(String publicId,String systemId) throws IOException {
  if (systemId != null) {
    int iSlash=systemId.lastIndexOf('/');
    if (iSlash >= 0) {
      String xsdFile=systemId.substring(iSlash + 1);
      try {
        InputStream resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(SEARCH_PACKAGE + xsdFile);
        if (resourceAsStream == null) {
          return null;
        }
        InputSource source=new InputSource(resourceAsStream);
        source.setPublicId(publicId);
        source.setSystemId(systemId);
        return source;
      }
 catch (      Exception ex) {
        return null;
      }
    }
  }
  return null;
}","public InputSource resolveEntity(String publicId,String systemId) throws IOException {
  if (systemId != null) {
    int iSlash=systemId.lastIndexOf('/');
    if (iSlash >= 0) {
      String xsdFile=systemId.substring(iSlash + 1);
      try {
        InputStream resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(SEARCH_PACKAGE + xsdFile);
        if (resourceAsStream == null) {
          resourceAsStream=this.getClass().getClassLoader().getResourceAsStream(SEARCH_PACKAGE + xsdFile);
        }
        if (resourceAsStream == null) {
          return null;
        }
        InputSource source=new InputSource(resourceAsStream);
        source.setPublicId(publicId);
        source.setSystemId(systemId);
        return source;
      }
 catch (      Exception ex) {
        return null;
      }
    }
  }
  return null;
}"
84261,"/** 
 * Tags the database changelog with the given string.
 */
public void tag(String tagString) throws MigrationFailedException {
  Connection conn=getConnection();
  PreparedStatement stmt=null;
  try {
    stmt=conn.prepareStatement(createChangeToTagSQL());
    ResultSet rs=stmt.executeQuery();
    if (!rs.next()) {
      throw new MigrationFailedException(""String_Node_Str"");
    }
    Timestamp lastExecutedDate=rs.getTimestamp(1);
    rs.close();
    stmt.close();
    stmt=conn.prepareStatement(createTagSQL());
    stmt.setString(1,tagString);
    stmt.setTimestamp(2,lastExecutedDate);
    int rowsUpdated=stmt.executeUpdate();
    if (rowsUpdated == 0) {
      throw new MigrationFailedException(""String_Node_Str"");
    }
    conn.commit();
  }
 catch (  Exception e) {
    throw new MigrationFailedException(e);
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
      }
    }
  }
}","/** 
 * Tags the database changelog with the given string.
 */
public void tag(String tagString) throws MigrationFailedException {
  Connection conn=getConnection();
  PreparedStatement stmt=null;
  Statement countStatement=null;
  ResultSet countRS=null;
  try {
    stmt=conn.prepareStatement(createChangeToTagSQL());
    ResultSet rs=stmt.executeQuery();
    if (!rs.next()) {
      throw new MigrationFailedException(""String_Node_Str"");
    }
    Timestamp lastExecutedDate=rs.getTimestamp(1);
    rs.close();
    stmt.close();
    stmt=conn.prepareStatement(createTagSQL());
    stmt.setString(1,tagString);
    stmt.setTimestamp(2,lastExecutedDate);
    int rowsUpdated=stmt.executeUpdate();
    if (rowsUpdated == 0) {
      countStatement=conn.createStatement();
      countRS=countStatement.executeQuery(""String_Node_Str"" + getDatabaseChangeLogTableName());
      countRS.next();
      if (countRS.getInt(1) == 0) {
        throw new MigrationFailedException(""String_Node_Str"");
      }
      countRS.close();
      throw new MigrationFailedException(""String_Node_Str"");
    }
    conn.commit();
  }
 catch (  Exception e) {
    throw new MigrationFailedException(e);
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        ;
      }
    }
    if (countStatement != null) {
      try {
        countStatement.close();
      }
 catch (      SQLException e) {
        ;
      }
    }
  }
}"
84262,"/** 
 * This method will check the database ChangeLog table used to keep track of the changes in the file. If the table does not exist it will create one otherwise it will not do anything besides outputting a log message.
 */
public void checkDatabaseChangeLogTable(Migrator migrator) throws JDBCException, IOException {
  Statement statement=null;
  Connection connection=getConnection();
  ResultSet checkTableRS=null;
  ResultSet checkColumnsRS=null;
  List<String> statementsToExecute=new ArrayList<String>();
  boolean wroteToOutput=false;
  try {
    checkTableRS=connection.getMetaData().getTables(getCatalogName(),getSchemaName(),getDatabaseChangeLogTableName(),new String[]{""String_Node_Str""});
    if (checkTableRS.next()) {
      changeLogTableExists=true;
      checkColumnsRS=connection.getMetaData().getColumns(getCatalogName(),getSchemaName(),getDatabaseChangeLogTableName(),null);
      boolean hasDescription=false;
      boolean hasComments=false;
      boolean hasTag=false;
      boolean hasLiquibase=false;
      while (checkColumnsRS.next()) {
        String columnName=checkColumnsRS.getString(""String_Node_Str"");
        if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasDescription=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasComments=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasTag=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasLiquibase=true;
        }
      }
      if (!hasDescription) {
        statementsToExecute.add(""String_Node_Str"");
      }
      if (!hasTag) {
        statementsToExecute.add(""String_Node_Str"");
      }
      if (!hasComments) {
        statementsToExecute.add(""String_Node_Str"");
      }
      if (!hasLiquibase) {
        statementsToExecute.add(""String_Node_Str"");
      }
    }
 else     if (!changeLogCreateAttempted) {
      changeLogCreateAttempted=true;
      String createTableStatement=getCreateChangeLogSQL();
      if (!canCreateChangeLogTable()) {
        throw new JDBCException(""String_Node_Str"" + ""String_Node_Str"" + createTableStatement);
      }
      statementsToExecute.add(createTableStatement);
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        log.info(""String_Node_Str"");
        changeLogTableExists=true;
      }
    }
    for (    String sql : statementsToExecute) {
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        statement=connection.createStatement();
        statement.executeUpdate(sql);
        connection.commit();
      }
 else {
        if (!migrator.getMode().equals(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE)) {
          migrator.getOutputSQLWriter().append(sql).append(""String_Node_Str"").append(StreamUtil.getLineSeparator());
          wroteToOutput=true;
        }
      }
    }
    if (wroteToOutput) {
      migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (checkTableRS != null) {
      try {
        checkTableRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (checkColumnsRS != null) {
      try {
        checkColumnsRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}","/** 
 * This method will check the database ChangeLog table used to keep track of the changes in the file. If the table does not exist it will create one otherwise it will not do anything besides outputting a log message.
 */
public void checkDatabaseChangeLogTable(Migrator migrator) throws JDBCException, IOException {
  Statement statement=null;
  Connection connection=getConnection();
  ResultSet checkTableRS=null;
  ResultSet checkColumnsRS=null;
  List<String> statementsToExecute=new ArrayList<String>();
  boolean wroteToOutput=false;
  try {
    checkTableRS=connection.getMetaData().getTables(getCatalogName(),getSchemaName(),getDatabaseChangeLogTableName(),new String[]{""String_Node_Str""});
    if (checkTableRS.next()) {
      changeLogTableExists=true;
      checkColumnsRS=connection.getMetaData().getColumns(getCatalogName(),getSchemaName(),getDatabaseChangeLogTableName(),null);
      boolean hasDescription=false;
      boolean hasComments=false;
      boolean hasTag=false;
      boolean hasLiquibase=false;
      while (checkColumnsRS.next()) {
        String columnName=checkColumnsRS.getString(""String_Node_Str"");
        if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasDescription=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasComments=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasTag=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasLiquibase=true;
        }
      }
      if (!hasDescription) {
        statementsToExecute.add(""String_Node_Str"");
      }
      if (!hasTag) {
        statementsToExecute.add(""String_Node_Str"");
      }
      if (!hasComments) {
        statementsToExecute.add(""String_Node_Str"");
      }
      if (!hasLiquibase) {
        statementsToExecute.add(""String_Node_Str"");
      }
    }
 else     if (!changeLogCreateAttempted) {
      changeLogCreateAttempted=true;
      String createTableStatement=getCreateChangeLogSQL();
      if (!canCreateChangeLogTable()) {
        throw new JDBCException(""String_Node_Str"" + ""String_Node_Str"" + createTableStatement);
      }
      statementsToExecute.add(createTableStatement);
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        log.info(""String_Node_Str"");
        changeLogTableExists=true;
      }
    }
    for (    String sql : statementsToExecute) {
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        statement=connection.createStatement();
        statement.executeUpdate(sql);
        connection.commit();
      }
 else {
        if (!migrator.getMode().equals(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE)) {
          Writer writer=migrator.getOutputSQLWriter();
          if (writer == null) {
            wroteToOutput=false;
          }
 else {
            writer.append(sql).append(""String_Node_Str"").append(StreamUtil.getLineSeparator());
            wroteToOutput=true;
          }
        }
      }
    }
    if (wroteToOutput) {
      migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (checkTableRS != null) {
      try {
        checkTableRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (checkColumnsRS != null) {
      try {
        checkColumnsRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}"
84263,"public void testDiff() throws Exception {
  runCompleteChangeLog();
  Diff diff=new Diff();
  diff.init(connection,connection);
  DiffResult diffResult=diff.compare();
  assertEquals(0,diffResult.getMissingColumns().size());
  assertEquals(0,diffResult.getMissingForeignKeys().size());
  assertEquals(0,diffResult.getMissingIndexes().size());
  assertEquals(0,diffResult.getMissingPrimaryKeys().size());
  assertEquals(0,diffResult.getMissingSequences().size());
  assertEquals(0,diffResult.getMissingColumns().size());
  assertEquals(0,diffResult.getMissingTables().size());
  assertEquals(0,diffResult.getMissingViews().size());
  assertEquals(0,diffResult.getUnexpectedColumns().size());
  assertEquals(0,diffResult.getUnexpectedForeignKeys().size());
  assertEquals(0,diffResult.getUnexpectedIndexes().size());
  assertEquals(0,diffResult.getUnexpectedPrimaryKeys().size());
  assertEquals(0,diffResult.getUnexpectedSequences().size());
  assertEquals(0,diffResult.getUnexpectedColumns().size());
  assertEquals(0,diffResult.getUnexpectedTables().size());
  assertEquals(0,diffResult.getUnexpectedViews().size());
}","public void testDiff() throws Exception {
  runCompleteChangeLog();
  Diff diff=new Diff(connection,connection);
  DiffResult diffResult=diff.compare();
  assertEquals(0,diffResult.getMissingColumns().size());
  assertEquals(0,diffResult.getMissingForeignKeys().size());
  assertEquals(0,diffResult.getMissingIndexes().size());
  assertEquals(0,diffResult.getMissingPrimaryKeys().size());
  assertEquals(0,diffResult.getMissingSequences().size());
  assertEquals(0,diffResult.getMissingColumns().size());
  assertEquals(0,diffResult.getMissingTables().size());
  assertEquals(0,diffResult.getMissingViews().size());
  assertEquals(0,diffResult.getUnexpectedColumns().size());
  assertEquals(0,diffResult.getUnexpectedForeignKeys().size());
  assertEquals(0,diffResult.getUnexpectedIndexes().size());
  assertEquals(0,diffResult.getUnexpectedPrimaryKeys().size());
  assertEquals(0,diffResult.getUnexpectedSequences().size());
  assertEquals(0,diffResult.getUnexpectedColumns().size());
  assertEquals(0,diffResult.getUnexpectedTables().size());
  assertEquals(0,diffResult.getUnexpectedViews().size());
}"
84264,"public void testRerunDiffChangeLog() throws Exception {
  runCompleteChangeLog();
  Diff diff=new Diff();
  diff.init(connection);
  DiffResult diffResult=diff.compare();
  File tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  FileOutputStream output=new FileOutputStream(tempFile);
  diffResult.printChangeLog(new PrintStream(output),DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection));
  output.flush();
  output.close();
  Migrator migrator=createMigrator(tempFile.getName());
  migrator.dropAll();
  migrator=createMigrator(tempFile.getName());
  try {
    migrator.migrate();
  }
 catch (  ValidationFailedException e) {
    e.printDescriptiveError(System.out);
    throw e;
  }
  tempFile.deleteOnExit();
}","public void testRerunDiffChangeLog() throws Exception {
  runCompleteChangeLog();
  DatabaseSnapshot originalSnapshot=new DatabaseSnapshot(DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection));
  Diff diff=new Diff(connection);
  DiffResult diffResult=diff.compare();
  File tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  FileOutputStream output=new FileOutputStream(tempFile);
  diffResult.printChangeLog(new PrintStream(output),DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection));
  output.flush();
  output.close();
  Migrator migrator=createMigrator(tempFile.getName());
  migrator.dropAll();
  migrator=createMigrator(tempFile.getName());
  try {
    migrator.migrate();
  }
 catch (  ValidationFailedException e) {
    e.printDescriptiveError(System.out);
    throw e;
  }
  tempFile.deleteOnExit();
  DatabaseSnapshot finalSnapshot=new DatabaseSnapshot(DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection));
  DiffResult finalDiffResult=new Diff(originalSnapshot,finalSnapshot).compare();
  assertEquals(0,finalDiffResult.getMissingColumns().size());
  assertEquals(0,finalDiffResult.getMissingForeignKeys().size());
  assertEquals(0,finalDiffResult.getMissingIndexes().size());
  assertEquals(0,finalDiffResult.getMissingPrimaryKeys().size());
  assertEquals(0,finalDiffResult.getMissingTables().size());
  assertEquals(0,finalDiffResult.getUnexpectedColumns().size());
  assertEquals(0,finalDiffResult.getUnexpectedForeignKeys().size());
  assertEquals(0,finalDiffResult.getUnexpectedIndexes().size());
  assertEquals(0,finalDiffResult.getUnexpectedPrimaryKeys().size());
  assertEquals(0,finalDiffResult.getUnexpectedSequences().size());
  assertEquals(0,finalDiffResult.getUnexpectedTables().size());
  assertEquals(0,finalDiffResult.getUnexpectedViews().size());
}"
84265,"public SybaseSampleChangeLogRunnerTest() throws Exception {
  super(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public SybaseSampleChangeLogRunnerTest() throws Exception {
  super(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + InetAddress.getLocalHost().getHostName() + ""String_Node_Str"");
}"
84266,"private String[] getTableTypes() throws JDBCException {
  List<String> wantedTypes=new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  List<String> availableTypes=new ArrayList<String>();
  try {
    ResultSet types=connection.getMetaData().getTableTypes();
    while (types.next()) {
      availableTypes.add(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
  List<String> returnTypes=new ArrayList<String>();
  for (  String type : wantedTypes) {
    if (availableTypes.contains(type)) {
      returnTypes.add(type);
    }
  }
  return returnTypes.toArray(new String[returnTypes.size()]);
}","private String[] getTableTypes() throws JDBCException {
  List<String> wantedTypes=new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  List<String> availableTypes=new ArrayList<String>();
  try {
    ResultSet types=connection.getMetaData().getTableTypes();
    while (types.next()) {
      availableTypes.add(types.getString(""String_Node_Str"").trim());
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
  List<String> returnTypes=new ArrayList<String>();
  for (  String type : wantedTypes) {
    if (availableTypes.contains(type)) {
      returnTypes.add(type);
    }
  }
  return returnTypes.toArray(new String[returnTypes.size()]);
}"
84267,"public Database findCorrectDatabaseImplementation(Connection connection) throws JDBCException {
  Database database=null;
  boolean foundImplementation=false;
  Database[] implementedDatabases=getImplementedDatabases();
  for (int i=0; i < implementedDatabases.length; i++) {
    database=implementedDatabases[i];
    if (database.isCorrectDatabaseImplementation(connection)) {
      foundImplementation=true;
      break;
    }
  }
  if (!foundImplementation) {
    try {
      log.warning(""String_Node_Str"" + connection.getMetaData().getDatabaseProductName());
    }
 catch (    SQLException e) {
      throw new JDBCException(e);
    }
    database=new UnsupportedDatabase();
  }
  return database;
}","public Database findCorrectDatabaseImplementation(Connection connection) throws JDBCException {
  Database database=null;
  boolean foundImplementation=false;
  Database[] implementedDatabases=getImplementedDatabases();
  for (int i=0; i < implementedDatabases.length; i++) {
    database=implementedDatabases[i];
    if (database.isCorrectDatabaseImplementation(connection)) {
      foundImplementation=true;
      break;
    }
  }
  if (!foundImplementation) {
    try {
      log.warning(""String_Node_Str"" + connection.getMetaData().getDatabaseProductName());
    }
 catch (    SQLException e) {
      throw new JDBCException(e);
    }
    database=new UnsupportedDatabase();
  }
  database.setConnection(connection);
  return database;
}"
84268,"public void dropDatabaseObjects() throws JDBCException, MigrationFailedException {
  Connection conn=getConnection();
  Statement dropStatement=null;
  try {
    dropStatement=conn.createStatement();
    dropStatement.executeUpdate(""String_Node_Str"" + getConnectionUsername());
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    try {
      if (dropStatement != null) {
        dropStatement.close();
      }
      conn.commit();
    }
 catch (    SQLException e) {
      throw new JDBCException(e);
    }
  }
}","public void dropDatabaseObjects() throws JDBCException, MigrationFailedException {
  Connection conn=getConnection();
  Statement dropStatement=null;
  try {
    dropStatement=conn.createStatement();
    dropStatement.executeUpdate(""String_Node_Str"" + getConnectionUsername());
    changeLogTableExists=false;
    changeLogLockTableExists=false;
    changeLogCreateAttempted=false;
    changeLogLockCreateAttempted=false;
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    try {
      if (dropStatement != null) {
        dropStatement.close();
      }
      conn.commit();
    }
 catch (    SQLException e) {
      throw new JDBCException(e);
    }
  }
}"
84269,"private void readIndexes() throws JDBCException, SQLException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  for (  Table table : tablesMap.values()) {
    ResultSet rs;
    try {
      rs=databaseMetaData.getIndexInfo(database.getCatalogName(),database.getSchemaName(),table.getName(),true,true);
    }
 catch (    SQLException e) {
      throw e;
    }
    Map<String,Index> indexMap=new HashMap<String,Index>();
    while (rs.next()) {
      String indexName=rs.getString(""String_Node_Str"");
      short type=rs.getShort(""String_Node_Str"");
      String tableName=rs.getString(""String_Node_Str"");
      String columnName=rs.getString(""String_Node_Str"");
      boolean isPKIndex=false;
      for (      PrimaryKey pk : primaryKeys) {
        if (pk.getTableName().equalsIgnoreCase(tableName) && pk.getColumnNames().equalsIgnoreCase(columnName)) {
          isPKIndex=true;
          break;
        }
      }
      if (isPKIndex || type == DatabaseMetaData.tableIndexStatistic) {
        continue;
      }
      if (columnName == null) {
        continue;
      }
      Index indexInformation;
      if (indexMap.containsKey(indexName)) {
        indexInformation=indexMap.get(indexName);
      }
 else {
        indexInformation=new Index();
        indexInformation.setTableName(tableName);
        indexInformation.setName(indexName);
        indexMap.put(indexName,indexInformation);
      }
      indexInformation.getColumns().add(columnName);
    }
    for (    String key : indexMap.keySet()) {
      indexes.add(indexMap.get(key));
    }
    rs.close();
  }
}","private void readIndexes() throws JDBCException, SQLException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  for (  Table table : tablesMap.values()) {
    ResultSet rs;
    try {
      rs=databaseMetaData.getIndexInfo(database.getCatalogName(),database.getSchemaName(),table.getName(),true,true);
    }
 catch (    SQLException e) {
      throw e;
    }
    Map<String,Index> indexMap=new HashMap<String,Index>();
    while (rs.next()) {
      String indexName=rs.getString(""String_Node_Str"");
      short type=rs.getShort(""String_Node_Str"");
      String tableName=rs.getString(""String_Node_Str"");
      String columnName=rs.getString(""String_Node_Str"");
      if (type == DatabaseMetaData.tableIndexStatistic) {
        continue;
      }
      if (columnName == null) {
        continue;
      }
      Index indexInformation;
      if (indexMap.containsKey(indexName)) {
        indexInformation=indexMap.get(indexName);
      }
 else {
        indexInformation=new Index();
        indexInformation.setTableName(tableName);
        indexInformation.setName(indexName);
        indexMap.put(indexName,indexInformation);
      }
      indexInformation.getColumns().add(columnName);
    }
    for (    String key : indexMap.keySet()) {
      indexes.add(indexMap.get(key));
    }
    rs.close();
  }
  Set<Index> indexesToRemove=new HashSet<Index>();
  for (  Index index : indexes) {
    for (    PrimaryKey pk : primaryKeys) {
      if (index.getTableName().equalsIgnoreCase(pk.getTableName()) && index.getColumnNames().equals(pk.getColumnNames())) {
        indexesToRemove.add(index);
      }
    }
  }
  indexes.removeAll(indexesToRemove);
}"
84270,"private void readColumns() throws SQLException, JDBCException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  ResultSet rs=databaseMetaData.getColumns(database.getCatalogName(),database.getSchemaName(),null,null);
  while (rs.next()) {
    Column columnInfo=new Column();
    String tableName=rs.getString(""String_Node_Str"");
    String columnName=rs.getString(""String_Node_Str"");
    String schemaName=rs.getString(""String_Node_Str"");
    String catalogName=rs.getString(""String_Node_Str"");
    if (database.isSystemTable(catalogName,schemaName,tableName) || database.isLiquibaseTable(tableName)) {
      continue;
    }
    Table table=tablesMap.get(tableName);
    if (table == null) {
      View view=viewsMap.get(tableName);
      if (view == null) {
        log.info(""String_Node_Str"" + tableName + ""String_Node_Str""+ columnName);
        continue;
      }
 else {
        columnInfo.setView(view);
        view.getColumns().add(columnInfo);
      }
    }
 else {
      columnInfo.setTable(table);
      table.getColumns().add(columnInfo);
    }
    columnInfo.setName(columnName);
    columnInfo.setDataType(rs.getInt(""String_Node_Str""));
    columnInfo.setColumnSize(rs.getInt(""String_Node_Str""));
    columnInfo.setDecimalDigits(rs.getInt(""String_Node_Str""));
    columnInfo.setTypeName(rs.getString(""String_Node_Str""));
    String defaultValue=rs.getString(""String_Node_Str"");
    columnInfo.setAutoIncrement(isAutoIncrement(defaultValue,database));
    columnInfo.setDefaultValue(translateDefaultValue(defaultValue,database));
    int nullable=rs.getInt(""String_Node_Str"");
    if (nullable == DatabaseMetaData.columnNoNulls) {
      columnInfo.setNullable(false);
    }
 else     if (nullable == DatabaseMetaData.columnNullable) {
      columnInfo.setNullable(true);
    }
    columnsMap.put(columnName,columnInfo);
  }
  rs.close();
}","private void readColumns() throws SQLException, JDBCException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  ResultSet rs=databaseMetaData.getColumns(database.getCatalogName(),database.getSchemaName(),null,null);
  while (rs.next()) {
    Column columnInfo=new Column();
    String tableName=rs.getString(""String_Node_Str"");
    String columnName=rs.getString(""String_Node_Str"");
    String schemaName=rs.getString(""String_Node_Str"");
    String catalogName=rs.getString(""String_Node_Str"");
    if (database.isSystemTable(catalogName,schemaName,tableName) || database.isLiquibaseTable(tableName)) {
      continue;
    }
    Table table=tablesMap.get(tableName);
    if (table == null) {
      View view=viewsMap.get(tableName);
      if (view == null) {
        log.info(""String_Node_Str"" + tableName + ""String_Node_Str""+ columnName);
        continue;
      }
 else {
        columnInfo.setView(view);
        view.getColumns().add(columnInfo);
      }
    }
 else {
      columnInfo.setTable(table);
      table.getColumns().add(columnInfo);
    }
    columnInfo.setName(columnName);
    columnInfo.setDataType(rs.getInt(""String_Node_Str""));
    columnInfo.setColumnSize(rs.getInt(""String_Node_Str""));
    columnInfo.setDecimalDigits(rs.getInt(""String_Node_Str""));
    columnInfo.setTypeName(rs.getString(""String_Node_Str""));
    String defaultValue=rs.getString(""String_Node_Str"");
    columnInfo.setAutoIncrement(isAutoIncrement(defaultValue,database));
    columnInfo.setDefaultValue(translateDefaultValue(defaultValue,database));
    int nullable=rs.getInt(""String_Node_Str"");
    if (nullable == DatabaseMetaData.columnNoNulls) {
      columnInfo.setNullable(false);
    }
 else     if (nullable == DatabaseMetaData.columnNullable) {
      columnInfo.setNullable(true);
    }
    columnsMap.put(tableName + ""String_Node_Str"" + columnName,columnInfo);
  }
  rs.close();
}"
84271,"/** 
 * This method will check the database ChangeLogLock table used to keep track of if a machine is updating the database. If the table does not exist it will create one otherwise it will not do anything besides outputting a log message.
 */
public void checkDatabaseChangeLogLockTable(Migrator migrator) throws JDBCException, IOException {
  Statement statement=null;
  Connection connection=getConnection();
  ResultSet rs=null;
  changeLogLockTableExists=true;
  try {
    rs=connection.getMetaData().getTables(getCatalogName(),getSchemaName(),getDatabaseChangeLogLockTableName(),new String[]{""String_Node_Str""});
    if (!rs.next()) {
      String createTableStatement=getCreateChangeLogLockSQL();
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        statement=connection.createStatement();
        statement.executeUpdate(createTableStatement);
        connection.commit();
        log.info(""String_Node_Str"");
      }
 else {
        if (!migrator.getMode().equals(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE)) {
          if (!outputtedLockWarning) {
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + StreamUtil.getLineSeparator());
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + StreamUtil.getLineSeparator());
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + StreamUtil.getLineSeparator());
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + StreamUtil.getLineSeparator());
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + getCreateChangeLogLockSQL()+ ""String_Node_Str""+ StreamUtil.getLineSeparator());
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + getChangeLogLockInsertSQL()+ ""String_Node_Str""+ StreamUtil.getLineSeparator());
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + StreamUtil.getLineSeparator()+ StreamUtil.getLineSeparator());
            outputtedLockWarning=true;
          }
          migrator.getOutputSQLWriter().append(createTableStatement);
          migrator.getOutputSQLWriter().append(""String_Node_Str"");
          migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
          migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
        }
        changeLogLockTableExists=false;
      }
    }
    rs.close();
    if (statement != null) {
      statement.close();
    }
    String insertRowStatment=getChangeLogLockInsertSQL();
    if (changeLogLockTableExists) {
      statement=connection.createStatement();
      rs=statement.executeQuery(""String_Node_Str"".toUpperCase());
      if (!rs.next()) {
        if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
          statement=connection.createStatement();
          statement.executeUpdate(insertRowStatment);
          connection.commit();
          log.info(""String_Node_Str"");
        }
 else {
          migrator.getOutputSQLWriter().append(insertRowStatment);
          migrator.getOutputSQLWriter().append(""String_Node_Str"");
          migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
          migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
        }
        rs.close();
      }
    }
 else {
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        throw new JDBCException(""String_Node_Str"");
      }
 else {
        migrator.getOutputSQLWriter().append(insertRowStatment);
        migrator.getOutputSQLWriter().append(""String_Node_Str"");
        migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
        migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
      }
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}","/** 
 * This method will check the database ChangeLogLock table used to keep track of if a machine is updating the database. If the table does not exist it will create one otherwise it will not do anything besides outputting a log message.
 */
public void checkDatabaseChangeLogLockTable(Migrator migrator) throws JDBCException, IOException {
  Statement statement=null;
  Connection connection=getConnection();
  ResultSet rs=null;
  try {
    rs=connection.getMetaData().getTables(getCatalogName(),getSchemaName(),getDatabaseChangeLogLockTableName(),new String[]{""String_Node_Str""});
    if (!rs.next()) {
      if (!changeLogLockCreateAttempted) {
        changeLogLockCreateAttempted=true;
        String createTableStatement=getCreateChangeLogLockSQL();
        if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
          statement=connection.createStatement();
          statement.executeUpdate(createTableStatement);
          connection.commit();
          log.info(""String_Node_Str"");
          changeLogLockTableExists=true;
        }
 else {
          if (!migrator.getMode().equals(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE)) {
            if (!outputtedLockWarning) {
              migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + StreamUtil.getLineSeparator());
              migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + StreamUtil.getLineSeparator());
              migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + StreamUtil.getLineSeparator());
              migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + StreamUtil.getLineSeparator());
              migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + getCreateChangeLogLockSQL()+ ""String_Node_Str""+ StreamUtil.getLineSeparator());
              migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + getChangeLogLockInsertSQL()+ ""String_Node_Str""+ StreamUtil.getLineSeparator());
              migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + ""String_Node_Str"" + StreamUtil.getLineSeparator()+ StreamUtil.getLineSeparator());
              outputtedLockWarning=true;
            }
            migrator.getOutputSQLWriter().append(createTableStatement);
            migrator.getOutputSQLWriter().append(""String_Node_Str"");
            migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
            migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
          }
        }
      }
    }
 else {
      changeLogLockTableExists=true;
    }
    rs.close();
    if (statement != null) {
      statement.close();
    }
    String insertRowStatment=getChangeLogLockInsertSQL();
    if (changeLogLockTableExists) {
      statement=connection.createStatement();
      rs=statement.executeQuery(""String_Node_Str"".toUpperCase());
      if (!rs.next()) {
        if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
          statement=connection.createStatement();
          statement.executeUpdate(insertRowStatment);
          connection.commit();
          log.info(""String_Node_Str"");
        }
 else {
          migrator.getOutputSQLWriter().append(insertRowStatment);
          migrator.getOutputSQLWriter().append(""String_Node_Str"");
          migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
          migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
        }
        rs.close();
      }
    }
 else {
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        throw new JDBCException(""String_Node_Str"");
      }
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}"
84272,"/** 
 * This method will check the database ChangeLog table used to keep track of the changes in the file. If the table does not exist it will create one otherwise it will not do anything besides outputting a log message.
 */
public void checkDatabaseChangeLogTable(Migrator migrator) throws JDBCException, IOException {
  Statement statement=null;
  Connection connection=getConnection();
  ResultSet checkTableRS=null;
  ResultSet checkColumnsRS=null;
  changeLogTableExists=true;
  List<String> statementsToExecute=new ArrayList<String>();
  boolean wroteToOutput=false;
  try {
    checkTableRS=connection.getMetaData().getTables(getCatalogName(),getSchemaName(),getDatabaseChangeLogTableName(),new String[]{""String_Node_Str""});
    if (checkTableRS.next()) {
      checkColumnsRS=connection.getMetaData().getColumns(getCatalogName(),getSchemaName(),getDatabaseChangeLogTableName(),null);
      boolean hasDescription=false;
      boolean hasComments=false;
      boolean hasTag=false;
      boolean hasLiquibase=false;
      while (checkColumnsRS.next()) {
        String columnName=checkColumnsRS.getString(""String_Node_Str"");
        if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasDescription=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasComments=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasTag=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasLiquibase=true;
        }
      }
      if (!hasDescription) {
        statementsToExecute.add(""String_Node_Str"");
      }
      if (!hasTag) {
        statementsToExecute.add(""String_Node_Str"");
      }
      if (!hasComments) {
        statementsToExecute.add(""String_Node_Str"");
      }
      if (!hasLiquibase) {
        statementsToExecute.add(""String_Node_Str"");
      }
    }
 else {
      String createTableStatement=getCreateChangeLogSQL();
      if (!canCreateChangeLogTable()) {
        throw new JDBCException(""String_Node_Str"" + ""String_Node_Str"" + createTableStatement);
      }
      statementsToExecute.add(createTableStatement);
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        log.info(""String_Node_Str"");
      }
 else {
        changeLogTableExists=false;
      }
    }
    for (    String sql : statementsToExecute) {
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        statement=connection.createStatement();
        statement.executeUpdate(sql);
        connection.commit();
      }
 else {
        if (!migrator.getMode().equals(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE)) {
          migrator.getOutputSQLWriter().append(sql).append(""String_Node_Str"").append(StreamUtil.getLineSeparator());
          wroteToOutput=true;
        }
      }
    }
    if (wroteToOutput) {
      migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (checkTableRS != null) {
      try {
        checkTableRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (checkColumnsRS != null) {
      try {
        checkColumnsRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}","/** 
 * This method will check the database ChangeLog table used to keep track of the changes in the file. If the table does not exist it will create one otherwise it will not do anything besides outputting a log message.
 */
public void checkDatabaseChangeLogTable(Migrator migrator) throws JDBCException, IOException {
  Statement statement=null;
  Connection connection=getConnection();
  ResultSet checkTableRS=null;
  ResultSet checkColumnsRS=null;
  List<String> statementsToExecute=new ArrayList<String>();
  boolean wroteToOutput=false;
  try {
    checkTableRS=connection.getMetaData().getTables(getCatalogName(),getSchemaName(),getDatabaseChangeLogTableName(),new String[]{""String_Node_Str""});
    if (checkTableRS.next()) {
      changeLogTableExists=true;
      checkColumnsRS=connection.getMetaData().getColumns(getCatalogName(),getSchemaName(),getDatabaseChangeLogTableName(),null);
      boolean hasDescription=false;
      boolean hasComments=false;
      boolean hasTag=false;
      boolean hasLiquibase=false;
      while (checkColumnsRS.next()) {
        String columnName=checkColumnsRS.getString(""String_Node_Str"");
        if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasDescription=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasComments=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasTag=true;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(columnName)) {
          hasLiquibase=true;
        }
      }
      if (!hasDescription) {
        statementsToExecute.add(""String_Node_Str"");
      }
      if (!hasTag) {
        statementsToExecute.add(""String_Node_Str"");
      }
      if (!hasComments) {
        statementsToExecute.add(""String_Node_Str"");
      }
      if (!hasLiquibase) {
        statementsToExecute.add(""String_Node_Str"");
      }
    }
 else     if (!changeLogCreateAttempted) {
      changeLogCreateAttempted=true;
      String createTableStatement=getCreateChangeLogSQL();
      if (!canCreateChangeLogTable()) {
        throw new JDBCException(""String_Node_Str"" + ""String_Node_Str"" + createTableStatement);
      }
      statementsToExecute.add(createTableStatement);
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        log.info(""String_Node_Str"");
        changeLogTableExists=true;
      }
    }
    for (    String sql : statementsToExecute) {
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        statement=connection.createStatement();
        statement.executeUpdate(sql);
        connection.commit();
      }
 else {
        if (!migrator.getMode().equals(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE)) {
          migrator.getOutputSQLWriter().append(sql).append(""String_Node_Str"").append(StreamUtil.getLineSeparator());
          wroteToOutput=true;
        }
      }
    }
    if (wroteToOutput) {
      migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (checkTableRS != null) {
      try {
        checkTableRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (checkColumnsRS != null) {
      try {
        checkColumnsRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}"
84273,"public ChangeSet(String id,String author,boolean alwaysRun,boolean runOnChange,DatabaseChangeLog databaseChangeLog,String context,String dbmsList){
  this.changes=new ArrayList<Change>();
  log=Logger.getLogger(Migrator.DEFAULT_LOG_NAME);
  this.id=id;
  this.author=author;
  this.databaseChangeLog=databaseChangeLog;
  this.alwaysRun=alwaysRun;
  this.runOnChange=runOnChange;
  if (context != null) {
    this.context=context.trim().toLowerCase();
  }
  if (dbmsList != null) {
    String[] strings=dbmsList.split(""String_Node_Str"");
    for (    String string : strings) {
      if (dbmsSet == null) {
        dbmsSet=new HashSet<String>();
      }
      dbmsSet.add(string.trim().toLowerCase());
    }
  }
}","public ChangeSet(String id,String author,boolean alwaysRun,boolean runOnChange,DatabaseChangeLog databaseChangeLog,String context,String dbmsList){
  this.changes=new ArrayList<Change>();
  log=Logger.getLogger(Migrator.DEFAULT_LOG_NAME);
  this.id=id;
  this.author=author;
  this.databaseChangeLog=databaseChangeLog;
  this.alwaysRun=alwaysRun;
  this.runOnChange=runOnChange;
  if (context != null) {
    this.context=context.trim().toLowerCase();
  }
  if (StringUtils.trimToNull(dbmsList) != null) {
    String[] strings=dbmsList.split(""String_Node_Str"");
    for (    String string : strings) {
      if (dbmsSet == null) {
        dbmsSet=new HashSet<String>();
      }
      dbmsSet.add(string.trim().toLowerCase());
    }
  }
}"
84274,"public void testClearChecksums() throws Exception {
  Migrator migrator=createMigrator(null);
  migrator.clearCheckSums();
}","public void testClearChecksums() throws Exception {
  Migrator migrator=createMigrator(completeChangeLog);
  migrator.dropAll();
  migrator=createMigrator(completeChangeLog);
  migrator.dropAll();
  migrator.migrate();
  migrator.clearCheckSums();
}"
84275,"protected void dropForeignKeys(Connection conn) throws JDBCException {
  ResultSet tableRS=null;
  ResultSet fkRS=null;
  Statement dropStatement=null;
  try {
    tableRS=conn.getMetaData().getTables(getCatalogName(),getSchemaName(),null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    while (tableRS.next()) {
      String tableName=tableRS.getString(""String_Node_Str"");
      String schemaName=tableRS.getString(""String_Node_Str"");
      String catalogName=tableRS.getString(""String_Node_Str"");
      if (isSystemTable(catalogName,schemaName,tableName)) {
        continue;
      }
      fkRS=conn.getMetaData().getExportedKeys(getCatalogName(),getSchemaName(),tableName);
      dropStatement=conn.createStatement();
      while (fkRS.next()) {
        DropForeignKeyConstraintChange dropFK=new DropForeignKeyConstraintChange();
        dropFK.setBaseTableName(fkRS.getString(""String_Node_Str""));
        dropFK.setConstraintName(fkRS.getString(""String_Node_Str""));
        try {
          dropStatement.execute(dropFK.generateStatements(this)[0]);
        }
 catch (        UnsupportedChangeException e) {
          throw new JDBCException(e.getMessage());
        }
      }
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (dropStatement != null) {
      try {
        dropStatement.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (fkRS != null) {
      try {
        fkRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}","protected void dropForeignKeys(Connection conn) throws JDBCException {
  ResultSet tableRS;
  ResultSet fkRS=null;
  Statement dropStatement=null;
  try {
    tableRS=conn.getMetaData().getTables(getCatalogName(),getSchemaName(),null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    while (tableRS.next()) {
      String tableName=tableRS.getString(""String_Node_Str"");
      String schemaName=tableRS.getString(""String_Node_Str"");
      String catalogName=tableRS.getString(""String_Node_Str"");
      if (isSystemTable(catalogName,schemaName,tableName)) {
        continue;
      }
      fkRS=conn.getMetaData().getExportedKeys(getCatalogName(),getSchemaName(),tableName);
      dropStatement=conn.createStatement();
      while (fkRS.next()) {
        DropForeignKeyConstraintChange dropFK=new DropForeignKeyConstraintChange();
        dropFK.setBaseTableName(fkRS.getString(""String_Node_Str""));
        dropFK.setConstraintName(fkRS.getString(""String_Node_Str""));
        try {
          dropStatement.execute(dropFK.generateStatements(this)[0]);
        }
 catch (        UnsupportedChangeException e) {
          throw new JDBCException(e.getMessage());
        }
      }
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (dropStatement != null) {
      try {
        dropStatement.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (fkRS != null) {
      try {
        fkRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}"
84276,"/** 
 * Returns instances of all implemented database types.
 */
public Database[] getImplementedDatabases(){
  return new Database[]{new OracleDatabase(),new PostgresDatabase(),new MSSQLDatabase(),new MySQLDatabase(),new DerbyDatabase(),new HsqlDatabase(),new DB2Database(),new SybaseDatabase()};
}","/** 
 * Returns instances of all implemented database types.
 */
public Database[] getImplementedDatabases(){
  return new Database[]{new OracleDatabase(),new PostgresDatabase(),new MSSQLDatabase(),new MySQLDatabase(),new DerbyDatabase(),new HsqlDatabase(),new DB2Database(),new SybaseDatabase(),new H2Database()};
}"
84277,"private void readColumns() throws SQLException, JDBCException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  ResultSet rs=databaseMetaData.getColumns(database.getCatalogName(),database.getSchemaName(),null,null);
  while (rs.next()) {
    Column columnInfo=new Column();
    String tableName=rs.getString(""String_Node_Str"");
    String columnName=rs.getString(""String_Node_Str"");
    String schemaName=rs.getString(""String_Node_Str"");
    String catalogName=rs.getString(""String_Node_Str"");
    if (database.isSystemTable(catalogName,schemaName,tableName) || database.isLiquibaseTable(tableName)) {
      continue;
    }
    Table table=tablesMap.get(tableName);
    if (table == null) {
      View view=viewsMap.get(tableName);
      if (view == null) {
        log.info(""String_Node_Str"" + tableName + ""String_Node_Str""+ columnName);
        continue;
      }
 else {
        columnInfo.setView(view);
        view.getColumns().add(columnInfo);
      }
    }
 else {
      columnInfo.setTable(table);
      table.getColumns().add(columnInfo);
    }
    columnInfo.setName(columnName);
    columnInfo.setDataType(rs.getInt(""String_Node_Str""));
    columnInfo.setColumnSize(rs.getInt(""String_Node_Str""));
    columnInfo.setDecimalDigits(rs.getInt(""String_Node_Str""));
    columnInfo.setTypeName(rs.getString(""String_Node_Str""));
    columnInfo.setDefaultValue(rs.getString(""String_Node_Str""));
    int nullable=rs.getInt(""String_Node_Str"");
    if (nullable == DatabaseMetaData.columnNoNulls) {
      columnInfo.setNullable(false);
    }
 else     if (nullable == DatabaseMetaData.columnNullable) {
      columnInfo.setNullable(true);
    }
    columnsMap.put(columnName,columnInfo);
  }
  rs.close();
}","private void readColumns() throws SQLException, JDBCException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  ResultSet rs=databaseMetaData.getColumns(database.getCatalogName(),database.getSchemaName(),null,null);
  while (rs.next()) {
    Column columnInfo=new Column();
    String tableName=rs.getString(""String_Node_Str"");
    String columnName=rs.getString(""String_Node_Str"");
    String schemaName=rs.getString(""String_Node_Str"");
    String catalogName=rs.getString(""String_Node_Str"");
    if (database.isSystemTable(catalogName,schemaName,tableName) || database.isLiquibaseTable(tableName)) {
      continue;
    }
    Table table=tablesMap.get(tableName);
    if (table == null) {
      View view=viewsMap.get(tableName);
      if (view == null) {
        log.info(""String_Node_Str"" + tableName + ""String_Node_Str""+ columnName);
        continue;
      }
 else {
        columnInfo.setView(view);
        view.getColumns().add(columnInfo);
      }
    }
 else {
      columnInfo.setTable(table);
      table.getColumns().add(columnInfo);
    }
    columnInfo.setName(columnName);
    columnInfo.setDataType(rs.getInt(""String_Node_Str""));
    columnInfo.setColumnSize(rs.getInt(""String_Node_Str""));
    columnInfo.setDecimalDigits(rs.getInt(""String_Node_Str""));
    columnInfo.setTypeName(rs.getString(""String_Node_Str""));
    String defaultValue=rs.getString(""String_Node_Str"");
    columnInfo.setAutoIncrement(isAutoIncrement(defaultValue,database));
    columnInfo.setDefaultValue(translateDefaultValue(defaultValue,database));
    int nullable=rs.getInt(""String_Node_Str"");
    if (nullable == DatabaseMetaData.columnNoNulls) {
      columnInfo.setNullable(false);
    }
 else     if (nullable == DatabaseMetaData.columnNullable) {
      columnInfo.setNullable(true);
    }
    columnsMap.put(columnName,columnInfo);
  }
  rs.close();
}"
84278,"protected Change[] createInverses(){
  DropColumnChange inverse=new DropColumnChange();
  inverse.setColumnName(getColumn().getName());
  inverse.setTableName(getTableName());
  return new Change[]{inverse};
}","protected Change[] createInverses(){
  List<Change> inverses=new ArrayList<Change>();
  if (column.hasDefaultValue()) {
    DropDefaultValueChange dropChange=new DropDefaultValueChange();
    dropChange.setTableName(getTableName());
    dropChange.setColumnName(getColumn().getName());
    inverses.add(dropChange);
  }
  DropColumnChange inverse=new DropColumnChange();
  inverse.setColumnName(getColumn().getName());
  inverse.setTableName(getTableName());
  inverses.add(inverse);
  return inverses.toArray(new Change[inverses.size()]);
}"
84279,"public String[] generateStatements(Database database) throws UnsupportedChangeException {
  List<String> sql=new ArrayList<String>();
  String alterTable=""String_Node_Str"" + getTableName() + ""String_Node_Str""+ getColumn().getName()+ ""String_Node_Str""+ database.getColumnType(getColumn());
  if (column.getConstraints() != null && column.getConstraints().isNullable() != null && !column.getConstraints().isNullable()) {
    alterTable+=""String_Node_Str"";
  }
 else {
    alterTable+=""String_Node_Str"";
  }
  sql.add(alterTable);
  if (database instanceof DB2Database) {
    sql.add(""String_Node_Str"" + getTableName() + ""String_Node_Str"");
  }
  if (getColumn().getDefaultValue() != null || getColumn().getDefaultValueBoolean() != null || getColumn().getDefaultValueDate() != null || getColumn().getDefaultValueNumeric() != null) {
    AddDefaultValueChange change=new AddDefaultValueChange();
    change.setTableName(getTableName());
    change.setColumnName(getColumn().getName());
    change.setDefaultValue(getColumn().getDefaultValue());
    change.setDefaultValueNumeric(getColumn().getDefaultValueNumeric());
    change.setDefaultValueDate(getColumn().getDefaultValueDate());
    change.setDefaultValueBoolean(getColumn().getDefaultValueBoolean());
    sql.addAll(Arrays.asList(change.generateStatements(database)));
  }
  if (getColumn().getConstraints() != null) {
    if (getColumn().getConstraints().isPrimaryKey() != null && getColumn().getConstraints().isPrimaryKey()) {
      AddPrimaryKeyChange change=new AddPrimaryKeyChange();
      change.setTableName(getTableName());
      change.setColumnNames(getColumn().getName());
      sql.addAll(Arrays.asList(change.generateStatements(database)));
    }
    if (getColumn().getConstraints().isNullable() != null && !getColumn().getConstraints().isNullable()) {
      AddNotNullConstraintChange change=new AddNotNullConstraintChange();
      change.setTableName(getTableName());
      change.setColumnName(getColumn().getName());
      change.setColumnDataType(getColumn().getType());
      sql.addAll(Arrays.asList(change.generateStatements(database)));
    }
  }
  return sql.toArray(new String[sql.size()]);
}","public String[] generateStatements(Database database) throws UnsupportedChangeException {
  List<String> sql=new ArrayList<String>();
  String alterTable=""String_Node_Str"" + getTableName() + ""String_Node_Str""+ getColumn().getName()+ ""String_Node_Str""+ database.getColumnType(getColumn());
  if (column.getConstraints() != null) {
    if (column.getConstraints().isNullable() != null && !column.getConstraints().isNullable()) {
      alterTable+=""String_Node_Str"";
    }
 else {
    }
    if (column.getDefaultValue() != null || column.getDefaultValueBoolean() != null || column.getDefaultValueDate() != null || column.getDefaultValueNumeric() != null) {
      alterTable+=""String_Node_Str"" + column.getDefaultColumnValue(database);
    }
  }
  sql.add(alterTable);
  if (database instanceof DB2Database) {
    sql.add(""String_Node_Str"" + getTableName() + ""String_Node_Str"");
  }
  if (getColumn().getConstraints() != null) {
    if (getColumn().getConstraints().isPrimaryKey() != null && getColumn().getConstraints().isPrimaryKey()) {
      AddPrimaryKeyChange change=new AddPrimaryKeyChange();
      change.setTableName(getTableName());
      change.setColumnNames(getColumn().getName());
      sql.addAll(Arrays.asList(change.generateStatements(database)));
    }
  }
  return sql.toArray(new String[sql.size()]);
}"
84280,"public String[] generateDerbyStatements(){
  List<String> statements=new ArrayList<String>();
  if (defaultNullValue != null) {
    statements.add(generateUpdateStatement());
  }
  statements.add(""String_Node_Str"" + getTableName() + ""String_Node_Str""+ getColumnName()+ ""String_Node_Str"");
  return statements.toArray(new String[statements.size()]);
}","public String[] generateDerbyStatements(){
  List<String> statements=new ArrayList<String>();
  if (defaultNullValue != null) {
    statements.add(generateUpdateStatement());
  }
  statements.add(""String_Node_Str"" + getTableName() + ""String_Node_Str""+ getColumnName()+ ""String_Node_Str""+ getColumnDataType()+ ""String_Node_Str"");
  return statements.toArray(new String[statements.size()]);
}"
84281,"public String[] generateStatements(Database database) throws UnsupportedChangeException {
  if (database instanceof SybaseDatabase) {
    return generateSybaseStatements();
  }
 else   if (database instanceof MSSQLDatabase) {
    return generateMSSQLStatements();
  }
 else   if (database instanceof MySQLDatabase) {
    return generateMySQLStatements();
  }
 else   if (database instanceof OracleDatabase) {
    return generateOracleStatements();
  }
 else   if (database instanceof DerbyDatabase) {
    return generateDerbyStatements();
  }
  List<String> statements=new ArrayList<String>();
  if (defaultNullValue != null) {
    statements.add(generateUpdateStatement());
  }
  statements.add(""String_Node_Str"" + getTableName() + ""String_Node_Str""+ getColumnName()+ ""String_Node_Str"");
  if (database instanceof DB2Database) {
    statements.add(""String_Node_Str"" + getTableName() + ""String_Node_Str"");
  }
  return statements.toArray(new String[statements.size()]);
}","public String[] generateStatements(Database database) throws UnsupportedChangeException {
  if (database instanceof SybaseDatabase) {
    return generateSybaseStatements();
  }
 else   if (database instanceof MSSQLDatabase) {
    return generateMSSQLStatements();
  }
 else   if (database instanceof MySQLDatabase) {
    return generateMySQLStatements();
  }
 else   if (database instanceof OracleDatabase) {
    return generateOracleStatements();
  }
 else   if (database instanceof DerbyDatabase) {
    return generateDerbyStatements();
  }
 else   if (database instanceof H2Database) {
    return generateH2Statements();
  }
  List<String> statements=new ArrayList<String>();
  if (defaultNullValue != null) {
    statements.add(generateUpdateStatement());
  }
  statements.add(""String_Node_Str"" + getTableName() + ""String_Node_Str""+ getColumnName()+ ""String_Node_Str"");
  if (database instanceof DB2Database) {
    statements.add(""String_Node_Str"" + getTableName() + ""String_Node_Str"");
  }
  return statements.toArray(new String[statements.size()]);
}"
84282,"public int compareTo(Column o){
  try {
    int returnValue=0;
    if (this.getTable() != null && o.getTable() == null) {
      return 1;
    }
 else     if (this.getTable() == null && o.getTable() != null) {
      return -1;
    }
 else     if (this.getTable() == null && o.getTable() == null) {
      returnValue=this.getView().compareTo(o.getView());
    }
 else {
      returnValue=this.getTable().compareTo(o.getTable());
    }
    if (returnValue == 0) {
      returnValue=this.getName().compareTo(o.getName());
    }
    return returnValue;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}","public int compareTo(Column o){
  try {
    int returnValue=0;
    if (this.getTable() != null && o.getTable() == null) {
      return 1;
    }
 else     if (this.getTable() == null && o.getTable() != null) {
      return -1;
    }
 else     if (this.getTable() == null && o.getTable() == null) {
      returnValue=this.getView().compareTo(o.getView());
    }
 else {
      returnValue=this.getTable().compareTo(o.getTable());
    }
    if (returnValue == 0) {
      returnValue=this.getName().compareTo(o.getName());
    }
    return returnValue;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}"
84283,"private void readIndexes() throws JDBCException, SQLException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  for (  Table table : tablesMap.values()) {
    ResultSet rs=null;
    try {
      rs=databaseMetaData.getIndexInfo(database.getCatalogName(),database.getSchemaName(),table.getName(),true,true);
    }
 catch (    SQLException e) {
      throw e;
    }
    while (rs.next()) {
      Index indexInformation=new Index();
      indexInformation.setTableName(rs.getString(""String_Node_Str""));
      String columnName=rs.getString(""String_Node_Str"");
      if (columnName == null) {
        continue;
      }
      indexInformation.setColumnName(columnName);
      indexInformation.setName(rs.getString(""String_Node_Str""));
      indexes.add(indexInformation);
    }
    rs.close();
  }
}","private void readIndexes() throws JDBCException, SQLException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  for (  Table table : tablesMap.values()) {
    ResultSet rs;
    try {
      rs=databaseMetaData.getIndexInfo(database.getCatalogName(),database.getSchemaName(),table.getName(),true,true);
    }
 catch (    SQLException e) {
      throw e;
    }
    while (rs.next()) {
      Index indexInformation=new Index();
      indexInformation.setTableName(rs.getString(""String_Node_Str""));
      String columnName=rs.getString(""String_Node_Str"");
      if (columnName == null) {
        continue;
      }
      indexInformation.setColumnName(columnName);
      indexInformation.setName(rs.getString(""String_Node_Str""));
      indexes.add(indexInformation);
    }
    rs.close();
  }
}"
84284,"/** 
 * Initializes the Migrator with the given connection.  Needs to be called before actually using the Migrator.
 */
public void init(Connection connection) throws JDBCException, MigrationFailedException {
  try {
    database=DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection);
    database.setConnection(connection);
    database.getConnection().setAutoCommit(false);
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
}","/** 
 * Initializes the Migrator with the given connection.  Needs to be called before actually using the Migrator.
 */
public void init(Connection connection) throws JDBCException {
  try {
    database=DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection);
    database.setConnection(connection);
    database.getConnection().setAutoCommit(false);
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
}"
84285,"private void nodeToStringBuffer(Element node,StringBuffer buffer){
  buffer.append(""String_Node_Str"").append(node.getNodeName());
  SortedMap<String,String> attributeMap=new TreeMap<String,String>();
  NamedNodeMap attributes=node.getAttributes();
  for (int i=0; i < attributes.getLength(); i++) {
    Node attribute=attributes.item(i);
    attributeMap.put(attribute.getNodeName(),attribute.getNodeValue());
  }
  for (  Map.Entry entry : attributeMap.entrySet()) {
    Object value=entry.getValue();
    if (value != null) {
      buffer.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(attributeMap.get(value)).append(""String_Node_Str"");
    }
  }
  buffer.append(""String_Node_Str"").append(StringUtils.trimToEmpty(XMLUtil.getTextContent(node)));
  NodeList childNodes=node.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node childNode=childNodes.item(i);
    if (childNode instanceof Element) {
      nodeToStringBuffer(((Element)childNode),buffer);
    }
  }
  buffer.append(""String_Node_Str"").append(node.getNodeName()).append(""String_Node_Str"");
}","private void nodeToStringBuffer(Element node,StringBuffer buffer){
  buffer.append(""String_Node_Str"").append(node.getNodeName());
  SortedMap<String,String> attributeMap=new TreeMap<String,String>();
  NamedNodeMap attributes=node.getAttributes();
  for (int i=0; i < attributes.getLength(); i++) {
    Node attribute=attributes.item(i);
    attributeMap.put(attribute.getNodeName(),attribute.getNodeValue());
  }
  for (  Map.Entry entry : attributeMap.entrySet()) {
    String value=(String)entry.getValue();
    if (value != null) {
      buffer.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(attributeMap.get(value)).append(""String_Node_Str"");
    }
  }
  buffer.append(""String_Node_Str"").append(StringUtils.trimToEmpty(XMLUtil.getTextContent(node)));
  NodeList childNodes=node.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node childNode=childNodes.item(i);
    if (childNode instanceof Element) {
      nodeToStringBuffer(((Element)childNode),buffer);
    }
  }
  buffer.append(""String_Node_Str"").append(node.getNodeName()).append(""String_Node_Str"");
}"
84286,"private String getColumnValue(Database database){
  if (getDefaultValue() != null) {
    if (""String_Node_Str"".equalsIgnoreCase(getDefaultValue())) {
      return ""String_Node_Str"";
    }
    return ""String_Node_Str"" + getDefaultValue().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  }
 else   if (getDefaultValueNumeric() != null) {
    return getDefaultValueNumeric();
  }
 else   if (getDefaultValueBoolean() != null) {
    if (getDefaultValueBoolean()) {
      return database.getTrueBooleanValue();
    }
 else {
      return database.getFalseBooleanValue();
    }
  }
 else   if (getDefaultValueDate() != null) {
    return database.getDateLiteral(getDefaultValueDate());
  }
 else {
    return ""String_Node_Str"";
  }
}","private String getColumnValue(Database database){
  if (getDefaultValue() != null) {
    if (""String_Node_Str"".equalsIgnoreCase(getDefaultValue())) {
      return ""String_Node_Str"";
    }
    return ""String_Node_Str"" + getDefaultValue().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  }
 else   if (getDefaultValueNumeric() != null) {
    return getDefaultValueNumeric();
  }
 else   if (getDefaultValueBoolean() != null) {
    String returnValue;
    if (getDefaultValueBoolean()) {
      returnValue=database.getTrueBooleanValue();
    }
 else {
      returnValue=database.getFalseBooleanValue();
    }
    if (returnValue.matches(""String_Node_Str"")) {
      return returnValue;
    }
 else {
      return ""String_Node_Str"" + returnValue + ""String_Node_Str"";
    }
  }
 else   if (getDefaultValueDate() != null) {
    return database.getDateLiteral(getDefaultValueDate());
  }
 else {
    return ""String_Node_Str"";
  }
}"
84287,"public String[] generateDerbyStatements() throws UnsupportedChangeException {
  List<String> statements=new ArrayList<String>();
  if (defaultNullValue != null) {
    statements.add(generateUpdateStatement());
  }
  statements.add(""String_Node_Str"" + getTableName() + ""String_Node_Str""+ getColumnName()+ ""String_Node_Str"");
  return statements.toArray(new String[statements.size()]);
}","public String[] generateDerbyStatements(){
  List<String> statements=new ArrayList<String>();
  if (defaultNullValue != null) {
    statements.add(generateUpdateStatement());
  }
  statements.add(""String_Node_Str"" + getTableName() + ""String_Node_Str""+ getColumnName()+ ""String_Node_Str"");
  return statements.toArray(new String[statements.size()]);
}"
84288,"private String getDefaultColumnValue(ColumnConfig column,Database database){
  if (column.getDefaultValue() != null) {
    if (""String_Node_Str"".equalsIgnoreCase(column.getDefaultValue())) {
      return ""String_Node_Str"";
    }
    return ""String_Node_Str"" + column.getDefaultValue().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  }
 else   if (column.getDefaultValueNumeric() != null) {
    return column.getDefaultValueNumeric();
  }
 else   if (column.getDefaultValueBoolean() != null) {
    if (column.getDefaultValueBoolean()) {
      return database.getTrueBooleanValue();
    }
 else {
      return database.getFalseBooleanValue();
    }
  }
 else   if (column.getDefaultValueDate() != null) {
    return database.getDateLiteral(column.getDefaultValueDate());
  }
 else {
    return ""String_Node_Str"";
  }
}","private String getDefaultColumnValue(ColumnConfig column,Database database){
  if (column.getDefaultValue() != null) {
    if (""String_Node_Str"".equalsIgnoreCase(column.getDefaultValue())) {
      return ""String_Node_Str"";
    }
    return ""String_Node_Str"" + column.getDefaultValue().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  }
 else   if (column.getDefaultValueNumeric() != null) {
    return column.getDefaultValueNumeric();
  }
 else   if (column.getDefaultValueBoolean() != null) {
    String returnValue;
    if (column.getDefaultValueBoolean()) {
      returnValue=database.getTrueBooleanValue();
    }
 else {
      returnValue=database.getFalseBooleanValue();
    }
    if (returnValue.matches(""String_Node_Str"")) {
      return returnValue;
    }
 else {
      return ""String_Node_Str"" + returnValue + ""String_Node_Str"";
    }
  }
 else   if (column.getDefaultValueDate() != null) {
    return database.getDateLiteral(column.getDefaultValueDate());
  }
 else {
    return ""String_Node_Str"";
  }
}"
84289,"private String getColumnValue(ColumnConfig column,Database database){
  if (column.getValue() != null) {
    return ""String_Node_Str"" + column.getValue().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  }
 else   if (column.getValueNumeric() != null) {
    return column.getValueNumeric();
  }
 else   if (column.getValueBoolean() != null) {
    if (column.getValueBoolean()) {
      return database.getTrueBooleanValue();
    }
 else {
      return database.getFalseBooleanValue();
    }
  }
 else   if (column.getValueDate() != null) {
    return database.getDateLiteral(column.getValueDate());
  }
 else {
    return ""String_Node_Str"";
  }
}","private String getColumnValue(ColumnConfig column,Database database){
  if (column.getValue() != null) {
    return ""String_Node_Str"" + column.getValue().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  }
 else   if (column.getValueNumeric() != null) {
    return column.getValueNumeric();
  }
 else   if (column.getValueBoolean() != null) {
    String returnValue;
    if (column.getValueBoolean()) {
      returnValue=database.getTrueBooleanValue();
    }
 else {
      returnValue=database.getFalseBooleanValue();
    }
    if (returnValue.matches(""String_Node_Str"")) {
      return returnValue;
    }
 else {
      return ""String_Node_Str"" + returnValue + ""String_Node_Str"";
    }
  }
 else   if (column.getValueDate() != null) {
    return database.getDateLiteral(column.getValueDate());
  }
 else {
    return ""String_Node_Str"";
  }
}"
84290,"public static void main(String args[]) throws Exception {
  String shouldRunProperty=System.getProperty(Migrator.SHOULD_RUN_SYSTEM_PROPERTY);
  if (shouldRunProperty != null && !Boolean.valueOf(shouldRunProperty)) {
    System.out.println(""String_Node_Str"" + Migrator.SHOULD_RUN_SYSTEM_PROPERTY + ""String_Node_Str"");
    return;
  }
  CommandLineMigrator commandLineMigrator=new CommandLineMigrator();
  if (args.length == 1 && ""String_Node_Str"".equals(args[0])) {
    commandLineMigrator.printHelp(System.out);
    return;
  }
 else   if (args.length == 1 && ""String_Node_Str"".equals(args[0])) {
    System.out.println(""String_Node_Str"" + new Migrator(null,null).getBuildVersion() + StreamUtil.getLineSeparator());
    return;
  }
  commandLineMigrator.parseOptions(args);
  File propertiesFile=new File(""String_Node_Str"");
  if (propertiesFile.exists()) {
    commandLineMigrator.parsePropertiesFile(new FileInputStream(propertiesFile));
  }
  if (!commandLineMigrator.checkSetup()) {
    commandLineMigrator.printHelp(System.out);
    return;
  }
  try {
    commandLineMigrator.applyDefaults();
    commandLineMigrator.configureClassLoader();
    commandLineMigrator.doMigration();
  }
 catch (  Throwable e) {
    String message=e.getMessage();
    if (e.getCause() != null) {
      message=e.getCause().getMessage();
    }
    if (message == null) {
      message=""String_Node_Str"";
    }
    if (e.getCause() instanceof ValidationFailedException) {
      ((ValidationFailedException)e.getCause()).printDescriptiveError(System.out);
    }
 else {
      System.out.println(""String_Node_Str"" + message + (Logger.getLogger(Migrator.DEFAULT_LOG_NAME).equals(Level.OFF) ? ""String_Node_Str"" : ""String_Node_Str""));
      Logger.getLogger(Migrator.DEFAULT_LOG_NAME).log(Level.SEVERE,message,e);
    }
    return;
  }
  if (""String_Node_Str"".equals(commandLineMigrator.command)) {
    System.out.println(""String_Node_Str"");
  }
 else   if (commandLineMigrator.command.startsWith(""String_Node_Str"") && !commandLineMigrator.command.endsWith(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
  }
}","public static void main(String args[]) throws CommandLineParsingException, IOException {
  String shouldRunProperty=System.getProperty(Migrator.SHOULD_RUN_SYSTEM_PROPERTY);
  if (shouldRunProperty != null && !Boolean.valueOf(shouldRunProperty)) {
    System.out.println(""String_Node_Str"" + Migrator.SHOULD_RUN_SYSTEM_PROPERTY + ""String_Node_Str"");
    return;
  }
  CommandLineMigrator commandLineMigrator=new CommandLineMigrator();
  if (args.length == 1 && ""String_Node_Str"".equals(args[0])) {
    commandLineMigrator.printHelp(System.out);
    return;
  }
 else   if (args.length == 1 && ""String_Node_Str"".equals(args[0])) {
    System.out.println(""String_Node_Str"" + new Migrator(null,null).getBuildVersion() + StreamUtil.getLineSeparator());
    return;
  }
  commandLineMigrator.parseOptions(args);
  File propertiesFile=new File(""String_Node_Str"");
  if (propertiesFile.exists()) {
    commandLineMigrator.parsePropertiesFile(new FileInputStream(propertiesFile));
  }
  if (!commandLineMigrator.checkSetup()) {
    commandLineMigrator.printHelp(System.out);
    return;
  }
  try {
    commandLineMigrator.applyDefaults();
    commandLineMigrator.configureClassLoader();
    commandLineMigrator.doMigration();
  }
 catch (  Throwable e) {
    String message=e.getMessage();
    if (e.getCause() != null) {
      message=e.getCause().getMessage();
    }
    if (message == null) {
      message=""String_Node_Str"";
    }
    if (e.getCause() instanceof ValidationFailedException) {
      ((ValidationFailedException)e.getCause()).printDescriptiveError(System.out);
    }
 else {
      System.out.println(""String_Node_Str"" + message + (Logger.getLogger(Migrator.DEFAULT_LOG_NAME).equals(Level.OFF) ? ""String_Node_Str"" : ""String_Node_Str""));
      Logger.getLogger(Migrator.DEFAULT_LOG_NAME).log(Level.SEVERE,message,e);
    }
    return;
  }
  if (""String_Node_Str"".equals(commandLineMigrator.command)) {
    System.out.println(""String_Node_Str"");
  }
 else   if (commandLineMigrator.command.startsWith(""String_Node_Str"") && !commandLineMigrator.command.endsWith(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
  }
}"
84291,"private Connection createConnectionFromCommandParams(Set<String> commandParams) throws CommandLineParsingException, ClassNotFoundException, SQLException, JDBCException {
  String driver=null;
  String url=null;
  String username=null;
  String password=null;
  for (  String param : commandParams) {
    String[] splitArg=splitArg(param);
    String attributeName=splitArg[0];
    String value=splitArg[1];
    if (""String_Node_Str"".equalsIgnoreCase(attributeName)) {
      driver=value;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(attributeName)) {
      url=value;
    }
 else     if (""String_Node_Str"".equals(attributeName)) {
      username=value;
    }
 else     if (""String_Node_Str"".equals(attributeName)) {
      password=value;
    }
  }
  if (driver == null) {
    driver=DatabaseFactory.getInstance().findDefaultDriver(url);
  }
  Driver driverObject;
  try {
    driverObject=(Driver)Class.forName(driver,true,classLoader).newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + e.getMessage());
  }
  Properties info=new Properties();
  info.put(""String_Node_Str"",username);
  info.put(""String_Node_Str"",password);
  Connection connection=driverObject.connect(url,info);
  if (connection == null) {
    throw new JDBCException(""String_Node_Str"" + url + ""String_Node_Str""+ driver.getClass().getName()+ ""String_Node_Str"");
  }
  return connection;
}","private Connection createConnectionFromCommandParams(Set<String> commandParams) throws CommandLineParsingException, SQLException, JDBCException {
  String driver=null;
  String url=null;
  String username=null;
  String password=null;
  for (  String param : commandParams) {
    String[] splitArg=splitArg(param);
    String attributeName=splitArg[0];
    String value=splitArg[1];
    if (""String_Node_Str"".equalsIgnoreCase(attributeName)) {
      driver=value;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(attributeName)) {
      url=value;
    }
 else     if (""String_Node_Str"".equals(attributeName)) {
      username=value;
    }
 else     if (""String_Node_Str"".equals(attributeName)) {
      password=value;
    }
  }
  if (driver == null) {
    driver=DatabaseFactory.getInstance().findDefaultDriver(url);
  }
  Driver driverObject;
  try {
    driverObject=(Driver)Class.forName(driver,true,classLoader).newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + e.getMessage());
  }
  Properties info=new Properties();
  info.put(""String_Node_Str"",username);
  info.put(""String_Node_Str"",password);
  Connection connection=driverObject.connect(url,info);
  if (connection == null) {
    throw new JDBCException(""String_Node_Str"" + url + ""String_Node_Str""+ driver.getClass().getName()+ ""String_Node_Str"");
  }
  return connection;
}"
84292,"private void checkVersionInfo(DiffResult diffResult) throws SQLException, JDBCException {
  diffResult.setProductName(new DiffComparison(baseDatabase.getDatabaseProductName(),targetDatabase.getDatabaseProductName()));
  diffResult.setProductVersion(new DiffComparison(baseDatabase.getDatabaseProductVersion(),targetDatabase.getDatabaseProductVersion()));
}","private void checkVersionInfo(DiffResult diffResult) throws JDBCException {
  diffResult.setProductName(new DiffComparison(baseDatabase.getDatabaseProductName(),targetDatabase.getDatabaseProductName()));
  diffResult.setProductVersion(new DiffComparison(baseDatabase.getDatabaseProductVersion(),targetDatabase.getDatabaseProductVersion()));
}"
84293,"private void checkViews(DiffResult diffResult) throws SQLException, JDBCException {
  for (  View baseView : baseSnapshot.getViews()) {
    if (!targetSnapshot.getViews().contains(baseView)) {
      diffResult.addMissingView(baseView);
    }
  }
  for (  View targetView : targetSnapshot.getViews()) {
    if (!baseSnapshot.getViews().contains(targetView)) {
      diffResult.addUnexpectedView(targetView);
    }
  }
}","private void checkViews(DiffResult diffResult){
  for (  View baseView : baseSnapshot.getViews()) {
    if (!targetSnapshot.getViews().contains(baseView)) {
      diffResult.addMissingView(baseView);
    }
  }
  for (  View targetView : targetSnapshot.getViews()) {
    if (!baseSnapshot.getViews().contains(targetView)) {
      diffResult.addUnexpectedView(targetView);
    }
  }
}"
84294,"public void doRollback() throws MigrationFailedException, DatabaseHistoryException, JDBCException, IOException {
  for (  ChangeSet changeSet : allChangeSets) {
    changeSet.execute();
    removeRanStatus(changeSet);
  }
}","public void doRollback() throws MigrationFailedException, JDBCException, IOException {
  for (  ChangeSet changeSet : allChangeSets) {
    changeSet.execute();
    removeRanStatus(changeSet);
  }
}"
84295,"public void doRollback() throws MigrationFailedException, DatabaseHistoryException, JDBCException, IOException {
  for (  ChangeSet changeSet : changesToRollback) {
    changeSet.execute();
    removeRanStatus(changeSet);
  }
}","public void doRollback() throws MigrationFailedException, JDBCException, IOException {
  for (  ChangeSet changeSet : changesToRollback) {
    changeSet.execute();
    removeRanStatus(changeSet);
  }
}"
84296,"public String[] generateDerbyStatements(){
  List<String> statements=new ArrayList<String>();
  if (defaultNullValue != null) {
    statements.add(generateUpdateStatement());
  }
  statements.add(""String_Node_Str"" + getTableName() + ""String_Node_Str""+ getColumnName()+ ""String_Node_Str""+ getColumnDataType()+ ""String_Node_Str"");
  return statements.toArray(new String[statements.size()]);
}","public String[] generateDerbyStatements(){
  List<String> statements=new ArrayList<String>();
  if (defaultNullValue != null) {
    statements.add(generateUpdateStatement());
  }
  statements.add(""String_Node_Str"" + getTableName() + ""String_Node_Str""+ getColumnName()+ ""String_Node_Str"");
  return statements.toArray(new String[statements.size()]);
}"
84297,"protected void tearDown() throws Exception {
  Statement statement=connection.createStatement();
  statement.execute(""String_Node_Str"");
  statement.close();
  super.tearDown();
}","protected void tearDown() throws Exception {
  Statement statement=null;
  try {
    statement=connection.createStatement();
    statement.execute(""String_Node_Str"");
  }
  finally {
    if (statement != null) {
      statement.close();
    }
  }
  super.tearDown();
}"
84298,"/** 
 * Return an DB2 date literal with the same value as a string formatted using ISO 8601. Convert an ISO8601 date string to one of the following results: to_date('1995-05-23', 'YYYY-MM-DD') to_date('1995-05-23 09:23:59', 'YYYY-MM-DD HH24:MI:SS') Implementation restriction: Currently, only the following subsets of ISO8601 are supported: YYYY-MM-DD hh:mm:ss YYYY-MM-DDThh:mm:ss
 */
public String getDateLiteral(String isoDate){
  String normalLiteral=super.getDateLiteral(isoDate);
  if (isDateOnly(isoDate)) {
    StringBuffer val=new StringBuffer();
    val.append(""String_Node_Str"");
    val.append(normalLiteral);
    val.append(""String_Node_Str"");
    return val.toString();
  }
 else   if (isTimeOnly(isoDate)) {
    StringBuffer val=new StringBuffer();
    val.append(""String_Node_Str"");
    val.append(normalLiteral);
    val.append(""String_Node_Str"");
    return val.toString();
  }
 else   if (isDateTime(isoDate)) {
    StringBuffer val=new StringBuffer();
    val.append(""String_Node_Str"");
    val.append(normalLiteral);
    val.append(""String_Node_Str"");
    return val.toString();
  }
 else {
    return ""String_Node_Str"" + isoDate;
  }
}","/** 
 * Return an DB2 date literal with the same value as a string formatted using ISO 8601. Convert an ISO8601 date string to one of the following results: to_date('1995-05-23', 'YYYY-MM-DD') to_date('1995-05-23 09:23:59', 'YYYY-MM-DD HH24:MI:SS') Implementation restriction: Currently, only the following subsets of ISO8601 are supported: YYYY-MM-DD hh:mm:ss YYYY-MM-DDThh:mm:ss
 */
public String getDateLiteral(String isoDate){
  String normalLiteral=super.getDateLiteral(isoDate);
  if (isDateOnly(isoDate)) {
    StringBuffer val=new StringBuffer();
    val.append(""String_Node_Str"");
    val.append(normalLiteral);
    val.append(')');
    return val.toString();
  }
 else   if (isTimeOnly(isoDate)) {
    StringBuffer val=new StringBuffer();
    val.append(""String_Node_Str"");
    val.append(normalLiteral);
    val.append(')');
    return val.toString();
  }
 else   if (isDateTime(isoDate)) {
    StringBuffer val=new StringBuffer();
    val.append(""String_Node_Str"");
    val.append(normalLiteral);
    val.append(')');
    return val.toString();
  }
 else {
    return ""String_Node_Str"" + isoDate;
  }
}"
84299,"/** 
 * Return an Oracle date literal with the same value as a string formatted using ISO 8601. <p/> Convert an ISO8601 date string to one of the following results: to_date('1995-05-23', 'YYYY-MM-DD') to_date('1995-05-23 09:23:59', 'YYYY-MM-DD HH24:MI:SS') <p/> Implementation restriction: Currently, only the following subsets of ISO8601 are supported: YYYY-MM-DD YYYY-MM-DDThh:mm:ss
 */
public String getDateLiteral(String isoDate){
  String normalLiteral=super.getDateLiteral(isoDate);
  if (isDateOnly(isoDate)) {
    StringBuffer val=new StringBuffer();
    val.append(""String_Node_Str"");
    val.append(normalLiteral);
    val.append(""String_Node_Str"");
    return val.toString();
  }
 else   if (isTimeOnly(isoDate)) {
    StringBuffer val=new StringBuffer();
    val.append(""String_Node_Str"");
    val.append(normalLiteral);
    val.append(""String_Node_Str"");
    return val.toString();
  }
 else   if (isDateTime(isoDate)) {
    StringBuffer val=new StringBuffer();
    val.append(""String_Node_Str"");
    val.append(normalLiteral);
    val.append(""String_Node_Str"");
    return val.toString();
  }
 else {
    return ""String_Node_Str"" + isoDate;
  }
}","/** 
 * Return an Oracle date literal with the same value as a string formatted using ISO 8601. <p/> Convert an ISO8601 date string to one of the following results: to_date('1995-05-23', 'YYYY-MM-DD') to_date('1995-05-23 09:23:59', 'YYYY-MM-DD HH24:MI:SS') <p/> Implementation restriction: Currently, only the following subsets of ISO8601 are supported: YYYY-MM-DD YYYY-MM-DDThh:mm:ss
 */
public String getDateLiteral(String isoDate){
  String normalLiteral=super.getDateLiteral(isoDate);
  if (isDateOnly(isoDate)) {
    StringBuffer val=new StringBuffer();
    val.append(""String_Node_Str"");
    val.append(normalLiteral);
    val.append(""String_Node_Str"");
    return val.toString();
  }
 else   if (isTimeOnly(isoDate)) {
    StringBuffer val=new StringBuffer();
    val.append(""String_Node_Str"");
    val.append(normalLiteral);
    val.append(""String_Node_Str"");
    return val.toString();
  }
 else   if (isDateTime(isoDate)) {
    StringBuffer val=new StringBuffer(26);
    val.append(""String_Node_Str"");
    val.append(normalLiteral);
    val.append(""String_Node_Str"");
    return val.toString();
  }
 else {
    return ""String_Node_Str"" + isoDate;
  }
}"
84300,"private void readSequences() throws JDBCException, SQLException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  if (database.supportsSequences()) {
    Statement stmt=database.getConnection().createStatement();
    ResultSet rs=stmt.executeQuery(database.createFindSequencesSQL());
    while (rs.next()) {
      Sequence seq=new Sequence();
      seq.setName(rs.getString(""String_Node_Str""));
      sequences.add(seq);
    }
    rs.close();
  }
}","private void readSequences() throws JDBCException, SQLException {
  updateListeners(""String_Node_Str"" + database.toString() + ""String_Node_Str"");
  if (database.supportsSequences()) {
    ResultSet rs=null;
    Statement stmt=null;
    try {
      stmt=database.getConnection().createStatement();
      rs=stmt.executeQuery(database.createFindSequencesSQL());
      while (rs.next()) {
        Sequence seq=new Sequence();
        seq.setName(rs.getString(""String_Node_Str""));
        sequences.add(seq);
      }
    }
  finally {
      if (rs != null) {
        rs.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
  }
}"
84301,"/** 
 * Sets checksums to null so they will be repopulated next run
 */
public void clearCheckSums() throws JDBCException {
  Connection connection=getDatabase().getConnection();
  try {
    Statement statement=connection.createStatement();
    statement.execute(""String_Node_Str"".toUpperCase());
    connection.commit();
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
}","/** 
 * Sets checksums to null so they will be repopulated next run
 */
public void clearCheckSums() throws JDBCException {
  Connection connection=getDatabase().getConnection();
  try {
    Statement statement=null;
    try {
      statement=connection.createStatement();
      statement.execute(""String_Node_Str"".toUpperCase());
      connection.commit();
    }
  finally {
      if (statement != null) {
        statement.close();
      }
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
}"
84302,"public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  final RanChangeSet that=(RanChangeSet)o;
  if (!author.equals(that.author))   return false;
  if (!changeLog.equals(that.changeLog))   return false;
  return id.equals(that.id);
}","public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  final RanChangeSet that=(RanChangeSet)o;
  return author.equals(that.author) && changeLog.equals(that.changeLog) && id.equals(that.id);
}"
84303,"public void execute() throws BuildException {
  String shouldRunProperty=System.getProperty(Migrator.SHOULD_RUN_SYSTEM_PROPERTY);
  if (shouldRunProperty != null && !Boolean.valueOf(shouldRunProperty)) {
    log(""String_Node_Str"" + Migrator.SHOULD_RUN_SYSTEM_PROPERTY + ""String_Node_Str"");
    return;
  }
  Migrator migrator=null;
  try {
    migrator=createMigrator();
    migrator.setContexts(getContexts());
    migrator.setMode(Migrator.Mode.EXECUTE_MODE);
    if (isPromptOnNonLocalDatabase() && !migrator.isSafeToRunMigration()) {
      if (migrator.swingPromptForNonLocalDatabase()) {
        throw new MigrationFailedException(""String_Node_Str"");
      }
    }
    if (isDropFirst()) {
      migrator.dropAll();
    }
    migrator.migrate();
  }
 catch (  Exception e) {
    throw new BuildException(e);
  }
 finally {
    if (migrator != null && migrator.getDatabase() != null && migrator.getDatabase().getConnection() != null) {
      try {
        migrator.getDatabase().getConnection().close();
      }
 catch (      SQLException e) {
        throw new BuildException(e);
      }
    }
  }
}","public void execute() throws BuildException {
  String shouldRunProperty=System.getProperty(Migrator.SHOULD_RUN_SYSTEM_PROPERTY);
  if (shouldRunProperty != null && !Boolean.valueOf(shouldRunProperty)) {
    log(""String_Node_Str"" + Migrator.SHOULD_RUN_SYSTEM_PROPERTY + ""String_Node_Str"");
    return;
  }
  Migrator migrator=null;
  try {
    migrator=createMigrator();
    migrator.setContexts(getContexts());
    migrator.setMode(Migrator.Mode.EXECUTE_MODE);
    if (isPromptOnNonLocalDatabase() && !migrator.isSafeToRunMigration() && migrator.swingPromptForNonLocalDatabase()) {
      throw new MigrationFailedException(""String_Node_Str"");
    }
    if (isDropFirst()) {
      migrator.dropAll();
    }
    migrator.migrate();
  }
 catch (  Exception e) {
    throw new BuildException(e);
  }
 finally {
    if (migrator != null && migrator.getDatabase() != null && migrator.getDatabase().getConnection() != null) {
      try {
        migrator.getDatabase().getConnection().close();
      }
 catch (      SQLException e) {
        throw new BuildException(e);
      }
    }
  }
}"
84304,"public String[] generateStatements(Database database) throws UnsupportedChangeException {
  if (!database.supportsSequences()) {
    throw new UnsupportedChangeException(""String_Node_Str"" + database.getProductName());
  }
 else   if (database instanceof HsqlDatabase) {
    return new String[]{""String_Node_Str"" + sequenceName + ""String_Node_Str""+ minValue};
  }
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  buffer.append(sequenceName);
  if (incrementBy != null) {
    buffer.append(""String_Node_Str"").append(incrementBy);
  }
  if (minValue != null) {
    buffer.append(""String_Node_Str"").append(minValue);
  }
  if (maxValue != null) {
    buffer.append(""String_Node_Str"").append(maxValue);
  }
  String[] returnStrings=new String[]{buffer.toString().trim()};
  if (database instanceof OracleDatabase) {
    if (ordered != null && ordered) {
      returnStrings[0]+=""String_Node_Str"";
    }
  }
  return returnStrings;
}","public String[] generateStatements(Database database) throws UnsupportedChangeException {
  if (!database.supportsSequences()) {
    throw new UnsupportedChangeException(""String_Node_Str"" + database.getProductName());
  }
 else   if (database instanceof HsqlDatabase) {
    return new String[]{""String_Node_Str"" + sequenceName + ""String_Node_Str""+ minValue};
  }
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  buffer.append(sequenceName);
  if (incrementBy != null) {
    buffer.append(""String_Node_Str"").append(incrementBy);
  }
  if (minValue != null) {
    buffer.append(""String_Node_Str"").append(minValue);
  }
  if (maxValue != null) {
    buffer.append(""String_Node_Str"").append(maxValue);
  }
  String[] returnStrings=new String[]{buffer.toString().trim()};
  if (database instanceof OracleDatabase && ordered != null && ordered) {
    returnStrings[0]+=""String_Node_Str"";
  }
  return returnStrings;
}"
84305,"public Element createNode(Document document){
  Element element=document.createElement(""String_Node_Str"");
  element.setAttribute(""String_Node_Str"",getName());
  if (getType() != null) {
    element.setAttribute(""String_Node_Str"",getType());
  }
  if (getDefaultValue() != null) {
    element.setAttribute(""String_Node_Str"",getDefaultValue());
  }
  if (getDefaultValueNumeric() != null) {
    element.setAttribute(""String_Node_Str"",getDefaultValueNumeric());
  }
  if (getDefaultValueDate() != null) {
    element.setAttribute(""String_Node_Str"",getDefaultValueDate());
  }
  if (getDefaultValueBoolean() != null) {
    element.setAttribute(""String_Node_Str"",getDefaultValueBoolean().toString());
  }
  if (getValue() != null) {
    element.setAttribute(""String_Node_Str"",getValue());
  }
  if (getValueNumeric() != null) {
    element.setAttribute(""String_Node_Str"",getValueNumeric());
  }
  if (getValueBoolean() != null) {
    element.setAttribute(""String_Node_Str"",getValueBoolean().toString());
  }
  if (getValueDate() != null) {
    element.setAttribute(""String_Node_Str"",getValueDate());
  }
  if (isAutoIncrement() != null && isAutoIncrement().booleanValue()) {
    element.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  ConstraintsConfig constraints=getConstraints();
  if (constraints != null) {
    Element constraintsElement=document.createElement(""String_Node_Str"");
    if (constraints.getCheck() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.getCheck());
    }
    if (constraints.getForeignKeyName() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.getForeignKeyName());
    }
    if (constraints.getReferences() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.getReferences());
    }
    if (constraints.isDeferrable() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.isDeferrable().toString());
    }
    if (constraints.isDeleteCascade() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.isDeleteCascade().toString());
    }
    if (constraints.isInitiallyDeferred() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.isInitiallyDeferred().toString());
    }
    if (constraints.isNullable() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.isNullable().toString());
    }
    if (constraints.isPrimaryKey() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.isPrimaryKey().toString());
    }
    if (constraints.isUnique() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.isUnique().toString());
    }
    element.appendChild(constraintsElement);
  }
  return element;
}","public Element createNode(Document document){
  Element element=document.createElement(""String_Node_Str"");
  element.setAttribute(""String_Node_Str"",getName());
  if (getType() != null) {
    element.setAttribute(""String_Node_Str"",getType());
  }
  if (getDefaultValue() != null) {
    element.setAttribute(""String_Node_Str"",getDefaultValue());
  }
  if (getDefaultValueNumeric() != null) {
    element.setAttribute(""String_Node_Str"",getDefaultValueNumeric());
  }
  if (getDefaultValueDate() != null) {
    element.setAttribute(""String_Node_Str"",getDefaultValueDate());
  }
  if (getDefaultValueBoolean() != null) {
    element.setAttribute(""String_Node_Str"",getDefaultValueBoolean().toString());
  }
  if (getValue() != null) {
    element.setAttribute(""String_Node_Str"",getValue());
  }
  if (getValueNumeric() != null) {
    element.setAttribute(""String_Node_Str"",getValueNumeric());
  }
  if (getValueBoolean() != null) {
    element.setAttribute(""String_Node_Str"",getValueBoolean().toString());
  }
  if (getValueDate() != null) {
    element.setAttribute(""String_Node_Str"",getValueDate());
  }
  if (isAutoIncrement() != null && isAutoIncrement()) {
    element.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  ConstraintsConfig constraints=getConstraints();
  if (constraints != null) {
    Element constraintsElement=document.createElement(""String_Node_Str"");
    if (constraints.getCheck() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.getCheck());
    }
    if (constraints.getForeignKeyName() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.getForeignKeyName());
    }
    if (constraints.getReferences() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.getReferences());
    }
    if (constraints.isDeferrable() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.isDeferrable().toString());
    }
    if (constraints.isDeleteCascade() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.isDeleteCascade().toString());
    }
    if (constraints.isInitiallyDeferred() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.isInitiallyDeferred().toString());
    }
    if (constraints.isNullable() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.isNullable().toString());
    }
    if (constraints.isPrimaryKey() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.isPrimaryKey().toString());
    }
    if (constraints.isUnique() != null) {
      constraintsElement.setAttribute(""String_Node_Str"",constraints.isUnique().toString());
    }
    element.appendChild(constraintsElement);
  }
  return element;
}"
84306,"public String[] generateStatements(Database database) throws UnsupportedChangeException {
  if (!database.supportsSequences()) {
    throw new UnsupportedChangeException(database.getProductName() + ""String_Node_Str"");
  }
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  buffer.append(sequenceName);
  if (startValue != null) {
    buffer.append(""String_Node_Str"").append(startValue);
  }
  if (incrementBy != null) {
    buffer.append(""String_Node_Str"").append(incrementBy);
  }
  if (minValue != null) {
    buffer.append(""String_Node_Str"").append(minValue);
  }
  if (maxValue != null) {
    buffer.append(""String_Node_Str"").append(maxValue);
  }
  String[] statements=new String[]{buffer.toString().trim()};
  if (database instanceof OracleDatabase) {
    if (ordered != null && ordered) {
      statements[0]+=""String_Node_Str"";
    }
  }
  return statements;
}","public String[] generateStatements(Database database) throws UnsupportedChangeException {
  if (!database.supportsSequences()) {
    throw new UnsupportedChangeException(database.getProductName() + ""String_Node_Str"");
  }
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  buffer.append(sequenceName);
  if (startValue != null) {
    buffer.append(""String_Node_Str"").append(startValue);
  }
  if (incrementBy != null) {
    buffer.append(""String_Node_Str"").append(incrementBy);
  }
  if (minValue != null) {
    buffer.append(""String_Node_Str"").append(minValue);
  }
  if (maxValue != null) {
    buffer.append(""String_Node_Str"").append(maxValue);
  }
  String[] statements=new String[]{buffer.toString().trim()};
  if (database instanceof OracleDatabase && ordered != null && ordered) {
    statements[0]+=""String_Node_Str"";
  }
  return statements;
}"
84307,"public String[] generateStatements(Database database) throws UnsupportedChangeException {
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"").append(getTableName());
  if (isCascadeConstraints() != null && isCascadeConstraints()) {
    buffer.append(""String_Node_Str"");
  }
  return new String[]{buffer.toString()};
}","public String[] generateStatements(Database database) throws UnsupportedChangeException {
  StringBuffer buffer=new StringBuffer(31);
  buffer.append(""String_Node_Str"").append(getTableName());
  if (isCascadeConstraints() != null && isCascadeConstraints()) {
    buffer.append(""String_Node_Str"");
  }
  return new String[]{buffer.toString()};
}"
84308,"public void setUp() throws SetupException {
  if (file == null)   throw new SetupException(""String_Node_Str"");
  boolean loaded=loadFromClasspath(file);
  if (!loaded)   loaded=loadFromFileSystem(file);
  if (!loaded)   throw new SetupException(""String_Node_Str"" + file + ""String_Node_Str"");
}","public void setUp() throws SetupException {
  if (file == null) {
    throw new SetupException(""String_Node_Str"");
  }
  boolean loaded=loadFromClasspath(file);
  if (!loaded) {
    loaded=loadFromFileSystem(file);
  }
  if (!loaded) {
    throw new SetupException(""String_Node_Str"" + file + ""String_Node_Str"");
  }
}"
84309,"/** 
 * Tries to load a file using the FileOpener. If the fileOpener can not be found then the attempt to load from the classpath the return is false.
 * @param file The file name to try and find.
 * @return True if the file was found and loaded, false otherwise.
 */
private boolean loadFromClasspath(String file) throws SetupException {
  InputStream in=null;
  try {
    FileOpener fo=getFileOpener();
    if (fo == null)     return false;
    in=fo.getResourceAsStream(file);
    if (in == null)     return false;
    sql=StreamUtil.getStreamContents(in);
    return true;
  }
 catch (  IOException ioe) {
    throw new SetupException(""String_Node_Str"" + file + ""String_Node_Str"",ioe);
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException ioe) {
      }
    }
  }
}","/** 
 * Tries to load a file using the FileOpener. If the fileOpener can not be found then the attempt to load from the classpath the return is false.
 * @param file The file name to try and find.
 * @return True if the file was found and loaded, false otherwise.
 */
private boolean loadFromClasspath(String file) throws SetupException {
  InputStream in=null;
  try {
    FileOpener fo=getFileOpener();
    if (fo == null) {
      return false;
    }
    in=fo.getResourceAsStream(file);
    if (in == null) {
      return false;
    }
    sql=StreamUtil.getStreamContents(in);
    return true;
  }
 catch (  IOException ioe) {
    throw new SetupException(""String_Node_Str"" + file + ""String_Node_Str"",ioe);
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException ioe) {
      }
    }
  }
}"
84310,"/** 
 * Generates a single statement for all of the SQL in the file.
 */
public String[] generateStatements(Database database) throws UnsupportedChangeException {
  String[] statements=StringUtils.splitSQL(sql);
  return statements;
}","/** 
 * Generates a single statement for all of the SQL in the file.
 */
public String[] generateStatements(Database database) throws UnsupportedChangeException {
  return StringUtils.splitSQL(sql);
}"
84311,"public static void main(String args[]) throws CommandLineParsingException, IOException {
  String shouldRunProperty=System.getProperty(Migrator.SHOULD_RUN_SYSTEM_PROPERTY);
  if (shouldRunProperty != null && !Boolean.valueOf(shouldRunProperty)) {
    System.out.println(""String_Node_Str"" + Migrator.SHOULD_RUN_SYSTEM_PROPERTY + ""String_Node_Str"");
    return;
  }
  CommandLineMigrator commandLineMigrator=new CommandLineMigrator();
  if (args.length == 1 && ""String_Node_Str"".equals(args[0])) {
    commandLineMigrator.printHelp(System.out);
    return;
  }
 else   if (args.length == 1 && ""String_Node_Str"".equals(args[0])) {
    System.out.println(""String_Node_Str"" + new Migrator(null,null).getBuildVersion() + StreamUtil.getLineSeparator());
    return;
  }
  commandLineMigrator.parseOptions(args);
  File propertiesFile=new File(""String_Node_Str"");
  if (propertiesFile.exists()) {
    commandLineMigrator.parsePropertiesFile(new FileInputStream(propertiesFile));
  }
  List<String> setupMessages=commandLineMigrator.checkSetup();
  if (setupMessages.size() > 0) {
    commandLineMigrator.printHelp(setupMessages,System.out);
    return;
  }
  try {
    commandLineMigrator.applyDefaults();
    commandLineMigrator.configureClassLoader();
    commandLineMigrator.doMigration();
  }
 catch (  Throwable e) {
    String message=e.getMessage();
    if (e.getCause() != null) {
      message=e.getCause().getMessage();
    }
    if (message == null) {
      message=""String_Node_Str"";
    }
    if (e.getCause() instanceof ValidationFailedException) {
      ((ValidationFailedException)e.getCause()).printDescriptiveError(System.out);
    }
 else {
      System.out.println(""String_Node_Str"" + message + (Logger.getLogger(Migrator.DEFAULT_LOG_NAME).equals(Level.OFF) ? ""String_Node_Str"" : ""String_Node_Str""));
      Logger.getLogger(Migrator.DEFAULT_LOG_NAME).log(Level.SEVERE,message,e);
    }
    return;
  }
  if (""String_Node_Str"".equals(commandLineMigrator.command)) {
    System.out.println(""String_Node_Str"");
  }
 else   if (commandLineMigrator.command.startsWith(""String_Node_Str"") && !commandLineMigrator.command.endsWith(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
  }
}","public static void main(String args[]) throws CommandLineParsingException, IOException {
  String shouldRunProperty=System.getProperty(Migrator.SHOULD_RUN_SYSTEM_PROPERTY);
  if (shouldRunProperty != null && !Boolean.valueOf(shouldRunProperty)) {
    System.out.println(""String_Node_Str"" + Migrator.SHOULD_RUN_SYSTEM_PROPERTY + ""String_Node_Str"");
    return;
  }
  CommandLineMigrator commandLineMigrator=new CommandLineMigrator();
  if (args.length == 1 && ""String_Node_Str"".equals(args[0])) {
    commandLineMigrator.printHelp(System.out);
    return;
  }
 else   if (args.length == 1 && ""String_Node_Str"".equals(args[0])) {
    System.out.println(""String_Node_Str"" + new Migrator(null,null).getBuildVersion() + StreamUtil.getLineSeparator());
    return;
  }
  commandLineMigrator.parseOptions(args);
  File propertiesFile=new File(""String_Node_Str"");
  if (propertiesFile.exists()) {
    commandLineMigrator.parsePropertiesFile(new FileInputStream(propertiesFile));
  }
  List<String> setupMessages=commandLineMigrator.checkSetup();
  if (setupMessages.size() > 0) {
    commandLineMigrator.printHelp(setupMessages,System.out);
    return;
  }
  try {
    commandLineMigrator.applyDefaults();
    commandLineMigrator.configureClassLoader();
    commandLineMigrator.doMigration();
  }
 catch (  Throwable e) {
    String message=e.getMessage();
    if (e.getCause() != null) {
      message=e.getCause().getMessage();
    }
    if (message == null) {
      message=""String_Node_Str"";
    }
    if (e.getCause() instanceof ValidationFailedException) {
      ((ValidationFailedException)e.getCause()).printDescriptiveError(System.out);
    }
 else {
      System.out.println(""String_Node_Str"" + message + (Logger.getLogger(Migrator.DEFAULT_LOG_NAME).getLevel().equals(Level.OFF) ? ""String_Node_Str"" : ""String_Node_Str""));
      Logger.getLogger(Migrator.DEFAULT_LOG_NAME).log(Level.SEVERE,message,e);
    }
    return;
  }
  if (""String_Node_Str"".equals(commandLineMigrator.command)) {
    System.out.println(""String_Node_Str"");
  }
 else   if (commandLineMigrator.command.startsWith(""String_Node_Str"") && !commandLineMigrator.command.endsWith(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
  }
}"
84312,"public InputSource resolveEntity(String publicId,String systemId) throws IOException {
  if (systemId != null) {
    int iSlash=systemId.lastIndexOf(""String_Node_Str"");
    if (iSlash >= 0) {
      String xsdFile=systemId.substring(iSlash + 1);
      try {
        InputStream resourceAsStream=getClass().getClassLoader().getResourceAsStream(SEARCH_PACKAGE + xsdFile);
        if (resourceAsStream == null) {
          return null;
        }
        InputSource source=new InputSource(resourceAsStream);
        source.setPublicId(publicId);
        source.setSystemId(systemId);
        return source;
      }
 catch (      Exception ex) {
        return null;
      }
    }
  }
  return null;
}","public InputSource resolveEntity(String publicId,String systemId) throws IOException {
  if (systemId != null) {
    int iSlash=systemId.lastIndexOf('/');
    if (iSlash >= 0) {
      String xsdFile=systemId.substring(iSlash + 1);
      try {
        InputStream resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(SEARCH_PACKAGE + xsdFile);
        if (resourceAsStream == null) {
          return null;
        }
        InputSource source=new InputSource(resourceAsStream);
        source.setPublicId(publicId);
        source.setSystemId(systemId);
        return source;
      }
 catch (      Exception ex) {
        return null;
      }
    }
  }
  return null;
}"
84313,"public ValidateChangeLogHandler(Migrator migrator,String physicalChangeLogLocation,FileOpener fileOpener){
  super(migrator,physicalChangeLogLocation,fileOpener);
  if (invalidMD5Sums == null) {
    invalidMD5Sums=new ArrayList<ChangeSet>();
  }
  if (failedPreconditions == null) {
    failedPreconditions=new ArrayList<FailedPrecondition>();
  }
  if (duplicateChangeSets == null) {
    duplicateChangeSets=new HashSet<ChangeSet>();
  }
  setupExceptions=new ArrayList<SetupException>();
}","public ValidateChangeLogHandler(Migrator migrator,String physicalChangeLogLocation,FileOpener fileOpener){
  super(migrator,physicalChangeLogLocation,fileOpener);
  if (invalidMD5Sums == null) {
    invalidMD5Sums=new ArrayList<ChangeSet>();
  }
  if (failedPreconditions == null) {
    failedPreconditions=new ArrayList<FailedPrecondition>();
  }
  if (duplicateChangeSets == null) {
    duplicateChangeSets=new HashSet<ChangeSet>();
  }
  if (setupExceptions != null) {
    setupExceptions=new ArrayList<SetupException>();
  }
}"
84314,"public boolean checkUserName(Migrator migrator){
  try {
    String loggedusername=migrator.getDatabase().getConnection().getMetaData().getUserName();
    loggedusername=loggedusername.substring(0,loggedusername.indexOf(""String_Node_Str""));
    return username.equals(loggedusername);
  }
 catch (  SQLException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public boolean checkUserName(Migrator migrator){
  try {
    String loggedusername=migrator.getDatabase().getConnection().getMetaData().getUserName();
    loggedusername=loggedusername.substring(0,loggedusername.indexOf('@'));
    return username.equals(loggedusername);
  }
 catch (  SQLException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
84315,"/** 
 * This method will actually execute each of the changes in the list against the specified database.
 */
public void execute() throws DatabaseHistoryException, MigrationFailedException {
  Migrator migrator=getDatabaseChangeLog().getMigrator();
  Connection connection=migrator.getDatabase().getConnection();
  try {
    Writer outputSQLWriter=getDatabaseChangeLog().getMigrator().getOutputSQLWriter();
    if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
      log.finest(""String_Node_Str"" + toString());
      for (      Change change : getChanges()) {
        change.executeStatements(migrator.getDatabase());
        log.finest(change.getConfirmationMessage());
      }
      connection.commit();
      log.finest(""String_Node_Str"" + toString() + ""String_Node_Str"");
    }
 else     if (migrator.getMode().equals(Migrator.Mode.OUTPUT_SQL_MODE)) {
      outputSQLWriter.write(""String_Node_Str"" + toString() + StreamUtil.getLineSeparator());
      writeComments(outputSQLWriter);
      for (      Change change : getChanges()) {
        change.saveStatements(getDatabaseChangeLog().getMigrator().getDatabase(),outputSQLWriter);
      }
    }
 else     if (migrator.getMode().equals(Migrator.Mode.EXECUTE_ROLLBACK_MODE)) {
      log.finest(""String_Node_Str"" + toString());
      if (rollBackStatements != null && rollBackStatements.length > 0) {
        Statement statement=connection.createStatement();
        for (        String rollback : rollBackStatements) {
          try {
            statement.execute(rollback);
          }
 catch (          SQLException e) {
            throw new RollbackFailedException(""String_Node_Str"" + rollback + ""String_Node_Str"");
          }
        }
        statement.close();
      }
 else {
        List<Change> changes=getChanges();
        for (int i=changes.size() - 1; i >= 0; i--) {
          Change change=changes.get(i);
          change.executeRollbackStatements(migrator.getDatabase());
          log.finest(change.getConfirmationMessage());
        }
      }
      connection.commit();
      log.finest(""String_Node_Str"" + toString() + ""String_Node_Str"");
    }
 else     if (migrator.getMode().equals(Migrator.Mode.OUTPUT_ROLLBACK_SQL_MODE) || migrator.getMode().equals(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE)) {
      outputSQLWriter.write(""String_Node_Str"" + toString() + StreamUtil.getLineSeparator());
      writeComments(outputSQLWriter);
      if (rollBackStatements != null && rollBackStatements.length > 0) {
        for (        String statement : rollBackStatements) {
          outputSQLWriter.append(statement + ""String_Node_Str"" + StreamUtil.getLineSeparator()+ StreamUtil.getLineSeparator());
        }
      }
 else {
        for (int i=changes.size() - 1; i >= 0; i--) {
          Change change=changes.get(i);
          change.saveRollbackStatement(getDatabaseChangeLog().getMigrator().getDatabase(),outputSQLWriter);
        }
      }
    }
 else     if (migrator.getMode().equals(Migrator.Mode.OUTPUT_CHANGELOG_ONLY_SQL_MODE)) {
    }
 else {
      throw new MigrationFailedException(""String_Node_Str"" + migrator.getMode());
    }
    connection.commit();
  }
 catch (  Exception e) {
    try {
      connection.rollback();
    }
 catch (    SQLException e1) {
      throw new MigrationFailedException(""String_Node_Str"" + toString() + ""String_Node_Str""+ e.getMessage(),e);
    }
    throw new MigrationFailedException(""String_Node_Str"" + toString() + ""String_Node_Str""+ e.getMessage(),e);
  }
}","/** 
 * This method will actually execute each of the changes in the list against the specified database.
 */
public void execute() throws MigrationFailedException {
  Migrator migrator=getDatabaseChangeLog().getMigrator();
  Connection connection=migrator.getDatabase().getConnection();
  try {
    Writer outputSQLWriter=getDatabaseChangeLog().getMigrator().getOutputSQLWriter();
    if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
      log.finest(""String_Node_Str"" + toString());
      for (      Change change : getChanges()) {
        change.executeStatements(migrator.getDatabase());
        log.finest(change.getConfirmationMessage());
      }
      connection.commit();
      log.finest(""String_Node_Str"" + toString() + ""String_Node_Str"");
    }
 else     if (migrator.getMode().equals(Migrator.Mode.OUTPUT_SQL_MODE)) {
      outputSQLWriter.write(""String_Node_Str"" + toString() + StreamUtil.getLineSeparator());
      writeComments(outputSQLWriter);
      for (      Change change : getChanges()) {
        change.saveStatements(getDatabaseChangeLog().getMigrator().getDatabase(),outputSQLWriter);
      }
    }
 else     if (migrator.getMode().equals(Migrator.Mode.EXECUTE_ROLLBACK_MODE)) {
      log.finest(""String_Node_Str"" + toString());
      if (rollBackStatements != null && rollBackStatements.length > 0) {
        Statement statement=connection.createStatement();
        for (        String rollback : rollBackStatements) {
          try {
            statement.execute(rollback);
          }
 catch (          SQLException e) {
            throw new RollbackFailedException(""String_Node_Str"" + rollback + ""String_Node_Str"");
          }
        }
        statement.close();
      }
 else {
        List<Change> changes=getChanges();
        for (int i=changes.size() - 1; i >= 0; i--) {
          Change change=changes.get(i);
          change.executeRollbackStatements(migrator.getDatabase());
          log.finest(change.getConfirmationMessage());
        }
      }
      connection.commit();
      log.finest(""String_Node_Str"" + toString() + ""String_Node_Str"");
    }
 else     if (migrator.getMode().equals(Migrator.Mode.OUTPUT_ROLLBACK_SQL_MODE) || migrator.getMode().equals(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE)) {
      outputSQLWriter.write(""String_Node_Str"" + toString() + StreamUtil.getLineSeparator());
      writeComments(outputSQLWriter);
      if (rollBackStatements != null && rollBackStatements.length > 0) {
        for (        String statement : rollBackStatements) {
          outputSQLWriter.append(statement + ""String_Node_Str"" + StreamUtil.getLineSeparator()+ StreamUtil.getLineSeparator());
        }
      }
 else {
        for (int i=changes.size() - 1; i >= 0; i--) {
          Change change=changes.get(i);
          change.saveRollbackStatement(getDatabaseChangeLog().getMigrator().getDatabase(),outputSQLWriter);
        }
      }
    }
 else     if (migrator.getMode().equals(Migrator.Mode.OUTPUT_CHANGELOG_ONLY_SQL_MODE)) {
    }
 else {
      throw new MigrationFailedException(""String_Node_Str"" + migrator.getMode());
    }
    connection.commit();
  }
 catch (  Exception e) {
    try {
      connection.rollback();
    }
 catch (    SQLException e1) {
      throw new MigrationFailedException(""String_Node_Str"" + toString() + ""String_Node_Str""+ e.getMessage(),e);
    }
    throw new MigrationFailedException(""String_Node_Str"" + toString() + ""String_Node_Str""+ e.getMessage(),e);
  }
}"
84316,"protected abstract void handleChangeSet(ChangeSet changeSet) throws JDBCException, DatabaseHistoryException, MigrationFailedException, PreconditionFailedException, IOException ;","protected abstract void handleChangeSet(ChangeSet changeSet) throws JDBCException, DatabaseHistoryException, MigrationFailedException, IOException ;"
84317,"protected void handleChangeSet(ChangeSet changeSet) throws JDBCException, DatabaseHistoryException, MigrationFailedException, PreconditionFailedException, IOException {
  for (  RanChangeSet cs : ranChangesToRollback) {
    if (cs.isSameAs(changeSet)) {
      allChangeSets.add(0,changeSet);
    }
  }
}","protected void handleChangeSet(ChangeSet changeSet) throws JDBCException, DatabaseHistoryException, MigrationFailedException, IOException {
  for (  RanChangeSet cs : ranChangesToRollback) {
    if (cs.isSameAs(changeSet)) {
      allChangeSets.add(0,changeSet);
    }
  }
}"
84318,"protected void handleChangeSet(ChangeSet changeSet) throws JDBCException, DatabaseHistoryException, MigrationFailedException, PreconditionFailedException, IOException {
  boolean alreadyRan=false;
  for (  RanChangeSet cs : ranChangeSets) {
    if (cs.isSameAs(changeSet)) {
      alreadyRan=true;
      break;
    }
  }
  if (!alreadyRan) {
    changesToRollback.add(0,changeSet);
  }
}","protected void handleChangeSet(ChangeSet changeSet) throws JDBCException, DatabaseHistoryException, MigrationFailedException, IOException {
  boolean alreadyRan=false;
  for (  RanChangeSet cs : ranChangeSets) {
    if (cs.isSameAs(changeSet)) {
      alreadyRan=true;
      break;
    }
  }
  if (!alreadyRan) {
    changesToRollback.add(0,changeSet);
  }
}"
84319,"public AntFileOpener(Project project,Path classpath){
  loader=new AntClassLoader(project,classpath);
}","public AntFileOpener(final Project project,final Path classpath){
  loader=AccessController.doPrivileged(new PrivilegedAction<AntClassLoader>(){
    public AntClassLoader run(){
      return new AntClassLoader(project,classpath);
    }
  }
);
}"
84320,"protected Migrator createMigrator() throws MalformedURLException, ClassNotFoundException, JDBCException, SQLException, MigrationFailedException, IllegalAccessException, InstantiationException {
  String[] strings=classpath.list();
  List<URL> taskClassPath=new ArrayList<URL>();
  for (int i=0; i < strings.length; i++) {
    URL url=new File(strings[i]).toURL();
    taskClassPath.add(url);
  }
  Driver driver=(Driver)Class.forName(getDriver(),true,new URLClassLoader(taskClassPath.toArray(new URL[taskClassPath.size()]))).newInstance();
  Properties info=new Properties();
  info.put(""String_Node_Str"",getUsername());
  info.put(""String_Node_Str"",getPassword());
  Connection connection=driver.connect(getUrl(),info);
  if (connection == null) {
    throw new JDBCException(""String_Node_Str"" + getUrl() + ""String_Node_Str""+ driver.getClass().getName()+ ""String_Node_Str"");
  }
  Migrator migrator=new Migrator(getChangeLogFile().trim(),new AntFileOpener(getProject(),classpath));
  migrator.init(connection);
  return migrator;
}","protected Migrator createMigrator() throws MalformedURLException, ClassNotFoundException, JDBCException, SQLException, MigrationFailedException, IllegalAccessException, InstantiationException {
  String[] strings=classpath.list();
  final List<URL> taskClassPath=new ArrayList<URL>();
  for (int i=0; i < strings.length; i++) {
    URL url=new File(strings[i]).toURL();
    taskClassPath.add(url);
  }
  URLClassLoader loader=AccessController.doPrivileged(new PrivilegedAction<URLClassLoader>(){
    public URLClassLoader run(){
      return new URLClassLoader(taskClassPath.toArray(new URL[taskClassPath.size()]));
    }
  }
);
  Driver driver=(Driver)Class.forName(getDriver(),true,loader).newInstance();
  Properties info=new Properties();
  info.put(""String_Node_Str"",getUsername());
  info.put(""String_Node_Str"",getPassword());
  Connection connection=driver.connect(getUrl(),info);
  if (connection == null) {
    throw new JDBCException(""String_Node_Str"" + getUrl() + ""String_Node_Str""+ driver.getClass().getName()+ ""String_Node_Str"");
  }
  Migrator migrator=new Migrator(getChangeLogFile().trim(),new AntFileOpener(getProject(),classpath));
  migrator.init(connection);
  return migrator;
}"
84321,"public void setRollbackDate(Date rollbackDate){
  this.rollbackDate=rollbackDate;
}","public void setRollbackDate(Date rollbackDate){
  if (rollbackDate != null) {
    this.rollbackDate=new Date(rollbackDate.getTime());
  }
}"
84322,"public Date getRollbackDate(){
  return rollbackDate;
}","public Date getRollbackDate(){
  if (rollbackDate == null) {
    return null;
  }
  return (Date)rollbackDate.clone();
}"
84323,"protected void configureClassLoader() throws CommandLineParsingException {
  String[] classpath;
  if (isWindows()) {
    classpath=this.classpath.split(""String_Node_Str"");
  }
 else {
    classpath=this.classpath.split(""String_Node_Str"");
  }
  List<URL> urls=new ArrayList<URL>();
  for (  String classpathEntry : classpath) {
    File classPathFile=new File(classpathEntry);
    if (!classPathFile.exists()) {
      throw new CommandLineParsingException(classPathFile.getAbsolutePath() + ""String_Node_Str"");
    }
    try {
      if (classpathEntry.endsWith(""String_Node_Str"")) {
        addWarFileClasspathEntries(classPathFile,urls);
      }
 else       if (classpathEntry.endsWith(""String_Node_Str"")) {
        JarFile earZip=new JarFile(classPathFile);
        Enumeration<? extends JarEntry> entries=earZip.entries();
        while (entries.hasMoreElements()) {
          JarEntry entry=entries.nextElement();
          if (entry.getName().toLowerCase().endsWith(""String_Node_Str"")) {
            File jar=extract(earZip,entry);
            urls.add(new URL(""String_Node_Str"" + jar.toURL() + ""String_Node_Str""));
            jar.deleteOnExit();
          }
 else           if (entry.getName().toLowerCase().endsWith(""String_Node_Str"")) {
            File warFile=extract(earZip,entry);
            addWarFileClasspathEntries(warFile,urls);
          }
        }
      }
 else {
        urls.add(new File(classpathEntry).toURL());
      }
    }
 catch (    Exception e) {
      throw new CommandLineParsingException(e);
    }
  }
  if (includeSystemClasspath) {
    classLoader=new URLClassLoader(urls.toArray(new URL[urls.size()]),Thread.currentThread().getContextClassLoader());
  }
 else {
    classLoader=new URLClassLoader(urls.toArray(new URL[urls.size()]));
  }
}","protected void configureClassLoader() throws CommandLineParsingException {
  String[] classpath;
  if (isWindows()) {
    classpath=this.classpath.split(""String_Node_Str"");
  }
 else {
    classpath=this.classpath.split(""String_Node_Str"");
  }
  final List<URL> urls=new ArrayList<URL>();
  for (  String classpathEntry : classpath) {
    File classPathFile=new File(classpathEntry);
    if (!classPathFile.exists()) {
      throw new CommandLineParsingException(classPathFile.getAbsolutePath() + ""String_Node_Str"");
    }
    try {
      if (classpathEntry.endsWith(""String_Node_Str"")) {
        addWarFileClasspathEntries(classPathFile,urls);
      }
 else       if (classpathEntry.endsWith(""String_Node_Str"")) {
        JarFile earZip=new JarFile(classPathFile);
        Enumeration<? extends JarEntry> entries=earZip.entries();
        while (entries.hasMoreElements()) {
          JarEntry entry=entries.nextElement();
          if (entry.getName().toLowerCase().endsWith(""String_Node_Str"")) {
            File jar=extract(earZip,entry);
            urls.add(new URL(""String_Node_Str"" + jar.toURL() + ""String_Node_Str""));
            jar.deleteOnExit();
          }
 else           if (entry.getName().toLowerCase().endsWith(""String_Node_Str"")) {
            File warFile=extract(earZip,entry);
            addWarFileClasspathEntries(warFile,urls);
          }
        }
      }
 else {
        urls.add(new File(classpathEntry).toURL());
      }
    }
 catch (    Exception e) {
      throw new CommandLineParsingException(e);
    }
  }
  if (includeSystemClasspath) {
    classLoader=AccessController.doPrivileged(new PrivilegedAction<URLClassLoader>(){
      public URLClassLoader run(){
        return new URLClassLoader(urls.toArray(new URL[urls.size()]),Thread.currentThread().getContextClassLoader());
      }
    }
);
  }
 else {
    classLoader=AccessController.doPrivileged(new PrivilegedAction<URLClassLoader>(){
      public URLClassLoader run(){
        return new URLClassLoader(urls.toArray(new URL[urls.size()]));
      }
    }
);
  }
}"
84324,"private void writeComments(Writer writer) throws IOException {
  if (StringUtils.trimToNull(comments) != null) {
    String[] commentLines=comments.split(StreamUtil.getLineSeparator());
    for (    String line : commentLines) {
      writer.append(""String_Node_Str"" + line.trim() + StreamUtil.getLineSeparator());
    }
  }
}","private void writeComments(Writer writer) throws IOException {
  if (StringUtils.trimToNull(comments) != null) {
    String[] commentLines=comments.split(""String_Node_Str"");
    for (    String line : commentLines) {
      writer.append(""String_Node_Str"" + line.trim() + StreamUtil.getLineSeparator());
    }
  }
}"
84325,"/** 
 * Walks the module tree from bottom to top. Executes the given task against each module this module depends on and then against this module. Uses states to detect circular dependencies and avoid duplication.
 */
private void walk(Set<JavaHandler> stack,Set<JavaHandler> finished,JavaTask task,WalkStrategy strategy,Set<String> dependencies) throws BakeError, IOException {
  if (finished.contains(this)) {
    Log.v(""String_Node_Str"",task,module.name());
    return;
  }
  if (stack.contains(this)) {
    throw new BakeError(""String_Node_Str"" + task + ""String_Node_Str""+ module.name()+ ""String_Node_Str""+ stack);
  }
  stack.add(this);
  try {
    for (    JavaHandler other : dependenciesToHandlers(dependencies)) {
      other.walk(stack,finished,task,strategy,strategy.directDependenciesFor(other));
    }
    task.execute(this);
    finished.add(this);
  }
  finally {
    stack.remove(this);
  }
}","/** 
 * Walks the module tree from bottom to top. Executes the given task against each module this module depends on and then against this module. Uses states to detect circular dependencies and avoid duplication.
 */
private void walk(Set<JavaHandler> stack,Set<JavaHandler> finished,JavaTask task,WalkStrategy strategy,Set<String> dependencies) throws BakeError, IOException {
  if (finished.contains(this)) {
    Log.v(""String_Node_Str"",task,module.name());
    return;
  }
  if (stack.contains(this)) {
    throw new BakeError(""String_Node_Str"" + task.description() + ""String_Node_Str""+ module.name()+ ""String_Node_Str""+ stack);
  }
  stack.add(this);
  try {
    for (    JavaHandler other : dependenciesToHandlers(dependencies)) {
      other.walk(stack,finished,task,strategy,strategy.directDependenciesFor(other));
    }
    task.execute(this);
    finished.add(this);
  }
  finally {
    stack.remove(this);
  }
}"
84326,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (command.getName().equalsIgnoreCase(""String_Node_Str"")) {
    if (sender instanceof Player) {
      Player player=(Player)sender;
      if (!has(player,""String_Node_Str"")) {
        player.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (admins != null && !showStealthed) {
        if (!has(player,""String_Node_Str"")) {
          whoLimited(sender,args);
          return true;
        }
      }
    }
    whoUnlimited(sender,args);
    return true;
  }
 else   if (command.getName().equalsIgnoreCase(""String_Node_Str"")) {
    if (sender instanceof Player) {
      if (!has((Player)sender,""String_Node_Str"")) {
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
    }
    if (args.length < 1) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else {
      whois(sender,args);
      return true;
    }
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (command.getName().equalsIgnoreCase(""String_Node_Str"")) {
    if (sender instanceof Player) {
      Player player=(Player)sender;
      if (!has(player,""String_Node_Str"")) {
        player.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (admins != null && !showStealthed) {
        if (!has(player,""String_Node_Str"")) {
          whoLimited(player,args);
          return true;
        }
      }
    }
    whoUnlimited(sender,args);
    return true;
  }
 else   if (command.getName().equalsIgnoreCase(""String_Node_Str"")) {
    if (sender instanceof Player) {
      if (!has((Player)sender,""String_Node_Str"")) {
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
    }
    if (args.length < 1) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else {
      whois(sender,args);
      return true;
    }
  }
  return false;
}"
84327,"public void onEnable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  plugName=""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str"";
  if (!setupDependencies()) {
    this.getServer().getPluginManager().disablePlugin(this);
    return;
  }
  File yml=new File(getDataFolder() + ""String_Node_Str"");
  if (!yml.exists()) {
    new File(getDataFolder().toString()).mkdir();
    try {
      yml.createNewFile();
    }
 catch (    IOException ex) {
      log.info(plugName + ""String_Node_Str"");
    }
  }
  setupConfiguration();
  log.info(plugName + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}","public void onEnable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  plugName=""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str"";
  if (!setupDependencies()) {
    this.getServer().getPluginManager().disablePlugin(this);
    return;
  }
  setupOptionals();
  File yml=new File(getDataFolder() + ""String_Node_Str"");
  if (!yml.exists()) {
    new File(getDataFolder().toString()).mkdir();
    try {
      yml.createNewFile();
    }
 catch (    IOException ex) {
      log.info(plugName + ""String_Node_Str"");
    }
  }
  setupConfiguration();
  log.info(plugName + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}"
84328,"private void whoLimited(CommandSender sender,String[] args){
  World world=null;
  if (args.length > 0) {
    world=getServer().getWorld(args[0]);
  }
  String playerList=""String_Node_Str"";
  int i=0;
  int j=0;
  for (  Player player : getServer().getOnlinePlayers()) {
    if (isStealthed(player.getName()))     continue;
    if ((world == null && args.length == 0) || (world != null && player.getWorld().equals(world)) || (world == null && player.getName().contains(args[0]))) {
      playerList+=colorize(player);
      i++;
    }
    j++;
  }
  if (i == 0 && world == null && args.length > 0) {
    sender.sendMessage(""String_Node_Str"");
  }
 else   if (i == 0 && world != null) {
    sender.sendMessage(""String_Node_Str"" + world.getName());
  }
 else   if (args.length == 0) {
    String message=ChatColor.WHITE + ""String_Node_Str"" + ChatColor.BLUE+ i+ ""String_Node_Str""+ j+ ChatColor.WHITE+ ""String_Node_Str""+ playerList;
    sender.sendMessage(message);
  }
 else   if (world != null) {
    String message=ChatColor.WHITE + ""String_Node_Str"" + ChatColor.BLUE+ i+ ChatColor.WHITE+ ""String_Node_Str""+ world.getName()+ ""String_Node_Str""+ playerList;
    sender.sendMessage(message);
  }
 else {
    String message=ChatColor.WHITE + ""String_Node_Str"" + ChatColor.BLUE+ i+ ChatColor.WHITE+ ""String_Node_Str""+ playerList;
    sender.sendMessage(message);
  }
}","private void whoLimited(Player sender,String[] args){
  World world=null;
  if (args.length > 0) {
    world=getServer().getWorld(args[0]);
  }
  String playerList=""String_Node_Str"";
  int i=0;
  int j=0;
  for (  Player player : getServer().getOnlinePlayers()) {
    if (isStealthed(player.getName(),sender))     continue;
    if ((world == null && args.length == 0) || (world != null && player.getWorld().equals(world)) || (world == null && player.getName().contains(args[0]))) {
      playerList+=colorize(player);
      i++;
    }
    j++;
  }
  if (i == 0 && world == null && args.length > 0) {
    sender.sendMessage(""String_Node_Str"");
  }
 else   if (i == 0 && world != null) {
    sender.sendMessage(""String_Node_Str"" + world.getName());
  }
 else   if (args.length == 0) {
    String message=ChatColor.WHITE + ""String_Node_Str"" + ChatColor.BLUE+ i+ ""String_Node_Str""+ j+ ChatColor.WHITE+ ""String_Node_Str""+ playerList;
    sender.sendMessage(message);
  }
 else   if (world != null) {
    String message=ChatColor.WHITE + ""String_Node_Str"" + ChatColor.BLUE+ i+ ChatColor.WHITE+ ""String_Node_Str""+ world.getName()+ ""String_Node_Str""+ playerList;
    sender.sendMessage(message);
  }
 else {
    String message=ChatColor.WHITE + ""String_Node_Str"" + ChatColor.BLUE+ i+ ChatColor.WHITE+ ""String_Node_Str""+ playerList;
    sender.sendMessage(message);
  }
}"
84329,"public boolean isStealthed(String player){
  if (admins == null)   return false;
 else   return AdminHandler.isStealthed(player);
}","public boolean isStealthed(String player,Player p){
  if (admins == null)   return false;
 else   return AdminHandler.isStealthed(player,p);
}"
84330,"@Override public void onPlayerLogin(PlayerLoginEvent event){
  Player player=event.getPlayer();
  if (displayOnLogin) {
    plugin.getServer().getPluginCommand(""String_Node_Str"").execute(player,""String_Node_Str"",new String[0]);
  }
  if (prefixTabName || colorOptionTabName)   player.setPlayerListName(colorizeTabName(player));
}","@Override public void onPlayerLogin(PlayerLoginEvent event){
  Player player=event.getPlayer();
  if (displayOnLogin) {
    plugin.getServer().getPluginCommand(""String_Node_Str"").execute(player,""String_Node_Str"",new String[0]);
  }
  if (prefixTabName || colorOptionTabName) {
    String listName=colorizeTabName(player);
    if (listName.length() > 16)     listName=listName.substring(0,15);
    player.setPlayerListName(listName);
  }
}"
84331,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  tvNewItem=(AutoCompleteTextView)findViewById(R.id.tvNewItem);
  btnAddItem=(Button)findViewById(R.id.btnAddItem);
  lvItems=(ListView)findViewById(R.id.lvItems);
  mFactory=LayoutInflater.from(this);
  mCursor=getContentResolver().query(GroceryProvider.CONTENT_URI,GroceryProvider.ITEM_QUERY_COLUMNS,null,null,GroceryProvider.DEFAULT_SORT_ORDER);
  lvItems.setAdapter(new GroceryListAdapter(this,mCursor));
  btnAddItem.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      GroceryListActivity.add_item(getApplicationContext(),tvNewItem.getText().toString());
      tvNewItem.setText(""String_Node_Str"");
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  tvNewItem=(AutoCompleteTextView)findViewById(R.id.tvNewItem);
  btnAddItem=(Button)findViewById(R.id.btnAddItem);
  lvItems=(ListView)findViewById(R.id.lvItems);
  mFactory=LayoutInflater.from(this);
  mCursor=getContentResolver().query(GroceryProvider.CONTENT_URI,GroceryProvider.ITEM_QUERY_COLUMNS,null,null,GroceryProvider.DEFAULT_SORT_ORDER);
  lvItems.setAdapter(new GroceryListAdapter(this,mCursor));
  lvItems.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      CheckedTextView cv=(CheckedTextView)view;
      boolean isChecked=!cv.isChecked();
      GroceryListActivity.toggle_item(getApplicationContext(),id,isChecked);
    }
  }
);
  lvItems.setOnItemLongClickListener(new OnItemLongClickListener(){
    public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){
      GroceryListActivity.delete_item(getApplicationContext(),id);
      return false;
    }
  }
);
  btnAddItem.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      GroceryListActivity.add_item(getApplicationContext(),tvNewItem.getText().toString());
      tvNewItem.setText(""String_Node_Str"");
    }
  }
);
}"
84332,"public void onClick(View v){
  boolean isChecked=!((CheckedTextView)v).isChecked();
  GroceryListActivity.toggle_item(getApplicationContext(),item.id,isChecked);
}","public void onClick(View v){
  GroceryListActivity.add_item(getApplicationContext(),tvNewItem.getText().toString());
  tvNewItem.setText(""String_Node_Str"");
}"
84333,"@Override public void bindView(View view,Context context,Cursor cursor){
  final GroceryItem item=new GroceryItem(cursor);
  CheckedTextView text1=(CheckedTextView)view.findViewById(android.R.id.text1);
  text1.setText(item.text);
  text1.setChecked(item.checked);
  text1.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      boolean isChecked=!((CheckedTextView)v).isChecked();
      GroceryListActivity.toggle_item(getApplicationContext(),item.id,isChecked);
    }
  }
);
  text1.setLongClickable(true);
  text1.setOnLongClickListener(new OnLongClickListener(){
    public boolean onLongClick(    View v){
      GroceryListActivity.delete_item(getApplicationContext(),item.id);
      return false;
    }
  }
);
}","@Override public void bindView(View view,Context context,Cursor cursor){
  final GroceryItem item=new GroceryItem(cursor);
  CheckedTextView cv=(CheckedTextView)view;
  cv.setText(item.text);
  cv.setChecked(item.checked);
}"
84334,"@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  View ret=mFactory.inflate(android.R.layout.simple_list_item_multiple_choice,parent,false);
  return ret;
}","@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  return mFactory.inflate(android.R.layout.simple_list_item_multiple_choice,parent,false);
}"
84335,"public GroceryItem(Cursor c){
  id=c.getInt(c.getColumnIndex(GroceryProvider.KEY_ROWID));
  text=c.getString(c.getColumnIndex(GroceryProvider.KEY_TEXT));
  checked=(c.getInt(c.getColumnIndex(GroceryProvider.KEY_CHECKED)) == 1);
}","public GroceryItem(Cursor c){
  id=c.getLong(c.getColumnIndex(GroceryProvider.KEY_ROWID));
  text=c.getString(c.getColumnIndex(GroceryProvider.KEY_TEXT));
  checked=(c.getInt(c.getColumnIndex(GroceryProvider.KEY_CHECKED)) == 1);
}"
84336,"public static void delete_item(Context c,int id){
  Uri uri=ContentUris.withAppendedId(GroceryProvider.CONTENT_URI,id);
  c.getContentResolver().delete(uri,null,null);
}","public static void delete_item(Context c,long id){
  Uri uri=ContentUris.withAppendedId(GroceryProvider.CONTENT_URI,id);
  c.getContentResolver().delete(uri,null,null);
}"
84337,"public static void toggle_item(Context c,int id,boolean isChecked){
  ContentValues values=new ContentValues(1);
  values.put(GroceryProvider.KEY_CHECKED,isChecked ? 1 : 0);
  Uri uri=ContentUris.withAppendedId(GroceryProvider.CONTENT_URI,id);
  c.getContentResolver().update(uri,values,null,null);
}","public static void toggle_item(Context c,long id,boolean isChecked){
  ContentValues values=new ContentValues(1);
  values.put(GroceryProvider.KEY_CHECKED,isChecked ? 1 : 0);
  Uri uri=ContentUris.withAppendedId(GroceryProvider.CONTENT_URI,id);
  c.getContentResolver().update(uri,values,null,null);
}"
84338,"@Override public int delete(Uri uri,String selection,String[] selectionArgs){
  SQLiteDatabase db=DBHelper.getWritableDatabase();
  int count=0;
  long rowId=0;
switch (sURLMatcher.match(uri)) {
case ITEMS:
{
      count=db.delete(DATABASE_NAME,selection,selectionArgs);
      break;
    }
case ITEMS_ID:
{
    String segment=uri.getPathSegments().get(1);
    rowId=Long.parseLong(segment);
    if (TextUtils.isEmpty(selection)) {
      selection=KEY_ROWID + ""String_Node_Str"" + rowId;
    }
 else {
      selection=KEY_ROWID + ""String_Node_Str"" + rowId+ ""String_Node_Str""+ selection+ ""String_Node_Str"";
    }
    count=db.delete(DATABASE_TABLE,selection,selectionArgs);
    break;
  }
default :
{
  throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}
getContext().getContentResolver().notifyChange(uri,null);
return count;
}","@Override public int delete(Uri uri,String selection,String[] selectionArgs){
  SQLiteDatabase db=DBHelper.getWritableDatabase();
  int count=0;
  long rowId=0;
switch (sURLMatcher.match(uri)) {
case ITEMS:
{
      count=db.delete(DATABASE_TABLE,selection,selectionArgs);
      break;
    }
case ITEMS_ID:
{
    String segment=uri.getPathSegments().get(1);
    rowId=Long.parseLong(segment);
    if (TextUtils.isEmpty(selection)) {
      selection=KEY_ROWID + ""String_Node_Str"" + rowId;
    }
 else {
      selection=KEY_ROWID + ""String_Node_Str"" + rowId+ ""String_Node_Str""+ selection+ ""String_Node_Str"";
    }
    count=db.delete(DATABASE_TABLE,selection,selectionArgs);
    break;
  }
default :
{
  throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}
getContext().getContentResolver().notifyChange(uri,null);
return count;
}"
84339,"public static void add_item(Context c,String text){
  ContentValues values=new ContentValues(1);
  values.put(GroceryProvider.KEY_TEXT,text);
  c.getContentResolver().insert(GroceryProvider.CONTENT_URI,values);
}","public static void add_item(Context c,String text){
  if (TextUtils.isEmpty(text))   return;
  GroceryItem item=find_item(c,text);
  if (item != null) {
    Toast.makeText(c,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  ContentValues values=new ContentValues(1);
  values.put(GroceryProvider.KEY_TEXT,text);
  c.getContentResolver().insert(GroceryProvider.CONTENT_URI,values);
}"
84340,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  tvNewItem=(AutoCompleteTextView)findViewById(R.id.tvNewItem);
  btnAddItem=(Button)findViewById(R.id.btnAddItem);
  lvItems=(ListView)findViewById(R.id.lvItems);
  mFactory=LayoutInflater.from(this);
  mCursor=getContentResolver().query(GroceryProvider.CONTENT_URI,GroceryProvider.ITEM_QUERY_COLUMNS,null,null,GroceryProvider.DEFAULT_SORT_ORDER);
  lvItems.setAdapter(new GroceryListAdapter(this,mCursor));
  lvItems.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      CheckedTextView cv=(CheckedTextView)view;
      boolean isChecked=!cv.isChecked();
      GroceryListActivity.toggle_item(getApplicationContext(),id,isChecked);
    }
  }
);
  lvItems.setOnItemLongClickListener(new OnItemLongClickListener(){
    public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){
      GroceryListActivity.delete_item(getApplicationContext(),id);
      return false;
    }
  }
);
  btnAddItem.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      GroceryListActivity.add_item(getApplicationContext(),tvNewItem.getText().toString());
      tvNewItem.setText(""String_Node_Str"");
    }
  }
);
  tvNewItem.setOnKeyListener(new OnKeyListener(){
    public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (keyCode == KeyEvent.KEYCODE_ENTER && event.getAction() == KeyEvent.ACTION_UP) {
        GroceryListActivity.add_item(getApplicationContext(),tvNewItem.getText().toString());
        tvNewItem.setText(""String_Node_Str"");
        return true;
      }
      return false;
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  tvNewItem=(AutoCompleteTextView)findViewById(R.id.tvNewItem);
  btnAddItem=(Button)findViewById(R.id.btnAddItem);
  lvItems=(ListView)findViewById(R.id.lvItems);
  mFactory=LayoutInflater.from(this);
  mCursor=getContentResolver().query(GroceryProvider.CONTENT_URI,GroceryProvider.ITEM_QUERY_COLUMNS,null,null,GroceryProvider.DEFAULT_SORT_ORDER);
  lvItems.setAdapter(new GroceryListAdapter(this,mCursor));
  lvItems.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      CheckedTextView cv=(CheckedTextView)view;
      boolean isChecked=!cv.isChecked();
      GroceryListActivity.toggle_item(getApplicationContext(),id,isChecked);
    }
  }
);
  lvItems.setOnItemLongClickListener(new OnItemLongClickListener(){
    public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){
      GroceryListActivity.delete_item(getApplicationContext(),id);
      return true;
    }
  }
);
  btnAddItem.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      GroceryListActivity.add_item(getApplicationContext(),tvNewItem.getText().toString());
      tvNewItem.setText(""String_Node_Str"");
    }
  }
);
  tvNewItem.setOnKeyListener(new OnKeyListener(){
    public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (keyCode == KeyEvent.KEYCODE_ENTER && event.getAction() == KeyEvent.ACTION_UP) {
        GroceryListActivity.add_item(getApplicationContext(),tvNewItem.getText().toString());
        tvNewItem.setText(""String_Node_Str"");
        return true;
      }
      return false;
    }
  }
);
}"
84341,"public boolean onItemLongClick(AdapterView<?> parent,View view,int position,long id){
  GroceryListActivity.delete_item(getApplicationContext(),id);
  return false;
}","public boolean onItemLongClick(AdapterView<?> parent,View view,int position,long id){
  GroceryListActivity.delete_item(getApplicationContext(),id);
  return true;
}"
84342,"@Test public void testSolrInfoMBean(){
  assertNotNull(component.getDescription());
  assertNotNull(component.getSourceId());
  assertNotNull(component.getSource());
  assertNotNull(component.getVersion());
}","@Test public void testSolrInfoMBean(){
  assertNotNull(component.getDescription());
  assertNotNull(component.getSource());
  assertNotNull(component.getVersion());
}"
84343,"public static void addNewAccount(final String username,final String password){
  AccountStore.Account account=new AccountStore.Account(username);
  account.setPassword(password);
  accountStore.add(account);
  try {
    accountStore.save();
  }
 catch (  IOException ignored) {
  }
}","public static void addNewAccount(final String username,final String password){
  AccountStore.Account account=new AccountStore.Account(username);
  account.setPassword(password);
  accountStore.add(account);
  new Thread(){
    public void run(){
      try {
        accountStore.save();
      }
 catch (      IOException ignored) {
      }
    }
  }
.start();
}"
84344,"private void load(){
  scripts.clear();
  if (connected) {
    final List<ScriptDefinition> net=SRC_NETWORK.list();
    if (net != null) {
      scripts.addAll(net);
    }
  }
  scripts.addAll(SRC_PRECOMPILED.list());
  scripts.addAll(SRC_SOURCES.list());
  Collections.sort(scripts);
  final ArrayList<String> keywords=new ArrayList<String>(Category.values().length);
  for (  Category c : Category.values()) {
    String id=c.description().trim();
    if (id.length() > 0 && !keywords.contains(id)) {
      keywords.add(id);
    }
  }
  categories.populate(keywords,false);
  filter();
  table.revalidate();
}","private void load(){
  scripts.clear();
  if (connected) {
    final List<ScriptDefinition> net=SRC_NETWORK.list();
    if (net != null) {
      scripts.addAll(net);
    }
  }
  scripts.addAll(SRC_PRECOMPILED.list());
  scripts.addAll(SRC_SOURCES.list());
  Collections.sort(scripts);
  if (firstRun) {
    ArrayList<String> keywords=new ArrayList<String>(Category.values().length);
    for (    Category c : Category.values()) {
      String id=c.description().trim();
      if (id.length() > 0 && !keywords.contains(id)) {
        keywords.add(id);
      }
    }
    categories.populate(keywords,false);
    firstRun=false;
  }
  filter();
  table.revalidate();
}"
84345,"@Override public int compareTo(final ScriptDefinition def){
  final int c=getName().compareToIgnoreCase(def.getName());
  return c == 0 ? Double.compare(version,def.version) : c;
}","public int compareTo(final ScriptDefinition def){
  final int c=getName().compareToIgnoreCase(def.getName());
  return c == 0 ? Double.compare(version,def.version) : c;
}"
84346,"@Override public int loop(){
synchronized (lock) {
    if (!Web.loaded) {
      try {
        final BufferedReader br=new BufferedReader(new FileReader(Configuration.Paths.getWebDatabase()));
        String line;
        final List<GameTile> flagsArray=new ArrayList<GameTile>();
        while ((line=br.readLine()) != null) {
          final String[] d=line.split(""String_Node_Str"");
          if (d.length == 2) {
            final String[] tD=d[0].split(""String_Node_Str"");
            if (tD.length == 3) {
              try {
                final RSTile tile=new RSTile(Integer.parseInt(tD[0]),Integer.parseInt(tD[1]),Integer.parseInt(tD[2]));
                final GameTile gameTile=new GameTile(tile,Integer.parseInt(d[1]));
                if (flagsArray.contains(tile)) {
                  WebQueue.Remove(line);
                }
 else {
                  flagsArray.add(gameTile);
                }
              }
 catch (              final Exception e) {
              }
            }
 else {
              WebQueue.Remove(line);
            }
          }
 else {
            WebQueue.Remove(line);
          }
        }
        Web.map.addAll(flagsArray);
        Web.loaded=true;
      }
 catch (      final Exception e) {
        log(""String_Node_Str"");
      }
    }
    if (Web.loaded) {
      deactivate(getID());
    }
  }
  return -1;
}","@Override public int loop(){
synchronized (lock) {
    if (Web.loaded) {
      deactivate(getID());
    }
    if (!Web.loaded) {
      try {
        if (!new File(Configuration.Paths.getWebDatabase()).exists()) {
          Web.loaded=true;
          deactivate(getID());
          return -1;
        }
        final BufferedReader br=new BufferedReader(new FileReader(Configuration.Paths.getWebDatabase()));
        String line;
        final List<GameTile> flagsArray=new ArrayList<GameTile>();
        while ((line=br.readLine()) != null) {
          final String[] d=line.split(""String_Node_Str"");
          if (d.length == 2) {
            final String[] tD=d[0].split(""String_Node_Str"");
            if (tD.length == 3) {
              try {
                final RSTile tile=new RSTile(Integer.parseInt(tD[0]),Integer.parseInt(tD[1]),Integer.parseInt(tD[2]));
                final GameTile gameTile=new GameTile(tile,Integer.parseInt(d[1]));
                if (flagsArray.contains(tile)) {
                  WebQueue.Remove(line);
                }
 else {
                  flagsArray.add(gameTile);
                }
              }
 catch (              final Exception e) {
              }
            }
 else {
              WebQueue.Remove(line);
            }
          }
 else {
            WebQueue.Remove(line);
          }
        }
        Web.map.addAll(flagsArray);
        Web.loaded=true;
      }
 catch (      final Exception e) {
        log(""String_Node_Str"");
      }
    }
    if (Web.loaded) {
      deactivate(getID());
    }
  }
  return -1;
}"
84347,"public boolean cleanExit(final boolean silent){
  if (silent) {
    disableConfirmations=true;
  }
  if (!disableConfirmations) {
    disableConfirmations=true;
    for (    final Bot bot : bots) {
      if (bot.getAccountName() != null) {
        disableConfirmations=true;
        break;
      }
    }
  }
  boolean doExit=true;
  if (!disableConfirmations) {
    final String message=""String_Node_Str"";
    final int result=JOptionPane.showConfirmDialog(this,message,Messages.EXIT,JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
    if (result != JOptionPane.OK_OPTION) {
      doExit=false;
    }
  }
  WebQueue.Destroy();
  setVisible(false);
  Monitoring.pushState(Type.ENVIRONMENT,""String_Node_Str"",""String_Node_Str"",Boolean.toString(showAds));
  if (doExit) {
    menuBar.savePrefs();
    Monitoring.stop();
    System.exit(0);
  }
 else {
    setVisible(true);
  }
  return doExit;
}","public boolean cleanExit(final boolean silent){
  if (silent) {
    disableConfirmations=true;
  }
  if (!disableConfirmations) {
    disableConfirmations=true;
    for (    final Bot bot : bots) {
      if (bot.getAccountName() != null) {
        disableConfirmations=true;
        break;
      }
    }
  }
  boolean doExit=true;
  if (!disableConfirmations) {
    final String message=""String_Node_Str"";
    final int result=JOptionPane.showConfirmDialog(this,message,Messages.EXIT,JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
    if (result != JOptionPane.OK_OPTION) {
      doExit=false;
    }
  }
  try {
    WebQueue.Destroy();
  }
 catch (  NoClassDefFoundError ncdfe) {
  }
  setVisible(false);
  try {
    Monitoring.pushState(Type.ENVIRONMENT,""String_Node_Str"",""String_Node_Str"",Boolean.toString(showAds));
  }
 catch (  NoClassDefFoundError ncdfe) {
  }
  if (doExit) {
    menuBar.savePrefs();
    try {
      Monitoring.stop();
    }
 catch (    NoClassDefFoundError ncdfe) {
    }
    System.exit(0);
  }
 else {
    setVisible(true);
  }
  return doExit;
}"
84348,"public RSTile getNearestBank(final RSTile tile){
  double dist=-1.0D;
  RSTile finalTile=null;
  final RSTile[] BANKS={new RSTile(3093,3243,0),new RSTile(3209,3219,2),new RSTile(3270,3167,0),new RSTile(3253,3421,0),new RSTile(3188,3437,0),new RSTile(3094,3491,0),new RSTile(3097,3496,0),new RSTile(2946,3369,0),new RSTile(3012,3356,0)};
  for (  RSTile bank : BANKS) {
    double cdist=methods.calc.distanceBetween(tile,bank);
    if ((dist < cdist || dist == -1.0D) && (tile.getZ() == bank.getZ())) {
      dist=cdist;
      finalTile=bank;
    }
  }
  return finalTile;
}","public RSTile getNearestBank(final RSTile tile){
  double dist=-1.0D;
  RSTile finalTile=null;
  final RSTile[] BANKS={new RSTile(3093,3243,0),new RSTile(3209,3219,2),new RSTile(3270,3167,0),new RSTile(3253,3421,0),new RSTile(3188,3437,0),new RSTile(3094,3491,0),new RSTile(3097,3496,0),new RSTile(2946,3369,0),new RSTile(3012,3356,0)};
  for (  RSTile bank : BANKS) {
    double cdist=methods.calc.distanceBetween(tile,bank);
    if ((dist > cdist || dist == -1.0D) && (tile.getZ() == bank.getZ())) {
      dist=cdist;
      finalTile=bank;
    }
  }
  return finalTile;
}"
84349,"public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}","public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}"
84350,"private void init(){
  setLayout(new BorderLayout());
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  bot.getScriptHandler().addScriptListener(ScriptSelector.this);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    final WindowEvent e){
      bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
      dispose();
    }
  }
);
  table=new JTable(model);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      if ((e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK) {
        final int row=table.rowAtPoint(e.getPoint());
        table.getSelectionModel().setSelectionInterval(row,row);
        showMenu(e);
      }
    }
    private void showMenu(    final MouseEvent e){
      final int row=table.rowAtPoint(e.getPoint());
      final ScriptDefinition def=model.getDefinition(row);
      final JPopupMenu contextMenu=new JPopupMenu();
      final JMenuItem visit=new JMenuItem();
      visit.setText(""String_Node_Str"");
      visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
      visit.addMouseListener(new MouseAdapter(){
        @Override public void mousePressed(        final MouseEvent e){
          BotGUI.openURL(def.website);
        }
      }
);
      final JMenuItem start=new JMenuItem();
      start.setText(submit.getText());
      start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
      start.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent e){
          submit.doClick();
        }
      }
);
      start.setEnabled(submit.isEnabled());
      final JMenuItem delete=new JMenuItem();
      delete.setText(""String_Node_Str"");
      delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
      delete.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent e){
          final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
          if (path != null && path.exists() && path.delete()) {
            log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
          }
 else {
            log.warning(""String_Node_Str"" + def.name);
          }
        }
      }
);
      if (def.website == null || def.website.isEmpty()) {
        visit.setEnabled(false);
      }
      contextMenu.add(start);
      contextMenu.add(visit);
      contextMenu.add(delete);
      contextMenu.show(table,e.getX(),e.getY());
    }
  }
);
  table.setRowHeight(20);
  table.setIntercellSpacing(new Dimension(1,1));
  table.setShowGrid(false);
  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  table.getSelectionModel().addListSelectionListener(new TableSelectionListener());
  setColumnWidths(table,30,175,50,100);
  final JToolBar toolBar=new JToolBar();
  toolBar.setMargin(new Insets(1,1,1,1));
  toolBar.setFloatable(false);
  search=new JTextField();
  final Color searchDefaultColor=search.getForeground(), searchAltColor=Color.GRAY;
  final String searchDefaultText=""String_Node_Str"";
  search.setText(searchDefaultText);
  search.setForeground(searchAltColor);
  search.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      if (search.getForeground() == searchAltColor) {
        search.setText(""String_Node_Str"");
        search.setForeground(searchDefaultColor);
      }
      table.clearSelection();
    }
    @Override public void focusLost(    final FocusEvent e){
      if (search.getText().isEmpty()) {
        search.setText(searchDefaultText);
        search.setForeground(searchAltColor);
      }
    }
  }
);
  search.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    final KeyEvent e){
      model.search(search.getText());
      table.revalidate();
    }
  }
);
  submit=new JButton(""String_Node_Str"",new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  final JButton connect=new JButton(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CONNECT)));
  submit.setEnabled(false);
  submit.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent evt){
      final ScriptDefinition def=model.getDefinition(table.getSelectedRow());
      try {
        bot.setAccount((String)accounts.getSelectedItem());
        bot.getScriptHandler().runScript(def.source.load(def));
        bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
        dispose();
      }
 catch (      final ServiceException e) {
        e.printStackTrace();
      }
    }
  }
);
  connect.setEnabled(GlobalConfiguration.SCRIPT_DRM ? true : false);
  if (connect.isEnabled()) {
    final ActionListener listenConnect=new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        final String icon=connected ? GlobalConfiguration.Paths.Resources.ICON_DISCONNECT : GlobalConfiguration.Paths.Resources.ICON_CONNECT;
        connect.setIcon(new ImageIcon(GlobalConfiguration.getImage(icon)));
        connect.repaint();
        connected=!connected;
        load();
      }
    }
;
    connect.addActionListener(listenConnect);
  }
  accounts=new JComboBox(AccountManager.getAccountNames());
  accounts.setMinimumSize(new Dimension(200,20));
  accounts.setPreferredSize(new Dimension(200,20));
  toolBar.add(search);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(accounts);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(connect);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(submit);
  final JPanel center=new JPanel();
  center.setLayout(new BorderLayout());
  final JScrollPane pane=new JScrollPane(table,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  center.add(pane,BorderLayout.CENTER);
  add(center,BorderLayout.CENTER);
  add(toolBar,BorderLayout.SOUTH);
  setSize(750,400);
  setMinimumSize(getSize());
  setLocationRelativeTo(getParent());
  search.requestFocus();
}","private void init(){
  setLayout(new BorderLayout());
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  bot.getScriptHandler().addScriptListener(ScriptSelector.this);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    final WindowEvent e){
      bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
      dispose();
    }
  }
);
  table=new JTable(model);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      if ((e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK) {
        final int row=table.rowAtPoint(e.getPoint());
        table.getSelectionModel().setSelectionInterval(row,row);
        showMenu(e);
      }
    }
    private void showMenu(    final MouseEvent e){
      final int row=table.rowAtPoint(e.getPoint());
      final ScriptDefinition def=model.getDefinition(row);
      final JPopupMenu contextMenu=new JPopupMenu();
      final JMenuItem visit=new JMenuItem();
      visit.setText(""String_Node_Str"");
      visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
      visit.addMouseListener(new MouseAdapter(){
        @Override public void mousePressed(        final MouseEvent e){
          BotGUI.openURL(def.website);
        }
      }
);
      final JMenuItem start=new JMenuItem();
      start.setText(submit.getText());
      start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
      start.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          submit.doClick();
        }
      }
);
      start.setEnabled(submit.isEnabled());
      final JMenuItem delete=new JMenuItem();
      delete.setText(""String_Node_Str"");
      delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
      delete.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
          if (path != null && path.exists() && path.delete()) {
            log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
          }
 else {
            log.warning(""String_Node_Str"" + def.name);
          }
        }
      }
);
      if (def.website == null || def.website.isEmpty()) {
        visit.setEnabled(false);
      }
      contextMenu.add(start);
      contextMenu.add(visit);
      contextMenu.add(delete);
      contextMenu.show(table,e.getX(),e.getY());
    }
  }
);
  table.setRowHeight(20);
  table.setIntercellSpacing(new Dimension(1,1));
  table.setShowGrid(false);
  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  table.getSelectionModel().addListSelectionListener(new TableSelectionListener());
  setColumnWidths(table,30,175,50,100);
  final JToolBar toolBar=new JToolBar();
  toolBar.setMargin(new Insets(1,1,1,1));
  toolBar.setFloatable(false);
  search=new JTextField();
  final Color searchDefaultColor=search.getForeground(), searchAltColor=Color.GRAY;
  final String searchDefaultText=""String_Node_Str"";
  search.setText(searchDefaultText);
  search.setForeground(searchAltColor);
  search.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      if (search.getForeground() == searchAltColor) {
        search.setText(""String_Node_Str"");
        search.setForeground(searchDefaultColor);
      }
      table.clearSelection();
    }
    @Override public void focusLost(    final FocusEvent e){
      if (search.getText().isEmpty()) {
        search.setText(searchDefaultText);
        search.setForeground(searchAltColor);
      }
    }
  }
);
  search.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    final KeyEvent e){
      model.search(search.getText());
      table.revalidate();
    }
  }
);
  submit=new JButton(""String_Node_Str"",new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  final JButton connect=new JButton(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CONNECT)));
  submit.setEnabled(false);
  submit.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent evt){
      final ScriptDefinition def=model.getDefinition(table.getSelectedRow());
      try {
        bot.setAccount((String)accounts.getSelectedItem());
        bot.getScriptHandler().runScript(def.source.load(def));
        bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
        dispose();
      }
 catch (      final ServiceException e) {
        e.printStackTrace();
      }
    }
  }
);
  connect.setEnabled(GlobalConfiguration.SCRIPT_DRM ? true : false);
  if (connect.isEnabled()) {
    final ActionListener listenConnect=new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        final String icon=connected ? GlobalConfiguration.Paths.Resources.ICON_DISCONNECT : GlobalConfiguration.Paths.Resources.ICON_CONNECT;
        connect.setIcon(new ImageIcon(GlobalConfiguration.getImage(icon)));
        connect.repaint();
        connected=!connected;
        load();
      }
    }
;
    connect.addActionListener(listenConnect);
  }
  accounts=new JComboBox(AccountManager.getAccountNames());
  accounts.setMinimumSize(new Dimension(200,20));
  accounts.setPreferredSize(new Dimension(200,20));
  toolBar.add(search);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(accounts);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(connect);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(submit);
  final JPanel center=new JPanel();
  center.setLayout(new BorderLayout());
  final JScrollPane pane=new JScrollPane(table,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  center.add(pane,BorderLayout.CENTER);
  add(center,BorderLayout.CENTER);
  add(toolBar,BorderLayout.SOUTH);
  setSize(750,400);
  setMinimumSize(getSize());
  setLocationRelativeTo(getParent());
  search.requestFocus();
}"
84351,"private void showMenu(final MouseEvent e){
  final int row=table.rowAtPoint(e.getPoint());
  final ScriptDefinition def=model.getDefinition(row);
  final JPopupMenu contextMenu=new JPopupMenu();
  final JMenuItem visit=new JMenuItem();
  visit.setText(""String_Node_Str"");
  visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
  visit.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      BotGUI.openURL(def.website);
    }
  }
);
  final JMenuItem start=new JMenuItem();
  start.setText(submit.getText());
  start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  start.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      submit.doClick();
    }
  }
);
  start.setEnabled(submit.isEnabled());
  final JMenuItem delete=new JMenuItem();
  delete.setText(""String_Node_Str"");
  delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
  delete.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
      if (path != null && path.exists() && path.delete()) {
        log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
      }
 else {
        log.warning(""String_Node_Str"" + def.name);
      }
    }
  }
);
  if (def.website == null || def.website.isEmpty()) {
    visit.setEnabled(false);
  }
  contextMenu.add(start);
  contextMenu.add(visit);
  contextMenu.add(delete);
  contextMenu.show(table,e.getX(),e.getY());
}","private void showMenu(final MouseEvent e){
  final int row=table.rowAtPoint(e.getPoint());
  final ScriptDefinition def=model.getDefinition(row);
  final JPopupMenu contextMenu=new JPopupMenu();
  final JMenuItem visit=new JMenuItem();
  visit.setText(""String_Node_Str"");
  visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
  visit.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      BotGUI.openURL(def.website);
    }
  }
);
  final JMenuItem start=new JMenuItem();
  start.setText(submit.getText());
  start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  start.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      submit.doClick();
    }
  }
);
  start.setEnabled(submit.isEnabled());
  final JMenuItem delete=new JMenuItem();
  delete.setText(""String_Node_Str"");
  delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
  delete.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
      if (path != null && path.exists() && path.delete()) {
        log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
      }
 else {
        log.warning(""String_Node_Str"" + def.name);
      }
    }
  }
);
  if (def.website == null || def.website.isEmpty()) {
    visit.setEnabled(false);
  }
  contextMenu.add(start);
  contextMenu.add(visit);
  contextMenu.add(delete);
  contextMenu.show(table,e.getX(),e.getY());
}"
84352,"public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}","public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}"
84353,"public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}","public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}"
84354,"private void init(){
  setLayout(new BorderLayout());
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  bot.getScriptHandler().addScriptListener(ScriptSelector.this);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    final WindowEvent e){
      bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
      dispose();
    }
  }
);
  table=new JTable(model);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      if ((e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK) {
        final int row=table.rowAtPoint(e.getPoint());
        table.getSelectionModel().setSelectionInterval(row,row);
        showMenu(e);
      }
    }
    private void showMenu(    final MouseEvent e){
      final int row=table.rowAtPoint(e.getPoint());
      final ScriptDefinition def=model.getDefinition(row);
      final JPopupMenu contextMenu=new JPopupMenu();
      final JMenuItem visit=new JMenuItem();
      visit.setText(""String_Node_Str"");
      visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
      visit.addMouseListener(new MouseAdapter(){
        @Override public void mousePressed(        final MouseEvent e){
          BotGUI.openURL(def.website);
        }
      }
);
      final JMenuItem start=new JMenuItem();
      start.setText(submit.getText());
      start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
      start.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent e){
          submit.doClick();
        }
      }
);
      start.setEnabled(submit.isEnabled());
      final JMenuItem delete=new JMenuItem();
      delete.setText(""String_Node_Str"");
      delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
      delete.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent e){
          final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
          if (path != null && path.exists() && path.delete()) {
            log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
          }
 else {
            log.warning(""String_Node_Str"" + def.name);
          }
        }
      }
);
      if (def.website == null || def.website.isEmpty()) {
        visit.setEnabled(false);
      }
      contextMenu.add(start);
      contextMenu.add(visit);
      contextMenu.add(delete);
      contextMenu.show(table,e.getX(),e.getY());
    }
  }
);
  table.setRowHeight(20);
  table.setIntercellSpacing(new Dimension(1,1));
  table.setShowGrid(false);
  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  table.getSelectionModel().addListSelectionListener(new TableSelectionListener());
  setColumnWidths(table,30,175,50,100);
  final JToolBar toolBar=new JToolBar();
  toolBar.setMargin(new Insets(1,1,1,1));
  toolBar.setFloatable(false);
  search=new JTextField();
  final Color searchDefaultColor=search.getForeground(), searchAltColor=Color.GRAY;
  final String searchDefaultText=""String_Node_Str"";
  search.setText(searchDefaultText);
  search.setForeground(searchAltColor);
  search.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      if (search.getForeground() == searchAltColor) {
        search.setText(""String_Node_Str"");
        search.setForeground(searchDefaultColor);
      }
      table.clearSelection();
    }
    @Override public void focusLost(    final FocusEvent e){
      if (search.getText().isEmpty()) {
        search.setText(searchDefaultText);
        search.setForeground(searchAltColor);
      }
    }
  }
);
  search.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    final KeyEvent e){
      model.search(search.getText());
      table.revalidate();
    }
  }
);
  submit=new JButton(""String_Node_Str"",new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  final JButton connect=new JButton(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CONNECT)));
  submit.setEnabled(false);
  submit.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent evt){
      final ScriptDefinition def=model.getDefinition(table.getSelectedRow());
      try {
        bot.setAccount((String)accounts.getSelectedItem());
        bot.getScriptHandler().runScript(def.source.load(def));
        bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
        dispose();
      }
 catch (      final ServiceException e) {
        e.printStackTrace();
      }
    }
  }
);
  connect.setEnabled(GlobalConfiguration.SCRIPT_DRM ? true : false);
  if (connect.isEnabled()) {
    final ActionListener listenConnect=new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        final String icon=connected ? GlobalConfiguration.Paths.Resources.ICON_DISCONNECT : GlobalConfiguration.Paths.Resources.ICON_CONNECT;
        connect.setIcon(new ImageIcon(GlobalConfiguration.getImage(icon)));
        connect.repaint();
        connected=!connected;
        load();
      }
    }
;
    connect.addActionListener(listenConnect);
  }
  accounts=new JComboBox(AccountManager.getAccountNames());
  accounts.setMinimumSize(new Dimension(200,20));
  accounts.setPreferredSize(new Dimension(200,20));
  toolBar.add(search);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(accounts);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(connect);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(submit);
  final JPanel center=new JPanel();
  center.setLayout(new BorderLayout());
  final JScrollPane pane=new JScrollPane(table,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  center.add(pane,BorderLayout.CENTER);
  add(center,BorderLayout.CENTER);
  add(toolBar,BorderLayout.SOUTH);
  setSize(750,400);
  setMinimumSize(getSize());
  setLocationRelativeTo(getParent());
  search.requestFocus();
}","private void init(){
  setLayout(new BorderLayout());
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  bot.getScriptHandler().addScriptListener(ScriptSelector.this);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    final WindowEvent e){
      bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
      dispose();
    }
  }
);
  table=new JTable(model);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      if ((e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK) {
        final int row=table.rowAtPoint(e.getPoint());
        table.getSelectionModel().setSelectionInterval(row,row);
        showMenu(e);
      }
    }
    private void showMenu(    final MouseEvent e){
      final int row=table.rowAtPoint(e.getPoint());
      final ScriptDefinition def=model.getDefinition(row);
      final JPopupMenu contextMenu=new JPopupMenu();
      final JMenuItem visit=new JMenuItem();
      visit.setText(""String_Node_Str"");
      visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
      visit.addMouseListener(new MouseAdapter(){
        @Override public void mousePressed(        final MouseEvent e){
          BotGUI.openURL(def.website);
        }
      }
);
      final JMenuItem start=new JMenuItem();
      start.setText(submit.getText());
      start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
      start.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          submit.doClick();
        }
      }
);
      start.setEnabled(submit.isEnabled());
      final JMenuItem delete=new JMenuItem();
      delete.setText(""String_Node_Str"");
      delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
      delete.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
          if (path != null && path.exists() && path.delete()) {
            log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
          }
 else {
            log.warning(""String_Node_Str"" + def.name);
          }
        }
      }
);
      if (def.website == null || def.website.isEmpty()) {
        visit.setEnabled(false);
      }
      contextMenu.add(start);
      contextMenu.add(visit);
      contextMenu.add(delete);
      contextMenu.show(table,e.getX(),e.getY());
    }
  }
);
  table.setRowHeight(20);
  table.setIntercellSpacing(new Dimension(1,1));
  table.setShowGrid(false);
  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  table.getSelectionModel().addListSelectionListener(new TableSelectionListener());
  setColumnWidths(table,30,175,50,100);
  final JToolBar toolBar=new JToolBar();
  toolBar.setMargin(new Insets(1,1,1,1));
  toolBar.setFloatable(false);
  search=new JTextField();
  final Color searchDefaultColor=search.getForeground(), searchAltColor=Color.GRAY;
  final String searchDefaultText=""String_Node_Str"";
  search.setText(searchDefaultText);
  search.setForeground(searchAltColor);
  search.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      if (search.getForeground() == searchAltColor) {
        search.setText(""String_Node_Str"");
        search.setForeground(searchDefaultColor);
      }
      table.clearSelection();
    }
    @Override public void focusLost(    final FocusEvent e){
      if (search.getText().isEmpty()) {
        search.setText(searchDefaultText);
        search.setForeground(searchAltColor);
      }
    }
  }
);
  search.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    final KeyEvent e){
      model.search(search.getText());
      table.revalidate();
    }
  }
);
  submit=new JButton(""String_Node_Str"",new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  final JButton connect=new JButton(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CONNECT)));
  submit.setEnabled(false);
  submit.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent evt){
      final ScriptDefinition def=model.getDefinition(table.getSelectedRow());
      try {
        bot.setAccount((String)accounts.getSelectedItem());
        bot.getScriptHandler().runScript(def.source.load(def));
        bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
        dispose();
      }
 catch (      final ServiceException e) {
        e.printStackTrace();
      }
    }
  }
);
  connect.setEnabled(GlobalConfiguration.SCRIPT_DRM ? true : false);
  if (connect.isEnabled()) {
    final ActionListener listenConnect=new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        final String icon=connected ? GlobalConfiguration.Paths.Resources.ICON_DISCONNECT : GlobalConfiguration.Paths.Resources.ICON_CONNECT;
        connect.setIcon(new ImageIcon(GlobalConfiguration.getImage(icon)));
        connect.repaint();
        connected=!connected;
        load();
      }
    }
;
    connect.addActionListener(listenConnect);
  }
  accounts=new JComboBox(AccountManager.getAccountNames());
  accounts.setMinimumSize(new Dimension(200,20));
  accounts.setPreferredSize(new Dimension(200,20));
  toolBar.add(search);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(accounts);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(connect);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(submit);
  final JPanel center=new JPanel();
  center.setLayout(new BorderLayout());
  final JScrollPane pane=new JScrollPane(table,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  center.add(pane,BorderLayout.CENTER);
  add(center,BorderLayout.CENTER);
  add(toolBar,BorderLayout.SOUTH);
  setSize(750,400);
  setMinimumSize(getSize());
  setLocationRelativeTo(getParent());
  search.requestFocus();
}"
84355,"private void showMenu(final MouseEvent e){
  final int row=table.rowAtPoint(e.getPoint());
  final ScriptDefinition def=model.getDefinition(row);
  final JPopupMenu contextMenu=new JPopupMenu();
  final JMenuItem visit=new JMenuItem();
  visit.setText(""String_Node_Str"");
  visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
  visit.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      BotGUI.openURL(def.website);
    }
  }
);
  final JMenuItem start=new JMenuItem();
  start.setText(submit.getText());
  start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  start.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      submit.doClick();
    }
  }
);
  start.setEnabled(submit.isEnabled());
  final JMenuItem delete=new JMenuItem();
  delete.setText(""String_Node_Str"");
  delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
  delete.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
      if (path != null && path.exists() && path.delete()) {
        log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
      }
 else {
        log.warning(""String_Node_Str"" + def.name);
      }
    }
  }
);
  if (def.website == null || def.website.isEmpty()) {
    visit.setEnabled(false);
  }
  contextMenu.add(start);
  contextMenu.add(visit);
  contextMenu.add(delete);
  contextMenu.show(table,e.getX(),e.getY());
}","private void showMenu(final MouseEvent e){
  final int row=table.rowAtPoint(e.getPoint());
  final ScriptDefinition def=model.getDefinition(row);
  final JPopupMenu contextMenu=new JPopupMenu();
  final JMenuItem visit=new JMenuItem();
  visit.setText(""String_Node_Str"");
  visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
  visit.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      BotGUI.openURL(def.website);
    }
  }
);
  final JMenuItem start=new JMenuItem();
  start.setText(submit.getText());
  start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  start.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      submit.doClick();
    }
  }
);
  start.setEnabled(submit.isEnabled());
  final JMenuItem delete=new JMenuItem();
  delete.setText(""String_Node_Str"");
  delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
  delete.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
      if (path != null && path.exists() && path.delete()) {
        log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
      }
 else {
        log.warning(""String_Node_Str"" + def.name);
      }
    }
  }
);
  if (def.website == null || def.website.isEmpty()) {
    visit.setEnabled(false);
  }
  contextMenu.add(start);
  contextMenu.add(visit);
  contextMenu.add(delete);
  contextMenu.show(table,e.getX(),e.getY());
}"
84356,"public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}","public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}"
84357,"public void actionPerformed(final ActionEvent evt){
  final String action=evt.getActionCommand();
  String menu, option;
  final int z=action.indexOf('.');
  if (z == -1) {
    menu=action;
    option=""String_Node_Str"";
  }
 else {
    menu=action.substring(0,z);
    option=action.substring(z + 1);
  }
  if (menu.equals(""String_Node_Str"")) {
    if (confirmRemoveBot()) {
      final int idx=Integer.parseInt(option);
      removeBot(bots.get(idx - botsIndex));
    }
  }
 else   if (menu.equals(Messages.FILE)) {
    if (option.equals(Messages.NEWBOT)) {
      addBot();
    }
 else     if (option.equals(Messages.CLOSEBOT)) {
      if (confirmRemoveBot()) {
        removeBot(getCurrentBot());
      }
    }
 else     if (option.equals(Messages.ADDSCRIPT)) {
      final String pretext=""String_Node_Str"";
      final String key=(String)JOptionPane.showInputDialog(this,""String_Node_Str"",option,JOptionPane.QUESTION_MESSAGE,null,null,pretext);
      if (!(key == null || key.trim().isEmpty())) {
        ScriptDownloader.save(key);
      }
    }
 else     if (option.equals(Messages.RUNSCRIPT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        showScriptSelector(current);
      }
    }
 else     if (option.equals(Messages.SERVICEKEY)) {
      serviceKeyQuery(option);
    }
 else     if (option.equals(Messages.STOPSCRIPT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        showStopScript(current);
      }
    }
 else     if (option.equals(Messages.PAUSESCRIPT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        pauseScript(current);
      }
    }
 else     if (option.equals(Messages.SAVESCREENSHOT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        ScreenshotUtil.saveScreenshot(current,current.getMethodContext().game.isLoggedIn());
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      try {
        TrayManager.Hide();
      }
 catch (      AWTException ignored) {
        log.warning(""String_Node_Str"");
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      cleanExit();
    }
  }
 else   if (menu.equals(Messages.EDIT)) {
    if (option.equals(""String_Node_Str"")) {
      AccountManager.getInstance().showGUI();
    }
 else     if (option.equals(""String_Node_Str"")) {
      showAds=!((JCheckBoxMenuItem)evt.getSource()).isSelected();
    }
 else     if (option.equals(""String_Node_Str"")) {
      Monitoring.setEnabled(!((JCheckBoxMenuItem)evt.getSource()).isSelected());
      if (!Monitoring.isEnabled()) {
        log.info(""String_Node_Str"");
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      disableConfirmations=((JCheckBoxMenuItem)evt.getSource()).isSelected();
    }
 else {
      final Bot current=getCurrentBot();
      if (current != null) {
        if (option.equals(""String_Node_Str"")) {
          final boolean selected=((JCheckBoxMenuItem)evt.getSource()).isSelected();
          current.overrideInput=selected;
          toolBar.setOverrideInput(selected);
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableRendering=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableCanvas=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableRandoms=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableAutoLogin=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
      }
    }
  }
 else   if (menu.equals(Messages.VIEW)) {
    final Bot current=getCurrentBot();
    final boolean selected=((JCheckBoxMenuItem)evt.getSource()).isSelected();
    if (option.equals(""String_Node_Str"")) {
      toggleViewState(toolBar,selected);
    }
 else     if (option.equals(""String_Node_Str"")) {
      toggleViewState(textScroll,selected);
    }
 else     if (current != null) {
      if (option.equals(""String_Node_Str"")) {
        for (        final String key : BotMenuBar.DEBUG_MAP.keySet()) {
          final Class<?> el=BotMenuBar.DEBUG_MAP.get(key);
          final boolean wasSelected=menuBar.getCheckBox(key).isSelected();
          menuBar.getCheckBox(key).setSelected(selected);
          if (selected) {
            if (!wasSelected) {
              current.addListener(el);
            }
          }
 else {
            if (wasSelected) {
              current.removeListener(el);
            }
          }
        }
      }
 else {
        final Class<?> el=BotMenuBar.DEBUG_MAP.get(option);
        menuBar.getCheckBox(option).setSelected(selected);
        if (selected) {
          current.addListener(el);
        }
 else {
          menuBar.getCheckBox(""String_Node_Str"").setSelected(false);
          current.removeListener(el);
        }
      }
    }
  }
 else   if (menu.equals(Messages.HELP)) {
    if (option.equals(""String_Node_Str"")) {
      openURL(GlobalConfiguration.Paths.URLs.SITE);
    }
 else     if (option.equals(""String_Node_Str"")) {
      openURL(GlobalConfiguration.Paths.URLs.PROJECT);
    }
 else     if (option.equals(""String_Node_Str"")) {
      JOptionPane.showMessageDialog(this,new String[]{""String_Node_Str"",""String_Node_Str"" + GlobalConfiguration.Paths.URLs.SITE + ""String_Node_Str""},""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
    }
  }
 else   if (menu.equals(""String_Node_Str"")) {
    final Bot curr=getCurrentBot();
    menuBar.setBot(curr);
    panel.setBot(curr);
    panel.repaint();
    toolBar.setHome(curr == null);
    if (curr == null) {
      setTitle(null);
      toolBar.setScriptButton(BotToolBar.RUN_SCRIPT);
      toolBar.setOverrideInput(false);
      toolBar.setInputState(Environment.INPUT_KEYBOARD | Environment.INPUT_MOUSE);
      toolBar.updateInputButton();
    }
 else {
      setTitle(curr.getAccountName());
      final Map<Integer,Script> scriptMap=curr.getScriptHandler().getRunningScripts();
      if (scriptMap.size() > 0) {
        if (scriptMap.values().iterator().next().isPaused()) {
          toolBar.setScriptButton(BotToolBar.RESUME_SCRIPT);
        }
 else {
          toolBar.setScriptButton(BotToolBar.PAUSE_SCRIPT);
        }
      }
 else {
        toolBar.setScriptButton(BotToolBar.RUN_SCRIPT);
      }
      toolBar.setOverrideInput(curr.overrideInput);
      toolBar.setInputState(curr.inputFlags);
      toolBar.updateInputButton();
    }
  }
 else   if (menu.equals(""String_Node_Str"")) {
    menuBar.doClick(Messages.SAVESCREENSHOT);
  }
 else   if (menu.equals(""String_Node_Str"")) {
    final Bot current=getCurrentBot();
    if (current != null) {
      showScriptSelector(current);
    }
  }
 else   if (menu.equals(""String_Node_Str"") || menu.equals(""String_Node_Str"")) {
    final Bot current=getCurrentBot();
    if (current != null) {
      pauseScript(current);
    }
  }
 else   if (menu.equals(""String_Node_Str"")) {
    final Bot current=getCurrentBot();
    if (current != null) {
      final boolean override=!current.overrideInput;
      current.overrideInput=override;
      menuBar.setOverrideInput(override);
      toolBar.setOverrideInput(override);
      toolBar.updateInputButton();
    }
  }
}","public void actionPerformed(final ActionEvent evt){
  final String action=evt.getActionCommand();
  String menu, option;
  final int z=action.indexOf('.');
  if (z == -1) {
    menu=action;
    option=""String_Node_Str"";
  }
 else {
    menu=action.substring(0,z);
    option=action.substring(z + 1);
  }
  if (menu.equals(""String_Node_Str"")) {
    if (confirmRemoveBot()) {
      final int idx=Integer.parseInt(option);
      removeBot(bots.get(idx - botsIndex));
    }
  }
 else   if (menu.equals(Messages.FILE)) {
    if (option.equals(Messages.NEWBOT)) {
      addBot();
    }
 else     if (option.equals(Messages.CLOSEBOT)) {
      if (confirmRemoveBot()) {
        removeBot(getCurrentBot());
      }
    }
 else     if (option.equals(Messages.ADDSCRIPT)) {
      final String pretext=""String_Node_Str"";
      final String key=(String)JOptionPane.showInputDialog(this,""String_Node_Str"",option,JOptionPane.QUESTION_MESSAGE,null,null,pretext);
      if (!(key == null || key.trim().isEmpty())) {
        ScriptDownloader.save(key);
      }
    }
 else     if (option.equals(Messages.RUNSCRIPT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        showScriptSelector(current);
      }
    }
 else     if (option.equals(Messages.SERVICEKEY)) {
      serviceKeyQuery(option);
    }
 else     if (option.equals(Messages.STOPSCRIPT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        showStopScript(current);
      }
    }
 else     if (option.equals(Messages.PAUSESCRIPT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        pauseScript(current);
      }
    }
 else     if (option.equals(Messages.SAVESCREENSHOT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        ScreenshotUtil.saveScreenshot(current,current.getMethodContext().game.isLoggedIn());
      }
    }
 else     if (option.equals(Messages.HIDEBOT)) {
      try {
        TrayManager.Hide();
      }
 catch (      AWTException ignored) {
        log.warning(""String_Node_Str"");
      }
    }
 else     if (option.equals(Messages.EXIT)) {
      cleanExit();
    }
  }
 else   if (menu.equals(Messages.EDIT)) {
    if (option.equals(""String_Node_Str"")) {
      AccountManager.getInstance().showGUI();
    }
 else     if (option.equals(""String_Node_Str"")) {
      showAds=!((JCheckBoxMenuItem)evt.getSource()).isSelected();
    }
 else     if (option.equals(""String_Node_Str"")) {
      Monitoring.setEnabled(!((JCheckBoxMenuItem)evt.getSource()).isSelected());
      if (!Monitoring.isEnabled()) {
        log.info(""String_Node_Str"");
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      disableConfirmations=((JCheckBoxMenuItem)evt.getSource()).isSelected();
    }
 else {
      final Bot current=getCurrentBot();
      if (current != null) {
        if (option.equals(""String_Node_Str"")) {
          final boolean selected=((JCheckBoxMenuItem)evt.getSource()).isSelected();
          current.overrideInput=selected;
          toolBar.setOverrideInput(selected);
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableRendering=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableCanvas=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableRandoms=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableAutoLogin=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
      }
    }
  }
 else   if (menu.equals(Messages.VIEW)) {
    final Bot current=getCurrentBot();
    final boolean selected=((JCheckBoxMenuItem)evt.getSource()).isSelected();
    if (option.equals(""String_Node_Str"")) {
      toggleViewState(toolBar,selected);
    }
 else     if (option.equals(""String_Node_Str"")) {
      toggleViewState(textScroll,selected);
    }
 else     if (current != null) {
      if (option.equals(""String_Node_Str"")) {
        for (        final String key : BotMenuBar.DEBUG_MAP.keySet()) {
          final Class<?> el=BotMenuBar.DEBUG_MAP.get(key);
          final boolean wasSelected=menuBar.getCheckBox(key).isSelected();
          menuBar.getCheckBox(key).setSelected(selected);
          if (selected) {
            if (!wasSelected) {
              current.addListener(el);
            }
          }
 else {
            if (wasSelected) {
              current.removeListener(el);
            }
          }
        }
      }
 else {
        final Class<?> el=BotMenuBar.DEBUG_MAP.get(option);
        menuBar.getCheckBox(option).setSelected(selected);
        if (selected) {
          current.addListener(el);
        }
 else {
          menuBar.getCheckBox(""String_Node_Str"").setSelected(false);
          current.removeListener(el);
        }
      }
    }
  }
 else   if (menu.equals(Messages.HELP)) {
    if (option.equals(""String_Node_Str"")) {
      openURL(GlobalConfiguration.Paths.URLs.SITE);
    }
 else     if (option.equals(""String_Node_Str"")) {
      openURL(GlobalConfiguration.Paths.URLs.PROJECT);
    }
 else     if (option.equals(""String_Node_Str"")) {
      JOptionPane.showMessageDialog(this,new String[]{""String_Node_Str"",""String_Node_Str"" + GlobalConfiguration.Paths.URLs.SITE + ""String_Node_Str""},""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
    }
  }
 else   if (menu.equals(""String_Node_Str"")) {
    final Bot curr=getCurrentBot();
    menuBar.setBot(curr);
    panel.setBot(curr);
    panel.repaint();
    toolBar.setHome(curr == null);
    if (curr == null) {
      setTitle(null);
      toolBar.setScriptButton(BotToolBar.RUN_SCRIPT);
      toolBar.setOverrideInput(false);
      toolBar.setInputState(Environment.INPUT_KEYBOARD | Environment.INPUT_MOUSE);
      toolBar.updateInputButton();
    }
 else {
      setTitle(curr.getAccountName());
      final Map<Integer,Script> scriptMap=curr.getScriptHandler().getRunningScripts();
      if (scriptMap.size() > 0) {
        if (scriptMap.values().iterator().next().isPaused()) {
          toolBar.setScriptButton(BotToolBar.RESUME_SCRIPT);
        }
 else {
          toolBar.setScriptButton(BotToolBar.PAUSE_SCRIPT);
        }
      }
 else {
        toolBar.setScriptButton(BotToolBar.RUN_SCRIPT);
      }
      toolBar.setOverrideInput(curr.overrideInput);
      toolBar.setInputState(curr.inputFlags);
      toolBar.updateInputButton();
    }
  }
 else   if (menu.equals(""String_Node_Str"")) {
    menuBar.doClick(Messages.SAVESCREENSHOT);
  }
 else   if (menu.equals(""String_Node_Str"")) {
    final Bot current=getCurrentBot();
    if (current != null) {
      showScriptSelector(current);
    }
  }
 else   if (menu.equals(""String_Node_Str"") || menu.equals(""String_Node_Str"")) {
    final Bot current=getCurrentBot();
    if (current != null) {
      pauseScript(current);
    }
  }
 else   if (menu.equals(""String_Node_Str"")) {
    final Bot current=getCurrentBot();
    if (current != null) {
      final boolean override=!current.overrideInput;
      current.overrideInput=override;
      menuBar.setOverrideInput(override);
      toolBar.setOverrideInput(override);
      toolBar.updateInputButton();
    }
  }
}"
84358,"private void constructItemIcons(){
  final HashMap<String,String> map=new HashMap<String,String>(16);
  map.put(Messages.NEWBOT,GlobalConfiguration.Paths.Resources.ICON_APPADD);
  map.put(Messages.CLOSEBOT,GlobalConfiguration.Paths.Resources.ICON_APPDELETE);
  map.put(Messages.SERVICEKEY,GlobalConfiguration.Paths.Resources.ICON_KEY);
  map.put(Messages.ADDSCRIPT,GlobalConfiguration.Paths.Resources.ICON_SCRIPT_ADD);
  map.put(Messages.RUNSCRIPT,GlobalConfiguration.Paths.Resources.ICON_PLAY);
  map.put(Messages.STOPSCRIPT,GlobalConfiguration.Paths.Resources.ICON_DELETE);
  map.put(Messages.PAUSESCRIPT,GlobalConfiguration.Paths.Resources.ICON_PAUSE);
  map.put(Messages.SAVESCREENSHOT,GlobalConfiguration.Paths.Resources.ICON_PHOTO);
  map.put(Messages.EXIT,GlobalConfiguration.Paths.Resources.ICON_CLOSE);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_REPORTKEY);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_WEBLINK);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_USEREDIT);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_INFO);
  for (  final Entry<String,String> item : map.entrySet()) {
    final JMenuItem menu=commandMenuItem.get(item.getKey());
    menu.setIcon(new ImageIcon(GlobalConfiguration.getImage(item.getValue())));
  }
}","private void constructItemIcons(){
  final HashMap<String,String> map=new HashMap<String,String>(16);
  map.put(Messages.NEWBOT,GlobalConfiguration.Paths.Resources.ICON_APPADD);
  map.put(Messages.CLOSEBOT,GlobalConfiguration.Paths.Resources.ICON_APPDELETE);
  map.put(Messages.SERVICEKEY,GlobalConfiguration.Paths.Resources.ICON_KEY);
  map.put(Messages.ADDSCRIPT,GlobalConfiguration.Paths.Resources.ICON_SCRIPT_ADD);
  map.put(Messages.RUNSCRIPT,GlobalConfiguration.Paths.Resources.ICON_PLAY);
  map.put(Messages.STOPSCRIPT,GlobalConfiguration.Paths.Resources.ICON_DELETE);
  map.put(Messages.PAUSESCRIPT,GlobalConfiguration.Paths.Resources.ICON_PAUSE);
  map.put(Messages.SAVESCREENSHOT,GlobalConfiguration.Paths.Resources.ICON_PHOTO);
  map.put(Messages.HIDEBOT,GlobalConfiguration.Paths.Resources.ICON_TRAY_DOWN);
  map.put(Messages.EXIT,GlobalConfiguration.Paths.Resources.ICON_CLOSE);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_REPORTKEY);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_WEBLINK);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_USEREDIT);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_INFO);
  for (  final Entry<String,String> item : map.entrySet()) {
    final JMenuItem menu=commandMenuItem.get(item.getKey());
    menu.setIcon(new ImageIcon(GlobalConfiguration.getImage(item.getValue())));
  }
}"
84359,"private void checkFilePath(String path,final boolean readOnly){
  path=new File(path).getAbsolutePath();
  if (isCallerScript()) {
    if (!path.startsWith(GlobalConfiguration.Paths.getScriptCacheDirectory())) {
      boolean fail=true;
      if (!GlobalConfiguration.RUNNING_FROM_JAR) {
        String check=new File(GlobalConfiguration.Paths.ROOT).getAbsolutePath();
        try {
          check=new File(check).getCanonicalPath();
        }
 catch (        final IOException ignored) {
        }
        fail=!path.startsWith(check);
      }
 else {
        final String check=new File(GlobalConfiguration.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getAbsolutePath();
        if (readOnly && path.equals(check)) {
          fail=false;
        }
      }
      for (      final String prefix : new String[]{GlobalConfiguration.Paths.getScreenshotsDirectory(),GlobalConfiguration.Paths.getScriptsDirectory(),GlobalConfiguration.Paths.getWebCache()}) {
        if (path.startsWith(prefix)) {
          fail=false;
          break;
        }
      }
      final String jre=System.getProperty(""String_Node_Str"");
      if (readOnly && jre != null && !jre.isEmpty() && path.startsWith(jre)) {
        fail=false;
      }
      if (GlobalConfiguration.getCurrentOperatingSystem() == OperatingSystem.WINDOWS) {
        final String sysroot=System.getenv(""String_Node_Str"");
        if (readOnly && sysroot != null & !sysroot.isEmpty() && path.startsWith(sysroot)) {
          fail=false;
        }
      }
      if (fail) {
        throw new SecurityException();
      }
    }
  }
  if (path.equalsIgnoreCase(new File(GlobalConfiguration.Paths.getAccountsFile()).getAbsolutePath())) {
    for (    final StackTraceElement s : Thread.currentThread().getStackTrace()) {
      final String name=s.getClassName();
      if (name.equals(AccountStore.class.getName())) {
        return;
      }
    }
    throw new SecurityException();
  }
}","private void checkFilePath(String path,final boolean readOnly){
  path=new File(path).getAbsolutePath();
  if (isCallerScript()) {
    if (!path.startsWith(GlobalConfiguration.Paths.getScriptCacheDirectory())) {
      boolean fail=true;
      if (!GlobalConfiguration.RUNNING_FROM_JAR) {
        String check=new File(GlobalConfiguration.Paths.ROOT).getAbsolutePath();
        try {
          check=new File(check).getCanonicalPath();
        }
 catch (        final IOException ignored) {
        }
        fail=!path.startsWith(check);
      }
 else {
        final String check=new File(GlobalConfiguration.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getAbsolutePath();
        if (readOnly && path.equals(check)) {
          fail=false;
        }
      }
      for (      final String prefix : new String[]{GlobalConfiguration.Paths.getScreenshotsDirectory(),GlobalConfiguration.Paths.getScriptsDirectory(),GlobalConfiguration.Paths.getWebDatabase()}) {
        if (path.startsWith(prefix)) {
          fail=false;
          break;
        }
      }
      final String jre=System.getProperty(""String_Node_Str"");
      if (readOnly && jre != null && !jre.isEmpty() && path.startsWith(jre)) {
        fail=false;
      }
      if (GlobalConfiguration.getCurrentOperatingSystem() == OperatingSystem.WINDOWS) {
        final String sysroot=System.getenv(""String_Node_Str"");
        if (readOnly && sysroot != null & !sysroot.isEmpty() && path.startsWith(sysroot)) {
          fail=false;
        }
      }
      if (fail) {
        throw new SecurityException();
      }
    }
  }
  if (path.equalsIgnoreCase(new File(GlobalConfiguration.Paths.getAccountsFile()).getAbsolutePath())) {
    for (    final StackTraceElement s : Thread.currentThread().getStackTrace()) {
      final String name=s.getClassName();
      if (name.equals(AccountStore.class.getName())) {
        return;
      }
    }
    throw new SecurityException();
  }
}"
84360,"private String downloadPage(final String url,final String referer){
  try {
    HttpURLConnection con=GlobalConfiguration.getHttpConnection(new URL(url));
    if (referer != null && !referer.isEmpty())     con.addRequestProperty(""String_Node_Str"",referer);
    final BufferedReader reader=new BufferedReader(new InputStreamReader(con.getInputStream()));
    final StringBuilder buf=new StringBuilder();
    String line;
    while ((line=reader.readLine()) != null) {
      buf.append(line);
    }
    reader.close();
    return buf.toString();
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  return null;
}","private String downloadPage(final String url,final String referer){
  try {
    HttpURLConnection con=GlobalConfiguration.getHttpConnection(new URL(url));
    if (referer != null && !referer.isEmpty()) {
      con.addRequestProperty(""String_Node_Str"",referer);
    }
    final BufferedReader reader=new BufferedReader(new InputStreamReader(con.getInputStream()));
    final StringBuilder buf=new StringBuilder();
    String line;
    while ((line=reader.readLine()) != null) {
      buf.append(line);
    }
    reader.close();
    return buf.toString();
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  return null;
}"
84361,"public void init(URL script,File cache) throws IOException, ParseException {
  byte[] data=null;
  FileInputStream fis=null;
  try {
    HttpAgent.download(script,cache);
    fis=new FileInputStream(cache);
    data=load(fis);
  }
 catch (  IOException ioe) {
    log.severe(""String_Node_Str"");
  }
 finally {
    try {
      if (fis != null)       fis.close();
    }
 catch (    IOException ioe1) {
    }
  }
  this.script=new ModScript(data);
}","public void init(URL script,File cache) throws IOException, ParseException {
  byte[] data=null;
  FileInputStream fis=null;
  try {
    HttpAgent.download(script,cache);
    fis=new FileInputStream(cache);
    data=load(fis);
  }
 catch (  IOException ioe) {
    log.severe(""String_Node_Str"");
  }
 finally {
    try {
      if (fis != null) {
        fis.close();
      }
    }
 catch (    IOException ioe1) {
    }
  }
  this.script=new ModScript(data);
}"
84362,"@Override public int loop(){
  if (bank.isDepositOpen() || bank.isOpen()) {
    bank.close();
  }
  if (!activateCondition()) {
    return -1;
  }
  if (getMyPlayer().isMoving()) {
    return random(1000,2000);
  }
switch (getState()) {
case EXIT:
    RSObject portal=objects.getNearest(EXIT_PORTAL);
  if (portal != null) {
    if (!portal.isOnScreen()) {
      camera.turnTo(portal);
    }
    if (portal.doAction(""String_Node_Str"")) {
      return random(1000,1300);
    }
  }
break;
case OPEN_CHEST:
RSObject chest=objects.getNearest(ARNAV_CHEST);
if (chest != null) {
if (chest.doClick()) {
return random(1000,1300);
}
}
break;
case TALK:
if (interfaces.canContinue()) {
interfaces.clickContinue();
return random(1500,2000);
}
RSComponent okay=interfaces.getComponent(TALK_INTERFACE,3);
if (okay != null && okay.isValid()) {
okay.doClick();
}
return random(1500,2000);
case SOLVE:
RSInterface solver=interfaces.get(CHEST_INTERFACE_PARENT);
if (solver != null && solver.isValid()) {
String s=solver.getComponent(32).getText();
if (s.contains(""String_Node_Str"")) {
index=0;
}
 else if (s.contains(""String_Node_Str"")) {
index=1;
}
 else if (s.contains(""String_Node_Str"")) {
index=2;
}
 else if (s.contains(""String_Node_Str"")) {
index=3;
}
if (solved()) {
solver.getComponent(CHEST_INTERFACE_UNLOCK).doClick();
return random(600,900);
}
RSComponent container=solver.getComponent(CHEST_INTERFACE_CENTER);
for (int i=0; i < 3; i++) {
int rand=random(0,100);
if (rand < 50) {
rand=0;
}
 else if (rand >= 50) {
rand=1;
}
RSComponent target=solver.getComponent(INTERFACE_SOLVE_IDS[index][i]);
RSComponent arrow=solver.getComponent(ARROWS[i][rand]);
while (container.isValid() && target.isValid() && !container.getArea().contains(new Point(target.getCenter().x + 15,target.getCenter().y))&& arrow.isValid()&& new Timer(10000).isRunning()) {
arrow.doClick();
sleep(random(1000,1200));
}
}
}
}
return random(500,800);
}","@Override public int loop(){
  if (bank.isDepositOpen() || bank.isOpen()) {
    bank.close();
  }
  if (!activateCondition()) {
    return -1;
  }
  if (getMyPlayer().isMoving()) {
    return random(1000,2000);
  }
switch (getState()) {
case EXIT:
    RSObject portal=objects.getNearest(EXIT_PORTAL);
  if (portal != null) {
    if (!portal.isOnScreen()) {
      camera.turnTo(portal);
    }
    if (portal.doAction(""String_Node_Str"")) {
      return random(3000,3500);
    }
  }
break;
case OPEN_CHEST:
RSObject chest=objects.getNearest(ARNAV_CHEST);
if (chest != null) {
if (chest.doClick()) {
return random(1000,1300);
}
}
break;
case TALK:
if (interfaces.canContinue()) {
interfaces.clickContinue();
return random(1500,2000);
}
RSComponent okay=interfaces.getComponent(TALK_INTERFACE,3);
if (okay != null && okay.isValid()) {
okay.doClick();
}
return random(1500,2000);
case SOLVE:
RSInterface solver=interfaces.get(CHEST_INTERFACE_PARENT);
if (solver != null && solver.isValid()) {
String s=solver.getComponent(32).getText();
if (s.contains(""String_Node_Str"")) {
index=0;
}
 else if (s.contains(""String_Node_Str"")) {
index=1;
}
 else if (s.contains(""String_Node_Str"")) {
index=2;
}
 else if (s.contains(""String_Node_Str"")) {
index=3;
}
if (solved()) {
solver.getComponent(CHEST_INTERFACE_UNLOCK).doClick();
return random(600,900);
}
RSComponent container=solver.getComponent(CHEST_INTERFACE_CENTER);
for (int i=0; i < 3; i++) {
int rand=random(0,100);
if (rand < 50) {
rand=0;
}
 else if (rand >= 50) {
rand=1;
}
RSComponent target=solver.getComponent(INTERFACE_SOLVE_IDS[index][i]);
RSComponent arrow=solver.getComponent(ARROWS[i][rand]);
while (container.isValid() && target.isValid() && !container.getArea().contains(new Point(target.getCenter().x + 15,target.getCenter().y))&& arrow.isValid()&& new Timer(10000).isRunning()) {
arrow.doClick();
sleep(random(1000,1200));
}
}
}
}
return random(500,800);
}"
84363,"@Override public void onFinish(){
}","@Override public void onFinish(){
  step=-1;
  exit=false;
  reaper=null;
}"
84364,"@Override public int loop(){
  try {
    if (!activateCondition()) {
      talkedToHerald=false;
      frog=null;
      tries=0;
      return -1;
    }
    if (canContinue()) {
      if (!talkedToHerald) {
        final RSComponent heraldTalkComp=interfaces.getComponent(242,4);
        talkedToHerald=heraldTalkComp.isValid() && (heraldTalkComp.containsText(""String_Node_Str"") || heraldTalkComp.containsText(""String_Node_Str""));
      }
      if (!interfaces.clickContinue()) {
        interfaces.getComponent(65,6).doClick();
      }
      return random(600,800);
    }
    if (getMyPlayer().isMoving()) {
      return random(600,800);
    }
    if (!talkedToHerald) {
      final RSNPC herald=npcs.getNearest(""String_Node_Str"");
      if (calc.distanceTo(herald) < 5) {
        if (!calc.tileOnScreen(herald.getLocation())) {
          camera.turnTo(herald);
        }
        herald.doAction(""String_Node_Str"");
        return random(500,1000);
      }
 else {
        walking.walkTileMM(herald.getLocation());
        return random(500,700);
      }
    }
    if (frog == null) {
      frog=findFrog();
      if (frog != null) {
        log(""String_Node_Str"" + frog.getID());
      }
    }
    if (frog != null && frog.getLocation() != null && (!talkedToFrog || !canContinue())) {
      if (calc.distanceTo(frog) < 5) {
        if (!calc.tileOnScreen(frog.getLocation())) {
          camera.turnTo(frog);
        }
        if (frog.doAction(""String_Node_Str"")) {
          sleep(750,1250);
          talkedToFrog=canContinue();
        }
        return random(900,1000);
      }
 else {
        walking.walkTileMM(frog.getLocation());
        return random(500,700);
      }
    }
 else {
      tries++;
      if (tries > 200) {
        tries=0;
        talkedToHerald=false;
      }
      return random(200,400);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return random(200,400);
}","@Override public int loop(){
  try {
    if (!activateCondition()) {
      return -1;
    }
    if (canContinue()) {
      if (!talkedToHerald) {
        final RSComponent heraldTalkComp=interfaces.getComponent(242,4);
        talkedToHerald=heraldTalkComp.isValid() && (heraldTalkComp.containsText(""String_Node_Str"") || heraldTalkComp.containsText(""String_Node_Str""));
      }
      if (!interfaces.clickContinue()) {
        interfaces.getComponent(65,6).doClick();
      }
      return random(600,800);
    }
    if (getMyPlayer().isMoving()) {
      return random(600,800);
    }
    if (!talkedToHerald) {
      final RSNPC herald=npcs.getNearest(""String_Node_Str"");
      if (calc.distanceTo(herald) < 5) {
        if (!calc.tileOnScreen(herald.getLocation())) {
          camera.turnTo(herald);
        }
        herald.doAction(""String_Node_Str"");
        return random(500,1000);
      }
 else {
        walking.walkTileMM(herald.getLocation());
        return random(500,700);
      }
    }
    if (frog == null) {
      frog=findFrog();
      if (frog != null) {
        log(""String_Node_Str"" + frog.getID());
      }
    }
    if (frog != null && frog.getLocation() != null && (!talkedToFrog || !canContinue())) {
      if (calc.distanceTo(frog) < 5) {
        if (!calc.tileOnScreen(frog.getLocation())) {
          camera.turnTo(frog);
        }
        if (frog.doAction(""String_Node_Str"")) {
          sleep(750,1250);
          talkedToFrog=canContinue();
        }
        return random(900,1000);
      }
 else {
        walking.walkTileMM(frog.getLocation());
        return random(500,700);
      }
    }
 else {
      tries++;
      if (tries > 200) {
        tries=0;
        talkedToHerald=false;
      }
      return random(200,400);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return random(200,400);
}"
84365,"@Override public boolean activateCondition(){
  if ((settings.getSetting(696) != 0) && (objects.getNearest(12731) != null)) {
    tmpID=tmpStatus=-1;
    return true;
  }
  return false;
}","@Override public boolean activateCondition(){
  if ((settings.getSetting(696) != 0) && (objects.getNearest(12731) != null)) {
    return true;
  }
  return false;
}"
84366,"public void stopAllScripts(){
  for (  int i : scripts.keySet()) {
    stopScript(i);
  }
}","public void stopAllScripts(){
  Set<Integer> theSet=scripts.keySet();
  int[] arr=new int[theSet.size()];
  int c=0;
  for (  int i : theSet) {
    arr[c]=i;
    c++;
  }
  for (  int id : arr) {
    stopScript(id);
  }
}"
84367,"public static void Add(final HashMap<RSTile,TileFlags> theFlagsList){
  new Thread(){
    public void run(){
      String addedString=""String_Node_Str"";
      final Map<RSTile,TileFlags> tl=Collections.unmodifiableMap(theFlagsList);
      Iterator<Map.Entry<RSTile,TileFlags>> tileFlagsIterator=tl.entrySet().iterator();
      while (tileFlagsIterator.hasNext()) {
        TileFlags tileFlags=tileFlagsIterator.next().getValue();
        if (tileFlags != null) {
          addedString+=tileFlags.toString() + ""String_Node_Str"";
        }
      }
      Web.map.putAll(theFlagsList);
      cacheWriter.add(addedString);
      addedString=null;
    }
  }
.start();
}","public static void Add(final HashMap<RSTile,TileFlags> theFlagsList){
  new Thread(){
    public void run(){
      String addedString=""String_Node_Str"";
      final HashMap<RSTile,TileFlags> theFlagsList2=new HashMap<RSTile,TileFlags>();
      theFlagsList2.putAll(theFlagsList);
      final Map<RSTile,TileFlags> tl=Collections.unmodifiableMap(theFlagsList2);
      Iterator<Map.Entry<RSTile,TileFlags>> tileFlagsIterator=tl.entrySet().iterator();
      while (tileFlagsIterator.hasNext()) {
        TileFlags tileFlags=tileFlagsIterator.next().getValue();
        if (tileFlags != null) {
          addedString+=tileFlags.toString() + ""String_Node_Str"";
        }
      }
      Web.map.putAll(theFlagsList);
      cacheWriter.add(addedString);
      addedString=null;
      theFlagsList2.clear();
    }
  }
.start();
}"
84368,"public void run(){
  String addedString=""String_Node_Str"";
  final Map<RSTile,TileFlags> tl=Collections.unmodifiableMap(theFlagsList);
  Iterator<Map.Entry<RSTile,TileFlags>> tileFlagsIterator=tl.entrySet().iterator();
  while (tileFlagsIterator.hasNext()) {
    TileFlags tileFlags=tileFlagsIterator.next().getValue();
    if (tileFlags != null) {
      addedString+=tileFlags.toString() + ""String_Node_Str"";
    }
  }
  Web.map.putAll(theFlagsList);
  cacheWriter.add(addedString);
  addedString=null;
}","public void run(){
  String addedString=""String_Node_Str"";
  final HashMap<RSTile,TileFlags> theFlagsList2=new HashMap<RSTile,TileFlags>();
  theFlagsList2.putAll(theFlagsList);
  final Map<RSTile,TileFlags> tl=Collections.unmodifiableMap(theFlagsList2);
  Iterator<Map.Entry<RSTile,TileFlags>> tileFlagsIterator=tl.entrySet().iterator();
  while (tileFlagsIterator.hasNext()) {
    TileFlags tileFlags=tileFlagsIterator.next().getValue();
    if (tileFlags != null) {
      addedString+=tileFlags.toString() + ""String_Node_Str"";
    }
  }
  Web.map.putAll(theFlagsList);
  cacheWriter.add(addedString);
  addedString=null;
  theFlagsList2.clear();
}"
84369,"public int loop(){
  final RSTile curr_base=game.getMapBase();
  if (lb != null && lb.equals(curr_base)) {
    return -1;
  }
  sleep(5000);
  lb=curr_base;
  Node t;
  final int flags[][]=walking.getCollisionFlags(game.getPlane());
  for (int i=0; i < 104; i++) {
    for (int j=0; j < 104; j++) {
      RSTile start=new RSTile(curr_base.getX() + i,curr_base.getY() + j);
      int base_x=game.getBaseX(), base_y=game.getBaseY();
      int curr_x=start.getX() - base_x, curr_y=start.getY() - base_y;
      t=new Node(curr_x,curr_y);
      RSTile offset=walking.getCollisionOffset(game.getPlane());
      int off_x=offset.getX();
      int off_y=offset.getY();
      int x=t.x, y=t.y;
      int f_x=x - off_x, f_y=y - off_y;
      int here=flags[f_x][f_y];
      TileFlags tI=new TileFlags(start);
      if ((here & TileFlags.Flags.WALL_EAST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_EAST);
      }
      if ((here & TileFlags.Flags.WALL_WEST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_WEST);
      }
      if ((here & TileFlags.Flags.WALL_NORTH) != 0) {
        tI.addKey(TileFlags.Keys.WALL_NORTH);
      }
      if ((here & TileFlags.Flags.WALL_SOUTH) != 0) {
        tI.addKey(TileFlags.Keys.WALL_SOUTH);
      }
      if ((here & TileFlags.Flags.WALL_NORTH_EAST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_NORTH_EAST);
      }
      if ((here & TileFlags.Flags.WALL_NORTH_WEST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_NORTH_WEST);
      }
      if ((here & TileFlags.Flags.WALL_SOUTH_EAST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_SOUTH_EAST);
      }
      if ((here & TileFlags.Flags.WALL_SOUTH_WEST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_SOUTH_WEST);
      }
      if ((here & TileFlags.Flags.BLOCKED) != 0) {
        tI.addKey(TileFlags.Keys.BLOCKED);
      }
      if ((here & TileFlags.Flags.WATER) != 0) {
        tI.addKey(TileFlags.Keys.TILE_WATER);
      }
      if (!tI.isBlocked()) {
        tI.addKey(TileFlags.Keys.TILE_CLEAR);
      }
      if (!WebQueue.rs_map.containsKey(start) && f_y > 0 && f_x < 103) {
        WebQueue.rs_map.put(start,tI);
      }
 else {
        if (!WebQueue.rs_map.get(start).equals(tI)) {
          WebQueue.rs_map.remove(start);
        }
      }
    }
  }
  return -1;
}","public int loop(){
  final RSTile curr_base=game.getMapBase();
  if (lb != null && lb.equals(curr_base)) {
    return -1;
  }
  sleep(5000);
  lb=curr_base;
  Node t;
  log(""String_Node_Str"");
  final int flags[][]=walking.getCollisionFlags(game.getPlane());
  for (int i=0; i < 104; i++) {
    for (int j=0; j < 104; j++) {
      RSTile start=new RSTile(curr_base.getX() + i,curr_base.getY() + j);
      int base_x=game.getBaseX(), base_y=game.getBaseY();
      int curr_x=start.getX() - base_x, curr_y=start.getY() - base_y;
      t=new Node(curr_x,curr_y);
      RSTile offset=walking.getCollisionOffset(game.getPlane());
      int off_x=offset.getX();
      int off_y=offset.getY();
      int x=t.x, y=t.y;
      int f_x=x - off_x, f_y=y - off_y;
      int here=flags[f_x][f_y];
      TileFlags tI=new TileFlags(start);
      if ((here & TileFlags.Flags.WALL_EAST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_EAST);
      }
      if ((here & TileFlags.Flags.WALL_WEST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_WEST);
      }
      if ((here & TileFlags.Flags.WALL_NORTH) != 0) {
        tI.addKey(TileFlags.Keys.WALL_NORTH);
      }
      if ((here & TileFlags.Flags.WALL_SOUTH) != 0) {
        tI.addKey(TileFlags.Keys.WALL_SOUTH);
      }
      if ((here & TileFlags.Flags.WALL_NORTH_EAST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_NORTH_EAST);
      }
      if ((here & TileFlags.Flags.WALL_NORTH_WEST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_NORTH_WEST);
      }
      if ((here & TileFlags.Flags.WALL_SOUTH_EAST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_SOUTH_EAST);
      }
      if ((here & TileFlags.Flags.WALL_SOUTH_WEST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_SOUTH_WEST);
      }
      if ((here & TileFlags.Flags.BLOCKED) != 0) {
        tI.addKey(TileFlags.Keys.BLOCKED);
      }
      if ((here & TileFlags.Flags.WATER) != 0) {
        tI.addKey(TileFlags.Keys.TILE_WATER);
      }
      if (!tI.isBlocked()) {
        tI.addKey(TileFlags.Keys.TILE_CLEAR);
      }
      if (!Web.map.containsKey(start) && f_y > 0 && f_x < 103) {
        rs_map.put(start,tI);
      }
 else {
        if (!Web.map.get(start).equals(tI)) {
          Web.map.remove(start);
        }
      }
    }
  }
  WebQueue.Add(rs_map);
  return -1;
}"
84370,"public static void Add(final List<TileFlags> tileFlagsList){
  String addedString=""String_Node_Str"";
  Iterator<TileFlags> tileFlagsIterator=tileFlagsList.listIterator();
  while (tileFlagsIterator.hasNext()) {
    TileFlags tileFlags=tileFlagsIterator.next();
    if (tileFlags != null) {
      addedString+=tileFlags.toString() + ""String_Node_Str"";
    }
  }
  cacheWriter.add(addedString);
  Web.map.putAll(rs_map);
  rs_map.clear();
  addedString=null;
}","public static void Add(final HashMap<RSTile,TileFlags> theFlagsList){
  String addedString=""String_Node_Str"";
  Iterator<Map.Entry<RSTile,TileFlags>> tileFlagsIterator=theFlagsList.entrySet().iterator();
  while (tileFlagsIterator.hasNext()) {
    TileFlags tileFlags=tileFlagsIterator.next().getValue();
    if (tileFlags != null) {
      addedString+=tileFlags.toString() + ""String_Node_Str"";
    }
  }
  Web.map.putAll(theFlagsList);
  cacheWriter.add(addedString);
  addedString=null;
}"
84371,"public static void addHook(Hook hook){
  if (!isHookValid(hook.getHookName())) {
    hooks.put(hook.getHookName(),hook);
  }
}","public static void addHook(Hook hook){
  if (!isHookValid(hook.getHookName())) {
    Hooks.hooks.put(hook.getHookName(),hook);
  }
}"
84372,"private Field getHookField(String hookName){
  if (hookName == null || !isHookValid(hookName)) {
    return null;
  }
  Hook data=Hooks.hooks.get(hookName);
  if (data == null) {
    return null;
  }
  return getHookField(data.getClassName(),data.getFieldName());
}","private Field getHookField(String hookName){
  if (hookName == null || !isHookValid(hookName)) {
    return null;
  }
  Hook hook=Hooks.hooks.get(hookName);
  if (hook == null) {
    return null;
  }
  return getHookField(hook.getClassName(),hook.getFieldName());
}"
84373,"private boolean openBank(){
  try {
    if (!bank.isOpen()) {
      if (menu.isOpen()) {
        mouse.moveSlightly();
        sleep(random(40,60));
      }
      RSObject bankBooth=objects.getNearest(bank.BANK_BOOTHS);
      RSNPC banker=npcs.getNearest(bank.BANKERS);
      RSObject bankChest=objects.getNearest(bank.BANK_CHESTS);
      int dist=calc.distanceTo(bankBooth);
      if (banker != null && bankBooth != null && calc.distanceTo(banker) < dist) {
        if (calc.distanceBetween(banker.getLocation(),bankBooth.getLocation()) <= 1) {
          if (random(1,3) >= 2) {
            banker=null;
          }
 else {
            bankBooth=null;
          }
        }
 else {
          bankBooth=null;
        }
      }
      if (bankChest != null && calc.distanceTo(bankChest) < dist) {
        bankBooth=null;
        banker=null;
      }
      if (((bankBooth != null) && (calc.distanceTo(bankBooth) < 5) && calc.tileOnMap(bankBooth.getLocation())&& calc.canReach(bankBooth.getLocation(),true)) || ((banker != null) && (calc.distanceTo(banker) < 8) && calc.tileOnMap(banker.getLocation())&& calc.canReach(banker.getLocation(),true)) || ((bankChest != null) && (calc.distanceTo(bankChest) < 8) && calc.tileOnMap(bankChest.getLocation())&& calc.canReach(bankChest.getLocation(),true)&& !bank.isOpen())) {
        if (bankBooth != null) {
          Point loc=getLocation(bankBooth);
          for (int i=0; i < 10 && !menu.contains(""String_Node_Str""); i++) {
            mouseMove(loc);
            if (menu.contains(""String_Node_Str"")) {
              sleep(random(20,60));
              if (menu.contains(""String_Node_Str"")) {
                sleep(random(20,60));
                if (menu.contains(""String_Node_Str"")) {
                  break;
                }
              }
            }
          }
          if (doMenuAction(""String_Node_Str"")) {
            int count=0;
            while (!bank.isOpen() && ++count <= 10) {
              sleep(random(200,300));
              if (getMyPlayer().isMoving()) {
                count=0;
              }
            }
          }
 else {
            camera.turnTo(bankBooth);
          }
        }
 else         if (banker != null) {
          RSModel m=banker.getModel();
          if (m == null) {
            m=banker.getModel();
            if (m == null) {
              return false;
            }
          }
          Point loc=pointOnScreen(m);
          for (int i=0; i < 10 && !menu.contains(""String_Node_Str""); i++) {
            mouseMove(loc);
            if (menu.contains(""String_Node_Str"")) {
              sleep(random(20,60));
              if (menu.contains(""String_Node_Str"")) {
                sleep(random(20,60));
                if (menu.contains(""String_Node_Str"")) {
                  break;
                }
              }
            }
          }
          if (doMenuAction(""String_Node_Str"")) {
            int count=0;
            while (!bank.isOpen() && ++count <= 10) {
              sleep(random(200,300));
              if (getMyPlayer().isMoving()) {
                count=0;
              }
            }
          }
 else {
            camera.turnTo(banker);
          }
        }
 else         if (bankChest != null) {
          Point loc=getLocation(bankChest);
          for (int i=0; i < 10 && !menu.contains(""String_Node_Str"") && !menu.contains(""String_Node_Str""); i++) {
            mouseMove(loc);
            if (menu.contains(""String_Node_Str"") || menu.contains(""String_Node_Str"")) {
              sleep(random(20,60));
              if (menu.contains(""String_Node_Str"") || menu.contains(""String_Node_Str"")) {
                sleep(random(20,60));
                if (menu.contains(""String_Node_Str"") || menu.contains(""String_Node_Str"")) {
                  break;
                }
              }
            }
          }
          if (doMenuAction(""String_Node_Str"") || doMenuAction(""String_Node_Str"")) {
            int count=0;
            while (!bank.isOpen() && ++count <= 10) {
              sleep(random(200,300));
              if (getMyPlayer().isMoving()) {
                count=0;
              }
            }
          }
 else {
            camera.turnTo(bankBooth);
          }
        }
      }
 else {
        if (bankBooth != null) {
          walking.walkTo(bankBooth.getLocation());
        }
 else         if (banker != null) {
          walking.walkTo(banker.getLocation());
        }
 else         if (bankChest != null) {
          walking.walkTo(bankChest.getLocation());
        }
 else {
          return false;
        }
      }
    }
    return bank.isOpen();
  }
 catch (  Exception e) {
    return false;
  }
}","private boolean openBank(){
  try {
    if (!bank.isOpen()) {
      if (menu.isOpen()) {
        mouse.moveSlightly();
        sleep(random(40,60));
      }
      RSObject bankBooth=objects.getNearest(Bank.BANK_BOOTHS);
      RSNPC banker=npcs.getNearest(Bank.BANKERS);
      RSObject bankChest=objects.getNearest(Bank.BANK_CHESTS);
      int dist=calc.distanceTo(bankBooth);
      if (banker != null && bankBooth != null && calc.distanceTo(banker) < dist) {
        if (calc.distanceBetween(banker.getLocation(),bankBooth.getLocation()) <= 1) {
          if (random(1,3) >= 2) {
            banker=null;
          }
 else {
            bankBooth=null;
          }
        }
 else {
          bankBooth=null;
        }
      }
      if (bankChest != null && calc.distanceTo(bankChest) < dist) {
        bankBooth=null;
        banker=null;
      }
      if (((bankBooth != null) && (calc.distanceTo(bankBooth) < 5) && calc.tileOnMap(bankBooth.getLocation())&& calc.canReach(bankBooth.getLocation(),true)) || ((banker != null) && (calc.distanceTo(banker) < 8) && calc.tileOnMap(banker.getLocation())&& calc.canReach(banker.getLocation(),true)) || ((bankChest != null) && (calc.distanceTo(bankChest) < 8) && calc.tileOnMap(bankChest.getLocation())&& calc.canReach(bankChest.getLocation(),true)&& !bank.isOpen())) {
        if (bankBooth != null) {
          Point loc=getLocation(bankBooth);
          for (int i=0; i < 10 && !menu.contains(""String_Node_Str""); i++) {
            mouseMove(loc);
            if (menu.contains(""String_Node_Str"")) {
              sleep(random(20,60));
              if (menu.contains(""String_Node_Str"")) {
                sleep(random(20,60));
                if (menu.contains(""String_Node_Str"")) {
                  break;
                }
              }
            }
          }
          if (doMenuAction(""String_Node_Str"")) {
            int count=0;
            while (!bank.isOpen() && ++count <= 10) {
              sleep(random(200,300));
              if (getMyPlayer().isMoving()) {
                count=0;
              }
            }
          }
 else {
            camera.turnTo(bankBooth);
          }
        }
 else         if (banker != null) {
          RSModel m=banker.getModel();
          if (m == null) {
            m=banker.getModel();
            if (m == null) {
              return false;
            }
          }
          Point loc=pointOnScreen(m);
          for (int i=0; i < 10 && !menu.contains(""String_Node_Str""); i++) {
            mouseMove(loc);
            if (menu.contains(""String_Node_Str"")) {
              sleep(random(20,60));
              if (menu.contains(""String_Node_Str"")) {
                sleep(random(20,60));
                if (menu.contains(""String_Node_Str"")) {
                  break;
                }
              }
            }
          }
          if (doMenuAction(""String_Node_Str"")) {
            int count=0;
            while (!bank.isOpen() && ++count <= 10) {
              sleep(random(200,300));
              if (getMyPlayer().isMoving()) {
                count=0;
              }
            }
          }
 else {
            camera.turnTo(banker);
          }
        }
 else         if (bankChest != null) {
          Point loc=getLocation(bankChest);
          for (int i=0; i < 10 && !menu.contains(""String_Node_Str"") && !menu.contains(""String_Node_Str""); i++) {
            mouseMove(loc);
            if (menu.contains(""String_Node_Str"") || menu.contains(""String_Node_Str"")) {
              sleep(random(20,60));
              if (menu.contains(""String_Node_Str"") || menu.contains(""String_Node_Str"")) {
                sleep(random(20,60));
                if (menu.contains(""String_Node_Str"") || menu.contains(""String_Node_Str"")) {
                  break;
                }
              }
            }
          }
          if (doMenuAction(""String_Node_Str"") || doMenuAction(""String_Node_Str"")) {
            int count=0;
            while (!bank.isOpen() && ++count <= 10) {
              sleep(random(200,300));
              if (getMyPlayer().isMoving()) {
                count=0;
              }
            }
          }
 else {
            camera.turnTo(bankBooth);
          }
        }
      }
 else {
        if (bankBooth != null) {
          walking.walkTo(bankBooth.getLocation());
        }
 else         if (banker != null) {
          walking.walkTo(banker.getLocation());
        }
 else         if (bankChest != null) {
          walking.walkTo(bankChest.getLocation());
        }
 else {
          return false;
        }
      }
    }
    return bank.isOpen();
  }
 catch (  Exception e) {
    return false;
  }
}"
84374,"private Point[] genControls(Point start,Point end){
  int rand=random(1,8);
  ArrayList<Point> controls=new ArrayList<Point>();
  controls.add(start);
  if (random(1,2) == 1) {
    int x=random(0,game.getWidth());
    int y=random(0,game.getHeight());
    Point cp1=new Point(x,y);
    Point cp2=new Point(x,y);
    int loops=0;
    while (calc.distanceBetween(cp1,cp2) <= 200 && ((loops++) < 200)) {
      if (loops >= 200) {
        break;
      }
      x=random(0,game.getWidth() + 200);
      x=x - random(0,200);
      y=random(0,game.getHeight() + 200);
      y=y - random(0,200);
      cp2=new Point(x,y);
    }
    if (loops >= 200) {
      cp2=new Point(cp2.y,cp2.x);
    }
    if (random(1,2) == random(1,2)) {
      controls.add(cp1);
      controls.add(cp2);
    }
 else {
      controls.add(cp2);
      controls.add(cp1);
    }
    controls.add(end);
    return controls.toArray(new Point[controls.size()]);
  }
 else {
    Point[] controls2=genRelativeControls(start,end,4);
    return controls2;
  }
}","private Point[] genControls(Point start,Point end){
  random(1,8);
  ArrayList<Point> controls=new ArrayList<Point>();
  controls.add(start);
  if (random(1,2) == 1) {
    int x=random(0,game.getWidth());
    int y=random(0,game.getHeight());
    Point cp1=new Point(x,y);
    Point cp2=new Point(x,y);
    int loops=0;
    while (calc.distanceBetween(cp1,cp2) <= 200 && ((loops++) < 200)) {
      if (loops >= 200) {
        break;
      }
      x=random(0,game.getWidth() + 200);
      x=x - random(0,200);
      y=random(0,game.getHeight() + 200);
      y=y - random(0,200);
      cp2=new Point(x,y);
    }
    if (loops >= 200) {
      cp2=new Point(cp2.y,cp2.x);
    }
    if (random(1,2) == random(1,2)) {
      controls.add(cp1);
      controls.add(cp2);
    }
 else {
      controls.add(cp2);
      controls.add(cp1);
    }
    controls.add(end);
    return controls.toArray(new Point[controls.size()]);
  }
 else {
    Point[] controls2=genRelativeControls(start,end,4);
    return controls2;
  }
}"
84375,"@Override public boolean onStart(){
  log(""String_Node_Str"");
  sleep(100);
  if (!game.isLoggedIn() || game.isLoginScreen() || game.isWelcomeScreen()) {
    env.enableRandom(""String_Node_Str"");
  }
  Thread priceloader=new Thread(new PriceLoader());
  priceloader.start();
  createAndWaitforGUI();
  sleep(75);
  if (gui.isCanceled() == true) {
    return false;
  }
  final int pp=(int)gui.softenLocation();
switch (pp) {
case locVar.fally:
    loc=new Falador();
  break;
case locVar.edge:
loc=new Edgeville();
break;
default :
return false;
}
running=true;
inv=new InventoryListener();
invThread=new Thread(inv);
invThread.start();
while (priceloader.isAlive()) {
sleep(100);
}
if (softClayPrice == -1 || clayPrice == -1) {
log.severe(""String_Node_Str"");
return false;
}
 else {
if (nclicked == null || nmouse == null) {
log.severe(""String_Node_Str"");
log.severe(""String_Node_Str"");
return false;
}
log(""String_Node_Str"" + softClayPrice + ""String_Node_Str""+ clayPrice+ ""String_Node_Str"");
}
mouse.setSpeed(random(mouseLo,mouseHi));
mouseCheck=new MouseMovementChecker();
cameraCheck=new CameraMovementChecker();
Antiban=new antiban();
canAB=true;
lastMessageTyped=System.currentTimeMillis();
return true;
}","@Override public boolean onStart(){
  log(""String_Node_Str"");
  sleep(100);
  if (!game.isLoggedIn() || game.isLoginScreen() || game.isWelcomeScreen()) {
    env.enableRandom(""String_Node_Str"");
  }
  Thread priceloader=new Thread(new PriceLoader());
  priceloader.start();
  createAndWaitforGUI();
  sleep(75);
  if (gui.isCanceled() == true) {
    return false;
  }
  final int pp=(int)gui.softenLocation();
switch (pp) {
case locVar.fally:
    loc=new Falador();
  break;
case locVar.edge:
loc=new Edgeville();
break;
default :
return false;
}
running=true;
inv=new InventoryListener();
invThread=new Thread(inv);
invThread.start();
while (priceloader.isAlive()) {
sleep(100);
}
if (softClayPrice == -1 || clayPrice == -1) {
log.severe(""String_Node_Str"");
return false;
}
 else {
if (nclicked == null || nmouse == null) {
log.severe(""String_Node_Str"");
log.severe(""String_Node_Str"");
return false;
}
log(""String_Node_Str"" + softClayPrice + ""String_Node_Str""+ clayPrice+ ""String_Node_Str"");
}
mouse.setSpeed(random(mouseLo,mouseHi));
mouseCheck=new MouseMovementChecker();
cameraCheck=new CameraMovementChecker();
Antiban=new antiban();
canAB=true;
System.currentTimeMillis();
return true;
}"
84376,"private Point[] genRelativeControls(Point start,Point end,int numofcontrols){
  if (numofcontrols < 3 || numofcontrols > 4) {
    return null;
  }
  double dist=calc.distanceBetween(start,end);
  double angle=Math.atan2(end.y - start.y,end.x - start.x);
  ArrayList<Point> result=new ArrayList<Point>();
  result.add(start);
  int ctrlSpacing=random(70,80);
  for (int i=1; i < numofcontrols; i++) {
    ctrlSpacing=random(70,80);
    double radius=ctrlSpacing * i;
    Point cur=new Point((int)(start.x + radius * Math.cos(angle)),(int)(start.y + radius * Math.sin(angle)));
    double percent=1D - (double)(i - 1) / (double)numofcontrols;
    percent=percent > 0.5 ? percent - 0.5 : percent;
    percent+=0.25;
    int curVariance=(int)(random(115,130) * percent);
    cur.setLocation((int)(cur.y + curVariance * 2 * rand.nextDouble() - curVariance),(int)(cur.x + curVariance * 2 * rand.nextDouble() - curVariance));
    result.add(cur);
  }
  if (numofcontrols == 3) {
    result.add(result.get(result.size() - 1));
  }
  result.add(end);
  return result.toArray(new Point[result.size()]);
}","private Point[] genRelativeControls(Point start,Point end,int numofcontrols){
  if (numofcontrols < 3 || numofcontrols > 4) {
    return null;
  }
  calc.distanceBetween(start,end);
  double angle=Math.atan2(end.y - start.y,end.x - start.x);
  ArrayList<Point> result=new ArrayList<Point>();
  result.add(start);
  int ctrlSpacing=random(70,80);
  for (int i=1; i < numofcontrols; i++) {
    ctrlSpacing=random(70,80);
    double radius=ctrlSpacing * i;
    Point cur=new Point((int)(start.x + radius * Math.cos(angle)),(int)(start.y + radius * Math.sin(angle)));
    double percent=1D - (double)(i - 1) / (double)numofcontrols;
    percent=percent > 0.5 ? percent - 0.5 : percent;
    percent+=0.25;
    int curVariance=(int)(random(115,130) * percent);
    cur.setLocation((int)(cur.y + curVariance * 2 * rand.nextDouble() - curVariance),(int)(cur.x + curVariance * 2 * rand.nextDouble() - curVariance));
    result.add(cur);
  }
  if (numofcontrols == 3) {
    result.add(result.get(result.size() - 1));
  }
  result.add(end);
  return result.toArray(new Point[result.size()]);
}"
84377,"private void antiban(){
  int rand=random(1,6);
  if (rand <= 2 && !bank.isOpen()) {
    antibancamera();
  }
 else   if (rand >= 5) {
    antibanmouse();
  }
 else {
    if (random(1,3) >= random(1,3)) {
      antibanmouse();
    }
 else     if (!bank.isOpen()) {
      antibancamera();
    }
 else {
      antibanmouse();
    }
  }
}","public antiban(){
switch (numABThreads) {
case 0:
{
      break;
    }
case 1:
{
    new Thread(this).start();
    break;
  }
case 2:
{
  new Thread(this).start();
  new Thread(this).start();
  break;
}
case 3:
{
new Thread(this).start();
new Thread(this).start();
new Thread(this).start();
break;
}
case 4:
{
new Thread(this).start();
new Thread(this).start();
new Thread(this).start();
new Thread(this).start();
break;
}
case 5:
{
new Thread(this).start();
new Thread(this).start();
new Thread(this).start();
new Thread(this).start();
new Thread(this).start();
break;
}
default :
{
new Thread(this).start();
break;
}
}
}"
84378,"private boolean withdraw(final int itemID,final int count){
  if (count < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + count + ""String_Node_Str"");
  }
  if (!bank.isOpen() || isPaused() || !isActive()|| !isRunning()) {
    return false;
  }
  final RSItem item=bank.getItem(itemID);
  if (item == null) {
    return false;
  }
  RSComponent comp=item.getComponent();
  if (comp == null) {
    return false;
  }
  while (comp.getRelativeX() == 0 && bank.getCurrentTab() != 0) {
    interfaces.getComponent(bank.INTERFACE_BANK,bank.INTERFACE_BANK_TAB[0]).doClick();
    sleep(random(600,1100));
  }
  if (!interfaces.scrollTo(comp,(bank.INTERFACE_BANK << 16) + bank.INTERFACE_BANK_SCROLLBAR)) {
    return false;
  }
  sleep(random(60,200));
  Rectangle area=comp.getArea();
  int randx=(int)random(area.getMinX(),area.getMaxX());
  int randy=(int)random(area.getMinY(),area.getMaxY());
  Point itemPoint=new Point(randx,randy);
  final int inventoryCount=inventory.getCount(true);
switch (count) {
case 0:
    mouseMove(itemPoint);
  doMenuAction(""String_Node_Str"");
break;
case 1:
mouseMove(itemPoint);
item.doClick(true);
break;
case 5:
case 10:
mouseMove(itemPoint);
doMenuAction(""String_Node_Str"" + count);
break;
default :
mouseMove(itemPoint);
sleep(random(100,500));
if (menu.contains(""String_Node_Str"" + count)) {
if (doMenuAction(""String_Node_Str"" + count)) {
sleep(random(100,200));
return true;
}
return false;
}
if (!area.contains(mouse.getLocation())) {
mouseMove(itemPoint);
}
if (doMenuAction(""String_Node_Str"")) {
sleep(random(1000,1300));
keyboard.sendText(Integer.toString(count),true);
}
sleep(random(100,200));
break;
}
return (inventory.getCount(true) > inventoryCount) || (inventory.getCount(true) == 28);
}","private boolean withdraw(final int itemID,final int count){
  if (count < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + count + ""String_Node_Str"");
  }
  if (!bank.isOpen() || isPaused() || !isActive()|| !isRunning()) {
    return false;
  }
  final RSItem item=bank.getItem(itemID);
  if (item == null) {
    return false;
  }
  RSComponent comp=item.getComponent();
  if (comp == null) {
    return false;
  }
  while (comp.getRelativeX() == 0 && bank.getCurrentTab() != 0) {
    interfaces.getComponent(Bank.INTERFACE_BANK,Bank.INTERFACE_BANK_TAB[0]).doClick();
    sleep(random(600,1100));
  }
  if (!interfaces.scrollTo(comp,(Bank.INTERFACE_BANK << 16) + Bank.INTERFACE_BANK_SCROLLBAR)) {
    return false;
  }
  sleep(random(60,200));
  Rectangle area=comp.getArea();
  int randx=(int)random(area.getMinX(),area.getMaxX());
  int randy=(int)random(area.getMinY(),area.getMaxY());
  Point itemPoint=new Point(randx,randy);
  final int inventoryCount=inventory.getCount(true);
switch (count) {
case 0:
    mouseMove(itemPoint);
  doMenuAction(""String_Node_Str"");
break;
case 1:
mouseMove(itemPoint);
item.doClick(true);
break;
case 5:
case 10:
mouseMove(itemPoint);
doMenuAction(""String_Node_Str"" + count);
break;
default :
mouseMove(itemPoint);
sleep(random(100,500));
if (menu.contains(""String_Node_Str"" + count)) {
if (doMenuAction(""String_Node_Str"" + count)) {
sleep(random(100,200));
return true;
}
return false;
}
if (!area.contains(mouse.getLocation())) {
mouseMove(itemPoint);
}
if (doMenuAction(""String_Node_Str"")) {
sleep(random(1000,1300));
keyboard.sendText(Integer.toString(count),true);
}
sleep(random(100,200));
break;
}
return (inventory.getCount(true) > inventoryCount) || (inventory.getCount(true) == 28);
}"
84379,"public boolean onStart(){
  try {
    final URL cursorURL=new URL(""String_Node_Str"");
    final URL cursor80URL=new URL(""String_Node_Str"");
    normal=ImageIO.read(cursorURL);
    clicked=ImageIO.read(cursor80URL);
  }
 catch (  MalformedURLException e) {
    log(""String_Node_Str"");
  }
catch (  IOException e) {
    log(""String_Node_Str"");
  }
  gui=new BloddyMasterFarmerGUI();
  gui.setVisible(true);
  while (guiWait) {
    sleep(100);
  }
  startTime=System.currentTimeMillis();
  startXP=skills.getCurrentExp(Skills.THIEVING);
  startLvl=skills.getCurrentLevel(Skills.THIEVING);
  mouse.setSpeed(6);
  camRotate.isActive=true;
  camRotate.start();
  camHeight.isActive=true;
  camHeight.start();
  log(""String_Node_Str"");
  return !guiExit;
}","@Override public boolean onStart(){
  try {
    final URL cursorURL=new URL(""String_Node_Str"");
    final URL cursor80URL=new URL(""String_Node_Str"");
    normal=ImageIO.read(cursorURL);
    clicked=ImageIO.read(cursor80URL);
  }
 catch (  MalformedURLException e) {
    log(""String_Node_Str"");
  }
catch (  IOException e) {
    log(""String_Node_Str"");
  }
  gui=new BloddyMasterFarmerGUI();
  gui.setVisible(true);
  while (guiWait) {
    sleep(100);
  }
  startTime=System.currentTimeMillis();
  startXP=skills.getCurrentExp(Skills.THIEVING);
  startLvl=skills.getCurrentLevel(Skills.THIEVING);
  mouse.setSpeed(6);
  camRotate.isActive=true;
  camRotate.start();
  camHeight.isActive=true;
  camHeight.start();
  log(""String_Node_Str"");
  return !guiExit;
}"
84380,"public void onFinish(){
  mouse.moveOffScreen();
  camHeight.isActive=false;
  camRotate.isActive=false;
}","@Override public void onFinish(){
  mouse.moveOffScreen();
  camHeight.isActive=false;
  camRotate.isActive=false;
}"
84381,"public boolean onStart(){
  try {
    final URL cursorURL=new URL(""String_Node_Str"");
    final URL cursor80URL=new URL(""String_Node_Str"");
    normal=ImageIO.read(cursorURL);
    clicked=ImageIO.read(cursor80URL);
  }
 catch (  MalformedURLException e) {
    log(""String_Node_Str"");
  }
catch (  IOException e) {
    log(""String_Node_Str"");
  }
  gui=new BloddyMasterFarmerGUI();
  gui.setVisible(true);
  while (guiWait) {
    sleep(100);
  }
  startTime=System.currentTimeMillis();
  startXP=skills.getCurrentExp(Skills.THIEVING);
  startLvl=skills.getCurrentLevel(Skills.THIEVING);
  mouse.setSpeed(6);
  camRotate.isActive=true;
  camRotate.start();
  camHeight.isActive=true;
  camHeight.start();
  log(""String_Node_Str"");
  return !guiExit;
}","@Override public boolean onStart(){
  try {
    final URL cursorURL=new URL(""String_Node_Str"");
    final URL cursor80URL=new URL(""String_Node_Str"");
    normal=ImageIO.read(cursorURL);
    clicked=ImageIO.read(cursor80URL);
  }
 catch (  MalformedURLException e) {
    log(""String_Node_Str"");
  }
catch (  IOException e) {
    log(""String_Node_Str"");
  }
  gui=new BloddyMasterFarmerGUI();
  gui.setVisible(true);
  while (guiWait) {
    sleep(100);
  }
  startTime=System.currentTimeMillis();
  startXP=skills.getCurrentExp(Skills.THIEVING);
  startLvl=skills.getCurrentLevel(Skills.THIEVING);
  mouse.setSpeed(6);
  camRotate.isActive=true;
  camRotate.start();
  camHeight.isActive=true;
  camHeight.start();
  log(""String_Node_Str"");
  return !guiExit;
}"
84382,"public void onFinish(){
  mouse.moveOffScreen();
  camHeight.isActive=false;
  camRotate.isActive=false;
}","@Override public void onFinish(){
  mouse.moveOffScreen();
  camHeight.isActive=false;
  camRotate.isActive=false;
}"
84383,"public LoginDialog(Frame parent){
  super(parent,GlobalConfiguration.SITE_NAME + ""String_Node_Str"");
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  final Exception ignored) {
  }
  setIconImage(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON,GlobalConfiguration.Paths.ICON));
  masterPane=new JPanel();
  loginPane=new JPanel();
  usernameLabel=new JLabel();
  usernameField=new JTextField();
  passwordLabel=new JLabel();
  passwordField=new JPasswordField();
  registerLabel=new JLabel();
  loginButton=new JButton();
  infoPane=new JPanel();
  textPane=new JTextPane();
  setDefaultCloseOperation(JDialog.EXIT_ON_CLOSE);
  setResizable(false);
  setMinimumSize(new Dimension(250,200));
  setAlwaysOnTop(true);
  setLayout(new BorderLayout());
  masterPane.setMaximumSize(new Dimension(200,70));
  masterPane.setMinimumSize(new Dimension(200,70));
  masterPane.setPreferredSize(new Dimension(200,70));
  masterPane.setLayout(new BorderLayout());
  add(masterPane,BorderLayout.WEST);
  loginPane.setMaximumSize(new Dimension(170,70));
  loginPane.setMinimumSize(new Dimension(170,70));
  loginPane.setPreferredSize(new Dimension(170,70));
  loginPane.setLayout(new GridBagLayout());
  usernameLabel.setText(""String_Node_Str"");
  usernameLabel.setLabelFor(usernameField);
  usernameLabel.setHorizontalAlignment(11);
  loginPane.add(usernameLabel,new GridBagConstraints(0,0,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,5),0,0));
  usernameField.setColumns(12);
  loginPane.add(usernameField,new GridBagConstraints(1,0,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,0),0,0));
  passwordLabel.setText(""String_Node_Str"");
  passwordLabel.setLabelFor(passwordField);
  passwordLabel.setHorizontalAlignment(11);
  loginPane.add(passwordLabel,new GridBagConstraints(0,1,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,5),0,0));
  passwordField.setColumns(12);
  loginPane.add(passwordField,new GridBagConstraints(1,1,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,0),0,0));
  registerLabel.setText(""String_Node_Str"");
  registerLabel.setHorizontalTextPosition(0);
  registerLabel.setHorizontalAlignment(0);
  registerLabel.setForeground(Color.blue);
  registerLabel.setToolTipText(""String_Node_Str"");
  loginPane.add(registerLabel,new GridBagConstraints(0,2,1,1,0.0D,0.0D,10,1,new Insets(0,0,0,5),0,0));
  loginButton.setText(""String_Node_Str"");
  loginPane.add(loginButton,new GridBagConstraints(1,2,1,1,0.0D,0.0D,10,1,new Insets(0,0,0,0),0,0));
  masterPane.add(loginPane,BorderLayout.EAST);
  loginButton.setFocusable(false);
  infoPane.setMinimumSize(new Dimension(250,100));
  infoPane.setMaximumSize(new Dimension(250,200));
  infoPane.setPreferredSize(new Dimension(250,100));
  infoPane.setLayout(new GridBagLayout());
  add(infoPane,BorderLayout.EAST);
  textPane.setText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  textPane.setEditable(false);
  textPane.setMargin(new Insets(5,5,5,5));
  textPane.setPreferredSize(new Dimension(230,150));
  infoPane.add(textPane,new GridBagConstraints(0,0,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,0),0,0));
  loginButton.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      CREDENTIALS.username=usernameField.getText();
      CREDENTIALS.password=new String(passwordField.getPassword());
      LoginManager lM=new LoginManager();
      if (lM.valid()) {
        dispose();
      }
 else {
        CREDENTIALS.username=""String_Node_Str"";
        passwordField.setText(""String_Node_Str"");
        CREDENTIALS.password=""String_Node_Str"";
        displayMessage=lM.message();
      }
    }
  }
);
  passwordField.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  registerLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      try {
        Process p=Runtime.getRuntime().exec(""String_Node_Str"");
      }
 catch (      Exception f) {
        f.printStackTrace();
      }
    }
  }
);
  pack();
}","public LoginDialog(Frame parent){
  super(parent,GlobalConfiguration.SITE_NAME + ""String_Node_Str"");
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  final Exception ignored) {
  }
  setIconImage(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON,GlobalConfiguration.Paths.ICON));
  masterPane=new JPanel();
  loginPane=new JPanel();
  usernameLabel=new JLabel();
  usernameField=new JTextField();
  passwordLabel=new JLabel();
  passwordField=new JPasswordField();
  registerLabel=new JLabel();
  loginButton=new JButton();
  infoPane=new JPanel();
  textPane=new JTextPane();
  setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  setResizable(false);
  setMinimumSize(new Dimension(250,200));
  setAlwaysOnTop(true);
  setLayout(new BorderLayout());
  masterPane.setMaximumSize(new Dimension(200,70));
  masterPane.setMinimumSize(new Dimension(200,70));
  masterPane.setPreferredSize(new Dimension(200,70));
  masterPane.setLayout(new BorderLayout());
  add(masterPane,BorderLayout.WEST);
  loginPane.setMaximumSize(new Dimension(170,70));
  loginPane.setMinimumSize(new Dimension(170,70));
  loginPane.setPreferredSize(new Dimension(170,70));
  loginPane.setLayout(new GridBagLayout());
  usernameLabel.setText(""String_Node_Str"");
  usernameLabel.setLabelFor(usernameField);
  usernameLabel.setHorizontalAlignment(11);
  loginPane.add(usernameLabel,new GridBagConstraints(0,0,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,5),0,0));
  usernameField.setColumns(12);
  loginPane.add(usernameField,new GridBagConstraints(1,0,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,0),0,0));
  passwordLabel.setText(""String_Node_Str"");
  passwordLabel.setLabelFor(passwordField);
  passwordLabel.setHorizontalAlignment(11);
  loginPane.add(passwordLabel,new GridBagConstraints(0,1,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,5),0,0));
  passwordField.setColumns(12);
  loginPane.add(passwordField,new GridBagConstraints(1,1,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,0),0,0));
  registerLabel.setText(""String_Node_Str"");
  registerLabel.setHorizontalTextPosition(0);
  registerLabel.setHorizontalAlignment(0);
  registerLabel.setForeground(Color.blue);
  registerLabel.setToolTipText(""String_Node_Str"");
  loginPane.add(registerLabel,new GridBagConstraints(0,2,1,1,0.0D,0.0D,10,1,new Insets(0,0,0,5),0,0));
  loginButton.setText(""String_Node_Str"");
  loginPane.add(loginButton,new GridBagConstraints(1,2,1,1,0.0D,0.0D,10,1,new Insets(0,0,0,0),0,0));
  masterPane.add(loginPane,BorderLayout.EAST);
  loginButton.setFocusable(false);
  infoPane.setMinimumSize(new Dimension(250,100));
  infoPane.setMaximumSize(new Dimension(250,200));
  infoPane.setPreferredSize(new Dimension(250,100));
  infoPane.setLayout(new GridBagLayout());
  add(infoPane,BorderLayout.EAST);
  textPane.setText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  textPane.setEditable(false);
  textPane.setMargin(new Insets(5,5,5,5));
  textPane.setPreferredSize(new Dimension(230,150));
  infoPane.add(textPane,new GridBagConstraints(0,0,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,0),0,0));
  loginButton.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      CREDENTIALS.username=usernameField.getText();
      CREDENTIALS.password=new String(passwordField.getPassword());
      LoginManager lM=new LoginManager();
      if (lM.valid()) {
        dispose();
      }
 else {
        CREDENTIALS.username=""String_Node_Str"";
        passwordField.setText(""String_Node_Str"");
        CREDENTIALS.password=""String_Node_Str"";
        displayMessage=lM.message();
      }
    }
  }
);
  passwordField.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  registerLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      try {
        Process p=Runtime.getRuntime().exec(""String_Node_Str"");
      }
 catch (      Exception f) {
        f.printStackTrace();
      }
    }
  }
);
  pack();
}"
84384,"@Override public void actionPerformed(ActionEvent arg0){
  exitEvent.fire(new GameExitEvent());
}","@Override public void actionPerformed(final ActionEvent arg0){
  exitEvent.fire(new GameExitEvent());
}"
84385,"public void pointsEventListener(@Observes PointsEvent event){
  movesLabel.setText(""String_Node_Str"" + event.getPoints());
}","public void pointsEventListener(@Observes final PointsEvent event){
  movesLabel.setText(""String_Node_Str"" + event.getPoints());
}"
84386,"public MainMenuBar(){
  JMenu menu=new JMenu(""String_Node_Str"");
  add(menu);
  JMenuItem menuItemPlayAgain=new JMenuItem(""String_Node_Str"");
  menuItemPlayAgain.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      restartEvent.fire(new GameRestartEvent());
    }
  }
);
  menu.add(menuItemPlayAgain);
  JMenuItem menuItemExit=new JMenuItem(""String_Node_Str"");
  menuItemExit.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      exitEvent.fire(new GameExitEvent());
    }
  }
);
  menu.addSeparator();
  menu.add(menuItemExit);
  movesLabel=new JLabel(""String_Node_Str"");
  add(movesLabel);
}","public MainMenuBar(){
  System.out.println(""String_Node_Str"");
  JMenu menu=new JMenu(""String_Node_Str"");
  add(menu);
  JMenuItem menuItemPlayAgain=new JMenuItem(""String_Node_Str"");
  menuItemPlayAgain.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      restartEvent.fire(new GameRestartEvent());
    }
  }
);
  menu.add(menuItemPlayAgain);
  JMenuItem menuItemExit=new JMenuItem(""String_Node_Str"");
  menuItemExit.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent arg0){
      exitEvent.fire(new GameExitEvent());
    }
  }
);
  menu.addSeparator();
  menu.add(menuItemExit);
  movesLabel=new JLabel(""String_Node_Str"");
  add(movesLabel);
}"
84387,"public void setColor(Color color){
  Point temp=findFirstSelectedField();
  if (color != grid.getColor(temp.x,temp.y)) {
    counter++;
    for (int i=0; i < grid.getHeight(); i++) {
      for (int j=0; j < grid.getWidth(); j++) {
        if (grid.isSelected(i,j)) {
          grid.setColor(i,j,color);
        }
      }
    }
  }
}","public void setColor(final Color color){
  Point temp=findFirstSelectedField();
  if (color != grid.getColor(temp.x,temp.y)) {
    counter++;
    for (int i=0; i < grid.getHeight(); i++) {
      for (int j=0; j < grid.getWidth(); j++) {
        if (grid.isSelected(i,j)) {
          grid.setColor(i,j,color);
        }
      }
    }
  }
}"
84388,"private void checkNeighbours(Point point){
  if (point == null) {
    return;
  }
  if (checkedPoints.contains(point)) {
    return;
  }
  checkedPoints.add(point);
  Piece thisPiece=grid.getPiece(point.x,point.y);
  Point[] points=new Point[4];
  points[0]=new Point(point.x + 1,point.y);
  points[1]=new Point(point.x - 1,point.y);
  points[2]=new Point(point.x,point.y - 1);
  points[3]=new Point(point.x,point.y + 1);
  for (int i=0; i < points.length; i++) {
    Piece temp=grid.getPiece(points[i].x,points[i].y);
    if (temp == null) {
      continue;
    }
    if (temp.getColor().equals(thisPiece.getColor())) {
      temp.setSelected(true);
      checkNeighbours(points[i]);
    }
  }
}","private void checkNeighbours(final Point point){
  if (point == null) {
    return;
  }
  if (checkedPoints.contains(point)) {
    return;
  }
  checkedPoints.add(point);
  Piece thisPiece=grid.getPiece(point.x,point.y);
  Point[] points=new Point[4];
  points[0]=new Point(point.x + 1,point.y);
  points[1]=new Point(point.x - 1,point.y);
  points[2]=new Point(point.x,point.y - 1);
  points[3]=new Point(point.x,point.y + 1);
  for (int i=0; i < points.length; i++) {
    Piece temp=grid.getPiece(points[i].x,points[i].y);
    if (temp == null) {
      continue;
    }
    if (temp.getColor().equals(thisPiece.getColor())) {
      temp.setSelected(true);
      checkNeighbours(points[i]);
    }
  }
}"
84389,"public void checkAndSelect(){
  checkedPoints=new ArrayList<Point>();
  Point temp=findFirstSelectedField();
  if (temp == null) {
    return;
  }
  checkNeighbours(temp);
  pointsEvent.fire(new PointsEvent(getCounter()));
  if (checkedPoints.size() == grid.size()) {
    finishEvent.fire(new FinishEvent());
    finished=true;
  }
}","public void checkAndSelect(){
  checkedPoints=new ArrayList<Point>();
  Point temp=findFirstSelectedField();
  if (temp == null) {
    return;
  }
  checkNeighbours(temp);
  pointsEvent.fire(new PointsEvent(getCounter()));
  if (checkedPoints.size() == grid.size()) {
    finished=true;
    finishEvent.fire(new FinishEvent());
  }
}"
84390,"public void colorChangedListener(@Observes ColorButtonPressedEvent event){
  this.setColor(event.getColor());
  checkAndSelect();
  repaintEvent.fire(new RepaintEvent());
}","public void colorChangedListener(@Observes final ColorButtonPressedEvent event){
  setColor(event.getColor());
  checkAndSelect();
  repaintEvent.fire(new RepaintEvent());
}"
84391,"@Inject public GameLogic(Grid grid,Event<RepaintEvent> repaintEvent,Event<FinishEvent> finishEvent,Event<PointsEvent> pointsEvent){
  this.grid=grid;
  this.repaintEvent=repaintEvent;
  this.finishEvent=finishEvent;
  this.pointsEvent=pointsEvent;
}","@Inject public GameLogic(final Grid grid,final Event<RepaintEvent> repaintEvent,final Event<FinishEvent> finishEvent,final Event<PointsEvent> pointsEvent){
  this.grid=grid;
  this.repaintEvent=repaintEvent;
  this.finishEvent=finishEvent;
  this.pointsEvent=pointsEvent;
}"
84392,"public void gameRestartListener(@Observes GameRestartEvent event){
  counter=0;
  grid.fill();
  finished=false;
}","public void gameRestartListener(@Observes final GameRestartEvent event){
  counter=0;
  grid.fill();
  finished=false;
}"
84393,"public void repaintListener(@Observes RepaintEvent event){
  repaint();
}","public void repaintListener(@Observes final RepaintEvent event){
  repaint();
}"
84394,"private void drawBoard(Graphics2D g2d){
  int shadowOffset=2;
  g2d.setColor(BOARD_BACKGROUND_COLOR);
  int shadowWidth=boardWidth + shadowOffset;
  int shadowHeight=boardHeight + shadowOffset;
  Shape shadowShape=new RoundRectangle2D.Double(BORDER + shadowOffset,BORDER + shadowOffset,shadowWidth,shadowHeight,BORDER,BORDER);
  g2d.fill(shadowShape);
  g2d.setColor(BOARD_BACKGROUND_SHADOW_COLOR);
  double radius=5;
  Shape board=new RoundRectangle2D.Double(BORDER,BORDER,boardWidth,boardHeight,radius,radius);
  g2d.fill(board);
  g2d.setStroke(new BasicStroke(2,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));
  g2d.setColor(BOARD_BACKGROUND_BORDER_COLOR);
  g2d.draw(board);
}","private void drawBoard(final Graphics2D g2d){
  int shadowOffset=2;
  g2d.setColor(BOARD_BACKGROUND_COLOR);
  int shadowWidth=boardWidth + shadowOffset;
  int shadowHeight=boardHeight + shadowOffset;
  Shape shadowShape=new RoundRectangle2D.Double(BORDER + shadowOffset,BORDER + shadowOffset,shadowWidth,shadowHeight,BORDER,BORDER);
  g2d.fill(shadowShape);
  g2d.setColor(BOARD_BACKGROUND_SHADOW_COLOR);
  double radius=5;
  Shape board=new RoundRectangle2D.Double(BORDER,BORDER,boardWidth,boardHeight,radius,radius);
  g2d.fill(board);
  g2d.setStroke(new BasicStroke(2,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));
  g2d.setColor(BOARD_BACKGROUND_BORDER_COLOR);
  g2d.draw(board);
}"
84395,"public void finishListener(@Observes FinishEvent enent){
  finished=true;
  repaint();
}","public void finishListener(@Observes final FinishEvent enent){
  finished=true;
  repaint();
}"
84396,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  log.debug(""String_Node_Str"");
  boardWidth=getWidth() - (2 * BORDER);
  boardHeight=getHeight() - (2 * BORDER);
  Graphics2D g2d=(Graphics2D)g;
  g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  drawBoard(g2d);
  drawGrid(g2d);
  if (finished) {
    drawFinish(g2d);
  }
}","@Override public void paintComponent(final Graphics g){
  super.paintComponent(g);
  log.debug(""String_Node_Str"");
  boardWidth=getWidth() - (2 * BORDER);
  boardHeight=getHeight() - (2 * BORDER);
  Graphics2D g2d=(Graphics2D)g;
  g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  drawBoard(g2d);
  drawGrid(g2d);
  if (finished) {
    drawFinish(g2d);
  }
}"
84397,"private void drawFinish(Graphics2D g2d){
  int finishBackgroundWidth=boardWidth / 2;
  int finishBackgroundHeight=boardHeight / 2;
  int finishBackgroundX=finishBackgroundWidth / 2;
  int finishBackgroundY=finishBackgroundHeight / 2;
  int arch=20;
  int shadowOffset=5;
  Shape background=new RoundRectangle2D.Double(finishBackgroundX,finishBackgroundY,finishBackgroundWidth,finishBackgroundHeight,arch,arch);
  Shape shadow=new RoundRectangle2D.Double(finishBackgroundX + shadowOffset,finishBackgroundY + shadowOffset,finishBackgroundWidth + shadowOffset,finishBackgroundHeight + shadowOffset,arch,arch);
  g2d.setColor(new Color(0,0,0,120));
  g2d.fill(shadow);
  g2d.setColor(Color.white);
  g2d.fill(background);
  g2d.setStroke(new BasicStroke(3,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));
  g2d.setColor(Color.black);
  g2d.draw(background);
  Font finishFont=new Font(""String_Node_Str"",Font.PLAIN,40);
  Rectangle2D fontRect=g2d.getFontMetrics(finishFont).getStringBounds(Configurator.getWinMessage(),g2d);
  int winMessageX=finishBackgroundX + (int)(finishBackgroundWidth - fontRect.getWidth()) / 2;
  int winMessageY=finishBackgroundY + (int)((finishBackgroundHeight - fontRect.getHeight()) / 2 + fontRect.getHeight() / 2);
  g2d.setFont(finishFont);
  g2d.drawString(Configurator.getWinMessage(),winMessageX,winMessageY);
  finishFont=new Font(""String_Node_Str"",Font.PLAIN,30);
  g2d.setFont(finishFont);
}","private void drawFinish(final Graphics2D g2d){
  int finishBackgroundWidth=boardWidth / 2;
  int finishBackgroundHeight=boardHeight / 2;
  int finishBackgroundX=finishBackgroundWidth / 2;
  int finishBackgroundY=finishBackgroundHeight / 2;
  int arch=20;
  int shadowOffset=5;
  Shape background=new RoundRectangle2D.Double(finishBackgroundX,finishBackgroundY,finishBackgroundWidth,finishBackgroundHeight,arch,arch);
  Shape shadow=new RoundRectangle2D.Double(finishBackgroundX + shadowOffset,finishBackgroundY + shadowOffset,finishBackgroundWidth + shadowOffset,finishBackgroundHeight + shadowOffset,arch,arch);
  g2d.setColor(new Color(0,0,0,120));
  g2d.fill(shadow);
  g2d.setColor(Color.white);
  g2d.fill(background);
  g2d.setStroke(new BasicStroke(3,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));
  g2d.setColor(Color.black);
  g2d.draw(background);
  Font finishFont=new Font(""String_Node_Str"",Font.PLAIN,40);
  Rectangle2D fontRect=g2d.getFontMetrics(finishFont).getStringBounds(Configurator.getWinMessage(),g2d);
  int winMessageX=finishBackgroundX + (int)(finishBackgroundWidth - fontRect.getWidth()) / 2;
  int winMessageY=finishBackgroundY + (int)((finishBackgroundHeight - fontRect.getHeight()) / 2 + fontRect.getHeight() / 2);
  g2d.setFont(finishFont);
  g2d.drawString(Configurator.getWinMessage(),winMessageX,winMessageY);
  finishFont=new Font(""String_Node_Str"",Font.PLAIN,30);
  g2d.setFont(finishFont);
}"
84398,"private void drawGrid(Graphics2D g2d){
  int gridWidth=boardWidth - (2 * BORDER_PADDING);
  int gridHeight=boardWidth - (2 * BORDER_PADDING);
  int fieldWidth=(int)gridWidth / grid.getWidth();
  int fieldHeight=(int)gridHeight / grid.getHeight();
  int fieldStartPositionX=BORDER + BORDER_PADDING;
  int fieldStartPositionY=BORDER + BORDER_PADDING;
  if (gridWidth % grid.getWidth() != 0) {
    fieldStartPositionX+=(gridWidth - fieldWidth * grid.getWidth()) / 2;
  }
  if (gridHeight % grid.getHeight() != 0) {
    fieldStartPositionY+=(gridHeight - fieldHeight * grid.getHeight()) / 2;
  }
  g2d.setStroke(new BasicStroke(1,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));
  g2d.setColor(Color.black);
  g2d.drawRect(fieldStartPositionX - 1,fieldStartPositionY - 1,(grid.getWidth() * fieldWidth) + 1,(grid.getHeight() * fieldHeight) + 1);
  for (int i=0; i < grid.getWidth(); i++) {
    int tempX=fieldStartPositionX;
    for (int j=0; j < grid.getHeight(); j++) {
      g2d.setColor(grid.getColor(i,j));
      g2d.fillRect(tempX,fieldStartPositionY,fieldWidth,fieldHeight);
      g2d.setColor(Color.gray);
      tempX=tempX + fieldWidth;
    }
    fieldStartPositionY=fieldStartPositionY + fieldHeight;
  }
}","private void drawGrid(final Graphics2D g2d){
  int gridWidth=boardWidth - (2 * BORDER_PADDING);
  int gridHeight=boardWidth - (2 * BORDER_PADDING);
  int fieldWidth=gridWidth / grid.getWidth();
  int fieldHeight=gridHeight / grid.getHeight();
  int fieldStartPositionX=BORDER + BORDER_PADDING;
  int fieldStartPositionY=BORDER + BORDER_PADDING;
  if (gridWidth % grid.getWidth() != 0) {
    fieldStartPositionX+=(gridWidth - fieldWidth * grid.getWidth()) / 2;
  }
  if (gridHeight % grid.getHeight() != 0) {
    fieldStartPositionY+=(gridHeight - fieldHeight * grid.getHeight()) / 2;
  }
  g2d.setStroke(new BasicStroke(1,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));
  g2d.setColor(Color.black);
  g2d.drawRect(fieldStartPositionX - 1,fieldStartPositionY - 1,(grid.getWidth() * fieldWidth) + 1,(grid.getHeight() * fieldHeight) + 1);
  for (int i=0; i < grid.getWidth(); i++) {
    int tempX=fieldStartPositionX;
    for (int j=0; j < grid.getHeight(); j++) {
      g2d.setColor(grid.getColor(i,j));
      g2d.fillRect(tempX,fieldStartPositionY,fieldWidth,fieldHeight);
      g2d.setColor(Color.gray);
      tempX=tempX + fieldWidth;
    }
    fieldStartPositionY=fieldStartPositionY + fieldHeight;
  }
}"
84399,"@Inject public GameCanvas(@Width int width,@Height int height,Grid grid){
  this.grid=grid;
  Dimension dimension=new Dimension(width,height);
  setPreferredSize(dimension);
  setMaximumSize(dimension);
  setMinimumSize(dimension);
  setBackground(Color.white);
  setSize(width,height);
}","@Inject public GameCanvas(@Width final int width,@Height final int height,final Grid grid){
  this.grid=grid;
  Dimension dimension=new Dimension(width,height);
  setPreferredSize(dimension);
  setMaximumSize(dimension);
  setMinimumSize(dimension);
  setBackground(Color.white);
  setSize(width,height);
}"
84400,"public void gameRestartListener(@Observes GameRestartEvent event){
  finished=false;
  repaint();
}","public void gameRestartListener(@Observes final GameRestartEvent event){
  finished=false;
  repaint();
}"
84401,"public static void start(){
  if (!isConfigured()) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Event nextEvent;
  while ((nextEvent=eventSourceMultiplexer.getNextEvent()) != null && isEarlierThanEmulationEnd(now())) {
    Time eventTime=nextEvent.getScheduledTime();
    if (eventTime.isEarlierThan(now())) {
      String msg=""String_Node_Str"" + now() + ""String_Node_Str""+ ""String_Node_Str""+ eventTime+ ""String_Node_Str"";
      if (stopOnError) {
        throw new RuntimeException(msg);
      }
 else {
        System.err.println(msg);
      }
    }
    if (isEarlierThanEmulationEnd(eventTime)) {
      if (isLaterThanEmulationStart(eventTime)) {
        now=eventTime;
        nextEvent.process();
        processCount++;
      }
    }
 else {
      now=emulationEnd;
    }
  }
}","public static void start(){
  if (!isConfigured()) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Event nextEvent;
  while ((nextEvent=eventSourceMultiplexer.getNextEvent()) != null && isEarlierThanEmulationEnd(now())) {
    Time eventTime=nextEvent.getScheduledTime();
    if (eventTime.isEarlierThan(now())) {
      String msg=""String_Node_Str"" + now() + ""String_Node_Str""+ ""String_Node_Str""+ eventTime+ ""String_Node_Str"";
      if (stopOnError) {
        throw new RuntimeException(msg);
      }
 else {
        System.err.println(msg);
      }
    }
 else     if (isEarlierThanEmulationEnd(eventTime)) {
      if (isLaterThanEmulationStart(eventTime)) {
        now=eventTime;
        nextEvent.process();
        processCount++;
      }
    }
 else {
      now=emulationEnd;
    }
  }
}"
84402,"public static void reset(){
  emulationStart=null;
  emulationEnd=null;
  eventSourceMultiplexer=null;
  now=new Time(0L,Unit.MILLISECONDS);
}","public static void reset(){
  emulationStart=null;
  emulationEnd=null;
  eventSourceMultiplexer=null;
  processCount=0;
  now=new Time(0L,Unit.MILLISECONDS);
}"
84403,"public static void setup(Time emulationStart,Time emulationEnd,EventSourceMultiplexer eventSource){
  EventScheduler.emulationStart=emulationStart;
  EventScheduler.emulationEnd=emulationEnd;
  EventScheduler.eventSourceMultiplexer=eventSource;
}","public static void setup(Time emulationStart,Time emulationEnd,EventSourceMultiplexer eventSource){
  reset();
  EventScheduler.emulationStart=emulationStart;
  EventScheduler.emulationEnd=emulationEnd;
  EventScheduler.eventSourceMultiplexer=eventSource;
}"
84404,"private static MultipleEventSource createMultipleEventParser(Set<FileSystemClient> clients,Set<Machine> machines,File tracesDir,EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue){
  EventSource[] parsers=new EventSource[machines.size() + clients.size() + 1];
  try {
    int parserCount=0;
    InputStream traceStream;
    for (    Machine machine : machines) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + machine.getId()));
      parsers[parserCount++]=new MachineActivityEventParser(machine,traceStream);
    }
    for (    FileSystemClient client : clients) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + client.getMachine().getId()));
      parsers[parserCount++]=new FileSystemEventParser(client,traceStream);
    }
    parsers[parserCount]=eventsGeneratedBySimulationQueue;
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(e);
  }
  return new MultipleEventSource(parsers);
}","private static MultipleEventSource createMultipleEventParser(Set<FileSystemClient> clients,Set<Machine> machines,File tracesDir,PriorityQueue<Event> eventsGeneratedBySimulationQueue){
  EventSource[] parsers=new EventSource[machines.size() + clients.size()];
  try {
    int parserCount=0;
    InputStream traceStream;
    for (    Machine machine : machines) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + machine.getId()));
      parsers[parserCount++]=new MachineActivityEventParser(machine,traceStream);
    }
    for (    FileSystemClient client : clients) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + client.getMachine().getId()));
      parsers[parserCount++]=new FileSystemEventParser(client,traceStream);
    }
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(e);
  }
  return new MultipleEventSource(parsers,eventsGeneratedBySimulationQueue);
}"
84405,"/** 
 * @param args [0] (traces dir) - the traces in the directory must have the name &lt;trace type&gt;-&lt;machine name&gt;,  where &lt;trace type&gt; could be either fs or idleness. All traces must come in pairs of fs and idleness. Single traces will be ignored. Ex.: fs-cherne, idleness-cherne
 * @param args [1] (data placement police) - random, co-random or co-balance
 * @param args [2] time before sleep (secs)
 * @param args [3] replication level
 * @param args [4] time before update replicas' data (secs)
 * @param args [5] time before delete replicas' data (secs)
 */
public static void main(String[] args) throws IOException {
  if (args.length != 6) {
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    System.exit(1);
  }
  System.out.println(Arrays.toString(args));
  File tracesDir=new File(args[0]);
  if (!tracesDir.exists() || !tracesDir.isDirectory())   throw new IllegalArgumentException(args[0] + ""String_Node_Str"");
  String placementPoliceName=args[1];
  Long timeBeforeSleep=Long.valueOf(args[2]);
  Integer replicationLevel=Integer.valueOf(args[3]);
  Long timeBeforeUpdateData=Long.valueOf(args[4]);
  Long timeBeforeDeleteData=Long.valueOf(args[5]);
  EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue=new EventsGeneratedBySimulationQueue();
  Set<Machine> machines=createMachines(eventsGeneratedBySimulationQueue,tracesDir,timeBeforeSleep);
  Set<DataServer> dataServers=createDataServers(machines);
  DataPlacementAlgorithm placement=createPlacementPolice(placementPoliceName,dataServers);
  MetadataServer metadataServer=new MetadataServer(eventsGeneratedBySimulationQueue,placement,replicationLevel,timeBeforeDeleteData,timeBeforeUpdateData);
  Set<FileSystemClient> clients=createClients(eventsGeneratedBySimulationQueue,machines,metadataServer);
  MultipleEventSource multipleEventSource=createMultipleEventParser(clients,machines,tracesDir,eventsGeneratedBySimulationQueue);
  new EventScheduler(multipleEventSource).start();
  System.out.println(Aggregator.getInstance().summarize());
}","/** 
 * @param args [0] (traces dir) - the traces in the directory must have the name &lt;trace type&gt;-&lt;machine name&gt;,  where &lt;trace type&gt; could be either fs or idleness. All traces must come in pairs of fs and idleness. Single traces will be ignored. Ex.: fs-cherne, idleness-cherne
 * @param args [1] (data placement police) - random, co-random or co-balance
 * @param args [2] time before sleep (secs)
 * @param args [3] replication level
 * @param args [4] time before update replicas' data (secs)
 * @param args [5] time before delete replicas' data (secs)
 */
public static void main(String[] args) throws IOException {
  if (args.length != 6) {
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    System.exit(1);
  }
  System.out.println(Arrays.toString(args));
  File tracesDir=new File(args[0]);
  if (!tracesDir.exists() || !tracesDir.isDirectory())   throw new IllegalArgumentException(args[0] + ""String_Node_Str"");
  String placementPoliceName=args[1];
  Long timeBeforeSleep=Long.valueOf(args[2]);
  Integer replicationLevel=Integer.valueOf(args[3]);
  Long timeBeforeUpdateData=Long.valueOf(args[4]);
  Long timeBeforeDeleteData=Long.valueOf(args[5]);
  PriorityQueue<Event> eventsGeneratedBySimulationQueue=new PriorityQueue<Event>();
  Set<Machine> machines=createMachines(eventsGeneratedBySimulationQueue,tracesDir,timeBeforeSleep);
  Set<DataServer> dataServers=createDataServers(machines);
  DataPlacementAlgorithm placement=createPlacementPolice(placementPoliceName,dataServers);
  MetadataServer metadataServer=new MetadataServer(eventsGeneratedBySimulationQueue,placement,replicationLevel,timeBeforeDeleteData,timeBeforeUpdateData);
  Set<FileSystemClient> clients=createClients(eventsGeneratedBySimulationQueue,machines,metadataServer);
  MultipleEventSource multipleEventSource=createMultipleEventParser(clients,machines,tracesDir,eventsGeneratedBySimulationQueue);
  new EventScheduler(multipleEventSource).start();
  System.out.println(Aggregator.getInstance().summarize());
}"
84406,"private static Set<Machine> createMachines(EventsGeneratedBySimulationQueue aPlaceForEventsGeneratedBySimulation,File tracesDir,long timeBeforeSleep){
  Set<Machine> machines=new HashSet<Machine>();
  List<String> fsTracesFiles=Arrays.asList(tracesDir.list(fsTracesFilter));
  List<String> idlenessTracesFiles=Arrays.asList(tracesDir.list(idlenessTracesFilter));
  for (  String fsTraceFile : fsTracesFiles) {
    String machineName=fsTraceFile.split(""String_Node_Str"")[1];
    if (idlenessTracesFiles.contains(""String_Node_Str"" + machineName)) {
      machines.add(new Machine(aPlaceForEventsGeneratedBySimulation,machineName,timeBeforeSleep));
    }
  }
  return machines;
}","private static Set<Machine> createMachines(PriorityQueue<Event> aPlaceForEventsGeneratedBySimulation,File tracesDir,long timeBeforeSleep){
  Set<Machine> machines=new HashSet<Machine>();
  List<String> fsTracesFiles=Arrays.asList(tracesDir.list(fsTracesFilter));
  List<String> idlenessTracesFiles=Arrays.asList(tracesDir.list(idlenessTracesFilter));
  for (  String fsTraceFile : fsTracesFiles) {
    String machineName=fsTraceFile.split(""String_Node_Str"")[1];
    if (idlenessTracesFiles.contains(""String_Node_Str"" + machineName)) {
      machines.add(new Machine(aPlaceForEventsGeneratedBySimulation,machineName,timeBeforeSleep));
    }
  }
  return machines;
}"
84407,"/** 
 * It create all clients.
 * @param aPlaceForEventsGeneratedBySimulation
 * @param herald
 * @param aggregator
 * @param machines2
 * @return
 */
private static Set<FileSystemClient> createClients(EventsGeneratedBySimulationQueue aPlaceForEventsGeneratedBySimulation,Set<Machine> machines,MetadataServer herald){
  Set<FileSystemClient> newClients=new HashSet<FileSystemClient>();
  for (  Machine machine : machines) {
    newClients.add(new FileSystemClient(aPlaceForEventsGeneratedBySimulation,machine,herald));
  }
  return newClients;
}","/** 
 * It create all clients.
 * @param aPlaceForEventsGeneratedBySimulation
 * @param herald
 * @param aggregator
 * @param machines2
 * @return
 */
private static Set<FileSystemClient> createClients(PriorityQueue<Event> aPlaceForEventsGeneratedBySimulation,Set<Machine> machines,MetadataServer herald){
  Set<FileSystemClient> newClients=new HashSet<FileSystemClient>();
  for (  Machine machine : machines) {
    newClients.add(new FileSystemClient(aPlaceForEventsGeneratedBySimulation,machine,herald));
  }
  return newClients;
}"
84408,"public MultipleEventSource(EventSource[] parsers){
  this.parsers=new PushBackEventParser[parsers.length];
  for (int i=0; i < parsers.length; i++) {
    this.parsers[i]=new PushBackEventParser(parsers[i]);
  }
}","public MultipleEventSource(EventSource[] parsers,PriorityQueue<Event> simulationGeneratedEventsQueue){
  this.parsers=new PushBackEventParser[parsers.length];
  this.simulationGeneratedEventsQueue=simulationGeneratedEventsQueue;
  for (int i=0; i < parsers.length; i++) {
    this.parsers[i]=new PushBackEventParser(parsers[i]);
  }
}"
84409,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ filePath;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ filePath;
}"
84410,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ filePath;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ filePath;
}"
84411,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ filePath+ ""String_Node_Str""+ length;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ filePath+ ""String_Node_Str""+ length;
}"
84412,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ filePath;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ filePath;
}"
84413,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ filePath;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ filePath;
}"
84414,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ filePath+ ""String_Node_Str""+ length;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ filePath+ ""String_Node_Str""+ length;
}"
84415,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ getDuration()+ ""String_Node_Str""+ localFSClient;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ getDuration()+ ""String_Node_Str""+ localFSClient;
}"
84416,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime();
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime();
}"
84417,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime();
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime();
}"
84418,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ getDuration();
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ getDuration();
}"
84419,"/** 
 * @param scheduler
 */
public EventHandler(EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue){
  this.eventsGeneratedBySimulationQueue=eventsGeneratedBySimulationQueue;
}","/** 
 * @param scheduler
 */
public EventHandler(PriorityQueue<Event> eventsGeneratedBySimulationQueue){
  this.eventsGeneratedBySimulationQueue=eventsGeneratedBySimulationQueue;
}"
84420,"public void send(Event event){
  eventsGeneratedBySimulationQueue.addEvent(event);
}","public void send(Event event){
  eventsGeneratedBySimulationQueue.add(event);
}"
84421,"/** 
 * @param scheduler
 * @param machine
 * @param metadataServer
 */
public FileSystemClient(EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue,Machine machine,MetadataServer metadataServer){
  super(eventsGeneratedBySimulationQueue);
  this.metadataServer=metadataServer;
  this.machine=machine;
  this.id=""String_Node_Str"" + machine.bindClient(this) + machine;
}","/** 
 * @param scheduler
 * @param machine
 * @param metadataServer
 */
public FileSystemClient(PriorityQueue<Event> eventsGeneratedBySimulationQueue,Machine machine,MetadataServer metadataServer){
  super(eventsGeneratedBySimulationQueue);
  this.metadataServer=metadataServer;
  this.machine=machine;
  this.id=""String_Node_Str"" + machine.bindClient(this) + machine;
}"
84422,"/** 
 * @param eventsGeneratedBySimulationQueue
 * @param id
 * @param timeBeforeSleep
 */
public Machine(EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue,String id,long timeBeforeSleep){
  super(eventsGeneratedBySimulationQueue);
  this.id=id;
  this.deployedDataServers=new HashSet<DataServer>();
  this.clients=new HashSet<FileSystemClient>();
  this.timeBeforeSleep=new Time(timeBeforeSleep,Unit.SECONDS);
  currentStateName=ShutdownEvent.EVENT_NAME;
  currentStateStartTime=Time.GENESIS;
  supposedCurrentStateEndTime=Time.END_OF_THE_WORLD;
  pendingFSActivityEvents=new ArrayList<FileSystemActivityEvent>();
}","/** 
 * @param eventsGeneratedBySimulationQueue
 * @param id
 * @param timeBeforeSleep
 */
public Machine(PriorityQueue<Event> eventsGeneratedBySimulationQueue,String id,long timeBeforeSleep){
  super(eventsGeneratedBySimulationQueue);
  this.id=id;
  this.deployedDataServers=new HashSet<DataServer>();
  this.clients=new HashSet<FileSystemClient>();
  this.timeBeforeSleep=new Time(timeBeforeSleep,Unit.SECONDS);
  currentStateName=ShutdownEvent.EVENT_NAME;
  currentStateStartTime=Time.GENESIS;
  supposedCurrentStateEndTime=Time.END_OF_THE_WORLD;
  pendingFSActivityEvents=new ArrayList<FileSystemActivityEvent>();
}"
84423,"/** 
 * @param scheduler
 * @param dataPlacementAlgorithm
 * @param replicationLevel
 * @param timeBeforeDeleteData in seconds
 * @param timeBeforeUpdateReplicas in seconds
 */
public MetadataServer(EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue,DataPlacementAlgorithm dataPlacementAlgorithm,int replicationLevel,long timeBeforeDeleteData,long timeBeforeUpdateReplicas){
  super(eventsGeneratedBySimulationQueue);
  if (dataPlacementAlgorithm == null)   throw new IllegalArgumentException();
  if (replicationLevel < 1)   throw new IllegalArgumentException();
  if (timeBeforeDeleteData < 0)   throw new IllegalArgumentException();
  if (timeBeforeUpdateReplicas < 0)   throw new IllegalArgumentException();
  this.dataPlacement=dataPlacementAlgorithm;
  this.files=new HashMap<String,ReplicationGroup>();
  this.openFiles=new HashMap<String,ReplicationGroup>();
  this.toDelete=new HashMap<String,ReplicationGroup>();
  this.replicationLevel=replicationLevel;
  this.timeBeforeDeleteData=new Time(timeBeforeDeleteData,Unit.SECONDS);
  this.timeBeforeUpdateReplicas=new Time(timeBeforeUpdateReplicas,Unit.SECONDS);
}","/** 
 * @param scheduler
 * @param dataPlacementAlgorithm
 * @param replicationLevel
 * @param timeBeforeDeleteData in seconds
 * @param timeBeforeUpdateReplicas in seconds
 */
public MetadataServer(PriorityQueue<Event> eventsGeneratedBySimulationQueue,DataPlacementAlgorithm dataPlacementAlgorithm,int replicationLevel,long timeBeforeDeleteData,long timeBeforeUpdateReplicas){
  super(eventsGeneratedBySimulationQueue);
  if (dataPlacementAlgorithm == null)   throw new IllegalArgumentException();
  if (replicationLevel < 1)   throw new IllegalArgumentException();
  if (timeBeforeDeleteData < 0)   throw new IllegalArgumentException();
  if (timeBeforeUpdateReplicas < 0)   throw new IllegalArgumentException();
  this.dataPlacement=dataPlacementAlgorithm;
  this.files=new HashMap<String,ReplicationGroup>();
  this.openFiles=new HashMap<String,ReplicationGroup>();
  this.toDelete=new HashMap<String,ReplicationGroup>();
  this.replicationLevel=replicationLevel;
  this.timeBeforeDeleteData=new Time(timeBeforeDeleteData,Unit.SECONDS);
  this.timeBeforeUpdateReplicas=new Time(timeBeforeUpdateReplicas,Unit.SECONDS);
}"
84424,"private void handleSleep(SleepEvent event){
  Aggregator aggregator=Aggregator.getInstance();
  Time now=event.getScheduledTime();
  Time currentStateActualDuration=now.minus(currentStateStartTime);
  if (currentStateName.equals(ShutdownEvent.EVENT_NAME)) {
    aggregator.aggregateShutdownDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(SleepEvent.EVENT_NAME)) {
    throw new IllegalStateException(String.format(""String_Node_Str"",getId()));
  }
 else   if (currentStateName.equals(UserActivityEvent.EVENT_NAME)) {
    aggregator.aggregateActiveDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserIdlenessEvent.EVENT_NAME)) {
    aggregateIdlenessPeriod(currentStateActualDuration);
  }
  currentStateName=SleepEvent.EVENT_NAME;
  currentStateStartTime=now;
  supposedCurrentStateEndTime=currentStateStartTime.plus(event.getDuration());
}","private void handleSleep(SleepEvent event){
  Aggregator aggregator=Aggregator.getInstance();
  Time now=event.getScheduledTime();
  Time currentStateActualDuration=now.minus(currentStateStartTime);
  if (currentStateName.equals(ShutdownEvent.EVENT_NAME)) {
    aggregator.aggregateShutdownDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserActivityEvent.EVENT_NAME)) {
    aggregator.aggregateActiveDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserIdlenessEvent.EVENT_NAME)) {
    aggregateIdlenessPeriod(currentStateActualDuration);
  }
  currentStateName=SleepEvent.EVENT_NAME;
  currentStateStartTime=now;
  supposedCurrentStateEndTime=currentStateStartTime.plus(event.getDuration());
}"
84425,"private void handleUserIdleness(UserIdlenessEvent event){
  Aggregator aggregator=Aggregator.getInstance();
  Time idlenessDuration=event.getDuration();
  Time now=event.getScheduledTime();
  Time currentStateActualDuration=now.minus(currentStateStartTime);
  if (currentStateName.equals(ShutdownEvent.EVENT_NAME)) {
    aggregator.aggregateShutdownDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(SleepEvent.EVENT_NAME)) {
    aggregator.aggregateSleepingDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserActivityEvent.EVENT_NAME)) {
    aggregator.aggregateActiveDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserIdlenessEvent.EVENT_NAME)) {
    aggregateIdlenessPeriod(currentStateActualDuration);
  }
  currentStateName=UserIdlenessEvent.EVENT_NAME;
  currentStateStartTime=now;
  if (idlenessDuration.isEarlierThan(timeBeforeSleep)) {
    supposedCurrentStateEndTime=currentStateStartTime.plus(event.getDuration());
  }
 else {
    Time bedTime=now.plus(timeBeforeSleep);
    Time sleepDuration=now.plus(idlenessDuration).minus(bedTime);
    if (!sleepDuration.isEarlierThan(SLEEP_TRANSITION_DURATION.times(2))) {
      send(new SleepEvent(this,bedTime,sleepDuration));
      supposedCurrentStateEndTime=currentStateStartTime.plus(timeBeforeSleep);
    }
 else {
      supposedCurrentStateEndTime=currentStateStartTime.plus(event.getDuration());
    }
  }
  handlePendingFileSystemActivityEvents();
}","private void handleUserIdleness(UserIdlenessEvent event){
  Aggregator aggregator=Aggregator.getInstance();
  Time idlenessDuration=event.getDuration();
  Time now=event.getScheduledTime();
  Time currentStateActualDuration=now.minus(currentStateStartTime);
  if (currentStateName.equals(ShutdownEvent.EVENT_NAME)) {
    aggregator.aggregateShutdownDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(SleepEvent.EVENT_NAME)) {
    aggregator.aggregateSleepingDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserActivityEvent.EVENT_NAME)) {
    aggregator.aggregateActiveDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserIdlenessEvent.EVENT_NAME)) {
    aggregateIdlenessPeriod(currentStateActualDuration);
  }
  currentStateName=UserIdlenessEvent.EVENT_NAME;
  currentStateStartTime=now;
  if (idlenessDuration.isEarlierThan(timeBeforeSleep)) {
    supposedCurrentStateEndTime=currentStateStartTime.plus(event.getDuration());
  }
 else {
    Time bedTime=now.plus(timeBeforeSleep);
    Time sleepDuration=now.plus(idlenessDuration).minus(bedTime);
    if (!sleepDuration.isEarlierThan(SLEEP_TRANSITION_DURATION.times(2))) {
      System.out.println(""String_Node_Str"" + bedTime + ""String_Node_Str""+ getId());
      send(new SleepEvent(this,bedTime,sleepDuration));
      supposedCurrentStateEndTime=currentStateStartTime.plus(timeBeforeSleep);
    }
 else {
      supposedCurrentStateEndTime=currentStateStartTime.plus(event.getDuration());
    }
  }
  handlePendingFileSystemActivityEvents();
}"
84426,"/** 
 * @param o
 * @return
 */
@Override public int compareTo(Time o){
  double diff=timeMicroSeconds - o.timeMicroSeconds;
  if (diff < 0) {
    return -1;
  }
 else   if (diff > 0) {
    return 1;
  }
  return 0;
}","/** 
 * @param o
 * @return
 */
@Override public int compareTo(Time otherTime){
  long diff=timeMicroSeconds - otherTime.timeMicroSeconds;
  if (diff < 0) {
    return -1;
  }
 else   if (diff > 0) {
    return 1;
  }
  return 0;
}"
84427,"public void closePath(FileSystemClient client,String filePath,Time now){
  ReplicationGroup replicationGroup=openFiles.remove(filePath);
  Time noTime=new Time(0,Unit.SECONDS);
  boolean hasChanged=!noTime.equals(replicationGroup.getTotalChangesDuration());
  if (replicationGroup != null && hasChanged) {
    Time time=now.plus(timeBeforeUpdateReplicas);
    send(new UpdateReplicationGroup(this,time,replicationGroup.getTotalChangesDuration(),filePath));
  }
}","public void closePath(FileSystemClient client,String filePath,Time now){
  ReplicationGroup replicationGroup=openFiles.remove(filePath);
  if (replicationGroup != null) {
    Time noTime=new Time(0,Unit.SECONDS);
    if (!noTime.equals(replicationGroup.getTotalChangesDuration())) {
      Time time=now.plus(timeBeforeUpdateReplicas);
      send(new UpdateReplicationGroup(this,time,replicationGroup.getTotalChangesDuration(),filePath));
    }
  }
}"
84428,"/** 
 * Create Data Servers.
 * @param scheduler
 * @param machines
 * @return
 */
private static Set<DataServer> createDataServers(EventScheduler scheduler,Set<Machine> machines){
  Set<DataServer> dataServers=new HashSet<DataServer>();
  for (  Machine machine : machines) {
    dataServers.add(new DataServer(scheduler,machine));
  }
  return dataServers;
}","/** 
 * Create Data Servers.
 * @param aPlaceForEventsGeneratedBySimulation
 * @param machines
 * @return
 */
private static Set<DataServer> createDataServers(Set<Machine> machines){
  Set<DataServer> dataServers=new HashSet<DataServer>();
  for (  Machine machine : machines) {
    dataServers.add(new DataServer(machine));
  }
  return dataServers;
}"
84429,"private static MultipleEventSource createMultipleEventParser(Set<FileSystemClient> clients,Set<Machine> machines,File tracesDir){
  EventSource[] parsers=new EventSource[machines.size() + clients.size()];
  try {
    int parserCount=0;
    InputStream traceStream;
    for (    Machine machine : machines) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + machine.getId()));
      parsers[parserCount++]=new MachineActivityEventParser(machine,traceStream);
    }
    for (    FileSystemClient client : clients) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + client.getMachine().getId()));
      parsers[parserCount++]=new FileSystemEventParser(client,traceStream);
    }
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(e);
  }
  return new MultipleEventSource(parsers);
}","private static MultipleEventSource createMultipleEventParser(Set<FileSystemClient> clients,Set<Machine> machines,File tracesDir,EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue){
  EventSource[] parsers=new EventSource[machines.size() + clients.size() + 1];
  try {
    int parserCount=0;
    InputStream traceStream;
    for (    Machine machine : machines) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + machine.getId()));
      parsers[parserCount++]=new MachineActivityEventParser(machine,traceStream);
    }
    for (    FileSystemClient client : clients) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + client.getMachine().getId()));
      parsers[parserCount++]=new FileSystemEventParser(client,traceStream);
    }
    parsers[parserCount]=eventsGeneratedBySimulationQueue;
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(e);
  }
  return new MultipleEventSource(parsers);
}"
84430,"/** 
 * @param args [0] (traces dir) - the traces in the directory must have the name &lt;trace type&gt;-&lt;machine name&gt;,  where &lt;trace type&gt; could be either fs or idleness. All traces must come in pairs of fs and idleness. Single traces will be ignored. Ex.: fs-cherne, idleness-cherne
 * @param args [1] (data placement police) - random, co-random or co-balance
 * @param args [2] time before sleep (secs)
 * @param args [3] replication level
 * @param args [4] time before update replicas' data (secs)
 * @param args [5] time before delete replicas' data (secs)
 */
public static void main(String[] args) throws IOException {
  if (args.length != 6) {
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    System.exit(1);
  }
  System.out.println(Arrays.toString(args));
  final EventScheduler scheduler=new EventScheduler();
  File tracesDir=new File(args[0]);
  if (!tracesDir.exists() || !tracesDir.isDirectory())   throw new IllegalArgumentException(args[0] + ""String_Node_Str"");
  String placementPoliceName=args[1];
  Long timeBeforeSleep=Long.valueOf(args[2]);
  Integer replicationLevel=Integer.valueOf(args[3]);
  Long timeBeforeUpdateData=Long.valueOf(args[4]);
  Long timeBeforeDeleteData=Long.valueOf(args[5]);
  Set<Machine> machines=createMachines(scheduler,tracesDir,timeBeforeSleep);
  Set<DataServer> dataServers=createDataServers(scheduler,machines);
  DataPlacementAlgorithm placement=createPlacementPolice(placementPoliceName,dataServers);
  MetadataServer metadataServer=new MetadataServer(scheduler,placement,replicationLevel,timeBeforeDeleteData,timeBeforeUpdateData);
  Set<FileSystemClient> clients=createClients(scheduler,machines,metadataServer);
  MultipleEventSource multipleEventSource=createMultipleEventParser(clients,machines,tracesDir);
  EventInjector eventInjector=new EventInjector(scheduler,multipleEventSource);
  scheduler.registerObserver(eventInjector);
  eventInjector.injectNext();
  scheduler.start();
  System.out.println(Aggregator.getInstance().summarize());
}","/** 
 * @param args [0] (traces dir) - the traces in the directory must have the name &lt;trace type&gt;-&lt;machine name&gt;,  where &lt;trace type&gt; could be either fs or idleness. All traces must come in pairs of fs and idleness. Single traces will be ignored. Ex.: fs-cherne, idleness-cherne
 * @param args [1] (data placement police) - random, co-random or co-balance
 * @param args [2] time before sleep (secs)
 * @param args [3] replication level
 * @param args [4] time before update replicas' data (secs)
 * @param args [5] time before delete replicas' data (secs)
 */
public static void main(String[] args) throws IOException {
  if (args.length != 6) {
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    System.exit(1);
  }
  System.out.println(Arrays.toString(args));
  File tracesDir=new File(args[0]);
  if (!tracesDir.exists() || !tracesDir.isDirectory())   throw new IllegalArgumentException(args[0] + ""String_Node_Str"");
  String placementPoliceName=args[1];
  Long timeBeforeSleep=Long.valueOf(args[2]);
  Integer replicationLevel=Integer.valueOf(args[3]);
  Long timeBeforeUpdateData=Long.valueOf(args[4]);
  Long timeBeforeDeleteData=Long.valueOf(args[5]);
  EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue=new EventsGeneratedBySimulationQueue();
  Set<Machine> machines=createMachines(eventsGeneratedBySimulationQueue,tracesDir,timeBeforeSleep);
  Set<DataServer> dataServers=createDataServers(machines);
  DataPlacementAlgorithm placement=createPlacementPolice(placementPoliceName,dataServers);
  MetadataServer metadataServer=new MetadataServer(eventsGeneratedBySimulationQueue,placement,replicationLevel,timeBeforeDeleteData,timeBeforeUpdateData);
  Set<FileSystemClient> clients=createClients(eventsGeneratedBySimulationQueue,machines,metadataServer);
  MultipleEventSource multipleEventSource=createMultipleEventParser(clients,machines,tracesDir,eventsGeneratedBySimulationQueue);
  new EventScheduler(multipleEventSource).start();
  System.out.println(Aggregator.getInstance().summarize());
}"
84431,"private static Set<Machine> createMachines(EventScheduler scheduler,File tracesDir,long timeBeforeSleep){
  Set<Machine> machines=new HashSet<Machine>();
  List<String> fsTracesFiles=Arrays.asList(tracesDir.list(fsTracesFilter));
  List<String> idlenessTracesFiles=Arrays.asList(tracesDir.list(idlenessTracesFilter));
  for (  String fsTraceFile : fsTracesFiles) {
    String machineName=fsTraceFile.split(""String_Node_Str"")[1];
    if (idlenessTracesFiles.contains(""String_Node_Str"" + machineName)) {
      machines.add(new Machine(scheduler,machineName,timeBeforeSleep));
    }
  }
  return machines;
}","private static Set<Machine> createMachines(EventsGeneratedBySimulationQueue aPlaceForEventsGeneratedBySimulation,File tracesDir,long timeBeforeSleep){
  Set<Machine> machines=new HashSet<Machine>();
  List<String> fsTracesFiles=Arrays.asList(tracesDir.list(fsTracesFilter));
  List<String> idlenessTracesFiles=Arrays.asList(tracesDir.list(idlenessTracesFilter));
  for (  String fsTraceFile : fsTracesFiles) {
    String machineName=fsTraceFile.split(""String_Node_Str"")[1];
    if (idlenessTracesFiles.contains(""String_Node_Str"" + machineName)) {
      machines.add(new Machine(aPlaceForEventsGeneratedBySimulation,machineName,timeBeforeSleep));
    }
  }
  return machines;
}"
84432,"/** 
 * It create all clients.
 * @param scheduler
 * @param herald
 * @param aggregator
 * @param machines2
 * @return
 */
private static Set<FileSystemClient> createClients(EventScheduler scheduler,Set<Machine> machines,MetadataServer herald){
  Set<FileSystemClient> newClients=new HashSet<FileSystemClient>();
  for (  Machine machine : machines) {
    newClients.add(new FileSystemClient(scheduler,machine,herald));
  }
  return newClients;
}","/** 
 * It create all clients.
 * @param aPlaceForEventsGeneratedBySimulation
 * @param herald
 * @param aggregator
 * @param machines2
 * @return
 */
private static Set<FileSystemClient> createClients(EventsGeneratedBySimulationQueue aPlaceForEventsGeneratedBySimulation,Set<Machine> machines,MetadataServer herald){
  Set<FileSystemClient> newClients=new HashSet<FileSystemClient>();
  for (  Machine machine : machines) {
    newClients.add(new FileSystemClient(aPlaceForEventsGeneratedBySimulation,machine,herald));
  }
  return newClients;
}"
84433,"public SleepEvent(Machine aHandler,Time aScheduledTime){
  super(EVENT_NAME,aHandler,aScheduledTime,null);
}","public SleepEvent(Machine aHandler,Time aScheduledTime,Time duration){
  super(EVENT_NAME,aHandler,aScheduledTime,duration);
}"
84434,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime();
}","@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ getDuration();
}"
84435,"/** 
 * @param aName
 * @param aHandler
 * @param scheduledTime
 */
public Event(String aName,EventHandler aHandler,Time scheduledTime,Time duration){
  myEventId=eventId++;
  name=aName;
  theTargetHandlerId=aHandler.getHandlerId();
  this.scheduledTime=scheduledTime;
  this.duration=duration;
}","public Event(String name,EventHandler handler,Time scheduledTime,Time duration){
  this.name=name;
  this.handler=handler;
  this.scheduledTime=scheduledTime;
  this.duration=duration;
}"
84436,"private Event parseWriteEvent(StringTokenizer tokenizer){
  Time[] timestampAndDuration=parseTime(tokenizer.nextToken());
  String filePath=tokenizer.nextToken();
  long length=Long.parseLong(tokenizer.nextToken());
  return new WriteEvent(client,timestampAndDuration[0],length,timestampAndDuration[2],filePath);
}","private Event parseWriteEvent(StringTokenizer tokenizer){
  Time[] timestampAndDuration=parseTime(tokenizer.nextToken());
  String filePath=tokenizer.nextToken();
  long length=Long.parseLong(tokenizer.nextToken());
  return new WriteEvent(client,timestampAndDuration[0],length,timestampAndDuration[1],filePath);
}"
84437,"/** 
 */
private void schedule(){
  isActive=Boolean.valueOf(true);
  while (!eventsQueue.isEmpty() & isActive.booleanValue() & isEarlierThanEmulationEnd(now())) {
    Event aNextEvent=eventsQueue.peek();
    if (aNextEvent != null) {
      Time anEventTime=aNextEvent.getScheduledTime();
      if (anEventTime.isEarlierThan(now())) {
        throw new RuntimeException(""String_Node_Str"" + now() + ""String_Node_Str""+ ""String_Node_Str""+ anEventTime+ ""String_Node_Str"");
      }
      if (isEarlierThanEmulationEnd(anEventTime)) {
        now=anEventTime;
        processEvent(aNextEvent);
        notifyEventProcessed();
      }
 else {
        now=theEmulationEnd;
      }
    }
  }
  isActive=Boolean.valueOf(false);
}","/** 
 */
private void schedule(){
  isActive=Boolean.valueOf(true);
  while (!eventsQueue.isEmpty() & isActive.booleanValue() & isEarlierThanEmulationEnd(now())) {
    Event aNextEvent=eventsQueue.poll();
    if (aNextEvent != null) {
      Time anEventTime=aNextEvent.getScheduledTime();
      if (anEventTime.isEarlierThan(now())) {
        throw new RuntimeException(""String_Node_Str"" + now() + ""String_Node_Str""+ ""String_Node_Str""+ anEventTime+ ""String_Node_Str"");
      }
      if (isEarlierThanEmulationEnd(anEventTime)) {
        now=anEventTime;
        processEvent(aNextEvent);
        notifyEventProcessed();
      }
 else {
        now=theEmulationEnd;
      }
    }
  }
  isActive=Boolean.valueOf(false);
}"
84438,"public static void main(String[] args) throws IOException {
  System.out.println(Arrays.toString(args));
  final JEEventScheduler scheduler=new JEEventScheduler();
  String traceFile=args[0];
  String placement_police=args[1];
  String num_machines=args[2];
  String homeless=args[3];
  String migration_prob=args[4];
  String enableMigration=args[5];
  long replicationDelayMillis=Long.parseLong(args[6]) * 1000;
  DataPlacementAlgorithm placement=createPlacementPolice(placement_police);
  Integer numberOfMachines=new Integer(num_machines);
  long diskSize=1024 * 1024 * 1024* 1L;
  FileSizeDistribution fileSizeDistribution=new FileSizeDistribution(8.46,2.38,diskSize);
  List<Machine> machines=createMachines(scheduler,numberOfMachines);
  List<DataServer> dataServers=createDataServers(scheduler,numberOfMachines,diskSize,machines);
  MetadataServer metadataServer=new MetadataServer(scheduler,dataServers,placement,fileSizeDistribution,new NOPAlgorithm());
  List<DDGClient> clients=createClients(scheduler,numberOfMachines,machines,metadataServer);
  LoginAlgorithm loginAlgorithm=createLoginAlgorithm(new Boolean(homeless),new Double(migration_prob),MetadataServer.ONE_DAY,clients);
  SeerParserAndEventInjector injector=new SeerParserAndEventInjector(new File(traceFile),loginAlgorithm);
  EmulatorControl control=EmulatorControl.build(scheduler,injector,metadataServer,new Boolean(enableMigration),replicationDelayMillis);
  metadataServer.populateNamespace(0,2,dataServers);
  control.scheduleNext();
  scheduler.start();
  System.out.println(Aggregator.getInstance());
}","public static void main(String[] args) throws IOException {
  System.out.println(Arrays.toString(args));
  final JEEventScheduler scheduler=new JEEventScheduler();
  String traceFile=args[0];
  String placement_police=args[1];
  String num_machines=args[2];
  String homeless=args[3];
  String migration_prob=args[4];
  String enableMigration=args[5];
  long replicationDelayMillis=Long.parseLong(args[6]) * 1000;
  DataPlacementAlgorithm placement=createPlacementPolice(placement_police);
  Integer numberOfMachines=new Integer(num_machines);
  long diskSize=1024 * 1024 * 1024* 1L;
  FileSizeDistribution fileSizeDistribution=new FileSizeDistribution(8.46,2.38,diskSize);
  List<Machine> machines=createMachines(scheduler,numberOfMachines);
  List<DataServer> dataServers=createDataServers(scheduler,numberOfMachines,diskSize,machines);
  MetadataServer metadataServer=new MetadataServer(scheduler,dataServers,placement,fileSizeDistribution,new NOPAlgorithm());
  List<DDGClient> clients=createClients(scheduler,numberOfMachines,machines,metadataServer);
  LoginAlgorithm loginAlgorithm=createLoginAlgorithm(Boolean.valueOf(homeless),new Double(migration_prob),MetadataServer.ONE_DAY,clients);
  SeerParserAndEventInjector injector=new SeerParserAndEventInjector(new File(traceFile),loginAlgorithm);
  EmulatorControl control=EmulatorControl.build(scheduler,injector,metadataServer,Boolean.valueOf(enableMigration),replicationDelayMillis);
  metadataServer.populateNamespace(0,2,dataServers);
  control.scheduleNext();
  scheduler.start();
  System.out.println(Aggregator.getInstance());
}"
84439,"/** 
 * @param aName
 * @param aHandler
 * @param aScheduledTime
 */
public JEEvent(String aName,JEEventHandler aHandler,JETime aScheduledTime){
  myEventId=eventId++;
  name=new String(aName);
  theTargetHandlerId=aHandler.getHandlerId();
  theScheduledTime=aScheduledTime;
  theParameterList=new Vector();
}","/** 
 * @param aName
 * @param aHandler
 * @param aScheduledTime
 */
public JEEvent(String aName,JEEventHandler aHandler,JETime aScheduledTime){
  myEventId=eventId++;
  name=aName;
  theTargetHandlerId=aHandler.getHandlerId();
  theScheduledTime=aScheduledTime;
  theParameterList=new Vector();
}"
84440,"/** 
 * @param scheduler
 */
public JEEventHandler(JEEventScheduler scheduler){
  if (theUniqueHandlerId != null) {
    theUniqueHandlerId=new Integer(theUniqueHandlerId.intValue() + 1);
  }
 else {
    theUniqueHandlerId=new Integer(1);
  }
  HandlerId=theUniqueHandlerId;
  parameterlist=new LinkedList();
  theUniqueEventScheduler=scheduler;
  theUniqueEventScheduler.register_handler(this);
}","/** 
 * @param scheduler
 */
public JEEventHandler(JEEventScheduler scheduler){
  if (theUniqueHandlerId != null) {
    theUniqueHandlerId=Integer.valueOf(theUniqueHandlerId.intValue() + 1);
  }
 else {
    theUniqueHandlerId=Integer.valueOf(1);
  }
  HandlerId=theUniqueHandlerId;
  parameterlist=new LinkedList();
  theUniqueEventScheduler=scheduler;
  theUniqueEventScheduler.register_handler(this);
}"
84441,"/** 
 */
private void schedule(){
  isActive=new Boolean(true);
  while (!EventList.isEmpty() & isActive.booleanValue() & isEarlierThanEmulationEnd(now())) {
    JEEvent aNextEvent=peek();
    if (aNextEvent != null) {
      JETime anEventTime=aNextEvent.getTheScheduledTime();
      if (anEventTime.isEarlierThan(now())) {
        throw new RuntimeException(""String_Node_Str"" + now() + ""String_Node_Str""+ ""String_Node_Str""+ anEventTime+ ""String_Node_Str"");
      }
      if (isEarlierThanEmulationEnd(anEventTime)) {
        now=anEventTime;
        processEvent(aNextEvent);
      }
 else {
        now=theEmulationEnd;
      }
    }
  }
  isActive=Boolean.valueOf(false);
}","/** 
 */
private void schedule(){
  isActive=Boolean.valueOf(true);
  while (!EventList.isEmpty() & isActive.booleanValue() & isEarlierThanEmulationEnd(now())) {
    JEEvent aNextEvent=peek();
    if (aNextEvent != null) {
      JETime anEventTime=aNextEvent.getTheScheduledTime();
      if (anEventTime.isEarlierThan(now())) {
        throw new RuntimeException(""String_Node_Str"" + now() + ""String_Node_Str""+ ""String_Node_Str""+ anEventTime+ ""String_Node_Str"");
      }
      if (isEarlierThanEmulationEnd(anEventTime)) {
        now=anEventTime;
        processEvent(aNextEvent);
      }
 else {
        now=theEmulationEnd;
      }
    }
  }
  isActive=Boolean.valueOf(false);
}"
84442,"/** 
 * @param emulationEnd
 */
public JEEventScheduler(JETime emulationEnd){
  EventList.setSize(10000);
  EventList.clear();
  HandlerList=new Vector<JEEventHandler>();
  HandlerList.setSize(100);
  HandlerList.clear();
  isActive=new Boolean(false);
  theEmulationEnd=emulationEnd;
}","/** 
 * @param emulationEnd
 */
public JEEventScheduler(JETime emulationEnd){
  EventList.setSize(10000);
  EventList.clear();
  HandlerList=new Vector<JEEventHandler>();
  HandlerList.setSize(100);
  HandlerList.clear();
  isActive=Boolean.valueOf(false);
  theEmulationEnd=emulationEnd;
}"
84443,"@Test public void eventOrderingTest(){
  EventParser[] parsers=new EventParser[3];
  InputStream trace1=new FakeTraceStream(0);
  InputStream trace2=new FakeTraceStream(60);
  InputStream trace3=new FakeTraceStream(30);
  EventScheduler scheduler=new EventScheduler();
  Machine machine1=new Machine(scheduler,""String_Node_Str"");
  Machine machine2=new Machine(scheduler,""String_Node_Str"");
  Machine machine3=new Machine(scheduler,""String_Node_Str"");
  DDGClient client1=new DDGClient(scheduler,1,machine1,null);
  DDGClient client2=new DDGClient(scheduler,2,machine2,null);
  DDGClient client3=new DDGClient(scheduler,3,machine3,null);
  parsers[0]=new FileSystemEventParser(trace1,client1);
  parsers[1]=new FileSystemEventParser(trace2,client2);
  parsers[2]=new FileSystemEventParser(trace3,client3);
  EventParser multipleSourceParser=new MultipleEventParser(parsers);
  Event currentEvent=multipleSourceParser.getNextEvent();
  Event nextEvent=null;
  while ((nextEvent=multipleSourceParser.getNextEvent()) != null) {
    assertTrue(currentEvent.getTheScheduledTime().isEarlierThan(nextEvent.getTheScheduledTime()));
    currentEvent=nextEvent;
  }
}","@Test public void eventOrderingTest(){
  EventParser[] parsers=new EventParser[3];
  InputStream trace1=new FakeTraceStream(0);
  InputStream trace2=new FakeTraceStream(60);
  InputStream trace3=new FakeTraceStream(30);
  EventScheduler scheduler=new EventScheduler();
  Machine machine1=new Machine(scheduler,""String_Node_Str"");
  Machine machine2=new Machine(scheduler,""String_Node_Str"");
  Machine machine3=new Machine(scheduler,""String_Node_Str"");
  DDGClient client1=new DDGClient(scheduler,1,machine1,null);
  DDGClient client2=new DDGClient(scheduler,2,machine2,null);
  DDGClient client3=new DDGClient(scheduler,3,machine3,null);
  parsers[0]=new FileSystemEventParser(trace1,client1);
  parsers[1]=new FileSystemEventParser(trace2,client2);
  parsers[2]=new FileSystemEventParser(trace3,client3);
  EventParser multipleSourceParser=new MultipleEventParser(parsers);
  Event currentEvent=multipleSourceParser.getNextEvent();
  Event nextEvent=null;
  while ((nextEvent=multipleSourceParser.getNextEvent()) != null) {
    assertTrue(currentEvent.getTheScheduledTime().compareTo(nextEvent.getTheScheduledTime()) <= 0);
    currentEvent=nextEvent;
  }
}"
84444,"/** 
 * @param swapMachineProb
 * @param mSecondsBetweenLogins
 * @param firstClient
 * @param clients
 */
public HomeLessLoginAlgorithm(double swapMachineProb,long mSecondsBetweenLogins,DDGClient firstClient,List<DDGClient> clients){
  super(mSecondsBetweenLogins);
  if (swapMachineProb < 0 || swapMachineProb > 1) {
    throw new IllegalArgumentException();
  }
  this.clients=clients;
  this.swapMachineProb=swapMachineProb;
  this.random=new Random();
  this.lastSampledClient=firstClient;
}","/** 
 * @param swapMachineProb
 * @param mSecondsBetweenLogins
 * @param firstClient
 * @param clients
 */
public HomeLessLoginAlgorithm(double swapMachineProb,long mSecondsBetweenLogins,DDGClient firstClient,List<DDGClient> clients){
  super(mSecondsBetweenLogins,firstClient);
  if (swapMachineProb < 0 || swapMachineProb > 1) {
    throw new IllegalArgumentException();
  }
  this.clients=clients;
  this.swapMachineProb=swapMachineProb;
  this.random=new Random();
  this.lastSampledClient=firstClient;
}"
84445,"public LoginAlgorithm(long mSecondsBetweenLogins){
  this.mSecondsBetweenLogins=mSecondsBetweenLogins;
}","public LoginAlgorithm(long mSecondsBetweenLogins,DDGClient firstClient){
  this.mSecondsBetweenLogins=mSecondsBetweenLogins;
  this.lastSampledClient=firstClient;
}"
84446,"/** 
 * @param swapMachineProb
 * @param mSecondsBetweenLogins
 * @param sweetHomeClient
 * @param othersClients
 */
public SweetHomeLoginAlgorithm(double swapMachineProb,long mSecondsBetweenLogins,DDGClient sweetHomeClient,List<DDGClient> othersClients){
  super(mSecondsBetweenLogins);
  if (swapMachineProb < 0 || swapMachineProb >= 1) {
    throw new IllegalArgumentException();
  }
  if (othersClients.contains(sweetHomeClient)) {
    throw new IllegalArgumentException();
  }
  this.migrationProb=swapMachineProb;
  this.sweetHomeClient=sweetHomeClient;
  this.othersClients=othersClients;
  this.random=new Random();
}","/** 
 * @param swapMachineProb
 * @param mSecondsBetweenLogins
 * @param sweetHomeClient
 * @param othersClients
 */
public SweetHomeLoginAlgorithm(double swapMachineProb,long mSecondsBetweenLogins,DDGClient sweetHomeClient,List<DDGClient> othersClients){
  super(mSecondsBetweenLogins,sweetHomeClient);
  if (swapMachineProb < 0 || swapMachineProb >= 1) {
    throw new IllegalArgumentException();
  }
  if (othersClients.contains(sweetHomeClient)) {
    throw new IllegalArgumentException();
  }
  this.migrationProb=swapMachineProb;
  this.sweetHomeClient=sweetHomeClient;
  this.othersClients=othersClients;
  this.random=new Random();
}"
84447,"/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  board=new Board();
}","/** 
 * @throws Exception
 */
@Before public void setUp() throws Exception {
  board=new Board();
}"
84448,"/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  board=null;
}","/** 
 * @throws Exception
 */
@After public void tearDown() throws Exception {
  board=null;
}"
84449,"/** 
 * Test method for   {@link Board#isValidSlide(Team,int,int,int,int)}.
 */
@Test public void testIsValidSlide(){
  board.clear();
  board.insert(SCConst.TEAM1,2,2);
  int row=2;
  int col=2;
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col - 1));
  assertEquals(true,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col - 2));
  assertEquals(true,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col - 0));
  assertEquals(true,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col - 1));
  assertEquals(true,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col + 2));
  row=5;
  col=5;
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col + 2));
  row=2;
  col=2;
  board.insert(SCConst.TEAM1,row - 1,col);
  board.insert(SCConst.TEAM1,row,col - 1);
  board.insert(SCConst.TEAM1,row,col + 1);
  board.insert(SCConst.TEAM1,row + 1,col);
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col));
  assertEquals(false,board.isValidSlide(null,row,col,row,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col));
  board.insert(SCConst.TEAM2,row - 1,col);
  board.insert(SCConst.TEAM2,row,col - 1);
  board.insert(SCConst.TEAM2,row,col + 1);
  board.insert(SCConst.TEAM2,row + 1,col);
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col));
  assertEquals(false,board.isValidSlide(null,row,col,row,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col));
}","/** 
 * Test method for   {@link Board#isValidSlide(Team,int,int,int,int)}.
 */
@Test public void testIsValidSlide(){
  board.clear();
  board.insert(SCConst.TEAM1,2,2);
  int row=2;
  int col=2;
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col - 1));
  assertEquals(true,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col - 2));
  assertEquals(true,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col - 0));
  assertEquals(true,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col - 1));
  assertEquals(true,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col + 2));
  row=5;
  col=5;
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 2,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row - 0,col + 2));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col - 2));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col - 0));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col + 2));
  row=2;
  col=2;
  board.insert(SCConst.TEAM1,row - 1,col);
  board.insert(SCConst.TEAM1,row,col - 1);
  board.insert(SCConst.TEAM1,row,col + 1);
  board.insert(SCConst.TEAM1,row + 1,col);
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col));
  assertEquals(false,board.isValidSlide(null,row,col,row,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col));
  board.insert(SCConst.TEAM2,row - 1,col);
  board.insert(SCConst.TEAM2,row,col - 1);
  board.insert(SCConst.TEAM2,row,col + 1);
  board.insert(SCConst.TEAM2,row + 1,col);
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row - 1,col));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM1,row,col,row + 1,col));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row - 1,col));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.TEAM2,row,col,row + 1,col));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row - 1,col));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row,col - 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row,col + 1));
  assertEquals(false,board.isValidSlide(SCConst.EMPTY,row,col,row + 1,col));
  assertEquals(false,board.isValidSlide(null,row,col,row - 1,col));
  assertEquals(false,board.isValidSlide(null,row,col,row,col - 1));
  assertEquals(false,board.isValidSlide(null,row,col,row,col + 1));
  assertEquals(false,board.isValidSlide(null,row,col,row + 1,col));
}"
84450,"/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  move=new Move();
}","/** 
 * @throws Exception
 */
@Before public void setUp() throws Exception {
  move=new Move();
}"
84451,"/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  move=null;
}","/** 
 * @throws Exception
 */
@After public void tearDown() throws Exception {
  move=null;
}"
84452,"public void reset_border(EPlayer player){
  for (int i=0; i < this.field.length; i++) {
    for (int j=0; j < this.field[i].length; j++) {
      if (this.field[i][j].get_owner() == player) {
        this.field[i][j].border=false;
      }
    }
  }
}","/** 
 * Resets 'border' flags on squares bordering the given player's territory. 
 */
public void reset_border(EPlayer player){
  for (int i=0; i < this.field.length; i++) {
    for (int j=0; j < this.field[i].length; j++) {
      if (this.field[i][j].get_owner() == player) {
        this.field[i][j].border=false;
      }
    }
  }
}"
84453,"public void conquer(ESquare square,EPlayer conqueror){
  square.get_owner().decrement_score();
  square.set_owner(conqueror);
  square.get_owner().increment_score();
  square.set_color(conqueror.get_color());
  return;
}","/** 
 * Adjusts ownership of the given square to the given player and adjusts scores. 
 */
public void conquer(ESquare square,EPlayer conqueror){
  square.get_owner().decrement_score();
  square.set_owner(conqueror);
  square.get_owner().increment_score();
  square.set_color(conqueror.get_color());
  return;
}"
84454,"private void traverse_owned(EPlayer player,int next_color,int x,int y){
  this.field[x][y].visited=true;
  if (x != 0) {
    ESquare top_square=this.field[x - 1][y];
    if (!top_square.visited) {
      if (top_square.conquered_by_move(next_color,player)) {
        traverse_owned(player,next_color,(x - 1),y);
      }
    }
  }
  if (y != 0) {
    ESquare left_square=this.field[x][y - 1];
    if (!left_square.visited) {
      if (left_square.conquered_by_move(next_color,player)) {
        traverse_owned(player,next_color,x,(y - 1));
      }
    }
  }
  if (x != (x_size - 1)) {
    ESquare bottom_square=this.field[x + 1][y];
    if (!bottom_square.visited) {
      if (bottom_square.conquered_by_move(next_color,player)) {
        traverse_owned(player,next_color,(x + 1),y);
      }
    }
  }
  if (y != (y_size - 1)) {
    ESquare right_square=this.field[x][y + 1];
    if (!right_square.visited) {
      if (right_square.conquered_by_move(next_color,player)) {
        traverse_owned(player,next_color,x,(y + 1));
      }
    }
  }
  conquer(this.field[x][y],player);
  return;
}","/** 
 * Performs a recursive depth-first search on the board, conquering squares for the player. 
 */
private void traverse_owned(EPlayer player,int next_color,int x,int y){
  this.field[x][y].visited=true;
  if (x != 0) {
    ESquare top_square=this.field[x - 1][y];
    if (!top_square.visited) {
      if (top_square.conquered_by_move(next_color,player)) {
        traverse_owned(player,next_color,(x - 1),y);
      }
    }
  }
  if (y != 0) {
    ESquare left_square=this.field[x][y - 1];
    if (!left_square.visited) {
      if (left_square.conquered_by_move(next_color,player)) {
        traverse_owned(player,next_color,x,(y - 1));
      }
    }
  }
  if (x != (x_size - 1)) {
    ESquare bottom_square=this.field[x + 1][y];
    if (!bottom_square.visited) {
      if (bottom_square.conquered_by_move(next_color,player)) {
        traverse_owned(player,next_color,(x + 1),y);
      }
    }
  }
  if (y != (y_size - 1)) {
    ESquare right_square=this.field[x][y + 1];
    if (!right_square.visited) {
      if (right_square.conquered_by_move(next_color,player)) {
        traverse_owned(player,next_color,x,(y + 1));
      }
    }
  }
  conquer(this.field[x][y],player);
  return;
}"
84455,"public ESquare[][] get_field(){
  return this.field;
}","/** 
 * Returns the game field. 
 */
public ESquare[][] get_field(){
  return this.field;
}"
84456,"private void traverse_reachable(EPlayer player,int x,int y){
  this.field[x][y].visited=true;
  if (x != 0) {
    ESquare top_square=this.field[x - 1][y];
    if (!top_square.visited) {
      if (top_square.conquerable_by_player(player)) {
        traverse_reachable(player,(x - 1),y);
      }
 else {
        top_square.border=true;
      }
    }
  }
  if (y != 0) {
    ESquare left_square=this.field[x][y - 1];
    if (!left_square.visited) {
      if (left_square.conquerable_by_player(player)) {
        traverse_reachable(player,x,(y - 1));
      }
 else {
        left_square.border=true;
      }
    }
  }
  if (x != (x_size - 1)) {
    ESquare bottom_square=this.field[x + 1][y];
    if (!bottom_square.visited) {
      if (bottom_square.conquerable_by_player(player)) {
        traverse_reachable(player,(x + 1),y);
      }
 else {
        bottom_square.border=true;
      }
    }
  }
  if (y != (y_size - 1)) {
    ESquare right_square=this.field[x][y + 1];
    if (!right_square.visited) {
      if (right_square.conquerable_by_player(player)) {
        traverse_reachable(player,x,(y + 1));
      }
 else {
        right_square.border=true;
      }
    }
  }
}","/** 
 * Performs a recursive depth-first search on the board, marking all squares that the player can reach. 
 */
private void traverse_reachable(EPlayer player,int x,int y){
  this.field[x][y].visited=true;
  if (x != 0) {
    ESquare top_square=this.field[x - 1][y];
    if (!top_square.visited) {
      if (top_square.conquerable_by_player(player)) {
        traverse_reachable(player,(x - 1),y);
      }
 else {
        top_square.border=true;
      }
    }
  }
  if (y != 0) {
    ESquare left_square=this.field[x][y - 1];
    if (!left_square.visited) {
      if (left_square.conquerable_by_player(player)) {
        traverse_reachable(player,x,(y - 1));
      }
 else {
        left_square.border=true;
      }
    }
  }
  if (x != (x_size - 1)) {
    ESquare bottom_square=this.field[x + 1][y];
    if (!bottom_square.visited) {
      if (bottom_square.conquerable_by_player(player)) {
        traverse_reachable(player,(x + 1),y);
      }
 else {
        bottom_square.border=true;
      }
    }
  }
  if (y != (y_size - 1)) {
    ESquare right_square=this.field[x][y + 1];
    if (!right_square.visited) {
      if (right_square.conquerable_by_player(player)) {
        traverse_reachable(player,x,(y + 1));
      }
 else {
        right_square.border=true;
      }
    }
  }
}"
84457,"public Boolean winner_exists(){
  return this.neutral_owner.score == 0;
}","/** 
 * Returns true if either player's score is equal to or greater than the winning score. 
 */
public Boolean winner_exists(){
  return this.neutral_owner.score == 0;
}"
84458,"public void reset_visited(){
  for (int i=0; i < this.field.length; i++) {
    for (int j=0; j < this.field[i].length; j++) {
      this.field[i][j].visited=false;
    }
  }
}","/** 
 * Resets 'visited' flags on all squares. 
 */
public void reset_visited(){
  for (int i=0; i < this.field.length; i++) {
    for (int j=0; j < this.field[i].length; j++) {
      this.field[i][j].visited=false;
    }
  }
}"
84459,"public EPlayer winner(){
  if (!winner_exists()) {
    System.err.println(""String_Node_Str"");
    return null;
  }
  if (this.player_1.score >= this.player_2.score) {
    return this.player_1;
  }
  return this.player_2;
}","/** 
 * Returns the winner of the game. 
 */
public EPlayer winner(){
  if (!winner_exists()) {
    System.err.println(""String_Node_Str"");
    return null;
  }
  if (this.player_1.score >= this.player_2.score) {
    return this.player_1;
  }
  return this.player_2;
}"
84460,"public EBoard(int num_colors,int x_size,int y_size){
  this.x_size=x_size;
  this.y_size=y_size;
  this.num_colors=num_colors;
  this.player_1=null;
  this.player_2=null;
  this.neutral_owner=new ENeutral(""String_Node_Str"",this.x_size * this.y_size);
  this.field=new ESquare[this.x_size][this.y_size];
  for (int i=0; i < this.field.length; i++) {
    for (int j=0; j < this.field[i].length; j++) {
      this.field[i][j]=new ESquare(i,j);
    }
  }
  this.top_left=this.field[0][0];
  this.bottom_right=this.field[this.x_size - 1][this.y_size - 1];
  this.winning_score=(int)Math.ceil((x_size * y_size) / 2);
}","/** 
 * Constructs the board with given colors and dimensions. 
 */
public EBoard(int num_colors,int x_size,int y_size){
  this.x_size=x_size;
  this.y_size=y_size;
  this.num_colors=num_colors;
  this.player_1=null;
  this.player_2=null;
  this.neutral_owner=new ENeutral(""String_Node_Str"",this.x_size * this.y_size);
  this.field=new ESquare[this.x_size][this.y_size];
  for (int i=0; i < this.field.length; i++) {
    for (int j=0; j < this.field[i].length; j++) {
      this.field[i][j]=new ESquare(i,j);
    }
  }
  this.top_left=this.field[0][0];
  this.bottom_right=this.field[this.x_size - 1][this.y_size - 1];
  this.winning_score=(int)Math.ceil((x_size * y_size) / 2);
}"
84461,"public Boolean can_play(EPlayer player,int color){
  if (color == player.get_opponent().get_color() || (color < 0 || color >= this.num_colors) || color == player.get_color()) {
    return false;
  }
  return true;
}","/** 
 * Returns false if the player cannot play the color - if it's the same color, the opponent's color, or out of bounds. 
 */
public Boolean can_play(EPlayer player,int color){
  if (color == player.get_opponent().get_color() || (color < 0 || color >= this.num_colors) || color == player.get_color()) {
    return false;
  }
  return true;
}"
84462,"public void reset(){
  for (int i=0; i < field.length; i++) {
    for (int j=0; j < field[i].length; j++) {
      field[i][j].set_owner(neutral_owner);
      field[i][j].randomize_color(num_colors);
    }
  }
  while (top_left.get_color() == bottom_right.get_color()) {
    bottom_right.randomize_color(num_colors);
  }
  player_1.reset_score();
  player_2.reset_score();
  neutral_owner.reset_score();
  player_1.set_color(player_1.starting_square.get_color());
  player_2.set_color(player_2.starting_square.get_color());
  conquer(player_1.starting_square,player_1);
  conquer(player_2.starting_square,player_2);
  balance_start();
  return;
}","/** 
 * Brings the field to a state of randomness and resets player ownership to starting squares. 
 */
public void reset(){
  for (int i=0; i < field.length; i++) {
    for (int j=0; j < field[i].length; j++) {
      field[i][j].set_owner(neutral_owner);
      field[i][j].randomize_color(num_colors);
    }
  }
  while (top_left.get_color() == bottom_right.get_color()) {
    bottom_right.randomize_color(num_colors);
  }
  player_1.reset_score();
  player_2.reset_score();
  neutral_owner.reset_score();
  player_1.set_color(player_1.starting_square.get_color());
  player_2.set_color(player_2.starting_square.get_color());
  conquer(player_1.starting_square,player_1);
  conquer(player_2.starting_square,player_2);
  player_1.starting_square.border=true;
  player_2.starting_square.border=true;
  balance_start();
  return;
}"
84463,"public void initialize(EPlayer player_1,EPlayer player_2){
  this.player_1=player_1;
  this.player_2=player_2;
  this.player_1.set_opponent(this.player_2);
  this.player_2.set_opponent(this.player_1);
  this.player_1.starting_square=this.top_left;
  this.player_2.starting_square=this.bottom_right;
  reset();
  return;
}","/** 
 * Initializes the board with the given players. 
 */
public void initialize(EPlayer player_1,EPlayer player_2){
  this.player_1=player_1;
  this.player_2=player_2;
  this.player_1.set_opponent(this.player_2);
  this.player_2.set_opponent(this.player_1);
  this.player_1.starting_square=this.top_left;
  this.player_2.starting_square=this.bottom_right;
  reset();
  return;
}"
84464,"public void play_color(EPlayer player,int next_color){
  if (!can_play(player,next_color)) {
    System.err.println(""String_Node_Str"" + player.name + ""String_Node_Str"");
    return;
  }
  player.set_color(next_color);
  EPlayer opponent=player.get_opponent();
  reset_border(player);
  traverse_owned(player,next_color,player.starting_square.x_coord,player.starting_square.y_coord);
  reset_visited();
  traverse_reachable(opponent,opponent.starting_square.x_coord,opponent.starting_square.y_coord);
  for (int i=0; i < this.field.length; i++) {
    for (int j=0; j < this.field[i].length; j++) {
      if (!this.field[i][j].visited) {
        conquer(this.field[i][j],player);
      }
    }
  }
  reset_visited();
  return;
}","/** 
 * Makes a move to the next color for the player. 
 */
public void play_color(EPlayer player,int next_color){
  if (!can_play(player,next_color)) {
    System.err.println(""String_Node_Str"" + player.name + ""String_Node_Str"");
    return;
  }
  player.set_color(next_color);
  EPlayer opponent=player.get_opponent();
  reset_border(player);
  traverse_owned(player,next_color,player.starting_square.x_coord,player.starting_square.y_coord);
  reset_visited();
  traverse_reachable(opponent,opponent.starting_square.x_coord,opponent.starting_square.y_coord);
  for (int i=0; i < this.field.length; i++) {
    for (int j=0; j < this.field[i].length; j++) {
      if (!this.field[i][j].visited) {
        conquer(this.field[i][j],player);
      }
    }
  }
  reset_visited();
  return;
}"
84465,"public int ai_next_color_choice(EBoard board){
  int color_choice=0;
  if (this.ai_difficulty == 0) {
    color_choice=(int)Math.floor(Math.random() * board.num_colors);
    while (!board.can_play(this,color_choice)) {
      color_choice=(int)Math.floor(Math.random() * board.num_colors);
    }
  }
  return color_choice;
}","/** 
 * Returns the AI's next choice of color, based on the difficulty setting. 
 */
public int ai_next_color_choice(EBoard board){
  int color_choice=0;
  if (this.ai_difficulty == 0) {
    color_choice=(int)Math.floor(Math.random() * board.num_colors);
    while (!board.can_play(this,color_choice)) {
      color_choice=(int)Math.floor(Math.random() * board.num_colors);
    }
  }
  return color_choice;
}"
84466,"public void set_opponent(EPlayer new_opponent){
  this.opponent=new_opponent;
  return;
}","/** 
 * Switches the player's opponent to the given opponent. 
 */
public void set_opponent(EPlayer new_opponent){
  this.opponent=new_opponent;
  return;
}"
84467,"public void set_color(int new_color){
  this.color=new_color;
  return;
}","/** 
 * Switches the player's color to the given color. 
 */
public void set_color(int new_color){
  this.color=new_color;
  return;
}"
84468,"public EPlayer get_opponent(){
  return this.opponent;
}","/** 
 * Returns the player's opponent. 
 */
public EPlayer get_opponent(){
  return this.opponent;
}"
84469,"public int get_color(){
  return this.color;
}","/** 
 * Returns the player's color. 
 */
public int get_color(){
  return this.color;
}"
84470,"public void set_owner(EOwner new_owner){
  this.owner=new_owner;
  return;
}","/** 
 * Switches the square's owner to the given owner. 
 */
public void set_owner(EOwner new_owner){
  this.owner=new_owner;
  return;
}"
84471,"public Boolean conquered_by_move(int next_color,EPlayer conqueror){
  if (this.color == next_color || this.owner == conqueror) {
    return true;
  }
  return false;
}","/** 
 * Returns true if this square will be conquered by playing the color. 
 */
public Boolean conquered_by_move(int next_color,EPlayer conqueror){
  if (this.color == next_color || this.owner == conqueror) {
    return true;
  }
  return false;
}"
84472,"public Boolean conquerable_by_player(EPlayer player){
  if (this.get_owner() == player.get_opponent()) {
    return false;
  }
  return true;
}","/** 
 * Returns false if this square is owned by the opponent. 
 */
public Boolean conquerable_by_player(EPlayer player){
  if (this.get_owner() == player.get_opponent()) {
    return false;
  }
  return true;
}"
84473,"public EOwner get_owner(){
  return this.owner;
}","/** 
 * Returns the square's owner. 
 */
public EOwner get_owner(){
  return this.owner;
}"
84474,"public void set_color(int new_color){
  this.color=new_color;
  return;
}","/** 
 * Switches the square's color to the given color. 
 */
public void set_color(int new_color){
  this.color=new_color;
  return;
}"
84475,"public ESquare(int x_coord,int y_coord){
  this.owner=null;
  this.color=0;
  this.visited=false;
  this.border=false;
  this.x_coord=x_coord;
  this.y_coord=y_coord;
}","/** 
 * Creates a new unowned square with color 0. 
 */
public ESquare(int x_coord,int y_coord){
  this.owner=null;
  this.color=0;
  this.visited=false;
  this.border=false;
  this.x_coord=x_coord;
  this.y_coord=y_coord;
}"
84476,"public void randomize_color(int num_colors){
  this.color=(int)Math.floor(Math.random() * num_colors);
  return;
}","/** 
 * Randomizes the square's color. 
 */
public void randomize_color(int num_colors){
  this.color=(int)Math.floor(Math.random() * num_colors);
  return;
}"
84477,"public int get_color(){
  return this.color;
}","/** 
 * Returns the square's color. 
 */
public int get_color(){
  return this.color;
}"
84478,"@Override public void onModuleLoad(){
  Controller controller=Controller.INSTANCE;
  RootLayoutPanel.get().add(uiBinder.createAndBindUi(this));
  RootLayoutPanel.get().addStyleName(resources.style().rootPanel());
  resources.style().ensureInjected();
  Window.setMargin(""String_Node_Str"");
  IFrame.setStylePrimaryName(resources.style().iframe());
  header.getElement().getStyle().setBackgroundImage(""String_Node_Str"" + resources.logo().getURL() + ""String_Node_Str"");
  controller.setTargetPanel(contentPanel);
  History.addValueChangeHandler(controller);
  controller.addCommandMapItem(""String_Node_Str"",new WidgetCommand(new Home(),""String_Node_Str""));
  menuBar.addItem(""String_Node_Str"",new HistoryCommand(""String_Node_Str""));
  MenuBar aboutMenu=new MenuBar(true);
  menuBar.addItem(""String_Node_Str"",aboutMenu);
  controller.addCommandMapItem(Token.iskcon,new WidgetCommand(new StaticView(resources.iskcon()),Token.iskcon));
  aboutMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.iskcon));
  controller.addCommandMapItem(Token.founder,new WidgetCommand(new StaticView(resources.founder()),Token.founder));
  aboutMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.founder));
  controller.addCommandMapItem(Token.motelSankirtan,new WidgetCommand(new StaticView(resources.motelSankirtan()),Token.motelSankirtan));
  aboutMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.motelSankirtan));
  MenuBar experienceMenu=new MenuBar(true);
  menuBar.addItem(""String_Node_Str"",experienceMenu);
  controller.addCommandMapItem(Token.calendar,new FrameCommand(calendarURL));
  experienceMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.calendar));
  controller.addCommandMapItem(Token.video,new FrameCommand(videoURL));
  experienceMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.video));
  controller.addCommandMapItem(Token.audioLectures,new FrameCommand(audioLecturesURL));
  experienceMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.audioLectures));
  controller.addCommandMapItem(Token.spy,new FrameCommand(spyURL));
  experienceMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.spy));
  controller.addCommandMapItem(Token.donorList,new FrameCommand(donorListURL));
  controller.addCommandMapItem(Token.fy09AnnualStatement,new FrameCommand(fy09AnnualStatementURL));
  controller.addCommandMapItem(Token.donate,new WidgetCommand(new Donate(resources),Token.donate));
  menuBar.addItem(""String_Node_Str"",new HistoryCommand(Token.donate));
  menuBar.addItem(""String_Node_Str"",new PopupCommand(new SubscribePopup()));
  controller.addCommandMapItem(Token.contact,new WidgetCommand(new StaticView(resources.contact()),Token.contact));
  menuBar.addItem(""String_Node_Str"",new HistoryCommand(Token.contact));
  controller.addCommandMapItem(Token.location,new WidgetCommand(new LocationView(),Token.location));
  menuBar.addItem(""String_Node_Str"",new HistoryCommand(Token.location));
  History.fireCurrentHistoryState();
}","@Override public void onModuleLoad(){
  Controller controller=Controller.INSTANCE;
  RootLayoutPanel.get().add(uiBinder.createAndBindUi(this));
  RootLayoutPanel.get().addStyleName(resources.style().rootPanel());
  resources.style().ensureInjected();
  Window.setMargin(""String_Node_Str"");
  IFrame.setStylePrimaryName(resources.style().iframe());
  header.getElement().getStyle().setBackgroundImage(""String_Node_Str"" + resources.logo().getURL() + ""String_Node_Str"");
  controller.setTargetPanel(contentPanel);
  History.addValueChangeHandler(controller);
  controller.addCommandMapItem(""String_Node_Str"",new WidgetCommand(new Home(),""String_Node_Str""));
  menuBar.addItem(""String_Node_Str"",new HistoryCommand(""String_Node_Str""));
  MenuBar aboutMenu=new MenuBar(true);
  menuBar.addItem(""String_Node_Str"",aboutMenu);
  controller.addCommandMapItem(Token.iskcon,new WidgetCommand(new StaticView(resources.iskcon()),Token.iskcon));
  aboutMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.iskcon));
  controller.addCommandMapItem(Token.founder,new WidgetCommand(new StaticView(resources.founder()),Token.founder));
  aboutMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.founder));
  controller.addCommandMapItem(Token.motelSankirtan,new WidgetCommand(new StaticView(resources.motelSankirtan()),Token.motelSankirtan));
  aboutMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.motelSankirtan));
  MenuBar experienceMenu=new MenuBar(true);
  menuBar.addItem(""String_Node_Str"",experienceMenu);
  controller.addCommandMapItem(Token.calendar,new FrameCommand(calendarURL));
  experienceMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.calendar));
  controller.addCommandMapItem(Token.video,new WidgetCommand(new StaticView(resources.liveVideo()),Token.video));
  experienceMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.video));
  controller.addCommandMapItem(Token.audioLectures,new FrameCommand(audioLecturesURL));
  experienceMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.audioLectures));
  controller.addCommandMapItem(Token.spy,new FrameCommand(spyURL));
  experienceMenu.addItem(""String_Node_Str"",new HistoryCommand(Token.spy));
  controller.addCommandMapItem(Token.donorList,new FrameCommand(donorListURL));
  controller.addCommandMapItem(Token.fy09AnnualStatement,new FrameCommand(fy09AnnualStatementURL));
  controller.addCommandMapItem(Token.donate,new WidgetCommand(new Donate(resources),Token.donate));
  menuBar.addItem(""String_Node_Str"",new HistoryCommand(Token.donate));
  menuBar.addItem(""String_Node_Str"",new PopupCommand(new SubscribePopup()));
  controller.addCommandMapItem(Token.contact,new WidgetCommand(new StaticView(resources.contact()),Token.contact));
  menuBar.addItem(""String_Node_Str"",new HistoryCommand(Token.contact));
  controller.addCommandMapItem(Token.location,new WidgetCommand(new LocationView(),Token.location));
  menuBar.addItem(""String_Node_Str"",new HistoryCommand(Token.location));
  History.fireCurrentHistoryState();
}"
84479,"@Override protected Map<String,Object> referenceData(HttpServletRequest request) throws Exception {
  Map<String,Object> map=new HashMap<String,Object>();
  MessageSourceAccessor msa=getMessageSourceAccessor();
  map.put(""String_Node_Str"",ModuleUtil.allowAdmin().toString());
  map.put(""String_Node_Str"",msa.getMessage(""String_Node_Str"",new String[]{ModuleConstants.RUNTIMEPROPERTY_ALLOW_ADMIN}));
  map.put(""String_Node_Str"",OpenmrsConstants.OPENMRS_VERSION_SHORT);
  map.put(""String_Node_Str"",WebConstants.MODULE_REPOSITORY_URL);
  map.put(""String_Node_Str"",ModuleFactory.getLoadedModules());
  return map;
}","@Override protected Map<String,Object> referenceData(HttpServletRequest request) throws Exception {
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  Map<String,Object> map=new HashMap<String,Object>();
  MessageSourceAccessor msa=getMessageSourceAccessor();
  map.put(""String_Node_Str"",ModuleUtil.allowAdmin().toString());
  map.put(""String_Node_Str"",msa.getMessage(""String_Node_Str"",new String[]{ModuleConstants.RUNTIMEPROPERTY_ALLOW_ADMIN}));
  map.put(""String_Node_Str"",OpenmrsConstants.OPENMRS_VERSION_SHORT);
  map.put(""String_Node_Str"",WebConstants.MODULE_REPOSITORY_URL);
  map.put(""String_Node_Str"",ModuleFactory.getLoadedModules());
  return map;
}"
84480,"/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
@Override protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  if (!Context.hasPrivilege(PrivilegeConstants.MANAGE_MODULES))   throw new APIAuthenticationException(""String_Node_Str"" + PrivilegeConstants.MANAGE_MODULES);
  HttpSession httpSession=request.getSession();
  String moduleId=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
  String view=getFormView();
  String success=""String_Node_Str"";
  String error=""String_Node_Str"";
  MessageSourceAccessor msa=getMessageSourceAccessor();
  String action=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
  if (ServletRequestUtils.getStringParameter(request,""String_Node_Str"",null) != null)   action=""String_Node_Str"";
 else   if (ServletRequestUtils.getStringParameter(request,""String_Node_Str"",null) != null)   action=""String_Node_Str"";
 else   if (ServletRequestUtils.getStringParameter(request,""String_Node_Str"",null) != null)   action=""String_Node_Str"";
  if (""String_Node_Str"".equals(action)) {
    if (!ModuleUtil.allowAdmin()) {
      error=msa.getMessage(""String_Node_Str"",new String[]{ModuleConstants.RUNTIMEPROPERTY_ALLOW_ADMIN});
    }
 else {
      InputStream inputStream=null;
      File moduleFile=null;
      Module module=null;
      Boolean updateModule=ServletRequestUtils.getBooleanParameter(request,""String_Node_Str"",false);
      Boolean downloadModule=ServletRequestUtils.getBooleanParameter(request,""String_Node_Str"",false);
      List<Module> dependentModulesStopped=null;
      try {
        if (downloadModule) {
          String downloadURL=request.getParameter(""String_Node_Str"");
          if (downloadURL == null) {
            throw new MalformedURLException(""String_Node_Str"");
          }
          String fileName=downloadURL.substring(downloadURL.lastIndexOf(""String_Node_Str"") + 1);
          final URL url=new URL(downloadURL);
          inputStream=ModuleUtil.getURLStream(url);
          moduleFile=ModuleUtil.insertModuleFile(inputStream,fileName);
        }
 else         if (request instanceof MultipartHttpServletRequest) {
          MultipartHttpServletRequest multipartRequest=(MultipartHttpServletRequest)request;
          MultipartFile multipartModuleFile=multipartRequest.getFile(""String_Node_Str"");
          if (multipartModuleFile != null && !multipartModuleFile.isEmpty()) {
            String filename=WebUtil.stripFilename(multipartModuleFile.getOriginalFilename());
            if (updateModule) {
              Module tmpModule=new ModuleFileParser(multipartModuleFile.getInputStream()).parse();
              Module existingModule=ModuleFactory.getModuleById(tmpModule.getModuleId());
              if (existingModule != null) {
                dependentModulesStopped=ModuleFactory.stopModule(existingModule,false,true);
                WebModuleUtil.stopModule(existingModule,getServletContext());
                ModuleFactory.unloadModule(existingModule);
              }
              inputStream=new FileInputStream(tmpModule.getFile());
              moduleFile=ModuleUtil.insertModuleFile(inputStream,filename);
            }
 else {
              inputStream=multipartModuleFile.getInputStream();
              moduleFile=ModuleUtil.insertModuleFile(inputStream,filename);
            }
          }
        }
        module=ModuleFactory.loadModule(moduleFile);
      }
 catch (      ModuleException me) {
        log.warn(""String_Node_Str"",me);
        error=me.getMessage();
      }
 finally {
        try {
          if (inputStream != null)           inputStream.close();
        }
 catch (        IOException io) {
          log.warn(""String_Node_Str"",io);
        }
        if (module == null && moduleFile != null)         moduleFile.delete();
      }
      if (module != null) {
        ModuleFactory.startModule(module);
        WebModuleUtil.startModule(module,getServletContext(),false);
        if (module.isStarted()) {
          success=msa.getMessage(""String_Node_Str"",new String[]{module.getName()});
          if (updateModule && dependentModulesStopped != null) {
            for (            Module depMod : dependentModulesStopped) {
              ModuleFactory.startModule(depMod);
              WebModuleUtil.startModule(depMod,getServletContext(),false);
            }
          }
        }
 else         success=msa.getMessage(""String_Node_Str"",new String[]{module.getName()});
      }
    }
  }
 else   if (moduleId.equals(""String_Node_Str"")) {
    ModuleUtil.checkForModuleUpdates();
  }
 else   if (action.equals(msa.getMessage(""String_Node_Str""))) {
    if (!ModuleUtil.allowAdmin()) {
      error=msa.getMessage(""String_Node_Str"",new String[]{ModuleConstants.RUNTIMEPROPERTY_ALLOW_ADMIN});
    }
    Module mod=ModuleFactory.getModuleById(moduleId);
    if (mod.getDownloadURL() != null) {
      ModuleFactory.stopModule(mod);
      WebModuleUtil.stopModule(mod,getServletContext());
      Module newModule=ModuleFactory.updateModule(mod);
      WebModuleUtil.startModule(newModule,getServletContext(),false);
    }
  }
 else {
    if (!ModuleUtil.allowAdmin()) {
      error=msa.getMessage(""String_Node_Str"",new String[]{ModuleConstants.RUNTIMEPROPERTY_ALLOW_ADMIN});
    }
 else {
      log.debug(""String_Node_Str"" + moduleId);
      Module mod=ModuleFactory.getModuleById(moduleId);
      Object[] args=new Object[]{moduleId};
      if (mod == null)       error=msa.getMessage(""String_Node_Str"",args);
 else {
        if (""String_Node_Str"".equals(action)) {
          mod.clearStartupError();
          ModuleFactory.stopModule(mod);
          WebModuleUtil.stopModule(mod,getServletContext());
          success=msa.getMessage(""String_Node_Str"",args);
        }
 else         if (""String_Node_Str"".equals(action)) {
          ModuleFactory.startModule(mod);
          WebModuleUtil.startModule(mod,getServletContext(),false);
          if (mod.isStarted())           success=msa.getMessage(""String_Node_Str"",args);
 else           error=msa.getMessage(""String_Node_Str"",args);
        }
 else         if (""String_Node_Str"".equals(action)) {
          if (ModuleFactory.isModuleStarted(mod)) {
            ModuleFactory.stopModule(mod);
            WebModuleUtil.stopModule(mod,getServletContext());
          }
          ModuleFactory.unloadModule(mod);
          success=msa.getMessage(""String_Node_Str"",args);
        }
      }
    }
  }
  view=getSuccessView();
  if (!success.equals(""String_Node_Str""))   httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,success);
  if (!error.equals(""String_Node_Str""))   httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,error);
  return new ModelAndView(new RedirectView(view));
}","/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
@Override protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  if (!Context.hasPrivilege(PrivilegeConstants.MANAGE_MODULES))   throw new APIAuthenticationException(""String_Node_Str"" + PrivilegeConstants.MANAGE_MODULES);
  HttpSession httpSession=request.getSession();
  String moduleId=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
  String view=getFormView();
  String success=""String_Node_Str"";
  String error=""String_Node_Str"";
  MessageSourceAccessor msa=getMessageSourceAccessor();
  String action=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
  if (ServletRequestUtils.getStringParameter(request,""String_Node_Str"",null) != null)   action=""String_Node_Str"";
 else   if (ServletRequestUtils.getStringParameter(request,""String_Node_Str"",null) != null)   action=""String_Node_Str"";
 else   if (ServletRequestUtils.getStringParameter(request,""String_Node_Str"",null) != null)   action=""String_Node_Str"";
  if (""String_Node_Str"".equals(action)) {
    if (!ModuleUtil.allowAdmin()) {
      error=msa.getMessage(""String_Node_Str"",new String[]{ModuleConstants.RUNTIMEPROPERTY_ALLOW_ADMIN});
    }
 else {
      InputStream inputStream=null;
      File moduleFile=null;
      Module module=null;
      Boolean updateModule=ServletRequestUtils.getBooleanParameter(request,""String_Node_Str"",false);
      Boolean downloadModule=ServletRequestUtils.getBooleanParameter(request,""String_Node_Str"",false);
      List<Module> dependentModulesStopped=null;
      try {
        if (downloadModule) {
          String downloadURL=request.getParameter(""String_Node_Str"");
          if (downloadURL == null) {
            throw new MalformedURLException(""String_Node_Str"");
          }
          String fileName=downloadURL.substring(downloadURL.lastIndexOf(""String_Node_Str"") + 1);
          final URL url=new URL(downloadURL);
          inputStream=ModuleUtil.getURLStream(url);
          moduleFile=ModuleUtil.insertModuleFile(inputStream,fileName);
        }
 else         if (request instanceof MultipartHttpServletRequest) {
          MultipartHttpServletRequest multipartRequest=(MultipartHttpServletRequest)request;
          MultipartFile multipartModuleFile=multipartRequest.getFile(""String_Node_Str"");
          if (multipartModuleFile != null && !multipartModuleFile.isEmpty()) {
            String filename=WebUtil.stripFilename(multipartModuleFile.getOriginalFilename());
            if (updateModule) {
              Module tmpModule=new ModuleFileParser(multipartModuleFile.getInputStream()).parse();
              Module existingModule=ModuleFactory.getModuleById(tmpModule.getModuleId());
              if (existingModule != null) {
                dependentModulesStopped=ModuleFactory.stopModule(existingModule,false,true);
                for (                Module depMod : dependentModulesStopped) {
                  WebModuleUtil.stopModule(depMod,getServletContext());
                }
                WebModuleUtil.stopModule(existingModule,getServletContext());
                ModuleFactory.unloadModule(existingModule);
              }
              inputStream=new FileInputStream(tmpModule.getFile());
              moduleFile=ModuleUtil.insertModuleFile(inputStream,filename);
            }
 else {
              inputStream=multipartModuleFile.getInputStream();
              moduleFile=ModuleUtil.insertModuleFile(inputStream,filename);
            }
          }
        }
        module=ModuleFactory.loadModule(moduleFile);
      }
 catch (      ModuleException me) {
        log.warn(""String_Node_Str"",me);
        error=me.getMessage();
      }
 finally {
        try {
          if (inputStream != null)           inputStream.close();
        }
 catch (        IOException io) {
          log.warn(""String_Node_Str"",io);
        }
        if (module == null && moduleFile != null)         moduleFile.delete();
      }
      if (module != null) {
        ModuleFactory.startModule(module);
        WebModuleUtil.startModule(module,getServletContext(),false);
        if (module.isStarted()) {
          success=msa.getMessage(""String_Node_Str"",new String[]{module.getName()});
          if (updateModule && dependentModulesStopped != null) {
            for (            Module depMod : dependentModulesStopped) {
              ModuleFactory.startModule(depMod);
              WebModuleUtil.startModule(depMod,getServletContext(),false);
            }
          }
        }
 else         success=msa.getMessage(""String_Node_Str"",new String[]{module.getName()});
      }
    }
  }
 else   if (moduleId.equals(""String_Node_Str"")) {
    ModuleUtil.checkForModuleUpdates();
  }
 else   if (action.equals(msa.getMessage(""String_Node_Str""))) {
    if (!ModuleUtil.allowAdmin()) {
      error=msa.getMessage(""String_Node_Str"",new String[]{ModuleConstants.RUNTIMEPROPERTY_ALLOW_ADMIN});
    }
    Module mod=ModuleFactory.getModuleById(moduleId);
    if (mod.getDownloadURL() != null) {
      ModuleFactory.stopModule(mod);
      WebModuleUtil.stopModule(mod,getServletContext());
      Module newModule=ModuleFactory.updateModule(mod);
      WebModuleUtil.startModule(newModule,getServletContext(),false);
    }
  }
 else {
    if (!ModuleUtil.allowAdmin()) {
      error=msa.getMessage(""String_Node_Str"",new String[]{ModuleConstants.RUNTIMEPROPERTY_ALLOW_ADMIN});
    }
 else {
      log.debug(""String_Node_Str"" + moduleId);
      Module mod=ModuleFactory.getModuleById(moduleId);
      Object[] args=new Object[]{moduleId};
      if (mod == null)       error=msa.getMessage(""String_Node_Str"",args);
 else {
        if (""String_Node_Str"".equals(action)) {
          mod.clearStartupError();
          ModuleFactory.stopModule(mod);
          WebModuleUtil.stopModule(mod,getServletContext());
          success=msa.getMessage(""String_Node_Str"",args);
        }
 else         if (""String_Node_Str"".equals(action)) {
          ModuleFactory.startModule(mod);
          WebModuleUtil.startModule(mod,getServletContext(),false);
          if (mod.isStarted())           success=msa.getMessage(""String_Node_Str"",args);
 else           error=msa.getMessage(""String_Node_Str"",args);
        }
 else         if (""String_Node_Str"".equals(action)) {
          if (ModuleFactory.isModuleStarted(mod)) {
            ModuleFactory.stopModule(mod);
            WebModuleUtil.stopModule(mod,getServletContext());
          }
          ModuleFactory.unloadModule(mod);
          success=msa.getMessage(""String_Node_Str"",args);
        }
      }
    }
  }
  view=getSuccessView();
  if (!success.equals(""String_Node_Str""))   httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,success);
  if (!error.equals(""String_Node_Str""))   httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,error);
  return new ModelAndView(new RedirectView(view));
}"
84481,"@Override public void run(){
  isDaemonThread.set(true);
  try {
    Context.openSession();
    runnable.run();
  }
  finally {
    Context.closeSession();
  }
}","@Override public void run(){
  isDaemonThread.set(true);
  try {
    Context.openSession();
    service.onStartup();
  }
 catch (  Throwable t) {
    exceptionThrown=t;
  }
 finally {
    Context.closeSession();
  }
}"
84482,"/** 
 * Allow other services to be added to our service layer <br/> <br/> Classes will be found/loaded with the ModuleClassLoader <br/> <br/> <code>params</code>[0] = string representing the service interface<br/> <code>params</code>[1] = service instance
 * @param params list of parameters
 */
@SuppressWarnings(""String_Node_Str"") public void setModuleService(List<Object> params){
  String classString=(String)params.get(0);
  Object classInstance=params.get(1);
  if (classString == null || classInstance == null) {
    throw new APIException(""String_Node_Str"");
  }
  Class cls=null;
  try {
    if (useSystemClassLoader == false) {
      cls=OpenmrsClassLoader.getInstance().loadClass(classString);
      if (cls != null && log.isDebugEnabled()) {
        try {
          log.debug(""String_Node_Str"" + cls.getClass().getClassLoader() + ""String_Node_Str""+ cls.getClass().getClassLoader().hashCode());
        }
 catch (        Exception e) {
        }
      }
    }
 else     if (useSystemClassLoader == true) {
      try {
        cls=Class.forName(classString);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + cls.getClass().getClassLoader() + ""String_Node_Str""+ cls.getClass().getClassLoader().hashCode());
          log.debug(""String_Node_Str"" + String.valueOf(cls == cls));
        }
      }
 catch (      Exception e) {
      }
    }
  }
 catch (  ClassNotFoundException e) {
    throw new APIException(""String_Node_Str"" + classString,e);
  }
  setService(cls,classInstance);
}","/** 
 * Allow other services to be added to our service layer <br/> <br/> Classes will be found/loaded with the ModuleClassLoader <br/> <br/> <code>params</code>[0] = string representing the service interface<br/> <code>params</code>[1] = service instance
 * @param params list of parameters
 */
@SuppressWarnings(""String_Node_Str"") public void setModuleService(List<Object> params){
  String classString=(String)params.get(0);
  Object classInstance=params.get(1);
  if (classString == null || classInstance == null) {
    throw new APIException(""String_Node_Str"");
  }
  Class cls=null;
  try {
    if (useSystemClassLoader == false) {
      cls=OpenmrsClassLoader.getInstance().loadClass(classString);
      if (cls != null && log.isDebugEnabled()) {
        try {
          log.debug(""String_Node_Str"" + cls.getClass().getClassLoader() + ""String_Node_Str""+ cls.getClass().getClassLoader().hashCode());
        }
 catch (        Exception e) {
        }
      }
    }
 else     if (useSystemClassLoader == true) {
      try {
        cls=Class.forName(classString);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + cls.getClass().getClassLoader() + ""String_Node_Str""+ cls.getClass().getClassLoader().hashCode());
          log.debug(""String_Node_Str"" + String.valueOf(cls == cls));
        }
      }
 catch (      Exception e) {
      }
    }
  }
 catch (  ClassNotFoundException e) {
    throw new APIException(""String_Node_Str"" + classString,e);
  }
  setService(cls,classInstance);
  if (OpenmrsService.class.isAssignableFrom(classInstance.getClass())) {
    addModuleOpenmrsService(classString,(OpenmrsService)classInstance);
    runOpenmrsServiceOnStartup((OpenmrsService)classInstance,classString);
  }
}"
84483,"/** 
 * Runs through the advice and extension points and removes from api.<br/> <code>skipOverStartedProperty</code> should only be true when openmrs is stopping modules because it is shutting down. When normally stopping a module, use   {@link #stopModule(Module)}(or leave value as false). This property controls whether the globalproperty is set for startup/shutdown. <br/> Also calls module's   {@link Activator#shutdown()}
 * @param mod module to stop
 * @param skipOverStartedProperty true if we don't want to set &lt;moduleid&gt;.started to false
 * @param isFailedStartup true if this is being called as a cleanup because of a failed modulestartup
 * @return list of dependent modules that were stopped because this module was stopped. Thiswill never be null.
 */
@SuppressWarnings(""String_Node_Str"") public static List<Module> stopModule(Module mod,boolean skipOverStartedProperty,boolean isFailedStartup) throws ModuleMustStartException {
  List<Module> dependentModulesStopped=new Vector<Module>();
  if (mod != null) {
    try {
      if (mod.getModuleActivator() != null)       mod.getModuleActivator().willStop();
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t);
    }
    String moduleId=mod.getModuleId();
    if (!isFailedStartup && mod.isMandatory()) {
      throw new MandatoryModuleException(moduleId);
    }
    if (!isFailedStartup && ModuleConstants.CORE_MODULES.containsKey(moduleId)) {
      throw new OpenmrsCoreModuleException(moduleId);
    }
    String modulePackage=mod.getPackageName();
    List<Module> startedModulesCopy=new ArrayList<Module>();
    startedModulesCopy.addAll(getStartedModules());
    for (    Module dependentModule : startedModulesCopy) {
      if (!dependentModule.equals(mod) && dependentModule.getRequiredModules().contains(modulePackage)) {
        dependentModulesStopped.add(dependentModule);
        dependentModulesStopped.addAll(stopModule(dependentModule,skipOverStartedProperty,isFailedStartup));
      }
    }
    getStartedModulesMap().remove(moduleId);
    if (skipOverStartedProperty == false && !Context.isRefreshingContext()) {
      saveGlobalProperty(moduleId + ""String_Node_Str"",""String_Node_Str"",getGlobalPropertyStartedDescription(moduleId));
    }
    if (getModuleClassLoaderMap().containsKey(mod)) {
      log.debug(""String_Node_Str"");
      try {
        for (        AdvicePoint advice : mod.getAdvicePoints()) {
          Class cls=null;
          try {
            cls=Context.loadClass(advice.getPoint());
            Object aopObject=advice.getClassInstance();
            if (Advisor.class.isInstance(aopObject)) {
              log.debug(""String_Node_Str"" + aopObject.getClass());
              Context.removeAdvisor(cls,(Advisor)aopObject);
            }
 else {
              log.debug(""String_Node_Str"" + aopObject.getClass());
              Context.removeAdvice(cls,(Advice)aopObject);
            }
          }
 catch (          Throwable t) {
            log.warn(""String_Node_Str"" + advice.getPoint(),t);
          }
        }
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + moduleId,t);
      }
      try {
        for (        Extension ext : mod.getExtensions()) {
          String extId=ext.getExtensionId();
          try {
            List<Extension> tmpExtensions=getExtensions(extId);
            if (tmpExtensions == null)             tmpExtensions=new Vector<Extension>();
            tmpExtensions.remove(ext);
            getExtensionMap().put(extId,tmpExtensions);
          }
 catch (          Exception exterror) {
            log.warn(""String_Node_Str"" + ext,exterror);
          }
        }
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + moduleId,t);
      }
    }
    try {
      if (mod.getModuleActivator() != null)       mod.getModuleActivator().stopped();
 else       mod.getActivator().shutdown();
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t);
    }
    mod.getExtensions().clear();
    mod.setActivator(null);
    mod.setModuleActivator(null);
    mod.disposeAdvicePointsClassInstance();
    ModuleClassLoader cl=removeClassLoader(mod);
    if (cl != null) {
      cl.dispose();
      cl=null;
      File folder=OpenmrsClassLoader.getLibCacheFolder();
      File tmpModuleDir=new File(folder,moduleId);
      try {
        OpenmrsUtil.deleteDirectory(tmpModuleDir);
      }
 catch (      IOException e) {
        log.warn(""String_Node_Str"" + moduleId);
      }
    }
  }
  return dependentModulesStopped;
}","/** 
 * Runs through the advice and extension points and removes from api.<br/> <code>skipOverStartedProperty</code> should only be true when openmrs is stopping modules because it is shutting down. When normally stopping a module, use   {@link #stopModule(Module)}(or leave value as false). This property controls whether the globalproperty is set for startup/shutdown. <br/> Also calls module's   {@link Activator#shutdown()}
 * @param mod module to stop
 * @param skipOverStartedProperty true if we don't want to set &lt;moduleid&gt;.started to false
 * @param isFailedStartup true if this is being called as a cleanup because of a failed modulestartup
 * @return list of dependent modules that were stopped because this module was stopped. Thiswill never be null.
 */
@SuppressWarnings(""String_Node_Str"") public static List<Module> stopModule(Module mod,boolean skipOverStartedProperty,boolean isFailedStartup) throws ModuleMustStartException {
  List<Module> dependentModulesStopped=new Vector<Module>();
  if (mod != null) {
    try {
      if (mod.getModuleActivator() != null)       mod.getModuleActivator().willStop();
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t);
    }
    String moduleId=mod.getModuleId();
    if (!isFailedStartup && mod.isMandatory()) {
      throw new MandatoryModuleException(moduleId);
    }
    if (!isFailedStartup && ModuleConstants.CORE_MODULES.containsKey(moduleId)) {
      throw new OpenmrsCoreModuleException(moduleId);
    }
    String modulePackage=mod.getPackageName();
    List<Module> startedModulesCopy=new ArrayList<Module>();
    startedModulesCopy.addAll(getStartedModules());
    for (    Module dependentModule : startedModulesCopy) {
      if (!dependentModule.equals(mod) && dependentModule.getRequiredModules().contains(modulePackage)) {
        dependentModulesStopped.add(dependentModule);
        dependentModulesStopped.addAll(stopModule(dependentModule,skipOverStartedProperty,isFailedStartup));
      }
    }
    getStartedModulesMap().remove(moduleId);
    if (skipOverStartedProperty == false && !Context.isRefreshingContext()) {
      saveGlobalProperty(moduleId + ""String_Node_Str"",""String_Node_Str"",getGlobalPropertyStartedDescription(moduleId));
    }
    if (getModuleClassLoaderMap().containsKey(mod)) {
      log.debug(""String_Node_Str"");
      try {
        for (        AdvicePoint advice : mod.getAdvicePoints()) {
          Class cls=null;
          try {
            cls=Context.loadClass(advice.getPoint());
            Object aopObject=advice.getClassInstance();
            if (Advisor.class.isInstance(aopObject)) {
              log.debug(""String_Node_Str"" + aopObject.getClass());
              Context.removeAdvisor(cls,(Advisor)aopObject);
            }
 else {
              log.debug(""String_Node_Str"" + aopObject.getClass());
              Context.removeAdvice(cls,(Advice)aopObject);
            }
          }
 catch (          Throwable t) {
            log.warn(""String_Node_Str"" + advice.getPoint(),t);
          }
        }
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + moduleId,t);
      }
      try {
        for (        Extension ext : mod.getExtensions()) {
          String extId=ext.getExtensionId();
          try {
            List<Extension> tmpExtensions=getExtensions(extId);
            if (tmpExtensions == null)             tmpExtensions=new Vector<Extension>();
            tmpExtensions.remove(ext);
            getExtensionMap().put(extId,tmpExtensions);
          }
 catch (          Exception exterror) {
            log.warn(""String_Node_Str"" + ext,exterror);
          }
        }
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + moduleId,t);
      }
    }
    List<OpenmrsService> services=Context.getModuleOpenmrsServices(modulePackage);
    if (services != null) {
      for (      OpenmrsService service : services) {
        service.onShutdown();
      }
    }
    try {
      if (mod.getModuleActivator() != null)       mod.getModuleActivator().stopped();
 else       mod.getActivator().shutdown();
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t);
    }
    mod.getExtensions().clear();
    mod.setActivator(null);
    mod.setModuleActivator(null);
    mod.disposeAdvicePointsClassInstance();
    ModuleClassLoader cl=removeClassLoader(mod);
    if (cl != null) {
      cl.dispose();
      cl=null;
      File folder=OpenmrsClassLoader.getLibCacheFolder();
      File tmpModuleDir=new File(folder,moduleId);
      try {
        OpenmrsUtil.deleteDirectory(tmpModuleDir);
      }
 catch (      IOException e) {
        log.warn(""String_Node_Str"" + moduleId);
      }
    }
  }
  return dependentModulesStopped;
}"
84484,"/** 
 * @return the moduleActivator
 */
public ModuleActivator getModuleActivator(){
  try {
    ModuleClassLoader classLoader=ModuleFactory.getModuleClassLoader(this);
    if (classLoader == null)     throw new ModuleException(""String_Node_Str"",getModuleId());
    Class<?> c=classLoader.loadClass(getActivatorName());
    Object o=c.newInstance();
    if (ModuleActivator.class.isAssignableFrom(o.getClass()))     setModuleActivator((ModuleActivator)o);
  }
 catch (  ClassNotFoundException e) {
    throw new ModuleException(""String_Node_Str"" + getActivatorName() + ""String_Node_Str"",name,e);
  }
catch (  IllegalAccessException e) {
    throw new ModuleException(""String_Node_Str"" + getActivatorName() + ""String_Node_Str"",name,e);
  }
catch (  InstantiationException e) {
    throw new ModuleException(""String_Node_Str"" + getActivatorName() + ""String_Node_Str"",name,e);
  }
  return moduleActivator;
}","/** 
 * @return the moduleActivator
 */
public ModuleActivator getModuleActivator(){
  try {
    if (moduleActivator == null) {
      ModuleClassLoader classLoader=ModuleFactory.getModuleClassLoader(this);
      if (classLoader == null)       throw new ModuleException(""String_Node_Str"",getModuleId());
      Class<?> c=classLoader.loadClass(getActivatorName());
      Object o=c.newInstance();
      if (ModuleActivator.class.isAssignableFrom(o.getClass()))       setModuleActivator((ModuleActivator)o);
    }
  }
 catch (  ClassNotFoundException e) {
    throw new ModuleException(""String_Node_Str"" + getActivatorName() + ""String_Node_Str"",name,e);
  }
catch (  IllegalAccessException e) {
    throw new ModuleException(""String_Node_Str"" + getActivatorName() + ""String_Node_Str"",name,e);
  }
catch (  InstantiationException e) {
    throw new ModuleException(""String_Node_Str"" + getActivatorName() + ""String_Node_Str"",name,e);
  }
  return moduleActivator;
}"
84485,"/** 
 * @return the activator
 * @deprecated replaced by {@link Module#getModuleActivator()}
 */
@Deprecated public Activator getActivator(){
  try {
    ModuleClassLoader classLoader=ModuleFactory.getModuleClassLoader(this);
    if (classLoader == null)     throw new ModuleException(""String_Node_Str"",getModuleId());
    Class<?> c=classLoader.loadClass(getActivatorName());
    setActivator((Activator)c.newInstance());
  }
 catch (  ClassNotFoundException e) {
    throw new ModuleException(""String_Node_Str"" + getActivatorName() + ""String_Node_Str"",name,e);
  }
catch (  IllegalAccessException e) {
    throw new ModuleException(""String_Node_Str"" + getActivatorName() + ""String_Node_Str"",name,e);
  }
catch (  InstantiationException e) {
    throw new ModuleException(""String_Node_Str"" + getActivatorName() + ""String_Node_Str"",name,e);
  }
  return activator;
}","/** 
 * @return the activator
 * @deprecated replaced by {@link Module#getModuleActivator()}
 */
@Deprecated public Activator getActivator(){
  try {
    if (activator == null) {
      ModuleClassLoader classLoader=ModuleFactory.getModuleClassLoader(this);
      if (classLoader == null)       throw new ModuleException(""String_Node_Str"",getModuleId());
      Class<?> c=classLoader.loadClass(getActivatorName());
      setActivator((Activator)c.newInstance());
    }
  }
 catch (  ClassNotFoundException e) {
    throw new ModuleException(""String_Node_Str"" + getActivatorName() + ""String_Node_Str"",name,e);
  }
catch (  IllegalAccessException e) {
    throw new ModuleException(""String_Node_Str"" + getActivatorName() + ""String_Node_Str"",name,e);
  }
catch (  InstantiationException e) {
    throw new ModuleException(""String_Node_Str"" + getActivatorName() + ""String_Node_Str"",name,e);
  }
  return activator;
}"
84486,"/** 
 * Runs through the advice and extension points and removes from api.<br/> <code>skipOverStartedProperty</code> should only be true when openmrs is stopping modules because it is shutting down. When normally stopping a module, use   {@link #stopModule(Module)}(or leave value as false). This property controls whether the globalproperty is set for startup/shutdown. <br/> Also calls module's   {@link Activator#shutdown()}
 * @param mod module to stop
 * @param skipOverStartedProperty true if we don't want to set &lt;moduleid&gt;.started to false
 * @param isFailedStartup true if this is being called as a cleanup because of a failed modulestartup
 * @return list of dependent modules that were stopped because this module was stopped. Thiswill never be null.
 */
@SuppressWarnings(""String_Node_Str"") public static List<Module> stopModule(Module mod,boolean skipOverStartedProperty,boolean isFailedStartup) throws ModuleMustStartException {
  List<Module> dependentModulesStopped=new Vector<Module>();
  if (mod != null) {
    try {
      if (mod.getModuleActivator() != null)       mod.getModuleActivator().willStop();
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t);
    }
    String moduleId=mod.getModuleId();
    if (!isFailedStartup && mod.isMandatory()) {
      throw new MandatoryModuleException(moduleId);
    }
    if (!isFailedStartup && ModuleConstants.CORE_MODULES.containsKey(moduleId)) {
      throw new OpenmrsCoreModuleException(moduleId);
    }
    String modulePackage=mod.getPackageName();
    List<Module> startedModulesCopy=new ArrayList<Module>();
    startedModulesCopy.addAll(getStartedModules());
    for (    Module dependentModule : startedModulesCopy) {
      if (!dependentModule.equals(mod) && dependentModule.getRequiredModules().contains(modulePackage)) {
        dependentModulesStopped.add(dependentModule);
        dependentModulesStopped.addAll(stopModule(dependentModule,skipOverStartedProperty,isFailedStartup));
      }
    }
    getStartedModulesMap().remove(moduleId);
    if (skipOverStartedProperty == false && !Context.isRefreshingContext()) {
      saveGlobalProperty(moduleId + ""String_Node_Str"",""String_Node_Str"",getGlobalPropertyStartedDescription(moduleId));
    }
    if (getModuleClassLoaderMap().containsKey(mod)) {
      log.debug(""String_Node_Str"");
      try {
        for (        AdvicePoint advice : mod.getAdvicePoints()) {
          Class cls=null;
          try {
            cls=Context.loadClass(advice.getPoint());
            Object aopObject=advice.getClassInstance();
            if (Advisor.class.isInstance(aopObject)) {
              log.debug(""String_Node_Str"" + aopObject.getClass());
              Context.removeAdvisor(cls,(Advisor)aopObject);
            }
 else {
              log.debug(""String_Node_Str"" + aopObject.getClass());
              Context.removeAdvice(cls,(Advice)aopObject);
            }
          }
 catch (          Throwable t) {
            log.warn(""String_Node_Str"" + advice.getPoint(),t);
          }
        }
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + moduleId,t);
      }
      try {
        for (        Extension ext : mod.getExtensions()) {
          String extId=ext.getExtensionId();
          try {
            List<Extension> tmpExtensions=getExtensions(extId);
            if (tmpExtensions == null)             tmpExtensions=new Vector<Extension>();
            tmpExtensions.remove(ext);
            getExtensionMap().put(extId,tmpExtensions);
          }
 catch (          Exception exterror) {
            log.warn(""String_Node_Str"" + ext,exterror);
          }
        }
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + moduleId,t);
      }
    }
    try {
      if (mod.getModuleActivator() != null)       mod.getModuleActivator().stopped();
 else       mod.getActivator().shutdown();
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t);
    }
    ModuleClassLoader cl=removeClassLoader(mod);
    if (cl != null) {
      cl.dispose();
      cl=null;
      File folder=OpenmrsClassLoader.getLibCacheFolder();
      File tmpModuleDir=new File(folder,moduleId);
      try {
        OpenmrsUtil.deleteDirectory(tmpModuleDir);
      }
 catch (      IOException e) {
        log.warn(""String_Node_Str"" + moduleId);
      }
    }
  }
  return dependentModulesStopped;
}","/** 
 * Runs through the advice and extension points and removes from api.<br/> <code>skipOverStartedProperty</code> should only be true when openmrs is stopping modules because it is shutting down. When normally stopping a module, use   {@link #stopModule(Module)}(or leave value as false). This property controls whether the globalproperty is set for startup/shutdown. <br/> Also calls module's   {@link Activator#shutdown()}
 * @param mod module to stop
 * @param skipOverStartedProperty true if we don't want to set &lt;moduleid&gt;.started to false
 * @param isFailedStartup true if this is being called as a cleanup because of a failed modulestartup
 * @return list of dependent modules that were stopped because this module was stopped. Thiswill never be null.
 */
@SuppressWarnings(""String_Node_Str"") public static List<Module> stopModule(Module mod,boolean skipOverStartedProperty,boolean isFailedStartup) throws ModuleMustStartException {
  List<Module> dependentModulesStopped=new Vector<Module>();
  if (mod != null) {
    try {
      if (mod.getModuleActivator() != null)       mod.getModuleActivator().willStop();
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t);
    }
    String moduleId=mod.getModuleId();
    if (!isFailedStartup && mod.isMandatory()) {
      throw new MandatoryModuleException(moduleId);
    }
    if (!isFailedStartup && ModuleConstants.CORE_MODULES.containsKey(moduleId)) {
      throw new OpenmrsCoreModuleException(moduleId);
    }
    String modulePackage=mod.getPackageName();
    List<Module> startedModulesCopy=new ArrayList<Module>();
    startedModulesCopy.addAll(getStartedModules());
    for (    Module dependentModule : startedModulesCopy) {
      if (!dependentModule.equals(mod) && dependentModule.getRequiredModules().contains(modulePackage)) {
        dependentModulesStopped.add(dependentModule);
        dependentModulesStopped.addAll(stopModule(dependentModule,skipOverStartedProperty,isFailedStartup));
      }
    }
    getStartedModulesMap().remove(moduleId);
    if (skipOverStartedProperty == false && !Context.isRefreshingContext()) {
      saveGlobalProperty(moduleId + ""String_Node_Str"",""String_Node_Str"",getGlobalPropertyStartedDescription(moduleId));
    }
    if (getModuleClassLoaderMap().containsKey(mod)) {
      log.debug(""String_Node_Str"");
      try {
        for (        AdvicePoint advice : mod.getAdvicePoints()) {
          Class cls=null;
          try {
            cls=Context.loadClass(advice.getPoint());
            Object aopObject=advice.getClassInstance();
            if (Advisor.class.isInstance(aopObject)) {
              log.debug(""String_Node_Str"" + aopObject.getClass());
              Context.removeAdvisor(cls,(Advisor)aopObject);
            }
 else {
              log.debug(""String_Node_Str"" + aopObject.getClass());
              Context.removeAdvice(cls,(Advice)aopObject);
            }
          }
 catch (          Throwable t) {
            log.warn(""String_Node_Str"" + advice.getPoint(),t);
          }
        }
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + moduleId,t);
      }
      try {
        for (        Extension ext : mod.getExtensions()) {
          String extId=ext.getExtensionId();
          try {
            List<Extension> tmpExtensions=getExtensions(extId);
            if (tmpExtensions == null)             tmpExtensions=new Vector<Extension>();
            tmpExtensions.remove(ext);
            getExtensionMap().put(extId,tmpExtensions);
          }
 catch (          Exception exterror) {
            log.warn(""String_Node_Str"" + ext,exterror);
          }
        }
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + moduleId,t);
      }
    }
    try {
      if (mod.getModuleActivator() != null)       mod.getModuleActivator().stopped();
 else       mod.getActivator().shutdown();
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t);
    }
    mod.getExtensions().clear();
    mod.setActivator(null);
    mod.setModuleActivator(null);
    mod.disposeAdvicePointsClassInstance();
    ModuleClassLoader cl=removeClassLoader(mod);
    if (cl != null) {
      cl.dispose();
      cl=null;
      File folder=OpenmrsClassLoader.getLibCacheFolder();
      File tmpModuleDir=new File(folder,moduleId);
      try {
        OpenmrsUtil.deleteDirectory(tmpModuleDir);
      }
 catch (      IOException e) {
        log.warn(""String_Node_Str"" + moduleId);
      }
    }
  }
  return dependentModulesStopped;
}"
84487,"/** 
 * called before @BeforeTransaction methods
 * @see org.springframework.test.context.support.AbstractTestExecutionListener#prepareTestInstance(org.springframework.test.context.TestContext)
 */
@Override public void prepareTestInstance(TestContext testContext) throws Exception {
  StartModule startModuleAnnotation=testContext.getTestClass().getAnnotation(StartModule.class);
  if (startModuleAnnotation != null) {
    if (!lastClassRun.equals(testContext.getTestClass().getSimpleName())) {
      lastClassRun=testContext.getTestClass().getSimpleName();
      if (!Context.isSessionOpen())       Context.openSession();
      String modulesToLoad=StringUtils.join(startModuleAnnotation.value(),""String_Node_Str"");
      Properties props=BaseContextSensitiveTest.runtimeProperties;
      props.setProperty(ModuleConstants.RUNTIMEPROPERTY_MODULE_LIST_TO_LOAD,modulesToLoad);
      try {
        ModuleUtil.startup(props);
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
        e.printStackTrace(System.out);
        throw e;
      }
      Assert.assertTrue(""String_Node_Str"" + testContext.getTestClass().getSimpleName() + ""String_Node_Str""+ ModuleFactory.getStartedModules().size()+ ""String_Node_Str""+ startModuleAnnotation.value().length,startModuleAnnotation.value().length <= ModuleFactory.getStartedModules().size());
      new ClassPathXmlApplicationContext(new String[]{""String_Node_Str"",""String_Node_Str""});
    }
  }
}","/** 
 * called before @BeforeTransaction methods
 * @see org.springframework.test.context.support.AbstractTestExecutionListener#prepareTestInstance(org.springframework.test.context.TestContext)
 */
@Override public void prepareTestInstance(TestContext testContext) throws Exception {
  StartModule startModuleAnnotation=testContext.getTestClass().getAnnotation(StartModule.class);
  if (startModuleAnnotation != null) {
    if (!lastClassRun.equals(testContext.getTestClass().getSimpleName())) {
      lastClassRun=testContext.getTestClass().getSimpleName();
      if (!Context.isSessionOpen())       Context.openSession();
      String modulesToLoad=StringUtils.join(startModuleAnnotation.value(),""String_Node_Str"");
      Properties props=BaseContextSensitiveTest.runtimeProperties;
      props.setProperty(ModuleConstants.RUNTIMEPROPERTY_MODULE_LIST_TO_LOAD,modulesToLoad);
      try {
        ModuleUtil.startup(props);
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
        e.printStackTrace(System.out);
        throw e;
      }
      Assert.assertTrue(""String_Node_Str"" + testContext.getTestClass().getSimpleName() + ""String_Node_Str""+ ModuleFactory.getStartedModules().size()+ ""String_Node_Str""+ startModuleAnnotation.value().length,startModuleAnnotation.value().length <= ModuleFactory.getStartedModules().size());
      GenericApplicationContext ctx=new GenericApplicationContext(testContext.getApplicationContext());
      XmlBeanDefinitionReader xmlReader=new XmlBeanDefinitionReader(ctx);
      xmlReader.loadBeanDefinitions(new ClassPathResource(""String_Node_Str""));
      ctx.refresh();
    }
  }
}"
84488,"/** 
 * Called by   {@link #doFilter(ServletRequest,ServletResponse,FilterChain)} on POST requests
 * @param httpRequest
 * @param httpResponse
 */
@Override protected void doPost(HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws IOException, ServletException {
  String page=httpRequest.getParameter(""String_Node_Str"");
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  if (INSTALL_METHOD.equals(page)) {
    wizardModel.installMethod=httpRequest.getParameter(""String_Node_Str"");
    if (InitializationWizardModel.INSTALL_METHOD_SIMPLE.equals(wizardModel.installMethod)) {
      page=SIMPLE_SETUP;
    }
 else {
      page=DATABASE_SETUP;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (SIMPLE_SETUP.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(INSTALL_METHOD,referenceMap,httpResponse);
      return;
    }
    wizardModel.databaseRootPassword=httpRequest.getParameter(""String_Node_Str"");
    checkForEmptyValue(wizardModel.databaseRootPassword,errors,""String_Node_Str"");
    wizardModel.hasCurrentOpenmrsDatabase=false;
    wizardModel.createTables=true;
    wizardModel.createDatabasePassword=wizardModel.databaseRootPassword;
    wizardModel.addDemoData=false;
    wizardModel.hasCurrentDatabaseUser=false;
    wizardModel.createDatabaseUser=true;
    wizardModel.createUserPassword=wizardModel.databaseRootPassword;
    wizardModel.moduleWebAdmin=true;
    wizardModel.autoUpdateDatabase=false;
    wizardModel.adminUserPassword=InitializationWizardModel.ADMIN_DEFAULT_PASSWORD;
    if (errors.isEmpty()) {
      page=WIZARD_COMPLETE;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (DATABASE_SETUP.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(INSTALL_METHOD,referenceMap,httpResponse);
      return;
    }
    wizardModel.databaseConnection=httpRequest.getParameter(""String_Node_Str"");
    checkForEmptyValue(wizardModel.databaseConnection,errors,""String_Node_Str"");
    wizardModel.databaseDriver=httpRequest.getParameter(""String_Node_Str"");
    checkForEmptyValue(wizardModel.databaseConnection,errors,""String_Node_Str"");
    try {
      loadedDriverString=DatabaseUtil.loadDatabaseDriver(wizardModel.databaseConnection,wizardModel.databaseDriver);
      log.info(""String_Node_Str"" + loadedDriverString);
    }
 catch (    ClassNotFoundException e) {
      errors.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      renderTemplate(page,referenceMap,httpResponse);
      return;
    }
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      wizardModel.databaseName=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.databaseName,errors,""String_Node_Str"");
      wizardModel.hasCurrentOpenmrsDatabase=true;
    }
 else {
      wizardModel.hasCurrentOpenmrsDatabase=false;
      wizardModel.createTables=true;
      wizardModel.databaseName=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.databaseName,errors,""String_Node_Str"");
      wizardModel.createDatabaseUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createDatabaseUsername,errors,""String_Node_Str"");
      wizardModel.createDatabasePassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createDatabasePassword,errors,""String_Node_Str"");
    }
    if (errors.isEmpty()) {
      page=DATABASE_TABLES_AND_USER;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (DATABASE_TABLES_AND_USER.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(DATABASE_SETUP,referenceMap,httpResponse);
      return;
    }
    if (wizardModel.hasCurrentOpenmrsDatabase) {
      wizardModel.createTables=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    }
    wizardModel.addDemoData=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      wizardModel.currentDatabaseUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.currentDatabaseUsername,errors,""String_Node_Str"");
      wizardModel.currentDatabasePassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.currentDatabasePassword,errors,""String_Node_Str"");
      wizardModel.hasCurrentDatabaseUser=true;
      wizardModel.createDatabaseUser=false;
    }
 else {
      wizardModel.hasCurrentDatabaseUser=false;
      wizardModel.createDatabaseUser=true;
      wizardModel.createUserUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createUserUsername,errors,""String_Node_Str"");
      wizardModel.createUserPassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createUserPassword,errors,""String_Node_Str"");
    }
    if (errors.isEmpty()) {
      page=OTHER_RUNTIME_PROPS;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (OTHER_RUNTIME_PROPS.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(DATABASE_TABLES_AND_USER,referenceMap,httpResponse);
      return;
    }
    wizardModel.moduleWebAdmin=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    wizardModel.autoUpdateDatabase=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    if (wizardModel.createTables) {
      page=ADMIN_USER_SETUP;
    }
 else {
      page=IMPLEMENTATION_ID_SETUP;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (ADMIN_USER_SETUP.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(OTHER_RUNTIME_PROPS,referenceMap,httpResponse);
      return;
    }
    wizardModel.adminUserPassword=httpRequest.getParameter(""String_Node_Str"");
    String adminUserConfirm=httpRequest.getParameter(""String_Node_Str"");
    if (!wizardModel.adminUserPassword.equals(adminUserConfirm)) {
      errors.add(""String_Node_Str"");
      renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
      return;
    }
    if (wizardModel.adminUserPassword.equals(""String_Node_Str"")) {
      errors.add(""String_Node_Str"");
      renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
      return;
    }
    try {
      OpenmrsUtil.validatePassword(""String_Node_Str"",wizardModel.adminUserPassword,""String_Node_Str"");
    }
 catch (    PasswordException p) {
      errors.add(""String_Node_Str"");
      renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
      return;
    }
    if (errors.isEmpty()) {
      page=IMPLEMENTATION_ID_SETUP;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (IMPLEMENTATION_ID_SETUP.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      if (wizardModel.createTables)       renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
 else       renderTemplate(OTHER_RUNTIME_PROPS,referenceMap,httpResponse);
      return;
    }
    wizardModel.implementationIdName=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationId=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationIdPassPhrase=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationIdDescription=httpRequest.getParameter(""String_Node_Str"");
    if (wizardModel.implementationId.indexOf('^') != -1 || wizardModel.implementationId.indexOf('|') != -1) {
      errors.add(""String_Node_Str"");
      renderTemplate(IMPLEMENTATION_ID_SETUP,referenceMap,httpResponse);
      return;
    }
    if (errors.isEmpty()) {
      page=WIZARD_COMPLETE;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (WIZARD_COMPLETE.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      if (InitializationWizardModel.INSTALL_METHOD_SIMPLE.equals(wizardModel.installMethod)) {
        page=SIMPLE_SETUP;
      }
 else {
        page=IMPLEMENTATION_ID_SETUP;
      }
      renderTemplate(page,referenceMap,httpResponse);
      return;
    }
    initJob=new InitializationCompletion();
    wizardModel.tasksToExecute=new ArrayList<WizardTask>();
    if (!wizardModel.hasCurrentOpenmrsDatabase)     wizardModel.tasksToExecute.add(WizardTask.CREATE_SCHEMA);
    if (wizardModel.createDatabaseUser)     wizardModel.tasksToExecute.add(WizardTask.CREATE_DB_USER);
    if (wizardModel.createTables) {
      wizardModel.tasksToExecute.add(WizardTask.CREATE_TABLES);
      wizardModel.tasksToExecute.add(WizardTask.ADD_CORE_DATA);
    }
    if (wizardModel.addDemoData)     wizardModel.tasksToExecute.add(WizardTask.ADD_DEMO_DATA);
    wizardModel.tasksToExecute.add(WizardTask.UPDATE_TO_LATEST);
    referenceMap.put(""String_Node_Str"",wizardModel.tasksToExecute);
    initJob.start();
    renderTemplate(PROGRESS_VM,referenceMap,httpResponse);
  }
}","/** 
 * Called by   {@link #doFilter(ServletRequest,ServletResponse,FilterChain)} on POST requests
 * @param httpRequest
 * @param httpResponse
 */
@Override protected void doPost(HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws IOException, ServletException {
  String page=httpRequest.getParameter(""String_Node_Str"");
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  if (INSTALL_METHOD.equals(page)) {
    wizardModel.installMethod=httpRequest.getParameter(""String_Node_Str"");
    if (InitializationWizardModel.INSTALL_METHOD_SIMPLE.equals(wizardModel.installMethod)) {
      page=SIMPLE_SETUP;
    }
 else {
      page=DATABASE_SETUP;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (SIMPLE_SETUP.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(INSTALL_METHOD,referenceMap,httpResponse);
      return;
    }
    wizardModel.databaseRootPassword=httpRequest.getParameter(""String_Node_Str"");
    checkForEmptyValue(wizardModel.databaseRootPassword,errors,""String_Node_Str"");
    wizardModel.hasCurrentOpenmrsDatabase=false;
    wizardModel.createTables=true;
    wizardModel.createDatabasePassword=wizardModel.databaseRootPassword;
    wizardModel.addDemoData=false;
    wizardModel.hasCurrentDatabaseUser=false;
    wizardModel.createDatabaseUser=true;
    wizardModel.createUserPassword=wizardModel.databaseRootPassword;
    wizardModel.moduleWebAdmin=true;
    wizardModel.autoUpdateDatabase=false;
    wizardModel.adminUserPassword=InitializationWizardModel.ADMIN_DEFAULT_PASSWORD;
    try {
      loadedDriverString=DatabaseUtil.loadDatabaseDriver(wizardModel.databaseConnection,wizardModel.databaseDriver);
    }
 catch (    ClassNotFoundException e) {
      errors.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      renderTemplate(page,referenceMap,httpResponse);
      return;
    }
    if (errors.isEmpty()) {
      page=WIZARD_COMPLETE;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (DATABASE_SETUP.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(INSTALL_METHOD,referenceMap,httpResponse);
      return;
    }
    wizardModel.databaseConnection=httpRequest.getParameter(""String_Node_Str"");
    checkForEmptyValue(wizardModel.databaseConnection,errors,""String_Node_Str"");
    wizardModel.databaseDriver=httpRequest.getParameter(""String_Node_Str"");
    checkForEmptyValue(wizardModel.databaseConnection,errors,""String_Node_Str"");
    try {
      loadedDriverString=DatabaseUtil.loadDatabaseDriver(wizardModel.databaseConnection,wizardModel.databaseDriver);
      log.info(""String_Node_Str"" + loadedDriverString);
    }
 catch (    ClassNotFoundException e) {
      errors.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      renderTemplate(page,referenceMap,httpResponse);
      return;
    }
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      wizardModel.databaseName=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.databaseName,errors,""String_Node_Str"");
      wizardModel.hasCurrentOpenmrsDatabase=true;
    }
 else {
      wizardModel.hasCurrentOpenmrsDatabase=false;
      wizardModel.createTables=true;
      wizardModel.databaseName=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.databaseName,errors,""String_Node_Str"");
      wizardModel.createDatabaseUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createDatabaseUsername,errors,""String_Node_Str"");
      wizardModel.createDatabasePassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createDatabasePassword,errors,""String_Node_Str"");
    }
    if (errors.isEmpty()) {
      page=DATABASE_TABLES_AND_USER;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (DATABASE_TABLES_AND_USER.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(DATABASE_SETUP,referenceMap,httpResponse);
      return;
    }
    if (wizardModel.hasCurrentOpenmrsDatabase) {
      wizardModel.createTables=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    }
    wizardModel.addDemoData=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      wizardModel.currentDatabaseUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.currentDatabaseUsername,errors,""String_Node_Str"");
      wizardModel.currentDatabasePassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.currentDatabasePassword,errors,""String_Node_Str"");
      wizardModel.hasCurrentDatabaseUser=true;
      wizardModel.createDatabaseUser=false;
    }
 else {
      wizardModel.hasCurrentDatabaseUser=false;
      wizardModel.createDatabaseUser=true;
      wizardModel.createUserUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createUserUsername,errors,""String_Node_Str"");
      wizardModel.createUserPassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createUserPassword,errors,""String_Node_Str"");
    }
    if (errors.isEmpty()) {
      page=OTHER_RUNTIME_PROPS;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (OTHER_RUNTIME_PROPS.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(DATABASE_TABLES_AND_USER,referenceMap,httpResponse);
      return;
    }
    wizardModel.moduleWebAdmin=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    wizardModel.autoUpdateDatabase=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    if (wizardModel.createTables) {
      page=ADMIN_USER_SETUP;
    }
 else {
      page=IMPLEMENTATION_ID_SETUP;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (ADMIN_USER_SETUP.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(OTHER_RUNTIME_PROPS,referenceMap,httpResponse);
      return;
    }
    wizardModel.adminUserPassword=httpRequest.getParameter(""String_Node_Str"");
    String adminUserConfirm=httpRequest.getParameter(""String_Node_Str"");
    if (!wizardModel.adminUserPassword.equals(adminUserConfirm)) {
      errors.add(""String_Node_Str"");
      renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
      return;
    }
    if (wizardModel.adminUserPassword.equals(""String_Node_Str"")) {
      errors.add(""String_Node_Str"");
      renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
      return;
    }
    try {
      OpenmrsUtil.validatePassword(""String_Node_Str"",wizardModel.adminUserPassword,""String_Node_Str"");
    }
 catch (    PasswordException p) {
      errors.add(""String_Node_Str"");
      renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
      return;
    }
    if (errors.isEmpty()) {
      page=IMPLEMENTATION_ID_SETUP;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (IMPLEMENTATION_ID_SETUP.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      if (wizardModel.createTables)       renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
 else       renderTemplate(OTHER_RUNTIME_PROPS,referenceMap,httpResponse);
      return;
    }
    wizardModel.implementationIdName=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationId=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationIdPassPhrase=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationIdDescription=httpRequest.getParameter(""String_Node_Str"");
    if (wizardModel.implementationId.indexOf('^') != -1 || wizardModel.implementationId.indexOf('|') != -1) {
      errors.add(""String_Node_Str"");
      renderTemplate(IMPLEMENTATION_ID_SETUP,referenceMap,httpResponse);
      return;
    }
    if (errors.isEmpty()) {
      page=WIZARD_COMPLETE;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (WIZARD_COMPLETE.equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      if (InitializationWizardModel.INSTALL_METHOD_SIMPLE.equals(wizardModel.installMethod)) {
        page=SIMPLE_SETUP;
      }
 else {
        page=IMPLEMENTATION_ID_SETUP;
      }
      renderTemplate(page,referenceMap,httpResponse);
      return;
    }
    initJob=new InitializationCompletion();
    wizardModel.tasksToExecute=new ArrayList<WizardTask>();
    if (!wizardModel.hasCurrentOpenmrsDatabase)     wizardModel.tasksToExecute.add(WizardTask.CREATE_SCHEMA);
    if (wizardModel.createDatabaseUser)     wizardModel.tasksToExecute.add(WizardTask.CREATE_DB_USER);
    if (wizardModel.createTables) {
      wizardModel.tasksToExecute.add(WizardTask.CREATE_TABLES);
      wizardModel.tasksToExecute.add(WizardTask.ADD_CORE_DATA);
    }
    if (wizardModel.addDemoData)     wizardModel.tasksToExecute.add(WizardTask.ADD_DEMO_DATA);
    wizardModel.tasksToExecute.add(WizardTask.UPDATE_TO_LATEST);
    referenceMap.put(""String_Node_Str"",wizardModel.tasksToExecute);
    initJob.start();
    renderTemplate(PROGRESS_VM,referenceMap,httpResponse);
  }
}"
84489,"/** 
 * This class method is only called when flushing an updated dirty object, not inserting objects
 * @return true if the object got the changedBy and dateChanged fields set
 * @should return false for non Auditable objects
 * @should set the dateChanged field
 * @should set the changedBy field
 * @should be called when saving an Auditable
 * @see org.hibernate.EmptyInterceptor#onFlushDirty(java.lang.Object,java.io.Serializable,java.lang.Object[],java.lang.Object[],java.lang.String[],org.hibernate.type.Type[])
 */
@Override public boolean onFlushDirty(Object entity,Serializable id,Object[] currentState,Object[] previousState,String[] propertyNames,Type[] types) throws CallbackException {
  if (entity instanceof Auditable) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + entity);
    for (int x=0; x < propertyNames.length; x++) {
      if (propertyNames[x].equals(""String_Node_Str""))       currentState[x]=Context.getAuthenticatedUser();
 else       if (propertyNames[x].equals(""String_Node_Str""))       currentState[x]=new Date();
    }
    return true;
  }
  return false;
}","/** 
 * This class method is only called when flushing an updated dirty object, not inserting objects
 * @return true if the object got the changedBy and dateChanged fields set
 * @should return false for non Auditable objects
 * @should set the dateChanged field
 * @should set the changedBy field
 * @should be called when saving an Auditable
 * @see org.hibernate.EmptyInterceptor#onFlushDirty(java.lang.Object,java.io.Serializable,java.lang.Object[],java.lang.Object[],java.lang.String[],org.hibernate.type.Type[])
 */
@Override public boolean onFlushDirty(Object entity,Serializable id,Object[] currentState,Object[] previousState,String[] propertyNames,Type[] types) throws CallbackException {
  if (entity instanceof Auditable) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + entity);
    boolean objectWasChanged=false;
    Date currentDate=new Date();
    User authenticatedUser=Context.getAuthenticatedUser();
    for (int x=0; x < propertyNames.length; x++) {
      if (propertyNames[x].equals(""String_Node_Str"") && previousState != null && previousState[x] != authenticatedUser) {
        currentState[x]=authenticatedUser;
        objectWasChanged=true;
      }
 else       if (propertyNames[x].equals(""String_Node_Str"") && previousState != null && previousState[x] != currentDate) {
        currentState[x]=currentDate;
        objectWasChanged=true;
      }
    }
    return objectWasChanged;
  }
  return false;
}"
84490,"/** 
 * @see org.openmrs.api.db.ContextDAO#getUserByUuid(java.lang.String)
 */
public User getUserByUuid(String uuid){
  return (User)sessionFactory.getCurrentSession().createQuery(""String_Node_Str"").setString(""String_Node_Str"",uuid).uniqueResult();
}","/** 
 * @see org.openmrs.api.db.ContextDAO#getUserByUuid(java.lang.String)
 */
public User getUserByUuid(String uuid){
  FlushMode flushMode=sessionFactory.getCurrentSession().getFlushMode();
  sessionFactory.getCurrentSession().setFlushMode(FlushMode.MANUAL);
  User u=(User)sessionFactory.getCurrentSession().createQuery(""String_Node_Str"").setString(""String_Node_Str"",uuid).uniqueResult();
  sessionFactory.getCurrentSession().setFlushMode(flushMode);
  return u;
}"
84491,"/** 
 * @see AuditableInterceptor#onFlushDirty(Object,Serializable,Object[],Object[],String[],Type[])
 * @verifies set the changedBy field
 */
@Test public void onFlushDirty_shouldSetTheChangedByField() throws Exception {
  AuditableInterceptor interceptor=new AuditableInterceptor();
  User u=new User();
  Assert.assertTrue(u instanceof Auditable);
  String[] propertyNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  Object[] currentState=new Object[]{""String_Node_Str"",null};
  interceptor.onFlushDirty(u,null,currentState,null,propertyNames,null);
  Assert.assertNotNull(currentState[0]);
}","/** 
 * @see AuditableInterceptor#onFlushDirty(Object,Serializable,Object[],Object[],String[],Type[])
 * @verifies set the changedBy field
 */
@Test public void onFlushDirty_shouldSetTheChangedByField() throws Exception {
  AuditableInterceptor interceptor=new AuditableInterceptor();
  User u=new User();
  Assert.assertTrue(u instanceof Auditable);
  String[] propertyNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  Object[] currentState=new Object[]{""String_Node_Str"",null};
  Object[] previousState=new Object[]{""String_Node_Str"",null};
  interceptor.onFlushDirty(u,null,currentState,previousState,propertyNames,null);
  Assert.assertNotNull(currentState[0]);
}"
84492,"/** 
 * @see AuditableInterceptor#onFlushDirty(Object,Serializable,Object[],Object[],String[],Type[])
 * @verifies set the dateChanged field
 */
@Test public void onFlushDirty_shouldSetTheDateChangedField() throws Exception {
  AuditableInterceptor interceptor=new AuditableInterceptor();
  User u=new User();
  Assert.assertTrue(u instanceof Auditable);
  String[] propertyNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  Object[] currentState=new Object[]{""String_Node_Str"",null};
  interceptor.onFlushDirty(u,null,currentState,null,propertyNames,null);
  Assert.assertNotNull(currentState[1]);
}","/** 
 * @see AuditableInterceptor#onFlushDirty(Object,Serializable,Object[],Object[],String[],Type[])
 * @verifies set the dateChanged field
 */
@Test public void onFlushDirty_shouldSetTheDateChangedField() throws Exception {
  AuditableInterceptor interceptor=new AuditableInterceptor();
  User u=new User();
  Assert.assertTrue(u instanceof Auditable);
  String[] propertyNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  Object[] currentState=new Object[]{""String_Node_Str"",null};
  Object[] previousState=new Object[]{""String_Node_Str"",null};
  interceptor.onFlushDirty(u,null,currentState,previousState,propertyNames,null);
  Assert.assertNotNull(currentState[1]);
}"
84493,"/** 
 * Convenience method for pulling the correct page to redirect to out of the request
 * @param request the current request
 * @return the page to redirect to as determined by parameters in the request
 */
private String determineRedirect(HttpServletRequest request){
  String redirect=request.getParameter(""String_Node_Str"");
  if (redirect == null || redirect.equals(""String_Node_Str"")) {
    redirect=request.getContextPath();
  }
 else   if (redirect.contains(""String_Node_Str"")) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
 else   if (!redirect.startsWith(request.getContextPath())) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
 else   if (redirect.endsWith(WebConstants.SETUP_PAGE_URL)) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
 else   if (redirect.contains(""String_Node_Str"") || redirect.contains(""String_Node_Str"") || redirect.contains(""String_Node_Str"")) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
  log.debug(""String_Node_Str"" + redirect + ""String_Node_Str"");
  return redirect;
}","/** 
 * Convenience method for pulling the correct page to redirect to out of the request
 * @param request the current request
 * @return the page to redirect to as determined by parameters in the request
 */
private String determineRedirect(HttpServletRequest request){
  String redirect=request.getParameter(""String_Node_Str"");
  if (redirect == null || redirect.equals(""String_Node_Str"")) {
    redirect=request.getParameter(""String_Node_Str"");
    if (redirect != null && !redirect.startsWith(""String_Node_Str"")) {
      Integer requestURLLength=request.getRequestURL().length();
      StringBuffer domainAndPort=request.getRequestURL();
      domainAndPort.delete(requestURLLength - request.getRequestURI().length(),requestURLLength);
      if (!redirect.startsWith(domainAndPort.toString()))       redirect=null;
      redirect=redirect.substring(redirect.indexOf(""String_Node_Str"",9));
    }
  }
  if (redirect == null || redirect.equals(""String_Node_Str"")) {
    redirect=request.getContextPath();
  }
 else   if (redirect.contains(""String_Node_Str"")) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
 else   if (!redirect.startsWith(request.getContextPath())) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
 else   if (redirect.endsWith(WebConstants.SETUP_PAGE_URL)) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
 else   if (redirect.contains(""String_Node_Str"") || redirect.contains(""String_Node_Str"") || redirect.contains(""String_Node_Str"")) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
  log.debug(""String_Node_Str"" + redirect + ""String_Node_Str"");
  return redirect;
}"
84494,"/** 
 * @should return patient identifier validator given class name
 * @should treat empty strings like a null entry
 */
public IdentifierValidator getIdentifierValidator(String pivClassName);","/** 
 * @should return patient identifier validator given class name
 * @should treat empty strings like a null entry
 */
@Transactional(readOnly=true) public IdentifierValidator getIdentifierValidator(String pivClassName);"
84495,"/** 
 * @return All registered PatientIdentifierValidators
 * @should return all registered patient identifier validators
 */
public Collection<IdentifierValidator> getAllIdentifierValidators();","/** 
 * @return All registered PatientIdentifierValidators
 * @should return all registered patient identifier validators
 */
@Transactional(readOnly=true) public Collection<IdentifierValidator> getAllIdentifierValidators();"
84496,"/** 
 * @return the default IdentifierValidator
 * @should return default patient identifier validator
 */
public IdentifierValidator getDefaultIdentifierValidator();","/** 
 * @return the default IdentifierValidator
 * @should return default patient identifier validator
 */
@Transactional(readOnly=true) public IdentifierValidator getDefaultIdentifierValidator();"
84497,"/** 
 * Parses a name into a PersonName (separate Given, Middle, and Family names)
 * @param name person name to be parsed
 * @return parsed person name
 * @should parse two person name with comma
 * @should parse two person name without comma
 * @should not fail when ending with whitespace
 * @should not fail when ending with a comma
 */
public PersonName parsePersonName(String name) throws APIException ;","/** 
 * Parses a name into a PersonName (separate Given, Middle, and Family names)
 * @param name person name to be parsed
 * @return parsed person name
 * @should parse two person name with comma
 * @should parse two person name without comma
 * @should not fail when ending with whitespace
 * @should not fail when ending with a comma
 * @should parse four person name
 */
public PersonName parsePersonName(String name) throws APIException ;"
84498,"/** 
 * @see org.openmrs.api.PersonService#parsePersonName(java.lang.String)
 */
public PersonName parsePersonName(String name) throws APIException {
  name=name.trim();
  while (name.endsWith(""String_Node_Str""))   name=name.substring(0,name.length() - 1);
  String firstName=name;
  String middleName=""String_Node_Str"";
  String lastName=""String_Node_Str"";
  if (name.contains(""String_Node_Str"")) {
    String[] names=name.split(""String_Node_Str"");
    for (int x=0; x < names.length; x++) {
      names[x]=names[x].trim();
    }
    String[] firstNames=names[1].split(""String_Node_Str"");
    if (firstNames.length == 2) {
      lastName=names[0];
      firstName=firstNames[0];
      middleName=firstNames[1];
    }
 else {
      firstName=names[1];
      lastName=names[0];
    }
  }
 else   if (name.contains(""String_Node_Str"")) {
    String[] names=name.split(""String_Node_Str"");
    if (names.length == 3) {
      firstName=names[0];
      middleName=names[1];
      lastName=names[2];
    }
 else {
      firstName=names[0];
      lastName=names[1];
    }
  }
  return new PersonName(firstName,middleName,lastName);
}","/** 
 * @see org.openmrs.api.PersonService#parsePersonName(java.lang.String)
 */
public PersonName parsePersonName(String name) throws APIException {
  name=name.trim();
  while (name.endsWith(""String_Node_Str""))   name=name.substring(0,name.length() - 1);
  String firstName=name;
  String middleName=""String_Node_Str"";
  String lastName=""String_Node_Str"";
  String lastName2=null;
  if (name.contains(""String_Node_Str"")) {
    String[] names=name.split(""String_Node_Str"");
    for (int x=0; x < names.length; x++) {
      names[x]=names[x].trim();
    }
    String[] firstNames=names[1].split(""String_Node_Str"");
    if (firstNames.length == 2) {
      lastName=names[0];
      firstName=firstNames[0];
      middleName=firstNames[1];
    }
 else {
      firstName=names[1];
      lastName=names[0];
    }
  }
 else   if (name.contains(""String_Node_Str"")) {
    String[] names=name.split(""String_Node_Str"");
    if (names.length == 4) {
      firstName=names[0];
      middleName=names[1];
      lastName=names[2];
      lastName2=names[3];
    }
 else     if (names.length == 3) {
      firstName=names[0];
      middleName=names[1];
      lastName=names[2];
    }
 else {
      firstName=names[0];
      lastName=names[1];
    }
  }
  PersonName pn=new PersonName(firstName,middleName,lastName);
  pn.setFamilyName2(lastName2);
  return pn;
}"
84499,"/** 
 * @see PersonService#parsePersonName(String)
 * @verifies not fail when ending with whitespace
 */
@Test public void parsePersonName_shouldNotFailWhenEndingWithWhitespace() throws Exception {
  Context.getPersonService().parsePersonName(""String_Node_Str"");
}","/** 
 * @see PersonService#parsePersonName(String)
 * @verifies not fail when ending with whitespace
 */
@Test public void parsePersonName_shouldNotFailWhenEndingWithWhitespace() throws Exception {
  PersonName pname=Context.getPersonService().parsePersonName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",pname.getGivenName());
}"
84500,"/** 
 * Convenience method for pulling the correct page to redirect to out of the request
 * @param request the current request
 * @return the page to redirect to as determined by parameters in the request
 */
private String determineRedirect(HttpServletRequest request){
  String redirect=request.getParameter(""String_Node_Str"");
  if (redirect == null || redirect.equals(""String_Node_Str"")) {
    redirect=request.getParameter(""String_Node_Str"");
    if (redirect != null && !redirect.startsWith(""String_Node_Str"")) {
      Integer requestURLLength=request.getRequestURL().length();
      StringBuffer domainAndPort=request.getRequestURL();
      domainAndPort.delete(requestURLLength - request.getRequestURI().length(),requestURLLength);
      if (!redirect.startsWith(domainAndPort.toString()))       redirect=null;
      redirect=redirect.substring(redirect.indexOf(""String_Node_Str"",9));
    }
  }
  if (redirect == null || redirect.equals(""String_Node_Str"")) {
    redirect=request.getContextPath();
  }
 else   if (redirect.contains(""String_Node_Str"")) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
 else   if (!redirect.startsWith(request.getContextPath())) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
 else   if (redirect.endsWith(WebConstants.SETUP_PAGE_URL)) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
 else   if (redirect.contains(""String_Node_Str"") || redirect.contains(""String_Node_Str"") || redirect.contains(""String_Node_Str"")) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
  log.debug(""String_Node_Str"" + redirect + ""String_Node_Str"");
  return redirect;
}","/** 
 * Convenience method for pulling the correct page to redirect to out of the request
 * @param request the current request
 * @return the page to redirect to as determined by parameters in the request
 */
private String determineRedirect(HttpServletRequest request){
  String redirect=request.getParameter(""String_Node_Str"");
  if (redirect == null || redirect.equals(""String_Node_Str"")) {
    redirect=request.getParameter(""String_Node_Str"");
    if (redirect != null && !redirect.startsWith(""String_Node_Str"")) {
      Integer requestURLLength=request.getRequestURL().length();
      StringBuffer domainAndPort=request.getRequestURL();
      domainAndPort.delete(requestURLLength - request.getRequestURI().length(),requestURLLength);
      if (!redirect.startsWith(domainAndPort.toString()))       redirect=null;
 else {
        redirect=redirect.substring(redirect.indexOf(""String_Node_Str"",9));
      }
    }
  }
  if (redirect == null || redirect.equals(""String_Node_Str"")) {
    redirect=request.getContextPath();
  }
 else   if (redirect.contains(""String_Node_Str"")) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
 else   if (!redirect.startsWith(request.getContextPath())) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
 else   if (redirect.endsWith(WebConstants.SETUP_PAGE_URL)) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
 else   if (redirect.contains(""String_Node_Str"") || redirect.contains(""String_Node_Str"") || redirect.contains(""String_Node_Str"")) {
    log.debug(""String_Node_Str"");
    redirect=request.getContextPath();
  }
  log.debug(""String_Node_Str"" + redirect + ""String_Node_Str"");
  return redirect;
}"
84501,"/** 
 * Returns a map of results with the values as count of matches and a partial list of the matching encounters (depending on values of start and length parameters) while the keys are are 'count' and 'objectList' respectively, if the length parameter is not specified, then all matches will be returned from the start index if specified.
 * @param phrase patient name or identifier
 * @param includeVoided Specifies if voided encounters should be included or not
 * @param start the beginning index
 * @param length the number of matching encounters to return
 * @return a map of results
 * @throws APIException
 * @since 1.8
 */
public Map<String,Object> findCountAndEncounters(String phrase,boolean includeVoided,Integer start,Integer length) throws APIException {
  Map<String,Object> resultsMap=new HashMap<String,Object>();
  int encounterCount=Context.getEncounterService().getCountOfEncounters(phrase,includeVoided);
  Vector<Object> objectList=new Vector<Object>();
  if (encounterCount > 0)   objectList=findEncounters(phrase,includeVoided,start,length);
  resultsMap.put(""String_Node_Str"",encounterCount);
  resultsMap.put(""String_Node_Str"",objectList);
  return resultsMap;
}","/** 
 * Returns a map of results with the values as count of matches and a partial list of the matching encounters (depending on values of start and length parameters) while the keys are are 'count' and 'objectList' respectively, if the length parameter is not specified, then all matches will be returned from the start index if specified.
 * @param phrase patient name or identifier
 * @param includeVoided Specifies if voided encounters should be included or not
 * @param start the beginning index
 * @param length the number of matching encounters to return
 * @return a map of results
 * @throws APIException
 * @since 1.8
 */
public Map<String,Object> findCountAndEncounters(String phrase,boolean includeVoided,Integer start,Integer length) throws APIException {
  Map<String,Object> resultsMap=new HashMap<String,Object>();
  EncounterService es=Context.getEncounterService();
  int encounterCount=Context.getEncounterService().getCountOfEncounters(phrase,includeVoided);
  if (phrase.matches(""String_Node_Str"")) {
    Encounter e=es.getEncounter(Integer.valueOf(phrase));
    if (e != null) {
      if (!e.isVoided() || includeVoided == true)       encounterCount++;
    }
  }
  Vector<Object> objectList=new Vector<Object>();
  if (encounterCount > 0)   objectList=findEncounters(phrase,includeVoided,start,length);
  resultsMap.put(""String_Node_Str"",encounterCount);
  resultsMap.put(""String_Node_Str"",objectList);
  return resultsMap;
}"
84502,"/** 
 * Does the actual working of printing the date pattern
 * @see javax.servlet.jsp.tagext.TagSupport#doStartTag()
 */
public int doStartTag(){
  SimpleDateFormat dateFormat=Context.getDateFormat();
  try {
    pageContext.getOut().write(dateFormat.toLocalizedPattern().toLowerCase());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return SKIP_BODY;
}","/** 
 * Does the actual working of printing the date pattern
 * @see javax.servlet.jsp.tagext.TagSupport#doStartTag()
 */
@Override public int doStartTag(){
  SimpleDateFormat dateFormat=Context.getDateFormat();
  try {
    String pattern=dateFormat.toLocalizedPattern().toLowerCase();
    if ((localize != null) && ""String_Node_Str"".equals(localize)) {
      pattern=dateFormat.toPattern().toLowerCase();
    }
    pageContext.getOut().write(pattern);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return SKIP_BODY;
}"
84503,"/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 * @should display numeric values from table
 * @should copy numeric values into numeric concepts
 * @should return a concept with a null id if no match is found
 */
@Override protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  ConceptService cs=Context.getConceptService();
  if (Context.isAuthenticated()) {
    ConceptFormBackingObject conceptBackingObject=(ConceptFormBackingObject)obj;
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String action=request.getParameter(""String_Node_Str"");
    if (action.equals(msa.getMessage(""String_Node_Str"",""String_Node_Str""))) {
      Concept concept=conceptBackingObject.getConcept();
      try {
        cs.purgeConcept(concept);
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
        return new ModelAndView(new RedirectView(""String_Node_Str""));
      }
 catch (      ConceptsLockedException cle) {
        log.error(""String_Node_Str"",cle);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      }
catch (      DataIntegrityViolationException e) {
        log.error(""String_Node_Str"" + concept,e);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      }
catch (      Exception e) {
        log.error(""String_Node_Str"" + concept,e);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      }
      return new ModelAndView(new RedirectView(getSuccessView() + ""String_Node_Str"" + concept.getConceptId()));
    }
 else {
      Concept concept=conceptBackingObject.getConceptFromFormData();
      if (concept.getConceptId() != null)       concept.getCreator().getPersonName();
      try {
        new ConceptValidator().validate(concept,errors);
        if (!errors.hasErrors()) {
          cs.saveConcept(concept);
          httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
          return new ModelAndView(new RedirectView(getSuccessView() + ""String_Node_Str"" + concept.getConceptId()));
        }
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      }
 catch (      ConceptsLockedException cle) {
        log.error(""String_Node_Str"",cle);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        errors.reject(""String_Node_Str"",""String_Node_Str"");
      }
catch (      DuplicateConceptNameException e) {
        log.error(""String_Node_Str"");
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
      }
catch (      APIException e) {
        log.error(""String_Node_Str"",e);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        errors.reject(""String_Node_Str"",""String_Node_Str"");
      }
      return showForm(request,response,errors);
    }
  }
  return new ModelAndView(new RedirectView(getFormView()));
}","/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 * @should display numeric values from table
 * @should copy numeric values into numeric concepts
 * @should return a concept with a null id if no match is found
 * @should void a synonym marked as preferred when it is removed
 * @should set the local preferred name
 */
@Override protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  ConceptService cs=Context.getConceptService();
  if (Context.isAuthenticated()) {
    ConceptFormBackingObject conceptBackingObject=(ConceptFormBackingObject)obj;
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String action=request.getParameter(""String_Node_Str"");
    if (action.equals(msa.getMessage(""String_Node_Str"",""String_Node_Str""))) {
      Concept concept=conceptBackingObject.getConcept();
      try {
        cs.purgeConcept(concept);
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
        return new ModelAndView(new RedirectView(""String_Node_Str""));
      }
 catch (      ConceptsLockedException cle) {
        log.error(""String_Node_Str"",cle);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      }
catch (      DataIntegrityViolationException e) {
        log.error(""String_Node_Str"" + concept,e);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      }
catch (      Exception e) {
        log.error(""String_Node_Str"" + concept,e);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      }
      return new ModelAndView(new RedirectView(getSuccessView() + ""String_Node_Str"" + concept.getConceptId()));
    }
 else {
      Concept concept=conceptBackingObject.getConceptFromFormData();
      if (concept.getConceptId() != null)       concept.getCreator().getPersonName();
      try {
        new ConceptValidator().validate(concept,errors);
        if (!errors.hasErrors()) {
          cs.saveConcept(concept);
          httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
          return new ModelAndView(new RedirectView(getSuccessView() + ""String_Node_Str"" + concept.getConceptId()));
        }
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      }
 catch (      ConceptsLockedException cle) {
        log.error(""String_Node_Str"",cle);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        errors.reject(""String_Node_Str"",""String_Node_Str"");
      }
catch (      DuplicateConceptNameException e) {
        log.error(""String_Node_Str"",e);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
      }
catch (      APIException e) {
        log.error(""String_Node_Str"",e);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        errors.reject(""String_Node_Str"",""String_Node_Str"");
      }
      return showForm(request,response,errors);
    }
  }
  return new ModelAndView(new RedirectView(getFormView()));
}"
84504,"/** 
 * This method takes all the form data from the input boxes and puts it onto the concept object so that it can be saved to the database
 * @return the concept to be saved to the database
 */
public Concept getConceptFromFormData(){
  for (  Locale locale : locales) {
    ConceptName fullySpecifiedNameInLocale=namesByLocale.get(locale);
    if (StringUtils.hasText(fullySpecifiedNameInLocale.getName())) {
      concept.setFullySpecifiedName(fullySpecifiedNameInLocale);
      if (fullySpecifiedNameInLocale.getName().equalsIgnoreCase(preferredNamesByLocale.get(locale))) {
        concept.setPreferredName(fullySpecifiedNameInLocale);
      }
    }
    ConceptName shortNameInLocale=shortNamesByLocale.get(locale);
    if (StringUtils.hasText(shortNameInLocale.getName())) {
      concept.setShortName(shortNameInLocale);
    }
    for (    ConceptName synonym : synonymsByLocale.get(locale)) {
      if (synonym != null && StringUtils.hasText(synonym.getName())) {
        synonym.setLocale(locale);
        if (synonym.getName().equalsIgnoreCase(preferredNamesByLocale.get(locale))) {
          concept.setPreferredName(synonym);
        }
 else         if (!concept.getNames().contains(synonym) && !concept.hasName(synonym.getName(),locale)) {
          concept.addName(synonym);
        }
        if (!synonym.isVoided())         synonym.setVoidReason(null);
 else         if (synonym.isVoided() && !StringUtils.hasText(synonym.getVoidReason()))         synonym.setVoidReason(Context.getMessageSourceService().getMessage(""String_Node_Str""));
      }
    }
    for (    ConceptName indexTerm : indexTermsByLocale.get(locale)) {
      if (indexTerm != null && StringUtils.hasText(indexTerm.getName())) {
        if (!concept.getNames().contains(indexTerm) && !concept.hasName(indexTerm.getName(),locale)) {
          indexTerm.setConceptNameType(ConceptNameType.INDEX_TERM);
          indexTerm.setLocale(locale);
          concept.addName(indexTerm);
        }
        if (!indexTerm.isVoided())         indexTerm.setVoidReason(null);
 else         if (indexTerm.isVoided() && !StringUtils.hasText(indexTerm.getVoidReason()))         indexTerm.setVoidReason(Context.getMessageSourceService().getMessage(""String_Node_Str""));
      }
    }
    ConceptDescription descInLocale=descriptionsByLocale.get(locale);
    if (StringUtils.hasLength(descInLocale.getDescription()) && !concept.getDescriptions().contains(descInLocale)) {
      concept.addDescription(descInLocale);
    }
  }
  for (  ConceptMap map : mappings) {
    if (map != null) {
      if (map.getSourceCode() == null) {
        concept.removeConceptMapping(map);
      }
 else       if (!concept.getConceptMappings().contains(map)) {
        concept.addConceptMapping(map);
      }
    }
  }
  if (!concept.isSet()) {
    if (concept.getConceptSets() != null) {
      concept.getConceptSets().clear();
    }
  }
  if (!concept.getDatatype().isCoded()) {
    if (concept.getAnswers(true) != null) {
      concept.getAnswers(true).clear();
    }
  }
  if (concept.getDatatype().getName().equals(""String_Node_Str"")) {
    ConceptNumeric cn;
    if (concept instanceof ConceptNumeric)     cn=(ConceptNumeric)concept;
 else {
      cn=new ConceptNumeric(concept);
    }
    cn.setHiAbsolute(hiAbsolute);
    cn.setLowAbsolute(lowAbsolute);
    cn.setHiCritical(hiCritical);
    cn.setLowCritical(lowCritical);
    cn.setHiNormal(hiNormal);
    cn.setLowNormal(lowNormal);
    cn.setPrecise(precise);
    cn.setUnits(units);
    concept=cn;
  }
 else   if (concept.getDatatype().getName().equals(""String_Node_Str"")) {
    ConceptComplex complexConcept;
    if (concept instanceof ConceptComplex)     complexConcept=(ConceptComplex)concept;
 else {
      complexConcept=new ConceptComplex(concept);
    }
    complexConcept.setHandler(handlerKey);
    concept=complexConcept;
  }
  return concept;
}","/** 
 * This method takes all the form data from the input boxes and puts it onto the concept object so that it can be saved to the database
 * @return the concept to be saved to the database
 */
public Concept getConceptFromFormData(){
  for (  Locale locale : locales) {
    ConceptName fullySpecifiedNameInLocale=namesByLocale.get(locale);
    if (StringUtils.hasText(fullySpecifiedNameInLocale.getName())) {
      concept.setFullySpecifiedName(fullySpecifiedNameInLocale);
      if (fullySpecifiedNameInLocale.getName().equalsIgnoreCase(preferredNamesByLocale.get(locale))) {
        concept.setPreferredName(fullySpecifiedNameInLocale);
      }
    }
    ConceptName shortNameInLocale=shortNamesByLocale.get(locale);
    if (StringUtils.hasText(shortNameInLocale.getName())) {
      concept.setShortName(shortNameInLocale);
    }
    for (    ConceptName synonym : synonymsByLocale.get(locale)) {
      if (synonym != null && StringUtils.hasText(synonym.getName())) {
        synonym.setLocale(locale);
        if (synonym.getName().equalsIgnoreCase(preferredNamesByLocale.get(locale)) && !synonym.isVoided()) {
          concept.setPreferredName(synonym);
        }
 else         if (!concept.getNames().contains(synonym) && !concept.hasName(synonym.getName(),locale)) {
          concept.addName(synonym);
        }
        if (!synonym.isVoided())         synonym.setVoidReason(null);
 else         if (synonym.isVoided() && !StringUtils.hasText(synonym.getVoidReason()))         synonym.setVoidReason(Context.getMessageSourceService().getMessage(""String_Node_Str""));
      }
    }
    for (    ConceptName indexTerm : indexTermsByLocale.get(locale)) {
      if (indexTerm != null && StringUtils.hasText(indexTerm.getName())) {
        if (!concept.getNames().contains(indexTerm) && !concept.hasName(indexTerm.getName(),locale)) {
          indexTerm.setConceptNameType(ConceptNameType.INDEX_TERM);
          indexTerm.setLocale(locale);
          concept.addName(indexTerm);
        }
        if (!indexTerm.isVoided())         indexTerm.setVoidReason(null);
 else         if (indexTerm.isVoided() && !StringUtils.hasText(indexTerm.getVoidReason()))         indexTerm.setVoidReason(Context.getMessageSourceService().getMessage(""String_Node_Str""));
      }
    }
    ConceptDescription descInLocale=descriptionsByLocale.get(locale);
    if (StringUtils.hasLength(descInLocale.getDescription()) && !concept.getDescriptions().contains(descInLocale)) {
      concept.addDescription(descInLocale);
    }
  }
  for (  ConceptMap map : mappings) {
    if (map != null) {
      if (map.getSourceCode() == null) {
        concept.removeConceptMapping(map);
      }
 else       if (!concept.getConceptMappings().contains(map)) {
        concept.addConceptMapping(map);
      }
    }
  }
  if (!concept.isSet()) {
    if (concept.getConceptSets() != null) {
      concept.getConceptSets().clear();
    }
  }
  if (!concept.getDatatype().isCoded()) {
    if (concept.getAnswers(true) != null) {
      concept.getAnswers(true).clear();
    }
  }
  if (concept.getDatatype().getName().equals(""String_Node_Str"")) {
    ConceptNumeric cn;
    if (concept instanceof ConceptNumeric)     cn=(ConceptNumeric)concept;
 else {
      cn=new ConceptNumeric(concept);
    }
    cn.setHiAbsolute(hiAbsolute);
    cn.setLowAbsolute(lowAbsolute);
    cn.setHiCritical(hiCritical);
    cn.setLowCritical(lowCritical);
    cn.setHiNormal(hiNormal);
    cn.setLowNormal(lowNormal);
    cn.setPrecise(precise);
    cn.setUnits(units);
    concept=cn;
  }
 else   if (concept.getDatatype().getName().equals(""String_Node_Str"")) {
    ConceptComplex complexConcept;
    if (concept instanceof ConceptComplex)     complexConcept=(ConceptComplex)concept;
 else {
      complexConcept=new ConceptComplex(concept);
    }
    complexConcept.setHandler(handlerKey);
    concept=complexConcept;
  }
  return concept;
}"
84505,"/** 
 * Gets the destination directory for hl7 archives.
 * @return The destination directory for the hl7 in archive
 */
public static File getHl7ArchivesDirectory() throws APIException {
  return OpenmrsUtil.getDirectoryInApplicationDataDirectory(Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_HL7_ARCHIVE_DIRECTORY));
}","/** 
 * Gets the destination directory for hl7 archives.
 * @return The destination directory for the hl7 in archive
 */
public static File getHl7ArchivesDirectory() throws APIException {
  String archiveDir=Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_HL7_ARCHIVE_DIRECTORY);
  if (StringUtils.isBlank(archiveDir)) {
    log.warn(""String_Node_Str"" + OpenmrsConstants.GLOBAL_PROPERTY_HL7_ARCHIVE_DIRECTORY + ""String_Node_Str"");
    GlobalProperty gp=Context.getAdministrationService().getGlobalPropertyObject(OpenmrsConstants.GLOBAL_PROPERTY_HL7_ARCHIVE_DIRECTORY);
    gp.setPropertyValue(HL7Constants.HL7_ARCHIVE_DIRECTORY_NAME);
    gp=Context.getAdministrationService().saveGlobalProperty(gp);
    archiveDir=gp.getPropertyValue();
  }
  return OpenmrsUtil.getDirectoryInApplicationDataDirectory(archiveDir);
}"
84506,"/** 
 * At OpenMRS startup these global properties/default values/descriptions are inserted into the database if they do not exist yet.
 * @return List<GlobalProperty> of the core global properties
 */
public static final List<GlobalProperty> CORE_GLOBAL_PROPERTIES(){
  List<GlobalProperty> props=new Vector<GlobalProperty>();
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_DRUG_FREQUENCIES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_GRAPH_COLOR_ABSOLUTE,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_GRAPH_COLOR_NORMAL,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_GRAPH_COLOR_CRITICAL,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_LOCATION_WIDGET_TYPE,""String_Node_Str"",""String_Node_Str""));
  String standardRegimens=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  props.add(new GlobalProperty(GLOBAL_PROPERTY_STANDARD_DRUG_REGIMENS,standardRegimens,""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(ModuleConstants.REPOSITORY_FOLDER_PROPERTY,ModuleConstants.REPOSITORY_FOLDER_PROPERTY_DEFAULT,""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",SchedulerConstants.SCHEDULER_DEFAULT_USERNAME,""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",SchedulerConstants.SCHEDULER_DEFAULT_PASSWORD,""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_CONCEPTS_LOCKED,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_LISTING_ATTRIBUTES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_VIEWING_ATTRIBUTES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_HEADER_ATTRIBUTES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_USER_LISTING_ATTRIBUTES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_USER_VIEWING_ATTRIBUTES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_USER_HEADER_ATTRIBUTES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_REGEX,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_PREFIX,""String_Node_Str"",""String_Node_Str"" + GLOBAL_PROPERTY_PATIENT_IDENTIFIER_REGEX + ""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_SUFFIX,""String_Node_Str"",""String_Node_Str"" + GLOBAL_PROPERTY_PATIENT_IDENTIFIER_REGEX + ""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_SEARCH_PATTERN,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PERSON_SEARCH_MAX_RESULTS,String.valueOf(GLOBAL_PROPERTY_PERSON_SEARCH_MAX_RESULTS_DEFAULT_VALUE),""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_GZIP_ENABLED,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_REPORT_XML_MACROS,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_MEDICAL_RECORD_OBSERVATIONS,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PROBLEM_LIST,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_LOG_LEVEL,LOG_LEVEL_INFO,""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_DEFAULT_PATIENT_IDENTIFIER_VALIDATOR,LUHN_IDENTIFIER_VALIDATOR,""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_IMPORTANT_TYPES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_COMPLEX_OBS_DIR,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_ENCOUNTER_FORM_OBS_SORT_ORDER,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_NEWPATIENTFORM_RELATIONSHIPS,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_MIN_SEARCH_CHARACTERS,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE,OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE_DEFAULT_VALUE,""String_Node_Str""));
  props.add(new GlobalProperty(GP_PASSWORD_CANNOT_MATCH_USERNAME_OR_SYSTEMID,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_PASSWORD_CUSTOM_REGEX,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_PASSWORD_MINIMUM_LENGTH,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_PASSWORD_REQUIRES_DIGIT,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_PASSWORD_REQUIRES_NON_DIGIT,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_PASSWORD_REQUIRES_UPPER_AND_LOWER_CASE,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_IGNORE_MISSING_NONLOCAL_PATIENTS,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_SHOW_PATIENT_NAME,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_DEFAULT_THEME,""String_Node_Str"",""String_Node_Str""));
  for (  GlobalProperty gp : ModuleFactory.getGlobalProperties()) {
    props.add(gp);
  }
  return props;
}","/** 
 * At OpenMRS startup these global properties/default values/descriptions are inserted into the database if they do not exist yet.
 * @return List<GlobalProperty> of the core global properties
 */
public static final List<GlobalProperty> CORE_GLOBAL_PROPERTIES(){
  List<GlobalProperty> props=new Vector<GlobalProperty>();
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_DRUG_FREQUENCIES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_GRAPH_COLOR_ABSOLUTE,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_GRAPH_COLOR_NORMAL,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_GRAPH_COLOR_CRITICAL,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_LOCATION_WIDGET_TYPE,""String_Node_Str"",""String_Node_Str""));
  String standardRegimens=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  props.add(new GlobalProperty(GLOBAL_PROPERTY_STANDARD_DRUG_REGIMENS,standardRegimens,""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(ModuleConstants.REPOSITORY_FOLDER_PROPERTY,ModuleConstants.REPOSITORY_FOLDER_PROPERTY_DEFAULT,""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",SchedulerConstants.SCHEDULER_DEFAULT_USERNAME,""String_Node_Str""));
  props.add(new GlobalProperty(""String_Node_Str"",SchedulerConstants.SCHEDULER_DEFAULT_PASSWORD,""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_CONCEPTS_LOCKED,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_LISTING_ATTRIBUTES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_VIEWING_ATTRIBUTES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_HEADER_ATTRIBUTES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_USER_LISTING_ATTRIBUTES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_USER_VIEWING_ATTRIBUTES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_USER_HEADER_ATTRIBUTES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_REGEX,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_PREFIX,""String_Node_Str"",""String_Node_Str"" + GLOBAL_PROPERTY_PATIENT_IDENTIFIER_REGEX + ""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_SUFFIX,""String_Node_Str"",""String_Node_Str"" + GLOBAL_PROPERTY_PATIENT_IDENTIFIER_REGEX + ""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_SEARCH_PATTERN,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PERSON_SEARCH_MAX_RESULTS,String.valueOf(GLOBAL_PROPERTY_PERSON_SEARCH_MAX_RESULTS_DEFAULT_VALUE),""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_GZIP_ENABLED,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_REPORT_XML_MACROS,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_MEDICAL_RECORD_OBSERVATIONS,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PROBLEM_LIST,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_LOG_LEVEL,LOG_LEVEL_INFO,""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_DEFAULT_PATIENT_IDENTIFIER_VALIDATOR,LUHN_IDENTIFIER_VALIDATOR,""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_IMPORTANT_TYPES,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_COMPLEX_OBS_DIR,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_ENCOUNTER_FORM_OBS_SORT_ORDER,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_NEWPATIENTFORM_RELATIONSHIPS,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_MIN_SEARCH_CHARACTERS,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE,OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE_DEFAULT_VALUE,""String_Node_Str""));
  props.add(new GlobalProperty(GP_PASSWORD_CANNOT_MATCH_USERNAME_OR_SYSTEMID,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_PASSWORD_CUSTOM_REGEX,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_PASSWORD_MINIMUM_LENGTH,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_PASSWORD_REQUIRES_DIGIT,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_PASSWORD_REQUIRES_NON_DIGIT,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GP_PASSWORD_REQUIRES_UPPER_AND_LOWER_CASE,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_IGNORE_MISSING_NONLOCAL_PATIENTS,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_SHOW_PATIENT_NAME,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_DEFAULT_THEME,""String_Node_Str"",""String_Node_Str""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_HL7_ARCHIVE_DIRECTORY,HL7Constants.HL7_ARCHIVE_DIRECTORY_NAME,""String_Node_Str""));
  for (  GlobalProperty gp : ModuleFactory.getGlobalProperties()) {
    props.add(gp);
  }
  return props;
}"
84507,"/** 
 * creates a concept
 * @param connection a DatabaseConnection
 * @param conceptName the name of the concept to create
 * @throws CustomChangeException
 */
private void createConcept(DatabaseConnection connection,String conceptName) throws CustomChangeException {
  PreparedStatement updateStatement=null;
  try {
    final int conceptId=getInt(connection,""String_Node_Str"");
    updateStatement=connection.prepareStatement(""String_Node_Str"");
    updateStatement.setInt(1,conceptId);
    updateStatement.setString(2,UUID.randomUUID().toString());
    updateStatement.executeUpdate();
    final int conceptNameId=getInt(connection,""String_Node_Str"");
    updateStatement=connection.prepareStatement(""String_Node_Str"");
    updateStatement.setInt(1,conceptNameId);
    updateStatement.setInt(2,conceptId);
    updateStatement.setString(3,conceptName);
    updateStatement.setString(4,UUID.randomUUID().toString());
    updateStatement.executeUpdate();
    updateStatement=connection.prepareStatement(""String_Node_Str"");
    updateStatement.setInt(1,conceptNameId);
    updateStatement.executeUpdate();
    updateStatement=connection.prepareStatement(""String_Node_Str"");
    updateStatement.setInt(1,conceptId);
    updateStatement.setString(2,conceptName);
    updateStatement.setInt(3,conceptNameId);
    updateStatement.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CustomChangeException(""String_Node_Str"" + conceptName,e);
  }
 finally {
    if (updateStatement != null) {
      try {
        updateStatement.close();
      }
 catch (      SQLException e) {
      }
    }
  }
}","/** 
 * creates a concept
 * @param connection a DatabaseConnection
 * @param conceptName the name of the concept to create
 * @throws CustomChangeException
 */
private void createConcept(DatabaseConnection connection,String conceptName) throws CustomChangeException {
  PreparedStatement updateStatement=null;
  try {
    int conceptId=getInt(connection,""String_Node_Str"");
    conceptId++;
    updateStatement=connection.prepareStatement(""String_Node_Str"");
    updateStatement.setInt(1,conceptId);
    updateStatement.setString(2,UUID.randomUUID().toString());
    updateStatement.executeUpdate();
    int conceptNameId=getInt(connection,""String_Node_Str"");
    conceptNameId++;
    updateStatement=connection.prepareStatement(""String_Node_Str"");
    updateStatement.setInt(1,conceptNameId);
    updateStatement.setInt(2,conceptId);
    updateStatement.setString(3,conceptName);
    updateStatement.setString(4,UUID.randomUUID().toString());
    updateStatement.executeUpdate();
    updateStatement=connection.prepareStatement(""String_Node_Str"");
    updateStatement.setInt(1,conceptNameId);
    updateStatement.executeUpdate();
    updateStatement=connection.prepareStatement(""String_Node_Str"");
    updateStatement.setInt(1,conceptId);
    updateStatement.setString(2,conceptName);
    updateStatement.setInt(3,conceptNameId);
    updateStatement.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CustomChangeException(""String_Node_Str"" + conceptName,e);
  }
 finally {
    if (updateStatement != null) {
      try {
        updateStatement.close();
      }
 catch (      SQLException e) {
      }
    }
  }
}"
84508,"/** 
 * @see liquibase.change.custom.CustomTaskChange#execute(liquibase.database.Database)
 */
public void execute(Database database) throws CustomChangeException, UnsupportedChangeException {
  DatabaseConnection connection=database.getConnection();
  String trueConceptName=""String_Node_Str"";
  String falseConceptName=""String_Node_Str"";
  final boolean trueFalseGlobalPropertiesPresent=getInt(connection,""String_Node_Str"" + OpenmrsConstants.GLOBAL_PROPERTY_TRUE_CONCEPT + ""String_Node_Str""+ OpenmrsConstants.GLOBAL_PROPERTY_FALSE_CONCEPT+ ""String_Node_Str"") == 2;
  for (  String[] trueFalseConceptNames : BOOLEAN_CONCEPTS_VALUES) {
    trueConceptName=trueFalseConceptNames[0];
    falseConceptName=trueFalseConceptNames[1];
    final boolean conceptNamesPresent=getInt(connection,""String_Node_Str"" + trueConceptName + ""String_Node_Str""+ falseConceptName+ ""String_Node_Str"") == 2;
    if (conceptNamesPresent) {
      if (!trueFalseGlobalPropertiesPresent)       createGlobalProperties(connection,trueConceptName,falseConceptName);
      changeObs(connection,trueConceptName,falseConceptName);
      return;
    }
  }
  trueConceptName=BOOLEAN_CONCEPTS_VALUES[0][0];
  falseConceptName=BOOLEAN_CONCEPTS_VALUES[0][1];
  if (!trueFalseGlobalPropertiesPresent)   createConcepts(connection,trueConceptName,falseConceptName);
  createGlobalProperties(connection,trueConceptName,falseConceptName);
  changeObs(connection,trueConceptName,falseConceptName);
}","/** 
 * @see liquibase.change.custom.CustomTaskChange#execute(liquibase.database.Database)
 */
public void execute(Database database) throws CustomChangeException, UnsupportedChangeException {
  DatabaseConnection connection=database.getConnection();
  String trueConceptName=""String_Node_Str"";
  String falseConceptName=""String_Node_Str"";
  final boolean trueFalseGlobalPropertiesPresent=getInt(connection,""String_Node_Str"" + OpenmrsConstants.GLOBAL_PROPERTY_TRUE_CONCEPT + ""String_Node_Str""+ OpenmrsConstants.GLOBAL_PROPERTY_FALSE_CONCEPT+ ""String_Node_Str"") == 2;
  for (  String[] trueFalseConceptNames : BOOLEAN_CONCEPTS_VALUES) {
    trueConceptName=trueFalseConceptNames[0];
    falseConceptName=trueFalseConceptNames[1];
    final boolean conceptNamesPresent=getInt(connection,""String_Node_Str"" + trueConceptName + ""String_Node_Str""+ falseConceptName+ ""String_Node_Str"") == 2;
    if (conceptNamesPresent) {
      if (!trueFalseGlobalPropertiesPresent)       createGlobalProperties(connection,trueConceptName,falseConceptName);
      changeObs(connection,trueConceptName,falseConceptName);
      return;
    }
  }
  trueConceptName=BOOLEAN_CONCEPTS_VALUES[0][0];
  falseConceptName=BOOLEAN_CONCEPTS_VALUES[0][1];
  createConcepts(connection,trueConceptName,falseConceptName);
  if (!trueFalseGlobalPropertiesPresent)   createGlobalProperties(connection,trueConceptName,falseConceptName);
  changeObs(connection,trueConceptName,falseConceptName);
}"
84509,"/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  Patient patient=(Patient)obj;
  if (Context.isAuthenticated()) {
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String action=request.getParameter(""String_Node_Str"");
    PatientService ps=Context.getPatientService();
    if (action.equals(msa.getMessage(""String_Node_Str""))) {
      try {
        ps.purgePatient(patient);
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
        return new ModelAndView(new RedirectView(""String_Node_Str""));
      }
 catch (      APIException e) {
        log.error(e);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        return new ModelAndView(new RedirectView(getSuccessView() + ""String_Node_Str"" + patient.getPatientId().toString()));
      }
    }
 else {
      boolean isError=false;
      try {
        Context.getPatientService().savePatient(patient);
      }
 catch (      InvalidIdentifierFormatException iife) {
        log.error(iife);
        patient.removeIdentifier(iife.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      IdentifierNotUniqueException inue) {
        log.error(inue);
        patient.removeIdentifier(inue.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      DuplicateIdentifierException die) {
        log.error(die);
        patient.removeIdentifier(die.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      InsufficientIdentifiersException iie) {
        log.error(iie);
        patient.removeIdentifier(iie.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      PatientIdentifierException pie) {
        log.error(pie);
        patient.removeIdentifier(pie.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
      if (patient.getDead() && !isError) {
        log.debug(""String_Node_Str"");
        String causeOfDeathConceptId=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
        Concept causeOfDeath=Context.getConceptService().getConcept(causeOfDeathConceptId);
        if (causeOfDeath != null) {
          List<Obs> obssDeath=Context.getObsService().getObservationsByPersonAndConcept(patient,causeOfDeath);
          if (obssDeath != null) {
            if (obssDeath.size() > 1) {
              log.error(""String_Node_Str"" + obssDeath.size() + ""String_Node_Str"");
            }
 else {
              Obs obsDeath=null;
              if (obssDeath.size() == 1) {
                log.debug(""String_Node_Str"");
                obsDeath=obssDeath.iterator().next();
              }
 else {
                log.debug(""String_Node_Str"");
                obsDeath=new Obs();
                obsDeath.setPerson(patient);
                obsDeath.setConcept(causeOfDeath);
                Location location=Context.getLocationService().getDefaultLocation();
                if (location != null)                 obsDeath.setLocation(location);
 else                 log.error(""String_Node_Str"");
              }
              Concept currCause=patient.getCauseOfDeath();
              if (currCause == null) {
                log.debug(""String_Node_Str"");
                String noneConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                currCause=Context.getConceptService().getConcept(noneConcept);
              }
              if (currCause != null) {
                log.debug(""String_Node_Str"");
                obsDeath.setValueCoded(currCause);
                obsDeath.setValueCodedName(currCause.getName());
                Date dateDeath=patient.getDeathDate();
                if (dateDeath == null)                 dateDeath=new Date();
                obsDeath.setObsDatetime(dateDeath);
                String otherConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                Concept conceptOther=Context.getConceptService().getConcept(otherConcept);
                if (conceptOther != null) {
                  if (conceptOther.equals(currCause)) {
                    String otherInfo=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
                    log.debug(""String_Node_Str"" + otherInfo);
                    obsDeath.setValueText(otherInfo);
                  }
 else {
                    log.debug(""String_Node_Str"");
                    obsDeath.setValueText(""String_Node_Str"");
                  }
                }
 else {
                  log.debug(""String_Node_Str"");
                  obsDeath.setValueText(""String_Node_Str"");
                }
                Context.getObsService().saveObs(obsDeath,obsDeath.getVoidReason());
              }
 else {
                log.debug(""String_Node_Str"");
              }
            }
          }
        }
 else {
          log.debug(""String_Node_Str"");
        }
      }
      if (!isError) {
        String view=getSuccessView();
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
        view=view + ""String_Node_Str"" + patient.getPatientId();
        return new ModelAndView(new RedirectView(view));
      }
 else {
        return showForm(request,response,errors);
      }
    }
  }
  return new ModelAndView(new RedirectView(getFormView()));
}","/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  Patient patient=(Patient)obj;
  if (Context.isAuthenticated()) {
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String action=request.getParameter(""String_Node_Str"");
    PatientService ps=Context.getPatientService();
    if (action.equals(msa.getMessage(""String_Node_Str""))) {
      try {
        ps.purgePatient(patient);
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
        return new ModelAndView(new RedirectView(""String_Node_Str""));
      }
 catch (      APIException e) {
        log.error(e);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        return new ModelAndView(new RedirectView(getSuccessView() + ""String_Node_Str"" + patient.getPatientId().toString()));
      }
    }
 else {
      boolean isError=false;
      try {
        Context.getPatientService().savePatient(patient);
      }
 catch (      InvalidIdentifierFormatException iife) {
        log.error(iife);
        patient.removeIdentifier(iife.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      IdentifierNotUniqueException inue) {
        log.error(inue);
        patient.removeIdentifier(inue.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      DuplicateIdentifierException die) {
        log.error(die);
        patient.removeIdentifier(die.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      InsufficientIdentifiersException iie) {
        log.error(iie);
        patient.removeIdentifier(iie.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      PatientIdentifierException pie) {
        log.error(pie);
        patient.removeIdentifier(pie.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
      if (patient.getDead() && !isError) {
        log.debug(""String_Node_Str"");
        String causeOfDeathConceptId=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
        Concept causeOfDeath=Context.getConceptService().getConcept(causeOfDeathConceptId);
        if (causeOfDeath != null) {
          List<Obs> obssDeath=Context.getObsService().getObservationsByPersonAndConcept(patient,causeOfDeath);
          if (obssDeath != null) {
            if (obssDeath.size() > 1) {
              log.error(""String_Node_Str"" + obssDeath.size() + ""String_Node_Str"");
            }
 else {
              Obs obsDeath=null;
              if (obssDeath.size() == 1) {
                log.debug(""String_Node_Str"");
                obsDeath=obssDeath.iterator().next();
              }
 else {
                log.debug(""String_Node_Str"");
                obsDeath=new Obs();
                obsDeath.setPerson(patient);
                obsDeath.setConcept(causeOfDeath);
                Location location=Context.getLocationService().getDefaultLocation();
                if (location != null)                 obsDeath.setLocation(location);
 else                 log.error(""String_Node_Str"");
              }
              Concept currCause=patient.getCauseOfDeath();
              if (currCause == null) {
                log.debug(""String_Node_Str"");
                String noneConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                currCause=Context.getConceptService().getConcept(noneConcept);
              }
              if (currCause != null) {
                log.debug(""String_Node_Str"");
                obsDeath.setValueCoded(currCause);
                obsDeath.setValueCodedName(currCause.getName());
                Date dateDeath=patient.getDeathDate();
                if (dateDeath == null)                 dateDeath=new Date();
                obsDeath.setObsDatetime(dateDeath);
                String otherConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                Concept conceptOther=Context.getConceptService().getConcept(otherConcept);
                boolean deathReasonChanged=false;
                if (conceptOther != null) {
                  String otherInfo=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
                  if (conceptOther.equals(currCause)) {
                    deathReasonChanged=!otherInfo.equals(obsDeath.getValueText());
                    log.debug(""String_Node_Str"" + otherInfo);
                    obsDeath.setValueText(otherInfo);
                  }
 else {
                    deathReasonChanged=!otherInfo.equals(""String_Node_Str"");
                    log.debug(""String_Node_Str"");
                    obsDeath.setValueText(""String_Node_Str"");
                  }
                }
 else {
                  log.debug(""String_Node_Str"");
                  obsDeath.setValueText(""String_Node_Str"");
                }
                boolean shouldSaveObs=(null == obsDeath.getId()) || deathReasonChanged;
                if (shouldSaveObs) {
                  if (null == obsDeath.getVoidReason())                   obsDeath.setVoidReason(""String_Node_Str"");
                  Context.getObsService().saveObs(obsDeath,obsDeath.getVoidReason());
                }
              }
 else {
                log.debug(""String_Node_Str"");
              }
            }
          }
        }
 else {
          log.debug(""String_Node_Str"");
        }
      }
      if (!isError) {
        String view=getSuccessView();
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
        view=view + ""String_Node_Str"" + patient.getPatientId();
        return new ModelAndView(new RedirectView(view));
      }
 else {
        return showForm(request,response,errors);
      }
    }
  }
  return new ModelAndView(new RedirectView(getFormView()));
}"
84510,"/** 
 * Authenticate user with the given username and password.
 * @param username user's username or systemId
 * @param password user's password
 * @return a valid user if authentication succeeds
 * @throws ContextAuthenticationException
 * @should authenticate given username and password
 * @should authenticate given systemId and password
 * @should authenticate given systemId without hyphen and password
 * @should not authenticate given username and incorrect password
 * @should not authenticate given systemId and incorrect password
 * @should not authenticate given incorrect username
 * @should not authenticate given incorrect systemId
 * @should not authenticate given null login
 * @should not authenticate given empty login
 * @should not authenticate given null password when password in database is null
 * @should not authenticate given non null password when password in database is null
 * @should not authenticate when password in database is empty
 * @should give identical error messages between username and password mismatch
 * @should lockout user after eight failed attempts
 * @should authenticateWithCorrectHashedPassword
 * @should authenticateWithIncorrectHashedPassword
 * @should set uuid on user property when authentication fails with valid user
 * @should pass regression test for 1580 
 */
@Transactional(noRollbackFor=ContextAuthenticationException.class) public User authenticate(String username,String password) throws ContextAuthenticationException ;","/** 
 * Authenticate user with the given username and password.
 * @param username user's username or systemId
 * @param password user's password
 * @return a valid user if authentication succeeds
 * @throws ContextAuthenticationException
 * @should authenticate given username and password
 * @should authenticate given systemId and password
 * @should authenticate given systemId without hyphen and password
 * @should not authenticate given username and incorrect password
 * @should not authenticate given systemId and incorrect password
 * @should not authenticate given incorrect username
 * @should not authenticate given incorrect systemId
 * @should not authenticate given null login
 * @should not authenticate given empty login
 * @should not authenticate given null password when password in database is null
 * @should not authenticate given non null password when password in database is null
 * @should not authenticate when password in database is empty
 * @should give identical error messages between username and password mismatch
 * @should lockout user after eight failed attempts
 * @should authenticateWithCorrectHashedPassword
 * @should authenticateWithIncorrectHashedPassword
 * @should set uuid on user property when authentication fails with valid user
 * @should pass regression test for 1580 
 * @should throw a ContextAuthenticationException if username is an empty string
 * @should should throw a ContextAuthenticationException if username is white space
 */
@Transactional(noRollbackFor=ContextAuthenticationException.class) public User authenticate(String username,String password) throws ContextAuthenticationException ;"
84511,"/** 
 * @see org.openmrs.api.db.ContextDAO#authenticate(java.lang.String,java.lang.String)
 */
public User authenticate(String login,String password) throws ContextAuthenticationException {
  String errorMsg=""String_Node_Str"" + login;
  Session session=sessionFactory.getCurrentSession();
  User candidateUser=null;
  if (login != null) {
    String loginWithDash=login;
    if (login.matches(""String_Node_Str""))     loginWithDash=login.substring(0,login.length() - 1) + ""String_Node_Str"" + login.charAt(login.length() - 1);
    try {
      candidateUser=(User)session.createQuery(""String_Node_Str"").setString(0,login).setString(1,login).setString(2,loginWithDash).uniqueResult();
    }
 catch (    HibernateException he) {
      log.error(""String_Node_Str"" + login + ""String_Node_Str"",he);
    }
catch (    Exception e) {
      log.error(""String_Node_Str"" + login + ""String_Node_Str"",e);
    }
  }
  if (candidateUser != null && password != null) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + candidateUser.getUserId());
    String lockoutTimeString=candidateUser.getUserProperty(OpenmrsConstants.USER_PROPERTY_LOCKOUT_TIMESTAMP,null);
    Long lockoutTime=null;
    if (lockoutTimeString != null && !lockoutTimeString.equals(""String_Node_Str""))     lockoutTime=Long.valueOf(lockoutTimeString);
    if (lockoutTime != null) {
      if (new Date().getTime() - lockoutTime > 300000) {
        candidateUser.setUserProperty(OpenmrsConstants.USER_PROPERTY_LOGIN_ATTEMPTS,""String_Node_Str"");
        candidateUser.removeUserProperty(OpenmrsConstants.USER_PROPERTY_LOCKOUT_TIMESTAMP);
        saveUserProperties(candidateUser);
      }
 else {
        candidateUser.setUserProperty(OpenmrsConstants.USER_PROPERTY_LOCKOUT_TIMESTAMP,String.valueOf(new Date().getTime()));
        throw new ContextAuthenticationException(""String_Node_Str"");
      }
    }
    String passwordOnRecord=(String)session.createSQLQuery(""String_Node_Str"").addScalar(""String_Node_Str"",Hibernate.STRING).setInteger(0,candidateUser.getUserId()).uniqueResult();
    String saltOnRecord=(String)session.createSQLQuery(""String_Node_Str"").addScalar(""String_Node_Str"",Hibernate.STRING).setInteger(0,candidateUser.getUserId()).uniqueResult();
    if (passwordOnRecord != null && Security.hashMatches(passwordOnRecord,password + saltOnRecord)) {
      candidateUser.getAllRoles().size();
      candidateUser.getUserProperties().size();
      candidateUser.getPrivileges().size();
      Integer attempts=getUsersLoginAttempts(candidateUser);
      if (attempts > 0) {
        candidateUser.setUserProperty(OpenmrsConstants.USER_PROPERTY_LOGIN_ATTEMPTS,""String_Node_Str"");
        candidateUser.removeUserProperty(OpenmrsConstants.USER_PROPERTY_LOCKOUT_TIMESTAMP);
        saveUserProperties(candidateUser);
      }
      return candidateUser;
    }
 else {
      Integer attempts=getUsersLoginAttempts(candidateUser);
      attempts++;
      if (attempts >= 8) {
        candidateUser.setUserProperty(OpenmrsConstants.USER_PROPERTY_LOCKOUT_TIMESTAMP,String.valueOf(new Date().getTime()));
      }
 else {
        candidateUser.setUserProperty(OpenmrsConstants.USER_PROPERTY_LOGIN_ATTEMPTS,String.valueOf(attempts));
      }
      saveUserProperties(candidateUser);
    }
  }
  log.info(""String_Node_Str"" + login + ""String_Node_Str""+ errorMsg);
  throw new ContextAuthenticationException(errorMsg);
}","/** 
 * @see org.openmrs.api.db.ContextDAO#authenticate(java.lang.String,java.lang.String)
 */
public User authenticate(String login,String password) throws ContextAuthenticationException {
  String errorMsg=""String_Node_Str"" + login;
  Session session=sessionFactory.getCurrentSession();
  User candidateUser=null;
  if (login != null) {
    if (StringUtils.isEmpty(login) || StringUtils.isWhitespace(login))     throw new ContextAuthenticationException(errorMsg);
    String loginWithDash=login;
    if (login.matches(""String_Node_Str""))     loginWithDash=login.substring(0,login.length() - 1) + ""String_Node_Str"" + login.charAt(login.length() - 1);
    try {
      candidateUser=(User)session.createQuery(""String_Node_Str"").setString(0,login).setString(1,login).setString(2,loginWithDash).uniqueResult();
    }
 catch (    HibernateException he) {
      log.error(""String_Node_Str"" + login + ""String_Node_Str"",he);
    }
catch (    Exception e) {
      log.error(""String_Node_Str"" + login + ""String_Node_Str"",e);
    }
  }
  if (candidateUser != null && password != null) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + candidateUser.getUserId());
    String lockoutTimeString=candidateUser.getUserProperty(OpenmrsConstants.USER_PROPERTY_LOCKOUT_TIMESTAMP,null);
    Long lockoutTime=null;
    if (lockoutTimeString != null && !lockoutTimeString.equals(""String_Node_Str""))     lockoutTime=Long.valueOf(lockoutTimeString);
    if (lockoutTime != null) {
      if (new Date().getTime() - lockoutTime > 300000) {
        candidateUser.setUserProperty(OpenmrsConstants.USER_PROPERTY_LOGIN_ATTEMPTS,""String_Node_Str"");
        candidateUser.removeUserProperty(OpenmrsConstants.USER_PROPERTY_LOCKOUT_TIMESTAMP);
        saveUserProperties(candidateUser);
      }
 else {
        candidateUser.setUserProperty(OpenmrsConstants.USER_PROPERTY_LOCKOUT_TIMESTAMP,String.valueOf(new Date().getTime()));
        throw new ContextAuthenticationException(""String_Node_Str"");
      }
    }
    String passwordOnRecord=(String)session.createSQLQuery(""String_Node_Str"").addScalar(""String_Node_Str"",Hibernate.STRING).setInteger(0,candidateUser.getUserId()).uniqueResult();
    String saltOnRecord=(String)session.createSQLQuery(""String_Node_Str"").addScalar(""String_Node_Str"",Hibernate.STRING).setInteger(0,candidateUser.getUserId()).uniqueResult();
    if (passwordOnRecord != null && Security.hashMatches(passwordOnRecord,password + saltOnRecord)) {
      candidateUser.getAllRoles().size();
      candidateUser.getUserProperties().size();
      candidateUser.getPrivileges().size();
      Integer attempts=getUsersLoginAttempts(candidateUser);
      if (attempts > 0) {
        candidateUser.setUserProperty(OpenmrsConstants.USER_PROPERTY_LOGIN_ATTEMPTS,""String_Node_Str"");
        candidateUser.removeUserProperty(OpenmrsConstants.USER_PROPERTY_LOCKOUT_TIMESTAMP);
        saveUserProperties(candidateUser);
      }
      return candidateUser;
    }
 else {
      Integer attempts=getUsersLoginAttempts(candidateUser);
      attempts++;
      if (attempts >= 8) {
        candidateUser.setUserProperty(OpenmrsConstants.USER_PROPERTY_LOCKOUT_TIMESTAMP,String.valueOf(new Date().getTime()));
      }
 else {
        candidateUser.setUserProperty(OpenmrsConstants.USER_PROPERTY_LOGIN_ATTEMPTS,String.valueOf(attempts));
      }
      saveUserProperties(candidateUser);
    }
  }
  log.info(""String_Node_Str"" + login + ""String_Node_Str""+ errorMsg);
  throw new ContextAuthenticationException(errorMsg);
}"
84512,"/** 
 * @see {@link UserFormController#handleSubmission(WebRequest,HttpSession,String,String,String,null,User,BindingResult)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void handleSubmission_shouldWorkForAnExample() throws Exception {
  UserFormController controller=new UserFormController();
  WebRequest request=new ServletWebRequest(new MockHttpServletRequest());
  User user=controller.formBackingObject(request,null);
  user.addName(new PersonName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  user.getPerson().setGender(""String_Node_Str"");
  controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[0],user,new BindException(user,""String_Node_Str""));
}","/** 
 * @see {@link UserFormController#handleSubmission(WebRequest,HttpSession,String,String,String,null,User,BindingResult)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void handleSubmission_shouldWorkForAnExample() throws Exception {
  UserFormController controller=new UserFormController();
  WebRequest request=new ServletWebRequest(new MockHttpServletRequest());
  User user=controller.formBackingObject(request,null);
  user.addName(new PersonName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  user.getPerson().setGender(""String_Node_Str"");
  controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[0],""String_Node_Str"",user,new BindException(user,""String_Node_Str""));
}"
84513,"/** 
 * This is called prior to displaying a form for the first time. It tells Spring the form/command object to load into the request
 * @see org.springframework.web.servlet.mvc.AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
 */
@Override protected List<PersonListItem> formBackingObject(HttpServletRequest request) throws ServletException {
  log.debug(""String_Node_Str"");
  List<PersonListItem> personList=new Vector<PersonListItem>();
  if (Context.isAuthenticated()) {
    PersonService ps=Context.getPersonService();
    Integer userId=Context.getAuthenticatedUser().getUserId();
    getParametersFromRequest(request);
    log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ birthdate+ ""String_Node_Str""+ age+ ""String_Node_Str""+ gender);
    if (!name.equals(""String_Node_Str"") || !birthdate.equals(""String_Node_Str"") || !age.equals(""String_Node_Str"")|| !gender.equals(""String_Node_Str"")) {
      log.info(userId + ""String_Node_Str"" + name+ ""String_Node_Str""+ birthdate+ ""String_Node_Str""+ age+ ""String_Node_Str""+ gender);
      Integer d=null;
      birthdate=birthdate.trim();
      String birthyear=""String_Node_Str"";
      if (birthdate.length() > 6)       birthyear=birthdate.substring(6);
      age=age.trim();
      if (birthyear.length() > 3)       d=Integer.valueOf(birthyear);
 else       if (age.length() > 0) {
        Calendar c=Calendar.getInstance();
        c.setTime(new Date());
        d=c.get(Calendar.YEAR);
        d=d - Integer.parseInt(age);
      }
      if (gender.length() < 1)       gender=null;
      personList=new Vector<PersonListItem>();
      for (      Person p : ps.getSimilarPeople(name,d,gender)) {
        personList.add(PersonListItem.createBestMatch(p));
      }
    }
  }
  log.debug(""String_Node_Str"" + personList.size() + ""String_Node_Str"");
  return personList;
}","/** 
 * This is called prior to displaying a form for the first time. It tells Spring the form/command object to load into the request
 * @see org.springframework.web.servlet.mvc.AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
 */
@Override protected List<PersonListItem> formBackingObject(HttpServletRequest request) throws ServletException {
  log.debug(""String_Node_Str"");
  List<PersonListItem> personList=new Vector<PersonListItem>();
  if (Context.isAuthenticated()) {
    PersonService ps=Context.getPersonService();
    Integer userId=Context.getAuthenticatedUser().getUserId();
    invalidAgeFormat=false;
    getParametersFromRequest(request);
    log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ birthdate+ ""String_Node_Str""+ age+ ""String_Node_Str""+ gender);
    if (!name.equals(""String_Node_Str"") || !birthdate.equals(""String_Node_Str"") || !age.equals(""String_Node_Str"")|| !gender.equals(""String_Node_Str"")) {
      log.info(userId + ""String_Node_Str"" + name+ ""String_Node_Str""+ birthdate+ ""String_Node_Str""+ age+ ""String_Node_Str""+ gender);
      Integer d=null;
      birthdate=birthdate.trim();
      String birthyear=""String_Node_Str"";
      if (birthdate.length() > 6)       birthyear=birthdate.substring(6);
      age=age.trim();
      if (birthyear.length() > 3)       d=Integer.valueOf(birthyear);
 else       if (age.length() > 0) {
        Calendar c=Calendar.getInstance();
        c.setTime(new Date());
        d=c.get(Calendar.YEAR);
        try {
          d=d - Integer.parseInt(age);
        }
 catch (        NumberFormatException e) {
          invalidAgeFormat=true;
        }
      }
      if (gender.length() < 1)       gender=null;
      personList=new Vector<PersonListItem>();
      for (      Person p : ps.getSimilarPeople(name,d,gender)) {
        personList.add(PersonListItem.createBestMatch(p));
      }
    }
  }
  log.debug(""String_Node_Str"" + personList.size() + ""String_Node_Str"");
  return personList;
}"
84514,"/** 
 * Prepares the form view
 */
public ModelAndView showForm(HttpServletRequest request,HttpServletResponse response,BindException errors) throws Exception {
  log.debug(""String_Node_Str"");
  ModelAndView mav=super.showForm(request,response,errors);
  Object o=mav.getModel().get(this.getCommandName());
  List personList=(List)o;
  log.debug(""String_Node_Str"" + personList.size());
  if (personList.size() < 1 && Context.isAuthenticated()) {
    getParametersFromRequest(request);
    if (viewType == null)     viewType=""String_Node_Str"";
    log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ birthdate+ ""String_Node_Str""+ age+ ""String_Node_Str""+ gender);
    if (!name.equals(""String_Node_Str"") || !birthdate.equals(""String_Node_Str"") || !age.equals(""String_Node_Str"")|| !gender.equals(""String_Node_Str"")) {
      mav.clear();
      mav.setView(new RedirectView(getPersonURL(""String_Node_Str"",personType,viewType,request)));
    }
  }
  return mav;
}","/** 
 * Prepares the form view
 */
public ModelAndView showForm(HttpServletRequest request,HttpServletResponse response,BindException errors) throws Exception {
  log.debug(""String_Node_Str"");
  ModelAndView mav=super.showForm(request,response,errors);
  if (invalidAgeFormat) {
    mav=new ModelAndView(FORM_ENTRY_ERROR_URL);
    mav.addObject(""String_Node_Str"",""String_Node_Str"");
    mav.addObject(""String_Node_Str"",""String_Node_Str"");
    return mav;
  }
  Object o=mav.getModel().get(this.getCommandName());
  List personList=(List)o;
  log.debug(""String_Node_Str"" + personList.size());
  if (personList.size() < 1 && Context.isAuthenticated()) {
    getParametersFromRequest(request);
    if (viewType == null)     viewType=""String_Node_Str"";
    log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ birthdate+ ""String_Node_Str""+ age+ ""String_Node_Str""+ gender);
    if (!name.equals(""String_Node_Str"") || !birthdate.equals(""String_Node_Str"") || !age.equals(""String_Node_Str"")|| !gender.equals(""String_Node_Str"")) {
      mav.clear();
      mav.setView(new RedirectView(getPersonURL(""String_Node_Str"",personType,viewType,request)));
    }
  }
  return mav;
}"
84515,"public static String escapeQuotesAndNewlines(String s){
  if (s == null)   return ""String_Node_Str"";
  s=s.replace(""String_Node_Str"",""String_Node_Str"");
  s=s.replace(""String_Node_Str"",""String_Node_Str"");
  return s;
}","public static String escapeQuotesAndNewlines(String s){
  if (s == null)   return ""String_Node_Str"";
  s=s.replace(""String_Node_Str"",""String_Node_Str"");
  s=s.replace(""String_Node_Str"",""String_Node_Str"");
  s=s.replace(""String_Node_Str"",""String_Node_Str"");
  return s;
}"
84516,"/** 
 * @see org.springframework.web.servlet.mvc.AbstractFormController#processFormSubmission(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView processFormSubmission(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  Person person=(Person)obj;
  if (!Context.isAuthenticated()) {
    errors.reject(""String_Node_Str"");
  }
 else {
    if (person.getPersonName().getGivenName() == ""String_Node_Str"")     errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    if (person.getPersonName().getFamilyName() == ""String_Node_Str"")     errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    if (person.getGender() == null || person.getGender().equals(""String_Node_Str""))     errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    for (    PersonAttributeType type : Context.getPersonService().getPersonAttributeTypes(PERSON_TYPE.PERSON,null)) {
      String paramName=type.getPersonAttributeTypeId().toString();
      String value=request.getParameter(paramName);
      if (value != null) {
        PersonAttribute attribute=new PersonAttribute(type,value);
        try {
          Object hydratedObject=attribute.getHydratedObject();
          if (hydratedObject == null || ""String_Node_Str"".equals(hydratedObject.toString())) {
            attribute.setValue(""String_Node_Str"");
          }
 else           if (hydratedObject instanceof Attributable) {
            attribute.setValue(((Attributable)hydratedObject).serialize());
          }
 else           if (!hydratedObject.getClass().getName().equals(type.getFormat()))           throw new APIException();
        }
 catch (        APIException e) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"" + type.getName() + ""String_Node_Str""+ value+ ""String_Node_Str"");
          log.warn(""String_Node_Str"" + value + ""String_Node_Str""+ paramName,e);
          attribute.setValue(""String_Node_Str"");
        }
        person.addAttribute(attribute);
      }
    }
    if (person.getBirthdate() != null) {
      if (person.getBirthdate().after(new Date()))       errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
 else {
        Calendar c=Calendar.getInstance();
        c.setTime(new Date());
        c.add(Calendar.YEAR,-120);
        if (person.getBirthdate().before(c.getTime())) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
    if (person.isPersonVoided())     ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
    if (person.isDead() && (person.getCauseOfDeath() == null))     errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + person.printAttributes());
  return super.processFormSubmission(request,response,person,errors);
}","/** 
 * @see org.springframework.web.servlet.mvc.AbstractFormController#processFormSubmission(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView processFormSubmission(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  Person person=(Person)obj;
  if (!Context.isAuthenticated()) {
    errors.reject(""String_Node_Str"");
  }
 else {
    if (person.getPersonName().getGivenName().trim().equals(""String_Node_Str""))     errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    if (person.getPersonName().getFamilyName().trim().equals(""String_Node_Str""))     errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    if (person.getGender() == null || person.getGender().equals(""String_Node_Str""))     errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    for (    PersonAttributeType type : Context.getPersonService().getPersonAttributeTypes(PERSON_TYPE.PERSON,null)) {
      String paramName=type.getPersonAttributeTypeId().toString();
      String value=request.getParameter(paramName);
      if (value != null) {
        PersonAttribute attribute=new PersonAttribute(type,value);
        try {
          Object hydratedObject=attribute.getHydratedObject();
          if (hydratedObject == null || ""String_Node_Str"".equals(hydratedObject.toString())) {
            attribute.setValue(""String_Node_Str"");
          }
 else           if (hydratedObject instanceof Attributable) {
            attribute.setValue(((Attributable)hydratedObject).serialize());
          }
 else           if (!hydratedObject.getClass().getName().equals(type.getFormat()))           throw new APIException();
        }
 catch (        APIException e) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"" + type.getName() + ""String_Node_Str""+ value+ ""String_Node_Str"");
          log.warn(""String_Node_Str"" + value + ""String_Node_Str""+ paramName,e);
          attribute.setValue(""String_Node_Str"");
        }
        person.addAttribute(attribute);
      }
    }
    if (person.getBirthdate() != null) {
      if (person.getBirthdate().after(new Date()))       errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
 else {
        Calendar c=Calendar.getInstance();
        c.setTime(new Date());
        c.add(Calendar.YEAR,-120);
        if (person.getBirthdate().before(c.getTime())) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
    if (person.isPersonVoided())     ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
    if (person.isDead() && (person.getCauseOfDeath() == null))     errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + person.printAttributes());
  return super.processFormSubmission(request,response,person,errors);
}"
84517,"/** 
 * @should work for an example
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String handleSubmission(WebRequest request,HttpSession httpSession,ModelMap model,@RequestParam(required=false,value=""String_Node_Str"") String action,@RequestParam(required=false,value=""String_Node_Str"") String password,@RequestParam(required=false,value=""String_Node_Str"") String confirm,@RequestParam(required=false,value=""String_Node_Str"") String[] roles,@ModelAttribute(""String_Node_Str"") User user,BindingResult errors){
  UserService us=Context.getUserService();
  MessageSourceService mss=Context.getMessageSourceService();
  if (!Context.isAuthenticated()) {
    errors.reject(""String_Node_Str"");
  }
 else   if (mss.getMessage(""String_Node_Str"").equals(action)) {
    Context.becomeUser(user.getSystemId());
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ARGS,user.getPersonName());
    return ""String_Node_Str"";
  }
 else   if (mss.getMessage(""String_Node_Str"").equals(action)) {
    try {
      Context.getUserService().purgeUser(user);
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
    }
 catch (    Exception ex) {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ARGS,ex.getMessage());
      log.error(""String_Node_Str"",ex);
    }
    return ""String_Node_Str"";
  }
 else {
    if (us.hasDuplicateUsername(user))     errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    if (password == null || password.equals(""String_Node_Str""))     password=""String_Node_Str"";
    if (confirm == null || confirm.equals(""String_Node_Str""))     confirm=""String_Node_Str"";
    if (!password.equals(confirm))     errors.reject(""String_Node_Str"");
    if (password.length() == 0 && isNewUser(user))     errors.reject(""String_Node_Str"");
    if (password.length() > 0) {
      try {
        OpenmrsUtil.validatePassword(user.getUsername(),password,user.getSystemId());
      }
 catch (      PasswordException e) {
        errors.reject(e.getMessage());
      }
    }
    Set<Role> newRoles=new HashSet<Role>();
    if (roles != null) {
      for (      String r : roles) {
        Role role=null;
        if (user.getRoles() != null)         for (        Role test : user.getRoles())         if (test.getRole().equals(r))         role=test;
        if (role == null) {
          role=us.getRole(r);
          user.addRole(role);
        }
        newRoles.add(role);
      }
    }
    if (user.getRoles() == null)     newRoles.clear();
 else     user.getRoles().retainAll(newRoles);
    Map<String,String> properties=user.getUserProperties();
    if (properties == null)     properties=new HashMap<String,String>();
    Boolean newChangePassword=false;
    String chk=request.getParameter(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD);
    if (chk != null)     newChangePassword=true;
    if (!newChangePassword.booleanValue() && properties.containsKey(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD)) {
      properties.remove(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD);
    }
    if (newChangePassword.booleanValue()) {
      properties.put(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD,newChangePassword.toString());
    }
    String[] keys=request.getParameterValues(""String_Node_Str"");
    String[] values=request.getParameterValues(""String_Node_Str"");
    if (keys != null && values != null) {
      for (int x=0; x < keys.length; x++) {
        String key=keys[x];
        String val=values[x];
        properties.put(key,val);
      }
    }
    user.setUserProperties(properties);
    UserValidator uv=new UserValidator();
    uv.validate(user,errors);
    if (errors.hasErrors()) {
      return showForm(user.getUserId(),user,model);
    }
    if (isNewUser(user))     us.saveUser(user,password);
 else {
      us.saveUser(user,null);
      if (!password.equals(""String_Node_Str"") && Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USER_PASSWORDS)) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + user + ""String_Node_Str""+ Context.getAuthenticatedUser());
        us.changePassword(user,password);
      }
    }
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
  }
  return ""String_Node_Str"";
}","/** 
 * @should work for an example
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String handleSubmission(WebRequest request,HttpSession httpSession,ModelMap model,@RequestParam(required=false,value=""String_Node_Str"") String action,@RequestParam(required=false,value=""String_Node_Str"") String password,@RequestParam(required=false,value=""String_Node_Str"") String confirm,@RequestParam(required=false,value=""String_Node_Str"") String[] roles,@RequestParam(required=false,value=""String_Node_Str"") String createNewPerson,@ModelAttribute(""String_Node_Str"") User user,BindingResult errors){
  UserService us=Context.getUserService();
  MessageSourceService mss=Context.getMessageSourceService();
  if (!Context.isAuthenticated()) {
    errors.reject(""String_Node_Str"");
  }
 else   if (mss.getMessage(""String_Node_Str"").equals(action)) {
    Context.becomeUser(user.getSystemId());
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ARGS,user.getPersonName());
    return ""String_Node_Str"";
  }
 else   if (mss.getMessage(""String_Node_Str"").equals(action)) {
    try {
      Context.getUserService().purgeUser(user);
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
    }
 catch (    Exception ex) {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ARGS,ex.getMessage());
      log.error(""String_Node_Str"",ex);
    }
    return ""String_Node_Str"";
  }
 else {
    if (us.hasDuplicateUsername(user))     errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    if (password == null || password.equals(""String_Node_Str""))     password=""String_Node_Str"";
    if (confirm == null || confirm.equals(""String_Node_Str""))     confirm=""String_Node_Str"";
    if (!password.equals(confirm))     errors.reject(""String_Node_Str"");
    if (password.length() == 0 && isNewUser(user))     errors.reject(""String_Node_Str"");
    if (password.length() > 0) {
      try {
        OpenmrsUtil.validatePassword(user.getUsername(),password,user.getSystemId());
      }
 catch (      PasswordException e) {
        errors.reject(e.getMessage());
      }
    }
    Set<Role> newRoles=new HashSet<Role>();
    if (roles != null) {
      for (      String r : roles) {
        Role role=null;
        if (user.getRoles() != null)         for (        Role test : user.getRoles())         if (test.getRole().equals(r))         role=test;
        if (role == null) {
          role=us.getRole(r);
          user.addRole(role);
        }
        newRoles.add(role);
      }
    }
    if (user.getRoles() == null)     newRoles.clear();
 else     user.getRoles().retainAll(newRoles);
    Map<String,String> properties=user.getUserProperties();
    if (properties == null)     properties=new HashMap<String,String>();
    Boolean newChangePassword=false;
    String chk=request.getParameter(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD);
    if (chk != null)     newChangePassword=true;
    if (!newChangePassword.booleanValue() && properties.containsKey(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD)) {
      properties.remove(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD);
    }
    if (newChangePassword.booleanValue()) {
      properties.put(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD,newChangePassword.toString());
    }
    String[] keys=request.getParameterValues(""String_Node_Str"");
    String[] values=request.getParameterValues(""String_Node_Str"");
    if (keys != null && values != null) {
      for (int x=0; x < keys.length; x++) {
        String key=keys[x];
        String val=values[x];
        properties.put(key,val);
      }
    }
    user.setUserProperties(properties);
    UserValidator uv=new UserValidator();
    uv.validate(user,errors);
    if (errors.hasErrors()) {
      return showForm(user.getUserId(),createNewPerson,user,model);
    }
    if (isNewUser(user))     us.saveUser(user,password);
 else {
      us.saveUser(user,null);
      if (!password.equals(""String_Node_Str"") && Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USER_PASSWORDS)) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + user + ""String_Node_Str""+ Context.getAuthenticatedUser());
        us.changePassword(user,password);
      }
    }
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
  }
  return ""String_Node_Str"";
}"
84518,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String showForm(@RequestParam(required=false,value=""String_Node_Str"") Integer userId,@ModelAttribute(""String_Node_Str"") User user,ModelMap model){
  model.addAttribute(""String_Node_Str"",user == null || user.getUserId() == null);
  if (user == null || user.getUserId() == null || Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USER_PASSWORDS))   model.addAttribute(""String_Node_Str"",true);
  return ""String_Node_Str"";
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String showForm(@RequestParam(required=false,value=""String_Node_Str"") Integer userId,@RequestParam(required=false,value=""String_Node_Str"") String createNewPerson,@ModelAttribute(""String_Node_Str"") User user,ModelMap model){
  model.addAttribute(""String_Node_Str"",user == null || user.getUserId() == null);
  if (user == null || user.getUserId() == null || Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USER_PASSWORDS))   model.addAttribute(""String_Node_Str"",true);
  if (createNewPerson != null)   model.addAttribute(""String_Node_Str"",createNewPerson);
  return ""String_Node_Str"";
}"
84519,"/** 
 * @see java.lang.Object#equals(java.lang.Object)
 * @should compare on conceptNameId if non null
 * @should not return true with different objects and null ids
 * @should default to object equality
 */
public boolean equals(Object obj){
  if (!(obj instanceof ConceptName)) {
    return false;
  }
  ConceptName rhs=(ConceptName)obj;
  if (this.conceptNameId != null && rhs.conceptNameId != null)   return (this.conceptNameId.equals(rhs.conceptNameId));
 else   return this == obj;
}","/** 
 * @see java.lang.Object#equals(java.lang.Object)
 * @should compare on conceptNameId if non null
 * @should not return true with different objects and null ids
 * @should default to object equality
 */
public boolean equals(Object obj){
  if (!(obj instanceof ConceptName)) {
    return false;
  }
  ConceptName rhs=(ConceptName)obj;
  if (this.conceptNameId != null && rhs.conceptNameId != null)   return (this.conceptNameId.equals(rhs.concept));
 else   return this == obj;
}"
84520,"/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  String view=getFormView();
  if (!errors.hasErrors()) {
    User loginUser=Context.getAuthenticatedUser();
    UserService us=Context.getUserService();
    User user=null;
    try {
      Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
      user=us.getUser(loginUser.getUserId());
    }
  finally {
      Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
    }
    OptionsForm opts=(OptionsForm)obj;
    Map<String,String> properties=user.getUserProperties();
    properties.put(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCATION,opts.getDefaultLocation());
    properties.put(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCALE,opts.getDefaultLocale());
    properties.put(OpenmrsConstants.USER_PROPERTY_PROFICIENT_LOCALES,opts.getProficientLocales());
    properties.put(OpenmrsConstants.USER_PROPERTY_SHOW_RETIRED,opts.getShowRetiredMessage().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_SHOW_VERBOSE,opts.getVerbose().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_NOTIFICATION,opts.getNotification() == null ? ""String_Node_Str"" : opts.getNotification().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_NOTIFICATION_ADDRESS,opts.getNotificationAddress().toString());
    if (!opts.getOldPassword().equals(""String_Node_Str"")) {
      try {
        String password=opts.getNewPassword();
        if (password.length() > 0) {
          try {
            OpenmrsUtil.validatePassword(user.getUsername(),password,String.valueOf(user.getUserId()));
          }
 catch (          PasswordException e) {
            errors.reject(e.getMessage());
          }
          if (password.equals(opts.getOldPassword()) && !errors.hasErrors())           errors.reject(""String_Node_Str"");
        }
        if (!errors.hasErrors()) {
          us.changePassword(opts.getOldPassword(),password);
          if (properties.containsKey(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD))           properties.remove(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD);
        }
      }
 catch (      APIException e) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      if (!opts.getNewPassword().equals(""String_Node_Str"")) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (!opts.getSecretQuestionPassword().equals(""String_Node_Str"")) {
      if (!errors.hasErrors()) {
        try {
          user.setSecretQuestion(opts.getSecretQuestionNew());
          us.changeQuestionAnswer(opts.getSecretQuestionPassword(),opts.getSecretQuestionNew(),opts.getSecretAnswerNew());
        }
 catch (        APIException e) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
 else     if (!opts.getSecretAnswerNew().equals(""String_Node_Str"")) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
    if (opts.getUsername().length() > 0 && !errors.hasErrors()) {
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
        if (us.hasDuplicateUsername(user)) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
        }
      }
  finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
      }
    }
    if (!errors.hasErrors()) {
      user.setUsername(opts.getUsername());
      user.setUserProperties(properties);
      PersonName newPersonName=opts.getPersonName();
      PersonName existingPersonName=user.getPersonName();
      if (!existingPersonName.equalsContent(newPersonName)) {
        existingPersonName.setPreferred(false);
        existingPersonName.setVoided(true);
        existingPersonName.setVoidedBy(user);
        existingPersonName.setDateVoided(new Date());
        existingPersonName.setVoidReason(""String_Node_Str"");
        newPersonName.setPreferred(true);
        user.addName(newPersonName);
      }
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_EDIT_USERS);
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
        us.saveUser(user,null);
        Context.refreshAuthenticatedUser();
      }
  finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_EDIT_USERS);
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
      }
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
    }
 else {
      return super.processFormSubmission(request,response,opts,errors);
    }
    view=getSuccessView();
  }
  return new ModelAndView(new RedirectView(view));
}","/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  String view=getFormView();
  if (!errors.hasErrors()) {
    User loginUser=Context.getAuthenticatedUser();
    UserService us=Context.getUserService();
    User user=null;
    try {
      Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
      user=us.getUser(loginUser.getUserId());
    }
  finally {
      Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
    }
    OptionsForm opts=(OptionsForm)obj;
    Map<String,String> properties=user.getUserProperties();
    properties.put(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCATION,opts.getDefaultLocation());
    properties.put(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCALE,opts.getDefaultLocale());
    properties.put(OpenmrsConstants.USER_PROPERTY_PROFICIENT_LOCALES,opts.getProficientLocales());
    properties.put(OpenmrsConstants.USER_PROPERTY_SHOW_RETIRED,opts.getShowRetiredMessage().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_SHOW_VERBOSE,opts.getVerbose().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_NOTIFICATION,opts.getNotification() == null ? ""String_Node_Str"" : opts.getNotification().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_NOTIFICATION_ADDRESS,opts.getNotificationAddress().toString());
    if (!opts.getOldPassword().equals(""String_Node_Str"")) {
      try {
        String password=opts.getNewPassword();
        if (password.length() > 0) {
          try {
            OpenmrsUtil.validatePassword(user.getUsername(),password,String.valueOf(user.getUserId()));
          }
 catch (          PasswordException e) {
            errors.reject(e.getMessage());
          }
          if (password.equals(opts.getOldPassword()) && !errors.hasErrors())           errors.reject(""String_Node_Str"");
        }
        if (!errors.hasErrors()) {
          us.changePassword(opts.getOldPassword(),password);
          opts.setSecretQuestionPassword(password);
          if (properties.containsKey(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD))           properties.remove(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD);
        }
      }
 catch (      APIException e) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      if (!opts.getNewPassword().equals(""String_Node_Str"")) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (!opts.getSecretQuestionPassword().equals(""String_Node_Str"")) {
      if (!errors.hasErrors()) {
        try {
          user.setSecretQuestion(opts.getSecretQuestionNew());
          us.changeQuestionAnswer(opts.getSecretQuestionPassword(),opts.getSecretQuestionNew(),opts.getSecretAnswerNew());
        }
 catch (        APIException e) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
 else     if (!opts.getSecretAnswerNew().equals(""String_Node_Str"")) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
    if (opts.getUsername().length() > 0 && !errors.hasErrors()) {
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
        if (us.hasDuplicateUsername(user)) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
        }
      }
  finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
      }
    }
    if (!errors.hasErrors()) {
      user.setUsername(opts.getUsername());
      user.setUserProperties(properties);
      PersonName newPersonName=opts.getPersonName();
      PersonName existingPersonName=user.getPersonName();
      if (!existingPersonName.equalsContent(newPersonName)) {
        existingPersonName.setPreferred(false);
        existingPersonName.setVoided(true);
        existingPersonName.setVoidedBy(user);
        existingPersonName.setDateVoided(new Date());
        existingPersonName.setVoidReason(""String_Node_Str"");
        newPersonName.setPreferred(true);
        user.addName(newPersonName);
      }
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_EDIT_USERS);
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
        us.saveUser(user,null);
        Context.refreshAuthenticatedUser();
      }
  finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_EDIT_USERS);
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
      }
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
    }
 else {
      return super.processFormSubmission(request,response,opts,errors);
    }
    view=getSuccessView();
  }
  return new ModelAndView(new RedirectView(view));
}"
84521,"public ModelAndView enroll(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String returnPage=request.getParameter(""String_Node_Str"");
  if (returnPage == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String patientIdStr=request.getParameter(""String_Node_Str"");
  String programIdStr=request.getParameter(""String_Node_Str"");
  String enrollmentDateStr=request.getParameter(""String_Node_Str"");
  String completionDateStr=request.getParameter(""String_Node_Str"");
  log.debug(""String_Node_Str"" + patientIdStr + ""String_Node_Str""+ programIdStr+ ""String_Node_Str""+ enrollmentDateStr);
  ProgramWorkflowService pws=Context.getProgramWorkflowService();
  CustomDateEditor cde=new CustomDateEditor(Context.getDateFormat(),true,10);
  cde.setAsText(enrollmentDateStr);
  Date enrollmentDate=(Date)cde.getValue();
  cde.setAsText(completionDateStr);
  Date completionDate=(Date)cde.getValue();
  Patient patient=Context.getPatientService().getPatient(Integer.valueOf(patientIdStr));
  Program program=pws.getProgram(Integer.valueOf(programIdStr));
  if (!pws.getPatientPrograms(patient,program,null,enrollmentDate,completionDate,null,false).isEmpty())   request.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
 else {
    PatientProgram pp=new PatientProgram();
    pp.setPatient(patient);
    pp.setProgram(program);
    pp.setDateEnrolled(enrollmentDate);
    pp.setDateCompleted(completionDate);
    Context.getProgramWorkflowService().savePatientProgram(pp);
  }
  return new ModelAndView(new RedirectView(returnPage));
}","public ModelAndView enroll(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String returnPage=request.getParameter(""String_Node_Str"");
  if (returnPage == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String patientIdStr=request.getParameter(""String_Node_Str"");
  String programIdStr=request.getParameter(""String_Node_Str"");
  String enrollmentDateStr=request.getParameter(""String_Node_Str"");
  String completionDateStr=request.getParameter(""String_Node_Str"");
  log.debug(""String_Node_Str"" + patientIdStr + ""String_Node_Str""+ programIdStr+ ""String_Node_Str""+ enrollmentDateStr);
  ProgramWorkflowService pws=Context.getProgramWorkflowService();
  CustomDateEditor cde=new CustomDateEditor(Context.getDateFormat(),true,10);
  cde.setAsText(enrollmentDateStr);
  Date enrollmentDate=(Date)cde.getValue();
  cde.setAsText(completionDateStr);
  Date completionDate=(Date)cde.getValue();
  Patient patient=Context.getPatientService().getPatient(Integer.valueOf(patientIdStr));
  Program program=pws.getProgram(Integer.valueOf(programIdStr));
  if (!pws.getPatientPrograms(patient,program,null,completionDate,enrollmentDate,null,false).isEmpty())   request.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
 else {
    PatientProgram pp=new PatientProgram();
    pp.setPatient(patient);
    pp.setProgram(program);
    pp.setDateEnrolled(enrollmentDate);
    pp.setDateCompleted(completionDate);
    Context.getProgramWorkflowService().savePatientProgram(pp);
  }
  return new ModelAndView(new RedirectView(returnPage));
}"
84522,"/** 
 * @param supportedTypes the supportedTypes to set
 */
public void setSupportedTypes(List<Class<? extends OpenmrsObject>> supportedTypes){
  this.supportedTypes=supportedTypes;
}","/** 
 * @param supportedTypes the supportedTypes to set
 */
public void setSupportedTypes(List<Class<? extends OpenmrsObject>> supportedTypes){
  if (this.supportedTypes == null) {
    this.supportedTypes=new ArrayList<Class<? extends OpenmrsObject>>();
  }
  if (supportedTypes != null) {
    for (    Class<? extends OpenmrsObject> clazz : supportedTypes) {
      this.supportedTypes.add(clazz);
    }
  }
}"
84523,"/** 
 * This is called prior to displaying a form for the first time. It tells Spring the form/command object to load into the request
 * @see org.springframework.web.servlet.mvc.AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
 */
protected Object formBackingObject(HttpServletRequest request) throws ServletException {
  List<User> userList=new Vector<User>();
  if (Context.isAuthenticated()) {
    UserService us=Context.getUserService();
    userList=us.getAllUsers();
  }
  return userList;
}","/** 
 * This is called prior to displaying a form for the first time. It tells Spring the form/command object to load into the request
 * @see org.springframework.web.servlet.mvc.AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
 */
protected Object formBackingObject(HttpServletRequest request) throws ServletException {
  List<User> userList=new Vector<User>();
  if (Context.isAuthenticated()) {
  }
  return userList;
}"
84524,"/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  String view=getFormView();
  if (!errors.hasErrors()) {
    User loginUser=Context.getAuthenticatedUser();
    UserService us=Context.getUserService();
    User user=us.getUser(loginUser.getUserId());
    OptionsForm opts=(OptionsForm)obj;
    Map<String,String> properties=user.getUserProperties();
    properties.put(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCATION,opts.getDefaultLocation());
    properties.put(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCALE,opts.getDefaultLocale());
    properties.put(OpenmrsConstants.USER_PROPERTY_PROFICIENT_LOCALES,opts.getProficientLocales());
    properties.put(OpenmrsConstants.USER_PROPERTY_SHOW_RETIRED,opts.getShowRetiredMessage().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_SHOW_VERBOSE,opts.getVerbose().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_NOTIFICATION,opts.getNotification() == null ? ""String_Node_Str"" : opts.getNotification().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_NOTIFICATION_ADDRESS,opts.getNotificationAddress().toString());
    if (!opts.getOldPassword().equals(""String_Node_Str"")) {
      try {
        String password=opts.getNewPassword();
        if (password.length() > 0) {
          try {
            OpenmrsUtil.validatePassword(user.getUsername(),password,String.valueOf(user.getUserId()));
          }
 catch (          PasswordException e) {
            errors.reject(e.getMessage());
          }
          if (password.equals(opts.getOldPassword()) && !errors.hasErrors())           errors.reject(""String_Node_Str"");
        }
        if (!errors.hasErrors()) {
          us.changePassword(opts.getOldPassword(),password);
          if (properties.containsKey(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD))           properties.remove(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD);
        }
      }
 catch (      APIException e) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      if (!opts.getNewPassword().equals(""String_Node_Str"")) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (!opts.getSecretQuestionPassword().equals(""String_Node_Str"")) {
      if (!errors.hasErrors()) {
        try {
          user.setSecretQuestion(opts.getSecretQuestionNew());
          us.changeQuestionAnswer(opts.getSecretQuestionPassword(),opts.getSecretQuestionNew(),opts.getSecretAnswerNew());
        }
 catch (        APIException e) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
 else     if (!opts.getSecretAnswerNew().equals(""String_Node_Str"")) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
    if (opts.getUsername().length() > 0 && !errors.hasErrors()) {
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
        if (us.hasDuplicateUsername(user)) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
        }
      }
  finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
      }
    }
    if (!errors.hasErrors()) {
      user.setUsername(opts.getUsername());
      user.setUserProperties(properties);
      PersonName newPersonName=opts.getPersonName();
      PersonName existingPersonName=user.getPersonName();
      if (!existingPersonName.equalsContent(newPersonName)) {
        existingPersonName.setPreferred(false);
        existingPersonName.setVoided(true);
        existingPersonName.setVoidedBy(user);
        existingPersonName.setDateVoided(new Date());
        existingPersonName.setVoidReason(""String_Node_Str"");
        newPersonName.setPreferred(true);
        user.addName(newPersonName);
      }
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_EDIT_USERS);
        us.saveUser(user,null);
      }
  finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_EDIT_USERS);
      }
      Context.refreshAuthenticatedUser();
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
    }
 else {
      return super.processFormSubmission(request,response,opts,errors);
    }
    view=getSuccessView();
  }
  return new ModelAndView(new RedirectView(view));
}","/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  String view=getFormView();
  if (!errors.hasErrors()) {
    User loginUser=Context.getAuthenticatedUser();
    UserService us=Context.getUserService();
    User user=null;
    try {
      Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
      user=us.getUser(loginUser.getUserId());
    }
  finally {
      Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
    }
    OptionsForm opts=(OptionsForm)obj;
    Map<String,String> properties=user.getUserProperties();
    properties.put(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCATION,opts.getDefaultLocation());
    properties.put(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCALE,opts.getDefaultLocale());
    properties.put(OpenmrsConstants.USER_PROPERTY_PROFICIENT_LOCALES,opts.getProficientLocales());
    properties.put(OpenmrsConstants.USER_PROPERTY_SHOW_RETIRED,opts.getShowRetiredMessage().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_SHOW_VERBOSE,opts.getVerbose().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_NOTIFICATION,opts.getNotification() == null ? ""String_Node_Str"" : opts.getNotification().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_NOTIFICATION_ADDRESS,opts.getNotificationAddress().toString());
    if (!opts.getOldPassword().equals(""String_Node_Str"")) {
      try {
        String password=opts.getNewPassword();
        if (password.length() > 0) {
          try {
            OpenmrsUtil.validatePassword(user.getUsername(),password,String.valueOf(user.getUserId()));
          }
 catch (          PasswordException e) {
            errors.reject(e.getMessage());
          }
          if (password.equals(opts.getOldPassword()) && !errors.hasErrors())           errors.reject(""String_Node_Str"");
        }
        if (!errors.hasErrors()) {
          us.changePassword(opts.getOldPassword(),password);
          if (properties.containsKey(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD))           properties.remove(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD);
        }
      }
 catch (      APIException e) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      if (!opts.getNewPassword().equals(""String_Node_Str"")) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (!opts.getSecretQuestionPassword().equals(""String_Node_Str"")) {
      if (!errors.hasErrors()) {
        try {
          user.setSecretQuestion(opts.getSecretQuestionNew());
          us.changeQuestionAnswer(opts.getSecretQuestionPassword(),opts.getSecretQuestionNew(),opts.getSecretAnswerNew());
        }
 catch (        APIException e) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
 else     if (!opts.getSecretAnswerNew().equals(""String_Node_Str"")) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
    if (opts.getUsername().length() > 0 && !errors.hasErrors()) {
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
        if (us.hasDuplicateUsername(user)) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
        }
      }
  finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
      }
    }
    if (!errors.hasErrors()) {
      user.setUsername(opts.getUsername());
      user.setUserProperties(properties);
      PersonName newPersonName=opts.getPersonName();
      PersonName existingPersonName=user.getPersonName();
      if (!existingPersonName.equalsContent(newPersonName)) {
        existingPersonName.setPreferred(false);
        existingPersonName.setVoided(true);
        existingPersonName.setVoidedBy(user);
        existingPersonName.setDateVoided(new Date());
        existingPersonName.setVoidReason(""String_Node_Str"");
        newPersonName.setPreferred(true);
        user.addName(newPersonName);
      }
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_EDIT_USERS);
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
        us.saveUser(user,null);
        Context.refreshAuthenticatedUser();
      }
  finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_EDIT_USERS);
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_USERS);
      }
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
    }
 else {
      return super.processFormSubmission(request,response,opts,errors);
    }
    view=getSuccessView();
  }
  return new ModelAndView(new RedirectView(view));
}"
84525,"/** 
 * Called by   {@link #doFilter(ServletRequest,ServletResponse,FilterChain)} on GET requests
 * @param httpRequest
 * @param httpResponse
 */
protected void doGet(HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws IOException, ServletException {
  Writer writer=httpResponse.getWriter();
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  File runtimeProperties=getRuntimePropertiesFile();
  if (!runtimeProperties.exists()) {
    try {
      runtimeProperties.createNewFile();
    }
 catch (    IOException io) {
      wizardModel.canCreate=false;
      wizardModel.cannotCreateErrorMessage=io.getMessage();
    }
    wizardModel.canWrite=runtimeProperties.canWrite();
    runtimeProperties.delete();
  }
 else {
    wizardModel.canWrite=runtimeProperties.canWrite();
  }
  wizardModel.runtimePropertiesPath=runtimeProperties.getAbsolutePath();
  renderTemplate(DEFAULT_PAGE,referenceMap,writer);
}","/** 
 * Called by   {@link #doFilter(ServletRequest,ServletResponse,FilterChain)} on GET requests
 * @param httpRequest
 * @param httpResponse
 */
protected void doGet(HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws IOException, ServletException {
  Writer writer=httpResponse.getWriter();
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  File runtimeProperties=getRuntimePropertiesFile();
  if (!runtimeProperties.exists()) {
    try {
      runtimeProperties.createNewFile();
      wizardModel.canCreate=true;
      wizardModel.cannotCreateErrorMessage=""String_Node_Str"";
    }
 catch (    IOException io) {
      wizardModel.canCreate=false;
      wizardModel.cannotCreateErrorMessage=io.getMessage();
    }
    wizardModel.canWrite=runtimeProperties.canWrite();
    runtimeProperties.delete();
  }
 else {
    wizardModel.canWrite=runtimeProperties.canWrite();
  }
  wizardModel.runtimePropertiesPath=runtimeProperties.getAbsolutePath();
  renderTemplate(DEFAULT_PAGE,referenceMap,writer);
}"
84526,"/** 
 * @see org.springframework.web.servlet.mvc.AbstractFormController#processFormSubmission(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView processFormSubmission(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  User user=(User)obj;
  UserService us=Context.getUserService();
  MessageSourceAccessor msa=getMessageSourceAccessor();
  String action=request.getParameter(""String_Node_Str"");
  if (!Context.isAuthenticated()) {
    errors.reject(""String_Node_Str"");
  }
 else   if (msa.getMessage(""String_Node_Str"").equals(action)) {
    Context.becomeUser(user.getSystemId());
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ARGS,user.getPersonName());
    return new ModelAndView(new RedirectView(request.getContextPath() + ""String_Node_Str""));
  }
 else   if (msa.getMessage(""String_Node_Str"").equals(action)) {
    us.purgeUser(user);
    return new ModelAndView(new RedirectView(getSuccessView()));
  }
 else {
    if (us.hasDuplicateUsername(user))     errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    String password=request.getParameter(""String_Node_Str"");
    if (password == null || password.equals(""String_Node_Str""))     password=""String_Node_Str"";
    String confirm=request.getParameter(""String_Node_Str"");
    if (confirm == null || confirm.equals(""String_Node_Str""))     confirm=""String_Node_Str"";
    if (!password.equals(confirm))     errors.reject(""String_Node_Str"");
    if (password.length() == 0 && isNewUser(user))     errors.reject(""String_Node_Str"");
    if (password.length() > 0) {
      try {
        OpenmrsUtil.validatePassword(user.getUsername(),password,String.valueOf(user.getUserId()));
      }
 catch (      PasswordException e) {
        errors.reject(e.getMessage());
      }
    }
    String[] roles=request.getParameterValues(""String_Node_Str"");
    Set<Role> newRoles=new HashSet<Role>();
    if (roles != null) {
      for (      String r : roles) {
        Role role=null;
        if (user.getRoles() != null)         for (        Role test : user.getRoles())         if (test.getRole().equals(r))         role=test;
        if (role == null) {
          role=us.getRole(r);
          user.addRole(role);
        }
        newRoles.add(role);
      }
    }
    if (user.getRoles() == null)     newRoles.clear();
 else     user.getRoles().retainAll(newRoles);
  }
  return super.processFormSubmission(request,response,user,errors);
}","/** 
 * @see org.springframework.web.servlet.mvc.AbstractFormController#processFormSubmission(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView processFormSubmission(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  User user=(User)obj;
  UserService us=Context.getUserService();
  MessageSourceAccessor msa=getMessageSourceAccessor();
  String action=request.getParameter(""String_Node_Str"");
  if (!Context.isAuthenticated()) {
    errors.reject(""String_Node_Str"");
  }
 else   if (msa.getMessage(""String_Node_Str"").equals(action)) {
    Context.becomeUser(user.getSystemId());
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ARGS,user.getPersonName());
    return new ModelAndView(new RedirectView(request.getContextPath() + ""String_Node_Str""));
  }
 else   if (msa.getMessage(""String_Node_Str"").equals(action)) {
    us.purgeUser(user);
    return new ModelAndView(new RedirectView(getSuccessView()));
  }
 else {
    if (us.hasDuplicateUsername(user))     errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    String password=request.getParameter(""String_Node_Str"");
    if (password == null || password.equals(""String_Node_Str""))     password=""String_Node_Str"";
    String confirm=request.getParameter(""String_Node_Str"");
    if (confirm == null || confirm.equals(""String_Node_Str""))     confirm=""String_Node_Str"";
    if (!password.equals(confirm))     errors.reject(""String_Node_Str"");
    if (password.length() == 0 && isNewUser(user))     errors.reject(""String_Node_Str"");
    if (password.length() > 0) {
      try {
        OpenmrsUtil.validatePassword(user.getUsername(),password,user.getSystemId());
      }
 catch (      PasswordException e) {
        errors.reject(e.getMessage());
      }
    }
    String[] roles=request.getParameterValues(""String_Node_Str"");
    Set<Role> newRoles=new HashSet<Role>();
    if (roles != null) {
      for (      String r : roles) {
        Role role=null;
        if (user.getRoles() != null)         for (        Role test : user.getRoles())         if (test.getRole().equals(r))         role=test;
        if (role == null) {
          role=us.getRole(r);
          user.addRole(role);
        }
        newRoles.add(role);
      }
    }
    if (user.getRoles() == null)     newRoles.clear();
 else     user.getRoles().retainAll(newRoles);
  }
  return super.processFormSubmission(request,response,user,errors);
}"
84527,"/** 
 * Private method for converting a serialized object to a deserialized object of the given type
 * @param clazz the class to deserialize into
 * @param serializedObject the serialized object to convert
 * @return the deserialized Object
 */
@SuppressWarnings(""String_Node_Str"") private <T extends OpenmrsObject>T convertSerializedObject(Class<T> clazz,SerializedObject serializedObject) throws DAOException {
  if (serializedObject == null) {
    return null;
  }
  OpenmrsSerializer serializer=getSerializer(serializedObject,null);
  T obj=null;
  try {
    obj=(T)serializer.deserialize(serializedObject.getSerializedData(),serializedObject.getSubtype());
  }
 catch (  SerializationException e) {
  }
  if (obj == null) {
    throw new DAOException(""String_Node_Str"" + serializedObject);
  }
  obj.setId(serializedObject.getId());
  obj.setUuid(serializedObject.getUuid());
  return obj;
}","/** 
 * Private method for converting a serialized object to a deserialized object of the given type
 * @param clazz the class to deserialize into
 * @param serializedObject the serialized object to convert
 * @return the deserialized Object
 */
@SuppressWarnings(""String_Node_Str"") private <T extends OpenmrsObject>T convertSerializedObject(Class<T> clazz,SerializedObject serializedObject) throws DAOException {
  if (serializedObject == null) {
    return null;
  }
  OpenmrsSerializer serializer=getSerializer(serializedObject);
  T obj=null;
  try {
    obj=(T)serializer.deserialize(serializedObject.getSerializedData(),serializedObject.getSubtype());
  }
 catch (  SerializationException e) {
  }
  if (obj == null) {
    throw new DAOException(""String_Node_Str"" + serializedObject);
  }
  obj.setId(serializedObject.getId());
  obj.setUuid(serializedObject.getUuid());
  return obj;
}"
84528,"/** 
 * @see SerializedObjectDAO#saveObject(OpenmrsObject,OpenmrsSerializer)
 */
public <T extends OpenmrsObject>T saveObject(T object,OpenmrsSerializer serializer) throws DAOException {
  Class<? extends OpenmrsObject> baseType=getRegisteredTypeForObject(object);
  if (baseType == null) {
    throw new DAOException(""String_Node_Str"" + object.getClass() + ""String_Node_Str"");
  }
  SerializedObject serializedObject=getSerializedObject(object.getId());
  if (serializedObject == null) {
    serializedObject=new SerializedObject();
  }
  serializer=getSerializer(serializedObject,serializer);
  String data=null;
  try {
    data=serializer.serialize(object);
  }
 catch (  SerializationException e) {
    throw new DAOException(""String_Node_Str"" + object + ""String_Node_Str"",e);
  }
  serializedObject.setUuid(object.getUuid());
  serializedObject.setType(baseType);
  serializedObject.setSubtype(object.getClass());
  serializedObject.setSerializationClass(serializer.getClass());
  serializedObject.setSerializedData(data);
  if (object instanceof Auditable) {
    Auditable auditableObj=(Auditable)object;
    serializedObject.setCreator(auditableObj.getCreator());
    serializedObject.setDateCreated(auditableObj.getDateCreated());
    if (serializedObject.getCreator() == null) {
      serializedObject.setCreator(Context.getAuthenticatedUser());
    }
    if (serializedObject.getDateCreated() == null) {
      serializedObject.setDateCreated(new Date());
    }
    serializedObject.setChangedBy(auditableObj.getChangedBy());
    serializedObject.setDateChanged(auditableObj.getDateChanged());
  }
  if (object instanceof OpenmrsMetadata) {
    OpenmrsMetadata metaObj=(OpenmrsMetadata)object;
    serializedObject.setName(metaObj.getName());
    serializedObject.setDescription(metaObj.getDescription());
    serializedObject.setRetired(metaObj.isRetired() == Boolean.TRUE);
    serializedObject.setRetiredBy(metaObj.getRetiredBy());
    serializedObject.setDateRetired(metaObj.getDateRetired());
    serializedObject.setRetireReason(metaObj.getRetireReason());
  }
  if (object instanceof OpenmrsData) {
    OpenmrsData dataObj=(OpenmrsData)object;
    serializedObject.setRetired(dataObj.isVoided() == Boolean.TRUE);
    serializedObject.setRetiredBy(dataObj.getVoidedBy());
    serializedObject.setDateRetired(dataObj.getDateVoided());
    serializedObject.setRetireReason(dataObj.getVoidReason());
  }
  sessionFactory.getCurrentSession().saveOrUpdate(serializedObject);
  object.setId(serializedObject.getId());
  return object;
}","/** 
 * @see SerializedObjectDAO#saveObject(OpenmrsObject,OpenmrsSerializer)
 */
public <T extends OpenmrsObject>T saveObject(T object,OpenmrsSerializer serializer) throws DAOException {
  Class<? extends OpenmrsObject> baseType=getRegisteredTypeForObject(object);
  if (baseType == null) {
    throw new DAOException(""String_Node_Str"" + object.getClass() + ""String_Node_Str"");
  }
  SerializedObject serializedObject=getSerializedObject(object.getId());
  if (serializedObject == null) {
    serializedObject=new SerializedObject();
  }
  if (serializer == null) {
    serializer=getSerializer(serializedObject);
  }
  String data=null;
  try {
    data=serializer.serialize(object);
  }
 catch (  SerializationException e) {
    throw new DAOException(""String_Node_Str"" + object + ""String_Node_Str"",e);
  }
  serializedObject.setUuid(object.getUuid());
  serializedObject.setType(baseType);
  serializedObject.setSubtype(object.getClass());
  serializedObject.setSerializationClass(serializer.getClass());
  serializedObject.setSerializedData(data);
  if (object instanceof Auditable) {
    Auditable auditableObj=(Auditable)object;
    serializedObject.setCreator(auditableObj.getCreator());
    serializedObject.setDateCreated(auditableObj.getDateCreated());
    if (serializedObject.getCreator() == null) {
      serializedObject.setCreator(Context.getAuthenticatedUser());
    }
    if (serializedObject.getDateCreated() == null) {
      serializedObject.setDateCreated(new Date());
    }
    serializedObject.setChangedBy(auditableObj.getChangedBy());
    serializedObject.setDateChanged(auditableObj.getDateChanged());
  }
  if (object instanceof OpenmrsMetadata) {
    OpenmrsMetadata metaObj=(OpenmrsMetadata)object;
    serializedObject.setName(metaObj.getName());
    serializedObject.setDescription(metaObj.getDescription());
    serializedObject.setRetired(metaObj.isRetired() == Boolean.TRUE);
    serializedObject.setRetiredBy(metaObj.getRetiredBy());
    serializedObject.setDateRetired(metaObj.getDateRetired());
    serializedObject.setRetireReason(metaObj.getRetireReason());
  }
  if (object instanceof OpenmrsData) {
    OpenmrsData dataObj=(OpenmrsData)object;
    serializedObject.setRetired(dataObj.isVoided() == Boolean.TRUE);
    serializedObject.setRetiredBy(dataObj.getVoidedBy());
    serializedObject.setDateRetired(dataObj.getDateVoided());
    serializedObject.setRetireReason(dataObj.getVoidReason());
  }
  sessionFactory.getCurrentSession().saveOrUpdate(serializedObject);
  object.setId(serializedObject.getId());
  return object;
}"
84529,"/** 
 * Private method for retrieving the Serializer that should be used for the passed SerializedObject, defaulting to the default system serializer if none is explicitly set on the object
 */
private OpenmrsSerializer getSerializer(SerializedObject o,OpenmrsSerializer s){
  if (s == null) {
    s=Context.getSerializationService().getDefaultSerializer();
  }
  if (o != null && o.getSerializationClass() != null) {
    s=Context.getSerializationService().getSerializer(o.getSerializationClass());
  }
  return s;
}","/** 
 * Private method for retrieving the Serializer that should be used for the passed SerializedObject, defaulting to the default system serializer if none is explicitly set on the object
 */
private OpenmrsSerializer getSerializer(SerializedObject o){
  if (o != null && o.getSerializationClass() != null) {
    return Context.getSerializationService().getSerializer(o.getSerializationClass());
  }
  return Context.getSerializationService().getDefaultSerializer();
}"
84530,"/** 
 * This method isn't needed anymore. There are handlers that are mapped around the saveObs(obs) method that get called automatically. See   {@link SaveHandler}, et al.
 * @see SaveHandler
 * @see OpenmrsObjectSaveHandler
 * @see AuditableSaveHandler
 * @deprecated no longer needed. Replaced by handlers.
 */
@Deprecated public void setRequiredProperties(User creator,Date dateCreated){
  RequiredDataAdvice.recursivelyHandle(SaveHandler.class,this,creator,dateCreated,null);
}","/** 
 * This method isn't needed anymore. There are handlers that are mapped around the saveObs(obs) method that get called automatically. See   {@link SaveHandler}, et al.
 * @see SaveHandler
 * @see OpenmrsObjectSaveHandler
 * @see AuditableSaveHandler
 * @deprecated no longer needed. Replaced by handlers.
 */
@Deprecated public void setRequiredProperties(User creator,Date dateCreated){
  RequiredDataAdvice.recursivelyHandle(SaveHandler.class,this,creator,dateCreated,null,null);
}"
84531,"/** 
 * Sends an email with system information and the given exception
 * @param error
 */
public static void sendSchedulerError(Throwable throwable){
  try {
    Boolean emailIsEnabled=Boolean.valueOf(Context.getAdministrationService().getGlobalProperty(SchedulerConstants.SCHEDULER_ADMIN_EMAIL_ENABLED_PROPERTY));
    if (emailIsEnabled) {
      String recipients=Context.getAdministrationService().getGlobalProperty(SchedulerConstants.SCHEDULER_ADMIN_EMAIL_PROPERTY);
      if (recipients != null) {
        String sender=SchedulerConstants.SCHEDULER_DEFAULT_FROM;
        String subject=SchedulerConstants.SCHEDULER_DEFAULT_SUBJECT + ""String_Node_Str"" + throwable.getClass().getName();
        String message=new String();
        message+=""String_Node_Str"";
        message+=SchedulerUtil.getExceptionAsString(throwable);
        message+=""String_Node_Str"";
        for (        Map.Entry<String,String> entry : Context.getAdministrationService().getSystemVariables().entrySet()) {
          message+=entry.getKey() + ""String_Node_Str"" + entry.getValue()+ ""String_Node_Str"";
        }
        log.debug(""String_Node_Str"" + recipients + ""String_Node_Str""+ sender+ ""String_Node_Str""+ subject+ ""String_Node_Str""+ message);
        Context.getMessageService().sendMessage(recipients,sender,subject,message);
      }
    }
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",e);
  }
}","/** 
 * Sends an email with system information and the given exception
 * @param error
 */
public static void sendSchedulerError(Throwable throwable){
  try {
    Context.openSession();
    Boolean emailIsEnabled=Boolean.valueOf(Context.getAdministrationService().getGlobalProperty(SchedulerConstants.SCHEDULER_ADMIN_EMAIL_ENABLED_PROPERTY));
    if (emailIsEnabled) {
      String recipients=Context.getAdministrationService().getGlobalProperty(SchedulerConstants.SCHEDULER_ADMIN_EMAIL_PROPERTY);
      if (recipients != null) {
        String sender=SchedulerConstants.SCHEDULER_DEFAULT_FROM;
        String subject=SchedulerConstants.SCHEDULER_DEFAULT_SUBJECT + ""String_Node_Str"" + throwable.getClass().getName();
        String message=new String();
        message+=""String_Node_Str"";
        message+=SchedulerUtil.getExceptionAsString(throwable);
        message+=""String_Node_Str"";
        for (        Map.Entry<String,String> entry : Context.getAdministrationService().getSystemVariables().entrySet()) {
          message+=entry.getKey() + ""String_Node_Str"" + entry.getValue()+ ""String_Node_Str"";
        }
        log.debug(""String_Node_Str"" + recipients + ""String_Node_Str""+ sender+ ""String_Node_Str""+ subject+ ""String_Node_Str""+ message);
        Context.getMessageService().sendMessage(recipients,sender,subject,message);
      }
    }
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",e);
  }
 finally {
    Context.closeSession();
  }
}"
84532,"/** 
 * @see org.openmrs.reporting.db.ReportObjectDAO#saveReportObject(org.openmrs.reporting.AbstractReportObject)
 */
public AbstractReportObject saveReportObject(AbstractReportObject reportObj) throws DAOException {
  ReportObjectWrapper wrappedReportObject;
  User user=Context.getAuthenticatedUser();
  Date now=new Date();
  if (reportObj.getReportObjectId() == null) {
    wrappedReportObject=new ReportObjectWrapper(reportObj);
    wrappedReportObject.setCreator(user);
    wrappedReportObject.setDateCreated(now);
  }
 else {
    wrappedReportObject=(ReportObjectWrapper)sessionFactory.getCurrentSession().get(ReportObjectWrapper.class,reportObj.getReportObjectId());
    wrappedReportObject.setReportObject(reportObj);
    wrappedReportObject.setChangedBy(user);
    wrappedReportObject.setDateChanged(now);
  }
  sessionFactory.getCurrentSession().saveOrUpdate(wrappedReportObject);
  reportObj.setReportObjectId(wrappedReportObject.getReportObjectId());
  return reportObj;
}","/** 
 * @see org.openmrs.reporting.db.ReportObjectDAO#saveReportObject(org.openmrs.reporting.AbstractReportObject)
 */
public AbstractReportObject saveReportObject(AbstractReportObject reportObj) throws DAOException {
  ReportObjectWrapper wrappedReportObject;
  User user=Context.getAuthenticatedUser();
  Date now=new Date();
  if (reportObj.getReportObjectId() == null) {
    wrappedReportObject=new ReportObjectWrapper(reportObj);
    wrappedReportObject.setCreator(user);
    wrappedReportObject.setDateCreated(now);
    wrappedReportObject.setUuid(UUID.randomUUID().toString());
  }
 else {
    wrappedReportObject=(ReportObjectWrapper)sessionFactory.getCurrentSession().get(ReportObjectWrapper.class,reportObj.getReportObjectId());
    wrappedReportObject.setReportObject(reportObj);
    wrappedReportObject.setChangedBy(user);
    wrappedReportObject.setDateChanged(now);
    wrappedReportObject.setUuid(reportObj.getUuid());
  }
  sessionFactory.getCurrentSession().saveOrUpdate(wrappedReportObject);
  reportObj.setReportObjectId(wrappedReportObject.getReportObjectId());
  return reportObj;
}"
84533,"/** 
 * @param name The concept source name to set.
 */
@Element(data=true) public void setName(String name){
  this.name=name;
}","/** 
 * A descriptive name for this implementation (e.g. AMRS installation in Eldoret, Kenya)
 * @param name The concept source name to set.
 */
@Element(data=true) public void setName(String name){
  this.name=name;
}"
84534,"/** 
 * The implementation id corresponds to the hl7Code of the ConceptSource that this corresponds to
 * @param implementationId the implementationId to set
 */
@Attribute public void setImplementationId(String implementationId){
  this.implementationId=implementationId;
}","/** 
 * This is the unique id for this implementation. <br/> <br/> The implementation id corresponds to the hl7Code of the ConceptSource that this corresponds to. <br/> <br/> Must be limited to 20 characters and numbers. The characters ""^"" and ""|"" are not allowed.
 * @param implementationId the implementationId to set
 */
@Attribute public void setImplementationId(String implementationId){
  this.implementationId=implementationId;
}"
84535,"/** 
 * @return the passphrase
 */
@Element(data=true,required=false) public String getPassphrase(){
  return passphrase;
}","/** 
 * This text is a long text string that is used to validate who uses an implementation id. Multiple installations of openmrs can use the same implmentation id, but they must all know the passphrase. (Note that if an implementation id is shared, it is assumed that those installations are the same implementation).
 * @return the passphrase
 */
@Element(data=true,required=false) public String getPassphrase(){
  return passphrase;
}"
84536,"/** 
 * The implementation id corresponds to the hl7Code of the ConceptSource that this corresponds to
 * @return the implementationId
 */
@Attribute public String getImplementationId(){
  return implementationId;
}","/** 
 * This is the unique id for this implementation. <br/> <br/> The implementation id corresponds to the hl7Code of the ConceptSource that this corresponds to.<br/> <br/> Must be limited to 20 characters and numbers. The characters ""^"" and ""|"" are not allowed.
 * @param implementationId the implementationId to set
 * @return the implementationId
 */
@Attribute public String getImplementationId(){
  return implementationId;
}"
84537,"/** 
 * @return Returns the name.
 */
@Element(data=true) public String getName(){
  return name;
}","/** 
 * A descriptive name for this implementation (e.g. AMRS installation in Eldoret, Kenya)
 * @return Returns the name.
 */
@Element(data=true) public String getName(){
  return name;
}"
84538,"/** 
 * @param passphrase the passphrase to set
 */
@Element(data=true,required=false) public void setPassphrase(String passphrase){
  this.passphrase=passphrase;
}","/** 
 * This text is a long text string that is used to validate who uses an implementation id. Multiple installations of openmrs can use the same implmentation id, but they must all know the passphrase. (Note that if an implementation id is shared, it is assumed that those installations are the same implementation).
 * @param passphrase the passphrase to set
 */
@Element(data=true,required=false) public void setPassphrase(String passphrase){
  this.passphrase=passphrase;
}"
84539,"/** 
 * @param description The description to set.
 */
@Element(data=true) public void setDescription(String description){
  this.description=description;
}","/** 
 * Text describing this implementation. (e.g. Source for the AMPATH program in Kenya. Created by Paul Biondich)
 * @param description The description to set.
 */
@Element(data=true) public void setDescription(String description){
  this.description=description;
}"
84540,"/** 
 * @return Returns the description.
 */
@Element(data=true) public String getDescription(){
  return description;
}","/** 
 * Text describing this implementation. (e.g. Source for the AMPATH program in Kenya. Created by Paul Biondich)
 * @return Returns the description.
 */
@Element(data=true) public String getDescription(){
  return description;
}"
84541,"/** 
 * Set the given <code>implementationId</code> as this implementation's unique id
 * @param implementationId the ImplementationId to save
 * @throws APIException
 * @should create implementation id in database
 * @should overwrite implementation id in database if exists
 */
@Authorized(OpenmrsConstants.PRIV_MANAGE_IMPLEMENTATION_ID) public void setImplementationId(ImplementationId implementationId) throws APIException ;","/** 
 * Set the given <code>implementationId</code> as this implementation's unique id
 * @param implementationId the ImplementationId to save
 * @throws APIException if implementationId is empty or is invalid according to central id server
 * @should create implementation id in database
 * @should overwrite implementation id in database if exists
 * @should not fail if given implementationId is null
 * @should throw APIException if given empty implementationId object
 * @should throw APIException if given a caret in the implementationId code
 * @should throw APIException if given a pipe in the implementationId code
 * @should set uuid on implementation id global property
 */
@Authorized(OpenmrsConstants.PRIV_MANAGE_IMPLEMENTATION_ID) public void setImplementationId(ImplementationId implementationId) throws APIException ;"
84542,"/** 
 * @see org.openmrs.api.AdministrationService#setImplementationId(org.openmrs.ImplementationId)
 */
public void setImplementationId(ImplementationId implementationId) throws APIException {
  if (implementationId == null)   return;
  String description=implementationId.getDescription();
  try {
    description=checkImplementationIdValidity(implementationId.getImplementationId(),description,implementationId.getPassphrase());
    implementationId.setDescription(description);
    boolean foundMatchingSource=false;
    List<ConceptSource> sources=Context.getConceptService().getAllConceptSources();
    if (sources != null) {
      for (      ConceptSource source : sources) {
        if (implementationId.getImplementationId().equals(source.getHl7Code())) {
          foundMatchingSource=true;
        }
      }
    }
    if (!foundMatchingSource) {
      ConceptSource newConceptSource=new ConceptSource();
      newConceptSource.setName(implementationId.getName());
      newConceptSource.setDescription(implementationId.getDescription());
      newConceptSource.setHl7Code(implementationId.getImplementationId());
      if (Context.getAuthenticatedUser() == null)       newConceptSource.setCreator(new User(1));
      Context.getConceptService().saveConceptSource(newConceptSource);
    }
    StringWriter stringWriter=new StringWriter();
    OpenmrsUtil.getSerializer().write(implementationId,stringWriter);
    saveGlobalProperty(new GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_IMPLEMENTATION_ID,stringWriter.toString()));
  }
 catch (  APIException e) {
    throw e;
  }
catch (  Exception e) {
    throw new APIException(e);
  }
 finally {
  }
}","/** 
 * @see org.openmrs.api.AdministrationService#setImplementationId(org.openmrs.ImplementationId)
 */
public void setImplementationId(ImplementationId implementationId) throws APIException {
  if (implementationId == null)   return;
  String description=implementationId.getDescription();
  try {
    description=checkImplementationIdValidity(implementationId.getImplementationId(),description,implementationId.getPassphrase());
    implementationId.setDescription(description);
    boolean foundMatchingSource=false;
    List<ConceptSource> sources=Context.getConceptService().getAllConceptSources();
    if (sources != null) {
      for (      ConceptSource source : sources) {
        if (implementationId.getImplementationId().equals(source.getHl7Code())) {
          foundMatchingSource=true;
        }
      }
    }
    if (!foundMatchingSource) {
      ConceptSource newConceptSource=new ConceptSource();
      newConceptSource.setName(implementationId.getName());
      newConceptSource.setDescription(implementationId.getDescription());
      newConceptSource.setHl7Code(implementationId.getImplementationId());
      if (Context.getAuthenticatedUser() == null)       newConceptSource.setCreator(new User(1));
      Context.getConceptService().saveConceptSource(newConceptSource);
    }
    StringWriter stringWriter=new StringWriter();
    OpenmrsUtil.getSerializer().write(implementationId,stringWriter);
    Context.getAdministrationService().saveGlobalProperty(new GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_IMPLEMENTATION_ID,stringWriter.toString()));
  }
 catch (  APIException e) {
    throw e;
  }
catch (  Exception e) {
    throw new APIException(e);
  }
 finally {
  }
}"
84543,"/** 
 * @see org.openmrs.api.AdministrationService#getImplementationId()
 */
public ImplementationId getImplementationId() throws APIException {
  return dao.getImplementationId();
}","/** 
 * @see org.openmrs.api.AdministrationService#getImplementationId()
 */
public ImplementationId getImplementationId() throws APIException {
  String property=getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_IMPLEMENTATION_ID);
  if (property == null)   return null;
  try {
    ImplementationId implId=OpenmrsUtil.getSerializer().read(ImplementationId.class,property);
    return implId;
  }
 catch (  Throwable t) {
    log.debug(""String_Node_Str"",t);
  }
  return null;
}"
84544,"/** 
 * Called by   {@link #doFilter(ServletRequest,ServletResponse,FilterChain)} on POST requests
 * @param httpRequest
 * @param httpResponse
 */
protected void doPost(HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws IOException, ServletException {
  String page=httpRequest.getParameter(""String_Node_Str"");
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  Writer writer=httpResponse.getWriter();
  if (""String_Node_Str"".equals(page)) {
    wizardModel.databaseConnection=httpRequest.getParameter(""String_Node_Str"");
    checkForEmptyValue(wizardModel.databaseConnection,errors,""String_Node_Str"");
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      wizardModel.databaseName=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.databaseName,errors,""String_Node_Str"");
      wizardModel.hasCurrentOpenmrsDatabase=true;
    }
 else {
      wizardModel.hasCurrentOpenmrsDatabase=false;
      wizardModel.createTables=true;
      wizardModel.databaseName=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.databaseName,errors,""String_Node_Str"");
      wizardModel.createDatabaseUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createDatabaseUsername,errors,""String_Node_Str"");
      wizardModel.createDatabasePassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createDatabasePassword,errors,""String_Node_Str"");
    }
    if (errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (wizardModel.hasCurrentOpenmrsDatabase) {
      wizardModel.createTables=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    }
    wizardModel.addDemoData=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      wizardModel.currentDatabaseUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.currentDatabaseUsername,errors,""String_Node_Str"");
      wizardModel.currentDatabasePassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.currentDatabasePassword,errors,""String_Node_Str"");
      wizardModel.hasCurrentDatabaseUser=true;
      wizardModel.createDatabaseUser=false;
    }
 else {
      wizardModel.hasCurrentDatabaseUser=false;
      wizardModel.createDatabaseUser=true;
      wizardModel.createUserUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createUserUsername,errors,""String_Node_Str"");
      wizardModel.createUserPassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createUserPassword,errors,""String_Node_Str"");
    }
    if (errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    wizardModel.moduleWebAdmin=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    wizardModel.autoUpdateDatabase=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    if (wizardModel.createTables) {
      page=""String_Node_Str"";
    }
 else {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    wizardModel.adminUserPassword=httpRequest.getParameter(""String_Node_Str"");
    String adminUserConfirm=httpRequest.getParameter(""String_Node_Str"");
    if (!wizardModel.adminUserPassword.equals(adminUserConfirm)) {
      errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (wizardModel.adminUserPassword.equals(""String_Node_Str"")) {
      errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    try {
      OpenmrsUtil.validatePassword(""String_Node_Str"",wizardModel.adminUserPassword,""String_Node_Str"");
    }
 catch (    PasswordException p) {
      errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      if (wizardModel.createTables)       renderTemplate(""String_Node_Str"",referenceMap,writer);
 else       renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    wizardModel.implementationIdName=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationId=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationIdPassPhrase=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationIdDescription=httpRequest.getParameter(""String_Node_Str"");
    if (wizardModel.implementationId.indexOf('^') != -1 || wizardModel.implementationId.indexOf('|') != -1) {
      errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    Properties runtimeProperties=new Properties();
    String connectionUsername;
    String connectionPassword;
    if (!wizardModel.hasCurrentOpenmrsDatabase) {
      String sql=""String_Node_Str"";
      int result=executeStatement(false,wizardModel.createDatabaseUsername,wizardModel.createDatabasePassword,sql,wizardModel.databaseName);
      if (result < 0) {
        renderTemplate(DEFAULT_PAGE,null,writer);
        return;
      }
 else {
        wizardModel.workLog.add(""String_Node_Str"" + wizardModel.databaseName);
      }
    }
    if (wizardModel.createDatabaseUser) {
      connectionUsername=wizardModel.databaseName + ""String_Node_Str"";
      if (connectionUsername.length() > 16)       connectionUsername=wizardModel.databaseName.substring(0,11) + ""String_Node_Str"";
      connectionPassword=""String_Node_Str"";
      String chars=""String_Node_Str"";
      Random r=new Random();
      for (int x=0; x < 12; x++) {
        connectionPassword+=chars.charAt(r.nextInt(chars.length()));
      }
      String sql=""String_Node_Str"";
      executeStatement(true,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,connectionUsername);
      sql=""String_Node_Str"";
      if (-1 != executeStatement(false,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,connectionUsername,connectionPassword)) {
        wizardModel.workLog.add(""String_Node_Str"" + connectionUsername);
      }
 else {
        renderTemplate(DEFAULT_PAGE,null,writer);
        return;
      }
      sql=""String_Node_Str"";
      int result=executeStatement(false,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,wizardModel.databaseName,connectionUsername);
      if (result < 0) {
        renderTemplate(DEFAULT_PAGE,null,writer);
        return;
      }
 else {
        wizardModel.workLog.add(""String_Node_Str"" + connectionUsername + ""String_Node_Str""+ wizardModel.databaseName);
      }
    }
 else {
      connectionUsername=wizardModel.currentDatabaseUsername;
      connectionPassword=wizardModel.currentDatabasePassword;
    }
    String finalDatabaseConnectionString=wizardModel.databaseConnection.replace(""String_Node_Str"",wizardModel.databaseName);
    if (!verifyConnection(connectionUsername,connectionPassword,finalDatabaseConnectionString)) {
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    runtimeProperties.put(""String_Node_Str"",finalDatabaseConnectionString);
    runtimeProperties.put(""String_Node_Str"",connectionUsername);
    runtimeProperties.put(""String_Node_Str"",connectionPassword);
    runtimeProperties.put(""String_Node_Str"",wizardModel.moduleWebAdmin.toString());
    runtimeProperties.put(""String_Node_Str"",wizardModel.autoUpdateDatabase.toString());
    runtimeProperties.put(SchedulerConstants.SCHEDULER_USERNAME_PROPERTY,""String_Node_Str"");
    runtimeProperties.put(SchedulerConstants.SCHEDULER_PASSWORD_PROPERTY,wizardModel.adminUserPassword);
    Context.setRuntimeProperties(runtimeProperties);
    if (wizardModel.createTables) {
      try {
        DatabaseUpdater.executeChangelog(LIQUIBASE_SCHEMA_DATA,null);
        DatabaseUpdater.executeChangelog(LIQUIBASE_CORE_DATA,null);
        wizardModel.workLog.add(""String_Node_Str"");
      }
 catch (      Exception e) {
        errors.add(e.getMessage() + ""String_Node_Str"");
        log.warn(""String_Node_Str"",e);
      }
    }
    if (wizardModel.createTables && wizardModel.addDemoData) {
      try {
        DatabaseUpdater.executeChangelog(LIQUIBASE_DEMO_DATA,null);
        wizardModel.workLog.add(""String_Node_Str"");
      }
 catch (      Exception e) {
        errors.add(e.getMessage() + ""String_Node_Str"");
        log.warn(""String_Node_Str"",e);
      }
    }
    try {
      DatabaseUpdater.update();
    }
 catch (    Exception e) {
      errors.add(e.getMessage() + ""String_Node_Str"");
      log.warn(""String_Node_Str"",e);
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    ContextLoader contextLoader=new ContextLoader();
    contextLoader.initWebApplicationContext(filterConfig.getServletContext());
    try {
      Context.openSession();
      Context.startup(runtimeProperties);
    }
 catch (    DatabaseUpdateException updateEx) {
      log.warn(""String_Node_Str"",updateEx);
      errors.add(updateEx.getMessage() + ""String_Node_Str"" + updateEx.getMessage());
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
catch (    InputRequiredException inputRequiredEx) {
      log.warn(""String_Node_Str"");
      errors.add(""String_Node_Str"");
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    if (!wizardModel.implementationId.equals(""String_Node_Str"")) {
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_GLOBAL_PROPERTIES);
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_CONCEPT_SOURCES);
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_CONCEPT_SOURCES);
        ImplementationId implId=new ImplementationId();
        implId.setName(wizardModel.implementationIdName);
        implId.setImplementationId(wizardModel.implementationId);
        implId.setPassphrase(wizardModel.implementationIdPassPhrase);
        implId.setDescription(wizardModel.implementationIdDescription);
        Context.getAdministrationService().setImplementationId(implId);
      }
 catch (      Throwable t) {
        errors.add(t.getMessage() + ""String_Node_Str"");
        log.warn(""String_Node_Str"",t);
        renderTemplate(DEFAULT_PAGE,null,writer);
        Context.shutdown();
        WebModuleUtil.shutdownModules(filterConfig.getServletContext());
        contextLoader.closeWebApplicationContext(filterConfig.getServletContext());
        return;
      }
 finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_GLOBAL_PROPERTIES);
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_CONCEPT_SOURCES);
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_CONCEPT_SOURCES);
      }
    }
    try {
      if (wizardModel.createTables) {
        Context.authenticate(""String_Node_Str"",""String_Node_Str"");
        Context.getUserService().changePassword(""String_Node_Str"",wizardModel.adminUserPassword);
        Context.logout();
      }
      Listener.loadAndStartCoreModules(filterConfig.getServletContext());
      Listener.performWebStartOfModules(filterConfig.getServletContext());
      SchedulerUtil.startup(runtimeProperties);
    }
 catch (    Throwable t) {
      Context.shutdown();
      WebModuleUtil.shutdownModules(filterConfig.getServletContext());
      contextLoader.closeWebApplicationContext(filterConfig.getServletContext());
      errors.add(t.getMessage() + ""String_Node_Str"");
      log.warn(""String_Node_Str"",t);
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(getRuntimePropertiesFile());
      runtimeProperties.store(fos,""String_Node_Str"");
      wizardModel.workLog.add(""String_Node_Str"" + getRuntimePropertiesFile());
    }
  finally {
      if (fos != null) {
        fos.close();
      }
    }
    initializationComplete=true;
    Context.closeSession();
    httpResponse.sendRedirect(""String_Node_Str"" + WebConstants.WEBAPP_NAME);
  }
}","/** 
 * Called by   {@link #doFilter(ServletRequest,ServletResponse,FilterChain)} on POST requests
 * @param httpRequest
 * @param httpResponse
 */
protected void doPost(HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws IOException, ServletException {
  String page=httpRequest.getParameter(""String_Node_Str"");
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  Writer writer=httpResponse.getWriter();
  if (""String_Node_Str"".equals(page)) {
    wizardModel.databaseConnection=httpRequest.getParameter(""String_Node_Str"");
    checkForEmptyValue(wizardModel.databaseConnection,errors,""String_Node_Str"");
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      wizardModel.databaseName=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.databaseName,errors,""String_Node_Str"");
      wizardModel.hasCurrentOpenmrsDatabase=true;
    }
 else {
      wizardModel.hasCurrentOpenmrsDatabase=false;
      wizardModel.createTables=true;
      wizardModel.databaseName=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.databaseName,errors,""String_Node_Str"");
      wizardModel.createDatabaseUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createDatabaseUsername,errors,""String_Node_Str"");
      wizardModel.createDatabasePassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createDatabasePassword,errors,""String_Node_Str"");
    }
    if (errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (wizardModel.hasCurrentOpenmrsDatabase) {
      wizardModel.createTables=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    }
    wizardModel.addDemoData=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      wizardModel.currentDatabaseUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.currentDatabaseUsername,errors,""String_Node_Str"");
      wizardModel.currentDatabasePassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.currentDatabasePassword,errors,""String_Node_Str"");
      wizardModel.hasCurrentDatabaseUser=true;
      wizardModel.createDatabaseUser=false;
    }
 else {
      wizardModel.hasCurrentDatabaseUser=false;
      wizardModel.createDatabaseUser=true;
      wizardModel.createUserUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createUserUsername,errors,""String_Node_Str"");
      wizardModel.createUserPassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createUserPassword,errors,""String_Node_Str"");
    }
    if (errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    wizardModel.moduleWebAdmin=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    wizardModel.autoUpdateDatabase=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    if (wizardModel.createTables) {
      page=""String_Node_Str"";
    }
 else {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    wizardModel.adminUserPassword=httpRequest.getParameter(""String_Node_Str"");
    String adminUserConfirm=httpRequest.getParameter(""String_Node_Str"");
    if (!wizardModel.adminUserPassword.equals(adminUserConfirm)) {
      errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (wizardModel.adminUserPassword.equals(""String_Node_Str"")) {
      errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    try {
      OpenmrsUtil.validatePassword(""String_Node_Str"",wizardModel.adminUserPassword,""String_Node_Str"");
    }
 catch (    PasswordException p) {
      errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      if (wizardModel.createTables)       renderTemplate(""String_Node_Str"",referenceMap,writer);
 else       renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    wizardModel.implementationIdName=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationId=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationIdPassPhrase=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationIdDescription=httpRequest.getParameter(""String_Node_Str"");
    if (wizardModel.implementationId.indexOf('^') != -1 || wizardModel.implementationId.indexOf('|') != -1) {
      errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    Properties runtimeProperties=new Properties();
    String connectionUsername;
    String connectionPassword;
    if (!wizardModel.hasCurrentOpenmrsDatabase) {
      String sql=""String_Node_Str"";
      int result=executeStatement(false,wizardModel.createDatabaseUsername,wizardModel.createDatabasePassword,sql,wizardModel.databaseName);
      if (result < 0) {
        renderTemplate(DEFAULT_PAGE,null,writer);
        return;
      }
 else {
        wizardModel.workLog.add(""String_Node_Str"" + wizardModel.databaseName);
      }
    }
    if (wizardModel.createDatabaseUser) {
      connectionUsername=wizardModel.databaseName + ""String_Node_Str"";
      if (connectionUsername.length() > 16)       connectionUsername=wizardModel.databaseName.substring(0,11) + ""String_Node_Str"";
      connectionPassword=""String_Node_Str"";
      String chars=""String_Node_Str"";
      Random r=new Random();
      for (int x=0; x < 12; x++) {
        connectionPassword+=chars.charAt(r.nextInt(chars.length()));
      }
      String sql=""String_Node_Str"";
      executeStatement(true,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,connectionUsername);
      sql=""String_Node_Str"";
      if (-1 != executeStatement(false,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,connectionUsername,connectionPassword)) {
        wizardModel.workLog.add(""String_Node_Str"" + connectionUsername);
      }
 else {
        renderTemplate(DEFAULT_PAGE,null,writer);
        return;
      }
      sql=""String_Node_Str"";
      int result=executeStatement(false,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,wizardModel.databaseName,connectionUsername);
      if (result < 0) {
        renderTemplate(DEFAULT_PAGE,null,writer);
        return;
      }
 else {
        wizardModel.workLog.add(""String_Node_Str"" + connectionUsername + ""String_Node_Str""+ wizardModel.databaseName);
      }
    }
 else {
      connectionUsername=wizardModel.currentDatabaseUsername;
      connectionPassword=wizardModel.currentDatabasePassword;
    }
    String finalDatabaseConnectionString=wizardModel.databaseConnection.replace(""String_Node_Str"",wizardModel.databaseName);
    if (!verifyConnection(connectionUsername,connectionPassword,finalDatabaseConnectionString)) {
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    runtimeProperties.put(""String_Node_Str"",finalDatabaseConnectionString);
    runtimeProperties.put(""String_Node_Str"",connectionUsername);
    runtimeProperties.put(""String_Node_Str"",connectionPassword);
    runtimeProperties.put(""String_Node_Str"",wizardModel.moduleWebAdmin.toString());
    runtimeProperties.put(""String_Node_Str"",wizardModel.autoUpdateDatabase.toString());
    runtimeProperties.put(SchedulerConstants.SCHEDULER_USERNAME_PROPERTY,""String_Node_Str"");
    runtimeProperties.put(SchedulerConstants.SCHEDULER_PASSWORD_PROPERTY,wizardModel.adminUserPassword);
    Context.setRuntimeProperties(runtimeProperties);
    if (wizardModel.createTables) {
      try {
        DatabaseUpdater.executeChangelog(LIQUIBASE_SCHEMA_DATA,null);
        DatabaseUpdater.executeChangelog(LIQUIBASE_CORE_DATA,null);
        wizardModel.workLog.add(""String_Node_Str"");
      }
 catch (      Exception e) {
        errors.add(e.getMessage() + ""String_Node_Str"");
        log.warn(""String_Node_Str"",e);
      }
    }
    if (wizardModel.createTables && wizardModel.addDemoData) {
      try {
        DatabaseUpdater.executeChangelog(LIQUIBASE_DEMO_DATA,null);
        wizardModel.workLog.add(""String_Node_Str"");
      }
 catch (      Exception e) {
        errors.add(e.getMessage() + ""String_Node_Str"");
        log.warn(""String_Node_Str"",e);
      }
    }
    try {
      DatabaseUpdater.update();
    }
 catch (    Exception e) {
      errors.add(e.getMessage() + ""String_Node_Str"");
      log.warn(""String_Node_Str"",e);
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    ContextLoader contextLoader=new ContextLoader();
    contextLoader.initWebApplicationContext(filterConfig.getServletContext());
    try {
      Context.openSession();
      Context.startup(runtimeProperties);
    }
 catch (    DatabaseUpdateException updateEx) {
      log.warn(""String_Node_Str"",updateEx);
      errors.add(updateEx.getMessage() + ""String_Node_Str"" + updateEx.getMessage());
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
catch (    InputRequiredException inputRequiredEx) {
      log.warn(""String_Node_Str"");
      errors.add(""String_Node_Str"");
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    if (!wizardModel.implementationId.equals(""String_Node_Str"")) {
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_GLOBAL_PROPERTIES);
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_CONCEPT_SOURCES);
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_CONCEPT_SOURCES);
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_IMPLEMENTATION_ID);
        ImplementationId implId=new ImplementationId();
        implId.setName(wizardModel.implementationIdName);
        implId.setImplementationId(wizardModel.implementationId);
        implId.setPassphrase(wizardModel.implementationIdPassPhrase);
        implId.setDescription(wizardModel.implementationIdDescription);
        Context.getAdministrationService().setImplementationId(implId);
      }
 catch (      Throwable t) {
        errors.add(t.getMessage() + ""String_Node_Str"");
        log.warn(""String_Node_Str"",t);
        renderTemplate(DEFAULT_PAGE,null,writer);
        Context.shutdown();
        WebModuleUtil.shutdownModules(filterConfig.getServletContext());
        contextLoader.closeWebApplicationContext(filterConfig.getServletContext());
        return;
      }
 finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_GLOBAL_PROPERTIES);
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_CONCEPT_SOURCES);
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_CONCEPT_SOURCES);
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_IMPLEMENTATION_ID);
      }
    }
    try {
      if (wizardModel.createTables) {
        Context.authenticate(""String_Node_Str"",""String_Node_Str"");
        Context.getUserService().changePassword(""String_Node_Str"",wizardModel.adminUserPassword);
        Context.logout();
      }
      Listener.loadAndStartCoreModules(filterConfig.getServletContext());
      Listener.performWebStartOfModules(filterConfig.getServletContext());
      SchedulerUtil.startup(runtimeProperties);
    }
 catch (    Throwable t) {
      Context.shutdown();
      WebModuleUtil.shutdownModules(filterConfig.getServletContext());
      contextLoader.closeWebApplicationContext(filterConfig.getServletContext());
      errors.add(t.getMessage() + ""String_Node_Str"");
      log.warn(""String_Node_Str"",t);
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(getRuntimePropertiesFile());
      runtimeProperties.store(fos,""String_Node_Str"");
      wizardModel.workLog.add(""String_Node_Str"" + getRuntimePropertiesFile());
    }
  finally {
      if (fos != null) {
        fos.close();
      }
    }
    initializationComplete=true;
    Context.closeSession();
    httpResponse.sendRedirect(""String_Node_Str"" + WebConstants.WEBAPP_NAME);
  }
}"
84545,"/** 
 * Called by   {@link #doFilter(ServletRequest,ServletResponse,FilterChain)} on POST requests
 * @see org.openmrs.web.filter.StartupFilter#doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
 */
protected void doPost(HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws IOException, ServletException {
  String page=httpRequest.getParameter(""String_Node_Str"");
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  Writer writer=httpResponse.getWriter();
  if (DEFAULT_PAGE.equals(page)) {
    String username=httpRequest.getParameter(""String_Node_Str"");
    String password=httpRequest.getParameter(""String_Node_Str"");
    log.debug(""String_Node_Str"" + username);
    if (authenticateAsSuperUser(username,password)) {
      log.debug(""String_Node_Str"");
      authenticatedSuccessfully=true;
      renderTemplate(REVIEW_CHANGES,referenceMap,writer);
      return;
    }
 else {
      try {
        log.debug(""String_Node_Str"");
        Thread.sleep(3000);
      }
 catch (      InterruptedException e) {
        log.error(""String_Node_Str"",e);
        throw new IOException(e);
      }
      errors.add(""String_Node_Str"" + OpenmrsConstants.SUPERUSER_ROLE + ""String_Node_Str"");
      renderTemplate(DEFAULT_PAGE,referenceMap,writer);
      return;
    }
  }
 else   if (REVIEW_CHANGES.equals(page)) {
    if (!authenticatedSuccessfully) {
      renderTemplate(DEFAULT_PAGE,referenceMap,writer);
    }
    try {
      DatabaseUpdater.update();
    }
 catch (    InputRequiredException inputRequired) {
      log.error(""String_Node_Str"",inputRequired);
      errors.add(""String_Node_Str"" + inputRequired.getMessage());
      renderTemplate(REVIEW_CHANGES,referenceMap,writer);
      return;
    }
catch (    DatabaseUpdateException e) {
      log.error(""String_Node_Str"",e);
      errors.add(""String_Node_Str"" + e.getMessage());
      renderTemplate(REVIEW_CHANGES,referenceMap,writer);
      return;
    }
  }
  try {
    startOpenmrs(filterConfig.getServletContext());
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
    errors.add(""String_Node_Str"" + t.getMessage());
    renderTemplate(DEFAULT_PAGE,null,writer);
    return;
  }
  updatesRequired=false;
  httpResponse.sendRedirect(""String_Node_Str"" + WebConstants.WEBAPP_NAME);
}","/** 
 * Called by   {@link #doFilter(ServletRequest,ServletResponse,FilterChain)} on POST requests
 * @see org.openmrs.web.filter.StartupFilter#doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
 */
protected void doPost(HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws IOException, ServletException {
  String page=httpRequest.getParameter(""String_Node_Str"");
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  Writer writer=httpResponse.getWriter();
  if (DEFAULT_PAGE.equals(page)) {
    String username=httpRequest.getParameter(""String_Node_Str"");
    String password=httpRequest.getParameter(""String_Node_Str"");
    log.debug(""String_Node_Str"" + username);
    if (authenticateAsSuperUser(username,password)) {
      log.debug(""String_Node_Str"");
      authenticatedSuccessfully=true;
      renderTemplate(REVIEW_CHANGES,referenceMap,writer);
      return;
    }
 else {
      try {
        log.debug(""String_Node_Str"");
        Thread.sleep(3000);
      }
 catch (      InterruptedException e) {
        log.error(""String_Node_Str"",e);
        throw new IOException(""String_Node_Str"" + e.getMessage());
      }
      errors.add(""String_Node_Str"" + OpenmrsConstants.SUPERUSER_ROLE + ""String_Node_Str"");
      renderTemplate(DEFAULT_PAGE,referenceMap,writer);
      return;
    }
  }
 else   if (REVIEW_CHANGES.equals(page)) {
    if (!authenticatedSuccessfully) {
      renderTemplate(DEFAULT_PAGE,referenceMap,writer);
    }
    try {
      DatabaseUpdater.update();
    }
 catch (    InputRequiredException inputRequired) {
      log.error(""String_Node_Str"",inputRequired);
      errors.add(""String_Node_Str"" + inputRequired.getMessage());
      renderTemplate(REVIEW_CHANGES,referenceMap,writer);
      return;
    }
catch (    DatabaseUpdateException e) {
      log.error(""String_Node_Str"",e);
      errors.add(""String_Node_Str"" + e.getMessage());
      renderTemplate(REVIEW_CHANGES,referenceMap,writer);
      return;
    }
  }
  try {
    startOpenmrs(filterConfig.getServletContext());
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
    errors.add(""String_Node_Str"" + t.getMessage());
    renderTemplate(DEFAULT_PAGE,null,writer);
    return;
  }
  updatesRequired=false;
  httpResponse.sendRedirect(""String_Node_Str"" + WebConstants.WEBAPP_NAME);
}"
84546,"/** 
 * Called by   {@link #doFilter(ServletRequest,ServletResponse,FilterChain)} on POST requests
 * @param httpRequest
 * @param httpResponse
 */
private void doPost(HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws IOException {
  String page=httpRequest.getParameter(""String_Node_Str"");
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  Writer writer=httpResponse.getWriter();
  wizardModel.errors.clear();
  if (""String_Node_Str"".equals(page)) {
    wizardModel.databaseConnection=httpRequest.getParameter(""String_Node_Str"");
    checkForEmptyValue(wizardModel.databaseConnection,wizardModel.errors,""String_Node_Str"");
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      wizardModel.databaseName=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.databaseName,wizardModel.errors,""String_Node_Str"");
      wizardModel.hasCurrentOpenmrsDatabase=true;
    }
 else {
      wizardModel.hasCurrentOpenmrsDatabase=false;
      wizardModel.createTables=true;
      wizardModel.databaseName=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.databaseName,wizardModel.errors,""String_Node_Str"");
      wizardModel.createDatabaseUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createDatabaseUsername,wizardModel.errors,""String_Node_Str"");
      wizardModel.createDatabasePassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createDatabasePassword,wizardModel.errors,""String_Node_Str"");
    }
    if (wizardModel.errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (wizardModel.hasCurrentOpenmrsDatabase) {
      wizardModel.createTables=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    }
    wizardModel.addDemoData=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      wizardModel.currentDatabaseUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.currentDatabaseUsername,wizardModel.errors,""String_Node_Str"");
      wizardModel.currentDatabasePassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.currentDatabasePassword,wizardModel.errors,""String_Node_Str"");
      wizardModel.hasCurrentDatabaseUser=true;
      wizardModel.createDatabaseUser=false;
    }
 else {
      wizardModel.hasCurrentDatabaseUser=false;
      wizardModel.createDatabaseUser=true;
      wizardModel.createUserUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createUserUsername,wizardModel.errors,""String_Node_Str"");
      wizardModel.createUserPassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createUserPassword,wizardModel.errors,""String_Node_Str"");
    }
    if (wizardModel.errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    wizardModel.moduleWebAdmin=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    wizardModel.autoUpdateDatabase=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    if (wizardModel.createTables) {
      page=""String_Node_Str"";
    }
 else {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    wizardModel.adminUserPassword=httpRequest.getParameter(""String_Node_Str"");
    String adminUserConfirm=httpRequest.getParameter(""String_Node_Str"");
    if (!wizardModel.adminUserPassword.equals(adminUserConfirm)) {
      wizardModel.errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (wizardModel.adminUserPassword.equals(""String_Node_Str"")) {
      wizardModel.errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    try {
      OpenmrsUtil.validatePassword(""String_Node_Str"",wizardModel.adminUserPassword,""String_Node_Str"");
    }
 catch (    PasswordException p) {
      wizardModel.errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (wizardModel.errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      if (wizardModel.createTables)       renderTemplate(""String_Node_Str"",referenceMap,writer);
 else       renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    wizardModel.implementationIdName=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationId=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationIdPassPhrase=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationIdDescription=httpRequest.getParameter(""String_Node_Str"");
    if (wizardModel.implementationId.indexOf('^') != -1 || wizardModel.implementationId.indexOf('|') != -1) {
      wizardModel.errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (wizardModel.errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    Properties runtimeProperties=new Properties();
    String connectionUsername;
    String connectionPassword;
    if (!wizardModel.hasCurrentOpenmrsDatabase) {
      String sql=""String_Node_Str"";
      int result=executeStatement(false,wizardModel.createDatabaseUsername,wizardModel.createDatabasePassword,sql,wizardModel.databaseName);
      if (result < 0) {
        renderTemplate(DEFAULT_PAGE,null,writer);
        return;
      }
 else {
        wizardModel.workLog.add(""String_Node_Str"" + wizardModel.databaseName);
      }
    }
    if (wizardModel.createDatabaseUser) {
      connectionUsername=wizardModel.databaseName + ""String_Node_Str"";
      if (connectionUsername.length() > 16)       connectionUsername=wizardModel.databaseName.substring(0,11) + ""String_Node_Str"";
      connectionPassword=""String_Node_Str"";
      String chars=""String_Node_Str"";
      Random r=new Random();
      for (int x=0; x < 12; x++) {
        connectionPassword+=chars.charAt(r.nextInt(chars.length()));
      }
      String sql=""String_Node_Str"";
      executeStatement(true,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,connectionUsername);
      sql=""String_Node_Str"";
      if (-1 != executeStatement(false,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,connectionUsername,connectionPassword)) {
        wizardModel.workLog.add(""String_Node_Str"" + connectionUsername);
      }
 else {
        renderTemplate(DEFAULT_PAGE,null,writer);
        return;
      }
      sql=""String_Node_Str"";
      int result=executeStatement(false,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,wizardModel.databaseName,connectionUsername);
      if (result < 0) {
        renderTemplate(DEFAULT_PAGE,null,writer);
        return;
      }
 else {
        wizardModel.workLog.add(""String_Node_Str"" + connectionUsername + ""String_Node_Str""+ wizardModel.databaseName);
      }
    }
 else {
      connectionUsername=wizardModel.currentDatabaseUsername;
      connectionPassword=wizardModel.currentDatabasePassword;
    }
    String finalDatabaseConnectionString=wizardModel.databaseConnection.replace(""String_Node_Str"",wizardModel.databaseName);
    if (!verifyConnection(connectionUsername,connectionPassword,finalDatabaseConnectionString)) {
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    runtimeProperties.put(""String_Node_Str"",finalDatabaseConnectionString);
    runtimeProperties.put(""String_Node_Str"",connectionUsername);
    runtimeProperties.put(""String_Node_Str"",connectionPassword);
    runtimeProperties.put(""String_Node_Str"",wizardModel.moduleWebAdmin.toString());
    runtimeProperties.put(""String_Node_Str"",wizardModel.autoUpdateDatabase.toString());
    runtimeProperties.put(SchedulerConstants.SCHEDULER_USERNAME_PROPERTY,""String_Node_Str"");
    runtimeProperties.put(SchedulerConstants.SCHEDULER_PASSWORD_PROPERTY,wizardModel.adminUserPassword);
    Context.setRuntimeProperties(runtimeProperties);
    if (wizardModel.createTables) {
      try {
        DatabaseUpdater.executeChangelog(LIQUIBASE_SCHEMA_DATA,null);
        DatabaseUpdater.executeChangelog(LIQUIBASE_CORE_DATA,null);
        wizardModel.workLog.add(""String_Node_Str"");
      }
 catch (      Exception e) {
        wizardModel.errors.add(e.getMessage() + ""String_Node_Str"");
        log.warn(""String_Node_Str"",e);
      }
    }
    if (wizardModel.createTables && wizardModel.addDemoData) {
      try {
        DatabaseUpdater.executeChangelog(LIQUIBASE_DEMO_DATA,null);
        wizardModel.workLog.add(""String_Node_Str"");
      }
 catch (      Exception e) {
        wizardModel.errors.add(e.getMessage() + ""String_Node_Str"");
        log.warn(""String_Node_Str"",e);
      }
    }
    try {
      DatabaseUpdater.update();
    }
 catch (    Exception e) {
      wizardModel.errors.add(e.getMessage() + ""String_Node_Str"");
      log.warn(""String_Node_Str"",e);
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    ContextLoader contextLoader=new ContextLoader();
    contextLoader.initWebApplicationContext(filterConfig.getServletContext());
    try {
      Context.startup(runtimeProperties);
    }
 catch (    DatabaseUpdateException updateEx) {
      log.warn(""String_Node_Str"",updateEx);
      wizardModel.errors.add(updateEx.getMessage() + ""String_Node_Str"" + updateEx.getMessage());
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
catch (    InputRequiredException inputRequiredEx) {
      log.warn(""String_Node_Str"");
      wizardModel.errors.add(""String_Node_Str"");
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    if (!wizardModel.implementationId.equals(""String_Node_Str"")) {
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_GLOBAL_PROPERTIES);
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_CONCEPT_SOURCES);
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_CONCEPT_SOURCES);
        ImplementationId implId=new ImplementationId();
        implId.setName(wizardModel.implementationIdName);
        implId.setImplementationId(wizardModel.implementationId);
        implId.setPassphrase(wizardModel.implementationIdPassPhrase);
        implId.setDescription(wizardModel.implementationIdDescription);
        Context.getAdministrationService().setImplementationId(implId);
      }
 catch (      Throwable t) {
        wizardModel.errors.add(t.getMessage() + ""String_Node_Str"");
        log.warn(""String_Node_Str"",t);
        renderTemplate(DEFAULT_PAGE,null,writer);
        Context.shutdown();
        WebModuleUtil.shutdownModules(filterConfig.getServletContext());
        contextLoader.closeWebApplicationContext(filterConfig.getServletContext());
        return;
      }
 finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_GLOBAL_PROPERTIES);
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_CONCEPT_SOURCES);
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_CONCEPT_SOURCES);
      }
    }
    try {
      if (wizardModel.createTables) {
        Context.authenticate(""String_Node_Str"",""String_Node_Str"");
        Context.getUserService().changePassword(""String_Node_Str"",wizardModel.adminUserPassword);
        Context.logout();
      }
      Listener.loadCoreModules(filterConfig.getServletContext());
      Listener.performWebStartOfModules(filterConfig.getServletContext());
      SchedulerUtil.startup(runtimeProperties);
    }
 catch (    Throwable t) {
      Context.shutdown();
      WebModuleUtil.shutdownModules(filterConfig.getServletContext());
      contextLoader.closeWebApplicationContext(filterConfig.getServletContext());
      wizardModel.errors.add(t.getMessage() + ""String_Node_Str"");
      log.warn(""String_Node_Str"",t);
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(getRuntimePropertiesFile());
      runtimeProperties.store(fos,""String_Node_Str"");
      wizardModel.workLog.add(""String_Node_Str"" + getRuntimePropertiesFile());
    }
  finally {
      if (fos != null) {
        fos.close();
      }
    }
    initializationComplete=true;
    httpResponse.sendRedirect(""String_Node_Str"" + WebConstants.WEBAPP_NAME);
  }
}","/** 
 * Called by   {@link #doFilter(ServletRequest,ServletResponse,FilterChain)} on POST requests
 * @param httpRequest
 * @param httpResponse
 */
private void doPost(HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws IOException {
  String page=httpRequest.getParameter(""String_Node_Str"");
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  Writer writer=httpResponse.getWriter();
  wizardModel.errors.clear();
  if (""String_Node_Str"".equals(page)) {
    wizardModel.databaseConnection=httpRequest.getParameter(""String_Node_Str"");
    checkForEmptyValue(wizardModel.databaseConnection,wizardModel.errors,""String_Node_Str"");
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      wizardModel.databaseName=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.databaseName,wizardModel.errors,""String_Node_Str"");
      wizardModel.hasCurrentOpenmrsDatabase=true;
    }
 else {
      wizardModel.hasCurrentOpenmrsDatabase=false;
      wizardModel.createTables=true;
      wizardModel.databaseName=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.databaseName,wizardModel.errors,""String_Node_Str"");
      wizardModel.createDatabaseUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createDatabaseUsername,wizardModel.errors,""String_Node_Str"");
      wizardModel.createDatabasePassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createDatabasePassword,wizardModel.errors,""String_Node_Str"");
    }
    if (wizardModel.errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (wizardModel.hasCurrentOpenmrsDatabase) {
      wizardModel.createTables=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    }
    wizardModel.addDemoData=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      wizardModel.currentDatabaseUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.currentDatabaseUsername,wizardModel.errors,""String_Node_Str"");
      wizardModel.currentDatabasePassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.currentDatabasePassword,wizardModel.errors,""String_Node_Str"");
      wizardModel.hasCurrentDatabaseUser=true;
      wizardModel.createDatabaseUser=false;
    }
 else {
      wizardModel.hasCurrentDatabaseUser=false;
      wizardModel.createDatabaseUser=true;
      wizardModel.createUserUsername=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createUserUsername,wizardModel.errors,""String_Node_Str"");
      wizardModel.createUserPassword=httpRequest.getParameter(""String_Node_Str"");
      checkForEmptyValue(wizardModel.createUserPassword,wizardModel.errors,""String_Node_Str"");
    }
    if (wizardModel.errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    wizardModel.moduleWebAdmin=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    wizardModel.autoUpdateDatabase=""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""));
    if (wizardModel.createTables) {
      page=""String_Node_Str"";
    }
 else {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    wizardModel.adminUserPassword=httpRequest.getParameter(""String_Node_Str"");
    String adminUserConfirm=httpRequest.getParameter(""String_Node_Str"");
    if (!wizardModel.adminUserPassword.equals(adminUserConfirm)) {
      wizardModel.errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (wizardModel.adminUserPassword.equals(""String_Node_Str"")) {
      wizardModel.errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    try {
      OpenmrsUtil.validatePassword(""String_Node_Str"",wizardModel.adminUserPassword,""String_Node_Str"");
    }
 catch (    PasswordException p) {
      wizardModel.errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (wizardModel.errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      if (wizardModel.createTables)       renderTemplate(""String_Node_Str"",referenceMap,writer);
 else       renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    wizardModel.implementationIdName=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationId=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationIdPassPhrase=httpRequest.getParameter(""String_Node_Str"");
    wizardModel.implementationIdDescription=httpRequest.getParameter(""String_Node_Str"");
    if (wizardModel.implementationId.indexOf('^') != -1 || wizardModel.implementationId.indexOf('|') != -1) {
      wizardModel.errors.add(""String_Node_Str"");
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    if (wizardModel.errors.isEmpty()) {
      page=""String_Node_Str"";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if (""String_Node_Str"".equals(page)) {
    if (""String_Node_Str"".equals(httpRequest.getParameter(""String_Node_Str""))) {
      renderTemplate(""String_Node_Str"",referenceMap,writer);
      return;
    }
    Properties runtimeProperties=new Properties();
    String connectionUsername;
    String connectionPassword;
    if (!wizardModel.hasCurrentOpenmrsDatabase) {
      String sql=""String_Node_Str"";
      int result=executeStatement(false,wizardModel.createDatabaseUsername,wizardModel.createDatabasePassword,sql,wizardModel.databaseName);
      if (result < 0) {
        renderTemplate(DEFAULT_PAGE,null,writer);
        return;
      }
 else {
        wizardModel.workLog.add(""String_Node_Str"" + wizardModel.databaseName);
      }
    }
    if (wizardModel.createDatabaseUser) {
      connectionUsername=wizardModel.databaseName + ""String_Node_Str"";
      if (connectionUsername.length() > 16)       connectionUsername=wizardModel.databaseName.substring(0,11) + ""String_Node_Str"";
      connectionPassword=""String_Node_Str"";
      String chars=""String_Node_Str"";
      Random r=new Random();
      for (int x=0; x < 12; x++) {
        connectionPassword+=chars.charAt(r.nextInt(chars.length()));
      }
      String sql=""String_Node_Str"";
      executeStatement(true,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,connectionUsername);
      sql=""String_Node_Str"";
      if (-1 != executeStatement(false,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,connectionUsername,connectionPassword)) {
        wizardModel.workLog.add(""String_Node_Str"" + connectionUsername);
      }
 else {
        renderTemplate(DEFAULT_PAGE,null,writer);
        return;
      }
      sql=""String_Node_Str"";
      int result=executeStatement(false,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,wizardModel.databaseName,connectionUsername);
      if (result < 0) {
        renderTemplate(DEFAULT_PAGE,null,writer);
        return;
      }
 else {
        wizardModel.workLog.add(""String_Node_Str"" + connectionUsername + ""String_Node_Str""+ wizardModel.databaseName);
      }
    }
 else {
      connectionUsername=wizardModel.currentDatabaseUsername;
      connectionPassword=wizardModel.currentDatabasePassword;
    }
    String finalDatabaseConnectionString=wizardModel.databaseConnection.replace(""String_Node_Str"",wizardModel.databaseName);
    if (!verifyConnection(connectionUsername,connectionPassword,finalDatabaseConnectionString)) {
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    runtimeProperties.put(""String_Node_Str"",finalDatabaseConnectionString);
    runtimeProperties.put(""String_Node_Str"",connectionUsername);
    runtimeProperties.put(""String_Node_Str"",connectionPassword);
    runtimeProperties.put(""String_Node_Str"",wizardModel.moduleWebAdmin.toString());
    runtimeProperties.put(""String_Node_Str"",wizardModel.autoUpdateDatabase.toString());
    runtimeProperties.put(SchedulerConstants.SCHEDULER_USERNAME_PROPERTY,""String_Node_Str"");
    runtimeProperties.put(SchedulerConstants.SCHEDULER_PASSWORD_PROPERTY,wizardModel.adminUserPassword);
    Context.setRuntimeProperties(runtimeProperties);
    if (wizardModel.createTables) {
      try {
        DatabaseUpdater.executeChangelog(LIQUIBASE_SCHEMA_DATA,null);
        DatabaseUpdater.executeChangelog(LIQUIBASE_CORE_DATA,null);
        wizardModel.workLog.add(""String_Node_Str"");
      }
 catch (      Exception e) {
        wizardModel.errors.add(e.getMessage() + ""String_Node_Str"");
        log.warn(""String_Node_Str"",e);
      }
    }
    if (wizardModel.createTables && wizardModel.addDemoData) {
      try {
        DatabaseUpdater.executeChangelog(LIQUIBASE_DEMO_DATA,null);
        wizardModel.workLog.add(""String_Node_Str"");
      }
 catch (      Exception e) {
        wizardModel.errors.add(e.getMessage() + ""String_Node_Str"");
        log.warn(""String_Node_Str"",e);
      }
    }
    try {
      DatabaseUpdater.update();
    }
 catch (    Exception e) {
      wizardModel.errors.add(e.getMessage() + ""String_Node_Str"");
      log.warn(""String_Node_Str"",e);
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    ContextLoader contextLoader=new ContextLoader();
    contextLoader.initWebApplicationContext(filterConfig.getServletContext());
    try {
      Context.openSession();
      Context.startup(runtimeProperties);
    }
 catch (    DatabaseUpdateException updateEx) {
      log.warn(""String_Node_Str"",updateEx);
      wizardModel.errors.add(updateEx.getMessage() + ""String_Node_Str"" + updateEx.getMessage());
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
catch (    InputRequiredException inputRequiredEx) {
      log.warn(""String_Node_Str"");
      wizardModel.errors.add(""String_Node_Str"");
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    if (!wizardModel.implementationId.equals(""String_Node_Str"")) {
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_GLOBAL_PROPERTIES);
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_CONCEPT_SOURCES);
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_VIEW_CONCEPT_SOURCES);
        ImplementationId implId=new ImplementationId();
        implId.setName(wizardModel.implementationIdName);
        implId.setImplementationId(wizardModel.implementationId);
        implId.setPassphrase(wizardModel.implementationIdPassPhrase);
        implId.setDescription(wizardModel.implementationIdDescription);
        Context.getAdministrationService().setImplementationId(implId);
      }
 catch (      Throwable t) {
        wizardModel.errors.add(t.getMessage() + ""String_Node_Str"");
        log.warn(""String_Node_Str"",t);
        renderTemplate(DEFAULT_PAGE,null,writer);
        Context.shutdown();
        WebModuleUtil.shutdownModules(filterConfig.getServletContext());
        contextLoader.closeWebApplicationContext(filterConfig.getServletContext());
        return;
      }
 finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_GLOBAL_PROPERTIES);
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_CONCEPT_SOURCES);
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_VIEW_CONCEPT_SOURCES);
      }
    }
    try {
      if (wizardModel.createTables) {
        Context.authenticate(""String_Node_Str"",""String_Node_Str"");
        Context.getUserService().changePassword(""String_Node_Str"",wizardModel.adminUserPassword);
        Context.logout();
      }
      Listener.loadCoreModules(filterConfig.getServletContext());
      Listener.performWebStartOfModules(filterConfig.getServletContext());
      SchedulerUtil.startup(runtimeProperties);
    }
 catch (    Throwable t) {
      Context.shutdown();
      WebModuleUtil.shutdownModules(filterConfig.getServletContext());
      contextLoader.closeWebApplicationContext(filterConfig.getServletContext());
      wizardModel.errors.add(t.getMessage() + ""String_Node_Str"");
      log.warn(""String_Node_Str"",t);
      renderTemplate(DEFAULT_PAGE,null,writer);
      return;
    }
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(getRuntimePropertiesFile());
      runtimeProperties.store(fos,""String_Node_Str"");
      wizardModel.workLog.add(""String_Node_Str"" + getRuntimePropertiesFile());
    }
  finally {
      if (fos != null) {
        fos.close();
      }
    }
    initializationComplete=true;
    Context.closeSession();
    httpResponse.sendRedirect(""String_Node_Str"" + WebConstants.WEBAPP_NAME);
  }
}"
84547,"/** 
 * @see {@link UserService#changeQuestionAnswer(String,String,String)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void changeQuestionAnswer_shouldMatchOnCorrectlyHashedStoredPassword() throws Exception {
  executeDataSet(XML_FILENAME);
  Context.logout();
  Context.authenticate(""String_Node_Str"",""String_Node_Str"");
  UserService us=Context.getUserService();
  us.changeQuestionAnswer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * @see {@link UserService#changeQuestionAnswer(String,String,String)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void changeQuestionAnswer_shouldMatchOnCorrectlyHashedStoredPassword() throws Exception {
  executeDataSet(XML_FILENAME);
  Context.logout();
  Context.authenticate(""String_Node_Str"",""String_Node_Str"");
  UserService us=Context.getUserService();
  us.changeQuestionAnswer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Context.logout();
}"
84548,"/** 
 * @see {@link UserService#changeQuestionAnswer(String,String,String)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void changeQuestionAnswer_shouldMatchOnIncorrectlyHashedStoredPassword() throws Exception {
  executeDataSet(XML_FILENAME);
  Context.logout();
  Context.authenticate(""String_Node_Str"",""String_Node_Str"");
  UserService us=Context.getUserService();
  us.changeQuestionAnswer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * @see {@link UserService#changeQuestionAnswer(String,String,String)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void changeQuestionAnswer_shouldMatchOnIncorrectlyHashedStoredPassword() throws Exception {
  executeDataSet(XML_FILENAME);
  Context.logout();
  Context.authenticate(""String_Node_Str"",""String_Node_Str"");
  UserService us=Context.getUserService();
  us.changeQuestionAnswer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Context.logout();
}"
84549,"/** 
 * @see {@link UserService#changePassword(String,String)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void changePassword_shouldMatchOnIncorrectlyHashedStoredPassword() throws Exception {
  executeDataSet(XML_FILENAME);
  Context.logout();
  Context.authenticate(""String_Node_Str"",""String_Node_Str"");
  UserService us=Context.getUserService();
  us.changePassword(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * @see {@link UserService#changePassword(String,String)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void changePassword_shouldMatchOnIncorrectlyHashedStoredPassword() throws Exception {
  executeDataSet(XML_FILENAME);
  Context.logout();
  Context.authenticate(""String_Node_Str"",""String_Node_Str"");
  UserService us=Context.getUserService();
  us.changePassword(""String_Node_Str"",""String_Node_Str"");
  Context.logout();
}"
84550,"/** 
 * Called prior to form display. Allows for data to be put in the request to be used in the view
 * @see org.springframework.web.servlet.mvc.SimpleFormController#referenceData(javax.servlet.http.HttpServletRequest)
 */
protected Map<String,Object> referenceData(HttpServletRequest request,Object obj,Errors err) throws Exception {
  Patient patient=(Patient)obj;
  List<Form> forms=new Vector<Form>();
  Map<String,Object> map=new HashMap<String,Object>();
  List<Encounter> encounters=new Vector<Encounter>();
  if (Context.isAuthenticated() && patient.getPatientId() != null) {
    boolean onlyPublishedForms=true;
    if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_UNPUBLISHED_FORMS))     onlyPublishedForms=false;
    forms.addAll(Context.getFormService().getForms(null,onlyPublishedForms,null,false,null,null,null));
    List<Encounter> encs=Context.getEncounterService().getEncountersByPatient(patient);
    if (encs != null && encs.size() > 0)     encounters.addAll(encs);
  }
  String patientVariation=""String_Node_Str"";
  Concept reasonForExitConcept=Context.getConceptService().getConcept(Context.getAdministrationService().getGlobalProperty(""String_Node_Str""));
  if (reasonForExitConcept != null && patient.getPatientId() != null) {
    List<Obs> patientExitObs=Context.getObsService().getObservationsByPersonAndConcept(patient,reasonForExitConcept);
    if (patientExitObs != null) {
      log.debug(""String_Node_Str"" + patientExitObs.size());
      if (patientExitObs.size() == 1) {
        Obs exitObs=patientExitObs.iterator().next();
        Concept exitReason=exitObs.getValueCoded();
        Date exitDate=exitObs.getObsDatetime();
        if (exitReason != null && exitDate != null) {
          patientVariation=""String_Node_Str"";
        }
      }
 else {
        log.error(""String_Node_Str"");
      }
    }
  }
  map.put(""String_Node_Str"",patientVariation);
  map.put(""String_Node_Str"",forms);
  map.put(""String_Node_Str"",new PatientIdentifier());
  map.put(""String_Node_Str"",new PersonName());
  map.put(""String_Node_Str"",new PersonAddress());
  map.put(""String_Node_Str"",encounters);
  super.setupReferenceData(map,patient);
  return map;
}","/** 
 * Called prior to form display. Allows for data to be put in the request to be used in the view
 * @see org.springframework.web.servlet.mvc.SimpleFormController#referenceData(javax.servlet.http.HttpServletRequest)
 */
protected Map<String,Object> referenceData(HttpServletRequest request,Object obj,Errors err) throws Exception {
  Patient patient=(Patient)obj;
  List<Form> forms=new Vector<Form>();
  Map<String,Object> map=new HashMap<String,Object>();
  List<Encounter> encounters=new Vector<Encounter>();
  if (Context.isAuthenticated() && patient.getPatientId() != null) {
    boolean onlyPublishedForms=true;
    if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_UNPUBLISHED_FORMS))     onlyPublishedForms=false;
    forms.addAll(Context.getFormService().getForms(null,onlyPublishedForms,null,false,null,null,null));
    List<Encounter> encs=Context.getEncounterService().getEncountersByPatient(patient);
    if (encs != null && encs.size() > 0)     encounters.addAll(encs);
  }
  String patientVariation=""String_Node_Str"";
  Concept reasonForExitConcept=Context.getConceptService().getConcept(Context.getAdministrationService().getGlobalProperty(""String_Node_Str""));
  if (reasonForExitConcept != null && patient.getPatientId() != null) {
    List<Obs> patientExitObs=Context.getObsService().getObservationsByPersonAndConcept(patient,reasonForExitConcept);
    if (patientExitObs != null && patientExitObs.size() > 0) {
      log.debug(""String_Node_Str"" + patientExitObs.size());
      if (patientExitObs.size() == 1) {
        Obs exitObs=patientExitObs.iterator().next();
        Concept exitReason=exitObs.getValueCoded();
        Date exitDate=exitObs.getObsDatetime();
        if (exitReason != null && exitDate != null) {
          patientVariation=""String_Node_Str"";
        }
      }
 else {
        log.error(""String_Node_Str"");
      }
    }
  }
  map.put(""String_Node_Str"",patientVariation);
  map.put(""String_Node_Str"",forms);
  map.put(""String_Node_Str"",new PatientIdentifier());
  map.put(""String_Node_Str"",new PersonName());
  map.put(""String_Node_Str"",new PersonAddress());
  map.put(""String_Node_Str"",encounters);
  super.setupReferenceData(map,patient);
  return map;
}"
84551,"/** 
 * Convenience method to empty out the dwr-modules.xml file to fix any errors that might have occurred in it when loading or unloading modules.
 * @param servletContext
 */
private void clearDWRFile(ServletContext servletContext){
  String realPath=servletContext.getRealPath(""String_Node_Str"");
  String absPath=realPath + ""String_Node_Str"";
  File dwrFile=new File(absPath.replace(""String_Node_Str"",File.separator));
  if (dwrFile.exists()) {
    try {
      DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
      DocumentBuilder db=dbf.newDocumentBuilder();
      db.setEntityResolver(new EntityResolver(){
        public InputSource resolveEntity(        String publicId,        String systemId) throws SAXException, IOException {
          return new InputSource(new StringReader(""String_Node_Str""));
        }
      }
);
      Document doc=db.parse(dwrFile);
      Element elem=doc.getDocumentElement();
      elem.setTextContent(""String_Node_Str"");
      OpenmrsUtil.saveDocument(doc,dwrFile);
    }
 catch (    IOException io) {
      log.warn(""String_Node_Str"",io);
    }
catch (    ParserConfigurationException parseError) {
      log.warn(""String_Node_Str"",parseError);
    }
catch (    SAXException sax) {
      log.warn(""String_Node_Str"",sax);
    }
catch (    Throwable t) {
      log.debug(""String_Node_Str"",t);
    }
  }
}","/** 
 * Convenience method to empty out the dwr-modules.xml file to fix any errors that might have occurred in it when loading or unloading modules.
 * @param servletContext
 */
private void clearDWRFile(ServletContext servletContext){
  String realPath=servletContext.getRealPath(""String_Node_Str"");
  String absPath=realPath + ""String_Node_Str"";
  File dwrFile=new File(absPath.replace(""String_Node_Str"",File.separator));
  if (dwrFile.exists()) {
    try {
      DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
      DocumentBuilder db=dbf.newDocumentBuilder();
      db.setEntityResolver(new EntityResolver(){
        public InputSource resolveEntity(        String publicId,        String systemId) throws SAXException, IOException {
          return new InputSource(new StringReader(""String_Node_Str""));
        }
      }
);
      Document doc=db.parse(dwrFile);
      Element elem=doc.getDocumentElement();
      elem.setTextContent(""String_Node_Str"");
      OpenmrsUtil.saveDocument(doc,dwrFile);
    }
 catch (    Throwable t) {
      log.debug(""String_Node_Str"",t);
      dwrFile.delete();
      try {
        FileWriter writer=new FileWriter(dwrFile);
        writer.write(""String_Node_Str"");
        writer.close();
      }
 catch (      IOException io) {
        log.error(""String_Node_Str"" + dwrFile.getAbsolutePath() + ""String_Node_Str"",io);
      }
    }
  }
}"
84552,"/** 
 * Returns a subset of the passed set of encounters that match the passed encounter type id
 * @param encs: Superset of encounters
 * @param type: EncounterTypeId to match
 * @return : Subset of passed encounters that match EncounterTypeId
 */
public static Set<Encounter> filterEncountersByType(Set<Encounter> encs,Integer type){
  log.debug(""String_Node_Str"" + type);
  Set<Encounter> ret=new HashSet<Encounter>();
  if (encs != null) {
    for (Iterator<Encounter> i=encs.iterator(); i.hasNext(); ) {
      Encounter e=i.next();
      if (e.getEncounterType().getEncounterTypeId().intValue() == type.intValue()) {
        ret.add(e);
      }
    }
  }
  return ret;
}","/** 
 * Returns a subset of the passed set of encounters that match the passed encounter type id
 * @param encs: Superset of encounters
 * @param type: EncounterTypeId to match
 * @return : Subset of passed encounters that match EncounterTypeId
 */
public static Set<Encounter> filterEncountersByType(Collection<Encounter> encs,Integer type){
  log.debug(""String_Node_Str"" + type);
  Set<Encounter> ret=new HashSet<Encounter>();
  if (encs != null) {
    for (Iterator<Encounter> i=encs.iterator(); i.hasNext(); ) {
      Encounter e=i.next();
      if (e.getEncounterType().getEncounterTypeId().intValue() == type.intValue()) {
        ret.add(e);
      }
    }
  }
  return ret;
}"
84553,"/** 
 * Returns a subset of the passed set of observations that match the passed concept type id
 * @param obs: Superset of obs
 * @param concept: ConceptId to match
 * @return : Subset of passed obs that match ConceptId
 */
public static Set<Obs> filterObsByConcept(Set<Obs> obs,Integer concept){
  log.debug(""String_Node_Str"" + concept);
  Set<Obs> ret=new HashSet<Obs>();
  if (obs != null) {
    for (Iterator<Obs> i=obs.iterator(); i.hasNext(); ) {
      Obs o=i.next();
      if (o.getConcept().getConceptId().intValue() == concept.intValue()) {
        ret.add(o);
      }
    }
  }
  return ret;
}","/** 
 * Returns a subset of the passed set of observations that match the passed concept type id
 * @param obs: Superset of obs
 * @param concept: ConceptId to match
 * @return : Subset of passed obs that match ConceptId
 */
public static Set<Obs> filterObsByConcept(Collection<Obs> obs,Integer concept){
  log.debug(""String_Node_Str"" + concept);
  Set<Obs> ret=new HashSet<Obs>();
  if (obs != null) {
    for (Iterator<Obs> i=obs.iterator(); i.hasNext(); ) {
      Obs o=i.next();
      if (o.getConcept().getConceptId().intValue() == concept.intValue()) {
        ret.add(o);
      }
    }
  }
  return ret;
}"
84554,"/** 
 * @verifies {@link ObsService#saveObs(Obs,String)} test = should create new file from complexdata for new obs
 */
@Test public void saveObs_shouldCreateNewFileFromComplexDataForNewObs() throws Exception {
  executeDataSet(COMPLEX_OBS_XML);
  ObsService os=Context.getObsService();
  ConceptService cs=Context.getConceptService();
  AdministrationService as=Context.getAdministrationService();
  File complexObsDir=OpenmrsUtil.getDirectoryInApplicationDataDirectory(as.getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_COMPLEX_OBS_DIR));
  File createdFile=new File(complexObsDir,""String_Node_Str"");
  Assert.assertFalse(createdFile.exists());
  InputStream inputStream=new ByteArrayInputStream(""String_Node_Str"".getBytes());
  ComplexData complexData=new ComplexData(""String_Node_Str"",inputStream);
  Concept questionConcept=cs.getConcept(8474);
  Obs obsToSave=new Obs(new Person(1),questionConcept,new Date(),new Location(1));
  obsToSave.setComplexData(complexData);
  try {
    os.saveObs(obsToSave,null);
    Assert.assertTrue(createdFile.exists());
  }
  finally {
    createdFile.delete();
  }
}","/** 
 * @verifies {@link ObsService#saveObs(Obs,String)} test = should create new file from complexdata for new obs
 */
@Test public void saveObs_shouldCreateNewFileFromComplexDataForNewObs() throws Exception {
  executeDataSet(COMPLEX_OBS_XML);
  ObsService os=Context.getObsService();
  ConceptService cs=Context.getConceptService();
  AdministrationService as=Context.getAdministrationService();
  File complexObsDir=OpenmrsUtil.getDirectoryInApplicationDataDirectory(as.getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_COMPLEX_OBS_DIR));
  File createdFile=new File(complexObsDir,""String_Node_Str"");
  if (createdFile.exists())   createdFile.delete();
  InputStream inputStream=new ByteArrayInputStream(""String_Node_Str"".getBytes());
  ComplexData complexData=new ComplexData(""String_Node_Str"",inputStream);
  Concept questionConcept=cs.getConcept(8474);
  Obs obsToSave=new Obs(new Person(1),questionConcept,new Date(),new Location(1));
  obsToSave.setComplexData(complexData);
  try {
    os.saveObs(obsToSave,null);
    Assert.assertTrue(createdFile.exists());
  }
  finally {
    createdFile.delete();
  }
}"
84555,"/** 
 * This method produces a model containing the following mappings: (always) (java.util.Date) now (String) size (Locale) locale (other parameters) (if there's currently an authenticated user) (User) authenticatedUser (Cohort) myPatientSet (the user's selected patient set, PatientSetService.getMyPatientSet()) (if the request has a patientId attribute) (Integer) patientId (Patient) patient (Set<Obs>) patientObs (Set<Encounter>) patientEncounters (List<DrugOrder>) patientDrugOrders (List<DrugOrder>) currentDrugOrders (List<DrugOrder>) completedDrugOrders (Obs) patientWeight // most recent weight obs (Obs) patientHeight // most recent height obs (Double) patientBmi // BMI derived from most recent weight and most recent height (String) patientBmiAsString // BMI rounded to one decimal place, or ""?"" if unknown (Integer) personId (if the patient has any obs for the concept in the global property 'concept.reasonExitedCare') (Obs) patientReasonForExit (if the request has a personId or patientId attribute) (Person) person (List<Relationship>) personRelationships (Map<RelationshipType, List<Relationship>>) personRelationshipsByType (if the request has an encounterId attribute) (Integer) encounterId (Encounter) encounter (Set<Obs>) encounterObs (if the request has a userId attribute) (Integer) userId (User) user (if the request has a patientIds attribute, which should be a (String) comma-separated list of patientIds) (PatientSet) patientSet (String) patientIds (if the request has a conceptIds attribute, which should be a (String) commas-separated list of conceptIds) (Map<Integer, Concept>) conceptMap (Map<String, Concept>) conceptMapByStringIds
 */
@SuppressWarnings(""String_Node_Str"") public ModelAndView handleRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  AdministrationService as=Context.getAdministrationService();
  ConceptService cs=Context.getConceptService();
  Object uri=request.getAttribute(""String_Node_Str"");
  String portletPath=""String_Node_Str"";
  Map<String,Object> model=null;
{
    HttpSession session=request.getSession();
    String uniqueRequestId=(String)request.getAttribute(WebConstants.INIT_REQ_UNIQUE_ID);
    String lastRequestId=(String)session.getAttribute(WebConstants.OPENMRS_PORTLET_LAST_REQ_ID);
    if (uniqueRequestId.equals(lastRequestId))     model=(Map<String,Object>)session.getAttribute(WebConstants.OPENMRS_PORTLET_CACHED_MODEL);
    if (model == null) {
      log.debug(""String_Node_Str"");
      model=new HashMap<String,Object>();
      session.setAttribute(WebConstants.OPENMRS_PORTLET_LAST_REQ_ID,uniqueRequestId);
      session.setAttribute(WebConstants.OPENMRS_PORTLET_CACHED_MODEL,model);
    }
  }
  if (uri != null) {
    long timeAtStart=System.currentTimeMillis();
    portletPath=uri.toString();
    if (portletPath.endsWith(""String_Node_Str""))     portletPath=portletPath.replace(""String_Node_Str"",""String_Node_Str"");
 else     if (portletPath.endsWith(""String_Node_Str""))     throw new ServletException(""String_Node_Str"");
    log.debug(""String_Node_Str"" + portletPath);
    String id=(String)request.getAttribute(""String_Node_Str"");
    String size=(String)request.getAttribute(""String_Node_Str"");
    Map<String,Object> params=(Map<String,Object>)request.getAttribute(""String_Node_Str"");
    Map<String,Object> moreParams=(Map<String,Object>)request.getAttribute(""String_Node_Str"");
    model.put(""String_Node_Str"",new Date());
    model.put(""String_Node_Str"",id);
    model.put(""String_Node_Str"",size);
    model.put(""String_Node_Str"",Context.getLocale());
    model.putAll(params);
    if (moreParams != null) {
      model.putAll(moreParams);
    }
    if (Context.getAuthenticatedUser() != null) {
      model.put(""String_Node_Str"",Context.getAuthenticatedUser());
      model.put(""String_Node_Str"",Context.getPatientSetService().getMyPatientSet());
    }
    Integer personId=null;
    Object o=request.getAttribute(""String_Node_Str"");
    if (o != null) {
      String patientVariation=""String_Node_Str"";
      Integer patientId=(Integer)o;
      if (!model.containsKey(""String_Node_Str"")) {
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_PATIENTS)) {
          Patient p=Context.getPatientService().getPatient(patientId);
          model.put(""String_Node_Str"",p);
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_ENCOUNTERS))           model.put(""String_Node_Str"",Context.getEncounterService().getEncountersByPatient(p));
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_OBS)) {
            List<Obs> patientObs=Context.getObsService().getObservationsByPerson(p);
            model.put(""String_Node_Str"",patientObs);
            Obs latestWeight=null;
            Obs latestHeight=null;
            String bmiAsString=""String_Node_Str"";
            try {
              ConceptNumeric weightConcept=cs.getConceptNumeric(cs.getConcept(as.getGlobalProperty(""String_Node_Str"")).getConceptId());
              ConceptNumeric heightConcept=cs.getConceptNumeric(cs.getConcept(as.getGlobalProperty(""String_Node_Str"")).getConceptId());
              for (              Obs obs : patientObs) {
                if (obs.getConcept().equals(weightConcept)) {
                  if (latestWeight == null || obs.getObsDatetime().compareTo(latestWeight.getObsDatetime()) > 0)                   latestWeight=obs;
                }
 else                 if (obs.getConcept().equals(heightConcept)) {
                  if (latestHeight == null || obs.getObsDatetime().compareTo(latestHeight.getObsDatetime()) > 0)                   latestHeight=obs;
                }
              }
              if (latestWeight != null)               model.put(""String_Node_Str"",latestWeight);
              if (latestHeight != null)               model.put(""String_Node_Str"",latestHeight);
              if (latestWeight != null && latestHeight != null) {
                double weightInKg;
                double heightInM;
                if (weightConcept.getUnits().equals(""String_Node_Str""))                 weightInKg=latestWeight.getValueNumeric();
 else                 if (weightConcept.getUnits().equals(""String_Node_Str""))                 weightInKg=latestWeight.getValueNumeric() * 0.45359237;
 else                 throw new IllegalArgumentException(""String_Node_Str"" + weightConcept.getUnits());
                if (heightConcept.getUnits().equals(""String_Node_Str""))                 heightInM=latestHeight.getValueNumeric() / 100;
 else                 if (heightConcept.getUnits().equals(""String_Node_Str""))                 heightInM=latestHeight.getValueNumeric();
 else                 if (heightConcept.getUnits().equals(""String_Node_Str""))                 heightInM=latestHeight.getValueNumeric() * 0.0254;
 else                 throw new IllegalArgumentException(""String_Node_Str"" + heightConcept.getUnits());
                double bmi=weightInKg / (heightInM * heightInM);
                model.put(""String_Node_Str"",bmi);
                String temp=""String_Node_Str"" + bmi;
                bmiAsString=temp.substring(0,temp.indexOf('.') + 2);
              }
            }
 catch (            Exception ex) {
              if (latestWeight != null && latestHeight != null)               log.error(""String_Node_Str"",ex);
            }
            model.put(""String_Node_Str"",bmiAsString);
          }
 else {
            model.put(""String_Node_Str"",new HashSet<Obs>());
          }
          Obs reasonForExitObs=null;
          Concept reasonForExitConcept=cs.getConcept(as.getGlobalProperty(""String_Node_Str""));
          if (reasonForExitConcept != null) {
            List<Obs> patientExitObs=Context.getObsService().getObservationsByPersonAndConcept(p,reasonForExitConcept);
            if (patientExitObs != null) {
              log.debug(""String_Node_Str"" + patientExitObs.size());
              if (patientExitObs.size() == 1) {
                reasonForExitObs=patientExitObs.iterator().next();
                Concept exitReason=reasonForExitObs.getValueCoded();
                Date exitDate=reasonForExitObs.getObsDatetime();
                if (exitReason != null && exitDate != null) {
                  patientVariation=""String_Node_Str"";
                }
              }
 else {
                if (patientExitObs.size() == 0) {
                  log.debug(""String_Node_Str"");
                }
 else {
                  log.error(""String_Node_Str"");
                }
              }
            }
          }
          model.put(""String_Node_Str"",reasonForExitObs);
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_ORDERS)) {
            List<DrugOrder> drugOrderList=Context.getOrderService().getDrugOrdersByPatient(p);
            model.put(""String_Node_Str"",drugOrderList);
            List<DrugOrder> currentDrugOrders=new ArrayList<DrugOrder>();
            List<DrugOrder> discontinuedDrugOrders=new ArrayList<DrugOrder>();
            for (Iterator<DrugOrder> iter=drugOrderList.iterator(); iter.hasNext(); ) {
              DrugOrder next=iter.next();
              if (next.isCurrent() || next.isFuture())               currentDrugOrders.add(next);
              if (next.isDiscontinued())               discontinuedDrugOrders.add(next);
            }
            model.put(""String_Node_Str"",currentDrugOrders);
            model.put(""String_Node_Str"",discontinuedDrugOrders);
            List<RegimenSuggestion> standardRegimens=Context.getOrderService().getStandardRegimens();
            if (standardRegimens != null)             model.put(""String_Node_Str"",standardRegimens);
          }
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_PROGRAMS) && Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_PATIENT_PROGRAMS)) {
            model.put(""String_Node_Str"",Context.getProgramWorkflowService().getPatientPrograms(p));
            model.put(""String_Node_Str"",Context.getProgramWorkflowService().getCurrentPrograms(p,null));
          }
          model.put(""String_Node_Str"",patientId);
          if (p != null) {
            personId=p.getPatientId();
            model.put(""String_Node_Str"",personId);
          }
          model.put(""String_Node_Str"",patientVariation);
        }
      }
    }
    if (personId == null) {
      o=request.getAttribute(""String_Node_Str"");
      if (o != null) {
        personId=(Integer)o;
        model.put(""String_Node_Str"",personId);
      }
    }
    if (personId != null) {
      if (!model.containsKey(""String_Node_Str"")) {
        Person p=(Person)model.get(""String_Node_Str"");
        if (p == null)         p=Context.getPersonService().getPerson(personId);
        model.put(""String_Node_Str"",p);
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_RELATIONSHIPS)) {
          List<Relationship> relationships=new ArrayList<Relationship>();
          relationships.addAll(Context.getPersonService().getRelationshipsByPerson(p));
          Map<RelationshipType,List<Relationship>> relationshipsByType=new HashMap<RelationshipType,List<Relationship>>();
          for (          Relationship rel : relationships) {
            List<Relationship> list=relationshipsByType.get(rel.getRelationshipType());
            if (list == null) {
              list=new ArrayList<Relationship>();
              relationshipsByType.put(rel.getRelationshipType(),list);
            }
            list.add(rel);
          }
          model.put(""String_Node_Str"",relationships);
          model.put(""String_Node_Str"",relationshipsByType);
        }
      }
    }
    o=request.getAttribute(""String_Node_Str"");
    if (o != null && !model.containsKey(""String_Node_Str"")) {
      if (!model.containsKey(""String_Node_Str"")) {
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_ENCOUNTERS)) {
          Encounter e=Context.getEncounterService().getEncounter((Integer)o);
          model.put(""String_Node_Str"",e);
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_OBS))           model.put(""String_Node_Str"",e.getObs());
        }
        model.put(""String_Node_Str"",(Integer)o);
      }
    }
    o=request.getAttribute(""String_Node_Str"");
    if (o != null) {
      if (!model.containsKey(""String_Node_Str"")) {
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_USERS)) {
          User u=Context.getUserService().getUser((Integer)o);
          model.put(""String_Node_Str"",u);
        }
        model.put(""String_Node_Str"",(Integer)o);
      }
    }
    o=request.getAttribute(""String_Node_Str"");
    if (o != null && !""String_Node_Str"".equals(o) && !model.containsKey(""String_Node_Str"")) {
      if (!model.containsKey(""String_Node_Str"")) {
        Cohort ps=new Cohort((String)o);
        model.put(""String_Node_Str"",ps);
        model.put(""String_Node_Str"",(String)o);
      }
    }
    o=model.get(""String_Node_Str"");
    if (o != null && !""String_Node_Str"".equals(o)) {
      if (!model.containsKey(""String_Node_Str"")) {
        log.debug(""String_Node_Str"" + o);
        Map<Integer,Concept> concepts=new HashMap<Integer,Concept>();
        Map<String,Concept> conceptsByStringIds=new HashMap<String,Concept>();
        String conceptIds=(String)o;
        String[] ids=conceptIds.split(""String_Node_Str"");
        for (        String cId : ids) {
          try {
            Integer i=Integer.valueOf(cId);
            Concept c=cs.getConcept(i);
            concepts.put(i,c);
            conceptsByStringIds.put(i.toString(),c);
          }
 catch (          Exception ex) {
          }
        }
        model.put(""String_Node_Str"",concepts);
        model.put(""String_Node_Str"",conceptsByStringIds);
      }
    }
    populateModel(request,model);
    log.debug(portletPath + ""String_Node_Str"" + (System.currentTimeMillis() - timeAtStart)+ ""String_Node_Str"");
  }
  return new ModelAndView(portletPath,""String_Node_Str"",model);
}","/** 
 * This method produces a model containing the following mappings: <pre> (always) (java.util.Date) now (String) size (Locale) locale (other parameters) (if there's currently an authenticated user) (User) authenticatedUser (Cohort) myPatientSet (the user's selected patient set, PatientSetService.getMyPatientSet()) (if the request has a patientId attribute) (Integer) patientId (Patient) patient (Set<Obs>) patientObs (Set<Encounter>) patientEncounters (List<DrugOrder>) patientDrugOrders (List<DrugOrder>) currentDrugOrders (List<DrugOrder>) completedDrugOrders (Obs) patientWeight // most recent weight obs (Obs) patientHeight // most recent height obs (Double) patientBmi // BMI derived from most recent weight and most recent height (String) patientBmiAsString // BMI rounded to one decimal place, or ""?"" if unknown (Integer) personId (if the patient has any obs for the concept in the global property 'concept.reasonExitedCare') (Obs) patientReasonForExit (if the request has a personId or patientId attribute) (Person) person (List<Relationship>) personRelationships (Map<RelationshipType, List<Relationship>>) personRelationshipsByType (if the request has an encounterId attribute) (Integer) encounterId (Encounter) encounter (Set<Obs>) encounterObs (if the request has a userId attribute) (Integer) userId (User) user (if the request has a patientIds attribute, which should be a (String) comma-separated list of patientIds) (PatientSet) patientSet (String) patientIds (if the request has a conceptIds attribute, which should be a (String) commas-separated list of conceptIds) (Map<Integer, Concept>) conceptMap (Map<String, Concept>) conceptMapByStringIds </pre>
 */
@SuppressWarnings(""String_Node_Str"") public ModelAndView handleRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  AdministrationService as=Context.getAdministrationService();
  ConceptService cs=Context.getConceptService();
  Object uri=request.getAttribute(""String_Node_Str"");
  String portletPath=""String_Node_Str"";
  Map<String,Object> model=null;
{
    HttpSession session=request.getSession();
    String uniqueRequestId=(String)request.getAttribute(WebConstants.INIT_REQ_UNIQUE_ID);
    String lastRequestId=(String)session.getAttribute(WebConstants.OPENMRS_PORTLET_LAST_REQ_ID);
    if (uniqueRequestId.equals(lastRequestId))     model=(Map<String,Object>)session.getAttribute(WebConstants.OPENMRS_PORTLET_CACHED_MODEL);
    if (model == null) {
      log.debug(""String_Node_Str"");
      model=new HashMap<String,Object>();
      session.setAttribute(WebConstants.OPENMRS_PORTLET_LAST_REQ_ID,uniqueRequestId);
      session.setAttribute(WebConstants.OPENMRS_PORTLET_CACHED_MODEL,model);
    }
  }
  if (uri != null) {
    long timeAtStart=System.currentTimeMillis();
    portletPath=uri.toString();
    if (portletPath.endsWith(""String_Node_Str""))     portletPath=portletPath.replace(""String_Node_Str"",""String_Node_Str"");
 else     if (portletPath.endsWith(""String_Node_Str""))     throw new ServletException(""String_Node_Str"");
    log.debug(""String_Node_Str"" + portletPath);
    String id=(String)request.getAttribute(""String_Node_Str"");
    String size=(String)request.getAttribute(""String_Node_Str"");
    Map<String,Object> params=(Map<String,Object>)request.getAttribute(""String_Node_Str"");
    Map<String,Object> moreParams=(Map<String,Object>)request.getAttribute(""String_Node_Str"");
    model.put(""String_Node_Str"",new Date());
    model.put(""String_Node_Str"",id);
    model.put(""String_Node_Str"",size);
    model.put(""String_Node_Str"",Context.getLocale());
    model.putAll(params);
    if (moreParams != null) {
      model.putAll(moreParams);
    }
    if (Context.getAuthenticatedUser() != null) {
      model.put(""String_Node_Str"",Context.getAuthenticatedUser());
      model.put(""String_Node_Str"",Context.getPatientSetService().getMyPatientSet());
    }
    Integer personId=null;
    Object o=request.getAttribute(""String_Node_Str"");
    if (o != null) {
      String patientVariation=""String_Node_Str"";
      Integer patientId=(Integer)o;
      if (!model.containsKey(""String_Node_Str"")) {
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_PATIENTS)) {
          Patient p=Context.getPatientService().getPatient(patientId);
          model.put(""String_Node_Str"",p);
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_ENCOUNTERS))           model.put(""String_Node_Str"",Context.getEncounterService().getEncountersByPatient(p));
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_OBS)) {
            List<Obs> patientObs=Context.getObsService().getObservationsByPerson(p);
            model.put(""String_Node_Str"",patientObs);
            Obs latestWeight=null;
            Obs latestHeight=null;
            String bmiAsString=""String_Node_Str"";
            try {
              ConceptNumeric weightConcept=cs.getConceptNumeric(cs.getConcept(as.getGlobalProperty(""String_Node_Str"")).getConceptId());
              ConceptNumeric heightConcept=cs.getConceptNumeric(cs.getConcept(as.getGlobalProperty(""String_Node_Str"")).getConceptId());
              for (              Obs obs : patientObs) {
                if (obs.getConcept().equals(weightConcept)) {
                  if (latestWeight == null || obs.getObsDatetime().compareTo(latestWeight.getObsDatetime()) > 0)                   latestWeight=obs;
                }
 else                 if (obs.getConcept().equals(heightConcept)) {
                  if (latestHeight == null || obs.getObsDatetime().compareTo(latestHeight.getObsDatetime()) > 0)                   latestHeight=obs;
                }
              }
              if (latestWeight != null)               model.put(""String_Node_Str"",latestWeight);
              if (latestHeight != null)               model.put(""String_Node_Str"",latestHeight);
              if (latestWeight != null && latestHeight != null) {
                double weightInKg;
                double heightInM;
                if (weightConcept.getUnits().equals(""String_Node_Str""))                 weightInKg=latestWeight.getValueNumeric();
 else                 if (weightConcept.getUnits().equals(""String_Node_Str""))                 weightInKg=latestWeight.getValueNumeric() * 0.45359237;
 else                 throw new IllegalArgumentException(""String_Node_Str"" + weightConcept.getUnits());
                if (heightConcept.getUnits().equals(""String_Node_Str""))                 heightInM=latestHeight.getValueNumeric() / 100;
 else                 if (heightConcept.getUnits().equals(""String_Node_Str""))                 heightInM=latestHeight.getValueNumeric();
 else                 if (heightConcept.getUnits().equals(""String_Node_Str""))                 heightInM=latestHeight.getValueNumeric() * 0.0254;
 else                 throw new IllegalArgumentException(""String_Node_Str"" + heightConcept.getUnits());
                double bmi=weightInKg / (heightInM * heightInM);
                model.put(""String_Node_Str"",bmi);
                String temp=""String_Node_Str"" + bmi;
                bmiAsString=temp.substring(0,temp.indexOf('.') + 2);
              }
            }
 catch (            Exception ex) {
              if (latestWeight != null && latestHeight != null)               log.error(""String_Node_Str"",ex);
            }
            model.put(""String_Node_Str"",bmiAsString);
          }
 else {
            model.put(""String_Node_Str"",new HashSet<Obs>());
          }
          Obs reasonForExitObs=null;
          Concept reasonForExitConcept=cs.getConcept(as.getGlobalProperty(""String_Node_Str""));
          if (reasonForExitConcept != null) {
            List<Obs> patientExitObs=Context.getObsService().getObservationsByPersonAndConcept(p,reasonForExitConcept);
            if (patientExitObs != null) {
              log.debug(""String_Node_Str"" + patientExitObs.size());
              if (patientExitObs.size() == 1) {
                reasonForExitObs=patientExitObs.iterator().next();
                Concept exitReason=reasonForExitObs.getValueCoded();
                Date exitDate=reasonForExitObs.getObsDatetime();
                if (exitReason != null && exitDate != null) {
                  patientVariation=""String_Node_Str"";
                }
              }
 else {
                if (patientExitObs.size() == 0) {
                  log.debug(""String_Node_Str"");
                }
 else {
                  log.error(""String_Node_Str"");
                }
              }
            }
          }
          model.put(""String_Node_Str"",reasonForExitObs);
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_ORDERS)) {
            List<DrugOrder> drugOrderList=Context.getOrderService().getDrugOrdersByPatient(p);
            model.put(""String_Node_Str"",drugOrderList);
            List<DrugOrder> currentDrugOrders=new ArrayList<DrugOrder>();
            List<DrugOrder> discontinuedDrugOrders=new ArrayList<DrugOrder>();
            for (Iterator<DrugOrder> iter=drugOrderList.iterator(); iter.hasNext(); ) {
              DrugOrder next=iter.next();
              if (next.isCurrent() || next.isFuture())               currentDrugOrders.add(next);
              if (next.isDiscontinued())               discontinuedDrugOrders.add(next);
            }
            model.put(""String_Node_Str"",currentDrugOrders);
            model.put(""String_Node_Str"",discontinuedDrugOrders);
            List<RegimenSuggestion> standardRegimens=Context.getOrderService().getStandardRegimens();
            if (standardRegimens != null)             model.put(""String_Node_Str"",standardRegimens);
          }
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_PROGRAMS) && Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_PATIENT_PROGRAMS)) {
            model.put(""String_Node_Str"",Context.getProgramWorkflowService().getPatientPrograms(p));
            model.put(""String_Node_Str"",Context.getProgramWorkflowService().getCurrentPrograms(p,null));
          }
          model.put(""String_Node_Str"",patientId);
          if (p != null) {
            personId=p.getPatientId();
            model.put(""String_Node_Str"",personId);
          }
          model.put(""String_Node_Str"",patientVariation);
        }
      }
    }
    if (personId == null) {
      o=request.getAttribute(""String_Node_Str"");
      if (o != null) {
        personId=(Integer)o;
        model.put(""String_Node_Str"",personId);
      }
    }
    if (personId != null) {
      if (!model.containsKey(""String_Node_Str"")) {
        Person p=(Person)model.get(""String_Node_Str"");
        if (p == null)         p=Context.getPersonService().getPerson(personId);
        model.put(""String_Node_Str"",p);
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_RELATIONSHIPS)) {
          List<Relationship> relationships=new ArrayList<Relationship>();
          relationships.addAll(Context.getPersonService().getRelationshipsByPerson(p));
          Map<RelationshipType,List<Relationship>> relationshipsByType=new HashMap<RelationshipType,List<Relationship>>();
          for (          Relationship rel : relationships) {
            List<Relationship> list=relationshipsByType.get(rel.getRelationshipType());
            if (list == null) {
              list=new ArrayList<Relationship>();
              relationshipsByType.put(rel.getRelationshipType(),list);
            }
            list.add(rel);
          }
          model.put(""String_Node_Str"",relationships);
          model.put(""String_Node_Str"",relationshipsByType);
        }
      }
    }
    o=request.getAttribute(""String_Node_Str"");
    if (o != null && !model.containsKey(""String_Node_Str"")) {
      if (!model.containsKey(""String_Node_Str"")) {
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_ENCOUNTERS)) {
          Encounter e=Context.getEncounterService().getEncounter((Integer)o);
          model.put(""String_Node_Str"",e);
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_OBS))           model.put(""String_Node_Str"",e.getObs());
        }
        model.put(""String_Node_Str"",(Integer)o);
      }
    }
    o=request.getAttribute(""String_Node_Str"");
    if (o != null) {
      if (!model.containsKey(""String_Node_Str"")) {
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_USERS)) {
          User u=Context.getUserService().getUser((Integer)o);
          model.put(""String_Node_Str"",u);
        }
        model.put(""String_Node_Str"",(Integer)o);
      }
    }
    o=request.getAttribute(""String_Node_Str"");
    if (o != null && !""String_Node_Str"".equals(o) && !model.containsKey(""String_Node_Str"")) {
      if (!model.containsKey(""String_Node_Str"")) {
        Cohort ps=new Cohort((String)o);
        model.put(""String_Node_Str"",ps);
        model.put(""String_Node_Str"",(String)o);
      }
    }
    o=model.get(""String_Node_Str"");
    if (o != null && !""String_Node_Str"".equals(o)) {
      if (!model.containsKey(""String_Node_Str"")) {
        log.debug(""String_Node_Str"" + o);
        Map<Integer,Concept> concepts=new HashMap<Integer,Concept>();
        Map<String,Concept> conceptsByStringIds=new HashMap<String,Concept>();
        String conceptIds=(String)o;
        String[] ids=conceptIds.split(""String_Node_Str"");
        for (        String cId : ids) {
          try {
            Integer i=Integer.valueOf(cId);
            Concept c=cs.getConcept(i);
            concepts.put(i,c);
            conceptsByStringIds.put(i.toString(),c);
          }
 catch (          Exception ex) {
          }
        }
        model.put(""String_Node_Str"",concepts);
        model.put(""String_Node_Str"",conceptsByStringIds);
      }
    }
    populateModel(request,model);
    log.debug(portletPath + ""String_Node_Str"" + (System.currentTimeMillis() - timeAtStart)+ ""String_Node_Str"");
  }
  return new ModelAndView(portletPath,""String_Node_Str"",model);
}"
84556,"/** 
 * Uses reflection to translate a PatientSearch into a PatientFilter
 */
@SuppressWarnings(""String_Node_Str"") public static PatientFilter toPatientFilter(PatientSearch search,CohortSearchHistory history,EvaluationContext evalContext){
  if (search.isSavedSearchReference()) {
    PatientSearch ps=((PatientSearchReportObject)Context.getReportObjectService().getReportObject(search.getSavedSearchId())).getPatientSearch();
    return toPatientFilter(ps,history,evalContext);
  }
 else   if (search.isSavedFilterReference()) {
    return Context.getReportObjectService().getPatientFilterById(search.getSavedFilterId());
  }
 else   if (search.isSavedCohortReference()) {
    Cohort c=Context.getCohortService().getCohort(search.getSavedCohortId());
    if (c != null)     c.getMemberIds().size();
    return new CohortFilter(c);
  }
 else   if (search.isComposition()) {
    if (history == null && search.requiresHistory())     throw new IllegalArgumentException(""String_Node_Str"");
 else     return search.cloneCompositionAsFilter(history,evalContext);
  }
 else {
    Class clz=search.getFilterClass();
    if (clz == null)     throw new IllegalArgumentException(""String_Node_Str"");
    log.debug(""String_Node_Str"" + clz);
    PatientFilter pf=null;
    try {
      pf=(PatientFilter)clz.newInstance();
    }
 catch (    Exception ex) {
      log.error(""String_Node_Str"" + search.getFilterClass(),ex);
      return null;
    }
    Class[] stringSingleton={String.class};
    if (search.getArguments() != null) {
      for (      SearchArgument sa : search.getArguments()) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + sa.getPropertyClass() + ""String_Node_Str""+ sa.getName()+ ""String_Node_Str""+ sa.getValue());
        PropertyDescriptor pd=null;
        try {
          pd=new PropertyDescriptor(sa.getName(),clz);
        }
 catch (        IntrospectionException ex) {
          log.error(""String_Node_Str"" + sa.getName(),ex);
          continue;
        }
        Class<?> realPropertyType=pd.getPropertyType();
        String valueAsString=sa.getValue();
        String testForExpression=search.getArgumentValue(sa.getName());
        if (evalContext != null && EvaluationContext.isExpression(testForExpression)) {
          log.debug(""String_Node_Str"" + testForExpression);
          Object evaluated=evalContext.evaluateExpression(testForExpression);
          if (evaluated != null) {
            if (evaluated instanceof Date)             valueAsString=Context.getDateFormat().format((Date)evaluated);
 else             valueAsString=evaluated.toString();
          }
          log.debug(""String_Node_Str"" + valueAsString);
        }
        Object value=null;
        Class<?> valueClass=sa.getPropertyClass();
        try {
          Method valueOfMethod=null;
          try {
            valueOfMethod=valueClass.getMethod(""String_Node_Str"",stringSingleton);
          }
 catch (          NoSuchMethodException ex) {
          }
          if (valueOfMethod != null) {
            Object[] holder={valueAsString};
            value=valueOfMethod.invoke(pf,holder);
          }
 else           if (realPropertyType.isEnum()) {
            List<Enum> constants=Arrays.asList((Enum[])realPropertyType.getEnumConstants());
            for (            Enum e : constants) {
              if (e.toString().equals(valueAsString)) {
                value=e;
                break;
              }
            }
          }
 else           if (String.class.equals(valueClass)) {
            value=valueAsString;
          }
 else           if (Location.class.equals(valueClass)) {
            LocationEditor ed=new LocationEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (Concept.class.equals(valueClass)) {
            ConceptEditor ed=new ConceptEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (Program.class.equals(valueClass)) {
            ProgramEditor ed=new ProgramEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (ProgramWorkflowState.class.equals(valueClass)) {
            ProgramWorkflowStateEditor ed=new ProgramWorkflowStateEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (EncounterType.class.equals(valueClass)) {
            EncounterTypeEditor ed=new EncounterTypeEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (Form.class.equals(valueClass)) {
            FormEditor ed=new FormEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (Drug.class.equals(valueClass)) {
            DrugEditor ed=new DrugEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (PersonAttributeType.class.equals(valueClass)) {
            PersonAttributeTypeEditor ed=new PersonAttributeTypeEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (Cohort.class.equals(valueClass)) {
            CohortEditor ed=new CohortEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (Date.class.equals(valueClass)) {
            DateFormat df=Context.getDateFormat();
            CustomDateEditor ed=new CustomDateEditor(df,true,10);
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (LogicCriteria.class.equals(valueClass)) {
            value=Context.getLogicService().parseString(valueAsString);
          }
 else {
            value=valueAsString;
          }
        }
 catch (        Exception ex) {
          log.error(""String_Node_Str"" + valueAsString + ""String_Node_Str""+ valueClass,ex);
          continue;
        }
        if (value != null) {
          if (realPropertyType.isAssignableFrom(valueClass)) {
            log.debug(""String_Node_Str"" + sa.getName() + ""String_Node_Str""+ value);
            try {
              pd.getWriteMethod().invoke(pf,value);
            }
 catch (            Exception ex) {
              log.error(""String_Node_Str"" + sa.getName() + ""String_Node_Str""+ sa.getValue()+ ""String_Node_Str""+ value,ex);
              continue;
            }
          }
 else           if (Collection.class.isAssignableFrom(realPropertyType)) {
            log.debug(sa.getName() + ""String_Node_Str"");
            try {
              Collection collection=(Collection)pd.getReadMethod().invoke(pf,(Object[])null);
              if (collection == null) {
                if (SortedSet.class.isAssignableFrom(realPropertyType)) {
                  collection=new TreeSet();
                  log.debug(""String_Node_Str"");
                  pd.getWriteMethod().invoke(pf,collection);
                }
 else                 if (Set.class.isAssignableFrom(realPropertyType)) {
                  collection=new HashSet();
                  log.debug(""String_Node_Str"");
                  pd.getWriteMethod().invoke(pf,collection);
                }
 else {
                  collection=new ArrayList();
                  log.debug(""String_Node_Str"");
                  pd.getWriteMethod().invoke(pf,collection);
                }
              }
              collection.add(value);
            }
 catch (            Exception ex) {
              log.error(""String_Node_Str"" + sa.getName() + ""String_Node_Str""+ realPropertyType,ex);
              continue;
            }
          }
 else {
            log.error(pf.getClass() + ""String_Node_Str"" + sa.getName()+ ""String_Node_Str""+ realPropertyType+ ""String_Node_Str""+ valueClass);
          }
        }
      }
    }
    log.debug(""String_Node_Str"" + pf);
    return pf;
  }
}","/** 
 * Uses reflection to translate a PatientSearch into a PatientFilter
 */
@SuppressWarnings(""String_Node_Str"") public static PatientFilter toPatientFilter(PatientSearch search,CohortSearchHistory history,EvaluationContext evalContext){
  if (search.isSavedSearchReference()) {
    PatientSearch ps=((PatientSearchReportObject)Context.getReportObjectService().getReportObject(search.getSavedSearchId())).getPatientSearch();
    return toPatientFilter(ps,history,evalContext);
  }
 else   if (search.isSavedFilterReference()) {
    return Context.getReportObjectService().getPatientFilterById(search.getSavedFilterId());
  }
 else   if (search.isSavedCohortReference()) {
    Cohort c=Context.getCohortService().getCohort(search.getSavedCohortId());
    if (c != null)     c.getMemberIds().size();
    return new CohortFilter(c);
  }
 else   if (search.isComposition()) {
    if (history == null && search.requiresHistory())     throw new IllegalArgumentException(""String_Node_Str"");
 else     return search.cloneCompositionAsFilter(history,evalContext);
  }
 else {
    Class clz=search.getFilterClass();
    if (clz == null)     throw new IllegalArgumentException(""String_Node_Str"");
    log.debug(""String_Node_Str"" + clz);
    PatientFilter pf=null;
    try {
      pf=(PatientFilter)clz.newInstance();
    }
 catch (    Exception ex) {
      log.error(""String_Node_Str"" + search.getFilterClass(),ex);
      return null;
    }
    Class[] stringSingleton={String.class};
    if (search.getArguments() != null) {
      for (      SearchArgument sa : search.getArguments()) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + sa.getPropertyClass() + ""String_Node_Str""+ sa.getName()+ ""String_Node_Str""+ sa.getValue());
        PropertyDescriptor pd=null;
        try {
          pd=new PropertyDescriptor(sa.getName(),clz);
        }
 catch (        IntrospectionException ex) {
          log.error(""String_Node_Str"" + sa.getName(),ex);
          continue;
        }
        Class<?> realPropertyType=pd.getPropertyType();
        String valueAsString=sa.getValue();
        String testForExpression=search.getArgumentValue(sa.getName());
        if (testForExpression != null) {
          valueAsString=testForExpression;
          log.debug(""String_Node_Str"" + sa.getName() + ""String_Node_Str""+ valueAsString);
          if (evalContext != null && EvaluationContext.isExpression(valueAsString)) {
            Object evaluated=evalContext.evaluateExpression(testForExpression);
            if (evaluated != null) {
              if (evaluated instanceof Date)               valueAsString=Context.getDateFormat().format((Date)evaluated);
 else               valueAsString=evaluated.toString();
            }
            log.debug(""String_Node_Str"" + sa.getName() + ""String_Node_Str""+ valueAsString);
          }
        }
        Object value=null;
        Class<?> valueClass=sa.getPropertyClass();
        try {
          Method valueOfMethod=null;
          try {
            valueOfMethod=valueClass.getMethod(""String_Node_Str"",stringSingleton);
          }
 catch (          NoSuchMethodException ex) {
          }
          if (valueOfMethod != null) {
            Object[] holder={valueAsString};
            value=valueOfMethod.invoke(pf,holder);
          }
 else           if (realPropertyType.isEnum()) {
            List<Enum> constants=Arrays.asList((Enum[])realPropertyType.getEnumConstants());
            for (            Enum e : constants) {
              if (e.toString().equals(valueAsString)) {
                value=e;
                break;
              }
            }
          }
 else           if (String.class.equals(valueClass)) {
            value=valueAsString;
          }
 else           if (Location.class.equals(valueClass)) {
            LocationEditor ed=new LocationEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (Concept.class.equals(valueClass)) {
            ConceptEditor ed=new ConceptEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (Program.class.equals(valueClass)) {
            ProgramEditor ed=new ProgramEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (ProgramWorkflowState.class.equals(valueClass)) {
            ProgramWorkflowStateEditor ed=new ProgramWorkflowStateEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (EncounterType.class.equals(valueClass)) {
            EncounterTypeEditor ed=new EncounterTypeEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (Form.class.equals(valueClass)) {
            FormEditor ed=new FormEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (Drug.class.equals(valueClass)) {
            DrugEditor ed=new DrugEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (PersonAttributeType.class.equals(valueClass)) {
            PersonAttributeTypeEditor ed=new PersonAttributeTypeEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (Cohort.class.equals(valueClass)) {
            CohortEditor ed=new CohortEditor();
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (Date.class.equals(valueClass)) {
            DateFormat df=Context.getDateFormat();
            CustomDateEditor ed=new CustomDateEditor(df,true,10);
            ed.setAsText(valueAsString);
            value=ed.getValue();
          }
 else           if (LogicCriteria.class.equals(valueClass)) {
            value=Context.getLogicService().parseString(valueAsString);
          }
 else {
            value=valueAsString;
          }
        }
 catch (        Exception ex) {
          log.error(""String_Node_Str"" + valueAsString + ""String_Node_Str""+ valueClass,ex);
          continue;
        }
        if (value != null) {
          if (realPropertyType.isAssignableFrom(valueClass)) {
            log.debug(""String_Node_Str"" + sa.getName() + ""String_Node_Str""+ value);
            try {
              pd.getWriteMethod().invoke(pf,value);
            }
 catch (            Exception ex) {
              log.error(""String_Node_Str"" + sa.getName() + ""String_Node_Str""+ sa.getValue()+ ""String_Node_Str""+ value,ex);
              continue;
            }
          }
 else           if (Collection.class.isAssignableFrom(realPropertyType)) {
            log.debug(sa.getName() + ""String_Node_Str"");
            try {
              Collection collection=(Collection)pd.getReadMethod().invoke(pf,(Object[])null);
              if (collection == null) {
                if (SortedSet.class.isAssignableFrom(realPropertyType)) {
                  collection=new TreeSet();
                  log.debug(""String_Node_Str"");
                  pd.getWriteMethod().invoke(pf,collection);
                }
 else                 if (Set.class.isAssignableFrom(realPropertyType)) {
                  collection=new HashSet();
                  log.debug(""String_Node_Str"");
                  pd.getWriteMethod().invoke(pf,collection);
                }
 else {
                  collection=new ArrayList();
                  log.debug(""String_Node_Str"");
                  pd.getWriteMethod().invoke(pf,collection);
                }
              }
              collection.add(value);
            }
 catch (            Exception ex) {
              log.error(""String_Node_Str"" + sa.getName() + ""String_Node_Str""+ realPropertyType,ex);
              continue;
            }
          }
 else {
            log.error(pf.getClass() + ""String_Node_Str"" + sa.getName()+ ""String_Node_Str""+ realPropertyType+ ""String_Node_Str""+ valueClass);
          }
        }
      }
    }
    log.debug(""String_Node_Str"" + pf);
    return pf;
  }
}"
84557,"/** 
 * @see org.springframework.validation.Validator#validate(java.lang.Object,org.springframework.validation.Errors)
 */
public void validate(Object commandObj,Errors errors){
  CommandObject command=(CommandObject)commandObj;
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  for (  Parameter p : command.getParameters()) {
    if (!StringUtils.hasText(p.getName()) || !StringUtils.hasText(p.getLabel()) || p.getClazz() == null)     errors.rejectValue(""String_Node_Str"",null,""String_Node_Str"");
  }
  for (  CohortReportRow row : command.getRows()) {
    if (!StringUtils.hasText(row.getName()))     errors.rejectValue(""String_Node_Str"",null,""String_Node_Str"");
    try {
      CohortDefinition def=CohortUtil.parse(row.getQuery());
      if (def == null)       throw new Exception();
    }
 catch (    Exception ex) {
      errors.rejectValue(""String_Node_Str"",null,""String_Node_Str"" + row.getQuery() + ""String_Node_Str""+ ex.getMessage()+ ""String_Node_Str"");
    }
  }
}","/** 
 * @see org.springframework.validation.Validator#validate(java.lang.Object,org.springframework.validation.Errors)
 */
public void validate(Object commandObj,Errors errors){
  CommandObject command=(CommandObject)commandObj;
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  for (  Parameter p : command.getParameters()) {
    if (!StringUtils.hasText(p.getName()) || !StringUtils.hasText(p.getLabel()) || p.getClazz() == null)     errors.rejectValue(""String_Node_Str"",null,""String_Node_Str"");
  }
  for (  CohortReportRow row : command.getRows()) {
    if (!StringUtils.hasText(row.getName()))     errors.rejectValue(""String_Node_Str"",null,""String_Node_Str"");
    try {
      String query=row.getQuery();
      query=Context.getReportService().applyReportXmlMacros(query);
      CohortDefinition def=CohortUtil.parse(query);
      if (def == null)       throw new Exception();
    }
 catch (    Exception ex) {
      errors.rejectValue(""String_Node_Str"",null,""String_Node_Str"" + row.getQuery() + ""String_Node_Str""+ ex.getMessage()+ ""String_Node_Str"");
    }
  }
}"
84558,"public void write(Writer w){
  try {
    w.append(""String_Node_Str"");
    w.append(""String_Node_Str"");
    w.append(""String_Node_Str"");
    for (int i=0; i < parameters.size(); i++) {
      String currParam=parameters.get(i);
      w.append(""String_Node_Str"" + ""String_Node_Str"" + currParam + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"" + ""String_Node_Str"" + currParam + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"" + ""String_Node_Str"" + currParam + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"" + ""String_Node_Str"" + currParam + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"" + ""String_Node_Str"" + currParam + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ currParam+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
    }
    w.append(""String_Node_Str"");
    if (getCallVar() != null && getCallVar().length() > 0) {
      w.append(""String_Node_Str"" + getCallVar() + ""String_Node_Str"");
    }
    w.append(""String_Node_Str"" + getCallMethod() + ""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}","public void write(Writer w){
  try {
    w.append(""String_Node_Str"");
    w.append(""String_Node_Str"");
    w.append(""String_Node_Str"");
    for (int i=0; i < parameters.size(); i++) {
      String currParam=parameters.get(i);
      w.append(""String_Node_Str"" + ""String_Node_Str"" + currParam + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"" + ""String_Node_Str"" + currParam + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"" + ""String_Node_Str"" + currParam + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"" + ""String_Node_Str"" + currParam + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"" + ""String_Node_Str"" + currParam + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"" + ""String_Node_Str"" + currParam + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"");
      w.append(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ currParam+ ""String_Node_Str"");
      w.append(""String_Node_Str"");
    }
    w.append(""String_Node_Str"");
    if (getCallVar() != null && getCallVar().length() > 0) {
      w.append(""String_Node_Str"" + getCallVar() + ""String_Node_Str"");
    }
    w.append(""String_Node_Str"" + getCallMethod() + ""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}"
84559,"@SuppressWarnings(""String_Node_Str"") protected void populateModel(HttpServletRequest request,Map<String,Object> model){
  String drugSetIds=(String)model.get(""String_Node_Str"");
  String cachedDrugSetIds=(String)model.get(""String_Node_Str"");
  if (cachedDrugSetIds == null || !cachedDrugSetIds.equals(drugSetIds)) {
    if (drugSetIds != null && drugSetIds.length() > 0) {
      Map<String,List<DrugOrder>> patientDrugOrderSets=new HashMap<String,List<DrugOrder>>();
      Map<String,List<DrugOrder>> currentDrugOrderSets=new HashMap<String,List<DrugOrder>>();
      Map<String,List<DrugOrder>> completedDrugOrderSets=new HashMap<String,List<DrugOrder>>();
      Map<String,Collection<Concept>> drugConceptsBySetId=new LinkedHashMap<String,Collection<Concept>>();
      boolean includeOther=false;
{
        for (        String setId : drugSetIds.split(""String_Node_Str"")) {
          if (""String_Node_Str"".equals(setId)) {
            includeOther=true;
            continue;
          }
          Concept drugSet=Context.getConceptService().getConceptByIdOrName(setId);
          Collection<Concept> members=new ArrayList<Concept>();
          if (drugSet != null)           members=Context.getConceptService().getConceptsInSet(drugSet);
          drugConceptsBySetId.put(setId,members);
        }
      }
      for (      DrugOrder order : ((List<DrugOrder>)model.get(""String_Node_Str""))) {
        String setIdToUse=null;
        if (order.getDrug() != null) {
          Concept orderConcept=order.getDrug().getConcept();
          for (          Map.Entry<String,Collection<Concept>> e : drugConceptsBySetId.entrySet()) {
            if (e.getValue().contains(orderConcept)) {
              setIdToUse=e.getKey();
              break;
            }
          }
        }
        if (setIdToUse == null && includeOther)         setIdToUse=""String_Node_Str"";
        if (setIdToUse != null) {
          helper(patientDrugOrderSets,setIdToUse,order);
          if (order.isCurrent())           helper(currentDrugOrderSets,setIdToUse,order);
 else           helper(completedDrugOrderSets,setIdToUse,order);
        }
      }
      model.put(""String_Node_Str"",patientDrugOrderSets);
      model.put(""String_Node_Str"",currentDrugOrderSets);
      model.put(""String_Node_Str"",completedDrugOrderSets);
      model.put(""String_Node_Str"",drugSetIds);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") protected void populateModel(HttpServletRequest request,Map<String,Object> model){
  String drugSetIds=(String)model.get(""String_Node_Str"");
  String cachedDrugSetIds=(String)model.get(""String_Node_Str"");
  if (cachedDrugSetIds == null || !cachedDrugSetIds.equals(drugSetIds)) {
    if (drugSetIds != null && drugSetIds.length() > 0) {
      Map<String,List<DrugOrder>> patientDrugOrderSets=new HashMap<String,List<DrugOrder>>();
      Map<String,List<DrugOrder>> currentDrugOrderSets=new HashMap<String,List<DrugOrder>>();
      Map<String,List<DrugOrder>> completedDrugOrderSets=new HashMap<String,List<DrugOrder>>();
      Map<String,Collection<Concept>> drugConceptsBySetId=new LinkedHashMap<String,Collection<Concept>>();
      boolean includeOther=false;
{
        for (        String setId : drugSetIds.split(""String_Node_Str"")) {
          if (""String_Node_Str"".equals(setId)) {
            includeOther=true;
            continue;
          }
          Concept drugSet=Context.getConceptService().getConceptByIdOrName(setId);
          Collection<Concept> members=new ArrayList<Concept>();
          if (drugSet != null)           members=Context.getConceptService().getConceptsInSet(drugSet);
          drugConceptsBySetId.put(setId,members);
        }
      }
      for (      DrugOrder order : ((List<DrugOrder>)model.get(""String_Node_Str""))) {
        String setIdToUse=null;
        if (order.getDrug() != null) {
          Concept orderConcept=order.getDrug().getConcept();
          for (          Map.Entry<String,Collection<Concept>> e : drugConceptsBySetId.entrySet()) {
            if (e.getValue().contains(orderConcept)) {
              setIdToUse=e.getKey();
              break;
            }
          }
        }
        if (setIdToUse == null && includeOther)         setIdToUse=""String_Node_Str"";
        if (setIdToUse != null) {
          helper(patientDrugOrderSets,setIdToUse,order);
          if (order.isCurrent() || order.isFuture())           helper(currentDrugOrderSets,setIdToUse,order);
 else           helper(completedDrugOrderSets,setIdToUse,order);
        }
      }
      model.put(""String_Node_Str"",patientDrugOrderSets);
      model.put(""String_Node_Str"",currentDrugOrderSets);
      model.put(""String_Node_Str"",completedDrugOrderSets);
      model.put(""String_Node_Str"",drugSetIds);
    }
  }
}"
84560,"/** 
 * This method shouldn't be used directly.  Use org.openmrs.api.context.Context#hasPrivilege so that anonymous/authenticated/proxy privileges are all included Return true if this user has the specified privilege
 * @param privilege
 * @return true/false
 */
public boolean hasPrivilege(String privilege){
  if (privilege == null || privilege.equals(""String_Node_Str""))   return true;
  if (isSuperUser())   return true;
  Set<Role> tmproles=getAllRoles();
  for (Iterator<Role> i=tmproles.iterator(); i.hasNext(); ) {
    if (i.next().hasPrivilege(privilege))     return true;
  }
  return false;
}","/** 
 * This method shouldn't be used directly.  Use org.openmrs.api.context.Context#hasPrivilege so that anonymous/authenticated/proxy privileges are all included Return true if this user has the specified privilege
 * @param privilege
 * @return true/false depending on whether user has specified privilege
 */
public boolean hasPrivilege(String privilege){
  if (privilege == null || privilege.equals(""String_Node_Str""))   return true;
  if (isSuperUser())   return true;
  Set<Role> tmproles=getAllRoles();
  for (Iterator<Role> i=tmproles.iterator(); i.hasNext(); ) {
    if (i.next().hasPrivilege(privilege))     return true;
  }
  return false;
}"
84561,"/** 
 * @see org.openmrs.api.db.ConceptDAO#getAllConceptClasses(boolean)
 */
@SuppressWarnings(""String_Node_Str"") public List<ConceptClass> getAllConceptClasses(boolean includeRetired) throws DAOException {
  Criteria crit=sessionFactory.getCurrentSession().createCriteria(ConceptClass.class);
  if (includeRetired=false)   crit.add(Expression.eq(""String_Node_Str"",false));
  return crit.list();
}","/** 
 * @see org.openmrs.api.db.ConceptDAO#getAllConceptClasses(boolean)
 */
@SuppressWarnings(""String_Node_Str"") public List<ConceptClass> getAllConceptClasses(boolean includeRetired) throws DAOException {
  Criteria crit=sessionFactory.getCurrentSession().createCriteria(ConceptClass.class);
  if (includeRetired == false)   crit.add(Expression.eq(""String_Node_Str"",false));
  return crit.list();
}"
84562,"/** 
 * Sends an email with system information and the given exception 
 * @param error
 */
public static void sendSchedulerError(Exception error){
  try {
    Boolean emailIsEnabled=Boolean.valueOf(Context.getAdministrationService().getGlobalProperty(SchedulerConstants.SCHEDULER_ADMIN_EMAIL_ENABLED_PROPERTY));
    if (emailIsEnabled) {
      String recipients=Context.getAdministrationService().getGlobalProperty(SchedulerConstants.SCHEDULER_ADMIN_EMAIL_PROPERTY);
      if (recipients != null) {
        String sender=SchedulerConstants.SCHEDULER_DEFAULT_FROM;
        String subject=SchedulerConstants.SCHEDULER_DEFAULT_SUBJECT + ""String_Node_Str"" + error.getClass().getName();
        String message=new String();
        message+=""String_Node_Str"";
        message+=SchedulerUtil.getExceptionAsString(error);
        message+=""String_Node_Str"";
        for (        Map.Entry<String,String> entry : Context.getAdministrationService().getSystemVariables().entrySet()) {
          message+=entry.getKey() + ""String_Node_Str"" + entry.getValue()+ ""String_Node_Str"";
        }
        log.info(""String_Node_Str"" + recipients + ""String_Node_Str""+ sender+ ""String_Node_Str""+ subject+ ""String_Node_Str""+ message);
        Context.getMessageService().sendMessage(recipients,sender,subject,message);
      }
    }
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",e);
  }
}","/** 
 * Sends an email with system information and the given exception 
 * @param error
 */
public static void sendSchedulerError(Exception error){
  try {
    Boolean emailIsEnabled=Boolean.valueOf(Context.getAdministrationService().getGlobalProperty(SchedulerConstants.SCHEDULER_ADMIN_EMAIL_ENABLED_PROPERTY));
    if (emailIsEnabled) {
      String recipients=Context.getAdministrationService().getGlobalProperty(SchedulerConstants.SCHEDULER_ADMIN_EMAIL_PROPERTY);
      if (recipients != null) {
        String sender=SchedulerConstants.SCHEDULER_DEFAULT_FROM;
        String subject=SchedulerConstants.SCHEDULER_DEFAULT_SUBJECT + ""String_Node_Str"" + error.getClass().getName();
        String message=new String();
        message+=""String_Node_Str"";
        message+=SchedulerUtil.getExceptionAsString(error);
        message+=""String_Node_Str"";
        for (        Map.Entry<String,String> entry : Context.getAdministrationService().getSystemVariables().entrySet()) {
          message+=entry.getKey() + ""String_Node_Str"" + entry.getValue()+ ""String_Node_Str"";
        }
        log.debug(""String_Node_Str"" + recipients + ""String_Node_Str""+ sender+ ""String_Node_Str""+ subject+ ""String_Node_Str""+ message);
        Context.getMessageService().sendMessage(recipients,sender,subject,message);
      }
    }
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",e);
  }
}"
84563,"public int doStartTag(){
  RequestContext requestContext=(RequestContext)this.pageContext.getAttribute(RequestContextAwareTag.REQUEST_CONTEXT_PAGE_ATTRIBUTE);
  if (date == null && getPath() != null) {
    try {
      String resolvedPath=ExpressionEvaluationUtils.evaluateString(""String_Node_Str"",getPath(),pageContext);
      String nestedPath=(String)pageContext.getAttribute(NestedPathTag.NESTED_PATH_VARIABLE_NAME,PageContext.REQUEST_SCOPE);
      if (nestedPath != null) {
        resolvedPath=nestedPath + resolvedPath;
      }
      BindStatus status=new BindStatus(requestContext,resolvedPath,false);
      log.debug(""String_Node_Str"" + status);
      if (status.getValue() != null) {
        log.debug(""String_Node_Str"" + status.getValue());
        if (status.getValue().getClass() == Date.class)         date=(Date)status.getValue();
 else {
          log.debug(""String_Node_Str"" + status.getValueType());
          Timestamp timestamp=(Timestamp)status.getEditor().getValue();
          date=new Date(timestamp.getTime());
        }
      }
    }
 catch (    Exception e) {
      log.warn(""String_Node_Str"" + getPath(),e);
      return SKIP_BODY;
    }
  }
  if (dateWasSet == false && date == null) {
    log.warn(""String_Node_Str"" + pageContext.getPage() + ""String_Node_Str""+ pageContext.getRequest().getLocalName()+ ""String_Node_Str""+ pageContext.getRequest().getRequestDispatcher(""String_Node_Str""));
    return SKIP_BODY;
  }
  if (type == null)   type=""String_Node_Str"";
  DateFormat dateFormat=null;
  if (format != null && format.length() > 0) {
    dateFormat=new SimpleDateFormat(format);
  }
 else   if (type.equals(""String_Node_Str"")) {
    dateFormat=new SimpleDateFormat(""String_Node_Str"");
  }
 else {
    log.debug(""String_Node_Str"" + Context.getLocale());
    if (type.equals(""String_Node_Str"")) {
      dateFormat=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG,Context.getLocale());
    }
 else     if (type.equals(""String_Node_Str"")) {
      dateFormat=DateFormat.getDateInstance(DateFormat.MEDIUM,Context.getLocale());
    }
 else     if (type.equals(""String_Node_Str"")) {
      dateFormat=Context.getDateFormat();
    }
 else {
      dateFormat=Context.getDateFormat();
    }
  }
  if (dateFormat == null)   dateFormat=new SimpleDateFormat(""String_Node_Str"");
  String datestr=""String_Node_Str"";
  try {
    if (date != null && !date.equals(""String_Node_Str"")) {
      datestr=dateFormat.format(date).toString();
    }
  }
 catch (  IllegalArgumentException e) {
    log.error(""String_Node_Str"" + date);
    log.error(""String_Node_Str"" + format);
    log.error(e);
    datestr=date.toString();
  }
  try {
    pageContext.getOut().write(datestr);
  }
 catch (  IOException e) {
    log.error(e);
  }
  release();
  return SKIP_BODY;
}","public int doStartTag(){
  RequestContext requestContext=(RequestContext)this.pageContext.getAttribute(RequestContextAwareTag.REQUEST_CONTEXT_PAGE_ATTRIBUTE);
  if (date == null && getPath() != null) {
    try {
      String resolvedPath=ExpressionEvaluationUtils.evaluateString(""String_Node_Str"",getPath(),pageContext);
      String nestedPath=(String)pageContext.getAttribute(NestedPathTag.NESTED_PATH_VARIABLE_NAME,PageContext.REQUEST_SCOPE);
      if (nestedPath != null) {
        resolvedPath=nestedPath + resolvedPath;
      }
      BindStatus status=new BindStatus(requestContext,resolvedPath,false);
      log.debug(""String_Node_Str"" + status);
      if (status.getValue() != null) {
        log.debug(""String_Node_Str"" + status.getValue());
        if (status.getValue().getClass() == Date.class)         date=(Date)status.getValue();
 else {
          log.debug(""String_Node_Str"" + status.getValueType());
          Timestamp timestamp=(Timestamp)status.getEditor().getValue();
          date=new Date(timestamp.getTime());
        }
      }
    }
 catch (    Exception e) {
      log.warn(""String_Node_Str"" + getPath(),e);
      return SKIP_BODY;
    }
  }
  if (dateWasSet == false && date == null) {
    log.warn(""String_Node_Str"" + pageContext.getPage() + ""String_Node_Str""+ pageContext.getRequest().getLocalName()+ ""String_Node_Str""+ pageContext.getRequest().getRequestDispatcher(""String_Node_Str""));
    return SKIP_BODY;
  }
  if (type == null)   type=""String_Node_Str"";
  DateFormat dateFormat=null;
  if (format != null && format.length() > 0) {
    dateFormat=new SimpleDateFormat(format);
  }
 else   if (type.equals(""String_Node_Str"")) {
    dateFormat=new SimpleDateFormat(""String_Node_Str"");
  }
 else {
    log.debug(""String_Node_Str"" + Context.getLocale());
    if (type.equals(""String_Node_Str"")) {
      dateFormat=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG,Context.getLocale());
    }
 else     if (type.equals(""String_Node_Str"")) {
      dateFormat=DateFormat.getDateInstance(DateFormat.MEDIUM,Context.getLocale());
    }
 else     if (type.equals(""String_Node_Str"")) {
      dateFormat=Context.getDateFormat();
    }
 else {
      dateFormat=Context.getDateFormat();
    }
  }
  if (dateFormat == null)   dateFormat=new SimpleDateFormat(""String_Node_Str"");
  String datestr=""String_Node_Str"";
  try {
    if (date != null) {
      datestr=dateFormat.format(date);
    }
  }
 catch (  IllegalArgumentException e) {
    log.error(""String_Node_Str"" + date);
    log.error(""String_Node_Str"" + format);
    log.error(e);
    datestr=date.toString();
  }
  try {
    pageContext.getOut().write(datestr);
  }
 catch (  IOException e) {
    log.error(e);
  }
  release();
  return SKIP_BODY;
}"
84564,"/** 
 * @see Object#toString() 
 */
public String toString(){
  return ""String_Node_Str"" + getPatientStateId() + ""String_Node_Str""+ getPatientProgram()+ ""String_Node_Str""+ getState()+ ""String_Node_Str""+ getStartDate()+ ""String_Node_Str""+ getEndDate();
}","/** 
 * @see Object#toString() 
 */
public String toString(){
  return ""String_Node_Str"" + getPatientStateId() + ""String_Node_Str""+ getPatientProgram()+ ""String_Node_Str""+ getState()+ ""String_Node_Str""+ getStartDate()+ ""String_Node_Str""+ getEndDate()+ ""String_Node_Str""+ getDateCreated()+ ""String_Node_Str""+ getDateChanged();
}"
84565,"/** 
 * Returns a   {@link List<ProgramWorkflowState>} including all possible next ProgramWorkflowStates, for the passed  {@link PatientProgram} ordered by {@link ConceptName}
 * @param fromState - {@link ProgramWorkflowState} to check transition from
 * @param toState - {@link ProgramWorkflowState} to check transition to
 * @return boolean - true if it is allowable to transition from <code>fromState</code> to <code>toState</code>
 */
public boolean isLegalTransition(ProgramWorkflowState fromState,ProgramWorkflowState toState){
  if (fromState == null) {
    return toState.getInitial();
  }
  if (fromState.equals(toState)) {
    return false;
  }
  return true;
}","/** 
 * Returns a   {@link List<ProgramWorkflowState>} including all possible next ProgramWorkflowStates, for the passed  {@link PatientProgram} ordered by {@link ConceptName}.
 * @param fromState {@link ProgramWorkflowState} to check transition from
 * @param toState {@link ProgramWorkflowState} to check transition to
 * @return boolean true if it is allowable to transition from <code>fromState</code> to <code>toState</code>
 */
public boolean isLegalTransition(ProgramWorkflowState fromState,ProgramWorkflowState toState){
  if (fromState == null) {
    return toState.getInitial();
  }
  if (fromState.equals(toState)) {
    return false;
  }
  return true;
}"
84566,"/** 
 * @see org.openmrs.api.ProgramWorkflowService#triggerStateConversion(org.openmrs.Patient,org.openmrs.Concept,java.util.Date)
 */
public void triggerStateConversion(Patient patient,Concept trigger,Date dateConverted){
  if (patient == null)   throw new APIException(""String_Node_Str"");
  if (trigger == null)   throw new APIException(""String_Node_Str"");
  if (dateConverted == null)   throw new APIException(""String_Node_Str"");
  for (  PatientProgram patientProgram : getPatientPrograms(patient,null,null,null,null,null,false)) {
    Set<ProgramWorkflow> workflows=patientProgram.getProgram().getWorkflows();
    for (    ProgramWorkflow workflow : workflows) {
      ProgramWorkflowState currentState=patientProgram.getCurrentState(workflow).getState();
      ProgramWorkflowState transitionState=workflow.getState(trigger);
      if (transitionState != null && workflow.isLegalTransition(currentState,transitionState)) {
        patientProgram.transitionToState(transitionState,dateConverted);
        log.info(""String_Node_Str"" + patientProgram + ""String_Node_Str""+ currentState+ ""String_Node_Str""+ transitionState+ ""String_Node_Str""+ dateConverted);
      }
    }
  }
}","/** 
 * @see org.openmrs.api.ProgramWorkflowService#triggerStateConversion(org.openmrs.Patient,org.openmrs.Concept,java.util.Date)
 */
public void triggerStateConversion(Patient patient,Concept trigger,Date dateConverted){
  if (patient == null)   throw new APIException(""String_Node_Str"");
  if (trigger == null)   throw new APIException(""String_Node_Str"");
  if (dateConverted == null)   throw new APIException(""String_Node_Str"");
  for (  PatientProgram patientProgram : getPatientPrograms(patient,null,null,null,null,null,false)) {
    Set<ProgramWorkflow> workflows=patientProgram.getProgram().getWorkflows();
    for (    ProgramWorkflow workflow : workflows) {
      PatientState patientState=patientProgram.getCurrentState(workflow);
      ProgramWorkflowState currentState=(patientState != null) ? patientState.getState() : null;
      ProgramWorkflowState transitionState=workflow.getState(trigger);
      log.debug(""String_Node_Str"" + currentState + ""String_Node_Str"");
      log.debug(""String_Node_Str"" + transitionState + ""String_Node_Str"");
      if (transitionState != null && workflow.isLegalTransition(currentState,transitionState)) {
        patientProgram.transitionToState(transitionState,dateConverted);
        log.debug(""String_Node_Str"" + patientProgram + ""String_Node_Str""+ currentState+ ""String_Node_Str""+ transitionState+ ""String_Node_Str""+ dateConverted);
      }
    }
    Context.getProgramWorkflowService().savePatientProgram(patientProgram);
  }
}"
84567,"/** 
 * Setup the reference map object.  Should be called by the PersonFormController/UserFormController.referenceData(...)
 * @param person
 * @return
 */
@SuppressWarnings(""String_Node_Str"") protected Map setupReferenceData(Map map,Person person) throws Exception {
  String causeOfDeathOther=""String_Node_Str"";
  if (Context.isAuthenticated()) {
    log.warn(""String_Node_Str"");
  }
  map.put(""String_Node_Str"",causeOfDeathOther);
  return map;
}","/** 
 * Setup the reference map object.  Should be called by the PersonFormController/UserFormController.referenceData(...)
 * @param person
 * @return
 */
@SuppressWarnings(""String_Node_Str"") protected Map setupReferenceData(Map map,Person person) throws Exception {
  String causeOfDeathOther=""String_Node_Str"";
  if (Context.isAuthenticated()) {
  }
  map.put(""String_Node_Str"",causeOfDeathOther);
  return map;
}"
84568,"/** 
 * Auto generated method comment
 * @param patientId
 * @param reasonForExitId
 * @param dateOfExit
 * @param causeOfDeath
 * @param otherReason
 * @return
 */
public String exitPatientFromCare(Integer patientId,Integer reasonForExitId,String dateOfExit,Integer causeOfDeath,String otherReason){
  log.debug(""String_Node_Str"" + patientId + ""String_Node_Str""+ reasonForExitId+ ""String_Node_Str""+ dateOfExit+ ""String_Node_Str"");
  String ret=""String_Node_Str"";
  PatientService ps=Context.getPatientService();
  ConceptService cs=Context.getConceptService();
  Patient p=null;
  try {
    p=ps.getPatient(patientId);
  }
 catch (  Exception e) {
    p=null;
  }
  if (p == null) {
    ret=""String_Node_Str"";
  }
  Concept c=null;
  try {
    c=cs.getConcept(reasonForExitId);
  }
 catch (  Exception e) {
    c=null;
  }
  if (c == null) {
    ret=""String_Node_Str"";
  }
  Date exitDate=null;
  if (dateOfExit != null) {
    SimpleDateFormat sdf=OpenmrsUtil.getDateFormat();
    try {
      exitDate=sdf.parse(dateOfExit);
    }
 catch (    ParseException e) {
      exitDate=null;
    }
  }
  if (exitDate == null) {
    ret=""String_Node_Str"";
  }
  if (p != null && c != null && exitDate != null) {
    String deathProp=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
    Concept deathConcept=null;
    if (deathProp != null) {
      deathConcept=cs.getConcept(deathProp);
    }
    if (deathConcept != null) {
      if (c.equals(deathConcept)) {
        Concept causeConcept=null;
        try {
          causeConcept=cs.getConcept(causeOfDeath);
        }
 catch (        Exception e) {
          causeConcept=null;
        }
        if (causeConcept == null) {
          ret=""String_Node_Str"";
        }
 else {
          try {
            ps.processDeath(p,exitDate,causeConcept,otherReason);
          }
 catch (          Exception e) {
            log.debug(""String_Node_Str"",e);
            ret=""String_Node_Str"";
          }
        }
      }
 else {
        try {
          ps.exitFromCare(p,exitDate,c);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"",e);
          ret=""String_Node_Str"";
        }
      }
    }
 else {
      try {
        ps.exitFromCare(p,exitDate,c);
      }
 catch (      Exception e) {
        log.debug(""String_Node_Str"",e);
        ret=""String_Node_Str"";
      }
    }
    log.debug(""String_Node_Str"");
  }
  return ret;
}","/** 
 * Auto generated method comment
 * @param patientId
 * @param reasonForExitId
 * @param dateOfExit
 * @param causeOfDeath
 * @param otherReason
 * @return
 */
public String exitPatientFromCare(Integer patientId,Integer exitReasonId,String exitDateStr,Integer causeOfDeathConceptId,String otherReason){
  log.debug(""String_Node_Str"" + patientId + ""String_Node_Str""+ exitReasonId+ ""String_Node_Str""+ exitDateStr+ ""String_Node_Str"");
  String ret=""String_Node_Str"";
  PatientService ps=Context.getPatientService();
  ConceptService cs=Context.getConceptService();
  Patient patient=null;
  try {
    patient=ps.getPatient(patientId);
  }
 catch (  Exception e) {
    patient=null;
  }
  if (patient == null) {
    ret=""String_Node_Str"";
  }
  Concept exitReasonConcept=null;
  try {
    exitReasonConcept=cs.getConcept(exitReasonId);
  }
 catch (  Exception e) {
    exitReasonConcept=null;
  }
  if (exitReasonConcept == null) {
    ret=""String_Node_Str"";
  }
  Date exitDate=null;
  if (exitDateStr != null) {
    SimpleDateFormat sdf=OpenmrsUtil.getDateFormat();
    try {
      exitDate=sdf.parse(exitDateStr);
    }
 catch (    ParseException e) {
      exitDate=null;
    }
  }
  if (exitDate == null) {
    ret=""String_Node_Str"";
  }
  if (patient != null && exitReasonConcept != null && exitDate != null) {
    String patientDiedConceptId=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
    Concept patientDiedConcept=null;
    if (patientDiedConceptId != null) {
      patientDiedConcept=cs.getConcept(patientDiedConceptId);
    }
    if (patientDiedConcept != null) {
      if (exitReasonConcept.equals(patientDiedConcept)) {
        Concept causeOfDeathConcept=null;
        try {
          causeOfDeathConcept=cs.getConcept(causeOfDeathConceptId);
        }
 catch (        Exception e) {
          causeOfDeathConcept=null;
        }
        if (causeOfDeathConcept != null) {
          try {
            ps.processDeath(patient,exitDate,causeOfDeathConcept,otherReason);
          }
 catch (          Exception e) {
            log.debug(""String_Node_Str"",e);
            ret=""String_Node_Str"";
          }
        }
 else {
          ret=""String_Node_Str"";
        }
      }
 else {
        try {
          ps.exitFromCare(patient,exitDate,exitReasonConcept);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"",e);
          ret=""String_Node_Str"";
        }
      }
    }
 else {
      try {
        ps.exitFromCare(patient,exitDate,exitReasonConcept);
      }
 catch (      Exception e) {
        log.debug(""String_Node_Str"",e);
        ret=""String_Node_Str"";
      }
    }
    log.debug(""String_Node_Str"");
  }
  return ret;
}"
84569,"/** 
 * @see org.openmrs.api.PatientService#getIdentifierValidator(java.lang.String)
 */
@SuppressWarnings(""String_Node_Str"") public IdentifierValidator getIdentifierValidator(String pivClassName){
  try {
    return getIdentifierValidator(((Class<IdentifierValidator>)Class.forName(pivClassName)));
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + pivClassName,e);
    return getDefaultIdentifierValidator();
  }
}","/** 
 * @see org.openmrs.api.PatientService#getIdentifierValidator(java.lang.String)
 */
@SuppressWarnings(""String_Node_Str"") public IdentifierValidator getIdentifierValidator(String pivClassName){
  try {
    return getIdentifierValidator(((Class<IdentifierValidator>)Context.loadClass(pivClassName)));
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + pivClassName,e);
    return getDefaultIdentifierValidator();
  }
}"
84570,"/** 
 * @see org.openmrs.reporting.db.ReportObjectDAO#getReportObjectsByType(java.lang.String)
 */
@SuppressWarnings(""String_Node_Str"") public List<AbstractReportObject> getReportObjectsByType(String reportObjectType) throws DAOException {
  List<AbstractReportObject> reportObjects=new Vector<AbstractReportObject>();
  Query query=sessionFactory.getCurrentSession().createQuery(""String_Node_Str"");
  query.setString(""String_Node_Str"",reportObjectType);
  List<ReportObjectWrapper> wrappedObjects=query.list();
  for (  ReportObjectWrapper wrappedObject : wrappedObjects) {
    AbstractReportObject reportObject=wrappedObject.getReportObject();
    if (reportObject.getReportObjectId() == null) {
      reportObject.setReportObjectId(wrappedObject.getReportObjectId());
    }
    reportObjects.add(reportObject);
  }
  return reportObjects;
}","/** 
 * @see org.openmrs.reporting.db.ReportObjectDAO#getReportObjectsByType(java.lang.String)
 */
@SuppressWarnings(""String_Node_Str"") public List<AbstractReportObject> getReportObjectsByType(String reportObjectType) throws DAOException {
  List<AbstractReportObject> reportObjects=new Vector<AbstractReportObject>();
  Query query=sessionFactory.getCurrentSession().createQuery(""String_Node_Str"");
  query.setString(""String_Node_Str"",reportObjectType);
  List<ReportObjectWrapper> wrappedObjects=query.list();
  for (  ReportObjectWrapper wrappedObject : wrappedObjects) {
    AbstractReportObject reportObject=wrappedObject.getReportObject();
    if (reportObject != null) {
      if (reportObject.getReportObjectId() == null) {
        reportObject.setReportObjectId(wrappedObject.getReportObjectId());
      }
      reportObjects.add(reportObject);
    }
  }
  return reportObjects;
}"
84571,"/** 
 * Runs through the advice and extension points and removes from api <code>isShuttingDown</code> should only be true when openmrs is stopping modules because it is shutting down. When normally stopping a module, use stopModule(Module) (or leave value as false). This property controls whether the globalproperty is set for startup/shutdown. Also calls mod.Activator.shutdown()
 * @param mod module to stop
 * @param isShuttingDown
 */
@SuppressWarnings(""String_Node_Str"") public static void stopModule(Module mod,boolean isShuttingDown){
  if (mod != null) {
    String moduleId=mod.getModuleId();
    String modulePackage=mod.getPackageName();
    List<Module> startedModulesCopy=new ArrayList<Module>();
    startedModulesCopy.addAll(getStartedModules());
    for (    Module dependentModule : startedModulesCopy) {
      if (!dependentModule.equals(mod) && dependentModule.getRequiredModules().contains(modulePackage))       stopModule(dependentModule,isShuttingDown);
    }
    getStartedModulesMap().remove(moduleId);
    if (isShuttingDown == false && !Context.isRefreshingContext()) {
      try {
        Context.addProxyPrivilege(""String_Node_Str"");
        AdministrationService as=Context.getAdministrationService();
        GlobalProperty gp=new GlobalProperty(moduleId + ""String_Node_Str"",""String_Node_Str"",getGlobalPropertyStartedDescription(moduleId));
        as.saveGlobalProperty(gp);
      }
  finally {
        Context.removeProxyPrivilege(""String_Node_Str"");
      }
    }
    if (getModuleClassLoaderMap().containsKey(mod)) {
      log.debug(""String_Node_Str"");
      try {
        for (        AdvicePoint advice : mod.getAdvicePoints()) {
          Class cls=null;
          try {
            cls=Class.forName(advice.getPoint());
            Object aopObject=advice.getClassInstance();
            if (Advisor.class.isInstance(aopObject)) {
              log.debug(""String_Node_Str"" + aopObject.getClass());
              Context.removeAdvisor(cls,(Advisor)aopObject);
            }
 else {
              log.debug(""String_Node_Str"" + aopObject.getClass());
              Context.removeAdvice(cls,(Advice)aopObject);
            }
          }
 catch (          ClassNotFoundException e) {
            log.warn(""String_Node_Str"" + advice.getPoint(),e);
          }
        }
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + moduleId,t);
      }
      try {
        for (        Extension ext : mod.getExtensions()) {
          String extId=ext.getExtensionId();
          try {
            List<Extension> tmpExtensions=getExtensions(extId);
            if (tmpExtensions == null)             tmpExtensions=new Vector<Extension>();
            tmpExtensions.remove(ext);
            getExtensionMap().put(extId,tmpExtensions);
          }
 catch (          Exception exterror) {
            log.warn(""String_Node_Str"" + ext,exterror);
          }
        }
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + moduleId,t);
      }
    }
    try {
      mod.getActivator().shutdown();
    }
 catch (    ModuleException me) {
      log.debug(""String_Node_Str"",me);
    }
catch (    Throwable t) {
      log.warn(""String_Node_Str"",t);
    }
    ModuleClassLoader cl=removeClassLoader(mod);
    if (cl != null) {
      cl.dispose();
      cl=null;
      File folder=OpenmrsClassLoader.getLibCacheFolder();
      File tmpModuleDir=new File(folder,moduleId);
      try {
        System.gc();
        OpenmrsUtil.deleteDirectory(tmpModuleDir);
      }
 catch (      IOException e) {
        log.warn(""String_Node_Str"" + moduleId);
      }
    }
    System.gc();
  }
}","/** 
 * Runs through the advice and extension points and removes from api <code>isShuttingDown</code> should only be true when openmrs is stopping modules because it is shutting down. When normally stopping a module, use stopModule(Module) (or leave value as false). This property controls whether the globalproperty is set for startup/shutdown. Also calls mod.Activator.shutdown()
 * @param mod module to stop
 * @param isShuttingDown
 */
@SuppressWarnings(""String_Node_Str"") public static void stopModule(Module mod,boolean isShuttingDown){
  if (mod != null) {
    String moduleId=mod.getModuleId();
    String modulePackage=mod.getPackageName();
    List<Module> startedModulesCopy=new ArrayList<Module>();
    startedModulesCopy.addAll(getStartedModules());
    for (    Module dependentModule : startedModulesCopy) {
      if (!dependentModule.equals(mod) && dependentModule.getRequiredModules().contains(modulePackage))       stopModule(dependentModule,isShuttingDown);
    }
    getStartedModulesMap().remove(moduleId);
    if (isShuttingDown == false && !Context.isRefreshingContext()) {
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_GLOBAL_PROPERTIES);
        AdministrationService as=Context.getAdministrationService();
        GlobalProperty gp=new GlobalProperty(moduleId + ""String_Node_Str"",""String_Node_Str"",getGlobalPropertyStartedDescription(moduleId));
        as.saveGlobalProperty(gp);
      }
  finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_GLOBAL_PROPERTIES);
      }
    }
    if (getModuleClassLoaderMap().containsKey(mod)) {
      log.debug(""String_Node_Str"");
      try {
        for (        AdvicePoint advice : mod.getAdvicePoints()) {
          Class cls=null;
          try {
            cls=Class.forName(advice.getPoint());
            Object aopObject=advice.getClassInstance();
            if (Advisor.class.isInstance(aopObject)) {
              log.debug(""String_Node_Str"" + aopObject.getClass());
              Context.removeAdvisor(cls,(Advisor)aopObject);
            }
 else {
              log.debug(""String_Node_Str"" + aopObject.getClass());
              Context.removeAdvice(cls,(Advice)aopObject);
            }
          }
 catch (          ClassNotFoundException e) {
            log.warn(""String_Node_Str"" + advice.getPoint(),e);
          }
        }
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + moduleId,t);
      }
      try {
        for (        Extension ext : mod.getExtensions()) {
          String extId=ext.getExtensionId();
          try {
            List<Extension> tmpExtensions=getExtensions(extId);
            if (tmpExtensions == null)             tmpExtensions=new Vector<Extension>();
            tmpExtensions.remove(ext);
            getExtensionMap().put(extId,tmpExtensions);
          }
 catch (          Exception exterror) {
            log.warn(""String_Node_Str"" + ext,exterror);
          }
        }
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + moduleId,t);
      }
    }
    try {
      mod.getActivator().shutdown();
    }
 catch (    ModuleException me) {
      log.debug(""String_Node_Str"",me);
    }
catch (    Throwable t) {
      log.warn(""String_Node_Str"",t);
    }
    ModuleClassLoader cl=removeClassLoader(mod);
    if (cl != null) {
      cl.dispose();
      cl=null;
      File folder=OpenmrsClassLoader.getLibCacheFolder();
      File tmpModuleDir=new File(folder,moduleId);
      try {
        System.gc();
        OpenmrsUtil.deleteDirectory(tmpModuleDir);
      }
 catch (      IOException e) {
        log.warn(""String_Node_Str"" + moduleId);
      }
    }
    System.gc();
  }
}"
84572,"/** 
 * Runs through extensionPoints and then calls mod.Activator.startup()
 * @param module Module to start
 */
public static Module startModule(Module module) throws ModuleException {
  if (module != null) {
    try {
      String requireVersion=module.getRequireOpenmrsVersion();
      if (requireVersion != null && !requireVersion.equals(""String_Node_Str""))       if (ModuleUtil.compareVersion(OpenmrsConstants.OPENMRS_VERSION_SHORT,requireVersion) < 0)       throw new ModuleException(""String_Node_Str"" + requireVersion + ""String_Node_Str""+ OpenmrsConstants.OPENMRS_VERSION_SHORT+ ""String_Node_Str"",module.getName());
      String requireDBVersion=module.getRequireDatabaseVersion();
      if (requireDBVersion != null && !requireDBVersion.equals(""String_Node_Str""))       if (ModuleUtil.compareVersion(OpenmrsConstants.DATABASE_VERSION,requireDBVersion) < 0)       throw new ModuleException(""String_Node_Str"" + requireDBVersion + ""String_Node_Str""+ OpenmrsConstants.DATABASE_VERSION+ ""String_Node_Str"",module.getName());
      if (!requiredModulesStarted(module)) {
        throw new ModuleException(""String_Node_Str"" + OpenmrsUtil.join(module.getRequiredModules(),""String_Node_Str"") + ""String_Node_Str"",module.getName());
      }
      ModuleClassLoader moduleClassLoader=new ModuleClassLoader(module,ModuleFactory.class.getClassLoader());
      getModuleClassLoaderMap().put(module,moduleClassLoader);
      for (      Extension ext : module.getExtensions()) {
        String extId=ext.getExtensionId();
        List<Extension> tmpExtensions=getExtensions(extId);
        if (tmpExtensions == null)         tmpExtensions=new Vector<Extension>();
        log.debug(""String_Node_Str"" + ext.getExtensionId() + ""String_Node_Str""+ ext.getClass());
        tmpExtensions.add(ext);
        getExtensionMap().put(extId,tmpExtensions);
      }
      SortedMap<String,String> diffs=SqlDiffFileParser.getSqlDiffs(module);
      try {
        Context.addProxyPrivilege(""String_Node_Str"");
        for (        String version : diffs.keySet()) {
          String sql=diffs.get(version);
          if (StringUtils.hasText(sql))           runDiff(module,version,sql);
        }
      }
  finally {
        Context.removeProxyPrivilege(""String_Node_Str"");
      }
      getStartedModulesMap().put(module.getModuleId(),module);
      try {
        Context.addProxyPrivilege(""String_Node_Str"");
        AdministrationService as=Context.getAdministrationService();
        GlobalProperty gp=new GlobalProperty(module.getModuleId() + ""String_Node_Str"",""String_Node_Str"",getGlobalPropertyStartedDescription(module.getModuleId()));
        as.setGlobalProperty(gp);
      }
  finally {
        Context.removeProxyPrivilege(""String_Node_Str"");
      }
      if (module.getPrivileges().size() > 0 || module.getGlobalProperties().size() > 0) {
        log.debug(""String_Node_Str"");
        Context.checkCoreDataset();
      }
      try {
        module.getActivator().startup();
      }
 catch (      ModuleException e) {
        throw e;
      }
catch (      Exception e) {
        throw new ModuleException(""String_Node_Str"",e);
      }
      module.clearStartupError();
    }
 catch (    Exception e) {
      log.warn(""String_Node_Str"" + module.getModuleId(),e);
      module.setStartupErrorMessage(""String_Node_Str"" + e.getMessage());
      try {
        stopModule(module);
      }
 catch (      Exception e2) {
        log.debug(""String_Node_Str"" + module.getModuleId(),e2);
      }
    }
  }
  return module;
}","/** 
 * Runs through extensionPoints and then calls mod.Activator.startup()
 * @param module Module to start
 */
public static Module startModule(Module module) throws ModuleException {
  if (module != null) {
    try {
      String requireVersion=module.getRequireOpenmrsVersion();
      if (requireVersion != null && !requireVersion.equals(""String_Node_Str""))       if (ModuleUtil.compareVersion(OpenmrsConstants.OPENMRS_VERSION_SHORT,requireVersion) < 0)       throw new ModuleException(""String_Node_Str"" + requireVersion + ""String_Node_Str""+ OpenmrsConstants.OPENMRS_VERSION_SHORT+ ""String_Node_Str"",module.getName());
      String requireDBVersion=module.getRequireDatabaseVersion();
      if (requireDBVersion != null && !requireDBVersion.equals(""String_Node_Str""))       if (ModuleUtil.compareVersion(OpenmrsConstants.DATABASE_VERSION,requireDBVersion) < 0)       throw new ModuleException(""String_Node_Str"" + requireDBVersion + ""String_Node_Str""+ OpenmrsConstants.DATABASE_VERSION+ ""String_Node_Str"",module.getName());
      if (!requiredModulesStarted(module)) {
        throw new ModuleException(""String_Node_Str"" + OpenmrsUtil.join(module.getRequiredModules(),""String_Node_Str"") + ""String_Node_Str"",module.getName());
      }
      ModuleClassLoader moduleClassLoader=new ModuleClassLoader(module,ModuleFactory.class.getClassLoader());
      getModuleClassLoaderMap().put(module,moduleClassLoader);
      for (      Extension ext : module.getExtensions()) {
        String extId=ext.getExtensionId();
        List<Extension> tmpExtensions=getExtensions(extId);
        if (tmpExtensions == null)         tmpExtensions=new Vector<Extension>();
        log.debug(""String_Node_Str"" + ext.getExtensionId() + ""String_Node_Str""+ ext.getClass());
        tmpExtensions.add(ext);
        getExtensionMap().put(extId,tmpExtensions);
      }
      SortedMap<String,String> diffs=SqlDiffFileParser.getSqlDiffs(module);
      try {
        Context.addProxyPrivilege(""String_Node_Str"");
        for (        String version : diffs.keySet()) {
          String sql=diffs.get(version);
          if (StringUtils.hasText(sql))           runDiff(module,version,sql);
        }
      }
  finally {
        Context.removeProxyPrivilege(""String_Node_Str"");
      }
      getStartedModulesMap().put(module.getModuleId(),module);
      try {
        Context.addProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_GLOBAL_PROPERTIES);
        AdministrationService as=Context.getAdministrationService();
        GlobalProperty gp=new GlobalProperty(module.getModuleId() + ""String_Node_Str"",""String_Node_Str"",getGlobalPropertyStartedDescription(module.getModuleId()));
        as.setGlobalProperty(gp);
      }
  finally {
        Context.removeProxyPrivilege(OpenmrsConstants.PRIV_MANAGE_GLOBAL_PROPERTIES);
      }
      if (module.getPrivileges().size() > 0 || module.getGlobalProperties().size() > 0) {
        log.debug(""String_Node_Str"");
        Context.checkCoreDataset();
      }
      try {
        module.getActivator().startup();
      }
 catch (      ModuleException e) {
        throw e;
      }
catch (      Exception e) {
        throw new ModuleException(""String_Node_Str"",e);
      }
      module.clearStartupError();
    }
 catch (    Exception e) {
      log.warn(""String_Node_Str"" + module.getModuleId(),e);
      module.setStartupErrorMessage(""String_Node_Str"" + e.getMessage());
      try {
        stopModule(module);
      }
 catch (      Exception e2) {
        log.debug(""String_Node_Str"" + module.getModuleId(),e2);
      }
    }
  }
  return module;
}"
84573,"/** 
 * This is called prior to displaying a form for the first time.  It tells Spring the form/command object to load into the request
 * @see org.springframework.web.servlet.mvc.AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
 */
protected Object formBackingObject(HttpServletRequest request) throws ServletException {
  Obs obs=null;
  if (Context.isAuthenticated()) {
    ObsService os=Context.getObsService();
    EncounterService es=Context.getEncounterService();
    String obsId=request.getParameter(""String_Node_Str"");
    String encounterId=request.getParameter(""String_Node_Str"");
    if (obsId != null)     obs=os.getObs(Integer.valueOf(obsId));
 else     if (encounterId != null) {
      Encounter e=es.getEncounter(Integer.valueOf(encounterId));
      obs=new Obs();
      obs.setEncounter(e);
      obs.setPerson(e.getPatient());
      obs.setLocation(e.getLocation());
      obs.setObsDatetime(e.getEncounterDatetime());
    }
  }
  if (obs == null)   obs=new Obs();
  return obs;
}","/** 
 * This is called prior to displaying a form for the first time.  It tells Spring the form/command object to load into the request
 * @see org.springframework.web.servlet.mvc.AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
 */
protected Object formBackingObject(HttpServletRequest request) throws ServletException {
  Obs obs=null;
  if (Context.isAuthenticated()) {
    ObsService os=Context.getObsService();
    EncounterService es=Context.getEncounterService();
    String obsId=request.getParameter(""String_Node_Str"");
    String encounterId=request.getParameter(""String_Node_Str"");
    if (obsId != null)     obs=os.getObs(Integer.valueOf(obsId));
 else     if (StringUtils.hasText(encounterId)) {
      Encounter e=es.getEncounter(Integer.valueOf(encounterId));
      obs=new Obs();
      obs.setEncounter(e);
      obs.setPerson(e.getPatient());
      obs.setLocation(e.getLocation());
      obs.setObsDatetime(e.getEncounterDatetime());
    }
  }
  if (obs == null)   obs=new Obs();
  return obs;
}"
84574,"/** 
 * @see org.openmrs.api.PersonService#parsePersonName(java.lang.String)
 */
public PersonName parsePersonName(String name) throws APIException {
  String firstName=name;
  String middleName=""String_Node_Str"";
  String lastName=""String_Node_Str"";
  if (name.contains(""String_Node_Str"")) {
    String[] names=name.split(""String_Node_Str"");
    String[] firstNames=names[1].split(""String_Node_Str"");
    if (firstNames.length == 2) {
      lastName=names[0];
      firstName=firstNames[0];
      middleName=firstNames[1];
    }
 else {
      firstName=names[1];
      lastName=names[2];
    }
  }
 else   if (name.contains(""String_Node_Str"")) {
    String[] names=name.split(""String_Node_Str"");
    if (names.length == 3) {
      firstName=names[0];
      middleName=names[1];
      lastName=names[2];
    }
 else {
      firstName=names[0];
      lastName=names[1];
    }
  }
  return new PersonName(firstName,middleName,lastName);
}","/** 
 * @see org.openmrs.api.PersonService#parsePersonName(java.lang.String)
 */
public PersonName parsePersonName(String name) throws APIException {
  String firstName=name;
  String middleName=""String_Node_Str"";
  String lastName=""String_Node_Str"";
  if (name.contains(""String_Node_Str"")) {
    String[] names=name.split(""String_Node_Str"");
    String[] firstNames=names[1].split(""String_Node_Str"");
    if (firstNames.length == 2) {
      lastName=names[0];
      firstName=firstNames[0];
      middleName=firstNames[1];
    }
 else {
      firstName=names[1];
      lastName=names[0];
    }
  }
 else   if (name.contains(""String_Node_Str"")) {
    String[] names=name.split(""String_Node_Str"");
    if (names.length == 3) {
      firstName=names[0];
      middleName=names[1];
      lastName=names[2];
    }
 else {
      firstName=names[0];
      lastName=names[1];
    }
  }
  return new PersonName(firstName,middleName,lastName);
}"
84575,"/** 
 * Called prior to form display.  Allows for data to be put  in the request to be used in the view
 * @see org.springframework.web.servlet.mvc.SimpleFormController#referenceData(javax.servlet.http.HttpServletRequest)
 */
protected Map<String,Object> referenceData(HttpServletRequest request) throws Exception {
  Map<String,Object> map=new HashMap<String,Object>();
  Set<PatientIdentifier> identifiers=new TreeSet<PatientIdentifier>();
  Patient patient=null;
  String causeOfDeathOther=""String_Node_Str"";
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    String patientId=request.getParameter(""String_Node_Str"");
    if (patientId != null && !patientId.equals(""String_Node_Str"")) {
      patient=ps.getPatient(Integer.valueOf(patientId));
      if (patient != null) {
        identifiers.addAll(patient.getActiveIdentifiers());
        String propCause=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
        Concept conceptCause=Context.getConceptService().getConcept(propCause);
        if (conceptCause != null && patient.getPatientId() != null) {
          List<Obs> obssDeath=Context.getObsService().getObservationsByPersonAndConcept(patient,conceptCause);
          if (obssDeath.size() == 1) {
            Obs obsDeath=obssDeath.iterator().next();
            causeOfDeathOther=obsDeath.getValueText();
            if (causeOfDeathOther == null) {
              log.debug(""String_Node_Str"");
              causeOfDeathOther=""String_Node_Str"";
            }
 else {
              log.debug(""String_Node_Str"" + causeOfDeathOther);
            }
          }
 else {
            log.debug(""String_Node_Str"" + obssDeath.size());
          }
        }
 else {
          log.debug(""String_Node_Str"");
        }
      }
    }
  }
  for (  PatientIdentifier identifier : newIdentifiers) {
    identifier.setPatient(patient);
  }
  identifiers.addAll(newIdentifiers);
  if (pref.length() > 0)   for (  PatientIdentifier pi : identifiers)   pi.setPreferred(pref.equals(pi.getIdentifier() + pi.getIdentifierType().getPatientIdentifierTypeId()));
  if (Context.isAuthenticated())   map.put(""String_Node_Str"",Context.getAuthenticatedUser().getUserProperty(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCATION));
  map.put(""String_Node_Str"",identifiers);
  map.put(""String_Node_Str"",causeOfDeathOther);
  return map;
}","/** 
 * Called prior to form display.  Allows for data to be put  in the request to be used in the view
 * @see org.springframework.web.servlet.mvc.SimpleFormController#referenceData(javax.servlet.http.HttpServletRequest)
 */
protected Map<String,Object> referenceData(HttpServletRequest request) throws Exception {
  Map<String,Object> map=new HashMap<String,Object>();
  Set<PatientIdentifier> identifiers=new HashSet<PatientIdentifier>();
  Patient patient=null;
  String causeOfDeathOther=""String_Node_Str"";
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    String patientId=request.getParameter(""String_Node_Str"");
    if (patientId != null && !patientId.equals(""String_Node_Str"")) {
      patient=ps.getPatient(Integer.valueOf(patientId));
      if (patient != null) {
        identifiers.addAll(patient.getActiveIdentifiers());
        String propCause=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
        Concept conceptCause=Context.getConceptService().getConcept(propCause);
        if (conceptCause != null && patient.getPatientId() != null) {
          List<Obs> obssDeath=Context.getObsService().getObservationsByPersonAndConcept(patient,conceptCause);
          if (obssDeath.size() == 1) {
            Obs obsDeath=obssDeath.iterator().next();
            causeOfDeathOther=obsDeath.getValueText();
            if (causeOfDeathOther == null) {
              log.debug(""String_Node_Str"");
              causeOfDeathOther=""String_Node_Str"";
            }
 else {
              log.debug(""String_Node_Str"" + causeOfDeathOther);
            }
          }
 else {
            log.debug(""String_Node_Str"" + obssDeath.size());
          }
        }
 else {
          log.debug(""String_Node_Str"");
        }
      }
    }
  }
  for (  PatientIdentifier identifier : newIdentifiers) {
    identifier.setPatient(patient);
  }
  identifiers.addAll(newIdentifiers);
  if (pref.length() > 0)   for (  PatientIdentifier pi : identifiers)   pi.setPreferred(pref.equals(pi.getIdentifier() + pi.getIdentifierType().getPatientIdentifierTypeId()));
  if (Context.isAuthenticated())   map.put(""String_Node_Str"",Context.getAuthenticatedUser().getUserProperty(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCATION));
  map.put(""String_Node_Str"",identifiers);
  map.put(""String_Node_Str"",causeOfDeathOther);
  return map;
}"
84576,"/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  log.debug(""String_Node_Str"");
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    PersonService personService=Context.getPersonService();
    ShortPatientModel shortPatient=(ShortPatientModel)obj;
    String view=getSuccessView();
    boolean isError=errors.hasErrors();
    String action=request.getParameter(""String_Node_Str"");
    MessageSourceAccessor msa=getMessageSourceAccessor();
    if (action != null && action.equals(msa.getMessage(""String_Node_Str""))) {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      return new ModelAndView(new RedirectView(""String_Node_Str""));
    }
    Patient patient=null;
    if (shortPatient.getPatientId() != null) {
      patient=ps.getPatient(shortPatient.getPatientId());
      if (patient == null) {
        try {
          Person p=personService.getPerson(shortPatient.getPatientId());
          patient=new Patient(p);
        }
 catch (        ObjectRetrievalFailureException noUserEx) {
        }
      }
    }
    if (patient == null)     patient=new Patient();
    boolean duplicate=false;
    PersonName newName=shortPatient.getName();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + newName.toString());
    for (    PersonName pn : patient.getNames()) {
      if (((pn.getGivenName() == null && newName.getGivenName() == null) || OpenmrsUtil.nullSafeEquals(pn.getGivenName(),newName.getGivenName())) && ((pn.getMiddleName() == null && newName.getMiddleName() == null) || OpenmrsUtil.nullSafeEquals(pn.getMiddleName(),newName.getMiddleName())) && ((pn.getFamilyName() == null && newName.getFamilyName() == null) || OpenmrsUtil.nullSafeEquals(pn.getFamilyName(),newName.getFamilyName())))       duplicate=true;
    }
    if (!duplicate) {
      if (patient.getPersonName() != null)       patient.getPersonName().setPreferred(false);
      newName.setPersonNameId(null);
      newName.setPreferred(true);
      patient.addName(newName);
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + shortPatient.getAddress());
    if (shortPatient.getAddress() != null && !shortPatient.getAddress().isBlank()) {
      duplicate=false;
      for (      PersonAddress pa : patient.getAddresses()) {
        if (pa.toString().equals(shortPatient.getAddress().toString()))         duplicate=true;
      }
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + duplicate);
      if (!duplicate) {
        PersonAddress newAddress=shortPatient.getAddress();
        newAddress.setPersonAddressId(null);
        newAddress.setPreferred(true);
        patient.addAddress(newAddress);
      }
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + patient.getAddresses());
    if (patient.getIdentifiers() == null)     patient.setIdentifiers(new TreeSet<PatientIdentifier>());
    for (    PatientIdentifier pi : patient.getIdentifiers()) {
      pi.setPreferred(pref.equals(pi.getIdentifier() + pi.getIdentifierType().getPatientIdentifierTypeId()));
    }
    for (    PersonAttributeType type : personService.getPersonAttributeTypes(PERSON_TYPE.PATIENT,ATTR_VIEW_TYPE.VIEWING)) {
      String value=request.getParameter(type.getPersonAttributeTypeId().toString());
      patient.addAttribute(new PersonAttribute(type,value));
    }
    for (    PatientIdentifier identifier : newIdentifiers) {
      identifier.setPatient(patient);
      for (      PatientIdentifier currentIdentifier : patient.getActiveIdentifiers()) {
        if (currentIdentifier.equals(identifier)) {
          patient.removeIdentifier(currentIdentifier);
          Context.evictFromSession(currentIdentifier);
        }
      }
    }
    patient.addIdentifiers(newIdentifiers);
    List<PatientIdentifier> newIdentifiersList=new Vector<PatientIdentifier>();
    newIdentifiersList.addAll(newIdentifiers);
    for (    PatientIdentifier identifier : patient.getIdentifiers()) {
      if (!newIdentifiersList.contains(identifier)) {
        identifier.setVoided(true);
      }
    }
    patient.setBirthdate(shortPatient.getBirthdate());
    patient.setBirthdateEstimated(shortPatient.getBirthdateEstimated());
    patient.setGender(shortPatient.getGender());
    if (shortPatient.getTribe() == ""String_Node_Str"" || shortPatient.getTribe() == null)     patient.setTribe(null);
 else {
      Tribe t=ps.getTribe(Integer.valueOf(shortPatient.getTribe()));
      patient.setTribe(t);
    }
    patient.setDead(shortPatient.getDead());
    if (patient.isDead()) {
      patient.setDeathDate(shortPatient.getDeathDate());
      patient.setCauseOfDeath(shortPatient.getCauseOfDeath());
    }
 else {
      patient.setDeathDate(null);
      patient.setCauseOfDeath(null);
    }
    Patient newPatient=null;
    if (!isError) {
      try {
        newPatient=ps.savePatient(patient);
      }
 catch (      InvalidIdentifierFormatException iife) {
        log.error(iife);
        patient.removeIdentifier(iife.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      InvalidCheckDigitException icde) {
        log.error(icde);
        patient.removeIdentifier(icde.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      IdentifierNotUniqueException inue) {
        log.error(inue);
        patient.removeIdentifier(inue.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      DuplicateIdentifierException die) {
        log.error(die);
        patient.removeIdentifier(die.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      InsufficientIdentifiersException iie) {
        log.error(iie);
        patient.removeIdentifier(iie.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      PatientIdentifierException pie) {
        log.error(pie);
        patient.removeIdentifier(pie.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
      String[] personAs=request.getParameterValues(""String_Node_Str"");
      String[] types=request.getParameterValues(""String_Node_Str"");
      Person person=personService.getPerson(patient.getPatientId());
      List<Relationship> relationships;
      List<Person> newPersonAs=new Vector<Person>();
      if (person != null)       relationships=personService.getRelationshipsByPerson(person);
 else       relationships=new Vector<Relationship>();
      if (personAs != null) {
        for (int x=0; x < personAs.length; x++) {
          String personAString=personAs[x];
          String typeString=types[x];
          if (personAString != null && personAString.length() > 0 && typeString != null && typeString.length() > 0) {
            Person personA=personService.getPerson(Integer.valueOf(personAString));
            RelationshipType type=personService.getRelationshipType(Integer.valueOf(typeString));
            newPersonAs.add(personA);
            boolean found=false;
            for (            Relationship rel : relationships) {
              if (rel.getPersonA().equals(person))               found=true;
              if (rel.getPersonA().equals(personA)) {
                rel.setRelationshipType(type);
                found=true;
              }
            }
            if (!found) {
              Relationship r=new Relationship(personA,person,type);
              relationships.add(r);
            }
          }
        }
      }
      for (      Relationship rel : relationships) {
        if (newPersonAs.contains(rel.getPersonA()) || person.equals(rel.getPersonA()))         personService.saveRelationship(rel);
 else         personService.purgeRelationship(rel);
      }
      if (patient.getDead()) {
        log.debug(""String_Node_Str"");
        String codProp=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
        Concept causeOfDeath=Context.getConceptService().getConcept(codProp);
        if (causeOfDeath != null) {
          List<Obs> obssDeath=Context.getObsService().getObservationsByPersonAndConcept(patient,causeOfDeath);
          if (obssDeath != null) {
            if (obssDeath.size() > 1) {
              log.error(""String_Node_Str"" + obssDeath.size() + ""String_Node_Str"");
            }
 else {
              Obs obsDeath=null;
              if (obssDeath.size() == 1) {
                log.debug(""String_Node_Str"");
                obsDeath=obssDeath.iterator().next();
              }
 else {
                log.debug(""String_Node_Str"");
                obsDeath=new Obs();
                obsDeath.setPerson(patient);
                obsDeath.setConcept(causeOfDeath);
                Location loc=Context.getLocationService().getLocation(""String_Node_Str"");
                if (loc == null)                 loc=Context.getLocationService().getLocation(new Integer(1));
                if (loc != null)                 obsDeath.setLocation(loc);
 else                 log.error(""String_Node_Str"");
              }
              Concept currCause=patient.getCauseOfDeath();
              if (currCause == null) {
                log.debug(""String_Node_Str"");
                String noneConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                currCause=Context.getConceptService().getConcept(noneConcept);
              }
              if (currCause != null) {
                log.debug(""String_Node_Str"");
                obsDeath.setValueCoded(currCause);
                Date dateDeath=patient.getDeathDate();
                if (dateDeath == null)                 dateDeath=new Date();
                obsDeath.setObsDatetime(dateDeath);
                String otherConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                Concept conceptOther=Context.getConceptService().getConcept(otherConcept);
                if (conceptOther != null) {
                  if (conceptOther.equals(currCause)) {
                    String otherInfo=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
                    log.debug(""String_Node_Str"" + otherInfo);
                    obsDeath.setValueText(otherInfo);
                  }
 else {
                    log.debug(""String_Node_Str"");
                    obsDeath.setValueText(""String_Node_Str"");
                  }
                }
 else {
                  log.debug(""String_Node_Str"");
                  obsDeath.setValueText(""String_Node_Str"");
                }
                Context.getObsService().saveObs(obsDeath,null);
              }
 else {
                log.debug(""String_Node_Str"");
              }
            }
          }
        }
 else {
          log.debug(""String_Node_Str"");
        }
      }
    }
    if (isError || errors.hasErrors()) {
      log.error(""String_Node_Str"" + this.getFormView());
      Map<String,Object> model=new HashMap<String,Object>();
      model.put(getCommandName(),new ShortPatientModel(patient));
      return this.showForm(request,response,errors,model);
    }
 else {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      return new ModelAndView(new RedirectView(view + ""String_Node_Str"" + newPatient.getPatientId()));
    }
  }
 else {
    return new ModelAndView(new RedirectView(getFormView()));
  }
}","/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  log.debug(""String_Node_Str"");
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    PersonService personService=Context.getPersonService();
    ShortPatientModel shortPatient=(ShortPatientModel)obj;
    String view=getSuccessView();
    boolean isError=errors.hasErrors();
    String action=request.getParameter(""String_Node_Str"");
    MessageSourceAccessor msa=getMessageSourceAccessor();
    if (action != null && action.equals(msa.getMessage(""String_Node_Str""))) {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      return new ModelAndView(new RedirectView(""String_Node_Str""));
    }
    Patient patient=null;
    if (shortPatient.getPatientId() != null) {
      patient=ps.getPatient(shortPatient.getPatientId());
      if (patient == null) {
        try {
          Person p=personService.getPerson(shortPatient.getPatientId());
          patient=new Patient(p);
        }
 catch (        ObjectRetrievalFailureException noUserEx) {
        }
      }
    }
    if (patient == null)     patient=new Patient();
    boolean duplicate=false;
    PersonName newName=shortPatient.getName();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + newName.toString());
    for (    PersonName pn : patient.getNames()) {
      if (((pn.getGivenName() == null && newName.getGivenName() == null) || OpenmrsUtil.nullSafeEquals(pn.getGivenName(),newName.getGivenName())) && ((pn.getMiddleName() == null && newName.getMiddleName() == null) || OpenmrsUtil.nullSafeEquals(pn.getMiddleName(),newName.getMiddleName())) && ((pn.getFamilyName() == null && newName.getFamilyName() == null) || OpenmrsUtil.nullSafeEquals(pn.getFamilyName(),newName.getFamilyName())))       duplicate=true;
    }
    if (!duplicate) {
      if (patient.getPersonName() != null)       patient.getPersonName().setPreferred(false);
      newName.setPersonNameId(null);
      newName.setPreferred(true);
      patient.addName(newName);
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + shortPatient.getAddress());
    if (shortPatient.getAddress() != null && !shortPatient.getAddress().isBlank()) {
      duplicate=false;
      for (      PersonAddress pa : patient.getAddresses()) {
        if (pa.toString().equals(shortPatient.getAddress().toString()))         duplicate=true;
      }
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + duplicate);
      if (!duplicate) {
        PersonAddress newAddress=shortPatient.getAddress();
        newAddress.setPersonAddressId(null);
        newAddress.setPreferred(true);
        patient.addAddress(newAddress);
      }
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + patient.getAddresses());
    if (patient.getIdentifiers() == null)     patient.setIdentifiers(new TreeSet<PatientIdentifier>());
    for (    PatientIdentifier pi : patient.getIdentifiers()) {
      pi.setPreferred(pref.equals(pi.getIdentifier() + pi.getIdentifierType().getPatientIdentifierTypeId()));
    }
    for (    PersonAttributeType type : personService.getPersonAttributeTypes(PERSON_TYPE.PATIENT,ATTR_VIEW_TYPE.VIEWING)) {
      String value=request.getParameter(type.getPersonAttributeTypeId().toString());
      patient.addAttribute(new PersonAttribute(type,value));
    }
    for (    PatientIdentifier identifier : newIdentifiers) {
      identifier.setPatient(patient);
      for (      PatientIdentifier currentIdentifier : patient.getActiveIdentifiers()) {
        if (currentIdentifier.equals(identifier)) {
          patient.removeIdentifier(currentIdentifier);
          Context.evictFromSession(currentIdentifier);
        }
      }
    }
    patient.addIdentifiers(newIdentifiers);
    List<PatientIdentifier> newIdentifiersList=new Vector<PatientIdentifier>();
    newIdentifiersList.addAll(newIdentifiers);
    for (    PatientIdentifier identifier : patient.getIdentifiers()) {
      if (!newIdentifiersList.contains(identifier)) {
        identifier.setVoided(true);
      }
    }
    patient.setBirthdate(shortPatient.getBirthdate());
    patient.setBirthdateEstimated(shortPatient.getBirthdateEstimated());
    patient.setGender(shortPatient.getGender());
    if (shortPatient.getTribe() == ""String_Node_Str"" || shortPatient.getTribe() == null)     patient.setTribe(null);
 else {
      Tribe t=ps.getTribe(Integer.valueOf(shortPatient.getTribe()));
      patient.setTribe(t);
    }
    patient.setDead(shortPatient.getDead());
    if (patient.isDead()) {
      patient.setDeathDate(shortPatient.getDeathDate());
      patient.setCauseOfDeath(shortPatient.getCauseOfDeath());
    }
 else {
      patient.setDeathDate(null);
      patient.setCauseOfDeath(null);
    }
    Patient newPatient=null;
    if (!isError) {
      try {
        newPatient=ps.savePatient(patient);
      }
 catch (      InvalidIdentifierFormatException iife) {
        log.error(iife);
        patient.removeIdentifier(iife.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      InvalidCheckDigitException icde) {
        log.error(icde);
        patient.removeIdentifier(icde.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      IdentifierNotUniqueException inue) {
        log.error(inue);
        patient.removeIdentifier(inue.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      DuplicateIdentifierException die) {
        log.error(die);
        patient.removeIdentifier(die.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      InsufficientIdentifiersException iie) {
        log.error(iie);
        patient.removeIdentifier(iie.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      PatientIdentifierException pie) {
        log.error(pie);
        patient.removeIdentifier(pie.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
      String[] personAs=request.getParameterValues(""String_Node_Str"");
      String[] types=request.getParameterValues(""String_Node_Str"");
      Person person=personService.getPerson(patient.getPatientId());
      List<Relationship> relationships;
      List<Person> newPersonAs=new Vector<Person>();
      if (person != null)       relationships=personService.getRelationshipsByPerson(person);
 else       relationships=new Vector<Relationship>();
      if (personAs != null) {
        for (int x=0; x < personAs.length; x++) {
          String personAString=personAs[x];
          String typeString=types[x];
          if (personAString != null && personAString.length() > 0 && typeString != null && typeString.length() > 0) {
            Person personA=personService.getPerson(Integer.valueOf(personAString));
            RelationshipType type=personService.getRelationshipType(Integer.valueOf(typeString));
            newPersonAs.add(personA);
            boolean found=false;
            for (            Relationship rel : relationships) {
              if (rel.getPersonA().equals(person))               found=true;
              if (rel.getPersonA().equals(personA)) {
                rel.setRelationshipType(type);
                found=true;
              }
            }
            if (!found) {
              Relationship r=new Relationship(personA,person,type);
              relationships.add(r);
            }
          }
        }
      }
      for (      Relationship rel : relationships) {
        if (newPersonAs.contains(rel.getPersonA()) || person.equals(rel.getPersonA()))         personService.saveRelationship(rel);
 else         personService.purgeRelationship(rel);
      }
      if (patient.getDead()) {
        log.debug(""String_Node_Str"");
        String codProp=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
        Concept causeOfDeath=Context.getConceptService().getConcept(codProp);
        if (causeOfDeath != null) {
          List<Obs> obssDeath=Context.getObsService().getObservationsByPersonAndConcept(patient,causeOfDeath);
          if (obssDeath != null) {
            if (obssDeath.size() > 1) {
              log.error(""String_Node_Str"" + obssDeath.size() + ""String_Node_Str"");
            }
 else {
              Obs obsDeath=null;
              if (obssDeath.size() == 1) {
                log.debug(""String_Node_Str"");
                obsDeath=obssDeath.iterator().next();
              }
 else {
                log.debug(""String_Node_Str"");
                obsDeath=new Obs();
                obsDeath.setPerson(patient);
                obsDeath.setConcept(causeOfDeath);
                Location loc=Context.getLocationService().getLocation(""String_Node_Str"");
                if (loc == null)                 loc=Context.getLocationService().getLocation(new Integer(1));
                if (loc != null)                 obsDeath.setLocation(loc);
 else                 log.error(""String_Node_Str"");
              }
              Concept currCause=patient.getCauseOfDeath();
              if (currCause == null) {
                log.debug(""String_Node_Str"");
                String noneConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                currCause=Context.getConceptService().getConcept(noneConcept);
              }
              if (currCause != null) {
                log.debug(""String_Node_Str"");
                obsDeath.setValueCoded(currCause);
                Date dateDeath=patient.getDeathDate();
                if (dateDeath == null)                 dateDeath=new Date();
                obsDeath.setObsDatetime(dateDeath);
                String otherConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                Concept conceptOther=Context.getConceptService().getConcept(otherConcept);
                if (conceptOther != null) {
                  if (conceptOther.equals(currCause)) {
                    String otherInfo=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
                    log.debug(""String_Node_Str"" + otherInfo);
                    obsDeath.setValueText(otherInfo);
                  }
 else {
                    log.debug(""String_Node_Str"");
                    obsDeath.setValueText(""String_Node_Str"");
                  }
                }
 else {
                  log.debug(""String_Node_Str"");
                  obsDeath.setValueText(""String_Node_Str"");
                }
                Context.getObsService().saveObs(obsDeath,null);
              }
 else {
                log.debug(""String_Node_Str"");
              }
            }
          }
        }
 else {
          log.debug(""String_Node_Str"");
        }
      }
    }
    if (isError || errors.hasErrors()) {
      log.error(""String_Node_Str"" + this.getFormView());
      Map<String,Object> model=new HashMap<String,Object>();
      model.put(getCommandName(),new ShortPatientModel(patient));
      Context.evictFromSession(patient);
      return this.showForm(request,response,errors,model);
    }
 else {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      return new ModelAndView(new RedirectView(view + ""String_Node_Str"" + newPatient.getPatientId()));
    }
  }
 else {
    return new ModelAndView(new RedirectView(getFormView()));
  }
}"
84577,"/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  log.debug(""String_Node_Str"");
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    PersonService personService=Context.getPersonService();
    ShortPatientModel shortPatient=(ShortPatientModel)obj;
    String view=getSuccessView();
    boolean isError=false;
    String action=request.getParameter(""String_Node_Str"");
    MessageSourceAccessor msa=getMessageSourceAccessor();
    if (action != null && action.equals(msa.getMessage(""String_Node_Str""))) {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      return new ModelAndView(new RedirectView(""String_Node_Str""));
    }
    Patient patient=null;
    if (shortPatient.getPatientId() != null) {
      patient=ps.getPatient(shortPatient.getPatientId());
      if (patient == null) {
        try {
          Person p=personService.getPerson(shortPatient.getPatientId());
          patient=new Patient(p);
        }
 catch (        ObjectRetrievalFailureException noUserEx) {
        }
      }
    }
    if (patient == null)     patient=new Patient();
    boolean duplicate=false;
    PersonName newName=shortPatient.getName();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + newName.toString());
    for (    PersonName pn : patient.getNames()) {
      if (((pn.getGivenName() == null && newName.getGivenName() == null) || OpenmrsUtil.nullSafeEquals(pn.getGivenName(),newName.getGivenName())) && ((pn.getMiddleName() == null && newName.getMiddleName() == null) || OpenmrsUtil.nullSafeEquals(pn.getMiddleName(),newName.getMiddleName())) && ((pn.getFamilyName() == null && newName.getFamilyName() == null) || OpenmrsUtil.nullSafeEquals(pn.getFamilyName(),newName.getFamilyName())))       duplicate=true;
    }
    if (!duplicate) {
      if (patient.getPersonName() != null)       patient.getPersonName().setPreferred(false);
      newName.setPersonNameId(null);
      newName.setPreferred(true);
      patient.addName(newName);
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + shortPatient.getAddress());
    if (shortPatient.getAddress() != null && !shortPatient.getAddress().isBlank()) {
      duplicate=false;
      for (      PersonAddress pa : patient.getAddresses()) {
        if (pa.toString().equals(shortPatient.getAddress().toString()))         duplicate=true;
      }
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + duplicate);
      if (!duplicate) {
        PersonAddress newAddress=shortPatient.getAddress();
        newAddress.setPersonAddressId(null);
        newAddress.setPreferred(true);
        patient.addAddress(newAddress);
      }
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + patient.getAddresses());
    if (patient.getIdentifiers() == null)     patient.setIdentifiers(new TreeSet<PatientIdentifier>());
    for (    PatientIdentifier pi : patient.getIdentifiers()) {
      pi.setPreferred(pref.equals(pi.getIdentifier() + pi.getIdentifierType().getPatientIdentifierTypeId()));
    }
    for (    PersonAttributeType type : personService.getPersonAttributeTypes(PERSON_TYPE.PATIENT,ATTR_VIEW_TYPE.VIEWING)) {
      String value=request.getParameter(type.getPersonAttributeTypeId().toString());
      patient.addAttribute(new PersonAttribute(type,value));
    }
    for (    PatientIdentifier identifier : newIdentifiers) {
      identifier.setPatient(patient);
      for (      PatientIdentifier currentIdentifier : patient.getActiveIdentifiers()) {
        if (currentIdentifier.equals(identifier)) {
          patient.removeIdentifier(currentIdentifier);
          Context.evictFromSession(currentIdentifier);
        }
      }
    }
    patient.addIdentifiers(newIdentifiers);
    List<PatientIdentifier> newIdentifiersList=new Vector<PatientIdentifier>();
    newIdentifiersList.addAll(newIdentifiers);
    for (    PatientIdentifier identifier : patient.getIdentifiers()) {
      if (!newIdentifiersList.contains(identifier)) {
        identifier.setVoided(true);
      }
    }
    patient.setBirthdate(shortPatient.getBirthdate());
    patient.setBirthdateEstimated(shortPatient.getBirthdateEstimated());
    patient.setGender(shortPatient.getGender());
    if (shortPatient.getTribe() == ""String_Node_Str"" || shortPatient.getTribe() == null)     patient.setTribe(null);
 else {
      Tribe t=ps.getTribe(Integer.valueOf(shortPatient.getTribe()));
      patient.setTribe(t);
    }
    patient.setDead(shortPatient.getDead());
    if (patient.isDead()) {
      patient.setDeathDate(shortPatient.getDeathDate());
      patient.setCauseOfDeath(shortPatient.getCauseOfDeath());
    }
 else {
      patient.setDeathDate(null);
      patient.setCauseOfDeath(null);
    }
    Patient newPatient=null;
    try {
      newPatient=ps.savePatient(patient);
    }
 catch (    InvalidIdentifierFormatException iife) {
      log.error(iife);
      patient.removeIdentifier(iife.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    InvalidCheckDigitException icde) {
      log.error(icde);
      patient.removeIdentifier(icde.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    IdentifierNotUniqueException inue) {
      log.error(inue);
      patient.removeIdentifier(inue.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    DuplicateIdentifierException die) {
      log.error(die);
      patient.removeIdentifier(die.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    InsufficientIdentifiersException iie) {
      log.error(iie);
      patient.removeIdentifier(iie.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    PatientIdentifierException pie) {
      log.error(pie);
      patient.removeIdentifier(pie.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
    if (!isError) {
      String[] personAs=request.getParameterValues(""String_Node_Str"");
      String[] types=request.getParameterValues(""String_Node_Str"");
      Person person=personService.getPerson(patient.getPatientId());
      List<Relationship> relationships;
      List<Person> newPersonAs=new Vector<Person>();
      if (person != null)       relationships=personService.getRelationshipsByPerson(person);
 else       relationships=new Vector<Relationship>();
      if (personAs != null) {
        for (int x=0; x < personAs.length; x++) {
          String personAString=personAs[x];
          String typeString=types[x];
          if (personAString != null && personAString.length() > 0 && typeString != null && typeString.length() > 0) {
            Person personA=personService.getPerson(Integer.valueOf(personAString));
            RelationshipType type=personService.getRelationshipType(Integer.valueOf(typeString));
            newPersonAs.add(personA);
            boolean found=false;
            for (            Relationship rel : relationships) {
              if (rel.getPersonA().equals(person))               found=true;
              if (rel.getPersonA().equals(personA)) {
                rel.setRelationshipType(type);
                found=true;
              }
            }
            if (!found) {
              Relationship r=new Relationship(personA,person,type);
              relationships.add(r);
            }
          }
        }
      }
      for (      Relationship rel : relationships) {
        if (newPersonAs.contains(rel.getPersonA()) || person.equals(rel.getPersonA()))         personService.saveRelationship(rel);
 else         personService.purgeRelationship(rel);
      }
      if (patient.getDead()) {
        log.debug(""String_Node_Str"");
        String codProp=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
        Concept causeOfDeath=Context.getConceptService().getConcept(codProp);
        if (causeOfDeath != null) {
          List<Obs> obssDeath=Context.getObsService().getObservationsByPersonAndConcept(patient,causeOfDeath);
          if (obssDeath != null) {
            if (obssDeath.size() > 1) {
              log.error(""String_Node_Str"" + obssDeath.size() + ""String_Node_Str"");
            }
 else {
              Obs obsDeath=null;
              if (obssDeath.size() == 1) {
                log.debug(""String_Node_Str"");
                obsDeath=obssDeath.iterator().next();
              }
 else {
                log.debug(""String_Node_Str"");
                obsDeath=new Obs();
                obsDeath.setPerson(patient);
                obsDeath.setConcept(causeOfDeath);
                Location loc=Context.getLocationService().getLocation(""String_Node_Str"");
                if (loc == null)                 loc=Context.getLocationService().getLocation(new Integer(1));
                if (loc != null)                 obsDeath.setLocation(loc);
 else                 log.error(""String_Node_Str"");
              }
              Concept currCause=patient.getCauseOfDeath();
              if (currCause == null) {
                log.debug(""String_Node_Str"");
                String noneConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                currCause=Context.getConceptService().getConcept(noneConcept);
              }
              if (currCause != null) {
                log.debug(""String_Node_Str"");
                obsDeath.setValueCoded(currCause);
                Date dateDeath=patient.getDeathDate();
                if (dateDeath == null)                 dateDeath=new Date();
                obsDeath.setObsDatetime(dateDeath);
                String otherConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                Concept conceptOther=Context.getConceptService().getConcept(otherConcept);
                if (conceptOther != null) {
                  if (conceptOther.equals(currCause)) {
                    String otherInfo=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
                    log.debug(""String_Node_Str"" + otherInfo);
                    obsDeath.setValueText(otherInfo);
                  }
 else {
                    log.debug(""String_Node_Str"");
                    obsDeath.setValueText(""String_Node_Str"");
                  }
                }
 else {
                  log.debug(""String_Node_Str"");
                  obsDeath.setValueText(""String_Node_Str"");
                }
                Context.getObsService().saveObs(obsDeath,null);
              }
 else {
                log.debug(""String_Node_Str"");
              }
            }
          }
        }
 else {
          log.debug(""String_Node_Str"");
        }
      }
    }
    if (isError || errors.hasErrors()) {
      log.error(""String_Node_Str"" + this.getFormView());
      Map<String,Object> model=new HashMap<String,Object>();
      model.put(getCommandName(),new ShortPatientModel(patient));
      return this.showForm(request,response,errors,model);
    }
 else {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      return new ModelAndView(new RedirectView(view + ""String_Node_Str"" + newPatient.getPatientId()));
    }
  }
 else {
    return new ModelAndView(new RedirectView(getFormView()));
  }
}","/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  log.debug(""String_Node_Str"");
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    PersonService personService=Context.getPersonService();
    ShortPatientModel shortPatient=(ShortPatientModel)obj;
    String view=getSuccessView();
    boolean isError=errors.hasErrors();
    String action=request.getParameter(""String_Node_Str"");
    MessageSourceAccessor msa=getMessageSourceAccessor();
    if (action != null && action.equals(msa.getMessage(""String_Node_Str""))) {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      return new ModelAndView(new RedirectView(""String_Node_Str""));
    }
    Patient patient=null;
    if (shortPatient.getPatientId() != null) {
      patient=ps.getPatient(shortPatient.getPatientId());
      if (patient == null) {
        try {
          Person p=personService.getPerson(shortPatient.getPatientId());
          patient=new Patient(p);
        }
 catch (        ObjectRetrievalFailureException noUserEx) {
        }
      }
    }
    if (patient == null)     patient=new Patient();
    boolean duplicate=false;
    PersonName newName=shortPatient.getName();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + newName.toString());
    for (    PersonName pn : patient.getNames()) {
      if (((pn.getGivenName() == null && newName.getGivenName() == null) || OpenmrsUtil.nullSafeEquals(pn.getGivenName(),newName.getGivenName())) && ((pn.getMiddleName() == null && newName.getMiddleName() == null) || OpenmrsUtil.nullSafeEquals(pn.getMiddleName(),newName.getMiddleName())) && ((pn.getFamilyName() == null && newName.getFamilyName() == null) || OpenmrsUtil.nullSafeEquals(pn.getFamilyName(),newName.getFamilyName())))       duplicate=true;
    }
    if (!duplicate) {
      if (patient.getPersonName() != null)       patient.getPersonName().setPreferred(false);
      newName.setPersonNameId(null);
      newName.setPreferred(true);
      patient.addName(newName);
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + shortPatient.getAddress());
    if (shortPatient.getAddress() != null && !shortPatient.getAddress().isBlank()) {
      duplicate=false;
      for (      PersonAddress pa : patient.getAddresses()) {
        if (pa.toString().equals(shortPatient.getAddress().toString()))         duplicate=true;
      }
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + duplicate);
      if (!duplicate) {
        PersonAddress newAddress=shortPatient.getAddress();
        newAddress.setPersonAddressId(null);
        newAddress.setPreferred(true);
        patient.addAddress(newAddress);
      }
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + patient.getAddresses());
    if (patient.getIdentifiers() == null)     patient.setIdentifiers(new TreeSet<PatientIdentifier>());
    for (    PatientIdentifier pi : patient.getIdentifiers()) {
      pi.setPreferred(pref.equals(pi.getIdentifier() + pi.getIdentifierType().getPatientIdentifierTypeId()));
    }
    for (    PersonAttributeType type : personService.getPersonAttributeTypes(PERSON_TYPE.PATIENT,ATTR_VIEW_TYPE.VIEWING)) {
      String value=request.getParameter(type.getPersonAttributeTypeId().toString());
      patient.addAttribute(new PersonAttribute(type,value));
    }
    for (    PatientIdentifier identifier : newIdentifiers) {
      identifier.setPatient(patient);
      for (      PatientIdentifier currentIdentifier : patient.getActiveIdentifiers()) {
        if (currentIdentifier.equals(identifier)) {
          patient.removeIdentifier(currentIdentifier);
          Context.evictFromSession(currentIdentifier);
        }
      }
    }
    patient.addIdentifiers(newIdentifiers);
    List<PatientIdentifier> newIdentifiersList=new Vector<PatientIdentifier>();
    newIdentifiersList.addAll(newIdentifiers);
    for (    PatientIdentifier identifier : patient.getIdentifiers()) {
      if (!newIdentifiersList.contains(identifier)) {
        identifier.setVoided(true);
      }
    }
    patient.setBirthdate(shortPatient.getBirthdate());
    patient.setBirthdateEstimated(shortPatient.getBirthdateEstimated());
    patient.setGender(shortPatient.getGender());
    if (shortPatient.getTribe() == ""String_Node_Str"" || shortPatient.getTribe() == null)     patient.setTribe(null);
 else {
      Tribe t=ps.getTribe(Integer.valueOf(shortPatient.getTribe()));
      patient.setTribe(t);
    }
    patient.setDead(shortPatient.getDead());
    if (patient.isDead()) {
      patient.setDeathDate(shortPatient.getDeathDate());
      patient.setCauseOfDeath(shortPatient.getCauseOfDeath());
    }
 else {
      patient.setDeathDate(null);
      patient.setCauseOfDeath(null);
    }
    Patient newPatient=null;
    if (!isError) {
      try {
        newPatient=ps.savePatient(patient);
      }
 catch (      InvalidIdentifierFormatException iife) {
        log.error(iife);
        patient.removeIdentifier(iife.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      InvalidCheckDigitException icde) {
        log.error(icde);
        patient.removeIdentifier(icde.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      IdentifierNotUniqueException inue) {
        log.error(inue);
        patient.removeIdentifier(inue.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      DuplicateIdentifierException die) {
        log.error(die);
        patient.removeIdentifier(die.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      InsufficientIdentifiersException iie) {
        log.error(iie);
        patient.removeIdentifier(iie.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
catch (      PatientIdentifierException pie) {
        log.error(pie);
        patient.removeIdentifier(pie.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        isError=true;
      }
      String[] personAs=request.getParameterValues(""String_Node_Str"");
      String[] types=request.getParameterValues(""String_Node_Str"");
      Person person=personService.getPerson(patient.getPatientId());
      List<Relationship> relationships;
      List<Person> newPersonAs=new Vector<Person>();
      if (person != null)       relationships=personService.getRelationshipsByPerson(person);
 else       relationships=new Vector<Relationship>();
      if (personAs != null) {
        for (int x=0; x < personAs.length; x++) {
          String personAString=personAs[x];
          String typeString=types[x];
          if (personAString != null && personAString.length() > 0 && typeString != null && typeString.length() > 0) {
            Person personA=personService.getPerson(Integer.valueOf(personAString));
            RelationshipType type=personService.getRelationshipType(Integer.valueOf(typeString));
            newPersonAs.add(personA);
            boolean found=false;
            for (            Relationship rel : relationships) {
              if (rel.getPersonA().equals(person))               found=true;
              if (rel.getPersonA().equals(personA)) {
                rel.setRelationshipType(type);
                found=true;
              }
            }
            if (!found) {
              Relationship r=new Relationship(personA,person,type);
              relationships.add(r);
            }
          }
        }
      }
      for (      Relationship rel : relationships) {
        if (newPersonAs.contains(rel.getPersonA()) || person.equals(rel.getPersonA()))         personService.saveRelationship(rel);
 else         personService.purgeRelationship(rel);
      }
      if (patient.getDead()) {
        log.debug(""String_Node_Str"");
        String codProp=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
        Concept causeOfDeath=Context.getConceptService().getConcept(codProp);
        if (causeOfDeath != null) {
          List<Obs> obssDeath=Context.getObsService().getObservationsByPersonAndConcept(patient,causeOfDeath);
          if (obssDeath != null) {
            if (obssDeath.size() > 1) {
              log.error(""String_Node_Str"" + obssDeath.size() + ""String_Node_Str"");
            }
 else {
              Obs obsDeath=null;
              if (obssDeath.size() == 1) {
                log.debug(""String_Node_Str"");
                obsDeath=obssDeath.iterator().next();
              }
 else {
                log.debug(""String_Node_Str"");
                obsDeath=new Obs();
                obsDeath.setPerson(patient);
                obsDeath.setConcept(causeOfDeath);
                Location loc=Context.getLocationService().getLocation(""String_Node_Str"");
                if (loc == null)                 loc=Context.getLocationService().getLocation(new Integer(1));
                if (loc != null)                 obsDeath.setLocation(loc);
 else                 log.error(""String_Node_Str"");
              }
              Concept currCause=patient.getCauseOfDeath();
              if (currCause == null) {
                log.debug(""String_Node_Str"");
                String noneConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                currCause=Context.getConceptService().getConcept(noneConcept);
              }
              if (currCause != null) {
                log.debug(""String_Node_Str"");
                obsDeath.setValueCoded(currCause);
                Date dateDeath=patient.getDeathDate();
                if (dateDeath == null)                 dateDeath=new Date();
                obsDeath.setObsDatetime(dateDeath);
                String otherConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                Concept conceptOther=Context.getConceptService().getConcept(otherConcept);
                if (conceptOther != null) {
                  if (conceptOther.equals(currCause)) {
                    String otherInfo=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
                    log.debug(""String_Node_Str"" + otherInfo);
                    obsDeath.setValueText(otherInfo);
                  }
 else {
                    log.debug(""String_Node_Str"");
                    obsDeath.setValueText(""String_Node_Str"");
                  }
                }
 else {
                  log.debug(""String_Node_Str"");
                  obsDeath.setValueText(""String_Node_Str"");
                }
                Context.getObsService().saveObs(obsDeath,null);
              }
 else {
                log.debug(""String_Node_Str"");
              }
            }
          }
        }
 else {
          log.debug(""String_Node_Str"");
        }
      }
    }
    if (isError || errors.hasErrors()) {
      log.error(""String_Node_Str"" + this.getFormView());
      Map<String,Object> model=new HashMap<String,Object>();
      model.put(getCommandName(),new ShortPatientModel(patient));
      return this.showForm(request,response,errors,model);
    }
 else {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      return new ModelAndView(new RedirectView(view + ""String_Node_Str"" + newPatient.getPatientId()));
    }
  }
 else {
    return new ModelAndView(new RedirectView(getFormView()));
  }
}"
84578,"/** 
 * @see org.openmrs.api.PatientService#checkPatientIdentifiers(org.openmrs.Patient)
 */
public void checkPatientIdentifiers(Patient patient) throws PatientIdentifierException {
  if (patient.getIdentifiers().size() < 1)   throw new InsufficientIdentifiersException(""String_Node_Str"");
  List<PatientIdentifier> identifiers=new Vector<PatientIdentifier>();
  identifiers.addAll(patient.getIdentifiers());
  List<String> identifiersUsed=new Vector<String>();
  List<PatientIdentifierType> requiredTypes=getPatientIdentifierTypes(null,null,true,null);
  if (requiredTypes == null)   requiredTypes=new ArrayList<PatientIdentifierType>();
  List<PatientIdentifierType> foundRequiredTypes=new ArrayList<PatientIdentifierType>();
  for (  PatientIdentifier pi : identifiers) {
    if (pi.isVoided())     continue;
    try {
      checkPatientIdentifier(pi);
    }
 catch (    BlankIdentifierException bie) {
      patient.removeIdentifier(pi);
      throw bie;
    }
    for (    PatientIdentifierType requiredType : requiredTypes) {
      if (pi.getIdentifierType().equals(requiredType)) {
        foundRequiredTypes.add(requiredType);
        requiredTypes.remove(requiredType);
        break;
      }
    }
    if (identifiersUsed.contains(pi.getIdentifier())) {
      patient.removeIdentifier(pi);
      throw new DuplicateIdentifierException(""String_Node_Str"" + pi.getIdentifierType().getName() + ""String_Node_Str""+ pi.getIdentifier()+ ""String_Node_Str"",pi);
    }
 else     identifiersUsed.add(pi.getIdentifier());
  }
  if (requiredTypes.size() > 0) {
    String missingNames=""String_Node_Str"";
    for (    PatientIdentifierType pit : requiredTypes) {
      missingNames+=(missingNames.length() > 0) ? ""String_Node_Str"" + pit.getName() : pit.getName();
    }
    throw new MissingRequiredIdentifierException(""String_Node_Str"" + missingNames);
  }
}","/** 
 * @see org.openmrs.api.PatientService#checkPatientIdentifiers(org.openmrs.Patient)
 */
public void checkPatientIdentifiers(Patient patient) throws PatientIdentifierException {
  if (patient.getIdentifiers().size() < 1)   throw new InsufficientIdentifiersException(""String_Node_Str"");
  List<PatientIdentifier> identifiers=new Vector<PatientIdentifier>();
  identifiers.addAll(patient.getIdentifiers());
  List<String> identifiersUsed=new Vector<String>();
  List<PatientIdentifierType> requiredTypes=getPatientIdentifierTypes(null,null,true,null);
  if (requiredTypes == null)   requiredTypes=new ArrayList<PatientIdentifierType>();
  List<PatientIdentifierType> foundRequiredTypes=new ArrayList<PatientIdentifierType>();
  for (  PatientIdentifier pi : identifiers) {
    if (pi.isVoided())     continue;
    try {
      checkPatientIdentifier(pi);
    }
 catch (    BlankIdentifierException bie) {
      patient.removeIdentifier(pi);
      throw bie;
    }
    for (    PatientIdentifierType requiredType : requiredTypes) {
      if (pi.getIdentifierType().equals(requiredType)) {
        foundRequiredTypes.add(requiredType);
        requiredTypes.remove(requiredType);
        break;
      }
    }
    if (identifiersUsed.contains(pi.getIdentifier() + ""String_Node_Str"" + pi.getIdentifierType().getPatientIdentifierTypeId())) {
      patient.removeIdentifier(pi);
      throw new DuplicateIdentifierException(""String_Node_Str"" + pi.getIdentifierType().getName() + ""String_Node_Str""+ pi.getIdentifier()+ ""String_Node_Str"",pi);
    }
 else {
      identifiersUsed.add(pi.getIdentifier() + ""String_Node_Str"" + pi.getIdentifierType().getPatientIdentifierTypeId());
    }
  }
  if (requiredTypes.size() > 0) {
    String missingNames=""String_Node_Str"";
    for (    PatientIdentifierType pit : requiredTypes) {
      missingNames+=(missingNames.length() > 0) ? ""String_Node_Str"" + pit.getName() : pit.getName();
    }
    throw new MissingRequiredIdentifierException(""String_Node_Str"" + missingNames);
  }
}"
84579,"protected ModelAndView processFormSubmission(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  newIdentifiers=new HashSet<PatientIdentifier>();
  ShortPatientModel shortPatient=(ShortPatientModel)obj;
  log.debug(""String_Node_Str"");
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String action=request.getParameter(""String_Node_Str"");
    if (action == null || action.equals(msa.getMessage(""String_Node_Str""))) {
      ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
      String[] identifiers=request.getParameterValues(""String_Node_Str"");
      String[] types=request.getParameterValues(""String_Node_Str"");
      String[] locs=request.getParameterValues(""String_Node_Str"");
      pref=request.getParameter(""String_Node_Str"");
      if (pref == null)       pref=""String_Node_Str"";
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + identifiers);
        for (        String s : identifiers)         log.debug(s);
        log.debug(""String_Node_Str"" + types);
        for (        String s : types)         log.debug(s);
        log.debug(""String_Node_Str"" + locs);
        for (        String s : locs)         log.debug(s);
        log.debug(""String_Node_Str"" + pref);
      }
      if (identifiers != null) {
        for (int i=0; i < identifiers.length; i++) {
          String id=identifiers[i].trim();
          String[] args={id};
          if (id.length() > 0) {
            PatientIdentifierType pit=null;
            if (types[i] == null || types[i].equals(""String_Node_Str"")) {
              String msg=getMessageSourceAccessor().getMessage(""String_Node_Str"",args);
              errors.reject(msg);
            }
 else             pit=ps.getPatientIdentifierType(Integer.valueOf(types[i]));
            Location loc=null;
            if (locs[i] == null || locs[i].equals(""String_Node_Str"")) {
              String msg=getMessageSourceAccessor().getMessage(""String_Node_Str"",args);
              errors.reject(msg);
            }
 else             loc=Context.getLocationService().getLocation(Integer.valueOf(locs[i]));
            PatientIdentifier pi=new PatientIdentifier(id,pit,loc);
            pi.setPreferred(pref.equals(id + types[i]));
            if (newIdentifiers.contains(pi))             newIdentifiers.remove(pi);
            newIdentifiers.add(pi);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + id);
              log.debug(""String_Node_Str"" + types[i]);
              log.debug(""String_Node_Str"" + locs[i]);
            }
          }
        }
      }
    }
    ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
    if (shortPatient.getBirthdate() != null) {
      if (shortPatient.getBirthdate().after(new Date()))       errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
 else {
        Calendar c=Calendar.getInstance();
        c.setTime(new Date());
        c.add(Calendar.YEAR,-120);
        if (shortPatient.getBirthdate().before(c.getTime())) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
  }
  return super.processFormSubmission(request,response,shortPatient,errors);
}","protected ModelAndView processFormSubmission(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  newIdentifiers=new HashSet<PatientIdentifier>();
  ShortPatientModel shortPatient=(ShortPatientModel)obj;
  log.debug(""String_Node_Str"");
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String action=request.getParameter(""String_Node_Str"");
    if (action == null || action.equals(msa.getMessage(""String_Node_Str""))) {
      ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
      String[] identifiers=request.getParameterValues(""String_Node_Str"");
      String[] types=request.getParameterValues(""String_Node_Str"");
      String[] locs=request.getParameterValues(""String_Node_Str"");
      pref=request.getParameter(""String_Node_Str"");
      if (pref == null)       pref=""String_Node_Str"";
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + identifiers);
        for (        String s : identifiers)         log.debug(s);
        log.debug(""String_Node_Str"" + types);
        for (        String s : types)         log.debug(s);
        log.debug(""String_Node_Str"" + locs);
        for (        String s : locs)         log.debug(s);
        log.debug(""String_Node_Str"" + pref);
      }
      if (identifiers != null) {
        for (int i=0; i < identifiers.length; i++) {
          String id=identifiers[i].trim();
          String[] args={id};
          if (id.length() > 0) {
            PatientIdentifierType pit=null;
            if (types[i] == null || types[i].equals(""String_Node_Str"")) {
              String msg=getMessageSourceAccessor().getMessage(""String_Node_Str"",args);
              errors.reject(msg);
            }
 else             pit=ps.getPatientIdentifierType(Integer.valueOf(types[i]));
            Location loc=null;
            if (locs[i] == null || locs[i].equals(""String_Node_Str"")) {
              String msg=getMessageSourceAccessor().getMessage(""String_Node_Str"",args);
              errors.reject(msg);
            }
 else             loc=Context.getLocationService().getLocation(Integer.valueOf(locs[i]));
            PatientIdentifier pi=new PatientIdentifier(id,pit,loc);
            pi.setPreferred(pref.equals(id + types[i]));
            if (newIdentifiers.contains(pi))             newIdentifiers.remove(pi);
            newIdentifiers.add(pi);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + id);
              log.debug(""String_Node_Str"" + types[i]);
              log.debug(""String_Node_Str"" + locs[i]);
            }
          }
        }
      }
    }
    ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
    if (shortPatient.getBirthdate() != null) {
      if (shortPatient.getBirthdate().after(new Date()))       errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
 else {
        Calendar c=Calendar.getInstance();
        c.setTime(new Date());
        c.add(Calendar.YEAR,-120);
        if (shortPatient.getBirthdate().before(c.getTime())) {
          errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
  }
  return onSubmit(request,response,shortPatient,errors);
}"
84580,"/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  log.debug(""String_Node_Str"");
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    PersonService personService=Context.getPersonService();
    ShortPatientModel shortPatient=(ShortPatientModel)obj;
    String view=getSuccessView();
    boolean isError=false;
    String action=request.getParameter(""String_Node_Str"");
    MessageSourceAccessor msa=getMessageSourceAccessor();
    if (action != null && action.equals(msa.getMessage(""String_Node_Str""))) {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      return new ModelAndView(new RedirectView(""String_Node_Str""));
    }
    Patient patient=null;
    if (shortPatient.getPatientId() != null) {
      patient=ps.getPatient(shortPatient.getPatientId());
      if (patient == null) {
        try {
          Person p=personService.getPerson(shortPatient.getPatientId());
          patient=new Patient(p);
        }
 catch (        ObjectRetrievalFailureException noUserEx) {
        }
      }
    }
    if (patient == null)     patient=new Patient();
    boolean duplicate=false;
    PersonName newName=shortPatient.getName();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + newName.toString());
    for (    PersonName pn : patient.getNames()) {
      if (((pn.getGivenName() == null && newName.getGivenName() == null) || OpenmrsUtil.nullSafeEquals(pn.getGivenName(),newName.getGivenName())) && ((pn.getMiddleName() == null && newName.getMiddleName() == null) || OpenmrsUtil.nullSafeEquals(pn.getMiddleName(),newName.getMiddleName())) && ((pn.getFamilyName() == null && newName.getFamilyName() == null) || OpenmrsUtil.nullSafeEquals(pn.getFamilyName(),newName.getFamilyName())))       duplicate=true;
    }
    if (!duplicate) {
      if (patient.getPersonName() != null)       patient.getPersonName().setPreferred(false);
      newName.setPersonNameId(null);
      newName.setPreferred(true);
      patient.addName(newName);
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + shortPatient.getAddress());
    if (shortPatient.getAddress() != null && !shortPatient.getAddress().isBlank()) {
      duplicate=false;
      for (      PersonAddress pa : patient.getAddresses()) {
        if (pa.toString().equals(shortPatient.getAddress().toString()))         duplicate=true;
      }
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + duplicate);
      if (!duplicate) {
        PersonAddress newAddress=shortPatient.getAddress();
        newAddress.setPersonAddressId(null);
        newAddress.setPreferred(true);
        patient.addAddress(newAddress);
      }
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + patient.getAddresses());
    if (patient.getIdentifiers() == null)     patient.setIdentifiers(new TreeSet<PatientIdentifier>());
    for (    PatientIdentifier pi : patient.getIdentifiers()) {
      pi.setPreferred(pref.equals(pi.getIdentifier() + pi.getIdentifierType().getPatientIdentifierTypeId()));
    }
    for (    PersonAttributeType type : personService.getPersonAttributeTypes(PERSON_TYPE.PATIENT,ATTR_VIEW_TYPE.VIEWING)) {
      String value=request.getParameter(type.getPersonAttributeTypeId().toString());
      patient.addAttribute(new PersonAttribute(type,value));
    }
    for (    PatientIdentifier identifier : newIdentifiers) {
      identifier.setPatient(patient);
      for (      PatientIdentifier currentIdentifier : patient.getActiveIdentifiers()) {
        if (currentIdentifier.equals(identifier)) {
          patient.removeIdentifier(currentIdentifier);
          Context.evictFromSession(currentIdentifier);
        }
      }
    }
    patient.addIdentifiers(newIdentifiers);
    List<PatientIdentifier> newIdentifiersList=new Vector<PatientIdentifier>();
    newIdentifiersList.addAll(newIdentifiers);
    for (    PatientIdentifier identifier : patient.getIdentifiers()) {
      if (!newIdentifiersList.contains(identifier)) {
        identifier.setVoided(true);
      }
    }
    patient.setBirthdate(shortPatient.getBirthdate());
    patient.setBirthdateEstimated(shortPatient.getBirthdateEstimated());
    patient.setGender(shortPatient.getGender());
    if (shortPatient.getTribe() == ""String_Node_Str"" || shortPatient.getTribe() == null)     patient.setTribe(null);
 else {
      Tribe t=ps.getTribe(Integer.valueOf(shortPatient.getTribe()));
      patient.setTribe(t);
    }
    patient.setDead(shortPatient.getDead());
    if (patient.isDead()) {
      patient.setDeathDate(shortPatient.getDeathDate());
      patient.setCauseOfDeath(shortPatient.getCauseOfDeath());
    }
 else {
      patient.setDeathDate(null);
      patient.setCauseOfDeath(null);
    }
    Patient newPatient=null;
    try {
      newPatient=ps.savePatient(patient);
    }
 catch (    InvalidIdentifierFormatException iife) {
      log.error(iife);
      patient.removeIdentifier(iife.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    InvalidCheckDigitException icde) {
      log.error(icde);
      patient.removeIdentifier(icde.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    IdentifierNotUniqueException inue) {
      log.error(inue);
      patient.removeIdentifier(inue.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    DuplicateIdentifierException die) {
      log.error(die);
      patient.removeIdentifier(die.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    InsufficientIdentifiersException iie) {
      log.error(iie);
      patient.removeIdentifier(iie.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    PatientIdentifierException pie) {
      log.error(pie);
      patient.removeIdentifier(pie.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
    if (!isError) {
      String[] personAs=request.getParameterValues(""String_Node_Str"");
      String[] types=request.getParameterValues(""String_Node_Str"");
      Person person=personService.getPerson(patient.getPatientId());
      List<Relationship> relationships;
      List<Person> newPersonAs=new Vector<Person>();
      if (person != null)       relationships=personService.getRelationshipsByPerson(person);
 else       relationships=new Vector<Relationship>();
      if (personAs != null) {
        for (int x=0; x < personAs.length; x++) {
          String personAString=personAs[x];
          String typeString=types[x];
          if (personAString != null && personAString.length() > 0 && typeString != null && typeString.length() > 0) {
            Person personA=personService.getPerson(Integer.valueOf(personAString));
            RelationshipType type=personService.getRelationshipType(Integer.valueOf(typeString));
            newPersonAs.add(personA);
            boolean found=false;
            for (            Relationship rel : relationships) {
              if (rel.getPersonA().equals(person))               found=true;
              if (rel.getPersonA().equals(personA)) {
                rel.setRelationshipType(type);
                found=true;
              }
            }
            if (!found) {
              Relationship r=new Relationship(personA,person,type);
              relationships.add(r);
            }
          }
        }
      }
      for (      Relationship rel : relationships) {
        if (newPersonAs.contains(rel.getPersonA()) || person.equals(rel.getPersonA()))         personService.saveRelationship(rel);
 else         personService.purgeRelationship(rel);
      }
      if (patient.getDead()) {
        log.debug(""String_Node_Str"");
        String codProp=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
        Concept causeOfDeath=Context.getConceptService().getConcept(codProp);
        if (causeOfDeath != null) {
          List<Obs> obssDeath=Context.getObsService().getObservationsByPersonAndConcept(patient,causeOfDeath);
          if (obssDeath != null) {
            if (obssDeath.size() > 1) {
              log.error(""String_Node_Str"" + obssDeath.size() + ""String_Node_Str"");
            }
 else {
              Obs obsDeath=null;
              if (obssDeath.size() == 1) {
                log.debug(""String_Node_Str"");
                obsDeath=obssDeath.iterator().next();
              }
 else {
                log.debug(""String_Node_Str"");
                obsDeath=new Obs();
                obsDeath.setPerson(patient);
                obsDeath.setConcept(causeOfDeath);
                Location loc=Context.getLocationService().getLocation(""String_Node_Str"");
                if (loc == null)                 loc=Context.getLocationService().getLocation(new Integer(1));
                if (loc != null)                 obsDeath.setLocation(loc);
 else                 log.error(""String_Node_Str"");
              }
              Concept currCause=patient.getCauseOfDeath();
              if (currCause == null) {
                log.debug(""String_Node_Str"");
                String noneConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                currCause=Context.getConceptService().getConcept(noneConcept);
              }
              if (currCause != null) {
                log.debug(""String_Node_Str"");
                obsDeath.setValueCoded(currCause);
                Date dateDeath=patient.getDeathDate();
                if (dateDeath == null)                 dateDeath=new Date();
                obsDeath.setObsDatetime(dateDeath);
                String otherConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                Concept conceptOther=Context.getConceptService().getConcept(otherConcept);
                if (conceptOther != null) {
                  if (conceptOther.equals(currCause)) {
                    String otherInfo=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
                    log.debug(""String_Node_Str"" + otherInfo);
                    obsDeath.setValueText(otherInfo);
                  }
 else {
                    log.debug(""String_Node_Str"");
                    obsDeath.setValueText(""String_Node_Str"");
                  }
                }
 else {
                  log.debug(""String_Node_Str"");
                  obsDeath.setValueText(""String_Node_Str"");
                }
                Context.getObsService().saveObs(obsDeath,null);
              }
 else {
                log.debug(""String_Node_Str"");
              }
            }
          }
        }
 else {
          log.debug(""String_Node_Str"");
        }
      }
    }
    if (isError) {
      log.error(""String_Node_Str"" + this.getFormView());
      Map<String,Object> model=new HashMap<String,Object>();
      model.put(getCommandName(),new ShortPatientModel(patient));
      return this.showForm(request,response,errors,model);
    }
 else {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      return new ModelAndView(new RedirectView(view + ""String_Node_Str"" + newPatient.getPatientId()));
    }
  }
 else {
    return new ModelAndView(new RedirectView(getFormView()));
  }
}","/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  log.debug(""String_Node_Str"");
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    PersonService personService=Context.getPersonService();
    ShortPatientModel shortPatient=(ShortPatientModel)obj;
    String view=getSuccessView();
    boolean isError=false;
    String action=request.getParameter(""String_Node_Str"");
    MessageSourceAccessor msa=getMessageSourceAccessor();
    if (action != null && action.equals(msa.getMessage(""String_Node_Str""))) {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      return new ModelAndView(new RedirectView(""String_Node_Str""));
    }
    Patient patient=null;
    if (shortPatient.getPatientId() != null) {
      patient=ps.getPatient(shortPatient.getPatientId());
      if (patient == null) {
        try {
          Person p=personService.getPerson(shortPatient.getPatientId());
          patient=new Patient(p);
        }
 catch (        ObjectRetrievalFailureException noUserEx) {
        }
      }
    }
    if (patient == null)     patient=new Patient();
    boolean duplicate=false;
    PersonName newName=shortPatient.getName();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + newName.toString());
    for (    PersonName pn : patient.getNames()) {
      if (((pn.getGivenName() == null && newName.getGivenName() == null) || OpenmrsUtil.nullSafeEquals(pn.getGivenName(),newName.getGivenName())) && ((pn.getMiddleName() == null && newName.getMiddleName() == null) || OpenmrsUtil.nullSafeEquals(pn.getMiddleName(),newName.getMiddleName())) && ((pn.getFamilyName() == null && newName.getFamilyName() == null) || OpenmrsUtil.nullSafeEquals(pn.getFamilyName(),newName.getFamilyName())))       duplicate=true;
    }
    if (!duplicate) {
      if (patient.getPersonName() != null)       patient.getPersonName().setPreferred(false);
      newName.setPersonNameId(null);
      newName.setPreferred(true);
      patient.addName(newName);
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + shortPatient.getAddress());
    if (shortPatient.getAddress() != null && !shortPatient.getAddress().isBlank()) {
      duplicate=false;
      for (      PersonAddress pa : patient.getAddresses()) {
        if (pa.toString().equals(shortPatient.getAddress().toString()))         duplicate=true;
      }
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + duplicate);
      if (!duplicate) {
        PersonAddress newAddress=shortPatient.getAddress();
        newAddress.setPersonAddressId(null);
        newAddress.setPreferred(true);
        patient.addAddress(newAddress);
      }
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + patient.getAddresses());
    if (patient.getIdentifiers() == null)     patient.setIdentifiers(new TreeSet<PatientIdentifier>());
    for (    PatientIdentifier pi : patient.getIdentifiers()) {
      pi.setPreferred(pref.equals(pi.getIdentifier() + pi.getIdentifierType().getPatientIdentifierTypeId()));
    }
    for (    PersonAttributeType type : personService.getPersonAttributeTypes(PERSON_TYPE.PATIENT,ATTR_VIEW_TYPE.VIEWING)) {
      String value=request.getParameter(type.getPersonAttributeTypeId().toString());
      patient.addAttribute(new PersonAttribute(type,value));
    }
    for (    PatientIdentifier identifier : newIdentifiers) {
      identifier.setPatient(patient);
      for (      PatientIdentifier currentIdentifier : patient.getActiveIdentifiers()) {
        if (currentIdentifier.equals(identifier)) {
          patient.removeIdentifier(currentIdentifier);
          Context.evictFromSession(currentIdentifier);
        }
      }
    }
    patient.addIdentifiers(newIdentifiers);
    List<PatientIdentifier> newIdentifiersList=new Vector<PatientIdentifier>();
    newIdentifiersList.addAll(newIdentifiers);
    for (    PatientIdentifier identifier : patient.getIdentifiers()) {
      if (!newIdentifiersList.contains(identifier)) {
        identifier.setVoided(true);
      }
    }
    patient.setBirthdate(shortPatient.getBirthdate());
    patient.setBirthdateEstimated(shortPatient.getBirthdateEstimated());
    patient.setGender(shortPatient.getGender());
    if (shortPatient.getTribe() == ""String_Node_Str"" || shortPatient.getTribe() == null)     patient.setTribe(null);
 else {
      Tribe t=ps.getTribe(Integer.valueOf(shortPatient.getTribe()));
      patient.setTribe(t);
    }
    patient.setDead(shortPatient.getDead());
    if (patient.isDead()) {
      patient.setDeathDate(shortPatient.getDeathDate());
      patient.setCauseOfDeath(shortPatient.getCauseOfDeath());
    }
 else {
      patient.setDeathDate(null);
      patient.setCauseOfDeath(null);
    }
    Patient newPatient=null;
    try {
      newPatient=ps.savePatient(patient);
    }
 catch (    InvalidIdentifierFormatException iife) {
      log.error(iife);
      patient.removeIdentifier(iife.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    InvalidCheckDigitException icde) {
      log.error(icde);
      patient.removeIdentifier(icde.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    IdentifierNotUniqueException inue) {
      log.error(inue);
      patient.removeIdentifier(inue.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    DuplicateIdentifierException die) {
      log.error(die);
      patient.removeIdentifier(die.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    InsufficientIdentifiersException iie) {
      log.error(iie);
      patient.removeIdentifier(iie.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
catch (    PatientIdentifierException pie) {
      log.error(pie);
      patient.removeIdentifier(pie.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
      isError=true;
    }
    if (!isError) {
      String[] personAs=request.getParameterValues(""String_Node_Str"");
      String[] types=request.getParameterValues(""String_Node_Str"");
      Person person=personService.getPerson(patient.getPatientId());
      List<Relationship> relationships;
      List<Person> newPersonAs=new Vector<Person>();
      if (person != null)       relationships=personService.getRelationshipsByPerson(person);
 else       relationships=new Vector<Relationship>();
      if (personAs != null) {
        for (int x=0; x < personAs.length; x++) {
          String personAString=personAs[x];
          String typeString=types[x];
          if (personAString != null && personAString.length() > 0 && typeString != null && typeString.length() > 0) {
            Person personA=personService.getPerson(Integer.valueOf(personAString));
            RelationshipType type=personService.getRelationshipType(Integer.valueOf(typeString));
            newPersonAs.add(personA);
            boolean found=false;
            for (            Relationship rel : relationships) {
              if (rel.getPersonA().equals(person))               found=true;
              if (rel.getPersonA().equals(personA)) {
                rel.setRelationshipType(type);
                found=true;
              }
            }
            if (!found) {
              Relationship r=new Relationship(personA,person,type);
              relationships.add(r);
            }
          }
        }
      }
      for (      Relationship rel : relationships) {
        if (newPersonAs.contains(rel.getPersonA()) || person.equals(rel.getPersonA()))         personService.saveRelationship(rel);
 else         personService.purgeRelationship(rel);
      }
      if (patient.getDead()) {
        log.debug(""String_Node_Str"");
        String codProp=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
        Concept causeOfDeath=Context.getConceptService().getConcept(codProp);
        if (causeOfDeath != null) {
          List<Obs> obssDeath=Context.getObsService().getObservationsByPersonAndConcept(patient,causeOfDeath);
          if (obssDeath != null) {
            if (obssDeath.size() > 1) {
              log.error(""String_Node_Str"" + obssDeath.size() + ""String_Node_Str"");
            }
 else {
              Obs obsDeath=null;
              if (obssDeath.size() == 1) {
                log.debug(""String_Node_Str"");
                obsDeath=obssDeath.iterator().next();
              }
 else {
                log.debug(""String_Node_Str"");
                obsDeath=new Obs();
                obsDeath.setPerson(patient);
                obsDeath.setConcept(causeOfDeath);
                Location loc=Context.getLocationService().getLocation(""String_Node_Str"");
                if (loc == null)                 loc=Context.getLocationService().getLocation(new Integer(1));
                if (loc != null)                 obsDeath.setLocation(loc);
 else                 log.error(""String_Node_Str"");
              }
              Concept currCause=patient.getCauseOfDeath();
              if (currCause == null) {
                log.debug(""String_Node_Str"");
                String noneConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                currCause=Context.getConceptService().getConcept(noneConcept);
              }
              if (currCause != null) {
                log.debug(""String_Node_Str"");
                obsDeath.setValueCoded(currCause);
                Date dateDeath=patient.getDeathDate();
                if (dateDeath == null)                 dateDeath=new Date();
                obsDeath.setObsDatetime(dateDeath);
                String otherConcept=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
                Concept conceptOther=Context.getConceptService().getConcept(otherConcept);
                if (conceptOther != null) {
                  if (conceptOther.equals(currCause)) {
                    String otherInfo=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
                    log.debug(""String_Node_Str"" + otherInfo);
                    obsDeath.setValueText(otherInfo);
                  }
 else {
                    log.debug(""String_Node_Str"");
                    obsDeath.setValueText(""String_Node_Str"");
                  }
                }
 else {
                  log.debug(""String_Node_Str"");
                  obsDeath.setValueText(""String_Node_Str"");
                }
                Context.getObsService().saveObs(obsDeath,null);
              }
 else {
                log.debug(""String_Node_Str"");
              }
            }
          }
        }
 else {
          log.debug(""String_Node_Str"");
        }
      }
    }
    if (isError || errors.hasErrors()) {
      log.error(""String_Node_Str"" + this.getFormView());
      Map<String,Object> model=new HashMap<String,Object>();
      model.put(getCommandName(),new ShortPatientModel(patient));
      return this.showForm(request,response,errors,model);
    }
 else {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      return new ModelAndView(new RedirectView(view + ""String_Node_Str"" + newPatient.getPatientId()));
    }
  }
 else {
    return new ModelAndView(new RedirectView(getFormView()));
  }
}"
84581,"/** 
 * Convenience method that will check this concept for subtype values (ConceptNumeric, ConceptDerived, etc) and insert a line into that subtable if needed. This prevents a hibernate ConstraintViolationException
 * @param concept the concept that will be inserted
 */
private void insertRowIntoSubclassIfNecessary(Concept concept){
  Connection connection=sessionFactory.getCurrentSession().connection();
  if (concept instanceof ConceptNumeric) {
    try {
      PreparedStatement ps=connection.prepareStatement(""String_Node_Str"");
      ps.setInt(1,concept.getConceptId());
      ps.setInt(2,concept.getConceptId());
      ps.execute();
      if (ps.getResultSet().next()) {
        ps=connection.prepareStatement(""String_Node_Str"");
        ps.setInt(1,concept.getConceptId());
        ps.executeUpdate();
      }
 else {
      }
    }
 catch (    SQLException e) {
      log.error(""String_Node_Str"",e);
    }
  }
 else   if (concept instanceof ConceptDerived) {
  }
}","/** 
 * Convenience method that will check this concept for subtype values (ConceptNumeric, ConceptDerived, etc) and insert a line into that subtable if needed. This prevents a hibernate ConstraintViolationException
 * @param concept the concept that will be inserted
 */
private void insertRowIntoSubclassIfNecessary(Concept concept){
  Connection connection=sessionFactory.getCurrentSession().connection();
  if (concept instanceof ConceptNumeric) {
    try {
      PreparedStatement ps=connection.prepareStatement(""String_Node_Str"");
      ps.setInt(1,concept.getConceptId());
      ps.setInt(2,concept.getConceptId());
      ps.execute();
      if (ps.getResultSet().next()) {
        sessionFactory.getCurrentSession().clear();
        ps=connection.prepareStatement(""String_Node_Str"");
        ps.setInt(1,concept.getConceptId());
        ps.executeUpdate();
      }
 else {
      }
    }
 catch (    SQLException e) {
      log.error(""String_Node_Str"",e);
    }
  }
 else   if (concept instanceof ConceptDerived) {
  }
}"
84582,"/** 
 * This is called prior to displaying a form for the first time.  It tells Spring the form/command object to load into the request
 * @see org.springframework.web.servlet.mvc.AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
 */
protected Object formBackingObject(HttpServletRequest request) throws ServletException {
  Concept concept=null;
  ConceptService cs=Context.getConceptService();
  String conceptId=request.getParameter(""String_Node_Str"");
  if (conceptId == null) {
  }
 else   if (isFormSubmission(request)) {
    concept=new Concept(Integer.valueOf(conceptId));
  }
 else   if (conceptId != null) {
    concept=cs.getConcept(Integer.valueOf(conceptId));
  }
  if (concept == null)   concept=new Concept();
  return concept;
}","/** 
 * This is called prior to displaying a form for the first time.  It tells Spring the form/command object to load into the request
 * @see org.springframework.web.servlet.mvc.AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
 */
protected Object formBackingObject(HttpServletRequest request) throws ServletException {
  Concept concept=null;
  ConceptService cs=Context.getConceptService();
  String conceptId=request.getParameter(""String_Node_Str"");
  if (conceptId == null) {
  }
 else   if (conceptId != null) {
    concept=cs.getConcept(Integer.valueOf(conceptId));
  }
  if (concept == null)   concept=new Concept();
  return concept;
}"
84583,"/** 
 * Called prior to form display.  Allows for data to be put  in the request to be used in the view
 * @see org.springframework.web.servlet.mvc.SimpleFormController#referenceData(javax.servlet.http.HttpServletRequest)
 */
protected Map referenceData(HttpServletRequest request) throws Exception {
  Locale locale=Context.getLocale();
  Map<String,Object> map=new HashMap<String,Object>();
  String defaultVerbose=""String_Node_Str"";
  ConceptService cs=Context.getConceptService();
  String conceptId=request.getParameter(""String_Node_Str"");
  ConceptName conceptName=new ConceptName();
  Collection<ConceptSynonym> conceptSynonyms=new Vector<ConceptSynonym>();
  Map<String,ConceptName> conceptNamesByLocale=new HashMap<String,ConceptName>();
  Map<Locale,Collection<ConceptSynonym>> conceptSynonymsByLocale=new HashMap<Locale,Collection<ConceptSynonym>>();
  Map<Double,Object[]> conceptSets=new TreeMap<Double,Object[]>();
  Map<String,String> conceptAnswers=new TreeMap<String,String>();
  Collection<Form> forms=new HashSet<Form>();
  Map<Integer,String> questionsAnswered=new TreeMap<Integer,String>();
  Map<Integer,String> containedInSets=new TreeMap<Integer,String>();
  boolean isNew=true;
  if (conceptId != null) {
    Concept concept=cs.getConcept(Integer.valueOf(conceptId));
    if (concept != null) {
      isNew=false;
      for (      Locale l : OPENMRS_CONCEPT_LOCALES()) {
        ConceptName cn=concept.getName(l,true);
        if (cn == null) {
          cn=new ConceptName();
        }
        conceptNamesByLocale.put(l.toString(),cn);
      }
      for (      Locale l : OPENMRS_CONCEPT_LOCALES()) {
        conceptSynonymsByLocale.put(l,concept.getSynonyms(l));
      }
      conceptName=concept.getName(locale);
      if (conceptName == null)       conceptName=new ConceptName();
      conceptSynonyms=concept.getSynonyms(locale);
      for (      ConceptSet set : concept.getConceptSets()) {
        Object[] arr={set.getConcept().getConceptId().toString(),set.getConcept().getName(locale)};
        conceptSets.put(set.getSortWeight(),arr);
      }
      for (      ConceptAnswer answer : concept.getAnswers(true)) {
        log.debug(""String_Node_Str"");
        String key=answer.getAnswerConcept().getConceptId().toString();
        ConceptName cn=answer.getAnswerConcept().getName(locale);
        String name=""String_Node_Str"";
        if (cn != null)         name=cn.toString();
        if (answer.getAnswerDrug() != null) {
          key=key + ""String_Node_Str"" + answer.getAnswerDrug().getDrugId();
          name=answer.getAnswerDrug().getFullName(locale);
        }
        if (answer.getAnswerConcept().isRetired())         name=""String_Node_Str"" + name + ""String_Node_Str"";
        conceptAnswers.put(key,name);
      }
      forms=Context.getFormService().getForms(concept);
      for (      Concept c : Context.getConceptService().getQuestionsForAnswer(concept)) {
        ConceptName cn=c.getName(locale);
        if (cn == null)         questionsAnswered.put(c.getConceptId(),""String_Node_Str"");
 else         questionsAnswered.put(c.getConceptId(),cn.getName());
      }
      for (      ConceptSet set : Context.getConceptService().getSetsContainingConcept(concept)) {
        Concept c=set.getConceptSet();
        ConceptName cn=c.getName(locale);
        if (cn == null)         containedInSets.put(c.getConceptId(),""String_Node_Str"");
 else         containedInSets.put(c.getConceptId(),cn.getName());
      }
    }
    if (Context.isAuthenticated())     defaultVerbose=Context.getAuthenticatedUser().getUserProperty(OpenmrsConstants.USER_PROPERTY_SHOW_VERBOSE);
  }
  if (isNew) {
    for (    Locale l : OPENMRS_CONCEPT_LOCALES()) {
      conceptNamesByLocale.put(l.toString(),new ConceptName());
    }
    for (    Locale l : OPENMRS_CONCEPT_LOCALES()) {
      conceptSynonymsByLocale.put(l,new HashSet<ConceptSynonym>());
    }
  }
  map.put(""String_Node_Str"",OPENMRS_CONCEPT_LOCALES());
  map.put(""String_Node_Str"",conceptName);
  for (  Map.Entry<String,ConceptName> e : conceptNamesByLocale.entrySet()) {
    map.put(""String_Node_Str"" + e.getKey(),e.getValue());
  }
  map.put(""String_Node_Str"",conceptSynonyms);
  map.put(""String_Node_Str"",conceptSynonymsByLocale);
  map.put(""String_Node_Str"",conceptSets);
  map.put(""String_Node_Str"",conceptAnswers);
  map.put(""String_Node_Str"",forms);
  map.put(""String_Node_Str"",questionsAnswered);
  map.put(""String_Node_Str"",containedInSets);
  map.put(""String_Node_Str"",cs.getConceptClasses());
  map.put(""String_Node_Str"",cs.getAllConceptDatatypes());
  map.put(""String_Node_Str"",locale.getLanguage().substring(0,2));
  map.put(""String_Node_Str"",defaultVerbose.equals(""String_Node_Str"") ? true : false);
  return map;
}","/** 
 * Called prior to form display.  Allows for data to be put  in the request to be used in the view
 * @see org.springframework.web.servlet.mvc.SimpleFormController#referenceData(javax.servlet.http.HttpServletRequest)
 */
protected Map<String,Object> referenceData(HttpServletRequest request) throws Exception {
  Locale locale=Context.getLocale();
  Map<String,Object> map=new HashMap<String,Object>();
  String defaultVerbose=""String_Node_Str"";
  ConceptService cs=Context.getConceptService();
  String conceptId=request.getParameter(""String_Node_Str"");
  ConceptName conceptName=new ConceptName();
  Collection<ConceptSynonym> conceptSynonyms=new Vector<ConceptSynonym>();
  Map<String,ConceptName> conceptNamesByLocale=new HashMap<String,ConceptName>();
  Map<Locale,Collection<ConceptSynonym>> conceptSynonymsByLocale=new HashMap<Locale,Collection<ConceptSynonym>>();
  Map<Double,Object[]> conceptSets=new TreeMap<Double,Object[]>();
  Map<String,String> conceptAnswers=new TreeMap<String,String>();
  Collection<Form> forms=new HashSet<Form>();
  Map<Integer,String> questionsAnswered=new TreeMap<Integer,String>();
  Map<Integer,String> containedInSets=new TreeMap<Integer,String>();
  boolean isNew=true;
  if (conceptId != null) {
    Concept concept=cs.getConcept(Integer.valueOf(conceptId));
    if (concept != null) {
      isNew=false;
      for (      Locale l : OPENMRS_CONCEPT_LOCALES()) {
        ConceptName cn=concept.getName(l,true);
        if (cn == null) {
          cn=new ConceptName();
        }
        conceptNamesByLocale.put(l.toString(),cn);
      }
      for (      Locale l : OPENMRS_CONCEPT_LOCALES()) {
        conceptSynonymsByLocale.put(l,concept.getSynonyms(l));
      }
      conceptName=concept.getName(locale);
      if (conceptName == null)       conceptName=new ConceptName();
      conceptSynonyms=concept.getSynonyms(locale);
      for (      ConceptSet set : concept.getConceptSets()) {
        Object[] arr={set.getConcept().getConceptId().toString(),set.getConcept().getName(locale)};
        conceptSets.put(set.getSortWeight(),arr);
      }
      for (      ConceptAnswer answer : concept.getAnswers(true)) {
        log.debug(""String_Node_Str"");
        String key=answer.getAnswerConcept().getConceptId().toString();
        ConceptName cn=answer.getAnswerConcept().getName(locale);
        String name=""String_Node_Str"";
        if (cn != null)         name=cn.toString();
        if (answer.getAnswerDrug() != null) {
          key=key + ""String_Node_Str"" + answer.getAnswerDrug().getDrugId();
          name=answer.getAnswerDrug().getFullName(locale);
        }
        if (answer.getAnswerConcept().isRetired())         name=""String_Node_Str"" + name + ""String_Node_Str"";
        conceptAnswers.put(key,name);
      }
      forms=Context.getFormService().getFormsContainingConcept(concept);
      for (      Concept c : Context.getConceptService().getConceptsByAnswer(concept)) {
        ConceptName cn=c.getName(locale);
        if (cn == null)         questionsAnswered.put(c.getConceptId(),""String_Node_Str"");
 else         questionsAnswered.put(c.getConceptId(),cn.getName());
      }
      for (      ConceptSet set : Context.getConceptService().getSetsContainingConcept(concept)) {
        Concept c=set.getConceptSet();
        ConceptName cn=c.getName(locale);
        if (cn == null)         containedInSets.put(c.getConceptId(),""String_Node_Str"");
 else         containedInSets.put(c.getConceptId(),cn.getName());
      }
    }
    if (Context.isAuthenticated())     defaultVerbose=Context.getAuthenticatedUser().getUserProperty(OpenmrsConstants.USER_PROPERTY_SHOW_VERBOSE);
  }
  if (isNew) {
    for (    Locale l : OPENMRS_CONCEPT_LOCALES()) {
      conceptNamesByLocale.put(l.toString(),new ConceptName());
    }
    for (    Locale l : OPENMRS_CONCEPT_LOCALES()) {
      conceptSynonymsByLocale.put(l,new HashSet<ConceptSynonym>());
    }
  }
  map.put(""String_Node_Str"",OPENMRS_CONCEPT_LOCALES());
  map.put(""String_Node_Str"",conceptName);
  for (  Map.Entry<String,ConceptName> e : conceptNamesByLocale.entrySet()) {
    map.put(""String_Node_Str"" + e.getKey(),e.getValue());
  }
  map.put(""String_Node_Str"",conceptSynonyms);
  map.put(""String_Node_Str"",conceptSynonymsByLocale);
  map.put(""String_Node_Str"",conceptSets);
  map.put(""String_Node_Str"",conceptAnswers);
  map.put(""String_Node_Str"",forms);
  map.put(""String_Node_Str"",questionsAnswered);
  map.put(""String_Node_Str"",containedInSets);
  map.put(""String_Node_Str"",cs.getAllConceptClasses());
  map.put(""String_Node_Str"",cs.getAllConceptDatatypes());
  map.put(""String_Node_Str"",locale.getLanguage().substring(0,2));
  map.put(""String_Node_Str"",defaultVerbose.equals(""String_Node_Str"") ? true : false);
  return map;
}"
84584,"/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  ConceptService cs=Context.getConceptService();
  if (Context.isAuthenticated()) {
    Concept concept=(Concept)obj;
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String action=request.getParameter(""String_Node_Str"");
    if (action.equals(msa.getMessage(""String_Node_Str""))) {
      try {
        cs.deleteConcept(concept);
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
        return new ModelAndView(new RedirectView(""String_Node_Str""));
      }
 catch (      APIException e) {
        log.error(e);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        return new ModelAndView(new RedirectView(getSuccessView() + ""String_Node_Str"" + concept.getConceptId().toString()));
      }
    }
 else {
      String isSet=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
      if (isSet.equals(""String_Node_Str""))       concept.setSet(false);
 else       concept.setSet(true);
      boolean isNew=false;
      try {
        if (concept.getConceptId() == null) {
          isNew=true;
          concept.setConceptId(cs.getNextAvailableId());
          if (concept.getDatatype() != null && concept.getDatatype().getName().equals(""String_Node_Str"")) {
            concept=getConceptNumeric(concept,request);
          }
          cs.saveConcept(concept);
        }
 else {
          if (concept.getDatatype() != null && concept.getDatatype().getName().equals(""String_Node_Str"")) {
            concept=getConceptNumeric(concept,request);
          }
          cs.saveConcept(concept);
        }
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      }
 catch (      APIException e) {
        log.error(""String_Node_Str"",e);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        if (isNew) {
          errors.reject(""String_Node_Str"",""String_Node_Str"");
          return new ModelAndView(new RedirectView(getSuccessView()));
        }
      }
      return new ModelAndView(new RedirectView(getSuccessView() + ""String_Node_Str"" + concept.getConceptId()));
    }
  }
  return new ModelAndView(new RedirectView(getFormView()));
}","/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  ConceptService cs=Context.getConceptService();
  if (Context.isAuthenticated()) {
    Concept concept=(Concept)obj;
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String action=request.getParameter(""String_Node_Str"");
    if (action.equals(msa.getMessage(""String_Node_Str""))) {
      try {
        cs.purgeConcept(concept);
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
        return new ModelAndView(new RedirectView(""String_Node_Str""));
      }
 catch (      APIException e) {
        log.error(e);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        return new ModelAndView(new RedirectView(getSuccessView() + ""String_Node_Str"" + concept.getConceptId().toString()));
      }
    }
 else {
      String isSet=ServletRequestUtils.getStringParameter(request,""String_Node_Str"",""String_Node_Str"");
      if (isSet.equals(""String_Node_Str""))       concept.setSet(false);
 else       concept.setSet(true);
      boolean isNew=false;
      try {
        if (concept.getConceptId() == null) {
          isNew=true;
          concept.setConceptId(cs.getNextAvailableId());
          if (concept.getDatatype() != null && concept.getDatatype().getName().equals(""String_Node_Str"")) {
            concept=getConceptNumeric(concept,request);
          }
          cs.saveConcept(concept);
        }
 else {
          if (concept.getDatatype() != null && concept.getDatatype().getName().equals(""String_Node_Str"")) {
            concept=getConceptNumeric(concept,request);
          }
          cs.saveConcept(concept);
        }
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
      }
 catch (      APIException e) {
        log.error(""String_Node_Str"",e);
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
        if (isNew) {
          errors.reject(""String_Node_Str"",""String_Node_Str"");
          return new ModelAndView(new RedirectView(getSuccessView()));
        }
      }
      return new ModelAndView(new RedirectView(getSuccessView() + ""String_Node_Str"" + concept.getConceptId()));
    }
  }
  return new ModelAndView(new RedirectView(getFormView()));
}"
84585,"/** 
 * @see org.openmrs.api.db.ConceptDAO#getConceptDatatypes(java.lang.String)
 */
public List<ConceptDatatype> getConceptDatatypes(String name) throws DAOException {
  Criteria crit=sessionFactory.getCurrentSession().createCriteria(ConceptDatatype.class);
  if (name != null)   crit.add(Expression.like(""String_Node_Str"",name,MatchMode.START));
  return crit.list();
}","/** 
 * @see org.openmrs.api.db.ConceptDAO#getConceptDatatypes(java.lang.String)
 */
@SuppressWarnings(""String_Node_Str"") public List<ConceptDatatype> getConceptDatatypes(String name) throws DAOException {
  Criteria crit=sessionFactory.getCurrentSession().createCriteria(ConceptDatatype.class);
  if (name != null)   crit.add(Expression.like(""String_Node_Str"",name,MatchMode.START));
  return crit.list();
}"
84586,"/** 
 * @see org.openmrs.api.db.ConceptDAO#getAllConceptDatatypes(boolean)
 */
public List<ConceptDatatype> getAllConceptDatatypes(boolean includeRetired) throws DAOException {
  Criteria crit=sessionFactory.getCurrentSession().createCriteria(ConceptDatatype.class);
  if (includeRetired == false)   crit.add(Expression.eq(""String_Node_Str"",false));
  return crit.list();
}","/** 
 * @see org.openmrs.api.db.ConceptDAO#getAllConceptDatatypes(boolean)
 */
@SuppressWarnings(""String_Node_Str"") public List<ConceptDatatype> getAllConceptDatatypes(boolean includeRetired) throws DAOException {
  Criteria crit=sessionFactory.getCurrentSession().createCriteria(ConceptDatatype.class);
  if (includeRetired == false)   crit.add(Expression.eq(""String_Node_Str"",false));
  return crit.list();
}"
84587,"/** 
 * @see org.openmrs.api.db.ConceptDAO#purgeConceptClass(org.openmrs.ConceptClass)
 */
public void purgeConceptClass(ConceptClass cc) throws DAOException {
  sessionFactory.getCurrentSession().createQuery(""String_Node_Str"").setInteger(""String_Node_Str"",cc.getConceptClassId()).executeUpdate();
  sessionFactory.getCurrentSession().delete(cc);
}","/** 
 * @see org.openmrs.api.db.ConceptDAO#purgeConceptClass(org.openmrs.ConceptClass)
 */
public void purgeConceptClass(ConceptClass cc) throws DAOException {
  sessionFactory.getCurrentSession().delete(cc);
}"
84588,"private void parse(String reference) throws InvalidReferenceRuleException {
  log.info(""String_Node_Str"" + reference);
  int firstDotIndex=reference.indexOf('.');
  if (firstDotIndex == -1)   throw new InvalidReferenceRuleException(""String_Node_Str"");
  if (firstDotIndex < 1)   throw new InvalidReferenceRuleException(""String_Node_Str"");
  if (firstDotIndex >= reference.length() - 1)   throw new InvalidReferenceRuleException(""String_Node_Str"");
  String dataSourceName=reference.substring(0,firstDotIndex);
  key=reference.substring(firstDotIndex + 1);
  dataSource=Context.getLogicService().getLogicDataSource(dataSourceName);
  if (dataSource == null)   throw new InvalidReferenceRuleException(""String_Node_Str"" + dataSourceName);
  if (!dataSource.hasKey(key))   throw new InvalidReferenceRuleException(""String_Node_Str"" + key + ""String_Node_Str""+ dataSourceName+ ""String_Node_Str"");
}","private void parse(String reference) throws InvalidReferenceRuleException {
  log.info(""String_Node_Str"" + reference);
  int firstDotIndex=reference.indexOf('.');
  if (firstDotIndex == -1)   throw new InvalidReferenceRuleException(""String_Node_Str"");
  if (firstDotIndex < 1)   throw new InvalidReferenceRuleException(""String_Node_Str"");
  if (firstDotIndex >= reference.length() - 1)   throw new InvalidReferenceRuleException(""String_Node_Str"");
  String dataSourceName=reference.substring(0,firstDotIndex);
  key=reference.substring(firstDotIndex + 1);
  dataSource=Context.getLogicService().getLogicDataSource(dataSourceName);
  if (dataSource == null)   throw new InvalidReferenceRuleException(""String_Node_Str"" + dataSourceName);
  if (key == null || !dataSource.hasKey(key))   throw new InvalidReferenceRuleException(""String_Node_Str"" + key + ""String_Node_Str""+ dataSourceName+ ""String_Node_Str""+ reference);
}"
84589,"/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  String view=getFormView();
  if (Context.isAuthenticated()) {
    ConceptClass cc=(ConceptClass)obj;
    Context.getAdministrationService().updateConceptClass(cc);
    view=getSuccessView();
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
  }
  return new ModelAndView(new RedirectView(view));
}","/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  String view=getFormView();
  if (Context.isAuthenticated()) {
    ConceptClass cc=(ConceptClass)obj;
    Context.getConceptService().saveConceptClass(cc);
    view=getSuccessView();
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,""String_Node_Str"");
  }
  return new ModelAndView(new RedirectView(view));
}"
84590,"/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  String view=getFormView();
  if (Context.isAuthenticated()) {
    String[] conceptClassList=request.getParameterValues(""String_Node_Str"");
    AdministrationService as=Context.getAdministrationService();
    ConceptService cs=Context.getConceptService();
    String success=""String_Node_Str"";
    String error=""String_Node_Str"";
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String deleted=msa.getMessage(""String_Node_Str"");
    String notDeleted=msa.getMessage(""String_Node_Str"");
    for (    String cc : conceptClassList) {
      try {
        as.deleteConceptClass(cs.getConceptClass(Integer.valueOf(cc)));
        if (!success.equals(""String_Node_Str""))         success+=""String_Node_Str"";
        success+=cc + ""String_Node_Str"" + deleted;
      }
 catch (      APIException e) {
        log.warn(""String_Node_Str"",e);
        if (!error.equals(""String_Node_Str""))         error+=""String_Node_Str"";
        error+=cc + ""String_Node_Str"" + notDeleted;
      }
    }
    view=getSuccessView();
    if (!success.equals(""String_Node_Str""))     httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,success);
    if (!error.equals(""String_Node_Str""))     httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,error);
  }
  return new ModelAndView(new RedirectView(view));
}","/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  HttpSession httpSession=request.getSession();
  String view=getFormView();
  if (Context.isAuthenticated()) {
    String[] conceptClassList=request.getParameterValues(""String_Node_Str"");
    ConceptService cs=Context.getConceptService();
    String success=""String_Node_Str"";
    String error=""String_Node_Str"";
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String deleted=msa.getMessage(""String_Node_Str"");
    String notDeleted=msa.getMessage(""String_Node_Str"");
    for (    String cc : conceptClassList) {
      try {
        cs.purgeConceptClass(cs.getConceptClass(Integer.valueOf(cc)));
        if (!success.equals(""String_Node_Str""))         success+=""String_Node_Str"";
        success+=cc + ""String_Node_Str"" + deleted;
      }
 catch (      APIException e) {
        log.warn(""String_Node_Str"",e);
        if (!error.equals(""String_Node_Str""))         error+=""String_Node_Str"";
        error+=cc + ""String_Node_Str"" + notDeleted;
      }
    }
    view=getSuccessView();
    if (!success.equals(""String_Node_Str""))     httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,success);
    if (!error.equals(""String_Node_Str""))     httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,error);
  }
  return new ModelAndView(new RedirectView(view));
}"
84591,"@SuppressWarnings(""String_Node_Str"") public Map<Integer,List<DrugOrder>> getDrugOrders(Cohort patients,List<Concept> drugConcepts) throws DAOException {
  Map<Integer,List<DrugOrder>> ret=new HashMap<Integer,List<DrugOrder>>();
  Criteria criteria=sessionFactory.getCurrentSession().createCriteria(DrugOrder.class);
  criteria.setCacheMode(CacheMode.IGNORE);
  if (patients != null)   criteria.add(Restrictions.in(""String_Node_Str"",patients.getMemberIds()));
  if (drugConcepts != null)   criteria.add(Restrictions.in(""String_Node_Str"",drugConcepts));
  criteria.add(Restrictions.eq(""String_Node_Str"",false));
  criteria.addOrder(org.hibernate.criterion.Order.asc(""String_Node_Str""));
  log.debug(""String_Node_Str"" + criteria);
  List<DrugOrder> temp=criteria.list();
  for (  DrugOrder regimen : temp) {
    Integer ptId=regimen.getPatient().getPatientId();
    List<DrugOrder> list=ret.get(ptId);
    if (list == null) {
      list=new ArrayList<DrugOrder>();
      ret.put(ptId,list);
    }
    list.add(regimen);
  }
  return ret;
}","@SuppressWarnings(""String_Node_Str"") public Map<Integer,List<DrugOrder>> getDrugOrders(Cohort patients,List<Concept> drugConcepts) throws DAOException {
  Map<Integer,List<DrugOrder>> ret=new HashMap<Integer,List<DrugOrder>>();
  if (patients != null && patients.size() == 0)   return ret;
  Criteria criteria=sessionFactory.getCurrentSession().createCriteria(DrugOrder.class);
  criteria.setCacheMode(CacheMode.IGNORE);
  if (patients != null)   criteria.add(Restrictions.in(""String_Node_Str"",patients.getMemberIds()));
  if (drugConcepts != null)   criteria.add(Restrictions.in(""String_Node_Str"",drugConcepts));
  criteria.add(Restrictions.eq(""String_Node_Str"",false));
  criteria.addOrder(org.hibernate.criterion.Order.asc(""String_Node_Str""));
  log.debug(""String_Node_Str"" + criteria);
  List<DrugOrder> temp=criteria.list();
  for (  DrugOrder regimen : temp) {
    Integer ptId=regimen.getPatient().getPatientId();
    List<DrugOrder> list=ret.get(ptId);
    if (list == null) {
      list=new ArrayList<DrugOrder>();
      ret.put(ptId,list);
    }
    list.add(regimen);
  }
  return ret;
}"
84592,"/** 
 * This method produces a model containing the following mappings: (always) (java.util.Date) now (String) size (Locale) locale (other parameters) (if there's currently an authenticated user) (User) authenticatedUser (Cohort) myPatientSet (the user's selected patient set, PatientSetService.getMyPatientSet()) (if the request has a patientId attribute) (Integer) patientId (Patient) patient (Set<Obs>) patientObs (Set<Encounter>) patientEncounters (Set<DrugOrder>) patientDrugOrders (Set<DrugOrder>) currentDrugOrders (Set<DrugOrder>) completedDrugOrders (Obs) patientWeight // most recent weight obs (Obs) patientHeight // most recent height obs (Double) patientBmi // BMI derived from most recent weight and most recent height (String) patientBmiAsString // BMI rounded to one decimal place, or ""?"" if unknown (Integer) personId (if the patient has any obs for the concept in the global property 'concept.reasonExitedCare') (Obs) patientReasonForExit (if the request has a personId or patientId attribute) (Person) person (List<Relationship>) personRelationships (Map<RelationshipType, List<Relationship>>) personRelationshipsByType (if the request has an encounterId attribute) (Integer) encounterId (Encounter) encounter (Set<Obs>) encounterObs (if the request has a userId attribute) (Integer) userId (User) user (if the request has a patientIds attribute, which should be a (String) comma-separated list of patientIds) (PatientSet) patientSet (String) patientIds (if the request has a conceptIds attribute, which should be a (String) commas-separated list of conceptIds) (Map<Integer, Concept>) conceptMap (Map<String, Concept>) conceptMapByStringIds
 */
@SuppressWarnings(""String_Node_Str"") public ModelAndView handleRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  AdministrationService as=Context.getAdministrationService();
  ConceptService cs=Context.getConceptService();
  Object uri=request.getAttribute(""String_Node_Str"");
  String portletPath=""String_Node_Str"";
  Map<String,Object> model=null;
{
    HttpSession session=request.getSession();
    String uniqueRequestId=(String)request.getAttribute(WebConstants.INIT_REQ_UNIQUE_ID);
    String lastRequestId=(String)session.getAttribute(WebConstants.OPENMRS_PORTLET_LAST_REQ_ID);
    if (uniqueRequestId.equals(lastRequestId))     model=(Map<String,Object>)session.getAttribute(WebConstants.OPENMRS_PORTLET_CACHED_MODEL);
    if (model == null) {
      log.debug(""String_Node_Str"");
      model=new HashMap<String,Object>();
      session.setAttribute(WebConstants.OPENMRS_PORTLET_LAST_REQ_ID,uniqueRequestId);
      session.setAttribute(WebConstants.OPENMRS_PORTLET_CACHED_MODEL,model);
    }
  }
  if (uri != null) {
    long timeAtStart=System.currentTimeMillis();
    portletPath=uri.toString();
    if (portletPath.endsWith(""String_Node_Str""))     portletPath=portletPath.replace(""String_Node_Str"",""String_Node_Str"");
 else     if (portletPath.endsWith(""String_Node_Str""))     throw new ServletException(""String_Node_Str"");
    log.debug(""String_Node_Str"" + portletPath);
    String id=(String)request.getAttribute(""String_Node_Str"");
    String size=(String)request.getAttribute(""String_Node_Str"");
    Map<String,Object> params=(Map<String,Object>)request.getAttribute(""String_Node_Str"");
    Map<String,Object> moreParams=(Map<String,Object>)request.getAttribute(""String_Node_Str"");
    model.put(""String_Node_Str"",new Date());
    model.put(""String_Node_Str"",id);
    model.put(""String_Node_Str"",size);
    model.put(""String_Node_Str"",Context.getLocale());
    model.putAll(params);
    if (moreParams != null) {
      model.putAll(moreParams);
    }
    if (Context.getAuthenticatedUser() != null) {
      model.put(""String_Node_Str"",Context.getAuthenticatedUser());
      model.put(""String_Node_Str"",Context.getPatientSetService().getMyPatientSet());
    }
    Integer personId=null;
    Object o=request.getAttribute(""String_Node_Str"");
    if (o != null) {
      String patientVariation=""String_Node_Str"";
      Integer patientId=(Integer)o;
      if (!model.containsKey(""String_Node_Str"")) {
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_PATIENTS)) {
          Patient p=Context.getPatientService().getPatient(patientId);
          model.put(""String_Node_Str"",p);
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_ENCOUNTERS))           model.put(""String_Node_Str"",Context.getEncounterService().getEncounters(p));
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_OBS)) {
            Set<Obs> patientObs=Context.getObsService().getObservations(p,false);
            model.put(""String_Node_Str"",patientObs);
            Obs latestWeight=null;
            Obs latestHeight=null;
            String bmiAsString=""String_Node_Str"";
            try {
              ConceptNumeric weightConcept=cs.getConceptNumeric(cs.getConceptByIdOrName(as.getGlobalProperty(""String_Node_Str"")).getConceptId());
              ConceptNumeric heightConcept=cs.getConceptNumeric(cs.getConceptByIdOrName(as.getGlobalProperty(""String_Node_Str"")).getConceptId());
              for (              Obs obs : patientObs) {
                if (obs.getConcept().equals(weightConcept)) {
                  if (latestWeight == null || obs.getObsDatetime().compareTo(latestWeight.getObsDatetime()) > 0)                   latestWeight=obs;
                }
 else                 if (obs.getConcept().equals(heightConcept)) {
                  if (latestHeight == null || obs.getObsDatetime().compareTo(latestHeight.getObsDatetime()) > 0)                   latestHeight=obs;
                }
              }
              if (latestWeight != null)               model.put(""String_Node_Str"",latestWeight);
              if (latestHeight != null)               model.put(""String_Node_Str"",latestHeight);
              if (latestWeight != null && latestHeight != null) {
                double weightInKg;
                double heightInM;
                if (weightConcept.getUnits().equals(""String_Node_Str""))                 weightInKg=latestWeight.getValueNumeric();
 else                 if (weightConcept.getUnits().equals(""String_Node_Str""))                 weightInKg=latestWeight.getValueNumeric() * 0.45359237;
 else                 throw new IllegalArgumentException(""String_Node_Str"" + weightConcept.getUnits());
                if (heightConcept.getUnits().equals(""String_Node_Str""))                 heightInM=latestHeight.getValueNumeric() / 100;
 else                 if (heightConcept.getUnits().equals(""String_Node_Str""))                 heightInM=latestHeight.getValueNumeric();
 else                 if (heightConcept.getUnits().equals(""String_Node_Str""))                 heightInM=latestHeight.getValueNumeric() * 0.0254;
 else                 throw new IllegalArgumentException(""String_Node_Str"" + heightConcept.getUnits());
                double bmi=weightInKg / (heightInM * heightInM);
                model.put(""String_Node_Str"",bmi);
                String temp=""String_Node_Str"" + bmi;
                bmiAsString=temp.substring(0,temp.indexOf('.') + 2);
              }
            }
 catch (            Exception ex) {
              if (latestWeight != null && latestHeight != null)               log.error(""String_Node_Str"",ex);
            }
            model.put(""String_Node_Str"",bmiAsString);
          }
 else {
            model.put(""String_Node_Str"",new HashSet<Obs>());
          }
          Obs reasonForExitObs=null;
          Concept reasonForExitConcept=cs.getConceptByIdOrName(as.getGlobalProperty(""String_Node_Str""));
          if (reasonForExitConcept != null) {
            Set<Obs> patientExitObs=Context.getObsService().getObservations(p,reasonForExitConcept,false);
            if (patientExitObs != null) {
              log.debug(""String_Node_Str"" + patientExitObs.size());
              if (patientExitObs.size() == 1) {
                reasonForExitObs=patientExitObs.iterator().next();
                Concept exitReason=reasonForExitObs.getValueCoded();
                Date exitDate=reasonForExitObs.getObsDatetime();
                if (exitReason != null && exitDate != null) {
                  patientVariation=""String_Node_Str"";
                }
              }
 else {
                if (patientExitObs.size() == 0) {
                  log.debug(""String_Node_Str"");
                }
 else {
                  log.error(""String_Node_Str"");
                }
              }
            }
          }
          model.put(""String_Node_Str"",reasonForExitObs);
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_ORDERS)) {
            List<DrugOrder> drugOrderList=Context.getOrderService().getDrugOrdersByPatient(p);
            model.put(""String_Node_Str"",drugOrderList);
            List<DrugOrder> currentDrugOrders=new ArrayList<DrugOrder>();
            List<DrugOrder> discontinuedDrugOrders=new ArrayList<DrugOrder>();
            for (Iterator<DrugOrder> iter=drugOrderList.iterator(); iter.hasNext(); ) {
              DrugOrder next=iter.next();
              if (next.isCurrent() || next.isFuture())               currentDrugOrders.add(next);
              if (next.isDiscontinued())               discontinuedDrugOrders.add(next);
            }
            model.put(""String_Node_Str"",currentDrugOrders);
            model.put(""String_Node_Str"",discontinuedDrugOrders);
            List<RegimenSuggestion> standardRegimens=Context.getOrderService().getStandardRegimens();
            if (standardRegimens != null)             model.put(""String_Node_Str"",standardRegimens);
          }
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_PROGRAMS)) {
            model.put(""String_Node_Str"",Context.getProgramWorkflowService().getPatientPrograms(p));
            model.put(""String_Node_Str"",Context.getProgramWorkflowService().getCurrentPrograms(p,null));
          }
          model.put(""String_Node_Str"",patientId);
          if (p != null) {
            personId=p.getPatientId();
            model.put(""String_Node_Str"",personId);
          }
          model.put(""String_Node_Str"",patientVariation);
        }
      }
    }
    if (personId == null) {
      o=request.getAttribute(""String_Node_Str"");
      if (o != null) {
        personId=(Integer)o;
        model.put(""String_Node_Str"",personId);
      }
    }
    if (personId != null) {
      if (!model.containsKey(""String_Node_Str"")) {
        Person p=(Person)model.get(""String_Node_Str"");
        if (p == null)         p=Context.getPersonService().getPerson(personId);
        model.put(""String_Node_Str"",p);
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_MANAGE_RELATIONSHIPS)) {
          List<Relationship> relationships=new ArrayList<Relationship>();
          relationships.addAll(Context.getPersonService().getRelationships(p,false));
          Map<RelationshipType,List<Relationship>> relationshipsByType=new HashMap<RelationshipType,List<Relationship>>();
          for (          Relationship rel : relationships) {
            List<Relationship> list=relationshipsByType.get(rel.getRelationshipType());
            if (list == null) {
              list=new ArrayList<Relationship>();
              relationshipsByType.put(rel.getRelationshipType(),list);
            }
            list.add(rel);
          }
          model.put(""String_Node_Str"",relationships);
          model.put(""String_Node_Str"",relationshipsByType);
        }
      }
    }
    o=request.getAttribute(""String_Node_Str"");
    if (o != null && !model.containsKey(""String_Node_Str"")) {
      if (!model.containsKey(""String_Node_Str"")) {
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_ENCOUNTERS)) {
          Encounter e=Context.getEncounterService().getEncounter((Integer)o);
          model.put(""String_Node_Str"",e);
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_OBS))           model.put(""String_Node_Str"",Context.getObsService().getObservations(e));
        }
        model.put(""String_Node_Str"",(Integer)o);
      }
    }
    o=request.getAttribute(""String_Node_Str"");
    if (o != null) {
      if (!model.containsKey(""String_Node_Str"")) {
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_USERS)) {
          User u=Context.getUserService().getUser((Integer)o);
          model.put(""String_Node_Str"",u);
        }
        model.put(""String_Node_Str"",(Integer)o);
      }
    }
    o=request.getAttribute(""String_Node_Str"");
    if (o != null && !""String_Node_Str"".equals(o) && !model.containsKey(""String_Node_Str"")) {
      if (!model.containsKey(""String_Node_Str"")) {
        Cohort ps=new Cohort((String)o);
        model.put(""String_Node_Str"",ps);
        model.put(""String_Node_Str"",(String)o);
      }
    }
    o=model.get(""String_Node_Str"");
    if (o != null && !""String_Node_Str"".equals(o)) {
      if (!model.containsKey(""String_Node_Str"")) {
        log.debug(""String_Node_Str"" + o);
        Map<Integer,Concept> concepts=new HashMap<Integer,Concept>();
        Map<String,Concept> conceptsByStringIds=new HashMap<String,Concept>();
        String conceptIds=(String)o;
        String[] ids=conceptIds.split(""String_Node_Str"");
        for (        String cId : ids) {
          try {
            Integer i=Integer.valueOf(cId);
            Concept c=cs.getConcept(i);
            concepts.put(i,c);
            conceptsByStringIds.put(i.toString(),c);
          }
 catch (          Exception ex) {
          }
        }
        model.put(""String_Node_Str"",concepts);
        model.put(""String_Node_Str"",conceptsByStringIds);
      }
    }
    populateModel(request,model);
    log.debug(portletPath + ""String_Node_Str"" + (System.currentTimeMillis() - timeAtStart)+ ""String_Node_Str"");
  }
  return new ModelAndView(portletPath,""String_Node_Str"",model);
}","/** 
 * This method produces a model containing the following mappings: (always) (java.util.Date) now (String) size (Locale) locale (other parameters) (if there's currently an authenticated user) (User) authenticatedUser (Cohort) myPatientSet (the user's selected patient set, PatientSetService.getMyPatientSet()) (if the request has a patientId attribute) (Integer) patientId (Patient) patient (Set<Obs>) patientObs (Set<Encounter>) patientEncounters (Set<DrugOrder>) patientDrugOrders (Set<DrugOrder>) currentDrugOrders (Set<DrugOrder>) completedDrugOrders (Obs) patientWeight // most recent weight obs (Obs) patientHeight // most recent height obs (Double) patientBmi // BMI derived from most recent weight and most recent height (String) patientBmiAsString // BMI rounded to one decimal place, or ""?"" if unknown (Integer) personId (if the patient has any obs for the concept in the global property 'concept.reasonExitedCare') (Obs) patientReasonForExit (if the request has a personId or patientId attribute) (Person) person (List<Relationship>) personRelationships (Map<RelationshipType, List<Relationship>>) personRelationshipsByType (if the request has an encounterId attribute) (Integer) encounterId (Encounter) encounter (Set<Obs>) encounterObs (if the request has a userId attribute) (Integer) userId (User) user (if the request has a patientIds attribute, which should be a (String) comma-separated list of patientIds) (PatientSet) patientSet (String) patientIds (if the request has a conceptIds attribute, which should be a (String) commas-separated list of conceptIds) (Map<Integer, Concept>) conceptMap (Map<String, Concept>) conceptMapByStringIds
 */
@SuppressWarnings(""String_Node_Str"") public ModelAndView handleRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  AdministrationService as=Context.getAdministrationService();
  ConceptService cs=Context.getConceptService();
  Object uri=request.getAttribute(""String_Node_Str"");
  String portletPath=""String_Node_Str"";
  Map<String,Object> model=null;
{
    HttpSession session=request.getSession();
    String uniqueRequestId=(String)request.getAttribute(WebConstants.INIT_REQ_UNIQUE_ID);
    String lastRequestId=(String)session.getAttribute(WebConstants.OPENMRS_PORTLET_LAST_REQ_ID);
    if (uniqueRequestId.equals(lastRequestId))     model=(Map<String,Object>)session.getAttribute(WebConstants.OPENMRS_PORTLET_CACHED_MODEL);
    if (model == null) {
      log.debug(""String_Node_Str"");
      model=new HashMap<String,Object>();
      session.setAttribute(WebConstants.OPENMRS_PORTLET_LAST_REQ_ID,uniqueRequestId);
      session.setAttribute(WebConstants.OPENMRS_PORTLET_CACHED_MODEL,model);
    }
  }
  if (uri != null) {
    long timeAtStart=System.currentTimeMillis();
    portletPath=uri.toString();
    if (portletPath.endsWith(""String_Node_Str""))     portletPath=portletPath.replace(""String_Node_Str"",""String_Node_Str"");
 else     if (portletPath.endsWith(""String_Node_Str""))     throw new ServletException(""String_Node_Str"");
    log.debug(""String_Node_Str"" + portletPath);
    String id=(String)request.getAttribute(""String_Node_Str"");
    String size=(String)request.getAttribute(""String_Node_Str"");
    Map<String,Object> params=(Map<String,Object>)request.getAttribute(""String_Node_Str"");
    Map<String,Object> moreParams=(Map<String,Object>)request.getAttribute(""String_Node_Str"");
    model.put(""String_Node_Str"",new Date());
    model.put(""String_Node_Str"",id);
    model.put(""String_Node_Str"",size);
    model.put(""String_Node_Str"",Context.getLocale());
    model.putAll(params);
    if (moreParams != null) {
      model.putAll(moreParams);
    }
    if (Context.getAuthenticatedUser() != null) {
      model.put(""String_Node_Str"",Context.getAuthenticatedUser());
      model.put(""String_Node_Str"",Context.getPatientSetService().getMyPatientSet());
    }
    Integer personId=null;
    Object o=request.getAttribute(""String_Node_Str"");
    if (o != null) {
      String patientVariation=""String_Node_Str"";
      Integer patientId=(Integer)o;
      if (!model.containsKey(""String_Node_Str"")) {
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_PATIENTS)) {
          Patient p=Context.getPatientService().getPatient(patientId);
          model.put(""String_Node_Str"",p);
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_ENCOUNTERS))           model.put(""String_Node_Str"",Context.getEncounterService().getEncounters(p));
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_OBS)) {
            Set<Obs> patientObs=Context.getObsService().getObservations(p,false);
            model.put(""String_Node_Str"",patientObs);
            Obs latestWeight=null;
            Obs latestHeight=null;
            String bmiAsString=""String_Node_Str"";
            try {
              ConceptNumeric weightConcept=cs.getConceptNumeric(cs.getConceptByIdOrName(as.getGlobalProperty(""String_Node_Str"")).getConceptId());
              ConceptNumeric heightConcept=cs.getConceptNumeric(cs.getConceptByIdOrName(as.getGlobalProperty(""String_Node_Str"")).getConceptId());
              for (              Obs obs : patientObs) {
                if (obs.getConcept().equals(weightConcept)) {
                  if (latestWeight == null || obs.getObsDatetime().compareTo(latestWeight.getObsDatetime()) > 0)                   latestWeight=obs;
                }
 else                 if (obs.getConcept().equals(heightConcept)) {
                  if (latestHeight == null || obs.getObsDatetime().compareTo(latestHeight.getObsDatetime()) > 0)                   latestHeight=obs;
                }
              }
              if (latestWeight != null)               model.put(""String_Node_Str"",latestWeight);
              if (latestHeight != null)               model.put(""String_Node_Str"",latestHeight);
              if (latestWeight != null && latestHeight != null) {
                double weightInKg;
                double heightInM;
                if (weightConcept.getUnits().equals(""String_Node_Str""))                 weightInKg=latestWeight.getValueNumeric();
 else                 if (weightConcept.getUnits().equals(""String_Node_Str""))                 weightInKg=latestWeight.getValueNumeric() * 0.45359237;
 else                 throw new IllegalArgumentException(""String_Node_Str"" + weightConcept.getUnits());
                if (heightConcept.getUnits().equals(""String_Node_Str""))                 heightInM=latestHeight.getValueNumeric() / 100;
 else                 if (heightConcept.getUnits().equals(""String_Node_Str""))                 heightInM=latestHeight.getValueNumeric();
 else                 if (heightConcept.getUnits().equals(""String_Node_Str""))                 heightInM=latestHeight.getValueNumeric() * 0.0254;
 else                 throw new IllegalArgumentException(""String_Node_Str"" + heightConcept.getUnits());
                double bmi=weightInKg / (heightInM * heightInM);
                model.put(""String_Node_Str"",bmi);
                String temp=""String_Node_Str"" + bmi;
                bmiAsString=temp.substring(0,temp.indexOf('.') + 2);
              }
            }
 catch (            Exception ex) {
              if (latestWeight != null && latestHeight != null)               log.error(""String_Node_Str"",ex);
            }
            model.put(""String_Node_Str"",bmiAsString);
          }
 else {
            model.put(""String_Node_Str"",new HashSet<Obs>());
          }
          Obs reasonForExitObs=null;
          Concept reasonForExitConcept=cs.getConceptByIdOrName(as.getGlobalProperty(""String_Node_Str""));
          if (reasonForExitConcept != null) {
            Set<Obs> patientExitObs=Context.getObsService().getObservations(p,reasonForExitConcept,false);
            if (patientExitObs != null) {
              log.debug(""String_Node_Str"" + patientExitObs.size());
              if (patientExitObs.size() == 1) {
                reasonForExitObs=patientExitObs.iterator().next();
                Concept exitReason=reasonForExitObs.getValueCoded();
                Date exitDate=reasonForExitObs.getObsDatetime();
                if (exitReason != null && exitDate != null) {
                  patientVariation=""String_Node_Str"";
                }
              }
 else {
                if (patientExitObs.size() == 0) {
                  log.debug(""String_Node_Str"");
                }
 else {
                  log.error(""String_Node_Str"");
                }
              }
            }
          }
          model.put(""String_Node_Str"",reasonForExitObs);
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_ORDERS)) {
            List<DrugOrder> drugOrderList=Context.getOrderService().getDrugOrdersByPatient(p);
            model.put(""String_Node_Str"",drugOrderList);
            List<DrugOrder> currentDrugOrders=new ArrayList<DrugOrder>();
            List<DrugOrder> discontinuedDrugOrders=new ArrayList<DrugOrder>();
            for (Iterator<DrugOrder> iter=drugOrderList.iterator(); iter.hasNext(); ) {
              DrugOrder next=iter.next();
              if (next.isCurrent() || next.isFuture())               currentDrugOrders.add(next);
              if (next.isDiscontinued())               discontinuedDrugOrders.add(next);
            }
            model.put(""String_Node_Str"",currentDrugOrders);
            model.put(""String_Node_Str"",discontinuedDrugOrders);
            List<RegimenSuggestion> standardRegimens=Context.getOrderService().getStandardRegimens();
            if (standardRegimens != null)             model.put(""String_Node_Str"",standardRegimens);
          }
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_PROGRAMS) && Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_PATIENT_PROGRAMS)) {
            model.put(""String_Node_Str"",Context.getProgramWorkflowService().getPatientPrograms(p));
            model.put(""String_Node_Str"",Context.getProgramWorkflowService().getCurrentPrograms(p,null));
          }
          model.put(""String_Node_Str"",patientId);
          if (p != null) {
            personId=p.getPatientId();
            model.put(""String_Node_Str"",personId);
          }
          model.put(""String_Node_Str"",patientVariation);
        }
      }
    }
    if (personId == null) {
      o=request.getAttribute(""String_Node_Str"");
      if (o != null) {
        personId=(Integer)o;
        model.put(""String_Node_Str"",personId);
      }
    }
    if (personId != null) {
      if (!model.containsKey(""String_Node_Str"")) {
        Person p=(Person)model.get(""String_Node_Str"");
        if (p == null)         p=Context.getPersonService().getPerson(personId);
        model.put(""String_Node_Str"",p);
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_MANAGE_RELATIONSHIPS)) {
          List<Relationship> relationships=new ArrayList<Relationship>();
          relationships.addAll(Context.getPersonService().getRelationships(p,false));
          Map<RelationshipType,List<Relationship>> relationshipsByType=new HashMap<RelationshipType,List<Relationship>>();
          for (          Relationship rel : relationships) {
            List<Relationship> list=relationshipsByType.get(rel.getRelationshipType());
            if (list == null) {
              list=new ArrayList<Relationship>();
              relationshipsByType.put(rel.getRelationshipType(),list);
            }
            list.add(rel);
          }
          model.put(""String_Node_Str"",relationships);
          model.put(""String_Node_Str"",relationshipsByType);
        }
      }
    }
    o=request.getAttribute(""String_Node_Str"");
    if (o != null && !model.containsKey(""String_Node_Str"")) {
      if (!model.containsKey(""String_Node_Str"")) {
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_ENCOUNTERS)) {
          Encounter e=Context.getEncounterService().getEncounter((Integer)o);
          model.put(""String_Node_Str"",e);
          if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_OBS))           model.put(""String_Node_Str"",Context.getObsService().getObservations(e));
        }
        model.put(""String_Node_Str"",(Integer)o);
      }
    }
    o=request.getAttribute(""String_Node_Str"");
    if (o != null) {
      if (!model.containsKey(""String_Node_Str"")) {
        if (Context.hasPrivilege(OpenmrsConstants.PRIV_VIEW_USERS)) {
          User u=Context.getUserService().getUser((Integer)o);
          model.put(""String_Node_Str"",u);
        }
        model.put(""String_Node_Str"",(Integer)o);
      }
    }
    o=request.getAttribute(""String_Node_Str"");
    if (o != null && !""String_Node_Str"".equals(o) && !model.containsKey(""String_Node_Str"")) {
      if (!model.containsKey(""String_Node_Str"")) {
        Cohort ps=new Cohort((String)o);
        model.put(""String_Node_Str"",ps);
        model.put(""String_Node_Str"",(String)o);
      }
    }
    o=model.get(""String_Node_Str"");
    if (o != null && !""String_Node_Str"".equals(o)) {
      if (!model.containsKey(""String_Node_Str"")) {
        log.debug(""String_Node_Str"" + o);
        Map<Integer,Concept> concepts=new HashMap<Integer,Concept>();
        Map<String,Concept> conceptsByStringIds=new HashMap<String,Concept>();
        String conceptIds=(String)o;
        String[] ids=conceptIds.split(""String_Node_Str"");
        for (        String cId : ids) {
          try {
            Integer i=Integer.valueOf(cId);
            Concept c=cs.getConcept(i);
            concepts.put(i,c);
            conceptsByStringIds.put(i.toString(),c);
          }
 catch (          Exception ex) {
          }
        }
        model.put(""String_Node_Str"",concepts);
        model.put(""String_Node_Str"",conceptsByStringIds);
      }
    }
    populateModel(request,model);
    log.debug(portletPath + ""String_Node_Str"" + (System.currentTimeMillis() - timeAtStart)+ ""String_Node_Str"");
  }
  return new ModelAndView(portletPath,""String_Node_Str"",model);
}"
84593,"public List<DrugOrder> getDrugOrders(String drugSetName){
  Map<Integer,List<DrugOrder>> patientIdDrugOrderMap;
  if (drugOrderMap.containsKey(drugSetName)) {
    patientIdDrugOrderMap=drugOrderMap.get(drugSetName);
  }
 else {
    Concept drugSet=conceptService.getConceptByName(drugSetName);
    patientIdDrugOrderMap=patientSetService.getCurrentDrugOrders(getPatientSetIfNotAllPatients(),drugSet);
    drugOrderMap.put(drugSetName,patientIdDrugOrderMap);
  }
  return patientIdDrugOrderMap.get(patientId);
}","public List<DrugOrder> getDrugOrders(String drugSetName){
  Map<Integer,List<DrugOrder>> patientIdDrugOrderMap;
  if (drugOrderMap.containsKey(drugSetName)) {
    patientIdDrugOrderMap=drugOrderMap.get(drugSetName);
  }
 else {
    Concept drugSet=conceptService.getConceptByName(drugSetName);
    patientIdDrugOrderMap=patientSetService.getDrugOrders(getPatientSetIfNotAllPatients(),drugSet);
    drugOrderMap.put(drugSetName,patientIdDrugOrderMap);
  }
  return patientIdDrugOrderMap.get(patientId);
}"
84594,"/** 
 * @see org.openmrs.scheduler.SchedulerService#getStatus(java.lang.Integer)
 */
@Override public String getStatus(Integer id){
  TimerSchedulerTask scheduledTask=scheduledTasks.get(id);
  if (scheduledTask != null) {
    if (scheduledTask.scheduledExecutionTime() > 0) {
      return ""String_Node_Str"" + new Date(scheduledTask.scheduledExecutionTime());
    }
 else {
      return ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"";
}","/** 
 * @see org.openmrs.scheduler.SchedulerService#getStatus(java.lang.Integer)
 */
public String getStatus(Integer id){
  TimerSchedulerTask scheduledTask=scheduledTasks.get(id);
  if (scheduledTask != null) {
    if (scheduledTask.scheduledExecutionTime() > 0) {
      return ""String_Node_Str"" + new Date(scheduledTask.scheduledExecutionTime());
    }
 else {
      return ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"";
}"
84595,"/** 
 * Get the first occurence of matching <code>obs.concept</code> out of the patient's encounters
 * @param concept
 * @param attrs the List of attributes to fetch
 * @return
 * @throws Exception
 */
public List<Object> getFirstObsWithValues(Concept concept,List<String> attrs) throws Exception {
  attrs.add(0,null);
  List<List<Object>> obs=getObsWithValues(concept,attrs);
  if (obs == null) {
    List<Object> blankRow=new Vector<Object>();
    for (    String attr : attrs)     blankRow.add(""String_Node_Str"");
    return blankRow;
  }
  if (obs.size() > 0) {
    return obs.get(0);
  }
  log.info(""String_Node_Str"" + concept + ""String_Node_Str""+ patientId);
  return null;
}","/** 
 * Get the first occurence of matching <code>obs.concept</code> out of the patient's encounters
 * @param concept
 * @param attrs the List of attributes to fetch
 * @return
 * @throws Exception
 */
public List<Object> getFirstObsWithValues(Concept concept,List<String> attrs) throws Exception {
  attrs.add(0,null);
  List<List<Object>> obs=getObsWithValues(concept,attrs);
  if (obs == null) {
    List<Object> blankRow=new Vector<Object>();
    for (    String attr : attrs)     blankRow.add(""String_Node_Str"");
    return blankRow;
  }
  if (obs.size() > 0) {
    return obs.get(obs.size() - 1);
  }
  log.info(""String_Node_Str"" + concept + ""String_Node_Str""+ patientId);
  return null;
}"
84596,"/** 
 * @see org.openmrs.api.db.PatientService#getRelationships(org.openmrs.Person)
 */
@SuppressWarnings(""String_Node_Str"") public List<Relationship> getRelationships(Person person,boolean showVoided) throws DAOException {
  Query query=null;
  List<Relationship> relationships=new Vector<Relationship>();
  if (person == null)   return relationships;
  String voided=showVoided ? ""String_Node_Str"" : ""String_Node_Str"";
  query=sessionFactory.getCurrentSession().createQuery(""String_Node_Str"" + voided + ""String_Node_Str"").setParameter(""String_Node_Str"",person).setParameter(""String_Node_Str"",person);
  if (query != null)   relationships=query.list();
  return relationships;
}","/** 
 * @see org.openmrs.api.db.PatientService#getRelationships(org.openmrs.Person)
 */
@SuppressWarnings(""String_Node_Str"") public List<Relationship> getRelationships(Person person,boolean showVoided) throws DAOException {
  Criteria criteria=sessionFactory.getCurrentSession().createCriteria(Relationship.class,""String_Node_Str"").add(Expression.or(Expression.eq(""String_Node_Str"",person),Expression.eq(""String_Node_Str"",person)));
  if (!showVoided) {
    criteria.add(Expression.eq(""String_Node_Str"",showVoided));
  }
  return criteria.list();
}"
84597,"public PatientSet filterInverse(PatientSet input){
  List<Integer> drugIds=new ArrayList<Integer>();
  for (  Drug d : getDrugListToUse())   drugIds.add(d.getDrugId());
  PatientSet ps=Context.getPatientSetService().getPatientsHavingDrugOrder(input.getPatientIds(),drugIds,getAnyOrAll(),OpenmrsUtil.fromDateHelper(null,getWithinLastDays(),getWithinLastMonths(),getUntilDaysAgo(),getUntilMonthsAgo(),getSinceDate(),getUntilDate()),OpenmrsUtil.fromDateHelper(null,getWithinLastDays(),getWithinLastMonths(),getUntilDaysAgo(),getUntilMonthsAgo(),getSinceDate(),getUntilDate()));
  return input.subtract(ps);
}","public PatientSet filterInverse(PatientSet input){
  List<Integer> drugIds=new ArrayList<Integer>();
  for (  Drug d : getDrugListToUse())   drugIds.add(d.getDrugId());
  PatientSet ps=Context.getPatientSetService().getPatientsHavingDrugOrder(input.getPatientIds(),drugIds,getAnyOrAll(),OpenmrsUtil.fromDateHelper(null,getWithinLastDays(),getWithinLastMonths(),getUntilDaysAgo(),getUntilMonthsAgo(),getSinceDate(),getUntilDate()),OpenmrsUtil.toDateHelper(null,getWithinLastDays(),getWithinLastMonths(),getUntilDaysAgo(),getUntilMonthsAgo(),getSinceDate(),getUntilDate()));
  return input.subtract(ps);
}"
84598,"/** 
 * Callback method that tells the task that it has stopped executing.
 */
public void stopExecuting(){
  log.info(""String_Node_Str"" + taskDefinition.getName() + ""String_Node_Str"");
  this.isExecuting=false;
}","/** 
 * Callback method that tells the task that it has stopped executing.
 */
public void stopExecuting(){
  this.isExecuting=false;
}"
84599,"/** 
 * Authenticate the context so the task can call service layer.
 */
protected void authenticate(){
  log.info(""String_Node_Str"" + taskDefinition.getName() + ""String_Node_Str"");
  try {
    AdministrationService adminService=Context.getAdministrationService();
    Context.authenticate(adminService.getGlobalProperty(""String_Node_Str""),adminService.getGlobalProperty(""String_Node_Str""));
  }
 catch (  ContextAuthenticationException e) {
    log.error(""String_Node_Str"",e);
  }
}","/** 
 * Authenticate the context so the task can call service layer.
 */
protected void authenticate(){
  try {
    AdministrationService adminService=Context.getAdministrationService();
    Context.authenticate(adminService.getGlobalProperty(""String_Node_Str""),adminService.getGlobalProperty(""String_Node_Str""));
  }
 catch (  ContextAuthenticationException e) {
    log.error(""String_Node_Str"",e);
  }
}"
84600,"/** 
 * Callback method that tells the task that it has started executing.
 */
public void startExecuting(){
  log.info(""String_Node_Str"" + taskDefinition.getName() + ""String_Node_Str"");
  this.isExecuting=true;
}","/** 
 * Callback method that tells the task that it has started executing.
 */
public void startExecuting(){
  this.isExecuting=true;
}"
84601,"/** 
 * @see org.openmrs.scheduler.Task#initialize(org.openmrs.scheduler.TaskConfig)
 */
public void initialize(final TaskDefinition definition){
  log.info(""String_Node_Str"" + definition.getName() + ""String_Node_Str"");
  this.taskDefinition=definition;
}","/** 
 * @see org.openmrs.scheduler.Task#initialize(org.openmrs.scheduler.TaskConfig)
 */
public void initialize(final TaskDefinition definition){
  this.taskDefinition=definition;
}"
84602,"/** 
 * @see org.openmrs.scheduler.Task#shutdown()
 */
public void shutdown(){
  log.info(""String_Node_Str"" + taskDefinition.getName() + ""String_Node_Str"");
  taskDefinition=null;
}","/** 
 * @see org.openmrs.scheduler.Task#shutdown()
 */
public void shutdown(){
  taskDefinition=null;
}"
84603,"/** 
 * This method will find and cache this module's servlets (so that it doesn't have to look them up every time)
 * @param mod
 * @return this module's servlet map
 */
public static Map<String,HttpServlet> loadServlets(Module mod){
  Element rootNode=mod.getConfig().getDocumentElement();
  NodeList servletTags=rootNode.getElementsByTagName(""String_Node_Str"");
  Map<String,HttpServlet> servletMap=new HashMap<String,HttpServlet>();
  for (int i=0; i < servletTags.getLength(); i++) {
    Node node=servletTags.item(i);
    NodeList childNodes=node.getChildNodes();
    String name=""String_Node_Str"", className=""String_Node_Str"";
    for (int j=0; j < childNodes.getLength(); j++) {
      Node childNode=childNodes.item(j);
      if (""String_Node_Str"".equals(childNode.getNodeName()))       name=childNode.getTextContent();
 else       if (""String_Node_Str"".equals(childNode.getNodeName()))       className=childNode.getTextContent();
    }
    if (name.length() == 0 || className.length() == 0) {
      log.warn(""String_Node_Str"" + name + ""String_Node_Str""+ className+ ""String_Node_Str""+ mod.getName());
      continue;
    }
    HttpServlet httpServlet=null;
    try {
      httpServlet=(HttpServlet)ModuleFactory.getModuleClassLoader(mod).loadClass(className).newInstance();
    }
 catch (    ClassNotFoundException e) {
      log.warn(""String_Node_Str"" + name + ""String_Node_Str""+ mod.getName(),e);
      continue;
    }
catch (    IllegalAccessException e) {
      log.warn(""String_Node_Str"" + name + ""String_Node_Str""+ mod.getName(),e);
      continue;
    }
catch (    InstantiationException e) {
      log.warn(""String_Node_Str"" + name + ""String_Node_Str""+ mod.getName(),e);
      continue;
    }
    servletMap.put(name,httpServlet);
  }
  moduleServlets.put(mod,servletMap);
  return servletMap;
}","/** 
 * This method will find and cache this module's servlets (so that it doesn't have to look them up every time)
 * @param mod
 * @return this module's servlet map
 */
public static Map<String,HttpServlet> loadServlets(Module mod){
  Element rootNode=mod.getConfig().getDocumentElement();
  NodeList servletTags=rootNode.getElementsByTagName(""String_Node_Str"");
  Map<String,HttpServlet> servletMap=new HashMap<String,HttpServlet>();
  for (int i=0; i < servletTags.getLength(); i++) {
    Node node=servletTags.item(i);
    NodeList childNodes=node.getChildNodes();
    String name=""String_Node_Str"", className=""String_Node_Str"";
    for (int j=0; j < childNodes.getLength(); j++) {
      Node childNode=childNodes.item(j);
      if (""String_Node_Str"".equals(childNode.getNodeName())) {
        if (childNode.getTextContent() != null)         name=childNode.getTextContent().trim();
      }
 else       if (""String_Node_Str"".equals(childNode.getNodeName())) {
        if (childNode.getTextContent() != null)         className=childNode.getTextContent().trim();
      }
    }
    if (name.length() == 0 || className.length() == 0) {
      log.warn(""String_Node_Str"" + name + ""String_Node_Str""+ className+ ""String_Node_Str""+ mod.getName());
      continue;
    }
    HttpServlet httpServlet=null;
    try {
      httpServlet=(HttpServlet)ModuleFactory.getModuleClassLoader(mod).loadClass(className).newInstance();
    }
 catch (    ClassNotFoundException e) {
      log.warn(""String_Node_Str"" + name + ""String_Node_Str""+ mod.getName(),e);
      continue;
    }
catch (    IllegalAccessException e) {
      log.warn(""String_Node_Str"" + name + ""String_Node_Str""+ mod.getName(),e);
      continue;
    }
catch (    InstantiationException e) {
      log.warn(""String_Node_Str"" + name + ""String_Node_Str""+ mod.getName(),e);
      continue;
    }
    servletMap.put(name,httpServlet);
  }
  moduleServlets.put(mod,servletMap);
  return servletMap;
}"
84604,"protected void modifyCollections(Concept c){
  User authUser=Context.getAuthenticatedUser();
  Date timestamp=new Date();
  if (c.getCreator() == null) {
    c.setCreator(authUser);
    c.setDateCreated(timestamp);
  }
 else {
    c.setChangedBy(authUser);
    c.setDateChanged(timestamp);
  }
  if (c.getNames() != null) {
    for (    ConceptName cn : c.getNames()) {
      if (cn.getCreator() == null) {
        cn.setCreator(authUser);
        cn.setDateCreated(timestamp);
      }
    }
  }
  for (  ConceptSynonym syn : c.getSynonyms()) {
    if (syn.getCreator() == null) {
      syn.setCreator(authUser);
      syn.setDateCreated(timestamp);
    }
    syn.setConcept(c);
  }
  if (c.getConceptSets() != null) {
    for (    ConceptSet set : c.getConceptSets()) {
      if (set.getCreator() == null) {
        set.setCreator(authUser);
        set.setDateCreated(timestamp);
      }
      set.setConceptSet(c);
    }
  }
  if (c.getAnswers(true) != null) {
    for (    ConceptAnswer ca : c.getAnswers(true)) {
      if (ca.getCreator() == null) {
        ca.setCreator(authUser);
        ca.setDateCreated(timestamp);
      }
      ca.setConcept(c);
    }
  }
}","protected void modifyCollections(Concept c){
  User authUser=Context.getAuthenticatedUser();
  Date timestamp=new Date();
  if (c.getCreator() == null) {
    c.setCreator(authUser);
    if (c.getDateCreated() == null)     c.setDateCreated(timestamp);
  }
 else {
    c.setChangedBy(authUser);
    if (c.getDateChanged() == null)     c.setDateChanged(timestamp);
  }
  if (c.getNames() != null) {
    for (    ConceptName cn : c.getNames()) {
      if (cn.getCreator() == null) {
        cn.setCreator(authUser);
        if (cn.getDateCreated() == null)         cn.setDateCreated(timestamp);
      }
    }
  }
  for (  ConceptSynonym syn : c.getSynonyms()) {
    if (syn.getCreator() == null) {
      syn.setCreator(authUser);
      if (syn.getDateCreated() == null)       syn.setDateCreated(timestamp);
    }
    syn.setConcept(c);
  }
  if (c.getConceptSets() != null) {
    for (    ConceptSet set : c.getConceptSets()) {
      if (set.getCreator() == null) {
        set.setCreator(authUser);
        if (set.getDateCreated() == null)         set.setDateCreated(timestamp);
      }
      set.setConceptSet(c);
    }
  }
  if (c.getAnswers(true) != null) {
    for (    ConceptAnswer ca : c.getAnswers(true)) {
      if (ca.getCreator() == null) {
        ca.setCreator(authUser);
        if (ca.getDateCreated() == null)         ca.setDateCreated(timestamp);
      }
      ca.setConcept(c);
    }
  }
}"
84605,"public void save(ActionEvent actionEvent){
  FacesContext context=FacesContext.getCurrentInstance();
  CategoryBean bean=(CategoryBean)context.getApplication().evaluateExpressionGet(context,""String_Node_Str"",CategoryBean.class);
  if (selectedNode != null) {
    category.setParent((Category)selectedNode.getData());
    new DefaultTreeNode(category,selectedNode);
    selectedNode.setExpanded(true);
  }
 else {
    new DefaultTreeNode(category,bean.getRoot());
  }
  categoryService.createNew(category);
  FacesMessage facesMessage=new FacesMessage(FacesMessage.SEVERITY_INFO,""String_Node_Str"",""String_Node_Str"");
  FacesContext.getCurrentInstance().addMessage(null,facesMessage);
  category=new Category();
}","public void save(ActionEvent actionEvent){
  FacesContext context=FacesContext.getCurrentInstance();
  CategoryBean bean=(CategoryBean)context.getApplication().evaluateExpressionGet(context,""String_Node_Str"",CategoryBean.class);
  if (selectedNode != null) {
    category.setParent((Category)selectedNode.getData());
    new DefaultTreeNode(category,selectedNode).setSelected(false);
    selectedNode.setExpanded(true);
    selectedNode.setSelected(false);
  }
 else {
    new DefaultTreeNode(category,bean.getRoot());
  }
  categoryService.createNew(category);
  FacesMessage facesMessage=new FacesMessage(FacesMessage.SEVERITY_INFO,""String_Node_Str"",""String_Node_Str"");
  FacesContext.getCurrentInstance().addMessage(null,facesMessage);
  category=new Category();
}"
84606,"public void createValueList(){
  if (!values.isEmpty() && valueList.isEmpty()) {
    valueList.addAll(values);
  }
}","public void createValueList(){
  if (this.valueList == null) {
    valueList=new ArrayList<ScenarioValue>();
  }
  if (!values.isEmpty() && valueList.isEmpty()) {
    valueList.addAll(values);
  }
}"
84607,"public static XStream getConfiguredXStream(){
  XStream xstream=new XStream();
  xstream.alias(""String_Node_Str"",Scenario.class);
  xstream.alias(""String_Node_Str"",Scenarios.class);
  xstream.alias(""String_Node_Str"",Scenario.ScenarioValue.class);
  xstream.addImplicitCollection(Scenarios.class,""String_Node_Str"");
  xstream.addImplicitCollection(Scenario.class,""String_Node_Str"");
  xstream.useAttributeFor(Scenario.class,""String_Node_Str"");
  xstream.aliasField(""String_Node_Str"",Scenario.class,""String_Node_Str"");
  xstream.useAttributeFor(Scenario.class,""String_Node_Str"");
  xstream.useAttributeFor(Scenario.ScenarioValue.class,""String_Node_Str"");
  xstream.useAttributeFor(Scenario.ScenarioValue.class,""String_Node_Str"");
  xstream.aliasField(""String_Node_Str"",Scenario.ScenarioValue.class,""String_Node_Str"");
  return xstream;
}","public static XStream getConfiguredXStream(){
  XStream xstream=new XStream();
  xstream.alias(""String_Node_Str"",Scenario.class);
  xstream.alias(""String_Node_Str"",Scenarios.class);
  xstream.alias(""String_Node_Str"",Scenario.ScenarioValue.class);
  xstream.addImplicitCollection(Scenarios.class,""String_Node_Str"");
  xstream.addImplicitCollection(Scenario.class,""String_Node_Str"");
  xstream.useAttributeFor(Scenario.class,""String_Node_Str"");
  xstream.aliasField(""String_Node_Str"",Scenario.class,""String_Node_Str"");
  xstream.useAttributeFor(Scenario.class,""String_Node_Str"");
  xstream.useAttributeFor(Scenario.ScenarioValue.class,""String_Node_Str"");
  xstream.useAttributeFor(Scenario.ScenarioValue.class,""String_Node_Str"");
  xstream.aliasField(""String_Node_Str"",Scenario.ScenarioValue.class,""String_Node_Str"");
  xstream.omitField(Scenario.class,""String_Node_Str"");
  return xstream;
}"
84608,"/** 
 * entry point for Scenario Generator Application
 * @param args
 */
public static void main(String[] args){
  OptionParser optParser=new OptionParser();
  OptionSpec<Integer> optScen=optParser.accepts(""String_Node_Str"").withRequiredArg().ofType(Integer.class);
  OptionSpec<Double> optA=optParser.accepts(""String_Node_Str"").withRequiredArg().ofType(Double.class);
  OptionSpec<Double> optB=optParser.accepts(""String_Node_Str"").withRequiredArg().ofType(Double.class);
  OptionSpec<Double> optS=optParser.accepts(""String_Node_Str"").withRequiredArg().ofType(Double.class);
  OptionSet optSet=optParser.parse(args);
  double a=0;
  double b=0;
  double s=0;
  int scenNum=10000;
  if (optSet.hasArgument(optScen)) {
    scenNum=optSet.valueOf(optScen);
  }
  if (optSet.hasArgument(optA) && optSet.hasArgument(optB) && optSet.hasArgument(optS)) {
    a=optSet.valueOf(optA);
    b=optSet.valueOf(optB);
    s=optSet.valueOf(optS);
    if (Math.abs(a) < 0.0000000001 || Math.abs(b) < 0.0000000001 || Math.abs(s) < 0.0000000001) {
      System.out.println(""String_Node_Str"");
      return;
    }
    ScenGen scenGenerator=new ScenGen(scenNum,a,b,s);
    scenGenerator.generate();
    scenGenerator.windSpeedForecastErrorScenarios.writeToXML(errorScenarioFile);
  }
  Scenarios errorScen=Scenarios.getScenarios(errorScenarioFile);
  WsData windSpeedForecastData=WsData.getWsData(wsForecastFile);
  Map<Integer,Double> mapLeadHourToWindSpeed=new HashMap<Integer,Double>();
  Map<Integer,Double> mapLeadHourToTemp=new HashMap<Integer,Double>();
  for (int i=0; i < 24; i++) {
    double wspeed=windSpeedForecastData.getForecastWindSpeed(i + 1);
    double temp=windSpeedForecastData.getForecastTemperature(i + 1);
    if (wspeed < -9999.0) {
      wspeed=0;
      temp=0;
    }
    mapLeadHourToWindSpeed.put(i + 1,wspeed);
    mapLeadHourToTemp.put(i + 1,temp);
  }
  Scenarios windSpeedScenarios=new Scenarios();
  for (  Scenario es : errorScen.getScenarios()) {
    double p=es.getProbability();
    int sn=es.getScenarioNumber();
    List<ScenarioValue> svs=es.getValueList();
    Scenario windSpeedForecastScenario=new Scenario(sn,p);
    for (    ScenarioValue sv : svs) {
      int hr=sv.getHour();
      double err=sv.getValue();
      double windSpeedValue=mapLeadHourToWindSpeed.get(hr) + err;
      ScenarioValue wsScenVal=new ScenarioValue(hr,windSpeedValue);
      windSpeedForecastScenario.addValue(wsScenVal);
    }
    windSpeedScenarios.addScenario(windSpeedForecastScenario);
  }
  Scenarios powerOutputScenarios=new Scenarios();
  WindPark wpark=new WindPark();
  for (  Scenario wsp : windSpeedScenarios.getScenarios()) {
    double p=wsp.getProbability();
    int sn=wsp.getScenarioNumber();
    List<ScenarioValue> svs=wsp.getValueList();
    Scenario powerOutputScenario=new Scenario(sn,p);
    for (    ScenarioValue sv : svs) {
      int hr=sv.getHour();
      double wspForecast=sv.getValue();
      double temperature=mapLeadHourToTemp.get(hr);
      double windParkOutput=wpark.getPowerOutput(temperature,wspForecast);
      ScenarioValue wpScenVal=new ScenarioValue(hr,windParkOutput);
      powerOutputScenario.addValue(wpScenVal);
    }
    powerOutputScenarios.addScenario(powerOutputScenario);
  }
  powerOutputScenarios.writeToXML(wpScenarioFile);
  System.out.println(""String_Node_Str"");
  return;
}","/** 
 * entry point for Scenario Generator Application
 * @param args
 */
public static void main(String[] args){
  OptionParser optParser=new OptionParser();
  OptionSpec<Integer> optScen=optParser.accepts(""String_Node_Str"").withRequiredArg().ofType(Integer.class);
  OptionSpec<Double> optA=optParser.accepts(""String_Node_Str"").withRequiredArg().ofType(Double.class);
  OptionSpec<Double> optB=optParser.accepts(""String_Node_Str"").withRequiredArg().ofType(Double.class);
  OptionSpec<Double> optS=optParser.accepts(""String_Node_Str"").withRequiredArg().ofType(Double.class);
  OptionSet optSet=optParser.parse(args);
  double a=0;
  double b=0;
  double s=0;
  int scenNum=10000;
  if (optSet.hasArgument(optScen)) {
    scenNum=optSet.valueOf(optScen);
  }
  if (optSet.hasArgument(optA) && optSet.hasArgument(optB) && optSet.hasArgument(optS)) {
    a=optSet.valueOf(optA);
    b=optSet.valueOf(optB);
    s=optSet.valueOf(optS);
    if (Math.abs(a) < 0.0000000001 || Math.abs(b) < 0.0000000001 || Math.abs(s) < 0.0000000001) {
      System.out.println(""String_Node_Str"");
      return;
    }
    ScenGen scenGenerator=new ScenGen(scenNum,a,b,s);
    scenGenerator.generate();
    scenGenerator.windSpeedForecastErrorScenarios.writeToXML(errorScenarioFile);
  }
  Scenarios errorScen=Scenarios.getScenarios(errorScenarioFile);
  WsData windSpeedForecastData=WsData.getWsData(wsForecastFile);
  if (windSpeedForecastData == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  Map<Integer,Double> mapLeadHourToWindSpeed=new HashMap<Integer,Double>();
  Map<Integer,Double> mapLeadHourToTemp=new HashMap<Integer,Double>();
  for (int i=0; i < 24; i++) {
    double wspeed=windSpeedForecastData.getForecastWindSpeed(i + 1);
    double temp=windSpeedForecastData.getForecastTemperature(i + 1);
    if (wspeed < -9999.0) {
      wspeed=0;
      temp=0;
    }
    mapLeadHourToWindSpeed.put(i + 1,wspeed);
    mapLeadHourToTemp.put(i + 1,temp);
  }
  Scenarios windSpeedScenarios=new Scenarios();
  for (  Scenario es : errorScen.getScenarios()) {
    double p=es.getProbability();
    int sn=es.getScenarioNumber();
    List<ScenarioValue> svs=es.getValueList();
    Scenario windSpeedForecastScenario=new Scenario(sn,p);
    for (    ScenarioValue sv : svs) {
      int hr=sv.getHour();
      double err=sv.getValue();
      double windSpeedValue=mapLeadHourToWindSpeed.get(hr) + err;
      ScenarioValue wsScenVal=new ScenarioValue(hr,windSpeedValue);
      windSpeedForecastScenario.addValue(wsScenVal);
    }
    windSpeedScenarios.addScenario(windSpeedForecastScenario);
  }
  Scenarios powerOutputScenarios=new Scenarios();
  WindPark wpark=new WindPark();
  for (  Scenario wsp : windSpeedScenarios.getScenarios()) {
    double p=wsp.getProbability();
    int sn=wsp.getScenarioNumber();
    List<ScenarioValue> svs=wsp.getValueList();
    Scenario powerOutputScenario=new Scenario(sn,p);
    for (    ScenarioValue sv : svs) {
      int hr=sv.getHour();
      double wspForecast=sv.getValue();
      double temperature=mapLeadHourToTemp.get(hr);
      double windParkOutput=wpark.getPowerOutput(temperature,wspForecast);
      ScenarioValue wpScenVal=new ScenarioValue(hr,windParkOutput);
      powerOutputScenario.addValue(wpScenVal);
    }
    powerOutputScenarios.addScenario(powerOutputScenario);
  }
  powerOutputScenarios.writeToXML(wpScenarioFile);
  System.out.println(""String_Node_Str"");
  return;
}"
84609,"public void createValueList(){
  if (!values.isEmpty()) {
    valueList.addAll(values);
  }
}","public void createValueList(){
  if (!values.isEmpty() && valueList.isEmpty()) {
    valueList.addAll(values);
  }
}"
84610,"public boolean addScenario(Scenario sco){
  return scenarioSet.add(sco);
}","public boolean addScenario(Scenario sco){
  sco.createValueList();
  return scenarioSet.add(sco);
}"
84611,"@Override public void report(){
  for (  Map.Entry<Integer,ClearedTrade[]> entry : data.entrySet()) {
    String delim=""String_Node_Str"";
    for (    ClearedTrade trade : entry.getValue()) {
      if (null == trade) {
        output.print(delim + ""String_Node_Str"");
      }
 else {
        output.format(""String_Node_Str"",delim,trade.getExecutionMWh(),trade.getExecutionPrice());
      }
      delim=""String_Node_Str"";
    }
    output.println();
  }
}","@Override public void report(){
  for (  Map.Entry<Integer,ClearedTrade[]> entry : data.entrySet()) {
    String delim=""String_Node_Str"";
    ClearedTrade[] trades=entry.getValue();
    if (trades.length != 24)     log.error(""String_Node_Str"" + trades.length);
    for (int i=0; i < trades.length; i++) {
      if (null == trades[i]) {
        output.print(delim + ""String_Node_Str"");
      }
 else {
        output.format(""String_Node_Str"",delim,trades[i].getExecutionMWh(),trades[i].getExecutionPrice());
      }
      delim=""String_Node_Str"";
    }
    output.println();
  }
  output.close();
}"
84612,"@Override public void setup(){
  dor=(DomainObjectReader)getBean(""String_Node_Str"");
  timeslotRepo=(TimeslotRepo)getBean(""String_Node_Str"");
  timeService=(TimeService)getBean(""String_Node_Str"");
  dor.registerNewObjectListener(new TimeslotUpdateHandler(),TimeslotUpdate.class);
  dor.registerNewObjectListener(new ClearedTradeHandler(),ClearedTrade.class);
  ignoreCount=ignoreInitial;
  data=new TreeMap<Integer,ClearedTrade[]>();
  try {
    output=new PrintWriter(new File(dataFilename));
  }
 catch (  FileNotFoundException e) {
    log.error(""String_Node_Str"" + dataFilename);
  }
}","@Override public void setup(){
  timeslotRepo=(TimeslotRepo)getBean(""String_Node_Str"");
  timeService=(TimeService)getBean(""String_Node_Str"");
  registerNewObjectListener(new TimeslotUpdateHandler(),TimeslotUpdate.class);
  registerNewObjectListener(new ClearedTradeHandler(),ClearedTrade.class);
  ignoreCount=ignoreInitial;
  data=new TreeMap<Integer,ClearedTrade[]>();
  try {
    output=new PrintWriter(new File(dataFilename));
  }
 catch (  FileNotFoundException e) {
    log.error(""String_Node_Str"" + dataFilename);
  }
}"
84613,"@Before public void setUp() throws Exception {
  dor=new DomainObjectReader();
}","@Before public void setUp() throws Exception {
}"
84614,"@Test public void extractCodeLocationsOfStringWith2AnsiCodes() throws Exception {
  assertEquals(3,AnsiCodesReader.extractCodeLocations(""String_Node_Str"").size());
  assertEquals(3,AnsiCodesReader.extractCodeLocations(""String_Node_Str"").size());
}","@Test public void extractCodeLocationsOfStringWith2AnsiCodes() throws Exception {
  assertEquals(3,AnsiCodesReader.extractCodeLocations(""String_Node_Str"").size());
  assertEquals(3,AnsiCodesReader.extractCodeLocations(""String_Node_Str"").size());
  assertEquals(3,AnsiCodesReader.extractCodeLocations(""String_Node_Str"").size());
  assertEquals(3,AnsiCodesReader.extractCodeLocations(""String_Node_Str"").size());
}"
84615,"/** 
 * ""CSI n [;k] m"" Sets SGR parameters, including text color. After CSI can be zero or more parameters separated with ;. With no parameters, CSI m is treated as CSI 0 m (reset / normal), which is typical of most of the ANSI escape sequences.
 */
static List<CodeLocation> extractCodeLocations(String str) throws Exception {
  ArrayList<CodeLocation> back=new ArrayList<CodeLocation>();
  if (str == null) {
    return back;
  }
  Matcher m=finder.matcher(str);
  int offset=0;
  int maxOffset=str.length() - 3;
  while (offset < maxOffset && m.find(offset)) {
    String n=m.group(2);
    int code=(n.length() == 0) ? 0 : Integer.parseInt(n);
    if (m.group(4) == null) {
      back.add(new CodeLocation(code,m.start(),m.end() - 1));
    }
 else {
      back.add(new CodeLocation(code,m.start(),m.start(4) - 1));
      back.add(new CodeLocation(Integer.parseInt(m.group(4)),m.start(4),m.end() - 1));
    }
    offset=m.end() + 1;
  }
  return back;
}","/** 
 * ""CSI n [;k] m"" Sets SGR parameters, including text color. After CSI can be zero or more parameters separated with ;. With no parameters, CSI m is treated as CSI 0 m (reset / normal), which is typical of most of the ANSI escape sequences.
 */
static List<CodeLocation> extractCodeLocations(String str) throws Exception {
  ArrayList<CodeLocation> back=new ArrayList<CodeLocation>();
  if (str == null) {
    return back;
  }
  Matcher m=finder.matcher(str);
  int offset=0;
  int maxOffset=str.length() - 3;
  while (offset < maxOffset && m.find(offset)) {
    String n=m.group(2);
    int code=(n.length() == 0) ? 0 : Integer.parseInt(n);
    if (m.group(4) == null) {
      back.add(new CodeLocation(code,m.start(),m.end() - 1));
    }
 else {
      back.add(new CodeLocation(code,m.start(),m.start(4) - 1));
      back.add(new CodeLocation(Integer.parseInt(m.group(4)),m.start(4),m.end() - 1));
    }
    offset=m.end();
  }
  return back;
}"
84616,"public void mouseClicked(){
  world.mousePressed(mouseX,mouseY);
}","public void mouseClicked(){
  int action=world.mousePressed(mouseX,mouseY);
switch (action) {
case 1:
    change=true;
  nextScreen=new World(this);
break;
default :
break;
}
}"
84617,"public void draw(){
  background(0);
  world.update();
  world.display();
}","public void draw(){
  background(0);
  world.update();
  world.display();
  if (change) {
    world=nextScreen;
    change=false;
  }
}"
84618,"public void display(){
  parent.background(0);
  PImage bg=parent.loadImage(""String_Node_Str"");
  PImage start=parent.loadImage(""String_Node_Str"");
  PImage logo=parent.loadImage(""String_Node_Str"",""String_Node_Str"");
  PImage exit=parent.loadImage(""String_Node_Str"");
  parent.image(bg,0,0,parent.width,parent.height);
  parent.image(logo,0,0);
  parent.image(start,10,400);
  parent.image(exit,375,400);
}","public void display(){
  parent.background(0);
  PImage bg=parent.loadImage(""String_Node_Str"");
  PImage start=parent.loadImage(""String_Node_Str"");
  PImage exit=parent.loadImage(""String_Node_Str"");
  parent.image(bg,0,0,parent.width,parent.height);
  parent.image(start,10,400);
  parent.image(exit,375,400);
}"
84619,"public void mousePressed(int mouseX,int mouseY){
  if (10 <= mouseX && mouseX <= 376 && 400 <= mouseY && mouseY <= 516) {
  }
  if (375 <= mouseX && mouseX <= 736 && 400 <= mouseY && mouseY <= 516) {
    System.exit(0);
  }
}","public int mousePressed(int mouseX,int mouseY){
  if (10 <= mouseX && mouseX <= 376 && 400 <= mouseY && mouseY <= 516) {
    return 1;
  }
  if (375 <= mouseX && mouseX <= 736 && 400 <= mouseY && mouseY <= 516) {
    System.exit(0);
  }
  return 2;
}"
84620,"public Level(PApplet p,File file) throws FileNotFoundException {
  levelXML=new XMLElement(new FileReader(file)).getChild(""String_Node_Str"");
  for (int i=0; i < levelXML.getChildCount(); i++) {
    int x=Integer.parseInt(levelXML.getChild(i).getString(""String_Node_Str"").toString());
    int y=Integer.parseInt(levelXML.getChild(i).getString(""String_Node_Str"").toString());
    System.out.println(x + ""String_Node_Str"" + y);
  }
}","public Level(PApplet p,File file) throws FileNotFoundException {
  levelXML=new XMLElement(new FileReader(file)).getChild(""String_Node_Str"");
  levelList=new ArrayList<Brick>();
  for (int i=0; i < levelXML.getChildCount(); i++) {
    int x=Integer.parseInt(levelXML.getChild(i).getString(""String_Node_Str"").toString());
    int y=Integer.parseInt(levelXML.getChild(i).getString(""String_Node_Str"").toString());
    System.out.println(x + ""String_Node_Str"" + y);
    levelList.add(new Brick(p,x,y));
  }
}"
84621,"public World(PApplet p){
  people=new ArrayList<Person>();
  terrain=new ArrayList<Brick>();
  this.parent=p;
  people.add(new Person(parent,300,100));
  people.add(new Person(parent,260,100));
  people.add(new Person(parent,240,100));
  people.add(new Person(parent,300,100));
  terrain.add(new Brick(parent,20,20));
  terrain.add(new Brick(parent,24,20));
  terrain.add(new Brick(parent,28,20));
  terrain.add(new Brick(parent,32,20));
  terrain.add(new Brick(parent,36,20));
  terrain.add(new Brick(parent,40,20));
  terrain.add(new Brick(parent,44,20));
  terrain.add(new Brick(parent,48,20));
  terrain.add(new Brick(parent,52,20));
  terrain.add(new Brick(parent,52,21));
  terrain.add(new Brick(parent,52,22));
  terrain.add(new Brick(parent,52,23));
  terrain.add(new Brick(parent,56,23));
  terrain.add(new Brick(parent,60,23));
  terrain.add(new Brick(parent,64,23));
  terrain.add(new Brick(parent,68,23));
  terrain.add(new Brick(parent,68,22));
  terrain.add(new Brick(parent,68,21));
  terrain.add(new Brick(parent,34,20));
  terrain.add(new Brick(parent,22,20));
  terrain.add(new Brick(parent,26,20));
  terrain.add(new Brick(parent,30,20));
  terrain.add(new Brick(parent,38,20));
  terrain.add(new Brick(parent,42,20));
  terrain.add(new Brick(parent,46,20));
  terrain.add(new Brick(parent,50,20));
  terrain.add(new Brick(parent,54,20));
  terrain.add(new Brick(parent,54,21));
  terrain.add(new Brick(parent,54,22));
  terrain.add(new Brick(parent,54,23));
  terrain.add(new Brick(parent,58,23));
  terrain.add(new Brick(parent,62,23));
  terrain.add(new Brick(parent,66,23));
  terrain.add(new Brick(parent,70,23));
  terrain.add(new Brick(parent,70,22));
  terrain.add(new Brick(parent,70,21));
  background=parent.loadImage(""String_Node_Str"");
  Person.images.put(""String_Node_Str"",parent.loadImage(""String_Node_Str""));
  Brick.images.put(""String_Node_Str"",parent.loadImage(""String_Node_Str""));
  Iterator<Brick> it=terrain.iterator();
  while (it.hasNext()) {
    Brick currentBrick=it.next();
    for (int i=0; i < currentBrick.getWidth(); ++i) {
      for (int j=0; j < currentBrick.getHeight(); ++j) {
        collisionMap[i + currentBrick.getX()][j + currentBrick.getY()]=currentBrick;
      }
    }
  }
  gui=parent.loadImage(""String_Node_Str"");
  final Timer timer=new Timer();
  timeRemaining=20;
  timer.scheduleAtFixedRate(new TimerTask(){
    public void run(){
      timeRemaining--;
      if (timeRemaining < 0) {
        timer.cancel();
        System.exit(0);
      }
    }
  }
,0,1000);
  try {
    Level level=new Level(parent,new File(""String_Node_Str""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}","public World(PApplet p){
  people=new ArrayList<Person>();
  terrain=new ArrayList<Brick>();
  this.parent=p;
  try {
    Level level=new Level(parent,new File(""String_Node_Str""));
    terrain=level.getLevelList();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  people.add(new Person(parent,300,100));
  people.add(new Person(parent,260,100));
  people.add(new Person(parent,240,100));
  people.add(new Person(parent,300,100));
  terrain.add(new Brick(parent,20,20));
  terrain.add(new Brick(parent,24,20));
  terrain.add(new Brick(parent,28,20));
  terrain.add(new Brick(parent,32,20));
  terrain.add(new Brick(parent,36,20));
  terrain.add(new Brick(parent,40,20));
  terrain.add(new Brick(parent,44,20));
  terrain.add(new Brick(parent,48,20));
  terrain.add(new Brick(parent,52,20));
  terrain.add(new Brick(parent,52,21));
  terrain.add(new Brick(parent,52,22));
  terrain.add(new Brick(parent,52,23));
  terrain.add(new Brick(parent,56,23));
  terrain.add(new Brick(parent,60,23));
  terrain.add(new Brick(parent,64,23));
  terrain.add(new Brick(parent,68,23));
  terrain.add(new Brick(parent,68,22));
  terrain.add(new Brick(parent,68,21));
  terrain.add(new Brick(parent,34,20));
  terrain.add(new Brick(parent,22,20));
  terrain.add(new Brick(parent,26,20));
  terrain.add(new Brick(parent,30,20));
  terrain.add(new Brick(parent,38,20));
  terrain.add(new Brick(parent,42,20));
  terrain.add(new Brick(parent,46,20));
  terrain.add(new Brick(parent,50,20));
  terrain.add(new Brick(parent,54,20));
  terrain.add(new Brick(parent,54,21));
  terrain.add(new Brick(parent,54,22));
  terrain.add(new Brick(parent,54,23));
  terrain.add(new Brick(parent,58,23));
  terrain.add(new Brick(parent,62,23));
  terrain.add(new Brick(parent,66,23));
  terrain.add(new Brick(parent,70,23));
  terrain.add(new Brick(parent,70,22));
  terrain.add(new Brick(parent,70,21));
  background=parent.loadImage(""String_Node_Str"");
  Person.images.put(""String_Node_Str"",parent.loadImage(""String_Node_Str""));
  Brick.images.put(""String_Node_Str"",parent.loadImage(""String_Node_Str""));
  Iterator<Brick> it=terrain.iterator();
  while (it.hasNext()) {
    Brick currentBrick=it.next();
    for (int i=0; i < currentBrick.getWidth(); ++i) {
      for (int j=0; j < currentBrick.getHeight(); ++j) {
        collisionMap[i + currentBrick.getX()][j + currentBrick.getY()]=currentBrick;
      }
    }
  }
  gui=parent.loadImage(""String_Node_Str"");
  final Timer timer=new Timer();
  timeRemaining=20;
  timer.scheduleAtFixedRate(new TimerTask(){
    public void run(){
      timeRemaining--;
      if (timeRemaining < 0) {
        timer.cancel();
        System.exit(0);
      }
    }
  }
,0,1000);
}"
84622,"private void backtrack(long startTime,List<Lecture> initialLectures,List<Lecture> resolvedLectures,HashMap<Lecture,Placement> conflictsToResolve,int depth){
  int nrUnassigned=conflictsToResolve.size();
  if ((initialLectures == null || initialLectures.isEmpty()) && nrUnassigned == 0) {
    if (iSolution.getModel().assignedVariables().size() > iNrAssigned || (iSolution.getModel().assignedVariables().size() == iNrAssigned && iValue > iCmp.currentValue(iSolution))) {
      if (iSuggestionNeighbour == null || iSuggestionNeighbour.compareTo(iSolution) >= 0)       iSuggestionNeighbour=new SuggestionNeighbour(resolvedLectures);
    }
    return;
  }
  if (depth <= 0)   return;
  if (iSuggestionTimeout > 0 && JProf.currentTimeMillis() - startTime > iSuggestionTimeout) {
    return;
  }
  for (  Lecture lecture : initialLectures != null && !initialLectures.isEmpty() ? initialLectures : new ArrayList<Lecture>(conflictsToResolve.keySet())) {
    if (resolvedLectures.contains(lecture))     continue;
    resolvedLectures.add(lecture);
    for (    Placement placement : lecture.values()) {
      if (placement.equals(lecture.getAssignment()))       continue;
      if (placement.isHard())       continue;
      Set<Placement> conflicts=iSolution.getModel().conflictValues(placement);
      if (conflicts != null && (nrUnassigned + conflicts.size() > depth))       continue;
      if (conflicts != null && conflicts.contains(placement))       continue;
      if (containsCommited(conflicts))       continue;
      boolean containException=false;
      if (conflicts != null) {
        for (Iterator<Placement> i=conflicts.iterator(); !containException && i.hasNext(); ) {
          Placement c=i.next();
          if (resolvedLectures.contains((c.variable()).getClassId()))           containException=true;
        }
      }
      if (containException)       continue;
      Placement cur=lecture.getAssignment();
      if (conflicts != null) {
        for (Iterator<Placement> i=conflicts.iterator(); !containException && i.hasNext(); ) {
          Placement c=i.next();
          c.variable().unassign(0);
        }
      }
      if (cur != null)       cur.variable().unassign(0);
      for (Iterator<Placement> i=conflicts.iterator(); !containException && i.hasNext(); ) {
        Placement c=i.next();
        conflictsToResolve.put(c.variable(),c);
      }
      Placement resolvedConf=conflictsToResolve.remove(lecture);
      backtrack(startTime,null,resolvedLectures,conflictsToResolve,depth - 1);
      if (cur == null)       lecture.unassign(0);
 else       lecture.assign(0,cur);
      for (Iterator<Placement> i=conflicts.iterator(); i.hasNext(); ) {
        Placement p=i.next();
        p.variable().assign(0,p);
        conflictsToResolve.remove(p.variable());
      }
      if (resolvedConf != null)       conflictsToResolve.put(lecture,resolvedConf);
    }
    resolvedLectures.remove(lecture);
  }
}","private void backtrack(long startTime,List<Lecture> initialLectures,List<Lecture> resolvedLectures,HashMap<Lecture,Placement> conflictsToResolve,int depth){
  int nrUnassigned=conflictsToResolve.size();
  if ((initialLectures == null || initialLectures.isEmpty()) && nrUnassigned == 0) {
    if (iSolution.getModel().assignedVariables().size() > iNrAssigned || (iSolution.getModel().assignedVariables().size() == iNrAssigned && iValue > iCmp.currentValue(iSolution))) {
      if (iSuggestionNeighbour == null || iSuggestionNeighbour.compareTo(iSolution) >= 0)       iSuggestionNeighbour=new SuggestionNeighbour(resolvedLectures);
    }
    return;
  }
  if (depth <= 0)   return;
  if (iSuggestionTimeout > 0 && JProf.currentTimeMillis() - startTime > iSuggestionTimeout) {
    return;
  }
  for (  Lecture lecture : initialLectures != null && !initialLectures.isEmpty() ? initialLectures : new ArrayList<Lecture>(conflictsToResolve.keySet())) {
    if (resolvedLectures.contains(lecture))     continue;
    resolvedLectures.add(lecture);
    placements:     for (    Placement placement : lecture.values()) {
      if (placement.equals(lecture.getAssignment()))       continue;
      if (placement.isHard())       continue;
      Set<Placement> conflicts=iSolution.getModel().conflictValues(placement);
      if (nrUnassigned + conflicts.size() > depth)       continue;
      if (conflicts.contains(placement))       continue;
      if (containsCommited(conflicts))       continue;
      for (Iterator<Placement> i=conflicts.iterator(); i.hasNext(); ) {
        Placement c=i.next();
        if (resolvedLectures.contains(c.variable()))         continue placements;
      }
      Placement cur=lecture.getAssignment();
      for (Iterator<Placement> i=conflicts.iterator(); i.hasNext(); ) {
        Placement c=i.next();
        c.variable().unassign(0);
      }
      if (cur != null)       lecture.unassign(0);
      lecture.assign(0,placement);
      for (Iterator<Placement> i=conflicts.iterator(); i.hasNext(); ) {
        Placement c=i.next();
        conflictsToResolve.put(c.variable(),c);
      }
      Placement resolvedConf=conflictsToResolve.remove(lecture);
      backtrack(startTime,null,resolvedLectures,conflictsToResolve,depth - 1);
      if (cur == null)       lecture.unassign(0);
 else       lecture.assign(0,cur);
      for (Iterator<Placement> i=conflicts.iterator(); i.hasNext(); ) {
        Placement p=i.next();
        p.variable().assign(0,p);
        conflictsToResolve.remove(p.variable());
      }
      if (resolvedConf != null)       conflictsToResolve.put(lecture,resolvedConf);
    }
    resolvedLectures.remove(lecture);
  }
}"
84623,"public void removeStudent(Student student){
  if (getAssignment() != null && getModel() != null)   ((TimetableModel)getModel()).getCommittedStudentConflictsCounter().dec(student.countConflictPlacements((Placement)getAssignment()));
  iStudents.remove(student);
  iSameStudents.clear();
  iCommitedConflicts.clear();
}","public void removeStudent(Student student){
  if (!iStudents.remove(student))   return;
  if (getAssignment() != null && getModel() != null)   ((TimetableModel)getModel()).getCommittedStudentConflictsCounter().dec(student.countConflictPlacements((Placement)getAssignment()));
  iSameStudents.clear();
  iCommitedConflicts.clear();
}"
84624,"/** 
 * Add an enrolled student 
 */
public void addStudent(Student student){
  if (iStudents.contains(student))   return;
  if (getAssignment() != null && getModel() != null)   ((TimetableModel)getModel()).getCommittedStudentConflictsCounter().inc(student.countConflictPlacements((Placement)getAssignment()));
  iStudents.add(student);
  iSameStudents.clear();
  iCommitedConflicts.clear();
}","/** 
 * Add an enrolled student 
 */
public void addStudent(Student student){
  if (!iStudents.add(student))   return;
  if (getAssignment() != null && getModel() != null)   ((TimetableModel)getModel()).getCommittedStudentConflictsCounter().inc(student.countConflictPlacements((Placement)getAssignment()));
  iSameStudents.clear();
  iCommitedConflicts.clear();
}"
84625,"public void assign(long iteration,Value value){
  super.assign(iteration,value);
  if (value != null && getModel() != null) {
    ((TimetableModel)getModel()).getCommittedStudentConflictsCounter().inc(getCommitedConflicts((Placement)value));
  }
}","public void assign(long iteration,Value value){
  if (value != null && getModel() != null) {
    ((TimetableModel)getModel()).getCommittedStudentConflictsCounter().inc(getCommitedConflicts((Placement)value));
  }
  super.assign(iteration,value);
}"
84626,"/** 
 * Removes a model listener 
 */
public void removeModelListener(ModelListener listener){
  if (listener instanceof InfoProvider)   iInfoProviders.removeElement(listener);
  for (Enumeration e=iVariables.elements(); e.hasMoreElements(); )   listener.variableRemoved((Variable)e.nextElement());
  for (Enumeration e=iConstraints.elements(); e.hasMoreElements(); )   listener.constraintRemoved((Constraint)e.nextElement());
  iModelListeners.removeElement(listener);
}","/** 
 * Removes a model listener 
 */
public void removeModelListener(ModelListener listener){
  if (listener instanceof InfoProvider)   iInfoProviders.removeElement(listener);
  iModelListeners.removeElement(listener);
}"
84627,"/** 
 * Removes a global constraint from the model 
 */
public void removeGlobalConstraint(GlobalConstraint constraint){
  constraint.setModel(null);
  iConstraints.removeElement(constraint);
  if (constraint instanceof InfoProvider)   iInfoProviders.removeElement(constraint);
  for (Enumeration e=iModelListeners.elements(); e.hasMoreElements(); )   ((ModelListener)e.nextElement()).constraintRemoved(constraint);
}","/** 
 * Removes a global constraint from the model 
 */
public void removeGlobalConstraint(GlobalConstraint constraint){
  constraint.setModel(null);
  iGlobalConstraints.removeElement(constraint);
  if (constraint instanceof InfoProvider)   iInfoProviders.removeElement(constraint);
  for (Enumeration e=iModelListeners.elements(); e.hasMoreElements(); )   ((ModelListener)e.nextElement()).constraintRemoved(constraint);
}"
84628,"/** 
 * Adds a model listener 
 */
public void addModelListener(ModelListener listener){
  iModelListeners.addElement(listener);
  if (listener instanceof InfoProvider)   iInfoProviders.addElement(listener);
  for (Enumeration e=iConstraints.elements(); e.hasMoreElements(); )   listener.constraintAdded((Constraint)e.nextElement());
  for (Enumeration e=iVariables.elements(); e.hasMoreElements(); )   listener.variableAdded((Variable)e.nextElement());
}","/** 
 * Adds a model listener 
 */
public void addModelListener(ModelListener listener){
  iModelListeners.addElement(listener);
  if (listener instanceof InfoProvider)   iInfoProviders.addElement(listener);
}"
84629,"/** 
 * Adds a global constraint to the model 
 */
public void addGlobalConstraint(GlobalConstraint constraint){
  constraint.setModel(this);
  iConstraints.addElement(constraint);
  if (constraint instanceof InfoProvider)   iInfoProviders.addElement(constraint);
  for (Enumeration e=iModelListeners.elements(); e.hasMoreElements(); )   ((ModelListener)e.nextElement()).constraintAdded(constraint);
}","/** 
 * Adds a global constraint to the model 
 */
public void addGlobalConstraint(GlobalConstraint constraint){
  constraint.setModel(this);
  iGlobalConstraints.addElement(constraint);
  if (constraint instanceof InfoProvider)   iInfoProviders.addElement(constraint);
  for (Enumeration e=iModelListeners.elements(); e.hasMoreElements(); )   ((ModelListener)e.nextElement()).constraintAdded(constraint);
}"
84630,"/** 
 * Returns a list of avaliable apps
 * @throws URISyntaxException 
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String getAppStoreListForPlatform(@PathVariable int platform,@RequestParam(required=true) int listType,@RequestParam(required=false) String category,@RequestParam(required=true) int count,Model model) throws URISyntaxException {
  logger.info(""String_Node_Str"" + platform + ""String_Node_Str""+ listType+ ""String_Node_Str""+ count);
  AppStoreList appStoreList=appStoreService.getAppStoreListForPlatform(count,listType,platform,category);
  model.addAttribute(""String_Node_Str"",gson.toJson(appStoreList));
  return ""String_Node_Str"";
}","/** 
 * Returns a list of avaliable apps
 * @throws URISyntaxException 
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String getAppStoreListForPlatform(@PathVariable int platform,@RequestParam(required=true) int listType,@RequestParam(required=true) int count,Model model) throws URISyntaxException {
  logger.info(""String_Node_Str"" + platform + ""String_Node_Str""+ listType+ ""String_Node_Str""+ count);
  AppStoreList appStoreList=appStoreService.getAppStoreListForPlatform(count,listType,platform);
  model.addAttribute(""String_Node_Str"",gson.toJson(appStoreList));
  return ""String_Node_Str"";
}"
84631,"@Test public void testWithOnlyDateAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date now=new Date();
  service.getUkaProgram(now,null,null,null,null);
  Mockito.verify(mock).getUkaProgram(now);
}","@Test public void testWithOnlyDateAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date now=new Date();
  service.getUkaProgram(""String_Node_Str"",now,null,null,null,null);
  Mockito.verify(mock).getUkaProgram(now);
}"
84632,"@Test public void testWithDateFromAndTOAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date from=new Date();
  Date to=new Date(from.getTime() + 8640000);
  service.getUkaProgram(null,from,to,false,null);
  Mockito.verify(mock).getUkaProgram(from,to);
}","@Test public void testWithDateFromAndTOAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date from=new Date();
  Date to=new Date(from.getTime() + 8640000);
  service.getUkaProgram(""String_Node_Str"",null,from,to,false,null);
  Mockito.verify(mock).getUkaProgram(from,to);
}"
84633,"@Test public void testWithAllIsTrueAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  service.getUkaProgram(null,null,null,true,null);
  Mockito.verify(mock).getUkaProgram();
}","@Test public void testWithAllIsTrueAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  service.getUkaProgram(""String_Node_Str"",null,null,null,true,null);
  Mockito.verify(mock).getUkaProgram();
}"
84634,"@Test public void testWithDateFromAndTOAndDateAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date from=new Date();
  Date to=new Date(from.getTime() + 8640000);
  Date now=new Date();
  service.getUkaProgram(now,from,to,false,null);
  Mockito.verify(mock).getUkaProgram(now);
}","@Test public void testWithDateFromAndTOAndDateAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date from=new Date();
  Date to=new Date(from.getTime() + 8640000);
  Date now=new Date();
  service.getUkaProgram(""String_Node_Str"",now,from,to,false,null);
  Mockito.verify(mock).getUkaProgram(now);
}"
84635,"@Test public void testWithOnlyPlaceAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  String place=""String_Node_Str"";
  service.getUkaProgram(null,null,null,false,place);
  Mockito.verify(mock).getUkaProgram(place);
}","@Test public void testWithOnlyPlaceAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  String place=""String_Node_Str"";
  service.getUkaProgram(""String_Node_Str"",null,null,null,false,place);
  Mockito.verify(mock).getUkaProgram(place);
}"
84636,"@Test public void testWithDateFromAndTOAndPlaceAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date from=new Date();
  Date to=new Date(from.getTime() + 8640000);
  String place=""String_Node_Str"";
  service.getUkaProgram(null,from,to,false,place);
  Mockito.verify(mock).getUkaProgram(from,to,place);
}","@Test public void testWithDateFromAndTOAndPlaceAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date from=new Date();
  Date to=new Date(from.getTime() + 8640000);
  String place=""String_Node_Str"";
  service.getUkaProgram(""String_Node_Str"",null,from,to,false,place);
  Mockito.verify(mock).getUkaProgram(from,to,place);
}"
84637,"@Test public void testWithDateAndPlaceAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date now=new Date();
  String place=""String_Node_Str"";
  service.getUkaProgram(now,null,null,false,place);
  Mockito.verify(mock).getUkaProgram(now,place);
}","@Test public void testWithDateAndPlaceAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date now=new Date();
  String place=""String_Node_Str"";
  service.getUkaProgram(""String_Node_Str"",now,null,null,false,place);
  Mockito.verify(mock).getUkaProgram(now,place);
}"
84638,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ModelAndView getAllFacts(@PathVariable(""String_Node_Str"") String locationName){
  logger.info(""String_Node_Str"" + locationName + ""String_Node_Str"");
  List<Fact> facts=service.getAllFacts(locationName);
  return new ModelAndView(""String_Node_Str"",""String_Node_Str"",gson.toJson(facts));
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ModelMap getAllFacts(@PathVariable(""String_Node_Str"") String locationName){
  logger.info(""String_Node_Str"" + locationName + ""String_Node_Str"");
  ModelMap model=new ModelMap();
  List<Fact> facts=service.getAllFacts(locationName);
  model.addAttribute(facts);
  return model;
}"
84639,"public List<Fact> getAllFacts(String locationName){
  Map<Integer,Fact> facts=new HashMap<Integer,Fact>();
  jdbcTemplate.query(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new FactRowMapper(facts),locationName);
  return new ArrayList<Fact>(facts.values());
}","public List<Fact> getAllFacts(String locationName){
  List<Fact> facts=jdbcTemplate.query(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new FactRowMapper(),locationName);
  return facts;
}"
84640,"@Override public Fact mapRow(ResultSet rs,int rowNum) throws SQLException {
  Fact fact=new Fact();
  fact.setFactId(rs.getInt(""String_Node_Str""));
  fact.setLocationId(rs.getInt(""String_Node_Str""));
  fact.setText(rs.getString(""String_Node_Str""));
  if (!facts.containsKey(fact.getFactId())) {
    facts.put(fact.getFactId(),fact);
  }
  return fact;
}","public Fact mapRow(ResultSet rs,int rowNum) throws SQLException {
  Fact fact=new Fact();
  fact.setFactId(rs.getInt(""String_Node_Str""));
  fact.setLocationId(rs.getInt(""String_Node_Str""));
  fact.setText(rs.getString(""String_Node_Str""));
  return fact;
}"
84641,"public void doDispatch(MuleEvent event) throws Exception {
  String evaluatedEndpoint=event.getMuleContext().getExpressionManager().parse(event.getEndpoint().getName(),event.getMessage());
  logger.debug(""String_Node_Str"" + evaluatedEndpoint);
  String collection=evaluatedEndpoint.split(""String_Node_Str"",3)[2];
  logger.debug(""String_Node_Str"" + collection);
  event.transformMessage();
  Object payload=event.getMessage().getPayload();
  BasicDBObject object=null;
  if (payload instanceof String) {
    object=mapper.readValue((String)payload,BasicDBObject.class);
  }
  if (payload instanceof Map) {
    object=new BasicDBObject((Map)payload);
  }
  if (payload instanceof BasicDBObject) {
    object=(BasicDBObject)payload;
  }
  if (object == null) {
    throw new MongoDBException(""String_Node_Str"" + payload.getClass());
  }
synchronized (this) {
    connector.getDb().getCollection(collection).insert(object);
  }
}","public void doDispatch(MuleEvent event) throws Exception {
  logger.debug(""String_Node_Str"" + event.getEndpoint().getEndpointURI().toString());
  String evaluatedEndpoint=event.getMuleContext().getExpressionManager().parse(event.getEndpoint().getEndpointURI().toString(),event.getMessage());
  logger.debug(""String_Node_Str"" + evaluatedEndpoint);
  String collection=evaluatedEndpoint.split(""String_Node_Str"")[1];
  logger.debug(""String_Node_Str"" + collection);
  event.transformMessage();
  Object payload=event.getMessage().getPayload();
  BasicDBObject object=null;
  if (payload instanceof String) {
    object=mapper.readValue((String)payload,BasicDBObject.class);
  }
  if (payload instanceof Map) {
    object=new BasicDBObject((Map)payload);
  }
  if (payload instanceof BasicDBObject) {
    object=(BasicDBObject)payload;
  }
  if (object == null) {
    throw new MongoDBException(""String_Node_Str"" + payload.getClass());
  }
synchronized (this) {
    connector.getDb().getCollection(collection).insert(object);
  }
}"
84642,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  openAccessory=new OpenAccessory();
  openAccessory.open(this);
  if (openAccessory.isConnected()) {
    adkReceiver=new ADKCommandReceiver(openAccessory);
    adkSender=new ADKCommandSender(openAccessory);
    showControls();
  }
 else {
    hideControls();
  }
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  openAccessory=new OpenAccessory();
  openAccessory.open(this);
  if (openAccessory.isConnected()) {
    adkReceiver=new ADKCommandReceiver(openAccessory);
    adkSender=new ADKCommandSender(openAccessory);
    inputController=new InputController(this);
    adkReceiver.setInputController(inputController);
    outputController=new OutputController(this,adkSender);
    showControls();
  }
 else {
    hideControls();
  }
}"
84643,"private void showControls(){
  setContentView(R.layout.main);
  inputLabel=(TextView)findViewById(R.id.inputLabel);
  outputLabel=(TextView)findViewById(R.id.outputLabel);
  inputContainer=(LinearLayout)findViewById(R.id.inputContainer);
  outputContainer=(LinearLayout)findViewById(R.id.outputContainer);
  inputLabel.setOnClickListener(this);
  outputLabel.setOnClickListener(this);
  inputController=new InputController(this);
  adkReceiver.setInputController(inputController);
  outputController=new OutputController(this,adkSender);
  showTabContents(true);
}","private void showControls(){
  setContentView(R.layout.main);
  inputLabel=(TextView)findViewById(R.id.inputLabel);
  outputLabel=(TextView)findViewById(R.id.outputLabel);
  inputContainer=(LinearLayout)findViewById(R.id.inputContainer);
  outputContainer=(LinearLayout)findViewById(R.id.outputContainer);
  inputLabel.setOnClickListener(this);
  outputLabel.setOnClickListener(this);
  showTabContents(true);
}"
84644,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  openAccessory=new OpenAccessory();
  openAccessory.open(this);
  if (openAccessory.isConnected()) {
    adkReceiver=new ADKCommandReceiver(openAccessory);
    adkSender=new ADKCommandSender(openAccessory);
    inputController=new InputController(this);
    adkReceiver.setInputController(inputController);
    outputController=new OutputController(this,adkSender);
    showControls();
  }
 else {
    hideControls();
  }
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  openAccessory=new OpenAccessory();
  openAccessory.open(this);
  if (openAccessory.isConnected()) {
    showControls();
    adkReceiver=new ADKCommandReceiver(openAccessory);
    adkSender=new ADKCommandSender(openAccessory);
    inputController=new InputController(this);
    adkReceiver.setInputController(inputController);
    outputController=new OutputController(this,adkSender);
  }
 else {
    hideControls();
  }
}"
84645,"@Override public void onListItemClick(ListView l,View v,int position,long id){
  showDetails(position);
}","@Override public void onListItemClick(ListView l,View v,int position,long id){
  position--;
  showDetails(position);
}"
84646,"@Override protected boolean cacheInBackground(){
  try {
    List<Picture> results;
    if (SearchActivity.pictures.isEmpty()) {
      results=PictureFactory.search(SearchActivity.query);
    }
 else {
      results=PictureFactory.search(SearchActivity.query,page);
    }
    page++;
    if (results.isEmpty()) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return false;
    }
    SearchActivity.pictures.addAll(results);
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
}","@Override protected boolean cacheInBackground(){
  try {
    List<Picture> results;
    if (SearchActivity.pictures.isEmpty()) {
      results=PictureFactory.search(SearchActivity.query);
    }
 else {
      results=PictureFactory.search(SearchActivity.query,page);
    }
    page++;
    if (results.isEmpty()) {
      activity.findViewById(R.id.no_results).setVisibility(View.VISIBLE);
      activity.findViewById(R.id.list_progress).setVisibility(View.GONE);
      return false;
    }
    SearchActivity.pictures.addAll(results);
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
}"
84647,"protected Boolean doInBackground(Picture... pictures){
  Picture picture=pictures[0];
  WallpaperManager wm=(WallpaperManager)getActivity().getSystemService(Context.WALLPAPER_SERVICE);
  int newWidth=wm.getDesiredMinimumWidth();
  int newHeight=wm.getDesiredMinimumHeight();
  try {
    wm.setStream(getActivity().getContentResolver().openInputStream(picture.uri));
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}","protected Boolean doInBackground(Picture... pictures){
  Picture picture=pictures[0];
  WallpaperManager wm=(WallpaperManager)getActivity().getSystemService(Context.WALLPAPER_SERVICE);
  int newWidth=wm.getDesiredMinimumWidth();
  int newHeight=wm.getDesiredMinimumHeight();
  try {
    if (UIUtils.isHoneycombTablet(getActivity())) {
      wm.setBitmap(bitmap);
    }
 else {
      Bitmap resizedBitmap=Bitmap.createScaledBitmap(bitmap,newWidth,newHeight,true);
      wm.setBitmap(resizedBitmap);
    }
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}"
84648,"@Override public View onCreateView(LayoutInflater inflater,final ViewGroup container,Bundle savedInstanceState){
  if (container == null) {
    return null;
  }
  View detailsFrame=getActivity().findViewById(R.id.details);
  boolean isDualPane=detailsFrame != null && detailsFrame.getVisibility() == View.VISIBLE;
  final View details=inflater.inflate(R.layout.details_fragment,container,false);
  if (pictures != null && !pictures.isEmpty()) {
    picture=pictures.get(getShownIndex());
    if (!isDualPane) {
      getActivity().getSupportActionBar().setTitle(picture.title);
    }
    BitmapFactory.Options decodeOptions=new BitmapFactory.Options();
    decodeOptions.inSampleSize=2;
    BitmapUtils.fetchImage(getActivity(),picture.getFullSizeImageUrl(),picture.title,decodeOptions,null,new OnFetchCompleteListener(){
      @Override public void onFetchComplete(      Object cookie,      final Bitmap result,      final Uri uri){
        try {
          bitmap=result;
          getActivity().sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,uri));
          final ImageView iv=(ImageView)details.findViewById(R.id.main_picture);
          iv.setImageBitmap(result);
          iv.setVisibility(View.VISIBLE);
          details.findViewById(R.id.image_progress).setVisibility(View.GONE);
          picture.uri=uri;
        }
 catch (        NullPointerException e) {
          e.printStackTrace();
        }
      }
    }
);
    final WebView text=(WebView)details.findViewById(R.id.image_desc);
    text.setWebViewClient(new EmbeddedWebViewClient());
    String html=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ picture.info.replace(""String_Node_Str"",""String_Node_Str"");
    text.loadData(html,""String_Node_Str"",""String_Node_Str"");
    text.setBackgroundColor(0);
    WebSettings settings=text.getSettings();
    settings.setTextSize(WebSettings.TextSize.NORMAL);
  }
 else {
    details.findViewById(R.id.image_select_one).setVisibility(View.VISIBLE);
    details.findViewById(R.id.image_progress).setVisibility(View.GONE);
  }
  return details;
}","@Override public View onCreateView(LayoutInflater inflater,final ViewGroup container,Bundle savedInstanceState){
  if (container == null) {
    return null;
  }
  View detailsFrame=getActivity().findViewById(R.id.details);
  boolean isDualPane=detailsFrame != null && detailsFrame.getVisibility() == View.VISIBLE;
  final View details=inflater.inflate(R.layout.details_fragment,container,false);
  if (pictures != null && !pictures.isEmpty()) {
    picture=pictures.get(getShownIndex());
    if (!isDualPane) {
      getActivity().getSupportActionBar().setDisplayOptions(ActionBar.DISPLAY_SHOW_TITLE);
      getActivity().getSupportActionBar().setTitle(picture.title);
      getActivity().getSupportActionBar().setSubtitle(picture.credit);
    }
    BitmapFactory.Options decodeOptions=new BitmapFactory.Options();
    decodeOptions.inSampleSize=2;
    BitmapUtils.fetchImage(getActivity(),picture.getFullSizeImageUrl(),picture.title,decodeOptions,null,new OnFetchCompleteListener(){
      @Override public void onFetchComplete(      Object cookie,      final Bitmap result,      final Uri uri){
        try {
          bitmap=result;
          getActivity().sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,uri));
          final ImageView iv=(ImageView)details.findViewById(R.id.main_picture);
          iv.setImageBitmap(result);
          iv.setVisibility(View.VISIBLE);
          details.findViewById(R.id.image_progress).setVisibility(View.GONE);
          picture.uri=uri;
        }
 catch (        NullPointerException e) {
          e.printStackTrace();
        }
      }
    }
);
    final WebView text=(WebView)details.findViewById(R.id.image_desc);
    text.setWebViewClient(new EmbeddedWebViewClient());
    String html=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ picture.info.replace(""String_Node_Str"",""String_Node_Str"");
    text.loadData(html,""String_Node_Str"",""String_Node_Str"");
    text.setBackgroundColor(0);
    WebSettings settings=text.getSettings();
    settings.setTextSize(WebSettings.TextSize.NORMAL);
  }
 else   if (isDualPane) {
    details.findViewById(R.id.image_select_one).setVisibility(View.VISIBLE);
    details.findViewById(R.id.image_progress).setVisibility(View.GONE);
  }
  return details;
}"
84649,"public static int getMinute(String time){
  String[] pieces=time.split(""String_Node_Str"");
  return (Integer.parseInt(pieces[1]));
}","public static int getMinute(String time){
  String[] pieces=time.split(""String_Node_Str"");
  if (pieces.length == 2) {
    return (Integer.parseInt(pieces[1]));
  }
 else {
    return 0;
  }
}"
84650,"public static int getHour(String time){
  String[] pieces=time.split(""String_Node_Str"");
  return (Integer.parseInt(pieces[0]));
}","public static int getHour(String time){
  String[] pieces=time.split(""String_Node_Str"");
  if (pieces.length == 2) {
    return (Integer.parseInt(pieces[0]));
  }
 else {
    return 0;
  }
}"
84651,"@Override public boolean onAreaTouched(final TouchEvent pSceneTouchEvent,final float pTouchAreaLocalX,final float pTouchAreaLocalY){
  this.mPhysicsHandler.setEnabled(false);
switch (pSceneTouchEvent.getAction()) {
case TouchEvent.ACTION_DOWN:
    if (!mTimerHandler) {
      mCanAttackCastle=false;
      mMoveDelay=0.0f;
      mInitialMoveX=mX;
      mInitialMoveY=mY;
      mTimeMoved=new TimerHandler(1 / 4.0f,true,new ITimerCallback(){
        @Override public void onTimePassed(        final TimerHandler pTimerHandler){
        }
      }
);
      registerUpdateHandler(this.mTimeMoved);
      mTimerHandler=true;
    }
  break;
case TouchEvent.ACTION_MOVE:
if (pSceneTouchEvent.getY() - getHeight() / 2 < baseY) {
  if (pSceneTouchEvent.getY() - baseY < -5.0f) {
    setPosition(pSceneTouchEvent.getX() - getWidth() / 2,pSceneTouchEvent.getY() - getHeight() / 2);
    mIsAirborne=true;
  }
}
 else mIsAirborne=false;
break;
case TouchEvent.ACTION_UP:
if (mTimerHandler) {
mMoveDelay=mTimeMoved.getTimerSecondsElapsed();
unregisterUpdateHandler(mTimeMoved);
float DiffX=mX - mInitialMoveX;
float DiffY=mY - mInitialMoveY;
DiffX=DiffX / mMoveDelay;
DiffY=DiffY / mMoveDelay;
float mVelocityX=mMoveDelay * (DiffX / 2);
float mVelocityY=mMoveDelay * (DiffY / 2);
if ((DiffY > -10.0f)) {
mVelocityX=0.0f;
mVelocityY=0.0f;
tripEnemy();
}
 else {
mPhysicsHandler.setEnabled(true);
mPhysicsHandler.setVelocity(mVelocityX,mVelocityY);
mTripTracker=true;
}
mTimerHandler=false;
}
break;
}
return true;
}","@Override public boolean onAreaTouched(final TouchEvent pSceneTouchEvent,final float pTouchAreaLocalX,final float pTouchAreaLocalY){
  this.mPhysicsHandler.setEnabled(false);
switch (pSceneTouchEvent.getAction()) {
case TouchEvent.ACTION_DOWN:
    mGrabbedEnemy=true;
  if (!mTimerHandler) {
    mCanAttackCastle=false;
    mMoveDelay=0.0f;
    mInitialMoveX=mX;
    mInitialMoveY=mY;
    mTimeMoved=new TimerHandler(1 / 4.0f,true,new ITimerCallback(){
      @Override public void onTimePassed(      final TimerHandler pTimerHandler){
      }
    }
);
    registerUpdateHandler(this.mTimeMoved);
    mTimerHandler=true;
  }
break;
case TouchEvent.ACTION_MOVE:
if (pSceneTouchEvent.getY() - getHeight() / 2 < baseY) {
if (pSceneTouchEvent.getY() - baseY < -5.0f) {
  setPosition(pSceneTouchEvent.getX() - getWidth() / 2,pSceneTouchEvent.getY() - getHeight() / 2);
  mIsAirborne=true;
}
}
 else mIsAirborne=false;
break;
case TouchEvent.ACTION_UP:
mGrabbedEnemy=false;
if (mTimerHandler) {
mMoveDelay=mTimeMoved.getTimerSecondsElapsed();
unregisterUpdateHandler(mTimeMoved);
float DiffX=mX - mInitialMoveX;
float DiffY=mY - mInitialMoveY;
DiffX=DiffX / mMoveDelay;
DiffY=DiffY / mMoveDelay;
float mVelocityX=mMoveDelay * (DiffX / 2);
float mVelocityY=mMoveDelay * (DiffY / 2);
if ((DiffY > -10.0f)) {
mVelocityX=0.0f;
mVelocityY=0.0f;
tripEnemy();
}
 else {
mPhysicsHandler.setEnabled(true);
mPhysicsHandler.setVelocity(mVelocityX,mVelocityY);
mTripTracker=true;
}
mTimerHandler=false;
}
break;
}
return true;
}"
84652,"@Override public void onManagedUpdate(final float pSecondsElapsed){
  if (base.mLightningBolt && (mX <= base.mLightningBoltX + 100) && (mX >= base.mLightningBoltX - 100)&& (mY >= base.mLightningBoltY - 70)&& (mY <= base.mLightningBoltY + 20)) {
    hurtEnemy(1000.0f);
  }
  if (base.mEarthQuaking)   tripEnemy();
  if (mCanAttackCastle) {
    setAnimationCycle(4);
    if (!mAttackCastle) {
      mAttackCastle=true;
      this.registerUpdateHandler(new TimerHandler(1.0f,new ITimerCallback(){
        @Override public void onTimePassed(        final TimerHandler pTimerHandler){
          mAttackCastle=false;
          Castle.damageCastle(mAttackDamage);
          base.CustomHUD.updateCastleHealth();
          base.attack.play();
          unregisterUpdateHandler(pTimerHandler);
        }
      }
));
      if (mY + getHeight() / 2 >= baseY) {
        setPosition(mX,baseY);
        mPhysicsHandler.setVelocityY(0.0f);
      }
    }
  }
 else   if (!checkEnemyDeath()) {
    if (!mTripping) {
      if (mPhysicsHandler.isEnabled()) {
        if (mIsAirborne) {
          base.sm.GameScreen.unregisterTouchArea(this);
          setAnimationCycle(2);
          if (mX > (base.getCameraWidth() - (getWidth() / 2))) {
            mPhysicsHandler.setVelocityX(0.0f);
            mX=(base.getCameraWidth() - (getWidth() / 2));
          }
          if (mX < (0.0f - (getWidth() / 2))) {
            mPhysicsHandler.setVelocityX(0.0f);
            setPosition(0.0f - (getWidth() / 2),mY);
          }
          if (mY > baseY) {
            mIsAirborne=false;
            mGroundHitSpeed=mPhysicsHandler.getVelocityY();
            enemyFallDamage();
          }
 else           if (mY < baseY) {
            if (mPhysicsHandler.getVelocityY() < -1000)             mPhysicsHandler.setVelocityY(-1000);
            mPhysicsHandler.setVelocityY(mPhysicsHandler.getVelocityY() + mGravity);
          }
        }
 else {
          if (!mCanAttackCastle) {
            if (mPhysicsHandler.getVelocityX() == 0.0f) {
              if (mX < (base.sCastle.getX() - base.sCastle.getWidth() / 6) && mY >= baseY) {
                mPhysicsHandler.setVelocityX(mSpeed);
                setAnimationCycle(1);
              }
            }
            if (mX >= (base.sCastle.getX() - base.sCastle.getWidth() / 6)) {
              mPhysicsHandler.setVelocityX(0.0f);
              setPosition((base.sCastle.getX() - base.sCastle.getWidth() / 6),mY);
              enemyAtCastle(pSecondsElapsed);
            }
            if (mY < mInitialMoveY) {
              if ((mY - mPhysicsHandler.getVelocityY() - mGravity) < baseY)               mPhysicsHandler.setVelocityY(mPhysicsHandler.getVelocityY() + mGravity);
 else {
                mPhysicsHandler.setVelocityY(0.0f);
                setPosition(mX,baseY);
              }
            }
 else             if (mY + getHeight() / 2 >= baseY)             mPhysicsHandler.setVelocityY(0.0f);
          }
        }
      }
    }
 else {
      if (!isAnimationRunning()) {
        mTripping=false;
        mPhysicsHandler.setEnabled(true);
        setAnimationCycle(1);
        base.sm.GameScreen.registerTouchArea(this);
        if (!mTripTracker)         base.AchieveTracker.Trips();
 else         mTripTracker=false;
      }
    }
  }
 else {
    killEnemy();
    if (!isAnimationRunning()) {
      base.CustomHUD.updateCashValue();
      base.sKillCount++;
      base.mOnScreenEnemies--;
      base.AchieveTracker.firstKill();
      sendEnemyToPool(mEnemyType,this);
    }
  }
  super.onManagedUpdate(pSecondsElapsed);
}","@Override public void onManagedUpdate(final float pSecondsElapsed){
  if (!mGrabbedEnemy) {
    if (base.mLightningBolt && (mX <= base.mLightningBoltX + 100) && (mX >= base.mLightningBoltX - 100)&& (mY >= base.mLightningBoltY - 70)&& (mY <= base.mLightningBoltY + 20)) {
      hurtEnemy(1000.0f);
    }
    if (base.mEarthQuaking)     tripEnemy();
    if (mCanAttackCastle) {
      setAnimationCycle(4);
      if (!mAttackCastle) {
        mAttackCastle=true;
        this.registerUpdateHandler(new TimerHandler(1.0f,new ITimerCallback(){
          @Override public void onTimePassed(          final TimerHandler pTimerHandler){
            mAttackCastle=false;
            Castle.damageCastle(mAttackDamage);
            base.CustomHUD.updateCastleHealth();
            base.attack.play();
            unregisterUpdateHandler(pTimerHandler);
          }
        }
));
        if (mY + getHeight() / 2 >= baseY) {
          setPosition(mX,baseY);
          mPhysicsHandler.setVelocityY(0.0f);
        }
      }
    }
 else     if (!checkEnemyDeath()) {
      if (!mTripping) {
        if (mPhysicsHandler.isEnabled()) {
          if (mIsAirborne) {
            base.sm.GameScreen.unregisterTouchArea(this);
            setAnimationCycle(2);
            if (mX > (base.getCameraWidth() - (getWidth() / 2))) {
              mPhysicsHandler.setVelocityX(0.0f);
              mX=(base.getCameraWidth() - (getWidth() / 2));
            }
            if (mX < (0.0f - (getWidth() / 2))) {
              mPhysicsHandler.setVelocityX(0.0f);
              setPosition(0.0f - (getWidth() / 2),mY);
            }
            if (mY > baseY) {
              mIsAirborne=false;
              mGroundHitSpeed=mPhysicsHandler.getVelocityY();
              enemyFallDamage();
            }
 else             if (mY < baseY) {
              if (mPhysicsHandler.getVelocityY() < -1000)               mPhysicsHandler.setVelocityY(-1000);
              mPhysicsHandler.setVelocityY(mPhysicsHandler.getVelocityY() + mGravity);
            }
          }
 else {
            if (!mCanAttackCastle) {
              if (mPhysicsHandler.getVelocityX() == 0.0f) {
                if (mX < (base.sCastle.getX() - base.sCastle.getWidth() / 6) && mY >= baseY) {
                  mPhysicsHandler.setVelocityX(mSpeed);
                  setAnimationCycle(1);
                }
              }
              if (mX >= (base.sCastle.getX() - base.sCastle.getWidth() / 6)) {
                mPhysicsHandler.setVelocityX(0.0f);
                setPosition((base.sCastle.getX() - base.sCastle.getWidth() / 6),mY);
                enemyAtCastle(pSecondsElapsed);
              }
              if (mY < mInitialMoveY) {
                if ((mY - mPhysicsHandler.getVelocityY() - mGravity) < baseY)                 mPhysicsHandler.setVelocityY(mPhysicsHandler.getVelocityY() + mGravity);
 else {
                  mPhysicsHandler.setVelocityY(0.0f);
                  setPosition(mX,baseY);
                }
              }
 else               if (mY + getHeight() / 2 >= baseY)               mPhysicsHandler.setVelocityY(0.0f);
            }
          }
        }
      }
 else {
        if (!isAnimationRunning()) {
          mTripping=false;
          mPhysicsHandler.setEnabled(true);
          setAnimationCycle(1);
          base.sm.GameScreen.registerTouchArea(this);
          if (!mTripTracker)           base.AchieveTracker.Trips();
 else           mTripTracker=false;
        }
      }
    }
 else {
      killEnemy();
      if (!isAnimationRunning()) {
        base.CustomHUD.updateCashValue();
        base.sKillCount++;
        base.mOnScreenEnemies--;
        base.AchieveTracker.firstKill();
        sendEnemyToPool(mEnemyType,this);
      }
    }
  }
  super.onManagedUpdate(pSecondsElapsed);
}"
84653,"public void completeReset(){
  this.baseY=0.0f;
  this.mSpeed=0.0f;
  this.mMaxSpeed=0.0f;
  this.mHealth=0.0f;
  this.mAttackDamage=0.0f;
  this.mCashWorth=0;
  this.mMoveDelay=0.0f;
  this.mInitialMoveX=0.0f;
  this.mInitialMoveY=0.0f;
  this.mCanAttackCastle=false;
  this.mIsAirborne=false;
  this.mTripTracker=false;
  this.currentAnimationCycle=0;
  this.mTripping=false;
  this.mXpWorth=0;
  this.mAttackCastle=false;
  this.unregisterUpdateHandler(mPhysicsHandler);
}","public void completeReset(){
  this.baseY=0.0f;
  this.mSpeed=0.0f;
  this.mMaxSpeed=0.0f;
  this.mHealth=0.0f;
  this.mAttackDamage=0.0f;
  this.mCashWorth=0;
  this.mMoveDelay=0.0f;
  this.mInitialMoveX=0.0f;
  this.mInitialMoveY=0.0f;
  this.mCanAttackCastle=false;
  this.mIsAirborne=false;
  this.mTripTracker=false;
  this.currentAnimationCycle=0;
  this.mTripping=false;
  this.mXpWorth=0;
  this.mAttackCastle=false;
  this.mGrabbedEnemy=false;
  this.unregisterUpdateHandler(mPhysicsHandler);
}"
84654,"public void onGesturePerformed(GestureOverlayView overlay,Gesture gesture){
  ArrayList<Prediction> predictions=mLibrary.recognize(gesture);
  boolean isItLightning=false;
  if (GestureDefence.this.getEngine().getScene() == GestureDefence.this.sm.GameScreen) {
    int i=0;
    boolean something=true;
    while (something) {
      try {
        final float x1=gesture.getStrokes().get(0).points[i];
        final float y1=gesture.getStrokes().get(0).points[i + 1];
        final float x2=gesture.getStrokes().get(0).points[i + 2];
        final float y2=gesture.getStrokes().get(0).points[i + 3];
        final Line line=new Line(x1,y1,x2,y2,5);
        GestureDefence.this.getEngine().getScene().getChild(4).attachChild(line);
        i+=2;
      }
 catch (      Throwable e) {
        something=false;
      }
    }
    TimerHandler DrawnGestureThing;
    GestureDefence.this.sm.GameScreen.registerUpdateHandler(DrawnGestureThing=new TimerHandler(1,true,new ITimerCallback(){
      @Override public void onTimePassed(      final TimerHandler pTimerHandler){
        GestureDefence.this.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
        GestureDefence.this.sm.GameScreen.getChild(4).detachChildren();
      }
    }
));
    if (predictions.size() > 0) {
      if (predictions.get(0).score > 1.0) {
        String action=predictions.get(0).name;
        RectF GestureCheck=gesture.getBoundingBox();
        if (GestureCheck.left < GestureCheck.right) {
          if (GestureCheck.right - GestureCheck.left < 200)           isItLightning=true;
        }
 else         if (GestureCheck.right < GestureCheck.left)         if (GestureCheck.left - GestureCheck.right < 200)         isItLightning=true;
        if (isItLightning) {
          if (predictions.get(0).name == ""String_Node_Str"")           action=predictions.get(0).name;
        }
 else {
          for (int blah=0; blah < predictions.size() - 1; blah++) {
            if (predictions.get(blah).name == ""String_Node_Str"") {
              action=predictions.get(blah).name;
              blah=predictions.size();
            }
          }
        }
        if (""String_Node_Str"".equals(action)) {
          if ((GestureDefence.this.mana - 1000) >= 0) {
            GestureDefence.this.mana-=1000;
            GestureDefence.this.lightningStrike.play();
            RectF tempThing=gesture.getBoundingBox();
            float posX;
            float posY;
            float lightningPosX;
            float lightningPosY;
            if (tempThing.left < tempThing.right) {
              posX=tempThing.left;
              lightningPosX=posX + ((tempThing.right - tempThing.left) / 2);
            }
 else {
              posX=tempThing.right;
              lightningPosX=posX + ((tempThing.left - tempThing.left) / 2);
            }
            if (tempThing.bottom > tempThing.top) {
              posY=tempThing.bottom - 330;
              lightningPosY=tempThing.bottom;
            }
 else {
              posY=tempThing.top - 330;
              lightningPosY=tempThing.top;
            }
            lightning=new AnimatedSprite(posX,posY,GestureDefence.this.mLightningTextureRegion.deepCopy());
            lightning.animate(new long[]{50,50,50,50,50,50},new int[]{0,1,2,3,4,5},0);
            GestureDefence.this.sm.GameScreen.attachChild(lightning);
            GestureDefence.this.mLightningBoltX=lightningPosX;
            GestureDefence.this.mLightningBoltY=lightningPosY;
            GestureDefence.this.mLightningBolt=true;
            GestureDefence.this.CustomHUD.updateManaValue();
          }
        }
 else         if (""String_Node_Str"".equals(action)) {
          if (mEarthQuaking == false && ((GestureDefence.this.mana - 500) >= 0)) {
            GestureDefence.this.mEarthquake=true;
            GestureDefence.this.handler.post(new Runnable(){
              public void run(){
                CustomNotifications.addNotification(""String_Node_Str"");
              }
            }
);
          }
        }
      }
    }
  }
}","public void onGesturePerformed(GestureOverlayView overlay,Gesture gesture){
  ArrayList<Prediction> predictions=mLibrary.recognize(gesture);
  boolean isItLightning=false;
  if (GestureDefence.this.getEngine().getScene() == GestureDefence.this.sm.GameScreen) {
    int i=0;
    boolean something=true;
    while (something) {
      try {
        final float x1=gesture.getStrokes().get(0).points[i];
        final float y1=gesture.getStrokes().get(0).points[i + 1];
        final float x2=gesture.getStrokes().get(0).points[i + 2];
        final float y2=gesture.getStrokes().get(0).points[i + 3];
        final Line tempLine=new Line(x1,y1,x2,y2,5);
        GestureDefence.this.line.add(tempLine);
        GestureDefence.this.sm.GameScreen.attachChild(tempLine);
        i+=2;
      }
 catch (      Throwable e) {
        something=false;
      }
    }
    GestureDefence.this.sm.GameScreen.registerUpdateHandler(new TimerHandler(1,false,new ITimerCallback(){
      @Override public void onTimePassed(      final TimerHandler pTimerHandler){
        for (int i=(GestureDefence.this.line.size() - 1); i >= 0; i--) {
          final Line tempLine=GestureDefence.this.line.get(i);
          GestureDefence.this.sm.GameScreen.detachChild(tempLine);
        }
        GestureDefence.this.line.clear();
        GestureDefence.this.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
      }
    }
));
    if (predictions.size() > 0) {
      if (predictions.get(0).score > 1.0) {
        String action=predictions.get(0).name;
        RectF GestureCheck=gesture.getBoundingBox();
        if (GestureCheck.left < GestureCheck.right) {
          if (GestureCheck.right - GestureCheck.left < 200)           isItLightning=true;
        }
 else         if (GestureCheck.right < GestureCheck.left)         if (GestureCheck.left - GestureCheck.right < 200)         isItLightning=true;
        if (isItLightning) {
          if (predictions.get(0).name == ""String_Node_Str"")           action=predictions.get(0).name;
        }
 else {
          for (int blah=0; blah < predictions.size() - 1; blah++) {
            if (predictions.get(blah).name == ""String_Node_Str"") {
              action=predictions.get(blah).name;
              blah=predictions.size();
            }
          }
        }
        if (""String_Node_Str"".equals(action)) {
          if ((GestureDefence.this.mana - 1000) >= 0) {
            GestureDefence.this.mana-=1000;
            GestureDefence.this.lightningStrike.play();
            RectF tempThing=gesture.getBoundingBox();
            float posX;
            float posY;
            float lightningPosX;
            float lightningPosY;
            if (tempThing.left < tempThing.right) {
              posX=tempThing.left;
              lightningPosX=posX + ((tempThing.right - tempThing.left) / 2);
            }
 else {
              posX=tempThing.right;
              lightningPosX=posX + ((tempThing.left - tempThing.left) / 2);
            }
            if (tempThing.bottom > tempThing.top) {
              posY=tempThing.bottom - 330;
              lightningPosY=tempThing.bottom;
            }
 else {
              posY=tempThing.top - 330;
              lightningPosY=tempThing.top;
            }
            lightning=new AnimatedSprite(posX,posY,GestureDefence.this.mLightningTextureRegion.deepCopy());
            lightning.animate(new long[]{50,50,50,50,50,50},new int[]{0,1,2,3,4,5},0);
            GestureDefence.this.sm.GameScreen.attachChild(lightning);
            GestureDefence.this.mLightningBoltX=lightningPosX;
            GestureDefence.this.mLightningBoltY=lightningPosY;
            GestureDefence.this.mLightningBolt=true;
            GestureDefence.this.CustomHUD.updateManaValue();
          }
        }
 else         if (""String_Node_Str"".equals(action)) {
          if (mEarthQuaking == false && ((GestureDefence.this.mana - 500) >= 0)) {
            GestureDefence.this.mEarthquake=true;
            GestureDefence.this.handler.post(new Runnable(){
              public void run(){
                CustomNotifications.addNotification(""String_Node_Str"");
              }
            }
);
          }
        }
      }
    }
  }
}"
84655,"public boolean ButtonPress(int ButtonID){
switch (ButtonID) {
case 1:
    GestureDefence.this.sm.NewWaveScreen();
  GestureDefence.this.sm.NewWaveScene.registerUpdateHandler(new TimerHandler(3.0f,true,new ITimerCallback(){
    @Override public void onTimePassed(    final TimerHandler pTimerHandler){
      GestureDefence.this.sm.NewWaveScene.unregisterUpdateHandler(pTimerHandler);
      GestureDefence.this.sm.GameScreen();
      GestureDefence.this.theWave.startNewWave();
    }
  }
));
return true;
case 3:
GestureDefence.this.theWave.NextWave();
GestureDefence.this.theWave.mWaveNumberMenuItem.setText(""String_Node_Str"" + theWave.getWaveNumber());
GestureDefence.this.sm.NewWaveScreen();
GestureDefence.this.sm.NewWaveScene.registerUpdateHandler(new TimerHandler(4.0f,true,new ITimerCallback(){
@Override public void onTimePassed(final TimerHandler pTimerHandler){
GestureDefence.this.sm.NewWaveScene.unregisterUpdateHandler(pTimerHandler);
GestureDefence.this.sm.GameScreen();
GestureDefence.this.theWave.startNewWave();
}
}
));
return true;
case 5:
if ((sMoney - 100 >= 0) && (GestureDefence.this.sCastle.getCurrentHealth() < GestureDefence.this.sCastle.getMaxHealth())) {
sMoney-=100;
sCastle.increaseHealth(100);
GestureDefence.this.theWave.mCashAmountItem.setText(""String_Node_Str"" + sMoney);
GestureDefence.this.theWave.mBuyMenuItem.setText(""String_Node_Str"" + GestureDefence.this.sCastle.getCurrentHealth() + ""String_Node_Str""+ GestureDefence.this.sCastle.getMaxHealth());
GestureDefence.this.CustomHUD.updateCashValue();
GestureDefence.this.CustomHUD.updateCastleHealth();
}
return true;
case 7:
if (sMoney - 1000 >= 0) {
sMoney-=1000;
sCastle.increaseMaxHealth(250);
GestureDefence.this.theWave.mCashAmountItem.setText(""String_Node_Str"" + sMoney);
GestureDefence.this.theWave.mBuyMenuItem.setText(""String_Node_Str"" + GestureDefence.this.sCastle.getCurrentHealth() + ""String_Node_Str""+ GestureDefence.this.sCastle.getMaxHealth());
GestureDefence.this.CustomHUD.updateCashValue();
GestureDefence.this.CustomHUD.updateCastleHealth();
}
return true;
case 9:
GestureDefence.this.theWave.setWaveNumber(1);
GestureDefence.this.sKillCount=0;
GestureDefence.this.sPreviousKillCount=0;
GestureDefence.this.sPreviousWaveNum=0;
GestureDefence.this.sMoney=0;
GestureDefence.this.mMoneyEarned=0;
GestureDefence.this.sEnemyCount=0;
GestureDefence.this.CustomHUD.updateCashValue();
GestureDefence.this.sCastle.setCurrentHealth(3000);
GestureDefence.this.sCastle.setMaxHealth(3000);
GestureDefence.this.CustomHUD.updateCastleHealth();
GestureDefence.this.mana=0;
GestureDefence.this.CustomHUD.updateManaValue();
GestureDefence.this.mOnScreenEnemies=0;
GestureDefence.this.sm.GameScreen.getChild(3).detachChildren();
GestureDefence.this.sm.loadMainMenu();
return true;
case 99:
this.finish();
return true;
default :
return false;
}
}","public boolean ButtonPress(int ButtonID){
switch (ButtonID) {
case 1:
    GestureDefence.this.sm.NewWaveScreen();
  GestureDefence.this.sm.NewWaveScene.registerUpdateHandler(new TimerHandler(3.0f,true,new ITimerCallback(){
    @Override public void onTimePassed(    final TimerHandler pTimerHandler){
      GestureDefence.this.sm.NewWaveScene.unregisterUpdateHandler(pTimerHandler);
      GestureDefence.this.sm.GameScreen();
      GestureDefence.this.theWave.startNewWave();
    }
  }
));
return true;
case 3:
GestureDefence.this.theWave.NextWave();
GestureDefence.this.theWave.mWaveNumberMenuItem.setText(""String_Node_Str"" + theWave.getWaveNumber());
GestureDefence.this.sm.NewWaveScreen();
GestureDefence.this.sm.NewWaveScene.registerUpdateHandler(new TimerHandler(4.0f,true,new ITimerCallback(){
@Override public void onTimePassed(final TimerHandler pTimerHandler){
GestureDefence.this.sm.NewWaveScene.unregisterUpdateHandler(pTimerHandler);
GestureDefence.this.sm.GameScreen();
GestureDefence.this.theWave.startNewWave();
}
}
));
return true;
case 5:
if ((sMoney - 100 >= 0) && (GestureDefence.this.sCastle.getCurrentHealth() < GestureDefence.this.sCastle.getMaxHealth())) {
sMoney-=100;
sCastle.increaseHealth(100);
GestureDefence.this.theWave.mCashAmountItem.setText(""String_Node_Str"" + sMoney);
GestureDefence.this.theWave.mBuyMenuItem.setText(""String_Node_Str"" + GestureDefence.this.sCastle.getCurrentHealth() + ""String_Node_Str""+ GestureDefence.this.sCastle.getMaxHealth());
GestureDefence.this.CustomHUD.updateCashValue();
GestureDefence.this.CustomHUD.updateCastleHealth();
}
return true;
case 7:
if (sMoney - 1000 >= 0) {
sMoney-=1000;
sCastle.increaseMaxHealth(250);
GestureDefence.this.theWave.mCashAmountItem.setText(""String_Node_Str"" + sMoney);
GestureDefence.this.theWave.mBuyMenuItem.setText(""String_Node_Str"" + GestureDefence.this.sCastle.getCurrentHealth() + ""String_Node_Str""+ GestureDefence.this.sCastle.getMaxHealth());
GestureDefence.this.CustomHUD.updateCashValue();
GestureDefence.this.CustomHUD.updateCastleHealth();
}
return true;
case 9:
GestureDefence.this.theWave.setWaveNumber(1);
GestureDefence.this.sKillCount=0;
GestureDefence.this.sPreviousKillCount=0;
GestureDefence.this.sPreviousWaveNum=0;
GestureDefence.this.sMoney=0;
GestureDefence.this.mMoneyEarned=0;
GestureDefence.this.sEnemyCount=0;
GestureDefence.this.CustomHUD.updateCashValue();
GestureDefence.this.sCastle.setCurrentHealth(3000);
GestureDefence.this.sCastle.setMaxHealth(3000);
GestureDefence.this.CustomHUD.updateCastleHealth();
GestureDefence.this.mana=0;
GestureDefence.this.CustomHUD.updateManaValue();
GestureDefence.this.mOnScreenEnemies=0;
clearGameScene();
GestureDefence.this.sm.loadMainMenu();
return true;
case 99:
this.finish();
return true;
default :
return false;
}
}"
84656,"public void loadCastle(float X,float Y){
  GestureDefence.this.sCastle.setPosition(X,Y);
  GestureDefence.this.sm.GameScreen.getChild(2).attachChild(sCastle);
}","public void loadCastle(float X,float Y){
  GestureDefence.this.sCastle.setPosition(X,Y);
  GestureDefence.this.sm.GameScreen.attachChild(sCastle);
}"
84657,"@Override public void onTimePassed(final TimerHandler pTimerHandler){
  GestureDefence.this.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
  GestureDefence.this.sm.GameScreen.getChild(4).detachChildren();
}","@Override public void onTimePassed(final TimerHandler pTimerHandler){
  for (int i=(GestureDefence.this.line.size() - 1); i >= 0; i--) {
    final Line tempLine=GestureDefence.this.line.get(i);
    GestureDefence.this.sm.GameScreen.detachChild(tempLine);
  }
  GestureDefence.this.line.clear();
  GestureDefence.this.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
}"
84658,"public void loadNewEnemy(final float X,final float Y,final int type){
  final Enemy newEnemy;
switch (type) {
case 1:
    newEnemy=GestureDefence.this.getEnemyPool(1).obtainPoolItem();
  newEnemy.setXY(X,Y);
newEnemy.setType1();
break;
case 2:
newEnemy=GestureDefence.this.getEnemyPool(2).obtainPoolItem();
newEnemy.setXY(X,Y);
newEnemy.setType2();
newEnemy.setScale(1.5f);
break;
default :
newEnemy=GestureDefence.this.getEnemyPool(1).obtainPoolItem();
newEnemy.setXY(X,Y);
newEnemy.setType1();
break;
}
if (!newEnemy.hasParent()) GestureDefence.this.sm.GameScreen.getChild(1).attachChild(newEnemy);
if (!newEnemy.isVisible()) newEnemy.setVisible(true);
GestureDefence.this.sm.GameScreen.registerTouchArea(newEnemy);
GestureDefence.this.sm.GameScreen.setTouchAreaBindingEnabled(true);
GestureDefence.this.sEnemyCount++;
GestureDefence.this.mOnScreenEnemies++;
}","public void loadNewEnemy(final float X,final float Y,final int type){
  final Enemy newEnemy;
switch (type) {
case 1:
    newEnemy=GestureDefence.this.getEnemyPool(1).obtainPoolItem();
  newEnemy.setXY(X,Y);
newEnemy.setType1();
break;
case 2:
newEnemy=GestureDefence.this.getEnemyPool(2).obtainPoolItem();
newEnemy.setXY(X,Y);
newEnemy.setType2();
newEnemy.setScale(1.5f);
break;
default :
newEnemy=GestureDefence.this.getEnemyPool(1).obtainPoolItem();
newEnemy.setXY(X,Y);
newEnemy.setType1();
break;
}
if (!newEnemy.hasParent()) GestureDefence.this.sm.GameScreen.attachChild(newEnemy);
if (!newEnemy.isVisible()) newEnemy.setVisible(true);
GestureDefence.this.sm.GameScreen.registerTouchArea(newEnemy);
GestureDefence.this.sm.GameScreen.setTouchAreaBindingEnabled(true);
GestureDefence.this.sEnemyCount++;
GestureDefence.this.mOnScreenEnemies++;
}"
84659,"@Override public Scene onLoadScene(){
  this.mEngine.registerUpdateHandler(new FPSLogger());
  final Scene loadScene=new Scene(1);
  loadScene.setBackground(new ColorBackground(0.09804f,0.6274f,0.8784f));
  final Text textCenter=new Text(100,60,this.mFont,""String_Node_Str"",HorizontalAlign.CENTER);
  loadScene.attachChild(textCenter);
  CustomHUD=new HUD_revamp(GestureDefence.this);
  GestureDefence.this.fileThingy=new FileOperations(GestureDefence.this);
  OpenFeintSettings settings=new OpenFeintSettings(OFgameName,OFgameKey,OFgameSecret,OFgameId);
  OpenFeint.initializeWithoutLoggingIn(GestureDefence.this,settings,new OpenFeintDelegate(){
  }
);
  hasGameLoaded=true;
  Notification.setDelegate(new Delegate(){
    @Override public boolean canShowNotification(    Notification notification){
      return false;
    }
    @Override public void displayNotification(    Notification notification){
      GestureDefence.this.CustomNotifications.addNotification(notification.getText());
    }
  }
);
  loadScene.registerUpdateHandler(new TimerHandler(1.0f,true,new ITimerCallback(){
    @Override public void onTimePassed(    final TimerHandler pTimerHandler){
      loadScene.unregisterUpdateHandler(pTimerHandler);
      GestureDefence.this.mAutoParallaxBackgroundTexture=new BitmapTextureAtlas(1024,1024,TextureOptions.DEFAULT);
      GestureDefence.this.setParallaxLayerBack(BitmapTextureAtlasTextureRegionFactory.createFromAsset(mAutoParallaxBackgroundTexture,GestureDefence.this,""String_Node_Str"",0,0));
      GestureDefence.this.setParallaxLayerFront(BitmapTextureAtlasTextureRegionFactory.createFromAsset(mAutoParallaxBackgroundTexture,GestureDefence.this,""String_Node_Str"",0,650));
      GestureDefence.this.getEngine().getTextureManager().loadTexture(GestureDefence.this.mAutoParallaxBackgroundTexture);
      GestureDefence.this.autoParallaxBackground=new AutoParallaxBackground(0,0,0,5);
      GestureDefence.this.backgroundSprite1=new Sprite(0,getCameraHeight() - getParallaxLayerBack().getHeight(),getParallaxLayerBack());
      GestureDefence.this.backgroundSprite2=new Sprite(0,80,getParallaxLayerFront());
      GestureDefence.this.backgroundSprite3=new Sprite(35,62,getParallaxLayerFront());
      GestureDefence.this.autoParallaxBackground.attachParallaxEntity(new ParallaxEntity(0.0f,GestureDefence.this.backgroundSprite1));
      GestureDefence.this.autoParallaxBackground.attachParallaxEntity(new ParallaxEntity(-5.0f,GestureDefence.this.backgroundSprite2));
      GestureDefence.this.autoParallaxBackground.attachParallaxEntity(new ParallaxEntity(-10.0f,GestureDefence.this.backgroundSprite3));
      GestureDefence.this.newEnemyTexture=new BitmapTextureAtlas(256,256,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.sEnemyTextureRegion=BitmapTextureAtlasTextureRegionFactory.createTiledFromAsset(newEnemyTexture,GestureDefence.this,""String_Node_Str"",0,0,3,4);
      GestureDefence.this.newEnemyTexture2=new BitmapTextureAtlas(256,256,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.sEnemyTextureRegion2=BitmapTextureAtlasTextureRegionFactory.createTiledFromAsset(newEnemyTexture2,GestureDefence.this,""String_Node_Str"",0,0,3,4);
      GestureDefence.this.getEngine().getTextureManager().loadTextures(GestureDefence.this.newEnemyTexture,GestureDefence.this.newEnemyTexture2);
      GestureDefence.this.mLightningTexture=new BitmapTextureAtlas(1024,512,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mLightningTextureRegion=BitmapTextureAtlasTextureRegionFactory.createTiledFromAsset(mLightningTexture,GestureDefence.this,""String_Node_Str"",0,0,6,1);
      GestureDefence.this.getEngine().getTextureManager().loadTexture(GestureDefence.this.mLightningTexture);
      GestureDefence.this.mManaTexture=new BitmapTextureAtlas(64,64,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mManaTextureRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mManaTexture,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.getEngine().getTextureManager().loadTexture(GestureDefence.this.mManaTexture);
      GestureDefence.this.mGoldTexture=new BitmapTextureAtlas(64,64,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mGoldTextureRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mGoldTexture,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.getEngine().getTextureManager().loadTexture(GestureDefence.this.mGoldTexture);
      GestureDefence.this.mCastleTexture=new BitmapTextureAtlas(128,128,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mCastleTextureRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mCastleTexture,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.getEngine().getTextureManager().loadTexture(GestureDefence.this.mCastleTexture);
      GestureDefence.this.mStartButton=new BitmapTextureAtlas(256,64,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mStartButtonRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mStartButton,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.mQuitButton=new BitmapTextureAtlas(256,64,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mQuitButtonRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mQuitButton,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.mBuyButton=new BitmapTextureAtlas(256,64,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mBuyButtonRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mBuyButton,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.mNextWaveButton=new BitmapTextureAtlas(256,64,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mNextWaveButtonRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mNextWaveButton,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.getEngine().getTextureManager().loadTextures(GestureDefence.this.mStartButton,GestureDefence.this.mQuitButton,GestureDefence.this.mBuyButton,GestureDefence.this.mNextWaveButton);
      GestureDefence.this.sMoney=0;
      GestureDefence.this.theWave=new Wave(GestureDefence.this);
      GestureDefence.this.sCastle=new Castle(0,0,GestureDefence.this.mCastleTextureRegion);
      GestureDefence.this.sCastle.setCastleBase(GestureDefence.this);
      GestureDefence.this.handler.post(new Runnable(){
        public void run(){
          GestureDefence.this.AchieveTracker=new Atracker(GestureDefence.this);
          GestureDefence.this.AchieveTracker.loadAchievements();
        }
      }
);
      SoundFactory.setAssetBasePath(""String_Node_Str"");
      try {
        GestureDefence.this.splat=SoundFactory.createSoundFromAsset(GestureDefence.this.getEngine().getSoundManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.splat.setVolume(1.0f);
        GestureDefence.this.attack=SoundFactory.createSoundFromAsset(GestureDefence.this.getEngine().getSoundManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.attack.setVolume(0.1f);
        GestureDefence.this.hurt=SoundFactory.createSoundFromAsset(GestureDefence.this.getEngine().getSoundManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.hurt.setVolume(0.5f);
        GestureDefence.this.complete=SoundFactory.createSoundFromAsset(GestureDefence.this.getEngine().getSoundManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.complete.setVolume(2.0f);
        GestureDefence.this.game_over=SoundFactory.createSoundFromAsset(GestureDefence.this.getEngine().getSoundManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.game_over.setVolume(5.0f);
        GestureDefence.this.lightningStrike=SoundFactory.createSoundFromAsset(GestureDefence.this.getEngine().getSoundManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.lightningStrike.setVolume(5.0f);
        GestureDefence.this.ambient=MusicFactory.createMusicFromAsset(GestureDefence.this.getEngine().getMusicManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.ambient.setVolume(0.5f);
      }
 catch (      final IOException e) {
      }
      GestureDefence.this.setEnemyPool(1,new EnemyPool(GestureDefence.this.sEnemyTextureRegion,GestureDefence.this));
      GestureDefence.this.setEnemyPool(2,new EnemyPool(GestureDefence.this.sEnemyTextureRegion2,GestureDefence.this));
      GestureDefence.this.setManaPool(new ManaPool(GestureDefence.this.mManaTextureRegion,GestureDefence.this));
      GestureDefence.this.setGoldPool(new GoldPool(GestureDefence.this.mGoldTextureRegion,GestureDefence.this));
      GestureDefence.this.setGoldTextPool(new goldTextPool(GestureDefence.this));
      GestureDefence.this.sm.loadMainMenu();
    }
  }
));
  return loadScene;
}","@Override public Scene onLoadScene(){
  this.mEngine.registerUpdateHandler(new FPSLogger());
  final Scene loadScene=new Scene();
  loadScene.setBackground(new ColorBackground(0.09804f,0.6274f,0.8784f));
  final Text textCenter=new Text(100,60,this.mFont,""String_Node_Str"",HorizontalAlign.CENTER);
  loadScene.attachChild(textCenter);
  CustomHUD=new HUD_revamp(GestureDefence.this);
  GestureDefence.this.fileThingy=new FileOperations(GestureDefence.this);
  OpenFeintSettings settings=new OpenFeintSettings(OFgameName,OFgameKey,OFgameSecret,OFgameId);
  OpenFeint.initializeWithoutLoggingIn(GestureDefence.this,settings,new OpenFeintDelegate(){
  }
);
  hasGameLoaded=true;
  Notification.setDelegate(new Delegate(){
    @Override public boolean canShowNotification(    Notification notification){
      return false;
    }
    @Override public void displayNotification(    Notification notification){
      GestureDefence.this.CustomNotifications.addNotification(notification.getText());
    }
  }
);
  loadScene.registerUpdateHandler(new TimerHandler(1.0f,true,new ITimerCallback(){
    @Override public void onTimePassed(    final TimerHandler pTimerHandler){
      loadScene.unregisterUpdateHandler(pTimerHandler);
      GestureDefence.this.mAutoParallaxBackgroundTexture=new BitmapTextureAtlas(1024,1024,TextureOptions.DEFAULT);
      GestureDefence.this.setParallaxLayerBack(BitmapTextureAtlasTextureRegionFactory.createFromAsset(mAutoParallaxBackgroundTexture,GestureDefence.this,""String_Node_Str"",0,0));
      GestureDefence.this.setParallaxLayerFront(BitmapTextureAtlasTextureRegionFactory.createFromAsset(mAutoParallaxBackgroundTexture,GestureDefence.this,""String_Node_Str"",0,650));
      GestureDefence.this.getEngine().getTextureManager().loadTexture(GestureDefence.this.mAutoParallaxBackgroundTexture);
      GestureDefence.this.autoParallaxBackground=new AutoParallaxBackground(0,0,0,5);
      GestureDefence.this.backgroundSprite1=new Sprite(0,getCameraHeight() - getParallaxLayerBack().getHeight(),getParallaxLayerBack());
      GestureDefence.this.backgroundSprite2=new Sprite(0,80,getParallaxLayerFront());
      GestureDefence.this.backgroundSprite3=new Sprite(35,62,getParallaxLayerFront());
      GestureDefence.this.autoParallaxBackground.attachParallaxEntity(new ParallaxEntity(0.0f,GestureDefence.this.backgroundSprite1));
      GestureDefence.this.autoParallaxBackground.attachParallaxEntity(new ParallaxEntity(-5.0f,GestureDefence.this.backgroundSprite2));
      GestureDefence.this.autoParallaxBackground.attachParallaxEntity(new ParallaxEntity(-10.0f,GestureDefence.this.backgroundSprite3));
      GestureDefence.this.newEnemyTexture=new BitmapTextureAtlas(256,256,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.sEnemyTextureRegion=BitmapTextureAtlasTextureRegionFactory.createTiledFromAsset(newEnemyTexture,GestureDefence.this,""String_Node_Str"",0,0,3,4);
      GestureDefence.this.newEnemyTexture2=new BitmapTextureAtlas(256,256,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.sEnemyTextureRegion2=BitmapTextureAtlasTextureRegionFactory.createTiledFromAsset(newEnemyTexture2,GestureDefence.this,""String_Node_Str"",0,0,3,4);
      GestureDefence.this.getEngine().getTextureManager().loadTextures(GestureDefence.this.newEnemyTexture,GestureDefence.this.newEnemyTexture2);
      GestureDefence.this.mLightningTexture=new BitmapTextureAtlas(1024,512,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mLightningTextureRegion=BitmapTextureAtlasTextureRegionFactory.createTiledFromAsset(mLightningTexture,GestureDefence.this,""String_Node_Str"",0,0,6,1);
      GestureDefence.this.getEngine().getTextureManager().loadTexture(GestureDefence.this.mLightningTexture);
      GestureDefence.this.mManaTexture=new BitmapTextureAtlas(64,64,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mManaTextureRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mManaTexture,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.getEngine().getTextureManager().loadTexture(GestureDefence.this.mManaTexture);
      GestureDefence.this.mGoldTexture=new BitmapTextureAtlas(64,64,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mGoldTextureRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mGoldTexture,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.getEngine().getTextureManager().loadTexture(GestureDefence.this.mGoldTexture);
      GestureDefence.this.mCastleTexture=new BitmapTextureAtlas(128,128,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mCastleTextureRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mCastleTexture,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.getEngine().getTextureManager().loadTexture(GestureDefence.this.mCastleTexture);
      GestureDefence.this.mStartButton=new BitmapTextureAtlas(256,64,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mStartButtonRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mStartButton,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.mQuitButton=new BitmapTextureAtlas(256,64,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mQuitButtonRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mQuitButton,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.mBuyButton=new BitmapTextureAtlas(256,64,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mBuyButtonRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mBuyButton,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.mNextWaveButton=new BitmapTextureAtlas(256,64,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
      GestureDefence.this.mNextWaveButtonRegion=BitmapTextureAtlasTextureRegionFactory.createFromAsset(mNextWaveButton,GestureDefence.this,""String_Node_Str"",0,0);
      GestureDefence.this.getEngine().getTextureManager().loadTextures(GestureDefence.this.mStartButton,GestureDefence.this.mQuitButton,GestureDefence.this.mBuyButton,GestureDefence.this.mNextWaveButton);
      GestureDefence.this.sMoney=0;
      GestureDefence.this.theWave=new Wave(GestureDefence.this);
      GestureDefence.this.sCastle=new Castle(0,0,GestureDefence.this.mCastleTextureRegion);
      GestureDefence.this.sCastle.setCastleBase(GestureDefence.this);
      GestureDefence.this.handler.post(new Runnable(){
        public void run(){
          GestureDefence.this.AchieveTracker=new Atracker(GestureDefence.this);
          GestureDefence.this.AchieveTracker.loadAchievements();
        }
      }
);
      SoundFactory.setAssetBasePath(""String_Node_Str"");
      try {
        GestureDefence.this.splat=SoundFactory.createSoundFromAsset(GestureDefence.this.getEngine().getSoundManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.splat.setVolume(1.0f);
        GestureDefence.this.attack=SoundFactory.createSoundFromAsset(GestureDefence.this.getEngine().getSoundManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.attack.setVolume(0.1f);
        GestureDefence.this.hurt=SoundFactory.createSoundFromAsset(GestureDefence.this.getEngine().getSoundManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.hurt.setVolume(0.5f);
        GestureDefence.this.complete=SoundFactory.createSoundFromAsset(GestureDefence.this.getEngine().getSoundManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.complete.setVolume(2.0f);
        GestureDefence.this.game_over=SoundFactory.createSoundFromAsset(GestureDefence.this.getEngine().getSoundManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.game_over.setVolume(5.0f);
        GestureDefence.this.lightningStrike=SoundFactory.createSoundFromAsset(GestureDefence.this.getEngine().getSoundManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.lightningStrike.setVolume(5.0f);
        GestureDefence.this.ambient=MusicFactory.createMusicFromAsset(GestureDefence.this.getEngine().getMusicManager(),GestureDefence.this,""String_Node_Str"");
        GestureDefence.this.ambient.setVolume(0.5f);
      }
 catch (      final IOException e) {
      }
      GestureDefence.this.setEnemyPool(1,new EnemyPool(GestureDefence.this.sEnemyTextureRegion,GestureDefence.this));
      GestureDefence.this.setEnemyPool(2,new EnemyPool(GestureDefence.this.sEnemyTextureRegion2,GestureDefence.this));
      GestureDefence.this.setManaPool(new ManaPool(GestureDefence.this.mManaTextureRegion,GestureDefence.this));
      GestureDefence.this.setGoldPool(new GoldPool(GestureDefence.this.mGoldTextureRegion,GestureDefence.this));
      GestureDefence.this.setGoldTextPool(new goldTextPool(GestureDefence.this));
      GestureDefence.this.sm.loadMainMenu();
    }
  }
));
  return loadScene;
}"
84660,"public void killEnemy(){
  if (currentAnimationCycle != 3) {
    mPhysicsHandler.setEnabled(false);
    base.sm.GameScreen.unregisterTouchArea(this);
    setAnimationCycle(3);
    base.splat.play();
    if (manaChance.nextInt(7) == 6) {
      Mana mMana=base.getManaPool().obtainPoolItem();
      mMana.setup(mX,mY);
      if (!mMana.hasParent())       base.sm.GameScreen.getChild(3).attachChild(mMana);
      base.sm.GameScreen.registerTouchArea(mMana);
    }
    if ((base.sKillCount - base.sPreviousKillCount) >= (base.theWave.getNumberEnemysToSpawn() - 3)) {
      Gold mGold=base.getGoldPool().obtainPoolItem();
      mGold.setup(mX,mY,111);
      if (!mGold.hasParent())       base.sm.GameScreen.getChild(3).attachChild(mGold);
      base.sm.GameScreen.registerTouchArea(mGold);
    }
    base.increaseXpProgress(mXpWorth);
  }
}","public void killEnemy(){
  if (currentAnimationCycle != 3) {
    mPhysicsHandler.setEnabled(false);
    base.sm.GameScreen.unregisterTouchArea(this);
    setAnimationCycle(3);
    base.splat.play();
    if (manaChance.nextInt(7) == 6) {
      Mana mMana=base.getManaPool().obtainPoolItem();
      mMana.setup(mX,mY);
      if (!mMana.hasParent())       base.sm.GameScreen.attachChild(mMana);
      base.sm.GameScreen.registerTouchArea(mMana);
    }
    if ((base.sKillCount - base.sPreviousKillCount) >= (base.theWave.getNumberEnemysToSpawn() - 3)) {
      Gold mGold=base.getGoldPool().obtainPoolItem();
      mGold.setup(mX,mY,111);
      if (!mGold.hasParent())       base.sm.GameScreen.attachChild(mGold);
      base.sm.GameScreen.registerTouchArea(mGold);
    }
    base.increaseXpProgress(mXpWorth);
  }
}"
84661,"@Override public void onManagedUpdate(final float pSecondsElapsed){
  if (!mGrabbedEnemy) {
    if (base.mLightningBolt && (mX <= base.mLightningBoltX + 100) && (mX >= base.mLightningBoltX - 100)&& (mY >= base.mLightningBoltY - 70)&& (mY <= base.mLightningBoltY + 20)) {
      hurtEnemy(1000.0f);
    }
    if (base.mEarthQuaking)     tripEnemy();
    if (mCanAttackCastle) {
      setAnimationCycle(4);
      if (!mAttackCastle) {
        mAttackCastle=true;
        this.registerUpdateHandler(new TimerHandler(1.0f,new ITimerCallback(){
          @Override public void onTimePassed(          final TimerHandler pTimerHandler){
            mAttackCastle=false;
            Castle.damageCastle(mAttackDamage);
            base.CustomHUD.updateCastleHealth();
            base.attack.play();
            unregisterUpdateHandler(pTimerHandler);
          }
        }
));
        if (mY + getHeight() / 2 >= baseY) {
          setPosition(mX,baseY);
          mPhysicsHandler.setVelocityY(0.0f);
        }
      }
    }
 else     if (!checkEnemyDeath()) {
      if (!mTripping) {
        if (mPhysicsHandler.isEnabled()) {
          if (mIsAirborne) {
            base.sm.GameScreen.unregisterTouchArea(this);
            setAnimationCycle(2);
            if (mX > (base.getCameraWidth() - (getWidth() / 2))) {
              mPhysicsHandler.setVelocityX(0.0f);
              mX=(base.getCameraWidth() - (getWidth() / 2));
            }
            if (mX < (0.0f - (getWidth() / 2))) {
              mPhysicsHandler.setVelocityX(0.0f);
              setPosition(0.0f - (getWidth() / 2),mY);
            }
            if (mY > baseY) {
              mIsAirborne=false;
              mGroundHitSpeed=mPhysicsHandler.getVelocityY();
              enemyFallDamage();
            }
 else             if (mY < baseY) {
              if (mPhysicsHandler.getVelocityY() < -1000)               mPhysicsHandler.setVelocityY(-1000);
              mPhysicsHandler.setVelocityY(mPhysicsHandler.getVelocityY() + mGravity);
            }
          }
 else {
            if (!mCanAttackCastle) {
              if (mPhysicsHandler.getVelocityX() == 0.0f) {
                if (mX < (base.sCastle.getX() - base.sCastle.getWidth() / 6) && mY >= baseY) {
                  mPhysicsHandler.setVelocityX(mSpeed);
                  setAnimationCycle(1);
                }
              }
              if (mX >= (base.sCastle.getX() - base.sCastle.getWidth() / 6)) {
                mPhysicsHandler.setVelocityX(0.0f);
                setPosition((base.sCastle.getX() - base.sCastle.getWidth() / 6),mY);
                enemyAtCastle(pSecondsElapsed);
              }
              if (mY < mInitialMoveY) {
                if ((mY - mPhysicsHandler.getVelocityY() - mGravity) < baseY)                 mPhysicsHandler.setVelocityY(mPhysicsHandler.getVelocityY() + mGravity);
 else {
                  mPhysicsHandler.setVelocityY(0.0f);
                  setPosition(mX,baseY);
                }
              }
 else               if (mY + getHeight() / 2 >= baseY)               mPhysicsHandler.setVelocityY(0.0f);
            }
          }
        }
      }
 else {
        if (!isAnimationRunning()) {
          mTripping=false;
          mPhysicsHandler.setEnabled(true);
          setAnimationCycle(1);
          base.sm.GameScreen.registerTouchArea(this);
          if (!mTripTracker)           base.AchieveTracker.Trips();
 else           mTripTracker=false;
        }
      }
    }
 else {
      killEnemy();
      if (!isAnimationRunning()) {
        base.CustomHUD.updateCashValue();
        base.sKillCount++;
        base.mOnScreenEnemies--;
        base.AchieveTracker.firstKill();
        sendEnemyToPool(mEnemyType,this);
      }
    }
  }
  super.onManagedUpdate(pSecondsElapsed);
}","@Override public void onManagedUpdate(final float pSecondsElapsed){
  if (mX > (base.getCameraWidth() - (getWidth() / 2))) {
    setPosition((base.getCameraWidth() - (getWidth() / 2)),mY);
  }
  if (mX < (0.0f - (getWidth() / 2))) {
    setPosition(0.0f - (getWidth() / 2),mY);
  }
  if (mY < -1000) {
    mPhysicsHandler.setVelocityY(200);
  }
  if (!mGrabbedEnemy) {
    if (base.mLightningBolt && (mX <= base.mLightningBoltX + 100) && (mX >= base.mLightningBoltX - 100)&& (mY >= base.mLightningBoltY - 70)&& (mY <= base.mLightningBoltY + 20)) {
      hurtEnemy(1000.0f);
    }
    if (base.mEarthQuaking)     tripEnemy();
    if (mCanAttackCastle) {
      setAnimationCycle(4);
      if (!mAttackCastle) {
        mAttackCastle=true;
        this.registerUpdateHandler(new TimerHandler(1.0f,new ITimerCallback(){
          @Override public void onTimePassed(          final TimerHandler pTimerHandler){
            mAttackCastle=false;
            Castle.damageCastle(mAttackDamage);
            base.CustomHUD.updateCastleHealth();
            base.attack.play();
            unregisterUpdateHandler(pTimerHandler);
          }
        }
));
        if (mY + getHeight() / 2 >= baseY) {
          setPosition(mX,baseY);
          mPhysicsHandler.setVelocityY(0.0f);
        }
      }
    }
 else     if (!checkEnemyDeath()) {
      if (!mTripping) {
        if (mPhysicsHandler.isEnabled()) {
          if (mIsAirborne) {
            base.sm.GameScreen.unregisterTouchArea(this);
            setAnimationCycle(2);
            if (mX > (base.getCameraWidth() - (getWidth() / 2))) {
              mPhysicsHandler.setVelocityX(0.0f);
              mX=(base.getCameraWidth() - (getWidth() / 2));
            }
            if (mX < (0.0f - (getWidth() / 2))) {
              mPhysicsHandler.setVelocityX(0.0f);
              setPosition(0.0f - (getWidth() / 2),mY);
            }
            if (mY > baseY) {
              setPosition(mX,baseY);
              mIsAirborne=false;
              mGroundHitSpeed=mPhysicsHandler.getVelocityY();
              enemyFallDamage();
            }
 else             if (mY < baseY) {
              if (mPhysicsHandler.getVelocityY() < -1000)               mPhysicsHandler.setVelocityY(-1000);
              mPhysicsHandler.setVelocityY(mPhysicsHandler.getVelocityY() + mGravity);
            }
          }
 else {
            if (!mCanAttackCastle) {
              if (mPhysicsHandler.getVelocityX() == 0.0f) {
                if (mX < (base.sCastle.getX() - base.sCastle.getWidth() / 6) && mY >= baseY) {
                  mPhysicsHandler.setVelocityX(mSpeed);
                  setAnimationCycle(1);
                }
              }
              if (mX >= (base.sCastle.getX() - base.sCastle.getWidth() / 6)) {
                mPhysicsHandler.setVelocityX(0.0f);
                setPosition((base.sCastle.getX() - base.sCastle.getWidth() / 6),mY);
                enemyAtCastle(pSecondsElapsed);
              }
              if (mY < mInitialMoveY) {
                if ((mY - mPhysicsHandler.getVelocityY() - mGravity) < baseY)                 mPhysicsHandler.setVelocityY(mPhysicsHandler.getVelocityY() + mGravity);
 else {
                  mPhysicsHandler.setVelocityY(0.0f);
                  setPosition(mX,baseY);
                }
              }
 else               if (mY + getHeight() / 2 >= baseY)               mPhysicsHandler.setVelocityY(0.0f);
            }
          }
        }
      }
 else {
        if (!isAnimationRunning()) {
          mTripping=false;
          mPhysicsHandler.setEnabled(true);
          setAnimationCycle(1);
          base.sm.GameScreen.registerTouchArea(this);
          if (!mTripTracker)           base.AchieveTracker.Trips();
 else           mTripTracker=false;
        }
      }
    }
 else {
      killEnemy();
      if (!isAnimationRunning()) {
        base.CustomHUD.updateCashValue();
        base.sKillCount++;
        base.mOnScreenEnemies--;
        base.AchieveTracker.firstKill();
        sendEnemyToPool(mEnemyType,this);
      }
    }
  }
  super.onManagedUpdate(pSecondsElapsed);
}"
84662,"@Override public void onManagedUpdate(final float pSecondsElapsed){
  if (killIT) {
    base.sm.GameScreen.unregisterTouchArea(this);
    base.getManaPool().recyclePoolItem(this);
  }
 else {
    if (this.mY < this.mInitialY) {
      this.mPhysicsHandler.setVelocityY(this.mPhysicsHandler.getVelocityY() + mGravity);
    }
 else {
      this.mPhysicsHandler.setVelocity(0.0f,0.0f);
    }
  }
  super.onManagedUpdate(pSecondsElapsed);
}","@Override public void onManagedUpdate(final float pSecondsElapsed){
  if (killIT) {
    base.sm.GameScreen.unregisterTouchArea(this);
    base.getManaPool().recyclePoolItem(this);
  }
 else {
    if (this.mY < this.mInitialY) {
      this.mPhysicsHandler.setVelocityY(this.mPhysicsHandler.getVelocityY() + mGravity);
      this.setPosition(mX,mInitialY);
    }
 else {
      this.mPhysicsHandler.setVelocity(0.0f,0.0f);
    }
  }
  super.onManagedUpdate(pSecondsElapsed);
}"
84663,"@Override public void onTimePassed(TimerHandler pTimerHandler){
  currentEarthDuration++;
  if (currentEarthDuration >= EarthQuakeDuration) {
    base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
    currentEarthDuration=0;
    base.sCamera.setCenter(base.sCamera.getWidth() / 2,base.sCamera.getHeight() / 2);
    base.backgroundSprite1.setPosition(0.0f,0.0f + (base.getCameraHeight() - base.getParallaxLayerBack().getHeight()));
    base.backgroundSprite2.setPosition(0.0f,0.0f + 80);
    base.backgroundSprite3.setPosition(0.0f + 35,0.0f + 62);
    base.mEarthQuaking=false;
  }
 else {
    if (currentEarthDuration % 6 == 0 || currentEarthDuration == 1) {
      if ((base.mana - 500) >= 0) {
        base.mana-=500;
        base.CustomHUD.updateManaValue();
        float theX=MathUtils.random(-10.0f,10.0f);
        float theY=MathUtils.random(-10.0f,10.0f);
        base.sCamera.offsetCenter(theX,theY);
        base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
        base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
        base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
        base.mEarthQuaking=true;
      }
 else {
        base.mEarthQuaking=false;
        currentEarthDuration=EarthQuakeDuration;
      }
    }
 else {
      float theX=MathUtils.random(-10.0f,10.0f);
      float theY=MathUtils.random(-10.0f,10.0f);
      base.sCamera.offsetCenter(theX,theY);
      base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
      base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
      base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
      base.mEarthQuaking=false;
    }
    pTimerHandler.reset();
  }
}","@Override public void onTimePassed(TimerHandler pTimerHandler){
  currentEarthDuration++;
  if (currentEarthDuration >= EarthQuakeDuration) {
    base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
    currentEarthDuration=0;
    base.getCamera().setCenter(base.getCameraWidth() / 2,base.getCameraHeight() / 2);
    base.backgroundSprite1.setPosition(0.0f,0.0f + (base.getCameraHeight() - base.getParallaxLayerBack().getHeight()));
    base.backgroundSprite2.setPosition(0.0f,0.0f + 80);
    base.backgroundSprite3.setPosition(0.0f + 35,0.0f + 62);
    base.mEarthQuaking=false;
  }
 else {
    if (currentEarthDuration % 6 == 0 || currentEarthDuration == 1) {
      if ((base.mana - 500) >= 0) {
        base.mana-=500;
        base.CustomHUD.updateManaValue();
        float theX=MathUtils.random(-10.0f,10.0f);
        float theY=MathUtils.random(-10.0f,10.0f);
        base.getCamera().offsetCenter(theX,theY);
        base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
        base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
        base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
        base.mEarthQuaking=true;
      }
 else {
        base.mEarthQuaking=false;
        currentEarthDuration=EarthQuakeDuration;
      }
    }
 else {
      float theX=MathUtils.random(-10.0f,10.0f);
      float theY=MathUtils.random(-10.0f,10.0f);
      base.getCamera().offsetCenter(theX,theY);
      base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
      base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
      base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
      base.mEarthQuaking=false;
    }
    pTimerHandler.reset();
  }
}"
84664,"public void loadPauseScreen(){
  if (PauseScreen == null) {
    PauseScreen=new Scene(1);
    Text someText=new Text((base.getCameraWidth() / 2) - 10,(base.getCameraHeight() / 2) - 10,base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.sm.GameScreen();
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text restartText=new Text(someText.getX(),someText.getY() - someText.getHeight(),base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(9);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text openFeintText=new Text(someText.getX(),someText.getY() + someText.getHeight(),base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        Dashboard.open();
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    PauseScreen.registerTouchArea(someText);
    PauseScreen.registerTouchArea(restartText);
    PauseScreen.registerTouchArea(openFeintText);
    PauseScreen.attachChild(someText);
    PauseScreen.attachChild(restartText);
    PauseScreen.attachChild(openFeintText);
  }
  checkHud();
  base.getEngine().setScene(PauseScreen);
  CameraCheck();
}","public void loadPauseScreen(){
  if (PauseScreen == null) {
    PauseScreen=new Scene();
    Text someText=new Text((base.getCameraWidth() / 2) - 10,(base.getCameraHeight() / 2) - 10,base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.sm.GameScreen();
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text restartText=new Text(someText.getX(),someText.getY() - someText.getHeight(),base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(9);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text openFeintText=new Text(someText.getX(),someText.getY() + someText.getHeight(),base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        Dashboard.open();
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    PauseScreen.registerTouchArea(someText);
    PauseScreen.registerTouchArea(restartText);
    PauseScreen.registerTouchArea(openFeintText);
    PauseScreen.attachChild(someText);
    PauseScreen.attachChild(restartText);
    PauseScreen.attachChild(openFeintText);
  }
  checkHud();
  base.getEngine().setScene(PauseScreen);
  CameraCheck();
}"
84665,"public void loadQuitMenu(Scene TheSceneFrom){
  this.QuitMenuCameFrom=TheSceneFrom;
  if (QuitMenu == null) {
    QuitMenu=new Scene(1);
    Text areyouSure=new Text(30,(base.getCameraHeight() / 2) - 10,base.mFont,""String_Node_Str"");
    Text YesOption=new Text(areyouSure.getX(),areyouSure.getY() + areyouSure.getHeight(),base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(99);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text NoOption=new Text(YesOption.getX() + YesOption.getWidth() + 20,areyouSure.getY() + areyouSure.getHeight(),base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.getEngine().setScene(QuitMenuCameFrom);
        if (QuitMenuCameFrom == GameScreen)         if (base.CustomHUD.getHud() != null)         base.CustomHUD.HideValues(true);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    QuitMenu.attachChild(areyouSure);
    QuitMenu.attachChild(YesOption);
    QuitMenu.attachChild(NoOption);
    QuitMenu.registerTouchArea(YesOption);
    QuitMenu.registerTouchArea(NoOption);
  }
  checkHud();
  base.getEngine().setScene(QuitMenu);
  CameraCheck();
}","public void loadQuitMenu(Scene TheSceneFrom){
  this.QuitMenuCameFrom=TheSceneFrom;
  if (QuitMenu == null) {
    QuitMenu=new Scene();
    Text areyouSure=new Text(30,(base.getCameraHeight() / 2) - 10,base.mFont,""String_Node_Str"");
    Text YesOption=new Text(areyouSure.getX(),areyouSure.getY() + areyouSure.getHeight(),base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(99);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text NoOption=new Text(YesOption.getX() + YesOption.getWidth() + 20,areyouSure.getY() + areyouSure.getHeight(),base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.getEngine().setScene(QuitMenuCameFrom);
        if (QuitMenuCameFrom == GameScreen)         if (base.CustomHUD.getHud() != null)         base.CustomHUD.HideValues(true);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    QuitMenu.attachChild(areyouSure);
    QuitMenu.attachChild(YesOption);
    QuitMenu.attachChild(NoOption);
    QuitMenu.registerTouchArea(YesOption);
    QuitMenu.registerTouchArea(NoOption);
  }
  checkHud();
  base.getEngine().setScene(QuitMenu);
  CameraCheck();
}"
84666,"public void LoadShopMenu(){
  if (InGameShop == null) {
    InGameShop=new Scene(1);
    Text BuyThing1=new Text(10,base.getCameraHeight() / 2,base.mFont2,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.mSku=base.CATALOG[0].sku;
        if (!base.mBillingService.requestPurchase(base.mSku,base.mPayloadContent))         base.CustomNotifications.addNotification(""String_Node_Str"");
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text BuyThing2=new Text(10,BuyThing1.getX() + BuyThing1.getHeight(),base.mFont2,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text BackToMenu=new Text(10,base.getCameraHeight() - BuyThing2.getHeight(),base.mFont2,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.sm.loadMainMenu();
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    InGameShop.attachChild(BuyThing1);
    InGameShop.registerTouchArea(BuyThing1);
    InGameShop.attachChild(BuyThing2);
    InGameShop.registerTouchArea(BuyThing2);
    InGameShop.attachChild(BackToMenu);
    InGameShop.registerTouchArea(BackToMenu);
  }
  checkHud();
  base.getEngine().setScene(InGameShop);
  CameraCheck();
}","public void LoadShopMenu(){
  if (InGameShop == null) {
    InGameShop=new Scene();
    Text BuyThing1=new Text(10,base.getCameraHeight() / 2,base.mFont2,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.mSku=base.CATALOG[0].sku;
        if (!base.mBillingService.requestPurchase(base.mSku,base.mPayloadContent))         base.CustomNotifications.addNotification(""String_Node_Str"");
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text BuyThing2=new Text(10,BuyThing1.getX() + BuyThing1.getHeight(),base.mFont2,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text BackToMenu=new Text(10,base.getCameraHeight() - BuyThing2.getHeight(),base.mFont2,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.sm.loadMainMenu();
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    InGameShop.attachChild(BuyThing1);
    InGameShop.registerTouchArea(BuyThing1);
    InGameShop.attachChild(BuyThing2);
    InGameShop.registerTouchArea(BuyThing2);
    InGameShop.attachChild(BackToMenu);
    InGameShop.registerTouchArea(BackToMenu);
  }
  checkHud();
  base.getEngine().setScene(InGameShop);
  CameraCheck();
}"
84667,"public void EndWaveScreen(){
  if (EndWaveScene == null) {
    EndWaveScene=new Scene(1);
    EndWaveScene.setBackground(new ColorBackground(0.0f,0.0f,1.0f));
    Sprite buyButton=new Sprite(base.getCameraWidth() - base.getCameraWidth(),base.getCameraHeight() - base.getBuyButton().getHeight(),base.getBuyButtonRegion()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(5);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Sprite NextWaveButton=new Sprite(base.getCameraWidth() - base.getNextWaveButton().getWidth(),base.getCameraHeight() - base.getNextWaveButton().getHeight(),base.getNextWaveButtonRegion()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(3);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text increaseMaxHealth=new Text(100,300,base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(7);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text saveGame=new Text(100,250,base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.fileThingy.savegame(base);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    EndWaveScene.attachChild(base.theWave.mCashAmountItem);
    EndWaveScene.attachChild(base.theWave.mBuyMenuItem);
    EndWaveScene.attachChild(buyButton);
    EndWaveScene.registerTouchArea(buyButton);
    EndWaveScene.attachChild(increaseMaxHealth);
    EndWaveScene.registerTouchArea(increaseMaxHealth);
    EndWaveScene.attachChild(NextWaveButton);
    EndWaveScene.registerTouchArea(NextWaveButton);
    EndWaveScene.attachChild(saveGame);
    EndWaveScene.registerTouchArea(saveGame);
  }
  checkHud();
  base.theWave.mCashAmountItem.setPosition(100,100);
  base.theWave.mBuyMenuItem.setPosition(100,160);
  base.complete.play();
  base.fileThingy.savegame(base);
  base.getEngine().setScene(EndWaveScene);
  CameraCheck();
}","public void EndWaveScreen(){
  if (EndWaveScene == null) {
    EndWaveScene=new Scene();
    EndWaveScene.setBackground(new ColorBackground(0.0f,0.0f,1.0f));
    Sprite buyButton=new Sprite(base.getCameraWidth() - base.getCameraWidth(),base.getCameraHeight() - base.getBuyButton().getHeight(),base.getBuyButtonRegion()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(5);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Sprite NextWaveButton=new Sprite(base.getCameraWidth() - base.getNextWaveButton().getWidth(),base.getCameraHeight() - base.getNextWaveButton().getHeight(),base.getNextWaveButtonRegion()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(3);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text increaseMaxHealth=new Text(100,300,base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(7);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text saveGame=new Text(100,250,base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.fileThingy.savegame(base);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    EndWaveScene.attachChild(base.theWave.mCashAmountItem);
    EndWaveScene.attachChild(base.theWave.mBuyMenuItem);
    EndWaveScene.attachChild(buyButton);
    EndWaveScene.registerTouchArea(buyButton);
    EndWaveScene.attachChild(increaseMaxHealth);
    EndWaveScene.registerTouchArea(increaseMaxHealth);
    EndWaveScene.attachChild(NextWaveButton);
    EndWaveScene.registerTouchArea(NextWaveButton);
    EndWaveScene.attachChild(saveGame);
    EndWaveScene.registerTouchArea(saveGame);
  }
  checkHud();
  base.theWave.mCashAmountItem.setPosition(100,100);
  base.theWave.mBuyMenuItem.setPosition(100,160);
  base.complete.play();
  base.fileThingy.savegame(base);
  base.getEngine().setScene(EndWaveScene);
  CameraCheck();
}"
84668,"public void GameOverScreen(){
  if (GameOverScene == null) {
    GameOverScene=new Scene(1);
    Text gameOverText=new Text(base.getCameraWidth() / 2,base.getCameraHeight() / 2,base.mFont,""String_Node_Str"",HorizontalAlign.CENTER){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(9);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    scorebits=new ChangeableText(gameOverText.getX() - gameOverText.getWidth(),gameOverText.getY() + gameOverText.getHeight(),base.mFont,""String_Node_Str"" + base.sKillCount + ""String_Node_Str""+ base.mMoneyEarned);
    GameOverScene.attachChild(gameOverText);
    GameOverScene.attachChild(scorebits);
    GameOverScene.registerTouchArea(gameOverText);
  }
  scorebits.setText(""String_Node_Str"" + base.sKillCount + ""String_Node_Str""+ base.mMoneyEarned);
  checkHud();
  base.game_over.play();
  base.getEngine().setScene(GameOverScene);
  long scoreValue=base.theWave.getWaveNumber();
  Score s=new Score(scoreValue,null);
  Leaderboard l=new Leaderboard(""String_Node_Str"");
  s.submitTo(l,new Score.SubmitToCB(){
    @Override public void onSuccess(    boolean newHighScore){
      base.setResult(Activity.RESULT_OK);
    }
    @Override public void onFailure(    final String exceptionMessage){
      base.CustomNotifications.addNotification(""String_Node_Str"" + exceptionMessage + ""String_Node_Str"");
      base.setResult(Activity.RESULT_CANCELED);
    }
  }
);
  CameraCheck();
}","public void GameOverScreen(){
  if (GameOverScene == null) {
    GameOverScene=new Scene();
    Text gameOverText=new Text(base.getCameraWidth() / 2,base.getCameraHeight() / 2,base.mFont,""String_Node_Str"",HorizontalAlign.CENTER){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(9);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    scorebits=new ChangeableText(gameOverText.getX() - gameOverText.getWidth(),gameOverText.getY() + gameOverText.getHeight(),base.mFont,""String_Node_Str"" + base.sKillCount + ""String_Node_Str""+ base.mMoneyEarned);
    GameOverScene.attachChild(gameOverText);
    GameOverScene.attachChild(scorebits);
    GameOverScene.registerTouchArea(gameOverText);
  }
  scorebits.setText(""String_Node_Str"" + base.sKillCount + ""String_Node_Str""+ base.mMoneyEarned);
  checkHud();
  base.game_over.play();
  base.getEngine().setScene(GameOverScene);
  long scoreValue=base.theWave.getWaveNumber();
  Score s=new Score(scoreValue,null);
  Leaderboard l=new Leaderboard(""String_Node_Str"");
  s.submitTo(l,new Score.SubmitToCB(){
    @Override public void onSuccess(    boolean newHighScore){
      base.setResult(Activity.RESULT_OK);
    }
    @Override public void onFailure(    final String exceptionMessage){
      base.CustomNotifications.addNotification(""String_Node_Str"" + exceptionMessage + ""String_Node_Str"");
      base.setResult(Activity.RESULT_CANCELED);
    }
  }
);
  CameraCheck();
}"
84669,"public void GameScreen(){
  if (GameScreen == null) {
    GameScreen=new Scene(5);
    GameScreen.setBackground(base.autoParallaxBackground);
    base.loadCastle(base.getCameraWidth() - (base.getCastleTexture().getWidth()),base.getCameraHeight() - 60 - base.getCastleTexture().getHeight());
    base.CustomHUD.RefreshHUD();
    base.CustomHUD.HideValues(false);
    base.sm.GameScreen.registerUpdateHandler(new IUpdateHandler(){
      @Override public void onUpdate(      float pSecondsElapsed){
        if (base.sPreviousWaveNum != base.theWave.getWaveNumber() && base.sKillCount != base.sPreviousKillCount)         if ((base.sKillCount - base.sPreviousKillCount) == base.theWave.getNumberEnemysToSpawn()) {
          base.theWave.mCashAmountItem.setText(""String_Node_Str"" + base.sMoney);
          base.theWave.mBuyMenuItem.setText(""String_Node_Str"" + base.sCastle.getCurrentHealth() + ""String_Node_Str""+ base.sCastle.getMaxHealth());
          base.sEndWaveActive=true;
          base.sPreviousWaveNum=base.theWave.getWaveNumber();
          base.sPreviousKillCount+=base.theWave.getNumberEnemysToSpawn();
          base.sm.EndWaveScreen();
        }
        if (base.lightning != null)         if (base.lightning.isAnimationRunning() == false) {
          base.sm.GameScreen.detachChild(base.lightning);
          if (base.mLightningBolt == true)           base.sm.GameScreen.registerUpdateHandler(new TimerHandler(1 / 4.0f,true,new ITimerCallback(){
            @Override public void onTimePassed(            TimerHandler pTimerHandler){
              base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
              base.mLightningBolt=false;
              base.mLightningBoltX=0;
              base.mLightningBoltY=0;
            }
          }
));
        }
        if (base.mEarthquake == true) {
          base.mEarthquake=false;
          base.mEarthQuaking=true;
          base.sm.GameScreen.registerUpdateHandler(new TimerHandler(1 / 6.0f,new ITimerCallback(){
            @Override public void onTimePassed(            TimerHandler pTimerHandler){
              currentEarthDuration++;
              if (currentEarthDuration >= EarthQuakeDuration) {
                base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
                currentEarthDuration=0;
                base.sCamera.setCenter(base.sCamera.getWidth() / 2,base.sCamera.getHeight() / 2);
                base.backgroundSprite1.setPosition(0.0f,0.0f + (base.getCameraHeight() - base.getParallaxLayerBack().getHeight()));
                base.backgroundSprite2.setPosition(0.0f,0.0f + 80);
                base.backgroundSprite3.setPosition(0.0f + 35,0.0f + 62);
                base.mEarthQuaking=false;
              }
 else {
                if (currentEarthDuration % 6 == 0 || currentEarthDuration == 1) {
                  if ((base.mana - 500) >= 0) {
                    base.mana-=500;
                    base.CustomHUD.updateManaValue();
                    float theX=MathUtils.random(-10.0f,10.0f);
                    float theY=MathUtils.random(-10.0f,10.0f);
                    base.sCamera.offsetCenter(theX,theY);
                    base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
                    base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
                    base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
                    base.mEarthQuaking=true;
                  }
 else {
                    base.mEarthQuaking=false;
                    currentEarthDuration=EarthQuakeDuration;
                  }
                }
 else {
                  float theX=MathUtils.random(-10.0f,10.0f);
                  float theY=MathUtils.random(-10.0f,10.0f);
                  base.sCamera.offsetCenter(theX,theY);
                  base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
                  base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
                  base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
                  base.mEarthQuaking=false;
                }
                pTimerHandler.reset();
              }
            }
          }
));
        }
      }
      @Override public void reset(){
      }
    }
);
  }
  if (base.CustomHUD.getHud() != null)   base.CustomHUD.HideValues(false);
  GameScreen.setOnAreaTouchTraversalFrontToBack();
  base.getEngine().setScene(GameScreen);
  CameraSet();
  base.CustomHUD.RefreshHUD();
}","public void GameScreen(){
  if (GameScreen == null) {
    GameScreen=new Scene();
    GameScreen.setBackground(base.autoParallaxBackground);
    base.loadCastle(base.getCameraWidth() - (base.getCastleTexture().getWidth()),base.getCameraHeight() - 60 - base.getCastleTexture().getHeight());
    base.CustomHUD.RefreshHUD();
    base.CustomHUD.HideValues(false);
    base.sm.GameScreen.registerUpdateHandler(new IUpdateHandler(){
      @Override public void onUpdate(      float pSecondsElapsed){
        if (base.sPreviousWaveNum != base.theWave.getWaveNumber() && base.sKillCount != base.sPreviousKillCount)         if ((base.sKillCount - base.sPreviousKillCount) == base.theWave.getNumberEnemysToSpawn()) {
          base.theWave.mCashAmountItem.setText(""String_Node_Str"" + base.sMoney);
          base.theWave.mBuyMenuItem.setText(""String_Node_Str"" + base.sCastle.getCurrentHealth() + ""String_Node_Str""+ base.sCastle.getMaxHealth());
          base.sEndWaveActive=true;
          base.sPreviousWaveNum=base.theWave.getWaveNumber();
          base.sPreviousKillCount+=base.theWave.getNumberEnemysToSpawn();
          base.sm.EndWaveScreen();
        }
        if (base.lightning != null)         if (base.lightning.isAnimationRunning() == false) {
          base.sm.GameScreen.detachChild(base.lightning);
          if (base.mLightningBolt == true)           base.sm.GameScreen.registerUpdateHandler(new TimerHandler(1 / 4.0f,true,new ITimerCallback(){
            @Override public void onTimePassed(            TimerHandler pTimerHandler){
              base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
              base.mLightningBolt=false;
              base.mLightningBoltX=0;
              base.mLightningBoltY=0;
            }
          }
));
        }
        if (base.mEarthquake == true) {
          base.mEarthquake=false;
          base.mEarthQuaking=true;
          base.sm.GameScreen.registerUpdateHandler(new TimerHandler(1 / 6.0f,new ITimerCallback(){
            @Override public void onTimePassed(            TimerHandler pTimerHandler){
              currentEarthDuration++;
              if (currentEarthDuration >= EarthQuakeDuration) {
                base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
                currentEarthDuration=0;
                base.getCamera().setCenter(base.getCameraWidth() / 2,base.getCameraHeight() / 2);
                base.backgroundSprite1.setPosition(0.0f,0.0f + (base.getCameraHeight() - base.getParallaxLayerBack().getHeight()));
                base.backgroundSprite2.setPosition(0.0f,0.0f + 80);
                base.backgroundSprite3.setPosition(0.0f + 35,0.0f + 62);
                base.mEarthQuaking=false;
              }
 else {
                if (currentEarthDuration % 6 == 0 || currentEarthDuration == 1) {
                  if ((base.mana - 500) >= 0) {
                    base.mana-=500;
                    base.CustomHUD.updateManaValue();
                    float theX=MathUtils.random(-10.0f,10.0f);
                    float theY=MathUtils.random(-10.0f,10.0f);
                    base.getCamera().offsetCenter(theX,theY);
                    base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
                    base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
                    base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
                    base.mEarthQuaking=true;
                  }
 else {
                    base.mEarthQuaking=false;
                    currentEarthDuration=EarthQuakeDuration;
                  }
                }
 else {
                  float theX=MathUtils.random(-10.0f,10.0f);
                  float theY=MathUtils.random(-10.0f,10.0f);
                  base.getCamera().offsetCenter(theX,theY);
                  base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
                  base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
                  base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
                  base.mEarthQuaking=false;
                }
                pTimerHandler.reset();
              }
            }
          }
));
        }
      }
      @Override public void reset(){
      }
    }
);
  }
  if (base.CustomHUD.getHud() != null)   base.CustomHUD.HideValues(false);
  GameScreen.setOnAreaTouchTraversalFrontToBack();
  base.getEngine().setScene(GameScreen);
  CameraSet();
  base.CustomHUD.RefreshHUD();
}"
84670,"public void CameraSet(){
  if (CameraShakeX != 0.0f || CameraShakeY != 0.0f) {
    base.sCamera.offsetCenter(CameraShakeX,CameraShakeY);
    CameraShakeX=0.0f;
    CameraShakeY=0.0f;
  }
}","public void CameraSet(){
  if (CameraShakeX != 0.0f || CameraShakeY != 0.0f) {
    base.getCamera().offsetCenter(CameraShakeX,CameraShakeY);
    CameraShakeX=0.0f;
    CameraShakeY=0.0f;
  }
}"
84671,"public void CameraCheck(){
  float checkX=base.sCamera.getCenterX() - (base.sCamera.getWidth() / 2);
  float checkY=base.sCamera.getCenterY() - (base.sCamera.getHeight() / 2);
  if (checkX != 0.0f || checkY != 0.0f) {
    CameraShakeX=checkX;
    CameraShakeY=checkY;
    base.sCamera.setCenter(base.sCamera.getWidth() / 2,base.sCamera.getHeight() / 2);
  }
}","public void CameraCheck(){
  float checkX=base.getCamera().getCenterX() - (base.getCameraWidth() / 2);
  float checkY=base.getCamera().getCenterY() - (base.getCameraHeight() / 2);
  if (checkX != 0.0f || checkY != 0.0f) {
    CameraShakeX=checkX;
    CameraShakeY=checkY;
    base.getCamera().setCenter(base.getCameraWidth() / 2,base.getCameraHeight() / 2);
  }
}"
84672,"public void ShowNewGameWarning(){
  if (NewGameWarning == null) {
    NewGameWarning=new Scene(1);
    Text areyouSure=new Text(30,(base.getCameraHeight() / 2) - 10,base.mFont2,""String_Node_Str"");
    Text YesOption=new Text(areyouSure.getX(),areyouSure.getY() + areyouSure.getHeight(),base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(1);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text NoOption=new Text(YesOption.getX() + YesOption.getWidth() + 20,areyouSure.getY() + areyouSure.getHeight(),base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.getEngine().setScene(MainMenu);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    NewGameWarning.attachChild(areyouSure);
    NewGameWarning.attachChild(YesOption);
    NewGameWarning.attachChild(NoOption);
    NewGameWarning.registerTouchArea(YesOption);
    NewGameWarning.registerTouchArea(NoOption);
  }
  checkHud();
  base.getEngine().setScene(NewGameWarning);
  CameraCheck();
}","public void ShowNewGameWarning(){
  if (NewGameWarning == null) {
    NewGameWarning=new Scene();
    Text areyouSure=new Text(30,(base.getCameraHeight() / 2) - 10,base.mFont2,""String_Node_Str"");
    Text YesOption=new Text(areyouSure.getX(),areyouSure.getY() + areyouSure.getHeight(),base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(1);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text NoOption=new Text(YesOption.getX() + YesOption.getWidth() + 20,areyouSure.getY() + areyouSure.getHeight(),base.mFont,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.getEngine().setScene(MainMenu);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    NewGameWarning.attachChild(areyouSure);
    NewGameWarning.attachChild(YesOption);
    NewGameWarning.attachChild(NoOption);
    NewGameWarning.registerTouchArea(YesOption);
    NewGameWarning.registerTouchArea(NoOption);
  }
  checkHud();
  base.getEngine().setScene(NewGameWarning);
  CameraCheck();
}"
84673,"public void NewWaveScreen(){
  if (NewWaveScene == null) {
    NewWaveScene=new Scene(1);
    base.theWave.mWaveNumberMenuItem=new ChangeableTextMenuItem(GestureDefence.MENU_WAVE_NUMBER,base.mFont,""String_Node_Str"" + base.theWave.getWaveNumber(),(""String_Node_Str"").length());
    NewWaveScene.attachChild(base.theWave.mWaveNumberMenuItem);
  }
  base.theWave.mWaveNumberMenuItem.setPosition((base.getCameraWidth() / 2) - (base.theWave.mWaveNumberMenuItem.getWidth() / 2),(base.getCameraHeight() / 2) - (base.theWave.mWaveNumberMenuItem.getHeight() / 2));
  checkHud();
  base.getEngine().setScene(NewWaveScene);
  CameraCheck();
}","public void NewWaveScreen(){
  if (NewWaveScene == null) {
    NewWaveScene=new Scene();
    base.theWave.mWaveNumberMenuItem=new ChangeableTextMenuItem(GestureDefence.MENU_WAVE_NUMBER,base.mFont,""String_Node_Str"" + base.theWave.getWaveNumber(),(""String_Node_Str"").length());
    NewWaveScene.attachChild(base.theWave.mWaveNumberMenuItem);
  }
  base.theWave.mWaveNumberMenuItem.setPosition((base.getCameraWidth() / 2) - (base.theWave.mWaveNumberMenuItem.getWidth() / 2),(base.getCameraHeight() / 2) - (base.theWave.mWaveNumberMenuItem.getHeight() / 2));
  checkHud();
  base.getEngine().setScene(NewWaveScene);
  CameraCheck();
}"
84674,"@Override public void onUpdate(float pSecondsElapsed){
  if (base.sPreviousWaveNum != base.theWave.getWaveNumber() && base.sKillCount != base.sPreviousKillCount)   if ((base.sKillCount - base.sPreviousKillCount) == base.theWave.getNumberEnemysToSpawn()) {
    base.theWave.mCashAmountItem.setText(""String_Node_Str"" + base.sMoney);
    base.theWave.mBuyMenuItem.setText(""String_Node_Str"" + base.sCastle.getCurrentHealth() + ""String_Node_Str""+ base.sCastle.getMaxHealth());
    base.sEndWaveActive=true;
    base.sPreviousWaveNum=base.theWave.getWaveNumber();
    base.sPreviousKillCount+=base.theWave.getNumberEnemysToSpawn();
    base.sm.EndWaveScreen();
  }
  if (base.lightning != null)   if (base.lightning.isAnimationRunning() == false) {
    base.sm.GameScreen.detachChild(base.lightning);
    if (base.mLightningBolt == true)     base.sm.GameScreen.registerUpdateHandler(new TimerHandler(1 / 4.0f,true,new ITimerCallback(){
      @Override public void onTimePassed(      TimerHandler pTimerHandler){
        base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
        base.mLightningBolt=false;
        base.mLightningBoltX=0;
        base.mLightningBoltY=0;
      }
    }
));
  }
  if (base.mEarthquake == true) {
    base.mEarthquake=false;
    base.mEarthQuaking=true;
    base.sm.GameScreen.registerUpdateHandler(new TimerHandler(1 / 6.0f,new ITimerCallback(){
      @Override public void onTimePassed(      TimerHandler pTimerHandler){
        currentEarthDuration++;
        if (currentEarthDuration >= EarthQuakeDuration) {
          base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
          currentEarthDuration=0;
          base.sCamera.setCenter(base.sCamera.getWidth() / 2,base.sCamera.getHeight() / 2);
          base.backgroundSprite1.setPosition(0.0f,0.0f + (base.getCameraHeight() - base.getParallaxLayerBack().getHeight()));
          base.backgroundSprite2.setPosition(0.0f,0.0f + 80);
          base.backgroundSprite3.setPosition(0.0f + 35,0.0f + 62);
          base.mEarthQuaking=false;
        }
 else {
          if (currentEarthDuration % 6 == 0 || currentEarthDuration == 1) {
            if ((base.mana - 500) >= 0) {
              base.mana-=500;
              base.CustomHUD.updateManaValue();
              float theX=MathUtils.random(-10.0f,10.0f);
              float theY=MathUtils.random(-10.0f,10.0f);
              base.sCamera.offsetCenter(theX,theY);
              base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
              base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
              base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
              base.mEarthQuaking=true;
            }
 else {
              base.mEarthQuaking=false;
              currentEarthDuration=EarthQuakeDuration;
            }
          }
 else {
            float theX=MathUtils.random(-10.0f,10.0f);
            float theY=MathUtils.random(-10.0f,10.0f);
            base.sCamera.offsetCenter(theX,theY);
            base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
            base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
            base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
            base.mEarthQuaking=false;
          }
          pTimerHandler.reset();
        }
      }
    }
));
  }
}","@Override public void onUpdate(float pSecondsElapsed){
  if (base.sPreviousWaveNum != base.theWave.getWaveNumber() && base.sKillCount != base.sPreviousKillCount)   if ((base.sKillCount - base.sPreviousKillCount) == base.theWave.getNumberEnemysToSpawn()) {
    base.theWave.mCashAmountItem.setText(""String_Node_Str"" + base.sMoney);
    base.theWave.mBuyMenuItem.setText(""String_Node_Str"" + base.sCastle.getCurrentHealth() + ""String_Node_Str""+ base.sCastle.getMaxHealth());
    base.sEndWaveActive=true;
    base.sPreviousWaveNum=base.theWave.getWaveNumber();
    base.sPreviousKillCount+=base.theWave.getNumberEnemysToSpawn();
    base.sm.EndWaveScreen();
  }
  if (base.lightning != null)   if (base.lightning.isAnimationRunning() == false) {
    base.sm.GameScreen.detachChild(base.lightning);
    if (base.mLightningBolt == true)     base.sm.GameScreen.registerUpdateHandler(new TimerHandler(1 / 4.0f,true,new ITimerCallback(){
      @Override public void onTimePassed(      TimerHandler pTimerHandler){
        base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
        base.mLightningBolt=false;
        base.mLightningBoltX=0;
        base.mLightningBoltY=0;
      }
    }
));
  }
  if (base.mEarthquake == true) {
    base.mEarthquake=false;
    base.mEarthQuaking=true;
    base.sm.GameScreen.registerUpdateHandler(new TimerHandler(1 / 6.0f,new ITimerCallback(){
      @Override public void onTimePassed(      TimerHandler pTimerHandler){
        currentEarthDuration++;
        if (currentEarthDuration >= EarthQuakeDuration) {
          base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
          currentEarthDuration=0;
          base.getCamera().setCenter(base.getCameraWidth() / 2,base.getCameraHeight() / 2);
          base.backgroundSprite1.setPosition(0.0f,0.0f + (base.getCameraHeight() - base.getParallaxLayerBack().getHeight()));
          base.backgroundSprite2.setPosition(0.0f,0.0f + 80);
          base.backgroundSprite3.setPosition(0.0f + 35,0.0f + 62);
          base.mEarthQuaking=false;
        }
 else {
          if (currentEarthDuration % 6 == 0 || currentEarthDuration == 1) {
            if ((base.mana - 500) >= 0) {
              base.mana-=500;
              base.CustomHUD.updateManaValue();
              float theX=MathUtils.random(-10.0f,10.0f);
              float theY=MathUtils.random(-10.0f,10.0f);
              base.getCamera().offsetCenter(theX,theY);
              base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
              base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
              base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
              base.mEarthQuaking=true;
            }
 else {
              base.mEarthQuaking=false;
              currentEarthDuration=EarthQuakeDuration;
            }
          }
 else {
            float theX=MathUtils.random(-10.0f,10.0f);
            float theY=MathUtils.random(-10.0f,10.0f);
            base.getCamera().offsetCenter(theX,theY);
            base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
            base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
            base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
            base.mEarthQuaking=false;
          }
          pTimerHandler.reset();
        }
      }
    }
));
  }
}"
84675,"public void loadMainMenu(){
  if (MainMenu == null) {
    MainMenu=new Scene(1);
    MainMenu.setBackground(base.autoParallaxBackground);
    int buttonX=(base.getCameraWidth() / 2) - (base.getStartButtonRegion().getWidth() / 2);
    int buttonY=(base.getCameraHeight() / 2) - (base.getStartButtonRegion().getHeight() / 2);
    Sprite startButton=new Sprite(buttonX,buttonY,base.getStartButtonRegion()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        if (base.fileThingy.CheckForSaveFile(base))         base.sm.ShowNewGameWarning();
 else         base.ButtonPress(1);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    mainMenuWaveNumber=new ChangeableText(30,buttonY - startButton.getHeight(),base.mFont2,""String_Node_Str"",""String_Node_Str"".length()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.fileThingy.loadSaveFile(base);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    buttonX=(base.getCameraWidth() / 2) - (base.getQuitButtonRegion().getWidth() / 2);
    buttonY+=base.getStartButtonRegion().getHeight();
    Sprite quitButton=new Sprite(buttonX,buttonY,base.getQuitButtonRegion()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(99);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text openFeintOption=new Text(10,base.getCameraHeight() - mainMenuWaveNumber.getHeight(),base.mFont2,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        Dashboard.open();
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text InGameStore=new Text(base.getCameraWidth() - 100,base.getCameraHeight() - mainMenuWaveNumber.getHeight(),base.mFont2,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.sm.LoadShopMenu();
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    MainMenu.attachChild(startButton);
    MainMenu.attachChild(quitButton);
    MainMenu.attachChild(openFeintOption);
    MainMenu.attachChild(mainMenuWaveNumber);
    MainMenu.attachChild(InGameStore);
    MainMenu.registerTouchArea(startButton);
    MainMenu.registerTouchArea(quitButton);
    MainMenu.registerTouchArea(openFeintOption);
    MainMenu.registerTouchArea(mainMenuWaveNumber);
    MainMenu.registerTouchArea(InGameStore);
    MainMenu.setTouchAreaBindingEnabled(true);
    base.ambient.setLooping(true);
    base.ambient.play();
  }
  checkHud();
  mainMenuWaveNumber.setText(""String_Node_Str"" + (base.fileThingy.getLastWaveFromSaveFile(base) + 1));
  base.getEngine().setScene(MainMenu);
  CameraCheck();
}","public void loadMainMenu(){
  if (MainMenu == null) {
    MainMenu=new Scene();
    MainMenu.setBackground(base.autoParallaxBackground);
    int buttonX=(base.getCameraWidth() / 2) - (base.getStartButtonRegion().getWidth() / 2);
    int buttonY=(base.getCameraHeight() / 2) - (base.getStartButtonRegion().getHeight() / 2);
    Sprite startButton=new Sprite(buttonX,buttonY,base.getStartButtonRegion()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        if (base.fileThingy.CheckForSaveFile(base))         base.sm.ShowNewGameWarning();
 else         base.ButtonPress(1);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    mainMenuWaveNumber=new ChangeableText(30,buttonY - startButton.getHeight(),base.mFont2,""String_Node_Str"",""String_Node_Str"".length()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.fileThingy.loadSaveFile(base);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    buttonX=(base.getCameraWidth() / 2) - (base.getQuitButtonRegion().getWidth() / 2);
    buttonY+=base.getStartButtonRegion().getHeight();
    Sprite quitButton=new Sprite(buttonX,buttonY,base.getQuitButtonRegion()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(99);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text openFeintOption=new Text(10,base.getCameraHeight() - mainMenuWaveNumber.getHeight(),base.mFont2,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        Dashboard.open();
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text InGameStore=new Text(base.getCameraWidth() - 100,base.getCameraHeight() - mainMenuWaveNumber.getHeight(),base.mFont2,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.sm.LoadShopMenu();
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    MainMenu.attachChild(startButton);
    MainMenu.attachChild(quitButton);
    MainMenu.attachChild(openFeintOption);
    MainMenu.attachChild(mainMenuWaveNumber);
    MainMenu.attachChild(InGameStore);
    MainMenu.registerTouchArea(startButton);
    MainMenu.registerTouchArea(quitButton);
    MainMenu.registerTouchArea(openFeintOption);
    MainMenu.registerTouchArea(mainMenuWaveNumber);
    MainMenu.registerTouchArea(InGameStore);
    MainMenu.setTouchAreaBindingEnabled(true);
    base.ambient.setLooping(true);
    base.ambient.play();
  }
  checkHud();
  mainMenuWaveNumber.setText(""String_Node_Str"" + (base.fileThingy.getLastWaveFromSaveFile(base) + 1));
  base.getEngine().setScene(MainMenu);
  CameraCheck();
}"
84676,"public void onGesturePerformed(GestureOverlayView overlay,Gesture gesture){
  ArrayList<Prediction> predictions=mLibrary.recognize(gesture);
  if (GestureDefence.this.getEngine().getScene() == GestureDefence.this.sm.GameScreen) {
    if (predictions.size() > 0) {
      Prediction prediction=predictions.get(0);
      if (prediction.score > 1.0) {
        if ((GestureDefence.this.mana - 1000) >= 0) {
          GestureDefence.this.mana-=1000;
          GestureDefence.this.ligtningStrike.play();
          RectF tempThing=gesture.getBoundingBox();
          float posX=tempThing.left;
          float posY=tempThing.bottom - 330;
          lightning=new AnimatedSprite(posX,posY,GestureDefence.this.mLightningTextureRegion.clone());
          lightning.animate(new long[]{50,50,50,50,50,50},new int[]{0,1,2,3,4,5},0);
          GestureDefence.this.sm.GameScreen.attachChild(lightning);
          GestureDefence.this.mLightningBoltX=tempThing.left + (tempThing.width() / 2);
          GestureDefence.this.mLightningBoltY=tempThing.bottom;
          GestureDefence.this.mLightningBolt=true;
          GestureDefence.this.updateManaValue();
        }
      }
    }
  }
}","public void onGesturePerformed(GestureOverlayView overlay,Gesture gesture){
  ArrayList<Prediction> predictions=mLibrary.recognize(gesture);
  if (GestureDefence.this.getEngine().getScene() == GestureDefence.this.sm.GameScreen) {
    if (predictions.size() > 0) {
      Prediction prediction=predictions.get(0);
      if (prediction.score > 1.0) {
        if ((GestureDefence.this.mana - 1000) >= 0) {
          GestureDefence.this.mana-=1000;
          GestureDefence.this.ligtningStrike.play();
          RectF tempThing=gesture.getBoundingBox();
          float posX;
          float posY;
          float lightningPosX;
          float lightningPosY;
          if (tempThing.left < tempThing.right) {
            posX=tempThing.left;
            lightningPosX=posX + ((tempThing.right - tempThing.left) / 2);
          }
 else {
            posX=tempThing.right;
            lightningPosX=posX + ((tempThing.left - tempThing.left) / 2);
          }
          if (tempThing.bottom > tempThing.top) {
            posY=tempThing.bottom - 330;
            lightningPosY=tempThing.bottom;
          }
 else {
            posY=tempThing.top - 330;
            lightningPosY=tempThing.top;
          }
          lightning=new AnimatedSprite(posX,posY,GestureDefence.this.mLightningTextureRegion.clone());
          lightning.animate(new long[]{50,50,50,50,50,50},new int[]{0,1,2,3,4,5},0);
          GestureDefence.this.sm.GameScreen.attachChild(lightning);
          GestureDefence.this.mLightningBoltX=lightningPosX;
          GestureDefence.this.mLightningBoltY=lightningPosY;
          GestureDefence.this.mLightningBolt=true;
          GestureDefence.this.updateManaValue();
        }
      }
    }
  }
}"
84677,"@Override public void onManagedUpdate(final float pSecondsElapsed){
  if ((base.mLightningBolt == true) && (this.mX <= base.mLightningBoltX + 50) && (this.mX >= base.mLightningBoltX - 50)&& (this.mY >= base.mLightningBoltY - 70)&& (this.mY <= base.mLightningBoltY + 70)) {
    this.EnemyHurtFace(1000);
  }
  if (isEnemyDead()) {
    if (this.mSetDeathAnimation == false) {
      this.stopAnimation();
      this.mPhysicsHandler.setEnabled(false);
      this.base.sm.GameScreen.unregisterTouchArea(this);
      this.animate(new long[]{200,200,200},new int[]{6,7,8},0);
      this.lastSetAnimation=3;
      this.mSetDeathAnimation=true;
      base.splat.play();
    }
 else     if (this.isAnimationRunning() == false) {
      base.sMoney+=this.mCashWorth;
      base.mMoneyEarned+=this.mCashWorth;
      base.updateCashValue();
      base.sKillCount++;
      base.mOnScreenEnemies--;
      int randomChance=MathUtils.random(1,5);
      if (randomChance == 3) {
        Sprite mMana=new Mana(this.mX,this.mY,base.getManaTextureRegion(),base);
        base.sm.GameScreen.attachChild(mMana);
        base.sm.GameScreen.registerTouchArea(mMana);
      }
      final EntityDetachRunnablePoolItem pPoolItem=base.sRemoveStuff.obtainPoolItem();
      pPoolItem.set(this,this.getParent());
      base.sRemoveStuff.postPoolItem(pPoolItem);
      base.AchieveTracker.firstKill();
    }
  }
 else {
    if (this.mTripping) {
      if (this.lastSetAnimation != 5) {
        this.animate(new long[]{150,150,250,150,150},new int[]{9,10,11,10,9},0);
        this.lastSetAnimation=5;
        base.hurt.play();
        base.sm.GameScreen.unregisterTouchArea(this);
      }
 else       if (this.isAnimationRunning() == false) {
        this.mTripping=false;
        this.mPhysicsHandler.setEnabled(true);
        base.sm.GameScreen.registerTouchArea(this);
        if (this.mWasAirborne == false) {
          base.AchieveTracker.Trips();
        }
 else         this.mWasAirborne=false;
      }
    }
    if (this.mCanAttackCastle) {
      if (this.getCurrentTileIndex() == 4 && this.mAttackedTheCastle == false) {
        Castle.damageCastle(this.mAttackDamage);
        base.updateCastleHealth();
        this.mAttackedTheCastle=true;
        base.attack.play();
      }
      if (this.getCurrentTileIndex() != 4 && this.mAttackedTheCastle) {
        this.mAttackedTheCastle=false;
      }
    }
    if (this.mPhysicsHandler.isEnabled()) {
      if (this.mIsAirbourne == true) {
        base.sm.GameScreen.unregisterTouchArea(this);
        if (lastSetAnimation != 2) {
          this.animate(new long[]{200,0},6,7,true);
          lastSetAnimation=2;
        }
        if (this.mX > (base.getCameraWidth() - (this.getWidth() / 2))) {
          this.mPhysicsHandler.setVelocityX(0.0f);
          this.mX=(base.getCameraWidth() - (this.getWidth() / 2));
        }
        if (this.mX < (0.0f - (this.getWidth() / 2))) {
          this.mPhysicsHandler.setVelocityX(0.0f);
          this.setPosition(0.0f - (this.getWidth() / 2),this.mY);
        }
        if (this.mY > this.mInitialY) {
          this.mIsAirbourne=false;
          base.sm.GameScreen.registerTouchArea(this);
          mGroundHitSpeed=this.mPhysicsHandler.getVelocityY();
          EnemySubtractHealth();
          this.mPhysicsHandler.setVelocityY(0.0f);
          this.mPhysicsHandler.setVelocityX(0.0f);
          this.setPosition(this.mX,this.mInitialY);
          this.mTripping=true;
          this.mPhysicsHandler.setEnabled(false);
        }
 else         if (this.mY < this.mInitialY) {
          if (this.mY < 0.0f)           if (this.mPhysicsHandler.getVelocityY() < -1000)           this.mPhysicsHandler.setVelocityY(-1000);
          this.mPhysicsHandler.setVelocityY(this.mPhysicsHandler.getVelocityY() + mGravity);
        }
      }
 else {
        if (this.mX < (base.sCastle.getX() - base.sCastle.getWidth() / 6) && this.mY >= this.mInitialY) {
          this.mPhysicsHandler.setVelocityX(mSpeed);
          if (lastSetAnimation != 1) {
            this.animate(new long[]{200,200,200},0,2,true);
            lastSetAnimation=1;
          }
        }
 else         if (this.mX >= (base.sCastle.getX() - base.sCastle.getWidth() / 6)) {
          this.mPhysicsHandler.setVelocityX(0.0f);
          this.setPosition((base.sCastle.getX() - base.sCastle.getWidth() / 6),this.mY);
          if (lastSetAnimation != 4) {
            this.animate(new long[]{200,200,200},3,5,true);
            lastSetAnimation=4;
            this.mCanAttackCastle=true;
          }
        }
        if (this.mY < this.mInitialY) {
          if ((this.mY - this.mPhysicsHandler.getVelocityY() - mGravity) < this.mInitialY) {
            this.mPhysicsHandler.setVelocityY(this.mPhysicsHandler.getVelocityY() + mGravity);
          }
 else {
            this.mPhysicsHandler.setVelocityY(0.0f);
            this.setPosition(this.mX,this.mInitialY);
          }
        }
 else         if (this.mY + this.getHeight() / 2 >= this.mInitialY) {
          this.mPhysicsHandler.setVelocityY(0.0f);
        }
      }
    }
  }
  super.onManagedUpdate(pSecondsElapsed);
}","@Override public void onManagedUpdate(final float pSecondsElapsed){
  if ((base.mLightningBolt == true) && (this.mX <= base.mLightningBoltX + 100) && (this.mX >= base.mLightningBoltX - 100)&& (this.mY >= base.mLightningBoltY - 50)&& (this.mY <= base.mLightningBoltY + 30)) {
    this.EnemyHurtFace(1000);
  }
  if (isEnemyDead()) {
    if (this.mSetDeathAnimation == false) {
      this.stopAnimation();
      this.mPhysicsHandler.setEnabled(false);
      this.base.sm.GameScreen.unregisterTouchArea(this);
      this.animate(new long[]{200,200,200},new int[]{6,7,8},0);
      this.lastSetAnimation=3;
      this.mSetDeathAnimation=true;
      base.splat.play();
    }
 else     if (this.isAnimationRunning() == false) {
      base.sMoney+=this.mCashWorth;
      base.mMoneyEarned+=this.mCashWorth;
      base.updateCashValue();
      base.sKillCount++;
      base.mOnScreenEnemies--;
      int randomChance=MathUtils.random(1,5);
      if (randomChance == 3) {
        Sprite mMana=new Mana(this.mX,this.mY,base.getManaTextureRegion(),base);
        base.sm.GameScreen.attachChild(mMana);
        base.sm.GameScreen.registerTouchArea(mMana);
      }
      final EntityDetachRunnablePoolItem pPoolItem=base.sRemoveStuff.obtainPoolItem();
      pPoolItem.set(this,this.getParent());
      base.sRemoveStuff.postPoolItem(pPoolItem);
      base.AchieveTracker.firstKill();
    }
  }
 else {
    if (this.mTripping) {
      if (this.lastSetAnimation != 5) {
        this.animate(new long[]{150,150,250,150,150},new int[]{9,10,11,10,9},0);
        this.lastSetAnimation=5;
        base.hurt.play();
        base.sm.GameScreen.unregisterTouchArea(this);
      }
 else       if (this.isAnimationRunning() == false) {
        this.mTripping=false;
        this.mPhysicsHandler.setEnabled(true);
        base.sm.GameScreen.registerTouchArea(this);
        if (this.mWasAirborne == false) {
          base.AchieveTracker.Trips();
        }
 else         this.mWasAirborne=false;
      }
    }
    if (this.mCanAttackCastle) {
      if (this.getCurrentTileIndex() == 4 && this.mAttackedTheCastle == false) {
        Castle.damageCastle(this.mAttackDamage);
        base.updateCastleHealth();
        this.mAttackedTheCastle=true;
        base.attack.play();
      }
      if (this.getCurrentTileIndex() != 4 && this.mAttackedTheCastle) {
        this.mAttackedTheCastle=false;
      }
    }
    if (this.mPhysicsHandler.isEnabled()) {
      if (this.mIsAirbourne == true) {
        base.sm.GameScreen.unregisterTouchArea(this);
        if (lastSetAnimation != 2) {
          this.animate(new long[]{200,0},6,7,true);
          lastSetAnimation=2;
        }
        if (this.mX > (base.getCameraWidth() - (this.getWidth() / 2))) {
          this.mPhysicsHandler.setVelocityX(0.0f);
          this.mX=(base.getCameraWidth() - (this.getWidth() / 2));
        }
        if (this.mX < (0.0f - (this.getWidth() / 2))) {
          this.mPhysicsHandler.setVelocityX(0.0f);
          this.setPosition(0.0f - (this.getWidth() / 2),this.mY);
        }
        if (this.mY > this.mInitialY) {
          this.mIsAirbourne=false;
          base.sm.GameScreen.registerTouchArea(this);
          mGroundHitSpeed=this.mPhysicsHandler.getVelocityY();
          EnemySubtractHealth();
          this.mPhysicsHandler.setVelocityY(0.0f);
          this.mPhysicsHandler.setVelocityX(0.0f);
          this.setPosition(this.mX,this.mInitialY);
          this.mTripping=true;
          this.mPhysicsHandler.setEnabled(false);
        }
 else         if (this.mY < this.mInitialY) {
          if (this.mY < 0.0f)           if (this.mPhysicsHandler.getVelocityY() < -1000)           this.mPhysicsHandler.setVelocityY(-1000);
          this.mPhysicsHandler.setVelocityY(this.mPhysicsHandler.getVelocityY() + mGravity);
        }
      }
 else {
        if (this.mX < (base.sCastle.getX() - base.sCastle.getWidth() / 6) && this.mY >= this.mInitialY) {
          this.mPhysicsHandler.setVelocityX(mSpeed);
          if (lastSetAnimation != 1) {
            this.animate(new long[]{200,200,200},0,2,true);
            lastSetAnimation=1;
          }
        }
 else         if (this.mX >= (base.sCastle.getX() - base.sCastle.getWidth() / 6)) {
          this.mPhysicsHandler.setVelocityX(0.0f);
          this.setPosition((base.sCastle.getX() - base.sCastle.getWidth() / 6),this.mY);
          if (lastSetAnimation != 4) {
            this.animate(new long[]{200,200,200},3,5,true);
            lastSetAnimation=4;
            this.mCanAttackCastle=true;
          }
        }
        if (this.mY < this.mInitialY) {
          if ((this.mY - this.mPhysicsHandler.getVelocityY() - mGravity) < this.mInitialY) {
            this.mPhysicsHandler.setVelocityY(this.mPhysicsHandler.getVelocityY() + mGravity);
          }
 else {
            this.mPhysicsHandler.setVelocityY(0.0f);
            this.setPosition(this.mX,this.mInitialY);
          }
        }
 else         if (this.mY + this.getHeight() / 2 >= this.mInitialY) {
          this.mPhysicsHandler.setVelocityY(0.0f);
        }
      }
    }
  }
  super.onManagedUpdate(pSecondsElapsed);
}"
84678,"public boolean increaseMaxHealth(int amount){
  Castle.mMaxHealth+=amount;
  return true;
}","public boolean increaseMaxHealth(int amount){
  Castle.mMaxHealth+=amount;
  Castle.mHealth+=amount;
  return true;
}"
84679,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  GestureDefence.this.mLibrary=GestureLibraries.fromRawResource(GestureDefence.this,R.raw.spells);
  if (!mLibrary.load()) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
  ;
  gestures=(GestureOverlayView)findViewById(R.id.gestures);
  gestures.setWillNotDraw(true);
  gestures.setWillNotCacheDrawing(true);
  gestures.addOnGesturePerformedListener(this);
  final String OFgameName=""String_Node_Str"";
  final String OFgameId=""String_Node_Str"";
  final String OFgameKey=""String_Node_Str"";
  final String OFgameSecret=""String_Node_Str"";
  OpenFeintSettings settings=new OpenFeintSettings(OFgameName,OFgameKey,OFgameSecret,OFgameId);
  OpenFeint.initialize(this,settings,new OpenFeintDelegate(){
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  GestureDefence.this.mLibrary=GestureLibraries.fromRawResource(GestureDefence.this,R.raw.spells);
  if (!mLibrary.load()) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
  ;
  gestures=(GestureOverlayView)findViewById(R.id.gestures);
  gestures.setWillNotDraw(true);
  gestures.setWillNotCacheDrawing(true);
  gestures.addOnGesturePerformedListener(this);
  OpenFeintSettings settings=new OpenFeintSettings(OFgameName,OFgameKey,OFgameSecret,OFgameId);
  OpenFeint.initialize(this,settings,new OpenFeintDelegate(){
  }
);
}"
84680,"public boolean ButtonPress(int ButtonID){
switch (ButtonID) {
case 1:
    GestureDefence.this.sm.NewWaveScreen();
  GestureDefence.this.sm.NewWaveScene.registerUpdateHandler(new TimerHandler(3.0f,true,new ITimerCallback(){
    @Override public void onTimePassed(    final TimerHandler pTimerHandler){
      GestureDefence.this.sm.NewWaveScene.unregisterUpdateHandler(pTimerHandler);
      GestureDefence.this.sm.GameScreen();
      GestureDefence.this.theWave.startNewWave();
    }
  }
));
return true;
case 3:
GestureDefence.this.theWave.NextWave();
GestureDefence.this.theWave.mWaveNumberMenuItem.setText(""String_Node_Str"" + theWave.getWaveNumber());
GestureDefence.this.sm.NewWaveScreen();
GestureDefence.this.sm.NewWaveScene.registerUpdateHandler(new TimerHandler(4.0f,true,new ITimerCallback(){
@Override public void onTimePassed(final TimerHandler pTimerHandler){
GestureDefence.this.sm.NewWaveScene.unregisterUpdateHandler(pTimerHandler);
GestureDefence.this.sm.GameScreen();
GestureDefence.this.theWave.startNewWave();
}
}
));
return true;
case 5:
if ((sMoney - 100 >= 0) && (GestureDefence.this.sCastle.getCurrentHealth() < GestureDefence.this.sCastle.getMaxHealth())) {
sMoney-=100;
sCastle.increaseHealth(100);
GestureDefence.this.theWave.mCashAmountItem.setText(""String_Node_Str"" + sMoney);
GestureDefence.this.theWave.mBuyMenuItem.setText(""String_Node_Str"" + GestureDefence.this.sCastle.getCurrentHealth() + ""String_Node_Str""+ GestureDefence.this.sCastle.getMaxHealth());
GestureDefence.this.updateCashValue();
GestureDefence.this.updateCastleHealth();
}
return true;
case 7:
if (sMoney - 1000 >= 0) {
sMoney-=1000;
sCastle.increaseMaxHealth(250);
GestureDefence.this.theWave.mCashAmountItem.setText(""String_Node_Str"" + sMoney);
GestureDefence.this.theWave.mBuyMenuItem.setText(""String_Node_Str"" + GestureDefence.this.sCastle.getCurrentHealth() + ""String_Node_Str""+ GestureDefence.this.sCastle.getMaxHealth());
GestureDefence.this.updateCashValue();
GestureDefence.this.updateCastleHealth();
}
return true;
case 9:
GestureDefence.this.theWave.setWaveNumber(1);
GestureDefence.this.sKillCount=0;
GestureDefence.this.sPreviousKillCount=0;
GestureDefence.this.sPreviousWaveNum=0;
GestureDefence.this.sMoney=0;
GestureDefence.this.mMoneyEarned=0;
GestureDefence.this.sEnemyCount=0;
GestureDefence.this.updateCashValue();
GestureDefence.this.sCastle.setCurrentHealth(3000);
GestureDefence.this.sCastle.setMaxHealth(3000);
GestureDefence.this.updateCastleHealth();
GestureDefence.this.mana=0;
GestureDefence.this.updateManaValue();
GestureDefence.this.sm.GameScreen.getChild(1).detachChildren();
GestureDefence.this.sm.GameScreen.getChild(3).detachChildren();
GestureDefence.this.getEngine().setScene(GestureDefence.this.sm.MainMenu);
return true;
case 99:
this.finish();
return true;
default :
return false;
}
}","public boolean ButtonPress(int ButtonID){
switch (ButtonID) {
case 1:
    GestureDefence.this.sm.NewWaveScreen();
  GestureDefence.this.sm.NewWaveScene.registerUpdateHandler(new TimerHandler(3.0f,true,new ITimerCallback(){
    @Override public void onTimePassed(    final TimerHandler pTimerHandler){
      GestureDefence.this.sm.NewWaveScene.unregisterUpdateHandler(pTimerHandler);
      GestureDefence.this.sm.GameScreen();
      GestureDefence.this.theWave.startNewWave();
    }
  }
));
return true;
case 3:
GestureDefence.this.theWave.NextWave();
GestureDefence.this.theWave.mWaveNumberMenuItem.setText(""String_Node_Str"" + theWave.getWaveNumber());
GestureDefence.this.sm.NewWaveScreen();
GestureDefence.this.sm.NewWaveScene.registerUpdateHandler(new TimerHandler(4.0f,true,new ITimerCallback(){
@Override public void onTimePassed(final TimerHandler pTimerHandler){
GestureDefence.this.sm.NewWaveScene.unregisterUpdateHandler(pTimerHandler);
GestureDefence.this.sm.GameScreen();
GestureDefence.this.theWave.startNewWave();
}
}
));
return true;
case 5:
if ((sMoney - 100 >= 0) && (GestureDefence.this.sCastle.getCurrentHealth() < GestureDefence.this.sCastle.getMaxHealth())) {
sMoney-=100;
sCastle.increaseHealth(100);
GestureDefence.this.theWave.mCashAmountItem.setText(""String_Node_Str"" + sMoney);
GestureDefence.this.theWave.mBuyMenuItem.setText(""String_Node_Str"" + GestureDefence.this.sCastle.getCurrentHealth() + ""String_Node_Str""+ GestureDefence.this.sCastle.getMaxHealth());
GestureDefence.this.updateCashValue();
GestureDefence.this.updateCastleHealth();
}
return true;
case 7:
if (sMoney - 1000 >= 0) {
sMoney-=1000;
sCastle.increaseMaxHealth(250);
GestureDefence.this.theWave.mCashAmountItem.setText(""String_Node_Str"" + sMoney);
GestureDefence.this.theWave.mBuyMenuItem.setText(""String_Node_Str"" + GestureDefence.this.sCastle.getCurrentHealth() + ""String_Node_Str""+ GestureDefence.this.sCastle.getMaxHealth());
GestureDefence.this.updateCashValue();
GestureDefence.this.updateCastleHealth();
}
return true;
case 9:
GestureDefence.this.theWave.setWaveNumber(1);
GestureDefence.this.sKillCount=0;
GestureDefence.this.sPreviousKillCount=0;
GestureDefence.this.sPreviousWaveNum=0;
GestureDefence.this.sMoney=0;
GestureDefence.this.mMoneyEarned=0;
GestureDefence.this.sEnemyCount=0;
GestureDefence.this.updateCashValue();
GestureDefence.this.sCastle.setCurrentHealth(3000);
GestureDefence.this.sCastle.setMaxHealth(3000);
GestureDefence.this.updateCastleHealth();
GestureDefence.this.mana=0;
GestureDefence.this.updateManaValue();
GestureDefence.this.sm.GameScreen.getChild(1).detachChildren();
GestureDefence.this.mOnScreenEnemies=0;
GestureDefence.this.sm.GameScreen.getChild(3).detachChildren();
GestureDefence.this.sm.loadMainMenu();
return true;
case 99:
this.finish();
return true;
default :
return false;
}
}"
84681,"public void loadCastle(float X,float Y){
  GestureDefence.this.sCastle.setPosition(X,Y);
  GestureDefence.this.sm.GameScreen.getChild(3).attachChild(sCastle);
}","public void loadCastle(float X,float Y){
  GestureDefence.this.sCastle.setPosition(X,Y);
  GestureDefence.this.sm.GameScreen.getChild(2).attachChild(sCastle);
}"
84682,"public void GameScreen(){
  if (GameScreen == null) {
    GameScreen=new Scene(4);
    GameScreen.setBackground(base.autoParallaxBackground);
    GameScreen.registerUpdateHandler(base.sRemoveStuff);
    base.loadCastle(base.getCameraWidth() - (base.getCastleTexture().getWidth()),base.getCameraHeight() - 60 - base.getCastleTexture().getHeight());
    base.loadHud();
    base.sm.GameScreen.registerUpdateHandler(new IUpdateHandler(){
      @Override public void onUpdate(      float pSecondsElapsed){
        if (base.sPreviousWaveNum != base.theWave.getWaveNumber() && base.sKillCount != base.sPreviousKillCount)         if ((base.sKillCount - base.sPreviousKillCount) == base.theWave.getNumberEnemysToSpawn()) {
          base.theWave.mCashAmountItem.setText(""String_Node_Str"" + base.sMoney);
          base.theWave.mBuyMenuItem.setText(""String_Node_Str"" + base.sCastle.getCurrentHealth() + ""String_Node_Str""+ base.sCastle.getMaxHealth());
          base.sEndWaveActive=true;
          base.sPreviousWaveNum=base.theWave.getWaveNumber();
          base.sPreviousKillCount+=base.theWave.getNumberEnemysToSpawn();
          base.sm.EndWaveScreen();
        }
        if (base.lightning != null)         if (base.lightning.isAnimationRunning() == false) {
          base.sm.GameScreen.detachChild(base.lightning);
          if (base.mLightningBolt == true)           base.sm.GameScreen.registerUpdateHandler(new TimerHandler(1 / 4.0f,true,new ITimerCallback(){
            @Override public void onTimePassed(            TimerHandler pTimerHandler){
              base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
              base.mLightningBolt=false;
              base.mLightningBoltX=0;
              base.mLightningBoltY=0;
            }
          }
));
        }
        if (base.mEarthquake == true) {
          base.mEarthquake=false;
          base.mEarthQuaking=true;
          base.sm.GameScreen.registerUpdateHandler(new TimerHandler(1 / 6.0f,new ITimerCallback(){
            @Override public void onTimePassed(            TimerHandler pTimerHandler){
              currentEarthDuration++;
              if (currentEarthDuration >= EarthQuakeDuration) {
                base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
                currentEarthDuration=0;
                base.sCamera.setCenter(base.sCamera.getWidth() / 2,base.sCamera.getHeight() / 2);
                base.backgroundSprite1.setPosition(0.0f,0.0f + (base.getCameraHeight() - base.getParallaxLayerBack().getHeight()));
                base.backgroundSprite2.setPosition(0.0f,0.0f + 80);
                base.backgroundSprite3.setPosition(0.0f + 35,0.0f + 62);
                base.mEarthQuaking=false;
              }
 else {
                if (currentEarthDuration % 6 == 0 || currentEarthDuration == 1) {
                  if ((base.mana - 500) >= 0) {
                    base.mana-=500;
                    base.updateManaValue();
                    float theX=MathUtils.random(-10.0f,10.0f);
                    float theY=MathUtils.random(-10.0f,10.0f);
                    base.sCamera.offsetCenter(theX,theY);
                    base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
                    base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
                    base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
                    base.mEarthQuaking=true;
                  }
 else {
                    base.mEarthQuaking=false;
                    currentEarthDuration=EarthQuakeDuration;
                  }
                }
 else {
                  float theX=MathUtils.random(-10.0f,10.0f);
                  float theY=MathUtils.random(-10.0f,10.0f);
                  base.sCamera.offsetCenter(theX,theY);
                  base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
                  base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
                  base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
                  base.mEarthQuaking=false;
                }
                pTimerHandler.reset();
              }
            }
          }
));
        }
      }
      @Override public void reset(){
      }
    }
);
  }
  if (base.gethud() != null)   if (base.gethud().isVisible() == false)   base.gethud().setVisible(true);
  GameScreen.setOnAreaTouchTraversalFrontToBack();
  base.getEngine().setScene(GameScreen);
  CameraSet();
}","public void GameScreen(){
  if (GameScreen == null) {
    GameScreen=new Scene(4);
    GameScreen.setBackground(base.autoParallaxBackground);
    GameScreen.registerUpdateHandler(base.sRemoveStuff);
    base.loadCastle(base.getCameraWidth() - (base.getCastleTexture().getWidth()),base.getCameraHeight() - 60 - base.getCastleTexture().getHeight());
    base.loadHud();
    base.sm.GameScreen.registerUpdateHandler(new IUpdateHandler(){
      @Override public void onUpdate(      float pSecondsElapsed){
        if (base.sPreviousWaveNum != base.theWave.getWaveNumber() && base.sKillCount != base.sPreviousKillCount)         if ((base.sKillCount - base.sPreviousKillCount) == base.theWave.getNumberEnemysToSpawn()) {
          base.theWave.mCashAmountItem.setText(""String_Node_Str"" + base.sMoney);
          base.theWave.mBuyMenuItem.setText(""String_Node_Str"" + base.sCastle.getCurrentHealth() + ""String_Node_Str""+ base.sCastle.getMaxHealth());
          base.sEndWaveActive=true;
          base.sPreviousWaveNum=base.theWave.getWaveNumber();
          base.sPreviousKillCount+=base.theWave.getNumberEnemysToSpawn();
          base.sm.EndWaveScreen();
        }
        if (base.lightning != null)         if (base.lightning.isAnimationRunning() == false) {
          base.sm.GameScreen.detachChild(base.lightning);
          if (base.mLightningBolt == true)           base.sm.GameScreen.registerUpdateHandler(new TimerHandler(1 / 4.0f,true,new ITimerCallback(){
            @Override public void onTimePassed(            TimerHandler pTimerHandler){
              base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
              base.mLightningBolt=false;
              base.mLightningBoltX=0;
              base.mLightningBoltY=0;
            }
          }
));
        }
        if (base.mEarthquake == true) {
          base.mEarthquake=false;
          base.mEarthQuaking=true;
          base.sm.GameScreen.registerUpdateHandler(new TimerHandler(1 / 6.0f,new ITimerCallback(){
            @Override public void onTimePassed(            TimerHandler pTimerHandler){
              currentEarthDuration++;
              if (currentEarthDuration >= EarthQuakeDuration) {
                base.sm.GameScreen.unregisterUpdateHandler(pTimerHandler);
                currentEarthDuration=0;
                base.sCamera.setCenter(base.sCamera.getWidth() / 2,base.sCamera.getHeight() / 2);
                base.backgroundSprite1.setPosition(0.0f,0.0f + (base.getCameraHeight() - base.getParallaxLayerBack().getHeight()));
                base.backgroundSprite2.setPosition(0.0f,0.0f + 80);
                base.backgroundSprite3.setPosition(0.0f + 35,0.0f + 62);
                base.mEarthQuaking=false;
              }
 else {
                if (currentEarthDuration % 6 == 0 || currentEarthDuration == 1) {
                  if ((base.mana - 500) >= 0) {
                    base.mana-=500;
                    base.updateManaValue();
                    float theX=MathUtils.random(-10.0f,10.0f);
                    float theY=MathUtils.random(-10.0f,10.0f);
                    base.sCamera.offsetCenter(theX,theY);
                    base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
                    base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
                    base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
                    base.mEarthQuaking=true;
                  }
 else {
                    base.mEarthQuaking=false;
                    currentEarthDuration=EarthQuakeDuration;
                  }
                }
 else {
                  float theX=MathUtils.random(-10.0f,10.0f);
                  float theY=MathUtils.random(-10.0f,10.0f);
                  base.sCamera.offsetCenter(theX,theY);
                  base.backgroundSprite1.setPosition(base.backgroundSprite1.getX() - theX,base.backgroundSprite1.getY() - theY);
                  base.backgroundSprite2.setPosition(base.backgroundSprite2.getX() - theX,base.backgroundSprite2.getY() - theY);
                  base.backgroundSprite3.setPosition(base.backgroundSprite3.getX() - theX,base.backgroundSprite3.getY() - theY);
                  base.mEarthQuaking=false;
                }
                pTimerHandler.reset();
              }
            }
          }
));
        }
      }
      @Override public void reset(){
      }
    }
);
  }
  if (base.gethud() != null)   if (base.gethud().isVisible() == false)   base.gethud().setVisible(true);
  GameScreen.setOnAreaTouchTraversalFrontToBack();
  base.getEngine().setScene(GameScreen);
  CameraSet();
  base.updateCashValue();
  base.updateCastleHealth();
  base.updateManaValue();
}"
84683,"public void loadMainMenu(){
  if (MainMenu == null) {
    MainMenu=new Scene(1);
    MainMenu.setBackground(base.autoParallaxBackground);
    int buttonX=(base.getCameraWidth() / 2) - (base.getStartButtonRegion().getWidth() / 2);
    int buttonY=(base.getCameraHeight() / 2) - (base.getStartButtonRegion().getHeight() / 2);
    Sprite startButton=new Sprite(buttonX,buttonY,base.getStartButtonRegion()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        if (base.fileThingy.CheckForSaveFile(base))         base.sm.ShowNewGameWarning();
 else         base.ButtonPress(1);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    mainMenuWaveNumber=new ChangeableText(30,buttonY - startButton.getHeight(),base.mFont2,""String_Node_Str"",""String_Node_Str"".length()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.fileThingy.loadSaveFile(base);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    buttonX=(base.getCameraWidth() / 2) - (base.getQuitButtonRegion().getWidth() / 2);
    buttonY+=base.getStartButtonRegion().getHeight();
    Sprite quitButton=new Sprite(buttonX,buttonY,base.getQuitButtonRegion()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(99);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text LOADGame=new Text(10,10,base.mFont2,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text openFeintOption=new Text(10,base.getCameraHeight() - LOADGame.getHeight(),base.mFont2,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        Dashboard.open();
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    MainMenu.attachChild(startButton);
    MainMenu.attachChild(quitButton);
    MainMenu.attachChild(LOADGame);
    MainMenu.attachChild(openFeintOption);
    MainMenu.attachChild(mainMenuWaveNumber);
    MainMenu.registerTouchArea(startButton);
    MainMenu.registerTouchArea(quitButton);
    MainMenu.registerTouchArea(LOADGame);
    MainMenu.registerTouchArea(openFeintOption);
    MainMenu.registerTouchArea(mainMenuWaveNumber);
    MainMenu.setTouchAreaBindingEnabled(true);
    base.ambient.setLooping(true);
    base.ambient.play();
  }
  if (base.gethud() != null)   if (base.gethud().isVisible())   base.gethud().setVisible(false);
  mainMenuWaveNumber.setText(""String_Node_Str"" + base.fileThingy.getLastWaveFromSaveFile(base));
  base.getEngine().setScene(MainMenu);
  CameraCheck();
}","public void loadMainMenu(){
  if (MainMenu == null) {
    MainMenu=new Scene(1);
    MainMenu.setBackground(base.autoParallaxBackground);
    int buttonX=(base.getCameraWidth() / 2) - (base.getStartButtonRegion().getWidth() / 2);
    int buttonY=(base.getCameraHeight() / 2) - (base.getStartButtonRegion().getHeight() / 2);
    Sprite startButton=new Sprite(buttonX,buttonY,base.getStartButtonRegion()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        if (base.fileThingy.CheckForSaveFile(base))         base.sm.ShowNewGameWarning();
 else         base.ButtonPress(1);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    mainMenuWaveNumber=new ChangeableText(30,buttonY - startButton.getHeight(),base.mFont2,""String_Node_Str"",""String_Node_Str"".length()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.fileThingy.loadSaveFile(base);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    buttonX=(base.getCameraWidth() / 2) - (base.getQuitButtonRegion().getWidth() / 2);
    buttonY+=base.getStartButtonRegion().getHeight();
    Sprite quitButton=new Sprite(buttonX,buttonY,base.getQuitButtonRegion()){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        base.ButtonPress(99);
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    Text openFeintOption=new Text(10,base.getCameraHeight() - mainMenuWaveNumber.getHeight(),base.mFont2,""String_Node_Str""){
      @Override public boolean onAreaTouched(      TouchEvent pSceneTouchEvent,      float pTouchAreaLocalX,      float pTouchAreaLocalY){
        Dashboard.open();
        return super.onAreaTouched(pSceneTouchEvent,pTouchAreaLocalX,pTouchAreaLocalY);
      }
    }
;
    MainMenu.attachChild(startButton);
    MainMenu.attachChild(quitButton);
    MainMenu.attachChild(openFeintOption);
    MainMenu.attachChild(mainMenuWaveNumber);
    MainMenu.registerTouchArea(startButton);
    MainMenu.registerTouchArea(quitButton);
    MainMenu.registerTouchArea(openFeintOption);
    MainMenu.registerTouchArea(mainMenuWaveNumber);
    MainMenu.setTouchAreaBindingEnabled(true);
    base.ambient.setLooping(true);
    base.ambient.play();
  }
  if (base.gethud() != null)   if (base.gethud().isVisible())   base.gethud().setVisible(false);
  mainMenuWaveNumber.setText(""String_Node_Str"" + base.fileThingy.getLastWaveFromSaveFile(base));
  base.getEngine().setScene(MainMenu);
  CameraCheck();
}"
84684,"@Override public void pause(){
  if (state == GameState.Running)   state=GameState.Paused;
  if (world.gameOver) {
    if (world.score > Settings.highscores[4]) {
      Settings.addScore(world.score,playerName);
    }
    Settings.save(game.getFileIO());
  }
}","@Override public void pause(){
  if (state == GameState.Running)   state=GameState.Paused;
  if (world.gameOver) {
    if (world.score > Settings.highscores[4]) {
      Settings.addScore(world.score,playerName);
      world.score=0;
      playerName=null;
    }
    Settings.save(game.getFileIO());
  }
}"
84685,"@Override public void update(float deltaTime){
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  int len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == kevent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  if (state == GameState.Ready)   updateReady(touchEvents);
  if (state == GameState.Running)   updateRunning(touchEvents,keyEvents,deltaTime);
  if (state == GameState.Paused)   updatePaused(touchEvents);
  if (state == GameState.GameOver)   updateGameOver(touchEvents);
}","@Override public void update(float deltaTime){
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  int len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == KeyEvent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  if (state == GameState.Ready)   updateReady(touchEvents);
  if (state == GameState.Running)   updateRunning(touchEvents,keyEvents,deltaTime);
  if (state == GameState.Paused)   updatePaused(touchEvents);
  if (state == GameState.GameOver)   updateGameOver(touchEvents);
}"
84686,"@Override public void update(float deltaTime){
  int len;
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == kevent.KEY_UP)     screenNumber--;
    if (screenNumber < 1)     game.setScreen(new MainMenuScreen(game));
  }
  Graphics g=game.getGraphics();
  len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x > g.getWidth() - Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        screenNumber++;
        if (screenNumber > 3) {
          game.setScreen(new MainMenuScreen(game));
        }
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (event.x < Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        screenNumber--;
        if (screenNumber < 1) {
          game.setScreen(new MainMenuScreen(game));
        }
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
    }
  }
}","@Override public void update(float deltaTime){
  int len;
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == KeyEvent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  Graphics g=game.getGraphics();
  len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x > g.getWidth() - Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        screenNumber++;
        if (screenNumber > 3) {
          game.setScreen(new MainMenuScreen(game));
        }
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (event.x < Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        screenNumber--;
        if (screenNumber < 1) {
          game.setScreen(new MainMenuScreen(game));
        }
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
    }
  }
}"
84687,"@Override public void update(float deltaTime){
  int len;
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == kevent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  Graphics g=game.getGraphics();
  len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x < Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        game.setScreen(new MainMenuScreen(game));
        return;
      }
    }
  }
}","@Override public void update(float deltaTime){
  int len;
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == KeyEvent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  Graphics g=game.getGraphics();
  len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x < Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        game.setScreen(new MainMenuScreen(game));
        return;
      }
    }
  }
}"
84688,"@Override public void update(float deltaTime){
  Graphics g=game.getGraphics();
  int len;
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == kevent.KEY_UP)     game.finish();
  }
  len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (inBounds(event,BUTTON_SOUND_X,g.getHeight() - Assets.BUTTON_HEIGHT,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        Settings.soundEnabled=!Settings.soundEnabled;
        if (Settings.soundEnabled)         Assets.click.play(1);
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new GameScreen(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new HighscoreScreen(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + 2 * Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new SettingsScreen(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + 3 * Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new HelpScreens(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + 4 * Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        ((MrMunchGame)game).finish();
      }
    }
  }
}","@Override public void update(float deltaTime){
  Graphics g=game.getGraphics();
  int len;
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == KeyEvent.KEY_UP)     game.finish();
  }
  len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (inBounds(event,BUTTON_SOUND_X,g.getHeight() - Assets.BUTTON_HEIGHT,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        Settings.soundEnabled=!Settings.soundEnabled;
        if (Settings.soundEnabled)         Assets.click.play(1);
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new GameScreen(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new HighscoreScreen(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + 2 * Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new SettingsScreen(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + 3 * Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new HelpScreens(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + 4 * Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        ((MrMunchGame)game).finish();
      }
    }
  }
}"
84689,"@Override public void update(float deltaTime){
  int len;
  List<TouchEvent> events=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == kevent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  Graphics g=game.getGraphics();
  len=events.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=events.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x < Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        game.setScreen(new MainMenuScreen(game));
        return;
      }
    }
    int y=g.getHeight() / 2;
    for (int j=1; j <= 5; j++) {
      if (event.type == TouchEvent.TOUCH_UP) {
        int x=j * (g.getWidth() - 30) / 5 - Assets.NUMBER_WIDTH;
        if (event.x > x && event.x < x + Assets.NUMBER_WIDTH && event.y > y && event.y < y + Assets.NUMBER_HEIGHT) {
          if (Settings.soundEnabled)           Assets.click.play(1);
          Settings.gameSpeed=j;
          return;
        }
      }
    }
  }
}","@Override public void update(float deltaTime){
  int len;
  List<TouchEvent> events=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == KeyEvent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  Graphics g=game.getGraphics();
  len=events.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=events.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x < Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        game.setScreen(new MainMenuScreen(game));
        return;
      }
    }
    int y=g.getHeight() / 2;
    for (int j=1; j <= 5; j++) {
      if (event.type == TouchEvent.TOUCH_UP) {
        int x=j * (g.getWidth() - 30) / 5 - Assets.NUMBER_WIDTH;
        if (event.x > x && event.x < x + Assets.NUMBER_WIDTH && event.y > y && event.y < y + Assets.NUMBER_HEIGHT) {
          if (Settings.soundEnabled)           Assets.click.play(1);
          Settings.gameSpeed=j;
          return;
        }
      }
    }
  }
}"
84690,"private void updateGameOver(List<TouchEvent> touchEvents){
  int len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x >= BUTTON_CANCEL_X && event.x <= BUTTON_CANCEL_X + Assets.BUTTON_WIDTH && event.y >= BUTTON_CANCEL_Y && event.y <= BUTTON_CANCEL_Y + Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        ((AndroidGame)game).runOnUiThread(new Runnable(){
          @Override public void run(){
            final AlertDialog.Builder alert=new AlertDialog.Builder((MrMunchGame)game);
            final EditText input=new EditText((MrMunchGame)game);
            int maxLength=5;
            InputFilter[] FilterArray=new InputFilter[1];
            FilterArray[0]=new InputFilter.LengthFilter(maxLength);
            input.setFilters(FilterArray);
            alert.setView(input);
            alert.setTitle(""String_Node_Str"");
            alert.setMessage(""String_Node_Str"");
            alert.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                playerName=input.getText().toString().trim();
                playerName=playerName.substring(0,playerName.length());
                if (playerName == null || playerName.length() == 0)                 playerName=""String_Node_Str"";
                game.setScreen(new MainMenuScreen(game));
              }
            }
);
            alert.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                playerName=""String_Node_Str"";
                game.setScreen(new MainMenuScreen(game));
              }
            }
);
            alert.show();
          }
        }
);
        return;
      }
    }
  }
}","private void updateGameOver(List<TouchEvent> touchEvents){
  int len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x >= BUTTON_CANCEL_X && event.x <= BUTTON_CANCEL_X + Assets.BUTTON_WIDTH && event.y >= BUTTON_CANCEL_Y && event.y <= BUTTON_CANCEL_Y + Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        if (world.score > Settings.highscores[4]) {
          ((AndroidGame)game).runOnUiThread(new Runnable(){
            @Override public void run(){
              final AlertDialog.Builder alert=new AlertDialog.Builder((MrMunchGame)game);
              final EditText input=new EditText((MrMunchGame)game);
              int maxLength=5;
              InputFilter[] FilterArray=new InputFilter[1];
              FilterArray[0]=new InputFilter.LengthFilter(maxLength);
              input.setFilters(FilterArray);
              alert.setView(input);
              alert.setTitle(""String_Node_Str"");
              alert.setMessage(""String_Node_Str"");
              alert.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                public void onClick(                DialogInterface dialog,                int whichButton){
                  playerName=input.getText().toString().trim();
                  playerName=playerName.substring(0,playerName.length());
                  if (playerName == null || playerName.length() == 0)                   playerName=""String_Node_Str"";
                  game.setScreen(new MainMenuScreen(game));
                }
              }
);
              alert.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                public void onClick(                DialogInterface dialog,                int whichButton){
                  playerName=""String_Node_Str"";
                  game.setScreen(new MainMenuScreen(game));
                }
              }
);
              alert.show();
            }
          }
);
        }
 else         game.setScreen(new MainMenuScreen(game));
        return;
      }
    }
  }
}"
84691,"@Override public void update(float deltaTime){
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  game.getInput().getKeyEvents();
  if (state == GameState.Ready)   updateReady(touchEvents);
  if (state == GameState.Running)   updateRunning(touchEvents,deltaTime);
  if (state == GameState.Paused)   updatePaused(touchEvents);
  if (state == GameState.GameOver)   updateGameOver(touchEvents);
}","@Override public void update(float deltaTime){
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  if (state == GameState.Ready)   updateReady(touchEvents);
  if (state == GameState.Running)   updateRunning(touchEvents,keyEvents,deltaTime);
  if (state == GameState.Paused)   updatePaused(touchEvents);
  if (state == GameState.GameOver)   updateGameOver(touchEvents);
}"
84692,"private void updateRunning(List<TouchEvent> touchEvents,float deltaTime){
  Graphics g=game.getGraphics();
  int len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x < Assets.BUTTON_WIDTH && event.y < Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        state=GameState.Paused;
        return;
      }
    }
    if (event.type == TouchEvent.TOUCH_DOWN) {
      if (inBounds(event,g.getWidth() - 3 * Assets.BUTTON_WIDTH,g.getHeight() - Assets.BUTTON_HEIGHT - Assets.BUTTON_HEIGHT / 2 - 32 / 2,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnLeft();
      }
      if (inBounds(event,g.getWidth() - Assets.BUTTON_WIDTH,g.getHeight() - Assets.BUTTON_HEIGHT - Assets.BUTTON_HEIGHT / 2 - 32 / 2,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnRight();
      }
      if (inBounds(event,g.getWidth() - 2 * Assets.BUTTON_WIDTH,g.getHeight() - 2 * Assets.BUTTON_HEIGHT - 32,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnUp();
      }
      if (inBounds(event,g.getWidth() - 2 * Assets.BUTTON_WIDTH,g.getHeight() - Assets.BUTTON_HEIGHT,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnDown();
      }
    }
  }
  world.update(deltaTime);
  if (world.gameOver) {
    if (Settings.soundEnabled)     Assets.bitten.play(1);
    state=GameState.GameOver;
  }
  if (oldScore != world.score) {
    oldScore=world.score;
    score=""String_Node_Str"" + oldScore;
    if (Settings.soundEnabled)     Assets.eat.play(1);
  }
}","private void updateRunning(List<TouchEvent> touchEvents,List<Input.KeyEvent> keyEvents,float deltaTime){
  Graphics g=game.getGraphics();
  int len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x < Assets.BUTTON_WIDTH && event.y < Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        state=GameState.Paused;
        return;
      }
    }
    if (event.type == TouchEvent.TOUCH_DOWN) {
      if (inBounds(event,g.getWidth() - 3 * Assets.BUTTON_WIDTH,g.getHeight() - Assets.BUTTON_HEIGHT - Assets.BUTTON_HEIGHT / 2 - 32 / 2,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnLeft();
      }
      if (inBounds(event,g.getWidth() - Assets.BUTTON_WIDTH,g.getHeight() - Assets.BUTTON_HEIGHT - Assets.BUTTON_HEIGHT / 2 - 32 / 2,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnRight();
      }
      if (inBounds(event,g.getWidth() - 2 * Assets.BUTTON_WIDTH,g.getHeight() - 2 * Assets.BUTTON_HEIGHT - 32,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnUp();
      }
      if (inBounds(event,g.getWidth() - 2 * Assets.BUTTON_WIDTH,g.getHeight() - Assets.BUTTON_HEIGHT,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnDown();
      }
    }
  }
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
switch (kevent.keyCode) {
case android.view.KeyEvent.KEYCODE_DPAD_LEFT:
      if (!world.snake.already_turned)       world.snake.turnLeft();
    break;
case android.view.KeyEvent.KEYCODE_DPAD_RIGHT:
  if (!world.snake.already_turned)   world.snake.turnRight();
break;
case android.view.KeyEvent.KEYCODE_DPAD_UP:
if (!world.snake.already_turned) world.snake.turnUp();
break;
case android.view.KeyEvent.KEYCODE_DPAD_DOWN:
if (!world.snake.already_turned) world.snake.turnDown();
break;
}
}
world.update(deltaTime);
if (world.gameOver) {
if (Settings.soundEnabled) Assets.bitten.play(1);
state=GameState.GameOver;
}
if (oldScore != world.score) {
oldScore=world.score;
score=""String_Node_Str"" + oldScore;
if (Settings.soundEnabled) Assets.eat.play(1);
}
}"
84693,"public void turnUp(){
  direction=UP;
  already_turned=true;
}","public void turnUp(){
  if (direction != DOWN)   direction=UP;
  already_turned=true;
}"
84694,"public void turnRight(){
  direction=RIGHT;
  already_turned=true;
}","public void turnRight(){
  if (direction != LEFT)   direction=RIGHT;
  already_turned=true;
}"
84695,"public void turnDown(){
  direction=DOWN;
  already_turned=true;
}","public void turnDown(){
  if (direction != UP)   direction=DOWN;
  already_turned=true;
}"
84696,"public void turnLeft(){
  direction=LEFT;
  already_turned=true;
}","public void turnLeft(){
  if (direction != RIGHT)   direction=LEFT;
  already_turned=true;
}"
84697,"private void updateReady(List<TouchEvent> touchEvents){
  if (touchEvents.size() > 0)   state=GameState.Running;
}","private void updateReady(List<TouchEvent> touchEvents){
  if (touchEvents.size() > 0) {
    state=GameState.Running;
    World.tick=World.TICK_INITIAL;
  }
}"
84698,"public void eat(){
  SnakePart end=parts.get(parts.size() - 1);
  parts.add(new SnakePart(end.x,end.y));
}","public void eat(){
  Log.e(""String_Node_Str"",""String_Node_Str"" + World.tick);
  SnakePart end=parts.get(parts.size() - 1);
  parts.add(new SnakePart(end.x,end.y));
}"
84699,"public void update(float deltaTime){
  if (gameOver)   return;
  tickTime+=deltaTime;
  while (tickTime > tick) {
    tickTime-=tick;
    snake.advance();
    if (snake.checkBitten()) {
      gameOver=true;
      return;
    }
    SnakePart head=snake.parts.get(0);
    if (head.x == stain.x && head.y == stain.y) {
      score+=SCORE_INCREMENT;
      stainsEaten++;
      snake.eat();
      if (snake.parts.size() == WORLD_WIDTH * WORLD_HEIGHT) {
        gameOver=true;
        return;
      }
 else {
        placeStain();
      }
      if (score % 100 == 0 && tick - TICK_DECREMENT > 0) {
        tick-=TICK_DECREMENT;
      }
    }
    if (extraStain != null) {
      if (head.x == extraStain.x && head.y == extraStain.y) {
        snake.shrink();
        extraStain=null;
      }
      if (deltaTick >= 20) {
        extraStain=null;
        deltaTick=0;
      }
 else {
        deltaTick++;
      }
    }
  }
}","public void update(float deltaTime){
  if (gameOver)   return;
  tickTime+=deltaTime;
  while (tickTime > tick) {
    tickTime-=tick;
    snake.advance();
    if (snake.checkBitten()) {
      gameOver=true;
      return;
    }
    SnakePart head=snake.parts.get(0);
    if (head.x == stain.x && head.y == stain.y) {
      score+=SCORE_INCREMENT;
      stainsEaten++;
      snake.eat();
      if (snake.parts.size() == WORLD_WIDTH * WORLD_HEIGHT) {
        gameOver=true;
        return;
      }
 else {
        placeStain();
      }
      if (score % 100 == 0 && tick - TICK_DECREMENT > 0) {
        tick-=TICK_DECREMENT;
      }
    }
    if (extraStain != null) {
      if (head.x == extraStain.x && head.y == extraStain.y) {
        score+=5 * SCORE_INCREMENT;
        snake.shrink();
        extraStain=null;
        deltaTick=0;
      }
 else {
        if (deltaTick >= 20) {
          extraStain=null;
          deltaTick=0;
        }
 else {
          deltaTick++;
        }
      }
    }
  }
}"
84700,"static void command(RealAdminToolsPlugin plugin,CommandSender sender,String[] args){
  String subCommand=args.length > 0 ? args[0].toLowerCase() : ""String_Node_Str"";
  try {
    BufferedWriter writer=new BufferedWriter(new FileWriter(plugin.getDataFolder().getPath() + ""String_Node_Str""));
    writer.write(""String_Node_Str"");
    String what=args.length > 1 ? args[1].toLowerCase() : ""String_Node_Str"";
    int removed_entities=0;
    for (    World world : plugin.getServer().getWorlds()) {
      sender.sendMessage(world.getName() + ""String_Node_Str"");
      sender.sendMessage(""String_Node_Str"" + world.getEntities().size() + ""String_Node_Str"");
      sender.sendMessage(""String_Node_Str"" + world.getLivingEntities().size() + ""String_Node_Str"");
      sender.sendMessage(""String_Node_Str"" + world.getPlayers().size() + ""String_Node_Str"");
      for (      Entity entity : world.getEntities()) {
        Item item=(entity instanceof Item ? (Item)entity : null);
        writer.write(entity.getClass().getName() + ""String_Node_Str"" + entity.getEntityId()+ ""String_Node_Str""+ (item != null ? item.getItemStack().getTypeId() : ""String_Node_Str"")+ ""String_Node_Str""+ world.getName()+ ""String_Node_Str""+ Math.round(Math.floor(entity.getLocation().getX()))+ ""String_Node_Str""+ Math.round(Math.floor(entity.getLocation().getY()))+ ""String_Node_Str""+ Math.round(Math.floor(entity.getLocation().getZ()))+ ""String_Node_Str"");
        if (subCommand.equals(""String_Node_Str"")) {
          if (what.equals(entity.getClass().getName().split(""String_Node_Str"")[1].toLowerCase()) || what.equals(""String_Node_Str"")) {
            String id=args.length > 2 ? args[2].toLowerCase() : ""String_Node_Str"";
            String entityTypeId=(item != null ? ""String_Node_Str"" + item.getItemStack().getTypeId() : ""String_Node_Str"");
            if (id.equals(entityTypeId) || id.equals(""String_Node_Str"")) {
              entity.remove();
              removed_entities++;
            }
          }
        }
      }
    }
    if (subCommand.equals(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"" + removed_entities + ""String_Node_Str""+ what);
    }
    writer.flush();
    writer.close();
  }
 catch (  Exception e) {
    plugin.getLog().severe(""String_Node_Str"" + plugin.getDataFolder().getPath() + ""String_Node_Str"");
  }
}","static void command(RealAdminToolsPlugin plugin,CommandSender sender,String[] args){
  String subCommand=args.length > 0 ? args[0].toLowerCase() : ""String_Node_Str"";
  try {
    BufferedWriter writer=new BufferedWriter(new FileWriter(plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
    writer.write(""String_Node_Str"");
    String what=args.length > 1 ? args[1].toLowerCase() : ""String_Node_Str"";
    int removed_entities=0;
    for (    World world : plugin.getServer().getWorlds()) {
      sender.sendMessage(world.getName() + ""String_Node_Str"");
      sender.sendMessage(""String_Node_Str"" + world.getEntities().size() + ""String_Node_Str"");
      sender.sendMessage(""String_Node_Str"" + world.getLivingEntities().size() + ""String_Node_Str"");
      sender.sendMessage(""String_Node_Str"" + world.getPlayers().size() + ""String_Node_Str"");
      for (      Entity entity : world.getEntities()) {
        Item item=(entity instanceof Item ? (Item)entity : null);
        writer.write(entity.getClass().getName() + ""String_Node_Str"" + entity.getEntityId()+ ""String_Node_Str""+ (item != null ? item.getItemStack().getTypeId() : ""String_Node_Str"")+ ""String_Node_Str""+ world.getName()+ ""String_Node_Str""+ Math.round(Math.floor(entity.getLocation().getX()))+ ""String_Node_Str""+ Math.round(Math.floor(entity.getLocation().getY()))+ ""String_Node_Str""+ Math.round(Math.floor(entity.getLocation().getZ()))+ ""String_Node_Str"");
        if (subCommand.equals(""String_Node_Str"")) {
          if (what.equals(entity.getClass().getName().split(""String_Node_Str"")[1].toLowerCase()) || what.equals(""String_Node_Str"")) {
            String id=args.length > 2 ? args[2].toLowerCase() : ""String_Node_Str"";
            String entityTypeId=(item != null ? ""String_Node_Str"" + item.getItemStack().getTypeId() : ""String_Node_Str"");
            if (id.equals(entityTypeId) || id.equals(""String_Node_Str"")) {
              entity.remove();
              removed_entities++;
            }
          }
        }
      }
    }
    if (subCommand.equals(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"" + removed_entities + ""String_Node_Str""+ what);
    }
    writer.flush();
    writer.close();
  }
 catch (  Exception e) {
    plugin.getLog().severe(""String_Node_Str"" + plugin.getDataFolder().getPath() + ""String_Node_Str"");
  }
}"
84701,"public List<SchemaInfo> getDefaultSchemasByServer(String serverId){
  if (serverId == null || serverId.length() == 0)   return new ArrayList<SchemaInfo>();
  if (schemas == null)   schemas=new ServersUtil(LiveRebelDeployBuilder.DescriptorImpl.newCommandCenter(),null).getSchemas();
  List<SchemaInfo> schemasByServer=new ArrayList<SchemaInfo>();
  for (  SchemaInfo schemaInfo : schemas) {
    if (schemaInfo.getServerId().equalsIgnoreCase(serverId))     schemasByServer.add(schemaInfo);
  }
  return schemasByServer;
}","public List<SchemaInfo> getDefaultSchemasByServer(String serverId){
  if (serverId == null || serverId.length() == 0)   return new ArrayList<SchemaInfo>();
  schemas=new ServersUtil(LiveRebelDeployBuilder.DescriptorImpl.newCommandCenter(),null).getSchemas();
  List<SchemaInfo> schemasByServer=new ArrayList<SchemaInfo>();
  for (  SchemaInfo schemaInfo : schemas) {
    if (schemaInfo.getServerId().equalsIgnoreCase(serverId))     schemasByServer.add(schemaInfo);
  }
  return schemasByServer;
}"
84702,"public List<SchemaInfo> getDefaultSchemas(){
  if (schemas == null)   schemas=new ServersUtil(LiveRebelDeployBuilder.DescriptorImpl.newCommandCenter(),null).getSchemas();
  return schemas;
}","public List<SchemaInfo> getDefaultSchemas(){
  schemas=new ServersUtil(LiveRebelDeployBuilder.DescriptorImpl.newCommandCenter(),null).getSchemas();
  return schemas;
}"
84703,"public List<SchemaInfo> getDefaultSchemasByServer(String serverId){
  if (serverId == null || serverId.length() == 0)   return new ArrayList<SchemaInfo>();
  if (schemas == null)   schemas=new ServersUtil(LiveRebelDeployBuilder.DescriptorImpl.newCommandCenter(),null).getSchemas();
  List<SchemaInfo> schemasByServer=new ArrayList<SchemaInfo>();
  for (  SchemaInfo schemaInfo : schemas) {
    if (schemaInfo.getServerId().equalsIgnoreCase(serverId))     schemasByServer.add(schemaInfo);
  }
  return schemasByServer;
}","public List<SchemaInfo> getDefaultSchemasByServer(String serverId){
  if (serverId == null || serverId.length() == 0)   return new ArrayList<SchemaInfo>();
  schemas=new ServersUtil(LiveRebelDeployBuilder.DescriptorImpl.newCommandCenter(),null).getSchemas();
  List<SchemaInfo> schemasByServer=new ArrayList<SchemaInfo>();
  for (  SchemaInfo schemaInfo : schemas) {
    if (schemaInfo.getServerId().equalsIgnoreCase(serverId))     schemasByServer.add(schemaInfo);
  }
  return schemasByServer;
}"
84704,"public List<SchemaInfo> getDefaultSchemas(){
  if (schemas == null)   schemas=new ServersUtil(LiveRebelDeployBuilder.DescriptorImpl.newCommandCenter(),null).getSchemas();
  return schemas;
}","public List<SchemaInfo> getDefaultSchemas(){
  schemas=new ServersUtil(LiveRebelDeployBuilder.DescriptorImpl.newCommandCenter(),null).getSchemas();
  return schemas;
}"
84705,"public List<ServerCheckbox> getServers(){
  return new ServersUtil(servers).getServers();
}","public List<ServerCheckbox> getServers(){
  return serverToServerCheckBox(new ServersUtil(LiveRebelDeployBuilder.DescriptorImpl.newCommandCenter(),serverCheckBoxToServer(servers)).getServers());
}"
84706,"public List<ServerCheckbox> getDefaultServers(){
  return new ServersUtil(null).getDefaultServers();
}","public List<ServerCheckbox> getDefaultServers(){
  return serverToServerCheckBox(new ServersUtil(LiveRebelDeployBuilder.DescriptorImpl.newCommandCenter(),null).getDefaultServers());
}"
84707,"public FormValidation doCheckArtifact(@AncestorInPath AbstractProject project,@QueryParameter String value) throws IOException, ServletException {
  if (value.contains(""String_Node_Str"")) {
    return FormValidation.error(""String_Node_Str"");
  }
  if (StringUtils.trimToNull(value) == null || value.length() == 0) {
    return FormValidation.error(""String_Node_Str"");
  }
 else {
    return FilePath.validateFileMask(project.getSomeWorkspace(),value);
  }
}","public FormValidation doCheckArtifact(@AncestorInPath AbstractProject project,@QueryParameter String value) throws IOException, ServletException {
  if (StringUtils.trimToNull(value) == null || value.length() == 0) {
    return FormValidation.error(""String_Node_Str"");
  }
 else   if (value.contains(""String_Node_Str"")) {
    return FormValidation.error(""String_Node_Str"");
  }
 else {
    return FilePath.validateFileMask(project.getSomeWorkspace(),value);
  }
}"
84708,"@Override public boolean perform(AbstractBuild build,Launcher launcher,BuildListener listener) throws IOException, InterruptedException {
  EnvVars envVars=build.getEnvironment(listener);
  String artifact=envVars.expand(this.artifact);
  String metadata=envVars.expand(this.metadata);
  String app=envVars.expand(this.app);
  String ver=envVars.expand(this.ver);
  if (deployOrUpdate != null)   deployOrUpdate.setContextPathWithEnvVarReplaced(envVars.expand(deployOrUpdate.contextPath));
  FilePath deployableFile;
  FilePath metadataFilePath=null;
  if (build.getWorkspace().isRemote()) {
    new ArtifactArchiver(artifact,""String_Node_Str"",true).perform(build,launcher,listener);
    deployableFile=new FilePath(build.getArtifactsDir()).child(artifact);
    if (metadata != null)     metadataFilePath=new FilePath(build.getArtifactsDir()).child(metadata);
  }
 else {
    deployableFile=build.getWorkspace().child(artifact);
    if (metadata != null)     metadataFilePath=build.getWorkspace().child(metadata);
  }
  if (!deployableFile.exists()) {
    listener.getLogger().println(""String_Node_Str"");
    return false;
  }
  if (metadataFilePath != null) {
    if (!metadataFilePath.exists()) {
      listener.getLogger().println(""String_Node_Str"" + metadataFilePath.getRemote());
      return false;
    }
  }
  CommandCenterFactory commandCenterFactory=getCommandCenterFactory();
  PluginUtil pluginUtil=new PluginUtil((PluginLogger)new JenkinsLogger(listener));
  if (!pluginUtil.initCommandCenter(commandCenterFactory))   return false;
  File metadataFile=null;
  if (metadataFilePath != null)   metadataFile=new File(metadataFilePath.getRemote());
  String contextPath=""String_Node_Str"";
  UpdateStrategies updateStrategies=null;
  if (deployOrUpdate != null) {
    contextPath=deployOrUpdate.contextPath;
    updateStrategies=(UpdateStrategies)deployOrUpdate.updateStrategies;
  }
  if (!pluginUtil.perform(new File(deployableFile.getRemote()),metadataFile,contextPath,this.undeploy != null,updateStrategies,getDeployableServers(),app,ver))   build.setResult(Result.FAILURE);
  return true;
}","@Override public boolean perform(AbstractBuild build,Launcher launcher,BuildListener listener) throws IOException, InterruptedException {
  EnvVars envVars=build.getEnvironment(listener);
  String artifact=envVars.expand(this.artifact);
  String metadata=envVars.expand(this.metadata);
  String app=envVars.expand(this.app);
  String ver=envVars.expand(this.ver);
  if (deployOrUpdate != null)   deployOrUpdate.setContextPathWithEnvVarReplaced(envVars.expand(deployOrUpdate.contextPath));
  FilePath deployableFile;
  FilePath metadataFilePath=null;
  if (build.getWorkspace().isRemote()) {
    new ArtifactArchiver(artifact,""String_Node_Str"",true).perform(build,launcher,listener);
    deployableFile=new FilePath(build.getArtifactsDir()).child(artifact);
    if (metadata != null)     metadataFilePath=new FilePath(build.getArtifactsDir()).child(metadata);
  }
 else {
    deployableFile=build.getWorkspace().child(artifact);
    if (metadata != null)     metadataFilePath=build.getWorkspace().child(metadata);
  }
  if (!deployableFile.exists()) {
    listener.getLogger().println(""String_Node_Str"");
    return false;
  }
  if (metadataFilePath != null) {
    if (!metadataFilePath.exists()) {
      listener.getLogger().println(""String_Node_Str"" + metadataFilePath.getRemote());
      return false;
    }
  }
  CommandCenterFactory commandCenterFactory=getCommandCenterFactory();
  PluginUtil pluginUtil=new PluginUtil(commandCenterFactory,(PluginLogger)new JenkinsLogger(listener));
  File metadataFile=null;
  if (metadataFilePath != null)   metadataFile=new File(metadataFilePath.getRemote());
  String contextPath=""String_Node_Str"";
  UpdateStrategies updateStrategies=null;
  if (deployOrUpdate != null) {
    contextPath=deployOrUpdate.contextPath;
    updateStrategies=(UpdateStrategies)deployOrUpdate.updateStrategies;
  }
  if (!pluginUtil.perform(new File(deployableFile.getRemote()),metadataFile,contextPath,this.undeploy != null,updateStrategies,getDeployableServers(),app,ver))   build.setResult(Result.FAILURE);
  return true;
}"
84709,"@Override public boolean configure(StaplerRequest req,JSONObject formData) throws FormException {
  authToken=formData.getString(""String_Node_Str"");
  lrUrl=""String_Node_Str"" + formData.getString(""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
  save();
  return super.configure(req,formData);
}","@Override public boolean configure(StaplerRequest req,JSONObject formData) throws FormException {
  authToken=formData.getString(""String_Node_Str"");
  lrUrl=""String_Node_Str"" + formData.getString(""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
  staticAuthToken=authToken;
  staticLrUrl=lrUrl;
  save();
  return super.configure(req,formData);
}"
84710,"private List<String> getDeployableServers(){
  List<String> list=new ArrayList<String>();
  if (currentAction.equals(Action.DEPLOYORUPDATE)) {
    if (deployOrUpdate != null && deployOrUpdate.servers != null) {
      for (      ServerCheckbox server : deployOrUpdate.servers)       if (server.isSelected() && !server.isGroup() && server.isOnline())       list.add(server.getServer());
    }
  }
 else   if (currentAction.equals(Action.UNDEPLOY)) {
    if (undeploy != null && undeploy.servers != null) {
      for (      ServerCheckbox server : undeploy.servers)       if (server.isSelected() && !server.isGroup() && server.isOnline())       list.add(server.getServer());
    }
  }
  System.out.println(""String_Node_Str"" + list);
  return list;
}","private List<String> getDeployableServers(){
  List<String> list=new ArrayList<String>();
  if (currentAction.equals(Action.DEPLOYORUPDATE)) {
    if (deployOrUpdate != null && deployOrUpdate.servers != null) {
      for (      ServerCheckbox server : deployOrUpdate.servers)       if (server.isChecked() && !server.isGroup() && server.isConnected())       list.add(server.getId());
    }
  }
 else   if (currentAction.equals(Action.UNDEPLOY)) {
    if (undeploy != null && undeploy.servers != null) {
      for (      ServerCheckbox server : undeploy.servers)       if (server.isChecked() && !server.isGroup() && server.isConnected())       list.add(server.getId());
    }
  }
  return list;
}"
84711,"public FormValidation doCheckMetadata(@AncestorInPath AbstractProject project,@QueryParameter String value) throws IOException, ServletException {
  if (value.contains(""String_Node_Str"")) {
    return FormValidation.error(""String_Node_Str"");
  }
  if (StringUtils.trimToNull(value) != null) {
    String fileExtension=null;
    try {
      fileExtension=value.substring(value.lastIndexOf('.') + 1);
    }
 catch (    Exception e) {
      return FormValidation.error(""String_Node_Str"");
    }
    if (!fileExtension.equals(""String_Node_Str""))     return FormValidation.error(""String_Node_Str"");
    return FilePath.validateFileMask(project.getSomeWorkspace(),value);
  }
 else {
    return FormValidation.ok();
  }
}","public FormValidation doCheckMetadata(@AncestorInPath AbstractProject project,@QueryParameter String value) throws IOException, ServletException {
  if (StringUtils.trimToNull(value) != null) {
    if (value.contains(""String_Node_Str"")) {
      return FormValidation.error(""String_Node_Str"");
    }
    String fileExtension=null;
    try {
      fileExtension=value.substring(value.lastIndexOf('.') + 1);
    }
 catch (    Exception e) {
      return FormValidation.error(""String_Node_Str"");
    }
    if (!fileExtension.equals(""String_Node_Str""))     return FormValidation.error(""String_Node_Str"");
    return FilePath.validateFileMask(project.getSomeWorkspace(),value);
  }
 else {
    return FormValidation.ok();
  }
}"
84712,"public String getServer(){
  return server;
}","public String getServer(){
  return id;
}"
84713,"public boolean isSelected(){
  return selected;
}","public boolean isSelected(){
  return checked;
}"
84714,"public boolean isOnline(){
  return online;
}","public boolean isOnline(){
  return connected;
}"
84715,"@DataBoundConstructor public ServerCheckbox(String server,String title,String parentNames,int indentDepth,boolean selected,boolean online,boolean isGroup){
  this.server=server;
  this.parentNames=parentNames;
  this.indentDepth=indentDepth;
  this.online=online;
  this.title=title;
  this.selected=selected;
  this.isGroup=isGroup;
}","@DataBoundConstructor public ServerCheckbox(String server,String title,String parentNames,int indentDepth,boolean selected,boolean online,boolean isGroup){
  this.id=server;
  this.parentNames=parentNames;
  this.indentDepth=indentDepth;
  this.connected=online;
  this.title=title;
  this.checked=selected;
  this.isGroup=isGroup;
}"
84716,"public List<ServerCheckbox> getServers(){
  return new ServersUtil(servers).getServers();
}","public List<ServerCheckbox> getServers(){
  return serverToServerCheckBox(new ServersUtil(LiveRebelDeployBuilder.DescriptorImpl.newCommandCenter(),serverCheckBoxToServer(servers)).getServers());
}"
84717,"public List<ServerCheckbox> getDefaultServers(){
  return new ServersUtil(null).getDefaultServers();
}","public List<ServerCheckbox> getDefaultServers(){
  return serverToServerCheckBox(new ServersUtil(LiveRebelDeployBuilder.DescriptorImpl.newCommandCenter(),null).getDefaultServers());
}"
84718,"@DataBoundConstructor public LiveRebelDeployBuilder(String artifact,String metadata,ActionWrapper actionWrapper,OverrideForm overrideForm){
  this.undeploy=actionWrapper.undeploy;
  this.deployOrUpdate=actionWrapper.deployOrUpdate;
  currentAction=actionWrapper.value;
switch (currentAction) {
case UNDEPLOY:
    this.undeployChecked=true;
  this.distributeChecked=false;
this.deployOrUpdateChecked=false;
break;
case DEPLOYORUPDATE:
this.deployOrUpdateChecked=true;
this.distributeChecked=false;
this.undeployChecked=false;
break;
case DISTRIBUTE:
this.distributeChecked=true;
this.deployOrUpdateChecked=true;
this.undeployChecked=false;
break;
default :
this.distributeChecked=true;
this.deployOrUpdateChecked=false;
this.undeployChecked=false;
}
this.artifact=artifact;
this.metadata=StringUtils.trimToNull(metadata);
if (overrideForm != null) {
this.app=StringUtils.trimToNull(overrideForm.getApp());
this.ver=StringUtils.trimToNull(overrideForm.getVer());
this.isOverride=true;
}
 else {
this.app=null;
this.ver=null;
this.isOverride=false;
}
LOGGER.info(""String_Node_Str"" + artifact + ""String_Node_Str""+ app+ ""String_Node_Str""+ ver+ ""String_Node_Str""+ metadata+ ""String_Node_Str""+ deployOrUpdate+ ""String_Node_Str"");
}","@DataBoundConstructor public LiveRebelDeployBuilder(String artifact,String metadata,ActionWrapper actionWrapper,OverrideForm overrideForm){
  this.undeploy=actionWrapper.undeploy;
  this.deployOrUpdate=actionWrapper.deployOrUpdate;
  currentAction=actionWrapper.value;
switch (currentAction) {
case UNDEPLOY:
    this.undeployChecked=true;
  this.distributeChecked=false;
this.deployOrUpdateChecked=false;
break;
case DEPLOYORUPDATE:
this.deployOrUpdateChecked=true;
this.distributeChecked=false;
this.undeployChecked=false;
break;
case DISTRIBUTE:
this.distributeChecked=true;
this.deployOrUpdateChecked=false;
this.undeployChecked=false;
break;
default :
this.distributeChecked=true;
this.deployOrUpdateChecked=false;
this.undeployChecked=false;
}
this.artifact=artifact;
this.metadata=StringUtils.trimToNull(metadata);
if (overrideForm != null) {
this.app=StringUtils.trimToNull(overrideForm.getApp());
this.ver=StringUtils.trimToNull(overrideForm.getVer());
this.isOverride=true;
}
 else {
this.app=null;
this.ver=null;
this.isOverride=false;
}
LOGGER.info(""String_Node_Str"" + artifact + ""String_Node_Str""+ app+ ""String_Node_Str""+ ver+ ""String_Node_Str""+ metadata+ ""String_Node_Str""+ deployOrUpdate+ ""String_Node_Str"");
}"
84719,"@Override public ArrayList<Scenario> getScenarios(){
  ArrayList<Scenario> scenarios=new ArrayList<Scenario>();
  Bundle bundle=mInfo[0];
  for (  String command : NativeTesterMicro.COMMANDS) {
    String name=bundle.getString(command + ""String_Node_Str"");
    float[] results=bundle.getFloatArray(command + ""String_Node_Str"");
    Scenario s=new Scenario(name,mType,mTags);
    for (    float result : results)     s.mResults.add(new Double(result));
    scenarios.add(s);
  }
  Log.e(""String_Node_Str"",""String_Node_Str"");
  return scenarios;
}","@Override public ArrayList<Scenario> getScenarios(){
  ArrayList<Scenario> scenarios=new ArrayList<Scenario>();
  Bundle bundle=mInfo[0];
  for (  String command : NativeTesterMicro.COMMANDS) {
    String name=bundle.getString(command + ""String_Node_Str"");
    float[] results=bundle.getFloatArray(command + ""String_Node_Str"");
    if (name == null || results == null)     continue;
    Scenario s=new Scenario(name,mType,mTags);
    for (    float result : results)     s.mResults.add(new Double(result));
    scenarios.add(s);
  }
  return scenarios;
}"
84720,"@Override protected boolean saveResult(Intent intent){
  Bundle bundle=new Bundle();
  for (  String command : getCommands()) {
    String[] lines=mSockets.get(command).split(""String_Node_Str"");
    String name=lines[0].trim().split(""String_Node_Str"")[0];
    float[] list=new float[lines.length];
    int i=0;
    for (    String line : lines) {
      String[] sp=line.trim().split(""String_Node_Str"");
      if (!name.equals(sp[0]))       Log.i(TAG,""String_Node_Str"" + name + ""String_Node_Str""+ sp[0]);
      list[i]=Float.parseFloat(sp[1]);
      i=i + 1;
    }
    bundle.putString(command + ""String_Node_Str"",name);
    bundle.putFloatArray(command + ""String_Node_Str"",list);
  }
  intent.putExtra(RESULT,bundle);
  return true;
}","@Override protected boolean saveResult(Intent intent){
  Bundle bundle=new Bundle();
  for (  String command : getCommands()) {
    if (!mSockets.containsKey(command))     continue;
    String[] lines=mSockets.get(command).split(""String_Node_Str"");
    String name=lines[0].trim().split(""String_Node_Str"")[0];
    float[] list=new float[lines.length];
    int i=0;
    for (    String line : lines) {
      String[] sp=line.trim().split(""String_Node_Str"");
      if (!name.equals(sp[0]))       Log.i(TAG,""String_Node_Str"" + name + ""String_Node_Str""+ sp[0]);
      list[i]=Float.parseFloat(sp[1]);
      i=i + 1;
    }
    bundle.putString(command + ""String_Node_Str"",name);
    bundle.putFloatArray(command + ""String_Node_Str"",list);
  }
  intent.putExtra(RESULT,bundle);
  return true;
}"
84721,"public String getXMLBenchmark(){
  if (!couldFetchReport()) {
    return ""String_Node_Str"";
  }
  String result=""String_Node_Str"";
  ArrayList<Scenario> scenarios=getScenarios();
  for (  Scenario s : scenarios) {
    if (s == null)     continue;
    result+=""String_Node_Str"";
    result+=""String_Node_Str"" + s.mName.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    result+=""String_Node_Str"" + s.mType + ""String_Node_Str"";
    result+=""String_Node_Str"";
    for (    String tag : s.mTags)     result+=tag + ""String_Node_Str"";
    result+=""String_Node_Str"";
    result+=""String_Node_Str"";
    Double total=0.0;
    for (    Double value : s.mResults) {
      result+=value + ""String_Node_Str"";
      total+=value;
    }
    if (total == 0)     return ""String_Node_Str"";
    result+=""String_Node_Str"";
  }
  Log.e(""String_Node_Str"",""String_Node_Str"");
  return result;
}","public String getXMLBenchmark(){
  if (!couldFetchReport()) {
    return ""String_Node_Str"";
  }
  String result=""String_Node_Str"";
  ArrayList<Scenario> scenarios=getScenarios();
  for (  Scenario s : scenarios) {
    if (s == null)     continue;
    result+=""String_Node_Str"";
    result+=""String_Node_Str"" + s.mName.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    result+=""String_Node_Str"" + s.mType + ""String_Node_Str"";
    result+=""String_Node_Str"";
    for (    String tag : s.mTags)     result+=tag + ""String_Node_Str"";
    result+=""String_Node_Str"";
    result+=""String_Node_Str"";
    Double total=0.0;
    for (    Double value : s.mResults) {
      result+=value + ""String_Node_Str"";
      total+=value;
    }
    if (total == 0)     return ""String_Node_Str"";
    result+=""String_Node_Str"";
  }
  return result;
}"
84722,"public void runCase(LinkedList<Case> list){
  Case pointer=null;
  boolean finish=true;
  for (int i=0; i < list.size(); i++) {
    pointer=list.get(i);
    if (!pointer.isFinish()) {
      finish=false;
      break;
    }
  }
  if (finish) {
    mBannerInfo.setText(""String_Node_Str"");
  }
 else {
    Intent intent=pointer.generateIntent();
    if (intent != null) {
      startActivityForResult(intent,0);
    }
  }
}","public void runCase(LinkedList<Case> list){
  Case pointer=null;
  boolean finish=true;
  for (int i=0; i < list.size(); i++) {
    pointer=list.get(i);
    if (!pointer.isFinish()) {
      finish=false;
      break;
    }
  }
  if (finish) {
    mBannerInfo.setText(""String_Node_Str"");
    String result=getResult();
    writeToSDCard(mOutputFile,result);
    mXMLResult=getXMLResult();
    writeToSDCard(mOutputXMLFile,mXMLResult);
    onClick(mShow);
    mTouchable=true;
  }
 else {
    Intent intent=pointer.generateIntent();
    if (intent != null) {
      startActivityForResult(intent,0);
    }
  }
}"
84723,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  mCases=new LinkedList<Case>();
  Case arith=new CaseArithmetic();
  Case scimark2=new CaseScimark2();
  Case mycase=new CaseCanvas();
  Case glcube=new CaseGLCube();
  Case circle=new CaseDrawCircle();
  Case gc=new CaseGC();
  Case nehe08=new CaseNeheLesson08();
  Case nehe16=new CaseNeheLesson16();
  Case teapot=new CaseTeapot();
  mCases.add(arith);
  mCases.add(scimark2);
  mCases.add(mycase);
  mCases.add(glcube);
  mCases.add(nehe08);
  mCases.add(nehe16);
  mCases.add(teapot);
  mCases.add(circle);
  mCases.add(gc);
  initViews();
  Intent intent=getIntent();
  if (intent.getBooleanExtra(""String_Node_Str"",false)) {
    ImageView head=(ImageView)findViewById(R.id.banner_img);
    head.setImageResource(R.drawable.icon_auto);
    mTouchable=false;
    initAuto();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  mCases=new LinkedList<Case>();
  Case arith=new CaseArithmetic();
  Case scimark2=new CaseScimark2();
  Case canvas=new CaseCanvas();
  Case glcube=new CaseGLCube();
  Case circle=new CaseDrawCircle();
  Case gc=new CaseGC();
  Case nehe08=new CaseNeheLesson08();
  Case nehe16=new CaseNeheLesson16();
  Case teapot=new CaseTeapot();
  mCases.add(arith);
  mCases.add(scimark2);
  mCases.add(gc);
  mCases.add(canvas);
  mCases.add(circle);
  mCases.add(glcube);
  mCases.add(nehe08);
  mCases.add(nehe16);
  mCases.add(teapot);
  initViews();
  Intent intent=getIntent();
  if (intent.getBooleanExtra(""String_Node_Str"",false)) {
    ImageView head=(ImageView)findViewById(R.id.banner_img);
    head.setImageResource(R.drawable.icon_auto);
    mTouchable=false;
    initAuto();
  }
}"
84724,"private void initAuto(){
  for (int i=0; i < mCheckList.length; i++) {
    mCheckList[i].setChecked(true);
  }
  final ProgressDialog dialog=new ProgressDialog(this).show(this,""String_Node_Str"",""String_Node_Str"",true,false);
  new Thread(){
    public void run(){
      SystemClock.sleep(5000);
      dialog.dismiss();
      onClick(mRun);
    }
  }
.start();
  new Thread(){
    public void run(){
      while (!isFinish()) {
        SystemClock.sleep(1000);
      }
      String result=getResult();
      writeToSDCard(mOutputFile,result);
      mXMLResult=getXMLResult();
      writeToSDCard(mOutputXMLFile,mXMLResult);
      onClick(mShow);
      mTouchable=true;
    }
  }
.start();
}","private void initAuto(){
  for (int i=0; i < mCheckList.length; i++) {
    mCheckList[i].setChecked(true);
  }
  final ProgressDialog dialog=new ProgressDialog(this).show(this,""String_Node_Str"",""String_Node_Str"",true,false);
  new Thread(){
    public void run(){
      SystemClock.sleep(5000);
      dialog.dismiss();
      onClick(mRun);
    }
  }
.start();
}"
84725,"public void run(){
  while (!isFinish()) {
    SystemClock.sleep(1000);
  }
  String result=getResult();
  writeToSDCard(mOutputFile,result);
  mXMLResult=getXMLResult();
  writeToSDCard(mOutputXMLFile,mXMLResult);
  onClick(mShow);
  mTouchable=true;
}","public void run(){
  SystemClock.sleep(5000);
  dialog.dismiss();
  onClick(mRun);
}"
84726,"public void handleMessage(Message msg){
  int state=msg.getData().getInt(MicroBenchmark.STATE);
  Log.e(""String_Node_Str"",""String_Node_Str"" + state);
  if (state != MicroBenchmark.RUNNING) {
    dismissDialog(0);
    if (state == MicroBenchmark.DONE) {
      showDialog(1);
    }
 else {
      showDialog(2);
    }
    Log.e(""String_Node_Str"",msg.getData().getString(MicroBenchmark.MSG));
  }
}","public void handleMessage(Message msg){
  int state=msg.getData().getInt(MicroBenchmark.STATE);
  Log.e(""String_Node_Str"",""String_Node_Str"" + state);
  if (state != MicroBenchmark.RUNNING) {
    dismissDialog(0);
    removeDialog(0);
    if (state == MicroBenchmark.DONE) {
      showDialog(1);
    }
 else {
      showDialog(2);
    }
    Log.e(""String_Node_Str"",msg.getData().getString(MicroBenchmark.MSG));
  }
}"
84727,"public void run(){
  String line;
  try {
    while ((line=stdOutReader.readLine()) != null) {
      mLastRead=SystemClock.uptimeMillis();
      mBuffer.append(line + '\n');
      Message m=new Message();
      m.what=GUINOTIFIER;
      mHandler.sendMessage(m);
    }
  }
 catch (  IOException e) {
  }
}","public void run(){
  String line;
  try {
    while ((line=is.readLine()) != null) {
      mLastRead=SystemClock.uptimeMillis();
      mBuffer.append(line + '\n');
      Message m=new Message();
      m.what=GUINOTIFIER;
      mHandler.sendMessage(m);
    }
  }
 catch (  IOException e) {
  }
}"
84728,"public String getBenchmark(){
  if (!isFinish()) {
    return TAG + ""String_Node_Str"";
  }
  String result=""String_Node_Str"";
  long total=0;
  int length=mResult.length;
  for (int i=0; i < length; i++) {
    total=mResult[i];
    result+=""String_Node_Str"" + i + ""String_Node_Str""+ mResult[i]+ ""String_Node_Str"";
  }
  result+=""String_Node_Str"" + (total / length) + ""String_Node_Str"";
  return result;
}","public String getBenchmark(){
  if (!isFinish()) {
    return TAG + ""String_Node_Str"";
  }
  String result=""String_Node_Str"";
  long total=0;
  int length=mResult.length;
  for (int i=0; i < length; i++) {
    total+=mResult[i];
    result+=""String_Node_Str"" + i + ""String_Node_Str""+ mResult[i]+ ""String_Node_Str"";
  }
  result+=""String_Node_Str"" + (total / length) + ""String_Node_Str"";
  return result;
}"
84729,"/** 
 * Connects to a database of a particular chunk (specified within the split). If a particular host fails during connection, it is avoided and another host is found. The method fails after a set number of maximum connection trials.
 */
protected Connection getConnection(DBInputSplit dbSplit){
  boolean connected=false;
  DBChunkHost avoid_host=null;
  int connect_tries=0;
  Connection connection=null;
  String localHostAddr=getLocatHostAddres();
  DBChunk chunk=dbSplit.getChunk();
  DBChunkHost chunk_host=null;
  while (!connected) {
    if (!chunk.getLocations().contains(localHostAddr)) {
      LOG.info(""String_Node_Str"" + localHostAddr);
      chunk_host=chunk.getAnyHost(avoid_host);
    }
 else {
      if (avoid_host != chunk.getHost(localHostAddr))       chunk_host=chunk.getHost(localHostAddr);
    }
    LOG.info(""String_Node_Str"" + localHostAddr + ""String_Node_Str""+ chunk.getId()+ ""String_Node_Str""+ chunk_host.getHost()+ ""String_Node_Str""+ chunk_host.getUrl());
    try {
      Class.forName(chunk_host.getDriver());
      connection=DriverManager.getConnection(chunk_host.getUrl(),chunk_host.getUser(),chunk_host.getPassword());
      connected=true;
    }
 catch (    Exception e) {
      LOG.info(""String_Node_Str"");
      LOG.info(e);
      if (connect_tries < MAX_CONNECTION_TRIALS) {
        connect_tries++;
        avoid_host=chunk_host;
        chunk_host=null;
      }
 else       throw new RuntimeException(e);
    }
  }
  return connection;
}","/** 
 * Connects to a database of a particular chunk (specified within the split). If a particular host fails during connection, it is avoided and another host is found. The method fails after a set number of maximum connection trials.
 */
protected Connection getConnection(DBInputSplit dbSplit){
  boolean connected=false;
  DBChunkHost avoid_host=null;
  int connect_tries=0;
  Connection connection=null;
  String localHostAddr=getLocatHostAddres();
  DBChunk chunk=dbSplit.getChunk();
  DBChunkHost chunk_host=null;
  while (!connected) {
    if (!chunk.getLocations().contains(localHostAddr)) {
      LOG.info(""String_Node_Str"" + localHostAddr);
      chunk_host=chunk.getAnyHost(avoid_host);
    }
 else {
      if (avoid_host != chunk.getHost(localHostAddr)) {
        chunk_host=chunk.getHost(localHostAddr);
      }
 else {
        chunk_host=chunk.getAnyHost(avoid_host);
      }
    }
    LOG.info(""String_Node_Str"" + localHostAddr + ""String_Node_Str""+ chunk.getId()+ ""String_Node_Str""+ chunk_host.getHost()+ ""String_Node_Str""+ chunk_host.getUrl());
    try {
      Class.forName(chunk_host.getDriver());
      connection=DriverManager.getConnection(chunk_host.getUrl(),chunk_host.getUser(),chunk_host.getPassword());
      connected=true;
    }
 catch (    Exception e) {
      LOG.info(""String_Node_Str"");
      LOG.info(e);
      if (connect_tries < MAX_CONNECTION_TRIALS) {
        connect_tries++;
        avoid_host=chunk_host;
        chunk_host=null;
      }
 else       throw new RuntimeException(e);
    }
  }
  return connection;
}"
84730,"private HashMap<Membership,Triangle> getTestFileContents(File file,FileSystem sys,Configuration conf) throws IOException {
  Path path=new Path(file.getAbsolutePath());
  FileStatus stat=sys.getFileStatus(path);
  FileSplit s=new FileSplit(path,0L,stat.getLen(),new String[0]);
  Parser parser=new SimpleParser();
  HashMap<Vertex,Membership> vertexes=new HashMap<Vertex,Membership>();
  LineRecordReader l=new LineRecordReader();
  l.initialize(s,new TaskAttemptContext(conf,new TaskAttemptID()));
  while (l.nextKeyValue()) {
    Text t=l.getCurrentValue();
    Vector<Vertex> members=parser.parse(t);
    if (members != null && members.size() > 1) {
      for (      Vertex vertex : members) {
        Membership neighbours=vertexes.containsKey(vertex) ? vertexes.get(vertex) : new Membership();
        for (        Vertex v : members)         if (!v.equals(vertex))         neighbours.addMember(v);
        vertexes.put(vertex,neighbours);
      }
    }
  }
  HashMap<Membership,Triangle> triangles=new HashMap<Membership,Triangle>();
  HashSet<Vertex> visited=new HashSet<Vertex>();
  for (  Vertex v1 : vertexes.keySet()) {
    for (    Vertex v2 : vertexes.get(v1).getMembers()) {
      if (visited.contains(v2))       continue;
      for (      Vertex v3 : vertexes.get(v2).getMembers()) {
        if (visited.contains(v2))         continue;
        if (vertexes.get(v3).getMembers().contains(v1)) {
          Triangle t=new Triangle();
          t.addEdge(new RepresentativeEdge(v1,v2));
          t.addEdge(new RepresentativeEdge(v1,v3));
          t.addEdge(new RepresentativeEdge(v2,v3));
          Membership key=new Membership().addMember(v1).addMember(v2).addMember(v3);
          triangles.put(key,t);
        }
      }
    }
    visited.add(v1);
  }
  return triangles;
}","private HashMap<Membership,Triangle> getTestFileContents(File file,FileSystem sys,Configuration conf) throws IOException {
  Path path=new Path(file.getAbsolutePath());
  FileStatus stat=sys.getFileStatus(path);
  FileSplit s=new FileSplit(path,0L,stat.getLen(),new String[0]);
  Parser parser=new SimpleParser();
  HashMap<Vertex,Membership> vertices=new HashMap<Vertex,Membership>();
  LineRecordReader l=new LineRecordReader();
  l.initialize(s,new TaskAttemptContext(conf,new TaskAttemptID()));
  while (l.nextKeyValue()) {
    Text t=l.getCurrentValue();
    Vector<Vertex> members=parser.parse(t);
    if (members != null && members.size() > 1) {
      for (      Vertex vertex : members) {
        Membership neighbours=vertices.containsKey(vertex) ? vertices.get(vertex) : new Membership();
        for (        Vertex v : members)         if (!v.equals(vertex))         neighbours.addMember(v);
        vertices.put(vertex,neighbours);
      }
    }
  }
  HashMap<Membership,Triangle> triangles=new HashMap<Membership,Triangle>();
  HashSet<Vertex> visited=new HashSet<Vertex>();
  for (  Vertex v1 : vertices.keySet()) {
    for (    Vertex v2 : vertices.get(v1).getMembers()) {
      if (visited.contains(v2))       continue;
      for (      Vertex v3 : vertices.get(v2).getMembers()) {
        if (visited.contains(v2))         continue;
        if (vertices.get(v3).getMembers().contains(v1)) {
          Triangle t=new Triangle();
          t.addEdge(new RepresentativeEdge(v1,v2));
          t.addEdge(new RepresentativeEdge(v1,v3));
          t.addEdge(new RepresentativeEdge(v2,v3));
          Membership key=new Membership().addMember(v1).addMember(v2).addMember(v3);
          triangles.put(key,t);
        }
      }
    }
    visited.add(v1);
  }
  return triangles;
}"
84731,"@Override public void setup(Context ctx){
  Configuration conf=ctx.getConfiguration();
  String classname=conf.get(Parser.class.getCanonicalName());
  try {
    @SuppressWarnings(""String_Node_Str"") Class<Parser> parserclass=(Class<Parser>)Class.forName(classname);
    parser=(Parser)parserclass.newInstance();
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  if (parser == null) {
    parser=new SimpleParser();
  }
}","@Override public void setup(Context ctx){
  Configuration conf=ctx.getConfiguration();
  String classname=conf.get(Parser.class.getCanonicalName());
  if (classname != null)   try {
    @SuppressWarnings(""String_Node_Str"") Class<Parser> parserclass=(Class<Parser>)Class.forName(classname);
    parser=(Parser)parserclass.newInstance();
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  if (parser == null) {
    parser=new SimpleParser();
  }
}"
84732,"@Override public void setup(Context ctx){
  Configuration conf=ctx.getConfiguration();
  String classname=conf.get(Parser.class.getCanonicalName());
  try {
    @SuppressWarnings(""String_Node_Str"") Class<Parser> parserclass=(Class<Parser>)Class.forName(classname);
    parser=(Parser)parserclass.newInstance();
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  if (parser == null) {
    parser=new SimpleParser();
  }
}","@Override public void setup(Context ctx){
  Configuration conf=ctx.getConfiguration();
  String classname=conf.get(Parser.class.getCanonicalName());
  if (classname != null)   try {
    @SuppressWarnings(""String_Node_Str"") Class<Parser> parserclass=(Class<Parser>)Class.forName(classname);
    parser=(Parser)parserclass.newInstance();
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  if (parser == null) {
    parser=new SimpleParser();
  }
}"
84733,"public void doDraw(Canvas canvas){
synchronized (gameObjects) {
    for (    GameObject gameObject : gameObjects) {
      gameObject.doDraw(canvas);
    }
  }
  mPlayer.doDraw(canvas);
}","public void doDraw(Canvas canvas){
  mLevel.doDraw(canvas);
synchronized (gameObjects) {
    for (    GameObject gameObject : gameObjects) {
      gameObject.doDraw(canvas);
    }
synchronized (gameObjectsAdd) {
      for (      GameObject gameObject : gameObjectsAdd) {
        gameObjects.add(gameObject);
      }
      gameObjectsAdd.clear();
    }
  }
  mPlayer.doDraw(canvas);
}"
84734,"public void animate(long elapsedTime,float X,float Y){
  mWidth=(int)Panel.mWidth;
  mHeight=(int)Panel.mHeight;
  this.addX(X);
  this.addY(Y);
  if (X + Y != 0 || !initialized) {
    blocksOnScreen.clear();
synchronized (paths) {
      for (      Path path : paths) {
        for (        Block block : path.getBlocks()) {
          if (block.shouldDraw(mDestination)) {
            block.animate(elapsedTime);
            blocksOnScreen.add(block);
          }
        }
      }
    }
    initialized=true;
  }
}","public void animate(long elapsedTime,float X,float Y){
  mWidth=(int)Panel.mWidth;
  mHeight=(int)Panel.mHeight;
  this.addX(X);
  this.addY(Y);
  if (X + Y != 0 || !initialized) {
synchronized (blocksOnScreen) {
      blocksOnScreen.clear();
synchronized (paths) {
        for (        Path path : paths) {
          for (          Block block : path.getBlocks()) {
            if (block.shouldDraw(mDestination)) {
              block.animate(elapsedTime);
              blocksOnScreen.add(block);
            }
          }
        }
      }
      initialized=true;
    }
  }
}"
84735,"public void animate(long elapsedTime){
synchronized (gameObjects) {
    logic();
    for (    GameObject gameObject : gameObjects) {
      gameObject.animate(elapsedTime);
    }
synchronized (gameObjectsAdd) {
      for (      GameObject gameObject : gameObjectsAdd) {
        gameObjects.add(gameObject);
      }
    }
    gameObjectsAdd.clear();
  }
  mPlayer.animate(elapsedTime);
  mLevel.animate(elapsedTime,gameSpeed,0);
  if (mLevel.reachedEnd()) {
    Panel.beatLevel();
  }
}","public void animate(long elapsedTime){
synchronized (gameObjects) {
    logic();
    for (    GameObject gameObject : gameObjects) {
      gameObject.animate(elapsedTime);
    }
synchronized (gameObjectsAdd) {
      for (      GameObject gameObject : gameObjectsAdd) {
        gameObjects.add(gameObject);
      }
    }
    gameObjectsAdd.clear();
  }
  mPlayer.animate(elapsedTime);
  mLevel.animate(elapsedTime,gameSpeed,0);
  if (mLevel.reachedEnd()) {
    Panel.beatLevel();
    reset();
  }
}"
84736,"public Panel(Context context){
  super(context);
  getHolder().addCallback(this);
  mThread=new ViewThread(this);
  mPaint.setColor(Color.WHITE);
}","public Panel(Context context){
  super(context);
  Bitmap mBitmap=BitmapFactory.decodeResource(getResources(),R.drawable.run);
  getHolder().addCallback(this);
  mThread=new ViewThread(this);
  mPaint.setColor(Color.WHITE);
  Sprite sprite=new Sprite(mBitmap,46,42,1,100,100);
  mSprites.add(sprite);
}"
84737,"@Override public boolean onTouchEvent(MotionEvent event){
synchronized (mElements) {
    mElements.add(new Element(getResources(),(int)event.getX(),(int)event.getY()));
    mElementNumber=mElements.size();
  }
  return super.onTouchEvent(event);
}","@Override public boolean onTouchEvent(MotionEvent event){
  return super.onTouchEvent(event);
}"
84738,"public void animate(long elapsedTime){
synchronized (mElements) {
    for (    Element element : mElements) {
      element.animate(elapsedTime);
    }
  }
}","public void animate(long elapsedTime){
synchronized (mSprites) {
    for (    Sprite Sprite : mSprites) {
      Sprite.animate(elapsedTime);
    }
  }
}"
84739,"public void doDraw(long elapsed,Canvas canvas){
  canvas.drawColor(Color.BLACK);
synchronized (mElements) {
    for (    Element element : mElements) {
      element.doDraw(canvas);
    }
  }
  canvas.drawText(""String_Node_Str"" + Math.round(1000f / elapsed) + ""String_Node_Str""+ mElementNumber,10,10,mPaint);
}","public void doDraw(long elapsed,Canvas canvas){
  canvas.drawColor(Color.BLACK);
synchronized (mSprites) {
    for (    Sprite sprite : mSprites) {
      sprite.doDraw(canvas);
    }
  }
  canvas.drawText(""String_Node_Str"" + Math.round(1000f / elapsed) + ""String_Node_Str""+ mSprites.size(),10,10,mPaint);
}"
84740,"public Sprite(Resources res,int height,int width,int speed){
  mBitmap=BitmapFactory.decodeResource(res,R.drawable.icon);
  mIndex=0;
  currentIndex=0;
  setSourceRect();
  numIndexes=(int)Math.floor(mBitmap.getWidth() / width);
  mSpeed=speed;
  mHeight=height;
  mWidth=width;
}","public Sprite(Bitmap res,int height,int width,double speed){
  mBitmap=res;
  mIndex=0;
  currentIndex=0;
  numIndexes=(int)Math.floor(mBitmap.getWidth() / width);
  mSpeed=speed;
  mHeight=height;
  mWidth=width;
  setSourceRect();
}"
84741,"public int getmSpeed(){
  return mSpeed;
}","public double getmSpeed(){
  return mSpeed;
}"
84742,"public void animate(long elapsedTime){
  mIndex+=mSpeed;
  if (mIndex > numIndexes)   mIndex=0;
  if (Math.floor(mIndex) != currentIndex) {
    currentIndex=(int)Math.floor(mIndex);
    setSourceRect();
  }
}","public void animate(long elapsedTime){
  mIndex+=mSpeed;
  if (mIndex >= numIndexes)   mIndex=0;
  if (Math.floor(mIndex) != currentIndex) {
    currentIndex=(int)Math.floor(mIndex);
    setSourceRect();
  }
}"
84743,"public void setmSpeed(int mSpeed){
  this.mSpeed=mSpeed;
}","public void setmSpeed(double mSpeed){
  this.mSpeed=mSpeed;
}"
84744,"public void addY(int Y){
  mDestination.top=mDestination.top + Y;
  mDestination.bottom=mDestination.top - mHeight;
}","public void addY(int Y){
  mDestination.top=mDestination.top + Y;
  mDestination.bottom=mDestination.top + mHeight;
}"
84745,"@Override public boolean hasMessage(Method method,TAMAIVRContext context,TAMAMessageType type){
  LocalDate today=today();
  AppointmentReminderMessage message=message(context,today);
  boolean isAppointmentRemindersActivated=patientOnCall.getPatient(context).getPatientPreferences().getActivateAppointmentReminders();
  return shouldPlay(method,context,type,message) && message.isValid(today) && isAppointmentRemindersActivated;
}","@Override public boolean hasMessage(Method method,TAMAIVRContext context,TAMAMessageType type){
  LocalDate today=today();
  AppointmentReminderMessage message=message(context,today);
  boolean isAppointmentRemindersActivated=patientOnCall.getPatient(context).getPatientPreferences().getActivateAppointmentReminders();
  return isAppointmentRemindersActivated && message.isValid(today) && shouldPlay(method,context,type,message);
}"
84746,"@Override protected void buildSummary(HSSFSheet worksheet){
  List<HSSFCellStyle> cellStyles=buildCellStylesForSummary(worksheet);
  buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",DateUtil.today().toString(""String_Node_Str""));
  buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",""String_Node_Str"");
  List<String> patientDocumentIds=patientReports.getPatientDocIds();
  for (  String patientDocumentId : patientDocumentIds) {
    PatientReport report=patientReports.getPatientReport(patientDocumentId);
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",report.getPatientId());
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",report.getClinicName());
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",DateUtil.newDate(report.getARTStartedOn()).toString(TAMAConstants.DATE_FORMAT));
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",""String_Node_Str"");
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",""String_Node_Str"");
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",""String_Node_Str"");
    List<TreatmentAdvice> treatmentAdvices=allTreatmentAdvices.find_by_patient_id(report.getPatientDocId());
    Collections.sort(treatmentAdvices);
    for (    TreatmentAdvice treatmentAdvice : treatmentAdvices) {
      if (treatmentAdvice.getEndDate() == null)       buildSummaryRow(worksheet,cellStyles,allRegimens.get(treatmentAdvice.getRegimenId()).getDisplayName() + ""String_Node_Str"" + CURRENT_REGIMEN,DateUtil.newDate(treatmentAdvice.getStartDate()).toString(TAMAConstants.DATE_FORMAT));
 else       buildSummaryRow(worksheet,cellStyles,allRegimens.get(treatmentAdvice.getRegimenId()).getDisplayName(),DateUtil.newDate(treatmentAdvice.getStartDate()).toString(TAMAConstants.DATE_FORMAT));
    }
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",""String_Node_Str"");
    worksheet.createRow(worksheet.getLastRowNum() + 1);
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",""String_Node_Str"");
  }
}","@Override protected void buildSummary(HSSFSheet worksheet){
  List<HSSFCellStyle> cellStyles=buildCellStylesForSummary(worksheet);
  buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",DateUtil.today().toString(""String_Node_Str""));
  buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",""String_Node_Str"");
  List<String> patientDocumentIds=patientReports.getPatientDocIds();
  for (  String patientDocumentId : patientDocumentIds) {
    PatientReport report=patientReports.getPatientReport(patientDocumentId);
    String artStartDate=report.getARTStartedOn() != null ? DateUtil.newDate(report.getARTStartedOn()).toString(TAMAConstants.DATE_FORMAT) : null;
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",report.getPatientId());
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",report.getClinicName());
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",artStartDate);
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",""String_Node_Str"");
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",""String_Node_Str"");
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",""String_Node_Str"");
    List<TreatmentAdvice> treatmentAdvices=allTreatmentAdvices.find_by_patient_id(report.getPatientDocId());
    Collections.sort(treatmentAdvices);
    for (    TreatmentAdvice treatmentAdvice : treatmentAdvices) {
      if (treatmentAdvice.getEndDate() == null)       buildSummaryRow(worksheet,cellStyles,allRegimens.get(treatmentAdvice.getRegimenId()).getDisplayName() + ""String_Node_Str"" + CURRENT_REGIMEN,DateUtil.newDate(treatmentAdvice.getStartDate()).toString(TAMAConstants.DATE_FORMAT));
 else       buildSummaryRow(worksheet,cellStyles,allRegimens.get(treatmentAdvice.getRegimenId()).getDisplayName(),DateUtil.newDate(treatmentAdvice.getStartDate()).toString(TAMAConstants.DATE_FORMAT));
    }
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",""String_Node_Str"");
    worksheet.createRow(worksheet.getLastRowNum() + 1);
    buildSummaryRow(worksheet,cellStyles,""String_Node_Str"",""String_Node_Str"");
  }
}"
84747,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String list(@RequestParam(value=""String_Node_Str"",required=true) String patientDocId,Model uiModel){
  List<String> warningMessage=null;
  List<String> adviceMessage=null;
  List<ClinicVisitUIModel> clinicVisitUIModels=allClinicVisits(patientDocId);
  Patient patient=clinicVisitUIModels.get(0).getPatient();
  List<String> warning=new IncompletePatientDataWarning(patient,allVitalStatistics,allTreatmentAdvices,allLabResults,allClinicVisits).value();
  List<String> patientsWithSameMobileNumber=new UniquePatientMobileNumberWarning(allPatients).findAllMobileNumbersWhichMatchTheGivenNumberCreateClinicVisit(patient.getMobilePhoneNumber(),patientDocId,patient.getClinic().getName(),PatientController.PATIENT);
  List<String> patientsClinicWithSameMobileNumber=new UniquePatientMobileNumberWarning(allPatients).findAllMobileNumbersWhichMatchTheGivenNumberCreateClinicVisit(patient.getMobilePhoneNumber(),patientDocId,patient.getClinic().getName(),PatientController.CLINIC);
  if (!CollectionUtils.isNotEmpty(patientsWithSameMobileNumber)) {
    warningMessage=new ArrayList<>();
    warningMessage.add(PatientController.WARNING_DUPLICATE_PHONE_NUMBERS);
    adviceMessage=new ArrayList<>();
    adviceMessage.add(PatientController.WARNING_DUPLICATE_PHONE_NUMBERS_SUGGESTION);
  }
  boolean checkIfBaseLineVisitHasTreatmentAdviceId=checkIfBaseLineVisitHasTreatmentAdviceId(allClinicVisits.clinicVisits(patientDocId));
  uiModel.addAttribute(""String_Node_Str"",patientsWithSameMobileNumber);
  uiModel.addAttribute(""String_Node_Str"",patientsClinicWithSameMobileNumber);
  uiModel.addAttribute(""String_Node_Str"",warningMessage);
  uiModel.addAttribute(""String_Node_Str"",adviceMessage);
  uiModel.addAttribute(""String_Node_Str"",clinicVisitUIModels);
  uiModel.addAttribute(""String_Node_Str"",new PatientViewModel(patient));
  uiModel.addAttribute(PatientController.WARNING,warning);
  uiModel.addAttribute(""String_Node_Str"",checkIfBaseLineVisitHasTreatmentAdviceId);
  if (!patient.getStatus().isActive())   return ""String_Node_Str"";
  return ""String_Node_Str"";
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String list(@RequestParam(value=""String_Node_Str"",required=true) String patientDocId,Model uiModel){
  List<String> warningMessage=null;
  List<String> adviceMessage=null;
  List<ClinicVisitUIModel> clinicVisitUIModels=allClinicVisits(patientDocId);
  Patient patient=clinicVisitUIModels.get(0).getPatient();
  List<String> warning=new IncompletePatientDataWarning(patient,allVitalStatistics,allTreatmentAdvices,allLabResults,allClinicVisits).value();
  List<String> patientsWithSameMobileNumber=new UniquePatientMobileNumberWarning(allPatients).findAllMobileNumbersWhichMatchTheGivenNumberCreateClinicVisit(patient.getMobilePhoneNumber(),patientDocId,patient.getClinic().getName(),PatientController.PATIENT);
  List<String> patientsClinicWithSameMobileNumber=new UniquePatientMobileNumberWarning(allPatients).findAllMobileNumbersWhichMatchTheGivenNumberCreateClinicVisit(patient.getMobilePhoneNumber(),patientDocId,patient.getClinic().getName(),PatientController.CLINIC);
  if (CollectionUtils.isNotEmpty(patientsWithSameMobileNumber)) {
    warningMessage=new ArrayList<>();
    warningMessage.add(PatientController.WARNING_DUPLICATE_PHONE_NUMBERS);
    adviceMessage=new ArrayList<>();
    adviceMessage.add(PatientController.WARNING_DUPLICATE_PHONE_NUMBERS_SUGGESTION);
  }
  boolean checkIfBaseLineVisitHasTreatmentAdviceId=checkIfBaseLineVisitHasTreatmentAdviceId(allClinicVisits.clinicVisits(patientDocId));
  uiModel.addAttribute(""String_Node_Str"",patientsWithSameMobileNumber);
  uiModel.addAttribute(""String_Node_Str"",patientsClinicWithSameMobileNumber);
  uiModel.addAttribute(""String_Node_Str"",warningMessage);
  uiModel.addAttribute(""String_Node_Str"",adviceMessage);
  uiModel.addAttribute(""String_Node_Str"",clinicVisitUIModels);
  uiModel.addAttribute(""String_Node_Str"",new PatientViewModel(patient));
  uiModel.addAttribute(PatientController.WARNING,warning);
  uiModel.addAttribute(""String_Node_Str"",checkIfBaseLineVisitHasTreatmentAdviceId);
  if (!patient.getStatus().isActive())   return ""String_Node_Str"";
  return ""String_Node_Str"";
}"
84748,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ModelAndView showSummary(@PathVariable(""String_Node_Str"") String id,Model uiModel,HttpServletRequest request){
  addDateTimeFormat(uiModel);
  List<String> warningMessage=null;
  List<String> adviceMessage=null;
  Patient patient=allPatients.findByIdAndClinicId(id,loggedInClinic(request));
  if (patient == null)   return new ModelAndView(""String_Node_Str"",""String_Node_Str"",null);
  TreatmentAdvice earliestTreatmentAdvice=allTreatmentAdvices.earliestTreatmentAdvice(id);
  TreatmentAdvice currentTreatmentAdvice=allTreatmentAdvices.currentTreatmentAdvice(id);
  Regimen currentRegimen=patientService.currentRegimen(patient);
  List<PatientEventLog> patientStatusChangeHistory=patientService.getStatusHistory(patient.getId());
  ClinicVisits clinicVisits=allClinicVisits.clinicVisits(patient.getId());
  Double runningAdherencePercentage=getRunningAdherencePercentage(patient);
  List<String> warning=new IncompletePatientDataWarning(patient,allVitalStatistics,allTreatmentAdvices,allLabResults,allClinicVisits).value();
  List<String> patientsWithSameMobileNumber=new UniquePatientMobileNumberWarning(allPatients).findAllMobileNumbersWhichMatchTheGivenNumber(patient.getMobilePhoneNumber(),patient.getPatientId(),patient.getClinic().getName(),PATIENT);
  List<String> patientsClinicWithSameMobileNumber=new UniquePatientMobileNumberWarning(allPatients).findAllMobileNumbersWhichMatchTheGivenNumber(patient.getMobilePhoneNumber(),patient.getPatientId(),patient.getClinic().getName(),CLINIC);
  if (!CollectionUtils.isNotEmpty(patientsWithSameMobileNumber)) {
    warningMessage=new ArrayList<>();
    warningMessage.add(PatientController.WARNING_DUPLICATE_PHONE_NUMBERS);
    adviceMessage=new ArrayList<>();
    adviceMessage.add(PatientController.WARNING_DUPLICATE_PHONE_NUMBERS_SUGGESTION);
  }
  uiModel.addAttribute(""String_Node_Str"",patientsWithSameMobileNumber);
  uiModel.addAttribute(""String_Node_Str"",patientsClinicWithSameMobileNumber);
  uiModel.addAttribute(""String_Node_Str"",warningMessage);
  uiModel.addAttribute(""String_Node_Str"",adviceMessage);
  PatientSummary patientSummary=new PatientSummary(new PatientViewModel(patient),earliestTreatmentAdvice,currentTreatmentAdvice,currentRegimen,clinicVisits,patientStatusChangeHistory,runningAdherencePercentage,warning);
  return new ModelAndView(SUMMARY_VIEW,""String_Node_Str"",patientSummary);
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ModelAndView showSummary(@PathVariable(""String_Node_Str"") String id,Model uiModel,HttpServletRequest request){
  addDateTimeFormat(uiModel);
  List<String> warningMessage=null;
  List<String> adviceMessage=null;
  Patient patient=allPatients.findByIdAndClinicId(id,loggedInClinic(request));
  if (patient == null)   return new ModelAndView(""String_Node_Str"",""String_Node_Str"",null);
  TreatmentAdvice earliestTreatmentAdvice=allTreatmentAdvices.earliestTreatmentAdvice(id);
  TreatmentAdvice currentTreatmentAdvice=allTreatmentAdvices.currentTreatmentAdvice(id);
  Regimen currentRegimen=patientService.currentRegimen(patient);
  List<PatientEventLog> patientStatusChangeHistory=patientService.getStatusHistory(patient.getId());
  ClinicVisits clinicVisits=allClinicVisits.clinicVisits(patient.getId());
  Double runningAdherencePercentage=getRunningAdherencePercentage(patient);
  List<String> warning=new IncompletePatientDataWarning(patient,allVitalStatistics,allTreatmentAdvices,allLabResults,allClinicVisits).value();
  List<String> patientsWithSameMobileNumber=new UniquePatientMobileNumberWarning(allPatients).findAllMobileNumbersWhichMatchTheGivenNumber(patient.getMobilePhoneNumber(),patient.getPatientId(),patient.getClinic().getName(),PATIENT);
  List<String> patientsClinicWithSameMobileNumber=new UniquePatientMobileNumberWarning(allPatients).findAllMobileNumbersWhichMatchTheGivenNumber(patient.getMobilePhoneNumber(),patient.getPatientId(),patient.getClinic().getName(),CLINIC);
  if (CollectionUtils.isNotEmpty(patientsWithSameMobileNumber)) {
    warningMessage=new ArrayList<>();
    warningMessage.add(PatientController.WARNING_DUPLICATE_PHONE_NUMBERS);
    adviceMessage=new ArrayList<>();
    adviceMessage.add(PatientController.WARNING_DUPLICATE_PHONE_NUMBERS_SUGGESTION);
  }
  uiModel.addAttribute(""String_Node_Str"",patientsWithSameMobileNumber);
  uiModel.addAttribute(""String_Node_Str"",patientsClinicWithSameMobileNumber);
  uiModel.addAttribute(""String_Node_Str"",warningMessage);
  uiModel.addAttribute(""String_Node_Str"",adviceMessage);
  PatientSummary patientSummary=new PatientSummary(new PatientViewModel(patient),earliestTreatmentAdvice,currentTreatmentAdvice,currentRegimen,clinicVisits,patientStatusChangeHistory,runningAdherencePercentage,warning);
  return new ModelAndView(SUMMARY_VIEW,""String_Node_Str"",patientSummary);
}"
84749,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String downloadWeeklyPillReminderReport(@RequestParam(""String_Node_Str"") String clinicId,@RequestParam(""String_Node_Str"") String patientId,@RequestParam(""String_Node_Str"") @DateTimeFormat(style=""String_Node_Str"",pattern=TAMAConstants.DATE_FORMAT) LocalDate startDate,@RequestParam(""String_Node_Str"") @DateTimeFormat(style=""String_Node_Str"",pattern=TAMAConstants.DATE_FORMAT) LocalDate endDate,Model uiModel){
  DateFilter filter=new DateFilter().setDates(startDate,endDate);
  endDate.plusDays(1);
  if (filter.isMoreThanOneYear()) {
    return error(uiModel,""String_Node_Str"");
  }
 else {
    return format(""String_Node_Str"",clinicId,patientId,filter.startDate.toString(""String_Node_Str""),filter.getEndDate().toString(""String_Node_Str""));
  }
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String downloadWeeklyPillReminderReport(@RequestParam(""String_Node_Str"") String clinicId,@RequestParam(""String_Node_Str"") String patientId,@RequestParam(""String_Node_Str"") @DateTimeFormat(style=""String_Node_Str"",pattern=TAMAConstants.DATE_FORMAT) LocalDate startDate,@RequestParam(""String_Node_Str"") @DateTimeFormat(style=""String_Node_Str"",pattern=TAMAConstants.DATE_FORMAT) LocalDate endDate,Model uiModel){
  DateFilter filter=new DateFilter().setDates(startDate,endDate);
  if (filter.isMoreThanOneYear()) {
    return error(uiModel,""String_Node_Str"");
  }
 else {
    return format(""String_Node_Str"",clinicId,patientId,filter.startDate.toString(""String_Node_Str""),filter.getEndDate().plusDays(1).toString(""String_Node_Str""));
  }
}"
84750,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String downloadWeeklyPillReminderReport(@RequestParam(""String_Node_Str"") String clinicId,@RequestParam(""String_Node_Str"") String patientId,@RequestParam(""String_Node_Str"") @DateTimeFormat(style=""String_Node_Str"",pattern=TAMAConstants.DATE_FORMAT) LocalDate startDate,@RequestParam(""String_Node_Str"") @DateTimeFormat(style=""String_Node_Str"",pattern=TAMAConstants.DATE_FORMAT) LocalDate endDate,Model uiModel){
  DateFilter filter=new DateFilter().setDates(startDate,endDate);
  if (filter.isMoreThanOneYear()) {
    return error(uiModel,""String_Node_Str"");
  }
 else {
    return format(""String_Node_Str"",clinicId,patientId,filter.startDate.toString(""String_Node_Str""),filter.getEndDate().toString(""String_Node_Str""));
  }
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String downloadWeeklyPillReminderReport(@RequestParam(""String_Node_Str"") String clinicId,@RequestParam(""String_Node_Str"") String patientId,@RequestParam(""String_Node_Str"") @DateTimeFormat(style=""String_Node_Str"",pattern=TAMAConstants.DATE_FORMAT) LocalDate startDate,@RequestParam(""String_Node_Str"") @DateTimeFormat(style=""String_Node_Str"",pattern=TAMAConstants.DATE_FORMAT) LocalDate endDate,Model uiModel){
  DateFilter filter=new DateFilter().setDates(startDate,endDate);
  endDate.plusDays(1);
  if (filter.isMoreThanOneYear()) {
    return error(uiModel,""String_Node_Str"");
  }
 else {
    return format(""String_Node_Str"",clinicId,patientId,filter.startDate.toString(""String_Node_Str""),filter.getEndDate().toString(""String_Node_Str""));
  }
}"
84751,"public void create(Patient patient,String clinicId,String userName){
  populateDefaultMedicaHistory(patient);
  allPatients.addToClinic(patient,clinicId,userName);
  outboxRegistry.getOutbox().enroll(patient);
  allPatientEventLogs.addAll(new ChangedPatientPreferenceContext(null,patient).getEventLogs(),userName);
  patientReportingService.save(requestMapper.map(patient),medicalHistoryRequestMapper.map(patient));
}","public void create(Patient patient,String clinicId,String userName){
  NonHIVMedicalHistory nonHivMedicalHistory=patient.getMedicalHistory().getNonHivMedicalHistory();
  List<SystemCategory> existingSystemCategories=nonHivMedicalHistory.getSystemCategories();
  List<SystemCategory> populatedSystemCategories=getSystemCategories(SystemCategoryDefinition.all(),existingSystemCategories);
  nonHivMedicalHistory.setSystemCategories(populatedSystemCategories);
  try {
    allPatients.addToClinic(patient,clinicId,userName);
  }
 catch (  Exception ex) {
    nonHivMedicalHistory.setSystemCategories(existingSystemCategories);
    throw ex;
  }
  outboxRegistry.getOutbox().enroll(patient);
  allPatientEventLogs.addAll(new ChangedPatientPreferenceContext(null,patient).getEventLogs(),userName);
  patientReportingService.save(requestMapper.map(patient),medicalHistoryRequestMapper.map(patient));
}"
84752,"@RequestMapping(value=""String_Node_Str"",params=""String_Node_Str"",method=RequestMethod.GET) public String updateForm(@PathVariable(""String_Node_Str"") String id,Model uiModel,HttpServletRequest request){
  Patient patient=allPatients.findByIdAndClinicId(id,loggedInClinic(request));
  if (patient == null)   return ""String_Node_Str"";
  List<SystemCategory> allSystemCategories=SystemCategoryDefinition.all();
  List<SystemCategory> patientSystemCategories=patient.getMedicalHistory().getNonHivMedicalHistory().getSystemCategories();
  List<SystemCategory> systemCategories=getSystemCategories(allSystemCategories,patientSystemCategories);
  patient.getMedicalHistory().getNonHivMedicalHistory().setSystemCategories(systemCategories);
  initUIModel(uiModel,patient);
  uiModel.addAttribute(""String_Node_Str"",systemCategories);
  uiModel.addAttribute(""String_Node_Str"",patient.canTransitionToWeekly(minNumberOfDaysOnDailyBeforeTransitioningToWeekly));
  return UPDATE_VIEW;
}","@RequestMapping(value=""String_Node_Str"",params=""String_Node_Str"",method=RequestMethod.GET) public String updateForm(@PathVariable(""String_Node_Str"") String id,Model uiModel,HttpServletRequest request){
  Patient patient=allPatients.findByIdAndClinicId(id,loggedInClinic(request));
  if (patient == null)   return ""String_Node_Str"";
  List<SystemCategory> patientSystemCategories=patient.getMedicalHistory().getNonHivMedicalHistory().getSystemCategories();
  initUIModel(uiModel,patient);
  uiModel.addAttribute(""String_Node_Str"",patientSystemCategories);
  uiModel.addAttribute(""String_Node_Str"",patient.canTransitionToWeekly(minNumberOfDaysOnDailyBeforeTransitioningToWeekly));
  return UPDATE_VIEW;
}"
84753,"public HSSFWorkbook buildReport(LocalDate startDate,LocalDate endDate,boolean isAnalystReport){
  ReportBuilder callLogReportBuilder;
  if (!isAnalystReport) {
    callLogReportBuilder=new AnalystCallLogReportBuilder(allCallLogs,allPatients,allIVRLanguages,startDate,endDate);
  }
 else {
    callLogReportBuilder=new AnalystCallLogReportBuilder(allCallLogs,allPatients,allIVRLanguages,startDate,endDate);
  }
  return createExcelReport(callLogReportBuilder);
}","public HSSFWorkbook buildReport(LocalDate startDate,LocalDate endDate,boolean isAnalystReport){
  ReportBuilder callLogReportBuilder;
  if (!isAnalystReport) {
    callLogReportBuilder=new CallLogReportBuilder(allCallLogs,allPatients,allIVRLanguages,startDate,endDate);
  }
 else {
    callLogReportBuilder=new AnalystCallLogReportBuilder(allCallLogs,allPatients,allIVRLanguages,startDate,endDate);
  }
  return createExcelReport(callLogReportBuilder);
}"
84754,"public String getCompletionStatus(){
  if (getStatus().equals(Status.Active))   if (CollectionUtils.isEmpty(warnings))   return ""String_Node_Str"";
 else   return ""String_Node_Str"";
  return StringUtils.EMPTY;
}","public String getCompletionStatus(){
  return getStatus().equals(Status.Active) && !CollectionUtils.isEmpty(warnings) ? ""String_Node_Str"" : null;
}"
84755,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public String saveAndActivate(@Valid Patient patient,Model uiModel,HttpServletRequest request){
  patientService.create(patient,loggedInClinic(request),loggedInUserId(request));
  activatePatient(patient.getId(),REDIRECT_TO_SHOW_VIEW + encodeUrlPathSegment(patient.getId(),request),request);
  Patient savedPatient=allPatients.findByPatientIdAndClinicId(patient.getPatientId(),loggedInClinic(request));
  List<String> warning=new IncompletePatientDataWarning(savedPatient,null,null,null,null).value();
  uiModel.addAttribute(""String_Node_Str"",warning);
  uiModel.addAttribute(EXPRESS_REGISTRATION,""String_Node_Str"");
  initUIModel(uiModel,savedPatient);
  return EXPRESS_SHOW_VIEW;
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public String saveAndActivate(@Valid Patient patient,BindingResult bindingResult,Model uiModel,HttpServletRequest request){
  if (bindingResult.hasErrors()) {
    initUIModel(uiModel,patient);
    return CREATE_VIEW;
  }
  try {
    patientService.create(patient,loggedInClinic(request),loggedInUserId(request));
    activatePatient(patient.getId(),REDIRECT_TO_SHOW_VIEW + encodeUrlPathSegment(patient.getId(),request),request);
    Patient savedPatient=allPatients.findByPatientIdAndClinicId(patient.getPatientId(),loggedInClinic(request));
    List<String> warning=new IncompletePatientDataWarning(savedPatient,null,null,null,null).value();
    uiModel.addAttribute(""String_Node_Str"",warning);
    uiModel.addAttribute(EXPRESS_REGISTRATION,""String_Node_Str"");
    initUIModel(uiModel,savedPatient);
  }
 catch (  RuntimeException e) {
    decorateViewWithUniqueConstraintError(patient,bindingResult,uiModel,e);
    return CREATE_VIEW;
  }
  return EXPRESS_SHOW_VIEW;
}"
84756,"public String getSymptomReported(){
  return this.alert.getDescription();
}","public String getSymptomReported(){
  return isSymptomReportingAlert() ? getDescription() : StringUtils.EMPTY;
}"
84757,"public DateTime getVisitDate(){
  return visit.getVisitDate();
}","public DateTime getVisitDate(){
  return setTimeZone(visit.getVisitDate());
}"
84758,"@Override protected List<Object> getRowData(Object object){
  ClinicVisitSummary summary=(ClinicVisitSummary)object;
  List<Object> row=new ArrayList<Object>();
  row.add(summary.getPatientReport().getPatientId());
  row.add(summary.getPatientReport().getClinicName());
  row.add(DateUtils.formatDate(summary.getVisitDate().toDate(),""String_Node_Str""));
  row.add(summary.getRegimen().getDisplayName());
  row.add(summary.getDrugCompositonGroupName());
  populateDosage(row,summary.getDrugDosageOne());
  populateDosage(row,summary.getDrugDosageTwo());
  populateLabResults(row,summary.getLabResults());
  populateVitalStatistics(row,summary.getVitalStatistics());
  row.add(summary.getReportedOpportunisticInfections());
  return row;
}","@Override protected List<Object> getRowData(Object object){
  ClinicVisitSummary summary=(ClinicVisitSummary)object;
  List<Object> row=new ArrayList<Object>();
  row.add(summary.getPatientReport().getPatientId());
  row.add(summary.getPatientReport().getClinicName());
  row.add(format(summary.getVisitDate().toDate(),""String_Node_Str""));
  row.add(summary.getRegimen().getDisplayName());
  row.add(summary.getDrugCompositonGroupName());
  populateDosage(row,summary.getDrugDosageOne());
  populateDosage(row,summary.getDrugDosageTwo());
  populateLabResults(row,summary.getLabResults());
  populateVitalStatistics(row,summary.getVitalStatistics());
  row.add(summary.getReportedOpportunisticInfections());
  return row;
}"
84759,"private void populateDosage(List<Object> row,DrugDosageContract dosage){
  String drugName=StringUtils.EMPTY;
  String dosageTypeId=StringUtils.EMPTY;
  String morningTime=StringUtils.EMPTY;
  String eveningTime=StringUtils.EMPTY;
  Integer offsetDays=null;
  String startDate=null;
  String advice=StringUtils.EMPTY;
  String mealAdviceId=StringUtils.EMPTY;
  if (dosage != null) {
    drugName=dosage.getDrugName();
    dosageTypeId=dosage.getDosageType();
    morningTime=dosage.getMorningTime();
    eveningTime=dosage.getEveningTime();
    offsetDays=dosage.getOffsetDays();
    startDate=DateUtils.formatDate(dosage.getStartDate(),""String_Node_Str"");
    advice=dosage.getAdvice();
    mealAdviceId=dosage.getMealAdvice();
  }
  row.add(drugName);
  row.add(dosageTypeId);
  row.add(morningTime);
  row.add(eveningTime);
  row.add(offsetDays);
  row.add(startDate);
  row.add(advice);
  row.add(mealAdviceId);
}","private void populateDosage(List<Object> row,DrugDosageContract dosage){
  String drugName=StringUtils.EMPTY;
  String dosageTypeId=StringUtils.EMPTY;
  String morningTime=StringUtils.EMPTY;
  String eveningTime=StringUtils.EMPTY;
  Integer offsetDays=null;
  String startDate=null;
  String advice=StringUtils.EMPTY;
  String mealAdviceId=StringUtils.EMPTY;
  if (dosage != null) {
    drugName=dosage.getDrugName();
    dosageTypeId=dosage.getDosageType();
    morningTime=dosage.getMorningTime();
    eveningTime=dosage.getEveningTime();
    offsetDays=dosage.getOffsetDays();
    startDate=format(dosage.getStartDate(),""String_Node_Str"");
    advice=dosage.getAdvice();
    mealAdviceId=dosage.getMealAdvice();
  }
  row.add(drugName);
  row.add(dosageTypeId);
  row.add(morningTime);
  row.add(eveningTime);
  row.add(offsetDays);
  row.add(startDate);
  row.add(advice);
  row.add(mealAdviceId);
}"
84760,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String downloadSMSReport(DateFilter filter,@RequestParam(""String_Node_Str"") String clinicName,@RequestParam(""String_Node_Str"") String externalId,@RequestParam(""String_Node_Str"") String type,Model model){
  if (filter.isMoreThanOneYear()) {
    return error(model,""String_Node_Str"");
  }
 else {
    return format(""String_Node_Str"",clinicName,externalId,filter.getStartDate().toString(""String_Node_Str""),filter.getEndDate().toString(""String_Node_Str""),type);
  }
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String downloadSMSReport(DateFilter filter,@RequestParam(""String_Node_Str"") String clinicName,@RequestParam(""String_Node_Str"") String externalId,@RequestParam(""String_Node_Str"") String type,Model model){
  if (filter.isMoreThanOneYear()) {
    return error(model,type + ""String_Node_Str"");
  }
 else {
    return format(""String_Node_Str"",clinicName,externalId,filter.getStartDate().toString(""String_Node_Str""),filter.getEndDate().toString(""String_Node_Str""),type);
  }
}"
84761,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) @ResponseBody public String list(@RequestParam(""String_Node_Str"") String patientDocId,@RequestParam(""String_Node_Str"") Integer rangeInMonths) throws JSONException {
  LocalDate today=DateUtil.today().plusDays(1);
  LocalDate from=today.minusMonths(rangeInMonths);
  List<SymptomReport> symptomReports=allSymptomReports.getSymptomReports(patientDocId,from,today);
  JSONArray events=new JSONArray();
  Map<String,DateTime> lastReportedAtMap=new HashMap<String,DateTime>();
  TrackNumberGenerator trackNumberGenerator=new TrackNumberGenerator();
  for (int i=symptomReports.size() - 1; i >= 0; i--) {
    SymptomReport report=symptomReports.get(i);
    for (    String symptomId : report.getSymptomIds()) {
      JSONObject event=new JSONObject();
      event.put(""String_Node_Str"",String.format(""String_Node_Str"",report.getReportedAt()));
      if (lastReportedAtMap.get(symptomId) == null || report.getReportedAt().isBefore(lastReportedAtMap.get(symptomId).minusDays(7)))       event.put(""String_Node_Str"",symptomReportingProperties.symptomLabel(symptomId));
      event.put(""String_Node_Str"",false);
      event.put(""String_Node_Str"",trackNumberGenerator.trackNumberFor(symptomId));
      event.put(""String_Node_Str"",symptomReportingProperties.symptomDescription(symptomId));
      events.put(event);
      lastReportedAtMap.put(symptomId,report.getReportedAt());
    }
  }
  JSONObject result=new JSONObject();
  result.put(""String_Node_Str"",events);
  result.put(""String_Node_Str"",""String_Node_Str"");
  return result.toString();
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) @ResponseBody public String list(@RequestParam(""String_Node_Str"") String patientDocId,@RequestParam(""String_Node_Str"") Integer rangeInMonths) throws JSONException {
  LocalDate today=DateUtil.today().plusDays(1);
  LocalDate from=today.minusMonths(rangeInMonths);
  List<SymptomReport> symptomReports=allSymptomReports.getSymptomReports(patientDocId,from,today);
  JSONArray events=new JSONArray();
  Map<String,DateTime> lastReportedAtMap=new HashMap<String,DateTime>();
  TrackNumberGenerator trackNumberGenerator=new TrackNumberGenerator();
  for (int i=symptomReports.size() - 1; i >= 0; i--) {
    SymptomReport report=symptomReports.get(i);
    for (    String symptomId : report.getSymptomIds()) {
      JSONObject event=new JSONObject();
      event.put(""String_Node_Str"",String.format(""String_Node_Str"",report.getReportedAt().toLocalDateTime()));
      if (lastReportedAtMap.get(symptomId) == null || report.getReportedAt().isBefore(lastReportedAtMap.get(symptomId).minusDays(7)))       event.put(""String_Node_Str"",symptomReportingProperties.symptomLabel(symptomId));
      event.put(""String_Node_Str"",false);
      event.put(""String_Node_Str"",trackNumberGenerator.trackNumberFor(symptomId));
      event.put(""String_Node_Str"",symptomReportingProperties.symptomDescription(symptomId));
      events.put(event);
      lastReportedAtMap.put(symptomId,report.getReportedAt());
    }
  }
  JSONObject result=new JSONObject();
  result.put(""String_Node_Str"",events);
  result.put(""String_Node_Str"",""String_Node_Str"");
  return result.toString();
}"
84762,"private List<String> timeSlots(DateTime startDate,DateTime endDate){
  final List<String> allTimeSlots=new ArrayList<String>();
  while (startDate.isBefore(endDate)) {
    LocalTime slotStartTime=startDate.toLocalTime();
    LocalTime slotEndTime=startDate.toLocalTime().plusMinutes(slot_duration_in_mins).minusMinutes(1);
    int allottedCount=allCallTimeSlots.countOfPatientsAllottedForSlot(slotStartTime,slotEndTime);
    if (allottedCount < max_patients_per_slot) {
      allTimeSlots.add(slotStartTime.toString(""String_Node_Str""));
    }
    startDate=startDate.plusMinutes(slot_duration_in_mins);
  }
  return allTimeSlots;
}","private List<String> timeSlots(DateTime startDate,DateTime endDate){
  final AllottedSlots allottedSlots=allCallTimeSlots.getAllottedSlots();
  final List<String> allTimeSlots=new ArrayList<String>();
  while (startDate.isBefore(endDate)) {
    LocalTime slotStartTime=startDate.toLocalTime();
    LocalTime slotEndTime=startDate.toLocalTime().plusMinutes(slot_duration_in_mins).minusMinutes(1);
    int allottedCount=allottedSlots.numberOfPatientsAllottedPerSlot(slotStartTime,slotEndTime);
    if (allottedCount < max_patients_per_slot) {
      allTimeSlots.add(slotStartTime.toString(""String_Node_Str""));
    }
    startDate=startDate.plusMinutes(slot_duration_in_mins);
  }
  return allTimeSlots;
}"
84763,"@Test public void shouldGetAllEveningTimeSlots(){
  when(allCallTimeSlots.countOfPatientsAllottedForSlot(Matchers.<LocalTime>any(),Matchers.<LocalTime>any())).thenReturn(2);
  final List<String> eveningTimeSlots=callTimeSlotService.availableEveningSlots();
  assertEquals(48,eveningTimeSlots.size());
}","@Test public void shouldGetAllEveningTimeSlots(){
  when(allCallTimeSlots.getAllottedSlots()).thenReturn(new AllottedSlots());
  final List<String> eveningTimeSlots=callTimeSlotService.availableEveningSlots();
  assertEquals(48,eveningTimeSlots.size());
}"
84764,"@Test public void shouldGetAllAvailableEveningTimeSlots(){
  when(allCallTimeSlots.countOfPatientsAllottedForSlot(Matchers.<LocalTime>any(),Matchers.<LocalTime>any())).thenReturn(2,10,10,10,10,2,10,10,2,10);
  final List<String> timeSlots=callTimeSlotService.availableEveningSlots();
  assertEquals(3,timeSlots.size());
  assertEquals(""String_Node_Str"",timeSlots.get(0));
  assertEquals(""String_Node_Str"",timeSlots.get(1));
  assertEquals(""String_Node_Str"",timeSlots.get(2));
}","@Test public void shouldGetAllAvailableEveningTimeSlots(){
  AllottedSlot fullNoonSlot=new AllottedSlot(DateUtil.now().withTime(12,0,0,0),10);
  AllottedSlot almostFull1230PMSlot=new AllottedSlot(DateUtil.now().withTime(12,30,0,0),9);
  AllottedSlot full1245PMSlot=new AllottedSlot(DateUtil.now().withTime(12,45,0,0),10);
  AllottedSlots allottedSlots=new AllottedSlots(Arrays.asList(fullNoonSlot,almostFull1230PMSlot,full1245PMSlot));
  when(allCallTimeSlots.getAllottedSlots()).thenReturn(allottedSlots);
  final List<String> timeSlots=callTimeSlotService.availableEveningSlots();
  assertEquals(46,timeSlots.size());
  assertEquals(""String_Node_Str"",timeSlots.get(0));
  assertEquals(""String_Node_Str"",timeSlots.get(1));
  assertEquals(""String_Node_Str"",timeSlots.get(2));
  assertEquals(""String_Node_Str"",timeSlots.get(3));
}"
84765,"@Test public void shouldGetAllMorningTimeSlots(){
  when(allCallTimeSlots.countOfPatientsAllottedForSlot(Matchers.<LocalTime>any(),Matchers.<LocalTime>any())).thenReturn(2);
  final List<String> morningTimeSlots=callTimeSlotService.availableMorningSlots();
  assertEquals(48,morningTimeSlots.size());
}","@Test public void shouldGetAllMorningTimeSlots(){
  when(allCallTimeSlots.getAllottedSlots()).thenReturn(new AllottedSlots());
  final List<String> morningTimeSlots=callTimeSlotService.availableMorningSlots();
  assertEquals(48,morningTimeSlots.size());
}"
84766,"@Test public void shouldGetAllAvailableMorningTimeSlots(){
  when(allCallTimeSlots.countOfPatientsAllottedForSlot(Matchers.<LocalTime>any(),Matchers.<LocalTime>any())).thenReturn(2,10,10,10,10,2,10,10,2,10);
  final List<String> timeSlots=callTimeSlotService.availableMorningSlots();
  assertEquals(3,timeSlots.size());
  assertEquals(""String_Node_Str"",timeSlots.get(0));
  assertEquals(""String_Node_Str"",timeSlots.get(1));
  assertEquals(""String_Node_Str"",timeSlots.get(2));
}","@Test public void shouldGetAllAvailableMorningTimeSlots(){
  AllottedSlot fullMidnightSlot=new AllottedSlot(DateUtil.now().withTime(0,0,0,0),10);
  AllottedSlot full1AMSlot=new AllottedSlot(DateUtil.now().withTime(1,0,0,0),10);
  AllottedSlots allottedSlots=new AllottedSlots(Arrays.asList(fullMidnightSlot,full1AMSlot));
  when(allCallTimeSlots.getAllottedSlots()).thenReturn(allottedSlots);
  final List<String> timeSlots=callTimeSlotService.availableMorningSlots();
  assertEquals(46,timeSlots.size());
  assertEquals(""String_Node_Str"",timeSlots.get(0));
  assertEquals(""String_Node_Str"",timeSlots.get(1));
  assertEquals(""String_Node_Str"",timeSlots.get(2));
  assertEquals(""String_Node_Str"",timeSlots.get(3));
}"
84767,"private LocalDate computeFirstWeekStartDate(DateTime fromDate){
  LocalDate startDateForFirstWeek=fourDayRecallDateService.treatmentWeekStartDate(fromDate.toLocalDate(),patient,treatmentAdvice);
  DateTime recallDateTimeForFirstWeek=fourDayRecallDateService.nextRecallOn(startDateForFirstWeek,patient);
  LocalDate nextWeekStartDate=null;
  if (DateUtil.isOnOrBefore(DateUtil.newDate(treatmentAdvice.getStartDate()),startDateForFirstWeek) && !recallDateTimeForFirstWeek.plusDays(daysToRetry).isBefore(fromDate) && !recallDateTimeForFirstWeek.isAfter(toDate)) {
    nextWeekStartDate=startDateForFirstWeek;
  }
  if (recallDateTimeForFirstWeek.plusDays(daysToRetry).isBefore(fromDate) && startDateForFirstWeek.plusWeeks(1).isBefore(toDate.toLocalDate())) {
    nextWeekStartDate=computeNextWeekStartDate(startDateForFirstWeek);
  }
  return nextWeekStartDate;
}","private LocalDate computeFirstWeekStartDate(DateTime fromDate){
  LocalDate startDateForFirstWeek=fourDayRecallDateService.treatmentWeekStartDate(fromDate.toLocalDate(),patient,treatmentAdvice);
  DateTime recallDateTimeForFirstWeek=fourDayRecallDateService.nextRecallOn(startDateForFirstWeek,patient);
  LocalDate nextWeekStartDate=null;
  if (DateUtil.isOnOrBefore(DateUtil.newDateTime(treatmentAdvice.getStartDate()),DateUtil.newDateTime(startDateForFirstWeek)) && !recallDateTimeForFirstWeek.plusDays(daysToRetry).isBefore(fromDate) && !recallDateTimeForFirstWeek.isAfter(toDate)) {
    nextWeekStartDate=startDateForFirstWeek;
  }
  if (recallDateTimeForFirstWeek.plusDays(daysToRetry).isBefore(fromDate) && startDateForFirstWeek.plusWeeks(1).isBefore(toDate.toLocalDate())) {
    nextWeekStartDate=computeNextWeekStartDate(startDateForFirstWeek);
  }
  return nextWeekStartDate;
}"
84768,"public void createCallLogs(MyWebClient webClient,TAMADateTimeService tamaDateTimeService,DateTime startDate,int numberOfDays){
  List<Patient> patients=allPatients.getAll();
  for (int dayNumber=1; dayNumber <= numberOfDays; dayNumber++) {
    for (    Patient patient : patients) {
      patientConfirmsDoseAsTaken(webClient,patient);
    }
    DateTime today=startDate.plusDays(1);
    tamaDateTimeService.adjustDateTime(today);
  }
}","public void createCallLogs(MyWebClient webClient,TAMADateTimeService tamaDateTimeService,DateTime startDate,int numberOfDays){
  List<Patient> patients=allPatients.getAll();
  for (int dayNumber=1; dayNumber <= numberOfDays; dayNumber++) {
    for (    Patient patient : patients) {
      patientConfirmsDoseAsTaken(webClient,patient);
    }
    startDate=startDate.plusDays(1);
    tamaDateTimeService.adjustDateTime(startDate);
  }
}"
84769,"private Patient createActivePatient(MedicalHistory medicalHistory,Clinic clinic){
  Gender gender=allGenders.getAll().get(0);
  Patient patient=PatientBuilder.startRecording().withDefaults().withMedicalHistory(medicalHistory).withGender(gender).withIVRLanguage(allIVRLanguages.getAll().get(0)).build();
  patientController.create(patient,bindingResult,uiModel,request);
  patientController.activate(patient.getId(),uiModel,request);
  return patient;
}","private Patient createActivePatient(MedicalHistory medicalHistory,LocalDate today){
  Gender gender=allGenders.getAll().get(0);
  Patient patient=PatientBuilder.startRecording().withDefaults().withMedicalHistory(medicalHistory).withGender(gender).withIVRLanguage(allIVRLanguages.getAll().get(0)).withRegistrationDate(today).build();
  patientController.create(patient,bindingResult,uiModel,request);
  patientController.activate(patient.getId(),uiModel,request);
  return patient;
}"
84770,"public void createPatients(LocalDate today,int numberOfPatients){
  List<Clinic> clinics=allClinics.getAll();
  assertTrue(""String_Node_Str"",clinics.size() > 0);
  LocalTime doseTime=new LocalTime(10,0);
  MedicalHistory medicalHistory=MedicalHistoryBuilder.startRecording().withDefaults().build();
  for (int patientsCreated=0; patientsCreated < numberOfPatients; patientsCreated++) {
    DateTime timeOfRegistration=DateUtil.newDateTime(today,10,0,0);
    doseTime=getFreeSlotTime(doseTime,patientsCreated);
    Clinic clinic=clinics.get(patientsCreated % clinics.size());
    login(clinic);
    Patient patient=createActivePatient(medicalHistory,clinic);
    recordFirstClinicVisit(patient,today,doseTime,timeOfRegistration);
    log.info(""String_Node_Str"" + patient.getPatientId() + ""String_Node_Str""+ clinic.getName()+ ""String_Node_Str""+ doseTime);
  }
}","public void createPatients(LocalDate today,int numberOfPatients){
  List<Clinic> clinics=allClinics.getAll();
  assertTrue(""String_Node_Str"",clinics.size() > 0);
  LocalTime doseTime=new LocalTime(10,0);
  MedicalHistory medicalHistory=MedicalHistoryBuilder.startRecording().withDefaults().build();
  for (int patientsCreated=0; patientsCreated < numberOfPatients; patientsCreated++) {
    DateTime timeOfRegistration=DateUtil.newDateTime(today,10,0,0);
    doseTime=getFreeSlotTime(doseTime,patientsCreated);
    Clinic clinic=clinics.get(patientsCreated % clinics.size());
    login(clinic);
    Patient patient=createActivePatient(medicalHistory,today);
    recordFirstClinicVisit(patient,today,doseTime,timeOfRegistration);
    log.info(""String_Node_Str"" + patient.getPatientId() + ""String_Node_Str""+ clinic.getName()+ ""String_Node_Str""+ doseTime);
  }
}"
84771,"private String redirectToCreateFormUrl(String clinicVisitId,String patientId,HttpServletRequest httpServletRequest){
  String queryParameters=""String_Node_Str"" + patientId + ""String_Node_Str""+ clinicVisitId;
  return ""String_Node_Str"" + encodeUrlPathSegment(queryParameters,httpServletRequest);
}","public static String redirectToCreateFormUrl(String clinicVisitId,String patientId){
  String queryParameters=""String_Node_Str"" + patientId + ""String_Node_Str""+ clinicVisitId;
  return ""String_Node_Str"" + queryParameters;
}"
84772,"@RequestMapping(params=""String_Node_Str"",method=RequestMethod.GET) public String createForm(@RequestParam(value=""String_Node_Str"",required=true) String patientDocId,@RequestParam(value=""String_Node_Str"",required=true) String clinicVisitId,Model uiModel,HttpServletRequest httpServletRequest){
  ClinicVisit clinicVisit=allClinicVisits.get(patientDocId,clinicVisitId);
  final String treatmentAdviceId=clinicVisit.getTreatmentAdviceId();
  TreatmentAdvice adviceForPatient=null;
  if (treatmentAdviceId != null)   adviceForPatient=allTreatmentAdvices.get(treatmentAdviceId);
  if (adviceForPatient == null)   adviceForPatient=allTreatmentAdvices.currentTreatmentAdvice(patientDocId);
  if (adviceForPatient != null) {
    treatmentAdviceController.show(adviceForPatient.getId(),uiModel);
    final boolean wasVisitDetailsEdited=(clinicVisit.getTreatmentAdviceId() != null || !clinicVisit.getLabResultIds().isEmpty() || clinicVisit.getVitalStatisticsId() != null || clinicVisit.getReportedOpportunisticInfectionsId() != null);
    if (wasVisitDetailsEdited)     return redirectToShowClinicVisitUrl(clinicVisitId,patientDocId,httpServletRequest);
  }
 else {
    treatmentAdviceController.createForm(patientDocId,uiModel);
  }
  uiModel.addAttribute(""String_Node_Str"",patientDocId);
  uiModel.addAttribute(""String_Node_Str"",new ClinicVisitUIModel(clinicVisit));
  labResultsController.createForm(patientDocId,uiModel);
  vitalStatisticsController.createForm(patientDocId,uiModel);
  opportunisticInfectionsController.createForm(clinicVisit,uiModel);
  return ""String_Node_Str"";
}","@RequestMapping(params=""String_Node_Str"",method=RequestMethod.GET) public String createForm(@RequestParam(value=""String_Node_Str"",required=true) String patientDocId,@RequestParam(value=""String_Node_Str"",required=true) String clinicVisitId,Model uiModel,HttpServletRequest httpServletRequest){
  ClinicVisit clinicVisit=allClinicVisits.get(patientDocId,clinicVisitId);
  final String treatmentAdviceId=clinicVisit.getTreatmentAdviceId();
  TreatmentAdvice adviceForPatient=null;
  if (treatmentAdviceId != null)   adviceForPatient=allTreatmentAdvices.get(treatmentAdviceId);
  if (adviceForPatient == null)   adviceForPatient=allTreatmentAdvices.currentTreatmentAdvice(patientDocId);
  if (adviceForPatient != null) {
    treatmentAdviceController.show(adviceForPatient.getId(),uiModel);
    final boolean wasVisitDetailsEdited=(clinicVisit.getVisitDate() != null);
    if (wasVisitDetailsEdited)     return redirectToShowClinicVisitUrl(clinicVisitId,patientDocId,httpServletRequest);
  }
 else {
    treatmentAdviceController.createForm(patientDocId,uiModel);
  }
  uiModel.addAttribute(""String_Node_Str"",patientDocId);
  uiModel.addAttribute(""String_Node_Str"",new ClinicVisitUIModel(clinicVisit));
  labResultsController.createForm(patientDocId,uiModel);
  vitalStatisticsController.createForm(patientDocId,uiModel);
  opportunisticInfectionsController.createForm(clinicVisit,uiModel);
  return ""String_Node_Str"";
}"
84773,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String create(@PathVariable(""String_Node_Str"") String clinicVisitId,ClinicVisitUIModel clinicVisitUIModel,TreatmentAdvice treatmentAdvice,LabResultsUIModel labResultsUiModel,@Valid VitalStatistics vitalStatistics,@Valid OpportunisticInfectionsUIModel opportunisticInfections,BindingResult bindingResult,Model uiModel,HttpServletRequest httpServletRequest){
  String patientId=treatmentAdvice.getPatientId();
  if (bindingResult.hasErrors()) {
    return ""String_Node_Str"";
  }
  String treatmentAdviceId=null;
  if (isNotBlank(treatmentAdvice.getRegimenId())) {
    try {
      treatmentAdviceId=treatmentAdviceController.create(bindingResult,uiModel,treatmentAdvice);
    }
 catch (    RuntimeException e) {
      httpServletRequest.setAttribute(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
      return redirectToCreateFormUrl(clinicVisitId,treatmentAdvice.getPatientId(),httpServletRequest);
    }
  }
  List<String> labResultIds=labResultsController.create(labResultsUiModel,bindingResult,uiModel,httpServletRequest);
  String vitalStatisticsId=vitalStatisticsController.create(vitalStatistics,bindingResult,uiModel,httpServletRequest);
  String reportedOpportunisticInfectionsId=opportunisticInfectionsController.create(opportunisticInfections,bindingResult,uiModel,httpServletRequest);
  try {
    allClinicVisits.updateVisitDetails(clinicVisitId,clinicVisitUIModel.getVisitDate(),patientId,treatmentAdviceId,labResultIds,vitalStatisticsId,reportedOpportunisticInfectionsId);
  }
 catch (  RuntimeException e) {
    httpServletRequest.setAttribute(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    return redirectToCreateFormUrl(clinicVisitId,treatmentAdvice.getPatientId(),httpServletRequest);
  }
  return redirectToShowClinicVisitUrl(clinicVisitId,patientId,httpServletRequest);
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String create(@PathVariable(""String_Node_Str"") String clinicVisitId,ClinicVisitUIModel clinicVisitUIModel,TreatmentAdvice treatmentAdvice,LabResultsUIModel labResultsUiModel,@Valid VitalStatistics vitalStatistics,@Valid OpportunisticInfectionsUIModel opportunisticInfections,BindingResult bindingResult,Model uiModel,HttpServletRequest httpServletRequest){
  String patientId=treatmentAdvice.getPatientId();
  if (bindingResult.hasErrors()) {
    return ""String_Node_Str"";
  }
  String treatmentAdviceId=null;
  if (isNotBlank(treatmentAdvice.getRegimenId())) {
    try {
      treatmentAdviceId=treatmentAdviceController.create(bindingResult,uiModel,treatmentAdvice);
    }
 catch (    RuntimeException e) {
      httpServletRequest.setAttribute(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
      return redirectToCreateFormUrl(clinicVisitId,treatmentAdvice.getPatientId());
    }
  }
  List<String> labResultIds=labResultsController.create(labResultsUiModel,bindingResult,uiModel,httpServletRequest);
  String vitalStatisticsId=vitalStatisticsController.create(vitalStatistics,bindingResult,uiModel,httpServletRequest);
  String reportedOpportunisticInfectionsId=opportunisticInfectionsController.create(opportunisticInfections,bindingResult,uiModel,httpServletRequest);
  try {
    allClinicVisits.updateVisitDetails(clinicVisitId,clinicVisitUIModel.getVisitDate(),patientId,treatmentAdviceId,labResultIds,vitalStatisticsId,reportedOpportunisticInfectionsId);
  }
 catch (  RuntimeException e) {
    httpServletRequest.setAttribute(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    return redirectToCreateFormUrl(clinicVisitId,treatmentAdvice.getPatientId());
  }
  return redirectToShowClinicVisitUrl(clinicVisitId,patientId,httpServletRequest);
}"
84774,"@RequestMapping(method=RequestMethod.POST) public String changeRegimen(String existingTreatmentAdviceId,String discontinuationReason,TreatmentAdvice treatmentAdvice,String clinicVisitId,Model uiModel,HttpServletRequest httpServletRequest){
  uiModel.asMap().clear();
  fixTimeString(treatmentAdvice);
  String treatmentAdviceId=existingTreatmentAdviceId;
  try {
    treatmentAdviceId=treatmentAdviceService.changeRegimen(existingTreatmentAdviceId,discontinuationReason,treatmentAdvice);
    allClinicVisits.changeRegimen(treatmentAdvice.getPatientId(),clinicVisitId,treatmentAdviceId);
    return ""String_Node_Str"" + encodeUrlPathSegment(clinicVisitId,httpServletRequest) + ""String_Node_Str""+ treatmentAdvice.getPatientId();
  }
 catch (  RuntimeException e) {
    httpServletRequest.setAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"" + treatmentAdviceId + ""String_Node_Str""+ clinicVisitId+ ""String_Node_Str""+ treatmentAdvice.getPatientId();
  }
}","@RequestMapping(method=RequestMethod.POST) public String changeRegimen(String existingTreatmentAdviceId,String discontinuationReason,TreatmentAdvice treatmentAdvice,String clinicVisitId,Model uiModel,HttpServletRequest httpServletRequest){
  uiModel.asMap().clear();
  fixTimeString(treatmentAdvice);
  String treatmentAdviceId=existingTreatmentAdviceId;
  try {
    treatmentAdviceId=treatmentAdviceService.changeRegimen(existingTreatmentAdviceId,discontinuationReason,treatmentAdvice);
    allClinicVisits.changeRegimen(treatmentAdvice.getPatientId(),clinicVisitId,treatmentAdviceId);
    return ClinicVisitsController.redirectToCreateFormUrl(clinicVisitId,treatmentAdvice.getPatientId());
  }
 catch (  RuntimeException e) {
    httpServletRequest.setAttribute(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    return ""String_Node_Str"" + treatmentAdviceId + ""String_Node_Str""+ clinicVisitId+ ""String_Node_Str""+ treatmentAdvice.getPatientId();
  }
}"
84775,"private ReportedOpportunisticInfections buildReportedOpportunisticInfections(OpportunisticInfectionsUIModel opportunisticInfectionsUIModel){
  ReportedOpportunisticInfections reportedOpportunisticInfections=new ReportedOpportunisticInfections();
  reportedOpportunisticInfections.setPatientId(opportunisticInfectionsUIModel.getPatientId());
  reportedOpportunisticInfections.setCaptureDate(DateUtil.today());
  for (  OIStatus oiStatus : opportunisticInfectionsUIModel.getInfections()) {
    if (oiStatus.getReported()) {
      String nameOfInfection=oiStatus.getOpportunisticInfection();
      List<OpportunisticInfection> oiList=(List<OpportunisticInfection>)CollectionUtils.select(allOpportunisticInfections.getAll(),withName(nameOfInfection));
      reportedOpportunisticInfections.addOpportunisticInfection(oiList.get(0));
    }
  }
  if (opportunisticInfectionsUIModel.getOtherDetails() != null && !opportunisticInfectionsUIModel.getOtherDetails().isEmpty()) {
    reportedOpportunisticInfections.setOtherOpportunisticInfectionDetails(opportunisticInfectionsUIModel.getOtherDetails());
  }
  return reportedOpportunisticInfections;
}","private ReportedOpportunisticInfections buildReportedOpportunisticInfections(OpportunisticInfectionsUIModel opportunisticInfectionsUIModel){
  ReportedOpportunisticInfections reportedOpportunisticInfections=new ReportedOpportunisticInfections();
  reportedOpportunisticInfections.setPatientId(opportunisticInfectionsUIModel.getPatientId());
  reportedOpportunisticInfections.setCaptureDate(DateUtil.today());
  boolean otherInfectionReported=false;
  for (  OIStatus oiStatus : opportunisticInfectionsUIModel.getInfections()) {
    if (oiStatus.getReported()) {
      String nameOfInfection=oiStatus.getOpportunisticInfection();
      if (OTHER.equals(nameOfInfection))       otherInfectionReported=true;
      List<OpportunisticInfection> oiList=(List<OpportunisticInfection>)CollectionUtils.select(allOpportunisticInfections.getAll(),withName(nameOfInfection));
      reportedOpportunisticInfections.addOpportunisticInfection(oiList.get(0));
    }
  }
  if (otherInfectionReported && opportunisticInfectionsUIModel.getOtherDetails() != null && !opportunisticInfectionsUIModel.getOtherDetails().isEmpty()) {
    reportedOpportunisticInfections.setOtherOpportunisticInfectionDetails(opportunisticInfectionsUIModel.getOtherDetails());
  }
  return reportedOpportunisticInfections;
}"
84776,"private OpportunisticInfectionsUIModel buildModelWithNoInfectionsReported(){
  return OpportunisticInfectionsUIModel.newDefault(clinicVisit,allOpportunisticInfections.getAll());
}","protected OpportunisticInfectionsUIModel buildModelWithNoInfectionsReported(){
  return OpportunisticInfectionsUIModel.newDefault(clinicVisit,allOpportunisticInfections.getAll());
}"
84777,"@Test public void shouldCreateReportedOpportunisticInfections() throws Exception {
  opportunisticInfectionsController.create(buildModelWithInfectionReported(true),bindingResult,uiModel,request);
  ArgumentCaptor<ReportedOpportunisticInfections> argumentCaptor=ArgumentCaptor.forClass(ReportedOpportunisticInfections.class);
  verify(allReportedOpportunisticInfections).add(argumentCaptor.capture());
  ReportedOpportunisticInfections reportedOpportunisticInfections=argumentCaptor.getValue();
  assertEquals(DateUtil.today(),reportedOpportunisticInfections.getCaptureDate());
  assertEquals(""String_Node_Str"",reportedOpportunisticInfections.getPatientId());
  assertEquals(""String_Node_Str"",reportedOpportunisticInfections.getOtherOpportunisticInfectionDetails());
  assertEquals(1,reportedOpportunisticInfections.getOpportunisticInfectionIds().size());
  assertEquals(""String_Node_Str"",reportedOpportunisticInfections.getOpportunisticInfectionIds().get(0));
}","@Test public void shouldCreateReportedOpportunisticInfections() throws Exception {
  opportunisticInfectionsController.create(buildModelWithInfectionReported(true),bindingResult,uiModel,request);
  ArgumentCaptor<ReportedOpportunisticInfections> argumentCaptor=ArgumentCaptor.forClass(ReportedOpportunisticInfections.class);
  verify(allReportedOpportunisticInfections).add(argumentCaptor.capture());
  ReportedOpportunisticInfections reportedOpportunisticInfections=argumentCaptor.getValue();
  assertEquals(DateUtil.today(),reportedOpportunisticInfections.getCaptureDate());
  assertEquals(""String_Node_Str"",reportedOpportunisticInfections.getPatientId());
  assertEquals(2,reportedOpportunisticInfections.getOpportunisticInfectionIds().size());
  assertEquals(INFECTION_ID,reportedOpportunisticInfections.getOpportunisticInfectionIds().get(0));
  assertEquals(""String_Node_Str"",reportedOpportunisticInfections.getOpportunisticInfectionIds().get(1));
  assertEquals(""String_Node_Str"",reportedOpportunisticInfections.getOtherOpportunisticInfectionDetails());
}"
84778,"@Test public void shouldCreateReportedOpportunisticWithOutOtherDetailsIfNotPresent() throws Exception {
  opportunisticInfectionsController.create(buildModelWithInfectionReported(false),bindingResult,uiModel,request);
  ArgumentCaptor<ReportedOpportunisticInfections> argumentCaptor=ArgumentCaptor.forClass(ReportedOpportunisticInfections.class);
  verify(allReportedOpportunisticInfections).add(argumentCaptor.capture());
  ReportedOpportunisticInfections reportedOpportunisticInfections=argumentCaptor.getValue();
  assertEquals(DateUtil.today(),reportedOpportunisticInfections.getCaptureDate());
  assertEquals(""String_Node_Str"",reportedOpportunisticInfections.getPatientId());
  assertEquals(1,reportedOpportunisticInfections.getOpportunisticInfectionIds().size());
  assertEquals(""String_Node_Str"",reportedOpportunisticInfections.getOpportunisticInfectionIds().get(0));
  assertNull(reportedOpportunisticInfections.getOtherOpportunisticInfectionDetails());
}","@Test public void shouldCreateReportedOpportunisticWithOutOtherDetailsIfNotPresent() throws Exception {
  opportunisticInfectionsController.create(buildModelWithInfectionReported(false),bindingResult,uiModel,request);
  ArgumentCaptor<ReportedOpportunisticInfections> argumentCaptor=ArgumentCaptor.forClass(ReportedOpportunisticInfections.class);
  verify(allReportedOpportunisticInfections).add(argumentCaptor.capture());
  ReportedOpportunisticInfections reportedOpportunisticInfections=argumentCaptor.getValue();
  assertEquals(DateUtil.today(),reportedOpportunisticInfections.getCaptureDate());
  assertEquals(""String_Node_Str"",reportedOpportunisticInfections.getPatientId());
  assertEquals(1,reportedOpportunisticInfections.getOpportunisticInfectionIds().size());
  assertEquals(INFECTION_ID,reportedOpportunisticInfections.getOpportunisticInfectionIds().get(0));
  assertNull(reportedOpportunisticInfections.getOtherOpportunisticInfectionDetails());
}"
84779,"@Test public void shouldNotAddAnyDataIfNewDataIsEmpty(){
  HttpServletRequest httpServletRequest=mock(HttpServletRequest.class);
  ReportedOpportunisticInfections updatedOIData=new ReportedOpportunisticInfections();
  updatedOIData.setPatientId(PATIENT_ID);
  OpportunisticInfectionsUIModel opportunisticInfectionsUIModel=OpportunisticInfectionsUIModel.create(clinicVisit,updatedOIData,allOpportunisticInfections.getAll());
  opportunisticInfectionsController.update(opportunisticInfectionsUIModel,httpServletRequest);
  verify(allReportedOpportunisticInfections,never()).add(Matchers.<ReportedOpportunisticInfections>any());
  verify(allClinicVisits).updateOpportunisticInfections(PATIENT_ID,CLINIC_VISIT_ID,null);
}","@Test public void shouldNotAddAnyDataIfNewDataIsEmpty(){
  ReportedOpportunisticInfections updatedOIData=new ReportedOpportunisticInfections();
  updatedOIData.setPatientId(PATIENT_ID);
  OpportunisticInfectionsUIModel opportunisticInfectionsUIModel=OpportunisticInfectionsUIModel.create(clinicVisit,updatedOIData,allOpportunisticInfections.getAll());
  opportunisticInfectionsController.update(opportunisticInfectionsUIModel,httpServletRequest);
  verify(allReportedOpportunisticInfections,never()).add(Matchers.<ReportedOpportunisticInfections>any());
  verify(allClinicVisits).updateOpportunisticInfections(PATIENT_ID,CLINIC_VISIT_ID,null);
}"
84780,"private OpportunisticInfectionsUIModel buildModelWithInfectionReported(boolean otherDetailsPresent){
  ReportedOpportunisticInfections reportedOpportunisticInfections=new ReportedOpportunisticInfections();
  reportedOpportunisticInfections.addOpportunisticInfection(opportunisticInfection);
  OpportunisticInfectionsUIModel opportunisticInfectionsUIModel=OpportunisticInfectionsUIModel.create(clinicVisit,reportedOpportunisticInfections,allOpportunisticInfections.getAll());
  if (otherDetailsPresent)   opportunisticInfectionsUIModel.setOtherDetails(""String_Node_Str"");
 else   opportunisticInfectionsUIModel.setOtherDetails(""String_Node_Str"");
  return opportunisticInfectionsUIModel;
}","protected OpportunisticInfectionsUIModel buildModelWithInfectionReported(boolean otherDetailsPresent){
  ReportedOpportunisticInfections reportedOpportunisticInfections=new ReportedOpportunisticInfections();
  reportedOpportunisticInfections.addOpportunisticInfection(opportunisticInfection);
  if (otherDetailsPresent)   reportedOpportunisticInfections.addOpportunisticInfection(otherOpportunisticInfection);
  OpportunisticInfectionsUIModel opportunisticInfectionsUIModel=OpportunisticInfectionsUIModel.create(clinicVisit,reportedOpportunisticInfections,allOpportunisticInfections.getAll());
  if (otherDetailsPresent)   opportunisticInfectionsUIModel.setOtherDetails(""String_Node_Str"");
 else   opportunisticInfectionsUIModel.setOtherDetails(""String_Node_Str"");
  return opportunisticInfectionsUIModel;
}"
84781,"@Before public void setUp(){
  initMocks(this);
  opportunisticInfectionsController=new OpportunisticInfectionsController(allClinicVisits,allReportedOpportunisticInfections,allOpportunisticInfections);
  opportunisticInfection=new OpportunisticInfection();
  opportunisticInfection.setName(INFECTION_NAME);
  opportunisticInfection.setId(INFECTION_ID);
  when(allOpportunisticInfections.getAll()).thenReturn(Arrays.asList(opportunisticInfection));
  patient=new Patient();
  patient.setId(PATIENT_ID);
  visit=new VisitResponse();
  visit.setName(CLINIC_VISIT_ID).addVisitData(ClinicVisit.REPORTED_OPPORTUNISTIC_INFECTIONS,REPORT_OI_ID);
  clinicVisit=new ClinicVisit(patient,visit);
  when(allClinicVisits.get(PATIENT_ID,CLINIC_VISIT_ID)).thenReturn(clinicVisit);
  reportedOpportunisticInfections=new ReportedOpportunisticInfections();
  reportedOpportunisticInfections.addOpportunisticInfection(opportunisticInfection);
  when(allReportedOpportunisticInfections.get(REPORT_OI_ID)).thenReturn(reportedOpportunisticInfections);
}","@Before public void setUp(){
  initMocks(this);
  opportunisticInfectionsController=new OpportunisticInfectionsController(allClinicVisits,allReportedOpportunisticInfections,allOpportunisticInfections);
  opportunisticInfection=new OpportunisticInfection();
  opportunisticInfection.setName(ANEMIA);
  opportunisticInfection.setId(INFECTION_ID);
  otherOpportunisticInfection=new OpportunisticInfection();
  otherOpportunisticInfection.setName(""String_Node_Str"");
  otherOpportunisticInfection.setId(""String_Node_Str"");
  ArrayList<OpportunisticInfection> opportunisticInfections=new ArrayList<OpportunisticInfection>();
  opportunisticInfections.add(opportunisticInfection);
  opportunisticInfections.add(otherOpportunisticInfection);
  when(allOpportunisticInfections.getAll()).thenReturn(opportunisticInfections);
  patient=new Patient();
  patient.setId(PATIENT_ID);
  visit=new VisitResponse();
  visit.setName(CLINIC_VISIT_ID).addVisitData(ClinicVisit.REPORTED_OPPORTUNISTIC_INFECTIONS,REPORT_OI_ID);
  clinicVisit=new ClinicVisit(patient,visit);
  when(allClinicVisits.get(PATIENT_ID,CLINIC_VISIT_ID)).thenReturn(clinicVisit);
  reportedOpportunisticInfections=new ReportedOpportunisticInfections();
  reportedOpportunisticInfections.addOpportunisticInfection(opportunisticInfection);
  when(allReportedOpportunisticInfections.get(REPORT_OI_ID)).thenReturn(reportedOpportunisticInfections);
}"
84782,"@Test public void shouldAddNewData(){
  HttpServletRequest httpServletRequest=mock(HttpServletRequest.class);
  OpportunisticInfection anemia=OpportunisticInfection.newOpportunisticInfection(""String_Node_Str"");
  anemia.setId(""String_Node_Str"");
  ArrayList<OpportunisticInfection> infections=new ArrayList<OpportunisticInfection>();
  infections.add(anemia);
  infections.add(opportunisticInfection);
  when(allOpportunisticInfections.getAll()).thenReturn(infections);
  ReportedOpportunisticInfections updatedOIData=new ReportedOpportunisticInfections();
  updatedOIData.setPatientId(PATIENT_ID);
  updatedOIData.addOpportunisticInfection(anemia);
  OpportunisticInfectionsUIModel opportunisticInfectionsUIModel=OpportunisticInfectionsUIModel.create(clinicVisit,updatedOIData,allOpportunisticInfections.getAll());
  opportunisticInfectionsController.update(opportunisticInfectionsUIModel,httpServletRequest);
  ArgumentCaptor<ReportedOpportunisticInfections> argumentCaptor=ArgumentCaptor.forClass(ReportedOpportunisticInfections.class);
  verify(allReportedOpportunisticInfections).add(argumentCaptor.capture());
  ReportedOpportunisticInfections opportunisticInfections=argumentCaptor.getValue();
  assertEquals(1,opportunisticInfections.getOpportunisticInfectionIds().size());
  assertEquals(""String_Node_Str"",opportunisticInfections.getOpportunisticInfectionIds().get(0));
  assertEquals(PATIENT_ID,opportunisticInfections.getPatientId());
  verify(allClinicVisits).updateOpportunisticInfections(eq(PATIENT_ID),eq(CLINIC_VISIT_ID),Matchers.<String>any());
}","@Test public void shouldAddNewData(){
  OpportunisticInfection anemia=OpportunisticInfection.newOpportunisticInfection(""String_Node_Str"");
  anemia.setId(""String_Node_Str"");
  ArrayList<OpportunisticInfection> infections=new ArrayList<OpportunisticInfection>();
  infections.add(anemia);
  infections.add(opportunisticInfection);
  when(allOpportunisticInfections.getAll()).thenReturn(infections);
  ReportedOpportunisticInfections updatedOIData=new ReportedOpportunisticInfections();
  updatedOIData.setPatientId(PATIENT_ID);
  updatedOIData.addOpportunisticInfection(anemia);
  OpportunisticInfectionsUIModel opportunisticInfectionsUIModel=OpportunisticInfectionsUIModel.create(clinicVisit,updatedOIData,allOpportunisticInfections.getAll());
  opportunisticInfectionsController.update(opportunisticInfectionsUIModel,httpServletRequest);
  ArgumentCaptor<ReportedOpportunisticInfections> argumentCaptor=ArgumentCaptor.forClass(ReportedOpportunisticInfections.class);
  verify(allReportedOpportunisticInfections).add(argumentCaptor.capture());
  ReportedOpportunisticInfections opportunisticInfections=argumentCaptor.getValue();
  assertEquals(1,opportunisticInfections.getOpportunisticInfectionIds().size());
  assertEquals(""String_Node_Str"",opportunisticInfections.getOpportunisticInfectionIds().get(0));
  assertEquals(PATIENT_ID,opportunisticInfections.getPatientId());
  verify(allClinicVisits).updateOpportunisticInfections(eq(PATIENT_ID),eq(CLINIC_VISIT_ID),Matchers.<String>any());
}"
84783,"@Test public void shouldReturnEmptyLabResultsWhenVisitHasNoLabResults() throws Exception {
  ClinicVisit visit=new ClinicVisit(new Visit(),new Appointment());
  assertNotNull(visit.getLabResultIds());
}","@Test public void shouldReturnEmptyLabResultsWhenVisitHasNoLabResults() throws Exception {
  ClinicVisit visit=new ClinicVisit(""String_Node_Str"",new Visit());
  assertNotNull(visit.getLabResultIds());
}"
84784,"public ListPatientViewModel(Patient patient){
  this.setId(patient.getId());
  this.setPatientId(patient.getPatientId());
  this.setMobilePhoneNumber(patient.getMobilePhoneNumber());
  this.setGender(patient.getGender());
  this.setClinic(patient.getClinic());
  this.setRegistrationDate(patient.getRegistrationDate());
  this.setStatus(patient.getStatus());
}","public ListPatientViewModel(Patient patient){
  this.setId(patient.getId());
  this.setDateOfBirth(patient.getDateOfBirth());
  this.setDateOfBirthAsDate(patient.getDateOfBirthAsDate());
  this.setPatientId(patient.getPatientId());
  this.setMobilePhoneNumber(patient.getMobilePhoneNumber());
  this.setGender(patient.getGender());
  this.setClinic(patient.getClinic());
  this.setRegistrationDate(patient.getRegistrationDate());
  this.setStatus(patient.getStatus());
}"
84785,"public void unscheduleFourDayRecallJobs(Patient patient){
  Integer daysToRetry=Integer.valueOf(fourDayRecallProperties.getProperty(TAMAConstants.FOUR_DAY_RECALL_DAYS_TO_RETRY));
  for (int count=0; count <= daysToRetry; count++) {
    motechSchedulerService.unscheduleJob(TAMAConstants.FOUR_DAY_RECALL_SUBJECT,count + patient.getId());
  }
  motechSchedulerService.unscheduleRepeatingJob(TAMAConstants.FOUR_DAY_RECALL_SUBJECT,patient.getId());
  motechSchedulerService.unscheduleJob(TAMAConstants.WEEKLY_FALLING_TREND_AND_ADHERENCE_IN_RED_ALERT_SUBJECT,patient.getId());
}","public void unscheduleFourDayRecallJobs(Patient patient){
  Integer daysToRetry=Integer.valueOf(fourDayRecallProperties.getProperty(TAMAConstants.FOUR_DAY_RECALL_DAYS_TO_RETRY));
  for (int count=0; count <= daysToRetry; count++) {
    motechSchedulerService.unscheduleJob(TAMAConstants.FOUR_DAY_RECALL_SUBJECT,count + patient.getId());
  }
  motechSchedulerService.unscheduleRepeatingJob(TAMAConstants.FOUR_DAY_RECALL_SUBJECT,patient.getId());
  for (int count=0; count <= 2; count++) {
    motechSchedulerService.unscheduleJob(TAMAConstants.WEEKLY_FALLING_TREND_AND_ADHERENCE_IN_RED_ALERT_SUBJECT,count + patient.getId());
  }
}"
84786,"private Dose computeFirstDose(){
  if (to.isBefore(from))   return null;
  if (from.toLocalDate().isBefore(dosageResponse.getStartDate())) {
    from=DateUtil.newDateTime(dosageResponse.getStartDate(),0,0,0);
  }
  DateTime tentativeFirstDoseDateTime=DateUtil.newDateTime(from.toLocalDate(),dosageResponse.getDosageHour(),dosageResponse.getDosageMinute(),0);
  if (tentativeFirstDoseDateTime.isBefore(from)) {
    tentativeFirstDoseDateTime=tentativeFirstDoseDateTime.plusDays(1);
  }
  return new Dose(dosageResponse,tentativeFirstDoseDateTime.toLocalDate());
}","private Dose computeFirstDose(){
  if (to.isBefore(from))   return null;
  if (from.toLocalDate().isBefore(dosageResponse.getStartDate())) {
    from=DateUtil.newDateTime(dosageResponse.getStartDate(),0,0,0);
  }
  DateTime tentativeFirstDoseDateTime=DateUtil.newDateTime(from.toLocalDate(),dosageResponse.getDosageHour(),dosageResponse.getDosageMinute(),0);
  if (tentativeFirstDoseDateTime.isBefore(from)) {
    tentativeFirstDoseDateTime=tentativeFirstDoseDateTime.plusDays(1);
  }
  if (tentativeFirstDoseDateTime.isAfter(to)) {
    return null;
  }
  return new Dose(dosageResponse,tentativeFirstDoseDateTime.toLocalDate());
}"
84787,"public void backFillAdherenceForPeriodOfSuspension(String patientId,boolean doseTaken){
  Integer daysToRetry=Integer.valueOf(properties.getProperty(TAMAConstants.FOUR_DAY_RECALL_DAYS_TO_RETRY));
  Patient patient=allPatients.get(patientId);
  TreatmentAdvice treatmentAdvice=allTreatmentAdvices.currentTreatmentAdvice(patientId);
  String treatmentAdviceDocId=treatmentAdvice.getId();
  DateTime resumeDate=DateUtil.now();
  FourDayRecallTimeLine fourDayRecallTimeLine=new FourDayRecallTimeLine(patient,resumeDate,treatmentAdvice,daysToRetry);
  List<LocalDate> weekStartDates=fourDayRecallTimeLine.weekStartDates();
  if (weekStartDates.size() > 0 && allWeeklyAdherenceLogs.findLogsByWeekStartDate(patientId,treatmentAdviceDocId,weekStartDates.get(0)).size() == 0) {
    allWeeklyAdherenceLogs.add(WeeklyAdherenceLog.create(patientId,treatmentAdviceDocId,weekStartDates.get(0),doseTaken ? 0 : PatientPreferences.DAYS_TO_RECALL));
    weekStartDates.remove(0);
  }
  for (  LocalDate date : weekStartDates) {
    allWeeklyAdherenceLogs.add(WeeklyAdherenceLog.create(patientId,treatmentAdviceDocId,date,doseTaken ? 0 : PatientPreferences.DAYS_TO_RECALL));
  }
}","public void backFillAdherenceForPeriodOfSuspension(String patientId,boolean doseTaken){
  Integer daysToRetry=Integer.valueOf(properties.getProperty(TAMAConstants.FOUR_DAY_RECALL_DAYS_TO_RETRY));
  Patient patient=allPatients.get(patientId);
  TreatmentAdvice treatmentAdvice=allTreatmentAdvices.currentTreatmentAdvice(patientId);
  String treatmentAdviceDocId=treatmentAdvice.getId();
  DateTime resumeDate=DateUtil.now();
  FourDayRecallTimeLine fourDayRecallTimeLine=new FourDayRecallTimeLine(patient,resumeDate,treatmentAdvice,daysToRetry);
  List<LocalDate> weekStartDates=fourDayRecallTimeLine.weekStartDates();
  if (weekStartDates.size() > 0) {
    if (allWeeklyAdherenceLogs.findLogsByWeekStartDate(patientId,treatmentAdviceDocId,weekStartDates.get(0)).size() == 0) {
      allWeeklyAdherenceLogs.add(WeeklyAdherenceLog.create(patientId,treatmentAdviceDocId,weekStartDates.get(0),doseTaken ? 0 : PatientPreferences.DAYS_TO_RECALL));
    }
    weekStartDates.remove(0);
  }
  for (  LocalDate date : weekStartDates) {
    allWeeklyAdherenceLogs.add(WeeklyAdherenceLog.create(patientId,treatmentAdviceDocId,date,doseTaken ? 0 : PatientPreferences.DAYS_TO_RECALL));
  }
}"
84788,"private boolean patientsBestCallTimeFallsWithinSuspensionPeriod(DateTime fromDate,DateTime toDate,Patient suspendedPatient,boolean isFirstDayOfSuspensionPeriod,boolean isLastDayOfSuspensionPeriod){
  return ((suspendedPatient.getPatientPreferences().getBestCallTime().toTime().getDateTime(toDate).compareTo(toDate) <= 0 && isLastDayOfSuspensionPeriod) || (suspendedPatient.getPatientPreferences().getBestCallTime().toTime().getDateTime(fromDate).compareTo(fromDate) >= 0 && isFirstDayOfSuspensionPeriod));
}","private boolean patientsBestCallTimeFallsWithinSuspensionPeriod(DateTime fromDate,DateTime toDate,Patient suspendedPatient,boolean isFirstDayOfSuspensionPeriod,boolean isLastDayOfSuspensionPeriod){
  return ((patientsBestCallTimeBeforeReactivationTime(toDate,suspendedPatient) && isLastDayOfSuspensionPeriod && !isFirstDayOfSuspensionPeriod) || (patientsBestCallTimeAfterSuspensionTime(fromDate,suspendedPatient) && isFirstDayOfSuspensionPeriod && !isLastDayOfSuspensionPeriod) || (patientsBestCallTimeBeforeReactivationTime(toDate,suspendedPatient) && isLastDayOfSuspensionPeriod && patientsBestCallTimeAfterSuspensionTime(fromDate,suspendedPatient)&& isFirstDayOfSuspensionPeriod));
}"
84789,"public boolean hasAdherenceFallingAlertBeenRaisedForCurrentWeek(String patientDocId){
  DateTime startDateForCurrentWeek=DateUtil.newDateTime(getStartDateForCurrentWeek(patientDocId),0,0,0);
  return patientAlertService.getFallingAdherenceAlerts(patientDocId,startDateForCurrentWeek,DateUtil.now()).size() > 0;
}","public boolean hasAdherenceFallingAlertBeenRaisedForCurrentWeek(String patientDocId){
  DateTime startDateForCurrentWeek=DateUtil.newDateTime(getMostRecentBestCallDay(patientDocId),0,0,0);
  return patientAlertService.getFallingAdherenceAlerts(patientDocId,startDateForCurrentWeek,DateUtil.now()).size() > 0;
}"
84790,"public boolean hasAdherenceInRedAlertBeenRaisedForCurrentWeek(String patientId){
  DateTime startDateForCurrentWeek=DateUtil.newDateTime(getStartDateForCurrentWeek(patientId),0,0,0);
  return patientAlertService.getAdherenceInRedAlerts(patientId,startDateForCurrentWeek,DateUtil.now()).size() > 0;
}","public boolean hasAdherenceInRedAlertBeenRaisedForCurrentWeek(String patientId){
  DateTime startDateForCurrentWeek=DateUtil.newDateTime(getMostRecentBestCallDay(patientId),0,0,0);
  return patientAlertService.getAdherenceInRedAlerts(patientId,startDateForCurrentWeek,DateUtil.now()).size() > 0;
}"
84791,"public boolean isAdherenceCapturedForAnyWeek(String patientDocId,String treatmentAdviceId,LocalDate weekStartDate){
  return 1 == allWeeklyAdherenceLogs.findLogsByWeekStartDate(patientDocId,treatmentAdviceId,weekStartDate).size();
}","public boolean isAdherenceCapturedForAnyWeek(String patientDocId,String treatmentAdviceId,LocalDate weekStartDate){
  return allWeeklyAdherenceLogs.findLogsByWeekStartDate(patientDocId,treatmentAdviceId,weekStartDate).size() > 0;
}"
84792,"@RequestMapping(method=RequestMethod.POST) public String changeRegimen(String existingTreatmentAdviceId,String discontinuationReason,TreatmentAdvice treatmentAdvice,Model uiModel,HttpServletRequest httpServletRequest){
  endCurrentRegimen(existingTreatmentAdviceId,discontinuationReason);
  uiModel.asMap().clear();
  Patient patient=allPatients.get(treatmentAdvice.getPatientId());
  allTreatmentAdvices.add(treatmentAdvice);
  final CallPreference callPreference=patient.getPatientPreferences().getCallPreference();
  if (callPreference.equals(CallPreference.DailyPillReminder)) {
    TreatmentAdvice oldTreatmentAdvice=allTreatmentAdvices.get(existingTreatmentAdviceId);
    pillReminderService.renew(pillRegimenRequestMapper.map(treatmentAdvice));
    schedulerService.unscheduleJobForAdherenceTrendFeedbackForDailyPillReminder(oldTreatmentAdvice);
    schedulerService.unscheduleJobForDeterminingAdherenceQualityInDailyPillReminder(patient);
    schedulerService.scheduleJobForAdherenceTrendFeedbackForDailyPillReminder(treatmentAdvice);
    schedulerService.scheduleJobForDeterminingAdherenceQualityInDailyPillReminder(patient,treatmentAdvice);
  }
 else   if (CallPreference.FourDayRecall.equals(callPreference)) {
    schedulerService.unscheduleFallingAdherenceAlertJobs(treatmentAdvice.getPatientId());
    schedulerService.scheduleFallingAdherenceAlertJobsForFourDayRecall(patient,treatmentAdvice);
  }
  return ""String_Node_Str"" + encodeUrlPathSegment(treatmentAdvice.getId(),httpServletRequest);
}","@RequestMapping(method=RequestMethod.POST) public String changeRegimen(String existingTreatmentAdviceId,String discontinuationReason,TreatmentAdvice treatmentAdvice,Model uiModel,HttpServletRequest httpServletRequest){
  endCurrentRegimen(existingTreatmentAdviceId,discontinuationReason);
  uiModel.asMap().clear();
  Patient patient=allPatients.get(treatmentAdvice.getPatientId());
  allTreatmentAdvices.add(treatmentAdvice);
  final CallPreference callPreference=patient.getPatientPreferences().getCallPreference();
  if (callPreference.equals(CallPreference.DailyPillReminder)) {
    TreatmentAdvice oldTreatmentAdvice=allTreatmentAdvices.get(existingTreatmentAdviceId);
    pillReminderService.renew(pillRegimenRequestMapper.map(treatmentAdvice));
    schedulerService.unscheduleJobForAdherenceTrendFeedbackForDailyPillReminder(oldTreatmentAdvice);
    schedulerService.unscheduleJobForDeterminingAdherenceQualityInDailyPillReminder(patient);
    schedulerService.scheduleJobForAdherenceTrendFeedbackForDailyPillReminder(treatmentAdvice);
    schedulerService.scheduleJobForDeterminingAdherenceQualityInDailyPillReminder(patient,treatmentAdvice);
  }
 else   if (CallPreference.FourDayRecall.equals(callPreference)) {
    schedulerService.unScheduleFourDayRecallJobs(patient);
    schedulerService.scheduleJobsForFourDayRecall(patient,treatmentAdvice);
  }
  return ""String_Node_Str"" + encodeUrlPathSegment(treatmentAdvice.getId(),httpServletRequest);
}"
84793,"public void raiseAdherenceFallingAlert(String patientId){
  int adherencePercentageForCurrentWeek=getAdherencePercentageForCurrentWeek(patientId);
  if (adherencePercentageForCurrentWeek >= getAdherencePercentageForPreviousWeek(patientId))   return;
  final Map<String,String> data=new HashMap<String,String>();
  final int previousWeekPercentage=getAdherencePercentageForPreviousWeek(patientId);
  final double fall=((previousWeekPercentage - adherencePercentageForCurrentWeek) / previousWeekPercentage) * 100.0;
  final String description=String.format(""String_Node_Str"",fall,previousWeekPercentage,adherencePercentageForCurrentWeek);
  patientAlertService.createAlert(patientId,TAMAConstants.NO_ALERT_PRIORITY,DailyReminderAdherenceTrendService.FALLING_ADHERENCE,description,PatientAlertType.FallingAdherence,data);
}","public void raiseAdherenceFallingAlert(String patientId){
  int adherencePercentageForCurrentWeek=getAdherencePercentageForCurrentWeek(patientId);
  if (adherencePercentageForCurrentWeek >= getAdherencePercentageForPreviousWeek(patientId))   return;
  final Map<String,String> data=new HashMap<String,String>();
  final int previousWeekPercentage=getAdherencePercentageForPreviousWeek(patientId);
  final double fall=((previousWeekPercentage - adherencePercentageForCurrentWeek) / (double)previousWeekPercentage) * 100.0;
  final String description=String.format(""String_Node_Str"",fall,(double)previousWeekPercentage,(double)adherencePercentageForCurrentWeek);
  patientAlertService.createAlert(patientId,TAMAConstants.NO_ALERT_PRIORITY,DailyReminderAdherenceTrendService.FALLING_ADHERENCE,description,PatientAlertType.FallingAdherence,data);
}"
84794,"protected double getAdherencePercentage(String patientId,DateTime asOfDate){
  PillRegimenResponse pillRegimen=pillReminderService.getPillRegimen(patientId);
  String regimenId=pillRegimen.getPillRegimenId();
  int scheduledDosagesTotalCountForLastFourWeeksAsOfNow=DosageUtil.getScheduledDosagesTotalCountForLastFourWeeks(asOfDate.minusWeeks(4),asOfDate,pillRegimen);
  int dosagesTakenForLastFourWeeksAsOfNow=allDosageAdherenceLogs.findScheduledDosagesSuccessCount(regimenId,asOfDate.minusWeeks(4).toLocalDate(),asOfDate.toLocalDate());
  return ((double)dosagesTakenForLastFourWeeksAsOfNow) / scheduledDosagesTotalCountForLastFourWeeksAsOfNow;
}","protected double getAdherencePercentage(String patientId,DateTime asOfDate){
  PillRegimenResponse pillRegimen=pillReminderService.getPillRegimen(patientId);
  String regimenId=pillRegimen.getPillRegimenId();
  int scheduledDosagesTotalCountForLastFourWeeksAsOfNow=DosageUtil.getScheduledDosagesTotalCountForLastFourWeeks(asOfDate.minusWeeks(4),asOfDate,pillRegimen);
  int dosagesTakenForLastFourWeeksAsOfNow=allDosageAdherenceLogs.findScheduledDosagesSuccessCount(regimenId,asOfDate.minusWeeks(4).toLocalDate(),asOfDate.toLocalDate());
  return ((double)dosagesTakenForLastFourWeeksAsOfNow) / scheduledDosagesTotalCountForLastFourWeeksAsOfNow * 100.0;
}"
84795,"private void unscheduleDailyReminderJobs(Patient patient){
  TreatmentAdvice treatmentAdvice=allTreatmentAdvices.currentTreatmentAdvice(patient.getId());
  if (treatmentAdvice != null) {
    pillReminderService.unscheduleJobs(patient.getId());
    tamaSchedulerService.unscheduleJobForAdherenceTrendFeedbackForDailyPillReminder(treatmentAdvice);
  }
}","private void unscheduleDailyReminderJobs(Patient patient){
  TreatmentAdvice treatmentAdvice=allTreatmentAdvices.currentTreatmentAdvice(patient.getId());
  if (treatmentAdvice != null) {
    pillReminderService.unscheduleJobs(patient.getId());
    tamaSchedulerService.unscheduleJobForAdherenceTrendFeedbackForDailyPillReminder(treatmentAdvice);
    tamaSchedulerService.unscheduleJobForDeterminingAdherenceQualityInDailyPillReminder(patient);
  }
}"
84796,"@Test public void shouldUnscheduleJobsForAdherenceTrendFeedbackOutboxMessage(){
  Patient patient=PatientBuilder.startRecording().withDefaults().withId(""String_Node_Str"").withCallPreference(CallPreference.FourDayRecall).withBestCallTime(new TimeOfDay(null,null,null)).build();
  TreatmentAdvice treatmentAdvice=TreatmentAdvice.newDefault();
  when(allTreatmentAdvices.currentTreatmentAdvice(patient.getId())).thenReturn(treatmentAdvice);
  patientService.update(patient);
  verify(tamaSchedulerService).unscheduleJobForAdherenceTrendFeedbackForDailyPillReminder(treatmentAdvice);
}","@Test public void shouldUnscheduleJobsForAdherenceTrendFeedbackOutboxMessage(){
  Patient patient=PatientBuilder.startRecording().withDefaults().withId(""String_Node_Str"").withCallPreference(CallPreference.FourDayRecall).withBestCallTime(new TimeOfDay(null,null,null)).build();
  TreatmentAdvice treatmentAdvice=TreatmentAdvice.newDefault();
  when(allTreatmentAdvices.currentTreatmentAdvice(patient.getId())).thenReturn(treatmentAdvice);
  patientService.update(patient);
  verify(tamaSchedulerService).unscheduleJobForAdherenceTrendFeedbackForDailyPillReminder(treatmentAdvice);
  verify(tamaSchedulerService).unscheduleJobForDeterminingAdherenceQualityInDailyPillReminder(patient);
}"
84797,"public boolean isAdherenceBeingCapturedForFirstWeek(String patientId){
  TreatmentAdvice treatmentAdvice=allTreatmentAdvices.currentTreatmentAdvice(patientId);
  Patient patient=allPatients.get(patientId);
  LocalDate treatmentAdviceStartDate=DateUtil.newDate(treatmentAdvice.getStartDate());
  DateTime callPreferenceTransitionDate=patient.getPatientPreferences().getCallPreferenceTransitionDate();
  if (callPreferenceTransitionDate != null && callPreferenceTransitionDate.toLocalDate().isAfter(treatmentAdviceStartDate)) {
    return DateUtil.today().minusWeeks(1).isBefore(callPreferenceTransitionDate.toLocalDate());
  }
  return getStartDateForCurrentWeek(patientId).equals(treatmentAdviceStartDate);
}","public boolean isAdherenceBeingCapturedForFirstWeek(String patientId){
  TreatmentAdvice treatmentAdvice=allTreatmentAdvices.currentTreatmentAdvice(patientId);
  Patient patient=allPatients.get(patientId);
  LocalDate treatmentAdviceStartDate=DateUtil.newDate(treatmentAdvice.getStartDate());
  DateTime callPreferenceTransitionDate=patient.getPatientPreferences().getCallPreferenceTransitionDate();
  if (callPreferenceTransitionDate != null && callPreferenceTransitionDate.toLocalDate().isAfter(treatmentAdviceStartDate)) {
    return dateIsAtLeastOneWeekAgo(callPreferenceTransitionDate);
  }
  return getStartDateForCurrentWeek(patientId).equals(treatmentAdviceStartDate);
}"
84798,"public LocalDate findFourDayRecallDateForAnyWeek(String patientDocId,LocalDate week){
  Patient patient=allPatients.get(patientDocId);
  LocalDate startDayOfWeek=getStartDateForAnyWeek(patientDocId,week);
  DayOfWeek preferredDayOfWeek=patient.getPatientPreferences().getDayOfWeeklyCall();
  while (true) {
    if (startDayOfWeek.getDayOfWeek() == preferredDayOfWeek.getValue()) {
      return startDayOfWeek;
    }
    startDayOfWeek=startDayOfWeek.plusDays(1);
  }
}","public LocalDate findFourDayRecallDateForAnyWeek(String patientDocId,LocalDate week){
  Patient patient=allPatients.get(patientDocId);
  LocalDate startDayOfWeek=getStartDateForAnyWeek(patientDocId,week);
  LocalDate iteratingDayOfWeek=startDayOfWeek;
  DayOfWeek preferredDayOfWeek=patient.getPatientPreferences().getDayOfWeeklyCall();
  while (true) {
    if (iteratingDayOfWeek.getDayOfWeek() == preferredDayOfWeek.getValue()) {
      if (isStartDayEqualToOrSufficientlyBehindFourDayRecallDate(startDayOfWeek,iteratingDayOfWeek)) {
        return iteratingDayOfWeek;
      }
 else {
        return iteratingDayOfWeek.plusWeeks(1);
      }
    }
    iteratingDayOfWeek=iteratingDayOfWeek.plusDays(1);
  }
}"
84799,"private int getRetryDaysCount(DayOfWeek preferredDayOfWeek){
  int count=0;
  LocalDate date=DateUtil.today();
  while (date.getDayOfWeek() != preferredDayOfWeek.getValue()) {
    date=date.minusDays(1);
    count++;
  }
  return count;
}","private int getRetryDaysCount(DayOfWeek preferredDayOfWeek,LocalDate date){
  int count=0;
  while (date.getDayOfWeek() != preferredDayOfWeek.getValue()) {
    date=date.minusDays(1);
    count++;
  }
  return count;
}"
84800,"public LocalDate getStartDateForAnyWeek(String patientDocId,LocalDate week){
  Patient patient=allPatients.get(patientDocId);
  TreatmentAdvice treatmentAdvice=allTreatmentAdvices.currentTreatmentAdvice(patientDocId);
  DayOfWeek preferredDayOfWeek=patient.getPatientPreferences().getDayOfWeeklyCall();
  int retryDayCount=0;
  boolean isRetry=DateUtil.today().getDayOfWeek() != preferredDayOfWeek.getValue();
  if (isRetry)   retryDayCount=getRetryDaysCount(preferredDayOfWeek);
  DayOfWeek treatmentAdviceStartDay=DayOfWeek.getDayOfWeek(DateUtil.newDate(treatmentAdvice.getStartDate()));
  return dateWith(treatmentAdviceStartDay,DAYS_TO_RECALL,week.minusDays(retryDayCount));
}","public LocalDate getStartDateForAnyWeek(String patientDocId,LocalDate week){
  Patient patient=allPatients.get(patientDocId);
  TreatmentAdvice treatmentAdvice=allTreatmentAdvices.currentTreatmentAdvice(patientDocId);
  DayOfWeek preferredDayOfWeek=patient.getPatientPreferences().getDayOfWeeklyCall();
  int retryDayCount=0;
  boolean isRetry=week.getDayOfWeek() != preferredDayOfWeek.getValue();
  if (isRetry)   retryDayCount=getRetryDaysCount(preferredDayOfWeek,week);
  DayOfWeek treatmentAdviceStartDay=DayOfWeek.getDayOfWeek(DateUtil.newDate(treatmentAdvice.getStartDate()));
  return dateWith(treatmentAdviceStartDay,DAYS_TO_RECALL,week.minusDays(retryDayCount));
}"
84801,"public TamaSchedulerService(MotechSchedulerService motechSchedulerService,Properties properties,AllPatients allPatients){
  this.motechSchedulerService=motechSchedulerService;
  this.properties=properties;
  this.allPatients=allPatients;
}","public TamaSchedulerService(MotechSchedulerService motechSchedulerService,Properties properties,AllPatients allPatients,FourDayRecallService fourDayRecallService){
  this.motechSchedulerService=motechSchedulerService;
  this.properties=properties;
  this.allPatients=allPatients;
  this.fourDayRecallService=fourDayRecallService;
}"
84802,"public void scheduleFallingAdherenceAlertJobs(Patient patient,TreatmentAdvice treatmentAdvice){
  String patientDocId=patient.getId();
  DayOfWeek dayOfWeeklyCall=patient.getPatientPreferences().getDayOfWeeklyCall();
  Time eventTime=new TimeOfDay(0,0,TimeMeridiem.AM).toTime();
  Integer daysToRetry=Integer.valueOf(properties.getProperty(TAMAConstants.FOUR_DAY_RECALL_DAYS_TO_RETRY));
  LocalDate startDate=getWeeklyAdherenceTrackingStartDate(patient,treatmentAdvice).plusDays(4 + 14);
  for (int count=0; count <= daysToRetry; count++) {
    DayOfWeek eventDay=dayOfWeek(dayOfWeeklyCall,count + 1);
    FourDayRecallEventPayloadBuilder paramsBuilder=new FourDayRecallEventPayloadBuilder().withJobId(count + patientDocId).withPatientDocId(patientDocId);
    if (count == daysToRetry)     paramsBuilder.withLastRetryDayFlagSet();
    scheduleWeeklyEvent(getJobStartDate(startDate),getJobEndDate(treatmentAdvice),eventDay,eventTime,paramsBuilder.payload(),TAMAConstants.WEEKLY_FALLING_TREND_SUBJECT);
  }
}","public void scheduleFallingAdherenceAlertJobs(Patient patient,TreatmentAdvice treatmentAdvice){
  String patientDocId=patient.getId();
  DayOfWeek dayOfWeeklyCall=patient.getPatientPreferences().getDayOfWeeklyCall();
  Time eventTime=new TimeOfDay(0,0,TimeMeridiem.AM).toTime();
  Integer daysToRetry=Integer.valueOf(properties.getProperty(TAMAConstants.FOUR_DAY_RECALL_DAYS_TO_RETRY));
  LocalDate startDate=fourDayRecallService.findFirstFourDayRecallDateForTreatmentAdvice(patientDocId,getWeeklyAdherenceTrackingStartDate(patient,treatmentAdvice)).plusDays(1);
  for (int count=0; count <= daysToRetry; count++) {
    DayOfWeek eventDay=dayOfWeek(dayOfWeeklyCall,count + 1);
    FourDayRecallEventPayloadBuilder paramsBuilder=new FourDayRecallEventPayloadBuilder().withJobId(count + patientDocId).withPatientDocId(patientDocId);
    if (count == daysToRetry)     paramsBuilder.withLastRetryDayFlagSet();
    scheduleWeeklyEvent(getJobStartDate(startDate),getJobEndDate(treatmentAdvice),eventDay,eventTime,paramsBuilder.payload(),TAMAConstants.WEEKLY_FALLING_TREND_SUBJECT);
  }
}"
84803,"@MotechListener(subjects=TAMAConstants.WEEKLY_FALLING_TREND_SUBJECT) public void handleWeeklyFallingAdherence(MotechEvent motechEvent){
  String patientDocId=motechEvent.getParameters().get(PATIENT_DOC_ID_KEY).toString();
  Patient patient=allPatients.get(patientDocId);
  TreatmentAdvice treatmentAdvice=allTreatmentAdvices.currentTreatmentAdvice(patient.getId());
  if (fourDayRecallService.isAdherenceCapturedForCurrentWeek(patientDocId,treatmentAdvice.getId()) || isLastRetryDay(motechEvent)) {
    if (fourDayRecallService.hasAdherenceFallingAlertBeenRaisedForCurrentWeek(PATIENT_DOC_ID_KEY))     return;
    fourDayRecallService.raiseAdherenceFallingAlert(patientDocId);
  }
}","@MotechListener(subjects=TAMAConstants.WEEKLY_FALLING_TREND_SUBJECT) public void handleWeeklyFallingAdherence(MotechEvent motechEvent){
  String patientDocId=motechEvent.getParameters().get(PATIENT_DOC_ID_KEY).toString();
  Patient patient=allPatients.get(patientDocId);
  TreatmentAdvice treatmentAdvice=allTreatmentAdvices.currentTreatmentAdvice(patient.getId());
  if (fourDayRecallService.isAdherenceCapturedForCurrentWeek(patientDocId,treatmentAdvice.getId()) || isLastRetryDay(motechEvent)) {
    if (fourDayRecallService.hasAdherenceFallingAlertBeenRaisedForCurrentWeek(patientDocId))     return;
    fourDayRecallService.raiseAdherenceFallingAlert(patientDocId);
  }
}"
84804,"@Test public void shouldReturnAdhrenceTrendPercentage(){
  String externalId=""String_Node_Str"";
  String pillRegimenId=""String_Node_Str"";
  int successCountThisWeek=25;
  int scheduledDosageCount=100;
  Mockito.when(pillReminderService.getPillRegimen(Mockito.anyString())).thenReturn(pillRegimenResponse);
  Mockito.when(pillRegimenResponse.getPillRegimenId()).thenReturn(pillRegimenId);
  Mockito.when(allDosageAdherenceLogs.findScheduledDosagesSuccessCount(pillRegimenId,dateTime.minusWeeks(4).toLocalDate(),dateTime.toLocalDate())).thenReturn(successCountThisWeek);
  PowerMockito.when(DosageUtil.getScheduledDosagesTotalCountForLastFourWeeks(Mockito.any(DateTime.class),Mockito.any(DateTime.class),Mockito.any(PillRegimenResponse.class))).thenReturn(scheduledDosageCount);
  DailyReminderAdherenceTrendService dailyReminderAdherenceTrendService=new DailyReminderAdherenceTrendService(allDosageAdherenceLogs,pillReminderService,patientAlertService);
  assertEquals(0.25,dailyReminderAdherenceTrendService.getAdherencePercentage(externalId));
}","@Test public void shouldReturnAdhrenceTrendPercentage(){
  String externalId=""String_Node_Str"";
  String pillRegimenId=""String_Node_Str"";
  int successCountThisWeek=25;
  int scheduledDosageCount=100;
  Mockito.when(pillReminderService.getPillRegimen(Mockito.anyString())).thenReturn(pillRegimenResponse);
  Mockito.when(pillRegimenResponse.getPillRegimenId()).thenReturn(pillRegimenId);
  Mockito.when(allDosageAdherenceLogs.findScheduledDosagesSuccessCount(pillRegimenId,dateTime.minusWeeks(4).toLocalDate(),dateTime.toLocalDate())).thenReturn(successCountThisWeek);
  PowerMockito.when(DosageUtil.getScheduledDosagesTotalCountForLastFourWeeks(Mockito.any(DateTime.class),Mockito.any(DateTime.class),Mockito.any(PillRegimenResponse.class))).thenReturn(scheduledDosageCount);
  DailyReminderAdherenceTrendService dailyReminderAdherenceTrendService=new DailyReminderAdherenceTrendService(allDosageAdherenceLogs,pillReminderService,patientAlertService);
  assertEquals(25.0,dailyReminderAdherenceTrendService.getAdherencePercentage(externalId));
}"
84805,"@Override protected double getAdherencePercentageForCurrentWeek(String patientId){
  if (patientId.equals(testPatientId))   return 23.0;
  return 0.0;
}","@Override public double getAdherencePercentageForCurrentWeek(String patientId){
  return 20.0;
}"
84806,"@Test public void shouldRaiseAlertWhenAdherenceIsFalling(){
  DailyReminderAdherenceTrendService dailyReminderAdherenceTrendService=new DailyReminderAdherenceTrendService(allDosageAdherenceLogs,pillReminderService,patientAlertService){
    @Override public boolean isAdherenceFalling(    String patientId){
      return true;
    }
    @Override public double getAdherencePercentage(    String patientId){
      return 20.0;
    }
    @Override protected double getAdherencePercentage(    String patientId,    DateTime asOfDate){
      return 30.0;
    }
  }
;
  final String patientId=""String_Node_Str"";
  dailyReminderAdherenceTrendService.raiseAdherenceFallingAlert(patientId);
  verify(patientAlertService).createAlert(eq(patientId),eq(0),eq(""String_Node_Str""),eq(""String_Node_Str""),eq(PatientAlertType.FallingAdherence),argThat(emptyMapMatcher));
}","@Test public void shouldRaiseAlertWhenAdherenceIsFalling(){
  DailyReminderAdherenceTrendService dailyReminderAdherenceTrendService=new DailyReminderAdherenceTrendService(allDosageAdherenceLogs,pillReminderService,patientAlertService){
    @Override public boolean isAdherenceFalling(    String patientId){
      return true;
    }
    @Override public double getAdherencePercentageForCurrentWeek(    String patientId){
      return 20.0;
    }
    @Override protected double getAdherencePercentage(    String patientId,    DateTime asOfDate){
      return 30.0;
    }
  }
;
  final String patientId=""String_Node_Str"";
  dailyReminderAdherenceTrendService.raiseAdherenceFallingAlert(patientId);
  verify(patientAlertService).createAlert(eq(patientId),eq(0),eq(""String_Node_Str""),eq(""String_Node_Str""),eq(PatientAlertType.FallingAdherence),argThat(emptyMapMatcher));
}"
84807,"public void scheduleJobsForFourDayRecall(Patient patient,TreatmentAdvice treatmentAdvice){
  String patientDocId=patient.getId();
  LocalDate treatmentAdviceStartDate=DateUtil.newDate(treatmentAdvice.getStartDate());
  LocalDate endDate=DateUtil.newDate(treatmentAdvice.getEndDate());
  DayOfWeek dayOfWeeklyCall=patient.getPatientPreferences().getDayOfWeeklyCall();
  Time callTime=patient.getPatientPreferences().getBestCallTime().toTime();
  Integer daysToRetry=Integer.valueOf(properties.getProperty(TAMAConstants.FOUR_DAY_RECALL_DAYS_TO_RETRY));
  for (int count=0; count <= daysToRetry; count++) {
    Map<String,Object> eventParams=new FourDayRecallEventPayloadBuilder().withJobId(count + patientDocId).withPatientDocId(patientDocId).payload();
    MotechEvent fourDayRecallEvent=new MotechEvent(TAMAConstants.FOUR_DAY_RECALL_SUBJECT,eventParams);
    String cronExpression=new WeeklyCronJobExpressionBuilder(dayOfWeek(dayOfWeeklyCall,count)).withTime(callTime).build();
    Date jobEndDate=endDate == null ? null : endDate.toDate();
    LocalDate startDate=treatmentAdviceStartDate.plusDays(4 + count);
    Date jobStartDate=getJobStartDate(startDate);
    CronSchedulableJob cronJobForFourDayRecall=new CronSchedulableJob(fourDayRecallEvent,cronExpression,jobStartDate,jobEndDate);
    motechSchedulerService.scheduleJob(cronJobForFourDayRecall);
  }
}","public void scheduleJobsForFourDayRecall(Patient patient,TreatmentAdvice treatmentAdvice){
  String patientDocId=patient.getId();
  LocalDate treatmentAdviceStartDate=DateUtil.newDate(treatmentAdvice.getStartDate());
  LocalDate endDate=DateUtil.newDate(treatmentAdvice.getEndDate());
  DayOfWeek dayOfWeeklyCall=patient.getPatientPreferences().getDayOfWeeklyCall();
  Time callTime=patient.getPatientPreferences().getBestCallTime().toTime();
  Integer daysToRetry=Integer.valueOf(properties.getProperty(TAMAConstants.FOUR_DAY_RECALL_DAYS_TO_RETRY));
  for (int count=0; count <= daysToRetry; count++) {
    Map<String,Object> eventParams=new FourDayRecallEventPayloadBuilder().withJobId(count + patientDocId).withPatientDocId(patientDocId).payload();
    MotechEvent fourDayRecallEvent=new MotechEvent(TAMAConstants.FOUR_DAY_RECALL_SUBJECT,eventParams);
    String cronExpression=new WeeklyCronJobExpressionBuilder(dayOfWeek(dayOfWeeklyCall,count)).withTime(callTime).build();
    Date jobEndDate=endDate == null ? null : endDate.toDate();
    LocalDate startDate=treatmentAdviceStartDate.plusDays(4 + count);
    Date jobStartDate=getJobStartDate(startDate);
    CronSchedulableJob cronJobForFourDayRecall=new CronSchedulableJob(fourDayRecallEvent,cronExpression,jobStartDate,jobEndDate);
    motechSchedulerService.scheduleJob(cronJobForFourDayRecall);
  }
  scheduleFallingAdherenceAlertJob(patient,treatmentAdvice);
}"
84808,"@Test public void shouldScheduleFourDayRecallJobs_StartDateIsToday(){
  DayOfWeek dayOfWeek=DayOfWeek.Friday;
  int numDaysToRetry=2;
  patient.getPatientPreferences().setDayOfWeeklyCall(dayOfWeek);
  when(properties.getProperty(TAMAConstants.FOUR_DAY_RECALL_DAYS_TO_RETRY)).thenReturn(String.valueOf(numDaysToRetry));
  schedulerService.scheduleJobsForFourDayRecall(patient,treatmentAdvice);
  ArgumentCaptor<CronSchedulableJob> cronSchedulableJobArgumentCaptor=ArgumentCaptor.forClass(CronSchedulableJob.class);
  verify(motechSchedulerService,times(numDaysToRetry + 1)).scheduleJob(cronSchedulableJobArgumentCaptor.capture());
  List<CronSchedulableJob> cronSchedulableJobList=cronSchedulableJobArgumentCaptor.getAllValues();
  assertCronSchedulableJob(cronSchedulableJobList.get(0),""String_Node_Str"",TREATMENT_ADVICE_START_DATE.plusDays(4).toDate(),TREATMENT_ADVICE_END_DATE.toDate());
  assertCronSchedulableJob(cronSchedulableJobList.get(1),""String_Node_Str"",TREATMENT_ADVICE_START_DATE.plusDays(5).toDate(),TREATMENT_ADVICE_END_DATE.toDate());
  assertCronSchedulableJob(cronSchedulableJobList.get(2),""String_Node_Str"",TREATMENT_ADVICE_START_DATE.plusDays(6).toDate(),TREATMENT_ADVICE_END_DATE.toDate());
}","@Test public void shouldScheduleFourDayRecallJobs_StartDateIsToday(){
  DayOfWeek dayOfWeek=DayOfWeek.Friday;
  int numDaysToRetry=2;
  patient.getPatientPreferences().setDayOfWeeklyCall(dayOfWeek);
  when(properties.getProperty(TAMAConstants.FOUR_DAY_RECALL_DAYS_TO_RETRY)).thenReturn(String.valueOf(numDaysToRetry));
  schedulerService.scheduleJobsForFourDayRecall(patient,treatmentAdvice);
  ArgumentCaptor<CronSchedulableJob> cronSchedulableJobArgumentCaptor=ArgumentCaptor.forClass(CronSchedulableJob.class);
  verify(motechSchedulerService,times(numDaysToRetry + 1 + 1)).scheduleJob(cronSchedulableJobArgumentCaptor.capture());
  List<CronSchedulableJob> cronSchedulableJobList=cronSchedulableJobArgumentCaptor.getAllValues();
  assertCronSchedulableJob(cronSchedulableJobList.get(0),""String_Node_Str"",TREATMENT_ADVICE_START_DATE.plusDays(4).toDate(),TREATMENT_ADVICE_END_DATE.toDate());
  assertCronSchedulableJob(cronSchedulableJobList.get(1),""String_Node_Str"",TREATMENT_ADVICE_START_DATE.plusDays(5).toDate(),TREATMENT_ADVICE_END_DATE.toDate());
  assertCronSchedulableJob(cronSchedulableJobList.get(2),""String_Node_Str"",TREATMENT_ADVICE_START_DATE.plusDays(6).toDate(),TREATMENT_ADVICE_END_DATE.toDate());
  final CronSchedulableJob fallingAdherenceAlertJob=cronSchedulableJobList.get(3);
  assertCronSchedulableJob(fallingAdherenceAlertJob,""String_Node_Str"",TREATMENT_ADVICE_START_DATE.plusDays(14).toDate(),TREATMENT_ADVICE_END_DATE.toDate());
  assertEquals(TAMAConstants.WEEKLY_FALLING_TREND_SUBJECT,fallingAdherenceAlertJob.getMotechEvent().getSubject());
}"
84809,"public List<CallLogView> toCallLogView(List<CallLog> callLogs){
  List<CallLogView> callLogViews=new ArrayList<CallLogView>();
  for (  CallLog callLog : callLogs) {
    String patientDocumentId=callLog.getPatientDocumentId();
    List<String> likelyPatientDocIds=callLog.getLikelyPatientIds();
    Patient patient=patientDocumentId == null ? null : allPatients.get(patientDocumentId);
    String patientId=patient == null ? ""String_Node_Str"" : patient.getPatientId();
    String clinicName=patient == null ? allPatients.get(likelyPatientDocIds.get(0)).getClinic().getName() : patient.getClinic().getName();
    callLogViews.add(new CallLogView(patientId,callLog,clinicName,getLikelyPatientIds(likelyPatientDocIds)));
  }
  return callLogViews;
}","public List<CallLogView> toCallLogView(List<CallLog> callLogs){
  List<CallLogView> callLogViews=new ArrayList<CallLogView>();
  for (  CallLog callLog : callLogs) {
    String patientDocumentId=callLog.getPatientDocumentId();
    List<String> likelyPatientDocIds=callLog.getLikelyPatientIds();
    Patient patient=patientDocumentId == null ? null : allPatients.get(patientDocumentId);
    String patientId=patient == null ? ""String_Node_Str"" : patient.getPatientId();
    String clinicName=null;
    if (patient != null) {
      clinicName=patient.getClinic().getName();
    }
 else     if (likelyPatientDocIds != null && likelyPatientDocIds.size() > 0) {
      clinicName=allPatients.get(likelyPatientDocIds.get(0)).getClinic().getName();
    }
    callLogViews.add(new CallLogView(patientId,callLog,clinicName,getLikelyPatientIds(likelyPatientDocIds)));
  }
  return callLogViews;
}"
84810,"@View(name=""String_Node_Str"",map=""String_Node_Str"",reduce=""String_Node_Str"") public int findScheduledDosagesFailureCount(String regimenId){
  ComplexKey key=ComplexKey.of(regimenId,DosageStatus.NOT_TAKEN);
  ViewQuery q=createQuery(""String_Node_Str"").key(key);
  ViewResult viewResult=db.queryView(q);
  return rowCount(viewResult);
}","@View(name=""String_Node_Str"",map=""String_Node_Str"",reduce=""String_Node_Str"") public int findScheduledDosagesFailureCount(String regimenId){
  ComplexKey startKey=ComplexKey.of(regimenId,DosageStatus.WILL_TAKE_LATER);
  ComplexKey endKey=ComplexKey.of(regimenId,DosageStatus.NOT_TAKEN);
  ViewQuery q=createQuery(""String_Node_Str"").startKey(startKey).endKey(endKey);
  ViewResult viewResult=db.queryView(q);
  return rowCount(viewResult);
}"
84811,"private String getStartingTree(TAMAIVRContext tamaivrContext){
  Patient patient=tamaivrContext.patient(allPatients);
  boolean isPatientOnDailyPillReminder=CallPreference.DailyPillReminder.equals(patient.getPatientPreferences().getCallPreference());
  if (tamaivrContext.isIncomingCall()) {
    if (Patient.Status.Suspended.equals(patient.getStatus()))     return TAMATreeRegistry.MENU_TREE;
    if (!isPatientOnDailyPillReminder) {
      return TAMATreeRegistry.FOUR_DAY_RECALL_INCOMING_CALL;
    }
    PillRegimenSnapshot pillRegimenSnapshot=pillRegimenSnapshot(tamaivrContext);
    if (pillRegimenSnapshot.isCurrentDosageTaken()) {
      return TAMATreeRegistry.CURRENT_DOSAGE_TAKEN;
    }
 else {
      return TAMATreeRegistry.CURRENT_DOSAGE_CONFIRM;
    }
  }
 else {
    if (tamaivrContext.isOutBoxCall()) {
      return TAMATreeRegistry.OUTBOX_CALL;
    }
  }
  if (isPatientOnDailyPillReminder)   return TAMATreeRegistry.CURRENT_DOSAGE_REMINDER;
 else   return TAMATreeRegistry.FOUR_DAY_RECALL;
}","private String getStartingTree(TAMAIVRContext tamaivrContext){
  Patient patient=tamaivrContext.patient(allPatients);
  boolean isPatientOnDailyPillReminder=CallPreference.DailyPillReminder.equals(patient.getPatientPreferences().getCallPreference());
  if (tamaivrContext.isIncomingCall()) {
    if (!isPatientOnDailyPillReminder)     return TAMATreeRegistry.FOUR_DAY_RECALL_INCOMING_CALL;
 else {
      if (Patient.Status.Suspended.equals(patient.getStatus()))       return TAMATreeRegistry.MENU_TREE;
      PillRegimenSnapshot pillRegimenSnapshot=pillRegimenSnapshot(tamaivrContext);
      if (pillRegimenSnapshot.isCurrentDosageTaken()) {
        return TAMATreeRegistry.CURRENT_DOSAGE_TAKEN;
      }
 else {
        return TAMATreeRegistry.CURRENT_DOSAGE_CONFIRM;
      }
    }
  }
 else {
    if (tamaivrContext.isOutBoxCall()) {
      return TAMATreeRegistry.OUTBOX_CALL;
    }
  }
  if (isPatientOnDailyPillReminder)   return TAMATreeRegistry.CURRENT_DOSAGE_REMINDER;
 else   return TAMATreeRegistry.FOUR_DAY_RECALL;
}"
84812,"@Before public void setUp(){
  initMocks(this);
  treeRegistry=new TAMATreeRegistry(null,null,null,null,null,null,null);
  callFlowController=new TAMACallFlowController(treeRegistry,pillReminderService,voiceOutboxService,allPatients,contextFactory);
  ivrContext=new TAMAIVRContextForTest();
  Patient patient=new Patient();
  patientPreferences=new PatientPreferences();
  patient.setPatientPreferences(patientPreferences);
  ivrContext.pillRegimenSnapshot(pillRegimenSnapshot).patient(patient).callState(CallState.STARTED);
  when(contextFactory.create(kooKooIVRContext)).thenReturn(ivrContext);
}","@Before public void setUp(){
  initMocks(this);
  treeRegistry=new TAMATreeRegistry(null,null,null,null,null,null,null,null);
  callFlowController=new TAMACallFlowController(treeRegistry,pillReminderService,voiceOutboxService,allPatients,contextFactory);
  ivrContext=new TAMAIVRContextForTest();
  Patient patient=new Patient();
  patientPreferences=new PatientPreferences();
  patient.setPatientPreferences(patientPreferences);
  ivrContext.pillRegimenSnapshot(pillRegimenSnapshot).patient(patient).callState(CallState.STARTED);
  when(contextFactory.create(kooKooIVRContext)).thenReturn(ivrContext);
}"
84813,"@Test public void completionOfSymptomReportingTreeOrPreviousDosageReminderTreeShouldCompleteTheTrees(){
  when(treeRegistry.isLeafTree(TAMATreeRegistry.REGIMEN_1_TO_6)).thenReturn(true);
  tamaCallFlowController.treeComplete(TAMATreeRegistry.REGIMEN_1_TO_6,kooKooIVRContext);
  assertEquals(CallState.ALL_TREES_COMPLETED,tamaIVRContextForTest.callState());
}","@Test public void completionOfSymptomReportingTreeOrPreviousDosageReminderTreeShouldCompleteTheTrees(){
  when(treeRegistry.isLeafTree(TAMATreeRegistry.REGIMEN_1_TO_6)).thenReturn(true);
  tamaCallFlowController.treeComplete(TAMATreeRegistry.REGIMEN_1_TO_6,kooKooIVRContext);
  assertEquals(CallState.ALL_TREES_COMPLETED,ivrContext.callState());
}"
84814,"@Test public void completionOfOutboxShouldLeadToHangup(){
  tamaIVRContextForTest.callState(CallState.OUTBOX);
  tamaIVRContextForTest.outboxCompleted(true);
  String patientId=""String_Node_Str"";
  tamaIVRContextForTest.patientId(patientId);
  assertEquals(TAMACallFlowController.HANG_UP_URL,tamaCallFlowController.urlFor(kooKooIVRContext));
}","@Test public void completionOfOutboxShouldLeadToHangup(){
  ivrContext.callState(CallState.OUTBOX);
  ivrContext.outboxCompleted(true);
  String patientId=""String_Node_Str"";
  ivrContext.patientId(patientId);
  assertEquals(TAMACallFlowController.HANG_UP_URL,tamaCallFlowController.urlFor(kooKooIVRContext));
}"
84815,"@Before public void setUp(){
  initMocks(this);
  tamaCallFlowController=new TAMACallFlowController(treeRegistry,pillReminderService,voiceOutboxService,allPatients,contextFactory);
  tamaIVRContextForTest=new TAMAIVRContextForTest();
  when(contextFactory.create(kooKooIVRContext)).thenReturn(tamaIVRContextForTest);
}","@Before public void setUp(){
  initMocks(this);
  tamaCallFlowController=new TAMACallFlowController(treeRegistry,pillReminderService,voiceOutboxService,allPatients,contextFactory);
  ivrContext=new TAMAIVRContextForTest();
  when(contextFactory.create(kooKooIVRContext)).thenReturn(ivrContext);
}"
84816,"@Test public void returnAuthenticationURLWhenTheCallStarts(){
  tamaIVRContextForTest.callState(CallState.STARTED);
  assertEquals(TAMACallFlowController.AUTHENTICATION_URL,tamaCallFlowController.urlFor(kooKooIVRContext));
}","@Test public void returnAuthenticationURLWhenTheCallStarts(){
  ivrContext.callState(CallState.STARTED);
  assertEquals(TAMACallFlowController.AUTHENTICATION_URL,tamaCallFlowController.urlFor(kooKooIVRContext));
}"
84817,"@Test public void outboxURLShouldBeReturnedWhenTheDecisionTreesAreComplete(){
  tamaIVRContextForTest.callState(CallState.ALL_TREES_COMPLETED);
  String patientId=""String_Node_Str"";
  tamaIVRContextForTest.patientId(patientId);
  when(voiceOutboxService.getNumberPendingMessages(patientId)).thenReturn(3);
  assertEquals(TAMACallFlowController.PRE_OUTBOX_URL,tamaCallFlowController.urlFor(kooKooIVRContext));
}","@Test public void outboxURLShouldBeReturnedWhenTheDecisionTreesAreComplete(){
  ivrContext.callState(CallState.ALL_TREES_COMPLETED);
  String patientId=""String_Node_Str"";
  ivrContext.patientId(patientId);
  when(voiceOutboxService.getNumberPendingMessages(patientId)).thenReturn(3);
  assertEquals(TAMACallFlowController.PRE_OUTBOX_URL,tamaCallFlowController.urlFor(kooKooIVRContext));
}"
84818,"@Test public void hangupURLShouldBeReturnedWhenThereAreNoMessagesInOutbox(){
  tamaIVRContextForTest.callState(CallState.ALL_TREES_COMPLETED);
  String patientId=""String_Node_Str"";
  tamaIVRContextForTest.patientId(patientId);
  when(voiceOutboxService.getNumberPendingMessages(patientId)).thenReturn(0);
  assertEquals(TAMACallFlowController.HANG_UP_URL,tamaCallFlowController.urlFor(kooKooIVRContext));
}","@Test public void hangupURLShouldBeReturnedWhenThereAreNoMessagesInOutbox(){
  ivrContext.callState(CallState.ALL_TREES_COMPLETED);
  String patientId=""String_Node_Str"";
  ivrContext.patientId(patientId);
  when(voiceOutboxService.getNumberPendingMessages(patientId)).thenReturn(0);
  assertEquals(TAMACallFlowController.HANG_UP_URL,tamaCallFlowController.urlFor(kooKooIVRContext));
}"
84819,"@Override public KookooIVRResponseBuilder gotDTMF(KooKooIVRContext kooKooIVRContext){
  TAMAIVRContext ivrContext=ivrContextFactory.create(kooKooIVRContext);
  return new KookooIVRResponseBuilder().withSid(ivrContext.callId()).withPlayAudios(TamaIVRMessage.MORE_OPTIONS,TamaIVRMessage.SIGNATURE_MUSIC).language(ivrContext.preferredLanguage());
}","@Override public KookooIVRResponseBuilder gotDTMF(KooKooIVRContext kooKooIVRContext){
  TAMAIVRContext ivrContext=ivrContextFactory.create(kooKooIVRContext);
  return new KookooIVRResponseBuilder().withSid(ivrContext.callId()).withPlayAudios(TamaIVRMessage.MORE_OPTIONS,TamaIVRMessage.SIGNATURE_MUSIC).language(ivrContext.preferredLanguage()).withHangUp();
}"
84820,"@MotechListener(subjects=TAMAConstants.ADHERENCE_WEEKLY_TREND_SCHEDULER_SUBJECT) public void handleWeeklyAdherenceTrendToOutboxEvent(MotechEvent motechEvent){
  OutboundVoiceMessage voiceMessage=new OutboundVoiceMessage();
  String externalId=(String)motechEvent.getParameters().get(EventKeys.EXTERNAL_ID_KEY);
  voiceMessage.setPartyId(externalId);
  voiceMessage.setStatus(OutboundVoiceMessageStatus.PENDING);
  voiceMessage.setExpirationDate(DateUtil.today().plusWeeks(1).toDate());
  VoiceMessageType voiceMessageType=new VoiceMessageType();
  voiceMessageType.setPriority(MessagePriority.MEDIUM);
  voiceMessageType.setVoiceMessageTypeName(OutboxController.VOICE_MESSAGE_COMMAND_AUDIO);
  voiceMessage.setVoiceMessageType(voiceMessageType);
  Map<String,Object> parameters=new HashMap<String,Object>();
  List<String> commands=Arrays.asList(""String_Node_Str"");
  parameters.put(OutboxController.VOICE_MESSAGE_COMMAND,commands);
  voiceMessage.setParameters(parameters);
  outboxService.addMessage(voiceMessage);
}","@MotechListener(subjects=TAMAConstants.ADHERENCE_WEEKLY_TREND_SCHEDULER_SUBJECT) public void handleWeeklyAdherenceTrendToOutboxEvent(MotechEvent motechEvent){
  OutboundVoiceMessage voiceMessage=new OutboundVoiceMessage();
  String externalId=(String)motechEvent.getParameters().get(EventKeys.EXTERNAL_ID_KEY);
  voiceMessage.setPartyId(externalId);
  voiceMessage.setStatus(OutboundVoiceMessageStatus.PENDING);
  voiceMessage.setExpirationDate(DateUtil.today().plusWeeks(1).toDate());
  VoiceMessageType voiceMessageType=new VoiceMessageType();
  voiceMessageType.setPriority(MessagePriority.MEDIUM);
  voiceMessageType.setVoiceMessageTypeName(OutboxController.VOICE_MESSAGE_COMMAND_AUDIO);
  voiceMessage.setVoiceMessageType(voiceMessageType);
  voiceMessage.setCreationTime(DateUtil.now().toDate());
  Map<String,Object> parameters=new HashMap<String,Object>();
  List<String> commands=Arrays.asList(""String_Node_Str"");
  parameters.put(OutboxController.VOICE_MESSAGE_COMMAND,commands);
  voiceMessage.setParameters(parameters);
  outboxService.addMessage(voiceMessage);
}"
84821,"public void scheduleRepeatingJobForOutBoxCall(Patient patient){
  if (patient.getPatientPreferences().getCallPreference().equals(CallPreference.DailyPillReminder)) {
    Map<String,Object> eventParams=new SchedulerPayloadBuilder().withJobId(patient.getId()).withExternalId(patient.getId()).payload();
    eventParams.put(IS_RETRY,""String_Node_Str"");
    MotechEvent outboxCallEvent=new MotechEvent(TAMAConstants.OUTBOX_CALL_SCHEDULER_SUBJECT,eventParams);
    Integer maxOutboundRetries=Integer.valueOf(properties.getProperty(TAMAConstants.OUT_BOX_CALL_RETRIES_PER_DAY));
    int repeatIntervalInMinutes=Integer.valueOf(properties.getProperty(TAMAConstants.OUT_BOX_CALL_RETRY_INTERVAL));
    RepeatingSchedulableJob outboxCallJob=new RepeatingSchedulableJob(outboxCallEvent,DateUtil.now().plusMinutes(repeatIntervalInMinutes).toDate(),DateUtil.today().plusDays(1).toDate(),maxOutboundRetries,repeatIntervalInMinutes * 60 * 1000);
    motechSchedulerService.scheduleRepeatingJob(outboxCallJob);
  }
}","public void scheduleRepeatingJobForOutBoxCall(Patient patient){
  if (patient.getPatientPreferences().getCallPreference().equals(CallPreference.DailyPillReminder)) {
    Map<String,Object> eventParams=new SchedulerPayloadBuilder().withJobId(patient.getId()).withExternalId(patient.getId()).payload();
    eventParams.put(IS_RETRY,""String_Node_Str"");
    MotechEvent outboxCallEvent=new MotechEvent(TAMAConstants.OUTBOX_CALL_SCHEDULER_SUBJECT,eventParams);
    Integer maxOutboundRetries=Integer.valueOf(properties.getProperty(TAMAConstants.OUT_BOX_CALL_RETRIES_PER_DAY)) - 1;
    int repeatIntervalInMinutes=Integer.valueOf(properties.getProperty(TAMAConstants.OUT_BOX_CALL_RETRY_INTERVAL));
    RepeatingSchedulableJob outboxCallJob=new RepeatingSchedulableJob(outboxCallEvent,DateUtil.now().plusMinutes(repeatIntervalInMinutes).toDate(),DateUtil.today().plusDays(1).toDate(),maxOutboundRetries,repeatIntervalInMinutes * 60 * 1000);
    motechSchedulerService.scheduleRepeatingJob(outboxCallJob);
  }
}"
84822,"public void unscheduleJobForOutboxCall(Patient patient){
  motechSchedulerService.unscheduleJob(TAMAConstants.OUTBOX_CALL_SCHEDULER_SUBJECT,patient.getId());
}","public void unscheduleJobForOutboxCall(Patient patient){
  motechSchedulerService.unscheduleJob(TAMAConstants.OUTBOX_CALL_SCHEDULER_SUBJECT,patient.getId());
  motechSchedulerService.unscheduleRepeatingJob(TAMAConstants.OUTBOX_CALL_SCHEDULER_SUBJECT,patient.getId());
}"
84823,"public void setCallDateFromCallLogDateTime(){
  String dateToBeFormatted=DateUtil.newDate(callLog.getStartTime().toDate()).toDate().toString();
  callDateFromCallLogDateTime=dateToBeFormatted.substring(STRING_BEGIN_INDEX,dateToBeFormatted.indexOf(RIGHT_BOUNDING_SUBSEQUENCE)).trim() + dateToBeFormatted.substring(dateToBeFormatted.indexOf(LEFT_BOUNDING_SUBSEQUENCE) + EXCLUDING_FACTOR,dateToBeFormatted.length());
}","public void setCallDateFromCallLogDateTime(){
  DateTimeFormatter formatter=DateTimeFormat.forPattern(""String_Node_Str"");
  callDateFromCallLogDateTime=formatter.print(callLog.getStartTime());
}"
84824,"@Override public void treeComplete(String treeName,KooKooIVRContext kooKooIVRContext){
  TAMAIVRContext tamaivrContext=factory.create(kooKooIVRContext);
  tamaivrContext.lastCompletedTree(treeName);
  if (treeRegistry.isLeafTree(treeName))   tamaivrContext.callState(CallState.ALL_TREES_COMPLETED);
}","@Override public void treeComplete(String treeName,KooKooIVRContext kooKooIVRContext){
  TAMAIVRContext ivrContext=factory.create(kooKooIVRContext);
  ivrContext.lastCompletedTree(treeName);
  if ((onCurrentDosage(treeName) && previousDosageCaptured(ivrContext) && CallState.AUTHENTICATED.equals(ivrContext.callState())) || treeRegistry.isLeafTree(treeName))   ivrContext.callState(CallState.ALL_TREES_COMPLETED);
}"
84825,"protected Node createRootNode(){
  return new Node().setPrompts(new AudioPrompt().setCommand(messageForMedicines),new MenuAudioPrompt().setName(TamaIVRMessage.PILL_REMINDER_RESPONSE_MENU)).setTransitions(new Object[][]{{""String_Node_Str"",new Transition().setDestinationNode(new Node().setTreeCommands(stopTodaysRemindersCommand,updateAdherenceCommand).setPrompts(new AudioPrompt().setCommand(messageOnPillTaken),new AudioPrompt().setCommand(messageForAdherenceWhenPreviousDosageCapturedCommand),new MenuAudioPrompt().setCommand(messageFromPreviousDosage)))},{""String_Node_Str"",new Transition().setDestinationNode(new Node().setTreeCommands(updateAdherenceCommand).setPrompts(new AudioPrompt().setCommand(pillsDelayWarning),new MenuAudioPrompt().setCommand(messageFromPreviousDosage)))},{""String_Node_Str"",new Transition().setDestinationNode(new Node().setTreeCommands(stopTodaysRemindersCommand,updateAdherenceCommand).setPrompts(new AudioPrompt().setCommand(messageForMissedPillFeedbackCommand),new MenuAudioPrompt().setName(TamaIVRMessage.DOSE_CANNOT_BE_TAKEN_MENU)).setTransitions(new Object[][]{{""String_Node_Str"",new Transition().setDestinationNode(regimen1To6Tree.getTree().getRootNode())},{""String_Node_Str"",new Transition().setDestinationNode(new Node().setTreeCommands(recordDeclinedDosageReasonCommand).setPrompts(new AudioPrompt().setName(TamaIVRMessage.PLEASE_CARRY_SMALL_BOX),new AudioPrompt().setCommand(messageForAdherenceWhenPreviousDosageCapturedCommand),new MenuAudioPrompt().setCommand(messageFromPreviousDosage)))},{""String_Node_Str"",new Transition().setDestinationNode(new Node().setTreeCommands(recordDeclinedDosageReasonCommand).setPrompts(new AudioPrompt().setCommand(messageForAdherenceWhenPreviousDosageCapturedCommand),new MenuAudioPrompt().setCommand(messageFromPreviousDosage)))}}))}});
}","protected Node createRootNode(){
  return new Node().setPrompts(new AudioPrompt().setCommand(messageForMedicines),new MenuAudioPrompt().setName(TamaIVRMessage.PILL_REMINDER_RESPONSE_MENU)).setTransitions(new Object[][]{{""String_Node_Str"",new Transition().setDestinationNode(new Node().setTreeCommands(stopTodaysRemindersCommand,updateAdherenceCommand).setPrompts(new AudioPrompt().setCommand(messageOnPillTaken),new AudioPrompt().setCommand(messageForAdherenceWhenPreviousDosageCapturedCommand),new MenuAudioPrompt().setCommand(messageFromPreviousDosage)))},{""String_Node_Str"",new Transition().setDestinationNode(new Node().setTreeCommands(updateAdherenceCommand).setPrompts(new AudioPrompt().setCommand(pillsDelayWarning),new MenuAudioPrompt().setCommand(messageFromPreviousDosage)))},{""String_Node_Str"",new Transition().setDestinationNode(new Node().setTreeCommands(stopTodaysRemindersCommand,updateAdherenceCommand).setPrompts(new AudioPrompt().setCommand(messageForMissedPillFeedbackCommand),new MenuAudioPrompt().setName(TamaIVRMessage.DOSE_CANNOT_BE_TAKEN_MENU)).setTransitions(new Object[][]{{""String_Node_Str"",TAMATransitionFactory.createCallStateTransition(CallState.SYMPTOM_REPORTING)},{""String_Node_Str"",new Transition().setDestinationNode(new Node().setTreeCommands(recordDeclinedDosageReasonCommand).setPrompts(new AudioPrompt().setName(TamaIVRMessage.PLEASE_CARRY_SMALL_BOX),new AudioPrompt().setCommand(messageForAdherenceWhenPreviousDosageCapturedCommand),new MenuAudioPrompt().setCommand(messageFromPreviousDosage)))},{""String_Node_Str"",new Transition().setDestinationNode(new Node().setTreeCommands(recordDeclinedDosageReasonCommand).setPrompts(new AudioPrompt().setCommand(messageForAdherenceWhenPreviousDosageCapturedCommand),new MenuAudioPrompt().setCommand(messageFromPreviousDosage)))}}))}});
}"
84826,"public void log(String callId,String patientDocumentId){
  KookooCallDetailRecord kookooCallDetailRecord=kookooCallDetailRecordsService.get(callId);
  CallLog callLog=callDetailRecordMapper.toCallLog(patientDocumentId,kookooCallDetailRecord);
  callLog.maskAuthenticationPin();
  if (patientDocumentId != null)   callLog.setClinicId(allPatients.get(patientDocumentId).getClinic_id());
  allCallLogs.add(callLog);
}","public void log(String callId,String patientDocumentId){
  KookooCallDetailRecord kookooCallDetailRecord=kookooCallDetailRecordsService.get(callId);
  CallLog callLog=callDetailRecordMapper.toCallLog(patientDocumentId,kookooCallDetailRecord);
  callLog.maskAuthenticationPin();
  if (patientDocumentId != null)   callLog.clinicId(allPatients.get(patientDocumentId).getClinic_id());
  allCallLogs.add(callLog);
}"
84827,"public void scheduleRepeatingJobsForFourDayRecall(String patientDocId,String treatmentAdviceId,LocalDate treatmentAdviceStartDate){
  Patient patient=allPatients.get(patientDocId);
  Integer maxOutboundRetries=Integer.valueOf(properties.getProperty(TAMAConstants.RETRIES_PER_DAY));
  Integer retryInterval=Integer.valueOf(properties.getProperty(TAMAConstants.RETRY_INTERVAL));
  TimeOfDay callTime=patient.getPatientPreferences().getBestCallTime();
  DateTime jobStartTime=DateUtil.newDateTime(DateUtil.today(),callTime.getHour(),callTime.getMinute(),0).plusMinutes(retryInterval);
  DateTime jobEndTime=jobStartTime.plusDays(1);
  Map<String,Object> eventParams=new FourDayRecallEventPayloadBuilder().withJobId(FOUR_DAY_RECALL_JOB_ID_PREFIX + UUIDUtil.newUUID()).withPatientDocId(patientDocId).withTreatmentAdviceId(treatmentAdviceId).withTreatmentAdviceStartDate(treatmentAdviceStartDate).withRetryFlag(true).payload();
  MotechEvent fourDayRecallRepeatingEvent=new MotechEvent(TAMAConstants.FOUR_DAY_RECALL_SUBJECT,eventParams);
  RepeatingSchedulableJob repeatingSchedulableJob=new RepeatingSchedulableJob(fourDayRecallRepeatingEvent,jobStartTime.toDate(),jobEndTime.toDate(),maxOutboundRetries,retryInterval * 60 * 1000);
  motechSchedulerService.scheduleRepeatingJob(repeatingSchedulableJob);
}","public void scheduleRepeatingJobsForFourDayRecall(String patientDocId,String treatmentAdviceId,LocalDate treatmentAdviceStartDate){
  Patient patient=allPatients.get(patientDocId);
  Integer maxOutboundRetries=Integer.valueOf(properties.getProperty(TAMAConstants.RETRIES_PER_DAY));
  int repeatIntervalInMinutes=Integer.valueOf(properties.getProperty(TAMAConstants.RETRY_INTERVAL));
  TimeOfDay callTime=patient.getPatientPreferences().getBestCallTime();
  DateTime todayCallTime=DateUtil.now().withHourOfDay(callTime.toTime().getHour()).withMinuteOfHour(callTime.toTime().getMinute());
  DateTime jobStartTime=todayCallTime.plusMinutes(repeatIntervalInMinutes);
  DateTime jobEndTime=jobStartTime.plusDays(1);
  Map<String,Object> eventParams=new FourDayRecallEventPayloadBuilder().withJobId(FOUR_DAY_RECALL_JOB_ID_PREFIX + UUIDUtil.newUUID()).withPatientDocId(patientDocId).withTreatmentAdviceId(treatmentAdviceId).withTreatmentAdviceStartDate(treatmentAdviceStartDate).withRetryFlag(true).payload();
  MotechEvent fourDayRecallRepeatingEvent=new MotechEvent(TAMAConstants.FOUR_DAY_RECALL_SUBJECT,eventParams);
  RepeatingSchedulableJob repeatingSchedulableJob=new RepeatingSchedulableJob(fourDayRecallRepeatingEvent,jobStartTime.toDate(),jobEndTime.toDate(),maxOutboundRetries,repeatIntervalInMinutes * 60 * 1000);
  motechSchedulerService.scheduleRepeatingJob(repeatingSchedulableJob);
}"
84828,"@Test public void numberOfAttemptsShouldBeInitiatized(){
  HttpSession session=mock(HttpSession.class);
  String callerId=""String_Node_Str"";
  when(kookooRequest.getCid()).thenReturn(callerId);
  when(request.getSession()).thenReturn(session);
  TAMAIVRContext tamaivrContext=new TAMAIVRContext(kookooRequest,request,cookies);
  tamaivrContext.initialize();
  verify(session).setAttribute(TAMAIVRContext.CALLER_ID,callerId);
  verify(session).setAttribute(TAMAIVRContext.NUMBER_OF_ATTEMPTS,""String_Node_Str"");
  verify(cookies).add(TAMAIVRContext.NUMBER_OF_TIMES_REMINDER_SENT,""String_Node_Str"");
}","@Test public void numberOfAttemptsShouldBeInitiatized(){
  HttpSession session=mock(HttpSession.class);
  String callerId=""String_Node_Str"";
  when(kookooRequest.getCid()).thenReturn(callerId);
  when(request.getSession()).thenReturn(session);
  TAMAIVRContext tamaivrContext=new TAMAIVRContext(kookooRequest,request,cookies);
  tamaivrContext.initialize();
  verify(session).setAttribute(TAMAIVRContext.CALLER_ID,callerId);
  verify(session).setAttribute(TAMAIVRContext.NUMBER_OF_ATTEMPTS,""String_Node_Str"");
}"
84829,"public int totalNumberOfTimesToSendReminder(){
  return Integer.parseInt(httpRequest.getParameter(TOTAL_NUMBER_OF_TIMES_TO_SEND_REMINDER));
}","public int totalNumberOfTimesToSendReminder(){
  return Integer.parseInt(kookooRequest.getParameter(TOTAL_NUMBER_OF_TIMES_TO_SEND_REMINDER));
}"
84830,"void initialize(){
  callerId(requestedCallerId());
  setInSession(NUMBER_OF_ATTEMPTS,""String_Node_Str"");
  cookies.add(NUMBER_OF_TIMES_REMINDER_SENT,""String_Node_Str"");
}","void initialize(){
  callerId(requestedCallerId());
  setInSession(NUMBER_OF_ATTEMPTS,""String_Node_Str"");
}"
84831,"public int numberOfTimesReminderSent(){
  return Integer.parseInt(httpRequest.getParameter(NUMBER_OF_TIMES_REMINDER_SENT));
}","public int numberOfTimesReminderSent(){
  return Integer.parseInt(kookooRequest.getParameter(NUMBER_OF_TIMES_REMINDER_SENT));
}"
84832,"public IVRAuthenticationStatus checkAccess(String phoneNumber,String passcode,int attemptNumber,String sid){
  Patient patient=allPatients.findByMobileNumber(phoneNumber);
  if (patient == null) {
    ivrCallAudits.add(new IVRCallAudit(phoneNumber,sid,""String_Node_Str"",IVRCallAudit.State.PASSCODE_ENTRY_FAILED));
    return IVRAuthenticationStatus.notFound();
  }
  if (allPatients.findByMobileNumberAndPasscode(phoneNumber,passcode) == null) {
    ivrCallAudits.add(new IVRCallAudit(phoneNumber,sid,patient.getId(),IVRCallAudit.State.PASSCODE_ENTRY_FAILED));
    IVRAuthenticationStatus ivrAuthenticationStatus=IVRAuthenticationStatus.notAuthenticated();
    ivrAuthenticationStatus.allowRetry(StringUtils.isEmpty(passcode) || !maxNoOfAttempts.equals(attemptNumber));
    ivrAuthenticationStatus.loginAttemptNumber(StringUtils.isEmpty(passcode) ? --attemptNumber : attemptNumber);
    return ivrAuthenticationStatus;
  }
  IVRAuthenticationStatus status=IVRAuthenticationStatus.authenticated(patient.getId());
  return status.active(patient.isActive());
}","public IVRAuthenticationStatus checkAccess(String phoneNumber,String passcode,int attemptNumber,String sid){
  Patient likelyPatient=allPatients.findByMobileNumber(phoneNumber);
  if (likelyPatient == null) {
    ivrCallAudits.add(new IVRCallAudit(phoneNumber,sid,""String_Node_Str"",IVRCallAudit.State.PASSCODE_ENTRY_FAILED));
    return IVRAuthenticationStatus.notFound();
  }
  Patient patient=allPatients.findByMobileNumberAndPasscode(phoneNumber,passcode);
  if (patient == null) {
    ivrCallAudits.add(new IVRCallAudit(phoneNumber,sid,likelyPatient.getId(),IVRCallAudit.State.PASSCODE_ENTRY_FAILED));
    IVRAuthenticationStatus ivrAuthenticationStatus=IVRAuthenticationStatus.notAuthenticated();
    ivrAuthenticationStatus.allowRetry(StringUtils.isEmpty(passcode) || !maxNoOfAttempts.equals(attemptNumber));
    ivrAuthenticationStatus.loginAttemptNumber(StringUtils.isEmpty(passcode) ? --attemptNumber : attemptNumber);
    return ivrAuthenticationStatus;
  }
  IVRAuthenticationStatus status=IVRAuthenticationStatus.authenticated(patient.getId());
  return status.active(patient.isActive());
}"
84833,"@Test public void currentDosageReminder() throws IOException {
  String dosageId=scheduledJobDataService.currentJobId();
  logInfo(""String_Node_Str"",dosageId);
  caller.replyToCall(new PillReminderCallInfo(dosageId,1));
  IVRResponse ivrResponse=caller.enter(""String_Node_Str"");
  asksForCollectDtmfWith(ivrResponse,PILL_REMINDER_RESPONSE_MENU,ITS_TIME_FOR_THE_PILL,PILL_FROM_THE_BOTTLE);
}","@Test public void currentDosageReminder() throws IOException {
  String dosageId=scheduledJobDataService.currentJobId();
  logInfo(""String_Node_Str"",dosageId);
  caller.replyToCall(new PillReminderCallInfo(dosageId,1));
  IVRResponse ivrResponse=caller.enter(""String_Node_Str"");
  asksForCollectDtmfWith(ivrResponse,PILL_REMINDER_RESPONSE_MENU,ITS_TIME_FOR_THE_PILL,PILL_FROM_THE_BOTTLE);
  ivrResponse=caller.enter(""String_Node_Str"");
  audioFilePresent(ivrResponse,DOSE_RECORDED);
}"
84834,"@Test public void shouldMapTreatmentAdvicesToPillRegimenRequest(){
  PillRegimenRequestMapper pillRegimenRequestMapper=new PillRegimenRequestMapper(allDrugs,properties);
  TreatmentAdvice treatmentAdvice=new TreatmentAdvice();
  treatmentAdvice.setPatientId(""String_Node_Str"");
  List<DrugDosage> drugDosages=new ArrayList<DrugDosage>();
  LocalDate startDateForDrug1=DateUtil.newDate(2010,10,10);
  LocalDate endDateForDrug1=DateUtil.newDate(2010,12,10);
  LocalDate startDateForDrug2=DateUtil.newDate(2011,02,10);
  LocalDate endDateForDrug2=DateUtil.newDate(2011,06,10);
  when(allDrugs.get(""String_Node_Str"")).thenReturn(DrugBuilder.startRecording().withDefaults().withName(""String_Node_Str"").build());
  when(allDrugs.get(""String_Node_Str"")).thenReturn(DrugBuilder.startRecording().withDefaults().withName(""String_Node_Str"").build());
  String reminderTimeLag=""String_Node_Str"";
  propertiesExpectations(reminderTimeLag);
  drugDosages.add(drugDosage(""String_Node_Str"",startDateForDrug1,endDateForDrug1,Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  drugDosages.add(drugDosage(""String_Node_Str"",startDateForDrug2,endDateForDrug2,Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  treatmentAdvice.setDrugDosages(drugDosages);
  PillRegimenRequest pillRegimenRequest=pillRegimenRequestMapper.map(treatmentAdvice);
  Assert.assertEquals(treatmentAdvice.getPatientId(),pillRegimenRequest.getExternalId());
  Assert.assertNotNull(pillRegimenRequest.getReminderRepeatIntervalInMinutes());
  Assert.assertNotNull(pillRegimenRequest.getReminderRepeatWindowInHours());
  Assert.assertEquals(3,pillRegimenRequest.getDosageRequests().size());
  DosageRequest dosageRequest1=getByStartHour(17,pillRegimenRequest.getDosageRequests());
  assertDosageRequestWithReminderTimeLag(dosageRequest1,17,50);
  Assert.assertEquals(1,dosageRequest1.getMedicineRequests().size());
  assertMedicineRequest(dosageRequest1.getMedicineRequests().get(0),""String_Node_Str"",startDateForDrug2,endDateForDrug2);
  DosageRequest dosageRequest2=getByStartHour(20,pillRegimenRequest.getDosageRequests());
  assertDosageRequestWithReminderTimeLag(dosageRequest2,20,35);
  Assert.assertEquals(1,dosageRequest2.getMedicineRequests().size());
  assertMedicineRequest(dosageRequest2.getMedicineRequests().get(0),""String_Node_Str"",startDateForDrug1,endDateForDrug1);
  DosageRequest dosageRequest3=getByStartHour(9,pillRegimenRequest.getDosageRequests());
  assertDosageRequestWithReminderTimeLag(dosageRequest3,9,5);
  Assert.assertEquals(2,dosageRequest3.getMedicineRequests().size());
  assertMedicineRequest(dosageRequest3.getMedicineRequests().get(0),""String_Node_Str"",startDateForDrug1,endDateForDrug1);
  assertMedicineRequest(dosageRequest3.getMedicineRequests().get(1),""String_Node_Str"",startDateForDrug2,endDateForDrug2);
}","@Test public void shouldMapTreatmentAdvicesToPillRegimenRequest(){
  PillRegimenRequestMapper pillRegimenRequestMapper=new PillRegimenRequestMapper(allDrugs,properties);
  TreatmentAdvice treatmentAdvice=new TreatmentAdvice();
  treatmentAdvice.setPatientId(""String_Node_Str"");
  List<DrugDosage> drugDosages=new ArrayList<DrugDosage>();
  LocalDate startDateForDrug1=DateUtil.newDate(2010,10,10);
  LocalDate endDateForDrug1=DateUtil.newDate(2010,12,10);
  LocalDate startDateForDrug2=DateUtil.newDate(2011,02,10);
  LocalDate endDateForDrug2=DateUtil.newDate(2011,06,10);
  when(allDrugs.get(""String_Node_Str"")).thenReturn(DrugBuilder.startRecording().withDefaults().withName(""String_Node_Str"").build());
  when(allDrugs.get(""String_Node_Str"")).thenReturn(DrugBuilder.startRecording().withDefaults().withName(""String_Node_Str"").build());
  String reminderTimeLag=""String_Node_Str"";
  propertiesExpectations(reminderTimeLag);
  drugDosages.add(drugDosage(""String_Node_Str"",startDateForDrug1,endDateForDrug1,Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  drugDosages.add(drugDosage(""String_Node_Str"",startDateForDrug2,endDateForDrug2,Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  treatmentAdvice.setDrugDosages(drugDosages);
  DailyPillRegimenRequest pillRegimenRequest=pillRegimenRequestMapper.map(treatmentAdvice);
  Assert.assertEquals(treatmentAdvice.getPatientId(),pillRegimenRequest.getExternalId());
  Assert.assertNotNull(pillRegimenRequest.getReminderRepeatIntervalInMinutes());
  Assert.assertNotNull(pillRegimenRequest.getPillWindowInHours());
  Assert.assertEquals(3,pillRegimenRequest.getDosageRequests().size());
  DosageRequest dosageRequest1=getByStartHour(17,pillRegimenRequest.getDosageRequests());
  assertDosageRequestWithReminderTimeLag(dosageRequest1,17,50);
  Assert.assertEquals(1,dosageRequest1.getMedicineRequests().size());
  assertMedicineRequest(dosageRequest1.getMedicineRequests().get(0),""String_Node_Str"",startDateForDrug2,endDateForDrug2);
  DosageRequest dosageRequest2=getByStartHour(20,pillRegimenRequest.getDosageRequests());
  assertDosageRequestWithReminderTimeLag(dosageRequest2,20,35);
  Assert.assertEquals(1,dosageRequest2.getMedicineRequests().size());
  assertMedicineRequest(dosageRequest2.getMedicineRequests().get(0),""String_Node_Str"",startDateForDrug1,endDateForDrug1);
  DosageRequest dosageRequest3=getByStartHour(9,pillRegimenRequest.getDosageRequests());
  assertDosageRequestWithReminderTimeLag(dosageRequest3,9,5);
  Assert.assertEquals(2,dosageRequest3.getMedicineRequests().size());
  assertMedicineRequest(dosageRequest3.getMedicineRequests().get(0),""String_Node_Str"",startDateForDrug1,endDateForDrug1);
  assertMedicineRequest(dosageRequest3.getMedicineRequests().get(1),""String_Node_Str"",startDateForDrug2,endDateForDrug2);
}"
84835,"@Test public void shouldAddReminderLagToDosageMinutes(){
  PillRegimenRequestMapper pillRegimenRequestMapper=new PillRegimenRequestMapper(allDrugs,properties);
  TreatmentAdvice treatmentAdvice=new TreatmentAdvice();
  Drug drug=mock(Drug.class);
  String reminderTimeLag=""String_Node_Str"";
  when(drug.fullName(Matchers.<String>any())).thenReturn(""String_Node_Str"");
  propertiesExpectations(reminderTimeLag);
  treatmentAdvice.setPatientId(""String_Node_Str"");
  when(allDrugs.get(Matchers.<String>any())).thenReturn(drug);
  List<DrugDosage> drugDosages=new ArrayList<DrugDosage>();
  LocalDate startDateForDrug1=DateUtil.newDate(2010,10,10);
  LocalDate endDateForDrug1=DateUtil.newDate(2010,12,10);
  LocalDate startDateForDrug2=DateUtil.newDate(2011,02,10);
  LocalDate endDateForDrug2=DateUtil.newDate(2011,06,10);
  drugDosages.add(drugDosage(""String_Node_Str"",startDateForDrug1,endDateForDrug1,Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  drugDosages.add(drugDosage(""String_Node_Str"",startDateForDrug2,endDateForDrug2,Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  treatmentAdvice.setDrugDosages(drugDosages);
  PillRegimenRequest request=pillRegimenRequestMapper.map(treatmentAdvice);
  DosageRequest dosageRequest=getByStartHour(9,request.getDosageRequests());
  Assert.assertTrue(Integer.valueOf(reminderTimeLag) == dosageRequest.getStartMinute());
}","@Test public void shouldAddReminderLagToDosageMinutes(){
  PillRegimenRequestMapper pillRegimenRequestMapper=new PillRegimenRequestMapper(allDrugs,properties);
  TreatmentAdvice treatmentAdvice=new TreatmentAdvice();
  Drug drug=mock(Drug.class);
  String reminderTimeLag=""String_Node_Str"";
  when(drug.fullName(Matchers.<String>any())).thenReturn(""String_Node_Str"");
  propertiesExpectations(reminderTimeLag);
  treatmentAdvice.setPatientId(""String_Node_Str"");
  when(allDrugs.get(Matchers.<String>any())).thenReturn(drug);
  List<DrugDosage> drugDosages=new ArrayList<DrugDosage>();
  LocalDate startDateForDrug1=DateUtil.newDate(2010,10,10);
  LocalDate endDateForDrug1=DateUtil.newDate(2010,12,10);
  LocalDate startDateForDrug2=DateUtil.newDate(2011,02,10);
  LocalDate endDateForDrug2=DateUtil.newDate(2011,06,10);
  drugDosages.add(drugDosage(""String_Node_Str"",startDateForDrug1,endDateForDrug1,Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  drugDosages.add(drugDosage(""String_Node_Str"",startDateForDrug2,endDateForDrug2,Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  treatmentAdvice.setDrugDosages(drugDosages);
  DailyPillRegimenRequest request=pillRegimenRequestMapper.map(treatmentAdvice);
  DosageRequest dosageRequest=getByStartHour(9,request.getDosageRequests());
  Assert.assertTrue(Integer.valueOf(reminderTimeLag) == dosageRequest.getStartMinute());
}"
84836,"@Test public void shouldCreatePillRegimenRequest(){
  TreatmentAdvice treatmentAdvice=new TreatmentAdvice();
  treatmentAdvice.setPatientId(""String_Node_Str"");
  controller.create(treatmentAdvice,uiModel);
  verify(requestMapper).map(treatmentAdvice);
  verify(pillReminderService).createNew(any(PillRegimenRequest.class));
}","@Test public void shouldCreatePillRegimenRequest(){
  TreatmentAdvice treatmentAdvice=new TreatmentAdvice();
  treatmentAdvice.setPatientId(""String_Node_Str"");
  controller.create(treatmentAdvice,uiModel);
  verify(requestMapper).map(treatmentAdvice);
  verify(pillReminderService).createNew(any(DailyPillRegimenRequest.class));
}"
84837,"@Test public void changeRegimenShouldEndCurrentRegimenAndCreateANewRegimen(){
  String existingTreatmentAdviceId=""String_Node_Str"";
  String treatmentAdviceId=""String_Node_Str"";
  String discontinuationReason=""String_Node_Str"";
  TreatmentAdvice existingTreatmentAdvice=TreatmentAdviceBuilder.startRecording().withId(existingTreatmentAdviceId).build();
  TreatmentAdvice newTreatmentAdvice=TreatmentAdviceBuilder.startRecording().withId(treatmentAdviceId).build();
  when(allTreatmentAdvices.get(existingTreatmentAdviceId)).thenReturn(existingTreatmentAdvice);
  String redirectURL=controller.changeRegimen(existingTreatmentAdviceId,discontinuationReason,newTreatmentAdvice,uiModel,request);
  assertThat(redirectURL,is(""String_Node_Str""));
  assertThat(existingTreatmentAdvice.getReasonForDiscontinuing(),is(discontinuationReason));
  verify(allTreatmentAdvices).update(existingTreatmentAdvice);
  verify(allTreatmentAdvices).add(newTreatmentAdvice);
  verify(pillReminderService).renew(any(PillRegimenRequest.class));
}","@Test public void changeRegimenShouldEndCurrentRegimenAndCreateANewRegimen(){
  String existingTreatmentAdviceId=""String_Node_Str"";
  String treatmentAdviceId=""String_Node_Str"";
  String discontinuationReason=""String_Node_Str"";
  TreatmentAdvice existingTreatmentAdvice=TreatmentAdviceBuilder.startRecording().withId(existingTreatmentAdviceId).build();
  TreatmentAdvice newTreatmentAdvice=TreatmentAdviceBuilder.startRecording().withId(treatmentAdviceId).build();
  when(allTreatmentAdvices.get(existingTreatmentAdviceId)).thenReturn(existingTreatmentAdvice);
  String redirectURL=controller.changeRegimen(existingTreatmentAdviceId,discontinuationReason,newTreatmentAdvice,uiModel,request);
  assertThat(redirectURL,is(""String_Node_Str""));
  assertThat(existingTreatmentAdvice.getReasonForDiscontinuing(),is(discontinuationReason));
  verify(allTreatmentAdvices).update(existingTreatmentAdvice);
  verify(allTreatmentAdvices).add(newTreatmentAdvice);
  verify(pillReminderService).renew(any(DailyPillRegimenRequest.class));
}"
84838,"public List<String> getMessageForNextDosage(DateTime nextDosageDateTime){
  List<String> messages=new ArrayList<String>();
  if (nextDosageDateTime.getHourOfDay() == 0 || nextDosageDateTime.getHourOfDay() == 12) {
    messages.add(iVRMessage.getNumberFilename(12));
  }
 else {
    messages.add(iVRMessage.getNumberFilename(nextDosageDateTime.getHourOfDay() % 12));
  }
  messages.add(iVRMessage.getNumberFilename(nextDosageDateTime.getMinuteOfHour()));
  messages.add(nextDosageDateTime.getHourOfDay() < 12 ? IVRMessage.IN_THE_MORNING : IVRMessage.IN_THE_EVENING);
  messages.add(nextDosageDateTime.toLocalDate().equals(DateUtil.today()) ? IVRMessage.TODAY : IVRMessage.TOMORROW);
  return messages;
}","public List<String> getMessageForNextDosage(DateTime nextDosageDateTime){
  List<String> messages=new ArrayList<String>();
  if (nextDosageDateTime.getHourOfDay() == 0 || nextDosageDateTime.getHourOfDay() == 12) {
    messages.add(iVRMessage.getNumberFilename(12));
  }
 else {
    messages.add(iVRMessage.getNumberFilename(nextDosageDateTime.getHourOfDay() % 12));
  }
  if (nextDosageDateTime.getMinuteOfHour() != 0) {
    messages.add(iVRMessage.getNumberFilename(nextDosageDateTime.getMinuteOfHour()));
  }
  messages.add(nextDosageDateTime.getHourOfDay() < 12 ? IVRMessage.IN_THE_MORNING : IVRMessage.IN_THE_EVENING);
  messages.add(nextDosageDateTime.toLocalDate().equals(DateUtil.today()) ? IVRMessage.TODAY : IVRMessage.TOMORROW);
  return messages;
}"
84839,"protected void waitForDojoElementToLoad(final String id,final String dojoClass){
  wait.until(new ExpectedCondition<Boolean>(){
    @Override public Boolean apply(    WebDriver webDriver){
      WebElement element=webDriver.findElement(By.id(id));
      return element != null && isNotBlank(element.getAttribute(""String_Node_Str"")) && element.getAttribute(""String_Node_Str"").contains(dojoClass);
    }
  }
);
}","protected void waitForDojoElementToLoad(final String id,final String dojoClass){
  wait.until(new ExpectedCondition<Boolean>(){
    @Override public Boolean apply(    WebDriver webDriver){
      try {
        WebElement element=webDriver.findElement(By.id(id));
        return element != null && isNotBlank(element.getAttribute(""String_Node_Str"")) && element.getAttribute(""String_Node_Str"").contains(dojoClass);
      }
 catch (      StaleElementReferenceException ex) {
        return false;
      }
    }
  }
);
}"
84840,"private boolean hasNoTreatmentAdvice(Patient patient){
  return allTreatmentAdvices.findByPatientId(patient.getId()) != null;
}","private boolean hasNoTreatmentAdvice(Patient patient){
  return allTreatmentAdvices.findByPatientId(patient.getId()) == null;
}"
84841,"private int withHours(){
  return ampm.equals(""String_Node_Str"") ? hours : hours + 12;
}","private int withHours(){
  return ampm.equals(""String_Node_Str"") || hours == 12 ? hours : hours + 12;
}"
84842,"@Override public void update(Clinician entity){
  entity.setEncryptedPassword(encryptor.encrypt(entity.getPassword()));
  super.update(entity);
}","@Override public void update(Clinician clinician){
  Clinician dbClinician=get(clinician.getId());
  clinician.setRevision(dbClinician.getRevision());
  clinician.setEncryptedPassword(dbClinician.getEncryptedPassword());
  super.update(clinician);
}"
84843,"@RequestMapping(method=RequestMethod.PUT) public String update(@Valid Clinician clinician,BindingResult bindingResult,Model uiModel,HttpServletRequest httpServletRequest){
  if (bindingResult.hasErrors()) {
    uiModel.addAttribute(""String_Node_Str"",clinician);
    return ""String_Node_Str"";
  }
  uiModel.asMap().clear();
  Clinician dbClinician=clinicians.get(clinician.getId());
  clinician.setRevision(dbClinician.getRevision());
  clinician.setEncryptedPassword(dbClinician.getEncryptedPassword());
  clinicians.update(clinician);
  return ""String_Node_Str"" + encodeUrlPathSegment(clinician.getId().toString(),httpServletRequest);
}","@RequestMapping(method=RequestMethod.PUT) public String update(@Valid Clinician clinician,BindingResult bindingResult,Model uiModel,HttpServletRequest httpServletRequest){
  if (bindingResult.hasErrors()) {
    uiModel.addAttribute(""String_Node_Str"",clinician);
    return ""String_Node_Str"";
  }
  uiModel.asMap().clear();
  clinicians.update(clinician);
  return ""String_Node_Str"" + encodeUrlPathSegment(clinician.getId().toString(),httpServletRequest);
}"
84844,"@Override public String handle(IVRRequest ivrRequest,HttpServletRequest request,HttpServletResponse response){
  HttpSession session=request.getSession(false);
  Integer attempt=getAttempt(session);
  if (isLast(attempt)) {
    session.invalidate();
    return userNotAuthorisedAction.handle(ivrRequest,request,response);
  }
  if (ivrRequest.hasNoData())   return dtmfResponseWith(ivrRequest,IVRMessage.TAMA_IVR_REMIND_FOR_PIN);
  session.setAttribute(IVR.Attributes.NUMBER_OF_ATTEMPTS,++attempt);
  String playText=messages.get(IVRMessage.TAMA_IVR_ASK_FOR_PIN_AFTER_FAILURE);
  String playAudio=messages.get(IVRMessage.TAMA_SIGNATURE_MUSIC_URL);
  CollectDtmf collectDtmf=new IVRDtmfBuilder().withPlayText(playText).withPlayAudio(playAudio).create();
  Response ivrResponse=new IVRResponseBuilder().withSid(ivrRequest.getSid()).withCollectDtmf(collectDtmf).create();
  return ivrResponse.getXML();
}","@Override public String handle(IVRRequest ivrRequest,HttpServletRequest request,HttpServletResponse response){
  HttpSession session=request.getSession(false);
  Integer attempt=getAttempt(session);
  if (isLast(attempt))   return userNotAuthorisedAction.handle(ivrRequest,request,response);
  if (ivrRequest.hasNoData())   return dtmfResponseWith(ivrRequest,IVRMessage.TAMA_IVR_REMIND_FOR_PIN);
  session.setAttribute(IVR.Attributes.NUMBER_OF_ATTEMPTS,++attempt);
  String playText=messages.get(IVRMessage.TAMA_IVR_ASK_FOR_PIN_AFTER_FAILURE);
  String playAudio=messages.get(IVRMessage.TAMA_SIGNATURE_MUSIC_URL);
  CollectDtmf collectDtmf=new IVRDtmfBuilder().withPlayText(playText).withPlayAudio(playAudio).create();
  Response ivrResponse=new IVRResponseBuilder().withSid(ivrRequest.getSid()).withCollectDtmf(collectDtmf).create();
  return ivrResponse.getXML();
}"
84845,"@Override public String handle(IVRRequest ivrRequest,HttpServletRequest request,HttpServletResponse response){
  HttpSession session=request.getSession(false);
  String id=(String)session.getAttribute(IVR.Attributes.PATIENT_DOCUMENT_ID);
  audits.add(new IVRCallAudit(ivrRequest.getCid(),ivrRequest.getSid(),id,IVRCallAudit.State.PASSCODE_ENTRY_FAILED));
  return hangUpResponseWith(ivrRequest,IVRMessage.TAMA_IVR_REPORT_USER_NOT_AUTHORISED);
}","@Override public String handle(IVRRequest ivrRequest,HttpServletRequest request,HttpServletResponse response){
  HttpSession session=request.getSession(false);
  String id=(String)session.getAttribute(IVR.Attributes.PATIENT_DOCUMENT_ID);
  audits.add(new IVRCallAudit(ivrRequest.getCid(),ivrRequest.getSid(),id,IVRCallAudit.State.PASSCODE_ENTRY_FAILED));
  session.invalidate();
  return hangUpResponseWith(ivrRequest,IVRMessage.TAMA_IVR_REPORT_USER_NOT_AUTHORISED);
}"
84846,"@Test public void shouldGoToUserNotAuthorisedActionIfItIsTheLastAttempt(){
  IVRRequest ivrRequest=new IVRRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  when(request.getSession(false)).thenReturn(session);
  when(session.getAttribute(IVR.Attributes.NUMBER_OF_ATTEMPTS)).thenReturn(new Integer(4));
  when(userNotAuthorisedAction.handle(ivrRequest,request,response)).thenReturn(""String_Node_Str"");
  String handle=retryAction.handle(ivrRequest,request,response);
  verify(session).invalidate();
  verify(userNotAuthorisedAction).handle(ivrRequest,request,response);
  assertEquals(""String_Node_Str"",handle);
}","@Test public void shouldGoToUserNotAuthorisedActionIfItIsTheLastAttempt(){
  IVRRequest ivrRequest=new IVRRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  when(request.getSession(false)).thenReturn(session);
  when(session.getAttribute(IVR.Attributes.NUMBER_OF_ATTEMPTS)).thenReturn(new Integer(4));
  when(userNotAuthorisedAction.handle(ivrRequest,request,response)).thenReturn(""String_Node_Str"");
  String handle=retryAction.handle(ivrRequest,request,response);
  verify(userNotAuthorisedAction).handle(ivrRequest,request,response);
  assertEquals(""String_Node_Str"",handle);
}"
84847,"@Test public void shouldReturnUserNptAuthorisedResponse(){
  IVRRequest ivrRequest=new IVRRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  when(request.getSession(false)).thenReturn(session);
  when(messages.get(IVRMessage.TAMA_IVR_REPORT_USER_NOT_AUTHORISED)).thenReturn(""String_Node_Str"");
  when(session.getAttribute(IVR.Attributes.PATIENT_DOCUMENT_ID)).thenReturn(""String_Node_Str"");
  String handle=userNotAuthorisedAction.handle(ivrRequest,request,response);
  IVRAuditMatcher matcher=new IVRAuditMatcher(ivrRequest.getSid(),ivrRequest.getCid(),""String_Node_Str"",IVRCallAudit.State.PASSCODE_ENTRY_FAILED);
  verify(audits).add(argThat(matcher));
  assertEquals(""String_Node_Str"",StringUtils.replace(handle,""String_Node_Str"",""String_Node_Str""));
}","@Test public void shouldReturnUserNptAuthorisedResponse(){
  IVRRequest ivrRequest=new IVRRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  when(request.getSession(false)).thenReturn(session);
  when(messages.get(IVRMessage.TAMA_IVR_REPORT_USER_NOT_AUTHORISED)).thenReturn(""String_Node_Str"");
  when(session.getAttribute(IVR.Attributes.PATIENT_DOCUMENT_ID)).thenReturn(""String_Node_Str"");
  String handle=userNotAuthorisedAction.handle(ivrRequest,request,response);
  IVRAuditMatcher matcher=new IVRAuditMatcher(ivrRequest.getSid(),ivrRequest.getCid(),""String_Node_Str"",IVRCallAudit.State.PASSCODE_ENTRY_FAILED);
  verify(audits).add(argThat(matcher));
  verify(session).invalidate();
  assertEquals(""String_Node_Str"",StringUtils.replace(handle,""String_Node_Str"",""String_Node_Str""));
}"
84848,"public Gender(String type){
  this.type=type;
}","public Gender(String id){
  this.setId(id);
}"
84849,"@GenerateView public Clinician findByUsername(String username){
  List<Clinician> clinicians=queryView(""String_Node_Str"",username);
  if (clinicians != null && !clinicians.isEmpty()) {
    Clinician clinician=clinicians.get(0);
    Clinic clinic=clinics.get(clinician.getClinicId());
    clinician.setClinic(clinic);
    clinician.setPassword(encryptor.decrypt(clinician.getEncryptedPassword()));
    return clinician;
  }
  return null;
}","@GenerateView public Clinician findByUsername(String username){
  List<Clinician> clinicians=queryView(""String_Node_Str"",username);
  if (clinicians != null && !clinicians.isEmpty()) {
    Clinician clinician=clinicians.get(0);
    loadDependencies(clinician);
    clinician.setPassword(encryptor.decrypt(clinician.getEncryptedPassword()));
    return clinician;
  }
  return null;
}"
84850,"@Override public Clinician get(String id){
  Clinician clinician=super.get(id);
  clinician.setPassword(encryptor.decrypt(clinician.getPassword()));
  return clinician;
}","@Override public Clinician get(String id){
  Clinician clinician=super.get(id);
  loadDependencies(clinician);
  clinician.setPassword(encryptor.decrypt(clinician.getPassword()));
  return clinician;
}"
84851,"@Override public void load(){
  genders.add(new Gender(""String_Node_Str""));
  genders.add(new Gender(""String_Node_Str""));
}","@Override public void load(){
  genders.add(Gender.newGender(""String_Node_Str""));
  genders.add(Gender.newGender(""String_Node_Str""));
}"
84852,"@Before public void before(){
  super.before();
  gender=new Gender(""String_Node_Str"");
  genders.add(gender);
  ivrLanguage=new IVRLanguage(""String_Node_Str"");
  ivrLanguages.add(ivrLanguage);
}","@Before public void before(){
  super.before();
  gender=Gender.newGender(""String_Node_Str"");
  genders.add(gender);
  ivrLanguage=new IVRLanguage(""String_Node_Str"");
  ivrLanguages.add(ivrLanguage);
}"
84853,"@After public void after(){
  super.after();
  markForDeletion(gender);
  markForDeletion(ivrLanguage);
}","@After public void after(){
  markForDeletion(gender);
  markForDeletion(ivrLanguage);
  super.after();
}"
84854,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public String findByPatientId(@RequestParam String patientId,Model uiModel,HttpServletRequest httpServletRequest){
  List<Patient> patientList=patients.findByPatientId(patientId);
  if (patientList == null || patientList.isEmpty()) {
    uiModel.addAttribute(PATIENT_ID_NOT_FOUND,patientId);
    String referer=httpServletRequest.getHeader(""String_Node_Str"");
    referer=referer.replaceFirst(""String_Node_Str"" + PATIENT_ID_NOT_FOUND + ""String_Node_Str"",""String_Node_Str"");
    referer=referer.replaceFirst(""String_Node_Str"" + PATIENT_ID_NOT_FOUND + ""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"" + referer;
  }
  return REDIRECT_SHOW_PATIENT + encodeUrlPathSegment(patientList.get(0).getId(),httpServletRequest);
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public String findByPatientId(@RequestParam String patientId,Model uiModel,HttpServletRequest httpServletRequest){
  List<Patient> patientList=patients.findByPatientId(patientId);
  if (patientList == null || patientList.isEmpty()) {
    uiModel.addAttribute(PATIENT_ID_NOT_FOUND,patientId);
    String referer=httpServletRequest.getHeader(""String_Node_Str"");
    referer=referer.replaceFirst(""String_Node_Str"" + PATIENT_ID_NOT_FOUND + ""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"" + referer;
  }
  return REDIRECT_SHOW_PATIENT + encodeUrlPathSegment(patientList.get(0).getId(),httpServletRequest);
}"
84855,"@Override public void onChange(boolean selfChange){
  updateBattery(null);
}","@Override public void onChange(boolean selfChange){
  updateBattery();
}"
84856,"private StatusBarPolicy(Context context,StatusBarService service){
  mContext=context;
  mService=service;
  mSignalStrength=new SignalStrength();
  mBatteryStats=BatteryStatsService.getService();
  mCalendar=Calendar.getInstance(TimeZone.getDefault());
  mClockData=IconData.makeText(""String_Node_Str"",""String_Node_Str"");
  mClockIcon=service.addIcon(mClockData,null);
  updateClock();
  ContentObserver coClock=new ContentObserver(null){
    @Override public void onChange(    boolean selfChange){
      updateClock();
    }
  }
;
  mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(Settings.System.COLOR_CLOCK),false,coClock);
  mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(Settings.System.DISPLAY_STATUS_BAR_CLOCK),false,coClock);
  mStorageManager=(StorageManager)context.getSystemService(Context.STORAGE_SERVICE);
  mStorageManager.registerListener(new com.android.server.status.StorageNotification(context));
  mBatteryData=IconData.makeIconNumber(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_battery_unknown,0,0);
  mBatteryIcon=service.addIcon(mBatteryData,null);
  ContentObserver coBattery=new ContentObserver(null){
    @Override public void onChange(    boolean selfChange){
      updateBattery(null);
    }
  }
;
  mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(Settings.System.COLOR_BATTERY_PERCENTAGE),false,coBattery);
  mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(Settings.System.DISPLAY_BATTERY_PERCENTAGE),false,coBattery);
  mPhone=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
  mPhoneData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_signal_null,0,0);
  mPhoneIcon=service.addIcon(mPhoneData,null);
  ((TelephonyManager)mContext.getSystemService(Context.TELEPHONY_SERVICE)).listen(mPhoneStateListener,PhoneStateListener.LISTEN_SERVICE_STATE | PhoneStateListener.LISTEN_SIGNAL_STRENGTHS | PhoneStateListener.LISTEN_CALL_STATE| PhoneStateListener.LISTEN_DATA_CONNECTION_STATE| PhoneStateListener.LISTEN_DATA_ACTIVITY);
  mDataData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_data_connected_g,0,0);
  mDataIcon=service.addIcon(mDataData,null);
  service.setIconVisibility(mDataIcon,false);
  mWifiData=IconData.makeIcon(""String_Node_Str"",null,sWifiSignalImages[0],0,0);
  mWifiIcon=service.addIcon(mWifiData,null);
  service.setIconVisibility(mWifiIcon,false);
  mTTYModeEnableIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_tty_mode,0,0);
  mTTYModeIcon=service.addIcon(mTTYModeEnableIconData,null);
  service.setIconVisibility(mTTYModeIcon,false);
  mCdmaRoamingIndicatorIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_roaming_cdma_0,0,0);
  mCdmaRoamingIndicatorIcon=service.addIcon(mCdmaRoamingIndicatorIconData,null);
  service.setIconVisibility(mCdmaRoamingIndicatorIcon,false);
  mBluetoothData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_data_bluetooth,0,0);
  mBluetoothIcon=service.addIcon(mBluetoothData,null);
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  if (adapter != null) {
    mBluetoothEnabled=adapter.isEnabled();
  }
 else {
    mBluetoothEnabled=false;
  }
  mBluetoothA2dpConnected=false;
  mBluetoothHeadsetState=BluetoothHeadset.STATE_DISCONNECTED;
  mBluetoothPbapState=BluetoothPbap.STATE_DISCONNECTED;
  mService.setIconVisibility(mBluetoothIcon,mBluetoothEnabled);
  mGpsEnabledIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_gps_acquiring_anim,0,0);
  mGpsFixIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_gps_on,0,0);
  mGpsIcon=service.addIcon(mGpsEnabledIconData,null);
  service.setIconVisibility(mGpsIcon,false);
  mAlarmClockIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_notify_alarm,0,0);
  mAlarmClockIcon=service.addIcon(mAlarmClockIconData,null);
  service.setIconVisibility(mAlarmClockIcon,false);
  mSyncActiveIcon=service.addIcon(IconData.makeIcon(""String_Node_Str"",null,R.drawable.stat_notify_sync_anim0,0,0),null);
  mSyncFailingIcon=service.addIcon(IconData.makeIcon(""String_Node_Str"",null,R.drawable.stat_notify_sync_error,0,0),null);
  service.setIconVisibility(mSyncActiveIcon,false);
  service.setIconVisibility(mSyncFailingIcon,false);
  mVolumeData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_ringer_silent,0,0);
  mVolumeIcon=service.addIcon(mVolumeData,null);
  service.setIconVisibility(mVolumeIcon,false);
  updateVolume();
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_TIME_TICK);
  filter.addAction(Intent.ACTION_TIME_CHANGED);
  filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
  filter.addAction(Intent.ACTION_BATTERY_CHANGED);
  filter.addAction(Intent.ACTION_BATTERY_LOW);
  filter.addAction(Intent.ACTION_BATTERY_OKAY);
  filter.addAction(Intent.ACTION_POWER_CONNECTED);
  filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
  filter.addAction(Intent.ACTION_ALARM_CHANGED);
  filter.addAction(Intent.ACTION_SYNC_STATE_CHANGED);
  filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);
  filter.addAction(AudioManager.VIBRATE_SETTING_CHANGED_ACTION);
  filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
  filter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
  filter.addAction(BluetoothA2dp.ACTION_SINK_STATE_CHANGED);
  filter.addAction(BluetoothPbap.PBAP_STATE_CHANGED_ACTION);
  filter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
  filter.addAction(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION);
  filter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
  filter.addAction(WifiManager.RSSI_CHANGED_ACTION);
  filter.addAction(GpsLocationProvider.GPS_ENABLED_CHANGE_ACTION);
  filter.addAction(GpsLocationProvider.GPS_FIX_CHANGE_ACTION);
  filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
  filter.addAction(TtyIntent.TTY_ENABLED_CHANGE_ACTION);
  mContext.registerReceiver(mIntentReceiver,filter,null,mHandler);
  try {
    mHspaDataDistinguishable=mContext.getResources().getBoolean(com.android.internal.R.bool.config_hspa_data_distinguishable);
  }
 catch (  Exception e) {
    mHspaDataDistinguishable=false;
  }
}","private StatusBarPolicy(Context context,StatusBarService service){
  mContext=context;
  mService=service;
  mSignalStrength=new SignalStrength();
  mBatteryStats=BatteryStatsService.getService();
  mCalendar=Calendar.getInstance(TimeZone.getDefault());
  mClockData=IconData.makeText(""String_Node_Str"",""String_Node_Str"");
  mClockIcon=service.addIcon(mClockData,null);
  updateClock();
  ContentObserver coClock=new ContentObserver(null){
    @Override public void onChange(    boolean selfChange){
      updateClock();
    }
  }
;
  mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(Settings.System.COLOR_CLOCK),false,coClock);
  mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(Settings.System.DISPLAY_STATUS_BAR_CLOCK),false,coClock);
  mStorageManager=(StorageManager)context.getSystemService(Context.STORAGE_SERVICE);
  mStorageManager.registerListener(new com.android.server.status.StorageNotification(context));
  mBatteryData=IconData.makeIconNumber(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_battery_unknown,0,0);
  mBatteryIcon=service.addIcon(mBatteryData,null);
  ContentObserver coBattery=new ContentObserver(null){
    @Override public void onChange(    boolean selfChange){
      updateBattery();
    }
  }
;
  mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(Settings.System.COLOR_BATTERY_PERCENTAGE),false,coBattery);
  mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(Settings.System.DISPLAY_BATTERY_PERCENTAGE),false,coBattery);
  mPhone=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
  mPhoneData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_signal_null,0,0);
  mPhoneIcon=service.addIcon(mPhoneData,null);
  ((TelephonyManager)mContext.getSystemService(Context.TELEPHONY_SERVICE)).listen(mPhoneStateListener,PhoneStateListener.LISTEN_SERVICE_STATE | PhoneStateListener.LISTEN_SIGNAL_STRENGTHS | PhoneStateListener.LISTEN_CALL_STATE| PhoneStateListener.LISTEN_DATA_CONNECTION_STATE| PhoneStateListener.LISTEN_DATA_ACTIVITY);
  mDataData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_data_connected_g,0,0);
  mDataIcon=service.addIcon(mDataData,null);
  service.setIconVisibility(mDataIcon,false);
  mWifiData=IconData.makeIcon(""String_Node_Str"",null,sWifiSignalImages[0],0,0);
  mWifiIcon=service.addIcon(mWifiData,null);
  service.setIconVisibility(mWifiIcon,false);
  mTTYModeEnableIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_tty_mode,0,0);
  mTTYModeIcon=service.addIcon(mTTYModeEnableIconData,null);
  service.setIconVisibility(mTTYModeIcon,false);
  mCdmaRoamingIndicatorIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_roaming_cdma_0,0,0);
  mCdmaRoamingIndicatorIcon=service.addIcon(mCdmaRoamingIndicatorIconData,null);
  service.setIconVisibility(mCdmaRoamingIndicatorIcon,false);
  mBluetoothData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_data_bluetooth,0,0);
  mBluetoothIcon=service.addIcon(mBluetoothData,null);
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  if (adapter != null) {
    mBluetoothEnabled=adapter.isEnabled();
  }
 else {
    mBluetoothEnabled=false;
  }
  mBluetoothA2dpConnected=false;
  mBluetoothHeadsetState=BluetoothHeadset.STATE_DISCONNECTED;
  mBluetoothPbapState=BluetoothPbap.STATE_DISCONNECTED;
  mService.setIconVisibility(mBluetoothIcon,mBluetoothEnabled);
  mGpsEnabledIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_gps_acquiring_anim,0,0);
  mGpsFixIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_gps_on,0,0);
  mGpsIcon=service.addIcon(mGpsEnabledIconData,null);
  service.setIconVisibility(mGpsIcon,false);
  mAlarmClockIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_notify_alarm,0,0);
  mAlarmClockIcon=service.addIcon(mAlarmClockIconData,null);
  service.setIconVisibility(mAlarmClockIcon,false);
  mSyncActiveIcon=service.addIcon(IconData.makeIcon(""String_Node_Str"",null,R.drawable.stat_notify_sync_anim0,0,0),null);
  mSyncFailingIcon=service.addIcon(IconData.makeIcon(""String_Node_Str"",null,R.drawable.stat_notify_sync_error,0,0),null);
  service.setIconVisibility(mSyncActiveIcon,false);
  service.setIconVisibility(mSyncFailingIcon,false);
  mVolumeData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_ringer_silent,0,0);
  mVolumeIcon=service.addIcon(mVolumeData,null);
  service.setIconVisibility(mVolumeIcon,false);
  updateVolume();
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_TIME_TICK);
  filter.addAction(Intent.ACTION_TIME_CHANGED);
  filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
  filter.addAction(Intent.ACTION_BATTERY_CHANGED);
  filter.addAction(Intent.ACTION_BATTERY_LOW);
  filter.addAction(Intent.ACTION_BATTERY_OKAY);
  filter.addAction(Intent.ACTION_POWER_CONNECTED);
  filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
  filter.addAction(Intent.ACTION_ALARM_CHANGED);
  filter.addAction(Intent.ACTION_SYNC_STATE_CHANGED);
  filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);
  filter.addAction(AudioManager.VIBRATE_SETTING_CHANGED_ACTION);
  filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
  filter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
  filter.addAction(BluetoothA2dp.ACTION_SINK_STATE_CHANGED);
  filter.addAction(BluetoothPbap.PBAP_STATE_CHANGED_ACTION);
  filter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
  filter.addAction(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION);
  filter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
  filter.addAction(WifiManager.RSSI_CHANGED_ACTION);
  filter.addAction(GpsLocationProvider.GPS_ENABLED_CHANGE_ACTION);
  filter.addAction(GpsLocationProvider.GPS_FIX_CHANGE_ACTION);
  filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
  filter.addAction(TtyIntent.TTY_ENABLED_CHANGE_ACTION);
  mContext.registerReceiver(mIntentReceiver,filter,null,mHandler);
  try {
    mHspaDataDistinguishable=mContext.getResources().getBoolean(com.android.internal.R.bool.config_hspa_data_distinguishable);
  }
 catch (  Exception e) {
    mHspaDataDistinguishable=false;
  }
}"
84857,"private StatusBarPolicy(Context context,StatusBarService service){
  mContext=context;
  mService=service;
  mSignalStrength=new SignalStrength();
  mBatteryStats=BatteryStatsService.getService();
  mCalendar=Calendar.getInstance(TimeZone.getDefault());
  mClockData=IconData.makeText(""String_Node_Str"",""String_Node_Str"");
  mClockIcon=service.addIcon(mClockData,null);
  updateClock();
  ContentObserver coClock=new ContentObserver(null){
    @Override public void onChange(    boolean selfChange){
      updateClock();
    }
  }
;
  mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(Settings.System.COLOR_CLOCK),false,coClock);
  mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(Settings.System.DISPLAY_STATUS_BAR_CLOCK),false,coClock);
  mStorageManager=(StorageManager)context.getSystemService(Context.STORAGE_SERVICE);
  mStorageManager.registerListener(new com.android.server.status.StorageNotification(context));
  mBatteryData=IconData.makeIconNumber(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_battery_unknown,0,0);
  mBatteryIcon=service.addIcon(mBatteryData,null);
  ContentObserver coBattery=new ContentObserver(null){
    @Override public void onChange(    boolean selfChange){
      updateBattery();
    }
  }
;
  mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(Settings.System.COLOR_BATTERY_PERCENTAGE),false,coBattery);
  mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(Settings.System.DISPLAY_BATTERY_PERCENTAGE),false,coBattery);
  mPhone=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
  mPhoneData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_signal_null,0,0);
  mPhoneIcon=service.addIcon(mPhoneData,null);
  ((TelephonyManager)mContext.getSystemService(Context.TELEPHONY_SERVICE)).listen(mPhoneStateListener,PhoneStateListener.LISTEN_SERVICE_STATE | PhoneStateListener.LISTEN_SIGNAL_STRENGTHS | PhoneStateListener.LISTEN_CALL_STATE| PhoneStateListener.LISTEN_DATA_CONNECTION_STATE| PhoneStateListener.LISTEN_DATA_ACTIVITY);
  mDataData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_data_connected_g,0,0);
  mDataIcon=service.addIcon(mDataData,null);
  service.setIconVisibility(mDataIcon,false);
  mWifiData=IconData.makeIcon(""String_Node_Str"",null,sWifiSignalImages[0],0,0);
  mWifiIcon=service.addIcon(mWifiData,null);
  service.setIconVisibility(mWifiIcon,false);
  mTTYModeEnableIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_tty_mode,0,0);
  mTTYModeIcon=service.addIcon(mTTYModeEnableIconData,null);
  service.setIconVisibility(mTTYModeIcon,false);
  mCdmaRoamingIndicatorIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_roaming_cdma_0,0,0);
  mCdmaRoamingIndicatorIcon=service.addIcon(mCdmaRoamingIndicatorIconData,null);
  service.setIconVisibility(mCdmaRoamingIndicatorIcon,false);
  mBluetoothData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_data_bluetooth,0,0);
  mBluetoothIcon=service.addIcon(mBluetoothData,null);
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  if (adapter != null) {
    mBluetoothEnabled=adapter.isEnabled();
  }
 else {
    mBluetoothEnabled=false;
  }
  mBluetoothA2dpConnected=false;
  mBluetoothHeadsetState=BluetoothHeadset.STATE_DISCONNECTED;
  mBluetoothPbapState=BluetoothPbap.STATE_DISCONNECTED;
  mService.setIconVisibility(mBluetoothIcon,mBluetoothEnabled);
  mGpsEnabledIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_gps_acquiring_anim,0,0);
  mGpsFixIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_gps_on,0,0);
  mGpsIcon=service.addIcon(mGpsEnabledIconData,null);
  service.setIconVisibility(mGpsIcon,false);
  mAlarmClockIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_notify_alarm,0,0);
  mAlarmClockIcon=service.addIcon(mAlarmClockIconData,null);
  service.setIconVisibility(mAlarmClockIcon,false);
  mSyncActiveIcon=service.addIcon(IconData.makeIcon(""String_Node_Str"",null,R.drawable.stat_notify_sync_anim0,0,0),null);
  mSyncFailingIcon=service.addIcon(IconData.makeIcon(""String_Node_Str"",null,R.drawable.stat_notify_sync_error,0,0),null);
  service.setIconVisibility(mSyncActiveIcon,false);
  service.setIconVisibility(mSyncFailingIcon,false);
  mVolumeData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_ringer_silent,0,0);
  mVolumeIcon=service.addIcon(mVolumeData,null);
  service.setIconVisibility(mVolumeIcon,false);
  updateVolume();
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_TIME_TICK);
  filter.addAction(Intent.ACTION_TIME_CHANGED);
  filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
  filter.addAction(Intent.ACTION_BATTERY_CHANGED);
  filter.addAction(Intent.ACTION_BATTERY_LOW);
  filter.addAction(Intent.ACTION_BATTERY_OKAY);
  filter.addAction(Intent.ACTION_POWER_CONNECTED);
  filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
  filter.addAction(Intent.ACTION_ALARM_CHANGED);
  filter.addAction(Intent.ACTION_SYNC_STATE_CHANGED);
  filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);
  filter.addAction(AudioManager.VIBRATE_SETTING_CHANGED_ACTION);
  filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
  filter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
  filter.addAction(BluetoothA2dp.ACTION_SINK_STATE_CHANGED);
  filter.addAction(BluetoothPbap.PBAP_STATE_CHANGED_ACTION);
  filter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
  filter.addAction(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION);
  filter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
  filter.addAction(WifiManager.RSSI_CHANGED_ACTION);
  filter.addAction(GpsLocationProvider.GPS_ENABLED_CHANGE_ACTION);
  filter.addAction(GpsLocationProvider.GPS_FIX_CHANGE_ACTION);
  filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
  filter.addAction(TtyIntent.TTY_ENABLED_CHANGE_ACTION);
  mContext.registerReceiver(mIntentReceiver,filter,null,mHandler);
  try {
    mHspaDataDistinguishable=mContext.getResources().getBoolean(com.android.internal.R.bool.config_hspa_data_distinguishable);
  }
 catch (  Exception e) {
    mHspaDataDistinguishable=false;
  }
}","private StatusBarPolicy(Context context,StatusBarService service){
  mContext=context;
  mService=service;
  mSignalStrength=new SignalStrength();
  mBatteryStats=BatteryStatsService.getService();
  mCalendar=Calendar.getInstance(TimeZone.getDefault());
  mClockData=IconData.makeText(""String_Node_Str"",""String_Node_Str"");
  mClockIcon=service.addIcon(mClockData,null);
  updateClock();
  mStorageManager=(StorageManager)context.getSystemService(Context.STORAGE_SERVICE);
  mStorageManager.registerListener(new com.android.server.status.StorageNotification(context));
  mBatteryData=IconData.makeIconNumber(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_battery_unknown,0,0);
  mBatteryIcon=service.addIcon(mBatteryData,null);
  mPhone=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
  mPhoneData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_signal_null,0,0);
  mPhoneIcon=service.addIcon(mPhoneData,null);
  ((TelephonyManager)mContext.getSystemService(Context.TELEPHONY_SERVICE)).listen(mPhoneStateListener,PhoneStateListener.LISTEN_SERVICE_STATE | PhoneStateListener.LISTEN_SIGNAL_STRENGTHS | PhoneStateListener.LISTEN_CALL_STATE| PhoneStateListener.LISTEN_DATA_CONNECTION_STATE| PhoneStateListener.LISTEN_DATA_ACTIVITY);
  mDataData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_data_connected_g,0,0);
  mDataIcon=service.addIcon(mDataData,null);
  service.setIconVisibility(mDataIcon,false);
  mWifiData=IconData.makeIcon(""String_Node_Str"",null,sWifiSignalImages[0],0,0);
  mWifiIcon=service.addIcon(mWifiData,null);
  service.setIconVisibility(mWifiIcon,false);
  mTTYModeEnableIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_tty_mode,0,0);
  mTTYModeIcon=service.addIcon(mTTYModeEnableIconData,null);
  service.setIconVisibility(mTTYModeIcon,false);
  mCdmaRoamingIndicatorIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_roaming_cdma_0,0,0);
  mCdmaRoamingIndicatorIcon=service.addIcon(mCdmaRoamingIndicatorIconData,null);
  service.setIconVisibility(mCdmaRoamingIndicatorIcon,false);
  mBluetoothData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_data_bluetooth,0,0);
  mBluetoothIcon=service.addIcon(mBluetoothData,null);
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  if (adapter != null) {
    mBluetoothEnabled=adapter.isEnabled();
  }
 else {
    mBluetoothEnabled=false;
  }
  mBluetoothA2dpConnected=false;
  mBluetoothHeadsetState=BluetoothHeadset.STATE_DISCONNECTED;
  mBluetoothPbapState=BluetoothPbap.STATE_DISCONNECTED;
  mService.setIconVisibility(mBluetoothIcon,mBluetoothEnabled);
  mGpsEnabledIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_gps_acquiring_anim,0,0);
  mGpsFixIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_gps_on,0,0);
  mGpsIcon=service.addIcon(mGpsEnabledIconData,null);
  service.setIconVisibility(mGpsIcon,false);
  mAlarmClockIconData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_notify_alarm,0,0);
  mAlarmClockIcon=service.addIcon(mAlarmClockIconData,null);
  service.setIconVisibility(mAlarmClockIcon,false);
  mSyncActiveIcon=service.addIcon(IconData.makeIcon(""String_Node_Str"",null,R.drawable.stat_notify_sync_anim0,0,0),null);
  mSyncFailingIcon=service.addIcon(IconData.makeIcon(""String_Node_Str"",null,R.drawable.stat_notify_sync_error,0,0),null);
  service.setIconVisibility(mSyncActiveIcon,false);
  service.setIconVisibility(mSyncFailingIcon,false);
  mVolumeData=IconData.makeIcon(""String_Node_Str"",null,com.android.internal.R.drawable.stat_sys_ringer_silent,0,0);
  mVolumeIcon=service.addIcon(mVolumeData,null);
  service.setIconVisibility(mVolumeIcon,false);
  updateVolume();
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_TIME_TICK);
  filter.addAction(Intent.ACTION_TIME_CHANGED);
  filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
  filter.addAction(Intent.ACTION_BATTERY_CHANGED);
  filter.addAction(Intent.ACTION_BATTERY_LOW);
  filter.addAction(Intent.ACTION_BATTERY_OKAY);
  filter.addAction(Intent.ACTION_POWER_CONNECTED);
  filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
  filter.addAction(Intent.ACTION_ALARM_CHANGED);
  filter.addAction(Intent.ACTION_SYNC_STATE_CHANGED);
  filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);
  filter.addAction(AudioManager.VIBRATE_SETTING_CHANGED_ACTION);
  filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
  filter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
  filter.addAction(BluetoothA2dp.ACTION_SINK_STATE_CHANGED);
  filter.addAction(BluetoothPbap.PBAP_STATE_CHANGED_ACTION);
  filter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
  filter.addAction(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION);
  filter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
  filter.addAction(WifiManager.RSSI_CHANGED_ACTION);
  filter.addAction(GpsLocationProvider.GPS_ENABLED_CHANGE_ACTION);
  filter.addAction(GpsLocationProvider.GPS_FIX_CHANGE_ACTION);
  filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
  filter.addAction(TtyIntent.TTY_ENABLED_CHANGE_ACTION);
  mContext.registerReceiver(mIntentReceiver,filter,null,mHandler);
  try {
    mHspaDataDistinguishable=mContext.getResources().getBoolean(com.android.internal.R.bool.config_hspa_data_distinguishable);
  }
 catch (  Exception e) {
    mHspaDataDistinguishable=false;
  }
}"
84858,"@Override public String toString(){
  return String.format(""String_Node_Str"",id,firstName,lastName);
}","@Override public String toString(){
  return String.format(""String_Node_Str"",getId(),getName());
}"
84859,"@GET @Produces(APPLICATION_XML) public String getAllUsers_Xml(){
  final StringBuffer buf=new StringBuffer();
  final ListIterator<User> iter=users.listIterator();
  while (iter.hasNext()) {
    if (!iter.hasPrevious()) {
      buf.append(""String_Node_Str"");
    }
    buf.append(iter.next().toXml());
    if (!iter.hasNext()) {
      buf.append(""String_Node_Str"");
    }
  }
  return buf.toString();
}","@GET @Produces(APPLICATION_XML) public List<User> getAllUsers_Xml(){
  return users;
}"
84860,"@Override public void onEnable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  File worldsYml=new File(getDataFolder() + ""String_Node_Str"");
  File mainYml=new File(getDataFolder() + ""String_Node_Str"");
  setupFile(worldsYml);
  setupFile(mainYml);
  if (!setupDependencies())   this.getServer().getPluginManager().disablePlugin(this);
  wConfig=new Configuration(worldsYml);
  wConfig.load();
  mConfig=getConfiguration();
  List<World> worlds=getServer().getWorlds();
  for (  World world : worlds)   setupWorld(world.getName());
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.WORLD_LOAD,worldLoadListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.CUSTOM_EVENT,combatListener,Priority.Monitor,this);
  log.info(plugName + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}","@Override public void onEnable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  File worldsYml=new File(getDataFolder() + ""String_Node_Str"");
  File mainYml=new File(getDataFolder() + ""String_Node_Str"");
  setupFile(worldsYml);
  setupFile(mainYml);
  wConfig=new Configuration(worldsYml);
  wConfig.load();
  mConfig=getConfiguration();
  List<World> worlds=getServer().getWorlds();
  for (  World world : worlds)   setupWorld(world.getName());
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.WORLD_LOAD,worldLoadListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.CUSTOM_EVENT,combatListener,Priority.Monitor,this);
  log.info(plugName + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}"
84861,"public void onEntityDeath(EntityDeathEvent event){
  if (KKKreditzHandler.isValidHandler() || !isValidEntity(event.getEntity()))   return;
  LivingEntity cEntity=(LivingEntity)event.getEntity();
  if (entityMap.containsKey(cEntity)) {
    Player player=entityMap.remove(cEntity);
    if (player == null)     return;
 else {
      CreatureType cType=getCType(cEntity);
      if (!KKPermissions.reward(player,cType.getName()))       return;
      KKWorldConfig conf=KillaKreditz.worldConfig.get(player.getWorld().getName());
      if (conf.get(cType) == null)       return;
 else {
        double reward=getReward(conf.getMinReward(cType),conf.getMaxReward(cType),conf.getChance(cType)) * KKPermissions.multiplier(player);
        if (reward == 0)         return;
 else {
          KKKreditzHandler.rewardPlayer(player.getName(),reward);
          player.sendMessage(""String_Node_Str"" + KKKreditzHandler.formatCurrency(reward) + ""String_Node_Str""+ cType.getName());
        }
      }
    }
  }
}","public void onEntityDeath(EntityDeathEvent event){
  if (KKKreditzHandler.isValidHandler() || !isValidEntity(event.getEntity()))   return;
  LivingEntity cEntity=(LivingEntity)event.getEntity();
  if (entityMap.containsKey(cEntity)) {
    Player player=entityMap.remove(cEntity);
    if (player == null)     return;
 else {
      CreatureType cType=getCType(cEntity);
      if (!KKPermissions.reward(player,cType.getName().toLowerCase()))       return;
      KKWorldConfig conf=KillaKreditz.worldConfig.get(player.getWorld().getName());
      if (conf.get(cType) == null)       return;
 else {
        double reward=getReward(conf.getMinReward(cType),conf.getMaxReward(cType),conf.getChance(cType)) * KKPermissions.multiplier(player);
        if (reward == 0)         return;
 else {
          KKKreditzHandler.rewardPlayer(player.getName(),reward);
          player.sendMessage(""String_Node_Str"" + KKKreditzHandler.formatCurrency(reward) + ""String_Node_Str""+ cType.getName());
        }
      }
    }
  }
}"
84862,"public static void setupWorld(String worldName){
  worldConfig.put(worldName,new KKWorldConfig());
  if (!wConfig.getKeys(null).contains(worldName)) {
    setConfigDefaults(worldName);
    log.info(plugName + ""String_Node_Str"" + worldName+ ""String_Node_Str"");
  }
  KKWorldConfig conf=worldConfig.get(worldName);
  for (  CreatureType creature : CreatureType.values()) {
    if (creature == CreatureType.MONSTER)     continue;
    String cName=creature.name();
    if (wConfig.getNode(worldName + ""String_Node_Str"" + cName) == null) {
      wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      wConfig.save();
    }
 else {
      double minReward=wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      double maxReward=wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      double chance=wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      if (minReward < 0) {
        minReward=0;
        wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",minReward);
        wConfig.save();
      }
      if (maxReward < minReward) {
        maxReward=minReward;
        wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",maxReward);
        wConfig.save();
      }
      if (chance < 0) {
        chance=0;
        wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",chance);
        wConfig.save();
      }
      conf.set(creature,minReward,maxReward,chance);
    }
  }
}","public static void setupWorld(String worldName){
  worldConfig.put(worldName,new KKWorldConfig());
  if (!wConfig.getKeys(null).contains(worldName)) {
    setConfigDefaults(worldName);
    log.info(plugName + ""String_Node_Str"" + worldName+ ""String_Node_Str"");
  }
  KKWorldConfig conf=worldConfig.get(worldName);
  for (  CreatureType creature : CreatureType.values()) {
    if (creature == CreatureType.MONSTER)     continue;
    String cName=creature.name().toLowerCase();
    if (wConfig.getNode(worldName + ""String_Node_Str"" + cName) == null) {
      wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      wConfig.save();
    }
 else {
      double minReward=wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      double maxReward=wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      double chance=wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      if (minReward < 0) {
        minReward=0;
        wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",minReward);
        wConfig.save();
      }
      if (maxReward < minReward) {
        maxReward=minReward;
        wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",maxReward);
        wConfig.save();
      }
      if (chance < 0) {
        chance=0;
        wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",chance);
        wConfig.save();
      }
      conf.set(creature,minReward,maxReward,chance);
    }
  }
}"
84863,"@SuppressWarnings(""String_Node_Str"") private void performSearch(){
  if (!""String_Node_Str"".equals(searchTermField.getText().toString())) {
    progress=ProgressDialog.show(this,""String_Node_Str"",""String_Node_Str"");
    Map<String,String> params=populateParameterMap();
    SearchResultsRetrieverTask retriever=new SearchResultsRetrieverTask(MainActivity.this);
    retriever.execute(params);
    hideSearchFields();
  }
 else {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}","@SuppressWarnings(""String_Node_Str"") private void performSearch(){
  if (!""String_Node_Str"".equals(searchTermField.getText().toString())) {
    progress=ProgressDialog.show(this,""String_Node_Str"",""String_Node_Str"");
    Map<String,String> params=populateParameterMap();
    SearchResultsRetrieverTask retriever=new SearchResultsRetrieverTask(MainActivity.this);
    retriever.execute(params);
    hideSearchFields();
    if (!displayedMessage) {
      Toast msg=Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
      msg.setGravity(Gravity.BOTTOM,0,0);
      msg.show();
      displayedMessage=true;
    }
  }
 else {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}"
84864,"private void hideSearchFields(){
  InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(searchTermField.getWindowToken(),0);
  searchTermField.setVisibility(View.GONE);
  submitButton.setVisibility(View.GONE);
  if (!displayedMessage) {
    Toast msg=Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
    msg.setGravity(Gravity.BOTTOM,0,0);
    msg.show();
    displayedMessage=true;
  }
}","private void hideSearchFields(){
  InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(searchTermField.getWindowToken(),0);
  searchTermField.setVisibility(View.GONE);
  submitButton.setVisibility(View.GONE);
}"
84865,"private String fetchPassword(String coords,CommandLine cmd) throws IOException {
  String[] parts=coords.split(""String_Node_Str"");
  if (parts == null || parts.length != 2) {
    printHelpAndExit(options,""String_Node_Str"");
  }
  String row=parts[0];
  String col=parts[1];
  String seq=cmd.getOptionValue(""String_Node_Str"");
  if (seq == null || seq.length() == 0) {
    seq=properties.getString(""String_Node_Str"");
  }
  if (seq == null) {
    seq=Sequence.DEFAULT_SEQUENCE;
  }
  Sequence sequence=null;
  try {
    sequence=Sequence.fromString(seq);
  }
 catch (  SequenceParseException e) {
    printHelpAndExit(options,""String_Node_Str"" + e.getMessage());
  }
  Direction[] directionPriority=null;
  if (cmd.hasOption(""String_Node_Str"")) {
    String collision=cmd.getOptionValue(""String_Node_Str"");
    if (""String_Node_Str"".equalsIgnoreCase(collision) || ""String_Node_Str"".equalsIgnoreCase(collision)) {
      directionPriority=Direction.clockwiseCompass();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(collision) || ""String_Node_Str"".equalsIgnoreCase(collision)) {
      directionPriority=Direction.counterclockwiseCompass();
    }
 else {
      String[] cparts=collision.split(""String_Node_Str"");
      List<Direction> list=new ArrayList<Direction>();
      for (      String c : cparts) {
        try {
          list.add(Direction.fromString(c));
        }
 catch (        SequenceParseException e) {
          printHelpAndExit(options,""String_Node_Str"" + e.getMessage());
        }
      }
      directionPriority=list.toArray(new Direction[list.size()]);
    }
  }
  boolean skipStart=false;
  if (cmd.hasOption(""String_Node_Str"") || properties.getBoolean(""String_Node_Str"",false)) {
    skipStart=true;
  }
  int skipInterval=properties.getInt(""String_Node_Str"",0);
  if (cmd.hasOption(""String_Node_Str"")) {
    String skipStr=cmd.getOptionValue(""String_Node_Str"");
    try {
      skipInterval=Integer.valueOf(skipStr);
    }
 catch (    NumberFormatException e) {
      printHelpAndExit(options,""String_Node_Str"");
    }
  }
  if (skipInterval < 0) {
    printHelpAndExit(options,""String_Node_Str"");
  }
  TabulaRecta tabulaRecta=getDatabase(cmd);
  int rowIndex=tabulaRecta.getHeader().getIndex(row);
  int colIndex=tabulaRecta.getHeader().getIndex(col);
  if (rowIndex == -1 || colIndex == -1) {
    die(""String_Node_Str"");
  }
  String password=tabulaRecta.getPassword(rowIndex,colIndex,sequence,skipStart,skipInterval,directionPriority);
  return password;
}","private String fetchPassword(String coords,CommandLine cmd) throws IOException {
  String[] parts=coords.split(""String_Node_Str"");
  if (parts == null || parts.length != 2) {
    printHelpAndExit(options,""String_Node_Str"");
  }
  String row=parts[0];
  String col=parts[1];
  String seq=cmd.getOptionValue(""String_Node_Str"");
  if (seq == null || seq.length() == 0) {
    String[] seqItems=properties.getStringArray(""String_Node_Str"");
    seq=StringUtils.join(seqItems,""String_Node_Str"");
  }
  if (seq == null) {
    seq=Sequence.DEFAULT_SEQUENCE;
  }
  Sequence sequence=null;
  try {
    sequence=Sequence.fromString(seq);
  }
 catch (  SequenceParseException e) {
    printHelpAndExit(options,""String_Node_Str"" + e.getMessage());
  }
  Direction[] directionPriority=null;
  if (cmd.hasOption(""String_Node_Str"")) {
    String collision=cmd.getOptionValue(""String_Node_Str"");
    if (""String_Node_Str"".equalsIgnoreCase(collision) || ""String_Node_Str"".equalsIgnoreCase(collision)) {
      directionPriority=Direction.clockwiseCompass();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(collision) || ""String_Node_Str"".equalsIgnoreCase(collision)) {
      directionPriority=Direction.counterclockwiseCompass();
    }
 else {
      String[] cparts=collision.split(""String_Node_Str"");
      List<Direction> list=new ArrayList<Direction>();
      for (      String c : cparts) {
        try {
          list.add(Direction.fromString(c));
        }
 catch (        SequenceParseException e) {
          printHelpAndExit(options,""String_Node_Str"" + e.getMessage());
        }
      }
      directionPriority=list.toArray(new Direction[list.size()]);
    }
  }
  boolean skipStart=false;
  if (cmd.hasOption(""String_Node_Str"") || properties.getBoolean(""String_Node_Str"",false)) {
    skipStart=true;
  }
  int skipInterval=properties.getInt(""String_Node_Str"",0);
  if (cmd.hasOption(""String_Node_Str"")) {
    String skipStr=cmd.getOptionValue(""String_Node_Str"");
    try {
      skipInterval=Integer.valueOf(skipStr);
    }
 catch (    NumberFormatException e) {
      printHelpAndExit(options,""String_Node_Str"");
    }
  }
  if (skipInterval < 0) {
    printHelpAndExit(options,""String_Node_Str"");
  }
  TabulaRecta tabulaRecta=getDatabase(cmd);
  int rowIndex=tabulaRecta.getHeader().getIndex(row);
  int colIndex=tabulaRecta.getHeader().getIndex(col);
  if (rowIndex == -1 || colIndex == -1) {
    die(""String_Node_Str"");
  }
  String password=tabulaRecta.getPassword(rowIndex,colIndex,sequence,skipStart,skipInterval,directionPriority);
  return password;
}"
84866,"public void move(Direction direction){
  prevRow=row;
  prevCol=col;
switch (direction) {
case N:
    row--;
  break;
case S:
row++;
break;
case E:
col--;
break;
case W:
col++;
break;
case NE:
row--;
col--;
break;
case NW:
row--;
col++;
break;
case SE:
row++;
col--;
break;
case SW:
row++;
col++;
break;
}
}","public void move(Direction direction){
  prevRow=row;
  prevCol=col;
switch (direction) {
case N:
    row--;
  break;
case S:
row++;
break;
case E:
col++;
break;
case W:
col--;
break;
case NE:
row--;
col++;
break;
case NW:
row--;
col--;
break;
case SE:
row++;
col++;
break;
case SW:
row++;
col--;
break;
}
}"
84867,"public void setWithinBounds(int maxRow,int maxCol){
  if (row > maxRow) {
    row=maxRow;
  }
  if (col > maxCol) {
    col=maxCol;
  }
}","public void setWithinBounds(int maxRow,int maxCol){
  if (row > maxRow) {
    row=maxRow;
  }
 else   if (row < 0) {
    row=0;
  }
  if (col > maxCol) {
    col=maxCol;
  }
 else   if (col < 0) {
    col=0;
  }
}"
84868,"public String getPassword(int startRow,int startCol,Sequence sequence){
  String pass=this.get(startRow,startCol);
  int row=startRow;
  int col=startCol;
  for (  SequenceItem i : sequence.getItemList()) {
    Direction dir=i.getDirection();
    for (int x=0; x < i.getLength(); x++) {
switch (dir) {
case N:
        row--;
      break;
case S:
    row++;
case E:
  col--;
case W:
col++;
case NE:
row--;
col--;
case NW:
row++;
col++;
case SE:
row++;
col--;
case SW:
row--;
col++;
}
if (row >= this.rows()) row=this.rows() - 1;
if (col >= this.cols()) col=this.cols() - 1;
pass+=this.get(row,col);
}
}
return pass;
}","public String getPassword(int startRow,int startCol,Sequence sequence){
  String pass=this.get(startRow,startCol);
  int row=startRow;
  int col=startCol;
  for (  SequenceItem i : sequence.getItemList()) {
    Direction dir=i.getDirection();
    for (int x=0; x < i.getLength(); x++) {
switch (dir) {
case N:
        row--;
      break;
case S:
    row++;
case E:
  col--;
case W:
col++;
case NE:
row--;
col--;
case NW:
row--;
col++;
case SE:
row++;
col--;
case SW:
row++;
col++;
}
if (row >= this.rows()) row=this.rows() - 1;
if (col >= this.cols()) col=this.cols() - 1;
pass+=this.get(row,col);
}
}
return pass;
}"
84869,"public static CtClass getCtClass(String className) throws BytecodeManipulationException {
  try {
    return classPool.get(className);
  }
 catch (  Exception e) {
    throw new BytecodeManipulationException(""String_Node_Str"",e);
  }
}","public static CtClass getCtClass(String className) throws BytecodeManipulationException {
  try {
    return classPool.get(className);
  }
 catch (  Exception e) {
    return null;
  }
}"
84870,"public boolean parseShares(){
  ArrayList<String> lines=createShares();
  ArrayList<String> worldList=new ArrayList<String>();
  for (  String line : lines) {
    String[] content=line.split(""String_Node_Str"");
    if ((content[0].matches(""String_Node_Str""))) {
      String[] worlds=content[0].split(""String_Node_Str"");
      if (plugin.getServer().getWorld(worlds[0]) == null) {
        MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[0]);
        return false;
      }
 else {
        if (worldList.contains(worlds[0])) {
          MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[0]);
          return false;
        }
        worldList.add(worlds[0]);
        int i=1;
        while (i < worlds.length) {
          if (plugin.getServer().getWorld(worlds[i]) == null) {
            MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[i]);
          }
 else {
            if (worldList.contains(worlds[i])) {
              MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[i]);
              return false;
            }
 else {
              plugin.sharesMap.put(worlds[i],worlds[0]);
            }
          }
          i++;
        }
      }
    }
  }
  return true;
}","public boolean parseShares(){
  ArrayList<String> lines=createShares();
  ArrayList<String> worldList=new ArrayList<String>();
  for (  String line : lines) {
    String[] content=line.split(""String_Node_Str"");
    if (!(content[0].matches(""String_Node_Str""))) {
      String[] worlds=content[0].split(""String_Node_Str"");
      if (plugin.getServer().getWorld(worlds[0]) == null) {
        MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[0]);
        return false;
      }
 else {
        if (worldList.contains(worlds[0])) {
          MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[0]);
          return false;
        }
        worldList.add(worlds[0]);
        int i=1;
        while (i < worlds.length) {
          if (plugin.getServer().getWorld(worlds[i]) == null) {
            MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[i]);
          }
 else {
            if (worldList.contains(worlds[i])) {
              MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[i]);
              return false;
            }
 else {
              plugin.sharesMap.put(worlds[i],worlds[0]);
              System.out.println(""String_Node_Str"" + worlds[i] + ""String_Node_Str""+ worlds[0]);
            }
          }
          i++;
        }
      }
    }
  }
  return true;
}"
84871,"public void deleteIfUnused(String inventory){
  String[] parts=inventory.split(""String_Node_Str"");
  if (parts[0].matches(""String_Node_Str"")) {
    if (parts.length != 2 || this.sharesMap.containsKey(parts[1])) {
      inventories.remove(inventory);
      debugger.debugEvent(MultiInvEvent.INVENTORY_DELETE,new String[]{inventory});
    }
  }
}","public void deleteIfUnused(String inventory){
  String[] parts=inventory.split(""String_Node_Str"");
  if (parts[1].matches(""String_Node_Str"")) {
    if (parts.length != 2 || this.sharesMap.containsKey(parts[1])) {
      inventories.remove(inventory);
      debugger.debugEvent(MultiInvEvent.INVENTORY_DELETE_UNUSED,new String[]{inventory});
    }
  }
}"
84872,"@Override public void onEnable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  pluginName=pdfFile.getName();
  Boolean shares=fileReader.parseShares();
  if (shares == false) {
    MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str"");
  }
 else {
    MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str"");
  }
  deSerialize();
  if (shares) {
    cleanWorldInventories();
  }
  log.info(""String_Node_Str"" + pluginName + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str"");
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.WORLD_SAVE,worldListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.WORLD_LOAD,worldListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_TELEPORT,playerListener,Priority.Monitor,this);
  setupPermissions();
}","@Override public void onEnable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  pluginName=pdfFile.getName();
  Boolean shares=fileReader.parseShares();
  if (shares == false) {
    MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str"");
    MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str"");
    pluginEnabled=false;
  }
 else {
    MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str"");
    pluginEnabled=true;
  }
  deSerialize();
  if (shares) {
    cleanWorldInventories();
  }
  log.info(""String_Node_Str"" + pluginName + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str"");
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.WORLD_SAVE,worldListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.WORLD_LOAD,worldListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_TELEPORT,playerListener,Priority.Monitor,this);
  setupPermissions();
}"
84873,"public void debugEvent(MultiInvEvent event,String[] args){
  String message=""String_Node_Str"";
  String message2=""String_Node_Str"";
  if (debugging == true) {
switch (event) {
case WORLD_CHANGE:
      message=dividerStart + args[0] + ""String_Node_Str""+ dividerEnd;
    int shareNumber=shareCheck(args[1],args[2]);
  message2=""String_Node_Str"";
switch (shareNumber) {
case 0:
  message2=""String_Node_Str"" + args[1] + ""String_Node_Str""+ args[2];
break;
case 1:
message2=""String_Node_Str"" + args[1] + ""String_Node_Str""+ args[2];
break;
case 2:
message2=""String_Node_Str"" + args[1] + ""String_Node_Str""+ args[2]+ ""String_Node_Str"";
break;
case 3:
message2=""String_Node_Str"" + args[1] + ""String_Node_Str""+ args[2]+ ""String_Node_Str"";
break;
case 4:
message2=""String_Node_Str"" + args[1] + ""String_Node_Str""+ args[2]+ ""String_Node_Str"";
break;
default :
message2=""String_Node_Str"";
break;
}
sendDebuggersMessage(message);
sendDebuggersMessage(message2);
break;
case INVENTORY_SAVE:
message=""String_Node_Str"" + args[0] + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
case INVENTORY_LOAD:
message=""String_Node_Str"" + args[0] + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
case INVENTORY_NEW:
message=""String_Node_Str"" + args[0] + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
case FILE_SAVE:
message=""String_Node_Str"";
sendDebuggersMessage(message);
break;
case FILE_LOAD:
message=""String_Node_Str"";
sendDebuggersMessage(message);
break;
case PLAYERS_UPDATE:
message=""String_Node_Str"";
sendDebuggersMessage(message);
break;
case INVENTORY_DELETE:
message=""String_Node_Str"" + args[0] + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
case INVENTORY_ADDED:
message=""String_Node_Str"" + args[0] + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
case PLAYER_LOGIN:
message=dividerStart + args[0] + ""String_Node_Str""+ dividerEnd;
sendDebuggersMessage(message);
break;
case PLAYER_LOGOUT:
message=dividerStart + args[0] + ""String_Node_Str""+ dividerEnd;
sendDebuggersMessage(message);
break;
default :
message2=""String_Node_Str"" + event.toString() + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
}
}
}","public void debugEvent(MultiInvEvent event,String[] args){
  String message=""String_Node_Str"";
  String message2=""String_Node_Str"";
  if (debugging == true) {
switch (event) {
case WORLD_CHANGE:
      message=dividerStart + args[0] + ""String_Node_Str""+ dividerEnd;
    int shareNumber=shareCheck(args[1],args[2]);
  message2=""String_Node_Str"";
switch (shareNumber) {
case 0:
  message2=""String_Node_Str"" + args[1] + ""String_Node_Str""+ args[2];
break;
case 1:
message2=""String_Node_Str"" + args[1] + ""String_Node_Str""+ args[2];
break;
case 2:
message2=""String_Node_Str"" + args[1] + ""String_Node_Str""+ args[2]+ ""String_Node_Str"";
break;
case 3:
message2=""String_Node_Str"" + args[1] + ""String_Node_Str""+ args[2]+ ""String_Node_Str"";
break;
case 4:
message2=""String_Node_Str"" + args[1] + ""String_Node_Str""+ args[2]+ ""String_Node_Str"";
break;
default :
message2=""String_Node_Str"";
break;
}
sendDebuggersMessage(message);
sendDebuggersMessage(message2);
break;
case INVENTORY_SAVE:
message=""String_Node_Str"" + args[0] + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
case INVENTORY_LOAD:
message=""String_Node_Str"" + args[0] + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
case INVENTORY_NEW:
message=""String_Node_Str"" + args[0] + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
case FILE_SAVE:
message=""String_Node_Str"";
sendDebuggersMessage(message);
break;
case FILE_LOAD:
message=""String_Node_Str"";
sendDebuggersMessage(message);
break;
case PLAYERS_UPDATE:
message=""String_Node_Str"";
sendDebuggersMessage(message);
break;
case INVENTORY_DELETE:
message=""String_Node_Str"" + args[0] + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
case INVENTORY_ADDED:
message=""String_Node_Str"" + args[0] + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
case PLAYER_LOGIN:
message=dividerStart + args[0] + ""String_Node_Str""+ dividerEnd;
sendDebuggersMessage(message);
break;
case PLAYER_LOGOUT:
message=dividerStart + args[0] + ""String_Node_Str""+ dividerEnd;
sendDebuggersMessage(message);
break;
case INVENTORY_LOAD_NULL:
message=""String_Node_Str"" + args[0] + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
case INVENTORY_LOAD_NEW:
message=""String_Node_Str"" + args[0] + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
case INVENTORY_DELETE_UNUSED:
message=""String_Node_Str"" + args[0] + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
default :
message2=""String_Node_Str"" + event.toString() + ""String_Node_Str"";
sendDebuggersMessage(message);
break;
}
}
}"
84874,"public void loadWorldInventory(Player player,String world){
  boolean newMember=true;
  if (plugin.sharesMap.containsKey(world)) {
    world=plugin.sharesMap.get(world);
  }
  String worldCheckName=""String_Node_Str"" + world;
  for (  String inventory : plugin.inventories.keySet()) {
    String[] parts=inventory.split(""String_Node_Str"");
    if (parts[0].equals(player.getName())) {
      newMember=false;
      if (parts[1].equals(worldCheckName)) {
        loadInventory(plugin.inventories.get(inventory),player);
        plugin.debugger.debugEvent(MultiInvEvent.INVENTORY_LOAD,new String[]{inventory});
        return;
      }
    }
  }
  if (!newMember) {
    loadNewInventory(player);
  }
}","public void loadWorldInventory(Player player,String world){
  boolean newMember=true;
  if (plugin.sharesMap.containsKey(world)) {
    world=plugin.sharesMap.get(world);
  }
  String worldCheckName=""String_Node_Str"" + world;
  for (  String inventory : plugin.inventories.keySet()) {
    String[] parts=inventory.split(""String_Node_Str"");
    if (parts[0].equals(player.getName())) {
      newMember=false;
      if (parts[1].equals(worldCheckName)) {
        loadInventory(plugin.inventories.get(inventory),player);
        plugin.debugger.debugEvent(MultiInvEvent.INVENTORY_LOAD,new String[]{inventory});
        return;
      }
    }
  }
  if (!newMember) {
    loadNewInventory(player);
    plugin.debugger.debugEvent(MultiInvEvent.INVENTORY_LOAD_NEW,new String[]{player.getName()});
  }
}"
84875,"public void onPlayerTeleport(PlayerTeleportEvent event){
  String worldTo=event.getTo().getWorld().getName();
  Player player=event.getPlayer();
  String worldFrom=event.getFrom().getWorld().getName();
  plugin.debugger.debugEvent(MultiInvEvent.WORLD_CHANGE,new String[]{player.getName(),worldFrom,worldTo});
  String sharedWorld=plugin.sharesMap.get(worldTo);
  if (sharedWorld != null) {
    worldTo=sharedWorld;
    plugin.serialize();
  }
  if (!(worldTo.equals(worldFrom))) {
    plugin.playerInventory.storeWorldInventory(player,worldFrom);
    plugin.playerInventory.loadWorldInventory(player,worldTo);
  }
}","public void onPlayerTeleport(PlayerTeleportEvent event){
  String worldTo=event.getTo().getWorld().getName();
  Player player=event.getPlayer();
  String worldFrom=event.getFrom().getWorld().getName();
  plugin.debugger.debugEvent(MultiInvEvent.WORLD_CHANGE,new String[]{player.getName(),worldFrom,worldTo});
  if (plugin.sharesMap.containsKey(worldTo)) {
    worldTo=plugin.sharesMap.get(worldTo);
  }
  if (plugin.sharesMap.containsKey(worldFrom)) {
    worldFrom=plugin.sharesMap.get(worldFrom);
  }
  if (!(worldTo.equals(worldFrom))) {
    plugin.playerInventory.storeWorldInventory(player,worldFrom);
    plugin.playerInventory.loadWorldInventory(player,worldTo);
  }
}"
84876,"public boolean parseShares(){
  ArrayList<String> lines=createShares();
  ArrayList<String> worldList=new ArrayList<String>();
  for (  String line : lines) {
    String[] content=line.split(""String_Node_Str"");
    if (!(content[0].matches(""String_Node_Str""))) {
      String[] worlds=content[0].split(""String_Node_Str"");
      if (plugin.getServer().getWorld(worlds[0]) == null) {
        MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[0]);
        return false;
      }
 else {
        if (worldList.contains(worlds[0])) {
          MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[0]);
          return false;
        }
        worldList.add(worlds[0]);
        int i=1;
        while (i < worlds.length) {
          if (plugin.getServer().getWorld(worlds[i]) == null) {
            MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[i]);
          }
 else {
            if (worldList.contains(worlds[i])) {
              MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[i]);
              return false;
            }
 else {
              plugin.sharesMap.put(worlds[i],worlds[0]);
            }
          }
          i++;
        }
      }
    }
  }
  return true;
}","public boolean parseShares(){
  ArrayList<String> lines=createShares();
  ArrayList<String> worldList=new ArrayList<String>();
  for (  String line : lines) {
    String[] content=line.split(""String_Node_Str"");
    if (!(content[0].matches(""String_Node_Str""))) {
      String[] worlds=content[0].split(""String_Node_Str"");
      if (plugin.getServer().getWorld(worlds[0]) == null) {
        MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[0]);
        return false;
      }
 else {
        if (worldList.contains(worlds[0])) {
          MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[0]);
          return false;
        }
        worldList.add(worlds[0]);
        int i=1;
        while (i < worlds.length) {
          if (plugin.getServer().getWorld(worlds[i]) == null) {
            MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[i]);
          }
 else {
            if (worldList.contains(worlds[i])) {
              MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[i]);
              return false;
            }
 else {
              worldList.add(worlds[i]);
              plugin.sharesMap.put(worlds[i],worlds[0]);
            }
          }
          i++;
        }
      }
    }
  }
  return true;
}"
84877,"@Override public void onWorldSave(WorldSaveEvent event){
  for (  Player player : plugin.getServer().getOnlinePlayers()) {
    plugin.playerInventory.storeWorldInventory(player,player.getWorld().getName());
  }
  plugin.serialize();
}","@Override public void onWorldSave(WorldSaveEvent event){
  for (  Player player : plugin.getServer().getOnlinePlayers()) {
    plugin.playerInventory.storeWorldInventory(player,player.getWorld().getName());
  }
}"
84878,"@Override public void onWorldLoad(WorldLoadEvent event){
  MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ event.getWorld().getName()+ ""String_Node_Str"");
  Boolean shares=plugin.fileReader.parseShares();
  if (shares == false) {
    MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str"");
    return;
  }
  MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str"");
  plugin.cleanWorldInventories();
}","@Override public void onWorldLoad(WorldLoadEvent event){
  MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ event.getWorld().getName()+ ""String_Node_Str"");
  Boolean shares=plugin.fileReader.parseShares();
  if (shares == false) {
    MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str"");
    MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str"");
    plugin.pluginEnabled=false;
    return;
  }
  MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str"");
  plugin.pluginEnabled=true;
  plugin.cleanWorldInventories();
}"
84879,"private void convertFormat(String inventory){
  String inventory2=inventory.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!(inventory.equals(inventory2))) {
    String[] parts=inventory2.split(""String_Node_Str"");
    if (parts.length > 2) {
      inventory2=parts[0] + ""String_Node_Str"" + parts[1];
    }
    inventories.put(inventory2,inventories.get(inventory));
    debugger.debugEvent(MultiInvEvent.INVENTORY_ADDED,new String[]{inventory2});
    inventories.remove(inventory);
    debugger.debugEvent(MultiInvEvent.INVENTORY_DELETE,new String[]{inventory});
    log.info(""String_Node_Str"" + pluginName + ""String_Node_Str""+ inventory+ ""String_Node_Str""+ inventory2);
  }
  return;
}","private String convertFormat(String inventory){
  String inventory2=inventory.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!(inventory.equals(inventory2))) {
    String[] parts=inventory2.split(""String_Node_Str"");
    if (parts.length > 2) {
      inventory2=parts[0] + ""String_Node_Str"" + parts[1];
    }
    inventories.put(inventory2,inventories.get(inventory));
    debugger.debugEvent(MultiInvEvent.INVENTORY_ADDED,new String[]{inventory2});
    inventories.remove(inventory);
    debugger.debugEvent(MultiInvEvent.INVENTORY_DELETE,new String[]{inventory});
    log.info(""String_Node_Str"" + pluginName + ""String_Node_Str""+ inventory+ ""String_Node_Str""+ inventory2);
  }
  return inventory2;
}"
84880,"public void deleteIfUnused(String inventory){
  String[] parts=inventory.split(""String_Node_Str"");
  if (parts.length != 2 || this.sharesMap.contains(parts[1])) {
    inventories.remove(inventory);
    debugger.debugEvent(MultiInvEvent.INVENTORY_DELETE,new String[]{inventory});
  }
}","public void deleteIfUnused(String inventory){
  String[] parts=inventory.split(""String_Node_Str"");
  if (parts.length != 2 || this.sharesMap.containsKey(parts[1])) {
    inventories.remove(inventory);
    debugger.debugEvent(MultiInvEvent.INVENTORY_DELETE,new String[]{inventory});
  }
}"
84881,"public void cleanWorldInventories(){
  for (  String inventory : inventories.keySet()) {
    convertFormat(inventory);
    deleteIfUnused(inventory);
  }
  serialize();
  return;
}","public void cleanWorldInventories(){
  for (  String inventory : inventories.keySet()) {
    deleteIfUnused(convertFormat(inventory));
  }
  serialize();
  return;
}"
84882,"private int shareCheck(String world1,String world2){
  if (plugin.sharedNames.contains(world1)) {
    if (plugin.sharedNames.contains(world2)) {
      if (plugin.sharedWorlds.containsKey(plugin.getServer().getWorld(world1))) {
        for (        World world : plugin.sharedWorlds.get(plugin.getServer().getWorld(world1))) {
          if (world.getName().equals(world2)) {
            return 4;
          }
        }
      }
      if (plugin.sharedWorlds.containsKey(plugin.getServer().getWorld(world2))) {
        for (        World world : plugin.sharedWorlds.get(plugin.getServer().getWorld(world2))) {
          if (world.getName().equals(world1)) {
            return 4;
          }
        }
      }
      return 3;
    }
    return 1;
  }
  if (plugin.sharedNames.contains(world2)) {
    return 2;
  }
  return 0;
}","private int shareCheck(String world1,String world2){
  if (plugin.sharesMap.containsKey(world1)) {
    if (plugin.sharesMap.containsKey(world2)) {
      return 3;
    }
    return 1;
  }
  if (plugin.sharesMap.containsKey(world2)) {
    return 2;
  }
  return 0;
}"
84883,"public void storeWorldInventory(Player player,String world){
  if (plugin.sharesMap.contains(world)) {
    world=plugin.sharesMap.get(world);
  }
  String inventoryName=player.getName() + ""String_Node_Str"" + world;
  MultiInvPlayerItem[][] inventory=saveInventory(player);
  plugin.inventories.put(inventoryName,inventory);
  plugin.debugger.debugEvent(MultiInvEvent.INVENTORY_SAVE,new String[]{inventoryName});
  plugin.serialize();
}","public void storeWorldInventory(Player player,String world){
  if (plugin.sharesMap.containsKey(world)) {
    world=plugin.sharesMap.get(world);
  }
  String inventoryName=player.getName() + ""String_Node_Str"" + world;
  MultiInvPlayerItem[][] inventory=saveInventory(player);
  plugin.inventories.put(inventoryName,inventory);
  plugin.debugger.debugEvent(MultiInvEvent.INVENTORY_SAVE,new String[]{inventoryName});
  plugin.serialize();
}"
84884,"public void loadWorldInventory(Player player,String world){
  boolean newMember=true;
  if (plugin.sharesMap.contains(world)) {
    world=plugin.sharesMap.get(world);
  }
  String worldCheckName=""String_Node_Str"" + world;
  for (  String inventory : plugin.inventories.keySet()) {
    String[] parts=inventory.split(""String_Node_Str"");
    if (parts[0].equals(player.getName())) {
      newMember=false;
      if (parts[1].equals(worldCheckName)) {
        loadInventory(plugin.inventories.get(inventory),player);
        plugin.debugger.debugEvent(MultiInvEvent.INVENTORY_LOAD,new String[]{inventory});
      }
    }
  }
  if (!newMember) {
    loadNewInventory(player);
  }
}","public void loadWorldInventory(Player player,String world){
  boolean newMember=true;
  if (plugin.sharesMap.containsKey(world)) {
    world=plugin.sharesMap.get(world);
  }
  String worldCheckName=""String_Node_Str"" + world;
  for (  String inventory : plugin.inventories.keySet()) {
    String[] parts=inventory.split(""String_Node_Str"");
    if (parts[0].equals(player.getName())) {
      newMember=false;
      if (parts[1].equals(worldCheckName)) {
        loadInventory(plugin.inventories.get(inventory),player);
        plugin.debugger.debugEvent(MultiInvEvent.INVENTORY_LOAD,new String[]{inventory});
        return;
      }
    }
  }
  if (!newMember) {
    loadNewInventory(player);
  }
}"
84885,"public boolean parseShares(){
  ArrayList<String> lines=createShares();
  ArrayList<String> worldList=new ArrayList<String>();
  for (  String line : lines) {
    String[] content=line.split(""String_Node_Str"");
    if (content[0] != ""String_Node_Str"") {
      String[] worlds=content[0].split(""String_Node_Str"");
      if (plugin.getServer().getWorld(worlds[0]) == null) {
        MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[0]);
        return false;
      }
 else {
        if (worldList.contains(worlds[0])) {
          MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[0]);
          return false;
        }
        worldList.add(worlds[0]);
        int i=1;
        while (i < worlds.length) {
          if (plugin.getServer().getWorld(worlds[i]) == null) {
            MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[i]);
          }
 else {
            if (worldList.contains(worlds[i])) {
              MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[i]);
              return false;
            }
 else {
              plugin.sharesMap.put(worlds[1],worlds[0]);
            }
          }
          i++;
        }
      }
    }
  }
  return true;
}","public boolean parseShares(){
  ArrayList<String> lines=createShares();
  ArrayList<String> worldList=new ArrayList<String>();
  for (  String line : lines) {
    String[] content=line.split(""String_Node_Str"");
    if ((content[0].matches(""String_Node_Str""))) {
      String[] worlds=content[0].split(""String_Node_Str"");
      if (plugin.getServer().getWorld(worlds[0]) == null) {
        MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[0]);
        return false;
      }
 else {
        if (worldList.contains(worlds[0])) {
          MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[0]);
          return false;
        }
        worldList.add(worlds[0]);
        int i=1;
        while (i < worlds.length) {
          if (plugin.getServer().getWorld(worlds[i]) == null) {
            MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[i]);
          }
 else {
            if (worldList.contains(worlds[i])) {
              MultiInv.log.info(""String_Node_Str"" + MultiInv.pluginName + ""String_Node_Str""+ worlds[i]);
              return false;
            }
 else {
              plugin.sharesMap.put(worlds[i],worlds[0]);
            }
          }
          i++;
        }
      }
    }
  }
  return true;
}"
84886,"@Override public boolean onOptionsItemSelected(MenuItem item){
  Intent intent=new Intent();
switch (item.getItemId()) {
case MENU_MANAGE:
    Intent open=new Intent();
  open.setClass(MyGoogleMap.this,mlist.class);
timer.cancel();
MyGoogleMap.this.finish();
startActivity(open);
return true;
case MENU_EXIT:
timer.cancel();
MyGoogleMap.this.finish();
break;
}
return true;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  Intent intent=new Intent();
switch (item.getItemId()) {
case MENU_MANAGE:
    Intent open=new Intent();
  open.setClass(MyGoogleMap.this,mlist.class);
timer.cancel();
MyGoogleMap.this.finish();
startActivity(open);
return true;
case MENU_EXIT:
timer.cancel();
android.os.Process.killProcess(android.os.Process.myPid());
MyGoogleMap.this.finish();
break;
}
return true;
}"
84887,"public static void save(){
  String policy=params.get(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + policy);
  String identity=PolicyManager.sharedManager().save(policy);
  String success=identity == null ? ""String_Node_Str"" : ""String_Node_Str"";
  renderJSON(new ResponseMessage(success,identity));
}","public static void save(){
  String policy=params.get(""String_Node_Str"");
  Logger.info(""String_Node_Str"",policy);
  String identity=PolicyManager.sharedManager().save(policy);
  String success=identity == null ? ""String_Node_Str"" : ""String_Node_Str"";
  renderJSON(new ResponseMessage(success,identity));
}"
84888,"@Override public void run(){
  init();
  try {
    while (true) {
      if (!rpc.isConnected()) {
        try {
          Logger.info(""String_Node_Str"");
          rpc.connect(InetAddress.getByName(hwdbHost),987);
          Logger.info(""String_Node_Str"");
        }
 catch (        final Exception e) {
          Logger.error(""String_Node_Str"",e.getMessage());
        }
      }
      while (rpc.isConnected()) {
        try {
          updateLeases();
          for (          Query q : PolicyManager.sharedManager().activePolicies.values()) {
            String query=q.toString();
            if (q != null) {
              try {
                String result=rpc.call(query);
                if (result != null)                 q.process(result);
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
            }
          }
        }
 catch (        final Exception e) {
          Logger.error(""String_Node_Str"",e.getMessage());
        }
        try {
          Thread.sleep(TIME_DELTA);
        }
 catch (        final Exception e) {
        }
      }
      try {
        Thread.sleep(5000);
      }
 catch (      final Exception e) {
      }
    }
  }
 catch (  final Exception e) {
    Logger.error(""String_Node_Str"",e.getMessage());
  }
}","@Override public void run(){
  init();
  try {
    while (true) {
      if (!rpc.isConnected()) {
        try {
          Logger.info(""String_Node_Str"");
          rpc.connect(InetAddress.getByName(hwdbHost),987);
          Logger.info(""String_Node_Str"");
        }
 catch (        final Exception e) {
          Logger.error(""String_Node_Str"",e.getMessage());
        }
      }
      while (rpc.isConnected()) {
        try {
          updateLeases();
          for (          Query q : PolicyManager.sharedManager().activePolicies.values()) {
            if (q != null) {
              String query=q.toString();
              try {
                String result=rpc.call(query);
                if (result != null)                 q.process(result);
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
            }
          }
        }
 catch (        final Exception e) {
          Logger.error(""String_Node_Str"",e.getMessage());
        }
        try {
          Thread.sleep(TIME_DELTA);
        }
 catch (        final Exception e) {
        }
      }
      try {
        Thread.sleep(5000);
      }
 catch (      final Exception e) {
      }
    }
  }
 catch (  final Exception e) {
    Logger.error(""String_Node_Str"",e.getMessage());
  }
}"
84889,"public Long[] getLatestActivity(String device){
  String query=null;
  try {
    String ipaddr=LeaseData.sharedData().lookup(device);
    if (ipaddr != null) {
      if (lastactivity > 0) {
        final String s=String.format(""String_Node_Str"",lastactivity * 1000000);
        query=String.format(""String_Node_Str"",s,ipaddr);
      }
 else {
        query=String.format(""String_Node_Str"",ipaddr);
      }
      return processactivity(rpc.call(query),ipaddr);
    }
 else {
      Logger.info(""String_Node_Str"",device);
    }
  }
 catch (  IOException e) {
    Logger.error(e,""String_Node_Str"");
  }
  return null;
}","public Long[] getLatestActivity(String device){
  String query=null;
  try {
    String ipaddr=LeaseData.sharedData().lookup(device);
    if (ipaddr != null) {
      if (lastactivity > 0) {
        final String s=String.format(""String_Node_Str"",lastactivity * 1000000);
        query=String.format(""String_Node_Str"",s,ipaddr);
      }
 else {
        query=String.format(""String_Node_Str"",ipaddr);
      }
      return processactivity(rpc.call(query),ipaddr);
    }
 else {
      Logger.info(""String_Node_Str"",device);
    }
  }
 catch (  IOException e) {
    Logger.error(e,""String_Node_Str"");
  }
  return new Long[]{System.currentTimeMillis(),0L};
}"
84890,"public Long getLatestBandwidth(String device){
  String query=null;
  try {
    String ipaddr=LeaseData.sharedData().lookup(device);
    if (ipaddr != null) {
      if (lastbwrequest > 0) {
        final String s=String.format(""String_Node_Str"",lastbwrequest * 1000000);
        query=String.format(""String_Node_Str"",s,ipaddr,ipaddr);
      }
 else {
        query=String.format(""String_Node_Str"",ipaddr,ipaddr);
      }
      return processbwidth(rpc.call(query),ipaddr);
    }
 else {
      Logger.info(""String_Node_Str"",device);
    }
  }
 catch (  IOException e) {
    Logger.error(e,""String_Node_Str"");
  }
  return 0L;
}","public Long[] getLatestBandwidth(String device){
  String sinceLastQuery=null;
  String withinTimeRangeQuery=null;
  try {
    String ipaddr=LeaseData.sharedData().lookup(device);
    if (ipaddr != null) {
      if (lastbwrequest > 0) {
        Logger.info(""String_Node_Str"",new Date(lastbwrequest).toString());
        final String s=String.format(""String_Node_Str"",lastbwrequest * 1000000);
        sinceLastQuery=String.format(""String_Node_Str"",s,BandwidthQuery.subnet,BandwidthQuery.subnet);
      }
 else {
        sinceLastQuery=String.format(""String_Node_Str"",BandwidthQuery.subnet,BandwidthQuery.subnet);
      }
      withinTimeRangeQuery=String.format(""String_Node_Str"",BandwidthQuery.timeRange,BandwidthQuery.subnet,BandwidthQuery.subnet);
      Logger.info(""String_Node_Str"",sinceLastQuery);
      Logger.info(""String_Node_Str"",withinTimeRangeQuery);
      String tr=rpc.call(withinTimeRangeQuery);
      String sl=rpc.call(sinceLastQuery);
      Long sinceLastBytes=processbandwidth(sl,ipaddr);
      Long timeRangeBytes=processbandwidth(tr,ipaddr);
      return new Long[]{sinceLastBytes,timeRangeBytes,BandwidthQuery.BANDWIDTH_LIMIT};
    }
 else {
      Logger.info(""String_Node_Str"",device);
    }
  }
 catch (  IOException e) {
    Logger.error(e,""String_Node_Str"");
  }
  return new Long[]{0L,0L,BandwidthQuery.BANDWIDTH_LIMIT};
}"
84891,"@Override public void process(String data){
  String[] rows=data.split(""String_Node_Str"");
  last=0;
  if (rows.length > 2) {
    for (int i=2; i < rows.length; i++) {
      System.err.println(rows[i]);
      String row[]=rows[i].split(DELIMETER);
      if (row[1].equals(ipaddr)) {
        if (Long.valueOf(row[0]) >= triggerbytes) {
          Logger.info(""String_Node_Str"");
          triggered=true;
        }
      }
    }
  }
}","@Override public void process(String data){
  String[] rows=data.split(""String_Node_Str"");
  last=0;
  if (rows.length > 2) {
    for (int i=2; i < rows.length; i++) {
      System.err.println(rows[i]);
      String row[]=rows[i].split(DELIMETER);
      if (row[1].equals(ipaddr)) {
        Logger.info(""String_Node_Str"",row[0],String.valueOf(triggerbytes));
        if (Long.valueOf(row[0]) >= triggerbytes) {
          Logger.info(""String_Node_Str"");
          triggered=true;
        }
      }
    }
  }
}"
84892,"@Override public void process(String data){
  processor.process(data);
  if (processor.triggered()) {
    processor.reset();
    for (    CallbackURL c : callbackurls)     c.call();
  }
}","@Override public void process(String data){
  processor.process(data);
  if (processor.triggered()) {
    for (    CallbackURL c : callbackurls)     c.call();
    PolicyManager.sharedManager().remove(policyid);
  }
}"
84893,"@Override public String toString(){
  final String s=String.format(""String_Node_Str"",startTime * 1000000);
  String thequery=query.replace(""String_Node_Str"",""String_Node_Str"" + s + ""String_Node_Str"");
  String ipaddr=null;
  if ((ipaddr=LeaseData.sharedData().lookup(subject)) != null) {
    thequery=thequery.replace(""String_Node_Str"",ipaddr);
    return thequery;
  }
  return null;
}","@Override public String toString(){
  String thequery=query.replace(""String_Node_Str"",""String_Node_Str"" + timeRange + ""String_Node_Str"");
  thequery=thequery.replace(""String_Node_Str"",subnet);
  return thequery;
}"
84894,"public void doJob(){
  System.err.println(""String_Node_Str"");
  new PollingThread().start();
}","public void doJob(){
  new PollingThread().start();
}"
84895,"private void init(){
  try {
    mactoip=new Hashtable<String,String>();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
}","private void init(){
  mactoip=new Hashtable<String,String>();
}"
84896,"public String lookup(String macaddr){
  System.err.println(""String_Node_Str"" + macaddr);
  return mactoip.get(macaddr.toLowerCase());
}","public String lookup(String macaddr){
  return mactoip.get(macaddr.toLowerCase());
}"
84897,"public void parse(String data){
  String[] rows=data.split(""String_Node_Str"");
  if (rows.length > 2) {
    for (int i=2; i < rows.length; i++) {
      System.err.println(rows[i]);
      String row[]=rows[i].split(DELIMETER);
      last=Util.convertTs(row[0]) + 1;
      if (row[3].equals(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"" + row[1].toLowerCase() + ""String_Node_Str""+ row[2]);
        mactoip.put(row[1].toLowerCase(),row[2]);
      }
    }
  }
}","public void parse(String data){
  if (data == null)   return;
  String[] rows=data.split(""String_Node_Str"");
  if (rows.length > 2) {
    for (int i=2; i < rows.length; i++) {
      System.err.println(rows[i]);
      String row[]=rows[i].split(DELIMETER);
      last=Util.convertTs(row[0]) + 1;
      if (row[3].equals(""String_Node_Str"")) {
        Logger.info(""String_Node_Str"" + row[1].toLowerCase() + ""String_Node_Str""+ row[2]);
        mactoip.put(row[1].toLowerCase(),row[2]);
      }
    }
  }
}"
84898,"@Override public void run(){
  init();
  System.err.println(""String_Node_Str"");
  try {
    while (true) {
      if (!rpc.isConnected()) {
        try {
          System.err.println(""String_Node_Str"");
          rpc.connect(InetAddress.getByName(hwdbHost),987);
          System.err.println(""String_Node_Str"");
        }
 catch (        final Exception e) {
          logger.log(Level.SEVERE,e.getMessage(),e);
        }
      }
      while (rpc.isConnected()) {
        try {
          updateLeases();
          for (          Query q : PolicyManager.sharedManager().activePolicies.values()) {
            String query=q.toString();
            if (q != null) {
              try {
                System.err.println(""String_Node_Str"" + query);
                q.process(rpc.call(query));
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
            }
          }
        }
 catch (        final Exception e) {
          logger.log(Level.SEVERE,e.getMessage(),e);
        }
        try {
          Thread.sleep(TIME_DELTA);
        }
 catch (        final Exception e) {
        }
      }
      try {
        Thread.sleep(5000);
      }
 catch (      final Exception e) {
      }
    }
  }
 catch (  final Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
}","@Override public void run(){
  init();
  try {
    while (true) {
      if (!rpc.isConnected()) {
        try {
          Logger.info(""String_Node_Str"");
          rpc.connect(InetAddress.getByName(hwdbHost),987);
          Logger.info(""String_Node_Str"");
        }
 catch (        final Exception e) {
          Logger.error(""String_Node_Str"",e.getMessage());
        }
      }
      while (rpc.isConnected()) {
        try {
          updateLeases();
          for (          Query q : PolicyManager.sharedManager().activePolicies.values()) {
            String query=q.toString();
            if (q != null) {
              try {
                String result=rpc.call(query);
                if (result != null)                 q.process(result);
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
            }
          }
        }
 catch (        final Exception e) {
          Logger.error(""String_Node_Str"",e.getMessage());
        }
        try {
          Thread.sleep(TIME_DELTA);
        }
 catch (        final Exception e) {
        }
      }
      try {
        Thread.sleep(5000);
      }
 catch (      final Exception e) {
      }
    }
  }
 catch (  final Exception e) {
    Logger.error(""String_Node_Str"",e.getMessage());
  }
}"
84899,"<T>List<List<String>> translateFieldsByIds(String language,EntityCacheEntry e,List<Object> ids,List<JpaEntityProperty<? super T,String>> fields){
  if (e.tt == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + e.entityClass.getName());
  }
  language=language.toUpperCase();
  BundleInfo bi=e.tt.getBundle();
  boolean translate=!(bi.getPrimaryLanguage().getCode().equals(""String_Node_Str""));
  if (translate) {
    checkLanguageIsSupported(bi,language);
  }
  List<List<String>> retval=new ArrayList<List<String>>();
  if (!translate) {
    for (    Object id : ids) {
      T entity=(T)getEntityManager().find(e.entityClass,id);
      List<String> row=new ArrayList<String>();
      for (      JpaEntityProperty<? super T,String> p : fields) {
        row.add(p.getValue(entity));
      }
      retval.add(row);
    }
  }
 else {
    Cache dataCache=getDataCache();
    String translatedTable=e.tt.getTranslationTableName();
    StringBuilder sqlBuilder=new StringBuilder();
    sqlBuilder.append(""String_Node_Str"");
    sqlBuilder.append(e.tt.getPkColumnName());
    for (    JpaEntityProperty<? super T,String> p : fields) {
      sqlBuilder.append(""String_Node_Str"");
      String columnName=getTranslatedColumnName(p.getColumnName(),language);
      sqlBuilder.append(columnName);
    }
    sqlBuilder.append(""String_Node_Str"");
    sqlBuilder.append(translatedTable);
    sqlBuilder.append(""String_Node_Str"");
    sqlBuilder.append(e.tt.getPkColumnName());
    boolean doHack=false;
    JdbcConnectionWrapper wr=getJpaEx().getJdbcConnectionWrapper(getEntityManager(),true);
    Connection cn=wr.getConnection();
    try {
      if (cn.getMetaData().supportsMultipleResultSets() && cn.getMetaData().supportsBatchUpdates() && doHack) {
        sqlBuilder.append(""String_Node_Str"");
        String sql=sqlBuilder.toString();
        PreparedStatement st=cn.prepareStatement(sql);
        int i=0;
        HashMap<Integer,List<String>> cachedRows=new HashMap<Integer,List<String>>();
        for (        Object id : ids) {
          List<String> row=getCachedTranslation(id,e.entityClass,language,fields);
          if (row == null) {
            st.setObject(1,id);
            st.addBatch();
          }
 else {
            cachedRows.put(i,row);
          }
          ++i;
        }
        int[] results=st.executeBatch();
        Iterator it=ids.iterator();
        i=0;
        do {
          List<String> retvalRow=cachedRows.get(i);
          if (retvalRow == null) {
            Object id=it.next();
            ResultSet rs=st.getResultSet();
            retvalRow=new ArrayList<String>();
            if (!rs.next()) {
              T entity=(T)getEntityManager().find(e.entityClass,id);
              for (              JpaEntityProperty<? super T,String> p : fields) {
                retvalRow.add(p.getValue(entity));
              }
            }
 else {
              int nColumns=rs.getMetaData().getColumnCount();
              for (int ii=0; ii < nColumns; ++ii) {
                if (ii != 0) {
                  retvalRow.add(rs.getString(ii + 1));
                }
              }
            }
            putCachedTranslation(id,e.entityClass,language,fields,retvalRow);
          }
          retval.add(retvalRow);
          ++i;
        }
 while (st.getMoreResults());
      }
 else {
        sqlBuilder.append(""String_Node_Str"");
        boolean isFirst=true;
        int nAdded=0;
        Map<Object,Integer> indexesByIds=new HashMap<Object,Integer>();
        for (int i=0; i < ids.size(); ++i) {
          if (!isFirst) {
            sqlBuilder.append(""String_Node_Str"");
          }
          Object id=ids.get(i);
          List<String> row=getCachedTranslation(id,e.entityClass,language,fields);
          if (row == null) {
            sqlBuilder.append(""String_Node_Str"");
            isFirst=false;
            ++nAdded;
          }
        }
        sqlBuilder.append(""String_Node_Str"");
        if (nAdded != 0) {
          PreparedStatement st=cn.prepareStatement(sqlBuilder.toString());
          for (int i=0; i < ids.size(); ++i) {
            st.setObject(i + 1,ids.get(i));
            indexesByIds.put(ids.get(i),i);
            retval.add(new ArrayList<String>());
          }
          ResultSet rs=st.executeQuery();
          while (rs.next()) {
            Object rsid=rs.getObject(1);
            Integer rsind=indexesByIds.get(rsid);
            if (rsind == null) {
              throw new IllegalStateException(""String_Node_Str"");
            }
            List<String> retRow=retval.get(rsind);
            for (int i=0; i < fields.size(); ++i) {
              String value=rs.getString(i + 2);
              retRow.add(value);
            }
            putCachedTranslation(rsid,e.entityClass,language,fields,retRow);
          }
        }
        int i=0;
        for (        List<String> row : retval) {
          if (row.size() == 0) {
            List<String> crow=getCachedTranslation(ids.get(i),e.entityClass,language,fields);
            if (crow != null) {
              row.addAll(crow);
            }
 else {
              T entity=(T)getEntityManager().find(e.entityClass,ids.get(i));
              for (              JpaEntityProperty<? super T,String> p : fields) {
                row.add(p.getValue(entity));
              }
            }
          }
          ++i;
        }
      }
    }
 catch (    SQLException ex) {
      LOG.error(""String_Node_Str"" + ex.getErrorCode());
      SQLException currex=ex;
      while (currex != null) {
        LOG.error(currex.getMessage());
        currex=currex.getNextException();
      }
      throw new RuntimeSqlException(ex);
    }
 finally {
      wr.releaseConnection(cn);
    }
  }
  return retval;
}","<T>List<List<String>> translateFieldsByIds(String language,EntityCacheEntry e,List<Object> ids,List<JpaEntityProperty<? super T,String>> fields){
  if (e.tt == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + e.entityClass.getName());
  }
  language=language.toUpperCase();
  BundleInfo bi=e.tt.getBundle();
  boolean translate=!(bi.getPrimaryLanguage().getCode().equals(""String_Node_Str""));
  if (translate) {
    checkLanguageIsSupported(bi,language);
  }
  List<List<String>> retval=new ArrayList<List<String>>();
  if (!translate) {
    for (    Object id : ids) {
      T entity=(T)getEntityManager().find(e.entityClass,id);
      List<String> row=new ArrayList<String>();
      for (      JpaEntityProperty<? super T,String> p : fields) {
        row.add(p.getValue(entity));
      }
      retval.add(row);
    }
  }
 else {
    Cache dataCache=getDataCache();
    String translatedTable=e.tt.getTranslationTableName();
    StringBuilder sqlBuilder=new StringBuilder();
    sqlBuilder.append(""String_Node_Str"");
    sqlBuilder.append(e.tt.getPkColumnName());
    for (    JpaEntityProperty<? super T,String> p : fields) {
      sqlBuilder.append(""String_Node_Str"");
      String columnName=getTranslatedColumnName(p.getColumnName(),language);
      sqlBuilder.append(columnName);
    }
    sqlBuilder.append(""String_Node_Str"");
    sqlBuilder.append(translatedTable);
    sqlBuilder.append(""String_Node_Str"");
    sqlBuilder.append(e.tt.getPkColumnName());
    boolean doHack=false;
    JdbcConnectionWrapper wr=getJpaEx().getJdbcConnectionWrapper(getEntityManager(),true);
    Connection cn=wr.getConnection();
    try {
      if (cn.getMetaData().supportsMultipleResultSets() && cn.getMetaData().supportsBatchUpdates() && doHack) {
        sqlBuilder.append(""String_Node_Str"");
        String sql=sqlBuilder.toString();
        PreparedStatement st=cn.prepareStatement(sql);
        int i=0;
        HashMap<Integer,List<String>> cachedRows=new HashMap<Integer,List<String>>();
        for (        Object id : ids) {
          List<String> row=getCachedTranslation(id,e.entityClass,language,fields);
          if (row == null) {
            st.setObject(1,id);
            st.addBatch();
          }
 else {
            cachedRows.put(i,row);
          }
          ++i;
        }
        int[] results=st.executeBatch();
        Iterator it=ids.iterator();
        i=0;
        do {
          List<String> retvalRow=cachedRows.get(i);
          if (retvalRow == null) {
            Object id=it.next();
            ResultSet rs=st.getResultSet();
            retvalRow=new ArrayList<String>();
            if (!rs.next()) {
              T entity=(T)getEntityManager().find(e.entityClass,id);
              for (              JpaEntityProperty<? super T,String> p : fields) {
                retvalRow.add(p.getValue(entity));
              }
            }
 else {
              int nColumns=rs.getMetaData().getColumnCount();
              for (int ii=0; ii < nColumns; ++ii) {
                if (ii != 0) {
                  retvalRow.add(rs.getString(ii + 1));
                }
              }
            }
            putCachedTranslation(id,e.entityClass,language,fields,retvalRow);
          }
          retval.add(retvalRow);
          ++i;
        }
 while (st.getMoreResults());
      }
 else {
        sqlBuilder.append(""String_Node_Str"");
        boolean isFirst=true;
        int nAdded=0;
        Map<Object,Integer> indexesByIds=new HashMap<Object,Integer>();
        for (int i=0; i < ids.size(); ++i) {
          Object id=ids.get(i);
          List<String> row=getCachedTranslation(id,e.entityClass,language,fields);
          if (row == null) {
            if (!isFirst) {
              sqlBuilder.append(""String_Node_Str"");
            }
            sqlBuilder.append(""String_Node_Str"");
            isFirst=false;
            ++nAdded;
          }
        }
        sqlBuilder.append(""String_Node_Str"");
        if (nAdded != 0) {
          PreparedStatement st=cn.prepareStatement(sqlBuilder.toString());
          for (int i=0, j=0; i < ids.size(); ++i) {
            Object id=ids.get(i);
            List<String> row=getCachedTranslation(id,e.entityClass,language,fields);
            if (row == null) {
              st.setObject(++j,ids.get(i));
              indexesByIds.put(ids.get(i),i);
            }
            retval.add(new ArrayList<String>());
          }
          ResultSet rs=st.executeQuery();
          while (rs.next()) {
            Object rsid=rs.getObject(1);
            Integer rsind=indexesByIds.get(rsid);
            if (rsind == null) {
              throw new IllegalStateException(""String_Node_Str"");
            }
            List<String> retRow=retval.get(rsind);
            for (int i=0; i < fields.size(); ++i) {
              String value=rs.getString(i + 2);
              retRow.add(value);
            }
            putCachedTranslation(rsid,e.entityClass,language,fields,retRow);
          }
        }
 else {
          for (int i=0; i < ids.size(); ++i) {
            retval.add(new ArrayList<String>());
          }
        }
        int i=0;
        for (        List<String> row : retval) {
          if (row.size() == 0) {
            List<String> crow=getCachedTranslation(ids.get(i),e.entityClass,language,fields);
            if (crow != null) {
              row.addAll(crow);
            }
 else {
              T entity=(T)getEntityManager().find(e.entityClass,ids.get(i));
              for (              JpaEntityProperty<? super T,String> p : fields) {
                row.add(p.getValue(entity));
              }
            }
          }
          ++i;
        }
      }
    }
 catch (    SQLException ex) {
      LOG.error(""String_Node_Str"" + ex.getErrorCode());
      SQLException currex=ex;
      while (currex != null) {
        LOG.error(currex.getMessage());
        currex=currex.getNextException();
      }
      throw new RuntimeSqlException(ex);
    }
 finally {
      wr.releaseConnection(cn);
    }
  }
  return retval;
}"
84900,"/** 
 * translate beans to choosen language. (detach ones if needed)
 */
public <T>Collection<T> translateBeans(Collection<T> beans,String languageCode,boolean deep,boolean detached){
  System.err.println(""String_Node_Str"");
  if (beans == null) {
    return beans;
  }
  if (!detached) {
    beans=JpaEx.<Collection<T>>serializeAndDeserialize(beans);
  }
  Iterator<T> it=beans.iterator();
  if (!it.hasNext()) {
    return beans;
  }
  String lc=languageCode.toUpperCase();
  Class<T> entityClass;
{
    T bean=it.next();
    entityClass=JpaHelper.findSameOrSuperJpaEntity(bean.getClass());
    if (entityClass == null) {
      return beans;
    }
  }
  EntityCacheEntry<T> metaDataEntry=getOrCreateEntityCacheEntry(entityClass.getName());
  if (metaDataEntry == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + entityClass + ""String_Node_Str"");
  }
  Map<String,BundleInfo> bis=new TreeMap<String,BundleInfo>();
  for (  JpaEntityProperty<T,String> p : metaDataEntry.stringPropertiesByName.values()) {
    String poName=p.getEntityClass().getName();
    EntityCacheEntry poEntry=getOrCreateEntityCacheEntry(poName);
    if (!bis.containsKey(poName)) {
      if (poEntry.tt != null) {
        BundleInfo bi=poEntry.tt.getBundle();
        boolean supportedLanguageFound=false;
        for (        LanguageInfo li : bi.getSupportedLanguages()) {
          if (li.getCode().equalsIgnoreCase(languageCode)) {
            supportedLanguageFound=true;
            break;
          }
        }
        if (!supportedLanguageFound) {
          throw new IllegalArgumentException(""String_Node_Str"" + languageCode + ""String_Node_Str"");
        }
        bis.put(poName,bi);
      }
    }
  }
  List<Object> ids=new ArrayList<Object>();
  for (  T bean : beans) {
    ids.add(metaDataEntry.idProperty.getValue(bean));
  }
  Map<String,List<List<String>>> translatedPerClass=new TreeMap<String,List<List<String>>>();
  Map<String,List<JpaEntityProperty<? super T,String>>> propertiesPerClass=new TreeMap<String,List<JpaEntityProperty<? super T,String>>>();
  for (  Map.Entry<String,EntityCacheEntry<? super T>> e : metaDataEntry.slicedEntries.entrySet()) {
    TranslationTable tt=e.getValue().tt;
    if (tt == null)     continue;
    List<JpaEntityProperty<? super T,String>> fieldProperties=new ArrayList<JpaEntityProperty<? super T,String>>();
    for (    TranslationTableColumn tc : tt.getTranslatedColumns()) {
      JpaEntityProperty<? super T,String> fieldProperty=e.getValue().stringPropertiesByNormalizedColumnName.get(tc.getColumnName());
      if (fieldProperty == null) {
        throw new IllegalStateException(""String_Node_Str"" + tc.getColumnName());
      }
      fieldProperties.add(fieldProperty);
    }
    List<List<String>> translatedForKey=translateFieldsByIds(languageCode,e.getValue(),ids,fieldProperties);
    translatedPerClass.put(e.getKey(),translatedForKey);
    propertiesPerClass.put(e.getKey(),fieldProperties);
  }
  System.err.println(""String_Node_Str"" + languageCode);
  it=beans.iterator();
  for (int i=0; it.hasNext(); ++i) {
    T bean=it.next();
    for (    Map.Entry<String,List<List<String>>> e : translatedPerClass.entrySet()) {
      if (e.getValue().size() == 0) {
        continue;
      }
      List<String> translatedRow=e.getValue().get(i);
      List<JpaEntityProperty<? super T,String>> fieldProperties=propertiesPerClass.get(e.getKey());
      for (int j=0; j < fieldProperties.size(); ++j) {
        System.err.println(""String_Node_Str"" + fieldProperties.get(j).getName() + ""String_Node_Str""+ translatedRow.get(j));
        fieldProperties.get(j).setValue(bean,translatedRow.get(j));
      }
    }
    if (deep) {
      System.err.println(""String_Node_Str"");
      for (      JpaEntityProperty p : JpaHelper.getAllJpaProperties(entityClass)) {
        System.err.print(""String_Node_Str"" + p.getName());
        Class propertyClass=p.getPropertyClass();
        if (!propertyClass.isPrimitive() && !Number.class.isAssignableFrom(propertyClass) && !String.class.isAssignableFrom(propertyClass)) {
          Object v=p.getValue(bean);
          if (v != null) {
            System.err.println(""String_Node_Str"" + v.toString());
            Object tv=translateBean(v,languageCode,deep,true);
            p.setValue(bean,tv);
          }
        }
      }
      System.err.println(""String_Node_Str"");
    }
  }
  System.err.println(""String_Node_Str"");
  return beans;
}","/** 
 * translate beans to choosen language. (detach ones if needed)
 */
public <T>Collection<T> translateBeans(Collection<T> beans,String languageCode,boolean deep,boolean detached){
  if (beans == null) {
    return beans;
  }
  if (!detached) {
    beans=JpaEx.getInstance().<Collection<T>>detached(getEntityManager(),beans);
  }
  Iterator<T> it=beans.iterator();
  if (!it.hasNext()) {
    return beans;
  }
  languageCode=languageCode.toUpperCase();
  Class<T> entityClass;
{
    T bean=it.next();
    entityClass=JpaHelper.findSameOrSuperJpaEntity(bean.getClass());
    if (entityClass == null) {
      return beans;
    }
  }
  EntityCacheEntry<T> metaDataEntry=getOrCreateEntityCacheEntry(entityClass.getName());
  if (metaDataEntry == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + entityClass + ""String_Node_Str"");
  }
  Map<String,BundleInfo> bis=new TreeMap<String,BundleInfo>();
  for (  JpaEntityProperty<T,String> p : metaDataEntry.stringPropertiesByName.values()) {
    String poName=p.getEntityClass().getName();
    EntityCacheEntry poEntry=getOrCreateEntityCacheEntry(poName);
    if (!bis.containsKey(poName)) {
      if (poEntry.tt != null) {
        BundleInfo bi=poEntry.tt.getBundle();
        boolean supportedLanguageFound=false;
        for (        LanguageInfo li : bi.getSupportedLanguages()) {
          if (li.getCode().equalsIgnoreCase(languageCode)) {
            supportedLanguageFound=true;
            break;
          }
        }
        if (!supportedLanguageFound) {
          throw new IllegalArgumentException(""String_Node_Str"" + languageCode + ""String_Node_Str"");
        }
        bis.put(poName,bi);
      }
    }
  }
  List<Object> ids=new ArrayList<Object>();
  for (  T bean : beans) {
    ids.add(metaDataEntry.idProperty.getValue(bean));
  }
  Map<String,List<List<String>>> translatedPerClass=new TreeMap<String,List<List<String>>>();
  Map<String,List<JpaEntityProperty<? super T,String>>> propertiesPerClass=new TreeMap<String,List<JpaEntityProperty<? super T,String>>>();
  for (  Map.Entry<String,EntityCacheEntry<? super T>> e : metaDataEntry.slicedEntries.entrySet()) {
    TranslationTable tt=e.getValue().tt;
    if (tt == null)     continue;
    List<JpaEntityProperty<? super T,String>> fieldProperties=new ArrayList<JpaEntityProperty<? super T,String>>();
    for (    TranslationTableColumn tc : tt.getTranslatedColumns()) {
      JpaEntityProperty<? super T,String> fieldProperty=e.getValue().stringPropertiesByNormalizedColumnName.get(tc.getColumnName());
      if (fieldProperty == null) {
        throw new IllegalStateException(""String_Node_Str"" + tc.getColumnName());
      }
      fieldProperties.add(fieldProperty);
    }
    List<List<String>> translatedForKey=translateFieldsByIds(languageCode,e.getValue(),ids,fieldProperties);
    translatedPerClass.put(e.getKey(),translatedForKey);
    propertiesPerClass.put(e.getKey(),fieldProperties);
  }
  it=beans.iterator();
  for (int i=0; it.hasNext(); ++i) {
    T bean=it.next();
    for (    Map.Entry<String,List<List<String>>> e : translatedPerClass.entrySet()) {
      if (e.getValue().size() == 0) {
        continue;
      }
      List<String> translatedRow=e.getValue().get(i);
      List<JpaEntityProperty<? super T,String>> fieldProperties=propertiesPerClass.get(e.getKey());
      if (fieldProperties.size() == 0) {
        continue;
      }
      for (int j=0; j < fieldProperties.size(); ++j) {
        String translation=translatedRow.get(j);
        fieldProperties.get(j).setValue(bean,translation);
      }
    }
    if (deep) {
      List<JpaEntityProperty> properties=JpaHelper.getAllJpaProperties(entityClass);
      for (      JpaEntityProperty p : properties) {
        Class propertyClass=p.getPropertyClass();
        if (!propertyClass.isPrimitive() && !Number.class.isAssignableFrom(propertyClass) && !String.class.isAssignableFrom(propertyClass)) {
          Object v=p.getValue(bean);
          if (v != null) {
            Object tv=translateBean(v,languageCode,deep,true);
            p.setValue(bean,tv);
          }
        }
      }
    }
  }
  return beans;
}"
84901,"public <T>T translateBean(T bean,String languageCode,boolean deep,boolean detached){
  System.err.println(""String_Node_Str"" + bean.toString() + ""String_Node_Str""+ languageCode+ ""String_Node_Str""+ deep+ ""String_Node_Str"");
  if (bean == null) {
    return null;
  }
  if (!detached) {
    bean=JpaEx.serializeAndDeserialize(bean);
  }
  if (bean instanceof Collection) {
    return (T)translateBeans((Collection)bean,languageCode,deep,true);
  }
 else   if (bean instanceof Map) {
    Map<Object,Object> m=(Map<Object,Object>)bean;
    for (    Map.Entry<Object,Object> e : m.entrySet()) {
      Object tv=translateBean(e.getValue(),languageCode,deep,true);
      m.put(e.getKey(),tv);
    }
    return (T)m;
  }
 else   if (bean.getClass().isAnnotationPresent(Entity.class)) {
    Collection<T> rb=translateBeans(Collections.<T>singletonList(bean),languageCode,deep,true);
    return rb.iterator().next();
  }
 else {
    return bean;
  }
}","public <T>T translateBean(T bean,String languageCode,boolean deep,boolean detached){
  if (bean == null) {
    return null;
  }
  if (!detached) {
    bean=JpaEx.getInstance().detached(getEntityManager(),bean);
  }
  if (bean instanceof Collection) {
    return (T)translateBeans((Collection)bean,languageCode,deep,true);
  }
 else   if (bean instanceof Map) {
    Map<Object,Object> m=(Map<Object,Object>)bean;
    for (    Map.Entry<Object,Object> e : m.entrySet()) {
      Object tv=translateBean(e.getValue(),languageCode,deep,true);
      m.put(e.getKey(),tv);
    }
    return (T)m;
  }
 else   if (bean.getClass().isAnnotationPresent(Entity.class)) {
    Collection<T> rb=translateBeans(Collections.<T>singletonList(bean),languageCode,deep,true);
    return rb.iterator().next();
  }
 else {
    return bean;
  }
}"
84902,"private <T>void fillEntityEntry(EntityCacheEntry<T> entry){
  List<JpaEntityProperty> properties=JpaHelper.getAllJpaProperties(entry.entityClass);
  entry.stringPropertiesByNormalizedColumnName=new TreeMap<String,JpaEntityProperty<T,String>>();
  entry.stringPropertiesByName=new TreeMap<String,JpaEntityProperty<T,String>>();
  System.err.println(""String_Node_Str"" + entry.entityClass.getName());
  for (  JpaEntityProperty p : properties) {
    boolean used=false;
    if (p.getPropertyClass().isAssignableFrom(String.class)) {
      System.err.println(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getColumnName());
      entry.stringPropertiesByNormalizedColumnName.put(normalizeColumnName(p.getColumnName()),p);
      entry.stringPropertiesByName.put(p.getName(),p);
      used=true;
    }
 else     if (p.isId()) {
      entry.idProperty=p;
    }
    if (used) {
      Class propertyOwnerClass=p.getEntityClass();
      if (!entry.entityClass.equals(propertyOwnerClass)) {
        String propertyOwnerClassName=propertyOwnerClass.getName();
        if (!entry.slicedEntries.containsKey(propertyOwnerClassName)) {
          EntityCacheEntry propertyOwnerCacheEntry=getOrCreateEntityCacheEntry(propertyOwnerClassName);
          if (propertyOwnerCacheEntry != null) {
            entry.slicedEntries.put(propertyOwnerClassName,propertyOwnerCacheEntry);
          }
        }
      }
    }
  }
}","private <T>void fillEntityEntry(EntityCacheEntry<T> entry){
  List<JpaEntityProperty> properties=JpaHelper.getAllJpaProperties(entry.entityClass);
  entry.stringPropertiesByNormalizedColumnName=new TreeMap<String,JpaEntityProperty<T,String>>();
  entry.stringPropertiesByName=new TreeMap<String,JpaEntityProperty<T,String>>();
  for (  JpaEntityProperty p : properties) {
    boolean used=false;
    if (p.getPropertyClass().isAssignableFrom(String.class)) {
      entry.stringPropertiesByNormalizedColumnName.put(normalizeColumnName(p.getColumnName()),p);
      entry.stringPropertiesByName.put(p.getName(),p);
      used=true;
    }
 else     if (p.isId()) {
      entry.idProperty=p;
    }
    if (used) {
      Class propertyOwnerClass=p.getEntityClass();
      if (!entry.entityClass.equals(propertyOwnerClass)) {
        String propertyOwnerClassName=propertyOwnerClass.getName();
        if (!entry.slicedEntries.containsKey(propertyOwnerClassName)) {
          EntityCacheEntry propertyOwnerCacheEntry=getOrCreateEntityCacheEntry(propertyOwnerClassName);
          if (propertyOwnerCacheEntry != null) {
            entry.slicedEntries.put(propertyOwnerClassName,propertyOwnerCacheEntry);
          }
        }
      }
    }
  }
}"
84903,"/** 
 * note, that beans must be detached.
 */
public <T>Collection<T> translateBeans(Collection<T> beans,String languageCode,boolean deep){
  System.err.println(""String_Node_Str"");
  Iterator<T> it=beans.iterator();
  if (!it.hasNext()) {
    return beans;
  }
  String lc=languageCode.toUpperCase();
  Class<T> entityClass;
{
    T bean=it.next();
    entityClass=JpaHelper.findSameOrSuperJpaEntity(bean.getClass());
    if (entityClass == null) {
      return beans;
    }
  }
  EntityCacheEntry<T> metaDataEntry=getOrCreateEntityCacheEntry(entityClass.getName());
  if (metaDataEntry == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + entityClass + ""String_Node_Str"");
  }
  Map<String,BundleInfo> bis=new TreeMap<String,BundleInfo>();
  for (  JpaEntityProperty<T,String> p : metaDataEntry.stringPropertiesByName.values()) {
    String poName=p.getEntityClass().getName();
    EntityCacheEntry poEntry=getOrCreateEntityCacheEntry(poName);
    if (!bis.containsKey(poName)) {
      if (poEntry.tt != null) {
        BundleInfo bi=poEntry.tt.getBundle();
        boolean supportedLanguageFound=false;
        for (        LanguageInfo li : bi.getSupportedLanguages()) {
          if (li.getCode().equalsIgnoreCase(languageCode)) {
            supportedLanguageFound=true;
            break;
          }
        }
        if (!supportedLanguageFound) {
          throw new IllegalArgumentException(""String_Node_Str"" + languageCode + ""String_Node_Str"");
        }
        bis.put(poName,bi);
      }
    }
  }
  List<Object> ids=new ArrayList<Object>();
  for (  T bean : beans) {
    ids.add(metaDataEntry.idProperty.getValue(bean));
  }
  Map<String,List<List<String>>> translatedPerClass=new TreeMap<String,List<List<String>>>();
  Map<String,List<JpaEntityProperty<? super T,String>>> propertiesPerClass=new TreeMap<String,List<JpaEntityProperty<? super T,String>>>();
  for (  Map.Entry<String,EntityCacheEntry<? super T>> e : metaDataEntry.slicedEntries.entrySet()) {
    TranslationTable tt=e.getValue().tt;
    if (tt == null)     continue;
    List<JpaEntityProperty<? super T,String>> fieldProperties=new ArrayList<JpaEntityProperty<? super T,String>>();
    for (    TranslationTableColumn tc : tt.getTranslatedColumns()) {
      JpaEntityProperty<? super T,String> fieldProperty=e.getValue().stringPropertiesByNormalizedColumnName.get(tc.getColumnName());
      if (fieldProperty == null) {
        throw new IllegalStateException(""String_Node_Str"" + tc.getColumnName());
      }
      fieldProperties.add(fieldProperty);
    }
    List<List<String>> translatedForKey=translateFieldsByIds(languageCode,e.getValue(),ids,fieldProperties);
    translatedPerClass.put(e.getKey(),translatedForKey);
    propertiesPerClass.put(e.getKey(),fieldProperties);
  }
  it=beans.iterator();
  for (int i=0; it.hasNext(); ++i) {
    T bean=it.next();
    for (    Map.Entry<String,List<List<String>>> e : translatedPerClass.entrySet()) {
      if (e.getValue().size() == 0) {
        continue;
      }
      List<String> translatedRow=e.getValue().get(i);
      List<JpaEntityProperty<? super T,String>> fieldProperties=propertiesPerClass.get(e.getKey());
      for (int j=0; j < fieldProperties.size(); ++j) {
        System.err.print(""String_Node_Str"" + fieldProperties.get(j).getName() + ""String_Node_Str""+ translatedRow.get(j));
        fieldProperties.get(j).setValue(bean,translatedRow.get(j));
      }
    }
    if (deep) {
      for (      JpaEntityProperty p : JpaHelper.getAllJpaProperties(entityClass)) {
        Class propertyClass=p.getPropertyClass();
        if (!propertyClass.isPrimitive()) {
          Object v=p.getValue(bean);
          Object tv=translateBean(v,languageCode,deep);
          p.setValue(bean,tv);
        }
      }
    }
  }
  return beans;
}","/** 
 * note, that beans must be detached.
 */
public <T>Collection<T> translateBeans(Collection<T> beans,String languageCode,boolean deep){
  System.err.println(""String_Node_Str"");
  Iterator<T> it=beans.iterator();
  if (!it.hasNext()) {
    return beans;
  }
  String lc=languageCode.toUpperCase();
  Class<T> entityClass;
{
    T bean=it.next();
    entityClass=JpaHelper.findSameOrSuperJpaEntity(bean.getClass());
    if (entityClass == null) {
      return beans;
    }
  }
  EntityCacheEntry<T> metaDataEntry=getOrCreateEntityCacheEntry(entityClass.getName());
  if (metaDataEntry == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + entityClass + ""String_Node_Str"");
  }
  Map<String,BundleInfo> bis=new TreeMap<String,BundleInfo>();
  for (  JpaEntityProperty<T,String> p : metaDataEntry.stringPropertiesByName.values()) {
    String poName=p.getEntityClass().getName();
    EntityCacheEntry poEntry=getOrCreateEntityCacheEntry(poName);
    if (!bis.containsKey(poName)) {
      if (poEntry.tt != null) {
        BundleInfo bi=poEntry.tt.getBundle();
        boolean supportedLanguageFound=false;
        for (        LanguageInfo li : bi.getSupportedLanguages()) {
          if (li.getCode().equalsIgnoreCase(languageCode)) {
            supportedLanguageFound=true;
            break;
          }
        }
        if (!supportedLanguageFound) {
          throw new IllegalArgumentException(""String_Node_Str"" + languageCode + ""String_Node_Str"");
        }
        bis.put(poName,bi);
      }
    }
  }
  List<Object> ids=new ArrayList<Object>();
  for (  T bean : beans) {
    ids.add(metaDataEntry.idProperty.getValue(bean));
  }
  Map<String,List<List<String>>> translatedPerClass=new TreeMap<String,List<List<String>>>();
  Map<String,List<JpaEntityProperty<? super T,String>>> propertiesPerClass=new TreeMap<String,List<JpaEntityProperty<? super T,String>>>();
  for (  Map.Entry<String,EntityCacheEntry<? super T>> e : metaDataEntry.slicedEntries.entrySet()) {
    TranslationTable tt=e.getValue().tt;
    if (tt == null)     continue;
    List<JpaEntityProperty<? super T,String>> fieldProperties=new ArrayList<JpaEntityProperty<? super T,String>>();
    for (    TranslationTableColumn tc : tt.getTranslatedColumns()) {
      JpaEntityProperty<? super T,String> fieldProperty=e.getValue().stringPropertiesByNormalizedColumnName.get(tc.getColumnName());
      if (fieldProperty == null) {
        throw new IllegalStateException(""String_Node_Str"" + tc.getColumnName());
      }
      fieldProperties.add(fieldProperty);
    }
    List<List<String>> translatedForKey=translateFieldsByIds(languageCode,e.getValue(),ids,fieldProperties);
    translatedPerClass.put(e.getKey(),translatedForKey);
    propertiesPerClass.put(e.getKey(),fieldProperties);
  }
  System.err.println(""String_Node_Str"" + languageCode);
  it=beans.iterator();
  for (int i=0; it.hasNext(); ++i) {
    T bean=it.next();
    for (    Map.Entry<String,List<List<String>>> e : translatedPerClass.entrySet()) {
      if (e.getValue().size() == 0) {
        continue;
      }
      List<String> translatedRow=e.getValue().get(i);
      List<JpaEntityProperty<? super T,String>> fieldProperties=propertiesPerClass.get(e.getKey());
      for (int j=0; j < fieldProperties.size(); ++j) {
        System.err.println(""String_Node_Str"" + fieldProperties.get(j).getName() + ""String_Node_Str""+ translatedRow.get(j));
        fieldProperties.get(j).setValue(bean,translatedRow.get(j));
      }
    }
    if (deep) {
      System.err.println(""String_Node_Str"");
      for (      JpaEntityProperty p : JpaHelper.getAllJpaProperties(entityClass)) {
        Class propertyClass=p.getPropertyClass();
        if (!propertyClass.isPrimitive()) {
          Object v=p.getValue(bean);
          Object tv=translateBean(v,languageCode,deep);
          p.setValue(bean,tv);
        }
      }
      System.err.println(""String_Node_Str"");
    }
  }
  System.err.println(""String_Node_Str"");
  return beans;
}"
84904,"public <T>T translateBean(T bean,String languageCode,boolean deep){
  if (bean instanceof Collection) {
    return (T)translateBeans((Collection)bean,languageCode,deep);
  }
 else   if (bean instanceof Map) {
    Map<Object,Object> m=(Map<Object,Object>)bean;
    for (    Map.Entry<Object,Object> e : m.entrySet()) {
      Object tv=translateBean(e.getValue(),languageCode,deep);
      m.put(e.getKey(),tv);
    }
    return (T)m;
  }
 else   if (bean.getClass().isAnnotationPresent(Entity.class)) {
    Collection<T> rb=translateBeans(Collections.<T>singletonList(bean),languageCode,deep);
    return rb.iterator().next();
  }
 else {
    return bean;
  }
}","public <T>T translateBean(T bean,String languageCode,boolean deep){
  if (bean == null) {
    return null;
  }
 else   if (bean instanceof Collection) {
    return (T)translateBeans((Collection)bean,languageCode,deep);
  }
 else   if (bean instanceof Map) {
    Map<Object,Object> m=(Map<Object,Object>)bean;
    for (    Map.Entry<Object,Object> e : m.entrySet()) {
      Object tv=translateBean(e.getValue(),languageCode,deep);
      m.put(e.getKey(),tv);
    }
    return (T)m;
  }
 else   if (bean.getClass().isAnnotationPresent(Entity.class)) {
    Collection<T> rb=translateBeans(Collections.<T>singletonList(bean),languageCode,deep);
    return rb.iterator().next();
  }
 else {
    return bean;
  }
}"
84905,"private static boolean checkMethodPermission(Method method,Object[] params,UserServerContext user,String name,String[] arguments){
  Map<String,String> mapargs=null;
  if (arguments != null) {
    if ((arguments.length % 2) == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    mapargs=new TreeMap<String,String>();
    for (int i=0; i < arguments.length; i+=2) {
      String argname=arguments[i];
      String argvalue=arguments[i + 1];
      if (argvalue.startsWith(""String_Node_Str"")) {
        try {
          int argNumber=Integer.parseInt(argvalue.substring(1));
          argvalue=params[argNumber].toString();
        }
 catch (        NumberFormatException ex) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
      }
      mapargs.put(argname,argvalue);
    }
  }
 else {
    mapargs=Collections.<String,String>emptyMap();
  }
  return user.checkPermission(name,mapargs);
}","private static boolean checkMethodPermission(Method method,Object[] params,UserServerContext user,String name,String[] arguments){
  Map<String,String> mapargs=null;
  if (arguments != null) {
    if ((arguments.length % 2) != 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    mapargs=new TreeMap<String,String>();
    for (int i=0; i < arguments.length; i+=2) {
      String argname=arguments[i];
      String argvalue=arguments[i + 1];
      if (argvalue.startsWith(""String_Node_Str"")) {
        try {
          int argNumber=Integer.parseInt(argvalue.substring(1));
          argvalue=params[argNumber].toString();
        }
 catch (        NumberFormatException ex) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
      }
      mapargs.put(argname,argvalue);
    }
  }
 else {
    mapargs=Collections.<String,String>emptyMap();
  }
  return user.checkPermission(name,mapargs);
}"
84906,"@Override public String processCall(String payload) throws SerializationException {
  String responsePayload=null;
  RPCRequest rpcRequest=null;
  Object targetObject=null;
  if (responsePayload == null) {
    try {
      rpcRequest=RPC.decodeRequest(payload,null,this);
    }
 catch (    NullPointerException ex) {
      Log LOG=LogFactory.getLog(GWTServlet.class);
      LOG.info(""String_Node_Str"");
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  Object retval=null;
  if (responsePayload == null) {
    try {
      targetObject=retrieveTargetObject(this.getThreadLocalRequest());
      if (targetObject == null) {
        Log log=LogFactory.getLog(GWTServlet.class);
        log.info(""String_Node_Str"");
        throw new RuntimeException(""String_Node_Str"");
      }
      Method method=rpcRequest.getMethod();
      Object[] params=rpcRequest.getParameters();
      Method targetMethod=findTargetMethod(targetObject,method,params);
      Class<?> methodParameterTypes[]=method.getParameterTypes();
      Class<?> targetMethodParameterTypes[]=targetMethod.getParameterTypes();
      UserServerContext userContext=null;
      if (authApiProvider_ != null) {
        HttpSession session=getThreadLocalRequest().getSession(false);
        Object o=session.getAttribute(""String_Node_Str"");
        if (o == null) {
          userContext=authApiProvider_.getAnonimousContext();
        }
 else {
          if (o instanceof UserServerContext) {
            userContext=(UserServerContext)o;
          }
 else           if (o instanceof String) {
            userContext=authApiProvider_.findContextById((String)o);
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
      Object[] targetParams;
      int copyOffset=0;
      boolean copy=false;
      boolean eraseIdParam=false;
      int userIdParamIndex=-1;
      UserIdParameter uidAnn=targetMethod.getAnnotation(UserIdParameter.class);
      if (uidAnn != null) {
        userIdParamIndex=uidAnn.value();
      }
      if (targetMethodParameterTypes.length > methodParameterTypes.length) {
        targetParams=new Object[targetMethodParameterTypes.length];
        copy=true;
        copyOffset=1;
        if (authApiProvider_ != null) {
          targetParams[0]=userContext;
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + targetMethod.toString());
        }
      }
 else       if (targetMethodParameterTypes.length == methodParameterTypes.length) {
        if (inputParametersReplicator_ != null) {
          targetParams=new Object[targetMethodParameterTypes.length];
          copy=true;
        }
 else {
          copy=false;
          targetParams=params;
        }
      }
 else       if (targetMethodParameterTypes.length < methodParameterTypes.length) {
        targetParams=new Object[targetMethodParameterTypes.length];
        copy=true;
        eraseIdParam=true;
      }
 else {
        throw new IllegalStateException(""String_Node_Str"");
      }
      if (copy) {
        if (inputParametersReplicator_ != null) {
          for (int i=copyOffset; i < targetMethodParameterTypes.length; ++i) {
            if (i - copyOffset == userIdParamIndex) {
              if (!eraseIdParam) {
                Object o=params[i - copyOffset];
                if (o != null) {
                  targetParams[i]=authApiProvider_.findContextById(o.toString());
                }
 else {
                  targetParams[i]=authApiProvider_.getAnonimousContext();
                }
                continue;
              }
 else {
                --copyOffset;
              }
            }
            targetParams[i]=inputParametersReplicator_.replicateBean(params[i - copyOffset]);
          }
        }
 else {
          for (int i=copyOffset; i < targetMethodParameterTypes.length; ++i) {
            if (i - copyOffset == userIdParamIndex) {
              if (!eraseIdParam) {
                Object o=params[i - copyOffset];
                if (o != null) {
                  targetParams[i]=authApiProvider_.findContextById(o.toString());
                }
 else {
                  targetParams[i]=authApiProvider_.getAnonimousContext();
                }
                continue;
              }
 else {
                --copyOffset;
              }
            }
            targetParams[i]=params[i - copyOffset];
          }
        }
      }
      if (authApiProvider_ != null) {
        if (!AuthServerApiHelper.checkMethodPermissions(targetMethod,targetParams,userContext)) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
      retval=targetMethod.invoke(targetObject,targetParams);
    }
 catch (    RuntimeException ex) {
      Log log=LogFactory.getLog(GWTServlet.class);
      log.info(""String_Node_Str"",ex);
      responsePayload=RPC.encodeResponseForFailure(null,ex,rpcRequest.getSerializationPolicy());
    }
catch (    Exception ex) {
      boolean toLog=((!(ex instanceof Serializable)) || debug_);
      if (toLog) {
        Log log=LogFactory.getLog(GWTServlet.class);
        log.info(""String_Node_Str"",ex);
      }
      responsePayload=RPC.encodeResponseForFailure(null,ex,rpcRequest.getSerializationPolicy());
    }
  }
  if (responsePayload == null) {
    if (resultReplicator_ != null) {
      retval=resultReplicator_.replicateBean(retval);
    }
 else     if (resultHibernateBeanReplicator_ != null) {
      retval=resultHibernateBeanReplicator_.deepCopy(retval);
    }
    try {
      responsePayload=RPC.encodeResponseForSuccess(rpcRequest.getMethod(),retval,rpcRequest.getSerializationPolicy());
    }
 catch (    IllegalArgumentException ex) {
      Log log=LogFactory.getLog(GWTServlet.class);
      log.error(""String_Node_Str"",ex);
      responsePayload=RPC.encodeResponseForFailure(rpcRequest.getMethod(),ex);
    }
  }
  return responsePayload;
}","@Override public String processCall(String payload) throws SerializationException {
  String responsePayload=null;
  RPCRequest rpcRequest=null;
  Object targetObject=null;
  if (responsePayload == null) {
    try {
      rpcRequest=RPC.decodeRequest(payload,null,this);
    }
 catch (    NullPointerException ex) {
      Log LOG=LogFactory.getLog(GWTServlet.class);
      LOG.info(""String_Node_Str"");
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  Object retval=null;
  if (responsePayload == null) {
    try {
      targetObject=retrieveTargetObject(this.getThreadLocalRequest());
      if (targetObject == null) {
        Log log=LogFactory.getLog(GWTServlet.class);
        log.info(""String_Node_Str"");
        throw new RuntimeException(""String_Node_Str"");
      }
      Method method=rpcRequest.getMethod();
      Object[] params=rpcRequest.getParameters();
      Method targetMethod=findTargetMethod(targetObject,method,params);
      Class<?> methodParameterTypes[]=method.getParameterTypes();
      Class<?> targetMethodParameterTypes[]=targetMethod.getParameterTypes();
      UserServerContext userContext=null;
      if (authApiProvider_ != null) {
        HttpSession session=getThreadLocalRequest().getSession(true);
        Object o=session.getAttribute(""String_Node_Str"");
        if (o == null) {
          userContext=authApiProvider_.getAnonimousContext();
        }
 else {
          if (o instanceof UserServerContext) {
            userContext=(UserServerContext)o;
          }
 else           if (o instanceof String) {
            userContext=authApiProvider_.findContextById((String)o);
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
      Object[] targetParams;
      int copyOffset=0;
      boolean copy=false;
      boolean eraseIdParam=false;
      int userIdParamIndex=-1;
      UserIdParameter uidAnn=targetMethod.getAnnotation(UserIdParameter.class);
      if (uidAnn != null) {
        userIdParamIndex=uidAnn.value();
      }
      if (targetMethodParameterTypes.length > methodParameterTypes.length) {
        targetParams=new Object[targetMethodParameterTypes.length];
        copy=true;
        copyOffset=1;
        if (authApiProvider_ != null) {
          targetParams[0]=userContext;
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + targetMethod.toString());
        }
      }
 else       if (targetMethodParameterTypes.length == methodParameterTypes.length) {
        if (inputParametersReplicator_ != null) {
          targetParams=new Object[targetMethodParameterTypes.length];
          copy=true;
        }
 else {
          copy=false;
          targetParams=params;
        }
      }
 else       if (targetMethodParameterTypes.length < methodParameterTypes.length) {
        targetParams=new Object[targetMethodParameterTypes.length];
        copy=true;
        eraseIdParam=true;
      }
 else {
        throw new IllegalStateException(""String_Node_Str"");
      }
      if (copy) {
        if (inputParametersReplicator_ != null) {
          for (int i=copyOffset; i < targetMethodParameterTypes.length; ++i) {
            if (i - copyOffset == userIdParamIndex) {
              if (!eraseIdParam) {
                Object o=params[i - copyOffset];
                if (o != null) {
                  targetParams[i]=authApiProvider_.findContextById(o.toString());
                }
 else {
                  targetParams[i]=authApiProvider_.getAnonimousContext();
                }
                continue;
              }
 else {
                --copyOffset;
              }
            }
            targetParams[i]=inputParametersReplicator_.replicateBean(params[i - copyOffset]);
          }
        }
 else {
          for (int i=copyOffset; i < targetMethodParameterTypes.length; ++i) {
            if (i - copyOffset == userIdParamIndex) {
              if (!eraseIdParam) {
                Object o=params[i - copyOffset];
                if (o != null) {
                  targetParams[i]=authApiProvider_.findContextById(o.toString());
                }
 else {
                  targetParams[i]=authApiProvider_.getAnonimousContext();
                }
                continue;
              }
 else {
                --copyOffset;
              }
            }
            targetParams[i]=params[i - copyOffset];
          }
        }
      }
      if (authApiProvider_ != null) {
        if (!AuthServerApiHelper.checkMethodPermissions(targetMethod,targetParams,userContext)) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
      retval=targetMethod.invoke(targetObject,targetParams);
    }
 catch (    RuntimeException ex) {
      Log log=LogFactory.getLog(GWTServlet.class);
      log.info(""String_Node_Str"",ex);
      responsePayload=RPC.encodeResponseForFailure(null,ex,rpcRequest.getSerializationPolicy());
    }
catch (    Exception ex) {
      boolean toLog=((!(ex instanceof Serializable)) || debug_);
      if (toLog) {
        Log log=LogFactory.getLog(GWTServlet.class);
        log.info(""String_Node_Str"",ex);
      }
      responsePayload=RPC.encodeResponseForFailure(null,ex,rpcRequest.getSerializationPolicy());
    }
  }
  if (responsePayload == null) {
    if (resultReplicator_ != null) {
      retval=resultReplicator_.replicateBean(retval);
    }
 else     if (resultHibernateBeanReplicator_ != null) {
      retval=resultHibernateBeanReplicator_.deepCopy(retval);
    }
    try {
      responsePayload=RPC.encodeResponseForSuccess(rpcRequest.getMethod(),retval,rpcRequest.getSerializationPolicy());
    }
 catch (    IllegalArgumentException ex) {
      Log log=LogFactory.getLog(GWTServlet.class);
      log.error(""String_Node_Str"",ex);
      responsePayload=RPC.encodeResponseForFailure(rpcRequest.getMethod(),ex);
    }
  }
  return responsePayload;
}"
84907,"@Override public String processCall(String payload) throws SerializationException {
  String responsePayload=null;
  RPCRequest rpcRequest=null;
  Object targetObject=null;
  if (responsePayload == null) {
    try {
      rpcRequest=RPC.decodeRequest(payload,null,this);
    }
 catch (    NullPointerException ex) {
      Log LOG=LogFactory.getLog(GWTServlet.class);
      LOG.info(""String_Node_Str"");
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  Object retval=null;
  if (responsePayload == null) {
    try {
      targetObject=retrieveTargetObject(this.getThreadLocalRequest());
      if (targetObject == null) {
        Log log=LogFactory.getLog(GWTServlet.class);
        log.info(""String_Node_Str"");
        throw new RuntimeException(""String_Node_Str"");
      }
      Method method=rpcRequest.getMethod();
      Object[] params=rpcRequest.getParameters();
      Method targetMethod=findTargetMethod(targetObject,method,params);
      Class<?> methodParameterTypes[]=method.getParameterTypes();
      Class<?> targetMethodParameterTypes[]=targetMethod.getParameterTypes();
      UserServerContext userContext=null;
      if (authApiProvider_ != null) {
        HttpSession session=getThreadLocalRequest().getSession(true);
        Object o=session.getAttribute(""String_Node_Str"");
        if (o == null) {
          userContext=authApiProvider_.getAnonimousContext();
        }
 else {
          if (o instanceof UserServerContext) {
            userContext=(UserServerContext)o;
          }
 else           if (o instanceof String) {
            userContext=authApiProvider_.findContextById((String)o);
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
      Object[] targetParams;
      int copyOffset=0;
      boolean copy=false;
      boolean eraseIdParam=false;
      int userIdParamIndex=-1;
      UserIdParameter uidAnn=targetMethod.getAnnotation(UserIdParameter.class);
      if (uidAnn != null) {
        userIdParamIndex=uidAnn.value();
      }
      if (targetMethodParameterTypes.length > methodParameterTypes.length) {
        targetParams=new Object[targetMethodParameterTypes.length];
        copy=true;
        copyOffset=1;
        if (authApiProvider_ != null) {
          targetParams[0]=userContext;
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + targetMethod.toString());
        }
      }
 else       if (targetMethodParameterTypes.length == methodParameterTypes.length) {
        if (inputParametersReplicator_ != null) {
          targetParams=new Object[targetMethodParameterTypes.length];
          copy=true;
        }
 else {
          copy=false;
          targetParams=params;
        }
      }
 else       if (targetMethodParameterTypes.length < methodParameterTypes.length) {
        targetParams=new Object[targetMethodParameterTypes.length];
        copy=true;
        eraseIdParam=true;
      }
 else {
        throw new IllegalStateException(""String_Node_Str"");
      }
      if (copy) {
        if (inputParametersReplicator_ != null) {
          for (int i=copyOffset; i < targetMethodParameterTypes.length; ++i) {
            if (i - copyOffset == userIdParamIndex) {
              if (!eraseIdParam) {
                Object o=params[i - copyOffset];
                if (o != null) {
                  targetParams[i]=authApiProvider_.findContextById(o.toString());
                }
 else {
                  targetParams[i]=authApiProvider_.getAnonimousContext();
                }
                continue;
              }
 else {
                --copyOffset;
              }
            }
            targetParams[i]=inputParametersReplicator_.replicateBean(params[i - copyOffset]);
          }
        }
 else {
          for (int i=copyOffset; i < targetMethodParameterTypes.length; ++i) {
            if (i - copyOffset == userIdParamIndex) {
              if (!eraseIdParam) {
                Object o=params[i - copyOffset];
                if (o != null) {
                  targetParams[i]=authApiProvider_.findContextById(o.toString());
                }
 else {
                  targetParams[i]=authApiProvider_.getAnonimousContext();
                }
                continue;
              }
 else {
                --copyOffset;
              }
            }
            targetParams[i]=params[i - copyOffset];
          }
        }
      }
      if (authApiProvider_ != null) {
        if (!(targetObject instanceof AuthClientApiHttpRequestScopeImpl)) {
          if (!AuthServerApiHelper.checkMethodPermissions(targetMethod,targetParams,userContext)) {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
      retval=targetMethod.invoke(targetObject,targetParams);
    }
 catch (    RuntimeException ex) {
      Log log=LogFactory.getLog(GWTServlet.class);
      log.info(""String_Node_Str"",ex);
      responsePayload=RPC.encodeResponseForFailure(null,ex,rpcRequest.getSerializationPolicy());
    }
catch (    Exception ex) {
      boolean toLog=((!(ex instanceof Serializable)) || debug_);
      if (toLog) {
        Log log=LogFactory.getLog(GWTServlet.class);
        log.info(""String_Node_Str"",ex);
      }
      responsePayload=RPC.encodeResponseForFailure(null,ex,rpcRequest.getSerializationPolicy());
    }
  }
  if (responsePayload == null) {
    if (resultReplicator_ != null) {
      retval=resultReplicator_.replicateBean(retval);
    }
 else     if (resultHibernateBeanReplicator_ != null) {
      retval=resultHibernateBeanReplicator_.deepCopy(retval);
    }
    try {
      responsePayload=RPC.encodeResponseForSuccess(rpcRequest.getMethod(),retval,rpcRequest.getSerializationPolicy());
    }
 catch (    IllegalArgumentException ex) {
      Log log=LogFactory.getLog(GWTServlet.class);
      log.error(""String_Node_Str"",ex);
      responsePayload=RPC.encodeResponseForFailure(rpcRequest.getMethod(),ex);
    }
  }
  return responsePayload;
}","@Override public String processCall(String payload) throws SerializationException {
  String responsePayload=null;
  RPCRequest rpcRequest=null;
  Object targetObject=null;
  if (responsePayload == null) {
    try {
      rpcRequest=RPC.decodeRequest(payload,null,this);
    }
 catch (    NullPointerException ex) {
      Log LOG=LogFactory.getLog(GWTServlet.class);
      LOG.info(""String_Node_Str"");
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  Object retval=null;
  if (responsePayload == null) {
    try {
      targetObject=retrieveTargetObject(this.getThreadLocalRequest());
      if (targetObject == null) {
        Log log=LogFactory.getLog(GWTServlet.class);
        log.info(""String_Node_Str"");
        throw new RuntimeException(""String_Node_Str"");
      }
      Method method=rpcRequest.getMethod();
      Object[] params=rpcRequest.getParameters();
      Method targetMethod=findTargetMethod(targetObject,method,params);
      Class<?> methodParameterTypes[]=method.getParameterTypes();
      Class<?> targetMethodParameterTypes[]=targetMethod.getParameterTypes();
      UserServerContext userContext=null;
      if (authApiProvider_ != null) {
        HttpSession session=getThreadLocalRequest().getSession(true);
        Object o=session.getAttribute(""String_Node_Str"");
        if (o == null) {
          userContext=authApiProvider_.getAnonimousContext();
        }
 else {
          if (o instanceof UserServerContext) {
            userContext=(UserServerContext)o;
          }
 else           if (o instanceof String) {
            userContext=authApiProvider_.findContextById((String)o);
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
      Object[] targetParams;
      int copyOffset=0;
      boolean copy=false;
      boolean eraseIdParam=false;
      int userIdParamIndex=-1;
      UserIdParameter uidAnn=targetMethod.getAnnotation(UserIdParameter.class);
      if (uidAnn != null) {
        userIdParamIndex=uidAnn.value();
      }
      if (targetMethodParameterTypes.length > methodParameterTypes.length) {
        targetParams=new Object[targetMethodParameterTypes.length];
        copy=true;
        copyOffset=1;
        if (authApiProvider_ != null) {
          targetParams[0]=userContext;
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + targetMethod.toString());
        }
      }
 else       if (targetMethodParameterTypes.length == methodParameterTypes.length) {
        if (inputParametersReplicator_ != null) {
          targetParams=new Object[targetMethodParameterTypes.length];
          copy=true;
        }
 else {
          copy=false;
          targetParams=params;
        }
      }
 else       if (targetMethodParameterTypes.length < methodParameterTypes.length) {
        targetParams=new Object[targetMethodParameterTypes.length];
        copy=true;
        eraseIdParam=true;
      }
 else {
        throw new IllegalStateException(""String_Node_Str"");
      }
      if (copy) {
        if (inputParametersReplicator_ != null) {
          for (int i=copyOffset; i < targetMethodParameterTypes.length; ++i) {
            if (i - copyOffset == userIdParamIndex) {
              if (!eraseIdParam) {
                Object o=params[i - copyOffset];
                if (o != null) {
                  targetParams[i]=authApiProvider_.findContextById(o.toString());
                }
 else {
                  targetParams[i]=authApiProvider_.getAnonimousContext();
                }
                continue;
              }
 else {
                --copyOffset;
              }
            }
            targetParams[i]=inputParametersReplicator_.replicateBean(params[i - copyOffset]);
          }
        }
 else {
          for (int i=copyOffset; i < targetMethodParameterTypes.length; ++i) {
            if (i - copyOffset == userIdParamIndex) {
              if (!eraseIdParam) {
                Object o=params[i - copyOffset];
                if (o != null) {
                  targetParams[i]=authApiProvider_.findContextById(o.toString());
                }
 else {
                  targetParams[i]=authApiProvider_.getAnonimousContext();
                }
                continue;
              }
 else {
                --copyOffset;
              }
            }
            targetParams[i]=params[i - copyOffset];
          }
        }
      }
      if (authApiProvider_ != null) {
        if (!(targetObject instanceof AuthClientApiHttpRequestScopeImpl)) {
          if (!AuthServerApiHelper.checkMethodPermissions(targetMethod,targetParams,userContext)) {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
      retval=targetMethod.invoke(targetObject,targetParams);
    }
 catch (    RuntimeException ex) {
      Log log=LogFactory.getLog(GWTServlet.class);
      log.info(""String_Node_Str"",ex);
      responsePayload=RPC.encodeResponseForFailure(null,ex,rpcRequest.getSerializationPolicy());
    }
catch (    InvocationTargetException ex) {
      Throwable thr1=ex.getTargetException();
      if (thr1 instanceof Exception) {
        boolean toLog=((!(thr1 instanceof Serializable)) || debug_);
        if (toLog) {
          Log log=LogFactory.getLog(GWTServlet.class);
          log.info(""String_Node_Str"",thr1);
        }
      }
 else {
        Log log=LogFactory.getLog(GWTServlet.class);
        log.info(""String_Node_Str"",thr1);
      }
      responsePayload=RPC.encodeResponseForFailure(null,thr1,rpcRequest.getSerializationPolicy());
    }
catch (    Exception ex) {
      boolean toLog=((!(ex instanceof Serializable)) || debug_);
      if (toLog) {
        Log log=LogFactory.getLog(GWTServlet.class);
        log.info(""String_Node_Str"",ex);
      }
      responsePayload=RPC.encodeResponseForFailure(null,ex,rpcRequest.getSerializationPolicy());
    }
  }
  if (responsePayload == null) {
    if (resultReplicator_ != null) {
      retval=resultReplicator_.replicateBean(retval);
    }
 else     if (resultHibernateBeanReplicator_ != null) {
      retval=resultHibernateBeanReplicator_.deepCopy(retval);
    }
    try {
      responsePayload=RPC.encodeResponseForSuccess(rpcRequest.getMethod(),retval,rpcRequest.getSerializationPolicy());
    }
 catch (    IllegalArgumentException ex) {
      Log log=LogFactory.getLog(GWTServlet.class);
      log.error(""String_Node_Str"",ex);
      responsePayload=RPC.encodeResponseForFailure(rpcRequest.getMethod(),ex);
    }
  }
  return responsePayload;
}"
84908,"/** 
 * get security annotation for method. Unlike method.getAnnotation() method, check not only in supreclasses, but in interfaces.
 */
private static <T>T findAnnotation(Method m,Class<T> annotationClass){
  Annotation retval=authAnnotationsHash_.get(m);
  if (retval == null) {
    Class cls=m.getDeclaringClass();
    retval=cls.getAnnotation(annotationClass);
    if (retval == null) {
      Class[] interfaces=cls.getInterfaces();
      for (int i=0; i < interfaces.length; ++i) {
        retval=interfaces[i].getAnnotation(annotationClass);
        if (retval != null) {
          break;
        }
      }
    }
  }
  if (retval != null) {
    authAnnotationsHash_.put(m,retval);
    return (T)retval;
  }
 else {
    return null;
  }
}","/** 
 * get security annotation for method. Unlike method.getAnnotation() method, check not only in supreclasses, but in interfaces.
 */
private static <T extends Annotation>T findAnnotation(Method m,Class<T> annotationClass){
  System.err.print(""String_Node_Str"" + annotationClass.getName() + ""String_Node_Str""+ m);
  Annotation retval=authAnnotationsHash_.get(m);
  if (retval == null) {
    retval=m.getAnnotation(annotationClass);
    if (retval == null) {
      Class cls=m.getDeclaringClass();
      Class[] interfaces=cls.getInterfaces();
      for (int i=0; i < interfaces.length; ++i) {
        try {
          Method mi=interfaces[i].getMethod(m.getName(),m.getParameterTypes());
          retval=mi.getAnnotation(annotationClass);
        }
 catch (        NoSuchMethodException ex) {
          continue;
        }
        if (retval != null) {
          break;
        }
      }
    }
  }
  if (retval != null) {
    System.err.println(""String_Node_Str"");
    authAnnotationsHash_.put(m,retval);
    return (T)retval;
  }
 else {
    System.err.println(""String_Node_Str"");
    return null;
  }
}"
84909,"public boolean checkPermission(String permissionName,Map<String,String> permissionArguments){
  if (!inversePermissions_) {
    return !permissions_.contains(permissionName);
  }
 else {
    return permissions_.contains(permissionName);
  }
}","public boolean checkPermission(String permissionName,Map<String,String> permissionArguments){
  boolean retval;
  System.err.println(""String_Node_Str"" + permissionName + ""String_Node_Str""+ login_);
  if (inversePermissions_) {
    retval=!permissions_.contains(permissionName);
  }
 else {
    retval=permissions_.contains(permissionName);
  }
  System.err.println(""String_Node_Str"" + retval);
  return retval;
}"
84910,"public UserRecord(String userId_){
  String msg=userId_ + Long.toHexString(System.currentTimeMillis()) + Integer.toHexString(random.nextInt());
  sessionTicket_=md5Hash(msg);
}","public UserRecord(String userId){
  userId_=userId;
  String msg=userId_ + Long.toHexString(System.currentTimeMillis()) + Integer.toHexString(random.nextInt());
  sessionTicket_=md5Hash(msg);
}"
84911,"/** 
 * substitue named parameters in string part, where we know that part does not contains string literals.
 */
private static void substituteNamedParametersInPart(int index,String part,StringBuilder qb,List<Object> posParams,Map<String,Object> namedParams){
  int sqlPositionParameterIndex=1;
  int varIndex=index;
  char[] arr=part.toCharArray();
  while (varIndex < arr.length) {
    while (varIndex < arr.length && arr[varIndex] != ':') {
      qb.append(arr[varIndex]);
      ++varIndex;
    }
    if (varIndex != arr.length) {
      boolean found=false;
      int i=++varIndex;
      for (; i < arr.length && !found; ++i) {
        if (!Character.isLetterOrDigit(arr[i])) {
          found=true;
        }
      }
      if (i == varIndex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String varName=part.substring(varIndex,i);
      Object varValue=namedParams.get(varName);
      if (varValue == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + varName + ""String_Node_Str"");
      }
      qb.append(""String_Node_Str"");
      posParams.add(varValue);
      ++sqlPositionParameterIndex;
      varIndex=i;
    }
  }
}","/** 
 * substitue named parameters in string part, where we know that part does not contains string literals.
 */
private static void substituteNamedParametersInPart(int index,String part,StringBuilder qb,List<Object> posParams,Map<String,Object> namedParams){
  int sqlPositionParameterIndex=1;
  int varIndex=index;
  char[] arr=part.toCharArray();
  while (varIndex < arr.length) {
    while (varIndex < arr.length && arr[varIndex] != ':') {
      qb.append(arr[varIndex]);
      ++varIndex;
    }
    if (varIndex != arr.length) {
      boolean found=false;
      int i=++varIndex;
      for (; i < arr.length && !found; ++i) {
        if (!Character.isLetterOrDigit(arr[i])) {
          found=true;
          break;
        }
      }
      if (i == varIndex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String varName=part.substring(varIndex,i);
      Object varValue=namedParams.get(varName);
      if (varValue == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + varName + ""String_Node_Str"");
      }
      qb.append(""String_Node_Str"");
      posParams.add(varValue);
      ++sqlPositionParameterIndex;
      varIndex=i;
    }
  }
}"
84912,"/** 
 * substitue named parameters in string part, where we know that part does not contains string literals.
 */
private static void substituteNamedParametersInPart(int index,String part,StringBuilder qb,List<Object> posParams,Map<String,Object> namedParams){
  int sqlPositionParameterIndex=1;
  int varIndex=index;
  char[] arr=part.toCharArray();
  while (varIndex < arr.length) {
    while (varIndex < arr.length && arr[varIndex] != ':') {
      qb.append(arr[varIndex]);
      ++varIndex;
    }
    if (varIndex != arr.length) {
      boolean found=false;
      int i=++varIndex;
      for (; i < arr.length && !found; ++i) {
        if (!Character.isLetterOrDigit(arr[i])) {
          found=true;
          break;
        }
      }
      if (i == varIndex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String varName=part.substring(varIndex,i);
      Object varValue=namedParams.get(varName);
      if (varValue == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + varName + ""String_Node_Str"");
      }
      qb.append(""String_Node_Str"");
      posParams.add(varValue);
      ++sqlPositionParameterIndex;
      varIndex=i;
    }
  }
}","/** 
 * substitue named parameters in string part, where we know that part does not contains string literals.
 */
private static void substituteNamedParametersInPart(int index,String part,StringBuilder qb,List<Object> posParams,Map<String,Object> namedParams){
  int sqlPositionParameterIndex=1;
  int varIndex=index;
  char[] arr=part.toCharArray();
  while (varIndex < arr.length) {
    while (varIndex < arr.length && arr[varIndex] != ':') {
      qb.append(arr[varIndex]);
      ++varIndex;
    }
    if (varIndex != arr.length) {
      boolean found=false;
      int i=++varIndex;
      for (; i < arr.length && !found; ++i) {
        if (!Character.isJavaIdentifierPart(arr[i])) {
          found=true;
          break;
        }
      }
      if (i == varIndex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String varName=part.substring(varIndex,i);
      Object varValue=namedParams.get(varName);
      if (varValue == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + varName + ""String_Node_Str"");
      }
      qb.append(""String_Node_Str"");
      posParams.add(varValue);
      ++sqlPositionParameterIndex;
      varIndex=i;
    }
  }
}"
84913,"@Override public Object getValue(int row,int col){
  return data.elementAt(row)[col];
}","@Override public Object getValue(int row,int col){
  return data[row][col];
}"
84914,"public DomDomMatrix(int numCols){
  this.numCols=numCols;
  data=new Vector<Object[]>();
}","public DomDomMatrix(DomainByInt aRowDomain,DomainByInt aColDomain){
  rowDomain=aRowDomain;
  colDomain=aColDomain;
  data=new Object[numRows()][numCols()];
}"
84915,"@Override public Object getValue(int row,int col){
  return data[row][col];
}","@Override public Object getValue(int row,int col){
  return data.elementAt(row)[col];
}"
84916,"public DomDomMatrixVectorArray(DomainByInt aRowDomain,DomainByInt aColDomain){
  rowDomain=aRowDomain;
  colDomain=aColDomain;
  data=new Object[numRows()][numCols()];
}","public DomDomMatrixVectorArray(int numCols){
  this.numCols=numCols;
  data=new Vector<Object[]>();
}"
84917,"public void update(){
  try {
    URL url=new URL(""String_Node_Str"");
    BufferedReader in=new BufferedReader(new InputStreamReader(url.openStream()));
    String str;
    while ((str=in.readLine()) != null) {
      int version=Integer.parseInt(str);
      if (version > minecod_version) {
        in.close();
        File directory=new File(getServer().getUpdateFolder());
        File plugin=new File(directory.getPath(),""String_Node_Str"");
        download(log,new URL(""String_Node_Str""),plugin);
        getServer().dispatchCommand(new ConsoleCommandSender(getServer()),""String_Node_Str"");
        break;
      }
    }
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public boolean update(){
  try {
    URL url=new URL(""String_Node_Str"");
    BufferedReader in=new BufferedReader(new InputStreamReader(url.openStream()));
    String str;
    while ((str=in.readLine()) != null) {
      int version=Integer.parseInt(str);
      if (version > minecod_version) {
        in.close();
        File directory=new File(getServer().getUpdateFolder());
        File plugin=new File(directory.getPath(),""String_Node_Str"");
        download(log,new URL(""String_Node_Str""),plugin);
        getServer().dispatchCommand(new ConsoleCommandSender(getServer()),""String_Node_Str"");
        return true;
      }
    }
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}"
84918,"@Override public void onEnable(){
  try {
    log=getServer().getLogger();
    update();
    uids.put(""String_Node_Str"",0);
    uids.put(""String_Node_Str"",1);
    uids.put(""String_Node_Str"",2);
    uids.put(""String_Node_Str"",3);
    setup();
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"" + e.getMessage());
    getServer().getPluginManager().disablePlugin(this);
  }
}","@Override public void onEnable(){
  try {
    log=getServer().getLogger();
    if (!update()) {
      uids.put(""String_Node_Str"",0);
      uids.put(""String_Node_Str"",1);
      uids.put(""String_Node_Str"",2);
      uids.put(""String_Node_Str"",3);
      setup();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"" + e.getMessage());
    getServer().getPluginManager().disablePlugin(this);
  }
}"
84919,"public void update(){
  List<Stat> r=new ArrayList<Stat>();
  for (  Stat i : newv) {
    plugin.sql.update(""String_Node_Str"" + p.dbid + ""String_Node_Str""+ i.getId()+ ""String_Node_Str""+ stats.get(i)+ ""String_Node_Str"");
    r.add(i);
  }
  newv.removeAll(r);
  updated.removeAll(r);
  r.clear();
  for (  Stat i : updated) {
    plugin.sql.update(""String_Node_Str"" + stats.get(i) + ""String_Node_Str""+ p.dbid+ ""String_Node_Str""+ i.getId()+ ""String_Node_Str"");
    r.add(i);
  }
  updated.removeAll(r);
  r.clear();
  for (  Achievement a : newa) {
    plugin.sql.update(""String_Node_Str"" + p.dbid + ""String_Node_Str""+ a.getId()+ ""String_Node_Str"");
  }
  newa.clear();
}","public void update(){
synchronized (this) {
    List<Stat> r=new ArrayList<Stat>();
    for (    Stat i : newv) {
      plugin.sql.update(""String_Node_Str"" + p.dbid + ""String_Node_Str""+ i.getId()+ ""String_Node_Str""+ stats.get(i)+ ""String_Node_Str"");
      r.add(i);
    }
    newv.removeAll(r);
    updated.removeAll(r);
    r.clear();
    for (    Stat i : updated) {
      plugin.sql.update(""String_Node_Str"" + stats.get(i) + ""String_Node_Str""+ p.dbid+ ""String_Node_Str""+ i.getId()+ ""String_Node_Str"");
      r.add(i);
    }
    updated.removeAll(r);
    r.clear();
    for (    Achievement a : newa) {
      plugin.sql.update(""String_Node_Str"" + p.dbid + ""String_Node_Str""+ a.getId()+ ""String_Node_Str"");
    }
    newa.clear();
  }
}"
84920,"public void incStat(Stat s,int c){
  if (stats.containsKey(s)) {
    updated.add(s);
  }
 else {
    newv.add(s);
  }
  int out=getStat(s) + c;
  if (out < 0) {
    out=0;
  }
  ArrayList<Achievement> tmp=new ArrayList<Achievement>();
  for (  Achievement a : toach) {
    if (a.getStat() == s && a.getCount() <= out) {
      tmp.add(a);
    }
  }
  for (  Achievement a : tmp) {
    awardAchievement(a);
  }
  stats.put(s,out);
}","public void incStat(Stat s,int c){
synchronized (this) {
    if (stats.containsKey(s)) {
      updated.add(s);
    }
 else {
      newv.add(s);
    }
    int out=getStat(s) + c;
    if (out < 0) {
      out=0;
    }
    ArrayList<Achievement> tmp=new ArrayList<Achievement>();
    for (    Achievement a : toach) {
      if (a.getStat() == s && a.getCount() <= out) {
        tmp.add(a);
      }
    }
    for (    Achievement a : tmp) {
      awardAchievement(a);
    }
    stats.put(s,out);
  }
}"
84921,"@Override public void onKill(player attacker,player defender,Location l){
  super.onKill(attacker,defender,l);
  attacker.addPoints(5);
  defender.addPoints(-2);
  int s=scores.containsKey(attacker) ? scores.get(attacker) + 1 : 1;
  scores.put(attacker,s);
  if (scores.get(attacker) >= 1) {
    onWin(attacker,attacker,defender);
  }
}","@Override public void onKill(player attacker,player defender,Location l){
  super.onKill(attacker,defender,l);
  attacker.addPoints(5);
  defender.addPoints(-2);
  int s=scores.containsKey(attacker) ? scores.get(attacker) + 1 : 1;
  scores.put(attacker,s);
  if (scores.get(attacker) >= 20) {
    onWin(attacker,attacker,defender);
  }
}"
84922,"public void tickfast(){
  List<claymore> r=new ArrayList<claymore>();
  List<Entity> r2=new ArrayList<Entity>();
  for (  Entity i : plugin.currentWorld.getEntities()) {
    if (i instanceof Arrow) {
      Location l=i.getLocation();
      for (      claymore j : plugin.clays) {
        if (j.b.getLocation().add(0.5,0,0.5).distance(l) < 1) {
          j.setOwner((Player)((Arrow)i).getShooter(),plugin.p((Player)((Arrow)i).getShooter()));
          j.kill();
          r.add(j);
        }
      }
      if (ploc.containsKey(i)) {
        if (l.distance(ploc.get(i)) < 0.1) {
          r2.add(i);
          for (          chopper j : plugin.choppers) {
            if (j.l.distance(l) < 1.5) {
              j.arrowhit();
            }
          }
        }
      }
      ploc.put((Arrow)i,l);
    }
 else     if (i instanceof Item) {
      int itemId=((EntityItem)((CraftEntity)i).getHandle()).itemStack.id;
      if (!plugin.playerListener.allowed_pickup.contains(Material.getMaterial(itemId))) {
        r2.add(i);
      }
    }
 else     if (i instanceof Creature && !(i instanceof Wolf)) {
      r2.add(i);
    }
    for (    Entity j : r2) {
      j.remove();
    }
  }
  for (  claymore i : plugin.clays) {
    if (i.init < new Date().getTime() && i.b.getType() != Material.WALL_SIGN) {
      i.b.setType(Material.WALL_SIGN);
switch (i.r) {
case 1:
        i.b.setData((byte)4);
      break;
case 2:
    i.b.setData((byte)2);
  break;
case 3:
i.b.setData((byte)5);
break;
case 4:
i.b.setData((byte)3);
break;
}
if (i.b.getState() instanceof Sign) {
Sign s=(Sign)i.b.getState();
s.setLine(0,getClaymoreText(i.getOwner()));
s.setLine(3,getClaymoreText(i.getOwner()));
s.setLine(1,""String_Node_Str"");
s.setLine(2,""String_Node_Str"");
s.update();
}
}
if (i.exploded && i.explode < new Date().getTime()) {
i.kill();
r.add(i);
}
}
plugin.clays.removeAll(r);
}","public void tickfast(){
  List<claymore> r=new ArrayList<claymore>();
  List<Entity> r2=new ArrayList<Entity>();
  for (  Entity i : plugin.currentWorld.getEntities()) {
    if (i instanceof Arrow) {
      Location l=i.getLocation();
      for (      claymore j : plugin.clays) {
        if (j.b.getLocation().add(0.5,0,0.5).distance(l) < 1) {
          j.setOwner((Player)((Arrow)i).getShooter(),plugin.p((Player)((Arrow)i).getShooter()));
          j.kill();
          r.add(j);
        }
      }
      if (!floc.containsKey(i)) {
        floc.put((Arrow)i,i.getLocation());
      }
      if (ploc.containsKey(i)) {
        if (l.distance(ploc.get(i)) < 0.1) {
          r2.add(i);
          floc.remove(i);
          for (          chopper j : plugin.choppers) {
            if (j.l.distance(l) < 1.5) {
              j.arrowhit();
            }
          }
        }
      }
      ploc.put((Arrow)i,l);
    }
 else     if (i instanceof Item) {
      int itemId=((EntityItem)((CraftEntity)i).getHandle()).itemStack.id;
      if (!plugin.playerListener.allowed_pickup.contains(Material.getMaterial(itemId))) {
        r2.add(i);
      }
    }
 else     if (i instanceof Creature && !(i instanceof Wolf)) {
      r2.add(i);
    }
    for (    Entity j : r2) {
      j.remove();
    }
  }
  for (  claymore i : plugin.clays) {
    if (i.init < new Date().getTime() && i.b.getType() != Material.WALL_SIGN) {
      i.b.setType(Material.WALL_SIGN);
switch (i.r) {
case 1:
        i.b.setData((byte)4);
      break;
case 2:
    i.b.setData((byte)2);
  break;
case 3:
i.b.setData((byte)5);
break;
case 4:
i.b.setData((byte)3);
break;
}
if (i.b.getState() instanceof Sign) {
Sign s=(Sign)i.b.getState();
s.setLine(0,getClaymoreText(i.getOwner()));
s.setLine(3,getClaymoreText(i.getOwner()));
s.setLine(1,""String_Node_Str"");
s.setLine(2,""String_Node_Str"");
s.update();
}
}
if (i.exploded && i.explode < new Date().getTime()) {
i.kill();
r.add(i);
}
}
plugin.clays.removeAll(r);
}"
84923,"public void destroy(){
  plugin.getServer().getScheduler().cancelTasks(plugin);
  try {
    BukkitContrib.getAppearanceManager().resetAllCloaks();
  }
 catch (  NoClassDefFoundError e) {
  }
  for (  claymore i : plugin.clays) {
    i.b.setType(Material.AIR);
  }
  for (  CWolfPack i : plugin.wolves) {
    i.removeAll();
  }
  for (  sentry i : plugin.sentries) {
    i.destroy();
  }
  for (  chopper i : plugin.choppers) {
    i.destroy();
  }
  plugin.clays.clear();
  plugin.wolves.clear();
  plugin.sentries.clear();
  plugin.choppers.clear();
  plugin.activeGame=false;
  t.cancel();
}","public void destroy(){
  plugin.getServer().getScheduler().cancelTask(t1);
  plugin.getServer().getScheduler().cancelTask(t2);
  plugin.getServer().getScheduler().cancelTask(t3);
  plugin.getServer().getScheduler().cancelTask(t4);
  try {
    BukkitContrib.getAppearanceManager().resetAllCloaks();
  }
 catch (  NoClassDefFoundError e) {
  }
  for (  claymore i : plugin.clays) {
    i.b.setType(Material.AIR);
  }
  for (  CWolfPack i : plugin.wolves) {
    i.removeAll();
  }
  for (  sentry i : plugin.sentries) {
    i.destroy();
  }
  for (  chopper i : plugin.choppers) {
    i.destroy();
  }
  plugin.clays.clear();
  plugin.wolves.clear();
  plugin.sentries.clear();
  plugin.choppers.clear();
  plugin.activeGame=false;
  t.cancel();
}"
84924,"public gamemode(main instance){
  plugin=instance;
  setup();
  lossmesssages.add(""String_Node_Str"");
  lossmesssages.add(""String_Node_Str"");
  lossmesssages.add(""String_Node_Str"");
  winmesssages.add(""String_Node_Str"");
  winmesssages.add(""String_Node_Str"");
  scheduleGame();
}","public gamemode(main instance){
  plugin=instance;
  setup();
  t4=plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new tele(),4L,4L);
  lossmesssages.add(""String_Node_Str"");
  lossmesssages.add(""String_Node_Str"");
  lossmesssages.add(""String_Node_Str"");
  winmesssages.add(""String_Node_Str"");
  winmesssages.add(""String_Node_Str"");
  scheduleGame();
}"
84925,"public void startGame(){
  sendMessage(team.BOTH,plugin.d + ""String_Node_Str"");
  for (  Player p : plugin.players.keySet()) {
    plugin.p(p).resetScore();
    spawnPlayer(p,true);
  }
  plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new tick(),40L,40L);
  plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new tickone(),20L,20L);
  plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new tickfast(),2L,2L);
}","public void startGame(){
  sendMessage(team.BOTH,plugin.d + ""String_Node_Str"");
  for (  Player p : plugin.players.keySet()) {
    plugin.p(p).resetScore();
    spawnPlayer(p,true);
  }
  t1=plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new tick(),40L,40L);
  t2=plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new tickone(),20L,20L);
  t3=plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new tickfast(),2L,2L);
}"
84926,"public void playerjoin(PlayerJoinEvent event){
  plugin.setDoors();
  plugin.totele.add(event.getPlayer());
  t.schedule(new tele(),200);
  plugin.clearinv(event.getPlayer());
  String nick=event.getPlayer().getDisplayName();
  ResultSet r=plugin.sql.query(""String_Node_Str"" + event.getPlayer().getDisplayName() + ""String_Node_Str"");
  try {
    if (r.first()) {
      nick=r.getString(""String_Node_Str"");
    }
 else {
      int id=plugin.sql.update(""String_Node_Str"" + event.getPlayer().getDisplayName() + ""String_Node_Str""+ event.getPlayer().getDisplayName()+ ""String_Node_Str"");
      plugin.sql.update(""String_Node_Str"" + id + ""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  event.setJoinMessage(plugin.d + ""String_Node_Str"" + plugin.join_msg.replaceAll(""String_Node_Str"",nick));
  event.getPlayer().sendMessage(plugin.d + ""String_Node_Str"" + plugin.welcome_msg);
  event.getPlayer().setHealth(20);
}","public void playerjoin(PlayerJoinEvent event){
  plugin.setDoors();
  plugin.totele.add(event.getPlayer());
  plugin.clearinv(event.getPlayer());
  String nick=event.getPlayer().getDisplayName();
  ResultSet r=plugin.sql.query(""String_Node_Str"" + event.getPlayer().getDisplayName() + ""String_Node_Str"");
  try {
    if (r.first()) {
      nick=r.getString(""String_Node_Str"");
    }
 else {
      int id=plugin.sql.update(""String_Node_Str"" + event.getPlayer().getDisplayName() + ""String_Node_Str""+ event.getPlayer().getDisplayName()+ ""String_Node_Str"");
      plugin.sql.update(""String_Node_Str"" + id + ""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  event.setJoinMessage(plugin.d + ""String_Node_Str"" + plugin.join_msg.replaceAll(""String_Node_Str"",nick));
  event.getPlayer().sendMessage(plugin.d + ""String_Node_Str"" + plugin.welcome_msg);
  event.getPlayer().setHealth(20);
}"
84927,"@Override public void onEntityDamage(EntityDamageEvent event){
  event.setCancelled(true);
  try {
    if (event.getCause() == DamageCause.FALL && event.getDamage() >= 4) {
      if (event.getEntity() instanceof Player) {
        plugin.p((Player)event.getEntity()).incHealth(1,(Player)event.getEntity(),0,null);
      }
      event.setCancelled(false);
    }
    event.setDamage(1);
    if (event instanceof EntityDamageByProjectileEvent) {
      if (event.getEntity() instanceof Wolf) {
        plugin.wolves.remove(event.getEntity());
        event.getEntity().remove();
        return;
      }
 else {
        int reason=2;
        ownable ks=null;
        if (((CraftArrow)((EntityDamageByProjectileEvent)event).getProjectile()).getHandle() instanceof CArrow) {
          reason=((CArrow)((CraftArrow)((EntityDamageByProjectileEvent)event).getProjectile()).getHandle()).reason;
          ks=((CArrow)((CraftArrow)((EntityDamageByProjectileEvent)event).getProjectile()).getHandle()).killstreak;
        }
        Player attacker=(Player)(((EntityDamageByProjectileEvent)event).getDamager());
        Player defender=(Player)(((EntityDamageByProjectileEvent)event).getEntity());
        if (plugin.game.canHit(attacker,defender)) {
          if (reason == 2) {
            double dif=(((EntityDamageByProjectileEvent)event).getProjectile().getLocation().getY() - event.getEntity().getLocation().getY()) - 1.5;
            if (dif > 0.1 && dif < 0.5) {
              reason=7;
            }
          }
          plugin.p(defender).incHealth(1,attacker,reason,ks);
          event.setCancelled(false);
        }
      }
    }
 else     if (event instanceof EntityDamageByEntityEvent) {
      if (((EntityDamageByEntityEvent)event).getDamager() instanceof Player && event.getEntity() instanceof Player) {
        Player attacker=(Player)(((EntityDamageByEntityEvent)event).getDamager());
        Player defender=(Player)(((EntityDamageByEntityEvent)event).getEntity());
        Location a=attacker.getLocation();
        Location d=defender.getLocation();
        if (attacker.getItemInHand().getType() == Material.IRON_SWORD) {
          if (plugin.game.canHit(attacker,defender)) {
            double dist=Math.sqrt(Math.pow(a.getX() - d.getX(),2) + Math.pow(a.getZ() - d.getZ(),2));
            if (dist < 1.8) {
              plugin.p(defender).incHealth(2,attacker,1,null);
              event.setCancelled(false);
            }
          }
          if (defender.getHealth() < 3) {
            event.setDamage(0);
          }
        }
      }
 else       if (((EntityDamageByEntityEvent)event).getDamager() instanceof Wolf && ((EntityDamageByEntityEvent)event).getEntity() instanceof Player) {
        Player defender=(Player)(((EntityDamageByEntityEvent)event).getEntity());
        for (        CWolfPack i : plugin.wolves) {
          if (i.wolf.contains(((EntityDamageByEntityEvent)event).getDamager())) {
            if (plugin.game.canHit(i.getOwner(),defender)) {
              plugin.p(defender).incHealth(2,i.getOwner(),4,i);
            }
            i.remove((Wolf)((EntityDamageByEntityEvent)event).getDamager());
          }
        }
      }
 else       if (((EntityDamageByEntityEvent)event).getEntity() instanceof Wolf) {
        plugin.wolves.remove(event.getEntity());
        ((EntityDamageByEntityEvent)event).getEntity().remove();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    if (event.getEntity() instanceof Player) {
      ((Player)event.getEntity()).teleport(plugin.teamselect);
    }
  }
}","@Override public void onEntityDamage(EntityDamageEvent event){
  event.setCancelled(true);
  try {
    if (event.getCause() == DamageCause.FALL && event.getDamage() >= 4) {
      if (event.getEntity() instanceof Player) {
        plugin.p((Player)event.getEntity()).incHealth(1,(Player)event.getEntity(),0,null);
      }
      event.setCancelled(false);
    }
    event.setDamage(1);
    if (event instanceof EntityDamageByProjectileEvent) {
      if (event.getEntity() instanceof Wolf) {
        plugin.wolves.remove(event.getEntity());
        event.getEntity().remove();
        return;
      }
 else {
        int reason=2;
        Object ks=null;
        if (((CraftArrow)((EntityDamageByProjectileEvent)event).getProjectile()).getHandle() instanceof CArrow) {
          reason=((CArrow)((CraftArrow)((EntityDamageByProjectileEvent)event).getProjectile()).getHandle()).reason;
          ks=((CArrow)((CraftArrow)((EntityDamageByProjectileEvent)event).getProjectile()).getHandle()).killstreak;
        }
 else {
          ks=((EntityDamageByProjectileEvent)event).getProjectile();
        }
        Player attacker=(Player)(((EntityDamageByProjectileEvent)event).getDamager());
        Player defender=(Player)(((EntityDamageByProjectileEvent)event).getEntity());
        if (plugin.game.canHit(attacker,defender)) {
          if (reason == 2) {
            double dif=(((EntityDamageByProjectileEvent)event).getProjectile().getLocation().getY() - event.getEntity().getLocation().getY()) - 1.5;
            if (dif > 0.1 && dif < 0.5) {
              reason=7;
            }
          }
          plugin.p(defender).incHealth(1,attacker,reason,ks);
          event.setCancelled(false);
        }
      }
    }
 else     if (event instanceof EntityDamageByEntityEvent) {
      if (((EntityDamageByEntityEvent)event).getDamager() instanceof Player && event.getEntity() instanceof Player) {
        Player attacker=(Player)(((EntityDamageByEntityEvent)event).getDamager());
        Player defender=(Player)(((EntityDamageByEntityEvent)event).getEntity());
        Location a=attacker.getLocation();
        Location d=defender.getLocation();
        if (attacker.getItemInHand().getType() == Material.IRON_SWORD) {
          if (plugin.game.canHit(attacker,defender)) {
            double dist=Math.sqrt(Math.pow(a.getX() - d.getX(),2) + Math.pow(a.getZ() - d.getZ(),2));
            if (dist < 1.8) {
              plugin.p(defender).incHealth(2,attacker,1,null);
              event.setCancelled(false);
            }
          }
          if (defender.getHealth() < 3) {
            event.setDamage(0);
          }
        }
      }
 else       if (((EntityDamageByEntityEvent)event).getDamager() instanceof Wolf && ((EntityDamageByEntityEvent)event).getEntity() instanceof Player) {
        Player defender=(Player)(((EntityDamageByEntityEvent)event).getEntity());
        for (        CWolfPack i : plugin.wolves) {
          if (i.wolf.contains(((EntityDamageByEntityEvent)event).getDamager())) {
            if (plugin.game.canHit(i.getOwner(),defender)) {
              plugin.p(defender).incHealth(2,i.getOwner(),4,i);
            }
            i.remove((Wolf)((EntityDamageByEntityEvent)event).getDamager());
          }
        }
      }
 else       if (((EntityDamageByEntityEvent)event).getEntity() instanceof Wolf) {
        plugin.wolves.remove(event.getEntity());
        ((EntityDamageByEntityEvent)event).getEntity().remove();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    if (event.getEntity() instanceof Player) {
      ((Player)event.getEntity()).teleport(plugin.teamselect);
    }
  }
}"
84928,"public void onKill(player killed,int reason){
  s.incStat(Stat.KILLS);
  kill++;
  s.maxStat(Stat.MAX_KILLS,kill);
  if (reason == 2 || reason == 7) {
    s.maxStat(Stat.FURTHEST_KILL,(int)killed.p.getLocation().distance(p.getLocation()));
  }
  if (reason == 7) {
    s.maxStat(Stat.FURTHEST_HEADSHOT,(int)killed.p.getLocation().distance(p.getLocation()));
  }
  if (inv) {
    s.incStat(Stat.INVULNERABLE_KILLS);
  }
  if (killed.nick.equalsIgnoreCase(""String_Node_Str"")) {
    s.awardAchievement(Achievement.KILL_GIG);
  }
 else   if (killed.nick.equalsIgnoreCase(""String_Node_Str"")) {
    s.awardAchievement(Achievement.KILL_NOTCH);
  }
  if (reason <= 3 || reason == 7) {
    addStreak();
  }
  int ammo=0;
  for (  ItemStack i : p.getInventory().getContents()) {
    if (i != null) {
      if (i.getType() == Material.FEATHER || i.getType() == Material.ARROW) {
        ammo+=i.getAmount();
      }
    }
  }
  if (ammo == 0 && reason == 1) {
    s.awardAchievement(Achievement.LAST_RESORT);
  }
  if (killed.streak == 10) {
    s.awardAchievement(Achievement.CLOSE_CHOPPER);
  }
  if (killed == lastk) {
    lastk_count++;
    if (lastk_count >= 3) {
      s.awardAchievement(Achievement.NEMESIS);
    }
  }
 else {
    lastk=killed;
    lastk_count=1;
  }
  if (killed == plugin.game.getTopPlayer(t == team.GOLD ? team.DIAMOND : team.GOLD)) {
    lastk_top_count++;
    if (lastk_count >= 3) {
      s.awardAchievement(Achievement.FALL_HARD);
    }
  }
 else {
    lastk_top_count=0;
  }
  if (reason == 7) {
    hshot_streak++;
    if (hshot_streak > 3) {
      s.awardAchievement(Achievement.HOTSHOT);
    }
  }
 else {
    hshot_streak=0;
  }
  if (reason == 1) {
    melee_streak++;
    if (melee_streak > 3) {
      s.awardAchievement(Achievement.COMMANDO);
    }
  }
 else {
    melee_streak=0;
  }
switch (reason) {
case 1:
    knife++;
  break;
case 2:
arrow++;
break;
}
}","public void onKill(player killed,int reason,Object l){
  s.incStat(Stat.KILLS);
  kill++;
  s.maxStat(Stat.MAX_KILLS,kill);
  if (reason == 2 || reason == 7) {
    s.maxStat(Stat.FURTHEST_KILL,getDistance(killed,(Arrow)l));
  }
  if (reason == 7) {
    s.maxStat(Stat.FURTHEST_HEADSHOT,getDistance(killed,(Arrow)l));
  }
  if (plugin.game.floc.containsKey(l)) {
    plugin.game.floc.remove(l);
  }
  if (inv) {
    s.incStat(Stat.INVULNERABLE_KILLS);
  }
  if (killed.nick.equalsIgnoreCase(""String_Node_Str"")) {
    s.awardAchievement(Achievement.KILL_GIG);
  }
 else   if (killed.nick.equalsIgnoreCase(""String_Node_Str"")) {
    s.awardAchievement(Achievement.KILL_NOTCH);
  }
  if (reason <= 3 || reason == 7) {
    addStreak();
  }
  int ammo=0;
  for (  ItemStack i : p.getInventory().getContents()) {
    if (i != null) {
      if (i.getType() == Material.FEATHER || i.getType() == Material.ARROW) {
        ammo+=i.getAmount();
      }
    }
  }
  if (ammo == 0 && reason == 1) {
    s.awardAchievement(Achievement.LAST_RESORT);
  }
  if (killed.streak == 10) {
    s.awardAchievement(Achievement.CLOSE_CHOPPER);
  }
  if (killed == lastk) {
    lastk_count++;
    if (lastk_count >= 3) {
      s.awardAchievement(Achievement.NEMESIS);
    }
  }
 else {
    lastk=killed;
    lastk_count=1;
  }
  if (killed == plugin.game.getTopPlayer(t == team.GOLD ? team.DIAMOND : team.GOLD)) {
    lastk_top_count++;
    if (lastk_count >= 3) {
      s.awardAchievement(Achievement.FALL_HARD);
    }
  }
 else {
    lastk_top_count=0;
  }
  if (reason == 7) {
    hshot_streak++;
    if (hshot_streak > 3) {
      s.awardAchievement(Achievement.HOTSHOT);
    }
  }
 else {
    hshot_streak=0;
  }
  if (reason == 1) {
    melee_streak++;
    if (melee_streak > 3) {
      s.awardAchievement(Achievement.COMMANDO);
    }
  }
 else {
    melee_streak=0;
  }
switch (reason) {
case 1:
    knife++;
  break;
case 2:
arrow++;
break;
}
}"
84929,"public void incHealth(int _h,Player attacker,int reason,ownable ks){
  if (_h < 0 && h < 2) {
    regens++;
    s.maxStat(Stat.LIFE_REGENS,regens);
  }
  if (_h < 0 || inv == false) {
    h-=_h;
    if (h > 2) {
      h=2;
    }
    if (_h > 0) {
      htime=new Date().getTime() + 10000;
      stime=new Date().getTime() + 5000;
    }
    if (h <= 0) {
      regens=0;
      lastk_count=0;
      lastk_top_count=0;
      hshot_streak=0;
      melee_streak=0;
      player a=plugin.p(attacker);
      if (a != this) {
        a.onKill(this,reason);
      }
 else {
        kill--;
      }
      String assist_txt=""String_Node_Str"";
      if (assist != null && assist != attacker) {
        assist_txt=plugin.d + ""String_Node_Str"" + plugin.d+ plugin.p(assist).getTeam().getColour()+ plugin.p(assist).nick+ plugin.d+ ""String_Node_Str"";
        plugin.p(assist).assists++;
        plugin.p(assist).s.incStat(Stat.ASSISTS);
        plugin.p(assist).addPoints(2);
      }
      s.incStat(Stat.DEATHS);
      death++;
      s.maxStat(Stat.MAX_DEATHS,death);
      streak=0;
      h=2;
      int ammo=0;
      for (      ItemStack i : p.getInventory().getContents()) {
        if (i != null) {
          if (i.getType() == Material.FEATHER || i.getType() == Material.ARROW) {
            ammo+=i.getAmount();
          }
        }
      }
      ammo=(int)(ammo / 15);
      setStreaks();
      String desc=""String_Node_Str"";
      String as=""String_Node_Str"";
switch (reason) {
case 0:
        plugin.game.sendMessage(team.BOTH,plugin.d + ""String_Node_Str"" + plugin.p(p).nick+ ""String_Node_Str""+ assist_txt);
      plugin.p(p).s.incStat(Stat.FALL_DEATHS);
    break;
case 1:
  desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.KNIFE_DEATHS);
plugin.p(attacker).s.incStat(Stat.KNIFE_KILLS);
break;
case 2:
desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.BOW_DEATHS);
plugin.p(attacker).s.incStat(Stat.BOW_KILLS);
break;
case 3:
desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.CLAYMORE_DEATHS);
plugin.p(attacker).s.incStat(Stat.CLAYMORE_KILLS);
break;
case 4:
as=""String_Node_Str"";
desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.DOG_DEATHS);
plugin.p(attacker).s.incStat(Stat.DOG_KILLS);
break;
case 5:
as=""String_Node_Str"";
desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.SENTRY_DEATHS);
plugin.p(attacker).s.incStat(Stat.SENTRY_KILLS);
break;
case 6:
as=""String_Node_Str"";
desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.CHOPPER_DEATHS);
plugin.p(attacker).s.incStat(Stat.CHOPPER_KILLS);
break;
case 7:
desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.BOW_DEATHS);
plugin.p(attacker).s.incStat(Stat.HEADSHOTS);
plugin.p(attacker).s.incStat(Stat.BOW_KILLS);
break;
}
if (reason > 0) {
plugin.game.sendMessage(team.BOTH,plugin.d + plugin.p(attacker).getTeam().getColour() + plugin.p(attacker).nick+ as+ plugin.d+ ""String_Node_Str""+ desc+ ""String_Node_Str""+ plugin.d+ t.getColour()+ nick+ assist_txt);
}
if (ks != null) {
ks.incKills();
}
clearinv();
todrop+=ammo;
dropl=p.getLocation();
plugin.game.onKill(plugin.p(attacker),this,p.getLocation());
p.teleport(plugin.prespawn);
dead=true;
}
if (_h > 0) {
assist=attacker;
}
}
 else {
h=2;
}
p.setHealth(h * 10);
}","public void incHealth(int _h,Player attacker,int reason,Object ks){
  if (_h < 0 && h < 2) {
    regens++;
    s.maxStat(Stat.LIFE_REGENS,regens);
  }
  if (_h < 0 || inv == false) {
    h-=_h;
    if (h > 2) {
      h=2;
    }
    if (_h > 0) {
      htime=new Date().getTime() + 10000;
      stime=new Date().getTime() + 5000;
    }
    if (h <= 0) {
      regens=0;
      lastk_count=0;
      lastk_top_count=0;
      hshot_streak=0;
      melee_streak=0;
      player a=plugin.p(attacker);
      if (a != this) {
        a.onKill(this,reason,ks);
      }
 else {
        kill--;
      }
      String assist_txt=""String_Node_Str"";
      if (assist != null && assist != attacker) {
        assist_txt=plugin.d + ""String_Node_Str"" + plugin.d+ plugin.p(assist).getTeam().getColour()+ plugin.p(assist).nick+ plugin.d+ ""String_Node_Str"";
        plugin.p(assist).assists++;
        plugin.p(assist).s.incStat(Stat.ASSISTS);
        plugin.p(assist).addPoints(2);
      }
      s.incStat(Stat.DEATHS);
      death++;
      s.maxStat(Stat.MAX_DEATHS,death);
      streak=0;
      h=2;
      int ammo=0;
      for (      ItemStack i : p.getInventory().getContents()) {
        if (i != null) {
          if (i.getType() == Material.FEATHER || i.getType() == Material.ARROW) {
            ammo+=i.getAmount();
          }
        }
      }
      ammo=(int)(ammo / 15);
      setStreaks();
      String desc=""String_Node_Str"";
      String as=""String_Node_Str"";
switch (reason) {
case 0:
        plugin.game.sendMessage(team.BOTH,plugin.d + ""String_Node_Str"" + plugin.p(p).nick+ ""String_Node_Str""+ assist_txt);
      plugin.p(p).s.incStat(Stat.FALL_DEATHS);
    break;
case 1:
  desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.KNIFE_DEATHS);
plugin.p(attacker).s.incStat(Stat.KNIFE_KILLS);
break;
case 2:
desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.BOW_DEATHS);
plugin.p(attacker).s.incStat(Stat.BOW_KILLS);
break;
case 3:
desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.CLAYMORE_DEATHS);
plugin.p(attacker).s.incStat(Stat.CLAYMORE_KILLS);
break;
case 4:
as=""String_Node_Str"";
desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.DOG_DEATHS);
plugin.p(attacker).s.incStat(Stat.DOG_KILLS);
break;
case 5:
as=""String_Node_Str"";
desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.SENTRY_DEATHS);
plugin.p(attacker).s.incStat(Stat.SENTRY_KILLS);
break;
case 6:
as=""String_Node_Str"";
desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.CHOPPER_DEATHS);
plugin.p(attacker).s.incStat(Stat.CHOPPER_KILLS);
break;
case 7:
desc=""String_Node_Str"";
plugin.p(p).s.incStat(Stat.BOW_DEATHS);
plugin.p(attacker).s.incStat(Stat.HEADSHOTS);
plugin.p(attacker).s.incStat(Stat.BOW_KILLS);
break;
}
if (reason > 0) {
plugin.game.sendMessage(team.BOTH,plugin.d + plugin.p(attacker).getTeam().getColour() + plugin.p(attacker).nick+ as+ plugin.d+ ""String_Node_Str""+ desc+ ""String_Node_Str""+ plugin.d+ t.getColour()+ nick+ assist_txt);
}
if (ks != null && ks instanceof ownable) {
((ownable)ks).incKills();
}
clearinv();
todrop+=ammo;
dropl=p.getLocation();
plugin.game.onKill(plugin.p(attacker),this,p.getLocation());
p.teleport(plugin.prespawn);
dead=true;
}
if (_h > 0) {
assist=attacker;
}
}
 else {
h=2;
}
p.setHealth(h * 10);
}"
84930,"public stats(main instance,player _p){
  plugin=instance;
  p=_p;
  ResultSet r=plugin.sql.query(""String_Node_Str"" + p.dbid + ""String_Node_Str"");
  ResultSet r2=plugin.sql.query(""String_Node_Str"" + p.dbid + ""String_Node_Str"");
  try {
    while (r.next()) {
      stats.put(Stat.valueOf(r.getInt(""String_Node_Str"")),r.getInt(""String_Node_Str""));
    }
    while (r2.next()) {
      achs.add(Achievement.valueOf(r2.getInt(""String_Node_Str"")));
    }
    toach.removeAll(achs);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  t.schedule(new updatestats(),30000,30000);
}","public stats(main instance,player _p){
  plugin=instance;
  p=_p;
  ResultSet r=plugin.sql.query(""String_Node_Str"" + p.dbid + ""String_Node_Str"");
  ResultSet r2=plugin.sql.query(""String_Node_Str"" + p.dbid + ""String_Node_Str"");
  try {
    while (r.next()) {
      stats.put(Stat.valueOf(r.getInt(""String_Node_Str"")),r.getInt(""String_Node_Str""));
    }
    while (r2.next()) {
      achs.add(Achievement.valueOf(r2.getInt(""String_Node_Str"")));
    }
    toach.removeAll(achs);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  tid=plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new updatestats(),600L,600L);
}"
84931,"public void destroy(){
  t.cancel();
  update();
}","public void destroy(){
  plugin.getServer().getScheduler().cancelTask(tid);
  update();
}"
84932,"public void incStat(Stat s,int c){
synchronized (this) {
    if (stats.containsKey(s)) {
      updated.add(s);
    }
 else {
      newv.add(s);
    }
    int out=getStat(s) + c;
    if (out < 0) {
      out=0;
    }
    ArrayList<Achievement> tmp=new ArrayList<Achievement>();
    for (    Achievement a : toach) {
      if (a.getStat() == s && a.getCount() <= out) {
        tmp.add(a);
      }
    }
    for (    Achievement a : tmp) {
      awardAchievement(a);
    }
    stats.put(s,out);
  }
}","public void incStat(Stat s,int c){
  if (stats.containsKey(s) && !updated.contains(s)) {
    updated.add(s);
  }
 else   if (!stats.containsKey(s) && !newv.contains(s)) {
    newv.add(s);
  }
  int out=getStat(s) + c;
  if (out < 0) {
    out=0;
  }
  ArrayList<Achievement> tmp=new ArrayList<Achievement>();
  for (  Achievement a : toach) {
    if (a.getStat() == s && a.getCount() <= out) {
      tmp.add(a);
    }
  }
  for (  Achievement a : tmp) {
    awardAchievement(a);
  }
  stats.put(s,out);
}"
84933,"public void statsOf2Pairs(List<List<Integer>> allRolls){
  long count=0;
  long debug=0;
  List<List<Integer>> rolls=new ArrayList<List<Integer>>();
  rolls=allRolls;
  for (  List<Integer> roll : rolls) {
    if (roll.size() < 5) {
      debug++;
    }
    if (hasMultiplesOf(roll,2)) {
      roll.removeAll(Arrays.asList(mRepeatedDice));
      if (hasMultiplesOf(roll,2)) {
        count++;
      }
    }
  }
  System.out.println(""String_Node_Str"" + count);
  System.out.println(""String_Node_Str"" + ((double)count / (double)mTotalPossibleRolls) * 100d + ""String_Node_Str"");
}","public void statsOf2Pairs(List<List<Integer>> allRolls){
  long count=0;
  long debug=0;
  List<List<Integer>> rolls=new ArrayList<List<Integer>>(allRolls);
  for (  List<Integer> rollToCopy : rolls) {
    List<Integer> roll=new ArrayList<Integer>(rollToCopy);
    if (roll.size() < 5) {
      debug++;
    }
    if (hasMultiplesOf(roll,2)) {
      roll.removeAll(Arrays.asList(mRepeatedDice));
      if (hasMultiplesOf(roll,2)) {
        count++;
      }
    }
  }
  System.out.println(""String_Node_Str"" + count);
  System.out.println(""String_Node_Str"" + ((double)count / (double)mTotalPossibleRolls) * 100d + ""String_Node_Str"");
}"
84934,"public void statsOfFullHouse(List<List<Integer>> allRolls){
  long count=0;
  long debug=0;
  for (  List<Integer> roll : allRolls) {
    if (roll.size() < 3) {
      debug++;
    }
    if (hasMultiplesOf(roll,3)) {
      roll.removeAll(Arrays.asList(mRepeatedDice));
      if (hasMultiplesOf(roll,2)) {
        count++;
      }
    }
  }
  System.out.println(""String_Node_Str"" + count);
  System.out.println(""String_Node_Str"" + ((double)count / (double)mTotalPossibleRolls) * 100d + ""String_Node_Str"");
}","public void statsOfFullHouse(List<List<Integer>> allRolls){
  long count=0;
  long debug=0;
  List<List<Integer>> rolls=new ArrayList<List<Integer>>(allRolls);
  for (  List<Integer> rollToCopy : rolls) {
    List<Integer> roll=new ArrayList<Integer>(rollToCopy);
    if (roll.size() < 5) {
      debug++;
    }
    if (hasMultiplesOf(roll,3)) {
      roll.removeAll(Arrays.asList(mRepeatedDice));
      if (hasMultiplesOf(roll,2)) {
        count++;
      }
    }
  }
  System.out.println(""String_Node_Str"" + count);
  System.out.println(""String_Node_Str"" + ((double)count / (double)mTotalPossibleRolls) * 100d + ""String_Node_Str"");
}"
84935,"/** 
 * Returns the id of the following book if it does already exist. If not, a new dialog will be opend to let the user enter the following book. Title, authors, location, company and category are already filled in.
 * @param followedByString the title of the following book
 * @param cur_Book the currently book to be saved
 * @return the id of the following book, or -1 if none does exist and the userdoesn't want to enter a book with the entered title.
 * @throws SQLException if something goes wrong during database operation
 */
public int getFollowedByID(String followedByString,Book cur_Book) throws SQLException {
  BookQuest quest=new BookQuest();
  quest.addStringCondition(BookQuest.SUBTITLE,followedByString,SQLOperator.OR);
  quest.addStringCondition(""String_Node_Str"",followedByString,SQLOperator.OR);
  ArrayList<Book> books=reader.getBooks(quest);
  int statement=-1;
  if (followedByString.equals(""String_Node_Str"")) {
    return statement;
  }
  if (books.isEmpty()) {
    int result=JOptionPane.showConfirmDialog(null,java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str"") + followedByString + java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),JOptionPane.YES_NO_OPTION);
    if (result == JOptionPane.YES_OPTION) {
      Book book=writer.createBook();
      book.setSubtitle(followedByString);
      book.setCategoryID(cur_Book.getCategoryID());
      book.setLocationID(cur_Book.getLocationID());
      book.setCompanyID(cur_Book.getCompanyID());
      writer.copyAuthors(cur_Book,book);
      BookInputDialog dialog=new BookInputDialog(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reader,writer,book);
      int res=dialog.showWithResult();
      int id=book.getID();
      if (cur_Book.getID() != id && res == BookInputDialog.CONFIRMED) {
        statement=id;
      }
    }
  }
 else {
    statement=books.get(0).getID();
  }
  return statement;
}","/** 
 * Returns the id of the following book if it does already exist. If not, a new dialog will be opend to let the user enter the following book. Title, authors, location, company and category are already filled in.
 * @param followedByString the title of the following book
 * @param cur_Book the currently book to be saved
 * @return the id of the following book, or -1 if none does exist and the userdoesn't want to enter a book with the entered title.
 * @throws SQLException if something goes wrong during database operation
 */
public int getFollowedByID(String followedByString,Book cur_Book) throws SQLException {
  BookQuest quest=new BookQuest();
  quest.addStringCondition(BookQuest.SUBTITLE,followedByString,SQLOperator.OR);
  quest.addStringCondition(""String_Node_Str"",followedByString,SQLOperator.OR);
  ArrayList<Book> books=reader.getBooks(quest);
  int statement=-1;
  if (followedByString.equals(""String_Node_Str"")) {
    return statement;
  }
  if (books.isEmpty()) {
    int result=JOptionPane.showConfirmDialog(null,java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str"") + followedByString + java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),JOptionPane.YES_NO_OPTION);
    if (result == JOptionPane.YES_OPTION) {
      Book book=writer.createBook();
      book.setSubtitle(followedByString);
      book.setTitle(cur_Book.getTitle());
      book.setCategoryID(cur_Book.getCategoryID());
      book.setLocationID(cur_Book.getLocationID());
      book.setCompanyID(cur_Book.getCompanyID());
      writer.copyAuthors(cur_Book,book);
      BookInputDialog dialog=new BookInputDialog(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reader,writer,book);
      int res=dialog.showWithResult();
      int id=book.getID();
      if (cur_Book.getID() != id && res == BookInputDialog.CONFIRMED) {
        statement=id;
      }
    }
  }
 else {
    statement=books.get(0).getID();
  }
  return statement;
}"
84936,"/** 
 * Creates a new <code>MainFrame</code>.
 * @param base the base to be used by the whole GUI
 */
public MainFrame(DataBase base){
  super(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
  this.base=base;
  layout=new CardLayout();
  setLayout(layout);
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent event){
      MainFrame.this.windowClosing();
    }
  }
);
  initializeGUI();
  setSize(1000,600);
  setLocationRelativeTo(null);
  setExtendedState(MAXIMIZED_BOTH);
  setVisible(true);
}","/** 
 * Creates a new <code>MainFrame</code>.
 * @param base the base to be used by the whole GUI
 */
public MainFrame(DataBase base){
  super(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
  this.base=base;
  layout=new CardLayout();
  setLayout(layout);
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent event){
      MainFrame.this.windowClosing();
    }
  }
);
  initializeGUI();
  setSize(1000,600);
  setLocationRelativeTo(null);
  setLocation(0,0);
  setExtendedState(MAXIMIZED_BOTH);
  setVisible(true);
}"
84937,"/** 
 * Checks whether the entered authors are existing, if not, the background color will be changed to yellow.
 */
private void checkAuthors(){
  String[] authors=getText().split(""String_Node_Str"");
  setBackground(Color.WHITE);
  for (  String author : authors) {
    try {
      if (!checkAuthor(author)) {
        setBackground(Color.YELLOW);
      }
    }
 catch (    SQLException ex) {
      Logger.getLogger(AuthorInputField.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}","/** 
 * Checks whether the entered authors are existing, if not, the background color will be changed to yellow.
 */
private void checkAuthors(){
  String[] authors=getText().split(""String_Node_Str"");
  setBackground(Color.WHITE);
  for (  String author : authors) {
    try {
      if (!checkAuthor(author.trim())) {
        setBackground(Color.YELLOW);
      }
    }
 catch (    SQLException ex) {
      Logger.getLogger(AuthorInputField.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}"
84938,"public void resetMask(){
  for (  Component c : getComponents()) {
    if (c instanceof ExtendedTextField) {
      ((ExtendedTextField)c).setText(""String_Node_Str"");
    }
  }
  titleInput.reset();
  informationInput.setText(""String_Node_Str"");
  tagInput.clearSelection();
  locationInput.reset();
  categoryInput.reset();
  book=null;
  titleInput.requestFocusInWindow();
}","public void resetMask(){
  for (  Component c : getComponents()) {
    if (c instanceof ExtendedTextField) {
      ((ExtendedTextField)c).setText(""String_Node_Str"");
    }
  }
  titleInput.reset();
  informationInput.setText(""String_Node_Str"");
  tagInput.clearSelection();
  book=null;
  titleInput.requestFocusInWindow();
}"
84939,"/** 
 * Returns the id of the following book if it does already exist. If not, a new dialog will be opend to let the user enter the following book. Title, authors, location, company and category are already filled in.
 * @param followedByString the title of the following book
 * @param cur_Book the currently book to be saved
 * @return the id of the following book, or -1 if none does exist and the userdoesn't want to enter a book with the entered title.
 * @throws SQLException if something goes wrong during database operation
 */
public int getFollowedByID(String followedByString,Book cur_Book) throws SQLException {
  BookQuest questFromSubTitle=new BookQuest();
  questFromSubTitle.addStringCondition(BookQuest.SUBTITLE,followedByString,SQLOperator.OR);
  ArrayList<Book> booksFromSubTitle=reader.getBooks(questFromSubTitle);
  BookQuest questFromTitle=new BookQuest();
  questFromTitle.addStringCondition(BookQuest.TITLE,followedByString,SQLOperator.OR);
  ArrayList<Book> booksFromTitle=reader.getBooks(questFromTitle);
  int statement=-1;
  if (followedByString.equals(""String_Node_Str"")) {
    return statement;
  }
  if (booksFromTitle.isEmpty() && booksFromSubTitle.isEmpty()) {
    int result=JOptionPane.showConfirmDialog(null,java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str"") + followedByString + java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),JOptionPane.YES_NO_OPTION);
    if (result == JOptionPane.YES_OPTION) {
      Book book=writer.createBook();
      book.setSubtitle(followedByString);
      book.setTitle(cur_Book.getTitle());
      book.setCategoryID(cur_Book.getCategoryID());
      book.setLocationID(cur_Book.getLocationID());
      book.setCompanyID(cur_Book.getCompanyID());
      writer.copyAuthors(cur_Book,book);
      BookInputDialog dialog=new BookInputDialog(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reader,writer,book);
      int res=dialog.showWithResult();
      int id=book.getID();
      if (cur_Book.getID() != id && res == BookInputDialog.CONFIRMED) {
        statement=id;
      }
    }
  }
 else   if (!booksFromTitle.isEmpty() && booksFromSubTitle.isEmpty()) {
    statement=booksFromTitle.get(0).getID();
  }
 else   if (booksFromTitle.isEmpty() && !booksFromSubTitle.isEmpty()) {
    statement=booksFromSubTitle.get(0).getID();
  }
 else {
  }
  return statement;
}","/** 
 * Returns the id of the following book if it does already exist. If not, a new dialog will be opend to let the user enter the following book. Title, authors, location, company and category are already filled in.
 * @param followedByString the title of the following book
 * @param cur_Book the currently book to be saved
 * @return the id of the following book, or -1 if none does exist and theuser doesn't want to enter a book with the entered title.
 * @throws SQLException if something goes wrong during database operation
 */
public int getFollowedByID(String followedByString,Book cur_Book) throws SQLException {
  BookQuest questFromSubTitle=new BookQuest();
  questFromSubTitle.addStringCondition(BookQuest.SUBTITLE,followedByString,SQLOperator.OR);
  ArrayList<Book> booksFromSubTitle=reader.getBooks(questFromSubTitle);
  BookQuest questFromTitle=new BookQuest();
  questFromTitle.addStringCondition(BookQuest.TITLE,followedByString,SQLOperator.OR);
  ArrayList<Book> booksFromTitle=reader.getBooks(questFromTitle);
  int statement=-1;
  if (followedByString.equals(""String_Node_Str"")) {
    return statement;
  }
  if (booksFromTitle.isEmpty() && booksFromSubTitle.isEmpty()) {
    int result=JOptionPane.showConfirmDialog(null,java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str"") + followedByString + java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),JOptionPane.YES_NO_OPTION);
    if (result == JOptionPane.YES_OPTION) {
      Book book=writer.createBook();
      book.setSubtitle(followedByString);
      book.setTitle(cur_Book.getTitle());
      book.setCategoryID(cur_Book.getCategoryID());
      book.setLocationID(cur_Book.getLocationID());
      book.setCompanyID(cur_Book.getCompanyID());
      writer.copyAuthors(cur_Book,book);
      BookInputDialog dialog=new BookInputDialog(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reader,writer,book);
      int res=dialog.showWithResult();
      int id=book.getID();
      if (cur_Book.getID() != id && res == BookInputDialog.CONFIRMED) {
        statement=id;
      }
    }
  }
 else   if (!booksFromTitle.isEmpty() && booksFromSubTitle.isEmpty()) {
    statement=booksFromTitle.get(0).getID();
  }
 else   if (booksFromTitle.isEmpty() && !booksFromSubTitle.isEmpty()) {
    statement=booksFromSubTitle.get(0).getID();
  }
 else {
  }
  return statement;
}"
84940,"/** 
 * Checks every single author int the passed argument whether they're already exisiting. If so, it only links the author with the book, otherwise, the author will be created and linked, too.
 * @param book to book to be linked with
 * @param authorsString the authors string, formatted as ""<code>name surname, name surname</code>"" and so on.
 * @throws SQLException if something goes wrong during database operations
 */
public void saveAuthors(Book book,String authorsString) throws SQLException {
  removeAllLinks(book);
  String[] names=authorsString.split(""String_Node_Str"");
  String[][] authornames=new String[names.length][2];
  for (int i=0; i < names.length; i++) {
    String[] s=new String[2];
    s[0]=names[i].substring(0,names[i].lastIndexOf(""String_Node_Str"")).trim();
    s[1]=names[i].substring(names[i].lastIndexOf(""String_Node_Str"") + 1).trim();
    authornames[i]=s;
  }
  for (  String[] name : authornames) {
    AuthorQuest quest=new AuthorQuest();
    quest.addStringCondition(""String_Node_Str"",name[0],SQLOperator.AND);
    quest.addStringCondition(""String_Node_Str"",name[1],SQLOperator.AND);
    ArrayList<Author> authors=reader.getAuthors(quest);
    if (authors.isEmpty()) {
      Author a=writer.createAuthor();
      a.setName(name[0]);
      a.setSurname(name[1]);
      a.setInformation(""String_Node_Str"");
      writer.updateAuthor(a);
      writer.linkAuthorBook(a,book);
    }
 else     if (authors.size() == 1) {
      Author a=authors.get(0);
      writer.linkAuthorBook(a,book);
    }
 else {
      JOptionPane.showMessageDialog(null,java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
    }
  }
}","/** 
 * Checks every single author int the passed argument whether they're already exisiting. If so, it only links the author with the book, otherwise, the author will be created and linked, too.
 * @param book to book to be linked with
 * @param authorsString the authors string, formatted as""<code>name surname, name surname</code>"" and so on.
 * @throws SQLException if something goes wrong during database operations
 */
public void saveAuthors(Book book,String authorsString) throws SQLException {
  removeAllLinks(book);
  if (!authorsString.equals(""String_Node_Str"")) {
    String[] names=authorsString.split(""String_Node_Str"");
    String[][] authornames=new String[names.length][2];
    for (int i=0; i < names.length; i++) {
      String[] s=new String[2];
      s[0]=names[i].substring(0,names[i].lastIndexOf(""String_Node_Str"")).trim();
      s[1]=names[i].substring(names[i].lastIndexOf(""String_Node_Str"") + 1).trim();
      authornames[i]=s;
    }
    for (    String[] name : authornames) {
      AuthorQuest quest=new AuthorQuest();
      quest.addStringCondition(""String_Node_Str"",name[0],SQLOperator.AND);
      quest.addStringCondition(""String_Node_Str"",name[1],SQLOperator.AND);
      ArrayList<Author> authors=reader.getAuthors(quest);
      if (authors.isEmpty()) {
        Author a=writer.createAuthor();
        a.setName(name[0]);
        a.setSurname(name[1]);
        a.setInformation(""String_Node_Str"");
        writer.updateAuthor(a);
        writer.linkAuthorBook(a,book);
      }
 else       if (authors.size() == 1) {
        Author a=authors.get(0);
        writer.linkAuthorBook(a,book);
      }
 else {
        JOptionPane.showMessageDialog(null,java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
      }
    }
  }
}"
84941,"/** 
 * Creates an <code>ExtendedBookBaseWriter</code>.
 * @param reader the reader to be used by the <code>ExtendedBookBaseWriter</code>
 * @param writer the writer to be used by the <code>ExtendedBookBaseWeiter</code>
 */
public ExtendedBookBaseWriter(DataBaseReader reader,DataBaseWriter writer){
  this.reader=reader;
  this.writer=writer;
}","/** 
 * Creates an <code>ExtendedBookBaseWriter</code>.
 * @param reader the reader to be used bythe <code>ExtendedBookBaseWriter</code>
 * @param writer the writer to be used bythe <code>ExtendedBookBaseWeiter</code>
 */
public ExtendedBookBaseWriter(DataBaseReader reader,DataBaseWriter writer){
  this.reader=reader;
  this.writer=writer;
}"
84942,"public static void setUserDevice(User user,String regID){
  Entity userEntry=new Entity(""String_Node_Str"",user.getUserId());
  userEntry.setProperty(DEVICE_ID,regID);
  userEntry.setProperty(""String_Node_Str"",user.getEmail());
  DatastoreService datastore=DatastoreServiceFactory.getDatastoreService();
  datastore.put(userEntry);
  log.info(""String_Node_Str"" + user.getEmail());
}","public static void setUserDevice(User user,String regID){
  DatastoreService datastore=DatastoreServiceFactory.getDatastoreService();
  Entity userEntry;
  Key userKey=KeyFactory.createKey(""String_Node_Str"",user.getUserId());
  try {
    userEntry=datastore.get(userKey);
  }
 catch (  EntityNotFoundException e) {
    userEntry=new Entity(userKey);
  }
  userEntry.setProperty(DEVICE_ID,regID);
  userEntry.setProperty(""String_Node_Str"",user.getEmail());
  datastore.put(userEntry);
  log.info(""String_Node_Str"" + user.getEmail());
}"
84943,"public static void setUserDevice(User user,String regID){
  Entity userEntry=new Entity(""String_Node_Str"",user.getUserId());
  userEntry.setProperty(DEVICE_ID,regID);
  userEntry.setProperty(""String_Node_Str"",user.getEmail());
  DatastoreService datastore=DatastoreServiceFactory.getDatastoreService();
  datastore.put(userEntry);
  log.info(""String_Node_Str"" + user.getEmail());
}","public static void setUserDevice(User user,String regID){
  DatastoreService datastore=DatastoreServiceFactory.getDatastoreService();
  Entity userEntry;
  Key userKey=KeyFactory.createKey(""String_Node_Str"",user.getUserId());
  try {
    userEntry=datastore.get(userKey);
  }
 catch (  EntityNotFoundException e) {
    userEntry=new Entity(userKey);
  }
  userEntry.setProperty(DEVICE_ID,regID);
  userEntry.setProperty(""String_Node_Str"",user.getEmail());
  datastore.put(userEntry);
  log.info(""String_Node_Str"" + user.getEmail());
}"
84944,"private void getChildrenFile(GridFtpActionItem actionItem,String source){
  try {
    si.getChildrenFileNames(source,false);
  }
 catch (  final Exception e) {
    actionItem.setException(e);
    return;
  }
}","private void getChildrenFile(GridFtpActionItem actionItem,String source){
  try {
    si.ls(source,1);
  }
 catch (  final Exception e) {
    actionItem.setException(e);
    return;
  }
}"
84945,"private void initiateInstall(){
  try {
    mAppInfo=mPm.getApplicationInfo(mPkgInfo.packageName,PackageManager.GET_UNINSTALLED_PACKAGES);
  }
 catch (  NameNotFoundException e) {
    mAppInfo=null;
  }
  if (mAppInfo == null) {
    startInstallConfirm();
  }
 else {
    if (localLOGV)     Log.i(TAG,""String_Node_Str"" + mPkgInfo.applicationInfo.packageName);
    showDialogInner(DLG_REPLACE_APP);
  }
}","private void initiateInstall(){
  String pkgName=mPkgInfo.packageName;
  String[] oldName=mPm.canonicalToCurrentPackageNames(new String[]{pkgName});
  if (oldName != null && oldName.length > 0 && oldName[0] != null) {
    pkgName=oldName[0];
    mPkgInfo.setPackageName(pkgName);
  }
  try {
    mAppInfo=mPm.getApplicationInfo(pkgName,PackageManager.GET_UNINSTALLED_PACKAGES);
  }
 catch (  NameNotFoundException e) {
    mAppInfo=null;
  }
  if (mAppInfo == null) {
    startInstallConfirm();
  }
 else {
    if (localLOGV)     Log.i(TAG,""String_Node_Str"" + mPkgInfo.applicationInfo.packageName);
    showDialogInner(DLG_REPLACE_APP);
  }
}"
84946,"public void setRotation(float rx,float ry,float rz){
  setRotX(rx);
  setRotY(ry);
  setRotZ(rz);
}","public void setRotation(float rx,float ry,float rz){
  setRotationX(rx);
  setRotationY(ry);
  setRotationZ(rz);
}"
84947,"@Test(expected=IllegalArgumentException.class) public void should_reject_null_with_IllegalArgumentException() throws Exception {
  AdjacentMultiples testSubject=new AdjacentMultiplesProblem();
}","@Test(expected=IllegalArgumentException.class) public void should_reject_null_with_IllegalArgumentException() throws Exception {
  AdjacentMultiplesProblem testSubject=new AdjacentMultiplesProblem();
}"
84948,"/** 
 * Function to send vcard data to client 
 */
private final int pushBytes(Operation op,final String vcardString){
  if (vcardString == null) {
    Log.w(TAG,""String_Node_Str"");
    return ResponseCodes.OBEX_HTTP_OK;
  }
  int vcardStringLen=vcardString.length();
  if (D)   Log.d(TAG,""String_Node_Str"" + vcardStringLen);
  OutputStream outputStream=null;
  int pushResult=ResponseCodes.OBEX_HTTP_OK;
  try {
    outputStream=op.openOutputStream();
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
    return ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
  }
  int position=0;
  long timestamp=0;
  int outputBufferSize=op.getMaxPacketSize();
  if (V)   Log.v(TAG,""String_Node_Str"" + outputBufferSize);
  while (position != vcardStringLen) {
    if (sIsAborted) {
      ((ServerOperation)op).isAborted=true;
      sIsAborted=false;
      break;
    }
    if (V)     timestamp=System.currentTimeMillis();
    int readLength=outputBufferSize;
    if (vcardStringLen - position < outputBufferSize) {
      readLength=vcardStringLen - position;
    }
    String subStr=vcardString.substring(position,position + readLength);
    try {
      outputStream.write(subStr.getBytes(),0,readLength);
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
      pushResult=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
      break;
    }
    if (V) {
      Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ readLength+ ""String_Node_Str""+ (System.currentTimeMillis() - timestamp)+ ""String_Node_Str"");
    }
    position+=readLength;
  }
  if (V)   Log.v(TAG,""String_Node_Str"");
  if (!closeStream(outputStream,op)) {
    pushResult=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
  }
  return pushResult;
}","/** 
 * Function to send vcard data to client 
 */
private final int pushBytes(Operation op,final String vcardString){
  if (vcardString == null) {
    Log.w(TAG,""String_Node_Str"");
    return ResponseCodes.OBEX_HTTP_OK;
  }
  byte[] vcardBytes=vcardString.getBytes();
  int vcardStringLen=vcardBytes.length;
  if (D)   Log.d(TAG,""String_Node_Str"" + vcardStringLen);
  OutputStream outputStream=null;
  int pushResult=ResponseCodes.OBEX_HTTP_OK;
  try {
    outputStream=op.openOutputStream();
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
    return ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
  }
  int position=0;
  long timestamp=0;
  int outputBufferSize=op.getMaxPacketSize();
  if (V)   Log.v(TAG,""String_Node_Str"" + outputBufferSize);
  while (position != vcardStringLen) {
    if (sIsAborted) {
      ((ServerOperation)op).isAborted=true;
      sIsAborted=false;
      break;
    }
    if (V)     timestamp=System.currentTimeMillis();
    int readLength=outputBufferSize;
    if (vcardStringLen - position < outputBufferSize) {
      readLength=vcardStringLen - position;
    }
    byte[] subByteArray=Arrays.copyOfRange(vcardBytes,position,position + readLength);
    try {
      outputStream.write(subByteArray,0,readLength);
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
      pushResult=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
      break;
    }
    if (V) {
      Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ readLength+ ""String_Node_Str""+ (System.currentTimeMillis() - timestamp)+ ""String_Node_Str"");
    }
    position+=readLength;
  }
  if (V)   Log.v(TAG,""String_Node_Str"");
  if (!closeStream(outputStream,op)) {
    pushResult=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
  }
  return pushResult;
}"
84949,"/** 
 * customize the content of view
 */
private void customizeViewContent(){
  String tmp;
  if (mWhichDialog == DIALOG_RECEIVE_ONGOING || mWhichDialog == DIALOG_RECEIVE_COMPLETE_SUCCESS) {
    mLine1View=(TextView)mView.findViewById(R.id.line1_view);
    tmp=getString(R.string.download_line1,mTransInfo.mDeviceName);
    mLine1View.setText(tmp);
    mLine2View=(TextView)mView.findViewById(R.id.line2_view);
    tmp=getString(R.string.download_line2,mTransInfo.mFileName);
    mLine2View.setText(tmp);
    mLine3View=(TextView)mView.findViewById(R.id.line3_view);
    tmp=getString(R.string.download_line3,Formatter.formatFileSize(this,mTransInfo.mTotalBytes));
    mLine3View.setText(tmp);
    mLine5View=(TextView)mView.findViewById(R.id.line5_view);
    if (mWhichDialog == DIALOG_RECEIVE_ONGOING) {
      tmp=getString(R.string.download_line5);
    }
 else     if (mWhichDialog == DIALOG_RECEIVE_COMPLETE_SUCCESS) {
      tmp=getString(R.string.download_succ_line5);
    }
    mLine5View.setText(tmp);
  }
 else   if (mWhichDialog == DIALOG_SEND_ONGOING || mWhichDialog == DIALOG_SEND_COMPLETE_SUCCESS) {
    mLine1View=(TextView)mView.findViewById(R.id.line1_view);
    tmp=getString(R.string.upload_line1,mTransInfo.mDeviceName);
    mLine1View.setText(tmp);
    mLine2View=(TextView)mView.findViewById(R.id.line2_view);
    tmp=getString(R.string.download_line2,mTransInfo.mFileName);
    mLine2View.setText(tmp);
    mLine3View=(TextView)mView.findViewById(R.id.line3_view);
    tmp=getString(R.string.upload_line3,mTransInfo.mFileType,Formatter.formatFileSize(this,mTransInfo.mTotalBytes));
    mLine3View.setText(tmp);
    mLine5View=(TextView)mView.findViewById(R.id.line5_view);
    if (mWhichDialog == DIALOG_SEND_ONGOING) {
      tmp=getString(R.string.upload_line5);
    }
 else     if (mWhichDialog == DIALOG_SEND_COMPLETE_SUCCESS) {
      tmp=getString(R.string.upload_succ_line5);
    }
    mLine5View.setText(tmp);
  }
 else   if (mWhichDialog == DIALOG_RECEIVE_COMPLETE_FAIL) {
    if (mTransInfo.mStatus == BluetoothShare.STATUS_ERROR_SDCARD_FULL) {
      mLine1View=(TextView)mView.findViewById(R.id.line1_view);
      tmp=getString(R.string.bt_sm_2_1,mTransInfo.mDeviceName);
      mLine1View.setText(tmp);
      mLine2View=(TextView)mView.findViewById(R.id.line2_view);
      tmp=getString(R.string.download_fail_line2,mTransInfo.mFileName);
      mLine2View.setText(tmp);
      mLine3View=(TextView)mView.findViewById(R.id.line3_view);
      tmp=getString(R.string.bt_sm_2_2,Formatter.formatFileSize(this,mTransInfo.mTotalBytes));
      mLine3View.setText(tmp);
    }
 else {
      mLine1View=(TextView)mView.findViewById(R.id.line1_view);
      tmp=getString(R.string.download_fail_line1);
      mLine1View.setText(tmp);
      mLine2View=(TextView)mView.findViewById(R.id.line2_view);
      tmp=getString(R.string.download_fail_line2,mTransInfo.mFileName);
      mLine2View.setText(tmp);
      mLine3View=(TextView)mView.findViewById(R.id.line3_view);
      tmp=getString(R.string.download_fail_line3,BluetoothOppUtility.getStatusDescription(this,mTransInfo.mStatus));
      mLine3View.setText(tmp);
    }
    mLine5View=(TextView)mView.findViewById(R.id.line5_view);
    mLine5View.setVisibility(View.GONE);
  }
 else   if (mWhichDialog == DIALOG_SEND_COMPLETE_FAIL) {
    mLine1View=(TextView)mView.findViewById(R.id.line1_view);
    tmp=getString(R.string.upload_fail_line1,mTransInfo.mDeviceName);
    mLine1View.setText(tmp);
    mLine2View=(TextView)mView.findViewById(R.id.line2_view);
    tmp=getString(R.string.upload_fail_line1_2,mTransInfo.mFileName);
    mLine2View.setText(tmp);
    mLine3View=(TextView)mView.findViewById(R.id.line3_view);
    tmp=getString(R.string.download_fail_line3,BluetoothOppUtility.getStatusDescription(this,mTransInfo.mStatus));
    mLine3View.setText(tmp);
    mLine5View=(TextView)mView.findViewById(R.id.line5_view);
    mLine5View.setVisibility(View.GONE);
  }
  if (BluetoothShare.isStatusError(mTransInfo.mStatus)) {
    mProgressTransfer.setVisibility(View.GONE);
    mPercentView.setVisibility(View.GONE);
  }
}","/** 
 * customize the content of view
 */
private void customizeViewContent(){
  String tmp;
  if (mWhichDialog == DIALOG_RECEIVE_ONGOING || mWhichDialog == DIALOG_RECEIVE_COMPLETE_SUCCESS) {
    mLine1View=(TextView)mView.findViewById(R.id.line1_view);
    tmp=getString(R.string.download_line1,mTransInfo.mDeviceName);
    mLine1View.setText(tmp);
    mLine2View=(TextView)mView.findViewById(R.id.line2_view);
    tmp=getString(R.string.download_line2,mTransInfo.mFileName);
    mLine2View.setText(tmp);
    mLine3View=(TextView)mView.findViewById(R.id.line3_view);
    tmp=getString(R.string.download_line3,Formatter.formatFileSize(this,mTransInfo.mTotalBytes));
    mLine3View.setText(tmp);
    mLine5View=(TextView)mView.findViewById(R.id.line5_view);
    if (mWhichDialog == DIALOG_RECEIVE_ONGOING) {
      tmp=getString(R.string.download_line5);
    }
 else     if (mWhichDialog == DIALOG_RECEIVE_COMPLETE_SUCCESS) {
      tmp=getString(R.string.download_succ_line5);
    }
    mLine5View.setText(tmp);
  }
 else   if (mWhichDialog == DIALOG_SEND_ONGOING || mWhichDialog == DIALOG_SEND_COMPLETE_SUCCESS) {
    mLine1View=(TextView)mView.findViewById(R.id.line1_view);
    tmp=getString(R.string.upload_line1,mTransInfo.mDeviceName);
    mLine1View.setText(tmp);
    mLine2View=(TextView)mView.findViewById(R.id.line2_view);
    tmp=getString(R.string.download_line2,mTransInfo.mFileName);
    mLine2View.setText(tmp);
    mLine3View=(TextView)mView.findViewById(R.id.line3_view);
    tmp=getString(R.string.upload_line3,mTransInfo.mFileType,Formatter.formatFileSize(this,mTransInfo.mTotalBytes));
    mLine3View.setText(tmp);
    mLine5View=(TextView)mView.findViewById(R.id.line5_view);
    if (mWhichDialog == DIALOG_SEND_ONGOING) {
      tmp=getString(R.string.upload_line5);
    }
 else     if (mWhichDialog == DIALOG_SEND_COMPLETE_SUCCESS) {
      tmp=getString(R.string.upload_succ_line5);
    }
    mLine5View.setText(tmp);
  }
 else   if (mWhichDialog == DIALOG_RECEIVE_COMPLETE_FAIL) {
    if (mTransInfo.mStatus == BluetoothShare.STATUS_ERROR_SDCARD_FULL) {
      mLine1View=(TextView)mView.findViewById(R.id.line1_view);
      tmp=getString(R.string.bt_sm_2_1,mTransInfo.mDeviceName);
      mLine1View.setText(tmp);
      mLine2View=(TextView)mView.findViewById(R.id.line2_view);
      tmp=getString(R.string.download_fail_line2,mTransInfo.mFileName);
      mLine2View.setText(tmp);
      mLine3View=(TextView)mView.findViewById(R.id.line3_view);
      tmp=getString(R.string.bt_sm_2_2,Formatter.formatFileSize(this,mTransInfo.mTotalBytes));
      mLine3View.setText(tmp);
    }
 else {
      mLine1View=(TextView)mView.findViewById(R.id.line1_view);
      tmp=getString(R.string.download_fail_line1);
      mLine1View.setText(tmp);
      mLine2View=(TextView)mView.findViewById(R.id.line2_view);
      tmp=getString(R.string.download_fail_line2,mTransInfo.mFileName);
      mLine2View.setText(tmp);
      mLine3View=(TextView)mView.findViewById(R.id.line3_view);
      tmp=getString(R.string.download_fail_line3,BluetoothOppUtility.getStatusDescription(this,mTransInfo.mStatus,mTransInfo.mDeviceName));
      mLine3View.setText(tmp);
    }
    mLine5View=(TextView)mView.findViewById(R.id.line5_view);
    mLine5View.setVisibility(View.GONE);
  }
 else   if (mWhichDialog == DIALOG_SEND_COMPLETE_FAIL) {
    mLine1View=(TextView)mView.findViewById(R.id.line1_view);
    tmp=getString(R.string.upload_fail_line1,mTransInfo.mDeviceName);
    mLine1View.setText(tmp);
    mLine2View=(TextView)mView.findViewById(R.id.line2_view);
    tmp=getString(R.string.upload_fail_line1_2,mTransInfo.mFileName);
    mLine2View.setText(tmp);
    mLine3View=(TextView)mView.findViewById(R.id.line3_view);
    tmp=getString(R.string.download_fail_line3,BluetoothOppUtility.getStatusDescription(this,mTransInfo.mStatus,mTransInfo.mDeviceName));
    mLine3View.setText(tmp);
    mLine5View=(TextView)mView.findViewById(R.id.line5_view);
    mLine5View.setVisibility(View.GONE);
  }
  if (BluetoothShare.isStatusError(mTransInfo.mStatus)) {
    mProgressTransfer.setVisibility(View.GONE);
    mPercentView.setVisibility(View.GONE);
  }
}"
84950,"@Override public void bindView(View view,Context context,Cursor cursor){
  Resources r=context.getResources();
  ImageView iv=(ImageView)view.findViewById(R.id.transfer_icon);
  int status=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.STATUS));
  int dir=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.DIRECTION));
  if (BluetoothShare.isStatusError(status)) {
    iv.setImageResource(android.R.drawable.stat_notify_error);
  }
 else {
    if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
      iv.setImageResource(android.R.drawable.stat_sys_upload_done);
    }
 else {
      iv.setImageResource(android.R.drawable.stat_sys_download_done);
    }
  }
  TextView tv=(TextView)view.findViewById(R.id.transfer_title);
  String title=cursor.getString(cursor.getColumnIndexOrThrow(BluetoothShare.FILENAME_HINT));
  if (title == null) {
    title=mContext.getString(R.string.unknown_file);
  }
  tv.setText(title);
  tv=(TextView)view.findViewById(R.id.targetdevice);
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  int destinationColumnId=cursor.getColumnIndexOrThrow(BluetoothShare.DESTINATION);
  BluetoothDevice remoteDevice=adapter.getRemoteDevice(cursor.getString(destinationColumnId));
  String deviceName=BluetoothOppManager.getInstance(context).getDeviceName(remoteDevice);
  tv.setText(deviceName);
  long totalBytes=cursor.getLong(cursor.getColumnIndexOrThrow(BluetoothShare.TOTAL_BYTES));
  if (BluetoothShare.isStatusCompleted(status)) {
    tv=(TextView)view.findViewById(R.id.complete_text);
    tv.setVisibility(View.VISIBLE);
    if (BluetoothShare.isStatusError(status)) {
      tv.setText(BluetoothOppUtility.getStatusDescription(mContext,status));
    }
 else {
      String completeText;
      if (dir == BluetoothShare.DIRECTION_INBOUND) {
        completeText=r.getString(R.string.download_success,Formatter.formatFileSize(mContext,totalBytes));
      }
 else {
        completeText=r.getString(R.string.upload_success,Formatter.formatFileSize(mContext,totalBytes));
      }
      tv.setText(completeText);
    }
    int dateColumnId=cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP);
    long time=cursor.getLong(dateColumnId);
    Date d=new Date(time);
    CharSequence str=DateUtils.isToday(time) ? DateFormat.getTimeFormat(mContext).format(d) : DateFormat.getDateFormat(mContext).format(d);
    tv=(TextView)view.findViewById(R.id.complete_date);
    tv.setVisibility(View.VISIBLE);
    tv.setText(str);
  }
}","@Override public void bindView(View view,Context context,Cursor cursor){
  Resources r=context.getResources();
  ImageView iv=(ImageView)view.findViewById(R.id.transfer_icon);
  int status=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.STATUS));
  int dir=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.DIRECTION));
  if (BluetoothShare.isStatusError(status)) {
    iv.setImageResource(android.R.drawable.stat_notify_error);
  }
 else {
    if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
      iv.setImageResource(android.R.drawable.stat_sys_upload_done);
    }
 else {
      iv.setImageResource(android.R.drawable.stat_sys_download_done);
    }
  }
  TextView tv=(TextView)view.findViewById(R.id.transfer_title);
  String title=cursor.getString(cursor.getColumnIndexOrThrow(BluetoothShare.FILENAME_HINT));
  if (title == null) {
    title=mContext.getString(R.string.unknown_file);
  }
  tv.setText(title);
  tv=(TextView)view.findViewById(R.id.targetdevice);
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  int destinationColumnId=cursor.getColumnIndexOrThrow(BluetoothShare.DESTINATION);
  BluetoothDevice remoteDevice=adapter.getRemoteDevice(cursor.getString(destinationColumnId));
  String deviceName=BluetoothOppManager.getInstance(context).getDeviceName(remoteDevice);
  tv.setText(deviceName);
  long totalBytes=cursor.getLong(cursor.getColumnIndexOrThrow(BluetoothShare.TOTAL_BYTES));
  if (BluetoothShare.isStatusCompleted(status)) {
    tv=(TextView)view.findViewById(R.id.complete_text);
    tv.setVisibility(View.VISIBLE);
    if (BluetoothShare.isStatusError(status)) {
      tv.setText(BluetoothOppUtility.getStatusDescription(mContext,status,deviceName));
    }
 else {
      String completeText;
      if (dir == BluetoothShare.DIRECTION_INBOUND) {
        completeText=r.getString(R.string.download_success,Formatter.formatFileSize(mContext,totalBytes));
      }
 else {
        completeText=r.getString(R.string.upload_success,Formatter.formatFileSize(mContext,totalBytes));
      }
      tv.setText(completeText);
    }
    int dateColumnId=cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP);
    long time=cursor.getLong(dateColumnId);
    Date d=new Date(time);
    CharSequence str=DateUtils.isToday(time) ? DateFormat.getTimeFormat(mContext).format(d) : DateFormat.getDateFormat(mContext).format(d);
    tv=(TextView)view.findViewById(R.id.complete_date);
    tv.setVisibility(View.VISIBLE);
    tv.setText(str);
  }
}"
84951,"/** 
 * Get status description according to status code.
 */
public static String getStatusDescription(Context context,int statusCode){
  String ret;
  if (statusCode == BluetoothShare.STATUS_PENDING) {
    ret=context.getString(R.string.status_pending);
  }
 else   if (statusCode == BluetoothShare.STATUS_RUNNING) {
    ret=context.getString(R.string.status_running);
  }
 else   if (statusCode == BluetoothShare.STATUS_SUCCESS) {
    ret=context.getString(R.string.status_success);
  }
 else   if (statusCode == BluetoothShare.STATUS_NOT_ACCEPTABLE) {
    ret=context.getString(R.string.status_not_accept);
  }
 else   if (statusCode == BluetoothShare.STATUS_FORBIDDEN) {
    ret=context.getString(R.string.status_forbidden);
  }
 else   if (statusCode == BluetoothShare.STATUS_CANCELED) {
    ret=context.getString(R.string.status_canceled);
  }
 else   if (statusCode == BluetoothShare.STATUS_FILE_ERROR) {
    ret=context.getString(R.string.status_file_error);
  }
 else   if (statusCode == BluetoothShare.STATUS_ERROR_NO_SDCARD) {
    ret=context.getString(R.string.status_no_sd_card);
  }
 else   if (statusCode == BluetoothShare.STATUS_CONNECTION_ERROR) {
    ret=context.getString(R.string.status_connection_error);
  }
 else   if (statusCode == BluetoothShare.STATUS_ERROR_SDCARD_FULL) {
    ret=context.getString(R.string.bt_sm_2_1);
  }
 else   if ((statusCode == BluetoothShare.STATUS_BAD_REQUEST) || (statusCode == BluetoothShare.STATUS_LENGTH_REQUIRED) || (statusCode == BluetoothShare.STATUS_PRECONDITION_FAILED)|| (statusCode == BluetoothShare.STATUS_UNHANDLED_OBEX_CODE)|| (statusCode == BluetoothShare.STATUS_OBEX_DATA_ERROR)) {
    ret=context.getString(R.string.status_protocol_error);
  }
 else {
    ret=context.getString(R.string.status_unknown_error);
  }
  return ret;
}","/** 
 * Get status description according to status code.
 */
public static String getStatusDescription(Context context,int statusCode,String deviceName){
  String ret;
  if (statusCode == BluetoothShare.STATUS_PENDING) {
    ret=context.getString(R.string.status_pending);
  }
 else   if (statusCode == BluetoothShare.STATUS_RUNNING) {
    ret=context.getString(R.string.status_running);
  }
 else   if (statusCode == BluetoothShare.STATUS_SUCCESS) {
    ret=context.getString(R.string.status_success);
  }
 else   if (statusCode == BluetoothShare.STATUS_NOT_ACCEPTABLE) {
    ret=context.getString(R.string.status_not_accept);
  }
 else   if (statusCode == BluetoothShare.STATUS_FORBIDDEN) {
    ret=context.getString(R.string.status_forbidden);
  }
 else   if (statusCode == BluetoothShare.STATUS_CANCELED) {
    ret=context.getString(R.string.status_canceled);
  }
 else   if (statusCode == BluetoothShare.STATUS_FILE_ERROR) {
    ret=context.getString(R.string.status_file_error);
  }
 else   if (statusCode == BluetoothShare.STATUS_ERROR_NO_SDCARD) {
    ret=context.getString(R.string.status_no_sd_card);
  }
 else   if (statusCode == BluetoothShare.STATUS_CONNECTION_ERROR) {
    ret=context.getString(R.string.status_connection_error);
  }
 else   if (statusCode == BluetoothShare.STATUS_ERROR_SDCARD_FULL) {
    ret=context.getString(R.string.bt_sm_2_1,deviceName);
  }
 else   if ((statusCode == BluetoothShare.STATUS_BAD_REQUEST) || (statusCode == BluetoothShare.STATUS_LENGTH_REQUIRED) || (statusCode == BluetoothShare.STATUS_PRECONDITION_FAILED)|| (statusCode == BluetoothShare.STATUS_UNHANDLED_OBEX_CODE)|| (statusCode == BluetoothShare.STATUS_OBEX_DATA_ERROR)) {
    ret=context.getString(R.string.status_protocol_error);
  }
 else {
    ret=context.getString(R.string.status_unknown_error);
  }
  return ret;
}"
84952,"private void updateCompletedNotification(){
  Cursor cursor=mContext.getContentResolver().query(BluetoothShare.CONTENT_URI,null,WHERE_COMPLETED,null,BluetoothShare._ID);
  if (cursor == null) {
    return;
  }
  for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
    long timeStamp=cursor.getLong(cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP));
    int dir=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.DIRECTION));
    int id=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare._ID));
    int status=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.STATUS));
    String fileName=cursor.getString(cursor.getColumnIndexOrThrow(BluetoothShare.FILENAME_HINT));
    if (fileName == null) {
      fileName=mContext.getString(R.string.unknown_file);
    }
    String title;
    String caption;
    Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + id);
    Notification n=new Notification();
    if (BluetoothShare.isStatusError(status)) {
      if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
        title=mContext.getString(R.string.notification_sent_fail,fileName);
      }
 else {
        title=mContext.getString(R.string.notification_received_fail,fileName);
      }
      caption=mContext.getString(R.string.download_fail_line3,BluetoothOppUtility.getStatusDescription(mContext,status));
      n.icon=android.R.drawable.stat_notify_error;
    }
 else {
      if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
        title=mContext.getString(R.string.notification_sent,fileName);
        n.icon=android.R.drawable.stat_sys_upload_done;
      }
 else {
        title=mContext.getString(R.string.notification_received,fileName);
        n.icon=android.R.drawable.stat_sys_download_done;
      }
      caption=mContext.getString(R.string.notification_sent_complete);
    }
    Intent intent=new Intent(Constants.ACTION_OPEN);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    n.when=timeStamp;
    mNotificationMgr.notify(id,n);
  }
  cursor.close();
}","private void updateCompletedNotification(){
  Cursor cursor=mContext.getContentResolver().query(BluetoothShare.CONTENT_URI,null,WHERE_COMPLETED,null,BluetoothShare._ID);
  if (cursor == null) {
    return;
  }
  for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
    long timeStamp=cursor.getLong(cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP));
    int dir=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.DIRECTION));
    int id=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare._ID));
    int status=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.STATUS));
    String fileName=cursor.getString(cursor.getColumnIndexOrThrow(BluetoothShare.FILENAME_HINT));
    if (fileName == null) {
      fileName=mContext.getString(R.string.unknown_file);
    }
    String title;
    String caption;
    Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + id);
    Notification n=new Notification();
    if (BluetoothShare.isStatusError(status)) {
      if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
        title=mContext.getString(R.string.notification_sent_fail,fileName);
      }
 else {
        title=mContext.getString(R.string.notification_received_fail,fileName);
      }
      caption=mContext.getString(R.string.download_fail_line3,BluetoothOppUtility.getStatusDescription(mContext,status));
      n.icon=android.R.drawable.stat_notify_error;
    }
 else {
      if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
        title=mContext.getString(R.string.notification_sent,fileName);
        n.icon=android.R.drawable.stat_sys_upload_done;
      }
 else {
        title=mContext.getString(R.string.notification_received,fileName);
        n.icon=android.R.drawable.stat_sys_download_done;
      }
      caption=mContext.getString(R.string.notification_sent_complete);
    }
    Intent intent=new Intent(Constants.ACTION_OPEN);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.when=timeStamp;
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    mNotificationMgr.notify(id,n);
  }
  cursor.close();
}"
84953,"private void updateIncomingFileConfirmNotification(){
  Cursor cursor=mContext.getContentResolver().query(BluetoothShare.CONTENT_URI,null,WHERE_CONFIRM_PENDING,null,BluetoothShare._ID);
  if (cursor == null) {
    return;
  }
  for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
    String title=mContext.getString(R.string.incoming_file_confirm_Notification_title);
    String caption=mContext.getString(R.string.incoming_file_confirm_Notification_caption);
    int id=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare._ID));
    long timeStamp=cursor.getLong(cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP));
    Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + id);
    Notification n=new Notification();
    n.icon=R.drawable.bt_incomming_file_notification;
    n.flags|=Notification.FLAG_ONLY_ALERT_ONCE;
    n.defaults=Notification.DEFAULT_SOUND;
    n.tickerText=title;
    Intent intent=new Intent(Constants.ACTION_INCOMING_FILE_CONFIRM);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    n.when=timeStamp;
    mNotificationMgr.notify(id,n);
  }
  cursor.close();
}","private void updateIncomingFileConfirmNotification(){
  Cursor cursor=mContext.getContentResolver().query(BluetoothShare.CONTENT_URI,null,WHERE_CONFIRM_PENDING,null,BluetoothShare._ID);
  if (cursor == null) {
    return;
  }
  for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
    String title=mContext.getString(R.string.incoming_file_confirm_Notification_title);
    String caption=mContext.getString(R.string.incoming_file_confirm_Notification_caption);
    int id=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare._ID));
    long timeStamp=cursor.getLong(cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP));
    Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + id);
    Notification n=new Notification();
    n.icon=R.drawable.bt_incomming_file_notification;
    n.flags|=Notification.FLAG_ONLY_ALERT_ONCE;
    n.defaults=Notification.DEFAULT_SOUND;
    n.tickerText=title;
    Intent intent=new Intent(Constants.ACTION_INCOMING_FILE_CONFIRM);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.when=timeStamp;
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    mNotificationMgr.notify(id,n);
  }
  cursor.close();
}"
84954,"@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {
    context.startService(new Intent(context,BluetoothOppService.class));
  }
 else   if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {
    if (BluetoothAdapter.STATE_ON == intent.getIntExtra(BluetoothAdapter.EXTRA_STATE,BluetoothAdapter.ERROR)) {
      if (V)       Log.v(TAG,""String_Node_Str"");
      context.startService(new Intent(context,BluetoothOppService.class));
synchronized (this) {
        if (BluetoothOppManager.getInstance(context).mSendingFlag) {
          BluetoothOppManager.getInstance(context).mSendingFlag=false;
          Intent in1=new Intent(BluetoothDevicePicker.ACTION_LAUNCH);
          in1.putExtra(BluetoothDevicePicker.EXTRA_NEED_AUTH,false);
          in1.putExtra(BluetoothDevicePicker.EXTRA_FILTER_TYPE,BluetoothDevicePicker.FILTER_TYPE_TRANSFER);
          in1.putExtra(BluetoothDevicePicker.EXTRA_LAUNCH_PACKAGE,Constants.THIS_PACKAGE_NAME);
          in1.putExtra(BluetoothDevicePicker.EXTRA_LAUNCH_CLASS,BluetoothOppReceiver.class.getName());
          in1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          context.startActivity(in1);
        }
      }
    }
  }
 else   if (action.equals(BluetoothDevicePicker.ACTION_DEVICE_SELECTED)) {
    BluetoothOppManager mOppManager=BluetoothOppManager.getInstance(context);
    BluetoothDevice remoteDevice=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
    if (V)     Log.v(TAG,""String_Node_Str"" + remoteDevice);
    mOppManager.startTransfer(remoteDevice);
    String deviceName=mOppManager.getDeviceName(remoteDevice);
    String toastMsg;
    if (mOppManager.mMultipleFlag) {
      toastMsg=context.getString(R.string.bt_toast_5,Integer.toString(mOppManager.mfileNumInBatch),deviceName);
    }
 else {
      toastMsg=context.getString(R.string.bt_toast_4,deviceName);
    }
    Toast.makeText(context,toastMsg,Toast.LENGTH_SHORT).show();
  }
 else   if (action.equals(Constants.ACTION_INCOMING_FILE_CONFIRM)) {
    if (V)     Log.v(TAG,""String_Node_Str"");
    Uri uri=intent.getData();
    Intent in=new Intent(context,BluetoothOppIncomingFileConfirmActivity.class);
    in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    in.setData(uri);
    context.startActivity(in);
    NotificationManager notMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
    if (notMgr != null) {
      notMgr.cancel((int)ContentUris.parseId(intent.getData()));
      if (V)       Log.v(TAG,""String_Node_Str"");
    }
  }
 else   if (action.equals(BluetoothShare.INCOMING_FILE_CONFIRMATION_REQUEST_ACTION)) {
    if (V)     Log.v(TAG,""String_Node_Str"");
    Toast.makeText(context,context.getString(R.string.incoming_file_toast_msg),Toast.LENGTH_SHORT).show();
  }
 else   if (action.equals(Constants.ACTION_OPEN) || action.equals(Constants.ACTION_LIST)) {
    if (V) {
      if (action.equals(Constants.ACTION_OPEN)) {
        Log.v(TAG,""String_Node_Str"" + intent.getData());
      }
 else {
        Log.v(TAG,""String_Node_Str"" + intent.getData());
      }
    }
    BluetoothOppTransferInfo transInfo=new BluetoothOppTransferInfo();
    Uri uri=intent.getData();
    transInfo=BluetoothOppUtility.queryRecord(context,uri);
    if (transInfo == null) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    if (transInfo.mDirection == BluetoothShare.DIRECTION_INBOUND && BluetoothShare.isStatusSuccess(transInfo.mStatus)) {
      BluetoothOppUtility.openReceivedFile(context,transInfo.mFileName,transInfo.mFileType,transInfo.mTimeStamp);
      BluetoothOppUtility.updateVisibilityToHidden(context,uri);
    }
 else {
      Intent in=new Intent(context,BluetoothOppTransferActivity.class);
      in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      in.setData(uri);
      context.startActivity(in);
    }
    NotificationManager notMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
    if (notMgr != null) {
      notMgr.cancel((int)ContentUris.parseId(intent.getData()));
      if (V)       Log.v(TAG,""String_Node_Str"");
    }
  }
 else   if (action.equals(Constants.ACTION_HIDE)) {
    if (V)     Log.v(TAG,""String_Node_Str"" + intent.getData());
    Cursor cursor=context.getContentResolver().query(intent.getData(),null,null,null,null);
    if (cursor != null) {
      if (cursor.moveToFirst()) {
        int statusColumn=cursor.getColumnIndexOrThrow(BluetoothShare.STATUS);
        int status=cursor.getInt(statusColumn);
        int visibilityColumn=cursor.getColumnIndexOrThrow(BluetoothShare.VISIBILITY);
        int visibility=cursor.getInt(visibilityColumn);
        int userConfirmationColumn=cursor.getColumnIndexOrThrow(BluetoothShare.USER_CONFIRMATION);
        int userConfirmation=cursor.getInt(userConfirmationColumn);
        if ((BluetoothShare.isStatusCompleted(status) || (userConfirmation == BluetoothShare.USER_CONFIRMATION_PENDING)) && visibility == BluetoothShare.VISIBILITY_VISIBLE) {
          ContentValues values=new ContentValues();
          values.put(BluetoothShare.VISIBILITY,BluetoothShare.VISIBILITY_HIDDEN);
          context.getContentResolver().update(intent.getData(),values,null,null);
          if (V)           Log.v(TAG,""String_Node_Str"");
        }
      }
      cursor.close();
    }
  }
 else   if (action.equals(BluetoothShare.TRANSFER_COMPLETED_ACTION)) {
    if (V)     Log.v(TAG,""String_Node_Str"" + intent.getData());
    String toastMsg=null;
    BluetoothOppTransferInfo transInfo=new BluetoothOppTransferInfo();
    transInfo=BluetoothOppUtility.queryRecord(context,intent.getData());
    if (transInfo == null) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    if (BluetoothShare.isStatusSuccess(transInfo.mStatus)) {
      if (transInfo.mDirection == BluetoothShare.DIRECTION_OUTBOUND) {
        toastMsg=context.getString(R.string.notification_sent,transInfo.mFileName);
      }
 else       if (transInfo.mDirection == BluetoothShare.DIRECTION_INBOUND) {
        toastMsg=context.getString(R.string.notification_received,transInfo.mFileName);
      }
    }
 else     if (BluetoothShare.isStatusError(transInfo.mStatus)) {
      if (transInfo.mDirection == BluetoothShare.DIRECTION_OUTBOUND) {
        toastMsg=context.getString(R.string.notification_sent_fail,transInfo.mFileName);
      }
 else       if (transInfo.mDirection == BluetoothShare.DIRECTION_INBOUND) {
        toastMsg=context.getString(R.string.download_fail_line1);
      }
    }
    if (V)     Log.v(TAG,""String_Node_Str"" + toastMsg);
    if (toastMsg != null) {
      Toast.makeText(context,toastMsg,Toast.LENGTH_SHORT).show();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {
    context.startService(new Intent(context,BluetoothOppService.class));
  }
 else   if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {
    if (BluetoothAdapter.STATE_ON == intent.getIntExtra(BluetoothAdapter.EXTRA_STATE,BluetoothAdapter.ERROR)) {
      if (V)       Log.v(TAG,""String_Node_Str"");
      context.startService(new Intent(context,BluetoothOppService.class));
synchronized (this) {
        if (BluetoothOppManager.getInstance(context).mSendingFlag) {
          BluetoothOppManager.getInstance(context).mSendingFlag=false;
          Intent in1=new Intent(BluetoothDevicePicker.ACTION_LAUNCH);
          in1.putExtra(BluetoothDevicePicker.EXTRA_NEED_AUTH,false);
          in1.putExtra(BluetoothDevicePicker.EXTRA_FILTER_TYPE,BluetoothDevicePicker.FILTER_TYPE_TRANSFER);
          in1.putExtra(BluetoothDevicePicker.EXTRA_LAUNCH_PACKAGE,Constants.THIS_PACKAGE_NAME);
          in1.putExtra(BluetoothDevicePicker.EXTRA_LAUNCH_CLASS,BluetoothOppReceiver.class.getName());
          in1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          context.startActivity(in1);
        }
      }
    }
  }
 else   if (action.equals(BluetoothDevicePicker.ACTION_DEVICE_SELECTED)) {
    BluetoothOppManager mOppManager=BluetoothOppManager.getInstance(context);
    BluetoothDevice remoteDevice=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
    if (V)     Log.v(TAG,""String_Node_Str"" + remoteDevice);
    mOppManager.startTransfer(remoteDevice);
    String deviceName=mOppManager.getDeviceName(remoteDevice);
    String toastMsg;
    if (mOppManager.mMultipleFlag) {
      toastMsg=context.getString(R.string.bt_toast_5,Integer.toString(mOppManager.mfileNumInBatch),deviceName);
    }
 else {
      toastMsg=context.getString(R.string.bt_toast_4,deviceName);
    }
    Toast.makeText(context,toastMsg,Toast.LENGTH_SHORT).show();
  }
 else   if (action.equals(Constants.ACTION_INCOMING_FILE_CONFIRM)) {
    if (V)     Log.v(TAG,""String_Node_Str"");
    Uri uri=intent.getData();
    Intent in=new Intent(context,BluetoothOppIncomingFileConfirmActivity.class);
    in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    in.setData(uri);
    context.startActivity(in);
    NotificationManager notMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
    if (notMgr != null) {
      notMgr.cancel((int)ContentUris.parseId(intent.getData()));
      if (V)       Log.v(TAG,""String_Node_Str"");
    }
  }
 else   if (action.equals(BluetoothShare.INCOMING_FILE_CONFIRMATION_REQUEST_ACTION)) {
    if (V)     Log.v(TAG,""String_Node_Str"");
    Toast.makeText(context,context.getString(R.string.incoming_file_toast_msg),Toast.LENGTH_SHORT).show();
  }
 else   if (action.equals(Constants.ACTION_OPEN) || action.equals(Constants.ACTION_LIST)) {
    if (V) {
      if (action.equals(Constants.ACTION_OPEN)) {
        Log.v(TAG,""String_Node_Str"" + intent.getData());
      }
 else {
        Log.v(TAG,""String_Node_Str"" + intent.getData());
      }
    }
    BluetoothOppTransferInfo transInfo=new BluetoothOppTransferInfo();
    Uri uri=intent.getData();
    transInfo=BluetoothOppUtility.queryRecord(context,uri);
    if (transInfo == null) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    if (transInfo.mDirection == BluetoothShare.DIRECTION_INBOUND && BluetoothShare.isStatusSuccess(transInfo.mStatus)) {
      BluetoothOppUtility.openReceivedFile(context,transInfo.mFileName,transInfo.mFileType,transInfo.mTimeStamp,uri);
      BluetoothOppUtility.updateVisibilityToHidden(context,uri);
    }
 else {
      Intent in=new Intent(context,BluetoothOppTransferActivity.class);
      in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      in.setData(uri);
      context.startActivity(in);
    }
    NotificationManager notMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
    if (notMgr != null) {
      notMgr.cancel((int)ContentUris.parseId(intent.getData()));
      if (V)       Log.v(TAG,""String_Node_Str"");
    }
  }
 else   if (action.equals(Constants.ACTION_HIDE)) {
    if (V)     Log.v(TAG,""String_Node_Str"" + intent.getData());
    Cursor cursor=context.getContentResolver().query(intent.getData(),null,null,null,null);
    if (cursor != null) {
      if (cursor.moveToFirst()) {
        int statusColumn=cursor.getColumnIndexOrThrow(BluetoothShare.STATUS);
        int status=cursor.getInt(statusColumn);
        int visibilityColumn=cursor.getColumnIndexOrThrow(BluetoothShare.VISIBILITY);
        int visibility=cursor.getInt(visibilityColumn);
        int userConfirmationColumn=cursor.getColumnIndexOrThrow(BluetoothShare.USER_CONFIRMATION);
        int userConfirmation=cursor.getInt(userConfirmationColumn);
        if ((BluetoothShare.isStatusCompleted(status) || (userConfirmation == BluetoothShare.USER_CONFIRMATION_PENDING)) && visibility == BluetoothShare.VISIBILITY_VISIBLE) {
          ContentValues values=new ContentValues();
          values.put(BluetoothShare.VISIBILITY,BluetoothShare.VISIBILITY_HIDDEN);
          context.getContentResolver().update(intent.getData(),values,null,null);
          if (V)           Log.v(TAG,""String_Node_Str"");
        }
      }
      cursor.close();
    }
  }
 else   if (action.equals(BluetoothShare.TRANSFER_COMPLETED_ACTION)) {
    if (V)     Log.v(TAG,""String_Node_Str"" + intent.getData());
    String toastMsg=null;
    BluetoothOppTransferInfo transInfo=new BluetoothOppTransferInfo();
    transInfo=BluetoothOppUtility.queryRecord(context,intent.getData());
    if (transInfo == null) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    if (BluetoothShare.isStatusSuccess(transInfo.mStatus)) {
      if (transInfo.mDirection == BluetoothShare.DIRECTION_OUTBOUND) {
        toastMsg=context.getString(R.string.notification_sent,transInfo.mFileName);
      }
 else       if (transInfo.mDirection == BluetoothShare.DIRECTION_INBOUND) {
        toastMsg=context.getString(R.string.notification_received,transInfo.mFileName);
      }
    }
 else     if (BluetoothShare.isStatusError(transInfo.mStatus)) {
      if (transInfo.mDirection == BluetoothShare.DIRECTION_OUTBOUND) {
        toastMsg=context.getString(R.string.notification_sent_fail,transInfo.mFileName);
      }
 else       if (transInfo.mDirection == BluetoothShare.DIRECTION_INBOUND) {
        toastMsg=context.getString(R.string.download_fail_line1);
      }
    }
    if (V)     Log.v(TAG,""String_Node_Str"" + toastMsg);
    if (toastMsg != null) {
      Toast.makeText(context,toastMsg,Toast.LENGTH_SHORT).show();
    }
  }
}"
84955,"public void onClick(DialogInterface dialog,int which){
switch (which) {
case DialogInterface.BUTTON_POSITIVE:
    if (mWhichDialog == DIALOG_RECEIVE_COMPLETE_SUCCESS) {
      BluetoothOppUtility.openReceivedFile(this,mTransInfo.mFileName,mTransInfo.mFileType,mTransInfo.mTimeStamp);
      BluetoothOppUtility.updateVisibilityToHidden(this,mUri);
      ((NotificationManager)getSystemService(NOTIFICATION_SERVICE)).cancel(mTransInfo.mID);
    }
 else     if (mWhichDialog == DIALOG_SEND_COMPLETE_FAIL) {
      BluetoothOppUtility.updateVisibilityToHidden(this,mUri);
      ((NotificationManager)getSystemService(NOTIFICATION_SERVICE)).cancel(mTransInfo.mID);
      BluetoothOppUtility.retryTransfer(this,mTransInfo);
      BluetoothDevice remoteDevice=mAdapter.getRemoteDevice(mTransInfo.mDestAddr);
      Toast.makeText(this,this.getString(R.string.bt_toast_4,BluetoothOppManager.getInstance(this).getDeviceName(remoteDevice)),Toast.LENGTH_SHORT).show();
    }
 else     if (mWhichDialog == DIALOG_SEND_COMPLETE_SUCCESS) {
      BluetoothOppUtility.updateVisibilityToHidden(this,mUri);
      ((NotificationManager)getSystemService(NOTIFICATION_SERVICE)).cancel(mTransInfo.mID);
    }
  break;
case DialogInterface.BUTTON_NEGATIVE:
if (mWhichDialog == DIALOG_RECEIVE_ONGOING || mWhichDialog == DIALOG_SEND_ONGOING) {
  this.getContentResolver().delete(mUri,null,null);
  String msg=""String_Node_Str"";
  if (mWhichDialog == DIALOG_RECEIVE_ONGOING) {
    msg=getString(R.string.bt_toast_3,mTransInfo.mDeviceName);
  }
 else   if (mWhichDialog == DIALOG_SEND_ONGOING) {
    msg=getString(R.string.bt_toast_6,mTransInfo.mDeviceName);
  }
  Toast.makeText(this,msg,Toast.LENGTH_SHORT).show();
  ((NotificationManager)getSystemService(NOTIFICATION_SERVICE)).cancel(mTransInfo.mID);
}
 else if (mWhichDialog == DIALOG_SEND_COMPLETE_FAIL) {
  BluetoothOppUtility.updateVisibilityToHidden(this,mUri);
}
break;
}
finish();
}","public void onClick(DialogInterface dialog,int which){
switch (which) {
case DialogInterface.BUTTON_POSITIVE:
    if (mWhichDialog == DIALOG_RECEIVE_COMPLETE_SUCCESS) {
      BluetoothOppUtility.openReceivedFile(this,mTransInfo.mFileName,mTransInfo.mFileType,mTransInfo.mTimeStamp,mUri);
      BluetoothOppUtility.updateVisibilityToHidden(this,mUri);
      ((NotificationManager)getSystemService(NOTIFICATION_SERVICE)).cancel(mTransInfo.mID);
    }
 else     if (mWhichDialog == DIALOG_SEND_COMPLETE_FAIL) {
      BluetoothOppUtility.updateVisibilityToHidden(this,mUri);
      ((NotificationManager)getSystemService(NOTIFICATION_SERVICE)).cancel(mTransInfo.mID);
      BluetoothOppUtility.retryTransfer(this,mTransInfo);
      BluetoothDevice remoteDevice=mAdapter.getRemoteDevice(mTransInfo.mDestAddr);
      Toast.makeText(this,this.getString(R.string.bt_toast_4,BluetoothOppManager.getInstance(this).getDeviceName(remoteDevice)),Toast.LENGTH_SHORT).show();
    }
 else     if (mWhichDialog == DIALOG_SEND_COMPLETE_SUCCESS) {
      BluetoothOppUtility.updateVisibilityToHidden(this,mUri);
      ((NotificationManager)getSystemService(NOTIFICATION_SERVICE)).cancel(mTransInfo.mID);
    }
  break;
case DialogInterface.BUTTON_NEGATIVE:
if (mWhichDialog == DIALOG_RECEIVE_ONGOING || mWhichDialog == DIALOG_SEND_ONGOING) {
  this.getContentResolver().delete(mUri,null,null);
  String msg=""String_Node_Str"";
  if (mWhichDialog == DIALOG_RECEIVE_ONGOING) {
    msg=getString(R.string.bt_toast_3,mTransInfo.mDeviceName);
  }
 else   if (mWhichDialog == DIALOG_SEND_ONGOING) {
    msg=getString(R.string.bt_toast_6,mTransInfo.mDeviceName);
  }
  Toast.makeText(this,msg,Toast.LENGTH_SHORT).show();
  ((NotificationManager)getSystemService(NOTIFICATION_SERVICE)).cancel(mTransInfo.mID);
}
 else if (mWhichDialog == DIALOG_SEND_COMPLETE_FAIL) {
  BluetoothOppUtility.updateVisibilityToHidden(this,mUri);
}
break;
}
finish();
}"
84956,"/** 
 * Open the received file with appropriate application, if can not find application to handle, display error dialog.
 */
public static void openReceivedFile(Context context,String fileName,String mimetype,Long timeStamp){
  if (fileName == null || mimetype == null) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  File f=new File(fileName);
  if (!f.exists()) {
    Intent in=new Intent(context,BluetoothOppBtErrorActivity.class);
    in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    in.putExtra(""String_Node_Str"",context.getString(R.string.not_exist_file));
    in.putExtra(""String_Node_Str"",context.getString(R.string.not_exist_file_desc));
    context.startActivity(in);
    return;
  }
  Uri path=Uri.parse(fileName);
  if (path.getScheme() == null) {
    path=Uri.fromFile(new File(fileName));
  }
  if (isRecognizedFileType(context,path,mimetype)) {
    Intent activityIntent=new Intent(Intent.ACTION_VIEW);
    activityIntent.setDataAndType(path,mimetype);
    activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    try {
      if (V)       Log.d(TAG,""String_Node_Str"" + path + ""String_Node_Str""+ mimetype);
      context.startActivity(activityIntent);
    }
 catch (    ActivityNotFoundException ex) {
      if (V)       Log.d(TAG,""String_Node_Str"" + mimetype,ex);
    }
  }
 else {
    Intent in=new Intent(context,BluetoothOppBtErrorActivity.class);
    in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    in.putExtra(""String_Node_Str"",context.getString(R.string.unknown_file));
    in.putExtra(""String_Node_Str"",context.getString(R.string.unknown_file_desc));
    context.startActivity(in);
  }
}","/** 
 * Open the received file with appropriate application, if can not find application to handle, display error dialog.
 */
public static void openReceivedFile(Context context,String fileName,String mimetype,Long timeStamp,Uri uri){
  if (fileName == null || mimetype == null) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  File f=new File(fileName);
  if (!f.exists()) {
    Intent in=new Intent(context,BluetoothOppBtErrorActivity.class);
    in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    in.putExtra(""String_Node_Str"",context.getString(R.string.not_exist_file));
    in.putExtra(""String_Node_Str"",context.getString(R.string.not_exist_file_desc));
    context.startActivity(in);
    if (V)     Log.d(TAG,""String_Node_Str"" + uri);
    context.getContentResolver().delete(uri,null,null);
    return;
  }
  Uri path=Uri.parse(fileName);
  if (path.getScheme() == null) {
    path=Uri.fromFile(new File(fileName));
  }
  if (isRecognizedFileType(context,path,mimetype)) {
    Intent activityIntent=new Intent(Intent.ACTION_VIEW);
    activityIntent.setDataAndType(path,mimetype);
    activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    try {
      if (V)       Log.d(TAG,""String_Node_Str"" + path + ""String_Node_Str""+ mimetype);
      context.startActivity(activityIntent);
    }
 catch (    ActivityNotFoundException ex) {
      if (V)       Log.d(TAG,""String_Node_Str"" + mimetype,ex);
    }
  }
 else {
    Intent in=new Intent(context,BluetoothOppBtErrorActivity.class);
    in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    in.putExtra(""String_Node_Str"",context.getString(R.string.unknown_file));
    in.putExtra(""String_Node_Str"",context.getString(R.string.unknown_file_desc));
    context.startActivity(in);
  }
}"
84957,"private void updateCompletedNotification(){
  Cursor cursor=mContext.getContentResolver().query(BluetoothShare.CONTENT_URI,null,WHERE_COMPLETED,null,BluetoothShare._ID);
  if (cursor == null) {
    return;
  }
  for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
    long timeStamp=cursor.getLong(cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP));
    int dir=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.DIRECTION));
    int id=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare._ID));
    int status=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.STATUS));
    String fileName=cursor.getString(cursor.getColumnIndexOrThrow(BluetoothShare.FILENAME_HINT));
    if (fileName == null) {
      fileName=mContext.getString(R.string.unknown_file);
    }
    String title;
    String caption;
    Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + id);
    Notification n=new Notification();
    if (BluetoothShare.isStatusError(status)) {
      if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
        title=mContext.getString(R.string.notification_sent_fail,fileName);
      }
 else {
        title=mContext.getString(R.string.notification_received_fail,fileName);
      }
      caption=mContext.getString(R.string.download_fail_line3,BluetoothOppUtility.getStatusDescription(mContext,status));
      n.icon=android.R.drawable.stat_notify_error;
    }
 else {
      if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
        title=mContext.getString(R.string.notification_sent,fileName);
        n.icon=android.R.drawable.stat_sys_upload_done;
      }
 else {
        title=mContext.getString(R.string.notification_received,fileName);
        n.icon=android.R.drawable.stat_sys_download_done;
      }
      caption=mContext.getString(R.string.notification_sent_complete);
    }
    Intent intent=new Intent(Constants.ACTION_OPEN);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    n.when=timeStamp;
    mNotificationMgr.notify(id,n);
  }
  cursor.close();
}","private void updateCompletedNotification(){
  Cursor cursor=mContext.getContentResolver().query(BluetoothShare.CONTENT_URI,null,WHERE_COMPLETED,null,BluetoothShare._ID);
  if (cursor == null) {
    return;
  }
  for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
    long timeStamp=cursor.getLong(cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP));
    int dir=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.DIRECTION));
    int id=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare._ID));
    int status=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.STATUS));
    String fileName=cursor.getString(cursor.getColumnIndexOrThrow(BluetoothShare.FILENAME_HINT));
    if (fileName == null) {
      fileName=mContext.getString(R.string.unknown_file);
    }
    String title;
    String caption;
    Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + id);
    Notification n=new Notification();
    if (BluetoothShare.isStatusError(status)) {
      if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
        title=mContext.getString(R.string.notification_sent_fail,fileName);
      }
 else {
        title=mContext.getString(R.string.notification_received_fail,fileName);
      }
      caption=mContext.getString(R.string.download_fail_line3,BluetoothOppUtility.getStatusDescription(mContext,status));
      n.icon=android.R.drawable.stat_notify_error;
    }
 else {
      if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
        title=mContext.getString(R.string.notification_sent,fileName);
        n.icon=android.R.drawable.stat_sys_upload_done;
      }
 else {
        title=mContext.getString(R.string.notification_received,fileName);
        n.icon=android.R.drawable.stat_sys_download_done;
      }
      caption=mContext.getString(R.string.notification_sent_complete);
    }
    Intent intent=new Intent(Constants.ACTION_OPEN);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.when=timeStamp;
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    mNotificationMgr.notify(id,n);
  }
  cursor.close();
}"
84958,"private void updateIncomingFileConfirmNotification(){
  Cursor cursor=mContext.getContentResolver().query(BluetoothShare.CONTENT_URI,null,WHERE_CONFIRM_PENDING,null,BluetoothShare._ID);
  if (cursor == null) {
    return;
  }
  for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
    String title=mContext.getString(R.string.incoming_file_confirm_Notification_title);
    String caption=mContext.getString(R.string.incoming_file_confirm_Notification_caption);
    int id=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare._ID));
    long timeStamp=cursor.getLong(cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP));
    Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + id);
    Notification n=new Notification();
    n.icon=R.drawable.bt_incomming_file_notification;
    n.flags|=Notification.FLAG_ONLY_ALERT_ONCE;
    n.defaults=Notification.DEFAULT_SOUND;
    n.tickerText=title;
    Intent intent=new Intent(Constants.ACTION_INCOMING_FILE_CONFIRM);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    n.when=timeStamp;
    mNotificationMgr.notify(id,n);
  }
  cursor.close();
}","private void updateIncomingFileConfirmNotification(){
  Cursor cursor=mContext.getContentResolver().query(BluetoothShare.CONTENT_URI,null,WHERE_CONFIRM_PENDING,null,BluetoothShare._ID);
  if (cursor == null) {
    return;
  }
  for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
    String title=mContext.getString(R.string.incoming_file_confirm_Notification_title);
    String caption=mContext.getString(R.string.incoming_file_confirm_Notification_caption);
    int id=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare._ID));
    long timeStamp=cursor.getLong(cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP));
    Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + id);
    Notification n=new Notification();
    n.icon=R.drawable.bt_incomming_file_notification;
    n.flags|=Notification.FLAG_ONLY_ALERT_ONCE;
    n.defaults=Notification.DEFAULT_SOUND;
    n.tickerText=title;
    Intent intent=new Intent(Constants.ACTION_INCOMING_FILE_CONFIRM);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.when=timeStamp;
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    mNotificationMgr.notify(id,n);
  }
  cursor.close();
}"
84959,"public ClientThread(Context context,ObexTransport transport){
  super(""String_Node_Str"");
  mContext1=context;
  mTransport1=transport;
  waitingForShare=true;
  mWaitingForRemote=false;
}","public ClientThread(Context context,ObexTransport transport){
  super(""String_Node_Str"");
  mContext1=context;
  mTransport1=transport;
  waitingForShare=true;
  mWaitingForRemote=false;
  PowerManager pm=(PowerManager)mContext1.getSystemService(Context.POWER_SERVICE);
  wakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
}"
84960,"@Override public void run(){
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  PowerManager pm=(PowerManager)mContext1.getSystemService(Context.POWER_SERVICE);
  wakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,Constants.TAG);
  wakeLock.acquire();
  try {
    Thread.sleep(100);
  }
 catch (  InterruptedException e1) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"");
    }
    mInterrupted=true;
  }
  if (!mInterrupted) {
    connect();
  }
  while (!mInterrupted) {
    if (!waitingForShare) {
      doSend();
    }
 else {
      try {
        if (Constants.LOGV) {
          Log.v(TAG,""String_Node_Str"" + mTimeoutRemainingMs);
        }
        Thread.sleep(mTimeoutRemainingMs);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  disconnect();
  if (wakeLock != null) {
    wakeLock.release();
    wakeLock=null;
  }
  Message msg=Message.obtain(mCallback);
  msg.what=BluetoothOppObexSession.MSG_SESSION_COMPLETE;
  msg.obj=mInfo;
  msg.sendToTarget();
}","@Override public void run(){
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"");
  }
  wakeLock.acquire();
  try {
    Thread.sleep(100);
  }
 catch (  InterruptedException e1) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"");
    }
    mInterrupted=true;
  }
  if (!mInterrupted) {
    connect();
  }
  while (!mInterrupted) {
    if (!waitingForShare) {
      doSend();
    }
 else {
      try {
        if (Constants.LOGV) {
          Log.v(TAG,""String_Node_Str"" + mTimeoutRemainingMs);
        }
        Thread.sleep(mTimeoutRemainingMs);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  disconnect();
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"");
  }
  wakeLock.release();
  Message msg=Message.obtain(mCallback);
  msg.what=BluetoothOppObexSession.MSG_SESSION_COMPLETE;
  msg.obj=mInfo;
  msg.sendToTarget();
}"
84961,"private int sendFile(BluetoothOppSendFileInfo fileInfo){
  boolean error=false;
  int responseCode=-1;
  int status=BluetoothShare.STATUS_SUCCESS;
  Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + mInfo.mId);
  ContentValues updateValues;
  HeaderSet request;
  request=new HeaderSet();
  request.setHeader(HeaderSet.NAME,fileInfo.mFileName);
  request.setHeader(HeaderSet.TYPE,fileInfo.mMimetype);
  Constants.updateShareStatus(mContext1,mInfo.mId,BluetoothShare.STATUS_RUNNING);
  request.setHeader(HeaderSet.LENGTH,fileInfo.mLength);
  ClientOperation putOperation=null;
  OutputStream outputStream=null;
  InputStream inputStream=null;
  try {
synchronized (this) {
      mWaitingForRemote=true;
    }
    try {
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"" + fileInfo.mFileName);
      }
      putOperation=(ClientOperation)mCs.put(request);
    }
 catch (    IOException e) {
      status=BluetoothShare.STATUS_OBEX_DATA_ERROR;
      Constants.updateShareStatus(mContext1,mInfo.mId,status);
      Log.e(TAG,""String_Node_Str"");
      error=true;
    }
synchronized (this) {
      mWaitingForRemote=false;
    }
    if (!error) {
      try {
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + fileInfo.mFileName);
        }
        outputStream=putOperation.openOutputStream();
        inputStream=putOperation.openInputStream();
      }
 catch (      IOException e) {
        status=BluetoothShare.STATUS_OBEX_DATA_ERROR;
        Constants.updateShareStatus(mContext1,mInfo.mId,status);
        Log.e(TAG,""String_Node_Str"");
        error=true;
      }
    }
    if (!error) {
      updateValues=new ContentValues();
      updateValues.put(BluetoothShare.CURRENT_BYTES,0);
      updateValues.put(BluetoothShare.STATUS,BluetoothShare.STATUS_RUNNING);
      mContext1.getContentResolver().update(contentUri,updateValues,null,null);
    }
    if (!error) {
      int position=0;
      int readLength=0;
      boolean okToProceed=false;
      long timestamp;
      int outputBufferSize=putOperation.getMaxPacketSize();
      byte[] buffer=new byte[outputBufferSize];
      BufferedInputStream a=new BufferedInputStream(fileInfo.mInputStream,0x4000);
      while (!mInterrupted && (position != fileInfo.mLength)) {
        if (Constants.LOGVV) {
          timestamp=System.currentTimeMillis();
        }
        readLength=a.read(buffer,0,outputBufferSize);
        if (!okToProceed) {
          mCallback.sendMessageDelayed(mCallback.obtainMessage(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT),BluetoothOppObexSession.SESSION_TIMEOUT);
        }
        outputStream.write(buffer,0,readLength);
        mCallback.removeMessages(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT);
        if (!okToProceed) {
          if (responseCode == -1 && position == fileInfo.mLength) {
            outputStream.close();
          }
          responseCode=putOperation.getResponseCode();
          if (responseCode == ResponseCodes.OBEX_HTTP_CONTINUE || responseCode == ResponseCodes.OBEX_HTTP_OK) {
            if (Constants.LOGVV) {
              Log.v(TAG,""String_Node_Str"" + responseCode);
            }
            okToProceed=true;
          }
 else {
            Log.e(TAG,""String_Node_Str"" + responseCode);
            break;
          }
        }
 else {
          responseCode=putOperation.getResponseCode();
          if (Constants.LOGVV) {
            Log.v(TAG,""String_Node_Str"" + responseCode);
          }
          if (responseCode != ResponseCodes.OBEX_HTTP_CONTINUE && responseCode != ResponseCodes.OBEX_HTTP_OK) {
            break;
          }
        }
        position+=readLength;
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ readLength+ ""String_Node_Str""+ (System.currentTimeMillis() - timestamp)+ ""String_Node_Str"");
        }
        if (Constants.USE_EMULATOR_DEBUG) {
synchronized (this) {
            try {
              wait(300);
            }
 catch (            InterruptedException e) {
              error=true;
              status=BluetoothShare.STATUS_CANCELED;
              if (Constants.LOGVV) {
                Log.v(TAG,""String_Node_Str"" + fileInfo.mFileName + ""String_Node_Str""+ position+ ""String_Node_Str""+ position);
              }
              Constants.updateShareStatus(mContext1,mInfo.mId,status);
            }
          }
        }
        updateValues=new ContentValues();
        updateValues.put(BluetoothShare.CURRENT_BYTES,position);
        mContext1.getContentResolver().update(contentUri,updateValues,null,null);
      }
      if (responseCode == ResponseCodes.OBEX_HTTP_FORBIDDEN) {
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + fileInfo.mFileName + ""String_Node_Str""+ fileInfo.mLength);
        }
        status=BluetoothShare.STATUS_FORBIDDEN;
      }
 else       if (responseCode == ResponseCodes.OBEX_HTTP_UNSUPPORTED_TYPE) {
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + fileInfo.mMimetype);
        }
        status=BluetoothShare.STATUS_NOT_ACCEPTABLE;
      }
 else       if (!mInterrupted && position == fileInfo.mLength) {
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + fileInfo.mFileName + ""String_Node_Str""+ fileInfo.mLength);
        }
        outputStream.close();
      }
 else {
        error=true;
        status=BluetoothShare.STATUS_CANCELED;
        putOperation.abort();
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + fileInfo.mFileName + ""String_Node_Str""+ position+ ""String_Node_Str""+ fileInfo.mLength);
        }
      }
    }
  }
 catch (  IOException e) {
    status=BluetoothShare.STATUS_OBEX_DATA_ERROR;
    Log.e(TAG,""String_Node_Str"");
    Constants.updateShareStatus(mContext1,mInfo.mId,status);
    mCallback.removeMessages(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT);
  }
 finally {
    try {
      fileInfo.mInputStream.close();
      if (!error) {
        responseCode=putOperation.getResponseCode();
        if (responseCode != -1) {
          Log.v(TAG,""String_Node_Str"" + responseCode);
          if (responseCode == ResponseCodes.OBEX_HTTP_OK) {
            Log.v(TAG,""String_Node_Str"");
          }
 else {
            Log.v(TAG,""String_Node_Str"");
            status=BluetoothShare.STATUS_UNHANDLED_OBEX_CODE;
            if (responseCode == ResponseCodes.OBEX_HTTP_UNSUPPORTED_TYPE) {
              status=BluetoothShare.STATUS_NOT_ACCEPTABLE;
            }
            if (responseCode == ResponseCodes.OBEX_HTTP_FORBIDDEN) {
              status=BluetoothShare.STATUS_FORBIDDEN;
            }
          }
        }
 else {
          status=BluetoothShare.STATUS_CONNECTION_ERROR;
        }
      }
      Constants.updateShareStatus(mContext1,mInfo.mId,status);
      if (inputStream != null) {
        inputStream.close();
      }
      if (putOperation != null) {
        putOperation.close();
      }
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  return status;
}","private int sendFile(BluetoothOppSendFileInfo fileInfo){
  boolean error=false;
  int responseCode=-1;
  int status=BluetoothShare.STATUS_SUCCESS;
  Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + mInfo.mId);
  ContentValues updateValues;
  HeaderSet request;
  request=new HeaderSet();
  request.setHeader(HeaderSet.NAME,fileInfo.mFileName);
  request.setHeader(HeaderSet.TYPE,fileInfo.mMimetype);
  Constants.updateShareStatus(mContext1,mInfo.mId,BluetoothShare.STATUS_RUNNING);
  request.setHeader(HeaderSet.LENGTH,fileInfo.mLength);
  ClientOperation putOperation=null;
  OutputStream outputStream=null;
  InputStream inputStream=null;
  try {
synchronized (this) {
      mWaitingForRemote=true;
    }
    try {
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"" + fileInfo.mFileName);
      }
      putOperation=(ClientOperation)mCs.put(request);
    }
 catch (    IOException e) {
      status=BluetoothShare.STATUS_OBEX_DATA_ERROR;
      Constants.updateShareStatus(mContext1,mInfo.mId,status);
      Log.e(TAG,""String_Node_Str"");
      error=true;
    }
synchronized (this) {
      mWaitingForRemote=false;
    }
    if (!error) {
      try {
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + fileInfo.mFileName);
        }
        outputStream=putOperation.openOutputStream();
        inputStream=putOperation.openInputStream();
      }
 catch (      IOException e) {
        status=BluetoothShare.STATUS_OBEX_DATA_ERROR;
        Constants.updateShareStatus(mContext1,mInfo.mId,status);
        Log.e(TAG,""String_Node_Str"");
        error=true;
      }
    }
    if (!error) {
      updateValues=new ContentValues();
      updateValues.put(BluetoothShare.CURRENT_BYTES,0);
      updateValues.put(BluetoothShare.STATUS,BluetoothShare.STATUS_RUNNING);
      mContext1.getContentResolver().update(contentUri,updateValues,null,null);
    }
    if (!error) {
      int position=0;
      int readLength=0;
      boolean okToProceed=false;
      long timestamp=0;
      int outputBufferSize=putOperation.getMaxPacketSize();
      byte[] buffer=new byte[outputBufferSize];
      BufferedInputStream a=new BufferedInputStream(fileInfo.mInputStream,0x4000);
      while (!mInterrupted && (position != fileInfo.mLength)) {
        if (Constants.LOGVV) {
          timestamp=System.currentTimeMillis();
        }
        readLength=a.read(buffer,0,outputBufferSize);
        if (!okToProceed) {
          mCallback.sendMessageDelayed(mCallback.obtainMessage(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT),BluetoothOppObexSession.SESSION_TIMEOUT);
        }
        outputStream.write(buffer,0,readLength);
        mCallback.removeMessages(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT);
        position+=readLength;
        if (!okToProceed) {
          if (responseCode == -1 && position == fileInfo.mLength) {
            outputStream.close();
          }
          responseCode=putOperation.getResponseCode();
          if (responseCode == ResponseCodes.OBEX_HTTP_CONTINUE || responseCode == ResponseCodes.OBEX_HTTP_OK) {
            if (Constants.LOGVV) {
              Log.v(TAG,""String_Node_Str"" + responseCode);
            }
            okToProceed=true;
          }
 else {
            Log.e(TAG,""String_Node_Str"" + responseCode);
            break;
          }
        }
 else {
          responseCode=putOperation.getResponseCode();
          if (Constants.LOGVV) {
            Log.v(TAG,""String_Node_Str"" + responseCode);
          }
          if (responseCode != ResponseCodes.OBEX_HTTP_CONTINUE && responseCode != ResponseCodes.OBEX_HTTP_OK) {
            break;
          }
        }
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ readLength+ ""String_Node_Str""+ (System.currentTimeMillis() - timestamp)+ ""String_Node_Str"");
        }
        if (Constants.USE_EMULATOR_DEBUG) {
synchronized (this) {
            try {
              wait(300);
            }
 catch (            InterruptedException e) {
              error=true;
              status=BluetoothShare.STATUS_CANCELED;
              if (Constants.LOGVV) {
                Log.v(TAG,""String_Node_Str"" + fileInfo.mFileName + ""String_Node_Str""+ position+ ""String_Node_Str""+ position);
              }
              Constants.updateShareStatus(mContext1,mInfo.mId,status);
            }
          }
        }
        updateValues=new ContentValues();
        updateValues.put(BluetoothShare.CURRENT_BYTES,position);
        mContext1.getContentResolver().update(contentUri,updateValues,null,null);
      }
      if (responseCode == ResponseCodes.OBEX_HTTP_FORBIDDEN) {
        Log.i(TAG,""String_Node_Str"" + fileInfo.mFileName + ""String_Node_Str""+ fileInfo.mLength);
        status=BluetoothShare.STATUS_FORBIDDEN;
      }
 else       if (responseCode == ResponseCodes.OBEX_HTTP_UNSUPPORTED_TYPE) {
        Log.i(TAG,""String_Node_Str"" + fileInfo.mMimetype);
        status=BluetoothShare.STATUS_NOT_ACCEPTABLE;
      }
 else       if (!mInterrupted && position == fileInfo.mLength) {
        Log.i(TAG,""String_Node_Str"" + fileInfo.mFileName + ""String_Node_Str""+ fileInfo.mLength);
        outputStream.close();
      }
 else {
        error=true;
        status=BluetoothShare.STATUS_CANCELED;
        putOperation.abort();
        Log.e(TAG,""String_Node_Str"" + fileInfo.mFileName + ""String_Node_Str""+ position+ ""String_Node_Str""+ fileInfo.mLength);
      }
    }
  }
 catch (  IOException e) {
    status=BluetoothShare.STATUS_OBEX_DATA_ERROR;
    Log.e(TAG,""String_Node_Str"");
    Constants.updateShareStatus(mContext1,mInfo.mId,status);
    mCallback.removeMessages(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT);
  }
 finally {
    try {
      fileInfo.mInputStream.close();
      if (!error) {
        responseCode=putOperation.getResponseCode();
        if (responseCode != -1) {
          if (Constants.LOGVV) {
            Log.v(TAG,""String_Node_Str"" + responseCode);
          }
          if (responseCode != ResponseCodes.OBEX_HTTP_OK) {
            Log.i(TAG,""String_Node_Str"" + responseCode);
            status=BluetoothShare.STATUS_UNHANDLED_OBEX_CODE;
            if (responseCode == ResponseCodes.OBEX_HTTP_UNSUPPORTED_TYPE) {
              status=BluetoothShare.STATUS_NOT_ACCEPTABLE;
            }
            if (responseCode == ResponseCodes.OBEX_HTTP_FORBIDDEN) {
              status=BluetoothShare.STATUS_FORBIDDEN;
            }
          }
        }
 else {
          status=BluetoothShare.STATUS_CONNECTION_ERROR;
        }
      }
      Constants.updateShareStatus(mContext1,mInfo.mId,status);
      if (inputStream != null) {
        inputStream.close();
      }
      if (putOperation != null) {
        putOperation.close();
      }
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  return status;
}"
84962,"@Override public void onDisconnect(HeaderSet req,HeaderSet resp){
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"");
  }
  resp.responseCode=ResponseCodes.OBEX_HTTP_OK;
  if (mCallback != null) {
    Message msg=Message.obtain(mCallback);
    msg.what=BluetoothOppObexSession.MSG_SESSION_COMPLETE;
    msg.obj=mInfo;
    msg.sendToTarget();
  }
}","@Override public void onDisconnect(HeaderSet req,HeaderSet resp){
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"");
  }
  resp.responseCode=ResponseCodes.OBEX_HTTP_OK;
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"");
  }
  if (mWakeLock.isHeld()) {
    mWakeLock.release();
  }
  if (mPartialWakeLock.isHeld()) {
    mPartialWakeLock.release();
  }
  if (mCallback != null) {
    Message msg=Message.obtain(mCallback);
    msg.what=BluetoothOppObexSession.MSG_SESSION_COMPLETE;
    msg.obj=mInfo;
    msg.sendToTarget();
  }
}"
84963,"public BluetoothOppObexServerSession(Context context,ObexTransport transport){
  mContext=context;
  mTransport=transport;
}","public BluetoothOppObexServerSession(Context context,ObexTransport transport){
  mContext=context;
  mTransport=transport;
  PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,TAG);
  mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
}"
84964,"private int receiveFile(BluetoothOppReceiveFileInfo fileInfo,Operation op){
  int status=-1;
  BufferedOutputStream bos=null;
  InputStream is=null;
  boolean error=false;
  try {
    is=op.openInputStream();
  }
 catch (  IOException e1) {
    Log.e(TAG,""String_Node_Str"");
    status=BluetoothShare.STATUS_OBEX_DATA_ERROR;
    error=true;
  }
  Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + mInfo.mId);
  if (!error) {
    ContentValues updateValues=new ContentValues();
    updateValues.put(BluetoothShare._DATA,fileInfo.mFileName);
    mContext.getContentResolver().update(contentUri,updateValues,null,null);
  }
  int position=0;
  if (!error) {
    File f=new File(fileInfo.mFileName);
    try {
      bos=new BufferedOutputStream(new FileOutputStream(f),0x10000);
    }
 catch (    FileNotFoundException e1) {
      Log.e(TAG,""String_Node_Str"" + f.toString());
      status=BluetoothShare.STATUS_FILE_ERROR;
      error=true;
    }
  }
  if (!error) {
    int outputBufferSize=op.getMaxPacketSize();
    byte[] b=new byte[outputBufferSize];
    int readLength=0;
    long timestamp;
    try {
      while ((!mInterrupted) && (position != fileInfo.mLength)) {
        if (Constants.LOGVV) {
          timestamp=System.currentTimeMillis();
        }
        readLength=is.read(b);
        if (readLength == -1) {
          if (Constants.LOGV) {
            Log.v(TAG,""String_Node_Str"" + position);
          }
          break;
        }
        bos.write(b,0,readLength);
        position+=readLength;
        if (Constants.USE_EMULATOR_DEBUG) {
synchronized (this) {
            try {
              wait(300);
            }
 catch (            InterruptedException e) {
              status=BluetoothShare.STATUS_CANCELED;
              mInterrupted=true;
              if (Constants.LOGVV) {
                Log.v(TAG,""String_Node_Str"" + fileInfo.mFileName + ""String_Node_Str""+ position+ ""String_Node_Str""+ position);
              }
              Constants.updateShareStatus(mContext,mInfo.mId,status);
            }
          }
        }
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ readLength+ ""String_Node_Str""+ (System.currentTimeMillis() - timestamp)+ ""String_Node_Str"");
        }
        ContentValues updateValues=new ContentValues();
        updateValues.put(BluetoothShare.CURRENT_BYTES,position);
        mContext.getContentResolver().update(contentUri,updateValues,null,null);
      }
    }
 catch (    IOException e1) {
      Log.e(TAG,""String_Node_Str"");
      status=BluetoothShare.STATUS_OBEX_DATA_ERROR;
      error=true;
    }
  }
  if (mInterrupted) {
    if (Constants.LOGV) {
      Log.v(TAG,""String_Node_Str"");
    }
    status=BluetoothShare.STATUS_CANCELED;
  }
 else {
    if (position == fileInfo.mLength) {
      if (Constants.LOGV) {
        Log.v(TAG,""String_Node_Str"" + fileInfo.mFileName);
      }
      status=BluetoothShare.STATUS_SUCCESS;
    }
 else {
      if (Constants.LOGV) {
        Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ fileInfo.mLength);
      }
      if (status == -1) {
        status=BluetoothShare.STATUS_UNKNOWN_ERROR;
      }
    }
  }
  Constants.updateShareStatus(mContext,mInfo.mId,status);
  if (bos != null) {
    try {
      bos.close();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  return status;
}","private int receiveFile(BluetoothOppReceiveFileInfo fileInfo,Operation op){
  int status=-1;
  BufferedOutputStream bos=null;
  InputStream is=null;
  boolean error=false;
  try {
    is=op.openInputStream();
  }
 catch (  IOException e1) {
    Log.e(TAG,""String_Node_Str"");
    status=BluetoothShare.STATUS_OBEX_DATA_ERROR;
    error=true;
  }
  Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + mInfo.mId);
  if (!error) {
    ContentValues updateValues=new ContentValues();
    updateValues.put(BluetoothShare._DATA,fileInfo.mFileName);
    mContext.getContentResolver().update(contentUri,updateValues,null,null);
  }
  int position=0;
  if (!error) {
    File f=new File(fileInfo.mFileName);
    try {
      bos=new BufferedOutputStream(new FileOutputStream(f),0x10000);
    }
 catch (    FileNotFoundException e1) {
      Log.e(TAG,""String_Node_Str"" + f.toString());
      status=BluetoothShare.STATUS_FILE_ERROR;
      error=true;
    }
  }
  if (!error) {
    int outputBufferSize=op.getMaxPacketSize();
    byte[] b=new byte[outputBufferSize];
    int readLength=0;
    long timestamp=0;
    try {
      while ((!mInterrupted) && (position != fileInfo.mLength)) {
        if (Constants.LOGVV) {
          timestamp=System.currentTimeMillis();
        }
        readLength=is.read(b);
        if (readLength == -1) {
          if (Constants.LOGV) {
            Log.v(TAG,""String_Node_Str"" + position);
          }
          break;
        }
        bos.write(b,0,readLength);
        position+=readLength;
        if (Constants.USE_EMULATOR_DEBUG) {
synchronized (this) {
            try {
              wait(300);
            }
 catch (            InterruptedException e) {
              status=BluetoothShare.STATUS_CANCELED;
              mInterrupted=true;
              if (Constants.LOGVV) {
                Log.v(TAG,""String_Node_Str"" + fileInfo.mFileName + ""String_Node_Str""+ position+ ""String_Node_Str""+ position);
              }
              Constants.updateShareStatus(mContext,mInfo.mId,status);
            }
          }
        }
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ readLength+ ""String_Node_Str""+ (System.currentTimeMillis() - timestamp)+ ""String_Node_Str"");
        }
        ContentValues updateValues=new ContentValues();
        updateValues.put(BluetoothShare.CURRENT_BYTES,position);
        mContext.getContentResolver().update(contentUri,updateValues,null,null);
      }
    }
 catch (    IOException e1) {
      Log.e(TAG,""String_Node_Str"");
      status=BluetoothShare.STATUS_OBEX_DATA_ERROR;
      error=true;
    }
  }
  if (mInterrupted) {
    if (Constants.LOGV) {
      Log.v(TAG,""String_Node_Str"");
    }
    status=BluetoothShare.STATUS_CANCELED;
  }
 else {
    if (position == fileInfo.mLength) {
      if (Constants.LOGV) {
        Log.v(TAG,""String_Node_Str"" + fileInfo.mFileName);
      }
      status=BluetoothShare.STATUS_SUCCESS;
    }
 else {
      if (Constants.LOGV) {
        Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ fileInfo.mLength);
      }
      if (status == -1) {
        status=BluetoothShare.STATUS_UNKNOWN_ERROR;
      }
    }
  }
  if (bos != null) {
    try {
      bos.close();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  return status;
}"
84965,"/** 
 * Called when connection is accepted from remote, to retrieve the first Header then wait for user confirmation
 */
public void preStart(){
  try {
    if (Constants.LOGV) {
      Log.v(TAG,""String_Node_Str"" + mTransport.toString());
    }
    mSession=new ServerSession(mTransport,this,null);
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + e);
  }
}","/** 
 * Called when connection is accepted from remote, to retrieve the first Header then wait for user confirmation
 */
public void preStart(){
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"");
  }
  mWakeLock.acquire();
  try {
    if (Constants.LOGV) {
      Log.v(TAG,""String_Node_Str"" + mTransport.toString());
    }
    mSession=new ServerSession(mTransport,this,null);
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + e);
  }
}"
84966,"/** 
 * Called from BluetoothOppTransfer to cancel the ""Transfer"" Otherwise, server should end by itself.
 */
public void stop(){
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"");
  }
  mInterrupted=true;
  if (mSession != null) {
    try {
      mSession.close();
      mTransport.close();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + e);
    }
  }
}","/** 
 * Called from BluetoothOppTransfer to cancel the ""Transfer"" Otherwise, server should end by itself.
 */
public void stop(){
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"");
  }
  mInterrupted=true;
  if (mSession != null) {
    try {
      mSession.close();
      mTransport.close();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + e);
    }
  }
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"");
  }
  if (mWakeLock.isHeld()) {
    mWakeLock.release();
  }
  if (mPartialWakeLock.isHeld()) {
    mPartialWakeLock.release();
  }
}"
84967,"@Override public int onPut(Operation op){
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"" + op.toString());
  }
  HeaderSet request;
  String name, mimeType;
  Long length;
  int obexResponse=ResponseCodes.OBEX_HTTP_OK;
  if (mAccepted == BluetoothShare.USER_CONFIRMATION_DENIED) {
    return ResponseCodes.OBEX_HTTP_FORBIDDEN;
  }
  try {
    boolean pre_reject=false;
    request=op.getReceivedHeader();
    if (Constants.LOGVV) {
      logHeader(request);
    }
    name=(String)request.getHeader(HeaderSet.NAME);
    length=(Long)request.getHeader(HeaderSet.LENGTH);
    mimeType=(String)request.getHeader(HeaderSet.TYPE);
    if (length == 0) {
      if (Constants.LOGV) {
        Log.w(TAG,""String_Node_Str"");
      }
      pre_reject=true;
      obexResponse=ResponseCodes.OBEX_HTTP_LENGTH_REQUIRED;
    }
    if (name == null || name.equals(""String_Node_Str"")) {
      if (Constants.LOGV) {
        Log.w(TAG,""String_Node_Str"");
      }
      pre_reject=true;
      obexResponse=ResponseCodes.OBEX_HTTP_BAD_REQUEST;
    }
    if (!pre_reject) {
      String extension, type;
      int dotIndex=name.indexOf('.');
      if (dotIndex < 0) {
        if (Constants.LOGV) {
          Log.w(TAG,""String_Node_Str"");
        }
        pre_reject=true;
        obexResponse=ResponseCodes.OBEX_HTTP_BAD_REQUEST;
      }
 else {
        extension=name.substring(dotIndex + 1);
        MimeTypeMap map=MimeTypeMap.getSingleton();
        type=map.getMimeTypeFromExtension(extension);
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + extension + ""String_Node_Str""+ type);
        }
        if (type != null) {
          mimeType=type;
        }
 else {
          if (mimeType == null) {
            if (Constants.LOGV) {
              Log.w(TAG,""String_Node_Str"");
            }
            pre_reject=true;
            obexResponse=ResponseCodes.OBEX_HTTP_UNSUPPORTED_TYPE;
          }
        }
        if (mimeType != null) {
          mimeType=mimeType.toLowerCase();
        }
      }
    }
    if (!pre_reject && (mimeType == null || Constants.mimeTypeMatches(mimeType,Constants.UNACCEPTABLE_SHARE_INBOUND_TYPES))) {
      if (Constants.LOGV) {
        Log.w(TAG,""String_Node_Str"");
      }
      pre_reject=true;
      obexResponse=ResponseCodes.OBEX_HTTP_UNSUPPORTED_TYPE;
    }
    if (pre_reject && obexResponse != ResponseCodes.OBEX_HTTP_OK) {
      return obexResponse;
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + e);
    return ResponseCodes.OBEX_HTTP_BAD_REQUEST;
  }
  ContentValues values=new ContentValues();
  values.put(BluetoothShare.FILENAME_HINT,name);
  values.put(BluetoothShare.TOTAL_BYTES,length.intValue());
  values.put(BluetoothShare.MIMETYPE,mimeType);
  if (mTransport instanceof BluetoothOppRfcommTransport) {
    String a=((BluetoothOppRfcommTransport)mTransport).getRemoteAddress();
    values.put(BluetoothShare.DESTINATION,a);
  }
 else {
    values.put(BluetoothShare.DESTINATION,""String_Node_Str"");
  }
  values.put(BluetoothShare.DIRECTION,BluetoothShare.DIRECTION_INBOUND);
  values.put(BluetoothShare.TIMESTAMP,mTimestamp);
  boolean needConfirm=true;
  if (!mServerBlocking) {
    values.put(BluetoothShare.USER_CONFIRMATION,BluetoothShare.USER_CONFIRMATION_AUTO_CONFIRMED);
    needConfirm=false;
  }
  Uri contentUri=mContext.getContentResolver().insert(BluetoothShare.CONTENT_URI,values);
  mLocalShareInfoId=Integer.parseInt(contentUri.getPathSegments().get(1));
  if (needConfirm) {
    Intent in=new Intent(BluetoothShare.INCOMING_FILE_CONFIRMATION_REQUEST_ACTION);
    in.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    mContext.sendBroadcast(in);
  }
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"" + contentUri);
    Log.v(TAG,""String_Node_Str"" + mLocalShareInfoId);
  }
  mServerBlocking=true;
  boolean msgSent=false;
synchronized (this) {
    try {
      while (mServerBlocking) {
        wait(1000);
        if (mCallback != null && !msgSent) {
          mCallback.sendMessageDelayed(mCallback.obtainMessage(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT),BluetoothOppObexSession.SESSION_TIMEOUT);
          msgSent=true;
          if (Constants.LOGVV) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
      }
    }
 catch (    InterruptedException e) {
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
  }
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"");
  }
  if (mCallback != null && msgSent) {
    mCallback.removeMessages(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT);
  }
  if (mInfo.mId != mLocalShareInfoId) {
    Log.e(TAG,""String_Node_Str"");
  }
  mAccepted=mInfo.mConfirm;
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"" + mAccepted);
  }
  int status=BluetoothShare.STATUS_SUCCESS;
  if (mAccepted == BluetoothShare.USER_CONFIRMATION_CONFIRMED || mAccepted == BluetoothShare.USER_CONFIRMATION_AUTO_CONFIRMED) {
    if (mFileInfo.mFileName == null) {
      status=mFileInfo.mStatus;
      mInfo.mStatus=mFileInfo.mStatus;
      Constants.updateShareStatus(mContext,mInfo.mId,status);
      obexResponse=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
    }
    if (mFileInfo.mFileName != null) {
      ContentValues updateValues=new ContentValues();
      contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + mInfo.mId);
      updateValues.put(BluetoothShare._DATA,mFileInfo.mFileName);
      updateValues.put(BluetoothShare.STATUS,BluetoothShare.STATUS_RUNNING);
      mContext.getContentResolver().update(contentUri,updateValues,null,null);
      status=receiveFile(mFileInfo,op);
      if (status != BluetoothShare.STATUS_SUCCESS) {
        obexResponse=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
      }
      Constants.updateShareStatus(mContext,mInfo.mId,status);
    }
    if (status == BluetoothShare.STATUS_SUCCESS) {
      Message msg=Message.obtain(mCallback,BluetoothOppObexSession.MSG_SHARE_COMPLETE);
      msg.obj=mInfo;
      msg.sendToTarget();
    }
 else {
      Message msg=Message.obtain(mCallback,BluetoothOppObexSession.MSG_SESSION_ERROR);
      msg.obj=mInfo;
      msg.sendToTarget();
    }
  }
 else   if (mAccepted == BluetoothShare.USER_CONFIRMATION_DENIED || mAccepted == BluetoothShare.USER_CONFIRMATION_TIMEOUT) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"");
    }
    status=BluetoothShare.STATUS_FORBIDDEN;
    Constants.updateShareStatus(mContext,mInfo.mId,status);
    obexResponse=ResponseCodes.OBEX_HTTP_FORBIDDEN;
    Message msg=Message.obtain(mCallback);
    msg.what=BluetoothOppObexSession.MSG_SHARE_INTERRUPTED;
    msg.obj=mInfo;
    msg.sendToTarget();
  }
  return obexResponse;
}","@Override public int onPut(Operation op){
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"" + op.toString());
  }
  HeaderSet request;
  String name, mimeType;
  Long length;
  int obexResponse=ResponseCodes.OBEX_HTTP_OK;
  if (mAccepted == BluetoothShare.USER_CONFIRMATION_DENIED) {
    return ResponseCodes.OBEX_HTTP_FORBIDDEN;
  }
  try {
    boolean pre_reject=false;
    request=op.getReceivedHeader();
    if (Constants.LOGVV) {
      logHeader(request);
    }
    name=(String)request.getHeader(HeaderSet.NAME);
    length=(Long)request.getHeader(HeaderSet.LENGTH);
    mimeType=(String)request.getHeader(HeaderSet.TYPE);
    if (length == 0) {
      if (Constants.LOGV) {
        Log.w(TAG,""String_Node_Str"");
      }
      pre_reject=true;
      obexResponse=ResponseCodes.OBEX_HTTP_LENGTH_REQUIRED;
    }
    if (name == null || name.equals(""String_Node_Str"")) {
      if (Constants.LOGV) {
        Log.w(TAG,""String_Node_Str"");
      }
      pre_reject=true;
      obexResponse=ResponseCodes.OBEX_HTTP_BAD_REQUEST;
    }
    if (!pre_reject) {
      String extension, type;
      int dotIndex=name.indexOf('.');
      if (dotIndex < 0) {
        if (Constants.LOGV) {
          Log.w(TAG,""String_Node_Str"");
        }
        pre_reject=true;
        obexResponse=ResponseCodes.OBEX_HTTP_BAD_REQUEST;
      }
 else {
        extension=name.substring(dotIndex + 1);
        MimeTypeMap map=MimeTypeMap.getSingleton();
        type=map.getMimeTypeFromExtension(extension);
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + extension + ""String_Node_Str""+ type);
        }
        if (type != null) {
          mimeType=type;
        }
 else {
          if (mimeType == null) {
            if (Constants.LOGV) {
              Log.w(TAG,""String_Node_Str"");
            }
            pre_reject=true;
            obexResponse=ResponseCodes.OBEX_HTTP_UNSUPPORTED_TYPE;
          }
        }
        if (mimeType != null) {
          mimeType=mimeType.toLowerCase();
        }
      }
    }
    if (!pre_reject && (mimeType == null || Constants.mimeTypeMatches(mimeType,Constants.UNACCEPTABLE_SHARE_INBOUND_TYPES))) {
      if (Constants.LOGV) {
        Log.w(TAG,""String_Node_Str"");
      }
      pre_reject=true;
      obexResponse=ResponseCodes.OBEX_HTTP_UNSUPPORTED_TYPE;
    }
    if (pre_reject && obexResponse != ResponseCodes.OBEX_HTTP_OK) {
      return obexResponse;
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + e);
    return ResponseCodes.OBEX_HTTP_BAD_REQUEST;
  }
  ContentValues values=new ContentValues();
  values.put(BluetoothShare.FILENAME_HINT,name);
  values.put(BluetoothShare.TOTAL_BYTES,length.intValue());
  values.put(BluetoothShare.MIMETYPE,mimeType);
  if (mTransport instanceof BluetoothOppRfcommTransport) {
    String a=((BluetoothOppRfcommTransport)mTransport).getRemoteAddress();
    values.put(BluetoothShare.DESTINATION,a);
  }
 else {
    values.put(BluetoothShare.DESTINATION,""String_Node_Str"");
  }
  values.put(BluetoothShare.DIRECTION,BluetoothShare.DIRECTION_INBOUND);
  values.put(BluetoothShare.TIMESTAMP,mTimestamp);
  boolean needConfirm=true;
  if (!mServerBlocking) {
    values.put(BluetoothShare.USER_CONFIRMATION,BluetoothShare.USER_CONFIRMATION_AUTO_CONFIRMED);
    needConfirm=false;
  }
  Uri contentUri=mContext.getContentResolver().insert(BluetoothShare.CONTENT_URI,values);
  mLocalShareInfoId=Integer.parseInt(contentUri.getPathSegments().get(1));
  if (needConfirm) {
    Intent in=new Intent(BluetoothShare.INCOMING_FILE_CONFIRMATION_REQUEST_ACTION);
    in.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    mContext.sendBroadcast(in);
  }
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"" + contentUri);
    Log.v(TAG,""String_Node_Str"" + mLocalShareInfoId);
  }
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"");
  }
  if (mWakeLock.isHeld()) {
    mPartialWakeLock.acquire();
    mWakeLock.release();
  }
  mServerBlocking=true;
  boolean msgSent=false;
synchronized (this) {
    try {
      while (mServerBlocking) {
        wait(1000);
        if (mCallback != null && !msgSent) {
          mCallback.sendMessageDelayed(mCallback.obtainMessage(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT),BluetoothOppObexSession.SESSION_TIMEOUT);
          msgSent=true;
          if (Constants.LOGVV) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
      }
    }
 catch (    InterruptedException e) {
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
  }
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"");
  }
  if (mCallback != null && msgSent) {
    mCallback.removeMessages(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT);
  }
  if (mInfo.mId != mLocalShareInfoId) {
    Log.e(TAG,""String_Node_Str"");
  }
  mAccepted=mInfo.mConfirm;
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"" + mAccepted);
  }
  int status=BluetoothShare.STATUS_SUCCESS;
  if (mAccepted == BluetoothShare.USER_CONFIRMATION_CONFIRMED || mAccepted == BluetoothShare.USER_CONFIRMATION_AUTO_CONFIRMED) {
    if (mFileInfo.mFileName == null) {
      status=mFileInfo.mStatus;
      mInfo.mStatus=mFileInfo.mStatus;
      Constants.updateShareStatus(mContext,mInfo.mId,status);
      obexResponse=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
    }
    if (mFileInfo.mFileName != null) {
      ContentValues updateValues=new ContentValues();
      contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + mInfo.mId);
      updateValues.put(BluetoothShare._DATA,mFileInfo.mFileName);
      updateValues.put(BluetoothShare.STATUS,BluetoothShare.STATUS_RUNNING);
      mContext.getContentResolver().update(contentUri,updateValues,null,null);
      status=receiveFile(mFileInfo,op);
      if (status != BluetoothShare.STATUS_SUCCESS) {
        obexResponse=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
      }
      Constants.updateShareStatus(mContext,mInfo.mId,status);
    }
    if (status == BluetoothShare.STATUS_SUCCESS) {
      Message msg=Message.obtain(mCallback,BluetoothOppObexSession.MSG_SHARE_COMPLETE);
      msg.obj=mInfo;
      msg.sendToTarget();
    }
 else {
      Message msg=Message.obtain(mCallback,BluetoothOppObexSession.MSG_SESSION_ERROR);
      msg.obj=mInfo;
      msg.sendToTarget();
    }
  }
 else   if (mAccepted == BluetoothShare.USER_CONFIRMATION_DENIED || mAccepted == BluetoothShare.USER_CONFIRMATION_TIMEOUT) {
    Log.i(TAG,""String_Node_Str"");
    status=BluetoothShare.STATUS_FORBIDDEN;
    Constants.updateShareStatus(mContext,mInfo.mId,status);
    obexResponse=ResponseCodes.OBEX_HTTP_FORBIDDEN;
    Message msg=Message.obtain(mCallback);
    msg.what=BluetoothOppObexSession.MSG_SHARE_INTERRUPTED;
    msg.obj=mInfo;
    msg.sendToTarget();
  }
  return obexResponse;
}"
84968,"@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {
    context.startService(new Intent(context,BluetoothOppService.class));
  }
 else   if (action.equals(BluetoothIntent.BLUETOOTH_STATE_CHANGED_ACTION)) {
    if (BluetoothDevice.BLUETOOTH_STATE_ON == intent.getIntExtra(BluetoothIntent.BLUETOOTH_STATE,BluetoothError.ERROR)) {
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"");
      }
      context.startService(new Intent(context,BluetoothOppService.class));
synchronized (this) {
        if (BluetoothOppManager.getInstance(context).mSendingFlag) {
          BluetoothOppManager.getInstance(context).mSendingFlag=false;
          Intent in1=new Intent(context,BluetoothDevicePickerActivity.class);
          in1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          context.startActivity(in1);
        }
      }
    }
  }
 else   if (action.equals(BluetoothShare.BLUETOOTH_DEVICE_SELECTED_ACTION)) {
    BluetoothOppManager mOppManager=BluetoothOppManager.getInstance(context);
    String btAddr=(String)intent.getStringExtra(""String_Node_Str"");
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"" + btAddr);
    }
    mOppManager.startTransfer(btAddr);
    String deviceName=mOppManager.getDeviceName(btAddr);
    String toastMsg;
    if (mOppManager.mMultipleFlag) {
      toastMsg=context.getString(R.string.bt_toast_5,Integer.toString(mOppManager.mfileNumInBatch),deviceName);
    }
 else {
      toastMsg=context.getString(R.string.bt_toast_4,deviceName);
    }
    Toast.makeText(context,toastMsg,Toast.LENGTH_SHORT).show();
  }
 else   if (action.equals(Constants.ACTION_INCOMING_FILE_CONFIRM)) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"");
    }
    Uri uri=intent.getData();
    Intent in=new Intent(context,BluetoothOppIncomingFileConfirmActivity.class);
    in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    in.setData(uri);
    context.startActivity(in);
    NotificationManager notMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
    if (notMgr != null) {
      notMgr.cancel((int)ContentUris.parseId(intent.getData()));
      Log.v(TAG,""String_Node_Str"");
    }
  }
 else   if (action.equals(BluetoothShare.INCOMING_FILE_CONFIRMATION_REQUEST_ACTION)) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"");
    }
    Toast.makeText(context,context.getString(R.string.incoming_file_toast_msg),Toast.LENGTH_SHORT).show();
  }
 else   if (action.equals(Constants.ACTION_OPEN) || action.equals(Constants.ACTION_LIST)) {
    if (Constants.LOGVV) {
      if (action.equals(Constants.ACTION_OPEN)) {
        Log.v(TAG,""String_Node_Str"" + intent.getData());
      }
 else {
        Log.v(TAG,""String_Node_Str"" + intent.getData());
      }
    }
    BluetoothOppTransferInfo transInfo=new BluetoothOppTransferInfo();
    Uri uri=intent.getData();
    transInfo=BluetoothOppUtility.queryRecord(context,uri);
    if (transInfo == null) {
      if (Constants.LOGVV) {
        Log.e(TAG,""String_Node_Str"");
      }
      return;
    }
    if (transInfo.mDirection == BluetoothShare.DIRECTION_INBOUND && BluetoothShare.isStatusSuccess(transInfo.mStatus)) {
      BluetoothOppUtility.openReceivedFile(context,transInfo.mFileName,transInfo.mFileType,transInfo.mTimeStamp);
      BluetoothOppUtility.updateVisibilityToHidden(context,uri);
    }
 else {
      Intent in=new Intent(context,BluetoothOppTransferActivity.class);
      in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      in.setData(uri);
      context.startActivity(in);
    }
    NotificationManager notMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
    if (notMgr != null) {
      notMgr.cancel((int)ContentUris.parseId(intent.getData()));
      Log.v(TAG,""String_Node_Str"");
    }
  }
 else   if (action.equals(Constants.ACTION_HIDE)) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"" + intent.getData());
    }
    Cursor cursor=context.getContentResolver().query(intent.getData(),null,null,null,null);
    if (cursor != null) {
      if (cursor.moveToFirst()) {
        int statusColumn=cursor.getColumnIndexOrThrow(BluetoothShare.STATUS);
        int status=cursor.getInt(statusColumn);
        int visibilityColumn=cursor.getColumnIndexOrThrow(BluetoothShare.VISIBILITY);
        int visibility=cursor.getInt(visibilityColumn);
        int userConfirmationColumn=cursor.getColumnIndexOrThrow(BluetoothShare.USER_CONFIRMATION);
        int userConfirmation=cursor.getInt(userConfirmationColumn);
        if ((BluetoothShare.isStatusCompleted(status) || (userConfirmation == BluetoothShare.USER_CONFIRMATION_PENDING)) && visibility == BluetoothShare.VISIBILITY_VISIBLE) {
          ContentValues values=new ContentValues();
          values.put(BluetoothShare.VISIBILITY,BluetoothShare.VISIBILITY_HIDDEN);
          context.getContentResolver().update(intent.getData(),values,null,null);
          if (Constants.LOGVV) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
      }
      cursor.close();
    }
  }
 else   if (action.equals(BluetoothShare.TRANSFER_COMPLETED_ACTION)) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"" + intent.getData());
    }
    String toastMsg=null;
    BluetoothOppTransferInfo transInfo=new BluetoothOppTransferInfo();
    transInfo=BluetoothOppUtility.queryRecord(context,intent.getData());
    if (transInfo == null) {
      if (Constants.LOGVV) {
        Log.e(TAG,""String_Node_Str"");
      }
      return;
    }
    if (BluetoothShare.isStatusSuccess(transInfo.mStatus)) {
      if (transInfo.mDirection == BluetoothShare.DIRECTION_OUTBOUND) {
        toastMsg=context.getString(R.string.notification_sent,transInfo.mFileName);
      }
 else       if (transInfo.mDirection == BluetoothShare.DIRECTION_INBOUND) {
        toastMsg=context.getString(R.string.notification_received,transInfo.mFileName);
      }
    }
 else     if (BluetoothShare.isStatusError(transInfo.mStatus)) {
      if (transInfo.mDirection == BluetoothShare.DIRECTION_OUTBOUND) {
        toastMsg=context.getString(R.string.notification_sent_fail,transInfo.mFileName);
      }
 else       if (transInfo.mDirection == BluetoothShare.DIRECTION_INBOUND) {
        toastMsg=context.getString(R.string.download_fail_line1);
      }
    }
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"" + toastMsg);
    }
    if (toastMsg != null) {
      Toast.makeText(context,toastMsg,Toast.LENGTH_SHORT).show();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {
    context.startService(new Intent(context,BluetoothOppService.class));
  }
 else   if (action.equals(BluetoothIntent.BLUETOOTH_STATE_CHANGED_ACTION)) {
    if (BluetoothDevice.BLUETOOTH_STATE_ON == intent.getIntExtra(BluetoothIntent.BLUETOOTH_STATE,BluetoothError.ERROR)) {
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"");
      }
      context.startService(new Intent(context,BluetoothOppService.class));
synchronized (this) {
        if (BluetoothOppManager.getInstance(context).mSendingFlag) {
          BluetoothOppManager.getInstance(context).mSendingFlag=false;
          Intent in1=new Intent(context,BluetoothDevicePickerActivity.class);
          in1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          context.startActivity(in1);
        }
      }
    }
  }
 else   if (action.equals(BluetoothShare.BLUETOOTH_DEVICE_SELECTED_ACTION)) {
    BluetoothOppManager mOppManager=BluetoothOppManager.getInstance(context);
    String btAddr=(String)intent.getStringExtra(""String_Node_Str"");
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"" + btAddr);
    }
    mOppManager.startTransfer(btAddr);
    String deviceName=mOppManager.getDeviceName(btAddr);
    String toastMsg;
    if (mOppManager.mMultipleFlag) {
      toastMsg=context.getString(R.string.bt_toast_5,Integer.toString(mOppManager.mfileNumInBatch),deviceName);
    }
 else {
      toastMsg=context.getString(R.string.bt_toast_4,deviceName);
    }
    Toast.makeText(context,toastMsg,Toast.LENGTH_SHORT).show();
  }
 else   if (action.equals(Constants.ACTION_INCOMING_FILE_CONFIRM)) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"");
    }
    Uri uri=intent.getData();
    Intent in=new Intent(context,BluetoothOppIncomingFileConfirmActivity.class);
    in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    in.setData(uri);
    context.startActivity(in);
    NotificationManager notMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
    if (notMgr != null) {
      notMgr.cancel((int)ContentUris.parseId(intent.getData()));
      Log.v(TAG,""String_Node_Str"");
    }
  }
 else   if (action.equals(BluetoothShare.INCOMING_FILE_CONFIRMATION_REQUEST_ACTION)) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"");
    }
    Toast.makeText(context,context.getString(R.string.incoming_file_toast_msg),Toast.LENGTH_SHORT).show();
  }
 else   if (action.equals(Constants.ACTION_OPEN) || action.equals(Constants.ACTION_LIST)) {
    if (Constants.LOGVV) {
      if (action.equals(Constants.ACTION_OPEN)) {
        Log.v(TAG,""String_Node_Str"" + intent.getData());
      }
 else {
        Log.v(TAG,""String_Node_Str"" + intent.getData());
      }
    }
    BluetoothOppTransferInfo transInfo=new BluetoothOppTransferInfo();
    Uri uri=intent.getData();
    transInfo=BluetoothOppUtility.queryRecord(context,uri);
    if (transInfo == null) {
      if (Constants.LOGVV) {
        Log.e(TAG,""String_Node_Str"");
      }
      return;
    }
    if (transInfo.mDirection == BluetoothShare.DIRECTION_INBOUND && BluetoothShare.isStatusSuccess(transInfo.mStatus)) {
      BluetoothOppUtility.openReceivedFile(context,transInfo.mFileName,transInfo.mFileType,transInfo.mTimeStamp);
      BluetoothOppUtility.updateVisibilityToHidden(context,uri);
    }
 else {
      Intent in=new Intent(context,BluetoothOppTransferActivity.class);
      in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      in.setData(uri);
      context.startActivity(in);
    }
    NotificationManager notMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
    if (notMgr != null) {
      notMgr.cancel((int)ContentUris.parseId(intent.getData()));
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
  }
 else   if (action.equals(Constants.ACTION_HIDE)) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"" + intent.getData());
    }
    Cursor cursor=context.getContentResolver().query(intent.getData(),null,null,null,null);
    if (cursor != null) {
      if (cursor.moveToFirst()) {
        int statusColumn=cursor.getColumnIndexOrThrow(BluetoothShare.STATUS);
        int status=cursor.getInt(statusColumn);
        int visibilityColumn=cursor.getColumnIndexOrThrow(BluetoothShare.VISIBILITY);
        int visibility=cursor.getInt(visibilityColumn);
        int userConfirmationColumn=cursor.getColumnIndexOrThrow(BluetoothShare.USER_CONFIRMATION);
        int userConfirmation=cursor.getInt(userConfirmationColumn);
        if ((BluetoothShare.isStatusCompleted(status) || (userConfirmation == BluetoothShare.USER_CONFIRMATION_PENDING)) && visibility == BluetoothShare.VISIBILITY_VISIBLE) {
          ContentValues values=new ContentValues();
          values.put(BluetoothShare.VISIBILITY,BluetoothShare.VISIBILITY_HIDDEN);
          context.getContentResolver().update(intent.getData(),values,null,null);
          if (Constants.LOGVV) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
      }
      cursor.close();
    }
  }
 else   if (action.equals(BluetoothShare.TRANSFER_COMPLETED_ACTION)) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"" + intent.getData());
    }
    String toastMsg=null;
    BluetoothOppTransferInfo transInfo=new BluetoothOppTransferInfo();
    transInfo=BluetoothOppUtility.queryRecord(context,intent.getData());
    if (transInfo == null) {
      if (Constants.LOGVV) {
        Log.e(TAG,""String_Node_Str"");
      }
      return;
    }
    if (BluetoothShare.isStatusSuccess(transInfo.mStatus)) {
      if (transInfo.mDirection == BluetoothShare.DIRECTION_OUTBOUND) {
        toastMsg=context.getString(R.string.notification_sent,transInfo.mFileName);
      }
 else       if (transInfo.mDirection == BluetoothShare.DIRECTION_INBOUND) {
        toastMsg=context.getString(R.string.notification_received,transInfo.mFileName);
      }
    }
 else     if (BluetoothShare.isStatusError(transInfo.mStatus)) {
      if (transInfo.mDirection == BluetoothShare.DIRECTION_OUTBOUND) {
        toastMsg=context.getString(R.string.notification_sent_fail,transInfo.mFileName);
      }
 else       if (transInfo.mDirection == BluetoothShare.DIRECTION_INBOUND) {
        toastMsg=context.getString(R.string.download_fail_line1);
      }
    }
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"" + toastMsg);
    }
    if (toastMsg != null) {
      Toast.makeText(context,toastMsg,Toast.LENGTH_SHORT).show();
    }
  }
}"
84969,"public synchronized boolean start(Handler callback){
  if (mSocketAcceptThread == null) {
    mCallback=callback;
    if (Constants.LOGV) {
      Log.v(TAG,""String_Node_Str"");
    }
    mSocketAcceptThread=new Thread(TAG){
      public void run(){
        if (Constants.LOGV) {
          Log.v(TAG,""String_Node_Str"");
        }
        if (Constants.USE_TCP_DEBUG) {
          ServerSocket mServerSocket=null;
          try {
            if (Constants.LOGVV) {
              Log.v(TAG,""String_Node_Str"" + Constants.TCP_DEBUG_PORT);
            }
            mServerSocket=new ServerSocket(Constants.TCP_DEBUG_PORT,1);
          }
 catch (          IOException e) {
            Log.e(TAG,""String_Node_Str"" + Constants.TCP_DEBUG_PORT);
            mInterrupted=true;
          }
          while (!mInterrupted) {
            try {
              mServerSocket.setSoTimeout(ACCEPT_WAIT_TIMEOUT);
              Socket clientSocket=mServerSocket.accept();
              if (clientSocket == null) {
                if (Constants.LOGVV) {
                  Log.v(TAG,""String_Node_Str"");
                }
              }
 else {
                if (Constants.LOGV) {
                  Log.v(TAG,""String_Node_Str"");
                }
                Log.d(TAG,""String_Node_Str"" + clientSocket.getRemoteSocketAddress());
                TestTcpTransport transport=new TestTcpTransport(clientSocket);
                Message msg=Message.obtain();
                msg.setTarget(mCallback);
                msg.what=MSG_INCOMING_BTOPP_CONNECTION;
                msg.obj=transport;
                msg.sendToTarget();
              }
            }
 catch (            SocketException e) {
              if (Constants.LOGVV) {
                Log.v(TAG,""String_Node_Str"" + e);
              }
            }
catch (            IOException e) {
              if (Constants.LOGVV) {
                Log.v(TAG,""String_Node_Str"" + e);
              }
            }
          }
          if (Constants.LOGV) {
            Log.v(TAG,""String_Node_Str"");
          }
          try {
            mServerSocket.close();
          }
 catch (          IOException e) {
            Log.e(TAG,""String_Node_Str"" + e);
          }
        }
 else {
          BluetoothServerSocket mServerSocket=null;
          boolean serverOK=true;
          if (Constants.LOGVV) {
            Log.v(TAG,""String_Node_Str"" + mBtOppRfcommChannel);
          }
          for (int i=0; i < CREATE_RETRY_TIME && !mInterrupted; i++) {
            try {
              mServerSocket=BluetoothServerSocket.listenUsingInsecureRfcommOn(mBtOppRfcommChannel);
            }
 catch (            IOException e1) {
              Log.d(TAG,""String_Node_Str"" + e1);
              serverOK=false;
            }
            if (!serverOK) {
synchronized (this) {
                try {
                  if (Constants.LOGVV) {
                    Log.v(TAG,""String_Node_Str"");
                  }
                  Thread.sleep(3000);
                }
 catch (                InterruptedException e) {
                  Log.e(TAG,""String_Node_Str"");
                  mInterrupted=true;
                }
              }
            }
 else {
              break;
            }
          }
          if (!serverOK) {
            Log.e(TAG,""String_Node_Str"" + CREATE_RETRY_TIME + ""String_Node_Str"");
            mInterrupted=true;
          }
          BluetoothSocket clientSocket;
          while (!mInterrupted) {
            try {
              clientSocket=mServerSocket.accept(ACCEPT_WAIT_TIMEOUT);
              if (Constants.LOGVV) {
                Log.v(TAG,""String_Node_Str"");
                Log.v(TAG,""String_Node_Str"" + clientSocket.getAddress());
              }
              BluetoothOppRfcommTransport transport=new BluetoothOppRfcommTransport(clientSocket);
              Message msg=Message.obtain();
              msg.setTarget(mCallback);
              msg.what=MSG_INCOMING_BTOPP_CONNECTION;
              msg.obj=transport;
              msg.sendToTarget();
            }
 catch (            IOException e) {
              if (Constants.LOGVV) {
                Log.v(TAG,""String_Node_Str"" + e);
              }
            }
          }
          try {
            if (mServerSocket != null) {
              if (Constants.LOGVV) {
                Log.v(TAG,""String_Node_Str"");
              }
              mServerSocket.close();
            }
          }
 catch (          IOException e) {
            Log.e(TAG,""String_Node_Str"" + e);
          }
          if (Constants.LOGV) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
      }
    }
;
    mInterrupted=false;
    mSocketAcceptThread.start();
  }
  return true;
}","public synchronized boolean start(Handler callback){
  if (mSocketAcceptThread == null) {
    mCallback=callback;
    if (Constants.LOGV) {
      Log.v(TAG,""String_Node_Str"");
    }
    mSocketAcceptThread=new Thread(TAG){
      public void run(){
        if (Constants.LOGV) {
          Log.v(TAG,""String_Node_Str"");
        }
        if (Constants.USE_TCP_DEBUG) {
          ServerSocket mServerSocket=null;
          try {
            if (Constants.LOGVV) {
              Log.v(TAG,""String_Node_Str"" + Constants.TCP_DEBUG_PORT);
            }
            mServerSocket=new ServerSocket(Constants.TCP_DEBUG_PORT,1);
          }
 catch (          IOException e) {
            Log.e(TAG,""String_Node_Str"" + Constants.TCP_DEBUG_PORT);
            mInterrupted=true;
          }
          while (!mInterrupted) {
            try {
              mServerSocket.setSoTimeout(ACCEPT_WAIT_TIMEOUT);
              Socket clientSocket=mServerSocket.accept();
              if (clientSocket == null) {
                if (Constants.LOGVV) {
                  Log.v(TAG,""String_Node_Str"");
                }
              }
 else {
                if (Constants.LOGV) {
                  Log.v(TAG,""String_Node_Str"");
                }
                Log.d(TAG,""String_Node_Str"" + clientSocket.getRemoteSocketAddress());
                TestTcpTransport transport=new TestTcpTransport(clientSocket);
                Message msg=Message.obtain();
                msg.setTarget(mCallback);
                msg.what=MSG_INCOMING_BTOPP_CONNECTION;
                msg.obj=transport;
                msg.sendToTarget();
              }
            }
 catch (            SocketException e) {
              if (Constants.LOGVV) {
                Log.v(TAG,""String_Node_Str"" + e);
              }
            }
catch (            IOException e) {
              if (Constants.LOGVV) {
                Log.v(TAG,""String_Node_Str"" + e);
              }
            }
          }
          if (Constants.LOGV) {
            Log.v(TAG,""String_Node_Str"");
          }
          try {
            mServerSocket.close();
          }
 catch (          IOException e) {
            Log.e(TAG,""String_Node_Str"" + e);
          }
        }
 else {
          BluetoothServerSocket mServerSocket=null;
          boolean serverOK=true;
          if (Constants.LOGVV) {
            Log.v(TAG,""String_Node_Str"" + mBtOppRfcommChannel);
          }
          for (int i=0; i < CREATE_RETRY_TIME && !mInterrupted; i++) {
            try {
              mServerSocket=BluetoothServerSocket.listenUsingInsecureRfcommOn(mBtOppRfcommChannel);
            }
 catch (            IOException e1) {
              Log.d(TAG,""String_Node_Str"" + e1);
              serverOK=false;
            }
            if (!serverOK) {
synchronized (this) {
                try {
                  if (Constants.LOGVV) {
                    Log.v(TAG,""String_Node_Str"");
                  }
                  Thread.sleep(3000);
                }
 catch (                InterruptedException e) {
                  Log.e(TAG,""String_Node_Str"");
                  mInterrupted=true;
                }
              }
            }
 else {
              break;
            }
          }
          if (!serverOK) {
            Log.e(TAG,""String_Node_Str"" + CREATE_RETRY_TIME + ""String_Node_Str"");
            mInterrupted=true;
          }
          BluetoothSocket clientSocket;
          while (!mInterrupted) {
            try {
              clientSocket=mServerSocket.accept(ACCEPT_WAIT_TIMEOUT);
              if (Constants.LOGVV) {
                Log.v(TAG,""String_Node_Str"");
                Log.v(TAG,""String_Node_Str"" + clientSocket.getAddress());
              }
              BluetoothOppRfcommTransport transport=new BluetoothOppRfcommTransport(clientSocket);
              Message msg=Message.obtain();
              msg.setTarget(mCallback);
              msg.what=MSG_INCOMING_BTOPP_CONNECTION;
              msg.obj=transport;
              msg.sendToTarget();
            }
 catch (            IOException e) {
              if (Constants.LOGVV) {
              }
            }
          }
          try {
            if (mServerSocket != null) {
              if (Constants.LOGVV) {
                Log.v(TAG,""String_Node_Str"");
              }
              mServerSocket.close();
            }
          }
 catch (          IOException e) {
            Log.e(TAG,""String_Node_Str"" + e);
          }
          if (Constants.LOGV) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
      }
    }
;
    mInterrupted=false;
    mSocketAcceptThread.start();
  }
  return true;
}"
84970,"public void run(){
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"");
  }
  if (Constants.USE_TCP_DEBUG) {
    ServerSocket mServerSocket=null;
    try {
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"" + Constants.TCP_DEBUG_PORT);
      }
      mServerSocket=new ServerSocket(Constants.TCP_DEBUG_PORT,1);
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + Constants.TCP_DEBUG_PORT);
      mInterrupted=true;
    }
    while (!mInterrupted) {
      try {
        mServerSocket.setSoTimeout(ACCEPT_WAIT_TIMEOUT);
        Socket clientSocket=mServerSocket.accept();
        if (clientSocket == null) {
          if (Constants.LOGVV) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
 else {
          if (Constants.LOGV) {
            Log.v(TAG,""String_Node_Str"");
          }
          Log.d(TAG,""String_Node_Str"" + clientSocket.getRemoteSocketAddress());
          TestTcpTransport transport=new TestTcpTransport(clientSocket);
          Message msg=Message.obtain();
          msg.setTarget(mCallback);
          msg.what=MSG_INCOMING_BTOPP_CONNECTION;
          msg.obj=transport;
          msg.sendToTarget();
        }
      }
 catch (      SocketException e) {
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + e);
        }
      }
catch (      IOException e) {
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + e);
        }
      }
    }
    if (Constants.LOGV) {
      Log.v(TAG,""String_Node_Str"");
    }
    try {
      mServerSocket.close();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + e);
    }
  }
 else {
    BluetoothServerSocket mServerSocket=null;
    boolean serverOK=true;
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"" + mBtOppRfcommChannel);
    }
    for (int i=0; i < CREATE_RETRY_TIME && !mInterrupted; i++) {
      try {
        mServerSocket=BluetoothServerSocket.listenUsingInsecureRfcommOn(mBtOppRfcommChannel);
      }
 catch (      IOException e1) {
        Log.d(TAG,""String_Node_Str"" + e1);
        serverOK=false;
      }
      if (!serverOK) {
synchronized (this) {
          try {
            if (Constants.LOGVV) {
              Log.v(TAG,""String_Node_Str"");
            }
            Thread.sleep(3000);
          }
 catch (          InterruptedException e) {
            Log.e(TAG,""String_Node_Str"");
            mInterrupted=true;
          }
        }
      }
 else {
        break;
      }
    }
    if (!serverOK) {
      Log.e(TAG,""String_Node_Str"" + CREATE_RETRY_TIME + ""String_Node_Str"");
      mInterrupted=true;
    }
    BluetoothSocket clientSocket;
    while (!mInterrupted) {
      try {
        clientSocket=mServerSocket.accept(ACCEPT_WAIT_TIMEOUT);
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"");
          Log.v(TAG,""String_Node_Str"" + clientSocket.getAddress());
        }
        BluetoothOppRfcommTransport transport=new BluetoothOppRfcommTransport(clientSocket);
        Message msg=Message.obtain();
        msg.setTarget(mCallback);
        msg.what=MSG_INCOMING_BTOPP_CONNECTION;
        msg.obj=transport;
        msg.sendToTarget();
      }
 catch (      IOException e) {
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + e);
        }
      }
    }
    try {
      if (mServerSocket != null) {
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"");
        }
        mServerSocket.close();
      }
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + e);
    }
    if (Constants.LOGV) {
      Log.v(TAG,""String_Node_Str"");
    }
  }
}","public void run(){
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"");
  }
  if (Constants.USE_TCP_DEBUG) {
    ServerSocket mServerSocket=null;
    try {
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"" + Constants.TCP_DEBUG_PORT);
      }
      mServerSocket=new ServerSocket(Constants.TCP_DEBUG_PORT,1);
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + Constants.TCP_DEBUG_PORT);
      mInterrupted=true;
    }
    while (!mInterrupted) {
      try {
        mServerSocket.setSoTimeout(ACCEPT_WAIT_TIMEOUT);
        Socket clientSocket=mServerSocket.accept();
        if (clientSocket == null) {
          if (Constants.LOGVV) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
 else {
          if (Constants.LOGV) {
            Log.v(TAG,""String_Node_Str"");
          }
          Log.d(TAG,""String_Node_Str"" + clientSocket.getRemoteSocketAddress());
          TestTcpTransport transport=new TestTcpTransport(clientSocket);
          Message msg=Message.obtain();
          msg.setTarget(mCallback);
          msg.what=MSG_INCOMING_BTOPP_CONNECTION;
          msg.obj=transport;
          msg.sendToTarget();
        }
      }
 catch (      SocketException e) {
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + e);
        }
      }
catch (      IOException e) {
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + e);
        }
      }
    }
    if (Constants.LOGV) {
      Log.v(TAG,""String_Node_Str"");
    }
    try {
      mServerSocket.close();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + e);
    }
  }
 else {
    BluetoothServerSocket mServerSocket=null;
    boolean serverOK=true;
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"" + mBtOppRfcommChannel);
    }
    for (int i=0; i < CREATE_RETRY_TIME && !mInterrupted; i++) {
      try {
        mServerSocket=BluetoothServerSocket.listenUsingInsecureRfcommOn(mBtOppRfcommChannel);
      }
 catch (      IOException e1) {
        Log.d(TAG,""String_Node_Str"" + e1);
        serverOK=false;
      }
      if (!serverOK) {
synchronized (this) {
          try {
            if (Constants.LOGVV) {
              Log.v(TAG,""String_Node_Str"");
            }
            Thread.sleep(3000);
          }
 catch (          InterruptedException e) {
            Log.e(TAG,""String_Node_Str"");
            mInterrupted=true;
          }
        }
      }
 else {
        break;
      }
    }
    if (!serverOK) {
      Log.e(TAG,""String_Node_Str"" + CREATE_RETRY_TIME + ""String_Node_Str"");
      mInterrupted=true;
    }
    BluetoothSocket clientSocket;
    while (!mInterrupted) {
      try {
        clientSocket=mServerSocket.accept(ACCEPT_WAIT_TIMEOUT);
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"");
          Log.v(TAG,""String_Node_Str"" + clientSocket.getAddress());
        }
        BluetoothOppRfcommTransport transport=new BluetoothOppRfcommTransport(clientSocket);
        Message msg=Message.obtain();
        msg.setTarget(mCallback);
        msg.what=MSG_INCOMING_BTOPP_CONNECTION;
        msg.obj=transport;
        msg.sendToTarget();
      }
 catch (      IOException e) {
        if (Constants.LOGVV) {
        }
      }
    }
    try {
      if (mServerSocket != null) {
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"");
        }
        mServerSocket.close();
      }
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + e);
    }
    if (Constants.LOGV) {
      Log.v(TAG,""String_Node_Str"");
    }
  }
}"
84971,"@Override public void onCreate(){
  super.onCreate();
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"");
  }
  mBluetooth=(BluetoothDevice)getSystemService(Context.BLUETOOTH_SERVICE);
  mPowerManager=(PowerManager)getSystemService(Context.POWER_SERVICE);
  mSocketListener=new BluetoothOppRfcommListener();
  mShares=Lists.newArrayList();
  mBatchs=Lists.newArrayList();
  mObserver=new BluetoothShareContentObserver();
  getContentResolver().registerContentObserver(BluetoothShare.CONTENT_URI,true,mObserver);
  mBatchId=1;
  mNotifier=new BluetoothOppNotification(this);
  mNotifier.mNotificationMgr.cancelAll();
  mNotifier.updateNotification();
  trimDatabase();
  IntentFilter filter=new IntentFilter(BluetoothIntent.REMOTE_DEVICE_DISCONNECTED_ACTION);
  filter.addAction(BluetoothIntent.BLUETOOTH_STATE_CHANGED_ACTION);
  registerReceiver(mBluetoothIntentReceiver,filter);
synchronized (BluetoothOppService.this) {
    if (mBluetooth == null) {
      Log.w(TAG,""String_Node_Str"");
    }
 else {
      startListenerDelayed();
    }
  }
  BluetoothOppPreference.getInstance(this).dump();
  updateFromProvider();
}","@Override public void onCreate(){
  super.onCreate();
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"");
  }
  mBluetooth=(BluetoothDevice)getSystemService(Context.BLUETOOTH_SERVICE);
  mPowerManager=(PowerManager)getSystemService(Context.POWER_SERVICE);
  mSocketListener=new BluetoothOppRfcommListener();
  mShares=Lists.newArrayList();
  mBatchs=Lists.newArrayList();
  mObserver=new BluetoothShareContentObserver();
  getContentResolver().registerContentObserver(BluetoothShare.CONTENT_URI,true,mObserver);
  mBatchId=1;
  mNotifier=new BluetoothOppNotification(this);
  mNotifier.mNotificationMgr.cancelAll();
  mNotifier.updateNotification();
  trimDatabase();
  IntentFilter filter=new IntentFilter(BluetoothIntent.REMOTE_DEVICE_DISCONNECTED_ACTION);
  filter.addAction(BluetoothIntent.BLUETOOTH_STATE_CHANGED_ACTION);
  registerReceiver(mBluetoothIntentReceiver,filter);
synchronized (BluetoothOppService.this) {
    if (mBluetooth == null) {
      Log.w(TAG,""String_Node_Str"");
    }
 else {
      startListenerDelayed();
    }
  }
  if (Constants.LOGVV) {
    BluetoothOppPreference.getInstance(this).dump();
  }
  updateFromProvider();
}"
84972,"private void markConnectionFailed(BluetoothSocket s){
  try {
    s.close();
  }
 catch (  IOException e) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"");
    }
  }
  mSessionHandler.obtainMessage(RFCOMM_ERROR).sendToTarget();
  return;
}","private void markConnectionFailed(BluetoothSocket s){
  try {
    s.close();
  }
 catch (  IOException e) {
    if (Constants.LOGVV) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  mSessionHandler.obtainMessage(RFCOMM_ERROR).sendToTarget();
  return;
}"
84973,"private void doOpushSdp(){
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"" + mBatch.mDestination);
  }
  mTimestamp=System.currentTimeMillis();
  String[] uuids=mBluetooth.getRemoteUuids(mBatch.mDestination);
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"" + mBatch.mDestination);
  }
  String savedUuid=null;
  boolean isOpush=false;
  if (uuids != null) {
    for (    String uuid : uuids) {
      UUID remoteUuid=UUID.fromString(uuid);
      Log.v(TAG,""String_Node_Str"" + remoteUuid);
      if (remoteUuid.equals(OPUSH_UUID128)) {
        savedUuid=uuid;
        isOpush=true;
      }
    }
    if (isOpush) {
      int channel=mBluetooth.getRemoteServiceChannel(mBatch.mDestination,savedUuid);
      if (Constants.LOGV) {
        Log.v(TAG,""String_Node_Str"" + channel + ""String_Node_Str""+ mBatch.mDestination);
      }
      if (channel != -1) {
        mConnectThread=new SocketConnectThread(mBatch.mDestination,channel);
        mConnectThread.start();
      }
      return;
    }
  }
  Log.v(TAG,""String_Node_Str"");
  Log.e(TAG,""String_Node_Str"");
  markBatchFailed(BluetoothShare.STATUS_CONNECTION_ERROR);
  mBatch.mStatus=Constants.BATCH_STATUS_FAILED;
}","private void doOpushSdp(){
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"" + mBatch.mDestination);
  }
  mTimestamp=System.currentTimeMillis();
  String[] uuids=mBluetooth.getRemoteUuids(mBatch.mDestination);
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"" + mBatch.mDestination);
  }
  String savedUuid=null;
  boolean isOpush=false;
  if (uuids != null) {
    for (    String uuid : uuids) {
      UUID remoteUuid=UUID.fromString(uuid);
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"" + remoteUuid);
      }
      if (remoteUuid.equals(OPUSH_UUID128)) {
        savedUuid=uuid;
        isOpush=true;
      }
    }
    if (isOpush) {
      int channel=mBluetooth.getRemoteServiceChannel(mBatch.mDestination,savedUuid);
      if (Constants.LOGV) {
        Log.v(TAG,""String_Node_Str"" + channel + ""String_Node_Str""+ mBatch.mDestination);
      }
      if (channel != -1) {
        mConnectThread=new SocketConnectThread(mBatch.mDestination,channel);
        mConnectThread.start();
      }
      return;
    }
  }
  Log.e(TAG,""String_Node_Str"");
  markBatchFailed(BluetoothShare.STATUS_CONNECTION_ERROR);
  mBatch.mStatus=Constants.BATCH_STATUS_FAILED;
}"
84974,"private void updateCompletedNotification(){
  Cursor cursor=mContext.getContentResolver().query(BluetoothShare.CONTENT_URI,null,WHERE_COMPLETED,null,BluetoothShare._ID);
  if (cursor == null) {
    return;
  }
  for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
    int timeStamp=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP));
    int dir=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.DIRECTION));
    int id=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare._ID));
    int status=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.STATUS));
    String fileName=cursor.getString(cursor.getColumnIndexOrThrow(BluetoothShare._DATA));
    if (fileName == null) {
      fileName=cursor.getString(cursor.getColumnIndexOrThrow(BluetoothShare.FILENAME_HINT));
    }
    if (fileName == null) {
      fileName=mContext.getString(R.string.unknown_file);
    }
    String title;
    String caption;
    Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + id);
    Notification n=new Notification();
    if (BluetoothShare.isStatusError(status)) {
      if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
        title=mContext.getString(R.string.notification_sent_fail).replace(""String_Node_Str"",fileName);
      }
 else {
        title=mContext.getString(R.string.notification_received_fail).replace(""String_Node_Str"",fileName);
      }
      caption=mContext.getString(R.string.download_fail_line3).replace(""String_Node_Str"",BluetoothOppUtility.getStatusDescription(mContext,status));
      n.icon=android.R.drawable.stat_notify_error;
    }
 else {
      if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
        title=mContext.getString(R.string.notification_sent).replace(""String_Node_Str"",fileName);
        n.icon=android.R.drawable.stat_sys_upload_done;
      }
 else {
        title=mContext.getString(R.string.notification_received).replace(""String_Node_Str"",fileName);
        n.icon=android.R.drawable.stat_sys_download_done;
      }
      caption=mContext.getString(R.string.notification_sent_complete);
    }
    Intent intent=new Intent(Constants.ACTION_OPEN);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    n.when=timeStamp;
    mNotificationMgr.notify(id,n);
  }
  cursor.close();
}","private void updateCompletedNotification(){
  Cursor cursor=mContext.getContentResolver().query(BluetoothShare.CONTENT_URI,null,WHERE_COMPLETED,null,BluetoothShare._ID);
  if (cursor == null) {
    return;
  }
  for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
    int timeStamp=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP));
    int dir=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.DIRECTION));
    int id=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare._ID));
    int status=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.STATUS));
    String fileName=cursor.getString(cursor.getColumnIndexOrThrow(BluetoothShare.FILENAME_HINT));
    if (fileName == null) {
      fileName=mContext.getString(R.string.unknown_file);
    }
    String title;
    String caption;
    Uri contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + id);
    Notification n=new Notification();
    if (BluetoothShare.isStatusError(status)) {
      if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
        title=mContext.getString(R.string.notification_sent_fail).replace(""String_Node_Str"",fileName);
      }
 else {
        title=mContext.getString(R.string.notification_received_fail).replace(""String_Node_Str"",fileName);
      }
      caption=mContext.getString(R.string.download_fail_line3).replace(""String_Node_Str"",BluetoothOppUtility.getStatusDescription(mContext,status));
      n.icon=android.R.drawable.stat_notify_error;
    }
 else {
      if (dir == BluetoothShare.DIRECTION_OUTBOUND) {
        title=mContext.getString(R.string.notification_sent).replace(""String_Node_Str"",fileName);
        n.icon=android.R.drawable.stat_sys_upload_done;
      }
 else {
        title=mContext.getString(R.string.notification_received).replace(""String_Node_Str"",fileName);
        n.icon=android.R.drawable.stat_sys_download_done;
      }
      caption=mContext.getString(R.string.notification_sent_complete);
    }
    Intent intent=new Intent(Constants.ACTION_OPEN);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    n.when=timeStamp;
    mNotificationMgr.notify(id,n);
  }
  cursor.close();
}"
84975,"@Override public int onPut(Operation op){
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"" + op.toString());
  }
  HeaderSet request;
  String name, mimeType;
  Long length;
  int obexResponse=ResponseCodes.OBEX_HTTP_OK;
  if (mAccepted == BluetoothShare.USER_CONFIRMATION_DENIED) {
    return ResponseCodes.OBEX_HTTP_FORBIDDEN;
  }
  try {
    boolean pre_reject=false;
    request=op.getReceivedHeader();
    if (Constants.LOGVV) {
      logHeader(request);
    }
    name=(String)request.getHeader(HeaderSet.NAME);
    length=(Long)request.getHeader(HeaderSet.LENGTH);
    mimeType=(String)request.getHeader(HeaderSet.TYPE);
    if (length == 0) {
      if (Constants.LOGV) {
        Log.w(TAG,""String_Node_Str"");
      }
      pre_reject=true;
      obexResponse=ResponseCodes.OBEX_HTTP_LENGTH_REQUIRED;
    }
    if (name == null || name.equals(""String_Node_Str"")) {
      if (Constants.LOGV) {
        Log.w(TAG,""String_Node_Str"");
      }
      pre_reject=true;
      obexResponse=ResponseCodes.OBEX_HTTP_BAD_REQUEST;
    }
    if (!pre_reject) {
      String extension, type;
      int dotIndex=name.indexOf('.');
      if (dotIndex < 0) {
        if (Constants.LOGV) {
          Log.w(TAG,""String_Node_Str"");
        }
        pre_reject=true;
        obexResponse=ResponseCodes.OBEX_HTTP_BAD_REQUEST;
      }
 else {
        extension=name.substring(dotIndex + 1);
        MimeTypeMap map=MimeTypeMap.getSingleton();
        type=map.getMimeTypeFromExtension(extension);
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + extension + ""String_Node_Str""+ mimeType);
        }
        if (type != null) {
          mimeType=type;
        }
 else {
          if (mimeType == null) {
            if (Constants.LOGV) {
              Log.w(TAG,""String_Node_Str"");
            }
            pre_reject=true;
            obexResponse=ResponseCodes.OBEX_HTTP_BAD_REQUEST;
          }
        }
        if (mimeType != null) {
          mimeType=mimeType.toLowerCase();
        }
      }
    }
    if (!pre_reject && (mimeType == null || Constants.mimeTypeMatches(mimeType,Constants.UNACCEPTABLE_SHARE_INBOUND_TYPES))) {
      if (Constants.LOGV) {
        Log.w(TAG,""String_Node_Str"");
      }
      pre_reject=true;
      obexResponse=ResponseCodes.OBEX_HTTP_UNSUPPORTED_TYPE;
    }
    if (pre_reject && obexResponse != ResponseCodes.OBEX_HTTP_OK) {
      return obexResponse;
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + e);
    return ResponseCodes.OBEX_HTTP_BAD_REQUEST;
  }
  ContentValues values=new ContentValues();
  values.put(BluetoothShare.FILENAME_HINT,name);
  values.put(BluetoothShare.TOTAL_BYTES,length.intValue());
  values.put(BluetoothShare.MIMETYPE,mimeType);
  if (mTransport instanceof BluetoothOppRfcommTransport) {
    String a=((BluetoothOppRfcommTransport)mTransport).getRemoteAddress();
    values.put(BluetoothShare.DESTINATION,a);
  }
 else {
    values.put(BluetoothShare.DESTINATION,""String_Node_Str"");
  }
  values.put(BluetoothShare.DIRECTION,BluetoothShare.DIRECTION_INBOUND);
  values.put(BluetoothShare.TIMESTAMP,mTimestamp);
  boolean needConfirm=true;
  if (!mServerBlocking) {
    values.put(BluetoothShare.USER_CONFIRMATION,BluetoothShare.USER_CONFIRMATION_AUTO_CONFIRMED);
    needConfirm=false;
  }
  Uri contentUri=mContext.getContentResolver().insert(BluetoothShare.CONTENT_URI,values);
  mLocalShareInfoId=Integer.parseInt(contentUri.getPathSegments().get(1));
  if (needConfirm) {
    Intent in=new Intent(BluetoothShare.INCOMING_FILE_CONFIRMATION_REQUEST_ACTION);
    in.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    mContext.sendBroadcast(in);
  }
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"" + contentUri);
    Log.v(TAG,""String_Node_Str"" + mLocalShareInfoId);
  }
  mServerBlocking=true;
synchronized (this) {
    try {
      boolean msgSent=false;
      while (mServerBlocking) {
        wait(1000);
        if (mCallback != null && !msgSent) {
          mCallback.sendMessageDelayed(mCallback.obtainMessage(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT),BluetoothOppObexSession.SESSION_TIMEOUT);
          msgSent=true;
          if (Constants.LOGVV) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
      }
    }
 catch (    InterruptedException e) {
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
  }
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"");
  }
  if (mCallback != null) {
    mCallback.removeMessages(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT);
  }
  if (mInfo.mId != mLocalShareInfoId) {
    Log.e(TAG,""String_Node_Str"");
  }
  mAccepted=mInfo.mConfirm;
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"" + mAccepted);
  }
  int status=BluetoothShare.STATUS_SUCCESS;
  if (mAccepted == BluetoothShare.USER_CONFIRMATION_CONFIRMED || mAccepted == BluetoothShare.USER_CONFIRMATION_CONFIRMED) {
    if (mFileInfo.mFileName == null) {
      status=mFileInfo.mStatus;
      mInfo.mStatus=mFileInfo.mStatus;
      Constants.updateShareStatus(mContext,mInfo.mId,status);
      obexResponse=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
    }
    if (mFileInfo.mFileName != null) {
      ContentValues updateValues=new ContentValues();
      contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + mInfo.mId);
      updateValues.put(BluetoothShare._DATA,mFileInfo.mFileName);
      updateValues.put(BluetoothShare.STATUS,BluetoothShare.STATUS_RUNNING);
      mContext.getContentResolver().update(contentUri,updateValues,null,null);
      status=receiveFile(mFileInfo,op);
      if (status != BluetoothShare.STATUS_SUCCESS) {
        obexResponse=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
      }
      Constants.updateShareStatus(mContext,mInfo.mId,status);
    }
    if (status == BluetoothShare.STATUS_SUCCESS) {
      Message msg=Message.obtain(mCallback,BluetoothOppObexSession.MSG_SHARE_COMPLETE);
      msg.obj=mInfo;
      msg.sendToTarget();
    }
 else {
      Message msg=Message.obtain(mCallback,BluetoothOppObexSession.MSG_SESSION_ERROR);
      msg.obj=mInfo;
      msg.sendToTarget();
    }
  }
 else   if (mAccepted == BluetoothShare.USER_CONFIRMATION_DENIED || mAccepted == BluetoothShare.USER_CONFIRMATION_TIMEOUT) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"");
    }
    status=BluetoothShare.STATUS_FORBIDDEN;
    Constants.updateShareStatus(mContext,mInfo.mId,status);
    obexResponse=ResponseCodes.OBEX_HTTP_FORBIDDEN;
    Message msg=Message.obtain(mCallback);
    msg.what=BluetoothOppObexSession.MSG_SHARE_INTERRUPTED;
    msg.obj=mInfo;
    msg.sendToTarget();
  }
  return obexResponse;
}","@Override public int onPut(Operation op){
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"" + op.toString());
  }
  HeaderSet request;
  String name, mimeType;
  Long length;
  int obexResponse=ResponseCodes.OBEX_HTTP_OK;
  if (mAccepted == BluetoothShare.USER_CONFIRMATION_DENIED) {
    return ResponseCodes.OBEX_HTTP_FORBIDDEN;
  }
  try {
    boolean pre_reject=false;
    request=op.getReceivedHeader();
    if (Constants.LOGVV) {
      logHeader(request);
    }
    name=(String)request.getHeader(HeaderSet.NAME);
    length=(Long)request.getHeader(HeaderSet.LENGTH);
    mimeType=(String)request.getHeader(HeaderSet.TYPE);
    if (length == 0) {
      if (Constants.LOGV) {
        Log.w(TAG,""String_Node_Str"");
      }
      pre_reject=true;
      obexResponse=ResponseCodes.OBEX_HTTP_LENGTH_REQUIRED;
    }
    if (name == null || name.equals(""String_Node_Str"")) {
      if (Constants.LOGV) {
        Log.w(TAG,""String_Node_Str"");
      }
      pre_reject=true;
      obexResponse=ResponseCodes.OBEX_HTTP_BAD_REQUEST;
    }
    if (!pre_reject) {
      String extension, type;
      int dotIndex=name.indexOf('.');
      if (dotIndex < 0) {
        if (Constants.LOGV) {
          Log.w(TAG,""String_Node_Str"");
        }
        pre_reject=true;
        obexResponse=ResponseCodes.OBEX_HTTP_BAD_REQUEST;
      }
 else {
        extension=name.substring(dotIndex + 1);
        MimeTypeMap map=MimeTypeMap.getSingleton();
        type=map.getMimeTypeFromExtension(extension);
        if (Constants.LOGVV) {
          Log.v(TAG,""String_Node_Str"" + extension + ""String_Node_Str""+ mimeType);
        }
        if (type != null) {
          mimeType=type;
        }
 else {
          if (mimeType == null) {
            if (Constants.LOGV) {
              Log.w(TAG,""String_Node_Str"");
            }
            pre_reject=true;
            obexResponse=ResponseCodes.OBEX_HTTP_BAD_REQUEST;
          }
        }
        if (mimeType != null) {
          mimeType=mimeType.toLowerCase();
        }
      }
    }
    if (!pre_reject && (mimeType == null || Constants.mimeTypeMatches(mimeType,Constants.UNACCEPTABLE_SHARE_INBOUND_TYPES))) {
      if (Constants.LOGV) {
        Log.w(TAG,""String_Node_Str"");
      }
      pre_reject=true;
      obexResponse=ResponseCodes.OBEX_HTTP_UNSUPPORTED_TYPE;
    }
    if (pre_reject && obexResponse != ResponseCodes.OBEX_HTTP_OK) {
      return obexResponse;
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + e);
    return ResponseCodes.OBEX_HTTP_BAD_REQUEST;
  }
  ContentValues values=new ContentValues();
  values.put(BluetoothShare.FILENAME_HINT,name);
  values.put(BluetoothShare.TOTAL_BYTES,length.intValue());
  values.put(BluetoothShare.MIMETYPE,mimeType);
  if (mTransport instanceof BluetoothOppRfcommTransport) {
    String a=((BluetoothOppRfcommTransport)mTransport).getRemoteAddress();
    values.put(BluetoothShare.DESTINATION,a);
  }
 else {
    values.put(BluetoothShare.DESTINATION,""String_Node_Str"");
  }
  values.put(BluetoothShare.DIRECTION,BluetoothShare.DIRECTION_INBOUND);
  values.put(BluetoothShare.TIMESTAMP,mTimestamp);
  boolean needConfirm=true;
  if (!mServerBlocking) {
    values.put(BluetoothShare.USER_CONFIRMATION,BluetoothShare.USER_CONFIRMATION_AUTO_CONFIRMED);
    needConfirm=false;
  }
  Uri contentUri=mContext.getContentResolver().insert(BluetoothShare.CONTENT_URI,values);
  mLocalShareInfoId=Integer.parseInt(contentUri.getPathSegments().get(1));
  if (needConfirm) {
    Intent in=new Intent(BluetoothShare.INCOMING_FILE_CONFIRMATION_REQUEST_ACTION);
    in.setClassName(Constants.THIS_PACKAGE_NAME,BluetoothOppReceiver.class.getName());
    mContext.sendBroadcast(in);
  }
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"" + contentUri);
    Log.v(TAG,""String_Node_Str"" + mLocalShareInfoId);
  }
  mServerBlocking=true;
  boolean msgSent=false;
synchronized (this) {
    try {
      while (mServerBlocking) {
        wait(1000);
        if (mCallback != null && !msgSent) {
          mCallback.sendMessageDelayed(mCallback.obtainMessage(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT),BluetoothOppObexSession.SESSION_TIMEOUT);
          msgSent=true;
          if (Constants.LOGVV) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
      }
    }
 catch (    InterruptedException e) {
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
  }
  if (Constants.LOGV) {
    Log.v(TAG,""String_Node_Str"");
  }
  if (mCallback != null && msgSent) {
    mCallback.removeMessages(BluetoothOppObexSession.MSG_CONNECT_TIMEOUT);
  }
  if (mInfo.mId != mLocalShareInfoId) {
    Log.e(TAG,""String_Node_Str"");
  }
  mAccepted=mInfo.mConfirm;
  if (Constants.LOGVV) {
    Log.v(TAG,""String_Node_Str"" + mAccepted);
  }
  int status=BluetoothShare.STATUS_SUCCESS;
  if (mAccepted == BluetoothShare.USER_CONFIRMATION_CONFIRMED || mAccepted == BluetoothShare.USER_CONFIRMATION_AUTO_CONFIRMED) {
    if (mFileInfo.mFileName == null) {
      status=mFileInfo.mStatus;
      mInfo.mStatus=mFileInfo.mStatus;
      Constants.updateShareStatus(mContext,mInfo.mId,status);
      obexResponse=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
    }
    if (mFileInfo.mFileName != null) {
      ContentValues updateValues=new ContentValues();
      contentUri=Uri.parse(BluetoothShare.CONTENT_URI + ""String_Node_Str"" + mInfo.mId);
      updateValues.put(BluetoothShare._DATA,mFileInfo.mFileName);
      updateValues.put(BluetoothShare.STATUS,BluetoothShare.STATUS_RUNNING);
      mContext.getContentResolver().update(contentUri,updateValues,null,null);
      status=receiveFile(mFileInfo,op);
      if (status != BluetoothShare.STATUS_SUCCESS) {
        obexResponse=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
      }
      Constants.updateShareStatus(mContext,mInfo.mId,status);
    }
    if (status == BluetoothShare.STATUS_SUCCESS) {
      Message msg=Message.obtain(mCallback,BluetoothOppObexSession.MSG_SHARE_COMPLETE);
      msg.obj=mInfo;
      msg.sendToTarget();
    }
 else {
      Message msg=Message.obtain(mCallback,BluetoothOppObexSession.MSG_SESSION_ERROR);
      msg.obj=mInfo;
      msg.sendToTarget();
    }
  }
 else   if (mAccepted == BluetoothShare.USER_CONFIRMATION_DENIED || mAccepted == BluetoothShare.USER_CONFIRMATION_TIMEOUT) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"");
    }
    status=BluetoothShare.STATUS_FORBIDDEN;
    Constants.updateShareStatus(mContext,mInfo.mId,status);
    obexResponse=ResponseCodes.OBEX_HTTP_FORBIDDEN;
    Message msg=Message.obtain(mCallback);
    msg.what=BluetoothOppObexSession.MSG_SHARE_INTERRUPTED;
    msg.obj=mInfo;
    msg.sendToTarget();
  }
  return obexResponse;
}"
84976,"private void updateShare(Cursor cursor,int arrayPos,boolean userAccepted){
  BluetoothOppShareInfo info=mShares.get(arrayPos);
  int statusColumn=cursor.getColumnIndexOrThrow(BluetoothShare.STATUS);
  info.mId=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare._ID));
  info.mUri=stringFromCursor(info.mUri,cursor,BluetoothShare.URI);
  info.mHint=stringFromCursor(info.mHint,cursor,BluetoothShare.FILENAME_HINT);
  info.mFilename=stringFromCursor(info.mFilename,cursor,BluetoothShare._DATA);
  info.mMimetype=stringFromCursor(info.mMimetype,cursor,BluetoothShare.MIMETYPE);
  info.mDirection=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.DIRECTION));
  info.mDestination=stringFromCursor(info.mDestination,cursor,BluetoothShare.DESTINATION);
  int newVisibility=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.VISIBILITY));
  boolean confirmed=false;
  int newConfirm=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.USER_CONFIRMATION));
  if (info.mVisibility == BluetoothShare.VISIBILITY_VISIBLE && newVisibility != BluetoothShare.VISIBILITY_VISIBLE && (BluetoothShare.isStatusCompleted(info.mStatus) || newConfirm == BluetoothShare.USER_CONFIRMATION_PENDING)) {
    mNotifier.mNotificationMgr.cancel(info.mId);
  }
  info.mVisibility=newVisibility;
  if (info.mConfirm == BluetoothShare.USER_CONFIRMATION_PENDING && newConfirm != BluetoothShare.USER_CONFIRMATION_PENDING) {
    confirmed=true;
  }
  info.mConfirm=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.USER_CONFIRMATION));
  int newStatus=cursor.getInt(statusColumn);
  if (!BluetoothShare.isStatusCompleted(info.mStatus) && BluetoothShare.isStatusCompleted(newStatus)) {
    mNotifier.mNotificationMgr.cancel(info.mId);
  }
  info.mStatus=newStatus;
  info.mTotalBytes=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.TOTAL_BYTES));
  info.mCurrentBytes=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.CURRENT_BYTES));
  info.mTimestamp=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP));
  info.mMediaScanned=(cursor.getInt(cursor.getColumnIndexOrThrow(Constants.MEDIA_SCANNED)) != Constants.MEDIA_SCANNED_NOT_SCANNED);
  if (confirmed) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"" + info.mId + ""String_Node_Str"");
    }
    if (info.isReadyToStart()) {
      BluetoothOppBatch newBatch=new BluetoothOppBatch(this,info);
      newBatch.mId=mBatchId;
      mBatchId++;
      mBatchs.add(newBatch);
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"" + newBatch.mId + ""String_Node_Str""+ info.mId);
      }
      if (mServerSession == null) {
        Log.e(TAG,""String_Node_Str"");
        Constants.updateShareStatus(this,info.mId,BluetoothShare.STATUS_UNKNOWN_ERROR);
      }
 else {
        mServerTransfer=new BluetoothOppTransfer(this,mPowerManager,newBatch,mServerSession);
        mServerTransfer.setConfirmed();
      }
    }
  }
  int i=findBatchWithTimeStamp(info.mTimestamp);
  if (i != -1) {
    BluetoothOppBatch batch=mBatchs.get(i);
    if (batch.mStatus == Constants.BATCH_STATUS_FINISHED || batch.mStatus == Constants.BATCH_STATUS_FAILED) {
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"" + batch.mId + ""String_Node_Str"");
      }
      if (batch.mDirection == BluetoothShare.DIRECTION_OUTBOUND) {
        if (mTransfer == null) {
          Log.e(TAG,""String_Node_Str"");
        }
 else         if (batch.mId == mTransfer.getBatchId()) {
          mTransfer.stop();
        }
 else {
          Log.e(TAG,""String_Node_Str"" + batch.mId + ""String_Node_Str""+ mTransfer.getBatchId());
        }
      }
 else {
        if (mServerTransfer == null) {
          Log.e(TAG,""String_Node_Str"");
        }
 else         if (batch.mId == mServerTransfer.getBatchId()) {
          mServerTransfer.stop();
        }
 else {
          Log.e(TAG,""String_Node_Str"" + batch.mId + ""String_Node_Str""+ mServerTransfer.getBatchId());
        }
      }
      removeBatch(batch);
    }
  }
}","private void updateShare(Cursor cursor,int arrayPos,boolean userAccepted){
  BluetoothOppShareInfo info=mShares.get(arrayPos);
  int statusColumn=cursor.getColumnIndexOrThrow(BluetoothShare.STATUS);
  info.mId=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare._ID));
  info.mUri=stringFromCursor(info.mUri,cursor,BluetoothShare.URI);
  info.mHint=stringFromCursor(info.mHint,cursor,BluetoothShare.FILENAME_HINT);
  info.mFilename=stringFromCursor(info.mFilename,cursor,BluetoothShare._DATA);
  info.mMimetype=stringFromCursor(info.mMimetype,cursor,BluetoothShare.MIMETYPE);
  info.mDirection=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.DIRECTION));
  info.mDestination=stringFromCursor(info.mDestination,cursor,BluetoothShare.DESTINATION);
  int newVisibility=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.VISIBILITY));
  boolean confirmed=false;
  int newConfirm=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.USER_CONFIRMATION));
  if (info.mVisibility == BluetoothShare.VISIBILITY_VISIBLE && newVisibility != BluetoothShare.VISIBILITY_VISIBLE && (BluetoothShare.isStatusCompleted(info.mStatus) || newConfirm == BluetoothShare.USER_CONFIRMATION_PENDING)) {
    mNotifier.mNotificationMgr.cancel(info.mId);
  }
  info.mVisibility=newVisibility;
  if (info.mConfirm == BluetoothShare.USER_CONFIRMATION_PENDING && newConfirm != BluetoothShare.USER_CONFIRMATION_PENDING) {
    confirmed=true;
  }
  info.mConfirm=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.USER_CONFIRMATION));
  int newStatus=cursor.getInt(statusColumn);
  if (!BluetoothShare.isStatusCompleted(info.mStatus) && BluetoothShare.isStatusCompleted(newStatus)) {
    mNotifier.mNotificationMgr.cancel(info.mId);
  }
  info.mStatus=newStatus;
  info.mTotalBytes=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.TOTAL_BYTES));
  info.mCurrentBytes=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.CURRENT_BYTES));
  info.mTimestamp=cursor.getInt(cursor.getColumnIndexOrThrow(BluetoothShare.TIMESTAMP));
  info.mMediaScanned=(cursor.getInt(cursor.getColumnIndexOrThrow(Constants.MEDIA_SCANNED)) != Constants.MEDIA_SCANNED_NOT_SCANNED);
  if (confirmed) {
    if (Constants.LOGVV) {
      Log.v(TAG,""String_Node_Str"" + info.mId + ""String_Node_Str"");
    }
    int i=findBatchWithTimeStamp(info.mTimestamp);
    BluetoothOppBatch batch=mBatchs.get(i);
    if (batch.mId == mServerTransfer.getBatchId()) {
      mServerTransfer.setConfirmed();
    }
  }
  int i=findBatchWithTimeStamp(info.mTimestamp);
  if (i != -1) {
    BluetoothOppBatch batch=mBatchs.get(i);
    if (batch.mStatus == Constants.BATCH_STATUS_FINISHED || batch.mStatus == Constants.BATCH_STATUS_FAILED) {
      if (Constants.LOGVV) {
        Log.v(TAG,""String_Node_Str"" + batch.mId + ""String_Node_Str"");
      }
      if (batch.mDirection == BluetoothShare.DIRECTION_OUTBOUND) {
        if (mTransfer == null) {
          Log.e(TAG,""String_Node_Str"");
        }
 else         if (batch.mId == mTransfer.getBatchId()) {
          mTransfer.stop();
        }
 else {
          Log.e(TAG,""String_Node_Str"" + batch.mId + ""String_Node_Str""+ mTransfer.getBatchId());
        }
      }
 else {
        if (mServerTransfer == null) {
          Log.e(TAG,""String_Node_Str"");
        }
 else         if (batch.mId == mServerTransfer.getBatchId()) {
          mServerTransfer.stop();
        }
 else {
          Log.e(TAG,""String_Node_Str"" + batch.mId + ""String_Node_Str""+ mServerTransfer.getBatchId());
        }
      }
      removeBatch(batch);
    }
  }
}"
84977,"/** 
 * Perform lexical analysis on the file given by filename
 * @param filename Name of source file to be parsed
 */
public Lexer(String filename){
  try {
    Scanner in=new Scanner(new File(filename));
    System.out.println(parseStm(in.nextLine().replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
    System.exit(-3);
  }
}","/** 
 * Perform lexical analysis on the file given by filename
 * @param filename Name of source file to be parsed
 */
public Lexer(String filename){
  try {
    Scanner in=new Scanner(new File(filename));
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(parseStm(in.nextLine().replaceAll(""String_Node_Str"",""String_Node_Str"")));
    System.out.println(""String_Node_Str"");
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
    System.exit(-3);
  }
}"
84978,"public Assign(Object O1,Object O2){
  o1=Lexer.parseExp(O1);
  o2=Lexer.parseStm(O2);
}","public Assign(String O1,Object O2){
  o1=O1;
  o2=Lexer.parseStm(O2);
}"
84979,"/** 
 * Perform lexical analysis on the file given by filename
 * @param filename Name of source file to be parsed
 */
public Lexer(String filename){
  try {
    Scanner in=new Scanner(new File(filename));
    System.out.println(parseStm(in.nextLine().replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
    System.exit(-3);
  }
}","/** 
 * Perform lexical analysis on the file given by filename
 * @param filename Name of source file to be parsed
 */
public Lexer(String filename){
  try {
    Scanner in=new Scanner(new File(filename));
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(parseStm(in.nextLine().replaceAll(""String_Node_Str"",""String_Node_Str"")));
    System.out.println(""String_Node_Str"");
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
    System.exit(-3);
  }
}"
84980,"public Assign(Object O1,Object O2){
  o1=Lexer.parseExp(O1);
  o2=Lexer.parseStm(O2);
}","public Assign(String O1,Object O2){
  o1=O1;
  o2=Lexer.parseStm(O2);
}"
84981,"public int[] solution(int N,int[] A){
  int[] result=new int[N];
  int maxValue=0;
  for (int k=0; k < A.length; k++) {
    if (A[k] >= 1 && A[k] <= N) {
      result[A[k] - 1]++;
      if (result[A[k] - 1] > maxValue) {
        maxValue=result[A[k] - 1];
      }
    }
 else     if (A[k] == (N + 1)) {
      Arrays.fill(result,maxValue);
    }
    for (int i=0; i < result.length; i++) {
      System.out.print(result[i] + ""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
  }
  return result;
}","public int[] solution(int N,int[] A){
  int[] result=new int[N];
  int currentMax=0, maxCounter=0;
  for (int k=0; k < A.length; k++) {
    if (A[k] >= 1 && A[k] <= N) {
      if (result[A[k] - 1] < maxCounter) {
        result[A[k] - 1]=maxCounter;
      }
      result[A[k] - 1]++;
      if (result[A[k] - 1] > currentMax) {
        currentMax=result[A[k] - 1];
      }
    }
 else     if (A[k] == (N + 1)) {
      maxCounter=currentMax;
    }
  }
  for (int i=0; i < result.length; i++) {
    if (result[i] < maxCounter) {
      result[i]=maxCounter;
    }
  }
  return result;
}"
84982,"public static void main(String[] args){
  new MaxCounters().solution(5,new int[]{3,4,4,6,1,4,4});
}","public static void main(String[] args){
  new MaxCounters().solution(5,new int[]{3,4,4,6,1,4,4});
  new MaxCounters().solution(5,new int[]{3,4,4,6,1,4,6});
}"
84983,"public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 5);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 6);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 8);
    }
  }
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 1);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 3);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 6);
    }
  }
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (player.getItemInHand().getDurability() > 0) {
      if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
        if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
          mcm.getInstance().removeDiamond(player);
          player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
          mcm.getInstance().removeIron(player);
          player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() >= 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}","public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50 && mcUsers.getProfile(player).getHerbalismInt() < 150) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 150) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 250) {
      player.setHealth(player.getHealth() + 5);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 400) {
      player.setHealth(player.getHealth() + 6);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 750) {
      player.setHealth(player.getHealth() + 8);
    }
  }
  if (is.getTypeId() == 282) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50 && mcUsers.getProfile(player).getHerbalismInt() < 150) {
      player.setHealth(player.getHealth() + 1);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 150) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 250) {
      player.setHealth(player.getHealth() + 3);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 400) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 750) {
      player.setHealth(player.getHealth() + 6);
    }
  }
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (player.getItemInHand().getDurability() > 0) {
      if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
        if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
          mcm.getInstance().removeDiamond(player);
          player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
          mcm.getInstance().removeIron(player);
          player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
      }
      if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
        if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
          is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
          mcm.getInstance().removeIron(player);
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() >= 50) {
          is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
          mcm.getInstance().removeDiamond(player);
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
          player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
          if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))           player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
          if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))           player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
          player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
  }
}"
84984,"public void removeDiamond(Player player){
  ItemStack[] inventory=player.getInventory().getContents();
  for (  ItemStack x : inventory) {
    if (x.getTypeId() == 264) {
      if (x.getAmount() == 1) {
        x.setTypeId(0);
        x.setAmount(0);
        player.getInventory().setContents(inventory);
      }
 else {
        x.setAmount(x.getAmount() - 1);
        player.getInventory().setContents(inventory);
      }
    }
  }
}","public void removeDiamond(Player player){
  ItemStack[] inventory=player.getInventory().getContents();
  for (  ItemStack x : inventory) {
    if (x.getTypeId() == 264) {
      if (x.getAmount() == 1) {
        x.setTypeId(0);
        x.setAmount(0);
        player.getInventory().setContents(inventory);
      }
 else {
        x.setAmount(x.getAmount() - 1);
        player.getInventory().setContents(inventory);
      }
      return;
    }
  }
}"
84985,"public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 5);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 6);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 8);
    }
  }
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 1);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 3);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 6);
    }
  }
  if (block != null && block.getTypeId() == 42 && player.getItemInHand().getDurability() <= 0 && (mcm.getInstance().isTools(is)) || mcm.getInstance().isArmor(is)) {
    player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
        mcm.getInstance().removeDiamond(player);
        player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() > 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}","public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 5);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 6);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 8);
    }
  }
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 1);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 3);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 6);
    }
  }
  if (block != null && block.getTypeId() == 42 && player.getItemInHand().getDurability() <= 0 && (mcm.getInstance().isTools(is)) || mcm.getInstance().isArmor(is)) {
    player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
        mcm.getInstance().removeDiamond(player);
        player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() >= 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}"
84986,"public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(target).getParty())) {
        player.teleportTo(target);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
        target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
      }
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      if (mcUsers.getProfile(target).inParty())       player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getParty());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getMining());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getRepair());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getUnarmed());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getHerbalism());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    spawn=player.getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getMining());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getUnarmed());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getHerbalism());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavation());
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getParty()+ ""String_Node_Str"");
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split.length > 1 && split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (split.length >= 2) {
      mcUsers.getProfile(player).setParty(split[1]);
      player.sendMessage(""String_Node_Str"" + split[1]);
      informPartyMembers(player);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    event.setCancelled(true);
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (mcUsers.getProfile(player).getMySpawn(player) != null) {
      player.getInventory().clear();
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}","public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(target).getParty())) {
        player.teleportTo(target);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
        target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
      }
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      if (mcUsers.getProfile(target).inParty())       player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getParty());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getMining());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getRepair());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getUnarmed());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getHerbalism());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    spawn=player.getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getMining());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getUnarmed());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getHerbalism());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavation());
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getParty()+ ""String_Node_Str"");
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split.length > 1 && split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (split.length >= 2) {
      mcUsers.getProfile(player).setParty(split[1]);
      player.sendMessage(""String_Node_Str"" + split[1]);
      informPartyMembers(player);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    event.setCancelled(true);
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (mcUsers.getProfile(player).getMySpawn(player) != null) {
      player.getInventory().clear();
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}"
84987,"public void loadUsers(){
  File theDir=new File(location);
  if (!theDir.exists()) {
    FileWriter writer=null;
    try {
      writer=new FileWriter(location);
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
 finally {
      try {
        if (writer != null) {
          writer.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + location,e);
      }
    }
  }
 else {
    try {
      load();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
  }
}","public void loadUsers(){
  File theDir=new File(location);
  if (!theDir.exists()) {
    FileWriter writer=null;
    try {
      writer=new FileWriter(location);
      writer.write(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
 finally {
      try {
        if (writer != null) {
          writer.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + location,e);
      }
    }
  }
 else {
    try {
      load();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
  }
}"
84988,"public boolean load(){
  try {
    FileReader file=new FileReader(location);
    BufferedReader in=new BufferedReader(file);
    String line=""String_Node_Str"";
    while ((line=in.readLine()) != null) {
      String[] character=line.split(""String_Node_Str"");
      if (!character[0].equals(playerName)) {
        continue;
      }
      if (character.length > 1)       mining=character[1];
      if (character.length > 2)       myspawn=character[2];
      if (character.length > 3)       party=character[3];
      if (character.length > 4)       gather=character[4];
      if (character.length > 5)       woodcutting=character[5];
      if (character.length > 6)       wgather=character[6];
      if (character.length > 7)       repair=character[7];
      if (character.length > 8)       unarmed=character[8];
      if (character.length > 9)       herbalism=character[9];
      if (character.length > 10)       repair=character[10];
      if (character.length > 11)       excavation=character[11];
      in.close();
      return true;
    }
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
  return false;
}","public boolean load(){
  try {
    FileReader file=new FileReader(location);
    BufferedReader in=new BufferedReader(file);
    String line=""String_Node_Str"";
    while ((line=in.readLine()) != null) {
      String[] character=line.split(""String_Node_Str"");
      if (!character[0].equals(playerName)) {
        continue;
      }
      if (character.length > 1)       mining=character[1];
      if (character.length > 2)       myspawn=character[2];
      if (character.length > 3)       party=character[3];
      if (character.length > 4)       gather=character[4];
      if (character.length > 5)       woodcutting=character[5];
      if (character.length > 6)       wgather=character[6];
      if (character.length > 7)       repair=character[7];
      if (character.length > 8)       unarmed=character[8];
      if (character.length > 9)       herbalism=character[9];
      if (character.length > 10)       excavation=character[10];
      in.close();
      return true;
    }
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
  return false;
}"
84989,"public void excavationProcCheck(Block block,Player player){
  int type=block.getTypeId();
  Location loc=block.getLocation();
  ItemStack is=null;
  Material mat=null;
  if (type == 3 || type == 13 || type == 2) {
    if (Math.random() * 10 > 9) {
      mcUsers.getProfile(player).skillUpExcavation(1);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavationInt()+ ""String_Node_Str"");
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 750) {
      if (Math.random() * 2000 > 1999) {
        mat=Material.getMaterial(354);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 500 && type == 3) {
      if (Math.random() * 1000 > 999) {
        mat=Material.getMaterial(2256);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
      if (Math.random() * 1000 > 999) {
        mat=Material.getMaterial(2257);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
      if (Math.random() * 500 > 499) {
        mat=Material.getMaterial(264);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
  if (type == 12) {
    if (Math.random() * 10 > 9) {
      mcUsers.getProfile(player).skillUpExcavation(1);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavationInt()+ ""String_Node_Str"");
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 50 && Math.random() * 100 > 95) {
      mat=Material.getMaterial(348);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 500 && Math.random() * 500 > 499) {
      mat=Material.getMaterial(264);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 125) {
      if (Math.random() * 2000 > 1999) {
        mat=Material.getMaterial(263);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
  if ((type == 2 || type == 3) && mcUsers.getProfile(player).getExcavationInt() > 25) {
    if (Math.random() * 10 > 7) {
      mat=Material.getMaterial(348);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
  }
  if (type == 13 && mcUsers.getProfile(player).getExcavationInt() > 75) {
    if (Math.random() * 10 > 7) {
      mat=Material.getMaterial(289);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
  }
}","public void excavationProcCheck(Block block,Player player){
  int type=block.getTypeId();
  Location loc=block.getLocation();
  ItemStack is=null;
  Material mat=null;
  if (type == 2 && mcUsers.getProfile(player).getExcavationInt() > 250) {
    if (Math.random() * 100 > 99) {
      mat=Material.getMaterial(260);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
  }
  if (type == 3 || type == 13 || type == 2) {
    if (Math.random() * 10 > 9) {
      mcUsers.getProfile(player).skillUpExcavation(1);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavationInt()+ ""String_Node_Str"");
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 750) {
      if (Math.random() * 2000 > 1999) {
        mat=Material.getMaterial(354);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 500) {
      if (Math.random() * 1000 > 999) {
        mat=Material.getMaterial(2256);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
      if (Math.random() * 1000 > 999) {
        mat=Material.getMaterial(2257);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
      if (Math.random() * 500 > 499) {
        mat=Material.getMaterial(264);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
  if (type == 12) {
    if (Math.random() * 10 > 9) {
      mcUsers.getProfile(player).skillUpExcavation(1);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavationInt()+ ""String_Node_Str"");
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 50 && Math.random() * 100 > 95) {
      mat=Material.getMaterial(348);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 500 && Math.random() * 500 > 499) {
      mat=Material.getMaterial(264);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 125) {
      if (Math.random() * 2000 > 1999) {
        mat=Material.getMaterial(263);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
  if ((type == 2 || type == 3) && mcUsers.getProfile(player).getExcavationInt() > 25) {
    if (Math.random() * 10 > 7) {
      mat=Material.getMaterial(348);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
  }
  if (type == 13) {
    if (mcUsers.getProfile(player).getExcavationInt() > 75) {
      if (Math.random() * 10 > 7) {
        mat=Material.getMaterial(289);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 175) {
      if (Math.random() * 10 > 6) {
        mat=Material.getMaterial(352);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
}"
84990,"public void onEntityDamage(EntityDamageEvent event){
  Entity x=event.getEntity();
  if (x instanceof Player) {
    Player player=(Player)x;
    if ((player.getHealth() - event.getDamage()) <= 0) {
      Location deathLoc=player.getLocation();
      ItemStack[] items=player.getInventory().getContents();
      for (int i=0; i < items.length; i++) {
        ItemStack is=items[i];
        if (is != null && is.getAmount() > 0) {
          player.getWorld().dropItemNaturally(deathLoc,is);
        }
      }
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      for (      Player derp : plugin.getServer().getOnlinePlayers()) {
        derp.sendMessage(ChatColor.GRAY + player.getName() + ""String_Node_Str"");
      }
    }
  }
}","public void onEntityDamage(EntityDamageEvent event){
  Entity x=event.getEntity();
  if (x instanceof Player) {
    Player player=(Player)x;
    if (mcUsers.getProfile(player).isDead()) {
      mcUsers.getProfile(player).setDead(false);
      return;
    }
    if ((player.getHealth() - event.getDamage()) <= 0) {
      Location deathLoc=player.getLocation();
      ItemStack[] items=player.getInventory().getContents();
      for (int i=0; i < items.length; i++) {
        ItemStack is=items[i];
        if (is != null && is.getAmount() > 0) {
          player.getWorld().dropItemNaturally(deathLoc,is);
        }
      }
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      for (      Player derp : plugin.getServer().getOnlinePlayers()) {
        derp.sendMessage(ChatColor.GRAY + player.getName() + ""String_Node_Str"");
      }
    }
  }
}"
84991,"public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  Entity x=event.getEntity();
  Entity y=event.getDamager();
  if (y instanceof Player) {
    Player attacker=(Player)y;
    if (x instanceof Player) {
      Player defender=(Player)x;
      if (mcUsers.getProfile(defender).getParty().equals(mcUsers.getProfile(attacker).getParty())) {
        event.setCancelled(true);
      }
      if ((defender.getHealth() - event.getDamage()) <= 0) {
        for (        Player derp : plugin.getServer().getOnlinePlayers()) {
          derp.sendMessage(ChatColor.GRAY + attacker.getName() + ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GRAY+ defender.getName());
          mcUsers.getProfile(defender).setDead(true);
        }
      }
    }
  }
}","public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  Entity x=event.getEntity();
  Entity y=event.getDamager();
  if (y instanceof Player) {
    Player attacker=(Player)y;
    if (x instanceof Player) {
      Player defender=(Player)x;
      if (mcUsers.getProfile(defender).getParty().equals(mcUsers.getProfile(attacker).getParty())) {
        event.setCancelled(true);
      }
      if (mcUsers.getProfile(defender).isDead())       return;
      if ((defender.getHealth() - event.getDamage()) <= 0) {
        for (        Player derp : plugin.getServer().getOnlinePlayers()) {
          derp.sendMessage(ChatColor.GRAY + attacker.getName() + ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GRAY+ defender.getName());
          mcUsers.getProfile(defender).setDead(true);
        }
      }
    }
  }
}"
84992,"public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  Entity x=event.getEntity();
  Entity y=event.getDamager();
  if (y instanceof Player) {
    Player attacker=(Player)y;
    if (x instanceof Player) {
      Player defender=(Player)x;
      if (mcUsers.getProfile(defender).getParty().equals(mcUsers.getProfile(attacker).getParty())) {
        event.setCancelled(true);
      }
      if (mcUsers.getProfile(defender).isDead())       return;
      if ((defender.getHealth() - event.getDamage()) <= 0) {
        for (        Player derp : plugin.getServer().getOnlinePlayers()) {
          derp.sendMessage(ChatColor.GRAY + attacker.getName() + ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GRAY+ defender.getName());
          mcUsers.getProfile(defender).setDead(true);
        }
      }
    }
  }
}","public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  Entity x=event.getEntity();
  Entity y=event.getDamager();
  if (y instanceof Player) {
    Player attacker=(Player)y;
    if (x instanceof Player) {
      Player defender=(Player)x;
      if (mcUsers.getProfile(defender).inParty() && mcUsers.getProfile(defender).getParty().equals(mcUsers.getProfile(attacker).getParty()))       event.setCancelled(true);
      if (mcUsers.getProfile(defender).isDead())       return;
      if ((defender.getHealth() - event.getDamage()) <= 0) {
        for (        Player derp : plugin.getServer().getOnlinePlayers()) {
          derp.sendMessage(ChatColor.GRAY + attacker.getName() + ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GRAY+ defender.getName());
          mcUsers.getProfile(defender).setDead(true);
        }
      }
    }
  }
}"
84993,"public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String x=ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.GREEN+ ""String_Node_Str"";
  String y=ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.AQUA+ ""String_Node_Str"";
  if (mcConfig.getInstance().isPartyToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (mcUsers.getProfile(herp).inParty()) {
        if (mcm.inSameParty(herp,player)) {
          herp.sendMessage(x + event.getMessage());
        }
      }
    }
    return;
  }
  if (player.isOp() && mcConfig.getInstance().isAdminToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (herp.isOp()) {
        herp.sendMessage(y + event.getMessage());
      }
    }
    return;
  }
  if (player.isOp()) {
    event.setCancelled(true);
    for (    Player derp : plugin.getServer().getOnlinePlayers()) {
      String z=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE;
      derp.sendMessage(z + event.getMessage());
    }
  }
  event.setCancelled(true);
}","public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String x=ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.GREEN+ ""String_Node_Str"";
  String y=ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.AQUA+ ""String_Node_Str"";
  if (mcConfig.getInstance().isPartyToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (mcUsers.getProfile(herp).inParty()) {
        if (mcm.inSameParty(herp,player)) {
          herp.sendMessage(x + event.getMessage());
        }
      }
    }
    return;
  }
  if (player.isOp() && mcConfig.getInstance().isAdminToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (herp.isOp()) {
        herp.sendMessage(y + event.getMessage());
      }
    }
    return;
  }
  if (player.isOp()) {
    event.setCancelled(true);
    for (    Player derp : plugin.getServer().getOnlinePlayers()) {
      String z=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE;
      derp.sendMessage(z + event.getMessage());
    }
  }
}"
84994,"public void onPlayerCommand(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    String tempList=""String_Node_Str"";
    int x=0;
    for (    Player p : plugin.getServer().getOnlinePlayers()) {
      if (p != null && x < playerCount()) {
        tempList+=p.getName() + ""String_Node_Str"";
        x++;
      }
      if (x >= playerCount())       tempList+=p.getName();
    }
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.GREEN+ playerCount());
  }
}","public void onPlayerCommand(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    String tempList=""String_Node_Str"";
    int x=0;
    for (    Player p : plugin.getServer().getOnlinePlayers()) {
      if (p != null && x + 1 == playerCount()) {
        tempList+=p.getName();
        x++;
      }
      if (p != null && x < playerCount()) {
        tempList+=p.getName() + ""String_Node_Str"";
        x++;
      }
    }
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.GREEN+ playerCount());
  }
}"
84995,"public void onBlockDamage(BlockDamageEvent event){
  Player player=event.getPlayer();
  Block block=event.getBlock();
  int dmg=event.getDamageLevel().getLevel();
  if (dmg == 3) {
    mcUsers.getProfile(player).addgather(1);
    if (block.getTypeId() == 1) {
      int t=player.getItemInHand().getTypeId();
      int q;
      if (t == 272 || t == 273 || t == 274 || t == 275) {
        q=3;
      }
 else       if (t == 256 || t == 257 || t == 258 || t == 267) {
        q=2;
      }
 else       if (t == 268 || t == 269 || t == 270 || t == 271) {
        q=4;
      }
 else       if (t == 276 || t == 277 || t == 278 || t == 279) {
        q=1;
      }
 else {
        q=5;
      }
    }
  }
}","public void onBlockDamage(BlockDamageEvent event){
  Player player=event.getPlayer();
  Block block=event.getBlock();
  Location loc=block.getLocation();
  int dmg=event.getDamageLevel().getLevel();
  if (dmg == 3 && !mcConfig.getInstance().isBlockWatched(block)) {
    if (block.getTypeId() == 1) {
      mcUsers.getProfile(player).addgather(1);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 16) {
      mcUsers.getProfile(player).addgather(3);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 14) {
      mcUsers.getProfile(player).addgather(20);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 56) {
      mcUsers.getProfile(player).addgather(50);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 15) {
      mcUsers.getProfile(player).addgather(10);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 73 || block.getTypeId() == 74) {
      mcUsers.getProfile(player).addgather(15);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 21) {
      mcUsers.getProfile(player).addgather(50);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 17)     mcUsers.getProfile(player).addwgather(1);
    if (mcUsers.getProfile(player).getwgatheramt() > 10) {
      while (mcUsers.getProfile(player).getwgatheramt() > 10) {
        mcUsers.getProfile(player).removewgather(10);
        mcUsers.getProfile(player).skillUpWoodcutting(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting()+ ""String_Node_Str"");
      }
    }
    if (mcUsers.getProfile(player).getgatheramt() > 50) {
      while (mcUsers.getProfile(player).getgatheramt() > 50) {
        mcUsers.getProfile(player).removegather(50);
        mcUsers.getProfile(player).skillUpMining(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getMining()+ ""String_Node_Str"");
      }
    }
    if (block.getTypeId() == 17) {
      if (mcUsers.getProfile(player).getWoodCuttingint() > 1000) {
        Material mat=Material.getMaterial(block.getTypeId());
        byte damage=0;
        ItemStack item=new ItemStack(mat,1,(byte)0,damage);
        block.getWorld().dropItemNaturally(loc,item);
        return;
      }
      if (mcUsers.getProfile(player).getWoodCuttingint() > 750) {
        if ((Math.random() * 10) > 2) {
          Material mat=Material.getMaterial(block.getTypeId());
          byte damage=0;
          ItemStack item=new ItemStack(mat,1,(byte)0,damage);
          block.getWorld().dropItemNaturally(loc,item);
          return;
        }
      }
      if (mcUsers.getProfile(player).getWoodCuttingint() > 300) {
        if ((Math.random() * 10) > 4) {
          Material mat=Material.getMaterial(block.getTypeId());
          byte damage=0;
          ItemStack item=new ItemStack(mat,1,(byte)0,damage);
          block.getWorld().dropItemNaturally(loc,item);
          return;
        }
      }
      if (mcUsers.getProfile(player).getWoodCuttingint() > 100) {
        if ((Math.random() * 10) > 6) {
          Material mat=Material.getMaterial(block.getTypeId());
          byte damage=0;
          ItemStack item=new ItemStack(mat,1,(byte)0,damage);
          block.getWorld().dropItemNaturally(loc,item);
          return;
        }
      }
      if (mcUsers.getProfile(player).getWoodCuttingint() > 10) {
        if ((Math.random() * 10) > 8) {
          Material mat=Material.getMaterial(block.getTypeId());
          byte damage=0;
          ItemStack item=new ItemStack(mat,1,(byte)0,damage);
          block.getWorld().dropItemNaturally(loc,item);
          return;
        }
      }
    }
  }
}"
84996,"public void onEnable(){
  mcUsers.getInstance().loadUsers();
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGEDBY_ENTITY,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Priority.Normal,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}","public void onEnable(){
  mcUsers.getInstance().loadUsers();
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGEDBY_ENTITY,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_FLOW,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,blockListener,Priority.Normal,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}"
84997,"public void onPlayerJoin(PlayerEvent event){
  Player player=event.getPlayer();
  mcUsers.addUser(player);
  player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
  player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
  player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
}","public void onPlayerJoin(PlayerEvent event){
  Player player=event.getPlayer();
  mcUsers.addUser(player);
  player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
  player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
  player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
}"
84998,"public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      player.teleportTo(target);
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
      target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getgather());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    spawn=event.getPlayer().getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getgather());
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    mcUsers.getProfile(player).setParty(split[1]);
    player.sendMessage(""String_Node_Str"" + split[1]);
    informPartyMembers(player);
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.getInventory().clear();
    player.setHealth(20);
    player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}","public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(target).getParty())) {
        player.teleportTo(target);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
        target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
      }
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getMining());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    spawn=event.getPlayer().getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getMining());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting());
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    mcUsers.getProfile(player).setParty(split[1]);
    player.sendMessage(""String_Node_Str"" + split[1]);
    informPartyMembers(player);
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcUsers.getProfile(player).getMySpawn(player) != null) {
      player.getInventory().clear();
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}"
84999,"public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
        mcm.getInstance().removeDiamond(player);
        player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() > 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (!mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (!mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}","public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
        mcm.getInstance().removeDiamond(player);
        player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() > 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}"
85000,"public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String x=ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.GREEN+ ""String_Node_Str"";
  String y=ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.AQUA+ ""String_Node_Str"";
  if (mcConfig.getInstance().isPartyToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (mcUsers.getProfile(herp).inParty()) {
        if (mcm.inSameParty(herp,player)) {
          herp.sendMessage(x + event.getMessage());
        }
      }
    }
    return;
  }
  if (player.isOp() && mcConfig.getInstance().isAdminToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (herp.isOp()) {
        herp.sendMessage(y + event.getMessage());
      }
    }
    return;
  }
  if (player.isOp()) {
    event.setCancelled(true);
    for (    Player derp : plugin.getServer().getOnlinePlayers()) {
      String z=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE;
      derp.sendMessage(z + event.getMessage());
    }
  }
}","public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String x=ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.GREEN+ ""String_Node_Str"";
  String y=ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.AQUA+ ""String_Node_Str"";
  if (mcConfig.getInstance().isPartyToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (mcUsers.getProfile(herp).inParty()) {
        if (mcm.getInstance().inSameParty(herp,player)) {
          herp.sendMessage(x + event.getMessage());
        }
      }
    }
    return;
  }
  if (player.isOp() && mcConfig.getInstance().isAdminToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (herp.isOp()) {
        herp.sendMessage(y + event.getMessage());
      }
    }
    return;
  }
  if (player.isOp()) {
    event.setCancelled(true);
    for (    Player derp : plugin.getServer().getOnlinePlayers()) {
      String z=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE;
      derp.sendMessage(z + event.getMessage());
    }
  }
}"
