record_number,buggy_code,fixed_code
53001,"private void fillBuffer(){
  if (buffer.size() > 0) {
    return;
  }
  if (reader == null) {
    return;
  }
  while (buffer.isEmpty()) {
    try {
      String line=reader.readLine();
      if (line == null) {
        reader=null;
        return;
      }
      buffer.addAll(parse(line));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
catch (    StandardException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"" + line + ""String_Node_Str""+ path+ ""String_Node_Str"",e);
      System.exit(1);
    }
    line++;
  }
}","private void fillBuffer(){
  if (buffer.size() > 0) {
    return;
  }
  if (reader == null) {
    return;
  }
  while (buffer.isEmpty()) {
    try {
      String line=reader.readLine();
      if (line == null) {
        reader=null;
        return;
      }
      buffer.addAll(parse(line));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
catch (    StandardException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"" + line + ""String_Node_Str""+ path+ ""String_Node_Str"",e);
    }
    line++;
  }
}"
53002,"public synchronized void parse(List<ParserVisitor> visitors) throws DaoException {
  DaoFilter daoFilter=new DaoFilter().setLanguages(language.getLanguage());
  try {
    createWorkers(visitors);
    for (    RawPage page : rawPageDao.get(daoFilter)) {
      try {
        queue.put(page);
      }
 catch (      InterruptedException e) {
        LOG.log(Level.WARNING,""String_Node_Str"",e);
        break;
      }
    }
  }
  finally {
    cleanupWorkers();
  }
}","public synchronized void parse(List<ParserVisitor> visitors) throws DaoException {
  DaoFilter daoFilter=new DaoFilter().setLanguages(language.getLanguage());
  ParallelForEach.iterate(rawPageDao.get(daoFilter).iterator(),maxThreads,MAX_QUEUE,new ParserProcedure(visitors),10000);
}"
53003,"@Override public MetaInfo getInfo(Class component,Language lang) throws DaoException {
  Map<Language,MetaInfo> langInfos=counters.get(component);
  if (langInfos == null) {
synchronized (counters) {
      if (!counters.containsKey(component)) {
        langInfos=new ConcurrentHashMap<Language,MetaInfo>();
        counters.put(component,langInfos);
      }
    }
  }
  Object langKey=(lang == null ? NULL_KEY : lang);
  MetaInfo info=langInfos.get(langKey);
  if (info == null) {
synchronized (langInfos) {
      if (langInfos.containsKey(langKey)) {
        info=langInfos.get(langKey);
      }
 else {
        Connection conn=null;
        try {
          conn=ds.getConnection();
          DSLContext context=DSL.using(conn,dialect);
          Condition langCondition=(lang == null) ? Tables.META_INFO.LANG_ID.isNull() : Tables.META_INFO.LANG_ID.eq(lang.getId());
          Record3<Integer,Integer,Timestamp> record=context.select(Tables.META_INFO.NUM_RECORDS,Tables.META_INFO.NUM_ERRORS,Tables.META_INFO.LAST_UPDATED).from(Tables.META_INFO).where(Tables.META_INFO.COMPONENT.eq(component.getSimpleName())).and(langCondition).fetchOne();
          if (record == null) {
            info=new MetaInfo(component,lang);
          }
 else {
            info=new MetaInfo(component,lang,record.value1(),record.value2(),record.value3());
          }
        }
 catch (        SQLException e) {
          throw new DaoException(e);
        }
 finally {
          if (conn != null) {
            quietlyCloseConn(conn);
          }
        }
        ((Map)langInfos).put(langKey,info);
      }
    }
  }
  return info;
}","@Override public MetaInfo getInfo(Class component,Language lang) throws DaoException {
  Map<Language,MetaInfo> langInfos=counters.get(component);
  if (langInfos == null) {
synchronized (counters) {
      if (!counters.containsKey(component)) {
        langInfos=new ConcurrentHashMap<Language,MetaInfo>();
        counters.put(component,langInfos);
      }
 else {
        langInfos=counters.get(component);
      }
    }
  }
  Object langKey=(lang == null ? NULL_KEY : lang);
  MetaInfo info=langInfos.get(langKey);
  if (info == null) {
synchronized (langInfos) {
      if (langInfos.containsKey(langKey)) {
        info=langInfos.get(langKey);
      }
 else {
        Connection conn=null;
        try {
          conn=ds.getConnection();
          DSLContext context=DSL.using(conn,dialect);
          Condition langCondition=(lang == null) ? Tables.META_INFO.LANG_ID.isNull() : Tables.META_INFO.LANG_ID.eq(lang.getId());
          Record3<Integer,Integer,Timestamp> record=context.select(Tables.META_INFO.NUM_RECORDS,Tables.META_INFO.NUM_ERRORS,Tables.META_INFO.LAST_UPDATED).from(Tables.META_INFO).where(Tables.META_INFO.COMPONENT.eq(component.getSimpleName())).and(langCondition).fetchOne();
          if (record == null) {
            info=new MetaInfo(component,lang);
          }
 else {
            info=new MetaInfo(component,lang,record.value1(),record.value2(),record.value3());
          }
        }
 catch (        SQLException e) {
          throw new DaoException(e);
        }
 finally {
          if (conn != null) {
            quietlyCloseConn(conn);
          }
        }
        ((Map)langInfos).put(langKey,info);
      }
    }
  }
  return info;
}"
53004,"/** 
 * Removes any existing backups and creates backups of all stages of the pipeline.
 * @throws Exception
 */
public void createBackups() throws Exception {
  createWikiText();
}","/** 
 * Removes any existing backups and creates backups of all stages of the pipeline.
 * @throws Exception
 */
public void createBackups() throws Exception {
  createLucene();
}"
53005,"private void createLucene() throws DaoException, WikapidiaException, ConfigurationException, IOException, SQLException {
  deleteH2Backup(""String_Node_Str"");
  LuceneLoader.main(TestUtils.getArgs());
  backupH2To(""String_Node_Str"");
}","private void createLucene() throws DaoException, WikapidiaException, ConfigurationException, IOException, SQLException {
  File luceneDir=new File(env.getConfiguration().get().getString(""String_Node_Str""));
  deleteH2Backup(""String_Node_Str"");
  FileUtils.deleteQuietly(luceneDir);
  LuceneLoader.main(TestUtils.getArgs());
  ZipDir.zip(luceneDir,new File(dir,""String_Node_Str""));
  backupH2To(""String_Node_Str"");
}"
53006,"private void cleanupWorkers(){
  for (  Thread w : workers) {
    try {
      w.join(2 * 60 * 1000);
    }
 catch (    InterruptedException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  for (  Thread w : workers) {
    w.interrupt();
  }
}","private void cleanupWorkers(){
  long maxMillis=System.currentTimeMillis() + 2 * 60 * 1000;
  for (  Thread w : workers) {
    try {
      w.join(Math.max(0,maxMillis - System.currentTimeMillis()));
    }
 catch (    InterruptedException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  for (  Thread w : workers) {
    w.interrupt();
  }
  workers.clear();
}"
53007,"public void load(Language language) throws WikapidiaException {
  try {
    createWorkers();
    int i=0;
    Iterable<RawPage> rawPages=rawPageDao.get(new DaoFilter().setLanguages(language).setNameSpaces(namespaces).setRedirect(false));
    for (    RawPage rawPage : rawPages) {
      queue.put(rawPage);
      if (++i % 1000 == 0)       LOG.log(Level.INFO,""String_Node_Str"" + i);
    }
    queue.put(new RawPage(-2,0,""String_Node_Str"",null,null,Language.getByLangCode(""String_Node_Str""),null));
  }
 catch (  DaoException e) {
    throw new WikapidiaException(e);
  }
catch (  InterruptedException e) {
    throw new WikapidiaException(e);
  }
 finally {
    cleanupWorkers();
  }
}","/** 
 * NOTE: only one language can be loaded at a time.
 * @param language
 * @throws WikapidiaException
 */
public synchronized void load(Language language) throws WikapidiaException, ConfigurationException {
  try {
    createWorkers();
    DaoFilter filter=new DaoFilter().setLanguages(language).setNameSpaces(namespaces).setRedirect(false);
    int n=rawPageDao.getCount(filter);
    int i=0;
    luceneIndexer=new LuceneIndexer(language,luceneOptions);
    for (    RawPage rawPage : rawPageDao.get(filter)) {
      queue.put(rawPage);
      if (++i % 1000 == 0) {
        LOG.log(Level.INFO,""String_Node_Str"" + language + ""String_Node_Str""+ i+ ""String_Node_Str""+ n);
      }
    }
    queue.put(POISON_PILL);
  }
 catch (  DaoException e) {
    throw new WikapidiaException(e);
  }
catch (  InterruptedException e) {
    throw new WikapidiaException(e);
  }
 finally {
    cleanupWorkers();
    queue.clear();
    if (luceneIndexer != null) {
      IOUtils.closeQuietly(luceneIndexer);
      luceneIndexer=null;
    }
  }
}"
53008,"@Override public void run(){
  boolean finished=false;
  while (!finished) {
    RawPage rp=null;
    Language lang=null;
    try {
      rp=queue.poll(100,TimeUnit.MILLISECONDS);
      if (rp != null) {
        lang=rp.getLanguage();
        if (rp.getLocalId() == -2) {
          queue.put(rp);
          finished=true;
        }
 else {
          luceneIndexer.indexPage(rp);
          metaDao.incrementRecords(LuceneSearcher.class,lang);
        }
      }
    }
 catch (    InterruptedException e) {
      LOG.log(Level.WARNING,""String_Node_Str"");
      return;
    }
catch (    Exception e) {
      metaDao.incrementErrorsQuietly(LuceneSearcher.class,lang);
      String title=""String_Node_Str"";
      if (rp != null)       title=rp.getTitle().toString();
      LOG.log(Level.WARNING,""String_Node_Str"" + title,e);
    }
  }
}","@Override public void run(){
  boolean finished=false;
  while (!finished) {
    RawPage rp=null;
    Language lang=null;
    try {
      rp=queue.poll(100,TimeUnit.MILLISECONDS);
      if (rp == POISON_PILL) {
        queue.put(rp);
        finished=true;
      }
 else       if (rp != null) {
        luceneIndexer.indexPage(rp);
        metaDao.incrementRecords(LuceneSearcher.class,lang);
      }
    }
 catch (    InterruptedException e) {
      LOG.log(Level.WARNING,""String_Node_Str"");
      return;
    }
catch (    Exception e) {
      metaDao.incrementErrorsQuietly(LuceneSearcher.class,lang);
      String title=""String_Node_Str"";
      if (rp != null)       title=rp.getTitle().toString();
      LOG.log(Level.WARNING,""String_Node_Str"" + title,e);
    }
  }
}"
53009,"public static void main(String args[]) throws ConfigurationException, WikapidiaException, IOException, DaoException {
  Options options=new Options();
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArgs().withValueSeparator(',').withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArgs().withValueSeparator(',').withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  EnvBuilder.addStandardOptions(options);
  CommandLineParser parser=new PosixParser();
  CommandLine cmd;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    new HelpFormatter().printHelp(""String_Node_Str"",options);
    return;
  }
  Env env=new EnvBuilder(cmd).build();
  Configurator conf=env.getConfigurator();
  LuceneOptions[] luceneOptions;
  if (cmd.hasOption(""String_Node_Str"")) {
    String[] optionType=cmd.getOptionValues(""String_Node_Str"");
    luceneOptions=new LuceneOptions[optionType.length];
    for (int i=0; i < optionType.length; i++) {
      luceneOptions[i]=conf.get(LuceneOptions.class,optionType[i]);
    }
  }
 else {
    luceneOptions=new LuceneOptions[]{conf.get(LuceneOptions.class,""String_Node_Str""),conf.get(LuceneOptions.class,""String_Node_Str"")};
  }
  LanguageSet languages=env.getLanguages();
  Collection<NameSpace> namespaces=new ArrayList<NameSpace>();
  if (cmd.hasOption(""String_Node_Str"")) {
    String[] nsStrings=cmd.getOptionValues(""String_Node_Str"");
    for (    String s : nsStrings) {
      namespaces.add(NameSpace.getNameSpaceByName(s));
    }
  }
 else {
    namespaces=luceneOptions[0].namespaces;
  }
  RawPageDao rawPageDao=conf.get(RawPageDao.class);
  MetaInfoDao metaDao=conf.get(MetaInfoDao.class);
  metaDao.beginLoad();
  for (  Language lang : languages) {
    metaDao.clear(LuceneSearcher.class,lang);
  }
  LuceneIndexer luceneIndexer=new LuceneIndexer(languages,luceneOptions);
  final LuceneLoader loader=new LuceneLoader(rawPageDao,metaDao,luceneIndexer,namespaces);
  LOG.log(Level.INFO,""String_Node_Str"");
  ParallelForEach.loop(languages.getLanguages(),new Procedure<Language>(){
    @Override public void call(    Language language) throws Exception {
      loader.load(language);
    }
  }
);
  loader.endLoad();
  metaDao.endLoad();
  LOG.log(Level.INFO,""String_Node_Str"");
}","public static void main(String args[]) throws ConfigurationException, WikapidiaException, IOException, DaoException {
  Options options=new Options();
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArgs().withValueSeparator(',').withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArgs().withValueSeparator(',').withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  EnvBuilder.addStandardOptions(options);
  CommandLineParser parser=new PosixParser();
  CommandLine cmd;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    new HelpFormatter().printHelp(""String_Node_Str"",options);
    return;
  }
  Env env=new EnvBuilder(cmd).build();
  Configurator conf=env.getConfigurator();
  LuceneOptions[] luceneOptions;
  if (cmd.hasOption(""String_Node_Str"")) {
    String[] optionType=cmd.getOptionValues(""String_Node_Str"");
    luceneOptions=new LuceneOptions[optionType.length];
    for (int i=0; i < optionType.length; i++) {
      luceneOptions[i]=conf.get(LuceneOptions.class,optionType[i]);
    }
  }
 else {
    luceneOptions=new LuceneOptions[]{conf.get(LuceneOptions.class,""String_Node_Str""),conf.get(LuceneOptions.class,""String_Node_Str"")};
  }
  LanguageSet languages=env.getLanguages();
  Collection<NameSpace> namespaces=new ArrayList<NameSpace>();
  if (cmd.hasOption(""String_Node_Str"")) {
    String[] nsStrings=cmd.getOptionValues(""String_Node_Str"");
    for (    String s : nsStrings) {
      namespaces.add(NameSpace.getNameSpaceByName(s));
    }
  }
 else {
    namespaces=luceneOptions[0].namespaces;
  }
  RawPageDao rawPageDao=conf.get(RawPageDao.class);
  MetaInfoDao metaDao=conf.get(MetaInfoDao.class);
  metaDao.beginLoad();
  for (  Language lang : languages) {
    metaDao.clear(LuceneSearcher.class,lang);
  }
  final LuceneLoader loader=new LuceneLoader(rawPageDao,metaDao,luceneOptions,namespaces);
  LOG.log(Level.INFO,""String_Node_Str"");
  for (  Language lang : languages) {
    loader.load(lang);
  }
  loader.endLoad();
  metaDao.endLoad();
  LOG.log(Level.INFO,""String_Node_Str"");
}"
53010,"public void endLoad(){
  luceneIndexer.close();
}","public void endLoad(){
  if (luceneIndexer != null) {
    luceneIndexer.close();
  }
}"
53011,"public LuceneLoader(RawPageDao rawPageDao,MetaInfoDao metaDao,LuceneIndexer luceneIndexer,Collection<NameSpace> namespaces){
  this.rawPageDao=rawPageDao;
  this.metaDao=metaDao;
  this.luceneIndexer=luceneIndexer;
  this.namespaces=namespaces;
}","public LuceneLoader(RawPageDao rawPageDao,MetaInfoDao metaDao,LuceneOptions[] luceneOptions,Collection<NameSpace> namespaces){
  this.rawPageDao=rawPageDao;
  this.metaDao=metaDao;
  this.luceneOptions=luceneOptions;
  this.namespaces=namespaces;
}"
53012,"private LuceneIndexer(LanguageSet languages,File root,LuceneOptions... options) throws ConfigurationException {
  try {
    this.root=root;
    writers=new HashMap<Language,IndexWriter>();
    this.options=options;
    this.mainOptions=options[0];
    this.builder=new TextFieldBuilder(mainOptions.configurator.get(LocalPageDao.class),mainOptions.configurator.get(RawPageDao.class),mainOptions.configurator.get(RedirectDao.class));
    for (    Language language : languages) {
      File langRoot=new File(root,language.getLangCode());
      if (langRoot.exists()) {
        FileUtils.deleteQuietly(langRoot);
      }
      WikapidiaAnalyzer analyzer=new WikapidiaAnalyzer(language,mainOptions);
      Directory directory=FSDirectory.open(langRoot);
      IndexWriterConfig iwc=new IndexWriterConfig(mainOptions.matchVersion,analyzer);
      writers.put(language,new IndexWriter(directory,iwc));
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","private LuceneIndexer(Language language,File root,LuceneOptions... options) throws ConfigurationException {
  try {
    this.root=root;
    this.language=language;
    this.options=options;
    this.mainOptions=options[0];
    this.builder=new TextFieldBuilder(mainOptions.configurator.get(LocalPageDao.class),mainOptions.configurator.get(RawPageDao.class),mainOptions.configurator.get(RedirectDao.class));
    File langRoot=new File(root,language.getLangCode());
    if (langRoot.exists()) {
      FileUtils.deleteQuietly(langRoot);
    }
    WikapidiaAnalyzer analyzer=new WikapidiaAnalyzer(language,mainOptions);
    Directory directory=FSDirectory.open(langRoot);
    IndexWriterConfig iwc=new IndexWriterConfig(mainOptions.matchVersion,analyzer);
    writer=new IndexWriter(directory,iwc);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}"
53013,"/** 
 * Indexes a specific RawPage
 * @param page the page to index
 */
public void indexPage(RawPage page) throws DaoException {
  if (closed) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Language language=page.getLanguage();
  if (getLanguageSet().containsLanguage(language)) {
    try {
      Document document=new Document();
      Field localIdField=new IntField(LuceneOptions.LOCAL_ID_FIELD_NAME,page.getLocalId(),Field.Store.YES);
      Field langIdField=new IntField(LuceneOptions.LANG_ID_FIELD_NAME,page.getLanguage().getId(),Field.Store.YES);
      Field canonicalTitleField=builder.buildTextField(page,new TextFieldElements().addTitle());
      document.add(localIdField);
      document.add(langIdField);
      document.add(canonicalTitleField);
      if (!page.isRedirect()) {
        for (        LuceneOptions option : options) {
          document.add(builder.buildTextField(page,option.elements));
        }
      }
      writers.get(language).addDocument(document);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}","/** 
 * Indexes a specific RawPage
 * @param page the page to index
 */
public void indexPage(RawPage page) throws DaoException {
  if (closed) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!language.equals(page.getLanguage())) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  try {
    Document document=new Document();
    Field localIdField=new IntField(LuceneOptions.LOCAL_ID_FIELD_NAME,page.getLocalId(),Field.Store.YES);
    Field langIdField=new IntField(LuceneOptions.LANG_ID_FIELD_NAME,page.getLanguage().getId(),Field.Store.YES);
    Field canonicalTitleField=builder.buildTextField(page,new TextFieldElements().addTitle());
    document.add(localIdField);
    document.add(langIdField);
    document.add(canonicalTitleField);
    if (!page.isRedirect()) {
      for (      LuceneOptions option : options) {
        document.add(builder.buildTextField(page,option.elements));
      }
    }
    writer.addDocument(document);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}"
53014,"/** 
 * Method should be called when done indexing.
 */
public void close(){
  closed=true;
  for (  IndexWriter writer : writers.values()) {
    IOUtils.closeQuietly(writer);
  }
}","/** 
 * Method should be called when done indexing.
 */
public void close(){
  closed=true;
  IOUtils.closeQuietly(writer);
}"
53015,"public static void main(String[] args) throws DaoException, ConfigurationException {
  Options options=new Options();
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArgs().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().isRequired().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  Env.addStandardOptions(options);
  CommandLineParser parser=new PosixParser();
  CommandLine cmd;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    new HelpFormatter().printHelp(""String_Node_Str"",options);
    return;
  }
  Env env=new Env(cmd);
  Configurator c=env.getConfigurator();
  DatasetDao datasetDao=new DatasetDao();
  if (!cmd.hasOption(""String_Node_Str"") && !cmd.hasOption(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Language lang=env.getLanguages().getDefaultLanguage();
  List<Dataset> datasets=new ArrayList<Dataset>();
  for (  String dsName : cmd.getOptionValues(""String_Node_Str"")) {
    datasets.add(datasetDao.read(lang,dsName));
  }
  List<Dataset> allTrain=new ArrayList<Dataset>();
  List<Dataset> allTest=new ArrayList<Dataset>();
  String mode=cmd.hasOption(""String_Node_Str"") ? cmd.getOptionValue(""String_Node_Str"") : ""String_Node_Str"";
  if (mode.equals(""String_Node_Str"")) {
    for (    Dataset ds : datasets) {
      allTrain.add(ds);
      allTest.add(ds);
    }
  }
 else   if (mode.equals(""String_Node_Str"")) {
    int k=cmd.hasOption(""String_Node_Str"") ? Integer.parseInt(cmd.getOptionValue(""String_Node_Str"")) : DEFAULT_SPLITS;
    for (    Dataset ds : datasets) {
      makeFolds(ds.split(k),allTrain,allTest);
    }
  }
 else   if (mode.equals(""String_Node_Str"")) {
    makeFolds(datasets,allTrain,allTest);
  }
 else {
    System.err.println(""String_Node_Str"" + mode);
    System.exit(1);
  }
  double sumError=0;
  CrossValidation crossValidation=new CrossValidation();
  for (int i=0; i < allTrain.size(); i++) {
    Dataset train=allTrain.get(i);
    Dataset test=allTest.get(i);
    LocalSRMetric sr=null;
    UniversalSRMetric usr=null;
    if (cmd.hasOption(""String_Node_Str"")) {
      sr=c.get(LocalSRMetric.class,cmd.getOptionValue(""String_Node_Str""));
    }
    if (cmd.hasOption(""String_Node_Str"")) {
      usr=c.get(UniversalSRMetric.class,cmd.getOptionValue(""String_Node_Str""));
    }
    if (sr != null) {
      sr.trainDefaultSimilarity(train);
      sr.trainSimilarity(train);
      sumError+=crossValidation.evaluate(sr,test);
    }
 else     if (usr != null) {
      usr.trainSimilarity(train);
      sumError+=crossValidation.evaluate(usr,test);
    }
  }
  System.out.println(sumError / allTrain.size());
  System.out.println(crossValidation.missing + ""String_Node_Str"" + crossValidation.failed+ ""String_Node_Str"");
}","public static void main(String[] args) throws DaoException, ConfigurationException {
  Options options=new Options();
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArgs().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  Env.addStandardOptions(options);
  CommandLineParser parser=new PosixParser();
  CommandLine cmd;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    new HelpFormatter().printHelp(""String_Node_Str"",options);
    return;
  }
  Env env=new Env(cmd);
  Configurator c=env.getConfigurator();
  DatasetDao datasetDao=new DatasetDao();
  if (!cmd.hasOption(""String_Node_Str"") && !cmd.hasOption(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  File datasetPath=new File(c.getConf().get().getString(""String_Node_Str""));
  Language lang=env.getLanguages().getDefaultLanguage();
  List<Dataset> datasets=new ArrayList<Dataset>();
  for (  String dsName : cmd.getOptionValues(""String_Node_Str"")) {
    datasets.add(datasetDao.read(lang,new File(datasetPath,dsName).getAbsolutePath()));
  }
  List<Dataset> allTrain=new ArrayList<Dataset>();
  List<Dataset> allTest=new ArrayList<Dataset>();
  String mode=cmd.hasOption(""String_Node_Str"") ? cmd.getOptionValue(""String_Node_Str"") : ""String_Node_Str"";
  if (mode.equals(""String_Node_Str"")) {
    for (    Dataset ds : datasets) {
      allTrain.add(ds);
      allTest.add(ds);
    }
  }
 else   if (mode.equals(""String_Node_Str"")) {
    int k=cmd.hasOption(""String_Node_Str"") ? Integer.parseInt(cmd.getOptionValue(""String_Node_Str"")) : DEFAULT_SPLITS;
    for (    Dataset ds : datasets) {
      makeFolds(ds.split(k),allTrain,allTest);
    }
  }
 else   if (mode.equals(""String_Node_Str"")) {
    makeFolds(datasets,allTrain,allTest);
  }
 else {
    System.err.println(""String_Node_Str"" + mode);
    System.exit(1);
  }
  double sumError=0;
  CrossValidation crossValidation=new CrossValidation();
  for (int i=0; i < allTrain.size(); i++) {
    Dataset train=allTrain.get(i);
    Dataset test=allTest.get(i);
    LocalSRMetric sr=null;
    UniversalSRMetric usr=null;
    if (cmd.hasOption(""String_Node_Str"")) {
      sr=c.get(LocalSRMetric.class,cmd.getOptionValue(""String_Node_Str""));
    }
    if (cmd.hasOption(""String_Node_Str"")) {
      usr=c.get(UniversalSRMetric.class,cmd.getOptionValue(""String_Node_Str""));
    }
    if (sr != null) {
      sr.trainDefaultSimilarity(train);
      sr.trainSimilarity(train);
      sumError+=crossValidation.evaluate(sr,test);
    }
 else     if (usr != null) {
      usr.trainSimilarity(train);
      sumError+=crossValidation.evaluate(usr,test);
    }
  }
  System.out.println(sumError / allTrain.size());
  System.out.println(crossValidation.missing + ""String_Node_Str"" + crossValidation.failed+ ""String_Node_Str"");
}"
53016,"/** 
 * Build a LocalPage from a database record representation. Classes that extend class this should override this method.
 * @param record a database record
 * @return a LocalPage representation of the given database record
 * @throws DaoException if the record is not a Page
 */
protected LocalPage buildLocalPage(Record record) throws DaoException {
  if (record == null) {
    return null;
  }
  Language lang=Language.getById(record.getValue(Tables.LOCAL_PAGE.LANG_ID));
  if (record.getValue(Tables.LOCAL_PAGE.IS_REDIRECT) && redirectSqlDao != null) {
    return getById(lang,redirectSqlDao.resolveRedirect(lang,record.getValue(Tables.LOCAL_PAGE.PAGE_ID)));
  }
  Title title=new Title(record.getValue(Tables.LOCAL_PAGE.TITLE),true,LanguageInfo.getByLanguage(lang));
  NameSpace nameSpace=NameSpace.getNameSpaceByArbitraryId(record.getValue(Tables.LOCAL_PAGE.NAME_SPACE));
  return new LocalPage(lang,record.getValue(Tables.LOCAL_PAGE.PAGE_ID),title,nameSpace,record.getValue(Tables.LOCAL_PAGE.IS_REDIRECT),record.getValue(Tables.LOCAL_PAGE.IS_DISAMBIG));
}","protected LocalPage buildLocalPage(Record record,DaoFilter daoFilter) throws DaoException {
  if (record == null) {
    return null;
  }
  Language lang=Language.getById(record.getValue(Tables.LOCAL_PAGE.LANG_ID));
  if (redirectSqlDao != null && (daoFilter.isRedirect() == null || !daoFilter.isRedirect()) && record.getValue(Tables.LOCAL_PAGE.IS_REDIRECT)) {
    LocalPage page=getById(lang,redirectSqlDao.resolveRedirect(lang,record.getValue(Tables.LOCAL_PAGE.PAGE_ID)));
    if (daoFilter.isValidLocalPage(page)) {
      return page;
    }
  }
  Title title=new Title(record.getValue(Tables.LOCAL_PAGE.TITLE),true,LanguageInfo.getByLanguage(lang));
  NameSpace nameSpace=NameSpace.getNameSpaceByArbitraryId(record.getValue(Tables.LOCAL_PAGE.NAME_SPACE));
  return new LocalPage(lang,record.getValue(Tables.LOCAL_PAGE.PAGE_ID),title,nameSpace,record.getValue(Tables.LOCAL_PAGE.IS_REDIRECT),record.getValue(Tables.LOCAL_PAGE.IS_DISAMBIG));
}"
53017,"@Override public T transform(Record r){
  try {
    return (T)buildLocalPage(r);
  }
 catch (  DaoException e) {
    LOG.log(Level.WARNING,e.getMessage(),e);
    return null;
  }
}","@Override public T transform(Record r){
  try {
    return (T)buildLocalPage(r,daoFilter);
  }
 catch (  DaoException e) {
    LOG.log(Level.WARNING,e.getMessage(),e);
    return null;
  }
}"
53018,"private void cleanupWorkers(){
  finished.set(true);
  for (  Thread w : workers) {
    try {
      w.join(10000);
    }
 catch (    InterruptedException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  for (  Thread w : workers) {
    w.interrupt();
  }
}","private void cleanupWorkers(){
  for (  Thread w : workers) {
    try {
      w.join(2 * 60 * 1000);
    }
 catch (    InterruptedException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  for (  Thread w : workers) {
    w.interrupt();
  }
}"
53019,"public void load(Language language) throws WikapidiaException {
  try {
    createWorkers();
    int i=0;
    Iterable<RawPage> rawPages=rawPageDao.get(new DaoFilter().setLanguages(language).setNameSpaces(namespaces));
    for (    RawPage rawPage : rawPages) {
      queue.put(rawPage);
      if (++i % 1000 == 0)       LOG.log(Level.INFO,""String_Node_Str"" + i);
    }
  }
 catch (  DaoException e) {
    throw new WikapidiaException(e);
  }
catch (  InterruptedException e) {
    throw new WikapidiaException(e);
  }
 finally {
    cleanupWorkers();
  }
}","public void load(Language language) throws WikapidiaException {
  try {
    createWorkers();
    int i=0;
    Iterable<RawPage> rawPages=rawPageDao.get(new DaoFilter().setLanguages(language).setNameSpaces(namespaces).setRedirect(false));
    for (    RawPage rawPage : rawPages) {
      queue.put(rawPage);
      if (++i % 1000 == 0)       LOG.log(Level.INFO,""String_Node_Str"" + i);
    }
    queue.put(new RawPage(-2,0,""String_Node_Str"",null,null,Language.getByLangCode(""String_Node_Str""),null));
  }
 catch (  DaoException e) {
    throw new WikapidiaException(e);
  }
catch (  InterruptedException e) {
    throw new WikapidiaException(e);
  }
 finally {
    cleanupWorkers();
  }
}"
53020,"private void createWorkers(){
  workers.clear();
  finished.set(false);
  for (int i=0; i < WpThreadUtils.getMaxThreads(); i++) {
    Thread t=new Thread(new Worker());
    t.start();
    workers.add(t);
  }
}","private void createWorkers(){
  workers.clear();
  for (int i=0; i < WpThreadUtils.getMaxThreads(); i++) {
    Thread t=new Thread(new Worker());
    t.start();
    workers.add(t);
  }
}"
53021,"@Override public void run(){
  RawPage rp=null;
  while (!finished.get()) {
    try {
      rp=queue.poll(100,TimeUnit.MILLISECONDS);
      if (rp != null) {
        luceneIndexer.indexPage(rp);
      }
    }
 catch (    InterruptedException e) {
      LOG.log(Level.WARNING,""String_Node_Str"");
      return;
    }
catch (    Exception e) {
      String title=""String_Node_Str"";
      if (rp != null)       title=rp.getTitle().toString();
      LOG.log(Level.WARNING,""String_Node_Str"" + title,e);
    }
  }
}","@Override public void run(){
  RawPage rp=null;
  boolean finished=false;
  while (!finished) {
    try {
      rp=queue.poll(100,TimeUnit.MILLISECONDS);
      if (rp != null) {
        if (rp.getLocalId() == -2) {
          queue.put(rp);
          finished=true;
        }
 else {
          luceneIndexer.indexPage(rp);
        }
      }
    }
 catch (    InterruptedException e) {
      LOG.log(Level.WARNING,""String_Node_Str"");
      return;
    }
catch (    Exception e) {
      String title=""String_Node_Str"";
      if (rp != null)       title=rp.getTitle().toString();
      LOG.log(Level.WARNING,""String_Node_Str"" + title,e);
    }
  }
}"
53022,"/** 
 * Builds a MoreLikeThis query for the specified luceneId over the specified text field.
 * @param fieldName
 * @param luceneId
 * @return
 * @throws DaoException
 */
public QueryBuilder setMoreLikeThisQuery(String fieldName,int luceneId) throws DaoException {
  if (luceneId >= 0) {
    try {
      MoreLikeThis mlt=new MoreLikeThis(searcher.getReaderByLanguage(language));
      mlt.setMaxDocFreqPct(maxPercentage);
      mlt.setMaxQueryTerms(maxQueryTerms);
      mlt.setMinDocFreq(minDocFreq);
      mlt.setMinTermFreq(minTermFreq);
      mlt.setAnalyzer(searcher.getAnalyzerByLanguage(language));
      mlt.setFieldNames(new String[]{fieldName});
      query=mlt.like(luceneId);
    }
 catch (    IOException e) {
      LOG.log(Level.WARNING,""String_Node_Str"" + luceneId);
    }
  }
 else {
    LOG.log(Level.WARNING,""String_Node_Str"" + luceneId);
  }
  return this;
}","/** 
 * Builds a MoreLikeThis query for the specified luceneId over the specified text field.
 * @param fieldName
 * @param luceneId
 * @return
 * @throws DaoException
 */
public QueryBuilder setMoreLikeThisQuery(String fieldName,int luceneId) throws DaoException {
  if (luceneId >= 0) {
    try {
      MoreLikeThis mlt=new MoreLikeThis(searcher.getReaderByLanguage(language));
      mlt.setMaxDocFreqPct(maxPercentage);
      mlt.setMaxQueryTerms(maxQueryTerms);
      mlt.setMinDocFreq(minDocFreq);
      mlt.setMinTermFreq(minTermFreq);
      mlt.setAnalyzer(searcher.getAnalyzerByLanguage(language));
      mlt.setFieldNames(new String[]{fieldName});
      query=mlt.like(luceneId);
    }
 catch (    IOException e) {
      LOG.log(Level.WARNING,""String_Node_Str"" + luceneId);
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + luceneId);
  }
  return this;
}"
53023,"@Test @Ignore public void testGetDoc() throws ConfigurationException, IOException, DaoException {
  Configurator conf=new Configurator(new Configuration());
  RawPageDao rawPageDao=conf.get(RawPageDao.class);
  LuceneOptions[] luceneOptions=new LuceneOptions[]{conf.get(LuceneOptions.class)};
  Collection<NameSpace> namespaces=luceneOptions[0].namespaces;
  Language lang=Language.getByLangCode(""String_Node_Str"");
  LuceneSearcher searcher=new LuceneSearcher(new LanguageSet(Arrays.asList(lang)),LuceneOptions.getDefaultOptions());
  int localId=1;
  int luceneId=searcher.getDocIdFromLocalId(localId,lang);
  System.out.println(luceneId);
  Document doc=searcher.getSearcherByLanguage(lang).doc(luceneId);
  System.out.println(doc.toString());
}","@Ignore @Test public void testGetDoc() throws ConfigurationException, IOException, DaoException {
  Configurator conf=new Configurator(new Configuration());
  RawPageDao rawPageDao=conf.get(RawPageDao.class);
  LuceneOptions[] luceneOptions=new LuceneOptions[]{conf.get(LuceneOptions.class)};
  Collection<NameSpace> namespaces=luceneOptions[0].namespaces;
  Language lang=Language.getByLangCode(""String_Node_Str"");
  LuceneSearcher searcher=new LuceneSearcher(new LanguageSet(Collections.singletonList(lang)),LuceneOptions.getDefaultOptions());
  int localId=410732;
  int luceneId=searcher.getDocIdFromLocalId(localId,lang);
  System.out.println(luceneId);
  Document doc=searcher.getSearcherByLanguage(lang).doc(luceneId);
  System.out.println(doc.toString());
}"
53024,"/** 
 * Get concept vector of a local page with a specified language.
 * @param id
 * @param language
 * @return
 * @throws DaoException
 */
public TIntDoubleHashMap getVector(int id,Language language) throws DaoException {
  int luceneId=searcher.getDocIdFromLocalId(id,language);
  WikapidiaScoreDoc[] wikapidiaScoreDocs=getQueryBuilderByLanguage(language).setMoreLikeThisQuery(luceneId).search();
  wikapidiaScoreDocs=SimUtils.pruneSimilar(wikapidiaScoreDocs);
  return SimUtils.normalizeVector(expandScores(wikapidiaScoreDocs));
}","/** 
 * Get concept vector of a local page with a specified language.
 * @param id
 * @param language
 * @return
 * @throws DaoException
 */
public TIntDoubleHashMap getVector(int id,Language language) throws DaoException {
  int luceneId=searcher.getDocIdFromLocalId(id,language);
  if (luceneId < 0) {
    throw new DaoException(""String_Node_Str"" + id + ""String_Node_Str""+ language.getEnLangName());
  }
  WikapidiaScoreDoc[] wikapidiaScoreDocs=getQueryBuilderByLanguage(language).setMoreLikeThisQuery(luceneId).search();
  wikapidiaScoreDocs=SimUtils.pruneSimilar(wikapidiaScoreDocs);
  return SimUtils.normalizeVector(expandScores(wikapidiaScoreDocs));
}"
53025,"private void writeSim(Integer wpId,int maxSimsPerDoc) throws IOException {
  if (idCounter.incrementAndGet() % 10000 == 0) {
    String nValidStr=(validIds == null) ? ""String_Node_Str"" : (""String_Node_Str"" + validIds.size());
    System.err.println(""String_Node_Str"" + new Date() + ""String_Node_Str""+ idCounter.get()+ ""String_Node_Str""+ usedIds.size()+ ""String_Node_Str""+ nValidStr);
  }
  SRResultList scores=metric.mostSimilar(wpId,maxSimsPerDoc,validIds);
  if (scores != null) {
    int ids[]=scores.getIds();
synchronized (this) {
      numCells+=scores.getIds().length;
      usedIds.addAll(ids);
    }
    writer.writeRow(new SparseMatrixRow(vconf,wpId,ids,scores.getScoresAsFloat()));
  }
}","private void writeSim(Integer wpId,int maxSimsPerDoc) throws IOException {
  if (idCounter.incrementAndGet() % 10000 == 0) {
    String nValidStr=(validIds == null) ? ""String_Node_Str"" : (""String_Node_Str"" + validIds.size());
    LOG.info(""String_Node_Str"" + idCounter.get() + ""String_Node_Str""+ usedIds.size()+ ""String_Node_Str""+ nValidStr);
  }
  SRResultList scores=metric.mostSimilar(wpId,maxSimsPerDoc,validIds);
  if (scores != null) {
    int ids[]=scores.getIds();
synchronized (this) {
      numCells+=scores.getIds().length;
      usedIds.addAll(ids);
    }
    writer.writeRow(new SparseMatrixRow(vconf,wpId,ids,scores.getScoresAsFloat()));
  }
}"
53026,"/** 
 * Builds a phrase query over the specified field.
 * @param fieldName the name of the field on which to search
 * @param searchString
 * @return
 */
public QueryBuilder setPhraseQuery(String fieldName,String searchString){
  QueryParser parser=new QueryParser(searcher.getOptions().matchVersion,fieldName,searcher.getAnalyzerByLanguage(language));
  try {
    searchString=StringUtils.replace(searchString,""String_Node_Str"",""String_Node_Str"");
    query=parser.parse(QueryParserUtil.escape(searchString));
    return this;
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Builds a phrase query over the specified field.
 * @param fieldName the name of the field on which to search
 * @param searchString
 * @return
 */
public QueryBuilder setPhraseQuery(String fieldName,String searchString){
  QueryParser parser=new QueryParser(searcher.getOptions().matchVersion,fieldName,searcher.getAnalyzerByLanguage(language));
  try {
    searchString=QueryParserUtil.escape(searchString);
    searchString=StringUtils.replace(searchString,""String_Node_Str"",""String_Node_Str"");
    query=parser.parse(QueryParserUtil.escape(searchString));
    return this;
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}"
53027,"/** 
 * Builds a phrase query over the specified field.
 * @param fieldName the name of the field on which to search
 * @param searchString
 * @return
 */
public QueryBuilder setPhraseQuery(String fieldName,String searchString){
  QueryParser parser=new QueryParser(searcher.getOptions().matchVersion,fieldName,searcher.getAnalyzerByLanguage(language));
  try {
    searchString=QueryParserUtil.escape(searchString);
    searchString=StringUtils.replace(searchString,""String_Node_Str"",""String_Node_Str"");
    query=parser.parse(QueryParserUtil.escape(searchString));
    return this;
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Builds a phrase query over the specified field.
 * @param fieldName the name of the field on which to search
 * @param searchString
 * @return
 */
public QueryBuilder setPhraseQuery(String fieldName,String searchString){
  QueryParser parser=new QueryParser(searcher.getOptions().matchVersion,fieldName,searcher.getAnalyzerByLanguage(language));
  try {
    searchString=QueryParserUtil.escape(searchString);
    searchString=StringUtils.replace(searchString,""String_Node_Str"",""String_Node_Str"");
    query=parser.parse(searchString);
    return this;
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}"
53028,"protected double normalize(double score,Language language){
  if (similarityNormalizers.containsKey((int)language.getId())) {
    return similarityNormalizers.get((int)language.getId()).normalize(score);
  }
  ensureMostSimilarTrained();
  return defaultMostSimilarNormalizer.normalize(score);
}","protected double normalize(double score,Language language){
  if (similarityNormalizers.containsKey((int)language.getId()) && similarityNormalizers.get((int)language.getId()).isTrained()) {
    return similarityNormalizers.get((int)language.getId()).normalize(score);
  }
  ensureSimilarityTrained();
  return defaultSimilarityNormalizer.normalize(score);
}"
53029,"@Override protected Analyzer.TokenStreamComponents createComponents(String s,Reader r){
  TokenStream result=tokenizer.getTokenStream(r,CharArraySet.EMPTY_SET);
  return new TokenStreamComponents(tokenizer.getTokenizer(),result);
}","@Override protected Analyzer.TokenStreamComponents createComponents(String s,Reader r){
  Tokenizer tokenizer=languageTokenizer.makeTokenizer(r);
  TokenStream result=languageTokenizer.getTokenStream(tokenizer,CharArraySet.EMPTY_SET);
  return new TokenStreamComponents(tokenizer,result);
}"
53030,"/** 
 * Constructs a WikapidiaAnalyzer for the specified language with specified filters and specified options.
 * @param language the language this analyzer analyzes
 * @param options a LuceneOptions object containing specific options for lucene
 */
public WikapidiaAnalyzer(Language language,LuceneOptions options){
  this.language=language;
  this.tokenizer=LanguageTokenizer.getLanguageTokenizer(language,options);
  this.options=options;
}","/** 
 * Constructs a WikapidiaAnalyzer for the specified language with specified filters and specified options.
 * @param language the language this analyzer analyzes
 * @param options a LuceneOptions object containing specific options for lucene
 */
public WikapidiaAnalyzer(Language language,LuceneOptions options){
  this.language=language;
  this.languageTokenizer=LanguageTokenizer.getLanguageTokenizer(language,options);
  this.options=options;
}"
53031,"@Override public TokenStream getTokenStream(Reader reader,CharArraySet stemExclusionSet){
  TokenStream stream=setTokenizer(reader);
  stream=new StandardFilter(matchVersion,stream);
  stream=new ArabicNormalizationFilter(stream);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,ArabicAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new ArabicStemFilter(stream);
  }
  return stream;
}","@Override public TokenStream getTokenStream(Tokenizer tokenizer,CharArraySet stemExclusionSet){
  TokenStream stream=new StandardFilter(matchVersion,tokenizer);
  stream=new ArabicNormalizationFilter(stream);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,ArabicAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new ArabicStemFilter(stream);
  }
  return stream;
}"
53032,"@Override public TokenStream getTokenStream(Reader reader,CharArraySet stemExclusionSet){
  TokenStream stream=setTokenizer(reader);
  stream=new StandardFilter(matchVersion,stream);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,ArmenianAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new SnowballFilter(stream,new ArmenianStemmer());
  }
  return stream;
}","@Override public TokenStream getTokenStream(Tokenizer tokenizer,CharArraySet stemExclusionSet){
  TokenStream stream=new StandardFilter(matchVersion,tokenizer);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,ArmenianAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new SnowballFilter(stream,new ArmenianStemmer());
  }
  return stream;
}"
53033,"@Override public TokenStream getTokenStream(Reader reader,CharArraySet stemExclusionSet){
  TokenStream stream=setTokenizer(reader);
  stream=new StandardFilter(matchVersion,stream);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,BasqueAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new SnowballFilter(stream,new BasqueStemmer());
  }
  return stream;
}","@Override public TokenStream getTokenStream(Tokenizer tokenizer,CharArraySet stemExclusionSet){
  TokenStream stream=new StandardFilter(matchVersion,tokenizer);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,BasqueAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new SnowballFilter(stream,new BasqueStemmer());
  }
  return stream;
}"
53034,"@Override public TokenStream getTokenStream(Reader reader,CharArraySet stemExclusionSet){
  TokenStream stream=setTokenizer(reader);
  stream=new StandardFilter(matchVersion,stream);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,BulgarianAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new BulgarianStemFilter(stream);
  }
  return stream;
}","@Override public TokenStream getTokenStream(Tokenizer tokenizer,CharArraySet stemExclusionSet){
  TokenStream stream=new StandardFilter(matchVersion,tokenizer);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,BulgarianAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new BulgarianStemFilter(stream);
  }
  return stream;
}"
53035,"@Override public TokenStream getTokenStream(Reader reader,CharArraySet stemExclusionSet){
  TokenStream stream=setTokenizer(reader);
  stream=new StandardFilter(matchVersion,stream);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords) {
    stream=new ElisionFilter(stream,DEFAULT_ARTICLES);
    stream=new StopFilter(matchVersion,stream,DanishAnalyzer.getDefaultStopSet());
  }
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new SnowballFilter(stream,new CatalanStemmer());
  }
  return stream;
}","@Override public TokenStream getTokenStream(Tokenizer tokenizer,CharArraySet stemExclusionSet){
  TokenStream stream=new StandardFilter(matchVersion,tokenizer);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords) {
    stream=new ElisionFilter(stream,DEFAULT_ARTICLES);
    stream=new StopFilter(matchVersion,stream,DanishAnalyzer.getDefaultStopSet());
  }
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new SnowballFilter(stream,new CatalanStemmer());
  }
  return stream;
}"
53036,"@Override public TokenStream getTokenStream(Reader reader,CharArraySet stemExclusionSet){
  TokenStream stream=setTokenizer(reader);
  stream=new WordTokenFilter(stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,SmartChineseAnalyzer.getDefaultStopSet());
  if (useStem)   stream=new PorterStemFilter(stream);
  return stream;
}","@Override public TokenStream getTokenStream(Tokenizer tokenizer,CharArraySet stemExclusionSet){
  TokenStream stream=new WordTokenFilter(tokenizer);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,SmartChineseAnalyzer.getDefaultStopSet());
  if (useStem)   stream=new PorterStemFilter(stream);
  return stream;
}"
53037,"@Override public TokenStream getTokenStream(Reader reader,CharArraySet stemExclusionSet){
  TokenStream stream=setTokenizer(reader);
  stream=new StandardFilter(matchVersion,stream);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,CzechAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new CzechStemFilter(stream);
  }
  return stream;
}","@Override public TokenStream getTokenStream(Tokenizer tokenizer,CharArraySet stemExclusionSet){
  TokenStream stream=new StandardFilter(matchVersion,tokenizer);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,CzechAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new CzechStemFilter(stream);
  }
  return stream;
}"
53038,"@Override public TokenStream getTokenStream(Reader reader,CharArraySet stemExclusionSet){
  TokenStream stream=setTokenizer(reader);
  stream=new StandardFilter(matchVersion,stream);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,DanishAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new SnowballFilter(stream,new DanishStemmer());
  }
  return stream;
}","@Override public TokenStream getTokenStream(Tokenizer tokenizer,CharArraySet stemExclusionSet){
  TokenStream stream=new StandardFilter(matchVersion,tokenizer);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,DanishAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new SnowballFilter(stream,new DanishStemmer());
  }
  return stream;
}"
53039,"@Override public TokenStream getTokenStream(Reader reader,CharArraySet stemExclusionSet){
  TokenStream stream=setTokenizer(reader);
  stream=new StandardFilter(matchVersion,stream);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  return stream;
}","@Override public TokenStream getTokenStream(Tokenizer tokenizer,CharArraySet stemExclusionSet){
  TokenStream stream=new StandardFilter(matchVersion,tokenizer);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  return stream;
}"
53040,"@Override public TokenStream getTokenStream(Reader reader,CharArraySet stemExclusionSet){
  TokenStream stream=setTokenizer(reader);
  stream=new StandardFilter(matchVersion,stream);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,DutchAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new SnowballFilter(stream,new DutchStemmer());
  }
  return stream;
}","@Override public TokenStream getTokenStream(Tokenizer tokenizer,CharArraySet stemExclusionSet){
  TokenStream stream=new StandardFilter(matchVersion,tokenizer);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,DutchAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new SnowballFilter(stream,new DutchStemmer());
  }
  return stream;
}"
53041,"@Override public TokenStream getTokenStream(Reader reader,CharArraySet stemExclusionSet){
  TokenStream stream=setTokenizer(reader);
  stream=new StandardFilter(matchVersion,stream);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,EnglishAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new EnglishPossessiveFilter(matchVersion,stream);
    stream=new PorterStemFilter(stream);
  }
  return stream;
}","@Override public TokenStream getTokenStream(Tokenizer tokenizer,CharArraySet stemExclusionSet){
  TokenStream stream=new StandardFilter(matchVersion,tokenizer);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,EnglishAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new EnglishPossessiveFilter(matchVersion,stream);
    stream=new PorterStemFilter(stream);
  }
  return stream;
}"
53042,"@Override public TokenStream getTokenStream(Reader reader,CharArraySet stemExclusionSet){
  TokenStream stream=setTokenizer(reader);
  stream=new StandardFilter(matchVersion,stream);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,FinnishAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new SnowballFilter(stream,new FinnishStemmer());
  }
  return stream;
}","@Override public TokenStream getTokenStream(Tokenizer tokenizer,CharArraySet stemExclusionSet){
  TokenStream stream=new StandardFilter(matchVersion,tokenizer);
  if (caseInsensitive)   stream=new LowerCaseFilter(matchVersion,stream);
  if (useStopWords)   stream=new StopFilter(matchVersion,stream,FinnishAnalyzer.getDefaultStopSet());
  if (useStem) {
    if (!stemExclusionSet.isEmpty())     stream=new SetKeywordMarkerFilter(stream,stemExclusionSet);
    stream=new SnowballFilter(stream,new FinnishStemmer());
  }
  return stream;
}"
53043,"@Override public void save(LocalLink item) throws DaoException {
  delegate.save(item);
  LocalId src=new LocalId(item.getLanguage(),item.getSourceId());
  LocalId dest=new LocalId(item.getLanguage(),item.getDestId());
  if (!src.canPackInInt() || !dest.canPackInInt()) {
    System.err.println(""String_Node_Str"");
    return;
  }
  System.err.println(""String_Node_Str"");
  try {
    String key=""String_Node_Str"" + src.toInt();
    int[] val=objectDb.get(key);
    objectDb.put(key,ArrayUtils.add(val,dest.toInt()));
  }
 catch (  IOException e) {
    throw new DaoException(e);
  }
catch (  ClassNotFoundException e) {
    throw new DaoException(e);
  }
}","@Override public void save(LocalLink item) throws DaoException {
  delegate.save(item);
  LocalId src=new LocalId(item.getLanguage(),item.getSourceId());
  LocalId dest=new LocalId(item.getLanguage(),item.getDestId());
  if (!src.canPackInInt() || !dest.canPackInInt()) {
    return;
  }
  try {
    String key=""String_Node_Str"" + src.toInt();
    int[] val=objectDb.get(key);
    objectDb.put(key,ArrayUtils.add(val,dest.toInt()));
  }
 catch (  IOException e) {
    throw new DaoException(e);
  }
catch (  ClassNotFoundException e) {
    throw new DaoException(e);
  }
}"
53044,"@Override public void endLoad() throws DaoException {
  delegate.endLoad();
  try {
    LOG.info(""String_Node_Str"");
    ValueConf vconf=new ValueConf();
    SparseMatrixWriter writer=new SparseMatrixWriter(getMatrixFile(),vconf);
    for (    Pair<String,int[]> entry : objectDb) {
      SparseMatrixRow row=new SparseMatrixRow(vconf,Integer.valueOf(entry.getKey()),entry.getValue(),new short[entry.getValue().length]);
      writer.writeRow(row);
    }
    LOG.info(""String_Node_Str"");
    writer.finish();
    LOG.info(""String_Node_Str"");
    matrix=new SparseMatrix(getMatrixFile(),maxOpenPages,maxPageSize);
    LOG.info(""String_Node_Str"");
    SparseMatrixTransposer transposer=new SparseMatrixTransposer(matrix,getTransposeFile(),maxOpenPages * maxPageSize);
    transposer.transpose();
    LOG.info(""String_Node_Str"");
    transpose=new SparseMatrix(getTransposeFile(),maxOpenPages,maxPageSize);
  }
 catch (  IOException e) {
    throw new DaoException(e);
  }
}","@Override public void endLoad() throws DaoException {
  delegate.endLoad();
  objectDb.flush();
  try {
    LOG.info(""String_Node_Str"");
    ValueConf vconf=new ValueConf();
    SparseMatrixWriter writer=new SparseMatrixWriter(getMatrixFile(),vconf);
    for (    Pair<String,int[]> entry : objectDb) {
      SparseMatrixRow row=new SparseMatrixRow(vconf,Integer.valueOf(entry.getKey()),entry.getValue(),new short[entry.getValue().length]);
      writer.writeRow(row);
    }
    LOG.info(""String_Node_Str"");
    writer.finish();
    LOG.info(""String_Node_Str"");
    matrix=new SparseMatrix(getMatrixFile(),maxOpenPages,maxPageSize);
    LOG.info(""String_Node_Str"");
    SparseMatrixTransposer transposer=new SparseMatrixTransposer(matrix,getTransposeFile(),maxOpenPages * maxPageSize);
    transposer.transpose();
    LOG.info(""String_Node_Str"");
    transpose=new SparseMatrix(getTransposeFile(),maxOpenPages,maxPageSize);
  }
 catch (  IOException e) {
    throw new DaoException(e);
  }
}"
53045,"public void flush(){
  this.db.sync();
}","public void flush(){
  this.env.flushLog(true);
}"
53046,"public static int getUniversalConceptAlgorithmId(Config conf){
  String path=conf.getString(""String_Node_Str"");
  return conf.getInt(""String_Node_Str"" + path + ""String_Node_Str"");
}","public static int getUniversalConceptAlgorithmId(Configuration conf){
  String path=conf.get().getString(""String_Node_Str"");
  return conf.get().getInt(""String_Node_Str"" + path + ""String_Node_Str"");
}"
53047,"@Override public UniversalSRMetric get(String name,Config config) throws ConfigurationException {
  if (!config.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
    return null;
  }
  return new UniversalMilneWitten(getConfigurator().get(Disambiguator.class,config.getString(""String_Node_Str"")),getConfigurator().get(UniversalPageDao.class,config.getString(""String_Node_Str"")),Env.getUniversalConceptAlgorithmId(config),getConfigurator().get(UniversalLinkDao.class,config.getString(""String_Node_Str"")),config.getBoolean(""String_Node_Str""));
}","@Override public UniversalSRMetric get(String name,Config config) throws ConfigurationException {
  if (!config.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
    return null;
  }
  return new UniversalMilneWitten(getConfigurator().get(Disambiguator.class,config.getString(""String_Node_Str"")),getConfigurator().get(UniversalPageDao.class,config.getString(""String_Node_Str"")),Env.getUniversalConceptAlgorithmId(getConfig()),getConfigurator().get(UniversalLinkDao.class,config.getString(""String_Node_Str"")),config.getBoolean(""String_Node_Str""));
}"
53048,"/** 
 * Get wiki pages that are the most similar to the specified local page.
 * @param localPage
 * @param maxResults
 * @param explanations
 * @return
 * @throws DaoException
 */
public SRResultList mostSimilar(LocalPage localPage,int maxResults,boolean explanations) throws DaoException {
  Language language=localPage.getLanguage();
  QueryBuilder queryBuilder=new QueryBuilder(language,searcher.getOptions());
  searcher.setHitCount(maxResults);
  Query query=queryBuilder.getMoreLikeThisQuery(searcher.getDocIdFromLocalId(localPage.getLocalId(),language),searcher.getReaderByLanguage(language));
  ScoreDoc[] scoreDocs=searcher.search(query,language);
  SRResultList srResults=new SRResultList(maxResults);
  int i=0;
  for (  ScoreDoc scoreDoc : scoreDocs) {
    if (i < srResults.numDocs()) {
      srResults.set(i,scoreDoc.doc,scoreDoc.score);
      i++;
    }
  }
  if (explanations) {
    String format=""String_Node_Str"";
    for (    SRResult srResult : srResults) {
      if (srResult.getValue() != 0) {
        List<LocalPage> formatPages=new ArrayList<LocalPage>();
        int localPageId=searcher.getLocalIdFromDocId(srResult.id,language);
        LocalPage topPage=pageHelper.getById(language,localPageId);
        if (topPage == null) {
          continue;
        }
        formatPages.add(localPage);
        formatPages.add(topPage);
        Explanation explanation=new Explanation(format,formatPages);
        srResult.addExplanation(explanation);
      }
    }
  }
  return srResults;
}","public SRResultList mostSimilar(LocalPage page,int maxResults,TIntSet validIds) throws DaoException {
  return null;
}"
53049,"@Test @Ignore public void testMostSimilarPages() throws WikapidiaException, DaoException, ConfigurationException, ClassNotFoundException, IOException {
  Configurator c=new Configurator(new Configuration());
  LocalPageDao localPageDao=c.get(LocalPageDao.class);
  Language lang=Language.getByLangCode(""String_Node_Str"");
  LuceneSearcher searcher=new LuceneSearcher(new LanguageSet(Arrays.asList(lang)),LuceneOptions.getDefaultOptions());
  ESAMetric esaMetric=new ESAMetric(lang,searcher,localPageDao);
  String string1=""String_Node_Str"";
  String string2=""String_Node_Str"";
  String string3=""String_Node_Str"";
  String string4=""String_Node_Str"";
  LocalPage page1=localPageDao.getByTitle(lang,new Title(string1,lang),NameSpace.ARTICLE);
  LocalPage page2=localPageDao.getByTitle(lang,new Title(string2,lang),NameSpace.ARTICLE);
  LocalPage page3=localPageDao.getByTitle(lang,new Title(string3,lang),NameSpace.ARTICLE);
  LocalPage page4=localPageDao.getByTitle(lang,new Title(string4,lang),NameSpace.ARTICLE);
  System.out.println(page3);
  SRResultList srResults=esaMetric.mostSimilar(page3,10,true);
  for (  SRResult srResult : srResults) {
    printResult(srResult);
  }
  System.out.println(Arrays.toString(srResults.getScoresAsFloat()));
  System.out.println(page4);
  SRResultList srResults2=esaMetric.mostSimilar(page4,10,true);
  for (  SRResult srResult : srResults2) {
    printResult(srResult);
  }
  System.out.println(Arrays.toString(srResults2.getScoresAsFloat()));
  String[] testPhrases={string3,string4};
  for (int i=0; i < testPhrases.length; i++) {
    for (int j=i + 1; j < testPhrases.length; j++) {
      SRResult srResult=esaMetric.similarity(testPhrases[i],testPhrases[j],lang,true);
      System.out.println(testPhrases[i] + ""String_Node_Str"" + testPhrases[j]+ ""String_Node_Str"");
      printResult(srResult);
    }
  }
  LocalPage[] testPages={page3,page4};
  for (int i=0; i < testPages.length; i++) {
    for (int j=i + 1; j < testPages.length; j++) {
      SRResult srResult=esaMetric.similarity(testPages[i],testPages[j],true);
      System.out.println(testPages[i].getTitle().getCanonicalTitle() + ""String_Node_Str"" + testPages[j].getTitle().getCanonicalTitle()+ ""String_Node_Str"");
      printResult(srResult);
    }
  }
}","@Test @Ignore public void testMostSimilarPages() throws WikapidiaException, DaoException, ConfigurationException, ClassNotFoundException, IOException {
  Configurator c=new Configurator(new Configuration());
  LocalPageDao localPageDao=c.get(LocalPageDao.class);
  Language lang=Language.getByLangCode(""String_Node_Str"");
  LuceneSearcher searcher=new LuceneSearcher(new LanguageSet(Arrays.asList(lang)),LuceneOptions.getDefaultOptions());
  ESAMetric esaMetric=new ESAMetric(lang,searcher,localPageDao);
  String string1=""String_Node_Str"";
  String string2=""String_Node_Str"";
  String string3=""String_Node_Str"";
  String string4=""String_Node_Str"";
  LocalPage page1=localPageDao.getByTitle(lang,new Title(string1,lang),NameSpace.ARTICLE);
  LocalPage page2=localPageDao.getByTitle(lang,new Title(string2,lang),NameSpace.ARTICLE);
  LocalPage page3=localPageDao.getByTitle(lang,new Title(string3,lang),NameSpace.ARTICLE);
  LocalPage page4=localPageDao.getByTitle(lang,new Title(string4,lang),NameSpace.ARTICLE);
  System.out.println(page3);
  SRResultList srResults=esaMetric.mostSimilar(page3,10);
  for (  SRResult srResult : srResults) {
    printResult(srResult);
  }
  System.out.println(Arrays.toString(srResults.getScoresAsFloat()));
  System.out.println(page4);
  SRResultList srResults2=esaMetric.mostSimilar(page4,10);
  for (  SRResult srResult : srResults2) {
    printResult(srResult);
  }
  System.out.println(Arrays.toString(srResults2.getScoresAsFloat()));
  String[] testPhrases={string3,string4};
  for (int i=0; i < testPhrases.length; i++) {
    for (int j=i + 1; j < testPhrases.length; j++) {
      SRResult srResult=esaMetric.similarity(testPhrases[i],testPhrases[j],lang,true);
      System.out.println(testPhrases[i] + ""String_Node_Str"" + testPhrases[j]+ ""String_Node_Str"");
      printResult(srResult);
    }
  }
  LocalPage[] testPages={page3,page4};
  for (int i=0; i < testPages.length; i++) {
    for (int j=i + 1; j < testPages.length; j++) {
      SRResult srResult=esaMetric.similarity(testPages[i],testPages[j],true);
      System.out.println(testPages[i].getTitle().getCanonicalTitle() + ""String_Node_Str"" + testPages[j].getTitle().getCanonicalTitle()+ ""String_Node_Str"");
      printResult(srResult);
    }
  }
}"
53050,"@Test public void testMostSimilarPages() throws WikapidiaException, DaoException, ConfigurationException, ClassNotFoundException, IOException {
  Configurator c=new Configurator(new Configuration());
  LocalPageDao localPageDao=c.get(LocalPageDao.class);
  Language lang=Language.getByLangCode(""String_Node_Str"");
  LuceneSearcher searcher=new LuceneSearcher(new LanguageSet(Arrays.asList(lang)),LuceneOptions.getDefaultOptions());
  ESAMetric esaMetric=new ESAMetric(lang,searcher,localPageDao);
  String string1=""String_Node_Str"";
  String string2=""String_Node_Str"";
  String string3=""String_Node_Str"";
  String string4=""String_Node_Str"";
  LocalPage page1=localPageDao.getByTitle(lang,new Title(string1,lang),NameSpace.ARTICLE);
  LocalPage page2=localPageDao.getByTitle(lang,new Title(string2,lang),NameSpace.ARTICLE);
  LocalPage page3=localPageDao.getByTitle(lang,new Title(string3,lang),NameSpace.ARTICLE);
  LocalPage page4=localPageDao.getByTitle(lang,new Title(string4,lang),NameSpace.ARTICLE);
  System.out.println(page3);
  SRResultList srResults=esaMetric.mostSimilar(page3,10,true);
  for (  SRResult srResult : srResults) {
    printResult(srResult);
  }
  LocalPage[] testPages={page3,page4};
  for (int i=0; i < testPages.length; i++) {
    for (int j=i + 1; j < testPages.length; j++) {
      SRResult srResult=esaMetric.similarity(testPages[i],testPages[j],true);
      System.out.println(testPages[i].getTitle().getCanonicalTitle() + ""String_Node_Str"" + testPages[j].getTitle().getCanonicalTitle()+ ""String_Node_Str"");
      printResult(srResult);
    }
  }
}","@Test public void testMostSimilarPages() throws WikapidiaException, DaoException, ConfigurationException, ClassNotFoundException, IOException {
  Configurator c=new Configurator(new Configuration());
  LocalPageDao localPageDao=c.get(LocalPageDao.class);
  Language lang=Language.getByLangCode(""String_Node_Str"");
  LuceneSearcher searcher=new LuceneSearcher(new LanguageSet(Arrays.asList(lang)),LuceneOptions.getDefaultOptions());
  ESAMetric esaMetric=new ESAMetric(lang,searcher,localPageDao);
  String string1=""String_Node_Str"";
  String string2=""String_Node_Str"";
  String string3=""String_Node_Str"";
  String string4=""String_Node_Str"";
  LocalPage page1=localPageDao.getByTitle(lang,new Title(string1,lang),NameSpace.ARTICLE);
  LocalPage page2=localPageDao.getByTitle(lang,new Title(string2,lang),NameSpace.ARTICLE);
  LocalPage page3=localPageDao.getByTitle(lang,new Title(string3,lang),NameSpace.ARTICLE);
  LocalPage page4=localPageDao.getByTitle(lang,new Title(string4,lang),NameSpace.ARTICLE);
  System.out.println(page3);
  SRResultList srResults=esaMetric.mostSimilar(page3,10,true);
  for (  SRResult srResult : srResults) {
    printResult(srResult);
  }
  System.out.println(Arrays.toString(srResults.getScoresAsFloat()));
  System.out.println(page4);
  SRResultList srResults2=esaMetric.mostSimilar(page4,10,true);
  for (  SRResult srResult : srResults2) {
    printResult(srResult);
  }
  System.out.println(Arrays.toString(srResults2.getScoresAsFloat()));
  String[] testPhrases={string3,string4};
  for (int i=0; i < testPhrases.length; i++) {
    for (int j=i + 1; j < testPhrases.length; j++) {
      SRResult srResult=esaMetric.similarity(testPhrases[i],testPhrases[j],lang,true);
      System.out.println(testPhrases[i] + ""String_Node_Str"" + testPhrases[j]+ ""String_Node_Str"");
      printResult(srResult);
    }
  }
  LocalPage[] testPages={page3,page4};
  for (int i=0; i < testPages.length; i++) {
    for (int j=i + 1; j < testPages.length; j++) {
      SRResult srResult=esaMetric.similarity(testPages[i],testPages[j],true);
      System.out.println(testPages[i].getTitle().getCanonicalTitle() + ""String_Node_Str"" + testPages[j].getTitle().getCanonicalTitle()+ ""String_Node_Str"");
      printResult(srResult);
    }
  }
}"
53051,"/** 
 * Return all links of a particular language the fits one of the patterns
 * @return  hashmap with dump urls and names of dump type
 */
public Multimap<LinkMatcher,DumpLinkInfo> getDumpFiles(List<String> links) throws IOException {
  Multimap<LinkMatcher,DumpLinkInfo> dumpLinks=HashMultimap.create();
  Map<String,String> md5s=getMd5Sums(links);
  for (  LinkMatcher linkMatcher : matchers) {
    List<String> results=linkMatcher.match(links);
    if (!results.isEmpty()) {
      for (      String url : results) {
        URL linkURL=new URL(BASEURL_STRING + url);
        DumpLinkInfo linkInfo=new DumpLinkInfo(lang,dumpDate,linkMatcher,linkURL);
        linkInfo.setMd5(md5s.get(linkInfo.getDownloadName()));
        dumpLinks.put(linkMatcher,linkInfo);
      }
    }
  }
  return dumpLinks;
}","/** 
 * Return all links of a particular language the fits one of the patterns
 * @return  hashmap with dump urls and names of dump type
 */
public Multimap<LinkMatcher,DumpLinkInfo> getDumpFiles(List<String> links) throws IOException {
  Multimap<LinkMatcher,DumpLinkInfo> dumpLinks=HashMultimap.create();
  Map<String,String> md5s=getMd5Sums(links);
  for (  LinkMatcher linkMatcher : matchers) {
    List<String> results=linkMatcher.match(links);
    if (!results.isEmpty()) {
      for (      String url : results) {
        URL linkURL=new URL(BASEURL_STRING + url);
        DumpLinkInfo linkInfo=new DumpLinkInfo(lang,dumpDate,linkMatcher,linkURL,linkMatcher.getNumber(url));
        linkInfo.setMd5(md5s.get(linkInfo.getDownloadName()));
        dumpLinks.put(linkMatcher,linkInfo);
      }
    }
  }
  return dumpLinks;
}"
53052,"/** 
 * Parses a file of info pertaining to dump links into a cluster of DumpLinkInfo. Info must be listed in order: lang code, date, LinkMatcher, URL, MD5 checksum with each DumpLink reference on a new line.
 * @param file
 * @return
 */
public static DumpLinkCluster parseFile(File file){
  InputStream stream=null;
  Map<String,AtomicInteger> counters=new HashMap<String,AtomicInteger>();
  try {
    stream=FileUtils.openInputStream(file);
    List<String> lines=IOUtils.readLines(stream,""String_Node_Str"");
    DumpLinkCluster dumpLinks=new DumpLinkCluster();
    for (    String line : lines) {
      String[] parsedInfo=line.split(""String_Node_Str"");
      String langCode=parsedInfo[0];
      String date=parsedInfo[1];
      String linkMatcher=parsedInfo[2];
      String url=parsedInfo[3];
      String md5=null;
      if (parsedInfo.length == 5)       md5=parsedInfo[4];
      try {
        if (!counters.containsKey(linkMatcher)) {
          counters.put(linkMatcher,new AtomicInteger(0));
        }
        DumpLinkInfo temp=new DumpLinkInfo(langCode,date,linkMatcher,url,md5,counters.get(linkMatcher).getAndIncrement());
        dumpLinks.add(temp);
      }
 catch (      MalformedURLException e) {
        LOG.log(Level.WARNING,""String_Node_Str"" + url + ""String_Node_Str"",e);
      }
    }
    return dumpLinks;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (stream != null)     IOUtils.closeQuietly(stream);
  }
}","/** 
 * Parses a file of info pertaining to dump links into a cluster of DumpLinkInfo. Info must be listed in order: lang code, date, LinkMatcher, URL, MD5 checksum with each DumpLink reference on a new line.
 * @param file
 * @return
 */
public static DumpLinkCluster parseFile(File file){
  InputStream stream=null;
  try {
    stream=FileUtils.openInputStream(file);
    List<String> lines=IOUtils.readLines(stream,""String_Node_Str"");
    DumpLinkCluster dumpLinks=new DumpLinkCluster();
    for (    String line : lines) {
      String[] parsedInfo=line.split(""String_Node_Str"");
      String langCode=parsedInfo[0];
      String date=parsedInfo[1];
      String linkMatcher=parsedInfo[2];
      String counter=parsedInfo[3];
      String url=parsedInfo[4];
      String md5=null;
      if (parsedInfo.length == 6)       md5=parsedInfo[5];
      try {
        DumpLinkInfo temp=new DumpLinkInfo(langCode,date,linkMatcher,url,md5,Integer.valueOf(counter));
        dumpLinks.add(temp);
      }
 catch (      MalformedURLException e) {
        LOG.log(Level.WARNING,""String_Node_Str"" + url + ""String_Node_Str"",e);
      }
    }
    return dumpLinks;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (stream != null)     IOUtils.closeQuietly(stream);
  }
}"
53053,"/** 
 * Parse command line and generate .tsv file containing language code, date of dump, name of file type and link url.
 * @param args command line prompt
 * @throws IOException
 * @throws WikapidiaException
 * @throws ParseException
 */
public static void main(String[] args) throws IOException, WikapidiaException, ParseException, ConfigurationException {
  Options options=new Options();
  options.addOption(new DefaultOptionBuilder().hasArgs().withValueSeparator(',').withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + new Configuration().get().getStringList(""String_Node_Str"")).create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  Env.addStandardOptions(options);
  CommandLineParser parser=new PosixParser();
  CommandLine cmd;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  org.apache.commons.cli.ParseException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    new HelpFormatter().printHelp(""String_Node_Str"",options);
    return;
  }
  Env env=new Env(cmd);
  Configurator conf=env.getConfigurator();
  List<LinkMatcher> linkMatchers=LinkMatcher.getListByNames(conf.getConf().get().getStringList(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str"")) {
    linkMatchers=new ArrayList<LinkMatcher>();
    for (    String name : cmd.getOptionValues(""String_Node_Str"")) {
      LinkMatcher matcher=LinkMatcher.getByName(name);
      if (matcher == null) {
        System.err.println(""String_Node_Str"" + name + ""String_Node_Str""+ LinkMatcher.getAllNames().toString());
        System.exit(1);
      }
      linkMatchers.add(matcher);
    }
  }
  LanguageSet languages=env.getLanguages();
  Date getDumpByDate=new Date();
  if (cmd.hasOption(""String_Node_Str"")) {
    try {
      getDumpByDate=stringToDate(cmd.getOptionValue(""String_Node_Str""));
    }
 catch (    java.text.ParseException e) {
      System.err.println(""String_Node_Str"" + cmd.getOptionValue(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str"");
      System.exit(1);
    }
  }
  String filePath=conf.getConf().get().getString(""String_Node_Str"");
  if (cmd.hasOption('o')) {
    filePath=cmd.getOptionValue('o');
  }
  List<String> result=new ArrayList<String>();
  for (  Language language : languages) {
    RequestedLinkGetter requestedLinkGetter=new RequestedLinkGetter(language,linkMatchers,getDumpByDate);
    try {
      Map<String,Multimap<LinkMatcher,DumpLinkInfo>> dumpLinks=requestedLinkGetter.getDumps();
      for (      String dumpDate : dumpLinks.keySet()) {
        for (        LinkMatcher linkMatcher : dumpLinks.get(dumpDate).keySet()) {
          for (          DumpLinkInfo linkInfo : dumpLinks.get(dumpDate).get(linkMatcher)) {
            result.add(linkInfo.getLanguage().getLangCode() + ""String_Node_Str"" + linkInfo.getDate()+ ""String_Node_Str""+ linkInfo.getLinkMatcher().getName()+ ""String_Node_Str""+ linkInfo.getUrl()+ ""String_Node_Str""+ linkInfo.getMd5());
          }
        }
      }
    }
 catch (    WikapidiaException e) {
      System.err.println(e);
    }
  }
  if (!result.isEmpty()) {
    File file=new File(filePath);
    FileUtils.writeLines(file,result,""String_Node_Str"");
  }
}","/** 
 * Parse command line and generate .tsv file containing language code, date of dump, name of file type and link url.
 * @param args command line prompt
 * @throws IOException
 * @throws WikapidiaException
 * @throws ParseException
 */
public static void main(String[] args) throws IOException, WikapidiaException, ParseException, ConfigurationException {
  Options options=new Options();
  options.addOption(new DefaultOptionBuilder().hasArgs().withValueSeparator(',').withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + new Configuration().get().getStringList(""String_Node_Str"")).create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  Env.addStandardOptions(options);
  CommandLineParser parser=new PosixParser();
  CommandLine cmd;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  org.apache.commons.cli.ParseException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    new HelpFormatter().printHelp(""String_Node_Str"",options);
    return;
  }
  Env env=new Env(cmd);
  Configurator conf=env.getConfigurator();
  List<LinkMatcher> linkMatchers=LinkMatcher.getListByNames(conf.getConf().get().getStringList(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str"")) {
    linkMatchers=new ArrayList<LinkMatcher>();
    for (    String name : cmd.getOptionValues(""String_Node_Str"")) {
      LinkMatcher matcher=LinkMatcher.getByName(name);
      if (matcher == null) {
        System.err.println(""String_Node_Str"" + name + ""String_Node_Str""+ LinkMatcher.getAllNames().toString());
        System.exit(1);
      }
      linkMatchers.add(matcher);
    }
  }
  LanguageSet languages=env.getLanguages();
  Date getDumpByDate=new Date();
  if (cmd.hasOption(""String_Node_Str"")) {
    try {
      getDumpByDate=stringToDate(cmd.getOptionValue(""String_Node_Str""));
    }
 catch (    java.text.ParseException e) {
      System.err.println(""String_Node_Str"" + cmd.getOptionValue(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str"");
      System.exit(1);
    }
  }
  String filePath=conf.getConf().get().getString(""String_Node_Str"");
  if (cmd.hasOption('o')) {
    filePath=cmd.getOptionValue('o');
  }
  List<String> result=new ArrayList<String>();
  for (  Language language : languages) {
    RequestedLinkGetter requestedLinkGetter=new RequestedLinkGetter(language,linkMatchers,getDumpByDate);
    try {
      Map<String,Multimap<LinkMatcher,DumpLinkInfo>> dumpLinks=requestedLinkGetter.getDumps();
      for (      String dumpDate : dumpLinks.keySet()) {
        for (        LinkMatcher linkMatcher : dumpLinks.get(dumpDate).keySet()) {
          for (          DumpLinkInfo linkInfo : dumpLinks.get(dumpDate).get(linkMatcher)) {
            result.add(linkInfo.getLanguage().getLangCode() + ""String_Node_Str"" + linkInfo.getDate()+ ""String_Node_Str""+ linkInfo.getLinkMatcher().getName()+ ""String_Node_Str""+ linkInfo.getCounter()+ ""String_Node_Str""+ linkInfo.getUrl()+ ""String_Node_Str""+ linkInfo.getMd5());
          }
        }
      }
    }
 catch (    WikapidiaException e) {
      System.err.println(e);
    }
  }
  if (!result.isEmpty()) {
    File file=new File(filePath);
    FileUtils.writeLines(file,result,""String_Node_Str"");
  }
}"
53054,"@Override public void beginLoad() throws DaoException {
  executeSqlScriptWithSuffix(""String_Node_Str"");
  executeSqlScriptWithSuffix(""String_Node_Str"");
}","@Override public void beginLoad() throws DaoException {
  executeSqlScriptWithSuffix(""String_Node_Str"");
  executeSqlScriptWithSuffix(""String_Node_Str"");
  loader=new FastLoader(ds,fields);
}"
53055,"/** 
 * @param dataSource Data source for jdbc connections
 * @param fields Ordered list of fields for inserts into the database.
 * @param sqlScriptPrefix The prefix used to find sql scripts in the class path(e.g. ""/db/raw-page""). This class will append ""-create-tables.sql"", ""-create-indexes.sql"", ""-drop-tables.sql"", and ""-drop-indexes.sql"" to the prefix to find sql scripts, and they all must exist. The create-tables script must ONLY create the table for the dao because it is used by the fast loader.
 * @throws DaoException
 */
public AbstractSqlDao(DataSource dataSource,TableField[] fields,String sqlScriptPrefix) throws DaoException {
  ds=dataSource;
  Connection conn=null;
  try {
    conn=ds.getConnection();
    this.dialect=JooqUtils.dialect(conn);
  }
 catch (  SQLException e) {
    throw new DaoException(e);
  }
 finally {
    quietlyCloseConn(conn);
  }
  cache=null;
  this.fields=fields;
  this.sqlScriptPrefix=sqlScriptPrefix;
  loader=new FastLoader(ds,fields);
}","/** 
 * @param dataSource Data source for jdbc connections
 * @param fields Ordered list of fields for inserts into the database.
 * @param sqlScriptPrefix The prefix used to find sql scripts in the class path(e.g. ""/db/raw-page""). This class will append ""-create-tables.sql"", ""-create-indexes.sql"", ""-drop-tables.sql"", and ""-drop-indexes.sql"" to the prefix to find sql scripts, and they all must exist. The create-tables script must ONLY create the table for the dao because it is used by the fast loader.
 * @throws DaoException
 */
public AbstractSqlDao(DataSource dataSource,TableField[] fields,String sqlScriptPrefix) throws DaoException {
  ds=dataSource;
  Connection conn=null;
  try {
    conn=ds.getConnection();
    this.dialect=JooqUtils.dialect(conn);
  }
 catch (  SQLException e) {
    throw new DaoException(e);
  }
 finally {
    quietlyCloseConn(conn);
  }
  cache=null;
  this.fields=fields;
  this.sqlScriptPrefix=sqlScriptPrefix;
}"
53056,"public ESAMetric(Language language) throws WikapidiaException {
  this.language=language;
  searcher=new LuceneSearcher(new LanguageSet(language.getLangCode()),LuceneOptions.getDefaultOptions());
}","public ESAMetric(Language language){
  this.language=language;
  searcher=new LuceneSearcher(new LanguageSet(language.getLangCode()),LuceneOptions.getDefaultOptions());
}"
53057,"/** 
 * Get concept vector of a local page with a specified language.
 * @param localPage
 * @param language
 * @return
 * @throws DaoException
 */
public TIntDoubleHashMap getConceptVector(LocalPage localPage,Language language) throws DaoException {
  QueryBuilder queryBuilder=new QueryBuilder(language,searcher.getOptions());
  ScoreDoc[] scoreDocs=searcher.search(queryBuilder.getLocalPageConceptQuery(localPage),language);
  TIntDoubleHashMap result=SimUtils.normalizeVector(expandScores(scoreDocs));
  return result;
}","/** 
 * Get concept vector of a local page with a specified language.
 * @param localPage
 * @param language
 * @return
 * @throws DaoException
 */
public TIntDoubleHashMap getConceptVector(LocalPage localPage,Language language) throws DaoException {
  QueryBuilder queryBuilder=new QueryBuilder(language,searcher.getOptions());
  ScoreDoc[] scoreDocs=searcher.search(queryBuilder.getLocalPageConceptQuery(localPage),language);
  return SimUtils.normalizeVector(expandScores(scoreDocs));
}"
53058,"@Override public SRResultList mostSimilar(LocalPage localPage,int maxResults,boolean explanations,TIntSet validIds) throws DaoException, WikapidiaException {
  return null;
}","@Override public SRResultList mostSimilar(LocalPage localPage,int maxResults,boolean explanations,TIntSet validIds) throws DaoException {
  return null;
}"
53059,"public void endLoad() throws DaoException {
  if (dialect == SQLDialect.H2) {
    loadH2();
  }
 else {
    loadGeneric();
  }
}","public void endLoad() throws DaoException {
  try {
    writer.close();
  }
 catch (  IOException e) {
    throw new DaoException(e);
  }
  if (dialect == SQLDialect.H2) {
    loadH2();
  }
 else {
    loadGeneric();
  }
}"
53060,"public static void main(String args[]) throws ConfigurationException, DaoException {
  Language lang=Language.getByLangCode(""String_Node_Str"");
  Configurator c=new Configurator(new Configuration());
  PhraseAnalyzer pa=c.get(PhraseAnalyzer.class,""String_Node_Str"");
  Disambiguator disambiguator=new TopResultDisambiguator(pa);
  LocalLinkDao localLinkDao=c.get(LocalLinkDao.class);
  LocalPageDao localPageDao=c.get(LocalPageDao.class);
  BaseLocalSRMetric sr=new MilneWittenInLinkSimilarity(disambiguator,localLinkDao,localPageDao);
  String string1=""String_Node_Str"";
  String string2=""String_Node_Str"";
  String string3=""String_Node_Str"";
  String string4=""String_Node_Str"";
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string2,lang,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string3,lang,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string4,lang,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string1,lang,true));
  LocalPage page1=localPageDao.getByTitle(lang,new Title(string1,lang),NameSpace.ARTICLE);
  System.out.println(page1.getTitle());
  LocalPage page2=localPageDao.getByTitle(lang,new Title(string2,lang),NameSpace.ARTICLE);
  System.out.println(page2.getTitle());
  LocalPage page3=localPageDao.getByTitle(lang,new Title(string3,lang),NameSpace.ARTICLE);
  System.out.println(page3.getTitle());
  LocalPage page4=localPageDao.getByTitle(lang,new Title(string4,lang),NameSpace.ARTICLE);
  System.out.println(page4.getTitle());
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page2,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page3,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page4,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page1,true));
}","public static void main(String args[]) throws ConfigurationException, DaoException {
  Language lang=Language.getByLangCode(""String_Node_Str"");
  Configurator c=new Configurator(new Configuration());
  PhraseAnalyzer pa=c.get(PhraseAnalyzer.class,""String_Node_Str"");
  Disambiguator disambiguator=new TopResultDisambiguator(pa);
  LocalLinkDao localLinkDao=c.get(LocalLinkDao.class);
  LocalPageDao localPageDao=c.get(LocalPageDao.class);
  BaseLocalSRMetric sr=new MilneWittenSimilarity(disambiguator,localLinkDao,localPageDao,true);
  String string1=""String_Node_Str"";
  String string2=""String_Node_Str"";
  String string3=""String_Node_Str"";
  String string4=""String_Node_Str"";
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string2,lang,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string3,lang,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string4,lang,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string1,lang,true));
  LocalPage page1=localPageDao.getByTitle(lang,new Title(string1,lang),NameSpace.ARTICLE);
  System.out.println(page1.getTitle());
  LocalPage page2=localPageDao.getByTitle(lang,new Title(string2,lang),NameSpace.ARTICLE);
  System.out.println(page2.getTitle());
  LocalPage page3=localPageDao.getByTitle(lang,new Title(string3,lang),NameSpace.ARTICLE);
  System.out.println(page3.getTitle());
  LocalPage page4=localPageDao.getByTitle(lang,new Title(string4,lang),NameSpace.ARTICLE);
  System.out.println(page4.getTitle());
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page2,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page3,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page4,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page1,true));
}"
53061,"@Override public SRResult similarity(String phrase1,String phrase2,Language language,boolean explanations){
  return null;
}","@Override public SRResult similarity(LocalPage page1,LocalPage page2,boolean explanations) throws DaoException {
  if (page1.getLanguage() != page2.getLanguage()) {
    return new SRResult(Double.NaN);
  }
  TIntSet A=getLinks(new LocalId(page1.getLanguage(),page1.getLocalId()));
  TIntSet B=getLinks(new LocalId(page2.getLanguage(),page2.getLocalId()));
  if (A == null || B == null) {
    return new SRResult(Double.NaN);
  }
  TIntSet I=new TIntHashSet(A);
  I.retainAll(B);
  DaoFilter pageFilter=new DaoFilter().setLanguages(page1.getLanguage());
  Iterable<LocalPage> allPages=pageHelper.get(pageFilter);
  int numArticles=0;
  for (  LocalPage page : allPages) {
    numArticles++;
  }
  if (I.size() == 0) {
    return new SRResult(0.0);
  }
  SRResult result=new SRResult(1.0 - ((Math.log(Math.max(A.size(),B.size())) - Math.log(I.size())) / (Math.log(numArticles) - Math.log(Math.min(A.size(),B.size())))));
  if (explanations) {
    if (outLinks) {
      for (      int id : I.toArray()) {
        String format=""String_Node_Str"";
        LocalPage intersectionPage=pageHelper.getById(page1.getLanguage(),id);
        if (intersectionPage == null) {
          continue;
        }
        List<LocalPage> formatPages=new ArrayList<LocalPage>();
        formatPages.add(page1);
        formatPages.add(page2);
        formatPages.add(intersectionPage);
        Explanation explanation=new Explanation(format,formatPages);
        result.addExplanation(explanation);
      }
    }
 else {
      for (      int id : I.toArray()) {
        String format=""String_Node_Str"";
        LocalPage intersectionPage=pageHelper.getById(page1.getLanguage(),id);
        if (intersectionPage == null) {
          continue;
        }
        List<LocalPage> formatPages=new ArrayList<LocalPage>();
        formatPages.add(intersectionPage);
        formatPages.add(page1);
        formatPages.add(page2);
        Explanation explanation=new Explanation(format,formatPages);
        result.addExplanation(explanation);
      }
    }
  }
  return result;
}"
53062,"public static void main(String args[]) throws ConfigurationException, DaoException {
  Language lang=Language.getByLangCode(""String_Node_Str"");
  Configurator c=new Configurator(new Configuration());
  PhraseAnalyzer pa=c.get(PhraseAnalyzer.class,""String_Node_Str"");
  Disambiguator disambiguator=new TopResultDisambiguator(pa);
  LocalLinkDao localLinkDao=c.get(LocalLinkDao.class);
  LocalPageDao localPageDao=c.get(LocalPageDao.class);
  BaseLocalSRMetric sr=new MilneWittenInLinkSimilarity(disambiguator,localLinkDao,localPageDao);
  String string1=""String_Node_Str"";
  String string2=""String_Node_Str"";
  String string3=""String_Node_Str"";
  String string4=""String_Node_Str"";
  printResult(sr.similarity(string1,string2,lang,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string3,lang,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string4,lang,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string1,lang,true));
  LocalPage page1=localPageDao.getByTitle(lang,new Title(string1,lang),NameSpace.ARTICLE);
  System.out.println(page1.getTitle());
  LocalPage page2=localPageDao.getByTitle(lang,new Title(string2,lang),NameSpace.ARTICLE);
  System.out.println(page2.getTitle());
  LocalPage page3=localPageDao.getByTitle(lang,new Title(string3,lang),NameSpace.ARTICLE);
  System.out.println(page3.getTitle());
  LocalPage page4=localPageDao.getByTitle(lang,new Title(string4,lang),NameSpace.ARTICLE);
  System.out.println(page4.getTitle());
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page2,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page3,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page4,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page1,true));
}","public static void main(String args[]) throws ConfigurationException, DaoException {
  Language lang=Language.getByLangCode(""String_Node_Str"");
  Configurator c=new Configurator(new Configuration());
  PhraseAnalyzer pa=c.get(PhraseAnalyzer.class,""String_Node_Str"");
  Disambiguator disambiguator=new TopResultDisambiguator(pa);
  LocalLinkDao localLinkDao=c.get(LocalLinkDao.class);
  LocalPageDao localPageDao=c.get(LocalPageDao.class);
  BaseLocalSRMetric sr=new MilneWittenInLinkSimilarity(disambiguator,localLinkDao,localPageDao);
  String string1=""String_Node_Str"";
  String string2=""String_Node_Str"";
  String string3=""String_Node_Str"";
  String string4=""String_Node_Str"";
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string2,lang,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string3,lang,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string4,lang,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(string1,string1,lang,true));
  LocalPage page1=localPageDao.getByTitle(lang,new Title(string1,lang),NameSpace.ARTICLE);
  System.out.println(page1.getTitle());
  LocalPage page2=localPageDao.getByTitle(lang,new Title(string2,lang),NameSpace.ARTICLE);
  System.out.println(page2.getTitle());
  LocalPage page3=localPageDao.getByTitle(lang,new Title(string3,lang),NameSpace.ARTICLE);
  System.out.println(page3.getTitle());
  LocalPage page4=localPageDao.getByTitle(lang,new Title(string4,lang),NameSpace.ARTICLE);
  System.out.println(page4.getTitle());
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page2,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page3,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page4,true));
  System.out.println(""String_Node_Str"");
  printResult(sr.similarity(page1,page1,true));
}"
53063,"protected TLongIntHashMap buildTitlesToIds() throws DaoException {
  Connection conn=null;
  try {
    if (cache != null) {
      String[] dependsOn=(redirectSqlDao == null) ? new String[]{Tables.LOCAL_PAGE.getName()} : new String[]{Tables.LOCAL_PAGE.getName(),Tables.REDIRECT.getName()};
      TLongIntHashMap map=(TLongIntHashMap)cache.get(""String_Node_Str"",dependsOn);
      if (map != null) {
        return map;
      }
    }
    conn=ds.getConnection();
    DSLContext context=DSL.using(conn,dialect);
    Cursor<Record> cursor=context.select().from(Tables.LOCAL_PAGE).fetchLazy();
    TLongIntHashMap map=new TLongIntHashMap(Constants.DEFAULT_CAPACITY,Constants.DEFAULT_LOAD_FACTOR,-1,-1);
    int numRedirects=0;
    int numResolved=0;
    for (    Record record : cursor) {
      long hash=hashTitle(record.getValue(Tables.LOCAL_PAGE.TITLE),record.getValue(Tables.LOCAL_PAGE.LANG_ID),record.getValue(Tables.LOCAL_PAGE.NAME_SPACE));
      if (redirectSqlDao != null && record.getValue(Tables.LOCAL_PAGE.IS_REDIRECT)) {
        numRedirects++;
        Integer dest=redirectSqlDao.resolveRedirect(Language.getById(record.getValue(Tables.LOCAL_PAGE.LANG_ID)),record.getValue(Tables.LOCAL_PAGE.PAGE_ID));
        if (dest != null) {
          numResolved++;
          map.put(hash,dest);
        }
      }
 else {
        map.put(hash,record.getValue(Tables.LOCAL_PAGE.PAGE_ID));
      }
    }
    LOG.info(""String_Node_Str"" + numResolved + ""String_Node_Str""+ numRedirects+ ""String_Node_Str"");
    if (cache != null) {
      cache.saveToCache(""String_Node_Str"",map);
    }
    return map;
  }
 catch (  SQLException e) {
    throw new DaoException(e);
  }
 finally {
    quietlyCloseConn(conn);
  }
}","protected TLongIntHashMap buildTitlesToIds() throws DaoException {
  Connection conn=null;
  try {
    if (cache != null) {
      String[] dependsOn=(redirectSqlDao == null) ? new String[]{Tables.LOCAL_PAGE.getName()} : new String[]{Tables.LOCAL_PAGE.getName(),Tables.REDIRECT.getName()};
      TLongIntHashMap map=(TLongIntHashMap)cache.get(""String_Node_Str"",dependsOn);
      if (map != null) {
        return map;
      }
    }
    conn=ds.getConnection();
    DSLContext context=DSL.using(conn,dialect);
    Cursor<Record> cursor=context.select().from(Tables.LOCAL_PAGE).fetchLazy();
    TLongIntHashMap map=new TLongIntHashMap(Constants.DEFAULT_CAPACITY,Constants.DEFAULT_LOAD_FACTOR,-1,-1);
    int numRedirects=0;
    int numResolved=0;
    for (    Record record : cursor) {
      String title=record.getValue(Tables.LOCAL_PAGE.TITLE);
      int lang_id=record.getValue(Tables.LOCAL_PAGE.LANG_ID);
      int ns_id=record.getValue(Tables.LOCAL_PAGE.NAME_SPACE);
      long hash=hashTitle(record.getValue(Tables.LOCAL_PAGE.TITLE),record.getValue(Tables.LOCAL_PAGE.LANG_ID),record.getValue(Tables.LOCAL_PAGE.NAME_SPACE));
      if (redirectSqlDao != null && record.getValue(Tables.LOCAL_PAGE.IS_REDIRECT)) {
        numRedirects++;
        Integer dest=redirectSqlDao.resolveRedirect(Language.getById(record.getValue(Tables.LOCAL_PAGE.LANG_ID)),record.getValue(Tables.LOCAL_PAGE.PAGE_ID));
        if (dest != null) {
          numResolved++;
          map.put(hash,dest);
        }
      }
 else {
        map.put(hash,record.getValue(Tables.LOCAL_PAGE.PAGE_ID));
      }
    }
    LOG.info(""String_Node_Str"" + numResolved + ""String_Node_Str""+ numRedirects+ ""String_Node_Str"");
    if (cache != null) {
      cache.saveToCache(""String_Node_Str"",map);
    }
    return map;
  }
 catch (  SQLException e) {
    throw new DaoException(e);
  }
 finally {
    quietlyCloseConn(conn);
  }
}"
53064,"public int getIdByTitle(String title,Language language,NameSpace nameSpace) throws DaoException {
  if (titlesToIds == null) {
    titlesToIds=buildTitlesToIds();
  }
  return titlesToIds.get(hashTitle(title,language.getId(),nameSpace.ordinal()));
}","public int getIdByTitle(String title,Language language,NameSpace nameSpace) throws DaoException {
  if (titlesToIds == null) {
    titlesToIds=buildTitlesToIds();
  }
  long i=hashTitle(title,language.getId(),nameSpace.getArbitraryId());
  return titlesToIds.get(hashTitle(title,language.getId(),nameSpace.getArbitraryId()));
}"
53065,"@Override public Iterator<E> iterator(){
  if (usedUp) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  usedUp=true;
  return new Iterator<E>(){
    Iterator<Record> recordIterator=result.iterator();
    boolean finished=false;
    @Override public boolean hasNext(){
      if (!finished) {
        finished=recordIterator.hasNext();
        if (!finished) {
          result.close();
        }
      }
      return finished;
    }
    @Override public E next(){
      if (finished) {
        return null;
      }
      Record r=recordIterator.next();
      if (r == null) {
        finished=true;
        result.close();
        return null;
      }
      return transform(r);
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}","@Override public Iterator<E> iterator(){
  if (usedUp) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  usedUp=true;
  return new Iterator<E>(){
    Iterator<Record> recordIterator=result.iterator();
    boolean finished=false;
    @Override public boolean hasNext(){
      if (!finished) {
        finished=!recordIterator.hasNext();
        if (finished) {
          result.close();
        }
      }
      return !finished;
    }
    @Override public E next(){
      if (finished) {
        return null;
      }
      Record r=recordIterator.next();
      if (r == null) {
        finished=true;
        result.close();
        return null;
      }
      return transform(r);
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}"
53066,"@Override public boolean hasNext(){
  if (!finished) {
    finished=recordIterator.hasNext();
    if (!finished) {
      result.close();
    }
  }
  return finished;
}","@Override public boolean hasNext(){
  if (!finished) {
    finished=!recordIterator.hasNext();
    if (finished) {
      result.close();
    }
  }
  return !finished;
}"
53067,"private void loadRedirectIdsIntoMemory(Language language) throws DaoException {
  RedirectParser redirectParser=new RedirectParser(language);
  redirectIdsToPageIds=new TIntIntHashMap(Constants.DEFAULT_CAPACITY,Constants.DEFAULT_LOAD_FACTOR,-1,-1);
  SqlDaoIterable<RawPage> redirectPages=rawPages.getAllRedirects(language);
  int i=0;
  System.out.println(""String_Node_Str"");
  for (  RawPage p : redirectPages) {
    Title pTitle=new Title(p.getRedirectTitle(),LanguageInfo.getByLanguage(language));
    redirectIdsToPageIds.put(p.getPageId(),localPages.getIdByTitle(pTitle.getCanonicalTitle(),language,pTitle.getNamespace()));
    if (i % 1000 == 0)     System.out.println(""String_Node_Str"" + i);
    i++;
  }
  System.out.println(""String_Node_Str"");
}","private void loadRedirectIdsIntoMemory(Language language) throws DaoException {
  RedirectParser redirectParser=new RedirectParser(language);
  redirectIdsToPageIds=new TIntIntHashMap(Constants.DEFAULT_CAPACITY,Constants.DEFAULT_LOAD_FACTOR,-1,-1);
  int i=0;
  System.out.println(""String_Node_Str"");
  for (  RawPage p : rawPages.getAllRedirects(language)) {
    if (p == null) {
    }
    Title pTitle=new Title(p.getRedirectTitle(),LanguageInfo.getByLanguage(language));
    redirectIdsToPageIds.put(p.getPageId(),localPages.getIdByTitle(pTitle.getCanonicalTitle(),language,pTitle.getNamespace()));
    if (i % 1000 == 0)     System.out.println(""String_Node_Str"" + i);
    i++;
  }
  System.out.println(""String_Node_Str"");
}"
53068,"public static void main(String args[]) throws ClassNotFoundException, SQLException, IOException, ConfigurationException, WikapidiaException, DaoException {
  Options options=new Options();
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArgs().withValueSeparator(',').withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + new Configuration().get().getStringList(""String_Node_Str"")).create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  CommandLineParser parser=new PosixParser();
  CommandLine cmd;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    new HelpFormatter().printHelp(""String_Node_Str"",options);
    return;
  }
  File pathConf=cmd.hasOption('c') ? new File(cmd.getOptionValue('c')) : null;
  Configurator conf=new Configurator(new Configuration(pathConf));
  List<String> langCodes;
  if (cmd.hasOption(""String_Node_Str"")) {
    langCodes=Arrays.asList(cmd.getOptionValues(""String_Node_Str""));
  }
 else {
    langCodes=conf.getConf().get().getStringList(""String_Node_Str"");
  }
  LanguageSet languages;
  try {
    languages=new LanguageSet(langCodes);
  }
 catch (  IllegalArgumentException e) {
    String langs=""String_Node_Str"";
    for (    Language language : Language.LANGUAGES) {
      langs+=""String_Node_Str"" + language.getLangCode();
    }
    langs=langs.substring(1);
    System.err.println(e.toString() + ""String_Node_Str"" + langs);
    System.exit(1);
    return;
  }
  int algorithmId=conf.getConf().get().getInt(""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str"")) {
    String algorithm=cmd.getOptionValue(""String_Node_Str"");
    algorithmId=conf.getConf().get().getInt(""String_Node_Str"" + algorithm + ""String_Node_Str"");
  }
  LocalLinkDao localLinkDao=conf.get(LocalLinkDao.class);
  UniversalPageDao universalPageDao=conf.get(UniversalPageDao.class);
  UniversalLinkDao universalLinkDao=conf.get(UniversalLinkDao.class);
  UniversalLinkLoader loader=new UniversalLinkLoader(languages,localLinkDao,universalPageDao,universalLinkDao);
  if (cmd.hasOption(""String_Node_Str"")) {
    LOG.log(Level.INFO,""String_Node_Str"");
    universalLinkDao.beginLoad();
  }
  loader.loadLinkMap(algorithmId);
  if (cmd.hasOption(""String_Node_Str"")) {
    LOG.log(Level.INFO,""String_Node_Str"");
    universalLinkDao.endLoad();
  }
  LOG.log(Level.INFO,""String_Node_Str"");
}","public static void main(String args[]) throws ClassNotFoundException, SQLException, IOException, ConfigurationException, WikapidiaException, DaoException {
  Options options=new Options();
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArgs().withValueSeparator(',').withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + new Configuration().get().getStringList(""String_Node_Str"")).create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  CommandLineParser parser=new PosixParser();
  CommandLine cmd;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    new HelpFormatter().printHelp(""String_Node_Str"",options);
    return;
  }
  File pathConf=cmd.hasOption('c') ? new File(cmd.getOptionValue('c')) : null;
  Configurator conf=new Configurator(new Configuration(pathConf));
  List<String> langCodes;
  if (cmd.hasOption(""String_Node_Str"")) {
    langCodes=Arrays.asList(cmd.getOptionValues(""String_Node_Str""));
  }
 else {
    langCodes=conf.getConf().get().getStringList(""String_Node_Str"");
  }
  LanguageSet languages;
  try {
    languages=new LanguageSet(langCodes);
  }
 catch (  IllegalArgumentException e) {
    String langs=""String_Node_Str"";
    for (    Language language : Language.LANGUAGES) {
      langs+=""String_Node_Str"" + language.getLangCode();
    }
    langs=langs.substring(1);
    System.err.println(e.toString() + ""String_Node_Str"" + langs);
    System.exit(1);
    return;
  }
  String algorithm=conf.getConf().get().getString(""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str"")) {
    algorithm=cmd.getOptionValue(""String_Node_Str"");
  }
  int algorithmId=conf.getConf().get().getInt(""String_Node_Str"" + algorithm + ""String_Node_Str"");
  LocalLinkDao localLinkDao=conf.get(LocalLinkDao.class);
  UniversalPageDao universalPageDao=conf.get(UniversalPageDao.class);
  UniversalLinkDao universalLinkDao=conf.get(UniversalLinkDao.class);
  UniversalLinkLoader loader=new UniversalLinkLoader(languages,localLinkDao,universalPageDao,universalLinkDao);
  if (cmd.hasOption(""String_Node_Str"")) {
    LOG.log(Level.INFO,""String_Node_Str"");
    universalLinkDao.beginLoad();
  }
  loader.loadLinkMap(algorithmId);
  if (cmd.hasOption(""String_Node_Str"")) {
    LOG.log(Level.INFO,""String_Node_Str"");
    universalLinkDao.endLoad();
  }
  LOG.log(Level.INFO,""String_Node_Str"");
}"
53069,"public static void main(String args[]) throws ClassNotFoundException, SQLException, IOException, ConfigurationException, WikapidiaException, DaoException {
  Options options=new Options();
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  CommandLineParser parser=new PosixParser();
  CommandLine cmd;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    new HelpFormatter().printHelp(""String_Node_Str"",options);
    return;
  }
  File pathConf=cmd.hasOption(""String_Node_Str"") ? new File(cmd.getOptionValue('c')) : null;
  Configurator conf=new Configurator(new Configuration(pathConf));
  LanguageSet languages=LanguageSet.getSetOfAllLanguages();
  if (cmd.hasOption(""String_Node_Str"")) {
    String[] langCodes=cmd.getOptionValues(""String_Node_Str"");
    Collection<Language> langs=new ArrayList<Language>();
    for (    String langCode : langCodes) {
      langs.add(Language.getByLangCode(langCode));
    }
    languages=new LanguageSet(langs);
  }
  String algorithm=null;
  if (cmd.hasOption(""String_Node_Str"")) {
    algorithm=cmd.getOptionValue(""String_Node_Str"");
  }
  LocalLinkDao localLinkDao=conf.get(LocalLinkDao.class);
  UniversalPageDao universalPageDao=conf.get(UniversalPageDao.class);
  UniversalLinkDao universalLinkDao=conf.get(UniversalLinkDao.class);
  ConceptMapper mapper=conf.get(ConceptMapper.class,algorithm);
  final UniversalLinkLoader loader=new UniversalLinkLoader(languages,localLinkDao,universalPageDao,universalLinkDao);
  if (cmd.hasOption(""String_Node_Str"")) {
    localLinkDao.beginLoad();
    universalPageDao.beginLoad();
    universalLinkDao.beginLoad();
    System.out.println(""String_Node_Str"");
  }
  loader.loadLinkMap(mapper.getId());
  if (cmd.hasOption(""String_Node_Str"")) {
    localLinkDao.endLoad();
    universalPageDao.endLoad();
    universalLinkDao.endLoad();
    System.out.println(""String_Node_Str"");
  }
}","public static void main(String args[]) throws ClassNotFoundException, SQLException, IOException, ConfigurationException, WikapidiaException, DaoException {
  Options options=new Options();
  options.addOption(new DefaultOptionBuilder().hasArg().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.addOption(new DefaultOptionBuilder().withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str""));
  CommandLineParser parser=new PosixParser();
  CommandLine cmd;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    new HelpFormatter().printHelp(""String_Node_Str"",options);
    return;
  }
  File pathConf=cmd.hasOption(""String_Node_Str"") ? new File(cmd.getOptionValue('c')) : null;
  Configurator conf=new Configurator(new Configuration(pathConf));
  LanguageSet languages=LanguageSet.getSetOfAllLanguages();
  if (cmd.hasOption(""String_Node_Str"")) {
    String[] langCodes=cmd.getOptionValues(""String_Node_Str"");
    Collection<Language> langs=new ArrayList<Language>();
    for (    String langCode : langCodes) {
      langs.add(Language.getByLangCode(langCode));
    }
    languages=new LanguageSet(langs);
  }
  String algorithm=null;
  if (cmd.hasOption(""String_Node_Str"")) {
    algorithm=cmd.getOptionValue(""String_Node_Str"");
  }
  LocalLinkDao localLinkDao=conf.get(LocalLinkDao.class);
  UniversalPageDao universalPageDao=conf.get(UniversalPageDao.class);
  UniversalLinkDao universalLinkDao=conf.get(UniversalLinkDao.class);
  ConceptMapper mapper=conf.get(ConceptMapper.class,algorithm);
  final UniversalLinkLoader loader=new UniversalLinkLoader(languages,localLinkDao,universalPageDao,universalLinkDao);
  if (cmd.hasOption(""String_Node_Str"")) {
    universalLinkDao.beginLoad();
    System.out.println(""String_Node_Str"");
  }
  loader.loadLinkMap(mapper.getId());
  if (cmd.hasOption(""String_Node_Str"")) {
    universalLinkDao.endLoad();
    System.out.println(""String_Node_Str"");
  }
}"
53070,"@Test public void TestCategory() throws ClassNotFoundException, IOException, SQLException, DaoException {
  Class.forName(""String_Node_Str"");
  File tmpDir=File.createTempFile(""String_Node_Str"",null);
  tmpDir.delete();
  tmpDir.deleteOnExit();
  tmpDir.mkdirs();
  BoneCPDataSource ds=new BoneCPDataSource();
  ds.setJdbcUrl(""String_Node_Str"" + new File(tmpDir,""String_Node_Str"").getAbsolutePath());
  ds.setUsername(""String_Node_Str"");
  ds.setPassword(""String_Node_Str"");
  Multimap<Language,LocalCategory> map=HashMultimap.create();
  LocalCategorySqlDao localDao=new LocalCategorySqlDao(ds);
  localDao.beginLoad();
  for (  Language language : Language.LANGUAGES) {
    LocalCategory temp=new LocalCategory(language,language.hashCode(),new Title(language.getEnLangName(),LanguageInfo.getByLanguage(language)));
    map.put(language,temp);
    localDao.save(temp);
  }
  localDao.endLoad();
  UniversalPage page=new UniversalCategory(23,0,map);
  UniversalCategorySqlDao dao=new UniversalCategorySqlDao(ds);
  dao.beginLoad();
  dao.save(page);
  dao.endLoad();
  UniversalPage savedPage=dao.getById(23,0);
  assert(savedPage != null);
  assert(page.equals(savedPage));
  assert(page.getNumberOfPages() == savedPage.getNumberOfPages());
  assert(page.getLanguageSetOfExistsInLangs().equals(savedPage.getLanguageSetOfExistsInLangs()));
  assert(page.getClarity() == savedPage.getClarity());
  List<Integer> pageIds=new ArrayList<Integer>();
  pageIds.add(23);
  Map<Integer,UniversalCategory> pages=dao.getByIds(pageIds,0);
  assert(pages.size() == 1);
  assert(pages.get(23).equals(page));
  assert(pages.get(23).equals(savedPage));
}","@Test public void TestCategory() throws ClassNotFoundException, IOException, SQLException, DaoException {
  Class.forName(""String_Node_Str"");
  File tmpDir=File.createTempFile(""String_Node_Str"",null);
  tmpDir.delete();
  tmpDir.deleteOnExit();
  tmpDir.mkdirs();
  BoneCPDataSource ds=new BoneCPDataSource();
  ds.setJdbcUrl(""String_Node_Str"" + new File(tmpDir,""String_Node_Str"").getAbsolutePath());
  ds.setUsername(""String_Node_Str"");
  ds.setPassword(""String_Node_Str"");
  Multimap<Language,LocalCategory> map=HashMultimap.create();
  LocalCategorySqlDao localDao=new LocalCategorySqlDao(ds);
  localDao.beginLoad();
  for (  Language language : Language.LANGUAGES) {
    LocalCategory temp=new LocalCategory(language,language.hashCode(),new Title(language.getEnLangName(),LanguageInfo.getByLanguage(language)));
    map.put(language,temp);
    localDao.save(temp);
  }
  localDao.endLoad();
  UniversalPage page=new UniversalCategory(23,0,map);
  UniversalCategorySqlDao dao=new UniversalCategorySqlDao(ds,new LocalCategorySqlDao(ds));
  dao.beginLoad();
  dao.save(page);
  dao.endLoad();
  UniversalPage savedPage=dao.getById(23,0);
  assert(savedPage != null);
  assert(page.equals(savedPage));
  assert(page.getNumberOfPages() == savedPage.getNumberOfPages());
  assert(page.getLanguageSetOfExistsInLangs().equals(savedPage.getLanguageSetOfExistsInLangs()));
  assert(page.getClarity() == savedPage.getClarity());
  List<Integer> pageIds=new ArrayList<Integer>();
  pageIds.add(23);
  Map<Integer,UniversalCategory> pages=dao.getByIds(pageIds,0);
  assert(pages.size() == 1);
  assert(pages.get(23).equals(page));
  assert(pages.get(23).equals(savedPage));
}"
53071,"@Test public void testArticle() throws ClassNotFoundException, IOException, SQLException, DaoException {
  Class.forName(""String_Node_Str"");
  File tmpDir=File.createTempFile(""String_Node_Str"",null);
  tmpDir.delete();
  tmpDir.deleteOnExit();
  tmpDir.mkdirs();
  BoneCPDataSource ds=new BoneCPDataSource();
  ds.setJdbcUrl(""String_Node_Str"" + new File(tmpDir,""String_Node_Str"").getAbsolutePath());
  ds.setUsername(""String_Node_Str"");
  ds.setPassword(""String_Node_Str"");
  Multimap<Language,LocalArticle> map=HashMultimap.create();
  LocalArticleSqlDao localDao=new LocalArticleSqlDao(ds);
  localDao.beginLoad();
  for (  Language language : Language.LANGUAGES) {
    LocalArticle temp=new LocalArticle(language,language.hashCode(),new Title(language.getEnLangName(),LanguageInfo.getByLanguage(language)));
    map.put(language,temp);
    localDao.save(temp);
  }
  localDao.endLoad();
  UniversalPage page=new UniversalArticle(23,0,map);
  UniversalArticleSqlDao dao=new UniversalArticleSqlDao(ds);
  dao.beginLoad();
  dao.save(page);
  dao.endLoad();
  UniversalPage savedPage=dao.getById(23,0);
  assert(savedPage != null);
  assert(page.equals(savedPage));
  assert(page.getNumberOfPages() == savedPage.getNumberOfPages());
  assert(page.getLanguageSetOfExistsInLangs().equals(savedPage.getLanguageSetOfExistsInLangs()));
  assert(page.getClarity() == savedPage.getClarity());
  List<Integer> pageIds=new ArrayList<Integer>();
  pageIds.add(23);
  Map<Integer,UniversalArticle> pages=dao.getByIds(pageIds,0);
  assert(pages.size() == 1);
  assert(pages.get(23).equals(page));
  assert(pages.get(23).equals(savedPage));
}","@Test public void testArticle() throws ClassNotFoundException, IOException, SQLException, DaoException {
  Class.forName(""String_Node_Str"");
  File tmpDir=File.createTempFile(""String_Node_Str"",null);
  tmpDir.delete();
  tmpDir.deleteOnExit();
  tmpDir.mkdirs();
  BoneCPDataSource ds=new BoneCPDataSource();
  ds.setJdbcUrl(""String_Node_Str"" + new File(tmpDir,""String_Node_Str"").getAbsolutePath());
  ds.setUsername(""String_Node_Str"");
  ds.setPassword(""String_Node_Str"");
  Multimap<Language,LocalArticle> map=HashMultimap.create();
  LocalArticleSqlDao localDao=new LocalArticleSqlDao(ds);
  localDao.beginLoad();
  for (  Language language : Language.LANGUAGES) {
    LocalArticle temp=new LocalArticle(language,language.hashCode(),new Title(language.getEnLangName(),LanguageInfo.getByLanguage(language)));
    map.put(language,temp);
    localDao.save(temp);
  }
  localDao.endLoad();
  UniversalPage page=new UniversalArticle(23,0,map);
  UniversalArticleSqlDao dao=new UniversalArticleSqlDao(ds,new LocalArticleSqlDao(ds));
  dao.beginLoad();
  dao.save(page);
  dao.endLoad();
  UniversalPage savedPage=dao.getById(23,0);
  assert(savedPage != null);
  assert(page.equals(savedPage));
  assert(page.getNumberOfPages() == savedPage.getNumberOfPages());
  assert(page.getLanguageSetOfExistsInLangs().equals(savedPage.getLanguageSetOfExistsInLangs()));
  assert(page.getClarity() == savedPage.getClarity());
  List<Integer> pageIds=new ArrayList<Integer>();
  pageIds.add(23);
  Map<Integer,UniversalArticle> pages=dao.getByIds(pageIds,0);
  assert(pages.size() == 1);
  assert(pages.get(23).equals(page));
  assert(pages.get(23).equals(savedPage));
}"
53072,"/** 
 * Creates a configuration using
 * @param file
 */
public Configuration(File file){
  this.config=ConfigFactory.load(file.getAbsolutePath());
}","/** 
 * Creates a configuration using
 * @param file
 */
public Configuration(File file){
  this.config=(file == null) ? ConfigFactory.load() : ConfigFactory.load(file.getAbsolutePath());
}"
53073,"/** 
 * Constructs a new configuration object with the specified configuration.
 * @param conf
 */
public Configurator(Configuration conf) throws ConfigurationException {
  this.conf=conf;
  this.registerProviders();
}","/** 
 * Constructs a new configuration object with the specified configuration.
 * @param conf
 */
public Configurator(Configuration conf) throws ConfigurationException {
  this.conf=conf;
  searchForProviders(null);
}"
53074,"/** 
 * Get a specific named instance of the component with the specified class.
 * @param klass The generic interface or superclass, not the specific implementation.
 * @param name The name of the class as it appears in the config file.
 * @return The requested component.
 */
public Object get(Class klass,String name) throws ConfigurationException {
  if (providers.containsKey(klass)) {
    throw new ConfigurationException(""String_Node_Str"" + klass);
  }
  ProviderSet pset=providers.get(klass);
  String path=pset.path + ""String_Node_Str"" + name;
  if (conf.get().hasPath(path)) {
    throw new ConfigurationException(""String_Node_Str"" + path + ""String_Node_Str"");
  }
  Config config=conf.get().getConfig(path);
  Map<String,Object> cache=components.get(klass);
synchronized (cache) {
    if (cache.containsKey(name)) {
      return cache.get(name);
    }
    for (    Provider p : pset.providers) {
      Object o=p.get(name,klass,config);
      if (o != null) {
        cache.put(name,o);
        return o;
      }
    }
  }
  throw new ConfigurationException(""String_Node_Str"" + pset.providers.size() + ""String_Node_Str""+ ""String_Node_Str""+ klass+ ""String_Node_Str""+ name+ ""String_Node_Str""+ path+ ""String_Node_Str"");
}","/** 
 * Get a specific named instance of the component with the specified class.
 * @param klass The generic interface or superclass, not the specific implementation.
 * @param name The name of the class as it appears in the config file.
 * @return The requested component.
 */
public Object get(Class klass,String name) throws ConfigurationException {
  if (!providers.containsKey(klass)) {
    throw new ConfigurationException(""String_Node_Str"" + klass);
  }
  ProviderSet pset=providers.get(klass);
  String path=pset.path + ""String_Node_Str"" + name;
  if (!conf.get().hasPath(path)) {
    throw new ConfigurationException(""String_Node_Str"" + path + ""String_Node_Str"");
  }
  Config config=conf.get().getConfig(path);
  Map<String,Object> cache=components.get(klass);
synchronized (cache) {
    if (cache.containsKey(name)) {
      return cache.get(name);
    }
    for (    Provider p : pset.providers) {
      Object o=p.get(name,klass,config);
      if (o != null) {
        cache.put(name,o);
        return o;
      }
    }
  }
  throw new ConfigurationException(""String_Node_Str"" + pset.providers.size() + ""String_Node_Str""+ ""String_Node_Str""+ klass+ ""String_Node_Str""+ name+ ""String_Node_Str""+ path+ ""String_Node_Str"");
}"
53075,"/** 
 * Instantiates providers for the component.
 * @param componentPath
 * @return
 * @throws ConfigurationException
 */
private ProviderSet registerProvidersForComponent(String componentPath) throws ConfigurationException {
  ProviderSet pset=new ProviderSet(componentPath);
  for (  String providerClass : conf.get().getStringList(PROVIDER_PATH + ""String_Node_Str"" + componentPath)) {
    try {
      Class<Provider> klass=(Class<Provider>)Class.forName(providerClass);
      Provider provider=ConstructorUtils.invokeConstructor(klass,this,conf);
      if (pset.klass == null)       pset.klass=provider.getType();
      if (!pset.klass.equals(provider.getType())) {
        throw new ConfigurationException(""String_Node_Str"" + componentPath + ""String_Node_Str""+ klass+ ""String_Node_Str""+ pset.klass+ ""String_Node_Str""+ provider.getType());
      }
      pset.providers.add(provider);
    }
 catch (    ClassNotFoundException e) {
      throw new ConfigurationException(""String_Node_Str"" + componentPath,e);
    }
catch (    InvocationTargetException e) {
      throw new ConfigurationException(""String_Node_Str"" + componentPath,e);
    }
catch (    NoSuchMethodException e) {
      throw new ConfigurationException(""String_Node_Str"" + componentPath,e);
    }
catch (    InstantiationException e) {
      throw new ConfigurationException(""String_Node_Str"" + componentPath,e);
    }
catch (    IllegalAccessException e) {
      throw new ConfigurationException(""String_Node_Str"" + componentPath,e);
    }
  }
  return pset;
}","/** 
 * Instantiates providers for the component.
 * @param componentPath
 * @return
 * @throws ConfigurationException
 */
private void registerProvidersForComponent(String componentPath) throws ConfigurationException {
  ProviderSet pset=new ProviderSet(componentPath);
  for (  String providerClass : conf.get().getStringList(PROVIDER_PATH + ""String_Node_Str"" + componentPath)) {
    try {
      Class<Provider> klass=(Class<Provider>)Class.forName(providerClass);
      Provider provider=ConstructorUtils.invokeConstructor(klass,this,conf);
      if (pset.klass == null)       pset.klass=provider.getType();
      if (!pset.klass.equals(provider.getType())) {
        throw new ConfigurationException(""String_Node_Str"" + componentPath + ""String_Node_Str""+ klass+ ""String_Node_Str""+ pset.klass+ ""String_Node_Str""+ provider.getType());
      }
      pset.providers.add(provider);
    }
 catch (    ClassNotFoundException e) {
      throw new ConfigurationException(""String_Node_Str"" + componentPath,e);
    }
catch (    InvocationTargetException e) {
      throw new ConfigurationException(""String_Node_Str"" + componentPath,e);
    }
catch (    NoSuchMethodException e) {
      throw new ConfigurationException(""String_Node_Str"" + componentPath,e);
    }
catch (    InstantiationException e) {
      throw new ConfigurationException(""String_Node_Str"" + componentPath,e);
    }
catch (    IllegalAccessException e) {
      throw new ConfigurationException(""String_Node_Str"" + componentPath,e);
    }
  }
  providers.put(pset.klass,pset);
  components.put(pset.klass,new HashMap<String,Object>());
  LOG.info(""String_Node_Str"" + pset.providers.size() + ""String_Node_Str""+ pset.klass);
}"
53076,"/** 
 * Should return a configured instance of the requested class, or null if it cannot be created by this provider.
 */
public abstract T get(String name,Class klass,Config config);","/** 
 * Should return a configured instance of the requested class, or null if it cannot be created by this provider.
 */
public abstract T get(String name,Class klass,Config config) throws ConfigurationException ;"
53077,"/** 
 * Creates a new provider instance. Concrete implementations must only use this two-argument constructor.
 * @param configurator
 * @param config
 */
public Provider(Configurator configurator,Configuration config){
  this.configurator=configurator;
  this.config=config;
}","/** 
 * Creates a new provider instance. Concrete implementations must only use this two-argument constructor.
 * @param configurator
 * @param config
 */
public Provider(Configurator configurator,Configuration config) throws ConfigurationException {
  this.configurator=configurator;
  this.config=config;
}"
53078,"public String string(){
  String s=""String_Node_Str"";
  for (int i=0; i < 10; i++) {
    s+=chars.charAt(random.nextInt(chars.length()));
  }
  return s;
}","public String string(int min,int max){
  String s=""String_Node_Str"";
  int length=random.nextInt(max);
  length+=min;
  for (int i=0; i < length; i++) {
    s+=chars.charAt(random.nextInt(chars.length()));
  }
  return s;
}"
53079,"public void buildArticleDb(ArticleDao ad) throws IOException, SQLException {
  long time=0, start, stop;
  RandomHelper rh=new RandomHelper();
  for (int i=0; i < numArticles; i++) {
    Article a=new Article(i,rh.string(),rh.ns(),rh.type());
    start=System.currentTimeMillis();
    ad.save(a);
    stop=System.currentTimeMillis();
    time+=stop - start;
  }
  System.out.println(""String_Node_Str"" + (time / 60000) + ""String_Node_Str"");
}","public void buildArticleDb(ArticleDao ad) throws IOException, SQLException {
  long time=0, start, stop;
  RandomHelper rh=new RandomHelper();
  for (int i=0; i < numArticles; i++) {
    Article a=new Article(i,rh.string(titleLength),rh.ns(),rh.type(),rh.string(textMinLength,textMaxLength));
    start=System.currentTimeMillis();
    ad.save(a);
    stop=System.currentTimeMillis();
    time+=stop - start;
  }
  System.out.println(""String_Node_Str"" + (time / 60000) + ""String_Node_Str""+ ((time / 1000) / (long)numArticles)+ ""String_Node_Str"");
}"
53080,"private ArrayList<Article> buildArticles(Result<Record> result){
  ArrayList<Article> articles=new ArrayList<Article>();
  for (  Record record : result) {
    Article a=new Article(record.getValue(Tables.ARTICLE.ID),record.getValue(Tables.ARTICLE.TITLE),Article.NameSpace.intToNS(record.getValue(Tables.ARTICLE.NS)),Article.PageType.values()[record.getValue(Tables.ARTICLE.PTYPE)],record.getValue(Tables.ARTICLE.TEXT));
    articles.add(a);
  }
  return articles;
}","private WikapidiaIterable<Article> buildArticles(Cursor<Record> result){
  return new WikapidiaIterable<Article>(result,new DaoTransformer<Article>(){
    @Override public Article transform(    Record r){
      return buildArticle(r);
    }
  }
);
}"
53081,"public List<Article> query(String title,Article.NameSpace ns) throws SQLException {
  Connection conn=ds.getConnection();
  DSLContext context=DSL.using(conn,SQLDialect.H2);
  Result<Record> result=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.TITLE.likeIgnoreCase(title)).and(Tables.ARTICLE.NS.equal(ns.getValue())).fetch();
  conn.close();
  return buildArticles(result);
}","public WikapidiaIterable<Article> query(String title,Article.NameSpace ns) throws SQLException {
  Connection conn=ds.getConnection();
  DSLContext context=DSL.using(conn,SQLDialect.H2);
  Cursor<Record> result=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.TITLE.likeIgnoreCase(title)).and(Tables.ARTICLE.NS.equal(ns.getValue())).fetchLazy();
  conn.close();
  return buildArticles(result);
}"
53082,"@Override public Iterator<E> iterator(){
  return null;
}","@Override public Iterator<E> iterator(){
  return new Iterator<E>(){
    Iterator<Record> recordIterator=result.iterator();
    @Override public boolean hasNext(){
      return recordIterator.hasNext();
    }
    @Override public E next(){
      return func.transform(recordIterator.next());
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}"
53083,"private ArrayList<Article> buildArticles(Result<Record> result){
  ArrayList<Article> articles=new ArrayList<Article>();
  for (  Record record : result) {
    Article a=new Article(record.getValue(Tables.ARTICLE.ID),record.getValue(Tables.ARTICLE.TITLE),Article.NameSpace.intToNS(record.getValue(Tables.ARTICLE.NS)),Article.PageType.values()[record.getValue(Tables.ARTICLE.PTYPE)],record.getValue(Tables.ARTICLE.TEXT));
    articles.add(a);
  }
  return articles;
}","private WikapidiaIterable<Article> buildArticles(Cursor<Record> result){
  return new WikapidiaIterable<Article>(result,new DaoTransformer<Article>(){
    @Override public Article transform(    Record r){
      return buildArticle(r);
    }
  }
);
}"
53084,"public List<Article> query(String title,Article.NameSpace ns) throws SQLException {
  Connection conn=ds.getConnection();
  DSLContext context=DSL.using(conn,SQLDialect.H2);
  Result<Record> result=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.TITLE.likeIgnoreCase(title)).and(Tables.ARTICLE.NS.equal(ns.getValue())).fetch();
  conn.close();
  return buildArticles(result);
}","public WikapidiaIterable<Article> query(String title,Article.NameSpace ns) throws SQLException {
  Connection conn=ds.getConnection();
  DSLContext context=DSL.using(conn,SQLDialect.H2);
  Cursor<Record> result=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.TITLE.likeIgnoreCase(title)).and(Tables.ARTICLE.NS.equal(ns.getValue())).fetchLazy();
  conn.close();
  return buildArticles(result);
}"
53085,"@Override public Iterator<E> iterator(){
  return null;
}","@Override public Iterator<E> iterator(){
  return new Iterator<E>(){
    Iterator<Record> recordIterator=result.iterator();
    @Override public boolean hasNext(){
      return recordIterator.hasNext();
    }
    @Override public E next(){
      return func.transform(recordIterator.next());
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}"
53086,"public String string(){
  String s=""String_Node_Str"";
  for (int i=0; i < 10; i++) {
    s+=chars.charAt(random.nextInt(chars.length()));
  }
  return s;
}","public String string(int min,int max){
  String s=""String_Node_Str"";
  int length=random.nextInt(max);
  length+=min;
  for (int i=0; i < length; i++) {
    s+=chars.charAt(random.nextInt(chars.length()));
  }
  return s;
}"
53087,"public void buildArticleDb(ArticleDao ad) throws IOException, SQLException {
  long time=0, start, stop;
  RandomHelper rh=new RandomHelper();
  for (int i=0; i < numArticles; i++) {
    Article a=new Article(i,rh.string(),rh.ns(),rh.type());
    start=System.currentTimeMillis();
    ad.save(a);
    stop=System.currentTimeMillis();
    time+=stop - start;
  }
  System.out.println(""String_Node_Str"" + (time / 60000) + ""String_Node_Str"");
}","public void buildArticleDb(ArticleDao ad) throws IOException, SQLException {
  long time=0, start, stop;
  RandomHelper rh=new RandomHelper();
  for (int i=0; i < numArticles; i++) {
    Article a=new Article(i,rh.string(titleLength),rh.ns(),rh.type(),rh.string(textMinLength,textMaxLength));
    start=System.currentTimeMillis();
    ad.save(a);
    stop=System.currentTimeMillis();
    time+=stop - start;
  }
  System.out.println(""String_Node_Str"" + (time / 60000) + ""String_Node_Str""+ ((time / 1000) / (long)numArticles)+ ""String_Node_Str"");
}"
53088,"public Article get(int wpId){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.ID.equal(wpId)).fetchOne();
    Article a=new Article(record.getValue(Tables.ARTICLE.ID),record.getValue(Tables.ARTICLE.TITLE),Article.NameSpace.intToNS(record.getValue(Tables.ARTICLE.NS)),Article.PageType.values()[record.getValue(Tables.ARTICLE.PTYPE)]);
    conn.close();
    return a;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","public Article get(int wpId){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.ID.equal(wpId)).fetchOne();
    Article a=new Article(record.getValue(Tables.ARTICLE.ID),record.getValue(Tables.ARTICLE.TITLE),Article.NameSpace.intToNS(record.getValue(Tables.ARTICLE.NS)),Article.PageType.values()[record.getValue(Tables.ARTICLE.PTYPE)]);
    conn.close();
    return a;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
53089,"public ArrayList<Article> query(String title,Article.NameSpace ns){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Result<Record> result=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.TITLE.likeIgnoreCase(title)).and(Tables.ARTICLE.NS.equal(ns.getValue())).fetch();
    return buildArticles(result);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","public List<Article> query(String title,Article.NameSpace ns){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Result<Record> result=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.TITLE.likeIgnoreCase(title)).and(Tables.ARTICLE.NS.equal(ns.getValue())).fetch();
    conn.close();
    return buildArticles(result);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
53090,"public void save(Article article){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    context.insertInto(Tables.ARTICLE).values(article.getId(),article.getTitle(),article.getNs().getValue(),article.getType().getValue());
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void save(Article article){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    context.insertInto(Tables.ARTICLE).values(article.getId(),article.getTitle(),article.getNs().getValue(),article.getType().getValue());
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
53091,"public ArticleDao(BoneCPDataSource dataSource) throws Exception {
  bds=dataSource;
}","public ArticleDao(DataSource dataSource) throws Exception {
  ds=dataSource;
}"
53092,"public ConceptDao(BoneCPDataSource dataSource) throws Exception {
  bds=dataSource;
}","public ConceptDao(DataSource dataSource) throws Exception {
  ds=dataSource;
}"
53093,"public Concept get(long cID){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.CONCEPT).where(Tables.CONCEPT.ID.equal(cID)).fetchOne();
    Concept c=new Concept(record.getValue(Tables.CONCEPT.ID),null);
    conn.close();
    return c;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","public Concept get(long cId){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.CONCEPT).where(Tables.CONCEPT.ID.equal(cId)).fetchOne();
    Concept c=new Concept(record.getValue(Tables.CONCEPT.ID),null);
    conn.close();
    return c;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
53094,"public void save(Concept c){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    context.insertInto(Tables.CONCEPT,Tables.CONCEPT.ID).values(c.getId());
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void save(Concept c){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    context.insertInto(Tables.CONCEPT,Tables.CONCEPT.ID).values(c.getId());
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
53095,"public Link get(int lId){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.LINK).where(Tables.LINK.ARTICLE_ID.equal(lId)).fetchOne();
    Link l=new Link(record.getValue(Tables.LINK.TEXT),record.getValue(Tables.LINK.ARTICLE_ID),false);
    conn.close();
    return l;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","public Link get(int lId){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.LINK).where(Tables.LINK.ARTICLE_ID.equal(lId)).fetchOne();
    Link l=new Link(record.getValue(Tables.LINK.TEXT),record.getValue(Tables.LINK.ARTICLE_ID),false);
    conn.close();
    return l;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}"
53096,"public List<Link> query(String lText){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Result<Record> result=context.select().from(Tables.LINK).where(Tables.LINK.TEXT.likeIgnoreCase(lText)).fetch();
    conn.close();
    return buildLinks(result);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","public List<Link> query(String lText){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Result<Record> result=context.select().from(Tables.LINK).where(Tables.LINK.TEXT.likeIgnoreCase(lText)).fetch();
    conn.close();
    return buildLinks(result);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}"
53097,"public void save(Link link){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    context.insertInto(Tables.LINK,Tables.LINK.ARTICLE_ID,Tables.LINK.TEXT).values(link.getId(),link.getText());
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void save(Link link){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    context.insertInto(Tables.LINK,Tables.LINK.ARTICLE_ID,Tables.LINK.TEXT).values(link.getId(),link.getText());
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
53098,"public LinkDao(BoneCPDataSource bds){
  this.bds=bds;
}","public LinkDao(DataSource ds){
  this.ds=ds;
}"
53099,"public Article get(int wpId){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.ID.equal(wpId)).fetchOne();
    Article a=new Article(record.getValue(Tables.ARTICLE.ID),record.getValue(Tables.ARTICLE.TITLE),Article.NameSpace.intToNS(record.getValue(Tables.ARTICLE.NS)),Article.PageType.values()[record.getValue(Tables.ARTICLE.PTYPE)]);
    conn.close();
    return a;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","public Article get(int wpId){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.ID.equal(wpId)).fetchOne();
    Article a=new Article(record.getValue(Tables.ARTICLE.ID),record.getValue(Tables.ARTICLE.TITLE),Article.NameSpace.intToNS(record.getValue(Tables.ARTICLE.NS)),Article.PageType.values()[record.getValue(Tables.ARTICLE.PTYPE)]);
    conn.close();
    return a;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
53100,"public ArrayList<Article> query(String title,Article.NameSpace ns){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Result<Record> result=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.TITLE.likeIgnoreCase(title)).and(Tables.ARTICLE.NS.equal(ns.getValue())).fetch();
    return buildArticles(result);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","public List<Article> query(String title,Article.NameSpace ns){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Result<Record> result=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.TITLE.likeIgnoreCase(title)).and(Tables.ARTICLE.NS.equal(ns.getValue())).fetch();
    conn.close();
    return buildArticles(result);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
53101,"public void save(Article article){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    context.insertInto(Tables.ARTICLE).values(article.getId(),article.getTitle(),article.getNs().getValue(),article.getType().getValue());
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void save(Article article){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    context.insertInto(Tables.ARTICLE).values(article.getId(),article.getTitle(),article.getNs().getValue(),article.getType().getValue());
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
53102,"public ArticleDao(BoneCPDataSource dataSource) throws Exception {
  bds=dataSource;
}","public ArticleDao(DataSource dataSource) throws Exception {
  ds=dataSource;
}"
53103,"public ConceptDao(BoneCPDataSource dataSource) throws Exception {
  bds=dataSource;
}","public ConceptDao(DataSource dataSource) throws Exception {
  ds=dataSource;
}"
53104,"public Concept get(long cID){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.CONCEPT).where(Tables.CONCEPT.ID.equal(cID)).fetchOne();
    Concept c=new Concept(record.getValue(Tables.CONCEPT.ID),null);
    conn.close();
    return c;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","public Concept get(long cId){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.CONCEPT).where(Tables.CONCEPT.ID.equal(cId)).fetchOne();
    Concept c=new Concept(record.getValue(Tables.CONCEPT.ID),null);
    conn.close();
    return c;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
53105,"public void save(Concept c){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    context.insertInto(Tables.CONCEPT,Tables.CONCEPT.ID).values(c.getId());
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void save(Concept c){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    context.insertInto(Tables.CONCEPT,Tables.CONCEPT.ID).values(c.getId());
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
53106,"public Link get(int lId){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.LINK).where(Tables.LINK.ARTICLE_ID.equal(lId)).fetchOne();
    Link l=new Link(record.getValue(Tables.LINK.TEXT),record.getValue(Tables.LINK.ARTICLE_ID),false);
    conn.close();
    return l;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","public Link get(int lId){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.LINK).where(Tables.LINK.ARTICLE_ID.equal(lId)).fetchOne();
    Link l=new Link(record.getValue(Tables.LINK.TEXT),record.getValue(Tables.LINK.ARTICLE_ID),false);
    conn.close();
    return l;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}"
53107,"public List<Link> query(String lText){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Result<Record> result=context.select().from(Tables.LINK).where(Tables.LINK.TEXT.likeIgnoreCase(lText)).fetch();
    conn.close();
    return buildLinks(result);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","public List<Link> query(String lText){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Result<Record> result=context.select().from(Tables.LINK).where(Tables.LINK.TEXT.likeIgnoreCase(lText)).fetch();
    conn.close();
    return buildLinks(result);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}"
53108,"public void save(Link link){
  try {
    Connection conn=bds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    context.insertInto(Tables.LINK,Tables.LINK.ARTICLE_ID,Tables.LINK.TEXT).values(link.getId(),link.getText());
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void save(Link link){
  try {
    Connection conn=ds.getConnection();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    context.insertInto(Tables.LINK,Tables.LINK.ARTICLE_ID,Tables.LINK.TEXT).values(link.getId(),link.getText());
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
53109,"public LinkDao(BoneCPDataSource bds){
  this.bds=bds;
}","public LinkDao(DataSource ds){
  this.ds=ds;
}"
53110,"public Article get(int wpId){
  try {
    Connection conn=connect();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.ID.equal(wpId)).fetchOne();
    Article a=new Article(record.getValue(Tables.ARTICLE.ID),record.getValue(Tables.ARTICLE.TITLE),Article.NameSpace.intToNS(record.getValue(Tables.ARTICLE.NS)),Article.PageType.values()[record.getValue(Tables.ARTICLE.PTYPE)]);
    return null;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","public Article get(int wpId){
  try {
    Connection conn=connect();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.ID.equal(wpId)).fetchOne();
    Article a=new Article(record.getValue(Tables.ARTICLE.ID),record.getValue(Tables.ARTICLE.TITLE),Article.NameSpace.intToNS(record.getValue(Tables.ARTICLE.NS)),Article.PageType.values()[record.getValue(Tables.ARTICLE.PTYPE)]);
    conn.close();
    return a;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
53111,"public Article get(int wpId){
  try {
    Connection conn=connect();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.ID.equal(wpId)).fetchOne();
    Article a=new Article(record.getValue(Tables.ARTICLE.ID),record.getValue(Tables.ARTICLE.TITLE),Article.NameSpace.intToNS(record.getValue(Tables.ARTICLE.NS)),Article.PageType.values()[record.getValue(Tables.ARTICLE.PTYPE)]);
    return null;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","public Article get(int wpId){
  try {
    Connection conn=connect();
    DSLContext context=DSL.using(conn,SQLDialect.H2);
    Record record=context.select().from(Tables.ARTICLE).where(Tables.ARTICLE.ID.equal(wpId)).fetchOne();
    Article a=new Article(record.getValue(Tables.ARTICLE.ID),record.getValue(Tables.ARTICLE.TITLE),Article.NameSpace.intToNS(record.getValue(Tables.ARTICLE.NS)),Article.PageType.values()[record.getValue(Tables.ARTICLE.PTYPE)]);
    conn.close();
    return a;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
53112,"/** 
 * Returns the timezone offset in an integer For more information refer to the API Docs: <a href=""https://developer.forecast.io"">https://developer.forecast.io</a>
 * @return integer with the offset
 */
public int offsetValue(){
  return this.forecast.get(""String_Node_Str"").asInt();
}","/** 
 * Returns the timezone offset in an double For more information refer to the API Docs: <a href=""https://developer.forecast.io"">https://developer.forecast.io</a>
 * @return double with the offset
 */
public double offsetValue(){
  return this.forecast.get(""String_Node_Str"").asDouble();
}"
53113,"private void updateHexValue(int color){
  mHexInternalTextChange=true;
  if (getAlphaSliderVisible())   mHexVal.setText(ColorPickerPreference.convertToARGB(color));
 else   mHexVal.setText(ColorPickerPreference.convertToRGB(color));
  mHexInternalTextChange=false;
}","private void updateHexValue(int color){
  if (mHexInternalTextChange)   return;
  mHexInternalTextChange=true;
  if (getAlphaSliderVisible())   mHexVal.setText(ColorPickerPreference.convertToARGB(color));
 else   mHexVal.setText(ColorPickerPreference.convertToRGB(color));
  mHexInternalTextChange=false;
}"
53114,"@Override public void afterTextChanged(Editable s){
  if (mHexValueEnabled) {
    if (mHexInternalTextChange)     return;
    if (s.length() > 5 || s.length() < 10) {
      try {
        int c=ColorPickerPreference.convertToColorInt(s.toString());
        mColorPicker.setColor(c,true);
        mHexVal.setTextColor(mHexDefaultTextColor);
      }
 catch (      NumberFormatException e) {
        mHexVal.setTextColor(Color.RED);
      }
    }
 else     mHexVal.setTextColor(Color.RED);
  }
}","@Override public void afterTextChanged(Editable s){
  if (mHexValueEnabled) {
    if (mHexInternalTextChange)     return;
    if (s.length() > 5 || s.length() < 10) {
      try {
        int c=ColorPickerPreference.convertToColorInt(s.toString());
        mHexInternalTextChange=true;
        mColorPicker.setColor(c,true);
        mHexInternalTextChange=false;
        mHexVal.setTextColor(mHexDefaultTextColor);
      }
 catch (      NumberFormatException e) {
        mHexVal.setTextColor(Color.RED);
      }
    }
 else     mHexVal.setTextColor(Color.RED);
  }
}"
53115,"private void setUp(int color){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View layout=inflater.inflate(R.layout.dialog_color_picker,null);
  setContentView(layout);
  setTitle(R.string.dialog_color_picker);
  mColorPicker=(ColorPickerView)layout.findViewById(R.id.color_picker_view);
  mOldColor=(ColorPickerPanelView)layout.findViewById(R.id.old_color_panel);
  mNewColor=(ColorPickerPanelView)layout.findViewById(R.id.new_color_panel);
  mHexVal=(EditText)layout.findViewById(R.id.hex_val);
  mHexDefaultTextColor=mHexVal.getTextColors();
  mHexVal.addTextChangedListener(new TextWatcher(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void afterTextChanged(    Editable s){
      if (mHexValueEnabled) {
        if (mHexInternalTextChange)         return;
        if (s.length() > 5 || s.length() < 10) {
          try {
            int c=ColorPickerPreference.convertToColorInt(s.toString());
            mColorPicker.setColor(c,true);
            mHexVal.setTextColor(mHexDefaultTextColor);
          }
 catch (          NumberFormatException e) {
            mHexVal.setTextColor(Color.RED);
          }
        }
 else         mHexVal.setTextColor(Color.RED);
      }
    }
  }
);
  setHexValueEnabled(true);
  ((LinearLayout)mOldColor.getParent()).setPadding(Math.round(mColorPicker.getDrawingOffset()),0,Math.round(mColorPicker.getDrawingOffset()),0);
  mOldColor.setOnClickListener(this);
  mNewColor.setOnClickListener(this);
  mColorPicker.setOnColorChangedListener(this);
  mOldColor.setColor(color);
  mColorPicker.setColor(color,true);
}","private void setUp(int color){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View layout=inflater.inflate(R.layout.dialog_color_picker,null);
  setContentView(layout);
  setTitle(R.string.dialog_color_picker);
  mColorPicker=(ColorPickerView)layout.findViewById(R.id.color_picker_view);
  mOldColor=(ColorPickerPanelView)layout.findViewById(R.id.old_color_panel);
  mNewColor=(ColorPickerPanelView)layout.findViewById(R.id.new_color_panel);
  mHexVal=(EditText)layout.findViewById(R.id.hex_val);
  mHexDefaultTextColor=mHexVal.getTextColors();
  mHexVal.addTextChangedListener(new TextWatcher(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void afterTextChanged(    Editable s){
      if (mHexValueEnabled) {
        if (mHexInternalTextChange)         return;
        if (s.length() > 5 || s.length() < 10) {
          try {
            int c=ColorPickerPreference.convertToColorInt(s.toString());
            mHexInternalTextChange=true;
            mColorPicker.setColor(c,true);
            mHexInternalTextChange=false;
            mHexVal.setTextColor(mHexDefaultTextColor);
          }
 catch (          NumberFormatException e) {
            mHexVal.setTextColor(Color.RED);
          }
        }
 else         mHexVal.setTextColor(Color.RED);
      }
    }
  }
);
  setHexValueEnabled(true);
  ((LinearLayout)mOldColor.getParent()).setPadding(Math.round(mColorPicker.getDrawingOffset()),0,Math.round(mColorPicker.getDrawingOffset()),0);
  mOldColor.setOnClickListener(this);
  mNewColor.setOnClickListener(this);
  mColorPicker.setOnColorChangedListener(this);
  mOldColor.setColor(color);
  mColorPicker.setColor(color,true);
}"
53116,"@Override public void onReceive(Context context,Intent intent){
  final String action=intent.getAction();
  if (action.equals(LocationManager.PROVIDERS_CHANGED_ACTION)) {
    mGpsEnabled=Settings.Secure.isLocationProviderEnabled(mContext.getContentResolver(),LocationManager.GPS_PROVIDER);
    mGpsFixed&=mGpsEnabled;
  }
 else   if (action.equals(GPS_FIX_CHANGE_ACTION)) {
    mGpsFixed=intent.getBooleanExtra(EXTRA_GPS_ENABLED,false);
  }
  if (DEBUG)   log(""String_Node_Str"" + mGpsEnabled + ""String_Node_Str""+ mGpsFixed);
  updateResources();
}","@Override public void onReceive(Context context,Intent intent){
  final String action=intent.getAction();
  if (action.equals(LocationManager.PROVIDERS_CHANGED_ACTION)) {
    mGpsEnabled=Settings.Secure.isLocationProviderEnabled(mContext.getContentResolver(),LocationManager.GPS_PROVIDER);
    mGpsFixed=false;
  }
 else   if (action.equals(GPS_FIX_CHANGE_ACTION)) {
    mGpsFixed=intent.getBooleanExtra(EXTRA_GPS_ENABLED,false);
  }
  if (DEBUG)   log(""String_Node_Str"" + mGpsEnabled + ""String_Node_Str""+ mGpsFixed);
  updateResources();
}"
53117,"public static void initResources(final XSharedPreferences prefs,final InitPackageResourcesParam resparam){
  try {
    String layout=Utils.hasGeminiSupport() ? ""String_Node_Str"" : ""String_Node_Str"";
    resparam.res.hookLayout(PACKAGE_NAME,""String_Node_Str"",layout,new XC_LayoutInflated(){
      @Override public void handleLayoutInflated(      LayoutInflatedParam liparam) throws Throwable {
        prefs.reload();
        mClockShowDow=prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CLOCK_DOW,false);
        mAmPmHide=prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CLOCK_AMPM_HIDE,false);
        mClockHide=prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CLOCK_HIDE,false);
        mAlarmHide=prefs.getBoolean(GravityBoxSettings.PREF_KEY_ALARM_ICON_HIDE,false);
        mIconArea=(ViewGroup)liparam.view.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
        if (mIconArea == null)         return;
        mRootView=(ViewGroup)mIconArea.getParent().getParent();
        if (mRootView == null)         return;
        mClock=(TextView)mIconArea.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
        if (mClock == null)         return;
        ModStatusbarColor.setClock(mClock);
        XposedHelpers.setAdditionalInstanceField(mClock,""String_Node_Str"",true);
        mClockOriginalPaddingLeft=mClock.getPaddingLeft();
        if (mClockHide) {
          mClock.setVisibility(View.GONE);
        }
        final ViewGroup panelHolder=(ViewGroup)liparam.view.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
        if (panelHolder != null) {
          mClockExpanded=(TextView)panelHolder.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
        }
        mLayoutClock=new LinearLayout(liparam.view.getContext());
        mLayoutClock.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));
        mLayoutClock.setGravity(Gravity.CENTER);
        mLayoutClock.setVisibility(View.GONE);
        mRootView.addView(mLayoutClock);
        log(""String_Node_Str"");
        XposedHelpers.findAndHookMethod(mClock.getClass(),""String_Node_Str"",new XC_MethodHook(){
          @Override protected void afterHookedMethod(          MethodHookParam param) throws Throwable {
            Object sbClock=XposedHelpers.getAdditionalInstanceField(param.thisObject,""String_Node_Str"");
            Calendar calendar=Calendar.getInstance(TimeZone.getDefault());
            String clockText=param.getResult().toString();
            String amPm=calendar.getDisplayName(Calendar.AM_PM,Calendar.SHORT,Locale.getDefault());
            int amPmIndex=clockText.indexOf(amPm);
            if (mAmPmHide && amPmIndex != -1) {
              clockText=clockText.replace(amPm,""String_Node_Str"");
              amPmIndex=-1;
            }
 else             if (!DateFormat.is24HourFormat(mClock.getContext()) && amPmIndex == -1) {
              clockText+=""String_Node_Str"" + amPm;
              amPmIndex=clockText.indexOf(amPm);
            }
            CharSequence dow=""String_Node_Str"";
            if (mClockShowDow && sbClock != null) {
              dow=calendar.getDisplayName(Calendar.DAY_OF_WEEK,Calendar.SHORT,Locale.getDefault()) + ""String_Node_Str"";
            }
            clockText=dow + clockText;
            SpannableStringBuilder sb=new SpannableStringBuilder(clockText);
            sb.setSpan(new RelativeSizeSpan(0.7f),0,dow.length(),Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
            if (amPmIndex > -1) {
              int offset=Character.isWhitespace(clockText.charAt(dow.length() + amPmIndex - 1)) ? 1 : 0;
              sb.setSpan(new RelativeSizeSpan(0.7f),dow.length() + amPmIndex - offset,dow.length() + amPmIndex + amPm.length(),Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
            }
            param.setResult(sb);
          }
        }
);
        setClockPosition(prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CENTER_CLOCK,false));
      }
    }
);
  }
 catch (  Exception e) {
    XposedBridge.log(e);
  }
}","public static void initResources(final XSharedPreferences prefs,final InitPackageResourcesParam resparam){
  try {
    String layout=Utils.hasGeminiSupport() ? ""String_Node_Str"" : ""String_Node_Str"";
    resparam.res.hookLayout(PACKAGE_NAME,""String_Node_Str"",layout,new XC_LayoutInflated(){
      @Override public void handleLayoutInflated(      LayoutInflatedParam liparam) throws Throwable {
        prefs.reload();
        mClockShowDow=prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CLOCK_DOW,false);
        mAmPmHide=prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CLOCK_AMPM_HIDE,false);
        mClockHide=prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CLOCK_HIDE,false);
        mAlarmHide=prefs.getBoolean(GravityBoxSettings.PREF_KEY_ALARM_ICON_HIDE,false);
        mIconArea=(ViewGroup)liparam.view.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
        if (mIconArea == null)         return;
        mRootView=(ViewGroup)mIconArea.getParent().getParent();
        if (mRootView == null)         return;
        mClock=(TextView)mIconArea.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
        if (mClock == null)         return;
        ModStatusbarColor.setClock(mClock);
        XposedHelpers.setAdditionalInstanceField(mClock,""String_Node_Str"",true);
        mClockOriginalPaddingLeft=mClock.getPaddingLeft();
        if (mClockHide) {
          mClock.setVisibility(View.GONE);
        }
        final ViewGroup panelHolder=(ViewGroup)liparam.view.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
        if (panelHolder != null) {
          mClockExpanded=(TextView)panelHolder.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
        }
        mLayoutClock=new LinearLayout(liparam.view.getContext());
        mLayoutClock.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));
        mLayoutClock.setGravity(Gravity.CENTER);
        mLayoutClock.setVisibility(View.GONE);
        mRootView.addView(mLayoutClock);
        log(""String_Node_Str"");
        XposedHelpers.findAndHookMethod(mClock.getClass(),""String_Node_Str"",new XC_MethodHook(){
          @Override protected void afterHookedMethod(          MethodHookParam param) throws Throwable {
            if (DEBUG)             log(""String_Node_Str"" + mAmPmHide);
            Object sbClock=XposedHelpers.getAdditionalInstanceField(param.thisObject,""String_Node_Str"");
            if (DEBUG)             log(""String_Node_Str"" + (sbClock == null ? ""String_Node_Str"" : ""String_Node_Str""));
            Calendar calendar=Calendar.getInstance(TimeZone.getDefault());
            String clockText=param.getResult().toString();
            if (DEBUG)             log(""String_Node_Str"" + clockText + ""String_Node_Str"");
            String amPm=calendar.getDisplayName(Calendar.AM_PM,Calendar.SHORT,Locale.getDefault());
            if (DEBUG)             log(""String_Node_Str"" + amPm + ""String_Node_Str"");
            int amPmIndex=clockText.indexOf(amPm);
            if (DEBUG)             log(""String_Node_Str"" + amPmIndex);
            if (mAmPmHide && amPmIndex != -1) {
              clockText=clockText.replace(amPm,""String_Node_Str"").trim();
              if (DEBUG)               log(""String_Node_Str"" + clockText + ""String_Node_Str"");
              amPmIndex=-1;
            }
 else             if (!mAmPmHide && !DateFormat.is24HourFormat(mClock.getContext()) && amPmIndex == -1) {
              clockText+=""String_Node_Str"" + amPm;
              amPmIndex=clockText.indexOf(amPm);
              if (DEBUG)               log(""String_Node_Str"" + clockText + ""String_Node_Str""+ amPmIndex);
            }
            CharSequence dow=""String_Node_Str"";
            if (mClockShowDow && sbClock != null) {
              dow=calendar.getDisplayName(Calendar.DAY_OF_WEEK,Calendar.SHORT,Locale.getDefault()) + ""String_Node_Str"";
            }
            clockText=dow + clockText;
            SpannableStringBuilder sb=new SpannableStringBuilder(clockText);
            sb.setSpan(new RelativeSizeSpan(0.7f),0,dow.length(),Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
            if (amPmIndex > -1) {
              int offset=Character.isWhitespace(clockText.charAt(dow.length() + amPmIndex - 1)) ? 1 : 0;
              sb.setSpan(new RelativeSizeSpan(0.7f),dow.length() + amPmIndex - offset,dow.length() + amPmIndex + amPm.length(),Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
            }
            if (DEBUG)             log(""String_Node_Str"" + sb + ""String_Node_Str"");
            param.setResult(sb);
          }
        }
);
        setClockPosition(prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CENTER_CLOCK,false));
      }
    }
);
  }
 catch (  Exception e) {
    XposedBridge.log(e);
  }
}"
53118,"@Override public void handleLayoutInflated(LayoutInflatedParam liparam) throws Throwable {
  prefs.reload();
  mClockShowDow=prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CLOCK_DOW,false);
  mAmPmHide=prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CLOCK_AMPM_HIDE,false);
  mClockHide=prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CLOCK_HIDE,false);
  mAlarmHide=prefs.getBoolean(GravityBoxSettings.PREF_KEY_ALARM_ICON_HIDE,false);
  mIconArea=(ViewGroup)liparam.view.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
  if (mIconArea == null)   return;
  mRootView=(ViewGroup)mIconArea.getParent().getParent();
  if (mRootView == null)   return;
  mClock=(TextView)mIconArea.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
  if (mClock == null)   return;
  ModStatusbarColor.setClock(mClock);
  XposedHelpers.setAdditionalInstanceField(mClock,""String_Node_Str"",true);
  mClockOriginalPaddingLeft=mClock.getPaddingLeft();
  if (mClockHide) {
    mClock.setVisibility(View.GONE);
  }
  final ViewGroup panelHolder=(ViewGroup)liparam.view.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
  if (panelHolder != null) {
    mClockExpanded=(TextView)panelHolder.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
  }
  mLayoutClock=new LinearLayout(liparam.view.getContext());
  mLayoutClock.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));
  mLayoutClock.setGravity(Gravity.CENTER);
  mLayoutClock.setVisibility(View.GONE);
  mRootView.addView(mLayoutClock);
  log(""String_Node_Str"");
  XposedHelpers.findAndHookMethod(mClock.getClass(),""String_Node_Str"",new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      Object sbClock=XposedHelpers.getAdditionalInstanceField(param.thisObject,""String_Node_Str"");
      Calendar calendar=Calendar.getInstance(TimeZone.getDefault());
      String clockText=param.getResult().toString();
      String amPm=calendar.getDisplayName(Calendar.AM_PM,Calendar.SHORT,Locale.getDefault());
      int amPmIndex=clockText.indexOf(amPm);
      if (mAmPmHide && amPmIndex != -1) {
        clockText=clockText.replace(amPm,""String_Node_Str"");
        amPmIndex=-1;
      }
 else       if (!DateFormat.is24HourFormat(mClock.getContext()) && amPmIndex == -1) {
        clockText+=""String_Node_Str"" + amPm;
        amPmIndex=clockText.indexOf(amPm);
      }
      CharSequence dow=""String_Node_Str"";
      if (mClockShowDow && sbClock != null) {
        dow=calendar.getDisplayName(Calendar.DAY_OF_WEEK,Calendar.SHORT,Locale.getDefault()) + ""String_Node_Str"";
      }
      clockText=dow + clockText;
      SpannableStringBuilder sb=new SpannableStringBuilder(clockText);
      sb.setSpan(new RelativeSizeSpan(0.7f),0,dow.length(),Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
      if (amPmIndex > -1) {
        int offset=Character.isWhitespace(clockText.charAt(dow.length() + amPmIndex - 1)) ? 1 : 0;
        sb.setSpan(new RelativeSizeSpan(0.7f),dow.length() + amPmIndex - offset,dow.length() + amPmIndex + amPm.length(),Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
      }
      param.setResult(sb);
    }
  }
);
  setClockPosition(prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CENTER_CLOCK,false));
}","@Override public void handleLayoutInflated(LayoutInflatedParam liparam) throws Throwable {
  prefs.reload();
  mClockShowDow=prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CLOCK_DOW,false);
  mAmPmHide=prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CLOCK_AMPM_HIDE,false);
  mClockHide=prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CLOCK_HIDE,false);
  mAlarmHide=prefs.getBoolean(GravityBoxSettings.PREF_KEY_ALARM_ICON_HIDE,false);
  mIconArea=(ViewGroup)liparam.view.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
  if (mIconArea == null)   return;
  mRootView=(ViewGroup)mIconArea.getParent().getParent();
  if (mRootView == null)   return;
  mClock=(TextView)mIconArea.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
  if (mClock == null)   return;
  ModStatusbarColor.setClock(mClock);
  XposedHelpers.setAdditionalInstanceField(mClock,""String_Node_Str"",true);
  mClockOriginalPaddingLeft=mClock.getPaddingLeft();
  if (mClockHide) {
    mClock.setVisibility(View.GONE);
  }
  final ViewGroup panelHolder=(ViewGroup)liparam.view.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
  if (panelHolder != null) {
    mClockExpanded=(TextView)panelHolder.findViewById(liparam.res.getIdentifier(""String_Node_Str"",""String_Node_Str"",PACKAGE_NAME));
  }
  mLayoutClock=new LinearLayout(liparam.view.getContext());
  mLayoutClock.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));
  mLayoutClock.setGravity(Gravity.CENTER);
  mLayoutClock.setVisibility(View.GONE);
  mRootView.addView(mLayoutClock);
  log(""String_Node_Str"");
  XposedHelpers.findAndHookMethod(mClock.getClass(),""String_Node_Str"",new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      if (DEBUG)       log(""String_Node_Str"" + mAmPmHide);
      Object sbClock=XposedHelpers.getAdditionalInstanceField(param.thisObject,""String_Node_Str"");
      if (DEBUG)       log(""String_Node_Str"" + (sbClock == null ? ""String_Node_Str"" : ""String_Node_Str""));
      Calendar calendar=Calendar.getInstance(TimeZone.getDefault());
      String clockText=param.getResult().toString();
      if (DEBUG)       log(""String_Node_Str"" + clockText + ""String_Node_Str"");
      String amPm=calendar.getDisplayName(Calendar.AM_PM,Calendar.SHORT,Locale.getDefault());
      if (DEBUG)       log(""String_Node_Str"" + amPm + ""String_Node_Str"");
      int amPmIndex=clockText.indexOf(amPm);
      if (DEBUG)       log(""String_Node_Str"" + amPmIndex);
      if (mAmPmHide && amPmIndex != -1) {
        clockText=clockText.replace(amPm,""String_Node_Str"").trim();
        if (DEBUG)         log(""String_Node_Str"" + clockText + ""String_Node_Str"");
        amPmIndex=-1;
      }
 else       if (!mAmPmHide && !DateFormat.is24HourFormat(mClock.getContext()) && amPmIndex == -1) {
        clockText+=""String_Node_Str"" + amPm;
        amPmIndex=clockText.indexOf(amPm);
        if (DEBUG)         log(""String_Node_Str"" + clockText + ""String_Node_Str""+ amPmIndex);
      }
      CharSequence dow=""String_Node_Str"";
      if (mClockShowDow && sbClock != null) {
        dow=calendar.getDisplayName(Calendar.DAY_OF_WEEK,Calendar.SHORT,Locale.getDefault()) + ""String_Node_Str"";
      }
      clockText=dow + clockText;
      SpannableStringBuilder sb=new SpannableStringBuilder(clockText);
      sb.setSpan(new RelativeSizeSpan(0.7f),0,dow.length(),Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
      if (amPmIndex > -1) {
        int offset=Character.isWhitespace(clockText.charAt(dow.length() + amPmIndex - 1)) ? 1 : 0;
        sb.setSpan(new RelativeSizeSpan(0.7f),dow.length() + amPmIndex - offset,dow.length() + amPmIndex + amPm.length(),Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
      }
      if (DEBUG)       log(""String_Node_Str"" + sb + ""String_Node_Str"");
      param.setResult(sb);
    }
  }
);
  setClockPosition(prefs.getBoolean(GravityBoxSettings.PREF_KEY_STATUSBAR_CENTER_CLOCK,false));
}"
53119,"public static void init(final XSharedPreferences prefs,final ClassLoader classLoader){
  log(""String_Node_Str"");
  try {
    final ThreadLocal<RemoveNotificationMethodState> removeNotificationState=new ThreadLocal<RemoveNotificationMethodState>();
    prefs.reload();
    mActiveTileKeys=prefs.getStringSet(GravityBoxSettings.PREF_KEY_QUICK_SETTINGS,null);
    log(""String_Node_Str"" + (mActiveTileKeys == null ? ""String_Node_Str"" : mActiveTileKeys.toString()));
    final Class<?> quickSettingsClass=XposedHelpers.findClass(CLASS_QUICK_SETTINGS,classLoader);
    final Class<?> phoneStatusBarClass=XposedHelpers.findClass(CLASS_PHONE_STATUSBAR,classLoader);
    final Class<?> panelBarClass=XposedHelpers.findClass(CLASS_PANEL_BAR,classLoader);
    mQuickSettingsTileViewClass=XposedHelpers.findClass(CLASS_QS_TILEVIEW,classLoader);
    final Class<?> notifPanelViewClass=XposedHelpers.findClass(CLASS_NOTIF_PANELVIEW,classLoader);
    XposedBridge.hookAllConstructors(quickSettingsClass,quickSettingsConstructHook);
    XposedHelpers.findAndHookMethod(quickSettingsClass,""String_Node_Str"",panelBarClass,quickSettingsSetBarHook);
    XposedHelpers.findAndHookMethod(quickSettingsClass,""String_Node_Str"",phoneStatusBarClass,quickSettingsSetServiceHook);
    XposedHelpers.findAndHookMethod(quickSettingsClass,""String_Node_Str"",ViewGroup.class,LayoutInflater.class,quickSettingsAddSystemTilesHook);
    XposedHelpers.findAndHookMethod(quickSettingsClass,""String_Node_Str"",quickSettingsUpdateResourcesHook);
    XposedHelpers.findAndHookMethod(notifPanelViewClass,""String_Node_Str"",MotionEvent.class,notificationPanelViewOnTouchEvent);
    XposedHelpers.findAndHookMethod(phoneStatusBarClass,""String_Node_Str"",IBinder.class,new XC_MethodHook(){
      @Override protected void beforeHookedMethod(      final MethodHookParam param) throws Throwable {
        if (DEBUG) {
          log(""String_Node_Str"");
        }
        removeNotificationState.set(RemoveNotificationMethodState.METHOD_ENTERED);
      }
      @Override protected void afterHookedMethod(      final MethodHookParam param) throws Throwable {
        if (DEBUG) {
          log(""String_Node_Str"");
        }
        removeNotificationState.set(RemoveNotificationMethodState.METHOD_EXITED);
      }
    }
);
    XposedHelpers.findAndHookMethod(phoneStatusBarClass,""String_Node_Str"",new XC_MethodHook(){
      @Override protected void beforeHookedMethod(      final MethodHookParam param) throws Throwable {
        if (removeNotificationState.get() != null && removeNotificationState.get().equals(RemoveNotificationMethodState.METHOD_ENTERED)) {
          log(""String_Node_Str"");
          boolean hasFlipSettings=XposedHelpers.getBooleanField(param.thisObject,""String_Node_Str"");
          boolean animating=XposedHelpers.getBooleanField(param.thisObject,""String_Node_Str"");
          View flipSettingsView=(View)XposedHelpers.getObjectField(param.thisObject,""String_Node_Str"");
          Object notificationData=XposedHelpers.getObjectField(mStatusBar,""String_Node_Str"");
          int ndSize=(Integer)XposedHelpers.callMethod(notificationData,""String_Node_Str"");
          boolean isShowingSettings=hasFlipSettings && flipSettingsView.getVisibility() == View.VISIBLE;
          if (ndSize == 0 && !animating && !isShowingSettings) {
          }
 else {
            log(""String_Node_Str"");
            param.setResult(null);
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    XposedBridge.log(e);
  }
}","public static void init(final XSharedPreferences prefs,final ClassLoader classLoader){
  log(""String_Node_Str"");
  try {
    final ThreadLocal<RemoveNotificationMethodState> removeNotificationState=new ThreadLocal<RemoveNotificationMethodState>();
    prefs.reload();
    mActiveTileKeys=prefs.getStringSet(GravityBoxSettings.PREF_KEY_QUICK_SETTINGS,null);
    log(""String_Node_Str"" + (mActiveTileKeys == null ? ""String_Node_Str"" : mActiveTileKeys.toString()));
    final Class<?> quickSettingsClass=XposedHelpers.findClass(CLASS_QUICK_SETTINGS,classLoader);
    final Class<?> phoneStatusBarClass=XposedHelpers.findClass(CLASS_PHONE_STATUSBAR,classLoader);
    final Class<?> panelBarClass=XposedHelpers.findClass(CLASS_PANEL_BAR,classLoader);
    mQuickSettingsTileViewClass=XposedHelpers.findClass(CLASS_QS_TILEVIEW,classLoader);
    final Class<?> notifPanelViewClass=XposedHelpers.findClass(CLASS_NOTIF_PANELVIEW,classLoader);
    XposedBridge.hookAllConstructors(quickSettingsClass,quickSettingsConstructHook);
    XposedHelpers.findAndHookMethod(quickSettingsClass,""String_Node_Str"",panelBarClass,quickSettingsSetBarHook);
    XposedHelpers.findAndHookMethod(quickSettingsClass,""String_Node_Str"",phoneStatusBarClass,quickSettingsSetServiceHook);
    XposedHelpers.findAndHookMethod(quickSettingsClass,""String_Node_Str"",ViewGroup.class,LayoutInflater.class,quickSettingsAddSystemTilesHook);
    XposedHelpers.findAndHookMethod(quickSettingsClass,""String_Node_Str"",quickSettingsUpdateResourcesHook);
    XposedHelpers.findAndHookMethod(notifPanelViewClass,""String_Node_Str"",MotionEvent.class,notificationPanelViewOnTouchEvent);
    XposedHelpers.findAndHookMethod(phoneStatusBarClass,""String_Node_Str"",makeStatusBarViewHook);
    XposedHelpers.findAndHookMethod(phoneStatusBarClass,""String_Node_Str"",IBinder.class,new XC_MethodHook(){
      @Override protected void beforeHookedMethod(      final MethodHookParam param) throws Throwable {
        if (DEBUG) {
          log(""String_Node_Str"");
        }
        removeNotificationState.set(RemoveNotificationMethodState.METHOD_ENTERED);
      }
      @Override protected void afterHookedMethod(      final MethodHookParam param) throws Throwable {
        if (DEBUG) {
          log(""String_Node_Str"");
        }
        removeNotificationState.set(RemoveNotificationMethodState.METHOD_EXITED);
      }
    }
);
    XposedHelpers.findAndHookMethod(phoneStatusBarClass,""String_Node_Str"",new XC_MethodHook(){
      @Override protected void beforeHookedMethod(      final MethodHookParam param) throws Throwable {
        if (removeNotificationState.get() != null && removeNotificationState.get().equals(RemoveNotificationMethodState.METHOD_ENTERED)) {
          log(""String_Node_Str"");
          boolean hasFlipSettings=XposedHelpers.getBooleanField(param.thisObject,""String_Node_Str"");
          boolean animating=XposedHelpers.getBooleanField(param.thisObject,""String_Node_Str"");
          View flipSettingsView=(View)XposedHelpers.getObjectField(param.thisObject,""String_Node_Str"");
          Object notificationData=XposedHelpers.getObjectField(mStatusBar,""String_Node_Str"");
          int ndSize=(Integer)XposedHelpers.callMethod(notificationData,""String_Node_Str"");
          boolean isShowingSettings=hasFlipSettings && flipSettingsView.getVisibility() == View.VISIBLE;
          if (ndSize == 0 && !animating && !isShowingSettings) {
          }
 else {
            log(""String_Node_Str"");
            param.setResult(null);
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    XposedBridge.log(e);
  }
}"
53120,"private void getStations(JsonArray array){
  ListIterator l=array.listIterator();
  while (l.hasNext()) {
    JsonObject object=(JsonObject)l.next();
    boolean bType=object.containsKey(""String_Node_Str"");
    boolean bKey=object.containsKey(""String_Node_Str"");
    String type=""String_Node_Str"";
    String key=""String_Node_Str"";
    if (bType) {
      type=object.getString(""String_Node_Str"");
    }
    if (bKey) {
      key=object.getString(""String_Node_Str"");
    }
    if (bType || bKey) {
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          JsonArray children=object.getJsonArray(""String_Node_Str"");
{
            if (children != null) {
              getStations(children);
            }
          }
        }
      }
 else       if (key.equalsIgnoreCase(""String_Node_Str"")) {
        JsonArray children=object.getJsonArray(""String_Node_Str"");
{
          if (children != null) {
            getStations(children);
          }
        }
      }
 else {
        boolean bItem=object.containsKey(""String_Node_Str"");
        if (bType && bItem) {
          if (object.getString(""String_Node_Str"").toLowerCase().equalsIgnoreCase(""String_Node_Str"") && object.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
            String url=object.getString(""String_Node_Str"");
            log.debug(""String_Node_Str"" + url);
            getJsonFromURL(url + ""String_Node_Str"" + ""String_Node_Str"");
          }
 else           if (object.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"") || object.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"") || object.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
            String text=getString(object,""String_Node_Str"");
            String url=getString(object,""String_Node_Str"");
            url=tidyURL(url);
            String image=getString(object,""String_Node_Str"");
            String preset_id=getString(object,""String_Node_Str"");
            preset_id=preset_id.replaceAll(""String_Node_Str"",""String_Node_Str"");
            String item=getString(object,""String_Node_Str"");
            boolean icy_reverse=getBoolean(object,""String_Node_Str"",false);
            boolean keep_url=getBoolean(object,""String_Node_Str"",false);
            addChannel(text,url,image,icy_reverse,preset_id,item,keep_url);
          }
        }
      }
    }
  }
}","private void getStations(JsonArray array){
  ListIterator l=array.listIterator();
  while (l.hasNext()) {
    JsonObject object=(JsonObject)l.next();
    boolean bType=object.containsKey(""String_Node_Str"");
    boolean bKey=object.containsKey(""String_Node_Str"");
    String type=""String_Node_Str"";
    String key=""String_Node_Str"";
    if (bType) {
      type=object.getString(""String_Node_Str"");
    }
    if (bKey) {
      key=object.getString(""String_Node_Str"");
    }
    if (bType || bKey) {
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          JsonArray children=object.getJsonArray(""String_Node_Str"");
{
            if (children != null) {
              log.debug(""String_Node_Str"");
              getStations(children);
            }
          }
        }
      }
      if (key.equalsIgnoreCase(""String_Node_Str"")) {
        JsonArray children=object.getJsonArray(""String_Node_Str"");
{
          if (children != null) {
            log.debug(""String_Node_Str"");
            getStations(children);
          }
        }
      }
      if (key.equalsIgnoreCase(""String_Node_Str"")) {
        JsonArray children=object.getJsonArray(""String_Node_Str"");
        if (children != null) {
          log.debug(""String_Node_Str"");
          getStations(children);
        }
      }
      if (key.equalsIgnoreCase(""String_Node_Str"")) {
        JsonArray children=object.getJsonArray(""String_Node_Str"");
        if (children != null) {
          log.debug(""String_Node_Str"");
          getStations(children);
        }
      }
      boolean bItem=object.containsKey(""String_Node_Str"");
      if (bType && bItem) {
        if (object.getString(""String_Node_Str"").toLowerCase().equalsIgnoreCase(""String_Node_Str"") && object.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          String url=object.getString(""String_Node_Str"");
          log.debug(""String_Node_Str"" + url);
          getJsonFromURL(url + ""String_Node_Str"" + ""String_Node_Str"");
        }
 else         if (object.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"") || object.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"") || object.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          String text=getString(object,""String_Node_Str"");
          String url=getString(object,""String_Node_Str"");
          url=tidyURL(url);
          String image=getString(object,""String_Node_Str"");
          String preset_id=getString(object,""String_Node_Str"");
          preset_id=preset_id.replaceAll(""String_Node_Str"",""String_Node_Str"");
          String item=getString(object,""String_Node_Str"");
          boolean icy_reverse=getBoolean(object,""String_Node_Str"",false);
          boolean keep_url=getBoolean(object,""String_Node_Str"",false);
          addChannel(text,url,image,icy_reverse,preset_id,item,keep_url);
        }
      }
    }
  }
}"
53121,"/** 
 * Set the Path to the ohNetxx.so files
 */
private void setJavaPath(){
  try {
    String class_name=this.getClass().getName();
    log.debug(""String_Node_Str"" + class_name);
    String path=getFilePath(this.getClass(),true);
    String full_path=path + OHNET_LIB_DIR + ""String_Node_Str"";
    log.debug(""String_Node_Str"" + path);
    String os=System.getProperty(""String_Node_Str"").toUpperCase();
    log.debug(""String_Node_Str"" + os);
    if (os.startsWith(""String_Node_Str"")) {
      log.debug(""String_Node_Str"");
      String osPathName=""String_Node_Str"";
      String osArch=System.getProperty(""String_Node_Str"");
      String architecture=""String_Node_Str"";
      if (osArch.endsWith(""String_Node_Str"")) {
        architecture=""String_Node_Str"";
      }
      full_path=path + OHNET_LIB_DIR + ""String_Node_Str""+ osPathName+ ""String_Node_Str""+ architecture;
    }
 else     if (os.startsWith(""String_Node_Str"")) {
      String osPathName=""String_Node_Str"";
      String arch=System.getProperty(""String_Node_Str"").toUpperCase();
      if (arch.startsWith(""String_Node_Str"")) {
        String osArch=""String_Node_Str"";
        log.debug(""String_Node_Str"");
        try {
          String armVersion=getReadElfTag(""String_Node_Str"");
          if (armVersion == null) {
            log.error(""String_Node_Str"");
            osArch=""String_Node_Str"";
          }
 else           if (armVersion.equals(""String_Node_Str"")) {
            osArch=osArch + ""String_Node_Str"";
          }
 else           if (armVersion.equals(""String_Node_Str"")) {
            log.debug(""String_Node_Str"");
            setRaspi(true);
            if (isHardFloat()) {
              osArch=osArch + ""String_Node_Str"";
            }
 else {
              osArch=osArch + ""String_Node_Str"";
            }
          }
 else           if (armVersion.equals(""String_Node_Str"")) {
            osArch=osArch + ""String_Node_Str"";
          }
 else {
            log.error(""String_Node_Str"" + armVersion + ""String_Node_Str"");
            osArch=""String_Node_Str"";
          }
          if (!osArch.equals(""String_Node_Str"")) {
            full_path=path + OHNET_LIB_DIR + ""String_Node_Str""+ osPathName+ ""String_Node_Str""+ osArch;
          }
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"",e);
        }
      }
 else       if (arch.startsWith(""String_Node_Str"")) {
        String version=System.getProperty(""String_Node_Str"");
        log.debug(""String_Node_Str"" + arch + ""String_Node_Str""+ version);
        full_path=path + OHNET_LIB_DIR + ""String_Node_Str""+ osPathName+ ""String_Node_Str"";
      }
 else       if (arch.startsWith(""String_Node_Str"")) {
        String version=System.getProperty(""String_Node_Str"");
        log.debug(""String_Node_Str"" + arch + ""String_Node_Str""+ version);
        full_path=path + OHNET_LIB_DIR + ""String_Node_Str""+ osPathName+ ""String_Node_Str"";
      }
    }
    log.warn(""String_Node_Str"" + full_path);
    addLibraryPath(full_path);
  }
 catch (  Exception e) {
    log.error(e);
  }
}","/** 
 * Set the Path to the ohNetxx.so files
 */
private void setJavaPath(){
  try {
    String class_name=this.getClass().getName();
    log.debug(""String_Node_Str"" + class_name);
    String path=getFilePath(this.getClass(),true);
    path=path + ""String_Node_Str"";
    if (path.endsWith(""String_Node_Str"")) {
      path=path.substring(0,(path.length() - 1));
      log.debug(""String_Node_Str"" + path);
    }
    String full_path=path + OHNET_LIB_DIR + ""String_Node_Str"";
    log.debug(""String_Node_Str"" + path);
    String os=System.getProperty(""String_Node_Str"").toUpperCase();
    log.debug(""String_Node_Str"" + os);
    if (os.startsWith(""String_Node_Str"")) {
      log.debug(""String_Node_Str"");
      String osPathName=""String_Node_Str"";
      String osArch=System.getProperty(""String_Node_Str"");
      String architecture=""String_Node_Str"";
      if (osArch.endsWith(""String_Node_Str"")) {
        architecture=""String_Node_Str"";
      }
      full_path=path + OHNET_LIB_DIR + ""String_Node_Str""+ osPathName+ ""String_Node_Str""+ architecture;
    }
 else     if (os.startsWith(""String_Node_Str"")) {
      String osPathName=""String_Node_Str"";
      String arch=System.getProperty(""String_Node_Str"").toUpperCase();
      if (arch.startsWith(""String_Node_Str"")) {
        String osArch=""String_Node_Str"";
        log.debug(""String_Node_Str"");
        try {
          String armVersion=getReadElfTag(""String_Node_Str"");
          if (armVersion == null) {
            log.error(""String_Node_Str"");
            osArch=""String_Node_Str"";
          }
 else           if (armVersion.equals(""String_Node_Str"")) {
            osArch=osArch + ""String_Node_Str"";
          }
 else           if (armVersion.equals(""String_Node_Str"")) {
            log.debug(""String_Node_Str"");
            setRaspi(true);
            if (isHardFloat()) {
              osArch=osArch + ""String_Node_Str"";
            }
 else {
              osArch=osArch + ""String_Node_Str"";
            }
          }
 else           if (armVersion.equals(""String_Node_Str"")) {
            osArch=osArch + ""String_Node_Str"";
          }
 else {
            log.error(""String_Node_Str"" + armVersion + ""String_Node_Str"");
            osArch=""String_Node_Str"";
          }
          if (!osArch.equals(""String_Node_Str"")) {
            full_path=path + OHNET_LIB_DIR + ""String_Node_Str""+ osPathName+ ""String_Node_Str""+ osArch;
          }
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"",e);
        }
      }
 else       if (arch.startsWith(""String_Node_Str"")) {
        String version=System.getProperty(""String_Node_Str"");
        log.debug(""String_Node_Str"" + arch + ""String_Node_Str""+ version);
        full_path=path + OHNET_LIB_DIR + ""String_Node_Str""+ osPathName+ ""String_Node_Str"";
      }
 else       if (arch.startsWith(""String_Node_Str"")) {
        String version=System.getProperty(""String_Node_Str"");
        log.debug(""String_Node_Str"" + arch + ""String_Node_Str""+ version);
        full_path=path + OHNET_LIB_DIR + ""String_Node_Str""+ osPathName+ ""String_Node_Str"";
      }
    }
    log.warn(""String_Node_Str"" + full_path);
    addLibraryPath(full_path);
  }
 catch (  Exception e) {
    log.error(e);
  }
}"
53122,"private void createMenuBar(){
  JMenu fileMenu=new JMenu(""String_Node_Str"");
  JMenuItem fileOpenItem=new JMenuItem(""String_Node_Str"");
  fileOpenItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showOpenLogDialog();
    }
  }
);
  fileMenu.add(fileOpenItem);
  JMenuItem loadPresetItem=new JMenuItem(""String_Node_Str"");
  loadPresetItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showImportPresetDialog();
    }
  }
);
  fileMenu.add(loadPresetItem);
  JMenuItem savePresetItem=new JMenuItem(""String_Node_Str"");
  savePresetItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showPresetExportDialog();
    }
  }
);
  fileMenu.add(savePresetItem);
  JMenuItem exportPlotItem=new JMenuItem(""String_Node_Str"");
  exportPlotItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showPlotExportDialog();
    }
  }
);
  fileMenu.add(exportPlotItem);
  JMenuItem exportTrackItem=new JMenuItem(""String_Node_Str"");
  exportTrackItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showTrackExportDialog();
    }
  }
);
  fileMenu.add(exportTrackItem);
  JMenuItem exportParametersItem=new JMenuItem(""String_Node_Str"");
  exportParametersItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showParametersExportDialog();
    }
  }
);
  fileMenu.add(exportParametersItem);
  if (!OSValidator.isMac()) {
    fileMenu.add(new JPopupMenu.Separator());
    JMenuItem exitItem=new JMenuItem(""String_Node_Str"");
    exitItem.setAccelerator(KeyStroke.getKeyStroke('Q',Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
    exitItem.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent actionEvent){
        onQuit();
      }
    }
);
    fileMenu.add(exitItem);
  }
  JMenu viewMenu=new JMenu(""String_Node_Str"");
  timeModeItems=new JRadioButtonMenuItem[3];
  timeModeItems[TIME_MODE_LOG_START]=new JRadioButtonMenuItem(""String_Node_Str"");
  timeModeItems[TIME_MODE_BOOT]=new JRadioButtonMenuItem(""String_Node_Str"");
  timeModeItems[TIME_MODE_GPS]=new JRadioButtonMenuItem(""String_Node_Str"");
  ButtonGroup timeModeGroup=new ButtonGroup();
  for (  JRadioButtonMenuItem item : timeModeItems) {
    timeModeGroup.add(item);
    item.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        onTimeModeChanged();
        processFile();
      }
    }
);
    viewMenu.add(item);
  }
  JMenuBar menuBar=new JMenuBar();
  menuBar.add(fileMenu);
  menuBar.add(viewMenu);
  mainFrame.setJMenuBar(menuBar);
}","private void createMenuBar(){
  JMenu fileMenu=new JMenu(""String_Node_Str"");
  JMenuItem fileOpenItem=new JMenuItem(""String_Node_Str"");
  fileOpenItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showOpenLogDialog();
    }
  }
);
  fileMenu.add(fileOpenItem);
  JMenuItem importPresetItem=new JMenuItem(""String_Node_Str"");
  importPresetItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showImportPresetDialog();
    }
  }
);
  fileMenu.add(importPresetItem);
  JMenuItem exportPresetItem=new JMenuItem(""String_Node_Str"");
  exportPresetItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showExportPresetDialog();
    }
  }
);
  fileMenu.add(exportPresetItem);
  JMenuItem exportAsImageItem=new JMenuItem(""String_Node_Str"");
  exportAsImageItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showExportAsImageDialog();
    }
  }
);
  fileMenu.add(exportAsImageItem);
  JMenuItem exportTrackItem=new JMenuItem(""String_Node_Str"");
  exportTrackItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showExportTrackDialog();
    }
  }
);
  fileMenu.add(exportTrackItem);
  JMenuItem exportParametersItem=new JMenuItem(""String_Node_Str"");
  exportParametersItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showExportParametersDialog();
    }
  }
);
  fileMenu.add(exportParametersItem);
  if (!OSValidator.isMac()) {
    fileMenu.add(new JPopupMenu.Separator());
    JMenuItem exitItem=new JMenuItem(""String_Node_Str"");
    exitItem.setAccelerator(KeyStroke.getKeyStroke('Q',Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
    exitItem.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent actionEvent){
        onQuit();
      }
    }
);
    fileMenu.add(exitItem);
  }
  JMenu viewMenu=new JMenu(""String_Node_Str"");
  timeModeItems=new JRadioButtonMenuItem[3];
  timeModeItems[TIME_MODE_LOG_START]=new JRadioButtonMenuItem(""String_Node_Str"");
  timeModeItems[TIME_MODE_BOOT]=new JRadioButtonMenuItem(""String_Node_Str"");
  timeModeItems[TIME_MODE_GPS]=new JRadioButtonMenuItem(""String_Node_Str"");
  ButtonGroup timeModeGroup=new ButtonGroup();
  for (  JRadioButtonMenuItem item : timeModeItems) {
    timeModeGroup.add(item);
    item.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        onTimeModeChanged();
        processFile();
      }
    }
);
    viewMenu.add(item);
  }
  JMenuBar menuBar=new JMenuBar();
  menuBar.add(fileMenu);
  menuBar.add(viewMenu);
  mainFrame.setJMenuBar(menuBar);
}"
53123,"private void setChartColors(){
  if (dataset.getSeriesCount() > 0) {
    for (int i=0; i < activeProcessors.size(); i++) {
      for (      Map.Entry<String,Integer> entry : seriesIndex.get(i).entrySet()) {
        ProcessorPreset processorPreset=activeProcessors.get(i);
        ((AbstractRenderer)jFreeChart.getXYPlot().getRendererForDataset(dataset)).setSeriesPaint(entry.getValue(),processorPreset.getColors().get(entry.getKey()),false);
      }
    }
  }
}","private void setChartColors(){
  if (dataset.getSeriesCount() > 0) {
    for (int i=0; i < activeProcessors.size(); i++) {
      for (      Map.Entry<String,Integer> entry : seriesIndex.get(i).entrySet()) {
        ProcessorPreset processorPreset=activeProcessors.get(i);
        AbstractRenderer renderer=(AbstractRenderer)jFreeChart.getXYPlot().getRendererForDataset(dataset);
        renderer.setSeriesPaint(entry.getValue(),processorPreset.getColors().get(entry.getKey()),true);
      }
    }
  }
}"
53124,"private void loadPreset(Preset preset){
  processorsListModel.setRowCount(0);
  for (  ProcessorPreset pp : preset.getProcessorPresets()) {
    updatePresetParameters(pp,null);
    processorsListModel.addRow(new Object[]{true,pp});
  }
  updateUsedColors();
}","private void loadPreset(Preset preset){
  processorsListModel.setRowCount(0);
  for (  ProcessorPreset pp : preset.getProcessorPresets()) {
    updatePresetParameters(pp,null);
    processorsListModel.addRow(new Object[]{true,pp.clone()});
  }
  updateUsedColors();
}"
53125,"private void generateSeries() throws IOException, FormatErrorException {
  activeProcessors.clear();
  for (int row=0; row < processorsListModel.getRowCount(); row++) {
    if ((Boolean)processorsListModel.getValueAt(row,0)) {
      activeProcessors.add((ProcessorPreset)processorsListModel.getValueAt(row,1));
    }
  }
  dataset.removeAllSeries();
  seriesIndex.clear();
  PlotProcessor[] processors=new PlotProcessor[activeProcessors.size()];
  long timeOffset=getTimeOffset(timeMode);
  Range range=getLogRange(timeMode);
  long timeStart=(long)((range.getLowerBound() - range.getLength()) * 1e6);
  long timeStop=(long)((range.getUpperBound() + range.getLength()) * 1e6);
  timeStart=Math.max(logReader.getStartMicroseconds(),timeStart);
  timeStop=Math.min(logReader.getStartMicroseconds() + logReader.getSizeMicroseconds(),timeStop);
  double timeScale=(selectDomainAxis(timeMode) == domainAxisDate) ? 1000.0 : 1.0;
  int displayPixels=2000;
  double skip=range.getLength() / displayPixels;
  if (processors.length > 0) {
    for (int i=0; i < activeProcessors.size(); i++) {
      ProcessorPreset pp=activeProcessors.get(i);
      PlotProcessor processor;
      try {
        processor=processorsTypesList.getProcessorInstance(pp,skip,logReader.getFields());
        processor.setFieldsList(logReader.getFields());
        processors[i]=processor;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    logReader.seek(timeStart);
    Map<String,Object> data=new HashMap<String,Object>();
    while (true) {
      long t;
      data.clear();
      try {
        t=logReader.readUpdate(data);
      }
 catch (      EOFException e) {
        break;
      }
      if (t > timeStop) {
        break;
      }
      for (      PlotProcessor processor : processors) {
        processor.process((t + timeOffset) * 1e-6,data);
      }
    }
    for (int i=0; i < activeProcessors.size(); i++) {
      PlotProcessor processor=processors[i];
      String processorTitle=activeProcessors.get(i).getTitle();
      Map<String,Integer> processorSeriesIndex=new HashMap<String,Integer>();
      seriesIndex.add(processorSeriesIndex);
      for (      Series series : processor.getSeriesList()) {
        processorSeriesIndex.put(series.getTitle(),dataset.getSeriesCount());
        XYSeries jseries=new XYSeries(series.getFullTitle(processorTitle),false);
        for (        XYPoint point : series) {
          jseries.add(point.x * timeScale,point.y,false);
        }
        dataset.addSeries(jseries);
      }
    }
    setChartColors();
    setChartMarkers();
  }
  chartPanel.repaint();
}","private void generateSeries() throws IOException, FormatErrorException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
  activeProcessors.clear();
  for (int row=0; row < processorsListModel.getRowCount(); row++) {
    if ((Boolean)processorsListModel.getValueAt(row,0)) {
      activeProcessors.add((ProcessorPreset)processorsListModel.getValueAt(row,1));
    }
  }
  dataset.removeAllSeries();
  seriesIndex.clear();
  PlotProcessor[] processors=new PlotProcessor[activeProcessors.size()];
  long timeOffset=getTimeOffset(timeMode);
  Range range=getLogRange(timeMode);
  long timeStart=(long)((range.getLowerBound() - range.getLength()) * 1e6);
  long timeStop=(long)((range.getUpperBound() + range.getLength()) * 1e6);
  timeStart=Math.max(logReader.getStartMicroseconds(),timeStart);
  timeStop=Math.min(logReader.getStartMicroseconds() + logReader.getSizeMicroseconds(),timeStop);
  double timeScale=(selectDomainAxis(timeMode) == domainAxisDate) ? 1000.0 : 1.0;
  int displayPixels=2000;
  double skip=range.getLength() / displayPixels;
  if (processors.length > 0) {
    for (int i=0; i < activeProcessors.size(); i++) {
      ProcessorPreset pp=activeProcessors.get(i);
      PlotProcessor processor;
      processor=processorsTypesList.getProcessorInstance(pp,skip,logReader.getFields());
      processor.setFieldsList(logReader.getFields());
      processors[i]=processor;
    }
    logReader.seek(timeStart);
    Map<String,Object> data=new HashMap<String,Object>();
    while (true) {
      long t;
      data.clear();
      try {
        t=logReader.readUpdate(data);
      }
 catch (      EOFException e) {
        break;
      }
      if (t > timeStop) {
        break;
      }
      for (      PlotProcessor processor : processors) {
        processor.process((t + timeOffset) * 1e-6,data);
      }
    }
    for (int i=0; i < activeProcessors.size(); i++) {
      PlotProcessor processor=processors[i];
      String processorTitle=activeProcessors.get(i).getTitle();
      Map<String,Integer> processorSeriesIndex=new HashMap<String,Integer>();
      seriesIndex.add(processorSeriesIndex);
      for (      Series series : processor.getSeriesList()) {
        processorSeriesIndex.put(series.getTitle(),dataset.getSeriesCount());
        XYSeries jseries=new XYSeries(series.getFullTitle(processorTitle),false);
        for (        XYPoint point : series) {
          jseries.add(point.x * timeScale,point.y,false);
        }
        dataset.addSeries(jseries);
      }
    }
    setChartColors();
    setChartMarkers();
  }
  chartPanel.repaint();
}"
53126,"private void openLog(String logFileName){
  String logFileNameLower=logFileName.toLowerCase();
  LogReader logReaderNew=null;
  try {
    if (logFileNameLower.endsWith(""String_Node_Str"") || logFileNameLower.endsWith(""String_Node_Str"")) {
      logReaderNew=new PX4LogReader(logFileName);
    }
 else     if (logFileNameLower.endsWith(""String_Node_Str"")) {
      logReaderNew=new ULogReader(logFileName);
    }
 else {
      setStatus(""String_Node_Str"" + logFileName);
      return;
    }
  }
 catch (  Exception e) {
    setStatus(""String_Node_Str"" + e);
    e.printStackTrace();
    return;
  }
  mainFrame.setTitle(appNameAndVersion + ""String_Node_Str"" + logFileName);
  if (logReader != null) {
    try {
      logReader.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    logReader=null;
  }
  logReader=logReaderNew;
  logInfo.updateInfo(logReader);
  fieldsListDialog.setFieldsList(logReader.getFields());
  onTimeModeChanged();
  jFreeChart.getXYPlot().getDomainAxis().setAutoRange(true);
  jFreeChart.getXYPlot().getRangeAxis().setAutoRange(true);
  processFile();
}","private void openLog(String logFileName){
  String logFileNameLower=logFileName.toLowerCase();
  LogReader logReaderNew;
  try {
    if (logFileNameLower.endsWith(""String_Node_Str"") || logFileNameLower.endsWith(""String_Node_Str"")) {
      logReaderNew=new PX4LogReader(logFileName);
    }
 else     if (logFileNameLower.endsWith(""String_Node_Str"")) {
      logReaderNew=new ULogReader(logFileName);
    }
 else {
      setStatus(""String_Node_Str"" + logFileName);
      return;
    }
  }
 catch (  Exception e) {
    setStatus(""String_Node_Str"" + e);
    e.printStackTrace();
    return;
  }
  mainFrame.setTitle(appNameAndVersion + ""String_Node_Str"" + logFileName);
  if (logReader != null) {
    try {
      logReader.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    logReader=null;
  }
  logReader=logReaderNew;
  logInfo.updateInfo(logReader);
  fieldsListDialog.setFieldsList(logReader.getFields());
  onTimeModeChanged();
  jFreeChart.getXYPlot().getDomainAxis().setAutoRange(true);
  jFreeChart.getXYPlot().getRangeAxis().setAutoRange(true);
  processFile();
}"
53127,"@Override public void tableChanged(TableModelEvent e){
  if (e.getType() == TableModelEvent.UPDATE) {
    int row=e.getFirstRow();
    onParameterChanged(row);
  }
}","@Override public void tableChanged(TableModelEvent e){
  if (e.getType() == TableModelEvent.UPDATE) {
    int row=e.getFirstRow();
    onParameterChanged(row);
    editingProcessor=null;
  }
}"
53128,"private void onParameterChanged(int row){
  if (editingProcessor != null) {
    String key=parametersTableModel.getValueAt(row,0).toString();
    Object value=parametersTableModel.getValueAt(row,1);
    if (value instanceof Color) {
      editingProcessor.getColors().put(key.substring(colorParamPrefix.length(),key.length()),(Color)value);
      setChartColors();
    }
 else {
      try {
        updatePresetParameters(editingProcessor,Collections.<String,Object>singletonMap(key,value.toString()));
        updatePresetEdited(true);
      }
 catch (      Exception e) {
        e.printStackTrace();
        setStatus(""String_Node_Str"" + e);
      }
      parametersTableModel.removeTableModelListener(parameterChangedListener);
      showProcessorParameters();
      parametersTableModel.addTableModelListener(parameterChangedListener);
      parametersTable.addRowSelectionInterval(row,row);
      processFile();
    }
  }
}","private void onParameterChanged(int row){
  if (editingProcessor != null && editingProcessor == getSelectedProcessor()) {
    String key=parametersTableModel.getValueAt(row,0).toString();
    Object value=parametersTableModel.getValueAt(row,1);
    if (value instanceof Color) {
      editingProcessor.getColors().put(key.substring(colorParamPrefix.length(),key.length()),(Color)value);
      setChartColors();
    }
    try {
      updatePresetParameters(editingProcessor,Collections.<String,Object>singletonMap(key,value.toString()));
      updatePresetEdited(true);
    }
 catch (    Exception e) {
      e.printStackTrace();
      setStatus(""String_Node_Str"" + e);
    }
    if (!(value instanceof Color)) {
      parametersTableModel.removeTableModelListener(parameterChangedListener);
      showProcessorParameters();
      parametersTableModel.addTableModelListener(parameterChangedListener);
      parametersTable.addRowSelectionInterval(row,row);
      processFile();
    }
  }
}"
53129,"private Preset formatPreset(String title){
  List<ProcessorPreset> processorPresets=new ArrayList<ProcessorPreset>();
  for (int i=0; i < processorsListModel.getRowCount(); i++) {
    processorPresets.add((ProcessorPreset)processorsListModel.getValueAt(i,1));
  }
  return new Preset(title,processorPresets);
}","private Preset formatPreset(String title){
  List<ProcessorPreset> processorPresets=new ArrayList<ProcessorPreset>();
  for (int i=0; i < processorsListModel.getRowCount(); i++) {
    processorPresets.add(((ProcessorPreset)processorsListModel.getValueAt(i,1)).clone());
  }
  return new Preset(title,processorPresets);
}"
53130,"public FlightPlot(){
  Map<String,TrackExporter> exporters=new LinkedHashMap<String,TrackExporter>();
  for (  TrackExporter exporter : new TrackExporter[]{new KMLTrackExporter(),new GPXTrackExporter()}) {
    exporters.put(exporter.getName(),exporter);
  }
  exportDialog=new TrackExportDialog(exporters);
  preferences=Preferences.userRoot().node(appName);
  mainFrame=new JFrame(appNameAndVersion);
  mainFrame.setContentPane(mainPanel);
  mainFrame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  mainFrame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      onQuit();
    }
  }
);
  mainFrame.setDropTarget(new DropTarget(){
    public synchronized void drop(    DropTargetDropEvent evt){
      try {
        evt.acceptDrop(DnDConstants.ACTION_COPY);
        List<File> droppedFiles=(List<File>)evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
        if (droppedFiles.size() == 1) {
          File file=droppedFiles.get(0);
          openLog(file.getAbsolutePath());
        }
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
);
  mainFrame.pack();
  createMenuBar();
  java.util.List<String> processors=new ArrayList<String>(processorsTypesList.getProcessorsList());
  Collections.sort(processors);
  addProcessorDialog=new AddProcessorDialog(processors.toArray(new String[processors.size()]));
  addProcessorDialog.pack();
  fieldsListDialog=new FieldsListDialog(new Runnable(){
    @Override public void run(){
      StringBuilder fieldsValue=new StringBuilder();
      for (      String field : fieldsListDialog.getSelectedFields()) {
        if (fieldsValue.length() > 0) {
          fieldsValue.append(""String_Node_Str"");
        }
        fieldsValue.append(field);
      }
      PlotProcessor processor=new Simple();
      processor.setParameters(Collections.<String,Object>singletonMap(""String_Node_Str"",fieldsValue.toString()));
      ProcessorPreset pp=new ProcessorPreset(""String_Node_Str"",processor.getProcessorType(),processor.getParameters(),Collections.<String,Color>emptyMap());
      updatePresetParameters(pp,null);
      int i=processorsListModel.getRowCount();
      processorsListModel.addRow(new Object[]{true,pp});
      processorsList.getSelectionModel().setSelectionInterval(i,i);
      processorsList.repaint();
      updateUsedColors();
      showAddProcessorDialog(true);
      processFile();
    }
  }
);
  logInfo=new LogInfo();
  addProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showAddProcessorDialog(false);
    }
  }
);
  removeProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      removeSelectedProcessor();
    }
  }
);
  openLogButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showOpenLogDialog();
    }
  }
);
  fieldsListButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      fieldsListDialog.setVisible(true);
    }
  }
);
  logInfoButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      logInfo.setVisible(true);
    }
  }
);
  processorsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  processorsList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent listSelectionEvent){
      showProcessorParameters();
    }
  }
);
  processorsList.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  processorsList.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent ae){
      showAddProcessorDialog(true);
    }
  }
);
  processorsList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      JTable target=(JTable)e.getSource();
      if (e.getClickCount() > 1 && target.getSelectedColumn() == 1) {
        showAddProcessorDialog(true);
      }
    }
  }
);
  processorsListModel.addTableModelListener(new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getType() == TableModelEvent.UPDATE) {
        if (e.getColumn() == 0) {
          processFile();
        }
      }
    }
  }
);
  parameterChangedListener=new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getType() == TableModelEvent.UPDATE) {
        int row=e.getFirstRow();
        onParameterChanged(row);
      }
    }
  }
;
  parametersTableModel.addTableModelListener(parameterChangedListener);
  FileNameExtensionFilter[] logExtensionfilters=new FileNameExtensionFilter[]{new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"")};
  openLogFileChooser=new JFileChooser();
  for (  FileNameExtensionFilter filter : logExtensionfilters) {
    openLogFileChooser.addChoosableFileFilter(filter);
  }
  openLogFileChooser.setFileFilter(logExtensionfilters[0]);
  openLogFileChooser.setDialogTitle(""String_Node_Str"");
  presetComboBox.setMaximumRowCount(20);
  presetComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onPresetAction(e);
    }
  }
);
  updatePresetEdited(true);
  deletePresetButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onDeletePreset();
    }
  }
);
  markerCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setChartMarkers();
    }
  }
);
  mainFrame.setVisible(true);
  try {
    loadPreferences();
  }
 catch (  BackingStoreException e) {
    e.printStackTrace();
  }
}","public FlightPlot(){
  Map<String,TrackExporter> exporters=new LinkedHashMap<String,TrackExporter>();
  for (  TrackExporter exporter : new TrackExporter[]{new KMLTrackExporter(),new GPXTrackExporter()}) {
    exporters.put(exporter.getName(),exporter);
  }
  exportDialog=new TrackExportDialog(exporters);
  preferences=Preferences.userRoot().node(appName);
  mainFrame=new JFrame(appNameAndVersion);
  mainFrame.setContentPane(mainPanel);
  mainFrame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  mainFrame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      onQuit();
    }
  }
);
  mainFrame.setDropTarget(new DropTarget(){
    public synchronized void drop(    DropTargetDropEvent evt){
      try {
        evt.acceptDrop(DnDConstants.ACTION_COPY);
        List<File> droppedFiles=(List<File>)evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
        if (droppedFiles.size() == 1) {
          File file=droppedFiles.get(0);
          openLog(file.getAbsolutePath());
        }
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
);
  mainFrame.pack();
  createMenuBar();
  java.util.List<String> processors=new ArrayList<String>(processorsTypesList.getProcessorsList());
  Collections.sort(processors);
  addProcessorDialog=new AddProcessorDialog(processors.toArray(new String[processors.size()]));
  addProcessorDialog.pack();
  fieldsListDialog=new FieldsListDialog(new Runnable(){
    @Override public void run(){
      StringBuilder fieldsValue=new StringBuilder();
      for (      String field : fieldsListDialog.getSelectedFields()) {
        if (fieldsValue.length() > 0) {
          fieldsValue.append(""String_Node_Str"");
        }
        fieldsValue.append(field);
      }
      PlotProcessor processor=new Simple();
      processor.setParameters(Collections.<String,Object>singletonMap(""String_Node_Str"",fieldsValue.toString()));
      ProcessorPreset pp=new ProcessorPreset(""String_Node_Str"",processor.getProcessorType(),processor.getParameters(),Collections.<String,Color>emptyMap());
      updatePresetParameters(pp,null);
      int i=processorsListModel.getRowCount();
      processorsListModel.addRow(new Object[]{true,pp});
      processorsList.getSelectionModel().setSelectionInterval(i,i);
      processorsList.repaint();
      updateUsedColors();
      showAddProcessorDialog(true);
      processFile();
    }
  }
);
  logInfo=new LogInfo();
  addProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showAddProcessorDialog(false);
    }
  }
);
  removeProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      removeSelectedProcessor();
    }
  }
);
  openLogButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showOpenLogDialog();
    }
  }
);
  fieldsListButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      fieldsListDialog.setVisible(true);
    }
  }
);
  logInfoButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      logInfo.setVisible(true);
    }
  }
);
  processorsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  processorsList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent listSelectionEvent){
      if (editingProcessor == null) {
        showProcessorParameters();
      }
    }
  }
);
  processorsList.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  processorsList.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent ae){
      showAddProcessorDialog(true);
    }
  }
);
  processorsList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      JTable target=(JTable)e.getSource();
      if (e.getClickCount() > 1 && target.getSelectedColumn() == 1) {
        showAddProcessorDialog(true);
      }
    }
  }
);
  processorsListModel.addTableModelListener(new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getType() == TableModelEvent.UPDATE) {
        if (e.getColumn() == 0) {
          processFile();
        }
      }
    }
  }
);
  parameterChangedListener=new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getType() == TableModelEvent.UPDATE) {
        int row=e.getFirstRow();
        onParameterChanged(row);
        editingProcessor=null;
      }
    }
  }
;
  parametersTableModel.addTableModelListener(parameterChangedListener);
  FileNameExtensionFilter[] logExtensionfilters=new FileNameExtensionFilter[]{new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"")};
  openLogFileChooser=new JFileChooser();
  for (  FileNameExtensionFilter filter : logExtensionfilters) {
    openLogFileChooser.addChoosableFileFilter(filter);
  }
  openLogFileChooser.setFileFilter(logExtensionfilters[0]);
  openLogFileChooser.setDialogTitle(""String_Node_Str"");
  presetComboBox.setMaximumRowCount(20);
  presetComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onPresetAction(e);
    }
  }
);
  updatePresetEdited(true);
  deletePresetButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onDeletePreset();
    }
  }
);
  markerCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setChartMarkers();
    }
  }
);
  mainFrame.setVisible(true);
  try {
    loadPreferences();
  }
 catch (  BackingStoreException e) {
    e.printStackTrace();
  }
}"
53131,"@Override public void valueChanged(ListSelectionEvent listSelectionEvent){
  showProcessorParameters();
}","@Override public void valueChanged(ListSelectionEvent listSelectionEvent){
  if (editingProcessor == null) {
    showProcessorParameters();
  }
}"
53132,"@Override public void export(TrackReader trackReader,TrackExporterConfiguration config,File file,String title) throws IOException {
  this.trackReader=trackReader;
  this.config=config;
  this.writer=new FileWriter(file);
  this.title=title;
  boolean trackStarted=false;
  try {
    writeStart();
    while (true) {
      TrackPoint point=trackReader.readNextPoint();
      if (point == null) {
        break;
      }
      if (!trackStarted || (point.flightMode != null && !point.flightMode.equals(flightMode))) {
        flightMode=point.flightMode;
        trackStarted=true;
        String trackPartName;
        if (point.flightMode != null) {
          trackPartName=String.format(""String_Node_Str"",trackPart,point.flightMode);
          trackPart++;
        }
 else {
          trackPartName=""String_Node_Str"";
        }
        writeTrackPartStart(trackPartName);
      }
      writePoint(point);
    }
    if (trackStarted) {
      writeTrackPartEnd();
    }
    writeEnd();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    this.writer.close();
  }
}","@Override public void export(TrackReader trackReader,TrackExporterConfiguration config,File file,String title) throws IOException {
  this.trackReader=trackReader;
  this.config=config;
  this.writer=new BufferedWriter(new FileWriter(file));
  this.title=title;
  boolean trackStarted=false;
  try {
    writeStart();
    while (true) {
      TrackPoint point=trackReader.readNextPoint();
      if (point == null) {
        break;
      }
      if (!trackStarted || (point.flightMode != null && !point.flightMode.equals(flightMode))) {
        if (trackStarted) {
          writePoint(point);
          writeTrackPartEnd();
        }
        flightMode=point.flightMode;
        String trackPartName;
        if (point.flightMode != null) {
          trackPartName=String.format(""String_Node_Str"",trackPart,point.flightMode);
          trackPart++;
        }
 else {
          trackPartName=""String_Node_Str"";
        }
        writeTrackPartStart(trackPartName);
        trackStarted=true;
      }
      writePoint(point);
    }
    if (trackStarted) {
      writeTrackPartEnd();
    }
    writeEnd();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    this.writer.close();
  }
}"
53133,"@Override protected void writeTrackPartStart(String trackPartName) throws IOException {
  String styleId=getStyleForFlightMode(flightMode);
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + trackPartName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + styleId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
}","@Override protected void writeTrackPartStart(String trackPartName) throws IOException {
  String styleId=getStyleForFlightMode(flightMode);
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + trackPartName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + styleId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + trackPartName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
}"
53134,"public FlightPlot(){
  preferences=Preferences.userRoot().node(appName);
  mainFrame=new JFrame(appNameAndVersion);
  mainFrame.setContentPane(mainPanel);
  mainFrame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  mainFrame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      onQuit();
    }
  }
);
  mainFrame.pack();
  createMenuBar();
  java.util.List<String> processors=new ArrayList<String>(processorsTypesList.getProcessorsList());
  Collections.sort(processors);
  addProcessorDialog=new AddProcessorDialog(processors.toArray(new String[processors.size()]));
  addProcessorDialog.pack();
  fieldsListDialog=new FieldsListDialog(new Runnable(){
    @Override public void run(){
      StringBuilder fieldsValue=new StringBuilder();
      for (      String field : fieldsListDialog.getSelectedFields()) {
        if (fieldsValue.length() > 0) {
          fieldsValue.append(""String_Node_Str"");
        }
        fieldsValue.append(field);
      }
      PlotProcessor processor=new Simple();
      processor.setParameters(Collections.<String,Object>singletonMap(""String_Node_Str"",fieldsValue.toString()));
      ProcessorPreset pp=new ProcessorPreset(""String_Node_Str"",processor.getProcessorType(),processor.getParameters(),Collections.<String,Color>emptyMap());
      updatePresetParameters(pp,null);
      int i=processorsListModel.getRowCount();
      processorsListModel.addRow(new Object[]{true,pp});
      processorsList.getSelectionModel().setSelectionInterval(i,i);
      processorsList.repaint();
      updateUsedColors();
      showAddProcessorDialog(true);
      processFile();
    }
  }
);
  logInfo=new LogInfo();
  addProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showAddProcessorDialog(false);
    }
  }
);
  removeProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      removeSelectedProcessor();
    }
  }
);
  openLogButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showOpenLogDialog();
    }
  }
);
  fieldsListButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      fieldsListDialog.setVisible(true);
    }
  }
);
  logInfoButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      logInfo.setVisible(true);
    }
  }
);
  processorsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  processorsList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent listSelectionEvent){
      showProcessorParameters();
    }
  }
);
  processorsList.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  processorsList.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent ae){
      showAddProcessorDialog(true);
    }
  }
);
  processorsList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      JTable target=(JTable)e.getSource();
      if (e.getClickCount() > 1 && target.getSelectedColumn() == 1) {
        showAddProcessorDialog(true);
      }
    }
  }
);
  processorsListModel.addTableModelListener(new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getType() == TableModelEvent.UPDATE) {
        if (e.getColumn() == 0) {
          processFile();
        }
      }
    }
  }
);
  parameterChangedListener=new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getType() == TableModelEvent.UPDATE) {
        int row=e.getFirstRow();
        onParameterChanged(row);
      }
    }
  }
;
  parametersTableModel.addTableModelListener(parameterChangedListener);
  try {
    loadPreferences();
  }
 catch (  BackingStoreException e) {
    e.printStackTrace();
  }
  presetComboBox.setMaximumRowCount(20);
  presetComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onPresetAction(e);
    }
  }
);
  updatePresetEdited(true);
  deletePresetButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onDeletePreset();
    }
  }
);
  mainFrame.setVisible(true);
  markerCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setChartMarkers();
    }
  }
);
}","public FlightPlot(){
  preferences=Preferences.userRoot().node(appName);
  mainFrame=new JFrame(appNameAndVersion);
  mainFrame.setContentPane(mainPanel);
  mainFrame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  mainFrame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      onQuit();
    }
  }
);
  mainFrame.pack();
  createMenuBar();
  java.util.List<String> processors=new ArrayList<String>(processorsTypesList.getProcessorsList());
  Collections.sort(processors);
  addProcessorDialog=new AddProcessorDialog(processors.toArray(new String[processors.size()]));
  addProcessorDialog.pack();
  fieldsListDialog=new FieldsListDialog(new Runnable(){
    @Override public void run(){
      StringBuilder fieldsValue=new StringBuilder();
      for (      String field : fieldsListDialog.getSelectedFields()) {
        if (fieldsValue.length() > 0) {
          fieldsValue.append(""String_Node_Str"");
        }
        fieldsValue.append(field);
      }
      PlotProcessor processor=new Simple();
      processor.setParameters(Collections.<String,Object>singletonMap(""String_Node_Str"",fieldsValue.toString()));
      ProcessorPreset pp=new ProcessorPreset(""String_Node_Str"",processor.getProcessorType(),processor.getParameters(),Collections.<String,Color>emptyMap());
      updatePresetParameters(pp,null);
      int i=processorsListModel.getRowCount();
      processorsListModel.addRow(new Object[]{true,pp});
      processorsList.getSelectionModel().setSelectionInterval(i,i);
      processorsList.repaint();
      updateUsedColors();
      showAddProcessorDialog(true);
      processFile();
    }
  }
);
  logInfo=new LogInfo();
  addProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showAddProcessorDialog(false);
    }
  }
);
  removeProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      removeSelectedProcessor();
    }
  }
);
  openLogButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showOpenLogDialog();
    }
  }
);
  fieldsListButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      fieldsListDialog.setVisible(true);
    }
  }
);
  logInfoButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      logInfo.setVisible(true);
    }
  }
);
  processorsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  processorsList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent listSelectionEvent){
      showProcessorParameters();
    }
  }
);
  processorsList.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  processorsList.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent ae){
      showAddProcessorDialog(true);
    }
  }
);
  processorsList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      JTable target=(JTable)e.getSource();
      if (e.getClickCount() > 1 && target.getSelectedColumn() == 1) {
        showAddProcessorDialog(true);
      }
    }
  }
);
  processorsListModel.addTableModelListener(new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getType() == TableModelEvent.UPDATE) {
        if (e.getColumn() == 0) {
          processFile();
        }
      }
    }
  }
);
  parameterChangedListener=new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getType() == TableModelEvent.UPDATE) {
        int row=e.getFirstRow();
        onParameterChanged(row);
      }
    }
  }
;
  parametersTableModel.addTableModelListener(parameterChangedListener);
  presetComboBox.setMaximumRowCount(20);
  presetComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onPresetAction(e);
    }
  }
);
  updatePresetEdited(true);
  deletePresetButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onDeletePreset();
    }
  }
);
  markerCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setChartMarkers();
    }
  }
);
  mainFrame.setVisible(true);
  try {
    loadPreferences();
  }
 catch (  BackingStoreException e) {
    e.printStackTrace();
  }
}"
53135,"public void loadWindowPreferences(Component window,Preferences windowPreferences,int defaultWidth,int defaultHeight){
  if (defaultWidth > 0)   window.setSize(windowPreferences.getInt(""String_Node_Str"",defaultWidth),windowPreferences.getInt(""String_Node_Str"",defaultHeight));
  window.setLocation(windowPreferences.getInt(""String_Node_Str"",0),windowPreferences.getInt(""String_Node_Str"",0));
}","public void loadWindowPreferences(Component window,Preferences windowPreferences,int defaultWidth,int defaultHeight){
  if (defaultWidth > 0) {
    window.setSize(windowPreferences.getInt(""String_Node_Str"",defaultWidth),windowPreferences.getInt(""String_Node_Str"",defaultHeight));
  }
  window.setLocation(windowPreferences.getInt(""String_Node_Str"",0),windowPreferences.getInt(""String_Node_Str"",0));
}"
53136,"@Override public void init(){
  super.init();
  valuesPrev=new double[param_Fields.length];
  timesPrev=new double[param_Fields.length];
}","@Override public void init(){
  super.init();
  valuesPrev=new double[param_Fields.length];
  timesPrev=new double[param_Fields.length];
  for (int i=0; i < param_Fields.length; i++) {
    valuesPrev[i]=Double.NaN;
    timesPrev[i]=Double.NaN;
  }
}"
53137,"@Override protected double postProcessValue(int idx,double time,double in){
  double out;
  if (!Double.isNaN(timesPrev[idx])) {
    out=(in - valuesPrev[idx]) / (time - timesPrev[idx]);
  }
 else {
    out=Double.NaN;
  }
  valuesPrev[idx]=in;
  timesPrev[idx]=time;
  return out;
}","@Override protected double postProcessValue(int idx,double time,double in){
  double out=Double.NaN;
  if (!Double.isNaN(timesPrev[idx])) {
    double dt=time - timesPrev[idx];
    if (dt > 1.0e-5) {
      out=(in - valuesPrev[idx]) / dt;
    }
  }
  valuesPrev[idx]=in;
  timesPrev[idx]=time;
  return out;
}"
53138,"@Override public void init(){
  q=new double[4];
  param_Fields=((String)parameters.get(""String_Node_Str"")).split(WHITESPACE_RE);
  param_Scale=(Double)parameters.get(""String_Node_Str"");
  String showStr=((String)parameters.get(""String_Node_Str"")).toUpperCase();
  show=new boolean[]{false,false,false};
  String[] axes=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < 3; i++) {
    String axisName=axes[i];
    show[i]=showStr.contains(axisName.substring(0,1));
    if (show[i]) {
      addSeries(axisName);
    }
  }
}","@Override public void init(){
  q=new double[4];
  param_Fields=((String)parameters.get(""String_Node_Str"")).split(WHITESPACE_RE);
  param_Scale=(Double)parameters.get(""String_Node_Str"");
  String showStr=((String)parameters.get(""String_Node_Str"")).toUpperCase();
  show=new boolean[]{false,false,false};
  String[] axes=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int axis=0; axis < 3; axis++) {
    String axisName=axes[axis];
    show[axis]=showStr.contains(axisName.substring(0,1));
    if (show[axis]) {
      addSeries(axisName);
    }
  }
}"
53139,"@Override public void process(double time,Map<String,Object> update){
  if (param_Fields.length < 4) {
    return;
  }
  for (int i=0; i < 4; i++) {
    Number v=(Number)update.get(param_Fields[i]);
    if (v == null) {
      return;
    }
    q[i]=v.doubleValue();
  }
  double[] euler=RotationConversion.eulerAnglesByQuaternion(q);
  for (int axis=0; axis < 3; axis++) {
    addPoint(axis,time,euler[axis] * param_Scale);
  }
}","@Override public void process(double time,Map<String,Object> update){
  if (param_Fields.length < 4) {
    return;
  }
  for (int i=0; i < 4; i++) {
    Number v=(Number)update.get(param_Fields[i]);
    if (v == null) {
      return;
    }
    q[i]=v.doubleValue();
  }
  double[] euler=RotationConversion.eulerAnglesByQuaternion(q);
  int plot_idx=0;
  for (int axis=0; axis < 3; axis++) {
    if (show[axis]) {
      addPoint(plot_idx++,time,euler[axis] * param_Scale);
    }
  }
}"
53140,"private void onParameterChanged(int row){
  ProcessorPreset selectedProcessor=(ProcessorPreset)processorsList.getSelectedValue();
  if (selectedProcessor != null) {
    String key=parametersTableModel.getValueAt(row,0).toString();
    Object value=parametersTableModel.getValueAt(row,1);
    if (value instanceof Color) {
      selectedProcessor.getColors().put(key.substring(colorParamPrefix.length(),key.length()),(Color)value);
      setChartColors();
    }
 else {
      try {
        updatePresetParameters(selectedProcessor,Collections.<String,Object>singletonMap(key,value.toString()));
        updatePresetEdited(true);
      }
 catch (      Exception e) {
        e.printStackTrace();
        setStatus(""String_Node_Str"" + e);
      }
      parametersTableModel.removeTableModelListener(parameterChangedListener);
      showProcessorParameters();
      parametersTableModel.addTableModelListener(parameterChangedListener);
      parametersTable.addRowSelectionInterval(row,row);
      processFile();
    }
  }
}","private void onParameterChanged(int row){
  if (editingProcessor != null) {
    String key=parametersTableModel.getValueAt(row,0).toString();
    Object value=parametersTableModel.getValueAt(row,1);
    if (value instanceof Color) {
      editingProcessor.getColors().put(key.substring(colorParamPrefix.length(),key.length()),(Color)value);
      setChartColors();
    }
 else {
      try {
        updatePresetParameters(editingProcessor,Collections.<String,Object>singletonMap(key,value.toString()));
        updatePresetEdited(true);
      }
 catch (      Exception e) {
        e.printStackTrace();
        setStatus(""String_Node_Str"" + e);
      }
      parametersTableModel.removeTableModelListener(parameterChangedListener);
      showProcessorParameters();
      parametersTableModel.addTableModelListener(parameterChangedListener);
      parametersTable.addRowSelectionInterval(row,row);
      processFile();
    }
  }
}"
53141,"private void createUIComponents() throws IllegalAccessException, InstantiationException {
  processorsTypesList=new ProcessorsList();
  dataset=new XYSeriesCollection();
  colorSupplier=new ColorSupplier();
  jFreeChart=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,PlotOrientation.VERTICAL,true,true,false);
  jFreeChart.getXYPlot().setDataset(dataset);
  XYPlot plot=jFreeChart.getXYPlot();
  plot.setBackgroundPaint(Color.WHITE);
  plot.setDomainGridlinePaint(Color.LIGHT_GRAY);
  plot.setRangeGridlinePaint(Color.LIGHT_GRAY);
  domainAxisSeconds=new NumberAxis(""String_Node_Str""){
    protected void autoAdjustRange(){
      setRange(getDefaultAutoRange());
    }
  }
;
  domainAxisSeconds.setLowerMargin(0.0);
  domainAxisSeconds.setUpperMargin(0.0);
  domainAxisDate=new DateAxis(""String_Node_Str""){
    protected void autoAdjustRange(){
      setRange(getDefaultAutoRange());
    }
  }
;
  domainAxisDate.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  domainAxisDate.setLowerMargin(0.0);
  domainAxisDate.setUpperMargin(0.0);
  plot.setDomainAxis(domainAxisSeconds);
  NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();
  rangeAxis.setAutoRangeIncludesZero(false);
  chartPanel=new ChartPanel(jFreeChart);
  chartPanel.setMouseWheelEnabled(true);
  chartPanel.setMouseZoomable(true,false);
  chartPanel.setPopupMenu(null);
  jFreeChart.addChangeListener(new ChartChangeListener(){
    @Override public void chartChanged(    ChartChangeEvent chartChangeEvent){
      if (chartChangeEvent.getType() == ChartChangeEventType.GENERAL) {
        processFile();
      }
    }
  }
);
  processorsListModel=new DefaultListModel();
  processorsList=new JList(processorsListModel);
  parametersTableModel=new DefaultTableModel(){
    @Override public boolean isCellEditable(    int row,    int col){
      return col == 1;
    }
  }
;
  parametersTableModel.addColumn(""String_Node_Str"");
  parametersTableModel.addColumn(""String_Node_Str"");
  parametersTable=new JTable(parametersTableModel){
    @Override protected boolean processKeyBinding(    KeyStroke ks,    KeyEvent e,    int condition,    boolean pressed){
      boolean retValue=false;
      if (e.getKeyCode() != KeyEvent.VK_META || e.getKeyCode() != KeyEvent.VK_CONTROL || e.getKeyCode() != KeyEvent.VK_ALT) {
        if (e.isControlDown() || e.isMetaDown() || e.isAltDown()|| e.getKeyChar() == 0xFFFF) {
          InputMap map=this.getInputMap(condition);
          ActionMap am=getActionMap();
          if (map != null && am != null && isEnabled()) {
            Object binding=map.get(ks);
            Action action=(binding == null) ? null : am.get(binding);
            if (action != null) {
              SwingUtilities.notifyAction(action,ks,e,this,e.getModifiers());
              retValue=false;
            }
 else {
              try {
                JComponent ancestor=(JComponent)SwingUtilities.getAncestorOfClass(Class.forName(""String_Node_Str""),this);
                ancestor.dispatchEvent(e);
              }
 catch (              ClassNotFoundException err) {
                err.printStackTrace();
              }
            }
          }
 else {
            retValue=super.processKeyBinding(ks,e,condition,pressed);
          }
        }
 else {
          retValue=super.processKeyBinding(ks,e,condition,pressed);
        }
      }
      return retValue;
    }
  }
;
  parametersTable.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  parametersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  parametersTable.getColumnModel().getColumn(1).setCellEditor(new ParamValueTableCellEditor(colorSupplier));
  parametersTable.getColumnModel().getColumn(1).setCellRenderer(new ParamValueTableCellRenderer());
}","private void createUIComponents() throws IllegalAccessException, InstantiationException {
  processorsTypesList=new ProcessorsList();
  dataset=new XYSeriesCollection();
  colorSupplier=new ColorSupplier();
  jFreeChart=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,PlotOrientation.VERTICAL,true,true,false);
  jFreeChart.getXYPlot().setDataset(dataset);
  XYPlot plot=jFreeChart.getXYPlot();
  plot.setBackgroundPaint(Color.WHITE);
  plot.setDomainGridlinePaint(Color.LIGHT_GRAY);
  plot.setRangeGridlinePaint(Color.LIGHT_GRAY);
  domainAxisSeconds=new NumberAxis(""String_Node_Str""){
    protected void autoAdjustRange(){
      setRange(getDefaultAutoRange());
    }
  }
;
  domainAxisSeconds.setLowerMargin(0.0);
  domainAxisSeconds.setUpperMargin(0.0);
  domainAxisDate=new DateAxis(""String_Node_Str""){
    protected void autoAdjustRange(){
      setRange(getDefaultAutoRange());
    }
  }
;
  domainAxisDate.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  domainAxisDate.setLowerMargin(0.0);
  domainAxisDate.setUpperMargin(0.0);
  plot.setDomainAxis(domainAxisSeconds);
  NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();
  rangeAxis.setAutoRangeIncludesZero(false);
  chartPanel=new ChartPanel(jFreeChart);
  chartPanel.setMouseWheelEnabled(true);
  chartPanel.setMouseZoomable(true,false);
  chartPanel.setPopupMenu(null);
  jFreeChart.addChangeListener(new ChartChangeListener(){
    @Override public void chartChanged(    ChartChangeEvent chartChangeEvent){
      if (chartChangeEvent.getType() == ChartChangeEventType.GENERAL) {
        processFile();
      }
    }
  }
);
  processorsListModel=new DefaultListModel();
  processorsList=new JList(processorsListModel);
  parametersTableModel=new DefaultTableModel(){
    @Override public boolean isCellEditable(    int row,    int col){
      return col == 1;
    }
  }
;
  parametersTableModel.addColumn(""String_Node_Str"");
  parametersTableModel.addColumn(""String_Node_Str"");
  parametersTable=new JTable(parametersTableModel){
    @Override protected boolean processKeyBinding(    KeyStroke ks,    KeyEvent e,    int condition,    boolean pressed){
      boolean retValue=false;
      if (e.getKeyCode() != KeyEvent.VK_META || e.getKeyCode() != KeyEvent.VK_CONTROL || e.getKeyCode() != KeyEvent.VK_ALT) {
        if (e.isControlDown() || e.isMetaDown() || e.isAltDown()|| e.getKeyChar() == 0xFFFF) {
          InputMap map=this.getInputMap(condition);
          ActionMap am=getActionMap();
          if (map != null && am != null && isEnabled()) {
            Object binding=map.get(ks);
            Action action=(binding == null) ? null : am.get(binding);
            if (action != null) {
              SwingUtilities.notifyAction(action,ks,e,this,e.getModifiers());
              retValue=false;
            }
 else {
              try {
                JComponent ancestor=(JComponent)SwingUtilities.getAncestorOfClass(Class.forName(""String_Node_Str""),this);
                ancestor.dispatchEvent(e);
              }
 catch (              ClassNotFoundException err) {
                err.printStackTrace();
              }
            }
          }
 else {
            retValue=super.processKeyBinding(ks,e,condition,pressed);
          }
        }
 else {
          retValue=super.processKeyBinding(ks,e,condition,pressed);
        }
      }
      return retValue;
    }
  }
;
  parametersTable.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  parametersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  parametersTable.getColumnModel().getColumn(1).setCellEditor(new ParamValueTableCellEditor(this));
  parametersTable.getColumnModel().getColumn(1).setCellRenderer(new ParamValueTableCellRenderer());
}"
53142,"public ParamValueTableCellEditor(ColorSupplier colorSupplier){
  this.colorSupplier=colorSupplier;
}","public ParamValueTableCellEditor(FlightPlot app){
  this.app=app;
}"
53143,"@Override public Component getTableCellEditorComponent(JTable table,Object value,boolean isSelected,int row,int column){
  if (value instanceof Color) {
    editor=new ColorParamTableCellEditor(colorSupplier);
    ((ColorParamTableCellEditor)editor).getComponent().addActionListener(new ActionDelegate());
  }
 else   if (value instanceof String) {
    JTextField textField=new JTextField();
    textField.setFont(table.getFont());
    textField.setBorder(BorderFactory.createLineBorder(Color.BLACK));
    editor=new DefaultCellEditor(textField);
    ((JTextField)((DefaultCellEditor)editor).getComponent()).addActionListener(new ActionDelegate());
  }
  return editor.getTableCellEditorComponent(table,value,isSelected,row,column);
}","@Override public Component getTableCellEditorComponent(JTable table,Object value,boolean isSelected,int row,int column){
  app.setEditingProcessor();
  if (value instanceof Color) {
    editor=new ColorParamTableCellEditor(app.getColorSupplier());
    ((ColorParamTableCellEditor)editor).getComponent().addActionListener(new ActionDelegate());
  }
 else   if (value instanceof String) {
    JTextField textField=new JTextField();
    textField.setFont(table.getFont());
    textField.setBorder(BorderFactory.createLineBorder(Color.BLACK));
    editor=new DefaultCellEditor(textField);
    ((JTextField)((DefaultCellEditor)editor).getComponent()).addActionListener(new ActionDelegate());
  }
  return editor.getTableCellEditorComponent(table,value,isSelected,row,column);
}"
53144,"public FlightPlot(){
  preferences=Preferences.userRoot().node(appName);
  mainFrame=new JFrame(appNameAndVersion);
  mainFrame.setContentPane(mainPanel);
  mainFrame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  mainFrame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      onQuit();
    }
  }
);
  mainFrame.pack();
  createMenuBar();
  java.util.List<String> processors=new ArrayList<String>(processorsTypesList.getProcessorsList());
  Collections.sort(processors);
  addProcessorDialog=new AddProcessorDialog(processors.toArray(new String[processors.size()]));
  addProcessorDialog.pack();
  fieldsListDialog=new FieldsListDialog(new Runnable(){
    @Override public void run(){
      StringBuilder fieldsValue=new StringBuilder();
      for (      String field : fieldsListDialog.getSelectedFields()) {
        if (fieldsValue.length() > 0) {
          fieldsValue.append(""String_Node_Str"");
        }
        fieldsValue.append(field);
      }
      PlotProcessor processor=new Simple();
      processor.setParameters(Collections.<String,Object>singletonMap(""String_Node_Str"",fieldsValue.toString()));
      ProcessorPreset pp=new ProcessorPreset(""String_Node_Str"",processor.getProcessorType(),processor.getDefaultParameters(),Collections.<String,Color>emptyMap());
      updatePresetParameters(pp,null);
      processorsListModel.addElement(pp);
      processorsList.setSelectedValue(pp,true);
      processorsList.repaint();
      updateUsedColors();
      showAddProcessorDialog(true);
      processFile();
    }
  }
);
  logInfo=new LogInfo();
  addProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showAddProcessorDialog(false);
    }
  }
);
  removeProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      removeSelectedProcessor();
    }
  }
);
  openLogButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showOpenLogDialog();
    }
  }
);
  fieldsListButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      fieldsListDialog.setVisible(true);
    }
  }
);
  logInfoButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      logInfo.setVisible(true);
    }
  }
);
  processorsList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      showProcessorParameters();
    }
  }
);
  processorsList.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    KeyEvent e){
      if (e.getKeyChar() == KeyEvent.VK_ENTER) {
        showAddProcessorDialog(true);
      }
    }
  }
);
  processorsList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() > 1) {
        showAddProcessorDialog(true);
      }
    }
  }
);
  parameterChangedListener=new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getType() == TableModelEvent.UPDATE) {
        int row=e.getFirstRow();
        onParameterChanged(row);
      }
    }
  }
;
  parametersTableModel.addTableModelListener(parameterChangedListener);
  try {
    loadPreferences();
  }
 catch (  BackingStoreException e) {
    e.printStackTrace();
  }
  presetComboBox.setMaximumRowCount(20);
  presetComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onPresetAction(e);
    }
  }
);
  updatePresetEdited(true);
  deletePresetButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onDeletePreset();
    }
  }
);
  mainFrame.setVisible(true);
}","public FlightPlot(){
  preferences=Preferences.userRoot().node(appName);
  mainFrame=new JFrame(appNameAndVersion);
  mainFrame.setContentPane(mainPanel);
  mainFrame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  mainFrame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      onQuit();
    }
  }
);
  mainFrame.pack();
  createMenuBar();
  java.util.List<String> processors=new ArrayList<String>(processorsTypesList.getProcessorsList());
  Collections.sort(processors);
  addProcessorDialog=new AddProcessorDialog(processors.toArray(new String[processors.size()]));
  addProcessorDialog.pack();
  fieldsListDialog=new FieldsListDialog(new Runnable(){
    @Override public void run(){
      StringBuilder fieldsValue=new StringBuilder();
      for (      String field : fieldsListDialog.getSelectedFields()) {
        if (fieldsValue.length() > 0) {
          fieldsValue.append(""String_Node_Str"");
        }
        fieldsValue.append(field);
      }
      PlotProcessor processor=new Simple();
      processor.setParameters(Collections.<String,Object>singletonMap(""String_Node_Str"",fieldsValue.toString()));
      ProcessorPreset pp=new ProcessorPreset(""String_Node_Str"",processor.getProcessorType(),processor.getParameters(),Collections.<String,Color>emptyMap());
      updatePresetParameters(pp,null);
      processorsListModel.addElement(pp);
      processorsList.setSelectedValue(pp,true);
      processorsList.repaint();
      updateUsedColors();
      showAddProcessorDialog(true);
      processFile();
    }
  }
);
  logInfo=new LogInfo();
  addProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showAddProcessorDialog(false);
    }
  }
);
  removeProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      removeSelectedProcessor();
    }
  }
);
  openLogButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showOpenLogDialog();
    }
  }
);
  fieldsListButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      fieldsListDialog.setVisible(true);
    }
  }
);
  logInfoButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      logInfo.setVisible(true);
    }
  }
);
  processorsList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      showProcessorParameters();
    }
  }
);
  processorsList.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    KeyEvent e){
      if (e.getKeyChar() == KeyEvent.VK_ENTER) {
        showAddProcessorDialog(true);
      }
    }
  }
);
  processorsList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() > 1) {
        showAddProcessorDialog(true);
      }
    }
  }
);
  parameterChangedListener=new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getType() == TableModelEvent.UPDATE) {
        int row=e.getFirstRow();
        onParameterChanged(row);
      }
    }
  }
;
  parametersTableModel.addTableModelListener(parameterChangedListener);
  try {
    loadPreferences();
  }
 catch (  BackingStoreException e) {
    e.printStackTrace();
  }
  presetComboBox.setMaximumRowCount(20);
  presetComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onPresetAction(e);
    }
  }
);
  updatePresetEdited(true);
  deletePresetButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onDeletePreset();
    }
  }
);
  mainFrame.setVisible(true);
}"
53145,"private void onAddProcessorDialogOK(){
  updatePresetEdited(true);
  ProcessorPreset processorPreset=addProcessorDialog.getOrigProcessorPreset();
  String title=addProcessorDialog.getProcessorTitle();
  String processorType=addProcessorDialog.getProcessorType();
  if (processorPreset != null) {
    Map<String,Object> parameters=null;
    if (!processorPreset.getProcessorType().equals(processorType)) {
      parameters=processorPreset.getParameters();
      processorPreset=new ProcessorPreset(title,processorType,Collections.<String,Object>emptyMap(),Collections.<String,Color>emptyMap());
    }
 else {
      processorPreset.setTitle(title);
    }
    updatePresetParameters(processorPreset,parameters);
    int idx=processorsListModel.indexOf(processorPreset);
    processorsListModel.set(idx,processorPreset);
    processorsList.setSelectedValue(processorPreset,true);
    showProcessorParameters();
  }
 else {
    processorPreset=new ProcessorPreset(title,processorType,Collections.<String,Object>emptyMap(),Collections.<String,Color>emptyMap());
    updatePresetParameters(processorPreset,null);
    processorsListModel.addElement(processorPreset);
    processorsList.setSelectedValue(processorPreset,true);
  }
  updateUsedColors();
  processFile();
}","private void onAddProcessorDialogOK(){
  updatePresetEdited(true);
  ProcessorPreset processorPreset=addProcessorDialog.getOrigProcessorPreset();
  String title=addProcessorDialog.getProcessorTitle();
  String processorType=addProcessorDialog.getProcessorType();
  if (processorPreset != null) {
    Map<String,Object> parameters=null;
    ProcessorPreset processorPresetNew=processorPreset;
    if (!processorPreset.getProcessorType().equals(processorType)) {
      parameters=processorPreset.getParameters();
      processorPresetNew=new ProcessorPreset(title,processorType,new HashMap<String,Object>(),Collections.<String,Color>emptyMap());
    }
 else {
      processorPresetNew.setTitle(title);
    }
    updatePresetParameters(processorPresetNew,parameters);
    int idx=processorsListModel.indexOf(processorPreset);
    processorsListModel.set(idx,processorPresetNew);
    processorsList.setSelectedValue(processorPresetNew,true);
    showProcessorParameters();
  }
 else {
    processorPreset=new ProcessorPreset(title,processorType,Collections.<String,Object>emptyMap(),Collections.<String,Color>emptyMap());
    updatePresetParameters(processorPreset,null);
    processorsListModel.addElement(processorPreset);
    processorsList.setSelectedValue(processorPreset,true);
  }
  updateUsedColors();
  processFile();
}"
53146,"private void createUIComponents() throws IllegalAccessException, InstantiationException {
  processorsTypesList=new ProcessorsList();
  dataset=new XYSeriesCollection();
  jFreeChart=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,PlotOrientation.VERTICAL,true,true,false);
  jFreeChart.getXYPlot().setDataset(dataset);
  XYPlot plot=jFreeChart.getXYPlot();
  plot.setBackgroundPaint(Color.WHITE);
  plot.setDomainGridlinePaint(Color.LIGHT_GRAY);
  plot.setRangeGridlinePaint(Color.LIGHT_GRAY);
  domainAxisSeconds=new NumberAxis(""String_Node_Str""){
    protected void autoAdjustRange(){
      setRange(getDefaultAutoRange());
    }
  }
;
  domainAxisSeconds.setLowerMargin(0.0);
  domainAxisSeconds.setUpperMargin(0.0);
  domainAxisDate=new DateAxis(""String_Node_Str""){
    protected void autoAdjustRange(){
      setRange(getDefaultAutoRange());
    }
  }
;
  domainAxisDate.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  domainAxisDate.setLowerMargin(0.0);
  domainAxisDate.setUpperMargin(0.0);
  plot.setDomainAxis(domainAxisSeconds);
  NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();
  rangeAxis.setAutoRangeIncludesZero(false);
  chartPanel=new ChartPanel(jFreeChart);
  chartPanel.setMouseWheelEnabled(true);
  chartPanel.setMouseZoomable(true,false);
  chartPanel.setPopupMenu(null);
  jFreeChart.addChangeListener(new ChartChangeListener(){
    @Override public void chartChanged(    ChartChangeEvent chartChangeEvent){
      if (chartChangeEvent.getType() == ChartChangeEventType.GENERAL) {
        processFile();
      }
    }
  }
);
  processorsListModel=new DefaultListModel();
  processorsList=new JList(processorsListModel);
  parametersTableModel=new DefaultTableModel(){
    @Override public boolean isCellEditable(    int row,    int col){
      return col == 1;
    }
  }
;
  parametersTableModel.addColumn(""String_Node_Str"");
  parametersTableModel.addColumn(""String_Node_Str"");
  parametersTable=new JTable(parametersTableModel){
    @Override protected boolean processKeyBinding(    KeyStroke ks,    KeyEvent e,    int condition,    boolean pressed){
      boolean retValue=false;
      if (e.getKeyCode() != KeyEvent.VK_META || e.getKeyCode() != KeyEvent.VK_CONTROL || e.getKeyCode() != KeyEvent.VK_ALT) {
        if (e.isControlDown() || e.isMetaDown() || e.isAltDown()|| e.getKeyChar() == 0xFFFF) {
          InputMap map=this.getInputMap(condition);
          ActionMap am=getActionMap();
          if (map != null && am != null && isEnabled()) {
            Object binding=map.get(ks);
            Action action=(binding == null) ? null : am.get(binding);
            if (action != null) {
              SwingUtilities.notifyAction(action,ks,e,this,e.getModifiers());
              retValue=false;
            }
 else {
              try {
                JComponent ancestor=(JComponent)SwingUtilities.getAncestorOfClass(Class.forName(""String_Node_Str""),this);
                ancestor.dispatchEvent(e);
              }
 catch (              ClassNotFoundException err) {
                err.printStackTrace();
              }
            }
          }
 else {
            retValue=super.processKeyBinding(ks,e,condition,pressed);
          }
        }
 else {
          retValue=super.processKeyBinding(ks,e,condition,pressed);
        }
      }
      return retValue;
    }
  }
;
  parametersTable.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  parametersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  parametersTable.getColumnModel().getColumn(1).setCellRenderer(new ParamValueTableCellRenderer());
}","private void createUIComponents() throws IllegalAccessException, InstantiationException {
  processorsTypesList=new ProcessorsList();
  dataset=new XYSeriesCollection();
  jFreeChart=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,PlotOrientation.VERTICAL,true,true,false);
  jFreeChart.getXYPlot().setDataset(dataset);
  XYPlot plot=jFreeChart.getXYPlot();
  plot.setBackgroundPaint(Color.WHITE);
  plot.setDomainGridlinePaint(Color.LIGHT_GRAY);
  plot.setRangeGridlinePaint(Color.LIGHT_GRAY);
  domainAxisSeconds=new NumberAxis(""String_Node_Str""){
    protected void autoAdjustRange(){
      setRange(getDefaultAutoRange());
    }
  }
;
  domainAxisSeconds.setLowerMargin(0.0);
  domainAxisSeconds.setUpperMargin(0.0);
  domainAxisDate=new DateAxis(""String_Node_Str""){
    protected void autoAdjustRange(){
      setRange(getDefaultAutoRange());
    }
  }
;
  domainAxisDate.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  domainAxisDate.setLowerMargin(0.0);
  domainAxisDate.setUpperMargin(0.0);
  plot.setDomainAxis(domainAxisSeconds);
  NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();
  rangeAxis.setAutoRangeIncludesZero(false);
  chartPanel=new ChartPanel(jFreeChart);
  chartPanel.setMouseWheelEnabled(true);
  chartPanel.setMouseZoomable(true,false);
  chartPanel.setPopupMenu(null);
  jFreeChart.addChangeListener(new ChartChangeListener(){
    @Override public void chartChanged(    ChartChangeEvent chartChangeEvent){
      if (chartChangeEvent.getType() == ChartChangeEventType.GENERAL) {
        processFile();
      }
    }
  }
);
  processorsListModel=new DefaultListModel();
  processorsList=new JList(processorsListModel);
  parametersTableModel=new DefaultTableModel(){
    @Override public boolean isCellEditable(    int row,    int col){
      return col == 1;
    }
  }
;
  parametersTableModel.addColumn(""String_Node_Str"");
  parametersTableModel.addColumn(""String_Node_Str"");
  parametersTable=new JTable(parametersTableModel){
    @Override protected boolean processKeyBinding(    KeyStroke ks,    KeyEvent e,    int condition,    boolean pressed){
      boolean retValue=false;
      if (e.getKeyCode() != KeyEvent.VK_META || e.getKeyCode() != KeyEvent.VK_CONTROL || e.getKeyCode() != KeyEvent.VK_ALT) {
        if (e.isControlDown() || e.isMetaDown() || e.isAltDown()|| e.getKeyChar() == 0xFFFF) {
          InputMap map=this.getInputMap(condition);
          ActionMap am=getActionMap();
          if (map != null && am != null && isEnabled()) {
            Object binding=map.get(ks);
            Action action=(binding == null) ? null : am.get(binding);
            if (action != null) {
              SwingUtilities.notifyAction(action,ks,e,this,e.getModifiers());
              retValue=false;
            }
 else {
              try {
                JComponent ancestor=(JComponent)SwingUtilities.getAncestorOfClass(Class.forName(""String_Node_Str""),this);
                ancestor.dispatchEvent(e);
              }
 catch (              ClassNotFoundException err) {
                err.printStackTrace();
              }
            }
          }
 else {
            retValue=super.processKeyBinding(ks,e,condition,pressed);
          }
        }
 else {
          retValue=super.processKeyBinding(ks,e,condition,pressed);
        }
      }
      return retValue;
    }
  }
;
  parametersTable.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  parametersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  parametersTable.getColumnModel().getColumn(1).setCellEditor(new ParamValueTableCellEditor());
  parametersTable.getColumnModel().getColumn(1).setCellRenderer(new ParamValueTableCellRenderer());
}"
53147,"private void generateSeries() throws IOException, FormatErrorException {
  dataset.removeAllSeries();
  PlotProcessor[] processors=new PlotProcessor[processorsListModel.size()];
  long timeOffset=getTimeOffset(timeMode);
  Range range=getLogRange(timeMode);
  long timeStart=(long)((range.getLowerBound() - range.getLength()) * 1e6);
  long timeStop=(long)((range.getUpperBound() + range.getLength()) * 1e6);
  timeStart=Math.max(logReader.getStartMicroseconds(),timeStart);
  timeStop=Math.min(logReader.getStartMicroseconds() + logReader.getSizeMicroseconds(),timeStop);
  double timeScale=(selectDomainAxis(timeMode) == domainAxisDate) ? 1000.0 : 1.0;
  int displayPixels=2000;
  double skip=range.getLength() / displayPixels;
  if (processors.length > 0) {
    for (int i=0; i < processorsListModel.size(); i++) {
      ProcessorPreset pp=(ProcessorPreset)processorsListModel.get(i);
      PlotProcessor processor;
      try {
        processor=processorsTypesList.getProcessorInstance(pp,skip);
        processors[i]=processor;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    logReader.seek(timeStart);
    Map<String,Object> data=new HashMap<String,Object>();
    while (true) {
      long t;
      data.clear();
      try {
        t=logReader.readUpdate(data);
      }
 catch (      EOFException e) {
        break;
      }
      if (t > timeStop) {
        break;
      }
      for (      PlotProcessor processor : processors) {
        processor.process((t + timeOffset) * 1e-6,data);
      }
    }
    for (int i=0; i < processors.length; i++) {
      PlotProcessor processor=processors[i];
      String processorTitle=((ProcessorPreset)processorsListModel.get(i)).getTitle();
      for (      Series series : processor.getSeriesList()) {
        XYSeries jseries=new XYSeries(processorTitle + (series.getTitle().isEmpty() ? ""String_Node_Str"" : (""String_Node_Str"" + series.getTitle())),false);
        for (        XYPoint point : series) {
          jseries.add(point.x * timeScale,point.y);
        }
        dataset.addSeries(jseries);
        jFreeChart.getXYPlot().getRendererForDataset(dataset).setSeriesPaint(dataset.indexOf(jseries),series.getColor());
      }
    }
  }
  chartPanel.repaint();
}","private void generateSeries() throws IOException, FormatErrorException {
  dataset.removeAllSeries();
  seriesIndex.clear();
  PlotProcessor[] processors=new PlotProcessor[processorsListModel.size()];
  long timeOffset=getTimeOffset(timeMode);
  Range range=getLogRange(timeMode);
  long timeStart=(long)((range.getLowerBound() - range.getLength()) * 1e6);
  long timeStop=(long)((range.getUpperBound() + range.getLength()) * 1e6);
  timeStart=Math.max(logReader.getStartMicroseconds(),timeStart);
  timeStop=Math.min(logReader.getStartMicroseconds() + logReader.getSizeMicroseconds(),timeStop);
  double timeScale=(selectDomainAxis(timeMode) == domainAxisDate) ? 1000.0 : 1.0;
  int displayPixels=2000;
  double skip=range.getLength() / displayPixels;
  if (processors.length > 0) {
    for (int i=0; i < processorsListModel.size(); i++) {
      ProcessorPreset pp=(ProcessorPreset)processorsListModel.get(i);
      PlotProcessor processor;
      try {
        processor=processorsTypesList.getProcessorInstance(pp,skip);
        processors[i]=processor;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    logReader.seek(timeStart);
    Map<String,Object> data=new HashMap<String,Object>();
    while (true) {
      long t;
      data.clear();
      try {
        t=logReader.readUpdate(data);
      }
 catch (      EOFException e) {
        break;
      }
      if (t > timeStop) {
        break;
      }
      for (      PlotProcessor processor : processors) {
        processor.process((t + timeOffset) * 1e-6,data);
      }
    }
    for (int i=0; i < processorsListModel.size(); i++) {
      PlotProcessor processor=processors[i];
      String processorTitle=((ProcessorPreset)processorsListModel.get(i)).getTitle();
      Map<String,Integer> processorSeriesIndex=new HashMap<String,Integer>();
      seriesIndex.add(processorSeriesIndex);
      for (      Series series : processor.getSeriesList()) {
        processorSeriesIndex.put(series.getTitle(),dataset.getSeriesCount());
        XYSeries jseries=new XYSeries(series.getFullTitle(processorTitle),false);
        for (        XYPoint point : series) {
          jseries.add(point.x * timeScale,point.y);
        }
        dataset.addSeries(jseries);
      }
    }
    setChartColors();
  }
  chartPanel.repaint();
}"
53148,"private void onParameterChanged(int row){
  ProcessorPreset selectedProcessor=(ProcessorPreset)processorsList.getSelectedValue();
  if (selectedProcessor != null) {
    String key=parametersTableModel.getValueAt(row,0).toString();
    String value=(String)parametersTableModel.getValueAt(row,1);
    try {
      selectedProcessor.setParameter(key,value);
      updatePresetParameters(selectedProcessor,Collections.<String,Object>singletonMap(key,value));
      updatePresetEdited(true);
    }
 catch (    Exception e) {
      setStatus(""String_Node_Str"" + e);
    }
    parametersTableModel.removeTableModelListener(parameterChangedListener);
    showProcessorParameters();
    parametersTableModel.addTableModelListener(parameterChangedListener);
    processFile();
  }
}","private void onParameterChanged(int row){
  ProcessorPreset selectedProcessor=(ProcessorPreset)processorsList.getSelectedValue();
  if (selectedProcessor != null) {
    String key=parametersTableModel.getValueAt(row,0).toString();
    Object value=parametersTableModel.getValueAt(row,1);
    if (value instanceof Color) {
      selectedProcessor.getColors().put(key.substring(colorParamPrefix.length(),key.length()),(Color)value);
      setChartColors();
    }
 else {
      try {
        updatePresetParameters(selectedProcessor,Collections.<String,Object>singletonMap(key,value.toString()));
        updatePresetEdited(true);
      }
 catch (      Exception e) {
        e.printStackTrace();
        setStatus(""String_Node_Str"" + e);
      }
      parametersTableModel.removeTableModelListener(parameterChangedListener);
      showProcessorParameters();
      parametersTableModel.addTableModelListener(parameterChangedListener);
      processFile();
    }
  }
}"
53149,"private void showProcessorParameters(){
  while (parametersTableModel.getRowCount() > 0) {
    parametersTableModel.removeRow(0);
  }
  ProcessorPreset selectedProcessor=(ProcessorPreset)processorsList.getSelectedValue();
  if (selectedProcessor != null) {
    Map<String,Object> params=selectedProcessor.getParameters();
    List<String> keys=new ArrayList<String>(params.keySet());
    Collections.sort(keys);
    for (    String key : keys) {
      parametersTableModel.addRow(new Object[]{key,formatParameterValue(params.get(key))});
    }
  }
}","private void showProcessorParameters(){
  while (parametersTableModel.getRowCount() > 0) {
    parametersTableModel.removeRow(0);
  }
  ProcessorPreset selectedProcessor=(ProcessorPreset)processorsList.getSelectedValue();
  if (selectedProcessor != null) {
    Map<String,Object> params=selectedProcessor.getParameters();
    List<String> param_keys=new ArrayList<String>(params.keySet());
    Collections.sort(param_keys);
    for (    String key : param_keys) {
      parametersTableModel.addRow(new Object[]{key,formatParameterValue(params.get(key))});
    }
    Map<String,Color> colors=selectedProcessor.getColors();
    List<String> color_keys=new ArrayList<String>(colors.keySet());
    Collections.sort(color_keys);
    for (    String key : color_keys) {
      parametersTableModel.addRow(new Object[]{colorParamPrefix + key,colors.get(key)});
    }
  }
}"
53150,"public FlightPlot(){
  preferences=Preferences.userRoot().node(appName);
  mainFrame=new JFrame(appNameAndVersion);
  mainFrame.setContentPane(mainPanel);
  mainFrame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  mainFrame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      onQuit();
    }
  }
);
  mainFrame.pack();
  createMenuBar();
  java.util.List<String> processors=new ArrayList<String>(processorsTypesList.getProcessorsList());
  Collections.sort(processors);
  addProcessorDialog=new AddProcessorDialog(processors.toArray(new String[processors.size()]));
  addProcessorDialog.pack();
  fieldsListDialog=new FieldsListDialog(new Runnable(){
    @Override public void run(){
      StringBuilder fieldsValue=new StringBuilder();
      for (      String field : fieldsListDialog.getSelectedFields()) {
        if (fieldsValue.length() > 0) {
          fieldsValue.append(""String_Node_Str"");
        }
        fieldsValue.append(field);
      }
      PlotProcessor processor=new Simple();
      ProcessorPreset pp=new ProcessorPreset(""String_Node_Str"",processor.getProcessorType(),processor.getDefaultParameters(),processor.getColors());
      pp.setParameter(""String_Node_Str"",fieldsValue.toString());
      processorsListModel.addElement(pp);
      processorsList.setSelectedValue(pp,true);
      processorsList.repaint();
      showAddProcessorDialog(true);
      processFile();
    }
  }
);
  logInfo=new LogInfo();
  addProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showAddProcessorDialog(false);
    }
  }
);
  removeProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      removeSelectedProcessor();
    }
  }
);
  openLogButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showOpenLogDialog();
    }
  }
);
  fieldsListButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      fieldsListDialog.setVisible(true);
    }
  }
);
  logInfoButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      logInfo.setVisible(true);
    }
  }
);
  processorsList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      showProcessorParameters();
    }
  }
);
  processorsList.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    KeyEvent e){
      if (e.getKeyChar() == KeyEvent.VK_ENTER) {
        showAddProcessorDialog(true);
      }
    }
  }
);
  processorsList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() > 1) {
        showAddProcessorDialog(true);
      }
    }
  }
);
  parameterChangedListener=new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getType() == TableModelEvent.UPDATE) {
        int row=e.getFirstRow();
        onParameterChanged(row);
      }
    }
  }
;
  parametersTableModel.addTableModelListener(parameterChangedListener);
  try {
    loadPreferences();
  }
 catch (  BackingStoreException e) {
    e.printStackTrace();
  }
  presetComboBox.setMaximumRowCount(20);
  presetComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onPresetAction(e);
    }
  }
);
  updatePresetEdited(true);
  deletePresetButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onDeletePreset();
    }
  }
);
  mainFrame.setVisible(true);
}","public FlightPlot(){
  preferences=Preferences.userRoot().node(appName);
  mainFrame=new JFrame(appNameAndVersion);
  mainFrame.setContentPane(mainPanel);
  mainFrame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  mainFrame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      onQuit();
    }
  }
);
  mainFrame.pack();
  createMenuBar();
  java.util.List<String> processors=new ArrayList<String>(processorsTypesList.getProcessorsList());
  Collections.sort(processors);
  addProcessorDialog=new AddProcessorDialog(processors.toArray(new String[processors.size()]));
  addProcessorDialog.pack();
  fieldsListDialog=new FieldsListDialog(new Runnable(){
    @Override public void run(){
      StringBuilder fieldsValue=new StringBuilder();
      for (      String field : fieldsListDialog.getSelectedFields()) {
        if (fieldsValue.length() > 0) {
          fieldsValue.append(""String_Node_Str"");
        }
        fieldsValue.append(field);
      }
      PlotProcessor processor=new Simple();
      processor.setParameters(Collections.<String,Object>singletonMap(""String_Node_Str"",fieldsValue.toString()));
      ProcessorPreset pp=new ProcessorPreset(""String_Node_Str"",processor.getProcessorType(),processor.getDefaultParameters(),null);
      updatePresetParameters(pp,null);
      processorsListModel.addElement(pp);
      processorsList.setSelectedValue(pp,true);
      processorsList.repaint();
      showAddProcessorDialog(true);
      processFile();
    }
  }
);
  logInfo=new LogInfo();
  addProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showAddProcessorDialog(false);
    }
  }
);
  removeProcessorButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      removeSelectedProcessor();
    }
  }
);
  openLogButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showOpenLogDialog();
    }
  }
);
  fieldsListButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      fieldsListDialog.setVisible(true);
    }
  }
);
  logInfoButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      logInfo.setVisible(true);
    }
  }
);
  processorsList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      showProcessorParameters();
    }
  }
);
  processorsList.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    KeyEvent e){
      if (e.getKeyChar() == KeyEvent.VK_ENTER) {
        showAddProcessorDialog(true);
      }
    }
  }
);
  processorsList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() > 1) {
        showAddProcessorDialog(true);
      }
    }
  }
);
  parameterChangedListener=new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getType() == TableModelEvent.UPDATE) {
        int row=e.getFirstRow();
        onParameterChanged(row);
      }
    }
  }
;
  parametersTableModel.addTableModelListener(parameterChangedListener);
  try {
    loadPreferences();
  }
 catch (  BackingStoreException e) {
    e.printStackTrace();
  }
  presetComboBox.setMaximumRowCount(20);
  presetComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onPresetAction(e);
    }
  }
);
  updatePresetEdited(true);
  deletePresetButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onDeletePreset();
    }
  }
);
  mainFrame.setVisible(true);
}"
53151,"private void updatePresetParameters(ProcessorPreset processorPreset,Map<String,Object> parametersUpdate){
  PlotProcessor p;
  try {
    p=processorsTypesList.getProcessorInstance(processorPreset,0.0);
  }
 catch (  Exception e) {
    setStatus(""String_Node_Str"" + processorPreset + ""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  if (parametersUpdate != null) {
    p.setParameters(parametersUpdate);
  }
  processorPreset.setParameters(p.getParameters());
  p.init();
  for (  Series series : p.getSeriesList()) {
    if (series.getColor() == null) {
      series.setColor(colorSupplier.getNextColor(series.getTitle()));
    }
  }
  processorPreset.setColors(p.getColors());
}","private void updatePresetParameters(ProcessorPreset processorPreset,Map<String,Object> parametersUpdate){
  if (parametersUpdate != null) {
    processorPreset.getParameters().putAll(parametersUpdate);
  }
  PlotProcessor p;
  try {
    p=processorsTypesList.getProcessorInstance(processorPreset,0.0);
  }
 catch (  Exception e) {
    setStatus(""String_Node_Str"" + processorPreset + ""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  processorPreset.setParameters(p.getParameters());
  Map<String,Color> colorsNew=new HashMap<String,Color>();
  for (  Series series : p.getSeriesList()) {
    Color color=processorPreset.getColors().get(series.getTitle());
    if (color == null) {
      color=colorSupplier.getNextColor(series.getTitle());
    }
    colorsNew.put(series.getTitle(),color);
  }
  processorPreset.setColors(colorsNew);
}"
53152,"public void setParameters(Map<String,Object> parametersNew){
  for (  Map.Entry<String,Object> entry : parametersNew.entrySet()) {
    String key=entry.getKey();
    Object oldValue=parameters.get(key);
    Object newValue=parametersNew.get(key);
    if (oldValue != null) {
      parameters.put(key,newValue);
    }
  }
}","public void setParameters(Map<String,Object> parametersNew){
  for (  Map.Entry<String,Object> entry : parametersNew.entrySet()) {
    String key=entry.getKey();
    Object oldValue=parameters.get(key);
    Object newValue=parametersNew.get(key);
    if (oldValue != null) {
      parameters.put(key,castValue(oldValue,newValue));
    }
  }
}"
53153,"public PlotProcessor getProcessorInstance(ProcessorPreset processorPreset,double skipOut) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
  Class<? extends PlotProcessor> procClass=processors.get(processorPreset.getProcessorType());
  if (procClass != null) {
    PlotProcessor processor=procClass.newInstance();
    processor.setSkipOut(skipOut);
    processor.setParameters(processorPreset.getParameters());
    processor.init();
    processor.setColors(processorPreset.getColors());
    return processor;
  }
 else {
    return null;
  }
}","public PlotProcessor getProcessorInstance(ProcessorPreset processorPreset,double skipOut) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
  Class<? extends PlotProcessor> procClass=processors.get(processorPreset.getProcessorType());
  if (procClass != null) {
    PlotProcessor processor=procClass.newInstance();
    processor.setSkipOut(skipOut);
    processor.setParameters(processorPreset.getParameters());
    processor.init();
    return processor;
  }
 else {
    return null;
  }
}"
53154,"@Override public void init(){
  super.init();
  param_InScale1=(Double)parameters.get(""String_Node_Str"");
  param_Field1=((String)parameters.get(""String_Node_Str""));
  param_Operator=((String)parameters.get(""String_Node_Str""));
  param_InScale2=(Double)parameters.get(""String_Node_Str"");
  param_Field2=((String)parameters.get(""String_Node_Str""));
  param_OutScale=(Double)parameters.get(""String_Node_Str"");
  lowPassFilter=new LowPassFilter();
  lowPassFilter.setF((Double)parameters.get(""String_Node_Str""));
  addSeries();
}","@Override public void init(){
  super.init();
  param_InScale1=(Double)parameters.get(""String_Node_Str"");
  param_Field1=((String)parameters.get(""String_Node_Str""));
  param_Operator=((String)parameters.get(""String_Node_Str""));
  param_InScale2=(Double)parameters.get(""String_Node_Str"");
  param_Field2=((String)parameters.get(""String_Node_Str""));
  param_OutScale=(Double)parameters.get(""String_Node_Str"");
  param_OutOffset=(Double)parameters.get(""String_Node_Str"");
  lowPassFilter=new LowPassFilter();
  lowPassFilter.setF((Double)parameters.get(""String_Node_Str""));
  addSeries();
}"
53155,"@Override public void process(double time,Map<String,Object> update){
  double s=0.0;
  Object v1=update.get(param_Field1);
  Object v2=update.get(param_Field2);
  if (v1 != null && v1 instanceof Number && v2 != null && v2 instanceof Number) {
    double d1=((Number)v1).doubleValue();
    double d2=((Number)v2).doubleValue();
switch (param_Operator.charAt(0)) {
case '*':
      s=d1 * d2;
    break;
case '/':
  s=d1 / d2;
break;
case '+':
s=param_InScale1 * d1 + param_InScale2 * d2;
break;
case '-':
s=param_InScale1 * d1 + param_InScale2 * d2;
break;
default :
}
}
 else {
return;
}
s=lowPassFilter.getOutput(time,s);
addPoint(0,time,s * param_OutScale);
}","@Override public void process(double time,Map<String,Object> update){
  double s=0.0;
  Object v1=update.get(param_Field1);
  Object v2=update.get(param_Field2);
  if (v1 != null && v1 instanceof Number && v2 != null && v2 instanceof Number) {
    double d1=((Number)v1).doubleValue();
    double d2=((Number)v2).doubleValue();
switch (param_Operator.charAt(0)) {
case '*':
      s=param_InScale1 * d1 * param_InScale2* d2;
    break;
case '/':
  s=param_InScale1 * d1 / (param_InScale2 * d2);
break;
case '+':
s=param_InScale1 * d1 + param_InScale2 * d2;
break;
case '-':
s=param_InScale1 * d1 - param_InScale2 * d2;
break;
default :
}
}
 else {
return;
}
s=lowPassFilter.getOutput(time,s);
addPoint(0,time,(s * param_OutScale) + param_OutOffset);
}"
53156,"@Override public Map<String,Object> getDefaultParameters(){
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",1.0);
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",1.0);
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",1.0);
  params.put(""String_Node_Str"",0.0);
  return params;
}","@Override public Map<String,Object> getDefaultParameters(){
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",1.0);
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",1.0);
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",1.0);
  params.put(""String_Node_Str"",0.0);
  params.put(""String_Node_Str"",0.0);
  return params;
}"
53157,"@Override public void init(){
  super.init();
  param_InScale1=(Double)parameters.get(""String_Node_Str"");
  param_Field1=((String)parameters.get(""String_Node_Str""));
  param_Operator=((String)parameters.get(""String_Node_Str""));
  param_InScale2=(Double)parameters.get(""String_Node_Str"");
  param_Field2=((String)parameters.get(""String_Node_Str""));
  param_OutScale=(Double)parameters.get(""String_Node_Str"");
  lowPassFilter=new LowPassFilter();
  lowPassFilter.setF((Double)parameters.get(""String_Node_Str""));
  addSeries();
}","@Override public void init(){
  super.init();
  param_InScale1=(Double)parameters.get(""String_Node_Str"");
  param_Field1=((String)parameters.get(""String_Node_Str""));
  param_Operator=((String)parameters.get(""String_Node_Str""));
  param_InScale2=(Double)parameters.get(""String_Node_Str"");
  param_Field2=((String)parameters.get(""String_Node_Str""));
  param_OutScale=(Double)parameters.get(""String_Node_Str"");
  param_OutOffset=(Double)parameters.get(""String_Node_Str"");
  lowPassFilter=new LowPassFilter();
  lowPassFilter.setF((Double)parameters.get(""String_Node_Str""));
  addSeries();
}"
53158,"@Override public void process(double time,Map<String,Object> update){
  double s=0.0;
  Object v1=update.get(param_Field1);
  Object v2=update.get(param_Field2);
  if (v1 != null && v1 instanceof Number && v2 != null && v2 instanceof Number) {
    double d1=((Number)v1).doubleValue();
    double d2=((Number)v2).doubleValue();
switch (param_Operator.charAt(0)) {
case '*':
      s=d1 * d2;
    break;
case '/':
  s=d1 / d2;
break;
case '+':
s=param_InScale1 * d1 + param_InScale2 * d2;
break;
case '-':
s=param_InScale1 * d1 + param_InScale2 * d2;
break;
default :
}
}
 else {
return;
}
s=lowPassFilter.getOutput(time,s);
addPoint(0,time,s * param_OutScale);
}","@Override public void process(double time,Map<String,Object> update){
  double s=0.0;
  Object v1=update.get(param_Field1);
  Object v2=update.get(param_Field2);
  if (v1 != null && v1 instanceof Number && v2 != null && v2 instanceof Number) {
    double d1=((Number)v1).doubleValue();
    double d2=((Number)v2).doubleValue();
switch (param_Operator.charAt(0)) {
case '*':
      s=param_InScale1 * d1 * param_InScale2* d2;
    break;
case '/':
  s=param_InScale1 * d1 / (param_InScale2 * d2);
break;
case '+':
s=param_InScale1 * d1 + param_InScale2 * d2;
break;
case '-':
s=param_InScale1 * d1 - param_InScale2 * d2;
break;
default :
}
}
 else {
return;
}
s=lowPassFilter.getOutput(time,s);
addPoint(0,time,(s * param_OutScale) + param_OutOffset);
}"
53159,"@Override public Map<String,Object> getDefaultParameters(){
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",1.0);
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",1.0);
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",1.0);
  params.put(""String_Node_Str"",0.0);
  return params;
}","@Override public Map<String,Object> getDefaultParameters(){
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",1.0);
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",1.0);
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",1.0);
  params.put(""String_Node_Str"",0.0);
  params.put(""String_Node_Str"",0.0);
  return params;
}"
53160,"@Override public void init(){
  super.init();
  timePrev=Double.NaN;
  gpsInited=false;
  baroInited=false;
  est=new double[3][2];
  corrGPS=new double[3][2];
  corrBaro=0.0;
  wGPS=new double[3];
  acc=new BasicVector(3);
  accBias=new BasicVector(3);
  gps=new double[3][2];
  baro=0.0;
  baroOffset=0.0;
  delayLineGPS=new DelayLine<double[][]>();
  positionProjector=new GlobalPositionProjector();
  param_Fields_GPS=((String)parameters.get(""String_Node_Str"")).split(WHITESPACE_RE);
  param_Fields_Acc=((String)parameters.get(""String_Node_Str"")).split(WHITESPACE_RE);
  param_Fields_Att=((String)parameters.get(""String_Node_Str"")).split(WHITESPACE_RE);
  param_Field_Baro=(String)parameters.get(""String_Node_Str"");
  param_W_GPS=new double[3][2];
  param_W_GPS[0][0]=(Double)parameters.get(""String_Node_Str"");
  param_W_GPS[1][0]=param_W_GPS[0][0];
  param_W_GPS[0][1]=(Double)parameters.get(""String_Node_Str"");
  param_W_GPS[1][1]=param_W_GPS[0][1];
  param_W_GPS[2][0]=(Double)parameters.get(""String_Node_Str"");
  param_W_Baro=(Double)parameters.get(""String_Node_Str"");
  param_W_Acc_Bias=(Double)parameters.get(""String_Node_Str"");
  delayLineGPS.setDelay((Double)parameters.get(""String_Node_Str""));
  show=new boolean[]{false,false,false};
  offsets=new double[]{0.0,0.0,0.0};
  scales=new double[]{1.0,1.0,1.0};
  String showStr=(String)parameters.get(""String_Node_Str"");
  String[] offsetsStr=((String)parameters.get(""String_Node_Str"")).split(WHITESPACE_RE);
  if (!(Boolean)parameters.get(""String_Node_Str"")) {
    scales[2]=-1.0;
  }
  for (int i=0; i < 3; i++) {
    String axisName=""String_Node_Str"".substring(i,i + 1);
    show[i]=showStr.contains(axisName);
    if (show[i]) {
      addSeries(axisName);
      addSeries(""String_Node_Str"" + axisName);
      addSeries(""String_Node_Str"" + axisName);
    }
    if (offsetsStr.length > i) {
      offsets[i]=Double.parseDouble(offsetsStr[i]);
    }
 else {
      offsets[i]=0.0;
    }
  }
}","@Override public void init(){
  super.init();
  timePrev=Double.NaN;
  gpsInited=false;
  baroInited=false;
  rot=null;
  est=new double[3][2];
  corrGPS=new double[3][2];
  corrBaro=0.0;
  wGPS=new double[3];
  acc=new BasicVector(3);
  accBias=new BasicVector(3);
  gps=new double[3][2];
  baro=0.0;
  baroOffset=0.0;
  delayLineGPS=new DelayLine<double[][]>();
  positionProjector=new GlobalPositionProjector();
  param_Fields_GPS=((String)parameters.get(""String_Node_Str"")).split(WHITESPACE_RE);
  param_Fields_Acc=((String)parameters.get(""String_Node_Str"")).split(WHITESPACE_RE);
  param_Fields_Att=((String)parameters.get(""String_Node_Str"")).split(WHITESPACE_RE);
  param_Field_Baro=(String)parameters.get(""String_Node_Str"");
  param_W_GPS=new double[3][2];
  param_W_GPS[0][0]=(Double)parameters.get(""String_Node_Str"");
  param_W_GPS[1][0]=param_W_GPS[0][0];
  param_W_GPS[0][1]=(Double)parameters.get(""String_Node_Str"");
  param_W_GPS[1][1]=param_W_GPS[0][1];
  param_W_GPS[2][0]=(Double)parameters.get(""String_Node_Str"");
  param_W_Baro=(Double)parameters.get(""String_Node_Str"");
  param_W_Acc_Bias=(Double)parameters.get(""String_Node_Str"");
  delayLineGPS.setDelay((Double)parameters.get(""String_Node_Str""));
  show=new boolean[]{false,false,false};
  offsets=new double[]{0.0,0.0,0.0};
  scales=new double[]{1.0,1.0,1.0};
  String showStr=(String)parameters.get(""String_Node_Str"");
  String[] offsetsStr=((String)parameters.get(""String_Node_Str"")).split(WHITESPACE_RE);
  if (!(Boolean)parameters.get(""String_Node_Str"")) {
    scales[2]=-1.0;
  }
  for (int i=0; i < 3; i++) {
    String axisName=""String_Node_Str"".substring(i,i + 1);
    show[i]=showStr.contains(axisName);
    if (show[i]) {
      addSeries(axisName);
      addSeries(""String_Node_Str"" + axisName);
      addSeries(""String_Node_Str"" + axisName);
    }
    if (offsetsStr.length > i) {
      offsets[i]=Double.parseDouble(offsetsStr[i]);
    }
 else {
      offsets[i]=0.0;
    }
  }
}"
53161,"@Override public void process(double time,Map<String,Object> update){
  boolean act=false;
  Number roll=(Number)update.get(param_Fields_Att[0]);
  Number pitch=(Number)update.get(param_Fields_Att[1]);
  Number yaw=(Number)update.get(param_Fields_Att[2]);
  if (roll != null && pitch != null && yaw != null) {
    rot=RotationConversion.rotationMatrixByEulerAngles(roll.doubleValue(),pitch.doubleValue(),yaw.doubleValue());
    act=true;
  }
  Number baroNum=(Number)update.get(param_Field_Baro);
  if (baroNum != null) {
    baro=baroNum.doubleValue();
    if (!baroInited) {
      baroInited=true;
      est[2][0]=-baro;
    }
    corrBaro=-baro - baroOffset - est[2][0];
  }
  Number latNum=(Number)update.get(param_Fields_GPS[0]);
  Number lonNum=(Number)update.get(param_Fields_GPS[1]);
  Number altNum=(Number)update.get(param_Fields_GPS[2]);
  Number[] velGPSNum=new Number[]{(Number)update.get(param_Fields_GPS[3]),(Number)update.get(param_Fields_GPS[4]),(Number)update.get(param_Fields_GPS[5])};
  Number ephNum=(Number)update.get(param_Fields_GPS[6]);
  Number epvNum=(Number)update.get(param_Fields_GPS[7]);
  if (latNum != null && lonNum != null && altNum != null && velGPSNum[0] != null && velGPSNum[1] != null && velGPSNum[2] != null) {
    double lat=latNum.doubleValue();
    double lon=lonNum.doubleValue();
    double eph=ephNum.doubleValue();
    double epv=epvNum.doubleValue();
    double alt=altNum.doubleValue();
    if (!gpsInited && baroInited) {
      gpsInited=true;
      positionProjector.init(new LatLonAlt(lat,lon,alt));
      est[2][0]=-alt;
      baroOffset=alt - baro;
    }
    if (gpsInited) {
      double[] gpsProj=positionProjector.project(new LatLonAlt(lat,lon,alt));
      gps[0][0]=gpsProj[0];
      gps[1][0]=gpsProj[1];
      gps[2][0]=gpsProj[2];
      for (int axis=0; axis < 3; axis++) {
        gps[axis][1]=velGPSNum[axis].doubleValue();
      }
      double[][] outOld=delayLineGPS.getOutput(time);
      if (outOld != null) {
        for (int axis=0; axis < 3; axis++) {
          for (int posVel=0; posVel < 2; posVel++) {
            corrGPS[axis][posVel]=gps[axis][posVel] - outOld[axis][posVel];
          }
        }
      }
      wGPS[0]=2.0 / Math.max(2.0,eph);
      wGPS[1]=wGPS[0];
      wGPS[2]=4.0 / Math.max(4.0,epv);
      act=true;
    }
  }
  Number accX=(Number)update.get(param_Fields_Acc[0]);
  Number accY=(Number)update.get(param_Fields_Acc[1]);
  Number accZ=(Number)update.get(param_Fields_Acc[2]);
  if (accX != null && accY != null && accZ != null) {
    acc.set(0,accX.doubleValue());
    acc.set(1,accY.doubleValue());
    acc.set(2,accZ.doubleValue());
    acc.subtract(accBias);
    act=true;
  }
  if (act) {
    if (!Double.isNaN(timePrev)) {
      double dt=time - timePrev;
      double dBaro=corrGPS[2][0] * param_W_GPS[2][0] * wGPS[2]* dt;
      baroOffset-=dBaro;
      corrBaro+=dBaro;
      Vector accBiasCorrV=new BasicVector(3);
      for (int axis=0; axis < 3; axis++) {
        double wPos=param_W_GPS[axis][0] * param_W_GPS[axis][0] * wGPS[axis]* wGPS[axis];
        double wVel=param_W_GPS[axis][1] * wGPS[axis];
        accBiasCorrV.set(axis,-corrGPS[axis][0] * wPos - corrGPS[axis][1] * wVel);
      }
      accBiasCorrV.set(2,-corrBaro * param_W_Baro * param_W_Baro);
      Vector b=rot.transpose().multiply(accBiasCorrV).multiply(param_W_Acc_Bias * dt);
      Vector accNED=rot.multiply(acc);
      accNED.set(2,accNED.get(2) + G);
      accBias.addInPlace(b);
      predict(est,dt,new double[]{accNED.get(0),accNED.get(1),accNED.get(2)});
      for (int axis=0; axis < 3; axis++) {
        correct(est[axis],dt,0,corrGPS[axis][0],param_W_GPS[axis][0] * wGPS[axis]);
        correct(est[axis],dt,1,corrGPS[axis][1],param_W_GPS[axis][1] * wGPS[axis]);
      }
      correct(est[2],dt,0,corrBaro,param_W_Baro);
      delayLineGPS.getOutput(time,deepCopy(est));
      if (gpsInited && baroInited) {
        int seriesIdx=0;
        for (int axis=0; axis < 3; axis++) {
          if (show[axis]) {
            addPoint(seriesIdx++,time,est[axis][0] * scales[axis] + offsets[axis]);
            addPoint(seriesIdx++,time,est[axis][1] * scales[axis]);
            addPoint(seriesIdx++,time,corrGPS[axis][1]);
          }
        }
      }
    }
    timePrev=time;
  }
}","@Override public void process(double time,Map<String,Object> update){
  boolean act=false;
  Number roll=(Number)update.get(param_Fields_Att[0]);
  Number pitch=(Number)update.get(param_Fields_Att[1]);
  Number yaw=(Number)update.get(param_Fields_Att[2]);
  if (roll != null && pitch != null && yaw != null) {
    rot=RotationConversion.rotationMatrixByEulerAngles(roll.doubleValue(),pitch.doubleValue(),yaw.doubleValue());
    act=true;
  }
  Number baroNum=(Number)update.get(param_Field_Baro);
  if (baroNum != null) {
    baro=baroNum.doubleValue();
    if (!baroInited) {
      baroInited=true;
      est[2][0]=-baro;
    }
    corrBaro=-baro - baroOffset - est[2][0];
  }
  Number latNum=(Number)update.get(param_Fields_GPS[0]);
  Number lonNum=(Number)update.get(param_Fields_GPS[1]);
  Number altNum=(Number)update.get(param_Fields_GPS[2]);
  Number[] velGPSNum=new Number[]{(Number)update.get(param_Fields_GPS[3]),(Number)update.get(param_Fields_GPS[4]),(Number)update.get(param_Fields_GPS[5])};
  Number ephNum=(Number)update.get(param_Fields_GPS[6]);
  Number epvNum=(Number)update.get(param_Fields_GPS[7]);
  if (latNum != null && lonNum != null && altNum != null && velGPSNum[0] != null && velGPSNum[1] != null && velGPSNum[2] != null) {
    double lat=latNum.doubleValue();
    double lon=lonNum.doubleValue();
    double eph=ephNum.doubleValue();
    double epv=epvNum.doubleValue();
    double alt=altNum.doubleValue();
    if (!gpsInited && baroInited) {
      gpsInited=true;
      positionProjector.init(new LatLonAlt(lat,lon,alt));
      est[2][0]=-alt;
      baroOffset=alt - baro;
    }
    if (gpsInited) {
      double[] gpsProj=positionProjector.project(new LatLonAlt(lat,lon,alt));
      gps[0][0]=gpsProj[0];
      gps[1][0]=gpsProj[1];
      gps[2][0]=gpsProj[2];
      for (int axis=0; axis < 3; axis++) {
        gps[axis][1]=velGPSNum[axis].doubleValue();
      }
      double[][] outOld=delayLineGPS.getOutput(time);
      if (outOld != null) {
        for (int axis=0; axis < 3; axis++) {
          for (int posVel=0; posVel < 2; posVel++) {
            corrGPS[axis][posVel]=gps[axis][posVel] - outOld[axis][posVel];
          }
        }
      }
      wGPS[0]=2.0 / Math.max(2.0,eph);
      wGPS[1]=wGPS[0];
      wGPS[2]=4.0 / Math.max(4.0,epv);
      act=true;
    }
  }
  Number accX=(Number)update.get(param_Fields_Acc[0]);
  Number accY=(Number)update.get(param_Fields_Acc[1]);
  Number accZ=(Number)update.get(param_Fields_Acc[2]);
  if (accX != null && accY != null && accZ != null) {
    acc.set(0,accX.doubleValue());
    acc.set(1,accY.doubleValue());
    acc.set(2,accZ.doubleValue());
    acc.subtract(accBias);
    act=true;
  }
  if (act) {
    if (!Double.isNaN(timePrev) && rot != null) {
      double dt=time - timePrev;
      double dBaro=corrGPS[2][0] * param_W_GPS[2][0] * wGPS[2]* dt;
      baroOffset-=dBaro;
      corrBaro+=dBaro;
      Vector accBiasCorrV=new BasicVector(3);
      for (int axis=0; axis < 3; axis++) {
        double wPos=param_W_GPS[axis][0] * param_W_GPS[axis][0] * wGPS[axis]* wGPS[axis];
        double wVel=param_W_GPS[axis][1] * wGPS[axis];
        accBiasCorrV.set(axis,-corrGPS[axis][0] * wPos - corrGPS[axis][1] * wVel);
      }
      accBiasCorrV.set(2,-corrBaro * param_W_Baro * param_W_Baro);
      Vector b=rot.transpose().multiply(accBiasCorrV).multiply(param_W_Acc_Bias * dt);
      Vector accNED=rot.multiply(acc);
      accNED.set(2,accNED.get(2) + G);
      accBias.addInPlace(b);
      predict(est,dt,new double[]{accNED.get(0),accNED.get(1),accNED.get(2)});
      for (int axis=0; axis < 3; axis++) {
        correct(est[axis],dt,0,corrGPS[axis][0],param_W_GPS[axis][0] * wGPS[axis]);
        correct(est[axis],dt,1,corrGPS[axis][1],param_W_GPS[axis][1] * wGPS[axis]);
      }
      correct(est[2],dt,0,corrBaro,param_W_Baro);
      delayLineGPS.getOutput(time,deepCopy(est));
      if (gpsInited && baroInited) {
        int seriesIdx=0;
        for (int axis=0; axis < 3; axis++) {
          if (show[axis]) {
            addPoint(seriesIdx++,time,est[axis][0] * scales[axis] + offsets[axis]);
            addPoint(seriesIdx++,time,est[axis][1] * scales[axis]);
            addPoint(seriesIdx++,time,corrGPS[axis][1]);
          }
        }
      }
    }
    timePrev=time;
  }
}"
53162,"private boolean isConfigValid(){
  if (this.exportFormat.getSelectedIndex() <= 0) {
    JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return false;
  }
  return true;
}","private boolean isConfigValid(){
  return true;
}"
53163,"private void updateConfigurationFromDialog(){
  this.exporterConfiguration.setSplitTracksByFlightMode(this.splitTrackByFlightCheckBox.isSelected());
  if (this.exportFormat.getSelectedIndex() > 0) {
    FormatItem item=(FormatItem)this.exportFormat.getSelectedItem();
    this.exporterConfiguration.setExportFormatType(ExportFormatFactory.ExportFormatType.valueOf(item.name));
  }
  this.readerConfiguration.setSamplesPerSecond(getSamplesPerSecond());
}","private void updateConfigurationFromDialog(){
  this.exporterConfiguration.setSplitTracksByFlightMode(this.splitTrackByFlightCheckBox.isSelected());
  FormatItem item=(FormatItem)this.exportFormat.getSelectedItem();
  this.exporterConfiguration.setExportFormatType(ExportFormatFactory.ExportFormatType.valueOf(item.name));
  this.readerConfiguration.setSamplesPerSecond(getSamplesPerSecond());
}"
53164,"private void splitTrack(FlightMode newFlightMode) throws IOException {
  if (configuration.isSplitTracksByFlightMode()) {
    if (this.trackStarted) {
      this.writer.endTrackPart();
      this.writer.startTrackPart(determineStyleByFlightMode(newFlightMode));
    }
 else {
      this.writer.startTrackPart(determineStyleByFlightMode(newFlightMode));
      this.trackStarted=true;
    }
  }
 else {
    if (!this.trackStarted) {
      this.writer.startTrackPart();
      this.trackStarted=true;
    }
  }
}","private void splitTrack(FlightMode newFlightMode) throws IOException {
  if (configuration.isSplitTracksByFlightMode()) {
    if (this.trackStarted) {
      this.writer.endTrackPart();
      this.writer.startTrackPart(determineStyleByFlightMode(newFlightMode));
    }
 else {
      this.writer.startTrackPart(determineStyleByFlightMode(newFlightMode));
      this.trackStarted=true;
    }
  }
}"
53165,"public void exportToFile(File file,String title) throws IOException {
  Writer fileWriter=initWriter(file,title);
  try {
    this.writer.writeStart();
    TrackPoint point=readNextPoint();
    while (null != point) {
      this.writer.writePoint(point);
      point=readNextPoint();
    }
    this.writer.endTrackPart();
    this.writer.writeEnd();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    fileWriter.close();
  }
}","public void exportToFile(File file,String title) throws IOException {
  Writer fileWriter=initWriter(file,title);
  try {
    this.writer.writeStart();
    TrackPoint point=readNextPoint();
    if (!this.trackStarted) {
      this.writer.startTrackPart();
      this.trackStarted=true;
    }
    while (null != point) {
      this.writer.writePoint(point);
      point=readNextPoint();
    }
    this.writer.endTrackPart();
    this.writer.writeEnd();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    fileWriter.close();
  }
}"
53166,"public AddProcessorDialog(String[] processorsTypes){
  this.processorsTypes=processorsTypes;
  setContentPane(contentPane);
  setModal(true);
  getRootPane().setDefaultButton(buttonOK);
  buttonOK.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onOK();
    }
  }
);
  buttonCancel.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onCancel();
    }
  }
);
  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      onCancel();
    }
  }
);
  contentPane.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onCancel();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
}","public AddProcessorDialog(String[] processorsTypes){
  this.processorsTypes=processorsTypes;
  setContentPane(contentPane);
  setModal(true);
  setTitle(""String_Node_Str"");
  getRootPane().setDefaultButton(buttonOK);
  buttonOK.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onOK();
    }
  }
);
  buttonCancel.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onCancel();
    }
  }
);
  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      onCancel();
    }
  }
);
  contentPane.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onCancel();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
}"
53167,"private void generateSeries() throws IOException, FormatErrorException {
  dataset.removeAllSeries();
  PlotProcessor[] processors=new PlotProcessor[processorsListModel.size()];
  if (processors.length > 0) {
    for (int i=0; i < processorsListModel.size(); i++) {
      processors[i]=(PlotProcessor)processorsListModel.get(i);
      processors[i].init();
    }
    logReader.seek(0);
    Map<String,Object> data=new HashMap<String,Object>();
    while (true) {
      long t;
      data.clear();
      try {
        t=logReader.readUpdate(data);
      }
 catch (      EOFException e) {
        break;
      }
catch (      Exception e) {
        setStatus(""String_Node_Str"" + e);
        break;
      }
      for (      PlotProcessor processor : processors) {
        processor.process(t * 0.000001,data);
      }
    }
    for (    PlotProcessor processor : processors) {
      for (      XYSeries series : (List<XYSeries>)processor.getSeriesCollection().getSeries()) {
        dataset.addSeries(series);
      }
    }
  }
  chartPanel.repaint();
}","private void generateSeries() throws IOException, FormatErrorException {
  dataset.removeAllSeries();
  PlotProcessor[] processors=new PlotProcessor[processorsListModel.size()];
  if (processors.length > 0) {
    for (int i=0; i < processorsListModel.size(); i++) {
      processors[i]=(PlotProcessor)processorsListModel.get(i);
      processors[i].init();
    }
    logReader.seek(0);
    Map<String,Object> data=new HashMap<String,Object>();
    while (true) {
      long t;
      data.clear();
      try {
        t=logReader.readUpdate(data);
      }
 catch (      EOFException e) {
        break;
      }
      for (      PlotProcessor processor : processors) {
        processor.process(t * 0.000001,data);
      }
    }
    for (    PlotProcessor processor : processors) {
      for (      XYSeries series : (List<XYSeries>)processor.getSeriesCollection().getSeries()) {
        dataset.addSeries(series);
      }
    }
  }
  chartPanel.repaint();
}"
53168,"public ImpossibleMatchIssue(@MapsTo(""String_Node_Str"") final Severity severity,@MapsTo(""String_Node_Str"") final CheckType checkType,@MapsTo(""String_Node_Str"") final String ruleId,@MapsTo(""String_Node_Str"") final String fieldFactType,@MapsTo(""String_Node_Str"") final String fieldName,@MapsTo(""String_Node_Str"") final String conflictedItem,@MapsTo(""String_Node_Str"") final String conflictingItem,@MapsTo(""String_Node_Str"") final Integer... rowNumbers){
  super(severity,checkType,new HashSet<>(Arrays.asList(rowNumbers)));
  this.ruleId=ruleId;
  this.fieldFactType=fieldFactType;
  this.fieldName=fieldName;
  this.conflictedItem=conflictedItem;
  this.conflictingItem=conflictingItem;
}","public ImpossibleMatchIssue(@MapsTo(""String_Node_Str"") final Severity severity,@MapsTo(""String_Node_Str"") final CheckType checkType,@MapsTo(""String_Node_Str"") final String ruleId,@MapsTo(""String_Node_Str"") final String fieldFactType,@MapsTo(""String_Node_Str"") final String fieldName,@MapsTo(""String_Node_Str"") final String conflictedItem,@MapsTo(""String_Node_Str"") final String conflictingItem,@MapsTo(""String_Node_Str"") final Set<Integer> rowNumbers){
  super(severity,checkType,rowNumbers);
  this.ruleId=ruleId;
  this.fieldFactType=fieldFactType;
  this.fieldName=fieldName;
  this.conflictedItem=conflictedItem;
  this.conflictingItem=conflictingItem;
}"
53169,"public AnalyzerProvider(){
  factTypes.add(new FactTypes.FactType(""String_Node_Str"",new HashSet<FactTypes.Field>(){
{
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_NUMERIC_DOUBLE));
    }
  }
));
  factTypes.add(new FactTypes.FactType(""String_Node_Str"",new HashSet<FactTypes.Field>(){
{
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_NUMERIC_INTEGER));
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_STRING));
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_STRING));
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_STRING));
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_BOOLEAN));
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_NUMERIC_INTEGER));
    }
  }
));
}","public AnalyzerProvider(){
  factTypes.add(new FactTypes.FactType(""String_Node_Str"",new HashSet<FactTypes.Field>(){
{
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_NUMERIC_INTEGER));
    }
  }
));
  factTypes.add(new FactTypes.FactType(""String_Node_Str"",new HashSet<FactTypes.Field>(){
{
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_NUMERIC_DOUBLE));
    }
  }
));
  factTypes.add(new FactTypes.FactType(""String_Node_Str"",new HashSet<FactTypes.Field>(){
{
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_NUMERIC_INTEGER));
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_STRING));
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_STRING));
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_STRING));
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_BOOLEAN));
      add(new FactTypes.Field(""String_Node_Str"",DataType.TYPE_NUMERIC_INTEGER));
    }
  }
));
}"
53170,"private String getFactType(){
  final Optional<Field> field=getField();
  if (field.isPresent()) {
    return field.get().getName();
  }
 else {
    return ""String_Node_Str"";
  }
}","private String getFactType(){
  final Optional<Field> field=getField();
  if (field.isPresent()) {
    return field.get().getFactType();
  }
 else {
    return ""String_Node_Str"";
  }
}"
53171,"private String getFieldName(){
  final Optional<Field> field=getField();
  if (field.isPresent()) {
    return field.get().getFactType();
  }
 else {
    return ""String_Node_Str"";
  }
}","private String getFieldName(){
  final Optional<Field> field=getField();
  if (field.isPresent()) {
    return field.get().getName();
  }
 else {
    return ""String_Node_Str"";
  }
}"
53172,"@Override protected Issue makeIssue(final Severity severity,final CheckType checkType){
  return new ImpossibleMatchIssue(severity,checkType,Integer.toString(ruleInspector.getRowIndex() + 1),getFactType(),getFieldName(),toHumanReadableString(conflict.getOrigin().getConflictedItem()),toHumanReadableString(conflict.getOrigin().getConflictingItem()),ruleInspector.getRowIndex() + 1);
}","@Override protected Issue makeIssue(final Severity severity,final CheckType checkType){
  return new ImpossibleMatchIssue(severity,checkType,Integer.toString(ruleInspector.getRowIndex() + 1),getFactType(),getFieldName(),toHumanReadableString(conflict.getOrigin().getConflictedItem()),toHumanReadableString(conflict.getOrigin().getConflictingItem()),Collections.singleton(ruleInspector.getRowIndex() + 1));
}"
53173,"protected RuleInspectorCache buildCache(){
  if (cache == null) {
    cache=new RuleInspectorCache(getUtils(),model,getIndex());
  }
  return cache;
}","public RuleInspectorCache buildCache(){
  if (cache == null) {
    cache=new RuleInspectorCache(getUtils(),model,getIndex());
  }
  return cache;
}"
53174,"protected UpdateManager buildUpdateManager(){
  if (updateManager == null) {
    updateManager=new UpdateManager(getIndex(),model,buildCache(),checkRunner);
  }
  return updateManager;
}","public UpdateManager buildUpdateManager(){
  if (updateManager == null) {
    updateManager=new UpdateManager(getIndex(),model,buildCache(),checkRunner);
  }
  return updateManager;
}"
53175,"protected UpdateManagerBuilder getUpdateManagerBuilder(final CheckRunner checkRunner){
  return new UpdateManagerBuilder(checkRunner);
}","public UpdateManagerBuilder getUpdateManagerBuilder(final CheckRunner checkRunner){
  return new UpdateManagerBuilder(checkRunner);
}"
53176,"protected CacheBuilder getCacheBuilder(){
  return new CacheBuilder();
}","public CacheBuilder getCacheBuilder(){
  return new CacheBuilder();
}"
53177,"public CellUpdateManager(final Coordinate coordinate){
  column=index.columns.where(Column.index().is(coordinate.getCol())).select().first();
  select=index.rules.where(Rule.index().is(coordinate.getRow())).select().patterns().where(UUIDMatcher.uuid().any()).select().fields().where(UUIDMatcher.uuid().any()).select();
  values=getValue(model.getData().get(coordinate.getRow()).get(coordinate.getCol()));
}","public CellUpdateManager(final Coordinate coordinate){
  column=index.columns.where(Column.index().is(coordinate.getCol())).select().first();
  final Rule rule=index.rules.where(Rule.index().is(coordinate.getRow())).select().first();
  actions=rule.getActions();
  conditions=rule.getConditions();
  values=getValue(model.getData().get(coordinate.getRow()).get(coordinate.getCol()));
}"
53178,"@Override public void check(){
  hasIssues=false;
  if (isEmptyRow()) {
    return;
  }
  if (ruleInspector.atLeastOneConditionHasAValue()) {
    if (thereIsAtLeastOneRow()) {
      hasIssues=isDeficient();
    }
  }
}","@Override public void check(){
  hasIssues=false;
  if (ruleInspector.isEmpty()) {
    return;
  }
  if (ruleInspector.atLeastOneConditionHasAValue()) {
    if (thereIsAtLeastOneRow()) {
      hasIssues=isDeficient();
    }
  }
}"
53179,"public DetectDeficientRowsCheck(final RuleInspector ruleInspector){
  super(ruleInspector,new RuleInspectorCache.Filter(){
    @Override public boolean accept(    final RuleInspector other){
      return !ruleInspector.getRule().getUuidKey().equals(other.getRule().getUuidKey());
    }
  }
);
}","public DetectDeficientRowsCheck(final RuleInspector ruleInspector){
  super(ruleInspector,new RuleInspectorCache.Filter(){
    @Override public boolean accept(    final RuleInspector other){
      return !ruleInspector.getRule().getUuidKey().equals(other.getRule().getUuidKey()) && !other.isEmpty();
    }
  }
);
}"
53180,"@Override public boolean accept(final RuleInspector other){
  return !ruleInspector.getRule().getUuidKey().equals(other.getRule().getUuidKey());
}","@Override public boolean accept(final RuleInspector other){
  return !ruleInspector.getRule().getUuidKey().equals(other.getRule().getUuidKey()) && !other.isEmpty();
}"
53181,"public void build(){
  if (actionCol instanceof BRLActionColumn) {
    addBRLAction((BRLActionColumn)actionCol);
  }
 else {
    final int columnIndex=model.getExpandedColumns().indexOf(actionCol);
    if (rowHasIndex(columnIndex,row)) {
      addAction(actionCol,row.get(columnIndex));
    }
  }
}","public void build(){
  if (actionCol instanceof BRLActionColumn) {
    addBRLAction((BRLActionColumn)actionCol);
  }
 else   if (actionCol instanceof ActionRetractFactCol52) {
    addRetractAction((ActionRetractFactCol52)actionCol);
  }
 else {
    final int columnIndex=model.getExpandedColumns().indexOf(actionCol);
    if (rowHasIndex(columnIndex,row)) {
      addAction(actionCol,row.get(columnIndex));
    }
  }
}"
53182,"public boolean parseArgs(String[] args){
  Options options=new Options();
  options.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  CommandLine commandLine;
  HelpFormatter formatter=new HelpFormatter();
  try {
    commandLine=new BasicParser().parse(options,args);
  }
 catch (  ParseException e) {
    formatter.printHelp(formatstr,options);
    return false;
  }
  if (commandLine.hasOption(""String_Node_Str"")) {
    formatter.printHelp(formatstr,options);
    return false;
  }
  return (parseArgInputTempDir(commandLine) && parseArgOutputVfsRepository(commandLine));
}","public boolean parseArgs(String[] args){
  Options options=new Options();
  options.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  CommandLine commandLine;
  HelpFormatter formatter=new HelpFormatter();
  try {
    commandLine=new BasicParser().parse(options,args);
  }
 catch (  ParseException e) {
    formatter.printHelp(FORMAT_STR,options);
    return false;
  }
  if (commandLine.hasOption(""String_Node_Str"")) {
    formatter.printHelp(FORMAT_STR,options);
    return false;
  }
  return (parseArgInputTempDir(commandLine) && parseArgOutputVfsRepository(commandLine));
}"
53183,"private boolean parseArgOutputVfsRepository(CommandLine commandLine){
  outputRepoName=commandLine.getOptionValue(""String_Node_Str"",DEFAULT_MIGRATION_FILE_SYSTEM);
  outputVfsRepository=new File(commandLine.getOptionValue(""String_Node_Str"",""String_Node_Str""));
  forceOverwriteOutputVfsRepository=commandLine.hasOption(""String_Node_Str"");
  if (outputVfsRepository.exists()) {
    if (forceOverwriteOutputVfsRepository) {
      try {
        FileUtils.deleteDirectory(outputVfsRepository);
      }
 catch (      IOException e) {
        System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str""+ e);
        return false;
      }
    }
 else {
      System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str"");
      return false;
    }
  }
  try {
    outputVfsRepository=outputVfsRepository.getCanonicalFile();
    FileUtils.forceMkdir(outputVfsRepository);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + outputVfsRepository + ""String_Node_Str""+ e);
    return false;
  }
  return true;
}","private boolean parseArgOutputVfsRepository(CommandLine commandLine){
  outputRepoName=commandLine.getOptionValue(""String_Node_Str"",DEFAULT_MIGRATION_FILE_SYSTEM);
  outputVfsRepository=new File(commandLine.getOptionValue(""String_Node_Str"",""String_Node_Str""));
  boolean forceOverwriteOutputVfsRepository=commandLine.hasOption(""String_Node_Str"");
  if (outputVfsRepository.exists()) {
    if (forceOverwriteOutputVfsRepository) {
      try {
        FileUtils.deleteDirectory(outputVfsRepository);
      }
 catch (      IOException e) {
        System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str""+ e);
        return false;
      }
    }
 else {
      System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str"");
      return false;
    }
  }
  try {
    outputVfsRepository=outputVfsRepository.getCanonicalFile();
    FileUtils.forceMkdir(outputVfsRepository);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + outputVfsRepository + ""String_Node_Str""+ e);
    return false;
  }
  return true;
}"
53184,"public static String parseCdataSection(Node cdataNode){
  if (cdataNode != null && CDATA_SECTION.equalsIgnoreCase(cdataNode.getNodeName())) {
    return cdataNode.getTextContent();
  }
  return ""String_Node_Str"";
}","public static String parseCdataSection(Node cdataParentNode){
  if (cdataParentNode == null)   return ""String_Node_Str"";
  StringBuilder sb=new StringBuilder();
  NodeList cdataParentNodeChildren=cdataParentNode.getChildNodes();
  if (cdataParentNodeChildren != null && cdataParentNodeChildren.getLength() > 0) {
    for (int i=0; i < cdataParentNodeChildren.getLength(); i++) {
      Node cdataNode=cdataParentNodeChildren.item(i);
      if (CDATA_SECTION.equalsIgnoreCase(cdataNode.getNodeName()))       sb.append(cdataNode.getTextContent());
 else       System.out.println(""String_Node_Str"" + cdataNode.getNodeName());
    }
  }
  return sb.toString();
}"
53185,"public static String formatCdataSection(String content){
  if (content.contains(CDATA_CLOSE))   throw new RuntimeException(""String_Node_Str"" + content);
  StringBuilder sb=new StringBuilder(CDATA_OPEN);
  sb.append(content).append(CDATA_CLOSE);
  return sb.toString();
}","public static String formatCdataSection(String content){
  StringBuilder sb=new StringBuilder(CDATA_OPEN);
  sb.append(escapeContent(content)).append(CDATA_CLOSE);
  return sb.toString();
}"
53186,"private XmlGenericAttributes parseGenericNodeContent(Node assetNode){
  NamedNodeMap assetAttribs=assetNode.getAttributes();
  Node commentNode=assetNode.getFirstChild();
  String checkinComment=ExportXmlUtils.parseCdataSection(commentNode.getFirstChild());
  return new XmlGenericAttributes(assetAttribs.getNamedItem(ASSET_NAME).getNodeValue(),assetAttribs.getNamedItem(ASSET_TYPE).getNodeValue(),assetAttribs.getNamedItem(ASSET_LAST_CONTRIBUTOR).getNodeValue(),checkinComment,new Date(Long.parseLong(assetAttribs.getNamedItem(ASSET_LAST_MODIFIED).getNodeValue(),10)));
}","private XmlGenericAttributes parseGenericNodeContent(Node assetNode){
  NamedNodeMap assetAttribs=assetNode.getAttributes();
  Node commentNode=assetNode.getFirstChild();
  String checkinComment=ExportXmlUtils.parseCdataSection(commentNode);
  return new XmlGenericAttributes(assetAttribs.getNamedItem(ASSET_NAME).getNodeValue(),assetAttribs.getNamedItem(ASSET_TYPE).getNodeValue(),assetAttribs.getNamedItem(ASSET_LAST_CONTRIBUTOR).getNodeValue(),checkinComment,new Date(Long.parseLong(assetAttribs.getNamedItem(ASSET_LAST_MODIFIED).getNodeValue(),10)));
}"
53187,"private String parsePackageHeaderInfo(Node headerInfoNode){
  NodeList headerNodeChildren=headerInfoNode.getChildNodes();
  if (headerNodeChildren.getLength() > 1)   throw new IllegalArgumentException(""String_Node_Str"" + MODULE_PACKAGEHEADER);
  return ExportXmlUtils.parseCdataSection(headerNodeChildren.item(0));
}","private String parsePackageHeaderInfo(Node headerInfoNode){
  if (!MODULE_PACKAGEHEADER.equalsIgnoreCase(headerInfoNode.getNodeName()))   throw new IllegalArgumentException(""String_Node_Str"" + MODULE_PACKAGEHEADER);
  return ExportXmlUtils.parseCdataSection(headerInfoNode);
}"
53188,"private String parseGlobals(Node globalsNode){
  NodeList globalsNodeChildren=globalsNode.getChildNodes();
  if (globalsNodeChildren.getLength() > 1)   throw new IllegalArgumentException(""String_Node_Str"" + MODULE_GLOBALS);
  return ExportXmlUtils.parseCdataSection(globalsNodeChildren.item(0));
}","private String parseGlobals(Node globalsNode){
  if (!MODULE_GLOBALS.equalsIgnoreCase(globalsNode.getNodeName()))   throw new IllegalArgumentException(""String_Node_Str"" + MODULE_GLOBALS);
  return ExportXmlUtils.parseCdataSection(globalsNode);
}"
53189,"private String parseCheckinComment(Node checkinCommentNode){
  NodeList checkinCommentNodeChildren=checkinCommentNode.getChildNodes();
  if (checkinCommentNodeChildren.getLength() > 1)   throw new IllegalArgumentException(""String_Node_Str"" + MODULE_CHECKIN_COMMENT);
  return ExportXmlUtils.parseCdataSection(checkinCommentNodeChildren.item(0));
}","private String parseCheckinComment(Node checkinCommentNode){
  if (!MODULE_CHECKIN_COMMENT.equalsIgnoreCase(checkinCommentNode.getNodeName()))   throw new IllegalArgumentException(""String_Node_Str"" + MODULE_CHECKIN_COMMENT);
  return ExportXmlUtils.parseCdataSection(checkinCommentNode);
}"
53190,"@Override public GuidedDecisionTree load(final Path path){
  try {
    final String content=ioService.readAllString(Paths.convert(path));
    final GuidedDecisionTree model=GuidedDecisionTreeXMLPersistence.getInstance().unmarshal(content);
    final TypeNode type=new TypeNodeImpl(""String_Node_Str"");
    final ConstraintNode c1=new ConstraintNodeImpl(""String_Node_Str"",""String_Node_Str"",new StringValue(""String_Node_Str""));
    final ConstraintNode c2=new ConstraintNodeImpl(""String_Node_Str"",""String_Node_Str"",new StringValue(""String_Node_Str""));
    final ConstraintNode c3=new ConstraintNodeImpl(""String_Node_Str"",""String_Node_Str"",new IntegerValue(20));
    final ConstraintNode c4=new ConstraintNodeImpl(""String_Node_Str"",""String_Node_Str"",new IntegerValue(30));
    model.setRoot(type);
    type.getChildren().add(c1);
    type.getChildren().add(c2);
    c1.getChildren().add(c3);
    c1.getChildren().add(c4);
    return model;
  }
 catch (  Exception e) {
    throw ExceptionUtilities.handleException(e);
  }
}","@Override public GuidedDecisionTree load(final Path path){
  try {
    final String content=ioService.readAllString(Paths.convert(path));
    final GuidedDecisionTree model=GuidedDecisionTreeXMLPersistence.getInstance().unmarshal(content);
    final TypeNode type=new TypeNodeImpl(""String_Node_Str"");
    final ConstraintNode c1=new ConstraintNodeImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new StringValue(""String_Node_Str""));
    final ConstraintNode c2=new ConstraintNodeImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new StringValue(""String_Node_Str""));
    final ConstraintNode c3=new ConstraintNodeImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IntegerValue(20));
    final ConstraintNode c4=new ConstraintNodeImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IntegerValue(30));
    model.setRoot(type);
    type.getChildren().add(c1);
    type.getChildren().add(c2);
    c1.getChildren().add(c3);
    c1.getChildren().add(c4);
    return model;
  }
 catch (  Exception e) {
    throw ExceptionUtilities.handleException(e);
  }
}"
53191,"public <U extends TestResultMessage>Event<U> select(TypeLiteral<U> subtype,Annotation... qualifiers){
  return null;
}","@Override public <U extends TestResultMessage>Event<U> select(Class<U> subtype,Annotation... qualifiers){
  return null;
}"
53192,"public void createOrganizationalUnit(final String jobId,final String organizationalUnitName,final String organizationalUnitOwner,final List<String> repositoryNameList){
  logger.info(""String_Node_Str"" + organizationalUnitName + ""String_Node_Str""+ organizationalUnitOwner);
  JobResult result=new JobResult();
  result.setJobId(jobId);
  if (organizationalUnitName == null || organizationalUnitName == null) {
    result.setStatus(JobStatus.BAD_REQUEST);
    result.setResult(""String_Node_Str"");
    jobResultEvent.fire(result);
    return;
  }
  OrganizationalUnit organizationalUnit=null;
  List<org.uberfire.backend.repositories.Repository> repositories=new ArrayList<org.uberfire.backend.repositories.Repository>();
  if (repositoryNameList != null && repositoryNameList.size() > 0) {
    for (    String repoName : repositoryNameList) {
      org.uberfire.java.nio.file.Path repositoryPath=getRepositoryRootPath(repoName);
      if (repositoryPath == null) {
        result.setStatus(JobStatus.RESOURCE_NOT_EXIST);
        result.setResult(""String_Node_Str"" + repoName + ""String_Node_Str"");
        jobResultEvent.fire(result);
        return;
      }
      GitRepository repo=new GitRepository(repoName);
      repositories.add(repo);
    }
    organizationalUnit=organizationalUnitService.createOrganizationalUnit(organizationalUnitName,organizationalUnitOwner,repositories);
  }
 else {
    organizationalUnit=organizationalUnitService.createOrganizationalUnit(organizationalUnitName,organizationalUnitOwner);
  }
  if (organizationalUnit != null) {
    result.setResult(""String_Node_Str"" + organizationalUnit.getName() + ""String_Node_Str"");
    result.setStatus(JobStatus.SUCCESS);
  }
 else {
    result.setStatus(JobStatus.FAIL);
  }
  jobResultEvent.fire(result);
}","public void createOrganizationalUnit(final String jobId,final String organizationalUnitName,final String organizationalUnitOwner,final List<String> repositoryNameList){
  logger.info(""String_Node_Str"" + organizationalUnitName + ""String_Node_Str""+ organizationalUnitOwner);
  JobResult result=new JobResult();
  result.setJobId(jobId);
  if (organizationalUnitName == null || organizationalUnitOwner == null) {
    result.setStatus(JobStatus.BAD_REQUEST);
    result.setResult(""String_Node_Str"");
    jobResultEvent.fire(result);
    return;
  }
  OrganizationalUnit organizationalUnit=null;
  List<org.uberfire.backend.repositories.Repository> repositories=new ArrayList<org.uberfire.backend.repositories.Repository>();
  if (repositoryNameList != null && repositoryNameList.size() > 0) {
    for (    String repoName : repositoryNameList) {
      org.uberfire.java.nio.file.Path repositoryPath=getRepositoryRootPath(repoName);
      if (repositoryPath == null) {
        result.setStatus(JobStatus.RESOURCE_NOT_EXIST);
        result.setResult(""String_Node_Str"" + repoName + ""String_Node_Str"");
        jobResultEvent.fire(result);
        return;
      }
      GitRepository repo=new GitRepository(repoName);
      repositories.add(repo);
    }
    organizationalUnit=organizationalUnitService.createOrganizationalUnit(organizationalUnitName,organizationalUnitOwner,repositories);
  }
 else {
    organizationalUnit=organizationalUnitService.createOrganizationalUnit(organizationalUnitName,organizationalUnitOwner);
  }
  if (organizationalUnit != null) {
    result.setResult(""String_Node_Str"" + organizationalUnit.getName() + ""String_Node_Str"");
    result.setStatus(JobStatus.SUCCESS);
  }
 else {
    result.setStatus(JobStatus.FAIL);
  }
  jobResultEvent.fire(result);
}"
53193,"public void createProject(final String jobId,final String repositoryName,final String projectName){
  logger.info(""String_Node_Str"" + repositoryName + ""String_Node_Str""+ projectName);
  JobResult result=new JobResult();
  result.setJobId(jobId);
  org.uberfire.java.nio.file.Path repositoryPath=getRepositoryRootPath(repositoryName);
  if (repositoryPath == null) {
    result.setStatus(JobStatus.RESOURCE_NOT_EXIST);
    result.setResult(""String_Node_Str"" + repositoryName + ""String_Node_Str"");
    jobResultEvent.fire(result);
    return;
  }
 else {
    POM pom=new POM();
    pom.getGav().setArtifactId(projectName);
    pom.getGav().setGroupId(projectName);
    pom.getGav().setVersion(""String_Node_Str"");
    try {
      Project project=projectService.newProject(makeRepository(Paths.convert(repositoryPath)),projectName,pom,""String_Node_Str"");
    }
 catch (    org.uberfire.java.nio.file.FileAlreadyExistsException e) {
      result.setStatus(JobStatus.DUPLICATE_RESOURCE);
      result.setResult(""String_Node_Str"" + projectName + ""String_Node_Str"");
      jobResultEvent.fire(result);
      return;
    }
    result.setStatus(JobStatus.SUCCESS);
    jobResultEvent.fire(result);
  }
}","public void createProject(final String jobId,final String repositoryName,final String projectName){
  logger.info(""String_Node_Str"" + repositoryName + ""String_Node_Str""+ projectName);
  JobResult result=new JobResult();
  result.setJobId(jobId);
  org.uberfire.java.nio.file.Path repositoryPath=getRepositoryRootPath(repositoryName);
  if (repositoryPath == null) {
    result.setStatus(JobStatus.RESOURCE_NOT_EXIST);
    result.setResult(""String_Node_Str"" + repositoryName + ""String_Node_Str"");
    jobResultEvent.fire(result);
    return;
  }
 else {
    POM pom=new POM();
    pom.getGav().setArtifactId(projectName);
    pom.getGav().setGroupId(projectName);
    pom.getGav().setVersion(""String_Node_Str"");
    try {
      projectService.newProject(makeRepository(Paths.convert(repositoryPath)),projectName,pom,""String_Node_Str"");
    }
 catch (    org.uberfire.java.nio.file.FileAlreadyExistsException e) {
      result.setStatus(JobStatus.DUPLICATE_RESOURCE);
      result.setResult(""String_Node_Str"" + projectName + ""String_Node_Str"");
      jobResultEvent.fire(result);
      return;
    }
    result.setStatus(JobStatus.SUCCESS);
    jobResultEvent.fire(result);
  }
}"
53194,"public void testProject(final String jobId,final String repositoryName,final String projectName,final BuildConfig config){
  logger.info(""String_Node_Str"" + repositoryName + ""String_Node_Str""+ projectName);
  final JobResult result=new JobResult();
  result.setJobId(jobId);
  org.uberfire.java.nio.file.Path repositoryPath=getRepositoryRootPath(repositoryName);
  if (repositoryPath == null) {
    result.setStatus(JobStatus.RESOURCE_NOT_EXIST);
    result.setResult(""String_Node_Str"" + repositoryName + ""String_Node_Str"");
    jobResultEvent.fire(result);
    return;
  }
 else {
    Project project=projectService.resolveProject(Paths.convert(repositoryPath.resolve(projectName)));
    if (project == null) {
      result.setStatus(JobStatus.RESOURCE_NOT_EXIST);
      result.setResult(""String_Node_Str"" + projectName + ""String_Node_Str"");
      jobResultEvent.fire(result);
      return;
    }
    scenarioTestEditorService.runAllScenarios(project.getPomXMLPath(),new Event<TestResultMessage>(){
      @Override public void fire(      TestResultMessage event){
        result.setDetailedResult(testResultMessageToDetailedStringMessages(event));
        result.setStatus(event.wasSuccessful() ? JobStatus.SUCCESS : JobStatus.FAIL);
        jobResultEvent.fire(result);
      }
      public Event<TestResultMessage> select(      Annotation... qualifiers){
        return null;
      }
      public <U extends TestResultMessage>Event<U> select(      Class<U> subtype,      Annotation... qualifiers){
        return null;
      }
      public <U extends TestResultMessage>Event<U> select(      TypeLiteral<U> subtype,      Annotation... qualifiers){
        return null;
      }
    }
);
  }
}","public void testProject(final String jobId,final String repositoryName,final String projectName,final BuildConfig config){
  logger.info(""String_Node_Str"" + repositoryName + ""String_Node_Str""+ projectName);
  final JobResult result=new JobResult();
  result.setJobId(jobId);
  org.uberfire.java.nio.file.Path repositoryPath=getRepositoryRootPath(repositoryName);
  if (repositoryPath == null) {
    result.setStatus(JobStatus.RESOURCE_NOT_EXIST);
    result.setResult(""String_Node_Str"" + repositoryName + ""String_Node_Str"");
    jobResultEvent.fire(result);
    return;
  }
 else {
    Project project=projectService.resolveProject(Paths.convert(repositoryPath.resolve(projectName)));
    if (project == null) {
      result.setStatus(JobStatus.RESOURCE_NOT_EXIST);
      result.setResult(""String_Node_Str"" + projectName + ""String_Node_Str"");
      jobResultEvent.fire(result);
      return;
    }
    scenarioTestEditorService.runAllScenarios(project.getPomXMLPath(),new Event<TestResultMessage>(){
      @Override public void fire(      TestResultMessage event){
        result.setDetailedResult(testResultMessageToDetailedStringMessages(event));
        result.setStatus(event.wasSuccessful() ? JobStatus.SUCCESS : JobStatus.FAIL);
        jobResultEvent.fire(result);
      }
      @Override public Event<TestResultMessage> select(      Annotation... qualifiers){
        return null;
      }
      @Override public <U extends TestResultMessage>Event<U> select(      Class<U> subtype,      Annotation... qualifiers){
        return null;
      }
    }
);
  }
}"
53195,"@Override public List<ValidationMessage> validate(final Path path,final String content){
  try {
    return genericValidator.validate(path,new ByteArrayInputStream(content.getBytes()),FILTER_JAVA,FILTER_DRLS);
  }
 catch (  Exception e) {
    throw ExceptionUtilities.handleException(e);
  }
}","@Override public List<ValidationMessage> validate(final Path path,final String content){
  try {
    return genericValidator.validate(path,new ByteArrayInputStream(content.getBytes(Charsets.UTF_8)),FILTER_JAVA,FILTER_DRLS);
  }
 catch (  Exception e) {
    throw ExceptionUtilities.handleException(e);
  }
}"
53196,"public void addCellValue(final int row,final int column,final String value){
  final DTCellValue52 dcv=new DTCellValue52();
  try {
    dcv.setNumericValue(new Long(value));
  }
 catch (  NumberFormatException nfe) {
    final String message=""String_Node_Str"" + RuleSheetParserUtil.rc2name(row,column);
    this.conversionResult.addMessage(message,ConversionMessageType.WARNING);
  }
  this.values.add(dcv);
}","public void addCellValue(final int row,final int column,final String value){
  final DTCellValue52 dcv=new DTCellValue52();
  try {
    dcv.setNumericValue(Long.valueOf(value));
  }
 catch (  NumberFormatException nfe) {
    final String message=""String_Node_Str"" + RuleSheetParserUtil.rc2name(row,column);
    this.conversionResult.addMessage(message,ConversionMessageType.WARNING);
  }
  this.values.add(dcv);
}"
53197,"public void populateDecisionTable(final GuidedDecisionTable52 dtable){
  final AttributeCol52 column=new AttributeCol52();
  column.setAttribute(GuidedDecisionTable52.SALIENCE_ATTR);
  if (isSequential) {
    column.setUseRowNumber(true);
    column.setReverseOrder(true);
    final int maxRow=this.values.size();
    for (int iRow=0; iRow < maxRow; iRow++) {
      final DTCellValue52 dcv=this.values.get(iRow);
      dcv.setNumericValue(new Integer(maxRow - iRow));
    }
  }
  dtable.getAttributeCols().add(column);
  addColumnData(dtable,column);
}","public void populateDecisionTable(final GuidedDecisionTable52 dtable){
  final AttributeCol52 column=new AttributeCol52();
  column.setAttribute(GuidedDecisionTable52.SALIENCE_ATTR);
  if (isSequential) {
    column.setUseRowNumber(true);
    column.setReverseOrder(true);
    final int maxRow=this.values.size();
    for (int iRow=0; iRow < maxRow; iRow++) {
      final DTCellValue52 dcv=this.values.get(iRow);
      dcv.setNumericValue(Integer.valueOf(maxRow - iRow));
    }
  }
  dtable.getAttributeCols().add(column);
  addColumnData(dtable,column);
}"
53198,"public void addCellValue(final int row,final int column,final String content){
  String value=content;
  if (value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str"")) {
    value=value.substring(1,value.lastIndexOf(""String_Node_Str"") - 1);
  }
  final DTCellValue52 dcv=new DTCellValue52();
  try {
    dcv.setNumericValue(new Integer(value));
  }
 catch (  NumberFormatException nfe) {
    final String message=""String_Node_Str"" + RuleSheetParserUtil.rc2name(row,column);
    this.conversionResult.addMessage(message,ConversionMessageType.WARNING);
  }
  this.values.add(dcv);
}","public void addCellValue(final int row,final int column,final String content){
  String value=content;
  if (value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str"")) {
    value=value.substring(1,value.lastIndexOf(""String_Node_Str"") - 1);
  }
  final DTCellValue52 dcv=new DTCellValue52();
  try {
    dcv.setNumericValue(Integer.valueOf(value));
  }
 catch (  NumberFormatException nfe) {
    final String message=""String_Node_Str"" + RuleSheetParserUtil.rc2name(row,column);
    this.conversionResult.addMessage(message,ConversionMessageType.WARNING);
  }
  this.values.add(dcv);
}"
53199,"public void populateDecisionTable(final GuidedDecisionTable52 dtable){
  for (int iRow=0; iRow < this.values.size(); iRow++) {
    dtable.getData().add(new ArrayList<DTCellValue52>());
    final DTCellValue52 dcv=this.values.get(iRow);
    dcv.setNumericValue(new Integer(iRow + 1));
    dtable.getData().get(iRow).add(0,dcv);
  }
}","public void populateDecisionTable(final GuidedDecisionTable52 dtable){
  for (int iRow=0; iRow < this.values.size(); iRow++) {
    dtable.getData().add(new ArrayList<DTCellValue52>());
    final DTCellValue52 dcv=this.values.get(iRow);
    dcv.setNumericValue(Integer.valueOf(iRow + 1));
    dtable.getData().get(iRow).add(0,dcv);
  }
}"
53200,"private static List<FactMetaModel> toModel(String drl) throws DroolsParserException {
  if (drl != null && (drl.startsWith(""String_Node_Str"") || drl.startsWith(""String_Node_Str""))) {
    throw new DroolsParserException(""String_Node_Str"");
  }
  final DrlParser parser=new DrlParser();
  final StringReader reader=new StringReader(drl);
  final PackageDescr pkg=parser.parse(reader);
  if (parser.hasErrors()) {
    throw new DroolsParserException(""String_Node_Str"" + drl + ""String_Node_Str"");
  }
  if (pkg == null) {
    return emptyList();
  }
  final List<TypeDeclarationDescr> types=pkg.getTypeDeclarations();
  final List<FactMetaModel> list=new ArrayList<FactMetaModel>(types.size());
  for (  final TypeDeclarationDescr td : types) {
    final FactMetaModel mm=new FactMetaModel();
    mm.setName(td.getTypeName());
    mm.setSuperType(td.getSuperTypeName());
    final Map<String,TypeFieldDescr> fields=td.getFields();
    for (    Map.Entry<String,TypeFieldDescr> en : fields.entrySet()) {
      final String fieldName=en.getKey();
      final TypeFieldDescr descr=en.getValue();
      final FieldMetaModel fm=new FieldMetaModel(fieldName,descr.getPattern().getObjectType());
      mm.getFields().add(fm);
    }
    final Map<String,AnnotationDescr> annotations=td.getAnnotations();
    for (    final Map.Entry<String,AnnotationDescr> en : annotations.entrySet()) {
      final String annotationName=en.getKey();
      final AnnotationDescr descr=en.getValue();
      final Map<String,String> values=descr.getValues();
      final AnnotationMetaModel am=new AnnotationMetaModel(annotationName,values);
      mm.getAnnotations().add(am);
    }
    list.add(mm);
  }
  return list;
}","private static List<FactMetaModel> toModel(String drl) throws DroolsParserException {
  Preconditions.checkNotNull(drl,""String_Node_Str"");
  if (drl.startsWith(""String_Node_Str"") || drl.startsWith(""String_Node_Str"")) {
    throw new DroolsParserException(""String_Node_Str"");
  }
  final DrlParser parser=new DrlParser();
  final StringReader reader=new StringReader(drl);
  final PackageDescr pkg=parser.parse(reader);
  if (parser.hasErrors()) {
    throw new DroolsParserException(""String_Node_Str"" + drl + ""String_Node_Str"");
  }
  if (pkg == null) {
    return emptyList();
  }
  final List<TypeDeclarationDescr> types=pkg.getTypeDeclarations();
  final List<FactMetaModel> list=new ArrayList<FactMetaModel>(types.size());
  for (  final TypeDeclarationDescr td : types) {
    final FactMetaModel mm=new FactMetaModel();
    mm.setName(td.getTypeName());
    mm.setSuperType(td.getSuperTypeName());
    final Map<String,TypeFieldDescr> fields=td.getFields();
    for (    Map.Entry<String,TypeFieldDescr> en : fields.entrySet()) {
      final String fieldName=en.getKey();
      final TypeFieldDescr descr=en.getValue();
      final FieldMetaModel fm=new FieldMetaModel(fieldName,descr.getPattern().getObjectType());
      mm.getFields().add(fm);
    }
    final Map<String,AnnotationDescr> annotations=td.getAnnotations();
    for (    final Map.Entry<String,AnnotationDescr> en : annotations.entrySet()) {
      final String annotationName=en.getKey();
      final AnnotationDescr descr=en.getValue();
      final Map<String,String> values=descr.getValues();
      final AnnotationMetaModel am=new AnnotationMetaModel(annotationName,values);
      mm.getAnnotations().add(am);
    }
    list.add(mm);
  }
  return list;
}"
53201,"@Override public List<ValidationMessage> validate(final Path path,final GlobalsModel content){
  try {
    return genericValidator.validate(path,new ByteArrayInputStream(GlobalsPersistence.getInstance().marshal(content).getBytes()),FILTER_JAVA);
  }
 catch (  Exception e) {
    throw ExceptionUtilities.handleException(e);
  }
}","@Override public List<ValidationMessage> validate(final Path path,final GlobalsModel content){
  try {
    return genericValidator.validate(path,new ByteArrayInputStream(GlobalsPersistence.getInstance().marshal(content).getBytes(Charsets.UTF_8)),FILTER_JAVA);
  }
 catch (  Exception e) {
    throw ExceptionUtilities.handleException(e);
  }
}"
53202,"@Override public List<ValidationMessage> validate(final Path path,final GuidedDecisionTable52 content){
  try {
    return genericValidator.validate(path,new ByteArrayInputStream(GuidedDTXMLPersistence.getInstance().marshal(content).getBytes()),FILTER_JAVA,FILTER_GLOBALS,FILTER_DSLS);
  }
 catch (  Exception e) {
    throw ExceptionUtilities.handleException(e);
  }
}","@Override public List<ValidationMessage> validate(final Path path,final GuidedDecisionTable52 content){
  try {
    return genericValidator.validate(path,new ByteArrayInputStream(GuidedDTXMLPersistence.getInstance().marshal(content).getBytes(Charsets.UTF_8)),FILTER_JAVA,FILTER_GLOBALS,FILTER_DSLS);
  }
 catch (  Exception e) {
    throw ExceptionUtilities.handleException(e);
  }
}"
53203,"private void convertDTCellValueFromString(DataType.DataTypes dataType,DTCellValue52 dcv){
  String text=dcv.getStringValue();
switch (dataType) {
case BOOLEAN:
    dcv.setBooleanValue((text == null ? false : Boolean.valueOf(text)));
  break;
case DATE:
Date d=null;
try {
if (text != null) {
  if (DATE_CONVERTOR == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  d=DATE_CONVERTOR.parse(text);
}
}
 catch (IllegalArgumentException e) {
}
dcv.setDateValue(d);
break;
case NUMERIC:
BigDecimal numericValue=null;
try {
if (text != null) {
numericValue=new BigDecimal(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(numericValue);
break;
case NUMERIC_BIGDECIMAL:
BigDecimal bigDecimalValue=null;
try {
if (text != null) {
bigDecimalValue=new BigDecimal(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(bigDecimalValue);
break;
case NUMERIC_BIGINTEGER:
BigInteger bigIntegerValue=null;
try {
if (text != null) {
bigIntegerValue=new BigInteger(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(bigIntegerValue);
break;
case NUMERIC_BYTE:
Byte byteValue=null;
try {
if (text != null) {
byteValue=new Byte(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(byteValue);
break;
case NUMERIC_DOUBLE:
Double doubleValue=null;
try {
if (text != null) {
doubleValue=new Double(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(doubleValue);
break;
case NUMERIC_FLOAT:
Float floatValue=null;
try {
if (text != null) {
floatValue=new Float(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(floatValue);
break;
case NUMERIC_INTEGER:
Integer integerValue=null;
try {
if (text != null) {
integerValue=new Integer(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(integerValue);
break;
case NUMERIC_LONG:
Long longValue=null;
try {
if (text != null) {
longValue=new Long(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(longValue);
break;
case NUMERIC_SHORT:
Short shortValue=null;
try {
if (text != null) {
shortValue=new Short(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(shortValue);
break;
}
}","private void convertDTCellValueFromString(DataType.DataTypes dataType,DTCellValue52 dcv){
  String text=dcv.getStringValue();
switch (dataType) {
case BOOLEAN:
    dcv.setBooleanValue((text == null ? Boolean.FALSE : Boolean.valueOf(text)));
  break;
case DATE:
Date d=null;
try {
if (text != null) {
  if (DATE_CONVERTOR == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  d=DATE_CONVERTOR.parse(text);
}
}
 catch (IllegalArgumentException e) {
}
dcv.setDateValue(d);
break;
case NUMERIC:
BigDecimal numericValue=null;
try {
if (text != null) {
numericValue=new BigDecimal(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(numericValue);
break;
case NUMERIC_BIGDECIMAL:
BigDecimal bigDecimalValue=null;
try {
if (text != null) {
bigDecimalValue=new BigDecimal(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(bigDecimalValue);
break;
case NUMERIC_BIGINTEGER:
BigInteger bigIntegerValue=null;
try {
if (text != null) {
bigIntegerValue=new BigInteger(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(bigIntegerValue);
break;
case NUMERIC_BYTE:
Byte byteValue=null;
try {
if (text != null) {
byteValue=Byte.valueOf(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(byteValue);
break;
case NUMERIC_DOUBLE:
Double doubleValue=null;
try {
if (text != null) {
doubleValue=Double.valueOf(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(doubleValue);
break;
case NUMERIC_FLOAT:
Float floatValue=null;
try {
if (text != null) {
floatValue=Float.valueOf(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(floatValue);
break;
case NUMERIC_INTEGER:
Integer integerValue=null;
try {
if (text != null) {
integerValue=Integer.valueOf(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(integerValue);
break;
case NUMERIC_LONG:
Long longValue=null;
try {
if (text != null) {
longValue=Long.valueOf(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(longValue);
break;
case NUMERIC_SHORT:
Short shortValue=null;
try {
if (text != null) {
shortValue=Short.valueOf(text);
}
}
 catch (Exception e) {
}
dcv.setNumericValue(shortValue);
break;
}
}"
53204,"public String getBoundFactType(String boundName){
  for (  CompositeColumn<?> cc : this.model.getConditions()) {
    if (cc instanceof Pattern52) {
      final Pattern52 p=(Pattern52)cc;
      if (p.isBound() && p.getBoundName().equals(boundName)) {
        return p.getFactType();
      }
    }
 else     if (cc instanceof BRLConditionColumn) {
      final BRLConditionColumn brl=(BRLConditionColumn)cc;
      for (      IPattern p : brl.getDefinition()) {
        if (p instanceof FactPattern) {
          FactPattern fp=(FactPattern)p;
          if (fp.isBound() && fp.getBoundName().equals(boundName)) {
            return fp.getFactType();
          }
        }
      }
    }
  }
  return new String();
}","public String getBoundFactType(String boundName){
  for (  CompositeColumn<?> cc : this.model.getConditions()) {
    if (cc instanceof Pattern52) {
      final Pattern52 p=(Pattern52)cc;
      if (p.isBound() && p.getBoundName().equals(boundName)) {
        return p.getFactType();
      }
    }
 else     if (cc instanceof BRLConditionColumn) {
      final BRLConditionColumn brl=(BRLConditionColumn)cc;
      for (      IPattern p : brl.getDefinition()) {
        if (p instanceof FactPattern) {
          FactPattern fp=(FactPattern)p;
          if (fp.isBound() && fp.getBoundName().equals(boundName)) {
            return fp.getFactType();
          }
        }
      }
    }
  }
  return ""String_Node_Str"";
}"
53205,"public ActionWorkItemPopup(final Path path,final GuidedDecisionTable52 model,final IBindingProvider bindingProvider,final GenericColumnCommand refreshGrid,final ActionWorkItemCol52 col,final Set<PortableWorkDefinition> workItemDefinitions,final boolean isNew,final boolean isReadOnly){
  this.editingCol=cloneActionWorkItemColumn(col);
  this.path=path;
  this.model=model;
  this.isReadOnly=isReadOnly;
  this.workItemInputParameters=new WorkItemParametersWidget(bindingProvider,isReadOnly);
  setTitle(GuidedDecisionTableConstants.INSTANCE.ColumnConfigurationWorkItem());
  setModal(false);
  final TextBox header=new TextBox();
  header.setText(col.getHeader());
  header.setEnabled(!isReadOnly);
  if (!isReadOnly) {
    header.addChangeHandler(new ChangeHandler(){
      public void onChange(      ChangeEvent event){
        editingCol.setHeader(header.getText());
      }
    }
);
  }
  addAttribute(GuidedDecisionTableConstants.INSTANCE.ColumnHeaderDescription(),header);
  final ListBox workItemsListBox=new ListBox();
  addAttribute(GuidedDecisionTableConstants.INSTANCE.WorkItemNameColon(),workItemsListBox);
  workItemsListBox.setEnabled(!isReadOnly);
  if (!isReadOnly) {
    workItemsListBox.addChangeHandler(new ChangeHandler(){
      public void onChange(      ChangeEvent event){
        int index=workItemsListBox.getSelectedIndex();
        if (index >= 0) {
          String selectedWorkItemName=workItemsListBox.getValue(index);
          editingCol.setWorkItemDefinition(workItemDefinitionsMap.get(selectedWorkItemName));
          showWorkItemParameters();
          center();
        }
      }
    }
);
  }
  workItemInputParametersIndex=addAttribute(GuidedDecisionTableConstants.INSTANCE.WorkItemInputParameters(),workItemInputParameters,false);
  setupWorkItems(workItemsListBox,workItemDefinitions);
  addAttribute(new StringBuilder(GuidedDecisionTableConstants.INSTANCE.HideThisColumn()).append(GuidedDecisionTableConstants.COLON).toString(),DTCellValueWidgetFactory.getHideColumnIndicator(editingCol));
  Button apply=new Button(GuidedDecisionTableConstants.INSTANCE.ApplyChanges());
  apply.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent w){
      if (null == editingCol.getHeader() || ""String_Node_Str"".equals(editingCol.getHeader())) {
        Window.alert(GuidedDecisionTableConstants.INSTANCE.YouMustEnterAColumnHeaderValueDescription());
        return;
      }
      if (isNew) {
        if (!unique(editingCol.getHeader())) {
          Window.alert(GuidedDecisionTableConstants.INSTANCE.ThatColumnNameIsAlreadyInUsePleasePickAnother());
          return;
        }
      }
 else {
        if (!col.getHeader().equals(editingCol.getHeader())) {
          if (!unique(editingCol.getHeader())) {
            Window.alert(GuidedDecisionTableConstants.INSTANCE.ThatColumnNameIsAlreadyInUsePleasePickAnother());
            return;
          }
        }
      }
      refreshGrid.execute(editingCol);
      hide();
    }
  }
);
  addAttribute(""String_Node_Str"",apply);
}","public ActionWorkItemPopup(final Path path,final GuidedDecisionTable52 model,final IBindingProvider bindingProvider,final GenericColumnCommand refreshGrid,final ActionWorkItemCol52 col,final Set<PortableWorkDefinition> workItemDefinitions,final boolean isNew,final boolean isReadOnly){
  this.editingCol=cloneActionWorkItemColumn(col);
  this.model=model;
  this.isReadOnly=isReadOnly;
  this.workItemInputParameters=new WorkItemParametersWidget(bindingProvider,isReadOnly);
  setTitle(GuidedDecisionTableConstants.INSTANCE.ColumnConfigurationWorkItem());
  setModal(false);
  final TextBox header=new TextBox();
  header.setText(col.getHeader());
  header.setEnabled(!isReadOnly);
  if (!isReadOnly) {
    header.addChangeHandler(new ChangeHandler(){
      public void onChange(      ChangeEvent event){
        editingCol.setHeader(header.getText());
      }
    }
);
  }
  addAttribute(GuidedDecisionTableConstants.INSTANCE.ColumnHeaderDescription(),header);
  final ListBox workItemsListBox=new ListBox();
  addAttribute(GuidedDecisionTableConstants.INSTANCE.WorkItemNameColon(),workItemsListBox);
  workItemsListBox.setEnabled(!isReadOnly);
  if (!isReadOnly) {
    workItemsListBox.addChangeHandler(new ChangeHandler(){
      public void onChange(      ChangeEvent event){
        int index=workItemsListBox.getSelectedIndex();
        if (index >= 0) {
          String selectedWorkItemName=workItemsListBox.getValue(index);
          editingCol.setWorkItemDefinition(workItemDefinitionsMap.get(selectedWorkItemName));
          showWorkItemParameters();
          center();
        }
      }
    }
);
  }
  workItemInputParametersIndex=addAttribute(GuidedDecisionTableConstants.INSTANCE.WorkItemInputParameters(),workItemInputParameters,false);
  setupWorkItems(workItemsListBox,workItemDefinitions);
  addAttribute(new StringBuilder(GuidedDecisionTableConstants.INSTANCE.HideThisColumn()).append(GuidedDecisionTableConstants.COLON).toString(),DTCellValueWidgetFactory.getHideColumnIndicator(editingCol));
  Button apply=new Button(GuidedDecisionTableConstants.INSTANCE.ApplyChanges());
  apply.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent w){
      if (null == editingCol.getHeader() || ""String_Node_Str"".equals(editingCol.getHeader())) {
        Window.alert(GuidedDecisionTableConstants.INSTANCE.YouMustEnterAColumnHeaderValueDescription());
        return;
      }
      if (isNew) {
        if (!unique(editingCol.getHeader())) {
          Window.alert(GuidedDecisionTableConstants.INSTANCE.ThatColumnNameIsAlreadyInUsePleasePickAnother());
          return;
        }
      }
 else {
        if (!col.getHeader().equals(editingCol.getHeader())) {
          if (!unique(editingCol.getHeader())) {
            Window.alert(GuidedDecisionTableConstants.INSTANCE.ThatColumnNameIsAlreadyInUsePleasePickAnother());
            return;
          }
        }
      }
      refreshGrid.execute(editingCol);
      hide();
    }
  }
);
  addAttribute(""String_Node_Str"",apply);
}"
53206,"private AbstractRestrictedEntryTextBox makeNumericByteTextBox(final DTCellValue52 value){
  final AbstractRestrictedEntryTextBox tb=new NumericByteTextBox(allowEmptyValues);
  final Byte numericValue=(Byte)value.getNumericValue();
  tb.setValue(numericValue == null ? ""String_Node_Str"" : numericValue.toString());
  tb.setEnabled(!isReadOnly);
  if (!isReadOnly) {
    tb.addValueChangeHandler(new ValueChangeHandler<String>(){
      public void onValueChange(      ValueChangeEvent<String> event){
        try {
          value.setNumericValue(new Byte(event.getValue()));
        }
 catch (        NumberFormatException nfe) {
          if (allowEmptyValues) {
            value.setNumericValue((Byte)null);
            tb.setValue(""String_Node_Str"");
          }
 else {
            value.setNumericValue(new Byte(""String_Node_Str""));
            tb.setValue(""String_Node_Str"");
          }
        }
      }
    }
);
  }
  return tb;
}","private AbstractRestrictedEntryTextBox makeNumericByteTextBox(final DTCellValue52 value){
  final AbstractRestrictedEntryTextBox tb=new NumericByteTextBox(allowEmptyValues);
  final Byte numericValue=(Byte)value.getNumericValue();
  tb.setValue(numericValue == null ? ""String_Node_Str"" : numericValue.toString());
  tb.setEnabled(!isReadOnly);
  if (!isReadOnly) {
    tb.addValueChangeHandler(new ValueChangeHandler<String>(){
      public void onValueChange(      ValueChangeEvent<String> event){
        try {
          value.setNumericValue(Byte.valueOf(event.getValue()));
        }
 catch (        NumberFormatException nfe) {
          if (allowEmptyValues) {
            value.setNumericValue((Byte)null);
            tb.setValue(""String_Node_Str"");
          }
 else {
            value.setNumericValue(Byte.valueOf(""String_Node_Str""));
            tb.setValue(""String_Node_Str"");
          }
        }
      }
    }
);
  }
  return tb;
}"
53207,"private AbstractRestrictedEntryTextBox makeNumericIntegerTextBox(final DTCellValue52 value){
  final AbstractRestrictedEntryTextBox tb=new NumericIntegerTextBox(allowEmptyValues);
  final Integer numericValue=(Integer)value.getNumericValue();
  tb.setValue(numericValue == null ? ""String_Node_Str"" : numericValue.toString());
  tb.setEnabled(!isReadOnly);
  if (!isReadOnly) {
    tb.addValueChangeHandler(new ValueChangeHandler<String>(){
      public void onValueChange(      ValueChangeEvent<String> event){
        try {
          value.setNumericValue(new Integer(event.getValue()));
        }
 catch (        NumberFormatException nfe) {
          if (allowEmptyValues) {
            value.setNumericValue((Integer)null);
            tb.setValue(""String_Node_Str"");
          }
 else {
            value.setNumericValue(new Integer(""String_Node_Str""));
            tb.setValue(""String_Node_Str"");
          }
        }
      }
    }
);
  }
  return tb;
}","private AbstractRestrictedEntryTextBox makeNumericIntegerTextBox(final DTCellValue52 value){
  final AbstractRestrictedEntryTextBox tb=new NumericIntegerTextBox(allowEmptyValues);
  final Integer numericValue=(Integer)value.getNumericValue();
  tb.setValue(numericValue == null ? ""String_Node_Str"" : numericValue.toString());
  tb.setEnabled(!isReadOnly);
  if (!isReadOnly) {
    tb.addValueChangeHandler(new ValueChangeHandler<String>(){
      public void onValueChange(      ValueChangeEvent<String> event){
        try {
          value.setNumericValue(Integer.valueOf(event.getValue()));
        }
 catch (        NumberFormatException nfe) {
          if (allowEmptyValues) {
            value.setNumericValue((Integer)null);
            tb.setValue(""String_Node_Str"");
          }
 else {
            value.setNumericValue(0);
            tb.setValue(""String_Node_Str"");
          }
        }
      }
    }
);
  }
  return tb;
}"
53208,"private AbstractRestrictedEntryTextBox makeNumericLongTextBox(final DTCellValue52 value){
  final AbstractRestrictedEntryTextBox tb=new NumericLongTextBox(allowEmptyValues);
  final Long numericValue=(Long)value.getNumericValue();
  tb.setValue(numericValue == null ? ""String_Node_Str"" : numericValue.toString());
  tb.setEnabled(!isReadOnly);
  if (!isReadOnly) {
    tb.addValueChangeHandler(new ValueChangeHandler<String>(){
      public void onValueChange(      ValueChangeEvent<String> event){
        try {
          value.setNumericValue(new Long(event.getValue()));
        }
 catch (        NumberFormatException nfe) {
          if (allowEmptyValues) {
            value.setNumericValue((Long)null);
            tb.setValue(""String_Node_Str"");
          }
 else {
            value.setNumericValue(new Long(""String_Node_Str""));
            tb.setValue(""String_Node_Str"");
          }
        }
      }
    }
);
  }
  return tb;
}","private AbstractRestrictedEntryTextBox makeNumericLongTextBox(final DTCellValue52 value){
  final AbstractRestrictedEntryTextBox tb=new NumericLongTextBox(allowEmptyValues);
  final Long numericValue=(Long)value.getNumericValue();
  tb.setValue(numericValue == null ? ""String_Node_Str"" : numericValue.toString());
  tb.setEnabled(!isReadOnly);
  if (!isReadOnly) {
    tb.addValueChangeHandler(new ValueChangeHandler<String>(){
      public void onValueChange(      ValueChangeEvent<String> event){
        try {
          value.setNumericValue(Long.valueOf(event.getValue()));
        }
 catch (        NumberFormatException nfe) {
          if (allowEmptyValues) {
            value.setNumericValue((Long)null);
            tb.setValue(""String_Node_Str"");
          }
 else {
            value.setNumericValue(0L);
            tb.setValue(""String_Node_Str"");
          }
        }
      }
    }
);
  }
  return tb;
}"
53209,"private AbstractRestrictedEntryTextBox makeNumericShortTextBox(final DTCellValue52 value){
  final AbstractRestrictedEntryTextBox tb=new NumericShortTextBox(allowEmptyValues);
  final Short numericValue=(Short)value.getNumericValue();
  tb.setValue(numericValue == null ? ""String_Node_Str"" : numericValue.toString());
  tb.setEnabled(!isReadOnly);
  if (!isReadOnly) {
    tb.addValueChangeHandler(new ValueChangeHandler<String>(){
      public void onValueChange(      ValueChangeEvent<String> event){
        try {
          value.setNumericValue(new Short(event.getValue()));
        }
 catch (        NumberFormatException nfe) {
          if (allowEmptyValues) {
            value.setNumericValue((Short)null);
            tb.setValue(""String_Node_Str"");
          }
 else {
            value.setNumericValue(new Short(""String_Node_Str""));
            tb.setValue(""String_Node_Str"");
          }
        }
      }
    }
);
  }
  return tb;
}","private AbstractRestrictedEntryTextBox makeNumericShortTextBox(final DTCellValue52 value){
  final AbstractRestrictedEntryTextBox tb=new NumericShortTextBox(allowEmptyValues);
  final Short numericValue=(Short)value.getNumericValue();
  tb.setValue(numericValue == null ? ""String_Node_Str"" : numericValue.toString());
  tb.setEnabled(!isReadOnly);
  if (!isReadOnly) {
    tb.addValueChangeHandler(new ValueChangeHandler<String>(){
      public void onValueChange(      ValueChangeEvent<String> event){
        try {
          value.setNumericValue(Short.valueOf(event.getValue()));
        }
 catch (        NumberFormatException nfe) {
          if (allowEmptyValues) {
            value.setNumericValue((Short)null);
            tb.setValue(""String_Node_Str"");
          }
 else {
            value.setNumericValue(Short.valueOf(""String_Node_Str""));
            tb.setValue(""String_Node_Str"");
          }
        }
      }
    }
);
  }
  return tb;
}"
53210,"private static void assertIntegerDefaultValue(final DTCellValue52 dcv){
  if (dcv.getNumericValue() == null) {
    try {
      dcv.setNumericValue(new Integer(dcv.getStringValue()));
    }
 catch (    NumberFormatException nfe) {
      dcv.setNumericValue(new Integer(""String_Node_Str""));
    }
  }
}","private static void assertIntegerDefaultValue(final DTCellValue52 dcv){
  if (dcv.getNumericValue() == null) {
    try {
      dcv.setNumericValue(Integer.valueOf(dcv.getStringValue()));
    }
 catch (    NumberFormatException nfe) {
      dcv.setNumericValue(0);
    }
  }
}"
53211,"private static void assertLongDefaultValue(final DTCellValue52 dcv){
  if (dcv.getNumericValue() == null) {
    try {
      dcv.setNumericValue(new Long(dcv.getStringValue()));
    }
 catch (    NumberFormatException nfe) {
      dcv.setNumericValue(new Long(""String_Node_Str""));
    }
  }
}","private static void assertLongDefaultValue(final DTCellValue52 dcv){
  if (dcv.getNumericValue() == null) {
    try {
      dcv.setNumericValue(Long.valueOf(dcv.getStringValue()));
    }
 catch (    NumberFormatException nfe) {
      dcv.setNumericValue(0L);
    }
  }
}"
53212,"private static void assertBooleanDefaultValue(final DTCellValue52 dcv){
  if (dcv.getBooleanValue() == null) {
    dcv.setBooleanValue(new Boolean(dcv.getStringValue()));
  }
}","private static void assertBooleanDefaultValue(final DTCellValue52 dcv){
  if (dcv.getBooleanValue() == null) {
    dcv.setBooleanValue(Boolean.valueOf(dcv.getStringValue()));
  }
}"
53213,"public static Widget getDefaultValueWidget(final AttributeCol52 ac,final boolean isReadOnly,final DefaultValueChangedEventHandler defaultValueChangedEventHandler){
  Widget editor=null;
  final AttributeCol52 originCol=ac;
  final String attributeName=ac.getAttribute();
  if (attributeName.equals(RuleAttributeWidget.RULEFLOW_GROUP_ATTR) || attributeName.equals(RuleAttributeWidget.AGENDA_GROUP_ATTR) || attributeName.equals(RuleAttributeWidget.ACTIVATION_GROUP_ATTR)|| attributeName.equals(RuleAttributeWidget.TIMER_ATTR)|| attributeName.equals(RuleAttributeWidget.CALENDARS_ATTR)) {
    final TextBox tb=TextBoxFactory.getTextBox(DataType.TYPE_STRING);
    if (ac.getDefaultValue() == null) {
      ac.setDefaultValue(new DTCellValue52(""String_Node_Str""));
    }
    final DTCellValue52 defaultValue=ac.getDefaultValue();
    tb.setValue(defaultValue.getStringValue());
    tb.setEnabled(!isReadOnly);
    if (!isReadOnly) {
      tb.addValueChangeHandler(new ValueChangeHandler<String>(){
        public void onValueChange(        ValueChangeEvent<String> event){
          DTCellValue52 clonedDefaultValue=defaultValue.cloneDefaultValueCell();
          defaultValue.setStringValue(tb.getValue());
          defaultValueChangedEventHandler.onDefaultValueChanged(new DefaultValueChangedEvent(defaultValue,clonedDefaultValue));
        }
      }
);
    }
    editor=tb;
  }
 else   if (attributeName.equals(RuleAttributeWidget.SALIENCE_ATTR)) {
    final TextBox tb=TextBoxFactory.getTextBox(DataType.TYPE_NUMERIC_INTEGER);
    if (ac.getDefaultValue() == null) {
      ac.setDefaultValue(new DTCellValue52(0));
    }
 else {
      assertIntegerDefaultValue(ac.getDefaultValue());
    }
    final DTCellValue52 defaultValue=ac.getDefaultValue();
    final Integer numericValue=(Integer)defaultValue.getNumericValue();
    tb.setValue(numericValue == null ? ""String_Node_Str"" : numericValue.toString());
    tb.setEnabled(!isReadOnly);
    if (!isReadOnly) {
      tb.addValueChangeHandler(new ValueChangeHandler<String>(){
        public void onValueChange(        ValueChangeEvent<String> event){
          DTCellValue52 clonedDefaultValue=defaultValue.cloneDefaultValueCell();
          try {
            defaultValue.setNumericValue(new Integer(event.getValue()));
          }
 catch (          NumberFormatException nfe) {
            defaultValue.setNumericValue(new Integer(""String_Node_Str""));
            tb.setValue(""String_Node_Str"");
          }
 finally {
            defaultValueChangedEventHandler.onDefaultValueChanged(new DefaultValueChangedEvent(defaultValue,clonedDefaultValue));
          }
        }
      }
);
    }
    editor=tb;
  }
 else   if (attributeName.equals(RuleAttributeWidget.DURATION_ATTR)) {
    final TextBox tb=TextBoxFactory.getTextBox(DataType.TYPE_NUMERIC_LONG);
    if (ac.getDefaultValue() == null) {
      ac.setDefaultValue(new DTCellValue52(0L));
    }
 else {
      assertLongDefaultValue(ac.getDefaultValue());
    }
    final DTCellValue52 defaultValue=ac.getDefaultValue();
    final Long numericValue=(Long)defaultValue.getNumericValue();
    tb.setValue(numericValue == null ? ""String_Node_Str"" : numericValue.toString());
    tb.setEnabled(!isReadOnly);
    if (!isReadOnly) {
      tb.addValueChangeHandler(new ValueChangeHandler<String>(){
        public void onValueChange(        ValueChangeEvent<String> event){
          DTCellValue52 clonedDefaultValue=defaultValue.cloneDefaultValueCell();
          try {
            defaultValue.setNumericValue(new Long(event.getValue()));
          }
 catch (          NumberFormatException nfe) {
            defaultValue.setNumericValue(new Long(""String_Node_Str""));
            tb.setValue(""String_Node_Str"");
          }
 finally {
            defaultValueChangedEventHandler.onDefaultValueChanged(new DefaultValueChangedEvent(defaultValue,clonedDefaultValue));
          }
        }
      }
);
    }
    editor=tb;
  }
 else   if (attributeName.equals(RuleAttributeWidget.NO_LOOP_ATTR) || attributeName.equals(RuleAttributeWidget.LOCK_ON_ACTIVE_ATTR) || attributeName.equals(RuleAttributeWidget.AUTO_FOCUS_ATTR)|| attributeName.equals(RuleAttributeWidget.ENABLED_ATTR)|| attributeName.equals(GuidedDecisionTable52.NEGATE_RULE_ATTR)) {
    final CheckBox cb=new CheckBox();
    if (ac.getDefaultValue() == null) {
      ac.setDefaultValue(new DTCellValue52(Boolean.FALSE));
    }
 else {
      assertBooleanDefaultValue(ac.getDefaultValue());
    }
    final DTCellValue52 defaultValue=ac.getDefaultValue();
    final Boolean booleanValue=defaultValue.getBooleanValue();
    cb.setEnabled(!isReadOnly);
    if (booleanValue == null) {
      cb.setValue(false);
      defaultValue.setBooleanValue(Boolean.FALSE);
    }
 else {
      cb.setValue(booleanValue);
    }
    cb.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        DTCellValue52 clonedDefaultValue=defaultValue.cloneDefaultValueCell();
        defaultValue.setBooleanValue(cb.getValue());
        defaultValueChangedEventHandler.onDefaultValueChanged(new DefaultValueChangedEvent(defaultValue,clonedDefaultValue));
      }
    }
);
    editor=cb;
  }
 else   if (attributeName.equals(RuleAttributeWidget.DATE_EFFECTIVE_ATTR) || attributeName.equals(RuleAttributeWidget.DATE_EXPIRES_ATTR)) {
    if (ac.getDefaultValue() == null) {
      ac.setDefaultValue(new DTCellValue52(new Date()));
    }
 else {
      assertDateDefaultValue(ac.getDefaultValue());
    }
    final DTCellValue52 defaultValue=ac.getDefaultValue();
    if (isReadOnly) {
      final TextBox tb=TextBoxFactory.getTextBox(DataType.TYPE_STRING);
      tb.setValue(format.format(defaultValue.getDateValue()));
      tb.setEnabled(false);
    }
 else {
      final PopupDatePicker dp=new PopupDatePicker(false);
      final Date dateValue=defaultValue.getDateValue();
      dp.setValue(dateValue);
      dp.addValueChangeHandler(new ValueChangeHandler<Date>(){
        public void onValueChange(        ValueChangeEvent<Date> event){
          DTCellValue52 clonedDefaultValue=defaultValue.cloneDefaultValueCell();
          defaultValue.setDateValue(event.getValue());
          defaultValueChangedEventHandler.onDefaultValueChanged(new DefaultValueChangedEvent(defaultValue,clonedDefaultValue));
        }
      }
);
      editor=dp;
    }
  }
 else   if (attributeName.equals(RuleAttributeWidget.DIALECT_ATTR)) {
    final ListBox lb=new ListBox();
    lb.addItem(RuleAttributeWidget.DIALECTS[0]);
    lb.addItem(RuleAttributeWidget.DIALECTS[1]);
    if (ac.getDefaultValue() == null) {
      ac.setDefaultValue(new DTCellValue52(RuleAttributeWidget.DIALECTS[1]));
    }
    final DTCellValue52 defaultValue=ac.getDefaultValue();
    final String stringValue=defaultValue.getStringValue();
    lb.setEnabled(!isReadOnly);
    if (!isReadOnly) {
      lb.addChangeHandler(new ChangeHandler(){
        @Override public void onChange(        ChangeEvent event){
          final int selectedIndex=lb.getSelectedIndex();
          if (selectedIndex < 0) {
            return;
          }
          DTCellValue52 newValue=new DTCellValue52(lb.getValue(selectedIndex));
          ac.setDefaultValue(newValue);
          defaultValueChangedEventHandler.onDefaultValueChanged(new DefaultValueChangedEvent(newValue,defaultValue));
        }
      }
);
    }
    if (stringValue == null || stringValue.isEmpty()) {
      lb.setSelectedIndex(1);
      defaultValue.setStringValue(RuleAttributeWidget.DIALECTS[1]);
    }
 else     if (stringValue.equals(RuleAttributeWidget.DIALECTS[0])) {
      lb.setSelectedIndex(0);
    }
 else     if (stringValue.equals(RuleAttributeWidget.DIALECTS[1])) {
      lb.setSelectedIndex(1);
    }
 else {
      lb.setSelectedIndex(1);
      defaultValue.setStringValue(RuleAttributeWidget.DIALECTS[1]);
    }
    editor=lb;
  }
  return editor;
}","public static Widget getDefaultValueWidget(final AttributeCol52 ac,final boolean isReadOnly,final DefaultValueChangedEventHandler defaultValueChangedEventHandler){
  Widget editor=null;
  final String attributeName=ac.getAttribute();
  if (attributeName.equals(RuleAttributeWidget.RULEFLOW_GROUP_ATTR) || attributeName.equals(RuleAttributeWidget.AGENDA_GROUP_ATTR) || attributeName.equals(RuleAttributeWidget.ACTIVATION_GROUP_ATTR)|| attributeName.equals(RuleAttributeWidget.TIMER_ATTR)|| attributeName.equals(RuleAttributeWidget.CALENDARS_ATTR)) {
    final TextBox tb=TextBoxFactory.getTextBox(DataType.TYPE_STRING);
    if (ac.getDefaultValue() == null) {
      ac.setDefaultValue(new DTCellValue52(""String_Node_Str""));
    }
    final DTCellValue52 defaultValue=ac.getDefaultValue();
    tb.setValue(defaultValue.getStringValue());
    tb.setEnabled(!isReadOnly);
    if (!isReadOnly) {
      tb.addValueChangeHandler(new ValueChangeHandler<String>(){
        public void onValueChange(        ValueChangeEvent<String> event){
          DTCellValue52 clonedDefaultValue=defaultValue.cloneDefaultValueCell();
          defaultValue.setStringValue(tb.getValue());
          defaultValueChangedEventHandler.onDefaultValueChanged(new DefaultValueChangedEvent(defaultValue,clonedDefaultValue));
        }
      }
);
    }
    editor=tb;
  }
 else   if (attributeName.equals(RuleAttributeWidget.SALIENCE_ATTR)) {
    final TextBox tb=TextBoxFactory.getTextBox(DataType.TYPE_NUMERIC_INTEGER);
    if (ac.getDefaultValue() == null) {
      ac.setDefaultValue(new DTCellValue52(0));
    }
 else {
      assertIntegerDefaultValue(ac.getDefaultValue());
    }
    final DTCellValue52 defaultValue=ac.getDefaultValue();
    final Integer numericValue=(Integer)defaultValue.getNumericValue();
    tb.setValue(numericValue == null ? ""String_Node_Str"" : numericValue.toString());
    tb.setEnabled(!isReadOnly);
    if (!isReadOnly) {
      tb.addValueChangeHandler(new ValueChangeHandler<String>(){
        public void onValueChange(        ValueChangeEvent<String> event){
          DTCellValue52 clonedDefaultValue=defaultValue.cloneDefaultValueCell();
          try {
            defaultValue.setNumericValue(Integer.valueOf(event.getValue()));
          }
 catch (          NumberFormatException nfe) {
            defaultValue.setNumericValue(0);
            tb.setValue(""String_Node_Str"");
          }
 finally {
            defaultValueChangedEventHandler.onDefaultValueChanged(new DefaultValueChangedEvent(defaultValue,clonedDefaultValue));
          }
        }
      }
);
    }
    editor=tb;
  }
 else   if (attributeName.equals(RuleAttributeWidget.DURATION_ATTR)) {
    final TextBox tb=TextBoxFactory.getTextBox(DataType.TYPE_NUMERIC_LONG);
    if (ac.getDefaultValue() == null) {
      ac.setDefaultValue(new DTCellValue52(0L));
    }
 else {
      assertLongDefaultValue(ac.getDefaultValue());
    }
    final DTCellValue52 defaultValue=ac.getDefaultValue();
    final Long numericValue=(Long)defaultValue.getNumericValue();
    tb.setValue(numericValue == null ? ""String_Node_Str"" : numericValue.toString());
    tb.setEnabled(!isReadOnly);
    if (!isReadOnly) {
      tb.addValueChangeHandler(new ValueChangeHandler<String>(){
        public void onValueChange(        ValueChangeEvent<String> event){
          DTCellValue52 clonedDefaultValue=defaultValue.cloneDefaultValueCell();
          try {
            defaultValue.setNumericValue(Long.valueOf(event.getValue()));
          }
 catch (          NumberFormatException nfe) {
            defaultValue.setNumericValue(0L);
            tb.setValue(""String_Node_Str"");
          }
 finally {
            defaultValueChangedEventHandler.onDefaultValueChanged(new DefaultValueChangedEvent(defaultValue,clonedDefaultValue));
          }
        }
      }
);
    }
    editor=tb;
  }
 else   if (attributeName.equals(RuleAttributeWidget.NO_LOOP_ATTR) || attributeName.equals(RuleAttributeWidget.LOCK_ON_ACTIVE_ATTR) || attributeName.equals(RuleAttributeWidget.AUTO_FOCUS_ATTR)|| attributeName.equals(RuleAttributeWidget.ENABLED_ATTR)|| attributeName.equals(GuidedDecisionTable52.NEGATE_RULE_ATTR)) {
    final CheckBox cb=new CheckBox();
    if (ac.getDefaultValue() == null) {
      ac.setDefaultValue(new DTCellValue52(Boolean.FALSE));
    }
 else {
      assertBooleanDefaultValue(ac.getDefaultValue());
    }
    final DTCellValue52 defaultValue=ac.getDefaultValue();
    final Boolean booleanValue=defaultValue.getBooleanValue();
    cb.setEnabled(!isReadOnly);
    if (booleanValue == null) {
      cb.setValue(false);
      defaultValue.setBooleanValue(Boolean.FALSE);
    }
 else {
      cb.setValue(booleanValue);
    }
    cb.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        DTCellValue52 clonedDefaultValue=defaultValue.cloneDefaultValueCell();
        defaultValue.setBooleanValue(cb.getValue());
        defaultValueChangedEventHandler.onDefaultValueChanged(new DefaultValueChangedEvent(defaultValue,clonedDefaultValue));
      }
    }
);
    editor=cb;
  }
 else   if (attributeName.equals(RuleAttributeWidget.DATE_EFFECTIVE_ATTR) || attributeName.equals(RuleAttributeWidget.DATE_EXPIRES_ATTR)) {
    if (ac.getDefaultValue() == null) {
      ac.setDefaultValue(new DTCellValue52(new Date()));
    }
 else {
      assertDateDefaultValue(ac.getDefaultValue());
    }
    final DTCellValue52 defaultValue=ac.getDefaultValue();
    if (isReadOnly) {
      final TextBox tb=TextBoxFactory.getTextBox(DataType.TYPE_STRING);
      tb.setValue(format.format(defaultValue.getDateValue()));
      tb.setEnabled(false);
    }
 else {
      final PopupDatePicker dp=new PopupDatePicker(false);
      final Date dateValue=defaultValue.getDateValue();
      dp.setValue(dateValue);
      dp.addValueChangeHandler(new ValueChangeHandler<Date>(){
        public void onValueChange(        ValueChangeEvent<Date> event){
          DTCellValue52 clonedDefaultValue=defaultValue.cloneDefaultValueCell();
          defaultValue.setDateValue(event.getValue());
          defaultValueChangedEventHandler.onDefaultValueChanged(new DefaultValueChangedEvent(defaultValue,clonedDefaultValue));
        }
      }
);
      editor=dp;
    }
  }
 else   if (attributeName.equals(RuleAttributeWidget.DIALECT_ATTR)) {
    final ListBox lb=new ListBox();
    lb.addItem(RuleAttributeWidget.DIALECTS[0]);
    lb.addItem(RuleAttributeWidget.DIALECTS[1]);
    if (ac.getDefaultValue() == null) {
      ac.setDefaultValue(new DTCellValue52(RuleAttributeWidget.DIALECTS[1]));
    }
    final DTCellValue52 defaultValue=ac.getDefaultValue();
    final String stringValue=defaultValue.getStringValue();
    lb.setEnabled(!isReadOnly);
    if (!isReadOnly) {
      lb.addChangeHandler(new ChangeHandler(){
        @Override public void onChange(        ChangeEvent event){
          final int selectedIndex=lb.getSelectedIndex();
          if (selectedIndex < 0) {
            return;
          }
          DTCellValue52 newValue=new DTCellValue52(lb.getValue(selectedIndex));
          ac.setDefaultValue(newValue);
          defaultValueChangedEventHandler.onDefaultValueChanged(new DefaultValueChangedEvent(newValue,defaultValue));
        }
      }
);
    }
    if (stringValue == null || stringValue.isEmpty()) {
      lb.setSelectedIndex(1);
      defaultValue.setStringValue(RuleAttributeWidget.DIALECTS[1]);
    }
 else     if (stringValue.equals(RuleAttributeWidget.DIALECTS[0])) {
      lb.setSelectedIndex(0);
    }
 else     if (stringValue.equals(RuleAttributeWidget.DIALECTS[1])) {
      lb.setSelectedIndex(1);
    }
 else {
      lb.setSelectedIndex(1);
      defaultValue.setStringValue(RuleAttributeWidget.DIALECTS[1]);
    }
    editor=lb;
  }
  return editor;
}"
53214,"private boolean parseArgOutputVfsRepository(CommandLine commandLine,HelpFormatter formatter,Options options){
  outputRepoName=commandLine.getOptionValue(""String_Node_Str"",DEFAULT_MIGRATION_FILE_SYSTEM);
  outputVfsRepository=new File(commandLine.getOptionValue(""String_Node_Str"",""String_Node_Str""));
  forceOverwriteOutputVfsRepository=commandLine.hasOption(""String_Node_Str"");
  if (outputVfsRepository.exists()) {
    if (forceOverwriteOutputVfsRepository) {
      try {
        FileUtils.deleteDirectory(outputVfsRepository);
      }
 catch (      IOException e) {
        System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str""+ e);
        return false;
      }
    }
 else {
      System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str"");
      return false;
    }
  }
  try {
    outputVfsRepository=outputVfsRepository.getCanonicalFile();
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + outputVfsRepository + ""String_Node_Str""+ e);
    return false;
  }
  outputVfsRepository.mkdirs();
  return true;
}","private boolean parseArgOutputVfsRepository(CommandLine commandLine,HelpFormatter formatter,Options options){
  outputRepoName=commandLine.getOptionValue(""String_Node_Str"",DEFAULT_MIGRATION_FILE_SYSTEM);
  outputVfsRepository=new File(commandLine.getOptionValue(""String_Node_Str"",""String_Node_Str""));
  forceOverwriteOutputVfsRepository=commandLine.hasOption(""String_Node_Str"");
  if (outputVfsRepository.exists()) {
    if (forceOverwriteOutputVfsRepository) {
      try {
        FileUtils.deleteDirectory(outputVfsRepository);
      }
 catch (      IOException e) {
        System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str""+ e);
        return false;
      }
    }
 else {
      System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str"");
      return false;
    }
  }
  try {
    outputVfsRepository=outputVfsRepository.getCanonicalFile();
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + outputVfsRepository + ""String_Node_Str""+ e);
    return false;
  }
  try {
    FileUtils.forceMkdir(outputVfsRepository);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  return true;
}"
53215,"public void migrateAssetHistory(Module jcrModule,String assetUUID) throws SerializationException {
  String currentVersionAssetName=""String_Node_Str"";
  try {
    Path previousVersionPath=null;
    TableDataResult history=jcrRepositoryAssetService.loadItemHistory(assetUUID);
    TableDataRow[] rows=history.data;
    Arrays.sort(rows,new Comparator<TableDataRow>(){
      public int compare(      TableDataRow r1,      TableDataRow r2){
        Integer v2=Integer.valueOf(r2.values[0]);
        Integer v1=Integer.valueOf(r1.values[0]);
        return v1.compareTo(v2);
      }
    }
);
    for (    TableDataRow row : rows) {
      String versionSnapshotUUID=row.id;
      AssetItem historicalAssetJCR=rulesRepository.loadAssetByUUID(versionSnapshotUUID);
      currentVersionAssetName=historicalAssetJCR.getName();
      previousVersionPath=migrate(jcrModule,historicalAssetJCR,previousVersionPath);
      logger.debug(""String_Node_Str"",historicalAssetJCR.getName(),historicalAssetJCR.getFormat(),historicalAssetJCR.getVersionNumber(),historicalAssetJCR.getCheckinComment(),historicalAssetJCR.getLastModified().getTime());
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + currentVersionAssetName + ""String_Node_Str""+ jcrModule.getName());
  }
}","public void migrateAssetHistory(Module jcrModule,String assetUUID) throws SerializationException {
  String currentVersionAssetName=""String_Node_Str"";
  try {
    Path previousVersionPath=null;
    TableDataResult history=jcrRepositoryAssetService.loadItemHistory(assetUUID);
    TableDataRow[] rows=history.data;
    Arrays.sort(rows,new Comparator<TableDataRow>(){
      public int compare(      TableDataRow r1,      TableDataRow r2){
        Integer v2=Integer.valueOf(r2.values[0]);
        Integer v1=Integer.valueOf(r1.values[0]);
        return v1.compareTo(v2);
      }
    }
);
    for (    TableDataRow row : rows) {
      String versionSnapshotUUID=row.id;
      AssetItem historicalAssetJCR=rulesRepository.loadAssetByUUID(versionSnapshotUUID);
      currentVersionAssetName=historicalAssetJCR.getName();
      previousVersionPath=migrate(jcrModule,historicalAssetJCR,previousVersionPath);
      logger.debug(""String_Node_Str"",historicalAssetJCR.getName(),historicalAssetJCR.getFormat(),historicalAssetJCR.getVersionNumber(),historicalAssetJCR.getCheckinComment(),historicalAssetJCR.getLastModified().getTime());
    }
  }
 catch (  RuntimeException e) {
    System.out.println(""String_Node_Str"" + currentVersionAssetName + ""String_Node_Str""+ jcrModule.getName());
  }
}"
53216,"public void migrateAll(){
  System.out.println(""String_Node_Str"");
  Module[] jcrModules=jcrRepositoryModuleService.listModules();
  List<Module> modules=new ArrayList<Module>(Arrays.asList(jcrModules));
  Module globalModule=jcrRepositoryModuleService.loadGlobalModule();
  modules.add(globalModule);
  for (  Module jcrModule : modules) {
    for (ModuleIterator packageItems=rulesRepository.listModules(); packageItems.hasNext(); ) {
      ModuleItem packageItem=packageItems.next();
      if (packageItem.getUUID().equals(jcrModule.getUuid())) {
        jcrModule.setCatRules(packageItem.getCategoryRules());
        break;
      }
    }
  }
  for (  Module jcrModule : modules) {
    try {
      jcrModule.setName(migrationPathManager.normalizePackageName(jcrModule.getName()));
      List<String> formats=new ArrayList<String>();
      formats.add(""String_Node_Str"");
      AssetPageRequest request=new AssetPageRequest(jcrModule.getUuid(),formats,null,0,10);
      PageResponse<AssetPageRow> response=jcrRepositoryAssetService.findAssetPage(request);
      if (response.getTotalRowSize() > 0) {
        AssetPageRow row=response.getPageRowList().get(0);
        AssetItem assetItemJCR=rulesRepository.loadAssetByUUID(row.getUuid());
        header=assetItemJCR.getContent();
      }
    }
 catch (    SerializationException e) {
      Jcr2VfsMigrationApp.hasErrors=true;
      throw new IllegalStateException(e);
    }
    boolean hasMorePages=true;
    int startRowIndex=0;
    final int pageSize=100;
    PageResponse<AssetPageRow> response;
    while (hasMorePages) {
      AssetPageRequest request=new AssetPageRequest(jcrModule.getUuid(),null,null,startRowIndex,pageSize);
      String assetName=""String_Node_Str"";
      try {
        response=jcrRepositoryAssetService.findAssetPage(request);
        for (        AssetPageRow row : response.getPageRowList()) {
          AssetItem assetItemJCR=rulesRepository.loadAssetByUUID(row.getUuid());
          assetName=assetItemJCR.getName();
          System.out.format(""String_Node_Str"",assetItemJCR.getName(),assetItemJCR.getFormat());
          migrateAssetHistory(jcrModule,row.getUuid());
          migrate(jcrModule,assetItemJCR,null);
          System.out.format(""String_Node_Str"",assetItemJCR.getName(),assetItemJCR.getFormat());
        }
      }
 catch (      SerializationException e) {
        System.out.println(""String_Node_Str"" + assetName + ""String_Node_Str""+ jcrModule.getName());
        Jcr2VfsMigrationApp.hasErrors=true;
        throw new IllegalStateException(e);
      }
catch (      Exception e) {
        System.out.println(""String_Node_Str"" + assetName + ""String_Node_Str""+ jcrModule.getName());
        Jcr2VfsMigrationApp.hasErrors=true;
        throw new IllegalStateException(e);
      }
      if (response.isLastPage()) {
        hasMorePages=false;
      }
 else {
        startRowIndex+=pageSize;
      }
    }
    List<String> globals=GlobalParser.parseGlobals(header);
    if (globals.size() > 0) {
      globalMigrater.migrate(jcrModule,globals);
    }
  }
  System.out.println(""String_Node_Str"");
}","public void migrateAll(){
  System.out.println(""String_Node_Str"");
  Module[] jcrModules=jcrRepositoryModuleService.listModules();
  List<Module> modules=new ArrayList<Module>(Arrays.asList(jcrModules));
  Module globalModule=jcrRepositoryModuleService.loadGlobalModule();
  modules.add(globalModule);
  for (  Module jcrModule : modules) {
    for (ModuleIterator packageItems=rulesRepository.listModules(); packageItems.hasNext(); ) {
      ModuleItem packageItem=packageItems.next();
      if (packageItem.getUUID().equals(jcrModule.getUuid())) {
        jcrModule.setCatRules(packageItem.getCategoryRules());
        break;
      }
    }
  }
  for (  Module jcrModule : modules) {
    try {
      jcrModule.setName(migrationPathManager.normalizePackageName(jcrModule.getName()));
      List<String> formats=new ArrayList<String>();
      formats.add(""String_Node_Str"");
      AssetPageRequest request=new AssetPageRequest(jcrModule.getUuid(),formats,null,0,10);
      PageResponse<AssetPageRow> response=jcrRepositoryAssetService.findAssetPage(request);
      if (response.getTotalRowSize() > 0) {
        AssetPageRow row=response.getPageRowList().get(0);
        AssetItem assetItemJCR=rulesRepository.loadAssetByUUID(row.getUuid());
        header=assetItemJCR.getContent();
      }
    }
 catch (    SerializationException e) {
      Jcr2VfsMigrationApp.hasErrors=true;
      throw new IllegalStateException(e);
    }
    boolean hasMorePages=true;
    int startRowIndex=0;
    final int pageSize=100;
    PageResponse<AssetPageRow> response;
    while (hasMorePages) {
      AssetPageRequest request=new AssetPageRequest(jcrModule.getUuid(),null,null,startRowIndex,pageSize);
      String assetName=""String_Node_Str"";
      try {
        response=jcrRepositoryAssetService.findAssetPage(request);
        for (        AssetPageRow row : response.getPageRowList()) {
          AssetItem assetItemJCR=rulesRepository.loadAssetByUUID(row.getUuid());
          assetName=assetItemJCR.getName();
          System.out.format(""String_Node_Str"",assetItemJCR.getName(),assetItemJCR.getFormat());
          migrateAssetHistory(jcrModule,row.getUuid());
          migrate(jcrModule,assetItemJCR,null);
          System.out.format(""String_Node_Str"");
        }
      }
 catch (      SerializationException e) {
        System.out.println(""String_Node_Str"" + assetName + ""String_Node_Str""+ jcrModule.getName());
        Jcr2VfsMigrationApp.hasErrors=true;
        throw new IllegalStateException(e);
      }
catch (      Exception e) {
        System.out.println(""String_Node_Str"" + assetName + ""String_Node_Str""+ jcrModule.getName());
        Jcr2VfsMigrationApp.hasErrors=true;
        throw new IllegalStateException(e);
      }
      if (response.isLastPage()) {
        hasMorePages=false;
      }
 else {
        startRowIndex+=pageSize;
      }
    }
    List<String> globals=GlobalParser.parseGlobals(header);
    if (globals.size() > 0) {
      globalMigrater.migrate(jcrModule,globals);
    }
  }
  System.out.println(""String_Node_Str"");
}"
53217,"private void migrate(Module jcrModule){
  jcrModule.setName(migrationPathManager.normalizePackageName(jcrModule.getName()));
  String[] nameSplit=jcrModule.getName().split(""String_Node_Str"");
  String groupId=nameSplit[0];
  String artifactId=nameSplit[nameSplit.length - 1];
  for (int i=1; i < nameSplit.length - 1; i++) {
    groupId+=""String_Node_Str"" + nameSplit[i];
  }
  GAV gav=new GAV(groupId,artifactId,""String_Node_Str"");
  POM pom=new POM(gav);
  Path modulePath=migrationPathManager.generateRootPath();
  projectService.newProject(makeRepository(modulePath),jcrModule.getName(),pom,""String_Node_Str"");
}","private void migrate(Module jcrModule){
  jcrModule.setName(migrationPathManager.normalizePackageName(jcrModule.getName()));
  String[] nameSplit=jcrModule.getName().split(""String_Node_Str"");
  StringBuilder groupIdBuilder=new StringBuilder();
  groupIdBuilder.append(nameSplit[0]);
  for (int i=1; i < nameSplit.length - 1; i++) {
    groupIdBuilder.append(""String_Node_Str"");
    groupIdBuilder.append(nameSplit[i]);
  }
  String groupId=groupIdBuilder.toString();
  String artifactId=nameSplit[nameSplit.length - 1];
  GAV gav=new GAV(groupId,artifactId,""String_Node_Str"");
  POM pom=new POM(gav);
  Path modulePath=migrationPathManager.generateRootPath();
  projectService.newProject(makeRepository(modulePath),jcrModule.getName(),pom,""String_Node_Str"");
}"
53218,"public String assertPackageNameXML(final String xml,final Path resource){
  final Package pkg=projectService.resolvePackage(resource);
  String pkName=null;
  try {
    pkName=pkg.getPackageName();
    if (pkName != null && pkg.getPackageName().endsWith(URIUtil.decode(resource.getFileName()))) {
      pkName=pkg.getPackageName().substring(0,pkg.getPackageName().indexOf(URIUtil.decode(resource.getFileName())) - 1);
    }
  }
 catch (  Exception e) {
  }
  final String requiredPackageName=pkName;
  if (requiredPackageName == null || ""String_Node_Str"".equals(requiredPackageName)) {
    return xml;
  }
  DocumentBuilderFactory domfac=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder dombuilder=domfac.newDocumentBuilder();
    Document doc=dombuilder.parse(new ByteArrayInputStream(xml.getBytes()));
    if (doc.getElementsByTagName(""String_Node_Str"").getLength() != 0) {
      return xml;
    }
    Element root=doc.getDocumentElement();
    Element packageElement=doc.createElement(""String_Node_Str"");
    packageElement.appendChild(doc.createTextNode(requiredPackageName));
    root.appendChild(packageElement);
    TransformerFactory transfac=TransformerFactory.newInstance();
    Transformer trans=transfac.newTransformer();
    trans.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
    trans.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    trans.setOutputProperty(""String_Node_Str"",Integer.toString(2));
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource s=new DOMSource(root);
    trans.transform(s,result);
    String xmlString=sw.toString();
    if (xmlString != null)     xmlString=xmlString.substring(xmlString.indexOf(""String_Node_Str"") + 1);
    return xmlString;
  }
 catch (  TransformerConfigurationException e) {
    e.printStackTrace();
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  TransformerException e) {
    e.printStackTrace();
  }
  return xml;
}","public String assertPackageNameXML(final String xml,final Path resource){
  final Package pkg=projectService.resolvePackage(resource);
  String pkName=null;
  try {
    pkName=pkg.getPackageName();
    if (pkName != null && pkg.getPackageName().endsWith(URIUtil.decode(resource.getFileName()))) {
      pkName=pkg.getPackageName().substring(0,pkg.getPackageName().indexOf(URIUtil.decode(resource.getFileName())) - 1);
    }
  }
 catch (  Exception e) {
  }
  final String requiredPackageName=pkName;
  if (requiredPackageName == null || ""String_Node_Str"".equals(requiredPackageName)) {
    return xml;
  }
  DocumentBuilderFactory domfac=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder dombuilder=domfac.newDocumentBuilder();
    Document doc=dombuilder.parse(new ByteArrayInputStream(xml.getBytes(Charsets.UTF_8)));
    if (doc.getElementsByTagName(""String_Node_Str"").getLength() != 0) {
      return xml;
    }
    Element root=doc.getDocumentElement();
    Element packageElement=doc.createElement(""String_Node_Str"");
    packageElement.appendChild(doc.createTextNode(requiredPackageName));
    root.appendChild(packageElement);
    TransformerFactory transfac=TransformerFactory.newInstance();
    Transformer trans=transfac.newTransformer();
    trans.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
    trans.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    trans.setOutputProperty(""String_Node_Str"",Integer.toString(2));
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource s=new DOMSource(root);
    trans.transform(s,result);
    String xmlString=sw.toString();
    if (xmlString != null)     xmlString=xmlString.substring(xmlString.indexOf(""String_Node_Str"") + 1);
    return xmlString;
  }
 catch (  TransformerConfigurationException e) {
    e.printStackTrace();
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  TransformerException e) {
    e.printStackTrace();
  }
  return xml;
}"
53219,"public String assertPackageImportXML(final String xml,final Path resource){
  if (packageHeaderInfo.getHeader() == null) {
    return xml;
  }
  final Imports imports=ImportsParser.parseImports(packageHeaderInfo.getHeader());
  if (imports == null) {
    return xml;
  }
  DocumentBuilderFactory domfac=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder dombuilder=domfac.newDocumentBuilder();
    Document doc=dombuilder.parse(new ByteArrayInputStream(xml.getBytes()));
    if (doc.getElementsByTagName(""String_Node_Str"").getLength() != 0) {
      return xml;
    }
    Element root=doc.getDocumentElement();
    Element topImportsElement=doc.createElement(""String_Node_Str"");
    Element nestedImportsElement=doc.createElement(""String_Node_Str"");
    topImportsElement.appendChild(nestedImportsElement);
    for (    final Import i : imports.getImports()) {
      Element importElement=doc.createElement(Import.class.getCanonicalName());
      Element typeElement=doc.createElement(""String_Node_Str"");
      typeElement.appendChild(doc.createTextNode(i.getType()));
      importElement.appendChild(typeElement);
      nestedImportsElement.appendChild(importElement);
    }
    root.appendChild(topImportsElement);
    TransformerFactory transfac=TransformerFactory.newInstance();
    Transformer trans=transfac.newTransformer();
    trans.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
    trans.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    trans.setOutputProperty(""String_Node_Str"",Integer.toString(2));
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource s=new DOMSource(root);
    trans.transform(s,result);
    String xmlString=sw.toString();
    if (xmlString != null)     xmlString=xmlString.substring(xmlString.indexOf(""String_Node_Str"") + 1);
    return xmlString;
  }
 catch (  TransformerConfigurationException e) {
    e.printStackTrace();
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  TransformerException e) {
    e.printStackTrace();
  }
  return xml;
}","public String assertPackageImportXML(final String xml,final Path resource){
  if (packageHeaderInfo.getHeader() == null) {
    return xml;
  }
  final Imports imports=ImportsParser.parseImports(packageHeaderInfo.getHeader());
  if (imports == null) {
    return xml;
  }
  DocumentBuilderFactory domfac=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder dombuilder=domfac.newDocumentBuilder();
    Document doc=dombuilder.parse(new ByteArrayInputStream(xml.getBytes(Charsets.UTF_8)));
    if (doc.getElementsByTagName(""String_Node_Str"").getLength() != 0) {
      return xml;
    }
    Element root=doc.getDocumentElement();
    Element topImportsElement=doc.createElement(""String_Node_Str"");
    Element nestedImportsElement=doc.createElement(""String_Node_Str"");
    topImportsElement.appendChild(nestedImportsElement);
    for (    final Import i : imports.getImports()) {
      Element importElement=doc.createElement(Import.class.getCanonicalName());
      Element typeElement=doc.createElement(""String_Node_Str"");
      typeElement.appendChild(doc.createTextNode(i.getType()));
      importElement.appendChild(typeElement);
      nestedImportsElement.appendChild(importElement);
    }
    root.appendChild(topImportsElement);
    TransformerFactory transfac=TransformerFactory.newInstance();
    Transformer trans=transfac.newTransformer();
    trans.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
    trans.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    trans.setOutputProperty(""String_Node_Str"",Integer.toString(2));
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource s=new DOMSource(root);
    trans.transform(s,result);
    String xmlString=sw.toString();
    if (xmlString != null)     xmlString=xmlString.substring(xmlString.indexOf(""String_Node_Str"") + 1);
    return xmlString;
  }
 catch (  TransformerConfigurationException e) {
    e.printStackTrace();
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  TransformerException e) {
    e.printStackTrace();
  }
  return xml;
}"
53220,"/** 
 * Retrieves form jcrModule the categoryRules and deduce the rule to extend depending of the assetItem categories retrieve the rule name between ruleDelimiter
 * @param jcrModule module which has the category rule defined
 * @param jcrAssetItem asset with the categories, which can extend the rule
 * @param ruleDelimiter The delimiter used to contruct the return value
 * @return the rule to extend depending of the asset category and the category rules defined by package between ruleDelimiter
 */
public String getExtendedRuleFromCategoryRules(Module jcrModule,AssetItem jcrAssetItem,String ruleDelimiter){
  HashMap catRuleHashMap=new HashMap();
  String ruleName;
  if (jcrModule.getCatRules() != null && jcrModule.getCatRules().keySet() != null && jcrModule.getCatRules().keySet().size() > 0) {
    for (Iterator it=jcrModule.getCatRules().keySet().iterator(); it.hasNext(); ) {
      ruleName=(String)it.next();
      catRuleHashMap.put(jcrModule.getCatRules().get(ruleName),ruleName);
    }
  }
  List<org.drools.repository.CategoryItem> assetCategories=jcrAssetItem.getCategories();
  String extendCategories=""String_Node_Str"";
  int i=0;
  for (  CategoryItem categoryItem : assetCategories) {
    ruleName=(String)catRuleHashMap.get(categoryItem.getName());
    if (ruleName != null) {
      if (i != 0)       extendCategories+=""String_Node_Str"";
      extendCategories+=ruleDelimiter + ruleName + ruleDelimiter;
      i++;
    }
  }
  return extendCategories;
}","/** 
 * Retrieves form jcrModule the categoryRules and deduce the rule to extend depending of the assetItem categories retrieve the rule name between ruleDelimiter
 * @param jcrModule module which has the category rule defined
 * @param jcrAssetItem asset with the categories, which can extend the rule
 * @param ruleDelimiter The delimiter used to contruct the return value
 * @return the rule to extend depending of the asset category and the category rules defined by package between ruleDelimiter
 */
public String getExtendedRuleFromCategoryRules(Module jcrModule,AssetItem jcrAssetItem,String ruleDelimiter){
  HashMap catRuleHashMap=new HashMap();
  String ruleName;
  if (jcrModule.getCatRules() != null && jcrModule.getCatRules().keySet() != null && jcrModule.getCatRules().keySet().size() > 0) {
    for (Iterator it=jcrModule.getCatRules().keySet().iterator(); it.hasNext(); ) {
      ruleName=(String)it.next();
      catRuleHashMap.put(jcrModule.getCatRules().get(ruleName),ruleName);
    }
  }
  List<org.drools.repository.CategoryItem> assetCategories=jcrAssetItem.getCategories();
  StringBuilder extendCategoriesBuilder=new StringBuilder();
  int i=0;
  for (  CategoryItem categoryItem : assetCategories) {
    ruleName=(String)catRuleHashMap.get(categoryItem.getName());
    if (ruleName != null) {
      if (i != 0)       extendCategoriesBuilder.append(""String_Node_Str"");
      extendCategoriesBuilder.append(ruleDelimiter);
      extendCategoriesBuilder.append(ruleName);
      extendCategoriesBuilder.append(ruleDelimiter);
      i++;
    }
  }
  return extendCategoriesBuilder.toString();
}"
53221,"/** 
 * Constructs the extends expression, using the asset categories and the module categoryRules, and adds to the passed content. If passed content has an ""extend"" expression this function returns the same content with the extra extend added, If not, constructs another ""extend"" with the new rule and modify the content.
 * @param jcrModule module with the categoryRules
 * @param jcrAssetItem asset with the categories to decide the extend expression to add
 * @param content string to be completed with the necessary extend
 * @return the content passed with the extend expression if it's necessary.
 */
public String getExtendExpression(Module jcrModule,AssetItem jcrAssetItem,String content){
  String extendedRules=getExtendedRuleFromCategoryRules(jcrModule,jcrAssetItem,""String_Node_Str"");
  if (extendedRules != null && extendedRules.trim().length() > 0) {
    String[] contentSplit=content.split(""String_Node_Str"");
    String ruleName=contentSplit[0];
    if (ruleName.indexOf(""String_Node_Str"") == -1) {
      contentSplit[0]+=""String_Node_Str"" + extendedRules;
    }
 else {
      contentSplit[0]+=""String_Node_Str"" + extendedRules;
    }
    String str=""String_Node_Str"";
    for (    String s : contentSplit) {
      str+=s + ""String_Node_Str"";
    }
    return str;
  }
  return content;
}","/** 
 * Constructs the extends expression, using the asset categories and the module categoryRules, and adds to the passed content. If passed content has an ""extend"" expression this function returns the same content with the extra extend added, If not, constructs another ""extend"" with the new rule and modify the content.
 * @param jcrModule module with the categoryRules
 * @param jcrAssetItem asset with the categories to decide the extend expression to add
 * @param content string to be completed with the necessary extend
 * @return the content passed with the extend expression if it's necessary.
 */
public String getExtendExpression(Module jcrModule,AssetItem jcrAssetItem,String content){
  String extendedRules=getExtendedRuleFromCategoryRules(jcrModule,jcrAssetItem,""String_Node_Str"");
  if (extendedRules != null && extendedRules.trim().length() > 0) {
    String[] contentSplit=content.split(""String_Node_Str"");
    String ruleName=contentSplit[0];
    if (ruleName.indexOf(""String_Node_Str"") == -1) {
      contentSplit[0]+=""String_Node_Str"" + extendedRules;
    }
 else {
      contentSplit[0]+=""String_Node_Str"" + extendedRules;
    }
    StringBuilder contentWithExtendsBuilder=new StringBuilder();
    for (    String s : contentSplit) {
      contentWithExtendsBuilder.append(s);
      contentWithExtendsBuilder.append(""String_Node_Str"");
    }
    return contentWithExtendsBuilder.toString();
  }
  return content;
}"
53222,"private String getPackageName(Module jcrModule){
  String packageName=jcrModule.getName();
  int dotIndex=packageName.indexOf(""String_Node_Str"");
  return packageName;
}","private String getPackageName(Module jcrModule){
  String packageName=jcrModule.getName();
  return packageName;
}"
53223,"public Path migrate(Module jcrModule,AssetItem jcrAssetItem,Path previousVersionPath){
  if (!AssetFormats.DECISION_TABLE_GUIDED.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.uberfire.java.nio.file.Path nioPath=Paths.convert(path);
  if (previousVersionPath != null && !previousVersionPath.equals(path)) {
    ioService.move(Paths.convert(previousVersionPath),nioPath,StandardCopyOption.REPLACE_EXISTING);
  }
  String content=jcrAssetItem.getContent();
  content=content.replaceAll(""String_Node_Str"",""String_Node_Str"");
  GuidedDecisionTable52 model=GuidedDTXMLPersistence.getInstance().unmarshal(content);
  final Package pkg=projectService.resolvePackage(path);
  String pkName=pkg.getPackageName();
  try {
    if (pkName != null && pkg.getPackageName().endsWith(path.getFileName())) {
      pkName=pkg.getPackageName().substring(0,pkg.getPackageName().indexOf(path.getFileName()) - 1);
    }
  }
 catch (  Exception e) {
  }
  final String requiredPackageName=pkName;
  if (requiredPackageName != null || !""String_Node_Str"".equals(requiredPackageName)) {
    model.setPackageName(requiredPackageName);
  }
  model.setParentName(getExtendedRuleFromCategoryRules(jcrModule,jcrAssetItem,""String_Node_Str""));
  if (packageHeaderInfo.getHeader() != null) {
    final Imports imports=ImportsParser.parseImports(packageHeaderInfo.getHeader());
    if (imports != null) {
      model.setImports(imports);
    }
  }
  String sourceContent=GuidedDTXMLPersistence.getInstance().marshal(model);
  ioService.write(nioPath,sourceContent,migrateMetaData(jcrModule,jcrAssetItem),new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
  return path;
}","public Path migrate(Module jcrModule,AssetItem jcrAssetItem,Path previousVersionPath){
  if (!AssetFormats.DECISION_TABLE_GUIDED.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.uberfire.java.nio.file.Path nioPath=Paths.convert(path);
  if (previousVersionPath != null && !previousVersionPath.equals(path)) {
    ioService.move(Paths.convert(previousVersionPath),nioPath,StandardCopyOption.REPLACE_EXISTING);
  }
  String content=jcrAssetItem.getContent();
  content=content.replaceAll(""String_Node_Str"",""String_Node_Str"");
  GuidedDecisionTable52 model=GuidedDTXMLPersistence.getInstance().unmarshal(content);
  final Package pkg=projectService.resolvePackage(path);
  String pkName=pkg.getPackageName();
  try {
    if (pkName != null && pkg.getPackageName().endsWith(path.getFileName())) {
      pkName=pkg.getPackageName().substring(0,pkg.getPackageName().indexOf(path.getFileName()) - 1);
    }
  }
 catch (  Exception e) {
  }
  final String requiredPackageName=pkName;
  if (requiredPackageName != null && !""String_Node_Str"".equals(requiredPackageName)) {
    model.setPackageName(requiredPackageName);
  }
  model.setParentName(getExtendedRuleFromCategoryRules(jcrModule,jcrAssetItem,""String_Node_Str""));
  if (packageHeaderInfo.getHeader() != null) {
    final Imports imports=ImportsParser.parseImports(packageHeaderInfo.getHeader());
    if (imports != null) {
      model.setImports(imports);
    }
  }
  String sourceContent=GuidedDTXMLPersistence.getInstance().marshal(model);
  ioService.write(nioPath,sourceContent,migrateMetaData(jcrModule,jcrAssetItem),new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
  return path;
}"
53224,"private boolean parseArgOutputVfsRepository(CommandLine commandLine,HelpFormatter formatter,Options options){
  outputRepoName=commandLine.getOptionValue(""String_Node_Str"",DEFAULT_MIGRATION_FILE_SYSTEM);
  outputVfsRepository=new File(commandLine.getOptionValue(""String_Node_Str"",""String_Node_Str""));
  forceOverwriteOutputVfsRepository=commandLine.hasOption(""String_Node_Str"");
  if (outputVfsRepository.exists()) {
    if (forceOverwriteOutputVfsRepository) {
      try {
        FileUtils.deleteDirectory(outputVfsRepository);
      }
 catch (      IOException e) {
        System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str""+ e);
        return false;
      }
    }
 else {
      System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str"");
      return false;
    }
  }
  try {
    outputVfsRepository=outputVfsRepository.getCanonicalFile();
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + outputVfsRepository + ""String_Node_Str""+ e);
    return false;
  }
  outputVfsRepository.mkdirs();
  return true;
}","private boolean parseArgOutputVfsRepository(CommandLine commandLine,HelpFormatter formatter,Options options){
  outputRepoName=commandLine.getOptionValue(""String_Node_Str"",DEFAULT_MIGRATION_FILE_SYSTEM);
  outputVfsRepository=new File(commandLine.getOptionValue(""String_Node_Str"",""String_Node_Str""));
  forceOverwriteOutputVfsRepository=commandLine.hasOption(""String_Node_Str"");
  if (outputVfsRepository.exists()) {
    if (forceOverwriteOutputVfsRepository) {
      try {
        FileUtils.deleteDirectory(outputVfsRepository);
      }
 catch (      IOException e) {
        System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str""+ e);
        return false;
      }
    }
 else {
      System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str"");
      return false;
    }
  }
  try {
    outputVfsRepository=outputVfsRepository.getCanonicalFile();
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + outputVfsRepository + ""String_Node_Str""+ e);
    return false;
  }
  try {
    FileUtils.forceMkdir(outputVfsRepository);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  return true;
}"
53225,"public void migrateAssetHistory(Module jcrModule,String assetUUID) throws SerializationException {
  String currentVersionAssetName=""String_Node_Str"";
  try {
    Path previousVersionPath=null;
    TableDataResult history=jcrRepositoryAssetService.loadItemHistory(assetUUID);
    TableDataRow[] rows=history.data;
    Arrays.sort(rows,new Comparator<TableDataRow>(){
      public int compare(      TableDataRow r1,      TableDataRow r2){
        Integer v2=Integer.valueOf(r2.values[0]);
        Integer v1=Integer.valueOf(r1.values[0]);
        return v1.compareTo(v2);
      }
    }
);
    for (    TableDataRow row : rows) {
      String versionSnapshotUUID=row.id;
      AssetItem historicalAssetJCR=rulesRepository.loadAssetByUUID(versionSnapshotUUID);
      currentVersionAssetName=historicalAssetJCR.getName();
      previousVersionPath=migrate(jcrModule,historicalAssetJCR,previousVersionPath);
      logger.debug(""String_Node_Str"",historicalAssetJCR.getName(),historicalAssetJCR.getFormat(),historicalAssetJCR.getVersionNumber(),historicalAssetJCR.getCheckinComment(),historicalAssetJCR.getLastModified().getTime());
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + currentVersionAssetName + ""String_Node_Str""+ jcrModule.getName());
  }
}","public void migrateAssetHistory(Module jcrModule,String assetUUID) throws SerializationException {
  String currentVersionAssetName=""String_Node_Str"";
  try {
    Path previousVersionPath=null;
    TableDataResult history=jcrRepositoryAssetService.loadItemHistory(assetUUID);
    TableDataRow[] rows=history.data;
    Arrays.sort(rows,new Comparator<TableDataRow>(){
      public int compare(      TableDataRow r1,      TableDataRow r2){
        Integer v2=Integer.valueOf(r2.values[0]);
        Integer v1=Integer.valueOf(r1.values[0]);
        return v1.compareTo(v2);
      }
    }
);
    for (    TableDataRow row : rows) {
      String versionSnapshotUUID=row.id;
      AssetItem historicalAssetJCR=rulesRepository.loadAssetByUUID(versionSnapshotUUID);
      currentVersionAssetName=historicalAssetJCR.getName();
      previousVersionPath=migrate(jcrModule,historicalAssetJCR,previousVersionPath);
      logger.debug(""String_Node_Str"",historicalAssetJCR.getName(),historicalAssetJCR.getFormat(),historicalAssetJCR.getVersionNumber(),historicalAssetJCR.getCheckinComment(),historicalAssetJCR.getLastModified().getTime());
    }
  }
 catch (  RuntimeException e) {
    System.out.println(""String_Node_Str"" + currentVersionAssetName + ""String_Node_Str""+ jcrModule.getName());
  }
}"
53226,"public void migrateAll(){
  System.out.println(""String_Node_Str"");
  Module[] jcrModules=jcrRepositoryModuleService.listModules();
  List<Module> modules=new ArrayList<Module>(Arrays.asList(jcrModules));
  Module globalModule=jcrRepositoryModuleService.loadGlobalModule();
  modules.add(globalModule);
  for (  Module jcrModule : modules) {
    for (ModuleIterator packageItems=rulesRepository.listModules(); packageItems.hasNext(); ) {
      ModuleItem packageItem=packageItems.next();
      if (packageItem.getUUID().equals(jcrModule.getUuid())) {
        jcrModule.setCatRules(packageItem.getCategoryRules());
        break;
      }
    }
  }
  for (  Module jcrModule : modules) {
    try {
      jcrModule.setName(migrationPathManager.normalizePackageName(jcrModule.getName()));
      List<String> formats=new ArrayList<String>();
      formats.add(""String_Node_Str"");
      AssetPageRequest request=new AssetPageRequest(jcrModule.getUuid(),formats,null,0,10);
      PageResponse<AssetPageRow> response=jcrRepositoryAssetService.findAssetPage(request);
      if (response.getTotalRowSize() > 0) {
        AssetPageRow row=response.getPageRowList().get(0);
        AssetItem assetItemJCR=rulesRepository.loadAssetByUUID(row.getUuid());
        header=assetItemJCR.getContent();
      }
    }
 catch (    SerializationException e) {
      Jcr2VfsMigrationApp.hasErrors=true;
      throw new IllegalStateException(e);
    }
    boolean hasMorePages=true;
    int startRowIndex=0;
    final int pageSize=100;
    PageResponse<AssetPageRow> response;
    while (hasMorePages) {
      AssetPageRequest request=new AssetPageRequest(jcrModule.getUuid(),null,null,startRowIndex,pageSize);
      String assetName=""String_Node_Str"";
      try {
        response=jcrRepositoryAssetService.findAssetPage(request);
        for (        AssetPageRow row : response.getPageRowList()) {
          AssetItem assetItemJCR=rulesRepository.loadAssetByUUID(row.getUuid());
          assetName=assetItemJCR.getName();
          System.out.format(""String_Node_Str"",assetItemJCR.getName(),assetItemJCR.getFormat());
          migrateAssetHistory(jcrModule,row.getUuid());
          migrate(jcrModule,assetItemJCR,null);
          System.out.format(""String_Node_Str"",assetItemJCR.getName(),assetItemJCR.getFormat());
        }
      }
 catch (      SerializationException e) {
        System.out.println(""String_Node_Str"" + assetName + ""String_Node_Str""+ jcrModule.getName());
        Jcr2VfsMigrationApp.hasErrors=true;
        throw new IllegalStateException(e);
      }
catch (      Exception e) {
        System.out.println(""String_Node_Str"" + assetName + ""String_Node_Str""+ jcrModule.getName());
        Jcr2VfsMigrationApp.hasErrors=true;
        throw new IllegalStateException(e);
      }
      if (response.isLastPage()) {
        hasMorePages=false;
      }
 else {
        startRowIndex+=pageSize;
      }
    }
    List<String> globals=GlobalParser.parseGlobals(header);
    if (globals.size() > 0) {
      globalMigrater.migrate(jcrModule,globals);
    }
  }
  System.out.println(""String_Node_Str"");
}","public void migrateAll(){
  System.out.println(""String_Node_Str"");
  Module[] jcrModules=jcrRepositoryModuleService.listModules();
  List<Module> modules=new ArrayList<Module>(Arrays.asList(jcrModules));
  Module globalModule=jcrRepositoryModuleService.loadGlobalModule();
  modules.add(globalModule);
  for (  Module jcrModule : modules) {
    for (ModuleIterator packageItems=rulesRepository.listModules(); packageItems.hasNext(); ) {
      ModuleItem packageItem=packageItems.next();
      if (packageItem.getUUID().equals(jcrModule.getUuid())) {
        jcrModule.setCatRules(packageItem.getCategoryRules());
        break;
      }
    }
  }
  for (  Module jcrModule : modules) {
    try {
      jcrModule.setName(migrationPathManager.normalizePackageName(jcrModule.getName()));
      List<String> formats=new ArrayList<String>();
      formats.add(""String_Node_Str"");
      AssetPageRequest request=new AssetPageRequest(jcrModule.getUuid(),formats,null,0,10);
      PageResponse<AssetPageRow> response=jcrRepositoryAssetService.findAssetPage(request);
      if (response.getTotalRowSize() > 0) {
        AssetPageRow row=response.getPageRowList().get(0);
        AssetItem assetItemJCR=rulesRepository.loadAssetByUUID(row.getUuid());
        header=assetItemJCR.getContent();
      }
    }
 catch (    SerializationException e) {
      Jcr2VfsMigrationApp.hasErrors=true;
      throw new IllegalStateException(e);
    }
    boolean hasMorePages=true;
    int startRowIndex=0;
    final int pageSize=100;
    PageResponse<AssetPageRow> response;
    while (hasMorePages) {
      AssetPageRequest request=new AssetPageRequest(jcrModule.getUuid(),null,null,startRowIndex,pageSize);
      String assetName=""String_Node_Str"";
      try {
        response=jcrRepositoryAssetService.findAssetPage(request);
        for (        AssetPageRow row : response.getPageRowList()) {
          AssetItem assetItemJCR=rulesRepository.loadAssetByUUID(row.getUuid());
          assetName=assetItemJCR.getName();
          System.out.format(""String_Node_Str"",assetItemJCR.getName(),assetItemJCR.getFormat());
          migrateAssetHistory(jcrModule,row.getUuid());
          migrate(jcrModule,assetItemJCR,null);
          System.out.format(""String_Node_Str"");
        }
      }
 catch (      SerializationException e) {
        System.out.println(""String_Node_Str"" + assetName + ""String_Node_Str""+ jcrModule.getName());
        Jcr2VfsMigrationApp.hasErrors=true;
        throw new IllegalStateException(e);
      }
catch (      Exception e) {
        System.out.println(""String_Node_Str"" + assetName + ""String_Node_Str""+ jcrModule.getName());
        Jcr2VfsMigrationApp.hasErrors=true;
        throw new IllegalStateException(e);
      }
      if (response.isLastPage()) {
        hasMorePages=false;
      }
 else {
        startRowIndex+=pageSize;
      }
    }
    List<String> globals=GlobalParser.parseGlobals(header);
    if (globals.size() > 0) {
      globalMigrater.migrate(jcrModule,globals);
    }
  }
  System.out.println(""String_Node_Str"");
}"
53227,"private void migrate(Module jcrModule){
  jcrModule.setName(migrationPathManager.normalizePackageName(jcrModule.getName()));
  String[] nameSplit=jcrModule.getName().split(""String_Node_Str"");
  String groupId=nameSplit[0];
  String artifactId=nameSplit[nameSplit.length - 1];
  for (int i=1; i < nameSplit.length - 1; i++) {
    groupId+=""String_Node_Str"" + nameSplit[i];
  }
  GAV gav=new GAV(groupId,artifactId,""String_Node_Str"");
  POM pom=new POM(gav);
  Path modulePath=migrationPathManager.generateRootPath();
  projectService.newProject(makeRepository(modulePath),jcrModule.getName(),pom,""String_Node_Str"");
}","private void migrate(Module jcrModule){
  jcrModule.setName(migrationPathManager.normalizePackageName(jcrModule.getName()));
  String[] nameSplit=jcrModule.getName().split(""String_Node_Str"");
  StringBuilder groupIdBuilder=new StringBuilder();
  groupIdBuilder.append(nameSplit[0]);
  for (int i=1; i < nameSplit.length - 1; i++) {
    groupIdBuilder.append(""String_Node_Str"");
    groupIdBuilder.append(nameSplit[i]);
  }
  String groupId=groupIdBuilder.toString();
  String artifactId=nameSplit[nameSplit.length - 1];
  GAV gav=new GAV(groupId,artifactId,""String_Node_Str"");
  POM pom=new POM(gav);
  Path modulePath=migrationPathManager.generateRootPath();
  projectService.newProject(makeRepository(modulePath),jcrModule.getName(),pom,""String_Node_Str"");
}"
53228,"public String assertPackageNameXML(final String xml,final Path resource){
  final Package pkg=projectService.resolvePackage(resource);
  String pkName=null;
  try {
    pkName=pkg.getPackageName();
    if (pkName != null && pkg.getPackageName().endsWith(URIUtil.decode(resource.getFileName()))) {
      pkName=pkg.getPackageName().substring(0,pkg.getPackageName().indexOf(URIUtil.decode(resource.getFileName())) - 1);
    }
  }
 catch (  Exception e) {
  }
  final String requiredPackageName=pkName;
  if (requiredPackageName == null || ""String_Node_Str"".equals(requiredPackageName)) {
    return xml;
  }
  DocumentBuilderFactory domfac=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder dombuilder=domfac.newDocumentBuilder();
    Document doc=dombuilder.parse(new ByteArrayInputStream(xml.getBytes()));
    if (doc.getElementsByTagName(""String_Node_Str"").getLength() != 0) {
      return xml;
    }
    Element root=doc.getDocumentElement();
    Element packageElement=doc.createElement(""String_Node_Str"");
    packageElement.appendChild(doc.createTextNode(requiredPackageName));
    root.appendChild(packageElement);
    TransformerFactory transfac=TransformerFactory.newInstance();
    Transformer trans=transfac.newTransformer();
    trans.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
    trans.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    trans.setOutputProperty(""String_Node_Str"",Integer.toString(2));
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource s=new DOMSource(root);
    trans.transform(s,result);
    String xmlString=sw.toString();
    if (xmlString != null)     xmlString=xmlString.substring(xmlString.indexOf(""String_Node_Str"") + 1);
    return xmlString;
  }
 catch (  TransformerConfigurationException e) {
    e.printStackTrace();
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  TransformerException e) {
    e.printStackTrace();
  }
  return xml;
}","public String assertPackageNameXML(final String xml,final Path resource){
  final Package pkg=projectService.resolvePackage(resource);
  String pkName=null;
  try {
    pkName=pkg.getPackageName();
    if (pkName != null && pkg.getPackageName().endsWith(URIUtil.decode(resource.getFileName()))) {
      pkName=pkg.getPackageName().substring(0,pkg.getPackageName().indexOf(URIUtil.decode(resource.getFileName())) - 1);
    }
  }
 catch (  Exception e) {
  }
  final String requiredPackageName=pkName;
  if (requiredPackageName == null || ""String_Node_Str"".equals(requiredPackageName)) {
    return xml;
  }
  DocumentBuilderFactory domfac=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder dombuilder=domfac.newDocumentBuilder();
    Document doc=dombuilder.parse(new ByteArrayInputStream(xml.getBytes(Charsets.UTF_8)));
    if (doc.getElementsByTagName(""String_Node_Str"").getLength() != 0) {
      return xml;
    }
    Element root=doc.getDocumentElement();
    Element packageElement=doc.createElement(""String_Node_Str"");
    packageElement.appendChild(doc.createTextNode(requiredPackageName));
    root.appendChild(packageElement);
    TransformerFactory transfac=TransformerFactory.newInstance();
    Transformer trans=transfac.newTransformer();
    trans.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
    trans.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    trans.setOutputProperty(""String_Node_Str"",Integer.toString(2));
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource s=new DOMSource(root);
    trans.transform(s,result);
    String xmlString=sw.toString();
    if (xmlString != null)     xmlString=xmlString.substring(xmlString.indexOf(""String_Node_Str"") + 1);
    return xmlString;
  }
 catch (  TransformerConfigurationException e) {
    e.printStackTrace();
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  TransformerException e) {
    e.printStackTrace();
  }
  return xml;
}"
53229,"public String assertPackageImportXML(final String xml,final Path resource){
  if (packageHeaderInfo.getHeader() == null) {
    return xml;
  }
  final Imports imports=ImportsParser.parseImports(packageHeaderInfo.getHeader());
  if (imports == null) {
    return xml;
  }
  DocumentBuilderFactory domfac=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder dombuilder=domfac.newDocumentBuilder();
    Document doc=dombuilder.parse(new ByteArrayInputStream(xml.getBytes()));
    if (doc.getElementsByTagName(""String_Node_Str"").getLength() != 0) {
      return xml;
    }
    Element root=doc.getDocumentElement();
    Element topImportsElement=doc.createElement(""String_Node_Str"");
    Element nestedImportsElement=doc.createElement(""String_Node_Str"");
    topImportsElement.appendChild(nestedImportsElement);
    for (    final Import i : imports.getImports()) {
      Element importElement=doc.createElement(Import.class.getCanonicalName());
      Element typeElement=doc.createElement(""String_Node_Str"");
      typeElement.appendChild(doc.createTextNode(i.getType()));
      importElement.appendChild(typeElement);
      nestedImportsElement.appendChild(importElement);
    }
    root.appendChild(topImportsElement);
    TransformerFactory transfac=TransformerFactory.newInstance();
    Transformer trans=transfac.newTransformer();
    trans.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
    trans.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    trans.setOutputProperty(""String_Node_Str"",Integer.toString(2));
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource s=new DOMSource(root);
    trans.transform(s,result);
    String xmlString=sw.toString();
    if (xmlString != null)     xmlString=xmlString.substring(xmlString.indexOf(""String_Node_Str"") + 1);
    return xmlString;
  }
 catch (  TransformerConfigurationException e) {
    e.printStackTrace();
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  TransformerException e) {
    e.printStackTrace();
  }
  return xml;
}","public String assertPackageImportXML(final String xml,final Path resource){
  if (packageHeaderInfo.getHeader() == null) {
    return xml;
  }
  final Imports imports=ImportsParser.parseImports(packageHeaderInfo.getHeader());
  if (imports == null) {
    return xml;
  }
  DocumentBuilderFactory domfac=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder dombuilder=domfac.newDocumentBuilder();
    Document doc=dombuilder.parse(new ByteArrayInputStream(xml.getBytes(Charsets.UTF_8)));
    if (doc.getElementsByTagName(""String_Node_Str"").getLength() != 0) {
      return xml;
    }
    Element root=doc.getDocumentElement();
    Element topImportsElement=doc.createElement(""String_Node_Str"");
    Element nestedImportsElement=doc.createElement(""String_Node_Str"");
    topImportsElement.appendChild(nestedImportsElement);
    for (    final Import i : imports.getImports()) {
      Element importElement=doc.createElement(Import.class.getCanonicalName());
      Element typeElement=doc.createElement(""String_Node_Str"");
      typeElement.appendChild(doc.createTextNode(i.getType()));
      importElement.appendChild(typeElement);
      nestedImportsElement.appendChild(importElement);
    }
    root.appendChild(topImportsElement);
    TransformerFactory transfac=TransformerFactory.newInstance();
    Transformer trans=transfac.newTransformer();
    trans.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
    trans.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    trans.setOutputProperty(""String_Node_Str"",Integer.toString(2));
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource s=new DOMSource(root);
    trans.transform(s,result);
    String xmlString=sw.toString();
    if (xmlString != null)     xmlString=xmlString.substring(xmlString.indexOf(""String_Node_Str"") + 1);
    return xmlString;
  }
 catch (  TransformerConfigurationException e) {
    e.printStackTrace();
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  TransformerException e) {
    e.printStackTrace();
  }
  return xml;
}"
53230,"/** 
 * Retrieves form jcrModule the categoryRules and deduce the rule to extend depending of the assetItem categories retrieve the rule name between ruleDelimiter
 * @param jcrModule module which has the category rule defined
 * @param jcrAssetItem asset with the categories, which can extend the rule
 * @param ruleDelimiter The delimiter used to contruct the return value
 * @return the rule to extend depending of the asset category and the category rules defined by package between ruleDelimiter
 */
public String getExtendedRuleFromCategoryRules(Module jcrModule,AssetItem jcrAssetItem,String ruleDelimiter){
  HashMap catRuleHashMap=new HashMap();
  String ruleName;
  if (jcrModule.getCatRules() != null && jcrModule.getCatRules().keySet() != null && jcrModule.getCatRules().keySet().size() > 0) {
    for (Iterator it=jcrModule.getCatRules().keySet().iterator(); it.hasNext(); ) {
      ruleName=(String)it.next();
      catRuleHashMap.put(jcrModule.getCatRules().get(ruleName),ruleName);
    }
  }
  List<org.drools.repository.CategoryItem> assetCategories=jcrAssetItem.getCategories();
  String extendCategories=""String_Node_Str"";
  int i=0;
  for (  CategoryItem categoryItem : assetCategories) {
    ruleName=(String)catRuleHashMap.get(categoryItem.getName());
    if (ruleName != null) {
      if (i != 0)       extendCategories+=""String_Node_Str"";
      extendCategories+=ruleDelimiter + ruleName + ruleDelimiter;
      i++;
    }
  }
  return extendCategories;
}","/** 
 * Retrieves form jcrModule the categoryRules and deduce the rule to extend depending of the assetItem categories retrieve the rule name between ruleDelimiter
 * @param jcrModule module which has the category rule defined
 * @param jcrAssetItem asset with the categories, which can extend the rule
 * @param ruleDelimiter The delimiter used to contruct the return value
 * @return the rule to extend depending of the asset category and the category rules defined by package between ruleDelimiter
 */
public String getExtendedRuleFromCategoryRules(Module jcrModule,AssetItem jcrAssetItem,String ruleDelimiter){
  HashMap catRuleHashMap=new HashMap();
  String ruleName;
  if (jcrModule.getCatRules() != null && jcrModule.getCatRules().keySet() != null && jcrModule.getCatRules().keySet().size() > 0) {
    for (Iterator it=jcrModule.getCatRules().keySet().iterator(); it.hasNext(); ) {
      ruleName=(String)it.next();
      catRuleHashMap.put(jcrModule.getCatRules().get(ruleName),ruleName);
    }
  }
  List<org.drools.repository.CategoryItem> assetCategories=jcrAssetItem.getCategories();
  StringBuilder extendCategoriesBuilder=new StringBuilder();
  int i=0;
  for (  CategoryItem categoryItem : assetCategories) {
    ruleName=(String)catRuleHashMap.get(categoryItem.getName());
    if (ruleName != null) {
      if (i != 0)       extendCategoriesBuilder.append(""String_Node_Str"");
      extendCategoriesBuilder.append(ruleDelimiter);
      extendCategoriesBuilder.append(ruleName);
      extendCategoriesBuilder.append(ruleDelimiter);
      i++;
    }
  }
  return extendCategoriesBuilder.toString();
}"
53231,"/** 
 * Constructs the extends expression, using the asset categories and the module categoryRules, and adds to the passed content. If passed content has an ""extend"" expression this function returns the same content with the extra extend added, If not, constructs another ""extend"" with the new rule and modify the content.
 * @param jcrModule module with the categoryRules
 * @param jcrAssetItem asset with the categories to decide the extend expression to add
 * @param content string to be completed with the necessary extend
 * @return the content passed with the extend expression if it's necessary.
 */
public String getExtendExpression(Module jcrModule,AssetItem jcrAssetItem,String content){
  String extendedRules=getExtendedRuleFromCategoryRules(jcrModule,jcrAssetItem,""String_Node_Str"");
  if (extendedRules != null && extendedRules.trim().length() > 0) {
    String[] contentSplit=content.split(""String_Node_Str"");
    String ruleName=contentSplit[0];
    if (ruleName.indexOf(""String_Node_Str"") == -1) {
      contentSplit[0]+=""String_Node_Str"" + extendedRules;
    }
 else {
      contentSplit[0]+=""String_Node_Str"" + extendedRules;
    }
    String str=""String_Node_Str"";
    for (    String s : contentSplit) {
      str+=s + ""String_Node_Str"";
    }
    return str;
  }
  return content;
}","/** 
 * Constructs the extends expression, using the asset categories and the module categoryRules, and adds to the passed content. If passed content has an ""extend"" expression this function returns the same content with the extra extend added, If not, constructs another ""extend"" with the new rule and modify the content.
 * @param jcrModule module with the categoryRules
 * @param jcrAssetItem asset with the categories to decide the extend expression to add
 * @param content string to be completed with the necessary extend
 * @return the content passed with the extend expression if it's necessary.
 */
public String getExtendExpression(Module jcrModule,AssetItem jcrAssetItem,String content){
  String extendedRules=getExtendedRuleFromCategoryRules(jcrModule,jcrAssetItem,""String_Node_Str"");
  if (extendedRules != null && extendedRules.trim().length() > 0) {
    String[] contentSplit=content.split(""String_Node_Str"");
    String ruleName=contentSplit[0];
    if (ruleName.indexOf(""String_Node_Str"") == -1) {
      contentSplit[0]+=""String_Node_Str"" + extendedRules;
    }
 else {
      contentSplit[0]+=""String_Node_Str"" + extendedRules;
    }
    StringBuilder contentWithExtendsBuilder=new StringBuilder();
    for (    String s : contentSplit) {
      contentWithExtendsBuilder.append(s);
      contentWithExtendsBuilder.append(""String_Node_Str"");
    }
    return contentWithExtendsBuilder.toString();
  }
  return content;
}"
53232,"private String getPackageName(Module jcrModule){
  String packageName=jcrModule.getName();
  int dotIndex=packageName.indexOf(""String_Node_Str"");
  return packageName;
}","private String getPackageName(Module jcrModule){
  String packageName=jcrModule.getName();
  return packageName;
}"
53233,"public Path migrate(Module jcrModule,AssetItem jcrAssetItem,Path previousVersionPath){
  if (!AssetFormats.DECISION_TABLE_GUIDED.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.uberfire.java.nio.file.Path nioPath=Paths.convert(path);
  if (previousVersionPath != null && !previousVersionPath.equals(path)) {
    ioService.move(Paths.convert(previousVersionPath),nioPath,StandardCopyOption.REPLACE_EXISTING);
  }
  String content=jcrAssetItem.getContent();
  content=content.replaceAll(""String_Node_Str"",""String_Node_Str"");
  GuidedDecisionTable52 model=GuidedDTXMLPersistence.getInstance().unmarshal(content);
  final Package pkg=projectService.resolvePackage(path);
  String pkName=pkg.getPackageName();
  try {
    if (pkName != null && pkg.getPackageName().endsWith(path.getFileName())) {
      pkName=pkg.getPackageName().substring(0,pkg.getPackageName().indexOf(path.getFileName()) - 1);
    }
  }
 catch (  Exception e) {
  }
  final String requiredPackageName=pkName;
  if (requiredPackageName != null || !""String_Node_Str"".equals(requiredPackageName)) {
    model.setPackageName(requiredPackageName);
  }
  model.setParentName(getExtendedRuleFromCategoryRules(jcrModule,jcrAssetItem,""String_Node_Str""));
  if (packageHeaderInfo.getHeader() != null) {
    final Imports imports=ImportsParser.parseImports(packageHeaderInfo.getHeader());
    if (imports != null) {
      model.setImports(imports);
    }
  }
  String sourceContent=GuidedDTXMLPersistence.getInstance().marshal(model);
  ioService.write(nioPath,sourceContent,migrateMetaData(jcrModule,jcrAssetItem),new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
  return path;
}","public Path migrate(Module jcrModule,AssetItem jcrAssetItem,Path previousVersionPath){
  if (!AssetFormats.DECISION_TABLE_GUIDED.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.uberfire.java.nio.file.Path nioPath=Paths.convert(path);
  if (previousVersionPath != null && !previousVersionPath.equals(path)) {
    ioService.move(Paths.convert(previousVersionPath),nioPath,StandardCopyOption.REPLACE_EXISTING);
  }
  String content=jcrAssetItem.getContent();
  content=content.replaceAll(""String_Node_Str"",""String_Node_Str"");
  GuidedDecisionTable52 model=GuidedDTXMLPersistence.getInstance().unmarshal(content);
  final Package pkg=projectService.resolvePackage(path);
  String pkName=pkg.getPackageName();
  try {
    if (pkName != null && pkg.getPackageName().endsWith(path.getFileName())) {
      pkName=pkg.getPackageName().substring(0,pkg.getPackageName().indexOf(path.getFileName()) - 1);
    }
  }
 catch (  Exception e) {
  }
  final String requiredPackageName=pkName;
  if (requiredPackageName != null && !""String_Node_Str"".equals(requiredPackageName)) {
    model.setPackageName(requiredPackageName);
  }
  model.setParentName(getExtendedRuleFromCategoryRules(jcrModule,jcrAssetItem,""String_Node_Str""));
  if (packageHeaderInfo.getHeader() != null) {
    final Imports imports=ImportsParser.parseImports(packageHeaderInfo.getHeader());
    if (imports != null) {
      model.setImports(imports);
    }
  }
  String sourceContent=GuidedDTXMLPersistence.getInstance().marshal(model);
  ioService.write(nioPath,sourceContent,migrateMetaData(jcrModule,jcrAssetItem),new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
  return path;
}"
53234,"public void createOrCloneRepository(String jobId,Repository repository){
  System.out.println(""String_Node_Str"" + repository.getName());
  JobResult result=new JobResult();
  result.setJodId(jobId);
  if (repository.getRequestType() == null || ""String_Node_Str"".equals(repository.getRequestType()) || !(""String_Node_Str"".equals(repository.getRequestType()) || (""String_Node_Str"".equals(repository.getRequestType())))) {
    result.setStatus(JobRequest.Status.BAD_REQUEST);
    result.setResult(""String_Node_Str"");
    jobResultEvent.fire(result);
    return;
  }
  final String scheme=""String_Node_Str"";
  if (""String_Node_Str"".equals(repository.getRequestType())) {
    if (repository.getName() == null || ""String_Node_Str"".equals(repository.getName())) {
      result.setStatus(JobRequest.Status.BAD_REQUEST);
      result.setResult(""String_Node_Str"");
      jobResultEvent.fire(result);
      return;
    }
    final Map<String,Object> env=new HashMap<String,Object>(3);
    env.put(""String_Node_Str"",repository.getUserName());
    env.put(""String_Node_Str"",repository.getPassword());
    env.put(""String_Node_Str"",true);
    repositoryService.createRepository(scheme,repository.getName(),env);
  }
 else   if (""String_Node_Str"".equals(repository.getRequestType())) {
    if (repository.getName() == null || ""String_Node_Str"".equals(repository.getName()) || repository.getGitURL() == null || ""String_Node_Str"".equals(repository.getGitURL())) {
      result.setStatus(JobRequest.Status.BAD_REQUEST);
      result.setResult(""String_Node_Str"");
    }
    final Map<String,Object> env=new HashMap<String,Object>(3);
    env.put(""String_Node_Str"",repository.getUserName());
    env.put(""String_Node_Str"",repository.getPassword());
    env.put(""String_Node_Str"",repository.getGitURL());
    repositoryService.createRepository(scheme,repository.getName(),env);
  }
  result.setStatus(JobRequest.Status.SUCCESS);
  jobResultEvent.fire(result);
}","public void createOrCloneRepository(String jobId,Repository repository){
  System.out.println(""String_Node_Str"" + repository.getName());
  JobResult result=new JobResult();
  result.setJodId(jobId);
  if (repository.getRequestType() == null || ""String_Node_Str"".equals(repository.getRequestType()) || !(""String_Node_Str"".equals(repository.getRequestType()) || (""String_Node_Str"".equals(repository.getRequestType())))) {
    result.setStatus(JobRequest.Status.BAD_REQUEST);
    result.setResult(""String_Node_Str"");
    jobResultEvent.fire(result);
    return;
  }
  final String scheme=""String_Node_Str"";
  if (""String_Node_Str"".equals(repository.getRequestType())) {
    if (repository.getName() == null || ""String_Node_Str"".equals(repository.getName())) {
      result.setStatus(JobRequest.Status.BAD_REQUEST);
      result.setResult(""String_Node_Str"");
      jobResultEvent.fire(result);
      return;
    }
    final Map<String,Object> env=new HashMap<String,Object>(3);
    if (repository.getUserName() != null && !""String_Node_Str"".equals(repository.getUserName())) {
      env.put(""String_Node_Str"",repository.getUserName());
    }
    if (repository.getPassword() != null && !""String_Node_Str"".equals(repository.getPassword())) {
      env.put(""String_Node_Str"",repository.getPassword());
    }
    env.put(""String_Node_Str"",true);
    repositoryService.createRepository(scheme,repository.getName(),env);
  }
 else   if (""String_Node_Str"".equals(repository.getRequestType())) {
    if (repository.getName() == null || ""String_Node_Str"".equals(repository.getName()) || repository.getGitURL() == null || ""String_Node_Str"".equals(repository.getGitURL())) {
      result.setStatus(JobRequest.Status.BAD_REQUEST);
      result.setResult(""String_Node_Str"");
    }
    final Map<String,Object> env=new HashMap<String,Object>(3);
    if (repository.getUserName() != null && !""String_Node_Str"".equals(repository.getUserName())) {
      env.put(""String_Node_Str"",repository.getUserName());
    }
    if (repository.getPassword() != null && !""String_Node_Str"".equals(repository.getPassword())) {
      env.put(""String_Node_Str"",repository.getPassword());
    }
    env.put(""String_Node_Str"",repository.getGitURL());
    repositoryService.createRepository(scheme,repository.getName(),env);
  }
  result.setStatus(JobRequest.Status.SUCCESS);
  jobResultEvent.fire(result);
}"
53235,"public void onCloneRepositoryRequest(final @Observes CloneRepositoryRequest jobRequest){
  if (!approveRequest(jobRequest)) {
    return;
  }
  projectResourceDispatcher.cloneRepository(jobRequest.getJodId(),jobRequest.getRepository());
}","public void onCloneRepositoryRequest(final @Observes CreateOrCloneRepositoryRequest jobRequest){
  if (!approveRequest(jobRequest)) {
    return;
  }
  projectResourceDispatcher.createOrCloneRepository(jobRequest.getJodId(),jobRequest.getRepository());
}"
53236,"@GET @Produces(MediaType.APPLICATION_JSON) @Path(""String_Node_Str"") public JobResult getJobStatus(@PathParam(""String_Node_Str"") String jobId){
  System.out.println(""String_Node_Str"" + jobId);
  JobResult job=jobs.get(jobId);
  if (job == null) {
    job=new JobResult();
    job.setStatus(JobRequest.Status.GONE);
    return job;
  }
  return job;
}","@GET @Produces(MediaType.APPLICATION_JSON) @Path(""String_Node_Str"") public JobResult getJobStatus(@PathParam(""String_Node_Str"") String jobId){
  System.out.println(""String_Node_Str"" + jobId);
  JobResult job=jobs.get(jobId);
  if (job == null) {
    System.out.println(""String_Node_Str"" + jobId + ""String_Node_Str"");
    job=new JobResult();
    job.setStatus(JobRequest.Status.GONE);
    return job;
  }
  return job;
}"
53237,"public void onUpateJobStatus(final @Observes JobResult jobResult){
  JobResult job=jobs.get(jobResult.getJodId());
  if (job == null) {
    return;
  }
  jobs.put(jobResult.getJodId(),job);
}","public void onUpateJobStatus(final @Observes JobResult jobResult){
  JobResult job=jobs.get(jobResult.getJodId());
  if (job == null) {
    System.out.println(""String_Node_Str"" + jobResult.getJodId() + ""String_Node_Str"");
    return;
  }
  jobs.put(jobResult.getJodId(),jobResult);
}"
53238,"@DELETE @Produces(MediaType.APPLICATION_JSON) @Path(""String_Node_Str"") public JobResult removeJob(@PathParam(""String_Node_Str"") String jobId){
  System.out.println(""String_Node_Str"" + jobId);
  JobResult job=jobs.get(jobId);
  if (job == null) {
    job=new JobResult();
    job.setStatus(JobRequest.Status.GONE);
    return job;
  }
  jobs.remove(jobId);
  job.setStatus(JobRequest.Status.GONE);
  return job;
}","@DELETE @Produces(MediaType.APPLICATION_JSON) @Path(""String_Node_Str"") public JobResult removeJob(@PathParam(""String_Node_Str"") String jobId){
  System.out.println(""String_Node_Str"" + jobId);
  JobResult job=jobs.get(jobId);
  if (job == null) {
    System.out.println(""String_Node_Str"" + jobId + ""String_Node_Str"");
    job=new JobResult();
    job.setStatus(JobRequest.Status.GONE);
    return job;
  }
  jobs.remove(jobId);
  job.setStatus(JobRequest.Status.GONE);
  return job;
}"
53239,"@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(""String_Node_Str"") public JobRequest createOrCloneRepository(Repository repository){
  System.out.println(""String_Node_Str"" + repository.getName());
  String id=""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ counter.incrementAndGet();
  CloneRepositoryRequest jobRequest=new CloneRepositoryRequest();
  jobRequest.setStatus(JobRequest.Status.ACCEPTED);
  jobRequest.setJodId(id);
  jobRequest.setRepository(repository);
  JobResult jobResult=new JobResult();
  jobResult.setJodId(id);
  jobResult.setStatus(JobRequest.Status.ACCEPTED);
  jobs.put(id,jobResult);
  cloneJobRequestEvent.fire(jobRequest);
  return jobRequest;
}","@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(""String_Node_Str"") public JobRequest createOrCloneRepository(Repository repository){
  System.out.println(""String_Node_Str"" + repository.getName());
  String id=""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ counter.incrementAndGet();
  CreateOrCloneRepositoryRequest jobRequest=new CreateOrCloneRepositoryRequest();
  jobRequest.setStatus(JobRequest.Status.ACCEPTED);
  jobRequest.setJodId(id);
  jobRequest.setRepository(repository);
  JobResult jobResult=new JobResult();
  jobResult.setJodId(id);
  jobResult.setStatus(JobRequest.Status.ACCEPTED);
  jobs.put(id,jobResult);
  createOrCloneJobRequestEvent.fire(jobRequest);
  return jobRequest;
}"
53240,"private void migrate(Module jcrModule){
  POM pom=new POM();
  Path modulePath=migrationPathManager.generateRootPath();
  projectService.newProject(makeRepository(modulePath),jcrModule.getName(),pom,""String_Node_Str"");
}","private void migrate(Module jcrModule){
  GAV gav=new GAV(jcrModule.getName(),jcrModule.getName(),""String_Node_Str"");
  POM pom=new POM(gav);
  Path modulePath=migrationPathManager.generateRootPath();
  projectService.newProject(makeRepository(modulePath),jcrModule.getName(),pom,""String_Node_Str"");
}"
53241,"public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.DRL_MODEL.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  Project project=projectService.resolveProject(path);
  initBasePropertyTypes();
  initAnnotationDefinitions();
  if (project == null) {
    Path projectRootPath=migrationPathManager.generatePathForModule(jcrModule);
    project=new Project(projectRootPath,projectRootPath,projectRootPath,projectRootPath,""String_Node_Str"");
  }
  try {
    Asset jcrAsset=jcrRepositoryAssetService.loadRuleAsset(jcrAssetItem.getUUID());
    FactModels factModels=((FactModels)jcrAsset.getContent());
    DataModelTO dataModelTO=new DataModelTO();
    String packageName=jcrModule.getName();
    for (    FactMetaModel factMetaModel : factModels.models) {
      DataObjectTO dataObjectTO=createDataObject(packageName,factMetaModel.getName(),factMetaModel.getSuperType());
      List<AnnotationMetaModel> annotationMetaModel=factMetaModel.getAnnotations();
      addAnnotations(dataObjectTO,annotationMetaModel);
      List<FieldMetaModel> fields=factMetaModel.getFields();
      for (      FieldMetaModel fieldMetaModel : fields) {
        String filedName=fieldMetaModel.name;
        String fildType=fieldMetaModel.type;
        boolean isMultiple=false;
        boolean isBaseType=isBaseType(fildType);
        ObjectPropertyTO property=new ObjectPropertyTO(filedName,fildType,isMultiple,isBaseType);
        dataObjectTO.getProperties().add(property);
      }
      dataModelTO.getDataObjects().add(dataObjectTO);
    }
    modelerService.saveModel(dataModelTO,project);
  }
 catch (  SerializationException e) {
    e.printStackTrace();
  }
}","public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.DRL_MODEL.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  Project project=projectService.resolveProject(path);
  initBasePropertyTypes();
  initAnnotationDefinitions();
  if (project == null) {
    Path projectRootPath=migrationPathManager.generatePathForModule(jcrModule);
    project=new Project(projectRootPath,projectRootPath,projectRootPath,projectRootPath,""String_Node_Str"");
  }
  try {
    Asset jcrAsset=jcrRepositoryAssetService.loadRuleAsset(jcrAssetItem.getUUID());
    FactModels factModels=((FactModels)jcrAsset.getContent());
    DataModelTO dataModelTO=new DataModelTO();
    String packageName=getPackageName(jcrModule);
    for (    FactMetaModel factMetaModel : factModels.models) {
      DataObjectTO dataObjectTO=createDataObject(packageName,factMetaModel.getName(),factMetaModel.getSuperType());
      List<AnnotationMetaModel> annotationMetaModel=factMetaModel.getAnnotations();
      addAnnotations(dataObjectTO,annotationMetaModel);
      List<FieldMetaModel> fields=factMetaModel.getFields();
      for (      FieldMetaModel fieldMetaModel : fields) {
        String filedName=fieldMetaModel.name;
        String fildType=fieldMetaModel.type;
        boolean isMultiple=false;
        boolean isBaseType=isBaseType(fildType);
        ObjectPropertyTO property=new ObjectPropertyTO(filedName,fildType,isMultiple,isBaseType);
        dataObjectTO.getProperties().add(property);
      }
      dataModelTO.getDataObjects().add(dataObjectTO);
    }
    modelerService.saveModel(dataModelTO,project);
  }
 catch (  SerializationException e) {
    e.printStackTrace();
  }
}"
53242,"public Path generateRootPath(){
  final org.kie.commons.java.nio.file.Path _path=fs.getPath(""String_Node_Str"" + escapePathEntry(""String_Node_Str""));
  final Path path=PathFactory.newPath(paths.convert(_path.getFileSystem()),_path.getFileName().toString(),_path.toUri().toString());
  return path;
}","public Path generateRootPath(){
  final org.kie.commons.java.nio.file.Path _path=fs.getPath(""String_Node_Str"");
  return paths.convert(_path,false);
}"
53243,"void runAllScenarios(Path path,String sessoinName);",void runAllScenarios(Path path);
53244,"void runScenario(Path path,Scenario scenario,String sessoinName);","void runScenario(Path path,Scenario scenario);"
53245,"@Override public void runAllScenarios(final Path testResourcePath,final String sessionName){
  try {
    final Project project=projectService.resolveProject(testResourcePath);
    List<Path> scenarioPaths=loadScenarioPaths(testResourcePath);
    List<Scenario> scenarios=new ArrayList<Scenario>();
    for (    Path path : scenarioPaths) {
      Scenario s=load(path);
      scenarios.add(s);
    }
    new ScenarioRunnerWrapper().run(scenarios,sessionService.newKieSession(project,sessionName),testResultMessageEvent);
  }
 catch (  Exception e) {
    throw ExceptionUtilities.handleException(e);
  }
}","@Override public void runAllScenarios(final Path testResourcePath){
  try {
    final Project project=projectService.resolveProject(testResourcePath);
    List<Path> scenarioPaths=loadScenarioPaths(testResourcePath);
    List<Scenario> scenarios=new ArrayList<Scenario>();
    for (    Path path : scenarioPaths) {
      Scenario s=load(path);
      scenarios.add(s);
    }
    new ScenarioRunnerWrapper().run(scenarios,sessionService.newKieSession(project),testResultMessageEvent);
  }
 catch (  Exception e) {
    throw ExceptionUtilities.handleException(e);
  }
}"
53246,"@Override public void runScenario(final Path path,final Scenario scenario,final String sessionName){
  try {
    final Project project=projectService.resolveProject(path);
    new ScenarioRunnerWrapper().run(scenario,sessionService.newKieSession(project,sessionName),testResultMessageEvent);
  }
 catch (  Exception e) {
    throw ExceptionUtilities.handleException(e);
  }
}","@Override public void runScenario(final Path path,final Scenario scenario){
  try {
    final Project project=projectService.resolveProject(path);
    new ScenarioRunnerWrapper().run(scenario,sessionService.newKieSession(project),testResultMessageEvent);
  }
 catch (  Exception e) {
    throw ExceptionUtilities.handleException(e);
  }
}"
53247,"@Override public void callback(Void v){
  pop.hide();
  BusyPopup.close();
}","@Override public void callback(Void v){
  BusyPopup.close();
}"
53248,"@Override public void onRunAllButton(){
  final FormStylePopup pop=new FormStylePopup();
  final TextBox sessionNameTextBox=new TextBox();
  pop.addAttribute(""String_Node_Str"" + ""String_Node_Str"",sessionNameTextBox);
  Button ok=new Button(""String_Node_Str"");
  ok.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (sessionNameTextBox.getText() == null || ""String_Node_Str"".equals(sessionNameTextBox.getText())) {
        Window.alert(TestScenarioConstants.INSTANCE.PleaseInputSessionName());
        return;
      }
      BusyPopup.showMessage(TestScenarioConstants.INSTANCE.BuildingAndRunningScenario());
      scenarioService.call(new RemoteCallback<Void>(){
        @Override public void callback(        Void v){
          pop.hide();
          BusyPopup.close();
        }
      }
,new HasBusyIndicatorDefaultErrorCallback(BulkRunTestScenarioEditor.this)).runAllScenarios(path,sessionNameTextBox.getText());
    }
  }
);
  pop.addAttribute(""String_Node_Str"",ok);
  pop.show();
}","@Override public void onRunAllButton(){
  BusyPopup.showMessage(TestScenarioConstants.INSTANCE.BuildingAndRunningScenario());
  scenarioService.call(new RemoteCallback<Void>(){
    @Override public void callback(    Void v){
      BusyPopup.close();
    }
  }
,new HasBusyIndicatorDefaultErrorCallback(BulkRunTestScenarioEditor.this)).runAllScenarios(path);
}"
53249,"private boolean parseArgOutputVfsRepository(CommandLine commandLine,HelpFormatter formatter,Options options){
  outputVfsRepository=new File(commandLine.getOptionValue(""String_Node_Str"",""String_Node_Str""));
  forceOverwriteOutputVfsRepository=Boolean.parseBoolean(commandLine.getOptionValue(""String_Node_Str"",""String_Node_Str""));
  if (outputVfsRepository.exists()) {
    if (forceOverwriteOutputVfsRepository) {
      try {
        FileUtils.deleteDirectory(outputVfsRepository);
      }
 catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str"",e);
      }
    }
 else {
      System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str"");
      return false;
    }
  }
  try {
    outputVfsRepository=outputVfsRepository.getCanonicalFile();
  }
 catch (  IOException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + outputVfsRepository + ""String_Node_Str"",e);
  }
  outputVfsRepository.mkdirs();
  return true;
}","private boolean parseArgOutputVfsRepository(CommandLine commandLine,HelpFormatter formatter,Options options){
  outputVfsRepository=new File(commandLine.getOptionValue(""String_Node_Str"",""String_Node_Str""));
  forceOverwriteOutputVfsRepository=commandLine.hasOption(""String_Node_Str"");
  if (outputVfsRepository.exists()) {
    if (forceOverwriteOutputVfsRepository) {
      try {
        FileUtils.deleteDirectory(outputVfsRepository);
      }
 catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str"",e);
      }
    }
 else {
      System.out.println(""String_Node_Str"" + outputVfsRepository.getAbsolutePath() + ""String_Node_Str"");
      return false;
    }
  }
  try {
    outputVfsRepository=outputVfsRepository.getCanonicalFile();
  }
 catch (  IOException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + outputVfsRepository + ""String_Node_Str"",e);
  }
  outputVfsRepository.mkdirs();
  return true;
}"
53250,"public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.DECISION_TABLE_GUIDED.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.commons.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  GuidedDecisionTable52 model=GuidedDTXMLPersistence.getInstance().unmarshal(jcrAssetItem.getContent());
  final String requiredPackageName=projectService.resolvePackage(path).getPackageName();
  if (requiredPackageName != null && !""String_Node_Str"".equals(requiredPackageName)) {
    model.setPackageName(requiredPackageName);
  }
  if (packageHeaderInfo.getHeader() != null) {
    final Imports imports=ImportsParser.parseImports(packageHeaderInfo.getHeader());
    if (imports != null) {
      model.setImports(imports);
    }
  }
  String sourceContent=GuidedDTXMLPersistence.getInstance().marshal(model);
  ioService.write(nioPath,sourceContent,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}","public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.DECISION_TABLE_GUIDED.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.commons.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  String content=jcrAssetItem.getContent();
  content=content.replaceAll(""String_Node_Str"",""String_Node_Str"");
  GuidedDecisionTable52 model=GuidedDTXMLPersistence.getInstance().unmarshal(content);
  final String requiredPackageName=projectService.resolvePackage(path).getPackageName();
  if (requiredPackageName != null && !""String_Node_Str"".equals(requiredPackageName)) {
    model.setPackageName(requiredPackageName);
  }
  if (packageHeaderInfo.getHeader() != null) {
    final Imports imports=ImportsParser.parseImports(packageHeaderInfo.getHeader());
    if (imports != null) {
      model.setImports(imports);
    }
  }
  String sourceContent=GuidedDTXMLPersistence.getInstance().marshal(model);
  ioService.write(nioPath,sourceContent,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}"
53251,"public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.workbench.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  byte[] attachement=jcrAssetItem.getBinaryContentAsBytes();
  ioService.write(nioPath,attachement,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}","public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.commons.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  byte[] attachement=jcrAssetItem.getBinaryContentAsBytes();
  ioService.write(nioPath,attachement,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}"
53252,"public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.DRL_MODEL.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.workbench.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  FactModelContentHandler h=new FactModelContentHandler();
  StringBuilder stringBuilder=new StringBuilder();
  try {
    Asset jcrAsset=jcrRepositoryAssetService.loadRuleAsset(jcrAssetItem.getUUID());
    h.assembleSource(jcrAsset.getContent(),stringBuilder);
    String sourceDRLWithImport=drlTextEditorServiceImpl.assertPackageName(stringBuilder.toString(),path);
    sourceDRLWithImport=packageImportHelper.assertPackageImportDRL(sourceDRLWithImport,path);
    ioService.write(nioPath,sourceDRLWithImport,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
  }
 catch (  SerializationException e) {
    e.printStackTrace();
  }
}","public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.DRL_MODEL.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.commons.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  FactModelContentHandler h=new FactModelContentHandler();
  StringBuilder stringBuilder=new StringBuilder();
  try {
    Asset jcrAsset=jcrRepositoryAssetService.loadRuleAsset(jcrAssetItem.getUUID());
    h.assembleSource(jcrAsset.getContent(),stringBuilder);
    String sourceDRLWithImport=drlTextEditorServiceImpl.assertPackageName(stringBuilder.toString(),path);
    sourceDRLWithImport=packageImportHelper.assertPackageImportDRL(sourceDRLWithImport,path);
    ioService.write(nioPath,sourceDRLWithImport,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
  }
 catch (  SerializationException e) {
    e.printStackTrace();
  }
}"
53253,"public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.DECISION_TABLE_GUIDED.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.workbench.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  GuidedDecisionTable52 model=GuidedDTXMLPersistence.getInstance().unmarshal(jcrAssetItem.getContent());
  final String requiredPackageName=projectService.resolvePackageName(path);
  if (requiredPackageName != null && !""String_Node_Str"".equals(requiredPackageName)) {
    model.setPackageName(requiredPackageName);
  }
  if (packageHeaderInfo.getHeader() != null) {
    final Imports imports=ImportsParser.parseImports(packageHeaderInfo.getHeader());
    if (imports != null) {
      model.setImports(imports);
    }
  }
  String sourceContent=GuidedDTXMLPersistence.getInstance().marshal(model);
  ioService.write(nioPath,sourceContent,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}","public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.DECISION_TABLE_GUIDED.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.commons.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  GuidedDecisionTable52 model=GuidedDTXMLPersistence.getInstance().unmarshal(jcrAssetItem.getContent());
  final String requiredPackageName=projectService.resolvePackageName(path);
  if (requiredPackageName != null && !""String_Node_Str"".equals(requiredPackageName)) {
    model.setPackageName(requiredPackageName);
  }
  if (packageHeaderInfo.getHeader() != null) {
    final Imports imports=ImportsParser.parseImports(packageHeaderInfo.getHeader());
    if (imports != null) {
      model.setImports(imports);
    }
  }
  String sourceContent=GuidedDTXMLPersistence.getInstance().marshal(model);
  ioService.write(nioPath,sourceContent,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}"
53254,"public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.BUSINESS_RULE.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  try {
    Asset jcrAsset=jcrRepositoryAssetService.loadRuleAsset(jcrAssetItem.getUUID());
    RuleModel ruleModel=getBrlXmlPersistence().unmarshal(jcrAssetItem.getContent());
    Path path=null;
    if (ruleModel.hasDSLSentences()) {
      path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem,true);
    }
 else {
      path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem,false);
    }
    final org.kie.workbench.java.nio.file.Path nioPath=paths.convert(path);
    Map<String,Object> attrs;
    try {
      attrs=ioService.readAttributes(nioPath);
    }
 catch (    final NoSuchFileException ex) {
      attrs=new HashMap<String,Object>();
    }
    StringBuilder sb=new StringBuilder();
    BRMSPackageBuilder builder=new BRMSPackageBuilder(rulesRepository.loadModuleByUUID(jcrModule.getUuid()));
    BRLContentHandler handler=new BRLContentHandler();
    handler.assembleDRL(builder,jcrAsset,sb);
    String sourceDRLWithImport=drlTextEditorServiceImpl.assertPackageName(sb.toString(),path);
    sourceDRLWithImport=packageImportHelper.assertPackageImportDRL(sourceDRLWithImport,path);
    ioService.write(nioPath,sourceDRLWithImport,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
  }
 catch (  SerializationException e) {
    e.printStackTrace();
  }
}","public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.BUSINESS_RULE.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  try {
    Asset jcrAsset=jcrRepositoryAssetService.loadRuleAsset(jcrAssetItem.getUUID());
    RuleModel ruleModel=getBrlXmlPersistence().unmarshal(jcrAssetItem.getContent());
    Path path=null;
    if (ruleModel.hasDSLSentences()) {
      path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem,true);
    }
 else {
      path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem,false);
    }
    final org.kie.commons.java.nio.file.Path nioPath=paths.convert(path);
    Map<String,Object> attrs;
    try {
      attrs=ioService.readAttributes(nioPath);
    }
 catch (    final NoSuchFileException ex) {
      attrs=new HashMap<String,Object>();
    }
    StringBuilder sb=new StringBuilder();
    BRMSPackageBuilder builder=new BRMSPackageBuilder(rulesRepository.loadModuleByUUID(jcrModule.getUuid()));
    BRLContentHandler handler=new BRLContentHandler();
    handler.assembleDRL(builder,jcrAsset,sb);
    String sourceDRLWithImport=drlTextEditorServiceImpl.assertPackageName(sb.toString(),path);
    sourceDRLWithImport=packageImportHelper.assertPackageImportDRL(sourceDRLWithImport,path);
    ioService.write(nioPath,sourceDRLWithImport,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
  }
 catch (  SerializationException e) {
    e.printStackTrace();
  }
}"
53255,"public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.SCORECARD_GUIDED.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.workbench.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  String sourceContent=jcrAssetItem.getContent();
  String sourceContentWithPackage=packageImportHelper.assertPackageNameXML(sourceContent,path);
  sourceContentWithPackage=packageImportHelper.assertPackageImportXML(sourceContentWithPackage,path);
  ioService.write(nioPath,sourceContentWithPackage,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}","public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.SCORECARD_GUIDED.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.commons.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  String sourceContent=jcrAssetItem.getContent();
  String sourceContentWithPackage=packageImportHelper.assertPackageNameXML(sourceContent,path);
  sourceContentWithPackage=packageImportHelper.assertPackageImportXML(sourceContentWithPackage,path);
  ioService.write(nioPath,sourceContentWithPackage,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}"
53256,"public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.workbench.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  String content=jcrAssetItem.getContent();
  ioService.write(nioPath,content,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}","public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.commons.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  String content=jcrAssetItem.getContent();
  ioService.write(nioPath,content,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}"
53257,"public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.workbench.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  StringBuilder sb=new StringBuilder();
  if (AssetFormats.DRL.equals(jcrAssetItem.getFormat())) {
    sb.append(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
 else   if (AssetFormats.FUNCTION.equals(jcrAssetItem.getFormat())) {
    sb.append(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
  sb.append(jcrAssetItem.getContent());
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  String sourceWithImport=drlTextEditorServiceImpl.assertPackageName(sb.toString(),path);
  sourceWithImport=packageImportHelper.assertPackageImportDRL(sourceWithImport,path);
  ioService.write(nioPath,sourceWithImport,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}","public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.commons.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  StringBuilder sb=new StringBuilder();
  if (AssetFormats.DRL.equals(jcrAssetItem.getFormat())) {
    sb.append(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
 else   if (AssetFormats.FUNCTION.equals(jcrAssetItem.getFormat())) {
    sb.append(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
  sb.append(jcrAssetItem.getContent());
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  String sourceWithImport=drlTextEditorServiceImpl.assertPackageName(sb.toString(),path);
  sourceWithImport=packageImportHelper.assertPackageImportDRL(sourceWithImport,path);
  ioService.write(nioPath,sourceWithImport,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}"
53258,"public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.TEST_SCENARIO.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.workbench.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  String content=jcrAssetItem.getContent();
  String sourceContentWithPackage=packageImportHelper.assertPackageNameXML(content,path);
  sourceContentWithPackage=packageImportHelper.assertPackageImportXML(sourceContentWithPackage,path);
  ioService.write(nioPath,content,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}","public void migrate(Module jcrModule,AssetItem jcrAssetItem){
  if (!AssetFormats.TEST_SCENARIO.equals(jcrAssetItem.getFormat())) {
    throw new IllegalArgumentException(""String_Node_Str"" + jcrAssetItem.getName() + ""String_Node_Str""+ jcrAssetItem.getFormat()+ ""String_Node_Str"");
  }
  Path path=migrationPathManager.generatePathForAsset(jcrModule,jcrAssetItem);
  final org.kie.commons.java.nio.file.Path nioPath=paths.convert(path);
  Map<String,Object> attrs;
  try {
    attrs=ioService.readAttributes(nioPath);
  }
 catch (  final NoSuchFileException ex) {
    attrs=new HashMap<String,Object>();
  }
  String content=jcrAssetItem.getContent();
  String sourceContentWithPackage=packageImportHelper.assertPackageNameXML(content,path);
  sourceContentWithPackage=packageImportHelper.assertPackageImportXML(sourceContentWithPackage,path);
  ioService.write(nioPath,content,attrs,new CommentedOption(jcrAssetItem.getLastContributor(),null,jcrAssetItem.getCheckinComment(),jcrAssetItem.getLastModified().getTime()));
}"
53259,"private org.kie.workbench.java.nio.file.Path getPomDirectoryPath(final Path pathToPomXML){
  return paths.convert(pathToPomXML).getParent();
}","private org.kie.commons.java.nio.file.Path getPomDirectoryPath(final Path pathToPomXML){
  return paths.convert(pathToPomXML).getParent();
}"
53260,"public Path generateRootPath(){
  final org.kie.workbench.java.nio.file.Path _path=fs.getPath(""String_Node_Str"" + escapePathEntry(""String_Node_Str""));
  final Path path=PathFactory.newPath(paths.convert(_path.getFileSystem()),_path.getFileName().toString(),_path.toUri().toString());
  return path;
}","public Path generateRootPath(){
  final org.kie.commons.java.nio.file.Path _path=fs.getPath(""String_Node_Str"" + escapePathEntry(""String_Node_Str""));
  final Path path=PathFactory.newPath(paths.convert(_path.getFileSystem()),_path.getFileName().toString(),_path.toUri().toString());
  return path;
}"
53261,"public Path generatePathForModule(Module jcrModule){
  final org.kie.workbench.java.nio.file.Path modulePath=fs.getPath(""String_Node_Str"" + escapePathEntry(jcrModule.getName()));
  final Path path=PathFactory.newPath(paths.convert(modulePath.getFileSystem()),modulePath.getFileName().toString(),modulePath.toUri().toString());
  register(jcrModule.getUuid(),path);
  return path;
}","public Path generatePathForModule(Module jcrModule){
  final org.kie.commons.java.nio.file.Path modulePath=fs.getPath(""String_Node_Str"" + escapePathEntry(jcrModule.getName()));
  final Path path=PathFactory.newPath(paths.convert(modulePath.getFileSystem()),modulePath.getFileName().toString(),modulePath.toUri().toString());
  register(jcrModule.getUuid(),path);
  return path;
}"
53262,"/** 
 * Replaces the current username with <code>userInfo</code>
 * @param userInfo The new userInfo
 * @return This builder
 */
public SessionFactoryBuilder setUserInfo(UserInfo userInfo){
  this.userInfo=userInfo;
  return this;
}","/** 
 * Replaces the current userInfo with <code>userInfo</code>
 * @param userInfo The new userInfo
 * @return This builder
 */
public SessionFactoryBuilder setUserInfo(UserInfo userInfo){
  this.userInfo=userInfo;
  return this;
}"
53263,"public void execute(Sftp sftp) throws JSchException, IOException {
  logger.debug(""String_Node_Str"",sessionManager);
  ChannelSftp channelSftp=null;
  try {
    channelSftp=(ChannelSftp)sessionManager.getSession().openChannel(CHANNEL_SFTP);
    sftp.run(channelSftp);
  }
  finally {
    if (channelSftp != null) {
      channelSftp.disconnect();
    }
  }
}","public void execute(Sftp sftp) throws JSchException, IOException {
  logger.debug(""String_Node_Str"",sessionManager);
  ChannelSftp channelSftp=null;
  try {
    channelSftp=(ChannelSftp)sessionManager.getSession().openChannel(CHANNEL_SFTP);
    channelSftp.connect();
    sftp.run(channelSftp);
  }
  finally {
    if (channelSftp != null) {
      channelSftp.disconnect();
    }
  }
}"
53264,"/** 
 * Get used glo message.
 * @param command Executed command.
 * @return Integer value of glo message.
 */
private static int getGloMessage(final int command){
  int cmd;
switch (command) {
case Command.READ_REQUEST:
    cmd=Command.GLO_READ_REQUEST;
  break;
case Command.GET_REQUEST:
cmd=Command.GLO_GET_REQUEST;
break;
case Command.WRITE_REQUEST:
cmd=Command.GLO_WRITE_REQUEST;
break;
case Command.SET_REQUEST:
cmd=Command.GLO_SET_REQUEST;
break;
case Command.METHOD_REQUEST:
cmd=Command.GLO_METHOD_REQUEST;
break;
case Command.READ_RESPONSE:
cmd=Command.GLO_READ_RESPONSE;
break;
case Command.GET_RESPONSE:
cmd=Command.GLO_GET_RESPONSE;
break;
case Command.WRITE_RESPONSE:
cmd=Command.GLO_WRITE_RESPONSE;
break;
case Command.SET_RESPONSE:
cmd=Command.GLO_SET_RESPONSE;
break;
case Command.METHOD_RESPONSE:
cmd=Command.GLO_METHOD_RESPONSE;
break;
case Command.DATA_NOTIFICATION:
cmd=Command.GENERAL_GLO_CIPHERING;
break;
default :
throw new GXDLMSException(""String_Node_Str"");
}
return cmd;
}","/** 
 * Get used glo message.
 * @param command Executed command.
 * @return Integer value of glo message.
 */
private static int getGloMessage(final int command){
  int cmd;
switch (command) {
case Command.READ_REQUEST:
    cmd=Command.GLO_READ_REQUEST;
  break;
case Command.GET_REQUEST:
cmd=Command.GLO_GET_REQUEST;
break;
case Command.WRITE_REQUEST:
cmd=Command.GLO_WRITE_REQUEST;
break;
case Command.SET_REQUEST:
cmd=Command.GLO_SET_REQUEST;
break;
case Command.METHOD_REQUEST:
cmd=Command.GLO_METHOD_REQUEST;
break;
case Command.READ_RESPONSE:
cmd=Command.GLO_READ_RESPONSE;
break;
case Command.GET_RESPONSE:
cmd=Command.GLO_GET_RESPONSE;
break;
case Command.WRITE_RESPONSE:
cmd=Command.GLO_WRITE_RESPONSE;
break;
case Command.SET_RESPONSE:
cmd=Command.GLO_SET_RESPONSE;
break;
case Command.METHOD_RESPONSE:
cmd=Command.GLO_METHOD_RESPONSE;
break;
case Command.DATA_NOTIFICATION:
cmd=Command.GENERAL_GLO_CIPHERING;
break;
case Command.RELEASE_REQUEST:
cmd=Command.RELEASE_REQUEST;
break;
case Command.RELEASE_RESPONSE:
cmd=Command.RELEASE_RESPONSE;
break;
default :
throw new GXDLMSException(""String_Node_Str"");
}
return cmd;
}"
53265,"public void readList(List<Entry<GXDLMSObject,Integer>> list) throws Exception {
  byte[][] data=dlms.readList(list);
  GXReplyData reply=new GXReplyData();
  readDataBlock(data,reply);
  dlms.updateValues(list,Arrays.asList(reply.getValue()));
}","public void readList(List<Entry<GXDLMSObject,Integer>> list) throws Exception {
  byte[][] data=dlms.readList(list);
  GXReplyData reply=new GXReplyData();
  List<Object> values=new ArrayList<Object>(list.size());
  for (  byte[] it : data) {
    readDataBlock(it,reply);
    if (list.size() != 1 && reply.getValue() instanceof Object[]) {
      values.addAll(Arrays.asList((Object[])reply.getValue()));
    }
 else     if (reply.getValue() != null) {
      values.add(reply.getValue());
    }
    reply.clear();
  }
  if (values.size() != list.size()) {
    throw new Exception(""String_Node_Str"");
  }
  dlms.updateValues(list,values);
}"
53266,"/** 
 * Reserved for internal use.
 */
final byte[][] generateMessage(Object name,byte[] data,ObjectType interfaceClass,int AttributeOrdinal,Command cmd){
  if (getLimits().getMaxInfoRX() == null) {
    throw new GXDLMSException(""String_Node_Str"");
  }
  java.nio.ByteBuffer buff;
  if (name instanceof byte[]) {
    buff=java.nio.ByteBuffer.wrap((byte[])name);
  }
 else {
    if (name == null) {
      buff=java.nio.ByteBuffer.wrap(data);
    }
 else     if (getUseLogicalNameReferencing()) {
      int len=data == null ? 0 : data.length;
      buff=java.nio.ByteBuffer.allocate(20 + len);
      if (cmd == Command.GetRequest || cmd == Command.SetRequest || cmd == Command.MethodRequest) {
        buff.putShort((short)interfaceClass.getValue());
        String[] items=((String)name).split(""String_Node_Str"",-1);
        if (items.length != 6) {
          throw new GXDLMSException(""String_Node_Str"");
        }
        for (        String it : items) {
          buff.put((byte)(Short.parseShort(it) & 0xFF));
        }
        buff.put((byte)AttributeOrdinal);
        if (data == null || data.length == 0 || cmd == Command.SetRequest) {
          buff.put((byte)0);
        }
 else {
          buff.put((byte)1);
        }
      }
    }
 else {
      int len=data == null ? 0 : data.length;
      buff=java.nio.ByteBuffer.allocate(11 + len);
      if (name.getClass().isArray()) {
        for (int pos=0; pos != Array.getLength(name); ++pos) {
          Object it=Array.get(name,pos);
          buff.put((byte)2);
          int base_address=((Number)it).shortValue() & 0xFFFF;
          base_address+=((AttributeOrdinal - 1) * 8);
          buff.putShort((short)base_address);
        }
      }
 else {
        buff.put((byte)1);
      }
      if (cmd == Command.ReadResponse || cmd == Command.WriteResponse) {
        buff.put((byte)0x0);
      }
 else {
        if (data == null || data.length == 0) {
          buff.put((byte)2);
        }
 else {
          buff.put((byte)4);
        }
        int base_address=GXCommon.intValue(name);
        if (AttributeOrdinal != 0) {
          base_address+=((AttributeOrdinal - 1) * 8);
        }
        buff.putShort((short)base_address);
      }
    }
    if (data != null && data.length != 0) {
      buff.put(data);
    }
  }
  return splitToBlocks(buff,cmd);
}","/** 
 * Reserved for internal use.
 */
final byte[][] generateMessage(Object name,byte[] data,ObjectType interfaceClass,int AttributeOrdinal,Command cmd){
  if (getLimits().getMaxInfoRX() == null) {
    throw new GXDLMSException(""String_Node_Str"");
  }
  boolean asList=false;
  java.nio.ByteBuffer buff;
  if (name instanceof byte[]) {
    buff=java.nio.ByteBuffer.wrap((byte[])name);
  }
 else {
    if (name == null) {
      buff=java.nio.ByteBuffer.wrap(data);
    }
 else     if (getUseLogicalNameReferencing()) {
      int len=data == null ? 0 : data.length;
      if (cmd == Command.GetRequest || cmd == Command.SetRequest || cmd == Command.MethodRequest) {
        if (name instanceof List) {
          asList=true;
          List<AbstractMap.SimpleEntry<GXDLMSObject,Integer>> tmp=(List<AbstractMap.SimpleEntry<GXDLMSObject,Integer>>)name;
          buff=java.nio.ByteBuffer.allocate(20 + len + tmp.size() * 10);
          buff.put((byte)tmp.size());
          for (          AbstractMap.SimpleEntry<GXDLMSObject,Integer> it : tmp) {
            GXCommon.setUInt16((short)it.getKey().getObjectType().getValue(),buff);
            String[] items=it.getKey().getLogicalName().split(""String_Node_Str"");
            if (items.length != 6) {
              throw new GXDLMSException(""String_Node_Str"");
            }
            for (            String it2 : items) {
              buff.put(Integer.valueOf(it2).byteValue());
            }
            buff.put(it.getValue().byteValue());
            buff.put((byte)0);
          }
        }
 else {
          buff=java.nio.ByteBuffer.allocate(20 + len);
          buff.putShort((short)interfaceClass.getValue());
          String[] items=((String)name).split(""String_Node_Str"",-1);
          if (items.length != 6) {
            throw new GXDLMSException(""String_Node_Str"");
          }
          for (          String it : items) {
            buff.put((byte)(Short.parseShort(it) & 0xFF));
          }
          buff.put((byte)AttributeOrdinal);
          if (data == null || data.length == 0 || cmd == Command.SetRequest) {
            buff.put((byte)0);
          }
 else {
            buff.put((byte)1);
          }
        }
      }
 else {
        buff=java.nio.ByteBuffer.allocate(20 + len);
      }
    }
 else {
      int len=data == null ? 0 : data.length;
      if (name instanceof List) {
        List<AbstractMap.SimpleEntry<GXDLMSObject,Integer>> tmp=(List<AbstractMap.SimpleEntry<GXDLMSObject,Integer>>)name;
        buff=java.nio.ByteBuffer.allocate(10 + tmp.size() * 3);
        buff.put((byte)tmp.size());
        for (        AbstractMap.SimpleEntry<GXDLMSObject,Integer> it : tmp) {
          buff.put((byte)2);
          int base_address=it.getKey().getShortName();
          base_address+=((it.getValue() - 1) * 8);
          GXCommon.setUInt16((short)base_address,buff);
        }
      }
 else {
        buff=java.nio.ByteBuffer.allocate(11 + len);
        buff.put((byte)1);
        if (cmd == Command.ReadResponse || cmd == Command.WriteResponse) {
          buff.put((byte)0x0);
        }
 else {
          if (data == null || data.length == 0) {
            buff.put((byte)2);
          }
 else {
            buff.put((byte)4);
          }
          int base_address=GXCommon.intValue(name);
          if (AttributeOrdinal != 0) {
            base_address+=((AttributeOrdinal - 1) * 8);
          }
          buff.putShort((short)base_address);
        }
      }
    }
    if (data != null && data.length != 0) {
      buff.put(data);
    }
  }
  return splitToBlocks(buff,cmd,asList);
}"
53267,"/** 
 * Determines, whether the DLMS packet is completed.
 * @param data The data to be parsed, to complete the DLMS packet.
 * @return True, when the DLMS packet is completed.
 */
public final boolean isDLMSPacketComplete(byte[] data){
  if (data == null) {
    return false;
  }
  byte[] frame=new byte[1];
  int[] error=new int[1];
  try {
    boolean[] packetFull=new boolean[1], wrongCrc=new boolean[1];
    int[] command=new int[1];
    getDataFromFrame(java.nio.ByteBuffer.wrap(data),null,frame,true,error,false,packetFull,wrongCrc,command);
    return packetFull[0];
  }
 catch (  java.lang.Exception ex) {
    System.out.println(ex.getMessage());
    return false;
  }
}","/** 
 * Determines, whether the DLMS packet is completed.
 * @param data The data to be parsed, to complete the DLMS packet.
 * @return True, when the DLMS packet is completed.
 */
public final boolean isDLMSPacketComplete(byte[] data){
  if (data == null) {
    return false;
  }
  byte[] frame=new byte[1];
  int[] error=new int[1];
  try {
    if (getInterfaceType() == InterfaceType.GENERAL) {
      if (data.length < 5) {
        return false;
      }
      boolean compleate=false;
      for (int index=0; index < data.length; ++index) {
        if (data[index] == GXCommon.HDLCFrameStartEnd) {
          if (2 + data[index + 2] <= data.length) {
            compleate=true;
          }
          break;
        }
      }
      if (!compleate) {
        return false;
      }
    }
 else     if (getInterfaceType() == InterfaceType.NET) {
      if (data.length < 6) {
        return false;
      }
    }
 else {
      throw new Exception(""String_Node_Str"");
    }
    boolean[] packetFull=new boolean[1], wrongCrc=new boolean[1];
    int[] command=new int[1];
    getDataFromFrame(java.nio.ByteBuffer.wrap(data),null,frame,true,error,false,packetFull,wrongCrc,command);
    return packetFull[0];
  }
 catch (  java.lang.Exception ex) {
    System.out.println(ex.getMessage());
    return false;
  }
}"
53268,"/** 
 * Split the send packet to a size that the device can handle.
 * @param packet Packet to send.
 * @return Array of byte arrays that are sent to device.
 */
public final byte[][] splitToBlocks(java.nio.ByteBuffer packet,Command cmd){
  int[] index=new int[1];
  int len=packet.position();
  packet.limit(len);
  packet.position(0);
  if (!getUseLogicalNameReferencing()) {
    return splitToFrames(packet,0,index,len,cmd,0);
  }
  java.util.ArrayList<byte[]> buff=new java.util.ArrayList<byte[]>();
  int blockIndex=0;
  boolean multibleFrames=false;
  do {
    byte[][] frames=splitToFrames(packet,++blockIndex,index,getMaxReceivePDUSize(),cmd,0);
    buff.addAll(Arrays.asList(frames));
    if (frames.length != 1) {
      multibleFrames=true;
      expectedFrame+=3;
    }
  }
 while (index[0] < len);
  if (multibleFrames) {
    expectedFrame-=3;
  }
  byte[][] tmp=new byte[buff.size()][];
  int pos=-1;
  for (  byte[] it : buff) {
    ++pos;
    tmp[pos]=new byte[it.length];
    System.arraycopy(it,0,tmp[pos],0,it.length);
  }
  return tmp;
}","/** 
 * Split the send packet to a size that the device can handle.
 * @param packet Packet to send.
 * @return Array of byte arrays that are sent to device.
 */
public final byte[][] splitToBlocks(java.nio.ByteBuffer packet,Command cmd,boolean asList){
  int[] index=new int[1];
  int len=packet.position();
  packet.limit(len);
  packet.position(0);
  if (!getUseLogicalNameReferencing()) {
    return splitToFrames(packet,0,index,len,cmd,0,asList);
  }
  java.util.ArrayList<byte[]> buff=new java.util.ArrayList<byte[]>();
  int blockIndex=0;
  boolean multibleFrames=false;
  do {
    byte[][] frames=splitToFrames(packet,++blockIndex,index,getMaxReceivePDUSize(),cmd,0,asList);
    buff.addAll(Arrays.asList(frames));
    if (frames.length != 1) {
      multibleFrames=true;
      expectedFrame+=3;
    }
  }
 while (index[0] < len);
  if (multibleFrames) {
    expectedFrame-=3;
  }
  byte[][] tmp=new byte[buff.size()][];
  int pos=-1;
  for (  byte[] it : buff) {
    ++pos;
    tmp[pos]=new byte[it.length];
    System.arraycopy(it,0,tmp[pos],0,it.length);
  }
  return tmp;
}"
53269,"/** 
 * Determines, whether Logical, or Short name, referencing is used.      Referencing depends on the device to communicate with. Normally, a device supports only either Logical or Short name referencing. The referencing is defined by the device manufacurer. If the referencing is wrong, the SNMR message will fail.
 */
public final boolean getUseLogicalNameReferencing(){
  return privateUseLogicalNameReferencing;
}","/** 
 * Determines, whether Logical, or Short name, referencing is used.      Referencing depends on the device to communicate with. Normally, a device supports only either Logical or Short name referencing. The referencing is defined by the device manufacturer. If the referencing is wrong, the SNMR message will fail.
 */
public final boolean getUseLogicalNameReferencing(){
  return privateUseLogicalNameReferencing;
}"
53270,"public byte[][] splitToFrames(java.nio.ByteBuffer packet,int blockIndex,int[] index,int count,Command cmd,int resultChoice){
  ByteArrayOutputStream tmp=new ByteArrayOutputStream();
  if (this.getInterfaceType() == InterfaceType.GENERAL && !(Ciphering.getSecurity() != Security.NONE && frameSequence != -1)) {
    try {
      if (getServer()) {
        tmp.write(GXCommon.LLCReplyBytes);
      }
 else {
        tmp.write(GXCommon.LLCSendBytes);
      }
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
  }
  if (cmd != Command.None && this.getUseLogicalNameReferencing()) {
    boolean moreBlocks=packet.limit() > getMaxReceivePDUSize() && packet.limit() > index[0] + count;
    tmp.write(cmd.getValue());
    tmp.write((byte)(moreBlocks ? 2 : 1));
    tmp.write(getInvokeIDPriority());
    if (getServer()) {
      tmp.write(resultChoice);
    }
    if (moreBlocks) {
      tmp.write((byte)blockIndex >> 8);
      tmp.write((byte)blockIndex & 0xFF);
      tmp.write((byte)0);
      GXCommon.setObjectCount(count,tmp);
    }
  }
 else   if (cmd != Command.None && !this.getUseLogicalNameReferencing()) {
    tmp.write((byte)cmd.getValue());
  }
  if (Ciphering.getSecurity() != Security.NONE && frameSequence != -1) {
    try {
      int cnt=count;
      if (count + index[0] > packet.limit()) {
        cnt=packet.limit() - index[0];
      }
      tmp.write(packet.array(),index[0],cnt);
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
    packet.clear();
    Ciphering.setFrameCounter(Ciphering.getFrameCounter() + 1);
    Command gloCmd;
    if (cmd == Command.ReadRequest || cmd == Command.GetRequest) {
      gloCmd=Command.GloGetRequest;
    }
 else     if (cmd == Command.WriteRequest || cmd == Command.SetRequest) {
      gloCmd=Command.GloSetRequest;
    }
 else     if (cmd == Command.MethodRequest) {
      gloCmd=Command.GloMethodRequest;
    }
 else     if (cmd == Command.ReadResponse || cmd == Command.GetResponse) {
      gloCmd=Command.GloGetResponse;
    }
 else     if (cmd == Command.WriteResponse || cmd == Command.SetResponse) {
      gloCmd=Command.GloSetResponse;
    }
 else     if (cmd == Command.MethodResponse) {
      gloCmd=Command.GloMethodResponse;
    }
 else {
      throw new GXDLMSException(""String_Node_Str"");
    }
    byte[] tmp2=tmp.toByteArray();
    packet=java.nio.ByteBuffer.wrap(GXDLMSChippering.EncryptAesGcm(gloCmd,Ciphering.getSecurity(),Ciphering.getFrameCounter(),Ciphering.getSystemTitle(),Ciphering.getBlockCipherKey(),Ciphering.getAuthenticationKey(),tmp2));
    packet.position(packet.limit());
    count=packet.position();
    tmp.reset();
    try {
      if (this.getInterfaceType() == InterfaceType.GENERAL) {
        if (getServer()) {
          tmp.write(GXCommon.LLCReplyBytes);
        }
 else {
          tmp.write(GXCommon.LLCSendBytes);
        }
      }
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
  }
  int dataSize;
  if (this.getInterfaceType() == InterfaceType.NET) {
    dataSize=getMaxReceivePDUSize();
  }
 else {
    if (cmd == Command.GetRequest || cmd == Command.MethodRequest || cmd == Command.ReadRequest || cmd == Command.SetRequest || cmd == Command.WriteRequest) {
      dataSize=GXCommon.intValue(getLimits().getMaxInfoTX());
    }
 else {
      dataSize=GXCommon.intValue(getLimits().getMaxInfoRX());
    }
  }
  if (count + index[0] > packet.limit()) {
    count=packet.limit() - index[0];
  }
  packet.position(index[0]);
  byte[] tmp2=new byte[count];
  packet.get(tmp2);
  try {
    tmp.write(tmp2);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex.getMessage());
  }
  index[0]+=count;
  count=tmp.size();
  if (count < dataSize) {
    dataSize=count;
  }
  int cnt=(int)(count / dataSize);
  if (count % dataSize != 0) {
    ++cnt;
  }
  int start=0;
  byte[][] buff=new byte[cnt][];
  for (int pos=0; pos < cnt; ++pos) {
    byte id;
    if (pos == 0) {
      id=generateIFrame();
    }
 else {
      id=generateNextFrame();
    }
    if (start + dataSize > count) {
      dataSize=count - start;
    }
    buff[pos]=addFrame(id,cnt != 1 && pos < cnt - 1,tmp.toByteArray(),start,dataSize);
    start+=dataSize;
  }
  return buff;
}","public byte[][] splitToFrames(java.nio.ByteBuffer packet,int blockIndex,int[] index,int count,Command cmd,int resultChoice,boolean asList){
  ByteArrayOutputStream tmp=new ByteArrayOutputStream();
  if (this.getInterfaceType() == InterfaceType.GENERAL && !(Ciphering.getSecurity() != Security.NONE && frameSequence != -1)) {
    try {
      if (getServer()) {
        tmp.write(GXCommon.LLCReplyBytes);
      }
 else {
        tmp.write(GXCommon.LLCSendBytes);
      }
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
  }
  if (cmd != Command.None && this.getUseLogicalNameReferencing()) {
    boolean moreBlocks=packet.limit() > getMaxReceivePDUSize() && packet.limit() > index[0] + count;
    tmp.write(cmd.getValue());
    if (asList) {
      tmp.write((byte)3);
    }
 else {
      tmp.write((byte)(moreBlocks ? 2 : 1));
    }
    tmp.write(getInvokeIDPriority());
    if (getServer()) {
      tmp.write(resultChoice);
    }
    if (moreBlocks) {
      tmp.write((byte)blockIndex >> 8);
      tmp.write((byte)blockIndex & 0xFF);
      tmp.write((byte)0);
      GXCommon.setObjectCount(count,tmp);
    }
  }
 else   if (cmd != Command.None && !this.getUseLogicalNameReferencing()) {
    tmp.write((byte)cmd.getValue());
  }
  if (Ciphering.getSecurity() != Security.NONE && frameSequence != -1) {
    try {
      int cnt=count;
      if (count + index[0] > packet.limit()) {
        cnt=packet.limit() - index[0];
      }
      tmp.write(packet.array(),index[0],cnt);
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
    packet.clear();
    Ciphering.setFrameCounter(Ciphering.getFrameCounter() + 1);
    Command gloCmd;
    if (cmd == Command.ReadRequest || cmd == Command.GetRequest) {
      gloCmd=Command.GloGetRequest;
    }
 else     if (cmd == Command.WriteRequest || cmd == Command.SetRequest) {
      gloCmd=Command.GloSetRequest;
    }
 else     if (cmd == Command.MethodRequest) {
      gloCmd=Command.GloMethodRequest;
    }
 else     if (cmd == Command.ReadResponse || cmd == Command.GetResponse) {
      gloCmd=Command.GloGetResponse;
    }
 else     if (cmd == Command.WriteResponse || cmd == Command.SetResponse) {
      gloCmd=Command.GloSetResponse;
    }
 else     if (cmd == Command.MethodResponse) {
      gloCmd=Command.GloMethodResponse;
    }
 else {
      throw new GXDLMSException(""String_Node_Str"");
    }
    byte[] tmp2=tmp.toByteArray();
    packet=java.nio.ByteBuffer.wrap(GXDLMSChippering.EncryptAesGcm(gloCmd,Ciphering.getSecurity(),Ciphering.getFrameCounter(),Ciphering.getSystemTitle(),Ciphering.getBlockCipherKey(),Ciphering.getAuthenticationKey(),tmp2));
    packet.position(packet.limit());
    count=packet.position();
    tmp.reset();
    try {
      if (this.getInterfaceType() == InterfaceType.GENERAL) {
        if (getServer()) {
          tmp.write(GXCommon.LLCReplyBytes);
        }
 else {
          tmp.write(GXCommon.LLCSendBytes);
        }
      }
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
  }
  int dataSize;
  if (this.getInterfaceType() == InterfaceType.NET) {
    dataSize=getMaxReceivePDUSize();
  }
 else {
    if (cmd == Command.GetRequest || cmd == Command.MethodRequest || cmd == Command.ReadRequest || cmd == Command.SetRequest || cmd == Command.WriteRequest) {
      dataSize=GXCommon.intValue(getLimits().getMaxInfoTX());
    }
 else {
      dataSize=GXCommon.intValue(getLimits().getMaxInfoRX());
    }
  }
  if (count + index[0] > packet.limit()) {
    count=packet.limit() - index[0];
  }
  packet.position(index[0]);
  byte[] tmp2=new byte[count];
  packet.get(tmp2);
  try {
    tmp.write(tmp2);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex.getMessage());
  }
  index[0]+=count;
  count=tmp.size();
  if (count < dataSize) {
    dataSize=count;
  }
  int cnt=(int)(count / dataSize);
  if (count % dataSize != 0) {
    ++cnt;
  }
  int start=0;
  byte[][] buff=new byte[cnt][];
  for (int pos=0; pos < cnt; ++pos) {
    byte id;
    if (pos == 0) {
      id=generateIFrame();
    }
 else {
      id=generateNextFrame();
    }
    if (start + dataSize > count) {
      dataSize=count - start;
    }
    buff[pos]=addFrame(id,cnt != 1 && pos < cnt - 1,tmp.toByteArray(),start,dataSize);
    start+=dataSize;
  }
  return buff;
}"
53271,"/** 
 * Generate AARQ request.  Because all meters can't read all data in one packet,  the packet must be split first, by using SplitDataToPackets method.
 * @param Tags
 * @return AARQ request as byte array.
 * @see GXDLMSClient#parseAAREResponse     
 * @see GXDLMSClient#isDLMSPacketComplete
 */
public final byte[][] AARQRequest(GXDLMSTagCollection Tags){
  java.nio.ByteBuffer buff=java.nio.ByteBuffer.allocate(200);
  m_Base.checkInit();
  GXAPDU aarq=new GXAPDU(Tags);
  aarq.setUseLN(this.getUseLogicalNameReferencing());
  if (this.getUseLogicalNameReferencing()) {
    m_Base.setSNSettings(null);
    m_Base.setLNSettings(new GXDLMSLNSettings(new byte[]{0x00,0x7E,0x1F}));
    aarq.userInformation.conformanceBlock=getLNSettings().conformanceBlock;
  }
 else {
    m_Base.setLNSettings(null);
    m_Base.setSNSettings(new GXDLMSSNSettings(new byte[]{0x1C,0x03,0x20}));
    aarq.userInformation.conformanceBlock=getSNSettings().conformanceBlock;
  }
  aarq.setAuthentication(this.getAuthentication(),getPassword());
  aarq.userInformation.dlmsVersioNumber=getDLMSVersion();
  aarq.userInformation.maxReceivePDUSize=getMaxReceivePDUSize();
  m_Base.StoCChallenge=null;
  if (getAuthentication().ordinal() > Authentication.HIGH.ordinal()) {
    m_Base.CtoSChallenge=GXDLMS.generateChallenge();
  }
 else {
    m_Base.CtoSChallenge=null;
  }
  try {
    aarq.codeData(buff,getInterfaceType(),m_Base.CtoSChallenge);
  }
 catch (  UnsupportedEncodingException ex) {
    throw new RuntimeException(ex.getMessage());
  }
  m_Base.frameSequence=-1;
  m_Base.expectedFrame=-1;
  return m_Base.splitToBlocks(buff,Command.None);
}","/** 
 * Generate AARQ request.  Because all meters can't read all data in one packet,  the packet must be split first, by using SplitDataToPackets method.
 * @param Tags
 * @return AARQ request as byte array.
 * @see GXDLMSClient#parseAAREResponse     
 * @see GXDLMSClient#isDLMSPacketComplete
 */
public final byte[][] AARQRequest(GXDLMSTagCollection Tags){
  java.nio.ByteBuffer buff=java.nio.ByteBuffer.allocate(200);
  m_Base.checkInit();
  GXAPDU aarq=new GXAPDU(Tags);
  aarq.setUseLN(this.getUseLogicalNameReferencing());
  if (this.getUseLogicalNameReferencing()) {
    m_Base.setSNSettings(null);
    m_Base.setLNSettings(new GXDLMSLNSettings(new byte[]{0x00,0x7E,0x1F}));
    aarq.userInformation.conformanceBlock=getLNSettings().conformanceBlock;
  }
 else {
    m_Base.setLNSettings(null);
    m_Base.setSNSettings(new GXDLMSSNSettings(new byte[]{0x1C,0x03,0x20}));
    aarq.userInformation.conformanceBlock=getSNSettings().conformanceBlock;
  }
  aarq.setAuthentication(this.getAuthentication(),getPassword());
  aarq.userInformation.dlmsVersioNumber=getDLMSVersion();
  aarq.userInformation.maxReceivePDUSize=getMaxReceivePDUSize();
  m_Base.StoCChallenge=null;
  if (getAuthentication().ordinal() > Authentication.HIGH.ordinal()) {
    m_Base.CtoSChallenge=GXDLMS.generateChallenge();
  }
 else {
    m_Base.CtoSChallenge=null;
  }
  try {
    aarq.codeData(buff,getInterfaceType(),m_Base.CtoSChallenge);
  }
 catch (  UnsupportedEncodingException ex) {
    throw new RuntimeException(ex.getMessage());
  }
  m_Base.frameSequence=-1;
  m_Base.expectedFrame=-1;
  return m_Base.splitToBlocks(buff,Command.None,false);
}"
53272,"/** 
 * List of available obis codes. This list is used when Association view is read from the meter and description of the object is needed. If collection is not set description of object is empty.
 */
public final GXObisCodeCollection getObisCodes(){
  return privateObisCodes;
}","/** 
 * List of available OBIS codes. This list is used when Association view is read from the meter and description of the object is needed. If collection is not set description of object is empty.
 */
public final GXObisCodeCollection getObisCodes(){
  return privateObisCodes;
}"
53273,"/** 
 * Reserved for internal use.
 */
final byte[][] generateMessage(Object name,byte[] data,ObjectType interfaceClass,int AttributeOrdinal,Command cmd){
  if (getLimits().getMaxInfoRX() == null) {
    throw new GXDLMSException(""String_Node_Str"");
  }
  boolean asList=false;
  java.nio.ByteBuffer buff;
  if (name instanceof byte[]) {
    buff=java.nio.ByteBuffer.wrap((byte[])name);
  }
 else {
    if (name == null) {
      buff=java.nio.ByteBuffer.wrap(data);
    }
 else     if (getUseLogicalNameReferencing()) {
      int len=data == null ? 0 : data.length;
      if (cmd == Command.GetRequest || cmd == Command.SetRequest || cmd == Command.MethodRequest) {
        if (name instanceof List) {
          asList=true;
          List<AbstractMap.SimpleEntry<GXDLMSObject,Integer>> tmp=(List<AbstractMap.SimpleEntry<GXDLMSObject,Integer>>)name;
          buff=java.nio.ByteBuffer.allocate(20 + len + tmp.size() * 10);
          buff.put((byte)tmp.size());
          for (          AbstractMap.SimpleEntry<GXDLMSObject,Integer> it : tmp) {
            GXCommon.setUInt16((short)it.getKey().getObjectType().getValue(),buff);
            String[] items=it.getKey().getLogicalName().split(""String_Node_Str"");
            if (items.length != 6) {
              throw new GXDLMSException(""String_Node_Str"");
            }
            for (            String it2 : items) {
              buff.put(Integer.valueOf(it2).byteValue());
            }
            buff.put(it.getValue().byteValue());
            buff.put((byte)0);
          }
        }
 else {
          buff=java.nio.ByteBuffer.allocate(20 + len);
          buff.putShort((short)interfaceClass.getValue());
          String[] items=((String)name).split(""String_Node_Str"",-1);
          if (items.length != 6) {
            throw new GXDLMSException(""String_Node_Str"");
          }
          for (          String it : items) {
            buff.put((byte)(Short.parseShort(it) & 0xFF));
          }
          buff.put((byte)AttributeOrdinal);
          if (cmd == Command.SetRequest) {
            buff.put((byte)0);
            if (getUseLogicalNameReferencing() && data.length + buff.position() >= getMaxReceivePDUSize()) {
              byte[] tmp=new byte[buff.position()];
              buff.position(0);
              buff.get(tmp);
              java.nio.ByteBuffer tmp2=java.nio.ByteBuffer.wrap(data);
              tmp2.position(data.length);
              return splitToBlocks(tmp2,cmd,false,tmp);
            }
          }
          if (data == null || data.length == 0) {
            buff.put((byte)0);
          }
 else {
            buff.put((byte)1);
          }
        }
      }
 else {
        buff=java.nio.ByteBuffer.allocate(20 + len);
      }
    }
 else {
      int len=data == null ? 0 : data.length;
      if (name instanceof List) {
        List<AbstractMap.SimpleEntry<GXDLMSObject,Integer>> tmp=(List<AbstractMap.SimpleEntry<GXDLMSObject,Integer>>)name;
        buff=java.nio.ByteBuffer.allocate(10 + tmp.size() * 3);
        buff.put((byte)tmp.size());
        for (        AbstractMap.SimpleEntry<GXDLMSObject,Integer> it : tmp) {
          buff.put((byte)2);
          int base_address=it.getKey().getShortName();
          base_address+=((it.getValue() - 1) * 8);
          GXCommon.setUInt16((short)base_address,buff);
        }
      }
 else {
        buff=java.nio.ByteBuffer.allocate(11 + len);
        buff.put((byte)1);
        if (cmd == Command.ReadResponse || cmd == Command.WriteResponse) {
          buff.put((byte)0x0);
        }
 else {
          if (cmd == Command.WriteRequest || data == null || data.length == 0) {
            buff.put((byte)2);
          }
 else {
            buff.put((byte)4);
          }
          int base_address=GXCommon.intValue(name);
          if (AttributeOrdinal != 0) {
            base_address+=((AttributeOrdinal - 1) * 8);
          }
          buff.putShort((short)base_address);
        }
      }
    }
    if (data != null && data.length != 0) {
      if (cmd == Command.WriteRequest) {
        buff.put((byte)1);
      }
      buff.put(data);
    }
  }
  return splitToBlocks(buff,cmd,asList,null);
}","/** 
 * Reserved for internal use.
 */
final byte[][] generateMessage(Object name,byte[] data,ObjectType interfaceClass,int AttributeOrdinal,Command cmd){
  if (getLimits().getMaxInfoRX() == null) {
    throw new GXDLMSException(""String_Node_Str"");
  }
  boolean asList=false;
  java.nio.ByteBuffer buff;
  if (name instanceof byte[]) {
    buff=java.nio.ByteBuffer.wrap((byte[])name);
  }
 else {
    if (name == null) {
      buff=java.nio.ByteBuffer.wrap(data);
    }
 else     if (getUseLogicalNameReferencing()) {
      int len=data == null ? 0 : data.length;
      if (cmd == Command.GetRequest || cmd == Command.SetRequest || cmd == Command.MethodRequest) {
        if (name instanceof List) {
          asList=true;
          List<AbstractMap.SimpleEntry<GXDLMSObject,Integer>> tmp=(List<AbstractMap.SimpleEntry<GXDLMSObject,Integer>>)name;
          buff=java.nio.ByteBuffer.allocate(20 + len + tmp.size() * 10);
          buff.put((byte)tmp.size());
          for (          AbstractMap.SimpleEntry<GXDLMSObject,Integer> it : tmp) {
            GXCommon.setUInt16((short)it.getKey().getObjectType().getValue(),buff);
            String[] items=it.getKey().getLogicalName().split(""String_Node_Str"");
            if (items.length != 6) {
              throw new GXDLMSException(""String_Node_Str"");
            }
            for (            String it2 : items) {
              buff.put(Integer.valueOf(it2).byteValue());
            }
            buff.put(it.getValue().byteValue());
            buff.put((byte)0);
          }
        }
 else {
          buff=java.nio.ByteBuffer.allocate(20 + len);
          buff.putShort((short)interfaceClass.getValue());
          String[] items=((String)name).split(""String_Node_Str"",-1);
          if (items.length != 6) {
            throw new GXDLMSException(""String_Node_Str"");
          }
          for (          String it : items) {
            buff.put((byte)(Short.parseShort(it) & 0xFF));
          }
          buff.put((byte)AttributeOrdinal);
          if (cmd == Command.SetRequest) {
            buff.put((byte)0);
            if (getUseLogicalNameReferencing() && data.length + buff.position() >= getMaxReceivePDUSize()) {
              byte[] tmp=new byte[buff.position()];
              buff.position(0);
              buff.get(tmp);
              java.nio.ByteBuffer tmp2=java.nio.ByteBuffer.wrap(data);
              tmp2.position(data.length);
              return splitToBlocks(tmp2,cmd,false,tmp);
            }
          }
 else           if (data == null || data.length == 0) {
            buff.put((byte)0);
          }
 else {
            buff.put((byte)1);
          }
        }
      }
 else {
        buff=java.nio.ByteBuffer.allocate(20 + len);
      }
    }
 else {
      int len=data == null ? 0 : data.length;
      if (name instanceof List) {
        List<AbstractMap.SimpleEntry<GXDLMSObject,Integer>> tmp=(List<AbstractMap.SimpleEntry<GXDLMSObject,Integer>>)name;
        buff=java.nio.ByteBuffer.allocate(10 + tmp.size() * 3);
        buff.put((byte)tmp.size());
        for (        AbstractMap.SimpleEntry<GXDLMSObject,Integer> it : tmp) {
          buff.put((byte)2);
          int base_address=it.getKey().getShortName();
          base_address+=((it.getValue() - 1) * 8);
          GXCommon.setUInt16((short)base_address,buff);
        }
      }
 else {
        buff=java.nio.ByteBuffer.allocate(11 + len);
        buff.put((byte)1);
        if (cmd == Command.ReadResponse || cmd == Command.WriteResponse) {
          buff.put((byte)0x0);
        }
 else {
          if (cmd == Command.WriteRequest || data == null || data.length == 0) {
            buff.put((byte)2);
          }
 else {
            buff.put((byte)4);
          }
          int base_address=GXCommon.intValue(name);
          if (AttributeOrdinal != 0) {
            base_address+=((AttributeOrdinal - 1) * 8);
          }
          buff.putShort((short)base_address);
        }
      }
    }
    if (data != null && data.length != 0) {
      if (cmd == Command.WriteRequest) {
        buff.put((byte)1);
      }
      buff.put(data);
    }
  }
  return splitToBlocks(buff,cmd,asList,null);
}"
53274,"/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSRegister(String ln,int sn){
  this(ObjectType.REGISTER,ln,0);
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSRegister(String ln,int sn){
  this(ObjectType.REGISTER,ln,sn);
}"
53275,"/** 
 * Reserved for internal use.
 */
final byte[][] generateMessage(Object name,int parameterCount,byte[] data,ObjectType interfaceClass,int AttributeOrdinal,Command cmd){
  if (getLimits().getMaxInfoRX() == null) {
    throw new GXDLMSException(""String_Node_Str"");
  }
  java.nio.ByteBuffer buff;
  if (name instanceof byte[]) {
    buff=java.nio.ByteBuffer.wrap((byte[])name);
  }
 else {
    if (name == null) {
      buff=java.nio.ByteBuffer.wrap(data);
    }
 else     if (getUseLogicalNameReferencing()) {
      int len=data == null ? 0 : data.length;
      buff=java.nio.ByteBuffer.allocate(20 + len);
      if (cmd == Command.GetRequest || cmd == Command.SetRequest || cmd == Command.MethodRequest) {
        buff.putShort((short)interfaceClass.getValue());
        String[] items=((String)name).split(""String_Node_Str"",-1);
        if (items.length != 6) {
          throw new GXDLMSException(""String_Node_Str"");
        }
        for (        String it : items) {
          buff.put((byte)(Short.parseShort(it) & 0xFF));
        }
        buff.put((byte)AttributeOrdinal);
        if (data == null || data.length == 0) {
          buff.put((byte)0);
        }
 else {
          buff.put((byte)1);
        }
      }
    }
 else {
      int len=data == null ? 0 : data.length;
      buff=java.nio.ByteBuffer.allocate(11 + len);
      if (name.getClass().isArray()) {
        for (int pos=0; pos != Array.getLength(name); ++pos) {
          Object it=Array.get(name,pos);
          buff.put((byte)2);
          int base_address=((Number)it).shortValue() & 0xFFFF;
          base_address+=((AttributeOrdinal - 1) * 8);
          buff.putShort((short)base_address);
        }
      }
 else {
        buff.put((byte)1);
      }
      if (cmd == Command.ReadResponse || cmd == Command.WriteResponse) {
        buff.put((byte)0x0);
      }
 else {
        buff.put((byte)parameterCount);
        int base_address=GXCommon.intValue(name);
        if (cmd == Command.MethodRequest) {
          base_address+=AttributeOrdinal;
        }
 else {
          base_address+=((AttributeOrdinal - 1) * 8);
        }
        buff.putShort((short)base_address);
      }
    }
    if (data != null && data.length != 0) {
      buff.put(data);
    }
  }
  return splitToBlocks(buff,cmd);
}","/** 
 * Reserved for internal use.
 */
final byte[][] generateMessage(Object name,int parameterCount,byte[] data,ObjectType interfaceClass,int AttributeOrdinal,Command cmd){
  if (getLimits().getMaxInfoRX() == null) {
    throw new GXDLMSException(""String_Node_Str"");
  }
  java.nio.ByteBuffer buff;
  if (name instanceof byte[]) {
    buff=java.nio.ByteBuffer.wrap((byte[])name);
  }
 else {
    if (name == null) {
      buff=java.nio.ByteBuffer.wrap(data);
    }
 else     if (getUseLogicalNameReferencing()) {
      int len=data == null ? 0 : data.length;
      buff=java.nio.ByteBuffer.allocate(20 + len);
      if (cmd == Command.GetRequest || cmd == Command.SetRequest || cmd == Command.MethodRequest) {
        buff.putShort((short)interfaceClass.getValue());
        String[] items=((String)name).split(""String_Node_Str"",-1);
        if (items.length != 6) {
          throw new GXDLMSException(""String_Node_Str"");
        }
        for (        String it : items) {
          buff.put((byte)(Short.parseShort(it) & 0xFF));
        }
        buff.put((byte)AttributeOrdinal);
        if (data == null || data.length == 0 || cmd == Command.SetRequest) {
          buff.put((byte)0);
        }
 else {
          buff.put((byte)1);
        }
      }
    }
 else {
      int len=data == null ? 0 : data.length;
      buff=java.nio.ByteBuffer.allocate(11 + len);
      if (name.getClass().isArray()) {
        for (int pos=0; pos != Array.getLength(name); ++pos) {
          Object it=Array.get(name,pos);
          buff.put((byte)2);
          int base_address=((Number)it).shortValue() & 0xFFFF;
          base_address+=((AttributeOrdinal - 1) * 8);
          buff.putShort((short)base_address);
        }
      }
 else {
        buff.put((byte)1);
      }
      if (cmd == Command.ReadResponse || cmd == Command.WriteResponse) {
        buff.put((byte)0x0);
      }
 else {
        buff.put((byte)parameterCount);
        int base_address=GXCommon.intValue(name);
        if (cmd == Command.MethodRequest) {
          base_address+=AttributeOrdinal;
        }
 else {
          base_address+=((AttributeOrdinal - 1) * 8);
        }
        buff.putShort((short)base_address);
      }
    }
    if (data != null && data.length != 0) {
      buff.put(data);
    }
  }
  return splitToBlocks(buff,cmd);
}"
53276,"private boolean getLNData(java.nio.ByteBuffer buff,int[] pError,java.util.Set<RequestTypes> MoreData,int command){
  int res=command;
  buff.get();
  if (res == 0xD8) {
    StateError stateError=StateError.forValue(buff.get());
    ServiceError serviceError=ServiceError.forValue(buff.get());
    throw new GXDLMSException(stateError.toString() + ""String_Node_Str"" + serviceError.toString());
  }
  boolean server=this.getServer();
  if (res != 0x60 && res != 0x63 && res != Command.GetResponse.getValue() && res != Command.SetResponse.getValue() && res != Command.SetRequest.getValue() && res != Command.GetRequest.getValue() && res != Command.MethodRequest.getValue() && res != Command.MethodResponse.getValue()) {
    throw new GXDLMSException(""String_Node_Str"");
  }
  byte AttributeID=buff.get();
  buff.get();
  if (server && AttributeID == 0x2) {
    MoreData.add(RequestTypes.DATABLOCK);
  }
 else   if (res == Command.SetRequest.getValue()) {
    MoreData.clear();
  }
 else   if (res == Command.SetResponse.getValue() || res == Command.MethodResponse.getValue()) {
    if (buff.get() != 0) {
      pError[0]=buff.get();
    }
  }
 else {
    if (server && AttributeID == 0x01) {
    }
 else {
      byte Priority=buff.get();
      if (AttributeID == 0x01 && Priority != 0) {
        pError[0]=buff.get();
      }
 else {
        if (AttributeID == 0x02) {
          if (Priority == 0) {
            MoreData.add(RequestTypes.DATABLOCK);
          }
          packetIndex=buff.getInt();
          buff.get();
          int[] index=new int[]{buff.position()};
          GXCommon.getObjectCount(buff,index);
          buff.position(index[0]);
        }
      }
    }
  }
  return true;
}","private boolean getLNData(java.nio.ByteBuffer buff,int[] pError,java.util.Set<RequestTypes> MoreData,int command){
  int res=command;
  buff.get();
  if (res == 0xD8) {
    StateError stateError=StateError.forValue(buff.get());
    ServiceError serviceError=ServiceError.forValue(buff.get());
    throw new GXDLMSException(stateError.toString() + ""String_Node_Str"" + serviceError.toString());
  }
  boolean server=this.getServer();
  if (res != 0x60 && res != 0x63 && res != Command.GetResponse.getValue() && res != Command.SetResponse.getValue() && res != Command.SetRequest.getValue() && res != Command.GetRequest.getValue() && res != Command.MethodRequest.getValue() && res != Command.MethodResponse.getValue()) {
    throw new GXDLMSException(""String_Node_Str"");
  }
  byte AttributeID=buff.get();
  buff.get();
  if (server && AttributeID == 0x2) {
    MoreData.add(RequestTypes.DATABLOCK);
  }
 else   if (res == Command.SetRequest.getValue()) {
    MoreData.clear();
  }
 else   if (res == Command.SetResponse.getValue() || res == Command.MethodResponse.getValue()) {
    pError[0]=buff.get();
  }
 else {
    if (server && AttributeID == 0x01) {
    }
 else {
      byte Priority=buff.get();
      if (AttributeID == 0x01 && Priority != 0) {
        pError[0]=buff.get();
      }
 else {
        if (AttributeID == 0x02) {
          if (Priority == 0) {
            MoreData.add(RequestTypes.DATABLOCK);
          }
          packetIndex=buff.getInt();
          buff.get();
          int[] index=new int[]{buff.position()};
          GXCommon.getObjectCount(buff,index);
          buff.position(index[0]);
        }
      }
    }
  }
  return true;
}"
53277,"/** 
 * The window size in transmit. DefaultValue is 1.
 */
public final Object getWindowSizeTX(){
  return privateWindowSizeTX;
}","/** 
 * The window size in transmit. DefaultValue is 1.
 */
public final Object getWindowSizeTX(){
  return WindowSizeTX;
}"
53278,"public final void setMaxInfoRX(Object value){
  privateMaxInfoRX=value;
}","public final void setMaxInfoRX(Object value){
  MaxInfoRX=value;
}"
53279,"/** 
 * The window size in receive. DefaultValue is 1.
 */
public final Object getWindowSizeRX(){
  return privateWindowSizeRX;
}","/** 
 * The window size in receive. DefaultValue is 1.
 */
public final Object getWindowSizeRX(){
  return WindowSizeRX;
}"
53280,"public final void setMaxInfoTX(Object value){
  privateMaxInfoTX=value;
}","public final void setMaxInfoTX(Object value){
  MaxInfoTX=value;
}"
53281,"public final void setWindowSizeTX(Object value){
  privateWindowSizeTX=value;
}","public final void setWindowSizeTX(Object value){
  WindowSizeTX=value;
}"
53282,"GXDLMSLimits(){
  setMaxInfoTX((short)128);
  setMaxInfoRX((byte)128);
  setWindowSizeTX((byte)1);
  setWindowSizeRX(getWindowSizeTX());
}","GXDLMSLimits(){
  setMaxInfoTX((byte)128);
  setMaxInfoRX((byte)128);
  setWindowSizeTX((byte)1);
  setWindowSizeRX(getWindowSizeTX());
}"
53283,"public final void setWindowSizeRX(Object value){
  privateWindowSizeRX=value;
}","public final void setWindowSizeRX(Object value){
  WindowSizeRX=value;
}"
53284,"/** 
 * The maximum information field length in receive. DefaultValue is 62.
 */
public final Object getMaxInfoRX(){
  return privateMaxInfoRX;
}","/** 
 * The maximum information field length in receive. DefaultValue is 62.
 */
public final Object getMaxInfoRX(){
  return MaxInfoRX;
}"
53285,"/** 
 * The maximum information field length in transmit. 	  DefaultValue is 128.	 
 */
public final Object getMaxInfoTX(){
  return privateMaxInfoTX;
}","/** 
 * The maximum information field length in transmit. 	  DefaultValue is 128.	 
 */
public final Object getMaxInfoTX(){
  return MaxInfoTX;
}"
53286,"/** 
 * Generates a acknowledge message.
 */
public final byte[][] serverReportError(Command cmd,int serviceErrorCode){
  java.nio.ByteBuffer buff=java.nio.ByteBuffer.allocate(4);
switch (cmd) {
case ReadRequest:
    cmd=Command.ReadResponse;
  break;
case WriteRequest:
cmd=Command.WriteResponse;
break;
case GetRequest:
cmd=Command.GetResponse;
break;
case SetRequest:
cmd=Command.SetResponse;
break;
case MethodRequest:
cmd=Command.MethodResponse;
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
if (!this.getUseLogicalNameReferencing()) {
buff.put((byte)0x00);
buff.put((byte)0x01);
}
buff.put((byte)serviceErrorCode);
int index[]=new int[1];
return m_Base.splitToFrames(buff,1,index,buff.position(),cmd,1);
}","/** 
 * Generates a acknowledge message.
 */
public final byte[][] serverReportError(Command cmd,int serviceErrorCode){
  java.nio.ByteBuffer buff=java.nio.ByteBuffer.allocate(4);
switch (cmd) {
case ReadRequest:
    cmd=Command.ReadResponse;
  break;
case WriteRequest:
cmd=Command.WriteResponse;
break;
case GetRequest:
cmd=Command.GetResponse;
break;
case SetRequest:
cmd=Command.SetResponse;
break;
case MethodRequest:
cmd=Command.MethodResponse;
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
if (!this.getUseLogicalNameReferencing()) {
buff.put((byte)0x01);
buff.put((byte)0x01);
buff.put((byte)serviceErrorCode);
}
int index[]=new int[1];
return m_Base.splitToFrames(buff,1,index,buff.position(),cmd,serviceErrorCode);
}"
53287,"/** 
 * Generate disconnect request.
 */
private byte[] generateDisconnectRequest() throws Exception {
  if (this.getInterfaceType() == InterfaceType.NET) {
    java.nio.ByteBuffer buff=java.nio.ByteBuffer.allocate(2);
    buff.put((byte)0x63);
    buff.put((byte)0x0);
    return m_Base.addFrame((byte)0,false,buff,0,buff.position());
  }
  java.nio.ByteBuffer buff=java.nio.ByteBuffer.allocate(20);
  buff.put((byte)HDLCInfo.MaxInfoTX);
  setValue(buff,getLimits().getMaxInfoTX());
  buff.put((byte)HDLCInfo.MaxInfoRX);
  setValue(buff,getLimits().getMaxInfoRX());
  buff.put((byte)HDLCInfo.WindowSizeTX);
  setValue(buff,getLimits().getWindowSizeTX());
  buff.put((byte)HDLCInfo.WindowSizeRX);
  setValue(buff,getLimits().getWindowSizeRX());
  byte len=(byte)buff.position();
  buff.put(0,(byte)0x81);
  buff.put(1,(byte)0x80);
  buff.put(2,len);
  return m_Base.addFrame(FrameType.UA.getValue(),false,buff,0,buff.position());
}","/** 
 * Generate disconnect request.
 */
private byte[] generateDisconnectRequest() throws Exception {
  if (this.getInterfaceType() == InterfaceType.NET) {
    java.nio.ByteBuffer buff=java.nio.ByteBuffer.allocate(2);
    buff.put((byte)0x63);
    buff.put((byte)0x0);
    return m_Base.addFrame((byte)0,false,buff,0,buff.position());
  }
  java.nio.ByteBuffer buff=java.nio.ByteBuffer.allocate(20);
  buff.put((byte)0x81);
  buff.put((byte)0x80);
  buff.put((byte)0);
  buff.put((byte)HDLCInfo.MaxInfoTX);
  setValue(buff,getLimits().getMaxInfoTX());
  buff.put((byte)HDLCInfo.MaxInfoRX);
  setValue(buff,getLimits().getMaxInfoRX());
  buff.put((byte)HDLCInfo.WindowSizeTX);
  setValue(buff,getLimits().getWindowSizeTX());
  buff.put((byte)HDLCInfo.WindowSizeRX);
  setValue(buff,getLimits().getWindowSizeRX());
  byte len=(byte)(buff.position() - 3);
  buff.put(2,len);
  return m_Base.addFrame(FrameType.UA.getValue(),false,buff,0,buff.position());
}"
53288,"private byte[] getValue(Object name,GXDLMSObject item,int index,int selector,Object parameters) throws RuntimeException, UnsupportedEncodingException, ParseException, IOException {
  Object value;
  IGXDLMSBase base=(IGXDLMSBase)item;
  if (base != null) {
    value=item.getValue(index,selector,parameters);
    DataType tp=item.getDataType(index);
    if (tp == DataType.NONE) {
      tp=GXCommon.getValueType(value);
    }
    if (tp != DataType.NONE || (value == null && tp == DataType.NONE)) {
      SendData.addAll(Arrays.asList(readReply(name,item.getObjectType(),index,value,tp)));
      return SendData.get(FrameIndex);
    }
  }
 else {
    Object[] values=item.getValues();
    if (index <= values.length) {
      value=values[index - 1];
      DataType tp=item.getDataType(index);
      if (tp == DataType.NONE) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      if (tp != DataType.NONE || (value == null && tp == DataType.NONE)) {
        SendData.addAll(Arrays.asList(readReply(name,item.getObjectType(),index,value,tp)));
        return SendData.get(FrameIndex);
      }
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}","private byte[] getValue(Object name,GXDLMSObject item,int index,int selector,Object parameters) throws RuntimeException, UnsupportedEncodingException, ParseException, IOException {
  Object value;
  IGXDLMSBase base=(IGXDLMSBase)item;
  if (base != null) {
    value=item.getValue(index,selector,parameters);
    DataType tp=item.getDataType(index);
    if (tp == DataType.NONE) {
      tp=GXCommon.getValueType(value);
    }
    if (tp == DataType.OCTET_STRING && value instanceof String && item.getUIDataType(index) == DataType.STRING) {
      value=((String)value).getBytes(""String_Node_Str"");
    }
    if (tp != DataType.NONE || (value == null && tp == DataType.NONE)) {
      SendData.addAll(Arrays.asList(readReply(name,item.getObjectType(),index,value,tp)));
      return SendData.get(FrameIndex);
    }
  }
 else {
    Object[] values=item.getValues();
    if (index <= values.length) {
      value=values[index - 1];
      DataType tp=item.getDataType(index);
      if (tp == DataType.NONE) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      if (tp != DataType.NONE || (value == null && tp == DataType.NONE)) {
        SendData.addAll(Arrays.asList(readReply(name,item.getObjectType(),index,value,tp)));
        return SendData.get(FrameIndex);
      }
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}"
53289,"/** 
 * Mandles client request.
 * @param buff Received data from the client.
 * @return Response to the request.        Response is null if request packet is not compleate.
 */
public final byte[] handleRequest(byte[] buff){
  if (buff == null) {
    return null;
  }
  if (!Initialized) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int[] command=new int[1];
  try {
    byte[] data;
    if (ReceivedFrame.size() != 0) {
      ReceivedFrame.write(buff);
      data=ReceivedFrame.toByteArray();
    }
 else {
      data=buff;
    }
    if (m_Base.getServerID() == null) {
      Object[] sid=new Object[1], cid=new Object[1];
      getAddress(data,cid,sid);
      for (      Object it : this.getServerIDs()) {
        if (((Number)sid[0]).intValue() == ((Number)it).intValue()) {
          m_Base.setServerID(sid[0]);
          m_Base.setClientID(cid[0]);
          break;
        }
      }
      if (m_Base.getServerID() == null) {
        invalidConnection(new ConnectionEventArgs(sid));
        return null;
      }
    }
    if (!m_Base.isDLMSPacketComplete(data)) {
      if (ReceivedFrame.size() == 0) {
        ReceivedFrame.write(buff);
      }
      return null;
    }
    List<Object> names=new ArrayList<Object>();
    GXDLMSObject item=null;
    ByteArrayOutputStream tmp=new ByteArrayOutputStream();
    byte[] frame=new byte[1];
    java.util.Set<RequestTypes> ret=m_Base.getDataFromPacket(data,tmp,frame,command);
    byte[] allData=tmp.toByteArray();
    ReceivedFrame.reset();
    if (ret.contains(RequestTypes.FRAME)) {
      ++FrameIndex;
      if ((frame[0] & 0x1) == 0) {
        if (command[0] != 0) {
          LastCommand=command[0];
        }
        ReceivedData.write(allData);
        SendData.clear();
        FrameIndex=0;
        --m_Base.expectedFrame;
        return m_Base.receiverReady(RequestTypes.FRAME);
      }
 else       if (FrameIndex >= SendData.size() && (frame[0] & 0x1) == 1) {
        SendData.clear();
        FrameIndex=0;
        return m_Base.addFrame(m_Base.generateAliveFrame(),false,(byte[])null,0,0);
      }
      return SendData.get(FrameIndex);
    }
 else     if (ret.contains(RequestTypes.DATABLOCK)) {
      if ((frame[0] & 0x1) == 0) {
        if (command[0] != 0) {
          LastCommand=command[0];
        }
        ReceivedData.write(allData);
        SendData.clear();
        FrameIndex=0;
        return m_Base.receiverReady(RequestTypes.DATABLOCK);
      }
      ++FrameIndex;
      int[] index=new int[1];
      int BlockIndex=(int)GXCommon.getUInt32(allData,index);
      return SendData.get(FrameIndex);
    }
    if (ReceivedData.size() != 0) {
      ReceivedData.write(allData);
      allData=ReceivedData.toByteArray();
      ReceivedData.reset();
      command[0]=LastCommand;
    }
    FrameIndex=0;
    SendData.clear();
    if (command[0] == Command.GloGetRequest.getValue() || command[0] == Command.GloSetRequest.getValue() || command[0] == Command.GloMethodRequest.getValue()) {
      Command[] cmd=new Command[1];
      allData=m_Base.decrypt(allData,cmd);
      command[0]=cmd[0].getValue();
    }
    if (command[0] == Command.Snrm.getValue()) {
      SendData.add(handleSnrmRequest());
      return SendData.get(FrameIndex);
    }
 else     if (command[0] == Command.Aarq.getValue()) {
      SendData.add(handleAARQRequest(data));
      return SendData.get(FrameIndex);
    }
 else     if (command[0] == Command.DisconnectRequest.getValue()) {
      SendData.add(generateDisconnectRequest());
      return SendData.get(FrameIndex);
    }
 else     if (command[0] == Command.WriteRequest.getValue()) {
      int attributeIndex;
      int tmp2[]=new int[1];
      Object[] value=new Object[1];
      ObjectType[] type=new ObjectType[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,tmp2,selector,value);
      int sn=(int)names.get(0);
      for (      Map.Entry<Integer,GXDLMSObject> it : SortedItems.entrySet()) {
        int aCnt=((IGXDLMSBase)it.getValue()).getAttributeCount();
        if (sn >= it.getKey() && sn <= (it.getKey() + (8 * aCnt))) {
          item=it.getValue();
          attributeIndex=((sn - item.getShortName()) / 8) + 1;
          AccessMode acc=item.getAccess(attributeIndex);
          if (acc == AccessMode.NO_ACCESS || acc == AccessMode.READ || acc == AccessMode.AUTHENTICATED_READ) {
            SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
            return SendData.get(FrameIndex);
          }
          if (value instanceof Byte[]) {
            DataType tp=item.getUIDataType(attributeIndex);
            if (tp != DataType.NONE) {
              value[0]=GXDLMSClient.changeType((byte[])value[0],tp);
            }
          }
          ValueEventArgs e=new ValueEventArgs(item,attributeIndex,selector[0]);
          e.setValue(value[0]);
          write(e);
          if (!e.getHandled()) {
            ((IGXDLMSBase)item).setValue(attributeIndex,value[0]);
          }
          SendData.addAll(Arrays.asList(acknowledge(getUseLogicalNameReferencing() ? Command.SetResponse : Command.WriteResponse,0)));
          return SendData.get(FrameIndex);
        }
      }
      if (item == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (command[0] == Command.SetRequest.getValue()) {
      int attributeIndex[]=new int[1];
      Object[] value=new Object[1];
      ObjectType[] type=new ObjectType[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,attributeIndex,selector,value);
      item=getItems().findByLN(type[0],names.get(0).toString());
      if (item != null) {
        AccessMode acc=item.getAccess(attributeIndex[0]);
        if (acc == AccessMode.NO_ACCESS || acc == AccessMode.READ || acc == AccessMode.AUTHENTICATED_READ) {
          SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
          return SendData.get(FrameIndex);
        }
        if (value instanceof Byte[]) {
          DataType tp=item.getUIDataType(attributeIndex[0]);
          if (tp != DataType.NONE) {
            value[0]=GXDLMSClient.changeType((byte[])value[0],tp);
          }
        }
        ValueEventArgs e=new ValueEventArgs(item,attributeIndex[0],selector[0]);
        e.setValue(value[0]);
        write(e);
        if (!e.getHandled()) {
          ((IGXDLMSBase)item).setValue(attributeIndex[0],value[0]);
        }
        SendData.addAll(Arrays.asList(acknowledge(getUseLogicalNameReferencing() ? Command.SetResponse : Command.WriteResponse,0)));
        return SendData.get(FrameIndex);
      }
      throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     if (command[0] == Command.ReadRequest.getValue() && !getUseLogicalNameReferencing()) {
      int attributeIndex;
      int tmp2[]=new int[1];
      Object[] value=new Object[1];
      ObjectType[] type=new ObjectType[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,tmp2,selector,value);
      int sn=(int)names.get(0);
      for (      Map.Entry<Integer,GXDLMSObject> it : SortedItems.entrySet()) {
        int aCnt=((IGXDLMSBase)it.getValue()).getAttributeCount();
        if (sn >= it.getKey() && sn <= (it.getKey() + (8 * aCnt))) {
          item=it.getValue();
          attributeIndex=((sn - item.getShortName()) / 8) + 1;
          ValueEventArgs e=new ValueEventArgs(item,attributeIndex,selector[0]);
          e.setValue(value[0]);
          read(e);
          if (e.getHandled()) {
            DataType tp=item.getDataType(attributeIndex);
            SendData.addAll(Arrays.asList(readReply(names.get(0),type[0],attributeIndex,e.getValue(),tp)));
            return SendData.get(FrameIndex);
          }
          if (item != null) {
            return getValue(names.get(0),item,attributeIndex,selector[0],value[0]);
          }
        }
 else         if (sn >= it.getKey() + aCnt && ((IGXDLMSBase)it.getValue()).getMethodCount() != 0) {
          int[] value2=new int[1], count=new int[1];
          GXDLMS.getActionInfo(it.getValue().getObjectType(),value2,count);
          if (sn <= it.getKey() + value2[0] + (8 * count[0])) {
            item=it.getValue();
            attributeIndex=((sn - item.getShortName() - value2[0]) / 8) + 1;
            ValueEventArgs e=new ValueEventArgs(item,attributeIndex,selector[0]);
            e.setValue(value[0]);
            action(e);
            if (!e.getHandled()) {
              byte[][] reply=((IGXDLMSBase)item).invoke(this,attributeIndex,e.getValue());
              if (reply != null) {
                SendData.addAll(Arrays.asList(reply));
                return SendData.get(FrameIndex);
              }
            }
            SendData.addAll(Arrays.asList(acknowledge(Command.MethodResponse,0)));
            return SendData.get(FrameIndex);
          }
        }
      }
      throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     if (command[0] == Command.GetRequest.getValue() && getUseLogicalNameReferencing()) {
      ObjectType[] type=new ObjectType[]{ObjectType.NONE};
      int[] index=new int[1];
      Object[] parameter=new Object[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,index,selector,parameter);
      System.out.println(String.format(""String_Node_Str"",names,index[0]));
      item=m_Items.findByLN(type[0],names.get(0).toString());
      if (item != null) {
        ValueEventArgs e=new ValueEventArgs(item,index[0],selector[0]);
        read(e);
        if (e.getHandled()) {
          SendData.addAll(Arrays.asList(readReply(names.get(0),type[0],index[0],e.getValue(),e.getDataType())));
          return SendData.get(FrameIndex);
        }
        return getValue(names.get(0),item,index[0],selector[0],parameter[0]);
      }
    }
 else     if (command[0] == Command.MethodRequest.getValue()) {
      ObjectType[] type=new ObjectType[1];
      int[] index=new int[1];
      Object[] parameter=new Object[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,index,selector,parameter);
      item=m_Items.findByLN(type[0],names.get(0).toString());
      if (item != null) {
        System.out.println(String.format(""String_Node_Str"",names.get(0),index[0]));
        ValueEventArgs e=new ValueEventArgs(item,index[0],selector[0]);
        e.setValue(parameter[0]);
        action(e);
        if (!e.getHandled()) {
          byte[][] reply=item.invoke(this,index[0],e.getValue());
          if (reply != null) {
            SendData.addAll(Arrays.asList(reply));
            return SendData.get(FrameIndex);
          }
        }
        SendData.addAll(Arrays.asList(acknowledge(Command.MethodResponse,0)));
        return SendData.get(FrameIndex);
      }
    }
    SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
    return SendData.get(FrameIndex);
  }
 catch (  java.lang.Exception e) {
    ReceivedFrame.reset();
    SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
    return SendData.get(FrameIndex);
  }
}","/** 
 * Mandles client request.
 * @param buff Received data from the client.
 * @return Response to the request.        Response is null if request packet is not compleate.
 */
public final byte[] handleRequest(byte[] buff){
  if (buff == null) {
    return null;
  }
  if (!Initialized) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int[] command=new int[1];
  try {
    byte[] data;
    if (ReceivedFrame.size() != 0) {
      ReceivedFrame.write(buff);
      data=ReceivedFrame.toByteArray();
    }
 else {
      data=buff;
    }
    if (m_Base.getServerID() == null) {
      Object[] sid=new Object[1], cid=new Object[1];
      getAddress(data,cid,sid);
      for (      Object it : this.getServerIDs()) {
        if (((Number)sid[0]).intValue() == ((Number)it).intValue()) {
          m_Base.setServerID(sid[0]);
          m_Base.setClientID(cid[0]);
          break;
        }
      }
      if (m_Base.getServerID() == null) {
        invalidConnection(new ConnectionEventArgs(sid));
        return null;
      }
    }
    if (!m_Base.isDLMSPacketComplete(data)) {
      if (ReceivedFrame.size() == 0) {
        ReceivedFrame.write(buff);
      }
      return null;
    }
    List<Object> names=new ArrayList<Object>();
    GXDLMSObject item=null;
    ByteArrayOutputStream tmp=new ByteArrayOutputStream();
    byte[] frame=new byte[1];
    java.util.Set<RequestTypes> ret=m_Base.getDataFromPacket(data,tmp,frame,command);
    byte[] allData=tmp.toByteArray();
    ReceivedFrame.reset();
    if (ret.contains(RequestTypes.FRAME)) {
      ++FrameIndex;
      if ((frame[0] & 0x1) == 0) {
        if (command[0] != 0) {
          LastCommand=command[0];
        }
        ReceivedData.write(allData);
        SendData.clear();
        FrameIndex=0;
        --m_Base.expectedFrame;
        return m_Base.receiverReady(RequestTypes.FRAME);
      }
 else       if (FrameIndex >= SendData.size() && (frame[0] & 0x1) == 1) {
        SendData.clear();
        FrameIndex=0;
        return m_Base.addFrame(m_Base.generateAliveFrame(),false,(byte[])null,0,0);
      }
      return SendData.get(FrameIndex);
    }
 else     if (ret.contains(RequestTypes.DATABLOCK)) {
      if ((frame[0] & 0x1) == 0) {
        if (command[0] != 0) {
          LastCommand=command[0];
        }
        ReceivedData.write(allData);
        SendData.clear();
        FrameIndex=0;
        return m_Base.receiverReady(RequestTypes.DATABLOCK);
      }
      ++FrameIndex;
      int[] index=new int[1];
      int BlockIndex=(int)GXCommon.getUInt32(allData,index);
      return SendData.get(FrameIndex);
    }
    if (ReceivedData.size() != 0) {
      ReceivedData.write(allData);
      allData=ReceivedData.toByteArray();
      ReceivedData.reset();
      command[0]=LastCommand;
    }
    FrameIndex=0;
    SendData.clear();
    if (command[0] == Command.GloGetRequest.getValue() || command[0] == Command.GloSetRequest.getValue() || command[0] == Command.GloMethodRequest.getValue()) {
      Command[] cmd=new Command[1];
      allData=m_Base.decrypt(allData,cmd);
      command[0]=cmd[0].getValue();
    }
    if (command[0] == Command.Snrm.getValue()) {
      SendData.add(handleSnrmRequest());
      return SendData.get(FrameIndex);
    }
 else     if (command[0] == Command.Aarq.getValue()) {
      SendData.add(handleAARQRequest(data));
      return SendData.get(FrameIndex);
    }
 else     if (command[0] == Command.DisconnectRequest.getValue()) {
      System.out.println(""String_Node_Str"");
      SendData.add(generateDisconnectRequest());
      return SendData.get(FrameIndex);
    }
 else     if (command[0] == Command.WriteRequest.getValue()) {
      int attributeIndex;
      int tmp2[]=new int[1];
      Object[] value=new Object[1];
      ObjectType[] type=new ObjectType[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,tmp2,selector,value);
      int sn=(int)names.get(0);
      for (      Map.Entry<Integer,GXDLMSObject> it : SortedItems.entrySet()) {
        int aCnt=((IGXDLMSBase)it.getValue()).getAttributeCount();
        if (sn >= it.getKey() && sn <= (it.getKey() + (8 * aCnt))) {
          item=it.getValue();
          attributeIndex=((sn - item.getShortName()) / 8) + 1;
          AccessMode acc=item.getAccess(attributeIndex);
          if (acc == AccessMode.NO_ACCESS || acc == AccessMode.READ || acc == AccessMode.AUTHENTICATED_READ) {
            SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
            return SendData.get(FrameIndex);
          }
          if (value instanceof Byte[]) {
            DataType tp=item.getUIDataType(attributeIndex);
            if (tp != DataType.NONE) {
              value[0]=GXDLMSClient.changeType((byte[])value[0],tp);
            }
          }
          ValueEventArgs e=new ValueEventArgs(item,attributeIndex,selector[0]);
          e.setValue(value[0]);
          write(e);
          if (!e.getHandled()) {
            ((IGXDLMSBase)item).setValue(attributeIndex,value[0]);
          }
          SendData.addAll(Arrays.asList(acknowledge(getUseLogicalNameReferencing() ? Command.SetResponse : Command.WriteResponse,0)));
          return SendData.get(FrameIndex);
        }
      }
      if (item == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (command[0] == Command.SetRequest.getValue()) {
      int attributeIndex[]=new int[1];
      Object[] value=new Object[1];
      ObjectType[] type=new ObjectType[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,attributeIndex,selector,value);
      item=getItems().findByLN(type[0],names.get(0).toString());
      if (item != null) {
        AccessMode acc=item.getAccess(attributeIndex[0]);
        if (acc == AccessMode.NO_ACCESS || acc == AccessMode.READ || acc == AccessMode.AUTHENTICATED_READ) {
          SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
          return SendData.get(FrameIndex);
        }
        if (value instanceof Byte[]) {
          DataType tp=item.getUIDataType(attributeIndex[0]);
          if (tp != DataType.NONE) {
            value[0]=GXDLMSClient.changeType((byte[])value[0],tp);
          }
        }
        ValueEventArgs e=new ValueEventArgs(item,attributeIndex[0],selector[0]);
        e.setValue(value[0]);
        write(e);
        if (!e.getHandled()) {
          ((IGXDLMSBase)item).setValue(attributeIndex[0],value[0]);
        }
        SendData.addAll(Arrays.asList(acknowledge(getUseLogicalNameReferencing() ? Command.SetResponse : Command.WriteResponse,0)));
        return SendData.get(FrameIndex);
      }
      throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     if (command[0] == Command.ReadRequest.getValue() && !getUseLogicalNameReferencing()) {
      int attributeIndex;
      int tmp2[]=new int[1];
      Object[] value=new Object[1];
      ObjectType[] type=new ObjectType[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,tmp2,selector,value);
      int sn=(int)names.get(0);
      for (      Map.Entry<Integer,GXDLMSObject> it : SortedItems.entrySet()) {
        int aCnt=((IGXDLMSBase)it.getValue()).getAttributeCount();
        if (sn >= it.getKey() && sn <= (it.getKey() + (8 * aCnt))) {
          item=it.getValue();
          attributeIndex=((sn - item.getShortName()) / 8) + 1;
          System.out.println(String.format(""String_Node_Str"",item.getName(),attributeIndex));
          ValueEventArgs e=new ValueEventArgs(item,attributeIndex,selector[0]);
          e.setValue(value[0]);
          read(e);
          if (e.getHandled()) {
            DataType tp=item.getDataType(attributeIndex);
            SendData.addAll(Arrays.asList(readReply(names.get(0),type[0],attributeIndex,e.getValue(),tp)));
            return SendData.get(FrameIndex);
          }
          if (item != null) {
            return getValue(names.get(0),item,attributeIndex,selector[0],value[0]);
          }
        }
 else         if (sn >= it.getKey() + aCnt && ((IGXDLMSBase)it.getValue()).getMethodCount() != 0) {
          int[] value2=new int[1], count=new int[1];
          GXDLMS.getActionInfo(it.getValue().getObjectType(),value2,count);
          if (sn <= it.getKey() + value2[0] + (8 * count[0])) {
            item=it.getValue();
            attributeIndex=((sn - item.getShortName() - value2[0]) / 8) + 1;
            System.out.println(String.format(""String_Node_Str"",item.getName(),attributeIndex));
            ValueEventArgs e=new ValueEventArgs(item,attributeIndex,selector[0]);
            e.setValue(value[0]);
            action(e);
            if (!e.getHandled()) {
              byte[][] reply=((IGXDLMSBase)item).invoke(this,attributeIndex,e.getValue());
              if (reply != null) {
                SendData.addAll(Arrays.asList(reply));
                return SendData.get(FrameIndex);
              }
            }
            SendData.addAll(Arrays.asList(acknowledge(Command.MethodResponse,0)));
            return SendData.get(FrameIndex);
          }
        }
      }
      throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     if (command[0] == Command.GetRequest.getValue() && getUseLogicalNameReferencing()) {
      ObjectType[] type=new ObjectType[]{ObjectType.NONE};
      int[] index=new int[1];
      Object[] parameter=new Object[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,index,selector,parameter);
      System.out.println(String.format(""String_Node_Str"",names,index[0]));
      item=m_Items.findByLN(type[0],names.get(0).toString());
      if (item != null) {
        ValueEventArgs e=new ValueEventArgs(item,index[0],selector[0]);
        read(e);
        if (e.getHandled()) {
          SendData.addAll(Arrays.asList(readReply(names.get(0),type[0],index[0],e.getValue(),e.getDataType())));
          return SendData.get(FrameIndex);
        }
        return getValue(names.get(0),item,index[0],selector[0],parameter[0]);
      }
    }
 else     if (command[0] == Command.MethodRequest.getValue()) {
      ObjectType[] type=new ObjectType[1];
      int[] index=new int[1];
      Object[] parameter=new Object[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,index,selector,parameter);
      item=m_Items.findByLN(type[0],names.get(0).toString());
      if (item != null) {
        System.out.println(String.format(""String_Node_Str"",names.get(0),index[0]));
        ValueEventArgs e=new ValueEventArgs(item,index[0],selector[0]);
        e.setValue(parameter[0]);
        action(e);
        if (!e.getHandled()) {
          byte[][] reply=item.invoke(this,index[0],e.getValue());
          if (reply != null) {
            SendData.addAll(Arrays.asList(reply));
            return SendData.get(FrameIndex);
          }
        }
        SendData.addAll(Arrays.asList(acknowledge(Command.MethodResponse,0)));
        return SendData.get(FrameIndex);
      }
    }
    SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
    return SendData.get(FrameIndex);
  }
 catch (  java.lang.Exception e) {
    ReceivedFrame.reset();
    SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
    return SendData.get(FrameIndex);
  }
}"
53290,"@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
  if (index == 2) {
    return GXDLMSClient.changeType(GXCommon.getBytes(getCalendarNameActive()),DataType.OCTET_STRING);
  }
  if (index == 3) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getSeasonProfileActive() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getSeasonProfileActive().length;
      GXCommon.setObjectCount(cnt,data);
      try {
        for (        GXDLMSSeasonProfile it : getSeasonProfileActive()) {
          data.write((byte)DataType.STRUCTURE.getValue());
          data.write(3);
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getName()));
          GXCommon.setData(data,DataType.OCTET_STRING,it.getStart());
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getWeekName()));
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage());
      }
    }
    return data.toByteArray();
  }
  if (index == 4) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getWeekProfileTableActive() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getWeekProfileTableActive().length;
      GXCommon.setObjectCount(cnt,data);
      try {
        for (        GXDLMSWeekProfile it : getWeekProfileTableActive()) {
          data.write((byte)DataType.ARRAY.getValue());
          data.write(8);
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getName()));
          GXCommon.setData(data,DataType.UINT8,it.getMonday());
          GXCommon.setData(data,DataType.UINT8,it.getTuesday());
          GXCommon.setData(data,DataType.UINT8,it.getWednesday());
          GXCommon.setData(data,DataType.UINT8,it.getThursday());
          GXCommon.setData(data,DataType.UINT8,it.getFriday());
          GXCommon.setData(data,DataType.UINT8,it.getSaturday());
          GXCommon.setData(data,DataType.UINT8,it.getSunday());
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage());
      }
    }
    return data.toByteArray();
  }
  if (index == 5) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getDayProfileTableActive() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getDayProfileTableActive().length;
      GXCommon.setObjectCount(cnt,data);
      try {
        for (        GXDLMSDayProfile it : getDayProfileTableActive()) {
          data.write((byte)DataType.STRUCTURE.getValue());
          data.write(2);
          GXCommon.setData(data,DataType.UINT8,it.getDayId());
          data.write((byte)DataType.ARRAY.getValue());
          GXCommon.setObjectCount(it.getDaySchedules().length,data);
          for (          GXDLMSDayProfileAction action : it.getDaySchedules()) {
            data.write((byte)DataType.STRUCTURE.getValue());
            data.write(3);
            GXCommon.setData(data,DataType.TIME,action.getStartTime());
            GXCommon.setData(data,DataType.OCTET_STRING,action.getScriptLogicalName().getBytes(""String_Node_Str""));
            GXCommon.setData(data,DataType.UINT16,action.getScriptSelector());
          }
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage());
      }
    }
    return data.toByteArray();
  }
  if (index == 6) {
    return GXDLMSClient.changeType(GXCommon.getBytes(getCalendarNamePassive()),DataType.OCTET_STRING);
  }
  if (index == 7) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getSeasonProfilePassive() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getSeasonProfilePassive().length;
      try {
        GXCommon.setObjectCount(cnt,data);
        for (        GXDLMSSeasonProfile it : getSeasonProfilePassive()) {
          data.write((byte)DataType.STRUCTURE.getValue());
          data.write(3);
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getName()));
          GXCommon.setData(data,DataType.OCTET_STRING,it.getStart());
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getWeekName()));
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage());
      }
    }
    return data.toByteArray();
  }
  if (index == 8) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getWeekProfileTablePassive() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getWeekProfileTablePassive().length;
      GXCommon.setObjectCount(cnt,data);
      try {
        for (        GXDLMSWeekProfile it : getWeekProfileTablePassive()) {
          data.write((byte)DataType.ARRAY.getValue());
          data.write(8);
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getName()));
          GXCommon.setData(data,DataType.UINT8,it.getMonday());
          GXCommon.setData(data,DataType.UINT8,it.getTuesday());
          GXCommon.setData(data,DataType.UINT8,it.getWednesday());
          GXCommon.setData(data,DataType.UINT8,it.getThursday());
          GXCommon.setData(data,DataType.UINT8,it.getFriday());
          GXCommon.setData(data,DataType.UINT8,it.getSaturday());
          GXCommon.setData(data,DataType.UINT8,it.getSunday());
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage());
      }
    }
    return data.toByteArray();
  }
  if (index == 9) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getDayProfileTablePassive() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getDayProfileTablePassive().length;
      GXCommon.setObjectCount(cnt,data);
      try {
        for (        GXDLMSDayProfile it : getDayProfileTablePassive()) {
          data.write(DataType.STRUCTURE.getValue());
          data.write(2);
          GXCommon.setData(data,DataType.UINT8,it.getDayId());
          data.write(DataType.ARRAY.getValue());
          GXCommon.setObjectCount(it.getDaySchedules().length,data);
          for (          GXDLMSDayProfileAction action : it.getDaySchedules()) {
            data.write(DataType.STRUCTURE.getValue());
            data.write(3);
            GXCommon.setData(data,DataType.TIME,action.getStartTime());
            GXCommon.setData(data,DataType.OCTET_STRING,action.getScriptLogicalName().getBytes(""String_Node_Str""));
            GXCommon.setData(data,DataType.UINT16,action.getScriptSelector());
          }
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage());
      }
    }
    return data.toByteArray();
  }
  if (index == 10) {
    return getTime();
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
  if (index == 2) {
    return GXDLMSClient.changeType(GXCommon.getBytes(getCalendarNameActive()),DataType.OCTET_STRING);
  }
  if (index == 3) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getSeasonProfileActive() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getSeasonProfileActive().length;
      GXCommon.setObjectCount(cnt,data);
      try {
        for (        GXDLMSSeasonProfile it : getSeasonProfileActive()) {
          data.write((byte)DataType.STRUCTURE.getValue());
          data.write(3);
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getName()));
          GXCommon.setData(data,DataType.OCTET_STRING,it.getStart());
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getWeekName()));
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage());
      }
    }
    return data.toByteArray();
  }
  if (index == 4) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getWeekProfileTableActive() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getWeekProfileTableActive().length;
      GXCommon.setObjectCount(cnt,data);
      try {
        for (        GXDLMSWeekProfile it : getWeekProfileTableActive()) {
          data.write((byte)DataType.ARRAY.getValue());
          data.write(8);
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getName()));
          GXCommon.setData(data,DataType.UINT8,it.getMonday());
          GXCommon.setData(data,DataType.UINT8,it.getTuesday());
          GXCommon.setData(data,DataType.UINT8,it.getWednesday());
          GXCommon.setData(data,DataType.UINT8,it.getThursday());
          GXCommon.setData(data,DataType.UINT8,it.getFriday());
          GXCommon.setData(data,DataType.UINT8,it.getSaturday());
          GXCommon.setData(data,DataType.UINT8,it.getSunday());
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage());
      }
    }
    return data.toByteArray();
  }
  if (index == 5) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getDayProfileTableActive() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getDayProfileTableActive().length;
      GXCommon.setObjectCount(cnt,data);
      try {
        for (        GXDLMSDayProfile it : getDayProfileTableActive()) {
          data.write((byte)DataType.STRUCTURE.getValue());
          data.write(2);
          GXCommon.setData(data,DataType.UINT8,it.getDayId());
          data.write((byte)DataType.ARRAY.getValue());
          GXCommon.setObjectCount(it.getDaySchedules().length,data);
          for (          GXDLMSDayProfileAction action : it.getDaySchedules()) {
            data.write((byte)DataType.STRUCTURE.getValue());
            data.write(3);
            GXCommon.setData(data,DataType.TIME,action.getStartTime());
            GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(action.getScriptLogicalName()));
            GXCommon.setData(data,DataType.UINT16,action.getScriptSelector());
          }
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage());
      }
    }
    return data.toByteArray();
  }
  if (index == 6) {
    return GXDLMSClient.changeType(GXCommon.getBytes(getCalendarNamePassive()),DataType.OCTET_STRING);
  }
  if (index == 7) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getSeasonProfilePassive() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getSeasonProfilePassive().length;
      try {
        GXCommon.setObjectCount(cnt,data);
        for (        GXDLMSSeasonProfile it : getSeasonProfilePassive()) {
          data.write((byte)DataType.STRUCTURE.getValue());
          data.write(3);
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getName()));
          GXCommon.setData(data,DataType.OCTET_STRING,it.getStart());
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getWeekName()));
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage());
      }
    }
    return data.toByteArray();
  }
  if (index == 8) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getWeekProfileTablePassive() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getWeekProfileTablePassive().length;
      GXCommon.setObjectCount(cnt,data);
      try {
        for (        GXDLMSWeekProfile it : getWeekProfileTablePassive()) {
          data.write((byte)DataType.ARRAY.getValue());
          data.write(8);
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getName()));
          GXCommon.setData(data,DataType.UINT8,it.getMonday());
          GXCommon.setData(data,DataType.UINT8,it.getTuesday());
          GXCommon.setData(data,DataType.UINT8,it.getWednesday());
          GXCommon.setData(data,DataType.UINT8,it.getThursday());
          GXCommon.setData(data,DataType.UINT8,it.getFriday());
          GXCommon.setData(data,DataType.UINT8,it.getSaturday());
          GXCommon.setData(data,DataType.UINT8,it.getSunday());
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage());
      }
    }
    return data.toByteArray();
  }
  if (index == 9) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getDayProfileTablePassive() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getDayProfileTablePassive().length;
      GXCommon.setObjectCount(cnt,data);
      try {
        for (        GXDLMSDayProfile it : getDayProfileTablePassive()) {
          data.write(DataType.STRUCTURE.getValue());
          data.write(2);
          GXCommon.setData(data,DataType.UINT8,it.getDayId());
          data.write(DataType.ARRAY.getValue());
          GXCommon.setObjectCount(it.getDaySchedules().length,data);
          for (          GXDLMSDayProfileAction action : it.getDaySchedules()) {
            data.write(DataType.STRUCTURE.getValue());
            data.write(3);
            GXCommon.setData(data,DataType.TIME,action.getStartTime());
            GXCommon.setData(data,DataType.OCTET_STRING,action.getScriptLogicalName());
            GXCommon.setData(data,DataType.UINT16,action.getScriptSelector());
          }
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage());
      }
    }
    return data.toByteArray();
  }
  if (index == 10) {
    return getTime();
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}"
53291,"@Override public void setValue(int index,Object value){
  if (index == 1) {
    super.setValue(index,value);
  }
 else   if (index == 2) {
    m_ObjectList.clear();
    if (value != null) {
      for (      Object item : (Object[])value) {
        ObjectType type=ObjectType.forValue(((Number)Array.get(item,0)).intValue());
        int version=((Number)Array.get(item,1)).intValue();
        String ln=GXDLMSObject.toLogicalName((byte[])Array.get(item,2));
        GXDLMSObject obj=getParent().findByLN(type,ln);
        if (obj == null) {
          obj=gurux.dlms.GXDLMSClient.createObject(type);
          obj.setLogicalName(ln);
          obj.setVersion(version);
        }
        updateAccessRights(obj,(Object[])Array.get(item,3));
        m_ObjectList.add(obj);
      }
    }
  }
 else   if (index == 3) {
    if (value != null) {
      ClientSAP=(short)GXCommon.intValue(Array.get(value,0));
      ServerSAP=(short)GXCommon.intValue(Array.get(value,1));
    }
  }
 else   if (index == 4) {
    if (value instanceof byte[]) {
      int pos=-1;
      byte[] arr=(byte[])value;
      if (arr[0] == 0x60) {
        ApplicationContextName.setJointIsoCtt(0);
        ++pos;
        ApplicationContextName.setCountry(0);
        ++pos;
        ApplicationContextName.setCountryName(0);
        ++pos;
        ApplicationContextName.setIdentifiedOrganization(arr[++pos]);
        ApplicationContextName.setDlmsUA(arr[++pos]);
        ApplicationContextName.setApplicationContext(arr[++pos]);
        ApplicationContextName.setContextId(arr[++pos]);
      }
 else {
        if (arr[++pos] != 2 && arr[++pos] != 7) {
          throw new IllegalArgumentException();
        }
        if (arr[++pos] != 0x11) {
          throw new IllegalArgumentException();
        }
        ApplicationContextName.setJointIsoCtt(arr[++pos]);
        if (arr[++pos] != 0x11) {
          throw new IllegalArgumentException();
        }
        ApplicationContextName.setCountry(arr[++pos]);
        if (arr[++pos] != 0x12) {
          throw new IllegalArgumentException();
        }
        int tmp[]=new int[]{pos};
        ApplicationContextName.setCountryName(GXCommon.getUInt16(arr,tmp));
        pos=tmp[1];
        if (arr[++pos] != 0x11) {
          throw new IllegalArgumentException();
        }
        ApplicationContextName.setIdentifiedOrganization(arr[++pos]);
        if (arr[++pos] != 0x11) {
          throw new IllegalArgumentException();
        }
        ApplicationContextName.setDlmsUA(arr[++pos]);
        if (arr[++pos] != 0x11) {
          throw new IllegalArgumentException();
        }
        ApplicationContextName.setApplicationContext(arr[++pos]);
        if (arr[++pos] != 0x11) {
          throw new IllegalArgumentException();
        }
        ApplicationContextName.setContextId(arr[++pos]);
      }
    }
 else {
      if (value != null) {
        ApplicationContextName.setJointIsoCtt(((Number)Array.get(value,0)).intValue());
        ApplicationContextName.setCountry(((Number)Array.get(value,1)).intValue());
        ApplicationContextName.setCountryName(((Number)Array.get(value,2)).intValue());
        ApplicationContextName.setIdentifiedOrganization(((Number)Array.get(value,3)).intValue());
        ApplicationContextName.setDlmsUA(((Number)Array.get(value,4)).intValue());
        ApplicationContextName.setApplicationContext(((Number)Array.get(value,5)).intValue());
        ApplicationContextName.setContextId(((Number)Array.get(value,6)).intValue());
      }
    }
  }
 else   if (index == 5) {
    if (value != null) {
      XDLMSContextInfo.setConformance(Array.get(value,0).toString());
      XDLMSContextInfo.setMaxReceivePduSize(((Number)Array.get(value,1)).intValue());
      XDLMSContextInfo.setMaxSendPpuSize(((Number)Array.get(value,2)).intValue());
      XDLMSContextInfo.setDlmsVersionNumber(((Number)Array.get(value,3)).intValue());
      XDLMSContextInfo.setQualityOfService(((Number)Array.get(value,4)).intValue());
      XDLMSContextInfo.setCypheringInfo((byte[])Array.get(value,5));
    }
  }
 else   if (index == 6) {
    if (value != null) {
      if (value instanceof byte[]) {
        int pos=-1;
        byte[] arr=(byte[])value;
        if (arr[0] == 0x60) {
          AuthenticationMechanismMame.setJointIsoCtt(0);
          ++pos;
          AuthenticationMechanismMame.setCountry(0);
          ++pos;
          AuthenticationMechanismMame.setCountryName(0);
          ++pos;
          AuthenticationMechanismMame.setIdentifiedOrganization(arr[++pos]);
          AuthenticationMechanismMame.setDlmsUA(arr[++pos]);
          AuthenticationMechanismMame.setAuthenticationMechanismName(arr[++pos]);
          AuthenticationMechanismMame.setMechanismId(Authentication.forValue(arr[++pos]));
        }
 else {
          if (arr[++pos] != 2 && arr[++pos] != 7) {
            throw new IllegalArgumentException();
          }
          if (arr[++pos] != 0x11) {
            throw new IllegalArgumentException();
          }
          AuthenticationMechanismMame.setJointIsoCtt(arr[++pos]);
          if (arr[++pos] != 0x11) {
            throw new IllegalArgumentException();
          }
          AuthenticationMechanismMame.setCountry(arr[++pos]);
          if (arr[++pos] != 0x12) {
            throw new IllegalArgumentException();
          }
          int[] tmp=new int[]{pos};
          AuthenticationMechanismMame.setCountryName(GXCommon.getUInt16(arr,tmp));
          pos=tmp[0];
          if (arr[++pos] != 0x11) {
            throw new IllegalArgumentException();
          }
          AuthenticationMechanismMame.setIdentifiedOrganization(arr[++pos]);
          if (arr[++pos] != 0x11) {
            throw new IllegalArgumentException();
          }
          AuthenticationMechanismMame.setDlmsUA(arr[++pos]);
          if (arr[++pos] != 0x11) {
            throw new IllegalArgumentException();
          }
          AuthenticationMechanismMame.setAuthenticationMechanismName(arr[++pos]);
          if (arr[++pos] != 0x11) {
            throw new IllegalArgumentException();
          }
          AuthenticationMechanismMame.setMechanismId(Authentication.forValue(arr[++pos]));
        }
      }
 else {
        if (value != null) {
          AuthenticationMechanismMame.setJointIsoCtt(((Number)Array.get(value,0)).intValue());
          AuthenticationMechanismMame.setCountry(((Number)Array.get(value,1)).intValue());
          AuthenticationMechanismMame.setCountryName(((Number)Array.get(value,2)).intValue());
          AuthenticationMechanismMame.setIdentifiedOrganization(((Number)Array.get(value,3)).intValue());
          AuthenticationMechanismMame.setDlmsUA(((Number)Array.get(value,4)).intValue());
          AuthenticationMechanismMame.setAuthenticationMechanismName(((Number)Array.get(value,5)).intValue());
          AuthenticationMechanismMame.setMechanismId(Authentication.forValue(((Number)Array.get(value,6)).intValue()));
        }
      }
    }
  }
 else   if (index == 7) {
    Secret=(byte[])value;
  }
 else   if (index == 8) {
    if (value == null) {
      setAssociationStatus(AssociationStatus.NonAssociated);
    }
 else {
      setAssociationStatus(AssociationStatus.values()[((Number)value).intValue()]);
    }
  }
 else   if (index == 9) {
    setSecuritySetupReference(GXDLMSObject.toLogicalName((byte[])value));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","@Override public void setValue(int index,Object value){
  if (index == 1) {
    super.setValue(index,value);
  }
 else   if (index == 2) {
    m_ObjectList.clear();
    if (value != null) {
      for (      Object item : (Object[])value) {
        ObjectType type=ObjectType.forValue(((Number)Array.get(item,0)).intValue());
        int version=((Number)Array.get(item,1)).intValue();
        String ln=GXDLMSObject.toLogicalName((byte[])Array.get(item,2));
        GXDLMSObject obj=getParent().findByLN(type,ln);
        if (obj == null) {
          obj=gurux.dlms.GXDLMSClient.createObject(type);
          obj.setLogicalName(ln);
          obj.setVersion(version);
        }
        if (obj instanceof IGXDLMSBase) {
          updateAccessRights(obj,(Object[])Array.get(item,3));
          m_ObjectList.add(obj);
        }
      }
    }
  }
 else   if (index == 3) {
    if (value != null) {
      ClientSAP=(short)GXCommon.intValue(Array.get(value,0));
      ServerSAP=(short)GXCommon.intValue(Array.get(value,1));
    }
  }
 else   if (index == 4) {
    if (value instanceof byte[]) {
      int pos=-1;
      byte[] arr=(byte[])value;
      if (arr[0] == 0x60) {
        ApplicationContextName.setJointIsoCtt(0);
        ++pos;
        ApplicationContextName.setCountry(0);
        ++pos;
        ApplicationContextName.setCountryName(0);
        ++pos;
        ApplicationContextName.setIdentifiedOrganization(arr[++pos]);
        ApplicationContextName.setDlmsUA(arr[++pos]);
        ApplicationContextName.setApplicationContext(arr[++pos]);
        ApplicationContextName.setContextId(arr[++pos]);
      }
 else {
        if (arr[++pos] != 2 && arr[++pos] != 7) {
          throw new IllegalArgumentException();
        }
        if (arr[++pos] != 0x11) {
          throw new IllegalArgumentException();
        }
        ApplicationContextName.setJointIsoCtt(arr[++pos]);
        if (arr[++pos] != 0x11) {
          throw new IllegalArgumentException();
        }
        ApplicationContextName.setCountry(arr[++pos]);
        if (arr[++pos] != 0x12) {
          throw new IllegalArgumentException();
        }
        int tmp[]=new int[]{pos};
        ApplicationContextName.setCountryName(GXCommon.getUInt16(arr,tmp));
        pos=tmp[1];
        if (arr[++pos] != 0x11) {
          throw new IllegalArgumentException();
        }
        ApplicationContextName.setIdentifiedOrganization(arr[++pos]);
        if (arr[++pos] != 0x11) {
          throw new IllegalArgumentException();
        }
        ApplicationContextName.setDlmsUA(arr[++pos]);
        if (arr[++pos] != 0x11) {
          throw new IllegalArgumentException();
        }
        ApplicationContextName.setApplicationContext(arr[++pos]);
        if (arr[++pos] != 0x11) {
          throw new IllegalArgumentException();
        }
        ApplicationContextName.setContextId(arr[++pos]);
      }
    }
 else {
      if (value != null) {
        ApplicationContextName.setJointIsoCtt(((Number)Array.get(value,0)).intValue());
        ApplicationContextName.setCountry(((Number)Array.get(value,1)).intValue());
        ApplicationContextName.setCountryName(((Number)Array.get(value,2)).intValue());
        ApplicationContextName.setIdentifiedOrganization(((Number)Array.get(value,3)).intValue());
        ApplicationContextName.setDlmsUA(((Number)Array.get(value,4)).intValue());
        ApplicationContextName.setApplicationContext(((Number)Array.get(value,5)).intValue());
        ApplicationContextName.setContextId(((Number)Array.get(value,6)).intValue());
      }
    }
  }
 else   if (index == 5) {
    if (value != null) {
      XDLMSContextInfo.setConformance(Array.get(value,0).toString());
      XDLMSContextInfo.setMaxReceivePduSize(((Number)Array.get(value,1)).intValue());
      XDLMSContextInfo.setMaxSendPpuSize(((Number)Array.get(value,2)).intValue());
      XDLMSContextInfo.setDlmsVersionNumber(((Number)Array.get(value,3)).intValue());
      XDLMSContextInfo.setQualityOfService(((Number)Array.get(value,4)).intValue());
      XDLMSContextInfo.setCypheringInfo((byte[])Array.get(value,5));
    }
  }
 else   if (index == 6) {
    if (value != null) {
      if (value instanceof byte[]) {
        int pos=-1;
        byte[] arr=(byte[])value;
        if (arr[0] == 0x60) {
          AuthenticationMechanismMame.setJointIsoCtt(0);
          ++pos;
          AuthenticationMechanismMame.setCountry(0);
          ++pos;
          AuthenticationMechanismMame.setCountryName(0);
          ++pos;
          AuthenticationMechanismMame.setIdentifiedOrganization(arr[++pos]);
          AuthenticationMechanismMame.setDlmsUA(arr[++pos]);
          AuthenticationMechanismMame.setAuthenticationMechanismName(arr[++pos]);
          AuthenticationMechanismMame.setMechanismId(Authentication.forValue(arr[++pos]));
        }
 else {
          if (arr[++pos] != 2 && arr[++pos] != 7) {
            throw new IllegalArgumentException();
          }
          if (arr[++pos] != 0x11) {
            throw new IllegalArgumentException();
          }
          AuthenticationMechanismMame.setJointIsoCtt(arr[++pos]);
          if (arr[++pos] != 0x11) {
            throw new IllegalArgumentException();
          }
          AuthenticationMechanismMame.setCountry(arr[++pos]);
          if (arr[++pos] != 0x12) {
            throw new IllegalArgumentException();
          }
          int[] tmp=new int[]{pos};
          AuthenticationMechanismMame.setCountryName(GXCommon.getUInt16(arr,tmp));
          pos=tmp[0];
          if (arr[++pos] != 0x11) {
            throw new IllegalArgumentException();
          }
          AuthenticationMechanismMame.setIdentifiedOrganization(arr[++pos]);
          if (arr[++pos] != 0x11) {
            throw new IllegalArgumentException();
          }
          AuthenticationMechanismMame.setDlmsUA(arr[++pos]);
          if (arr[++pos] != 0x11) {
            throw new IllegalArgumentException();
          }
          AuthenticationMechanismMame.setAuthenticationMechanismName(arr[++pos]);
          if (arr[++pos] != 0x11) {
            throw new IllegalArgumentException();
          }
          AuthenticationMechanismMame.setMechanismId(Authentication.forValue(arr[++pos]));
        }
      }
 else {
        if (value != null) {
          AuthenticationMechanismMame.setJointIsoCtt(((Number)Array.get(value,0)).intValue());
          AuthenticationMechanismMame.setCountry(((Number)Array.get(value,1)).intValue());
          AuthenticationMechanismMame.setCountryName(((Number)Array.get(value,2)).intValue());
          AuthenticationMechanismMame.setIdentifiedOrganization(((Number)Array.get(value,3)).intValue());
          AuthenticationMechanismMame.setDlmsUA(((Number)Array.get(value,4)).intValue());
          AuthenticationMechanismMame.setAuthenticationMechanismName(((Number)Array.get(value,5)).intValue());
          AuthenticationMechanismMame.setMechanismId(Authentication.forValue(((Number)Array.get(value,6)).intValue()));
        }
      }
    }
  }
 else   if (index == 7) {
    Secret=(byte[])value;
  }
 else   if (index == 8) {
    if (value == null) {
      setAssociationStatus(AssociationStatus.NonAssociated);
    }
 else {
      setAssociationStatus(AssociationStatus.values()[((Number)value).intValue()]);
    }
  }
 else   if (index == 9) {
    setSecuritySetupReference(GXDLMSObject.toLogicalName((byte[])value));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
53292,"@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
 else   if (index == 2) {
    int cnt=m_ObjectList.size();
    try {
      ByteArrayOutputStream data=new ByteArrayOutputStream();
      data.write((byte)DataType.ARRAY.getValue());
      GXCommon.setObjectCount(cnt,data);
      if (cnt != 0) {
        for (        GXDLMSObject it : m_ObjectList) {
          data.write((byte)DataType.STRUCTURE.getValue());
          data.write((byte)4);
          GXCommon.setData(data,DataType.UINT16,it.getShortName());
          GXCommon.setData(data,DataType.UINT16,it.getObjectType().getValue());
          GXCommon.setData(data,DataType.UINT8,0);
          GXCommon.setData(data,DataType.OCTET_STRING,it.getLogicalName());
        }
        if (m_ObjectList.findBySN(this.getShortName()) == null) {
          data.write((byte)DataType.STRUCTURE.getValue());
          data.write((byte)4);
          GXCommon.setData(data,DataType.UINT16,this.getShortName());
          GXCommon.setData(data,DataType.UINT16,this.getObjectType().getValue());
          GXCommon.setData(data,DataType.UINT8,0);
          GXCommon.setData(data,DataType.OCTET_STRING,this.getLogicalName());
        }
      }
      return data.toByteArray();
    }
 catch (    Exception ex) {
      Logger.getLogger(GXDLMSAssociationShortName.class.getName()).log(Level.SEVERE,null,ex);
      throw new RuntimeException(ex.getMessage());
    }
  }
 else   if (index == 3) {
    boolean lnExists=m_ObjectList.findBySN(this.getShortName()) != null;
    int cnt=m_ObjectList.size();
    if (!lnExists) {
      ++cnt;
    }
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    GXCommon.setObjectCount(cnt,data);
    try {
      for (      GXDLMSObject it : m_ObjectList) {
        getAccessRights(it,data);
      }
      if (!lnExists) {
        getAccessRights(this,data);
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(GXDLMSAssociationShortName.class.getName()).log(Level.SEVERE,null,ex);
      throw new RuntimeException(ex.getMessage());
    }
    return data.toByteArray();
  }
 else   if (index == 4) {
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
 else   if (index == 2) {
    int cnt=m_ObjectList.size();
    try {
      ByteArrayOutputStream data=new ByteArrayOutputStream();
      data.write((byte)DataType.ARRAY.getValue());
      GXCommon.setObjectCount(cnt,data);
      if (cnt != 0) {
        for (        GXDLMSObject it : m_ObjectList) {
          data.write((byte)DataType.STRUCTURE.getValue());
          data.write((byte)4);
          GXCommon.setData(data,DataType.INT16,it.getShortName());
          GXCommon.setData(data,DataType.UINT16,it.getObjectType().getValue());
          GXCommon.setData(data,DataType.UINT8,0);
          GXCommon.setData(data,DataType.OCTET_STRING,it.getLogicalName());
        }
        if (m_ObjectList.findBySN(this.getShortName()) == null) {
          data.write((byte)DataType.STRUCTURE.getValue());
          data.write((byte)4);
          GXCommon.setData(data,DataType.INT16,this.getShortName());
          GXCommon.setData(data,DataType.UINT16,this.getObjectType().getValue());
          GXCommon.setData(data,DataType.UINT8,0);
          GXCommon.setData(data,DataType.OCTET_STRING,this.getLogicalName());
        }
      }
      return data.toByteArray();
    }
 catch (    Exception ex) {
      Logger.getLogger(GXDLMSAssociationShortName.class.getName()).log(Level.SEVERE,null,ex);
      throw new RuntimeException(ex.getMessage());
    }
  }
 else   if (index == 3) {
    boolean lnExists=m_ObjectList.findBySN(this.getShortName()) != null;
    int cnt=m_ObjectList.size();
    if (!lnExists) {
      ++cnt;
    }
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    GXCommon.setObjectCount(cnt,data);
    try {
      for (      GXDLMSObject it : m_ObjectList) {
        getAccessRights(it,data);
      }
      if (!lnExists) {
        getAccessRights(this,data);
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(GXDLMSAssociationShortName.class.getName()).log(Level.SEVERE,null,ex);
      throw new RuntimeException(ex.getMessage());
    }
    return data.toByteArray();
  }
 else   if (index == 4) {
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}"
53293,"@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
  if (index == 2) {
    return (byte)getMode().getValue();
  }
  if (index == 3) {
    return getRepetitions();
  }
  if (index == 4) {
    return getRepetitionDelay();
  }
  if (index == 5) {
    int cnt=getCallingWindow().size();
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    GXCommon.setObjectCount(cnt,data);
    if (cnt != 0) {
      for (      AbstractMap.SimpleEntry<GXDateTime,GXDateTime> it : getCallingWindow()) {
        data.write((byte)DataType.STRUCTURE.getValue());
        data.write((byte)2);
        try {
          GXCommon.setData(data,DataType.OCTET_STRING,it.getKey());
          GXCommon.setData(data,DataType.OCTET_STRING,it.getValue());
        }
 catch (        Exception ex) {
          Logger.getLogger(GXDLMSAutoConnect.class.getName()).log(Level.SEVERE,null,ex);
          throw new RuntimeException(ex.getMessage());
        }
      }
    }
    return data.toByteArray();
  }
  if (index == 6) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getDestinations() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getDestinations().length;
      GXCommon.setObjectCount(cnt,data);
      for (      String it : getDestinations()) {
        try {
          GXCommon.setData(data,DataType.OCTET_STRING,it.getBytes(""String_Node_Str""));
        }
 catch (        Exception ex) {
          Logger.getLogger(GXDLMSAutoConnect.class.getName()).log(Level.SEVERE,null,ex);
          throw new RuntimeException(ex.getMessage());
        }
      }
    }
    return data.toByteArray();
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
  if (index == 2) {
    return (byte)getMode().getValue();
  }
  if (index == 3) {
    return getRepetitions();
  }
  if (index == 4) {
    return getRepetitionDelay();
  }
  if (index == 5) {
    int cnt=getCallingWindow().size();
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    GXCommon.setObjectCount(cnt,data);
    if (cnt != 0) {
      for (      AbstractMap.SimpleEntry<GXDateTime,GXDateTime> it : getCallingWindow()) {
        data.write((byte)DataType.STRUCTURE.getValue());
        data.write((byte)2);
        try {
          GXCommon.setData(data,DataType.OCTET_STRING,it.getKey());
          GXCommon.setData(data,DataType.OCTET_STRING,it.getValue());
        }
 catch (        Exception ex) {
          Logger.getLogger(GXDLMSAutoConnect.class.getName()).log(Level.SEVERE,null,ex);
          throw new RuntimeException(ex.getMessage());
        }
      }
    }
    return data.toByteArray();
  }
  if (index == 6) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    if (getDestinations() == null) {
      GXCommon.setObjectCount(0,data);
    }
 else {
      int cnt=getDestinations().length;
      GXCommon.setObjectCount(cnt,data);
      for (      String it : getDestinations()) {
        try {
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it));
        }
 catch (        Exception ex) {
          Logger.getLogger(GXDLMSAutoConnect.class.getName()).log(Level.SEVERE,null,ex);
          throw new RuntimeException(ex.getMessage());
        }
      }
    }
    return data.toByteArray();
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}"
53294,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSClock(String ln,int sn){
  super(ObjectType.CLOCK,ln,sn);
  Status=ClockStatus.OK;
  Deviation=0;
  java.util.Set<DateTimeSkips> value=EnumSet.of(DateTimeSkips.MONTH);
  value.add(DateTimeSkips.DAY);
  Begin.setSkip(value);
  End.setSkip(Begin.getSkip());
}","/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSClock(String ln,int sn){
  super(ObjectType.CLOCK,ln,sn);
  Status=ClockStatus.OK;
  Deviation=0;
  java.util.Set<DateTimeSkips> value=EnumSet.of(DateTimeSkips.MONTH);
  value.add(DateTimeSkips.DAY);
  Begin.setSkip(value);
  End.setSkip(Begin.getSkip());
  m_ClockBase=ClockBase.None;
}"
53295,"@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
  if (index == 2) {
    return getTime();
  }
  if (index == 3) {
    return getTimeZone();
  }
  if (index == 4) {
    return getStatus().getValue();
  }
  if (index == 5) {
    return getBegin();
  }
  if (index == 6) {
    return getEnd();
  }
  if (index == 7) {
    return getDeviation();
  }
  if (index == 8) {
    return getEnabled();
  }
  if (index == 9) {
    return getClockBase();
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
  if (index == 2) {
    return getTime();
  }
  if (index == 3) {
    return getTimeZone();
  }
  if (index == 4) {
    return getStatus().getValue();
  }
  if (index == 5) {
    return getBegin();
  }
  if (index == 6) {
    return getEnd();
  }
  if (index == 7) {
    return getDeviation();
  }
  if (index == 8) {
    return getEnabled();
  }
  if (index == 9) {
    return getClockBase().ordinal();
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}"
53296,"@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
  if (index == 2) {
    return this.CommunicationSpeed;
  }
  if (index == 3) {
    return this.WindowSizeTransmit;
  }
  if (index == 4) {
    return this.WindowSizeReceive;
  }
  if (index == 5) {
    return this.MaximumInfoLengthTransmit;
  }
  if (index == 6) {
    return this.MaximumInfoLengthReceive;
  }
  if (index == 7) {
    return InterCharachterTimeout;
  }
  if (index == 8) {
    return InactivityTimeout;
  }
  if (index == 9) {
    return DeviceAddress;
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
  if (index == 2) {
    return this.CommunicationSpeed.ordinal();
  }
  if (index == 3) {
    return this.WindowSizeTransmit;
  }
  if (index == 4) {
    return this.WindowSizeReceive;
  }
  if (index == 5) {
    return this.MaximumInfoLengthTransmit;
  }
  if (index == 6) {
    return this.MaximumInfoLengthReceive;
  }
  if (index == 7) {
    return InterCharachterTimeout;
  }
  if (index == 8) {
    return InactivityTimeout;
  }
  if (index == 9) {
    return DeviceAddress;
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}"
53297,"public byte[][] imageTransferInitiate(GXDLMSClient client,String imageIdentifier,long imageSize){
  if (ImageBlockSize == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ByteArrayOutputStream data=new ByteArrayOutputStream();
  data.write((byte)DataType.STRUCTURE.getValue());
  data.write(2);
  try {
    GXCommon.setData(data,DataType.OCTET_STRING,imageIdentifier.getBytes(""String_Node_Str""));
    GXCommon.setData(data,DataType.UINT32,imageSize);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex.getMessage());
  }
  return client.method(this,1,data.toByteArray(),DataType.ARRAY);
}","public byte[][] imageTransferInitiate(GXDLMSClient client,String imageIdentifier,long imageSize){
  if (ImageBlockSize == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ByteArrayOutputStream data=new ByteArrayOutputStream();
  data.write((byte)DataType.STRUCTURE.getValue());
  data.write(2);
  try {
    GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(imageIdentifier));
    GXCommon.setData(data,DataType.UINT32,imageSize);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex.getMessage());
  }
  return client.method(this,1,data.toByteArray(),DataType.ARRAY);
}"
53298,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSImageTransfer(String ln,int sn){
  super(ObjectType.IMAGE_TRANSFER,ln,sn);
  ImageBlockSize=200;
  ImageFirstNotTransferredBlockNumber=0;
  ImageTransferEnabled=true;
  GXDLMSImageActivateInfo info=new GXDLMSImageActivateInfo();
  info.Size=0;
  info.Signature=""String_Node_Str"";
  info.Identification=""String_Node_Str"";
  ImageActivateInfo=new GXDLMSImageActivateInfo[]{info};
}","/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSImageTransfer(String ln,int sn){
  super(ObjectType.IMAGE_TRANSFER,ln,sn);
  ImageBlockSize=200;
  ImageFirstNotTransferredBlockNumber=0;
  ImageTransferEnabled=true;
  GXDLMSImageActivateInfo info=new GXDLMSImageActivateInfo();
  info.Size=0;
  info.Signature=""String_Node_Str"";
  info.Identification=""String_Node_Str"";
  ImageActivateInfo=new GXDLMSImageActivateInfo[]{info};
  ImageTransferStatus=ImageTransferStatus.IMAGE_TRANSFER_NOT_INITIATED;
}"
53299,"@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
  if (index == 2) {
    return getImageBlockSize();
  }
  if (index == 3) {
    return ImageTransferredBlocksStatus;
  }
  if (index == 4) {
    return getImageFirstNotTransferredBlockNumber();
  }
  if (index == 5) {
    return getImageTransferEnabled();
  }
  if (index == 6) {
    return getImageTransferStatus().ordinal();
  }
  if (index == 7) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    data.write((byte)ImageActivateInfo.length);
    try {
      for (      GXDLMSImageActivateInfo it : ImageActivateInfo) {
        data.write((byte)DataType.STRUCTURE.getValue());
        data.write((byte)3);
        GXCommon.setData(data,DataType.UINT32,it.getSize());
        GXCommon.setData(data,DataType.OCTET_STRING,it.getIdentification().getBytes(""String_Node_Str""));
        String tmp=it.getSignature();
        if (tmp != null) {
          GXCommon.setData(data,DataType.OCTET_STRING,it.getSignature().getBytes(""String_Node_Str""));
        }
 else {
          GXCommon.setData(data,DataType.OCTET_STRING,null);
        }
      }
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
    return data.toByteArray();
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
  if (index == 2) {
    return getImageBlockSize();
  }
  if (index == 3) {
    return ImageTransferredBlocksStatus;
  }
  if (index == 4) {
    return getImageFirstNotTransferredBlockNumber();
  }
  if (index == 5) {
    return getImageTransferEnabled();
  }
  if (index == 6) {
    return getImageTransferStatus().ordinal();
  }
  if (index == 7) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    data.write((byte)ImageActivateInfo.length);
    try {
      for (      GXDLMSImageActivateInfo it : ImageActivateInfo) {
        data.write((byte)DataType.STRUCTURE.getValue());
        data.write((byte)3);
        GXCommon.setData(data,DataType.UINT32,it.getSize());
        GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getIdentification()));
        String tmp=it.getSignature();
        if (tmp != null) {
          GXCommon.setData(data,DataType.OCTET_STRING,GXCommon.getBytes(it.getSignature()));
        }
 else {
          GXCommon.setData(data,DataType.OCTET_STRING,null);
        }
      }
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
    return data.toByteArray();
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}"
53300,"@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
 else   if (index == 2) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.STRUCTURE.getValue());
    data.write(3);
    try {
      GXCommon.setData(data,DataType.INT16,MonitoredValue.getObjectType());
      GXCommon.setData(data,DataType.OCTET_STRING,MonitoredValue.getLogicalName());
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
    return data;
  }
 else   if (index == 3) {
    return ThresholdActive;
  }
 else   if (index == 4) {
    return ThresholdNormal;
  }
 else   if (index == 5) {
    return ThresholdEmergency;
  }
 else   if (index == 6) {
    return MinOverThresholdDuration;
  }
 else   if (index == 7) {
    return MinUnderThresholdDuration;
  }
 else   if (index == 8) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.STRUCTURE.getValue());
    data.write(3);
    try {
      GXCommon.setData(data,DataType.UINT16,EmergencyProfile.getID());
      GXCommon.setData(data,DataType.DATETIME,EmergencyProfile.getActivationTime());
      GXCommon.setData(data,DataType.UINT32,EmergencyProfile.getDuration());
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
    return data;
  }
 else   if (index == 9) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    data.write((byte)EmergencyProfileGroupIDs.length);
    try {
      for (      Object it : EmergencyProfileGroupIDs) {
        GXCommon.setData(data,DataType.UINT16,it);
      }
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
    return data;
  }
 else   if (index == 10) {
    return EmergencyProfileActive;
  }
 else   if (index == 11) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.STRUCTURE.getValue());
    data.write(2);
    data.write((byte)DataType.STRUCTURE.getValue());
    data.write(2);
    try {
      GXCommon.setData(data,DataType.OCTET_STRING,ActionOverThreshold.getLogicalName());
      GXCommon.setData(data,DataType.UINT16,ActionOverThreshold.getScriptSelector());
      data.write((byte)DataType.STRUCTURE.getValue());
      data.write(2);
      GXCommon.setData(data,DataType.OCTET_STRING,ActionUnderThreshold.getLogicalName());
      GXCommon.setData(data,DataType.UINT16,ActionUnderThreshold.getScriptSelector());
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
    return data;
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","@Override public Object getValue(int index,int selector,Object parameters){
  if (index == 1) {
    return getLogicalName();
  }
 else   if (index == 2) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.STRUCTURE.getValue());
    data.write(3);
    try {
      GXCommon.setData(data,DataType.INT16,MonitoredValue.getObjectType().getValue());
      GXCommon.setData(data,DataType.OCTET_STRING,MonitoredValue.getLogicalName());
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
    return data.toByteArray();
  }
 else   if (index == 3) {
    return ThresholdActive;
  }
 else   if (index == 4) {
    return ThresholdNormal;
  }
 else   if (index == 5) {
    return ThresholdEmergency;
  }
 else   if (index == 6) {
    return MinOverThresholdDuration;
  }
 else   if (index == 7) {
    return MinUnderThresholdDuration;
  }
 else   if (index == 8) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.STRUCTURE.getValue());
    data.write(3);
    try {
      GXCommon.setData(data,DataType.UINT16,EmergencyProfile.getID());
      GXCommon.setData(data,DataType.DATETIME,EmergencyProfile.getActivationTime());
      GXCommon.setData(data,DataType.UINT32,EmergencyProfile.getDuration());
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
    return data.toByteArray();
  }
 else   if (index == 9) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.ARRAY.getValue());
    data.write((byte)EmergencyProfileGroupIDs.length);
    try {
      for (      Object it : EmergencyProfileGroupIDs) {
        GXCommon.setData(data,DataType.UINT16,it);
      }
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
    return data.toByteArray();
  }
 else   if (index == 10) {
    return EmergencyProfileActive;
  }
 else   if (index == 11) {
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    data.write((byte)DataType.STRUCTURE.getValue());
    data.write(2);
    data.write((byte)DataType.STRUCTURE.getValue());
    data.write(2);
    try {
      GXCommon.setData(data,DataType.OCTET_STRING,ActionOverThreshold.getLogicalName());
      GXCommon.setData(data,DataType.UINT16,ActionOverThreshold.getScriptSelector());
      data.write((byte)DataType.STRUCTURE.getValue());
      data.write(2);
      GXCommon.setData(data,DataType.OCTET_STRING,ActionUnderThreshold.getLogicalName());
      GXCommon.setData(data,DataType.UINT16,ActionUnderThreshold.getScriptSelector());
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.getMessage());
    }
    return data.toByteArray();
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}"
53301,"/** 
 * Reserved for internal use.
 */
final byte[][] generateMessage(Object name,int parameterCount,byte[] data,ObjectType interfaceClass,int AttributeOrdinal,Command cmd){
  if (getLimits().getMaxInfoRX() == null) {
    throw new GXDLMSException(""String_Node_Str"");
  }
  java.nio.ByteBuffer buff;
  if (name instanceof byte[]) {
    buff=java.nio.ByteBuffer.wrap((byte[])name);
  }
 else {
    if (name == null) {
      buff=java.nio.ByteBuffer.wrap(data);
    }
 else     if (getUseLogicalNameReferencing()) {
      int len=data == null ? 0 : data.length;
      buff=java.nio.ByteBuffer.allocate(20 + len);
      if (cmd == Command.GetRequest || cmd == Command.SetRequest || cmd == Command.MethodRequest) {
        buff.putShort((short)interfaceClass.getValue());
        String[] items=((String)name).split(""String_Node_Str"",-1);
        if (items.length != 6) {
          throw new GXDLMSException(""String_Node_Str"");
        }
        for (        String it : items) {
          buff.put((byte)(Short.parseShort(it) & 0xFF));
        }
        buff.put((byte)AttributeOrdinal);
        buff.put((byte)0x0);
      }
    }
 else {
      int len=data == null ? 0 : data.length;
      buff=java.nio.ByteBuffer.allocate(11 + len);
      if (name.getClass().isArray()) {
        for (int pos=0; pos != Array.getLength(name); ++pos) {
          Object it=Array.get(name,pos);
          buff.put((byte)2);
          int base_address=((Number)it).shortValue() & 0xFFFF;
          base_address+=((AttributeOrdinal - 1) * 8);
          buff.putShort((short)base_address);
        }
      }
 else {
        buff.put((byte)1);
      }
      if (cmd == Command.ReadResponse || cmd == Command.WriteResponse) {
        buff.put((byte)0x0);
      }
 else {
        buff.put((byte)parameterCount);
        int base_address=GXCommon.intValue(name);
        if (cmd == Command.MethodRequest) {
          base_address+=AttributeOrdinal;
        }
 else {
          base_address+=((AttributeOrdinal - 1) * 8);
        }
        buff.putShort((short)base_address);
      }
    }
    if (data != null && data.length != 0) {
      buff.put(data);
    }
  }
  return splitToBlocks(buff,cmd);
}","/** 
 * Reserved for internal use.
 */
final byte[][] generateMessage(Object name,int parameterCount,byte[] data,ObjectType interfaceClass,int AttributeOrdinal,Command cmd){
  if (getLimits().getMaxInfoRX() == null) {
    throw new GXDLMSException(""String_Node_Str"");
  }
  java.nio.ByteBuffer buff;
  if (name instanceof byte[]) {
    buff=java.nio.ByteBuffer.wrap((byte[])name);
  }
 else {
    if (name == null) {
      buff=java.nio.ByteBuffer.wrap(data);
    }
 else     if (getUseLogicalNameReferencing()) {
      int len=data == null ? 0 : data.length;
      buff=java.nio.ByteBuffer.allocate(20 + len);
      if (cmd == Command.GetRequest || cmd == Command.SetRequest || cmd == Command.MethodRequest) {
        buff.putShort((short)interfaceClass.getValue());
        String[] items=((String)name).split(""String_Node_Str"",-1);
        if (items.length != 6) {
          throw new GXDLMSException(""String_Node_Str"");
        }
        for (        String it : items) {
          buff.put((byte)(Short.parseShort(it) & 0xFF));
        }
        buff.put((byte)AttributeOrdinal);
        if (data == null || data.length == 0) {
          buff.put((byte)0);
        }
 else {
          buff.put((byte)1);
        }
      }
    }
 else {
      int len=data == null ? 0 : data.length;
      buff=java.nio.ByteBuffer.allocate(11 + len);
      if (name.getClass().isArray()) {
        for (int pos=0; pos != Array.getLength(name); ++pos) {
          Object it=Array.get(name,pos);
          buff.put((byte)2);
          int base_address=((Number)it).shortValue() & 0xFFFF;
          base_address+=((AttributeOrdinal - 1) * 8);
          buff.putShort((short)base_address);
        }
      }
 else {
        buff.put((byte)1);
      }
      if (cmd == Command.ReadResponse || cmd == Command.WriteResponse) {
        buff.put((byte)0x0);
      }
 else {
        buff.put((byte)parameterCount);
        int base_address=GXCommon.intValue(name);
        if (cmd == Command.MethodRequest) {
          base_address+=AttributeOrdinal;
        }
 else {
          base_address+=((AttributeOrdinal - 1) * 8);
        }
        buff.putShort((short)base_address);
      }
    }
    if (data != null && data.length != 0) {
      buff.put(data);
    }
  }
  return splitToBlocks(buff,cmd);
}"
53302,"/** 
 * Read rows by range. Use this method to read Profile Generic table between dates.
 * @param name object name.
 * @param sortedLn The logical name of the sorted object.
 * @param sortedObjectType The ObjectType of the sorted object.
 * @param sortedVersion The version of the sorted object.
 * @param start Start time.
 * @param end End time.
 */
public final byte[] readRowsByRange(Object name,String sortedLn,ObjectType sortedObjectType,int sortedVersion,java.util.Date start,java.util.Date end) throws RuntimeException, UnsupportedEncodingException, ParseException {
  m_Base.clearProgress();
  java.nio.ByteBuffer buff=java.nio.ByteBuffer.allocate(100);
  buff.put((byte)0x01);
  buff.put((byte)DataType.STRUCTURE.getValue());
  buff.put((byte)0x04);
  buff.put((byte)0x02);
  buff.put((byte)0x04);
  GXCommon.setData(buff,DataType.UINT16,(short)8);
  GXCommon.setData(buff,DataType.OCTET_STRING,sortedLn);
  GXCommon.setData(buff,DataType.INT8,2);
  GXCommon.setData(buff,DataType.UINT16,sortedVersion);
  GXCommon.setData(buff,DataType.DATETIME,start);
  GXCommon.setData(buff,DataType.DATETIME,end);
  buff.put((byte)0x01);
  buff.put((byte)0x00);
  byte[] tmp=new byte[buff.position()];
  buff.position(0);
  buff.get(tmp);
  return m_Base.generateMessage(name,1,tmp,ObjectType.PROFILE_GENERIC,2,this.getUseLogicalNameReferencing() ? Command.GetRequest : Command.ReadRequest)[0];
}","/** 
 * Read rows by range. Use this method to read Profile Generic table between dates.
 * @param name object name.
 * @param sortedLn The logical name of the sorted object.
 * @param sortedObjectType The ObjectType of the sorted object.
 * @param sortedVersion The version of the sorted object.
 * @param start Start time.
 * @param end End time.
 */
public final byte[] readRowsByRange(Object name,String sortedLn,ObjectType sortedObjectType,int sortedVersion,java.util.Date start,java.util.Date end) throws RuntimeException, UnsupportedEncodingException, ParseException {
  m_Base.clearProgress();
  java.nio.ByteBuffer buff=java.nio.ByteBuffer.allocate(100);
  buff.put((byte)0x01);
  buff.put((byte)DataType.STRUCTURE.getValue());
  buff.put((byte)0x04);
  buff.put((byte)0x02);
  buff.put((byte)0x04);
  GXCommon.setData(buff,DataType.UINT16,(short)8);
  GXCommon.setData(buff,DataType.OCTET_STRING,sortedLn);
  GXCommon.setData(buff,DataType.INT8,2);
  GXCommon.setData(buff,DataType.UINT16,sortedVersion);
  GXCommon.setData(buff,DataType.DATETIME,start);
  GXCommon.setData(buff,DataType.DATETIME,end);
  buff.put((byte)0x01);
  buff.put((byte)0x00);
  byte[] tmp=new byte[buff.position()];
  buff.position(0);
  buff.get(tmp);
  return m_Base.generateMessage(name,4,tmp,ObjectType.PROFILE_GENERIC,2,this.getUseLogicalNameReferencing() ? Command.GetRequest : Command.ReadRequest)[0];
}"
53303,"/** 
 * Read rows by entry.
 * @param name object name.
 * @param index Zero bases start index.
 * @param count Rows count to read.
 * @return Read message as byte array.
 */
public final byte[] readRowsByEntry(Object name,int index,int count) throws RuntimeException, UnsupportedEncodingException, ParseException {
  m_Base.clearProgress();
  java.nio.ByteBuffer buff=java.nio.ByteBuffer.allocate(19);
  buff.put((byte)0x02);
  buff.put((byte)DataType.STRUCTURE.getValue());
  buff.put((byte)0x04);
  GXCommon.setData(buff,DataType.UINT32,index);
  GXCommon.setData(buff,DataType.UINT32,count);
  GXCommon.setData(buff,DataType.UINT16,0);
  GXCommon.setData(buff,DataType.UINT16,0);
  return m_Base.generateMessage(name,1,buff.array(),ObjectType.PROFILE_GENERIC,2,this.getUseLogicalNameReferencing() ? Command.GetRequest : Command.ReadRequest)[0];
}","/** 
 * Read rows by entry.
 * @param name object name.
 * @param index Zero bases start index.
 * @param count Rows count to read.
 * @return Read message as byte array.
 */
public final byte[] readRowsByEntry(Object name,int index,int count) throws RuntimeException, UnsupportedEncodingException, ParseException {
  m_Base.clearProgress();
  java.nio.ByteBuffer buff=java.nio.ByteBuffer.allocate(19);
  buff.put((byte)0x02);
  buff.put((byte)DataType.STRUCTURE.getValue());
  buff.put((byte)0x04);
  GXCommon.setData(buff,DataType.UINT32,index);
  GXCommon.setData(buff,DataType.UINT32,count);
  GXCommon.setData(buff,DataType.UINT16,0);
  GXCommon.setData(buff,DataType.UINT16,0);
  return m_Base.generateMessage(name,4,buff.array(),ObjectType.PROFILE_GENERIC,2,this.getUseLogicalNameReferencing() ? Command.GetRequest : Command.ReadRequest)[0];
}"
53304,"/** 
 * Constructor.
 */
public GXDateTime(int year,int month,int day,int hour,int minute,int second,int millisecond){
  Skip=EnumSet.noneOf(DateTimeSkips.class);
  if (year == -1) {
    Skip.add(DateTimeSkips.YEAR);
    year=1;
  }
  if (month == -1) {
    Skip.add(DateTimeSkips.MONTH);
    month=0;
  }
 else {
    month-=1;
  }
  if (day == -1) {
    Skip.add(DateTimeSkips.DAY);
    day=1;
  }
  if (hour == -1) {
    Skip.add(DateTimeSkips.HOUR);
    hour=0;
  }
  if (minute == -1) {
    Skip.add(DateTimeSkips.MINUTE);
    minute=0;
  }
  if (second == -1) {
    Skip.add(DateTimeSkips.SECOND);
    second=0;
  }
  if (millisecond == -1) {
    Skip.add(DateTimeSkips.MILLISECOND);
    millisecond=0;
  }
  java.util.Calendar tm=java.util.Calendar.getInstance();
  tm.set(year,month,day,hour,minute,second);
  if (millisecond != 0) {
    tm.set(Calendar.MILLISECOND,millisecond);
  }
  setValue(tm.getTime());
}","/** 
 * Constructor.
 */
public GXDateTime(int year,int month,int day,int hour,int minute,int second,int millisecond){
  Skip=EnumSet.noneOf(DateTimeSkips.class);
  if (year == -1) {
    Skip.add(DateTimeSkips.YEAR);
    year=1;
  }
  if (month == -1) {
    Skip.add(DateTimeSkips.MONTH);
    month=0;
  }
 else {
    month-=1;
  }
  if (day == -1) {
    Skip.add(DateTimeSkips.DAY);
    day=1;
  }
  if (hour == -1) {
    Skip.add(DateTimeSkips.HOUR);
    hour=0;
  }
  if (minute == -1) {
    Skip.add(DateTimeSkips.MINUTE);
    minute=0;
  }
  if (second == -1) {
    Skip.add(DateTimeSkips.SECOND);
    second=0;
  }
  if (millisecond == -1) {
    Skip.add(DateTimeSkips.MILLISECOND);
    millisecond=0;
  }
  java.util.Calendar tm=java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""String_Node_Str""));
  tm.set(year,month,day,hour,minute,second);
  if (millisecond != 0) {
    tm.set(Calendar.MILLISECOND,millisecond);
  }
  setValue(tm.getTime());
}"
53305,"/** 
 * Reserved for internal use.
 */
public static Object getData(byte[] buff,int[] pos,int action,int[] count,int[] index,DataType[] type,int[] cachePosition){
  count[0]=0;
  index[0]=0;
  Object value=null;
  if (pos[0] == buff.length) {
    pos[0]=-1;
    return null;
  }
  boolean knownType=type[0] != DataType.NONE;
  if (!knownType) {
    type[0]=DataType.forValue(buff[pos[0]++]);
  }
  if (type[0] == DataType.NONE) {
    return value;
  }
  if (pos[0] == buff.length) {
    pos[0]=-1;
    return null;
  }
  int size=buff.length - pos[0];
  if (type[0] == DataType.ARRAY || type[0] == DataType.STRUCTURE) {
    count[0]=GXCommon.getObjectCount(buff,pos);
    if (action == 2) {
      return value;
    }
    if (cachePosition[0] > pos[0]) {
      pos[0]=cachePosition[0];
    }
    size=buff.length - pos[0];
    if (count[0] != 0 && size < 1) {
      pos[0]=-1;
      return null;
    }
    java.util.ArrayList<Object> arr=new java.util.ArrayList<Object>(count[0]);
    for (index[0]=0; index[0] != count[0]; ++index[0]) {
      DataType[] itemType=new DataType[]{DataType.NONE};
      int[] colCount=new int[1], colIndex=new int[1];
      int[] tmpPos=new int[1];
      Object tmp=getData(buff,pos,0,colCount,colIndex,itemType,tmpPos);
      if (colCount[0] == colIndex[0] && pos[0] != -1) {
        arr.add(tmp);
      }
      if (pos[0] == -1) {
        break;
      }
 else {
        cachePosition[0]=pos[0];
      }
    }
    if (index[0] == count[0] && pos[0] != -1) {
      cachePosition[0]=buff.length;
    }
    value=arr.toArray();
  }
 else   if (type[0] == DataType.BOOLEAN) {
    value=buff[pos[0]++] != 0;
  }
 else   if (type[0] == DataType.BITSTRING) {
    int cnt=buff[pos[0]++];
    --size;
    double t=cnt;
    t/=8;
    if (cnt % 8 != 0) {
      ++t;
    }
    int byteCnt=(int)Math.floor(t);
    if (size < byteCnt) {
      pos[0]=-1;
      return null;
    }
    char[] tmp=new char[cnt];
    for (int a=0; a != cnt; ++a) {
      int i=a / 8;
      byte b=buff[pos[0] + i];
      int val=(b >>> (a % 8)) & 0x1;
      tmp[cnt - a - 1]=val == 0 ? '0' : '1';
    }
    pos[0]+=(int)t;
    value=new String(tmp);
  }
 else   if (type[0] == DataType.INT32) {
    if (size < 4) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.getInt32(buff,pos);
  }
 else   if (type[0] == DataType.UINT32) {
    if (size < 4) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.getUInt32(buff,pos);
  }
 else   if (type[0] == DataType.STRING) {
    int len;
    if (knownType) {
      len=buff.length;
    }
 else {
      len=GXCommon.getObjectCount(buff,pos);
      if (buff.length - pos[0] < len) {
        pos[0]=-1;
        return null;
      }
    }
    if (len > 0) {
      boolean octetString=false;
      if (knownType) {
        for (        byte ch : buff) {
          if (ch < 0x21) {
            octetString=true;
            break;
          }
        }
      }
      if (octetString) {
        StringBuilder str=new StringBuilder(buff.length * 3);
        for (        byte ch : buff) {
          str.append(ch & 0xFF);
          str.append('.');
        }
        str.deleteCharAt(str.length() - 1);
        value=str.toString();
      }
 else {
        value=new String(GXCommon.rawData(buff,pos,len));
      }
    }
  }
 else   if (type[0] == DataType.OCTET_STRING) {
    int len;
    if (knownType) {
      len=buff.length;
    }
 else {
      len=GXCommon.getObjectCount(buff,pos);
      if (buff.length - pos[0] < len) {
        pos[0]=-1;
        return null;
      }
    }
    value=GXCommon.rawData(buff,pos,len);
  }
 else   if (type[0] == DataType.BCD) {
    int len;
    if (knownType) {
      len=buff.length;
    }
 else {
      len=GXCommon.getObjectCount(buff,pos);
    }
    StringBuilder bcd=new StringBuilder(len * 2);
    for (int a=0; a != len; ++a) {
      int idHigh=buff[pos[0]] >>> 4;
      int idLow=buff[pos[0]] & 0x0F;
      ++pos[0];
      bcd.append(String.format(""String_Node_Str"",idHigh,idLow));
    }
    value=bcd.toString();
  }
 else   if (type[0] == DataType.INT8) {
    value=(byte)buff[pos[0]++];
  }
 else   if (type[0] == DataType.INT16) {
    if (size < 2) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.getInt16(buff,pos);
  }
 else   if (type[0] == DataType.UINT8) {
    value=buff[pos[0]++] & 0xFF;
  }
 else   if (type[0] == DataType.UINT16) {
    if (size < 2) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.getUInt16(buff,pos);
  }
 else   if (type[0] == DataType.COMPACTARRAY) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else   if (type[0] == DataType.INT64) {
    if (size < 8) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.getInt64(buff,pos);
  }
 else   if (type[0] == DataType.UINT64) {
    if (size < 8) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.getUInt64(buff,pos);
  }
 else   if (type[0] == DataType.ENUM) {
    if (size < 1) {
      pos[0]=-1;
      return null;
    }
    value=buff[pos[0]++];
  }
 else   if (type[0] == DataType.FLOAT32) {
    if (size < 4) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.toFloat(buff,pos);
  }
 else   if (type[0] == DataType.FLOAT64) {
    if (size < 8) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.toDouble(buff,pos);
  }
 else   if (type[0] == DataType.DATETIME) {
    if (knownType) {
      if (size - pos[0] < 12) {
        pos[0]=-1;
        return null;
      }
    }
 else {
      ++pos[0];
      if (size < 12) {
        pos[0]=-1;
        return null;
      }
    }
    java.util.Set<DateTimeSkips> skip=EnumSet.noneOf(DateTimeSkips.class);
    java.util.Calendar tm=java.util.Calendar.getInstance();
    int val=GXCommon.getUInt16(buff,pos);
    if (val != 0xFFFF) {
      tm.set(java.util.Calendar.YEAR,val);
    }
 else {
      skip.add(DateTimeSkips.YEAR);
      tm.set(java.util.Calendar.YEAR,0);
    }
    val=buff[pos[0]++];
    if (val > 0 && val < 13) {
      tm.set(java.util.Calendar.MONTH,val - 1);
    }
 else {
      skip.add(DateTimeSkips.MONTH);
      tm.set(java.util.Calendar.MONTH,0);
    }
    val=buff[pos[0]++];
    if (val > 0 && val < 32) {
      tm.set(java.util.Calendar.DATE,val);
    }
 else {
      skip.add(DateTimeSkips.DAY);
      tm.set(java.util.Calendar.DATE,0);
    }
    pos[0]++;
    val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.HOUR_OF_DAY,val);
    }
 else {
      skip.add(DateTimeSkips.HOUR);
      tm.set(java.util.Calendar.HOUR_OF_DAY,0);
    }
    val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.MINUTE,val);
    }
 else {
      skip.add(DateTimeSkips.MINUTE);
      tm.set(java.util.Calendar.MINUTE,0);
    }
    val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.SECOND,val);
    }
 else {
      skip.add(DateTimeSkips.SECOND);
      tm.set(java.util.Calendar.SECOND,0);
    }
    val=buff[pos[0]++];
    if (val != -1) {
      skip.add(DateTimeSkips.MILLISECOND);
      tm.set(java.util.Calendar.MILLISECOND,val);
    }
 else {
      tm.set(java.util.Calendar.MILLISECOND,0);
    }
    GXDateTime dt=new GXDateTime(tm.getTime());
    dt.setSkip(skip);
    value=dt;
  }
 else   if (type[0] == DataType.DATE) {
    if (knownType) {
      if (size < 4) {
        pos[0]=-1;
        return null;
      }
    }
 else     if (size < 5) {
      pos[0]=-1;
      return null;
    }
    java.util.Set<DateTimeSkips> skip=EnumSet.of(DateTimeSkips.HOUR);
    skip.add(DateTimeSkips.MINUTE);
    skip.add(DateTimeSkips.SECOND);
    skip.add(DateTimeSkips.MILLISECOND);
    java.util.Calendar tm=java.util.Calendar.getInstance();
    int val=GXCommon.getUInt16(buff,pos);
    if (val != -1) {
      tm.set(java.util.Calendar.YEAR,val);
    }
 else {
      skip.add(DateTimeSkips.YEAR);
      tm.set(java.util.Calendar.YEAR,0);
    }
    val=buff[pos[0]++];
    if (val > 0 && val < 13) {
      tm.set(java.util.Calendar.MONTH,val - 1);
    }
 else {
      skip.add(DateTimeSkips.MONTH);
      tm.set(java.util.Calendar.MONTH,0);
    }
    val=buff[pos[0]++];
    if (val > 0 && val < 32) {
      tm.set(java.util.Calendar.DATE,val);
    }
 else {
      skip.add(DateTimeSkips.DAY);
      tm.set(java.util.Calendar.DATE,0);
    }
    pos[0]++;
    GXDateTime dt=new GXDateTime(tm.getTime());
    dt.setSkip(skip);
    value=dt;
  }
 else   if (type[0] == DataType.TIME) {
    if (knownType) {
      if (size < 4) {
        pos[0]=-1;
        return null;
      }
    }
 else     if (size < 7) {
      pos[0]=-1;
      return null;
    }
    java.util.Set<DateTimeSkips> skip=EnumSet.of(DateTimeSkips.DAY);
    skip.add(DateTimeSkips.DAY_OF_WEEK);
    skip.add(DateTimeSkips.MONTH);
    skip.add(DateTimeSkips.YEAR);
    java.util.Calendar tm=java.util.Calendar.getInstance();
    int val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.HOUR_OF_DAY,val);
    }
 else {
      skip.add(DateTimeSkips.HOUR);
      tm.set(java.util.Calendar.HOUR_OF_DAY,0);
    }
    val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.MINUTE,val);
    }
 else {
      skip.add(DateTimeSkips.MINUTE);
      tm.set(java.util.Calendar.MINUTE,0);
    }
    val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.SECOND,val);
    }
 else {
      skip.add(DateTimeSkips.SECOND);
      tm.set(java.util.Calendar.SECOND,0);
    }
    val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.MILLISECOND,val);
    }
 else {
      skip.add(DateTimeSkips.MILLISECOND);
      tm.set(java.util.Calendar.MILLISECOND,0);
    }
    GXDateTime dt=new GXDateTime(tm.getTime());
    dt.setSkip(skip);
    value=dt;
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
  return value;
}","/** 
 * Reserved for internal use.
 */
public static Object getData(byte[] buff,int[] pos,int action,int[] count,int[] index,DataType[] type,int[] cachePosition){
  count[0]=0;
  index[0]=0;
  Object value=null;
  if (pos[0] == buff.length) {
    pos[0]=-1;
    return null;
  }
  boolean knownType=type[0] != DataType.NONE;
  if (!knownType) {
    type[0]=DataType.forValue(buff[pos[0]++]);
  }
  if (type[0] == DataType.NONE) {
    return value;
  }
  if (pos[0] == buff.length) {
    pos[0]=-1;
    return null;
  }
  int size=buff.length - pos[0];
  if (type[0] == DataType.ARRAY || type[0] == DataType.STRUCTURE) {
    count[0]=GXCommon.getObjectCount(buff,pos);
    if (action == 2) {
      return value;
    }
    if (cachePosition[0] > pos[0]) {
      pos[0]=cachePosition[0];
    }
    size=buff.length - pos[0];
    if (count[0] != 0 && size < 1) {
      pos[0]=-1;
      return null;
    }
    java.util.ArrayList<Object> arr=new java.util.ArrayList<Object>(count[0]);
    for (index[0]=0; index[0] != count[0]; ++index[0]) {
      DataType[] itemType=new DataType[]{DataType.NONE};
      int[] colCount=new int[1], colIndex=new int[1];
      int[] tmpPos=new int[1];
      Object tmp=getData(buff,pos,0,colCount,colIndex,itemType,tmpPos);
      if (colCount[0] == colIndex[0] && pos[0] != -1) {
        arr.add(tmp);
      }
      if (pos[0] == -1) {
        break;
      }
 else {
        cachePosition[0]=pos[0];
      }
    }
    if (index[0] == count[0] && pos[0] != -1) {
      cachePosition[0]=buff.length;
    }
    value=arr.toArray();
  }
 else   if (type[0] == DataType.BOOLEAN) {
    value=buff[pos[0]++] != 0;
  }
 else   if (type[0] == DataType.BITSTRING) {
    int cnt=buff[pos[0]++];
    --size;
    double t=cnt;
    t/=8;
    if (cnt % 8 != 0) {
      ++t;
    }
    int byteCnt=(int)Math.floor(t);
    if (size < byteCnt) {
      pos[0]=-1;
      return null;
    }
    char[] tmp=new char[cnt];
    for (int a=0; a != cnt; ++a) {
      int i=a / 8;
      byte b=buff[pos[0] + i];
      int val=(b >>> (a % 8)) & 0x1;
      tmp[cnt - a - 1]=val == 0 ? '0' : '1';
    }
    pos[0]+=(int)t;
    value=new String(tmp);
  }
 else   if (type[0] == DataType.INT32) {
    if (size < 4) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.getInt32(buff,pos);
  }
 else   if (type[0] == DataType.UINT32) {
    if (size < 4) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.getUInt32(buff,pos);
  }
 else   if (type[0] == DataType.STRING) {
    int len;
    if (knownType) {
      len=buff.length;
    }
 else {
      len=GXCommon.getObjectCount(buff,pos);
      if (buff.length - pos[0] < len) {
        pos[0]=-1;
        return null;
      }
    }
    if (len > 0) {
      boolean octetString=false;
      if (knownType) {
        for (        byte ch : buff) {
          if (ch < 0x21) {
            octetString=true;
            break;
          }
        }
      }
      if (octetString) {
        StringBuilder str=new StringBuilder(buff.length * 3);
        for (        byte ch : buff) {
          str.append(ch & 0xFF);
          str.append('.');
        }
        str.deleteCharAt(str.length() - 1);
        value=str.toString();
      }
 else {
        value=new String(GXCommon.rawData(buff,pos,len));
      }
    }
  }
 else   if (type[0] == DataType.OCTET_STRING) {
    int len;
    if (knownType) {
      len=buff.length;
    }
 else {
      len=GXCommon.getObjectCount(buff,pos);
      if (buff.length - pos[0] < len) {
        pos[0]=-1;
        return null;
      }
    }
    value=GXCommon.rawData(buff,pos,len);
  }
 else   if (type[0] == DataType.BCD) {
    int len;
    if (knownType) {
      len=buff.length;
    }
 else {
      len=GXCommon.getObjectCount(buff,pos);
    }
    StringBuilder bcd=new StringBuilder(len * 2);
    for (int a=0; a != len; ++a) {
      int idHigh=buff[pos[0]] >>> 4;
      int idLow=buff[pos[0]] & 0x0F;
      ++pos[0];
      bcd.append(String.format(""String_Node_Str"",idHigh,idLow));
    }
    value=bcd.toString();
  }
 else   if (type[0] == DataType.INT8) {
    value=(byte)buff[pos[0]++];
  }
 else   if (type[0] == DataType.INT16) {
    if (size < 2) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.getInt16(buff,pos);
  }
 else   if (type[0] == DataType.UINT8) {
    value=buff[pos[0]++] & 0xFF;
  }
 else   if (type[0] == DataType.UINT16) {
    if (size < 2) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.getUInt16(buff,pos);
  }
 else   if (type[0] == DataType.COMPACTARRAY) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else   if (type[0] == DataType.INT64) {
    if (size < 8) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.getInt64(buff,pos);
  }
 else   if (type[0] == DataType.UINT64) {
    if (size < 8) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.getUInt64(buff,pos);
  }
 else   if (type[0] == DataType.ENUM) {
    if (size < 1) {
      pos[0]=-1;
      return null;
    }
    value=buff[pos[0]++];
  }
 else   if (type[0] == DataType.FLOAT32) {
    if (size < 4) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.toFloat(buff,pos);
  }
 else   if (type[0] == DataType.FLOAT64) {
    if (size < 8) {
      pos[0]=-1;
      return null;
    }
    value=GXCommon.toDouble(buff,pos);
  }
 else   if (type[0] == DataType.DATETIME) {
    if (knownType) {
      if (size - pos[0] < 12) {
        pos[0]=-1;
        return null;
      }
    }
 else {
      ++pos[0];
      if (size < 12) {
        pos[0]=-1;
        return null;
      }
    }
    java.util.Set<DateTimeSkips> skip=EnumSet.noneOf(DateTimeSkips.class);
    java.util.Calendar tm=java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""String_Node_Str""));
    int val=GXCommon.getUInt16(buff,pos);
    if (val != 0xFFFF) {
      tm.set(java.util.Calendar.YEAR,val);
    }
 else {
      skip.add(DateTimeSkips.YEAR);
      tm.set(java.util.Calendar.YEAR,0);
    }
    val=buff[pos[0]++];
    if (val > 0 && val < 13) {
      tm.set(java.util.Calendar.MONTH,val - 1);
    }
 else {
      skip.add(DateTimeSkips.MONTH);
      tm.set(java.util.Calendar.MONTH,0);
    }
    val=buff[pos[0]++];
    if (val > 0 && val < 32) {
      tm.set(java.util.Calendar.DATE,val);
    }
 else {
      skip.add(DateTimeSkips.DAY);
      tm.set(java.util.Calendar.DATE,0);
    }
    pos[0]++;
    val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.HOUR_OF_DAY,val);
    }
 else {
      skip.add(DateTimeSkips.HOUR);
      tm.set(java.util.Calendar.HOUR_OF_DAY,0);
    }
    val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.MINUTE,val);
    }
 else {
      skip.add(DateTimeSkips.MINUTE);
      tm.set(java.util.Calendar.MINUTE,0);
    }
    val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.SECOND,val);
    }
 else {
      skip.add(DateTimeSkips.SECOND);
      tm.set(java.util.Calendar.SECOND,0);
    }
    val=buff[pos[0]++];
    if (val != -1) {
      skip.add(DateTimeSkips.MILLISECOND);
      tm.set(java.util.Calendar.MILLISECOND,val);
    }
 else {
      tm.set(java.util.Calendar.MILLISECOND,0);
    }
    GXDateTime dt=new GXDateTime(tm.getTime());
    dt.setSkip(skip);
    value=dt;
  }
 else   if (type[0] == DataType.DATE) {
    if (knownType) {
      if (size < 4) {
        pos[0]=-1;
        return null;
      }
    }
 else     if (size < 5) {
      pos[0]=-1;
      return null;
    }
    java.util.Set<DateTimeSkips> skip=EnumSet.of(DateTimeSkips.HOUR);
    skip.add(DateTimeSkips.MINUTE);
    skip.add(DateTimeSkips.SECOND);
    skip.add(DateTimeSkips.MILLISECOND);
    java.util.Calendar tm=java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""String_Node_Str""));
    int val=GXCommon.getUInt16(buff,pos);
    if (val != -1) {
      tm.set(java.util.Calendar.YEAR,val);
    }
 else {
      skip.add(DateTimeSkips.YEAR);
      tm.set(java.util.Calendar.YEAR,0);
    }
    val=buff[pos[0]++];
    if (val > 0 && val < 13) {
      tm.set(java.util.Calendar.MONTH,val - 1);
    }
 else {
      skip.add(DateTimeSkips.MONTH);
      tm.set(java.util.Calendar.MONTH,0);
    }
    val=buff[pos[0]++];
    if (val > 0 && val < 32) {
      tm.set(java.util.Calendar.DATE,val);
    }
 else {
      skip.add(DateTimeSkips.DAY);
      tm.set(java.util.Calendar.DATE,0);
    }
    pos[0]++;
    GXDateTime dt=new GXDateTime(tm.getTime());
    dt.setSkip(skip);
    value=dt;
  }
 else   if (type[0] == DataType.TIME) {
    if (knownType) {
      if (size < 4) {
        pos[0]=-1;
        return null;
      }
    }
 else     if (size < 7) {
      pos[0]=-1;
      return null;
    }
    java.util.Set<DateTimeSkips> skip=EnumSet.of(DateTimeSkips.DAY);
    skip.add(DateTimeSkips.DAY_OF_WEEK);
    skip.add(DateTimeSkips.MONTH);
    skip.add(DateTimeSkips.YEAR);
    java.util.Calendar tm=java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""String_Node_Str""));
    int val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.HOUR_OF_DAY,val);
    }
 else {
      skip.add(DateTimeSkips.HOUR);
      tm.set(java.util.Calendar.HOUR_OF_DAY,0);
    }
    val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.MINUTE,val);
    }
 else {
      skip.add(DateTimeSkips.MINUTE);
      tm.set(java.util.Calendar.MINUTE,0);
    }
    val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.SECOND,val);
    }
 else {
      skip.add(DateTimeSkips.SECOND);
      tm.set(java.util.Calendar.SECOND,0);
    }
    val=buff[pos[0]++];
    if (val != -1) {
      tm.set(java.util.Calendar.MILLISECOND,val);
    }
 else {
      skip.add(DateTimeSkips.MILLISECOND);
      tm.set(java.util.Calendar.MILLISECOND,0);
    }
    GXDateTime dt=new GXDateTime(tm.getTime());
    dt.setSkip(skip);
    value=dt;
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
  return value;
}"
53306,"/** 
 * Reserved for internal use.
 * @param buff
 * @param type
 * @param value
 */
public static void setData(java.nio.ByteBuffer buff,DataType type,Object value) throws RuntimeException, UnsupportedEncodingException, ParseException {
  if (value != null && type == DataType.NONE) {
    type=getValueType(value);
  }
  if (value instanceof Enum) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (type == DataType.DATETIME || type == DataType.DATE || type == DataType.TIME) {
    buff.put((byte)DataType.OCTET_STRING.getValue());
  }
 else   if ((type == DataType.ARRAY && value instanceof byte[])) {
    buff.put((byte[])value);
    return;
  }
 else {
    buff.put((byte)type.getValue());
  }
  if (type == DataType.NONE) {
    return;
  }
  if (type == DataType.BOOLEAN) {
    if (Boolean.parseBoolean(value.toString())) {
      buff.put((byte)1);
    }
 else {
      buff.put((byte)0);
    }
  }
 else   if (type == DataType.INT8 || type == DataType.UINT8 || type == DataType.ENUM) {
    buff.put(((Number)value).byteValue());
  }
 else   if (type == DataType.INT16 || type == DataType.UINT16) {
    buff.putShort(((Number)value).shortValue());
  }
 else   if (type == DataType.INT32 || type == DataType.UINT32) {
    buff.putInt(((Number)value).intValue());
  }
 else   if (type == DataType.INT64 || type == DataType.UINT64) {
    buff.putLong(((Number)value).longValue());
  }
 else   if (type == DataType.FLOAT32) {
    buff.putFloat(((Number)value).floatValue());
  }
 else   if (type == DataType.FLOAT64) {
    buff.putDouble(((Number)value).doubleValue());
  }
 else   if (type == DataType.BITSTRING) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else   if (type == DataType.STRING) {
    if (value != null) {
      String str=value.toString();
      setObjectCount(str.length(),buff);
      buff.put(str.getBytes(""String_Node_Str""));
    }
 else {
      setObjectCount(0,buff);
    }
  }
 else   if (type == DataType.OCTET_STRING) {
    if (value instanceof String) {
      String[] items=((String)value).split(""String_Node_Str"",-1);
      setObjectCount(items.length,buff);
      for (      String it : items) {
        buff.put((byte)Integer.parseInt(it));
      }
    }
 else     if (value instanceof byte[]) {
      setObjectCount(((byte[])value).length,buff);
      buff.put((byte[])value);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
 else   if (type == DataType.ARRAY || type == DataType.STRUCTURE) {
    if (value != null) {
      int len=Array.getLength(value);
      setObjectCount(len,buff);
      for (int pos=0; pos != len; ++pos) {
        Object it=Array.get(value,pos);
        setData(buff,getValueType(it),it);
      }
    }
 else {
      setObjectCount(0,buff);
    }
  }
 else   if (type == DataType.BCD) {
    if (!(value instanceof String)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    String str=value.toString().trim();
    int len=str.length();
    if (len % 2 != 0) {
      str=""String_Node_Str"" + str;
      ++len;
    }
    len/=2;
    buff.put((byte)(len));
    for (int pos=0; pos != len; ++pos) {
      int ch1=Integer.parseInt(str.substring(2 * pos,2 * pos + 1));
      int ch2=Integer.parseInt(str.substring(2 * pos + 1,2 * pos + 1 + 1));
      buff.put((byte)(ch1 << 4 | ch2));
    }
  }
 else   if (type == DataType.COMPACTARRAY) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else   if (type == DataType.DATETIME) {
    java.util.Calendar tm=java.util.Calendar.getInstance();
    if (value instanceof java.util.Date) {
      tm.setTime((java.util.Date)value);
    }
 else     if (value instanceof java.util.Calendar) {
      tm.setTime(((java.util.Calendar)value).getTime());
    }
 else     if (value instanceof String) {
      DateFormat f=new SimpleDateFormat();
      try {
        tm.setTime(f.parse(value.toString()));
      }
 catch (      ParseException ex) {
        throw new RuntimeException(""String_Node_Str"" + ex.getMessage());
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    buff.put((byte)12);
    buff.putShort((short)tm.get(java.util.Calendar.YEAR));
    buff.put((byte)(tm.get(java.util.Calendar.MONTH) + 1));
    buff.put((byte)tm.get(java.util.Calendar.DATE));
    buff.put((byte)0xFF);
    buff.put((byte)tm.get(java.util.Calendar.HOUR_OF_DAY));
    buff.put((byte)tm.get(java.util.Calendar.MINUTE));
    buff.put((byte)tm.get(java.util.Calendar.SECOND));
    buff.put((byte)0xFF);
    buff.put((byte)0x80);
    buff.put((byte)0x00);
    buff.put((byte)0xFF);
  }
 else   if (type == DataType.DATE) {
    java.util.Calendar tm=java.util.Calendar.getInstance();
    if (value instanceof java.util.Date) {
      tm.setTime((java.util.Date)value);
    }
 else     if (value instanceof java.util.Calendar) {
      tm.setTime(((java.util.Calendar)value).getTime());
    }
 else     if (value instanceof String) {
      DateFormat f=new SimpleDateFormat();
      tm.setTime(f.parse(value.toString()));
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    buff.put((byte)5);
    buff.putShort((short)tm.get(java.util.Calendar.YEAR));
    buff.put((byte)(tm.get(java.util.Calendar.MONTH) + 1));
    buff.put((byte)tm.get(java.util.Calendar.DATE));
    buff.put((byte)0xFF);
  }
 else   if (type == DataType.TIME) {
    java.util.Calendar tm=java.util.Calendar.getInstance();
    if (value instanceof java.util.Date) {
      tm.setTime((java.util.Date)value);
    }
 else     if (value instanceof java.util.Calendar) {
      tm.setTime(((java.util.Calendar)value).getTime());
    }
 else     if (value instanceof String) {
      DateFormat f=new SimpleDateFormat();
      try {
        tm.setTime(f.parse(value.toString()));
      }
 catch (      ParseException ex) {
        throw new RuntimeException(""String_Node_Str"" + ex.getMessage());
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    buff.put((byte)7);
    buff.put((byte)tm.get(java.util.Calendar.HOUR_OF_DAY));
    buff.put((byte)tm.get(java.util.Calendar.MINUTE));
    buff.put((byte)tm.get(java.util.Calendar.SECOND));
    buff.put((byte)0xFF);
    buff.put((byte)0x80);
    buff.put((byte)0x00);
    buff.put((byte)0xFF);
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * Reserved for internal use.
 * @param buff
 * @param type
 * @param value
 */
public static void setData(java.nio.ByteBuffer buff,DataType type,Object value) throws RuntimeException, UnsupportedEncodingException, ParseException {
  if (value != null && type == DataType.NONE) {
    type=getValueType(value);
  }
  if (value instanceof Enum) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (type == DataType.DATETIME || type == DataType.DATE || type == DataType.TIME) {
    buff.put((byte)DataType.OCTET_STRING.getValue());
  }
 else   if ((type == DataType.ARRAY && value instanceof byte[])) {
    buff.put((byte[])value);
    return;
  }
 else {
    buff.put((byte)type.getValue());
  }
  if (type == DataType.NONE) {
    return;
  }
  if (type == DataType.BOOLEAN) {
    if (Boolean.parseBoolean(value.toString())) {
      buff.put((byte)1);
    }
 else {
      buff.put((byte)0);
    }
  }
 else   if (type == DataType.INT8 || type == DataType.UINT8 || type == DataType.ENUM) {
    buff.put(((Number)value).byteValue());
  }
 else   if (type == DataType.INT16 || type == DataType.UINT16) {
    buff.putShort(((Number)value).shortValue());
  }
 else   if (type == DataType.INT32 || type == DataType.UINT32) {
    buff.putInt(((Number)value).intValue());
  }
 else   if (type == DataType.INT64 || type == DataType.UINT64) {
    buff.putLong(((Number)value).longValue());
  }
 else   if (type == DataType.FLOAT32) {
    buff.putFloat(((Number)value).floatValue());
  }
 else   if (type == DataType.FLOAT64) {
    buff.putDouble(((Number)value).doubleValue());
  }
 else   if (type == DataType.BITSTRING) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else   if (type == DataType.STRING) {
    if (value != null) {
      String str=value.toString();
      setObjectCount(str.length(),buff);
      buff.put(str.getBytes(""String_Node_Str""));
    }
 else {
      setObjectCount(0,buff);
    }
  }
 else   if (type == DataType.OCTET_STRING) {
    if (value instanceof String) {
      String[] items=((String)value).split(""String_Node_Str"",-1);
      setObjectCount(items.length,buff);
      for (      String it : items) {
        buff.put((byte)Integer.parseInt(it));
      }
    }
 else     if (value instanceof byte[]) {
      setObjectCount(((byte[])value).length,buff);
      buff.put((byte[])value);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
 else   if (type == DataType.ARRAY || type == DataType.STRUCTURE) {
    if (value != null) {
      int len=Array.getLength(value);
      setObjectCount(len,buff);
      for (int pos=0; pos != len; ++pos) {
        Object it=Array.get(value,pos);
        setData(buff,getValueType(it),it);
      }
    }
 else {
      setObjectCount(0,buff);
    }
  }
 else   if (type == DataType.BCD) {
    if (!(value instanceof String)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    String str=value.toString().trim();
    int len=str.length();
    if (len % 2 != 0) {
      str=""String_Node_Str"" + str;
      ++len;
    }
    len/=2;
    buff.put((byte)(len));
    for (int pos=0; pos != len; ++pos) {
      int ch1=Integer.parseInt(str.substring(2 * pos,2 * pos + 1));
      int ch2=Integer.parseInt(str.substring(2 * pos + 1,2 * pos + 1 + 1));
      buff.put((byte)(ch1 << 4 | ch2));
    }
  }
 else   if (type == DataType.COMPACTARRAY) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else   if (type == DataType.DATETIME) {
    java.util.Calendar tm=java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""String_Node_Str""));
    if (value instanceof java.util.Date) {
      tm.setTime((java.util.Date)value);
    }
 else     if (value instanceof java.util.Calendar) {
      tm.setTime(((java.util.Calendar)value).getTime());
    }
 else     if (value instanceof String) {
      DateFormat f=new SimpleDateFormat();
      try {
        tm.setTime(f.parse(value.toString()));
      }
 catch (      ParseException ex) {
        throw new RuntimeException(""String_Node_Str"" + ex.getMessage());
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    buff.put((byte)12);
    buff.putShort((short)tm.get(java.util.Calendar.YEAR));
    buff.put((byte)(tm.get(java.util.Calendar.MONTH) + 1));
    buff.put((byte)tm.get(java.util.Calendar.DATE));
    buff.put((byte)0xFF);
    buff.put((byte)tm.get(java.util.Calendar.HOUR_OF_DAY));
    buff.put((byte)tm.get(java.util.Calendar.MINUTE));
    buff.put((byte)tm.get(java.util.Calendar.SECOND));
    buff.put((byte)0xFF);
    buff.put((byte)0x80);
    buff.put((byte)0x00);
    buff.put((byte)0xFF);
  }
 else   if (type == DataType.DATE) {
    java.util.Calendar tm=java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""String_Node_Str""));
    if (value instanceof java.util.Date) {
      tm.setTime((java.util.Date)value);
    }
 else     if (value instanceof java.util.Calendar) {
      tm.setTime(((java.util.Calendar)value).getTime());
    }
 else     if (value instanceof String) {
      DateFormat f=new SimpleDateFormat();
      tm.setTime(f.parse(value.toString()));
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    buff.put((byte)5);
    buff.putShort((short)tm.get(java.util.Calendar.YEAR));
    buff.put((byte)(tm.get(java.util.Calendar.MONTH) + 1));
    buff.put((byte)tm.get(java.util.Calendar.DATE));
    buff.put((byte)0xFF);
  }
 else   if (type == DataType.TIME) {
    java.util.Calendar tm=java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""String_Node_Str""));
    if (value instanceof java.util.Date) {
      tm.setTime((java.util.Date)value);
    }
 else     if (value instanceof java.util.Calendar) {
      tm.setTime(((java.util.Calendar)value).getTime());
    }
 else     if (value instanceof String) {
      DateFormat f=new SimpleDateFormat();
      try {
        tm.setTime(f.parse(value.toString()));
      }
 catch (      ParseException ex) {
        throw new RuntimeException(""String_Node_Str"" + ex.getMessage());
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    buff.put((byte)7);
    buff.put((byte)tm.get(java.util.Calendar.HOUR_OF_DAY));
    buff.put((byte)tm.get(java.util.Calendar.MINUTE));
    buff.put((byte)tm.get(java.util.Calendar.SECOND));
    buff.put((byte)0xFF);
    buff.put((byte)0x80);
    buff.put((byte)0x00);
    buff.put((byte)0xFF);
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}"
53307,"@Override public void setValue(int index,Object value,boolean raw){
  if (index == 1) {
    setLogicalName(GXDLMSObject.toLogicalName((byte[])value));
  }
 else   if (index == 2) {
    setExecutedScriptLogicalName(GXDLMSClient.changeType((byte[])Array.get(value,0),DataType.OCTET_STRING).toString());
    setExecutedScriptSelector(((Number)Array.get(value,1)).intValue());
  }
 else   if (index == 3) {
    setType(SingleActionScheduleType.forValue(((Number)value).intValue()));
  }
 else   if (index == 4) {
    setExecutionTime(null);
    if (value != null) {
      java.util.ArrayList<GXDateTime> items=new java.util.ArrayList<GXDateTime>();
      for (      Object it : (Object[])value) {
        GXDateTime dt=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(it,0),DataType.TIME);
        GXDateTime dt2=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(it,1),DataType.DATE);
        java.util.Calendar tm=java.util.Calendar.getInstance();
        tm.setTime(dt.getValue());
        java.util.Calendar date=java.util.Calendar.getInstance();
        date.setTime(dt2.getValue());
        tm.set(java.util.Calendar.YEAR,date.get(java.util.Calendar.YEAR));
        tm.set(java.util.Calendar.MONTH,date.get(java.util.Calendar.MONTH));
        tm.set(java.util.Calendar.DAY_OF_MONTH,date.get(java.util.Calendar.DAY_OF_MONTH));
        java.util.Set<DateTimeSkips> skip=dt.getSkip();
        skip.addAll(dt2.getSkip());
        dt.setSkip(skip);
        dt.setValue(tm.getTime());
        items.add(dt);
      }
      setExecutionTime(items.toArray(new GXDateTime[items.size()]));
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","@Override public void setValue(int index,Object value,boolean raw){
  if (index == 1) {
    setLogicalName(GXDLMSObject.toLogicalName((byte[])value));
  }
 else   if (index == 2) {
    setExecutedScriptLogicalName(GXDLMSClient.changeType((byte[])Array.get(value,0),DataType.OCTET_STRING).toString());
    setExecutedScriptSelector(((Number)Array.get(value,1)).intValue());
  }
 else   if (index == 3) {
    setType(SingleActionScheduleType.forValue(((Number)value).intValue()));
  }
 else   if (index == 4) {
    setExecutionTime(null);
    if (value != null) {
      java.util.ArrayList<GXDateTime> items=new java.util.ArrayList<GXDateTime>();
      for (      Object it : (Object[])value) {
        GXDateTime dt=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(it,0),DataType.TIME);
        GXDateTime dt2=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(it,1),DataType.DATE);
        java.util.Calendar tm=Calendar.getInstance(java.util.TimeZone.getTimeZone(""String_Node_Str""));
        tm.setTime(dt.getValue());
        java.util.Calendar date=java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""String_Node_Str""));
        date.setTime(dt2.getValue());
        tm.set(java.util.Calendar.YEAR,date.get(java.util.Calendar.YEAR));
        tm.set(java.util.Calendar.MONTH,date.get(java.util.Calendar.MONTH));
        tm.set(java.util.Calendar.DAY_OF_MONTH,date.get(java.util.Calendar.DAY_OF_MONTH));
        java.util.Set<DateTimeSkips> skip=dt.getSkip();
        skip.addAll(dt2.getSkip());
        dt.setSkip(skip);
        dt.setValue(tm.getTime());
        items.add(dt);
      }
      setExecutionTime(items.toArray(new GXDateTime[items.size()]));
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
53308,"public byte[][] presetAdjustingTime(GXDLMSClient client,Date presetTime,Date validityIntervalStart,Date validityIntervalEnd){
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  stream.write((byte)DataType.STRUCTURE.getValue());
  stream.write((byte)3);
  try {
    GXCommon.setData(stream,DataType.DATETIME,presetTime);
    GXCommon.setData(stream,DataType.DATETIME,validityIntervalStart);
    GXCommon.setData(stream,DataType.DATETIME,validityIntervalEnd);
  }
 catch (  Exception ex) {
    Logger.getLogger(GXDLMSClock.class.getName()).log(Level.SEVERE,null,ex);
    throw new RuntimeException(ex.getMessage());
  }
  byte[] ret=client.method(getName(),getObjectType(),5,stream.toByteArray(),DataType.ARRAY);
  return new byte[][]{ret};
}","public byte[][] presetAdjustingTime(GXDLMSClient client,Date presetTime,Date validityIntervalStart,Date validityIntervalEnd){
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  stream.write((byte)DataType.STRUCTURE.getValue());
  stream.write((byte)3);
  try {
    GXCommon.setData(stream,DataType.DATETIME,presetTime);
    GXCommon.setData(stream,DataType.DATETIME,validityIntervalStart);
    GXCommon.setData(stream,DataType.DATETIME,validityIntervalEnd);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex.getMessage());
  }
  byte[] ret=client.method(getName(),getObjectType(),5,stream.toByteArray(),DataType.ARRAY);
  return new byte[][]{ret};
}"
53309,"@Override @SuppressWarnings(""String_Node_Str"") public byte[] invoke(Object sender,int index,Object parameters){
  if (index == 1) {
    GXDateTime dt=getTime();
    java.util.Calendar tm=java.util.Calendar.getInstance();
    tm.setTime(dt.getValue());
    int minutes=tm.get(java.util.Calendar.MINUTE);
    if (minutes < 8) {
      minutes=0;
    }
 else     if (minutes < 23) {
      minutes=15;
    }
 else     if (minutes < 38) {
      minutes=30;
    }
 else     if (minutes < 53) {
      minutes=45;
    }
 else {
      minutes=0;
      tm.add(java.util.Calendar.HOUR,1);
    }
    tm.set(java.util.Calendar.MINUTE,minutes);
    tm.set(java.util.Calendar.SECOND,0);
    tm.set(java.util.Calendar.MILLISECOND,0);
    dt.setValue(tm.getTime());
    setTime(dt);
  }
 else   if (index == 3) {
    GXDateTime dt=getTime();
    java.util.Calendar tm=java.util.Calendar.getInstance();
    tm.setTime(dt.getValue());
    int s=tm.get(java.util.Calendar.SECOND);
    if (s > 30) {
      tm.add(java.util.Calendar.MINUTE,1);
    }
    tm.set(java.util.Calendar.SECOND,0);
    tm.set(java.util.Calendar.MILLISECOND,0);
    dt.setValue(tm.getTime());
    setTime(dt);
  }
 else   if (index == 5) {
    GXDateTime presetTime=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(parameters,0),DataType.DATETIME);
    GXDateTime validityIntervalStart=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(parameters,1),DataType.DATETIME);
    GXDateTime validityIntervalEnd=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(parameters,2),DataType.DATETIME);
    setTime(presetTime);
  }
 else   if (index == 6) {
    int shift=((Number)parameters).intValue();
    GXDateTime dt=getTime();
    java.util.Calendar tm=java.util.Calendar.getInstance();
    tm.setTime(dt.getValue());
    tm.add(java.util.Calendar.SECOND,shift);
    dt.setValue(tm.getTime());
    setTime(dt);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return null;
}","@Override @SuppressWarnings(""String_Node_Str"") public byte[] invoke(Object sender,int index,Object parameters){
  if (index == 1) {
    GXDateTime dt=getTime();
    java.util.Calendar tm=Calendar.getInstance(java.util.TimeZone.getTimeZone(""String_Node_Str""));
    tm.setTime(dt.getValue());
    int minutes=tm.get(java.util.Calendar.MINUTE);
    if (minutes < 8) {
      minutes=0;
    }
 else     if (minutes < 23) {
      minutes=15;
    }
 else     if (minutes < 38) {
      minutes=30;
    }
 else     if (minutes < 53) {
      minutes=45;
    }
 else {
      minutes=0;
      tm.add(java.util.Calendar.HOUR,1);
    }
    tm.set(java.util.Calendar.MINUTE,minutes);
    tm.set(java.util.Calendar.SECOND,0);
    tm.set(java.util.Calendar.MILLISECOND,0);
    dt.setValue(tm.getTime());
    setTime(dt);
  }
 else   if (index == 3) {
    GXDateTime dt=getTime();
    java.util.Calendar tm=Calendar.getInstance(java.util.TimeZone.getTimeZone(""String_Node_Str""));
    tm.setTime(dt.getValue());
    int s=tm.get(java.util.Calendar.SECOND);
    if (s > 30) {
      tm.add(java.util.Calendar.MINUTE,1);
    }
    tm.set(java.util.Calendar.SECOND,0);
    tm.set(java.util.Calendar.MILLISECOND,0);
    dt.setValue(tm.getTime());
    setTime(dt);
  }
 else   if (index == 5) {
    GXDateTime presetTime=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(parameters,0),DataType.DATETIME);
    GXDateTime validityIntervalStart=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(parameters,1),DataType.DATETIME);
    GXDateTime validityIntervalEnd=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(parameters,2),DataType.DATETIME);
    setTime(presetTime);
  }
 else   if (index == 6) {
    int shift=((Number)parameters).intValue();
    GXDateTime dt=getTime();
    java.util.Calendar tm=Calendar.getInstance(java.util.TimeZone.getTimeZone(""String_Node_Str""));
    tm.setTime(dt.getValue());
    tm.add(java.util.Calendar.SECOND,shift);
    dt.setValue(tm.getTime());
    setTime(dt);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return null;
}"
53310,"/** 
 * Reserved for internal use.
 * @param objectType
 * @param version
 * @param baseName
 * @param logicalName
 * @param accessRights
 * @param attributeIndex
 * @param dataIndex
 */
final void updateObjectData(GXDLMSObject obj,ObjectType objectType,Object version,Object baseName,byte[] logicalName,Object accessRights){
  obj.setObjectType(objectType);
  if (accessRights != null && accessRights.getClass().isArray()) {
    Object[] access=(Object[])accessRights;
    for (    Object attributeAccess : (Object[])access[0]) {
      int id=((Number)((Object[])attributeAccess)[0]).intValue();
      int tmp=((Number)((Object[])attributeAccess)[1]).intValue();
      AccessMode mode=AccessMode.forValue(tmp);
      obj.setAccess(id,mode);
    }
    for (    Object methodAccess : (Object[])access[1]) {
      int id=((Number)((Object[])methodAccess)[0]).intValue();
      int tmp;
      if (((Object[])methodAccess)[1] instanceof Boolean) {
        if ((boolean)((Object[])methodAccess)[1]) {
          tmp=1;
        }
 else {
          tmp=0;
        }
      }
 else {
        tmp=((Number)((Object[])methodAccess)[1]).intValue();
      }
      MethodAccessMode mode=MethodAccessMode.forValue(tmp);
      obj.setMethodAccess(id,mode);
    }
  }
  if (baseName != null) {
    obj.setShortName(((Number)baseName).intValue());
  }
  if (version != null) {
    obj.setVersion(((Number)version).intValue());
  }
  obj.setLogicalName(GXDLMSObject.toLogicalName(logicalName));
}","/** 
 * Reserved for internal use.
 * @param objectType
 * @param version
 * @param baseName
 * @param logicalName
 * @param accessRights
 * @param attributeIndex
 * @param dataIndex
 */
final void updateObjectData(GXDLMSObject obj,ObjectType objectType,Object version,Object baseName,byte[] logicalName,Object accessRights){
  obj.setObjectType(objectType);
  if (accessRights != null && accessRights.getClass().isArray()) {
    Object[] access=(Object[])accessRights;
    for (    Object attributeAccess : (Object[])access[0]) {
      int id=((Number)((Object[])attributeAccess)[0]).intValue();
      int tmp=((Number)((Object[])attributeAccess)[1]).intValue();
      AccessMode mode=AccessMode.forValue(tmp);
      obj.setAccess(id,mode);
    }
    for (    Object methodAccess : (Object[])access[1]) {
      int id=((Number)((Object[])methodAccess)[0]).intValue();
      int tmp;
      if (((Object[])methodAccess)[1] instanceof Boolean) {
        if ((Boolean)((Object[])methodAccess)[1]) {
          tmp=1;
        }
 else {
          tmp=0;
        }
      }
 else {
        tmp=((Number)((Object[])methodAccess)[1]).intValue();
      }
      MethodAccessMode mode=MethodAccessMode.forValue(tmp);
      obj.setMethodAccess(id,mode);
    }
  }
  if (baseName != null) {
    obj.setShortName(((Number)baseName).intValue());
  }
  if (version != null) {
    obj.setVersion(((Number)version).intValue());
  }
  obj.setLogicalName(GXDLMSObject.toLogicalName(logicalName));
}"
53311,"/** 
 * Mandles client request.
 * @param buff Received data from the client.
 * @return Response to the request.        Response is null if request packet is not compleate.
 */
public final byte[] handleRequest(byte[] buff){
  if (buff == null) {
    return null;
  }
  if (!Initialized) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int[] command=new int[1];
  try {
    byte[] data;
    if (ReceivedFrame.size() != 0) {
      ReceivedFrame.write(buff);
      data=ReceivedFrame.toByteArray();
    }
 else {
      data=buff;
    }
    if (m_Base.getServerID() == null) {
      Object[] sid=new Object[1], cid=new Object[1];
      getAddress(data,cid,sid);
      for (      Object it : this.getServerIDs()) {
        if (((Number)sid[0]).intValue() == ((Number)it).intValue()) {
          m_Base.setServerID(sid[0]);
          m_Base.setClientID(cid[0]);
          break;
        }
      }
      if (m_Base.getServerID() == null) {
        invalidConnection(new ConnectionEventArgs(sid));
        return null;
      }
    }
    if (!m_Base.isDLMSPacketComplete(data)) {
      if (ReceivedFrame.size() == 0) {
        ReceivedFrame.write(buff);
      }
      return null;
    }
    List<Object> names=new ArrayList<Object>();
    GXDLMSObject item=null;
    ByteArrayOutputStream tmp=new ByteArrayOutputStream();
    byte[] frame=new byte[1];
    java.util.Set<RequestTypes> ret=m_Base.getDataFromPacket(data,tmp,frame,command);
    byte[] allData=tmp.toByteArray();
    ReceivedFrame.reset();
    if (ret.contains(RequestTypes.FRAME)) {
      ++FrameIndex;
      if ((frame[0] & 0x1) == 0) {
        if (command[0] != 0) {
          LastCommand=command[0];
        }
        ReceivedData.write(allData);
        SendData.clear();
        FrameIndex=0;
        --m_Base.expectedFrame;
        return m_Base.receiverReady(RequestTypes.FRAME);
      }
 else       if (FrameIndex >= SendData.size() && (frame[0] & 0x1) == 1) {
        SendData.clear();
        FrameIndex=0;
        return m_Base.addFrame(m_Base.generateAliveFrame(),false,(byte[])null,0,0);
      }
      return SendData.get(FrameIndex);
    }
 else     if (ret.contains(RequestTypes.DATABLOCK)) {
      if ((frame[0] & 0x1) == 0) {
        if (command[0] != 0) {
          LastCommand=command[0];
        }
        ReceivedData.write(allData);
        SendData.clear();
        FrameIndex=0;
        return m_Base.receiverReady(RequestTypes.DATABLOCK);
      }
      ++FrameIndex;
      int[] index=new int[1];
      int BlockIndex=(int)GXCommon.getUInt32(allData,index);
      return SendData.get(FrameIndex);
    }
    if (ReceivedData.size() != 0) {
      ReceivedData.write(allData);
      allData=ReceivedData.toByteArray();
      ReceivedData.reset();
      command[0]=LastCommand;
    }
    FrameIndex=0;
    SendData.clear();
    if (command[0] == Command.GloGetRequest.getValue() || command[0] == Command.GloSetRequest.getValue() || command[0] == Command.GloMethodRequest.getValue()) {
      Command[] cmd=new Command[1];
      allData=m_Base.decrypt(allData,cmd);
      command[0]=cmd[0].getValue();
    }
    if (command[0] == Command.Snrm.getValue()) {
      SendData.add(handleSnrmRequest());
      return SendData.get(FrameIndex);
    }
 else     if (command[0] == Command.Aarq.getValue()) {
      SendData.add(handleAARQRequest(data));
      return SendData.get(FrameIndex);
    }
 else     if (command[0] == Command.DisconnectRequest.getValue()) {
      System.out.println(""String_Node_Str"");
      SendData.add(generateDisconnectRequest());
      return SendData.get(FrameIndex);
    }
 else     if (command[0] == Command.WriteRequest.getValue()) {
      int attributeIndex;
      int tmp2[]=new int[1];
      Object[] value=new Object[1];
      ObjectType[] type=new ObjectType[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,tmp2,selector,value);
      int sn=(int)names.get(0);
      for (      Map.Entry<Integer,GXDLMSObject> it : SortedItems.entrySet()) {
        int aCnt=((IGXDLMSBase)it.getValue()).getAttributeCount();
        if (sn >= it.getKey() && sn <= (it.getKey() + (8 * aCnt))) {
          item=it.getValue();
          attributeIndex=((sn - item.getShortName()) / 8) + 1;
          AccessMode acc=item.getAccess(attributeIndex);
          if (acc == AccessMode.NO_ACCESS || acc == AccessMode.READ || acc == AccessMode.AUTHENTICATED_READ) {
            SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
            return SendData.get(FrameIndex);
          }
          if (value instanceof Byte[]) {
            DataType tp=item.getUIDataType(attributeIndex);
            if (tp != DataType.NONE) {
              value[0]=GXDLMSClient.changeType((byte[])value[0],tp);
            }
          }
          ValueEventArgs e=new ValueEventArgs(item,attributeIndex,selector[0]);
          e.setValue(value[0]);
          write(e);
          if (!e.getHandled()) {
            ((IGXDLMSBase)item).setValue(attributeIndex,value[0]);
          }
          SendData.addAll(Arrays.asList(acknowledge(getUseLogicalNameReferencing() ? Command.SetResponse : Command.WriteResponse,0)));
          return SendData.get(FrameIndex);
        }
      }
      if (item == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (command[0] == Command.SetRequest.getValue()) {
      int attributeIndex[]=new int[1];
      Object[] value=new Object[1];
      ObjectType[] type=new ObjectType[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,attributeIndex,selector,value);
      item=getItems().findByLN(type[0],names.get(0).toString());
      if (item != null) {
        AccessMode acc=item.getAccess(attributeIndex[0]);
        if (acc == AccessMode.NO_ACCESS || acc == AccessMode.READ || acc == AccessMode.AUTHENTICATED_READ) {
          SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
          return SendData.get(FrameIndex);
        }
        if (value instanceof Byte[]) {
          DataType tp=item.getUIDataType(attributeIndex[0]);
          if (tp != DataType.NONE) {
            value[0]=GXDLMSClient.changeType((byte[])value[0],tp);
          }
        }
        ValueEventArgs e=new ValueEventArgs(item,attributeIndex[0],selector[0]);
        e.setValue(value[0]);
        write(e);
        if (!e.getHandled()) {
          ((IGXDLMSBase)item).setValue(attributeIndex[0],value[0]);
        }
        SendData.addAll(Arrays.asList(acknowledge(getUseLogicalNameReferencing() ? Command.SetResponse : Command.WriteResponse,0)));
        return SendData.get(FrameIndex);
      }
      throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     if (command[0] == Command.ReadRequest.getValue() && !getUseLogicalNameReferencing()) {
      int attributeIndex;
      int tmp2[]=new int[1];
      Object[] value=new Object[1];
      ObjectType[] type=new ObjectType[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,tmp2,selector,value);
      int sn=(int)names.get(0);
      for (      Map.Entry<Integer,GXDLMSObject> it : SortedItems.entrySet()) {
        int aCnt=((IGXDLMSBase)it.getValue()).getAttributeCount();
        if (sn >= it.getKey() && sn <= (it.getKey() + (8 * aCnt))) {
          item=it.getValue();
          attributeIndex=((sn - item.getShortName()) / 8) + 1;
          System.out.println(String.format(""String_Node_Str"",item.getName(),attributeIndex));
          ValueEventArgs e=new ValueEventArgs(item,attributeIndex,selector[0]);
          e.setValue(value[0]);
          read(e);
          if (e.getHandled()) {
            DataType tp=item.getDataType(attributeIndex);
            SendData.addAll(Arrays.asList(readReply(names.get(0),type[0],attributeIndex,e.getValue(),tp)));
            return SendData.get(FrameIndex);
          }
          if (item != null) {
            return getValue(names.get(0),item,attributeIndex,selector[0],value[0]);
          }
        }
 else         if (sn >= it.getKey() + aCnt && ((IGXDLMSBase)it.getValue()).getMethodCount() != 0) {
          int[] value2=new int[1], count=new int[1];
          GXDLMS.getActionInfo(it.getValue().getObjectType(),value2,count);
          if (sn <= it.getKey() + value2[0] + (8 * count[0])) {
            item=it.getValue();
            attributeIndex=((sn - item.getShortName() - value2[0]) / 8) + 1;
            System.out.println(String.format(""String_Node_Str"",item.getName(),attributeIndex));
            ValueEventArgs e=new ValueEventArgs(item,attributeIndex,selector[0]);
            e.setValue(value[0]);
            action(e);
            if (!e.getHandled()) {
              byte[][] reply=((IGXDLMSBase)item).invoke(this,attributeIndex,e.getValue());
              if (reply != null) {
                SendData.addAll(Arrays.asList(reply));
                return SendData.get(FrameIndex);
              }
            }
            SendData.addAll(Arrays.asList(acknowledge(Command.MethodResponse,0)));
            return SendData.get(FrameIndex);
          }
        }
      }
      throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     if (command[0] == Command.GetRequest.getValue() && getUseLogicalNameReferencing()) {
      ObjectType[] type=new ObjectType[]{ObjectType.NONE};
      int[] index=new int[1];
      Object[] parameter=new Object[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,index,selector,parameter);
      System.out.println(String.format(""String_Node_Str"",names,index[0]));
      item=m_Items.findByLN(type[0],names.get(0).toString());
      if (item != null) {
        ValueEventArgs e=new ValueEventArgs(item,index[0],selector[0]);
        read(e);
        if (e.getHandled()) {
          SendData.addAll(Arrays.asList(readReply(names.get(0),type[0],index[0],e.getValue(),e.getDataType())));
          return SendData.get(FrameIndex);
        }
        return getValue(names.get(0),item,index[0],selector[0],parameter[0]);
      }
    }
 else     if (command[0] == Command.MethodRequest.getValue()) {
      ObjectType[] type=new ObjectType[1];
      int[] index=new int[1];
      Object[] parameter=new Object[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,index,selector,parameter);
      item=m_Items.findByLN(type[0],names.get(0).toString());
      if (item != null) {
        System.out.println(String.format(""String_Node_Str"",names.get(0),index[0]));
        ValueEventArgs e=new ValueEventArgs(item,index[0],selector[0]);
        e.setValue(parameter[0]);
        action(e);
        if (!e.getHandled()) {
          byte[][] reply=item.invoke(this,index[0],e.getValue());
          if (reply != null) {
            SendData.addAll(Arrays.asList(reply));
            return SendData.get(FrameIndex);
          }
        }
        SendData.addAll(Arrays.asList(acknowledge(Command.MethodResponse,0)));
        return SendData.get(FrameIndex);
      }
    }
    SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
    return SendData.get(FrameIndex);
  }
 catch (  java.lang.Exception e) {
    ReceivedFrame.reset();
    SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
    return SendData.get(FrameIndex);
  }
}","/** 
 * Mandles client request.
 * @param buff Received data from the client.
 * @return Response to the request.        Response is null if request packet is not compleate.
 */
public final byte[] handleRequest(byte[] buff){
  if (buff == null) {
    return null;
  }
  if (!Initialized) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int[] command=new int[1];
  try {
    byte[] data;
    if (ReceivedFrame.size() != 0) {
      ReceivedFrame.write(buff);
      data=ReceivedFrame.toByteArray();
    }
 else {
      data=buff;
    }
    if (m_Base.getServerID() == null) {
      Object[] sid=new Object[1], cid=new Object[1];
      getAddress(data,cid,sid);
      for (      Object it : this.getServerIDs()) {
        if (((Number)sid[0]).intValue() == ((Number)it).intValue()) {
          m_Base.setServerID(sid[0]);
          m_Base.setClientID(cid[0]);
          break;
        }
      }
      if (m_Base.getServerID() == null) {
        invalidConnection(new ConnectionEventArgs(sid));
        return null;
      }
    }
    if (!m_Base.isDLMSPacketComplete(data)) {
      if (ReceivedFrame.size() == 0) {
        ReceivedFrame.write(buff);
      }
      return null;
    }
    List<Object> names=new ArrayList<Object>();
    GXDLMSObject item=null;
    ByteArrayOutputStream tmp=new ByteArrayOutputStream();
    byte[] frame=new byte[1];
    java.util.Set<RequestTypes> ret=m_Base.getDataFromPacket(data,tmp,frame,command);
    byte[] allData=tmp.toByteArray();
    ReceivedFrame.reset();
    if (ret.contains(RequestTypes.FRAME)) {
      ++FrameIndex;
      if ((frame[0] & 0x1) == 0) {
        if (command[0] != 0) {
          LastCommand=command[0];
        }
        ReceivedData.write(allData);
        SendData.clear();
        FrameIndex=0;
        --m_Base.expectedFrame;
        return m_Base.receiverReady(RequestTypes.FRAME);
      }
 else       if (FrameIndex >= SendData.size() && (frame[0] & 0x1) == 1) {
        SendData.clear();
        FrameIndex=0;
        return m_Base.addFrame(m_Base.generateAliveFrame(),false,(byte[])null,0,0);
      }
      return SendData.get(FrameIndex);
    }
 else     if (ret.contains(RequestTypes.DATABLOCK)) {
      if ((frame[0] & 0x1) == 0) {
        if (command[0] != 0) {
          LastCommand=command[0];
        }
        ReceivedData.write(allData);
        SendData.clear();
        FrameIndex=0;
        return m_Base.receiverReady(RequestTypes.DATABLOCK);
      }
      ++FrameIndex;
      int[] index=new int[1];
      int BlockIndex=(int)GXCommon.getUInt32(allData,index);
      return SendData.get(FrameIndex);
    }
    if (ReceivedData.size() != 0) {
      ReceivedData.write(allData);
      allData=ReceivedData.toByteArray();
      ReceivedData.reset();
      command[0]=LastCommand;
    }
    FrameIndex=0;
    SendData.clear();
    if (command[0] == Command.GloGetRequest.getValue() || command[0] == Command.GloSetRequest.getValue() || command[0] == Command.GloMethodRequest.getValue()) {
      Command[] cmd=new Command[1];
      allData=m_Base.decrypt(allData,cmd);
      command[0]=cmd[0].getValue();
    }
    if (command[0] == Command.Snrm.getValue()) {
      SendData.add(handleSnrmRequest());
      return SendData.get(FrameIndex);
    }
 else     if (command[0] == Command.Aarq.getValue()) {
      SendData.add(handleAARQRequest(data));
      return SendData.get(FrameIndex);
    }
 else     if (command[0] == Command.DisconnectRequest.getValue()) {
      System.out.println(""String_Node_Str"");
      SendData.add(generateDisconnectRequest());
      return SendData.get(FrameIndex);
    }
 else     if (command[0] == Command.WriteRequest.getValue()) {
      int attributeIndex;
      int tmp2[]=new int[1];
      Object[] value=new Object[1];
      ObjectType[] type=new ObjectType[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,tmp2,selector,value);
      int sn=((Number)names.get(0)).intValue();
      for (      Map.Entry<Integer,GXDLMSObject> it : SortedItems.entrySet()) {
        int aCnt=((IGXDLMSBase)it.getValue()).getAttributeCount();
        if (sn >= it.getKey() && sn <= (it.getKey() + (8 * aCnt))) {
          item=it.getValue();
          attributeIndex=((sn - item.getShortName()) / 8) + 1;
          AccessMode acc=item.getAccess(attributeIndex);
          if (acc == AccessMode.NO_ACCESS || acc == AccessMode.READ || acc == AccessMode.AUTHENTICATED_READ) {
            SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
            return SendData.get(FrameIndex);
          }
          if (value instanceof Byte[]) {
            DataType tp=item.getUIDataType(attributeIndex);
            if (tp != DataType.NONE) {
              value[0]=GXDLMSClient.changeType((byte[])value[0],tp);
            }
          }
          ValueEventArgs e=new ValueEventArgs(item,attributeIndex,selector[0]);
          e.setValue(value[0]);
          write(e);
          if (!e.getHandled()) {
            ((IGXDLMSBase)item).setValue(attributeIndex,value[0]);
          }
          SendData.addAll(Arrays.asList(acknowledge(getUseLogicalNameReferencing() ? Command.SetResponse : Command.WriteResponse,0)));
          return SendData.get(FrameIndex);
        }
      }
      if (item == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (command[0] == Command.SetRequest.getValue()) {
      int attributeIndex[]=new int[1];
      Object[] value=new Object[1];
      ObjectType[] type=new ObjectType[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,attributeIndex,selector,value);
      item=getItems().findByLN(type[0],names.get(0).toString());
      if (item != null) {
        AccessMode acc=item.getAccess(attributeIndex[0]);
        if (acc == AccessMode.NO_ACCESS || acc == AccessMode.READ || acc == AccessMode.AUTHENTICATED_READ) {
          SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
          return SendData.get(FrameIndex);
        }
        if (value instanceof Byte[]) {
          DataType tp=item.getUIDataType(attributeIndex[0]);
          if (tp != DataType.NONE) {
            value[0]=GXDLMSClient.changeType((byte[])value[0],tp);
          }
        }
        ValueEventArgs e=new ValueEventArgs(item,attributeIndex[0],selector[0]);
        e.setValue(value[0]);
        write(e);
        if (!e.getHandled()) {
          ((IGXDLMSBase)item).setValue(attributeIndex[0],value[0]);
        }
        SendData.addAll(Arrays.asList(acknowledge(getUseLogicalNameReferencing() ? Command.SetResponse : Command.WriteResponse,0)));
        return SendData.get(FrameIndex);
      }
      throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     if (command[0] == Command.ReadRequest.getValue() && !getUseLogicalNameReferencing()) {
      int attributeIndex;
      int tmp2[]=new int[1];
      Object[] value=new Object[1];
      ObjectType[] type=new ObjectType[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,tmp2,selector,value);
      int sn=((Number)names.get(0)).intValue();
      for (      Map.Entry<Integer,GXDLMSObject> it : SortedItems.entrySet()) {
        int aCnt=((IGXDLMSBase)it.getValue()).getAttributeCount();
        if (sn >= it.getKey() && sn <= (it.getKey() + (8 * aCnt))) {
          item=it.getValue();
          attributeIndex=((sn - item.getShortName()) / 8) + 1;
          System.out.println(String.format(""String_Node_Str"",item.getName(),attributeIndex));
          ValueEventArgs e=new ValueEventArgs(item,attributeIndex,selector[0]);
          e.setValue(value[0]);
          read(e);
          if (e.getHandled()) {
            DataType tp=item.getDataType(attributeIndex);
            SendData.addAll(Arrays.asList(readReply(names.get(0),type[0],attributeIndex,e.getValue(),tp)));
            return SendData.get(FrameIndex);
          }
          if (item != null) {
            return getValue(names.get(0),item,attributeIndex,selector[0],value[0]);
          }
        }
 else         if (sn >= it.getKey() + aCnt && ((IGXDLMSBase)it.getValue()).getMethodCount() != 0) {
          int[] value2=new int[1], count=new int[1];
          GXDLMS.getActionInfo(it.getValue().getObjectType(),value2,count);
          if (sn <= it.getKey() + value2[0] + (8 * count[0])) {
            item=it.getValue();
            attributeIndex=((sn - item.getShortName() - value2[0]) / 8) + 1;
            System.out.println(String.format(""String_Node_Str"",item.getName(),attributeIndex));
            ValueEventArgs e=new ValueEventArgs(item,attributeIndex,selector[0]);
            e.setValue(value[0]);
            action(e);
            if (!e.getHandled()) {
              byte[][] reply=((IGXDLMSBase)item).invoke(this,attributeIndex,e.getValue());
              if (reply != null) {
                SendData.addAll(Arrays.asList(reply));
                return SendData.get(FrameIndex);
              }
            }
            SendData.addAll(Arrays.asList(acknowledge(Command.MethodResponse,0)));
            return SendData.get(FrameIndex);
          }
        }
      }
      throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     if (command[0] == Command.GetRequest.getValue() && getUseLogicalNameReferencing()) {
      ObjectType[] type=new ObjectType[]{ObjectType.NONE};
      int[] index=new int[1];
      Object[] parameter=new Object[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,index,selector,parameter);
      System.out.println(String.format(""String_Node_Str"",names,index[0]));
      item=m_Items.findByLN(type[0],names.get(0).toString());
      if (item != null) {
        ValueEventArgs e=new ValueEventArgs(item,index[0],selector[0]);
        read(e);
        if (e.getHandled()) {
          SendData.addAll(Arrays.asList(readReply(names.get(0),type[0],index[0],e.getValue(),e.getDataType())));
          return SendData.get(FrameIndex);
        }
        return getValue(names.get(0),item,index[0],selector[0],parameter[0]);
      }
    }
 else     if (command[0] == Command.MethodRequest.getValue()) {
      ObjectType[] type=new ObjectType[1];
      int[] index=new int[1];
      Object[] parameter=new Object[1];
      int[] selector=new int[1];
      getCommand(command[0],allData,type,names,index,selector,parameter);
      item=m_Items.findByLN(type[0],names.get(0).toString());
      if (item != null) {
        System.out.println(String.format(""String_Node_Str"",names.get(0),index[0]));
        ValueEventArgs e=new ValueEventArgs(item,index[0],selector[0]);
        e.setValue(parameter[0]);
        action(e);
        if (!e.getHandled()) {
          byte[][] reply=item.invoke(this,index[0],e.getValue());
          if (reply != null) {
            SendData.addAll(Arrays.asList(reply));
            return SendData.get(FrameIndex);
          }
        }
        SendData.addAll(Arrays.asList(acknowledge(Command.MethodResponse,0)));
        return SendData.get(FrameIndex);
      }
    }
    SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
    return SendData.get(FrameIndex);
  }
 catch (  java.lang.Exception e) {
    ReceivedFrame.reset();
    SendData.addAll(Arrays.asList(serverReportError(Command.forValue(command[0]),3)));
    return SendData.get(FrameIndex);
  }
}"
53312,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSActionSchedule(String ln,int sn){
  super(ObjectType.ACTION_SCHEDULE,ln,sn);
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSActionSchedule(String ln,int sn){
  super(ObjectType.ACTION_SCHEDULE,ln,sn);
}"
53313,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSActivityCalendar(String ln,int sn){
  super(ObjectType.ACTIVITY_CALENDAR,ln,sn);
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSActivityCalendar(String ln,int sn){
  super(ObjectType.ACTIVITY_CALENDAR,ln,sn);
}"
53314,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 */
public GXDLMSAssociationLogicalName(String ln){
  super(ObjectType.ASSOCIATION_LOGICAL_NAME,ln,0);
  setLogicalName(ln);
  m_ObjectList=new GXDLMSObjectCollection(this);
  ApplicationContextName=new GXApplicationContextName();
  XDLMSContextInfo=new GXxDLMSContextType();
  AuthenticationMechanismMame=new GXAuthenticationMechanismName();
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 */
public GXDLMSAssociationLogicalName(String ln){
  super(ObjectType.ASSOCIATION_LOGICAL_NAME,ln,0);
  setLogicalName(ln);
  m_ObjectList=new GXDLMSObjectCollection(this);
  ApplicationContextName=new GXApplicationContextName();
  XDLMSContextInfo=new GXxDLMSContextType();
  AuthenticationMechanismMame=new GXAuthenticationMechanismName();
}"
53315,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSAssociationShortName(String ln,int sn){
  super(ObjectType.ASSOCIATION_SHORT_NAME,ln,sn);
  m_ObjectList=new GXDLMSObjectCollection(this);
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSAssociationShortName(String ln,int sn){
  super(ObjectType.ASSOCIATION_SHORT_NAME,ln,sn);
  m_ObjectList=new GXDLMSObjectCollection(this);
}"
53316,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSAutoAnswer(String ln,int sn){
  super(ObjectType.AUTO_ANSWER,ln,sn);
  m_ListeningWindow=new ArrayList<AbstractMap.SimpleEntry<GXDateTime,GXDateTime>>();
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSAutoAnswer(String ln,int sn){
  super(ObjectType.AUTO_ANSWER,ln,sn);
  m_ListeningWindow=new ArrayList<AbstractMap.SimpleEntry<GXDateTime,GXDateTime>>();
}"
53317,"@Override public void setValue(int index,Object value){
  if (index == 1) {
    super.setValue(index,value);
  }
 else   if (index == 2) {
    setMode(AutoConnectMode.forValue(((Number)value).byteValue() & 0xFF));
  }
 else   if (index == 3) {
    getListeningWindow().clear();
    if (value != null) {
      for (      Object item : (Object[])value) {
        GXDateTime start=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(item,0),DataType.DATETIME);
        GXDateTime end=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(item,1),DataType.DATETIME);
        getListeningWindow().add(new AbstractMap.SimpleEntry(start,end));
      }
    }
  }
 else   if (index == 4) {
    setStatus(AutoAnswerStatus.forValue(((Number)value).intValue()));
  }
 else   if (index == 5) {
    setNumberOfCalls(((Number)value).intValue());
  }
 else   if (index == 6) {
    m_NumberOfRingsInListeningWindow=m_NumberOfRingsOutListeningWindow=0;
    if (value != null) {
      m_NumberOfRingsInListeningWindow=((Number)Array.get(value,0)).intValue();
      m_NumberOfRingsOutListeningWindow=((Number)Array.get(value,1)).intValue();
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","@Override public void setValue(int index,Object value){
  if (index == 1) {
    super.setValue(index,value);
  }
 else   if (index == 2) {
    setMode(AutoConnectMode.forValue(((Number)value).byteValue() & 0xFF));
  }
 else   if (index == 3) {
    getListeningWindow().clear();
    if (value != null) {
      for (      Object item : (Object[])value) {
        GXDateTime start=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(item,0),DataType.DATETIME);
        GXDateTime end=(GXDateTime)GXDLMSClient.changeType((byte[])Array.get(item,1),DataType.DATETIME);
        getListeningWindow().add(new SimpleEntry<GXDateTime,GXDateTime>(start,end));
      }
    }
  }
 else   if (index == 4) {
    setStatus(AutoAnswerStatus.forValue(((Number)value).intValue()));
  }
 else   if (index == 5) {
    setNumberOfCalls(((Number)value).intValue());
  }
 else   if (index == 6) {
    m_NumberOfRingsInListeningWindow=m_NumberOfRingsOutListeningWindow=0;
    if (value != null) {
      m_NumberOfRingsInListeningWindow=((Number)Array.get(value,0)).intValue();
      m_NumberOfRingsOutListeningWindow=((Number)Array.get(value,1)).intValue();
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
53318,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSAutoConnect(String ln,int sn){
  super(ObjectType.AUTO_CONNECT,ln,sn);
  m_CallingWindow=new java.util.ArrayList<AbstractMap.SimpleEntry<GXDateTime,GXDateTime>>();
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSAutoConnect(String ln,int sn){
  super(ObjectType.AUTO_CONNECT,ln,sn);
  m_CallingWindow=new java.util.ArrayList<AbstractMap.SimpleEntry<GXDateTime,GXDateTime>>();
}"
53319,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSClock(String ln,int sn){
  super(ObjectType.CLOCK,ln,sn);
  Status=ClockStatus.OK;
  Deviation=0;
  java.util.Set<DateTimeSkips> value=EnumSet.of(DateTimeSkips.MONTH);
  value.add(DateTimeSkips.DAY);
  Begin.setSkip(value);
  End.setSkip(Begin.getSkip());
  m_ClockBase=ClockBase.None;
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSClock(String ln,int sn){
  super(ObjectType.CLOCK,ln,sn);
  Status=ClockStatus.OK;
  Deviation=0;
  java.util.Set<DateTimeSkips> value=EnumSet.of(DateTimeSkips.MONTH);
  value.add(DateTimeSkips.DAY);
  Begin.setSkip(value);
  End.setSkip(Begin.getSkip());
  m_ClockBase=ClockBase.None;
}"
53320,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSData(String ln,int sn){
  super(ObjectType.DATA,ln,sn);
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSData(String ln,int sn){
  super(ObjectType.DATA,ln,sn);
}"
53321,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSDemandRegister(String ln,int sn){
  super(ObjectType.DEMAND_REGISTER,ln,sn);
  setScaler(1);
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSDemandRegister(String ln,int sn){
  super(ObjectType.DEMAND_REGISTER,ln,sn);
  setScaler(1);
}"
53322,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSDisconnectControl(String ln,int sn){
  super(ObjectType.DISCONNECT_CONTROL,ln,sn);
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSDisconnectControl(String ln,int sn){
  super(ObjectType.DISCONNECT_CONTROL,ln,sn);
}"
53323,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSExtendedRegister(String ln,int sn){
  super(ObjectType.EXTENDED_REGISTER,ln,sn);
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSExtendedRegister(String ln,int sn){
  super(ObjectType.EXTENDED_REGISTER,ln,sn);
}"
53324,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSGprsSetup(String ln,int sn){
  super(ObjectType.GPRS_SETUP,ln,sn);
  DefaultQualityOfService=new GXDLMSQualityOfService();
  RequestedQualityOfService=new GXDLMSQualityOfService();
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSGprsSetup(String ln,int sn){
  super(ObjectType.GPRS_SETUP,ln,sn);
  DefaultQualityOfService=new GXDLMSQualityOfService();
  RequestedQualityOfService=new GXDLMSQualityOfService();
}"
53325,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSHdlcSetup(String ln,int sn){
  super(ObjectType.IEC_HDLC_SETUP,ln,0);
  setCommunicationSpeed(BaudRate.BAUDRATE_9600);
  setWindowSizeTransmit(1);
  setWindowSizeReceive(getWindowSizeTransmit());
  setMaximumInfoLengthReceive(128);
  setMaximumInfoLengthTransmit(getMaximumInfoLengthReceive());
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSHdlcSetup(String ln,int sn){
  super(ObjectType.IEC_HDLC_SETUP,ln,0);
  setCommunicationSpeed(BaudRate.BAUDRATE_9600);
  setWindowSizeTransmit(1);
  setWindowSizeReceive(getWindowSizeTransmit());
  setMaximumInfoLengthReceive(128);
  setMaximumInfoLengthTransmit(getMaximumInfoLengthReceive());
}"
53326,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSIECOpticalPortSetup(String ln,int sn){
  super(ObjectType.IEC_LOCAL_PORT_SETUP,ln,sn);
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSIECOpticalPortSetup(String ln,int sn){
  super(ObjectType.IEC_LOCAL_PORT_SETUP,ln,sn);
}"
53327,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSImageTransfer(String ln,int sn){
  super(ObjectType.IMAGE_TRANSFER,ln,sn);
  ImageBlockSize=200;
  ImageFirstNotTransferredBlockNumber=0;
  ImageTransferEnabled=true;
  GXDLMSImageActivateInfo info=new GXDLMSImageActivateInfo();
  info.Size=0;
  info.Signature=""String_Node_Str"";
  info.Identification=""String_Node_Str"";
  ImageActivateInfo=new GXDLMSImageActivateInfo[]{info};
  ImageTransferStatus=ImageTransferStatus.IMAGE_TRANSFER_NOT_INITIATED;
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSImageTransfer(String ln,int sn){
  super(ObjectType.IMAGE_TRANSFER,ln,sn);
  ImageBlockSize=200;
  ImageFirstNotTransferredBlockNumber=0;
  ImageTransferEnabled=true;
  GXDLMSImageActivateInfo info=new GXDLMSImageActivateInfo();
  info.Size=0;
  info.Signature=""String_Node_Str"";
  info.Identification=""String_Node_Str"";
  ImageActivateInfo=new GXDLMSImageActivateInfo[]{info};
  ImageTransferStatus=ImageTransferStatus.IMAGE_TRANSFER_NOT_INITIATED;
}"
53328,"/** 
 * Constructor.
 * @param ln Logican Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSIp4Setup(String ln,int sn){
  super(ObjectType.IP4_SETUP,ln,sn);
}","/** 
 * Constructor.
 * @param ln Logical Name of the object.
 * @param sn Short Name of the object.
 */
public GXDLMSIp4Setup(String ln,int sn){
  super(ObjectType.IP4_SETUP,ln,sn);
}"
53329,"public void compareAndUpdate(){
  FluidStack current=tank.getFluid();
  if (current != null) {
    if (lastBeforeUpdate != null) {
      if (Math.abs(current.amount - lastBeforeUpdate.amount) >= 500) {
        worldObj.addBlockEvent(xCoord,yCoord,zCoord,getBlockType().blockID,current.fluidID,current.amount);
        lastBeforeUpdate=current.copy();
      }
 else {
        if (lastBeforeUpdate.amount < tank.getCapacity() && current.amount == tank.getCapacity() || lastBeforeUpdate.amount == tank.getCapacity() && current.amount < tank.getCapacity()) {
          worldObj.addBlockEvent(xCoord,yCoord,zCoord,getBlockType().blockID,current.fluidID,current.amount);
          lastBeforeUpdate=current.copy();
        }
      }
    }
 else {
      worldObj.addBlockEvent(xCoord,yCoord,zCoord,getBlockType().blockID,current.fluidID,current.amount);
      lastBeforeUpdate=current.copy();
    }
  }
 else {
    if (lastBeforeUpdate != null) {
      worldObj.addBlockEvent(xCoord,yCoord,zCoord,getBlockType().blockID,-1,-1);
      lastBeforeUpdate=null;
    }
  }
}","public void compareAndUpdate(){
  FluidStack current=tank.getFluid();
  if (current != null) {
    if (lastBeforeUpdate != null) {
      if (Math.abs(current.amount - lastBeforeUpdate.amount) >= 500) {
        worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
        lastBeforeUpdate=current.copy();
      }
 else {
        if (lastBeforeUpdate.amount < tank.getCapacity() && current.amount == tank.getCapacity() || lastBeforeUpdate.amount == tank.getCapacity() && current.amount < tank.getCapacity()) {
          worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
          lastBeforeUpdate=current.copy();
        }
      }
    }
 else {
      worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
      lastBeforeUpdate=current.copy();
    }
  }
 else {
    if (lastBeforeUpdate != null) {
      worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
      lastBeforeUpdate=null;
    }
  }
}"
53330,"@Override public void updateEntity(){
  storingPower=this.worldObj.isBlockIndirectlyGettingPowered(xCoord,yCoord,zCoord) || this.worldObj.isBlockIndirectlyGettingPowered(xCoord,yCoord + 1,zCoord);
  if (getGrid() != null) {
    IMEPowerStorage controller=(IMEPowerStorage)getGrid().getController();
    if (storingPower) {
      energy=controller.addMEPower(energy);
    }
 else {
      for (int i=0; i < 5; i++) {
        if (energy + takeEnergy <= maxEnergy && controller.useMEEnergy(takeEnergy,StatCollector.translateToLocal(""String_Node_Str""))) {
          energy+=takeEnergy;
        }
 else {
          break;
        }
      }
    }
  }
}","@Override public void updateEntity(){
  if (getGrid() != null) {
    if (rechargeNetwork == null) {
      updateRechargeNetwork();
    }
    IMEPowerStorage controller=(IMEPowerStorage)getGrid().getController();
    if (rechargeNetwork) {
      if (controller.getMECurrentPower() < controller.getMEMaxPower()) {
        energy=controller.addMEPower(energy);
      }
    }
 else {
      for (int i=0; i < 5; i++) {
        if (energy + takeEnergy <= maxEnergy && controller.useMEEnergy(takeEnergy,StatCollector.translateToLocal(""String_Node_Str""))) {
          energy+=takeEnergy;
        }
 else {
          break;
        }
      }
    }
  }
}"
53331,"/** 
 * How many does it drop when broken...
 */
@Override public int quantityDropped(Random par1Random){
  return 1;
}","@Override public int quantityDropped(Random par1Random){
  return 1;
}"
53332,"/** 
 * Creates a new TileEntity instance.
 */
@Override public TileEntity createNewTileEntity(World world){
  return new TileEntitySolderingStation();
}","@Override public TileEntity createNewTileEntity(World world){
  return new TileEntitySolderingStation();
}"
53333,"/** 
 * Block does not render as Normal blocks it has a Model...
 */
@Override public boolean renderAsNormalBlock(){
  return false;
}","@Override public boolean renderAsNormalBlock(){
  return false;
}"
53334,"/** 
 * So that the texture does show up correct.
 */
@Override public int getRenderType(){
  return -1;
}","@Override public int getRenderType(){
  return -1;
}"
53335,"/** 
 * Obviously it's not an opaque cube.
 */
@Override public boolean isOpaqueCube(){
  return false;
}","@Override public boolean isOpaqueCube(){
  return false;
}"
53336,"/** 
 * Creates the tables, views, triggers and indices. TODO: move all strings to separate final static variables.
 */
@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(SQL_CREATE_LISTS_TABLE);
  db.execSQL(""String_Node_Str"" + Tables.LISTS + ""String_Node_Str""+ Tables.TASKS+ ""String_Node_Str""+ TaskContract.Tasks.LIST_ID+ ""String_Node_Str""+ TaskContract.TaskLists._ID+ ""String_Node_Str"");
  db.execSQL(SQL_CREATE_TASKS_TABLE);
  db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ Tables.LISTS+ ""String_Node_Str""+ TaskContract.TaskLists._DIRTY+ ""String_Node_Str""+ TaskContract.TaskLists._DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ TaskContract.Tasks._DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ TaskContract.Tasks._DELETED+ ""String_Node_Str""+ TaskContract.TaskLists._ID+ ""String_Node_Str""+ TaskContract.Tasks.LIST_ID+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ Tables.LISTS+ ""String_Node_Str""+ TaskContract.TaskLists._DIRTY+ ""String_Node_Str""+ TaskContract.TaskLists._DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ TaskContract.Tasks._DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ TaskContract.Tasks._DELETED+ ""String_Node_Str""+ TaskContract.TaskLists._ID+ ""String_Node_Str""+ TaskContract.Tasks.LIST_ID+ ""String_Node_Str"");
  db.execSQL(SQL_CREATE_INSTANCES_TABLE);
  db.execSQL(SQL_CREATE_CATEGORIES_TABLE);
  db.execSQL(SQL_CREATE_CATEGORIES_MAPPING_TABLE);
  db.execSQL(SQL_CREATE_ALARMS_TABLE);
  db.execSQL(SQL_CREATE_PROPERTIES_TABLE);
  db.execSQL(SQL_CREATE_TASK_VIEW);
  db.execSQL(SQL_CREATE_TASK_PROPERTY_VIEW);
  db.execSQL(SQL_CREATE_INSTANCE_VIEW);
  db.execSQL(SQL_CREATE_INSTANCE_PROPERTY_VIEW);
  db.execSQL(SQL_CREATE_INSTANCE_CATEGORY_VIEW);
  db.execSQL(createIndexString(Tables.INSTANCES,false,TaskContract.Instances.TASK_ID,TaskContract.Instances.INSTANCE_START,TaskContract.Instances.INSTANCE_DUE));
  db.execSQL(createIndexString(Tables.LISTS,false,TaskContract.TaskLists.ACCOUNT_NAME,TaskContract.TaskLists.ACCOUNT_TYPE));
  db.execSQL(createIndexString(Tables.TASKS,false,TaskContract.Tasks.STATUS,TaskContract.Tasks.LIST_ID,TaskContract.Tasks._SYNC_ID));
  db.execSQL(createIndexString(Tables.PROPERTIES,false,TaskContract.Properties.MIMETYPE,TaskContract.Properties.TASK_ID));
  db.execSQL(createIndexString(Tables.PROPERTIES,false,TaskContract.Properties.TASK_ID));
  db.execSQL(createIndexString(Tables.CATEGORIES,false,TaskContract.Categories.ACCOUNT_NAME,TaskContract.Categories.ACCOUNT_TYPE,TaskContract.Categories.NAME));
  db.execSQL(createIndexString(Tables.CATEGORIES,false,TaskContract.Categories.NAME));
  db.execSQL(SQL_CREATE_TASKS_CLEANUP_TRIGGER);
  db.execSQL(SQL_CREATE_ALARM_PROPERTY_CLEANUP_TRIGGER);
  db.execSQL(SQL_CREATE_LISTS_CLEANUP_TRIGGER);
  db.execSQL(SQL_CREATE_ALARM_COUNT_CREATE_TRIGGER);
  db.execSQL(SQL_CREATE_ALARM_COUNT_UPDATE_TRIGGER);
  db.execSQL(SQL_CREATE_ALARM_COUNT_DELETE_TRIGGER);
  FTSDatabaseHelper.onCreate(db);
  if (mCreateLocalList) {
    db.execSQL(""String_Node_Str"" + Tables.LISTS + ""String_Node_Str""+ TaskLists.ACCOUNT_TYPE+ ""String_Node_Str""+ TaskLists.ACCOUNT_NAME+ ""String_Node_Str""+ TaskLists.LIST_NAME+ ""String_Node_Str""+ TaskLists.LIST_COLOR+ ""String_Node_Str""+ TaskLists.VISIBLE+ ""String_Node_Str""+ TaskLists.SYNC_ENABLED+ ""String_Node_Str""+ TaskLists.OWNER+ ""String_Node_Str"",new Object[]{TaskContract.LOCAL_ACCOUNT,""String_Node_Str"",""String_Node_Str"",Color.rgb(30,136,229),1,1,""String_Node_Str""});
  }
}","/** 
 * Creates the tables, views, triggers and indices. TODO: move all strings to separate final static variables.
 */
@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(SQL_CREATE_LISTS_TABLE);
  db.execSQL(""String_Node_Str"" + Tables.LISTS + ""String_Node_Str""+ Tables.TASKS+ ""String_Node_Str""+ TaskContract.Tasks.LIST_ID+ ""String_Node_Str""+ TaskContract.TaskLists._ID+ ""String_Node_Str"");
  db.execSQL(SQL_CREATE_TASKS_TABLE);
  db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ Tables.LISTS+ ""String_Node_Str""+ TaskContract.TaskLists._DIRTY+ ""String_Node_Str""+ TaskContract.TaskLists._DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ TaskContract.Tasks._DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ TaskContract.Tasks._DELETED+ ""String_Node_Str""+ TaskContract.TaskLists._ID+ ""String_Node_Str""+ TaskContract.Tasks.LIST_ID+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ Tables.LISTS+ ""String_Node_Str""+ TaskContract.TaskLists._DIRTY+ ""String_Node_Str""+ TaskContract.TaskLists._DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ TaskContract.Tasks._DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ TaskContract.Tasks._DELETED+ ""String_Node_Str""+ TaskContract.TaskLists._ID+ ""String_Node_Str""+ TaskContract.Tasks.LIST_ID+ ""String_Node_Str"");
  db.execSQL(SQL_CREATE_INSTANCES_TABLE);
  db.execSQL(SQL_CREATE_CATEGORIES_TABLE);
  db.execSQL(SQL_CREATE_CATEGORIES_MAPPING_TABLE);
  db.execSQL(SQL_CREATE_ALARMS_TABLE);
  db.execSQL(SQL_CREATE_PROPERTIES_TABLE);
  db.execSQL(SQL_CREATE_TASK_VIEW);
  db.execSQL(SQL_CREATE_TASK_PROPERTY_VIEW);
  db.execSQL(SQL_CREATE_INSTANCE_VIEW);
  db.execSQL(SQL_CREATE_INSTANCE_PROPERTY_VIEW);
  db.execSQL(SQL_CREATE_INSTANCE_CATEGORY_VIEW);
  db.execSQL(createIndexString(Tables.INSTANCES,false,TaskContract.Instances.TASK_ID,TaskContract.Instances.INSTANCE_START,TaskContract.Instances.INSTANCE_DUE));
  db.execSQL(createIndexString(Tables.LISTS,false,TaskContract.TaskLists.ACCOUNT_NAME,TaskContract.TaskLists.ACCOUNT_TYPE));
  db.execSQL(createIndexString(Tables.TASKS,false,TaskContract.Tasks.STATUS,TaskContract.Tasks.LIST_ID,TaskContract.Tasks._SYNC_ID));
  db.execSQL(createIndexString(Tables.PROPERTIES,false,TaskContract.Properties.MIMETYPE,TaskContract.Properties.TASK_ID));
  db.execSQL(createIndexString(Tables.PROPERTIES,false,TaskContract.Properties.TASK_ID));
  db.execSQL(createIndexString(Tables.CATEGORIES,false,TaskContract.Categories.ACCOUNT_NAME,TaskContract.Categories.ACCOUNT_TYPE,TaskContract.Categories.NAME));
  db.execSQL(createIndexString(Tables.CATEGORIES,false,TaskContract.Categories.NAME));
  db.execSQL(SQL_CREATE_TASKS_CLEANUP_TRIGGER);
  db.execSQL(SQL_CREATE_ALARM_PROPERTY_CLEANUP_TRIGGER);
  db.execSQL(SQL_CREATE_LISTS_CLEANUP_TRIGGER);
  db.execSQL(SQL_CREATE_ALARM_COUNT_CREATE_TRIGGER);
  db.execSQL(SQL_CREATE_ALARM_COUNT_UPDATE_TRIGGER);
  db.execSQL(SQL_CREATE_ALARM_COUNT_DELETE_TRIGGER);
  db.execSQL(SQL_CREATE_TASK_PROPERTY_CLEANUP_TRIGGER);
  FTSDatabaseHelper.onCreate(db);
  if (mCreateLocalList) {
    db.execSQL(""String_Node_Str"" + Tables.LISTS + ""String_Node_Str""+ TaskLists.ACCOUNT_TYPE+ ""String_Node_Str""+ TaskLists.ACCOUNT_NAME+ ""String_Node_Str""+ TaskLists.LIST_NAME+ ""String_Node_Str""+ TaskLists.LIST_COLOR+ ""String_Node_Str""+ TaskLists.VISIBLE+ ""String_Node_Str""+ TaskLists.SYNC_ENABLED+ ""String_Node_Str""+ TaskLists.OWNER+ ""String_Node_Str"",new Object[]{TaskContract.LOCAL_ACCOUNT,""String_Node_Str"",""String_Node_Str"",Color.rgb(30,136,229),1,1,""String_Node_Str""});
  }
}"
53337,"/** 
 * Manages the database schema migration.
 */
@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  Log.i(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion);
  if (oldVersion < 2) {
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ TaskContract.Tasks.IS_NEW+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ TaskContract.Tasks.IS_CLOSED+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ TaskContract.Tasks.IS_NEW+ ""String_Node_Str""+ TaskContract.Tasks.STATUS+ ""String_Node_Str""+ TaskContract.Tasks.STATUS_NEEDS_ACTION);
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ TaskContract.Tasks.IS_NEW+ ""String_Node_Str""+ TaskContract.Tasks.STATUS+ ""String_Node_Str""+ TaskContract.Tasks.STATUS_NEEDS_ACTION);
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ TaskContract.Tasks.IS_CLOSED+ ""String_Node_Str""+ TaskContract.Tasks.STATUS+ ""String_Node_Str""+ TaskContract.Tasks.STATUS_IN_PROCESS);
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ TaskContract.Tasks.IS_CLOSED+ ""String_Node_Str""+ TaskContract.Tasks.STATUS+ ""String_Node_Str""+ TaskContract.Tasks.STATUS_IN_PROCESS);
  }
  if (oldVersion < 3) {
    db.execSQL(""String_Node_Str"" + Tables.INSTANCES + ""String_Node_Str""+ TaskContract.Instances.INSTANCE_START_SORTING+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.INSTANCES + ""String_Node_Str""+ TaskContract.Instances.INSTANCE_DUE_SORTING+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.INSTANCES + ""String_Node_Str""+ TaskContract.Instances.INSTANCE_START_SORTING+ ""String_Node_Str""+ TaskContract.Instances.INSTANCE_START+ ""String_Node_Str""+ TaskContract.Instances.INSTANCE_DUE_SORTING+ ""String_Node_Str""+ TaskContract.Instances.INSTANCE_DUE);
  }
  if (oldVersion < 4) {
    db.execSQL(SQL_DROP_TASK_VIEW);
    db.execSQL(SQL_DROP_INSTANCE_VIEW);
    db.execSQL(SQL_DROP_TASKS_CLEANUP_TRIGGER);
    db.execSQL(SQL_DROP_PROPERTIES_TABLE);
    db.execSQL(SQL_CREATE_PROPERTIES_TABLE);
    db.execSQL(SQL_CREATE_TASKS_CLEANUP_TRIGGER);
    db.execSQL(SQL_CREATE_CATEGORIES_MAPPING_TABLE);
    db.execSQL(SQL_CREATE_ALARMS_TABLE);
    db.execSQL(SQL_CREATE_TASK_VIEW);
    db.execSQL(SQL_CREATE_TASK_PROPERTY_VIEW);
    db.execSQL(SQL_CREATE_INSTANCE_VIEW);
    db.execSQL(SQL_CREATE_INSTANCE_PROPERTY_VIEW);
    db.execSQL(SQL_CREATE_INSTANCE_CATEGORY_VIEW);
    db.execSQL(createIndexString(Tables.PROPERTIES,false,TaskContract.Properties.MIMETYPE,TaskContract.Properties.TASK_ID));
    db.execSQL(createIndexString(Tables.PROPERTIES,false,TaskContract.Properties.TASK_ID));
    db.execSQL(createIndexString(Tables.CATEGORIES,false,TaskContract.Categories.ACCOUNT_NAME,TaskContract.Categories.ACCOUNT_TYPE,TaskContract.Categories.NAME));
    db.execSQL(createIndexString(Tables.CATEGORIES,false,TaskContract.Categories.NAME));
    db.execSQL(SQL_CREATE_ALARM_PROPERTY_CLEANUP_TRIGGER);
    db.execSQL(SQL_CREATE_ALARM_COUNT_CREATE_TRIGGER);
    db.execSQL(SQL_CREATE_ALARM_COUNT_UPDATE_TRIGGER);
    db.execSQL(SQL_CREATE_ALARM_COUNT_DELETE_TRIGGER);
  }
  if (oldVersion < 6) {
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ Tasks.PARENT_ID+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ Tasks.HAS_ALARMS+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ Tasks.SORTING+ ""String_Node_Str"");
  }
  if (oldVersion < 7) {
    db.execSQL(SQL_CREATE_LISTS_CLEANUP_TRIGGER);
  }
  if (oldVersion < 8) {
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ Tasks.PRIORITY+ ""String_Node_Str""+ Tasks.PRIORITY+ ""String_Node_Str"");
  }
  FTSDatabaseHelper.onUpgrade(db,oldVersion,newVersion);
}","/** 
 * Manages the database schema migration.
 */
@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  Log.i(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion);
  if (oldVersion < 2) {
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ TaskContract.Tasks.IS_NEW+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ TaskContract.Tasks.IS_CLOSED+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ TaskContract.Tasks.IS_NEW+ ""String_Node_Str""+ TaskContract.Tasks.STATUS+ ""String_Node_Str""+ TaskContract.Tasks.STATUS_NEEDS_ACTION);
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ TaskContract.Tasks.IS_NEW+ ""String_Node_Str""+ TaskContract.Tasks.STATUS+ ""String_Node_Str""+ TaskContract.Tasks.STATUS_NEEDS_ACTION);
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ TaskContract.Tasks.IS_CLOSED+ ""String_Node_Str""+ TaskContract.Tasks.STATUS+ ""String_Node_Str""+ TaskContract.Tasks.STATUS_IN_PROCESS);
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ TaskContract.Tasks.IS_CLOSED+ ""String_Node_Str""+ TaskContract.Tasks.STATUS+ ""String_Node_Str""+ TaskContract.Tasks.STATUS_IN_PROCESS);
  }
  if (oldVersion < 3) {
    db.execSQL(""String_Node_Str"" + Tables.INSTANCES + ""String_Node_Str""+ TaskContract.Instances.INSTANCE_START_SORTING+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.INSTANCES + ""String_Node_Str""+ TaskContract.Instances.INSTANCE_DUE_SORTING+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.INSTANCES + ""String_Node_Str""+ TaskContract.Instances.INSTANCE_START_SORTING+ ""String_Node_Str""+ TaskContract.Instances.INSTANCE_START+ ""String_Node_Str""+ TaskContract.Instances.INSTANCE_DUE_SORTING+ ""String_Node_Str""+ TaskContract.Instances.INSTANCE_DUE);
  }
  if (oldVersion < 4) {
    db.execSQL(SQL_DROP_TASK_VIEW);
    db.execSQL(SQL_DROP_INSTANCE_VIEW);
    db.execSQL(SQL_DROP_TASKS_CLEANUP_TRIGGER);
    db.execSQL(SQL_DROP_PROPERTIES_TABLE);
    db.execSQL(SQL_CREATE_PROPERTIES_TABLE);
    db.execSQL(SQL_CREATE_TASKS_CLEANUP_TRIGGER);
    db.execSQL(SQL_CREATE_CATEGORIES_MAPPING_TABLE);
    db.execSQL(SQL_CREATE_ALARMS_TABLE);
    db.execSQL(SQL_CREATE_TASK_VIEW);
    db.execSQL(SQL_CREATE_TASK_PROPERTY_VIEW);
    db.execSQL(SQL_CREATE_INSTANCE_VIEW);
    db.execSQL(SQL_CREATE_INSTANCE_PROPERTY_VIEW);
    db.execSQL(SQL_CREATE_INSTANCE_CATEGORY_VIEW);
    db.execSQL(createIndexString(Tables.PROPERTIES,false,TaskContract.Properties.MIMETYPE,TaskContract.Properties.TASK_ID));
    db.execSQL(createIndexString(Tables.PROPERTIES,false,TaskContract.Properties.TASK_ID));
    db.execSQL(createIndexString(Tables.CATEGORIES,false,TaskContract.Categories.ACCOUNT_NAME,TaskContract.Categories.ACCOUNT_TYPE,TaskContract.Categories.NAME));
    db.execSQL(createIndexString(Tables.CATEGORIES,false,TaskContract.Categories.NAME));
    db.execSQL(SQL_CREATE_ALARM_PROPERTY_CLEANUP_TRIGGER);
    db.execSQL(SQL_CREATE_ALARM_COUNT_CREATE_TRIGGER);
    db.execSQL(SQL_CREATE_ALARM_COUNT_UPDATE_TRIGGER);
    db.execSQL(SQL_CREATE_ALARM_COUNT_DELETE_TRIGGER);
  }
  if (oldVersion < 6) {
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ Tasks.PARENT_ID+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ Tasks.HAS_ALARMS+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ Tasks.SORTING+ ""String_Node_Str"");
  }
  if (oldVersion < 7) {
    db.execSQL(SQL_CREATE_LISTS_CLEANUP_TRIGGER);
  }
  if (oldVersion < 8) {
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ Tasks.PRIORITY+ ""String_Node_Str""+ Tasks.PRIORITY+ ""String_Node_Str"");
  }
  if (oldVersion < 9) {
    db.execSQL(""String_Node_Str"" + Tables.TASKS + ""String_Node_Str""+ Tasks._UID+ ""String_Node_Str"");
    db.execSQL(SQL_CREATE_TASK_PROPERTY_CLEANUP_TRIGGER);
  }
  FTSDatabaseHelper.onUpgrade(db,oldVersion,newVersion);
}"
53338,"@Override public void requestBannerAd(final Context context,final CustomEventBannerListener customEventBannerListener,final String s,final AdSize adSize,final MediationAdRequest mediationAdRequest,final Bundle bundle){
  if (AppLovinSdk.VERSION_CODE < 710 && !(context instanceof Activity)) {
    log(ERROR,""String_Node_Str"");
    customEventBannerListener.onAdFailedToLoad(AdRequest.ERROR_CODE_INTERNAL_ERROR);
    return;
  }
  log(DEBUG,""String_Node_Str"" + adSize);
  final AppLovinAdSize appLovinAdSize=appLovinAdSizeFromAdMobAdSize(adSize);
  if (appLovinAdSize != null) {
    final AppLovinSdk sdk=AppLovinSdk.getInstance(context);
    sdk.setPluginVersion(""String_Node_Str"");
    adView=new AppLovinAdView(appLovinAdSize,context);
    adView.setAdLoadListener(new AppLovinAdLoadListener(){
      @Override public void adReceived(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
      }
      @Override public void failedToReceiveAd(      final int errorCode){
        log(ERROR,""String_Node_Str"" + errorCode);
        customEventBannerListener.onAdFailedToLoad(toAdMobErrorCode(errorCode));
      }
    }
);
    adView.setAdDisplayListener(new AppLovinAdDisplayListener(){
      @Override public void adDisplayed(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
      }
      @Override public void adHidden(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
      }
    }
);
    adView.setAdClickListener(new AppLovinAdClickListener(){
      @Override public void adClicked(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
        customEventBannerListener.onAdOpened();
        customEventBannerListener.onAdLeftApplication();
      }
    }
);
    adView.loadNextAd();
    customEventBannerListener.onAdLoaded(adView);
  }
 else {
    log(ERROR,""String_Node_Str"");
    customEventBannerListener.onAdFailedToLoad(AdRequest.ERROR_CODE_INTERNAL_ERROR);
  }
}","@Override public void requestBannerAd(final Context context,final CustomEventBannerListener customEventBannerListener,final String s,final AdSize adSize,final MediationAdRequest mediationAdRequest,final Bundle bundle){
  if (AppLovinSdk.VERSION_CODE < 710 && !(context instanceof Activity)) {
    log(ERROR,""String_Node_Str"");
    customEventBannerListener.onAdFailedToLoad(AdRequest.ERROR_CODE_INTERNAL_ERROR);
    return;
  }
  log(DEBUG,""String_Node_Str"" + adSize);
  final AppLovinAdSize appLovinAdSize=appLovinAdSizeFromAdMobAdSize(adSize);
  if (appLovinAdSize != null) {
    final AppLovinSdk sdk=AppLovinSdk.getInstance(context);
    sdk.setPluginVersion(""String_Node_Str"");
    adView=createAdView(appLovinAdSize,context,customEventBannerListener);
    adView.setAdLoadListener(new AppLovinAdLoadListener(){
      @Override public void adReceived(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
      }
      @Override public void failedToReceiveAd(      final int errorCode){
        log(ERROR,""String_Node_Str"" + errorCode);
        customEventBannerListener.onAdFailedToLoad(toAdMobErrorCode(errorCode));
      }
    }
);
    adView.setAdDisplayListener(new AppLovinAdDisplayListener(){
      @Override public void adDisplayed(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
      }
      @Override public void adHidden(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
      }
    }
);
    adView.setAdClickListener(new AppLovinAdClickListener(){
      @Override public void adClicked(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
        customEventBannerListener.onAdOpened();
        customEventBannerListener.onAdLeftApplication();
      }
    }
);
    adView.loadNextAd();
    customEventBannerListener.onAdLoaded(adView);
  }
 else {
    log(ERROR,""String_Node_Str"");
    customEventBannerListener.onAdFailedToLoad(AdRequest.ERROR_CODE_INTERNAL_ERROR);
  }
}"
53339,"@Override public void showInterstitial(){
  if (loadedAd != null) {
    final AppLovinSdk sdk=AppLovinSdk.getInstance(context);
    final AppLovinInterstitialAdDialog interstitialAd=AppLovinInterstitialAd.create(sdk,context);
    interstitialAd.setAdDisplayListener(this);
    interstitialAd.setAdClickListener(this);
    interstitialAd.setAdVideoPlaybackListener(this);
    interstitialAd.showAndRender(loadedAd);
  }
 else {
    log(ERROR,""String_Node_Str"");
    listener.onAdFailedToLoad(AdRequest.ERROR_CODE_INTERNAL_ERROR);
  }
}","@Override public void showInterstitial(){
  if (loadedAd != null) {
    final AppLovinSdk sdk=AppLovinSdk.getInstance(context);
    final AppLovinInterstitialAdDialog interstitialAd=createInterstitial(context,sdk);
    interstitialAd.setAdDisplayListener(this);
    interstitialAd.setAdClickListener(this);
    interstitialAd.setAdVideoPlaybackListener(this);
    interstitialAd.showAndRender(loadedAd);
  }
 else {
    log(ERROR,""String_Node_Str"");
    listener.onAdFailedToLoad(AdRequest.ERROR_CODE_INTERNAL_ERROR);
  }
}"
53340,"@Override public void showVideo(){
  if (incentivizedInterstitial.isAdReadyToDisplay()) {
    fullyWatched=false;
    reward=null;
    incentivizedInterstitial.show(context,null,this,this,this,this);
  }
 else {
    log(ERROR,""String_Node_Str"");
    listener.onAdFailedToLoad(this,AdRequest.ERROR_CODE_INTERNAL_ERROR);
  }
}","@Override public void showVideo(){
  if (incentivizedInterstitial.isAdReadyToDisplay()) {
    fullyWatched=false;
    reward=null;
    try {
      final Class<?> contextClass=(AppLovinSdk.VERSION_CODE < 720) ? Activity.class : Context.class;
      final Method showMethod=AppLovinIncentivizedInterstitial.class.getMethod(""String_Node_Str"",contextClass,String.class,AppLovinAdRewardListener.class,AppLovinAdVideoPlaybackListener.class,AppLovinAdDisplayListener.class,AppLovinAdClickListener.class);
      try {
        showMethod.invoke(incentivizedInterstitial,context,null,this,this,this,this);
      }
 catch (      Throwable th) {
        log(ERROR,""String_Node_Str"");
        listener.onAdFailedToLoad(this,AdRequest.ERROR_CODE_INTERNAL_ERROR);
      }
    }
 catch (    Throwable th) {
      log(ERROR,""String_Node_Str"");
      listener.onAdFailedToLoad(this,AdRequest.ERROR_CODE_INTERNAL_ERROR);
    }
  }
 else {
    log(ERROR,""String_Node_Str"");
    listener.onAdFailedToLoad(this,AdRequest.ERROR_CODE_INTERNAL_ERROR);
  }
}"
53341,"@Override protected void loadBanner(final Context context,final CustomEventBannerListener customEventBannerListener,final Map<String,Object> localExtras,final Map<String,String> serverExtras){
  if (AppLovinSdk.VERSION_CODE < 710 && !(context instanceof Activity)) {
    log(ERROR,""String_Node_Str"");
    customEventBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
    return;
  }
  log(DEBUG,""String_Node_Str"" + localExtras);
  final AppLovinAdSize adSize=appLovinAdSizeFromServerExtras(localExtras);
  if (adSize != null) {
    final AppLovinSdk sdk=AppLovinSdk.getInstance(context);
    sdk.setPluginVersion(""String_Node_Str"");
    final AppLovinAdView adView=new AppLovinAdView(adSize,context);
    adView.setAdLoadListener(new AppLovinAdLoadListener(){
      @Override public void adReceived(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
        customEventBannerListener.onBannerLoaded(adView);
      }
      @Override public void failedToReceiveAd(      final int errorCode){
        log(ERROR,""String_Node_Str"" + errorCode);
        customEventBannerListener.onBannerFailed(toMoPubErrorCode(errorCode));
      }
    }
);
    adView.setAdDisplayListener(new AppLovinAdDisplayListener(){
      @Override public void adDisplayed(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
      }
      @Override public void adHidden(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
      }
    }
);
    adView.setAdClickListener(new AppLovinAdClickListener(){
      @Override public void adClicked(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
        customEventBannerListener.onBannerClicked();
        customEventBannerListener.onLeaveApplication();
      }
    }
);
    adView.loadNextAd();
  }
 else {
    log(ERROR,""String_Node_Str"");
    customEventBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
  }
}","@Override protected void loadBanner(final Context context,final CustomEventBannerListener customEventBannerListener,final Map<String,Object> localExtras,final Map<String,String> serverExtras){
  if (AppLovinSdk.VERSION_CODE < 710 && !(context instanceof Activity)) {
    log(ERROR,""String_Node_Str"");
    customEventBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
    return;
  }
  log(DEBUG,""String_Node_Str"" + localExtras);
  final AppLovinAdSize adSize=appLovinAdSizeFromServerExtras(localExtras);
  if (adSize != null) {
    final AppLovinSdk sdk=AppLovinSdk.getInstance(context);
    sdk.setPluginVersion(""String_Node_Str"");
    final AppLovinAdView adView=createAdView(adSize,context,customEventBannerListener);
    adView.setAdLoadListener(new AppLovinAdLoadListener(){
      @Override public void adReceived(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
        customEventBannerListener.onBannerLoaded(adView);
      }
      @Override public void failedToReceiveAd(      final int errorCode){
        log(ERROR,""String_Node_Str"" + errorCode);
        customEventBannerListener.onBannerFailed(toMoPubErrorCode(errorCode));
      }
    }
);
    adView.setAdDisplayListener(new AppLovinAdDisplayListener(){
      @Override public void adDisplayed(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
      }
      @Override public void adHidden(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
      }
    }
);
    adView.setAdClickListener(new AppLovinAdClickListener(){
      @Override public void adClicked(      final AppLovinAd ad){
        log(DEBUG,""String_Node_Str"");
        customEventBannerListener.onBannerClicked();
        customEventBannerListener.onLeaveApplication();
      }
    }
);
    adView.loadNextAd();
  }
 else {
    log(ERROR,""String_Node_Str"");
    customEventBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
  }
}"
53342,"@Override public void showInterstitial(){
  if (loadedAd != null) {
    final AppLovinSdk sdk=AppLovinSdk.getInstance(context);
    final AppLovinInterstitialAdDialog interstitialAd=AppLovinInterstitialAd.create(sdk,context);
    interstitialAd.setAdDisplayListener(this);
    interstitialAd.setAdClickListener(this);
    interstitialAd.setAdVideoPlaybackListener(this);
    interstitialAd.showAndRender(loadedAd);
  }
 else {
    log(ERROR,""String_Node_Str"");
    listener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
  }
}","@Override public void showInterstitial(){
  if (loadedAd != null) {
    final AppLovinSdk sdk=AppLovinSdk.getInstance(context);
    final AppLovinInterstitialAdDialog interstitialAd=createInterstitial(context,sdk);
    interstitialAd.setAdDisplayListener(this);
    interstitialAd.setAdClickListener(this);
    interstitialAd.setAdVideoPlaybackListener(this);
    interstitialAd.showAndRender(loadedAd);
  }
 else {
    log(ERROR,""String_Node_Str"");
    listener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
  }
}"
53343,"@Override public void destroy(){
}","@Override public void destroy(){
  adView.destroy();
}"
53344,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.setContentView(R.layout.activity_camera);
  iv_flash=(ImageView)findViewById(R.id.iv_flash);
  iv_flash.setOnClickListener(new RLOnClickListener(){
    @Override public void onClickX(    View view){
      isFlashEnabled=!isFlashEnabled;
      Parameters parameters=camera.getParameters();
      parameters.setFlashMode(isFlashEnabled ? Parameters.FLASH_MODE_TORCH : Parameters.FLASH_MODE_OFF);
      camera.setParameters(parameters);
      iv_flash.setImageDrawable(getResources().getDrawable(isFlashEnabled ? R.drawable.btn_camera_flash_off : R.drawable.btn_camera_flash_on));
    }
  }
);
  iv_yes=(ImageView)findViewById(R.id.iv_yes);
  iv_yes.setOnClickListener(new RLOnClickListener(){
    @Override public void onClickX(    View arg0){
      try {
        Bitmap bMap=BitmapFactory.decodeByteArray(data,0,data.length);
        Bitmap bMapRotate;
        float degrees=0f;
switch (rotation) {
case Surface.ROTATION_0:
          degrees=90f;
        break;
case Surface.ROTATION_90:
      degrees=0f;
    break;
case Surface.ROTATION_180:
  degrees=270f;
break;
case Surface.ROTATION_270:
degrees=180f;
break;
}
Matrix matrix=new Matrix();
matrix.reset();
matrix.postRotate(degrees);
bMapRotate=Bitmap.createBitmap(bMap,0,0,bMap.getWidth(),bMap.getHeight(),matrix,true);
bMap=bMapRotate;
String savePath=getIntent().getStringExtra(""String_Node_Str"");
BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(savePath));
bMap.compress(Bitmap.CompressFormat.JPEG,100,bos);
bos.flush();
bos.close();
setResult(RESULT_OK,getIntent());
finish();
overridePendingTransition(R.anim.reload,R.anim.reload);
}
 catch (Exception e) {
e.printStackTrace();
}
iv_yes.setVisibility(View.GONE);
iv_no.setVisibility(View.GONE);
}
}
);
iv_no=(ImageView)findViewById(R.id.iv_no);
iv_no.setOnClickListener(new RLOnClickListener(){
@Override public void onClickX(View arg0){
camera.startPreview();
iv_yes.setVisibility(View.GONE);
iv_no.setVisibility(View.GONE);
}
}
);
SurfaceView surfaceView=(SurfaceView)this.findViewById(R.id.sv_camera);
surfaceView.setFocusable(true);
surfaceView.setFocusableInTouchMode(true);
findViewById(R.id.iv_camera).setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (!isReady) {
camera.autoFocus(RLCameraActivity.this);
isReady=true;
}
 else {
camera.startPreview();
isReady=false;
}
}
}
);
SurfaceHolder holder=surfaceView.getHolder();
holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
holder.addCallback(this);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_camera);
  rotation=getWindowManager().getDefaultDisplay().getRotation();
  iv_flash=(ImageView)findViewById(R.id.iv_flash);
  iv_flash.setOnClickListener(new RLOnClickListener(){
    @Override public void onClickX(    View view){
      isFlashEnabled=!isFlashEnabled;
      Parameters parameters=camera.getParameters();
      parameters.setFlashMode(isFlashEnabled ? Parameters.FLASH_MODE_TORCH : Parameters.FLASH_MODE_OFF);
      camera.setParameters(parameters);
      iv_flash.setImageDrawable(getResources().getDrawable(isFlashEnabled ? R.drawable.btn_camera_flash_off : R.drawable.btn_camera_flash_on));
    }
  }
);
  iv_yes=(ImageView)findViewById(R.id.iv_yes);
  iv_yes.setOnClickListener(new RLOnClickListener(){
    @Override public void onClickX(    View arg0){
      try {
        Bitmap bMap=BitmapFactory.decodeByteArray(data,0,data.length);
        Bitmap bMapRotate;
        float degrees=0f;
switch (rotation) {
case Surface.ROTATION_0:
          degrees=90f;
        break;
case Surface.ROTATION_90:
      degrees=0f;
    break;
case Surface.ROTATION_180:
  degrees=270f;
break;
case Surface.ROTATION_270:
degrees=180f;
break;
}
Matrix matrix=new Matrix();
matrix.reset();
matrix.postRotate(degrees);
bMapRotate=Bitmap.createBitmap(bMap,0,0,bMap.getWidth(),bMap.getHeight(),matrix,true);
bMap=bMapRotate;
String savePath=getIntent().getStringExtra(""String_Node_Str"");
BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(savePath));
bMap.compress(Bitmap.CompressFormat.JPEG,100,bos);
bos.flush();
bos.close();
setResult(RESULT_OK,getIntent());
finish();
overridePendingTransition(R.anim.reload,R.anim.reload);
}
 catch (Exception e) {
e.printStackTrace();
}
iv_yes.setVisibility(View.GONE);
iv_no.setVisibility(View.GONE);
}
}
);
iv_no=(ImageView)findViewById(R.id.iv_no);
iv_no.setOnClickListener(new RLOnClickListener(){
@Override public void onClickX(View arg0){
camera.startPreview();
iv_yes.setVisibility(View.GONE);
iv_no.setVisibility(View.GONE);
}
}
);
SurfaceView surfaceView=(SurfaceView)this.findViewById(R.id.sv_camera);
surfaceView.setFocusable(true);
surfaceView.setFocusableInTouchMode(true);
findViewById(R.id.iv_camera).setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (!isReady) {
camera.autoFocus(RLCameraActivity.this);
isReady=true;
}
 else {
camera.startPreview();
isReady=false;
}
}
}
);
SurfaceHolder holder=surfaceView.getHolder();
holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
holder.addCallback(this);
}"
53345,"@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON + ""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON + ""String_Node_Str"") public Response<RuleInstance> create(Request request,@PathParam(""String_Node_Str"") String said){
  logger.info(""String_Node_Str"" + said + ""String_Node_Str"");
  Data<RuleInstance> data, response;
  try {
    RequestValidator.validateRequest(request);
    data=request.getMessage().getData();
    RuleInstance dto=data.getEntries().iterator().next();
    dto.setGuid(new URIImpl(""String_Node_Str"" + UUID.randomUUID()));
    Model ruleModel=dto.toRDF();
    Rule rule=new Rule(ruleModel,dto.getGuid(),false);
    ruleManager.add(rule);
    response=new Data<RuleInstance>(0,1,dto);
  }
 catch (  InfosphereException e) {
    return Response.badRequest(e.getMessage(),e);
  }
catch (  Exception e) {
    return Response.serverError(e.getMessage(),e);
  }
  return Response.ok(response);
}","@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON + ""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON + ""String_Node_Str"") public Response<RuleInstance> create(Request<RuleInstance> request,@PathParam(""String_Node_Str"") String said){
  logger.info(""String_Node_Str"" + said + ""String_Node_Str"");
  Data<RuleInstance> data, response;
  try {
    RequestValidator.validateRequest(request);
    data=request.getMessage().getData();
    RuleInstance dto=data.getEntries().iterator().next();
    dto.setGuid(new URIImpl(""String_Node_Str"" + UUID.randomUUID()));
    Model ruleModel=dto.toRDF();
    Rule rule=new Rule(ruleModel,dto.getGuid(),false);
    ruleManager.add(rule);
    response=new Data<RuleInstance>(0,1,dto);
  }
 catch (  InfosphereException e) {
    return Response.badRequest(e.getMessage(),e);
  }
catch (  Exception e) {
    return Response.serverError(e.getMessage(),e);
  }
  return Response.ok(response);
}"
53346,"private void registerToUserResolverService(User user,PersonContact profile,Tenant tenant) throws DimeException {
  ServiceProvider serviceProvider=ServiceProvider.findByName(DimeServiceAdapter.NAME);
  List<ServiceAccount> accounts=ServiceAccount.findAllByTenantAndServiceProvider(user.getTenant(),serviceProvider);
  DimeUserResolverServiceAdapter userResolver=null;
  try {
    userResolver=serviceGateway.getDimeUserResolverServiceAdapter();
    userResolver.setTenant(tenant);
    if (accounts.size() > 0) {
      ServiceAccount account=accounts.get(0);
      userResolver.setIdentifer(account.getName());
      userResolver.set(AttributeMap.PROFILE_ME,profile);
    }
 else {
      throw new DimeException(""String_Node_Str"" + ""String_Node_Str"" + user.getTenant());
    }
  }
 catch (  ServiceNotAvailableException e) {
    throw new DimeException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  AttributeNotSupportedException e) {
    throw new DimeException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  InvalidDataException e) {
    throw new DimeException(""String_Node_Str"" + e.getMessage(),e);
  }
}","private void registerToUserResolverService(User user,PersonContact profile,Tenant tenant) throws DimeException {
  ServiceProvider serviceProvider=ServiceProvider.findByName(DimeServiceAdapter.NAME);
  List<ServiceAccount> accounts=ServiceAccount.findAllByTenantAndServiceProvider(user.getTenant(),serviceProvider);
  DimeUserResolverServiceAdapter userResolver=null;
  try {
    userResolver=serviceGateway.getDimeUserResolverServiceAdapter();
    userResolver.setTenant(tenant);
    if (accounts.size() > 0) {
      ServiceAccount account=accounts.get(0);
      userResolver.setIdentifer(""String_Node_Str"" + account.getName().replace(""String_Node_Str"",""String_Node_Str""));
      userResolver.set(AttributeMap.PROFILE_ME,profile);
    }
 else {
      throw new DimeException(""String_Node_Str"" + ""String_Node_Str"" + user.getTenant());
    }
  }
 catch (  ServiceNotAvailableException e) {
    throw new DimeException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  AttributeNotSupportedException e) {
    throw new DimeException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  InvalidDataException e) {
    throw new DimeException(""String_Node_Str"" + e.getMessage(),e);
  }
}"
53347,"private void removeFromUserResolver(String userId,Tenant tenant){
  DimeUserResolverServiceAdapter userResolver;
  try {
    userResolver=serviceGateway.getDimeUserResolverServiceAdapter();
    userResolver.setTenant(tenant);
    userResolver._delete(userId);
  }
 catch (  ServiceNotAvailableException e) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str"",e);
  }
catch (  AttributeNotSupportedException e) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str"",e);
  }
}","private void removeFromUserResolver(String userId,Tenant tenant){
  DimeUserResolverServiceAdapter userResolver;
  try {
    userResolver=serviceGateway.getDimeUserResolverServiceAdapter();
    userResolver.setTenant(tenant);
    userResolver._delete(""String_Node_Str"" + userId.replace(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  ServiceNotAvailableException e) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str"",e);
  }
catch (  AttributeNotSupportedException e) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str"",e);
  }
}"
53348,"@Override public void storeOAuthCredentials(String providerName,String accountId,String token,String secret,Tenant tenant){
  ServiceProvider serviceProvider=ServiceProvider.findByName(providerName);
  if (serviceProvider != null) {
    ServiceAccount serviceAccount=entityFactory.buildServiceAccount();
    serviceAccount.setAccountURI(accountId);
    serviceAccount.setName(token);
    serviceAccount.setAccessToken(token);
    serviceAccount.setAccessSecret(secret);
    serviceAccount.setServiceProvider(serviceProvider);
    serviceAccount.setTenant(tenant);
    serviceAccount.merge();
    serviceAccount.flush();
  }
}","@Override public void storeOAuthCredentials(String providerName,String accountId,String token,String secret,Tenant tenant){
  ServiceProvider serviceProvider=ServiceProvider.findByName(providerName);
  if (serviceProvider != null) {
    ServiceAccount serviceAccount=entityFactory.buildServiceAccount();
    serviceAccount.setAccountURI(accountId);
    serviceAccount.setAccessToken(token);
    serviceAccount.setAccessSecret(secret);
    serviceAccount.setServiceProvider(serviceProvider);
    serviceAccount.setTenant(tenant);
    serviceAccount.merge();
    serviceAccount.flush();
  }
}"
53349,"/** 
 * Return DB
 * @param dbID
 * @return
 */
@GET @Produces(MediaType.APPLICATION_JSON + ""String_Node_Str"") @Path(""String_Node_Str"") public Response<Resource> getMyDataboxById(@PathParam(""String_Node_Str"") String said,@PathParam(""String_Node_Str"") String dbID,@PathParam(""String_Node_Str"") String personId){
  Data<Resource> data=null;
  logger.info(""String_Node_Str"" + said + ""String_Node_Str""+ personId+ ""String_Node_Str""+ dbID);
  try {
    DataContainer databox=databoxManager.get(dbID);
    data=new Data<Resource>(0,1,1);
    Resource resource=new Resource(databox,null,RENAMING_RULES,databoxManager.getMe().asURI());
    writeIncludes(resource,databox);
    setUserId(resource);
    data.getEntries().add(resource);
  }
 catch (  InfosphereException e) {
    return Response.badRequest(e.getMessage(),e);
  }
catch (  Exception e) {
    return Response.serverError(e.getMessage(),e);
  }
  return Response.ok(data);
}","/** 
 * Return DB
 * @param dbID
 * @return
 */
@GET @Produces(MediaType.APPLICATION_JSON + ""String_Node_Str"") @Path(""String_Node_Str"") public Response<Resource> getMyDataboxById(@PathParam(""String_Node_Str"") String said,@PathParam(""String_Node_Str"") String personId,@PathParam(""String_Node_Str"") String dbId){
  Data<Resource> data=null;
  logger.info(""String_Node_Str"" + said + ""String_Node_Str""+ personId+ ""String_Node_Str""+ dbId);
  try {
    DataContainer databox=databoxManager.get(dbId);
    data=new Data<Resource>(0,1,1);
    Resource resource=new Resource(databox,null,RENAMING_RULES,databoxManager.getMe().asURI());
    writeIncludes(resource,databox);
    setUserId(resource);
    data.getEntries().add(resource);
  }
 catch (  InfosphereException e) {
    return Response.badRequest(e.getMessage(),e);
  }
catch (  Exception e) {
    return Response.serverError(e.getMessage(),e);
  }
  return Response.ok(data);
}"
53350,"@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  String said=""String_Node_Str"";
  String username=""String_Node_Str"";
  String password=""String_Node_Str"";
  Tenant tenant=null;
  HttpServletRequest req=(HttpServletRequest)request;
  String url=req.getRequestURL().toString();
  logger.info(""String_Node_Str"" + url);
  int index=url.indexOf(""String_Node_Str"");
  int index_push=url.indexOf(""String_Node_Str"");
  if (((index < 0) && (index_push < 0)) || ((url.length() <= (index + API_PREFIX_LENGTH + 1)) && (url.length() <= (index + PUSH_PREFIX_LENGTH + 1)))) {
    logger.error(""String_Node_Str"" + url);
    return;
  }
  if ((index > 0)) {
    index+=API_PREFIX_LENGTH;
    said=url.substring(index,url.indexOf(""String_Node_Str"",index));
  }
 else   if ((index_push > 0)) {
    index_push+=PUSH_PREFIX_LENGTH;
    said=url.substring(index_push,url.indexOf(""String_Node_Str"",index_push));
  }
 else {
    logger.error(""String_Node_Str"" + url);
    return;
  }
  try {
    tenant=tenantManager.getByAccountName(said);
    String auth=req.getHeader(""String_Node_Str"");
    if (auth == null) {
      HttpSession session=req.getSession();
      SecurityContext secContext=(SecurityContext)session.getAttribute(""String_Node_Str"");
      if (secContext != null) {
        username=secContext.getAuthentication().getName();
        Collection<GrantedAuthority> authorities=secContext.getAuthentication().getAuthorities();
        boolean pass=false;
        for (Iterator<GrantedAuthority> iterator=authorities.iterator(); iterator.hasNext(); ) {
          GrantedAuthority grantedAuthority=(GrantedAuthority)iterator.next();
          if (grantedAuthority.getAuthority().equals(Role.OWNER.toString()) || grantedAuthority.getAuthority().equals(Role.ADMIN.toString())) {
            pass=true;
            logger.debug(username + ""String_Node_Str"" + grantedAuthority.getAuthority());
          }
        }
        User user=User.findByTenantAndByUsername(tenant,username);
        if (pass && (user != null)) {
          chain.doFilter(request,response);
          logger.debug(""String_Node_Str"" + url + ""String_Node_Str""+ username+ ""String_Node_Str"");
          return;
        }
 else {
          logger.error(""String_Node_Str"" + url + ""String_Node_Str""+ username);
          throw new AccessControlException(""String_Node_Str"");
        }
      }
 else {
        logger.debug(""String_Node_Str"" + url + ""String_Node_Str""+ username);
        throw new AccessControlException(""String_Node_Str"");
      }
    }
 else {
      auth=auth.substring(5);
      String decoded_auth=Base64encoding.decode(auth.trim());
      int d_index=decoded_auth.indexOf(""String_Node_Str"");
      username=decoded_auth.substring(0,d_index);
      password=decoded_auth.substring(d_index + 1);
      if (url.endsWith(""String_Node_Str"" + said + ""String_Node_Str""+ username)) {
        User user=User.findByTenantAndByUsername(tenant,username);
        if (user.getTenant().getId().equals(tenant.getId())) {
          chain.doFilter(request,response);
        }
 else {
          logger.error(""String_Node_Str"" + url + ""String_Node_Str""+ username);
          throw new AccessControlException(""String_Node_Str"");
        }
      }
 else {
        User user=userManager.getByUsernameAndPassword(username,password);
        if ((user.getRole() == Role.GUEST) && user.getTenant().getId().equals(tenant.getId())) {
          if (url.contains(""String_Node_Str"" + said + ""String_Node_Str"")) {
            logger.debug(""String_Node_Str"" + url + ""String_Node_Str""+ username+ ""String_Node_Str""+ user.getTenant().getName());
            chain.doFilter(request,response);
          }
        }
 else         if (user.getRole() == Role.OWNER && user.getTenant().getId().equals(tenant.getId())) {
          logger.debug(""String_Node_Str"" + url + ""String_Node_Str""+ username+ ""String_Node_Str"");
          chain.doFilter(request,response);
        }
 else         if (user.getRole() == Role.ADMIN) {
          logger.debug(""String_Node_Str"" + url + ""String_Node_Str""+ username+ ""String_Node_Str"");
          chain.doFilter(request,response);
        }
 else {
          logger.error(""String_Node_Str"" + url + ""String_Node_Str""+ username);
          throw new AccessControlException(""String_Node_Str"");
        }
      }
    }
  }
 catch (  IndexOutOfBoundsException e) {
    logger.error(""String_Node_Str"" + url);
  }
catch (  NoResultException e) {
    logger.error(""String_Node_Str"" + username);
    throw new AccessControlException(""String_Node_Str"");
  }
}","@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  String said=""String_Node_Str"";
  Tenant tenant=null;
  HttpServletRequest req=(HttpServletRequest)request;
  String url=req.getRequestURL().toString();
  logger.debug(""String_Node_Str"" + req.getMethod() + ""String_Node_Str""+ url+ ""String_Node_Str"");
  int apiPrefixIdx=url.indexOf(API_PREFIX);
  int pushPrefixIdx=url.indexOf(PUSH_PREFIX);
  if ((apiPrefixIdx < 0 && pushPrefixIdx < 0) || (url.length() <= (apiPrefixIdx + API_PREFIX_LENGTH + 1) && url.length() <= (apiPrefixIdx + PUSH_PREFIX_LENGTH + 1))) {
    logger.error(""String_Node_Str"" + url);
    return;
  }
  if (apiPrefixIdx > 0) {
    apiPrefixIdx+=API_PREFIX_LENGTH;
    said=url.substring(apiPrefixIdx,url.indexOf(""String_Node_Str"",apiPrefixIdx));
  }
 else   if (pushPrefixIdx > 0) {
    pushPrefixIdx+=PUSH_PREFIX_LENGTH;
    said=url.substring(pushPrefixIdx,url.indexOf(""String_Node_Str"",pushPrefixIdx));
  }
 else {
    logger.error(""String_Node_Str"" + url);
    return;
  }
  try {
    tenant=tenantManager.getByAccountName(said);
    String auth=req.getHeader(""String_Node_Str"");
    if (auth == null) {
      HttpSession session=req.getSession();
      SecurityContext secContext=(SecurityContext)session.getAttribute(""String_Node_Str"");
      if (secContext != null) {
        String username=secContext.getAuthentication().getName();
        Collection<GrantedAuthority> authorities=secContext.getAuthentication().getAuthorities();
        boolean pass=false;
        for (Iterator<GrantedAuthority> iterator=authorities.iterator(); iterator.hasNext(); ) {
          GrantedAuthority grantedAuthority=(GrantedAuthority)iterator.next();
          if (Role.OWNER.toString().equals(grantedAuthority.getAuthority()) || Role.ADMIN.toString().equals(grantedAuthority.getAuthority())) {
            pass=true;
            logger.debug(username + ""String_Node_Str"" + grantedAuthority.getAuthority());
          }
        }
        User user=User.findByTenantAndByUsername(tenant,username);
        if (pass && user != null) {
          chain.doFilter(request,response);
          logger.debug(req.getMethod() + ""String_Node_Str"" + url+ ""String_Node_Str""+ username);
          return;
        }
 else {
          throw new AccessControlException(req.getMethod() + ""String_Node_Str"" + url+ ""String_Node_Str""+ username);
        }
      }
 else {
        throw new AccessControlException(req.getMethod() + ""String_Node_Str"" + url+ ""String_Node_Str"");
      }
    }
 else {
      String decodedAuth=Base64encoding.decode(auth.substring(5).trim());
      String[] credentials=decodedAuth.split(""String_Node_Str"");
      String username=credentials[0];
      String password=credentials[1];
      if (url.endsWith(API_PREFIX + said + ""String_Node_Str""+ username)) {
        User user=User.findByTenantAndByUsername(tenant,username);
        if (user.getTenant().getId().equals(tenant.getId())) {
          chain.doFilter(request,response);
        }
 else {
          throw new AccessControlException(req.getMethod() + ""String_Node_Str"" + url+ ""String_Node_Str""+ username);
        }
      }
 else {
        User user=userManager.getByUsernameAndPassword(username,password);
        if (user == null) {
          throw new AccessControlException(req.getMethod() + ""String_Node_Str"" + url+ ""String_Node_Str""+ username+ ""String_Node_Str"");
        }
 else         if (Role.GUEST.equals(user.getRole()) && user.getTenant().getId().equals(tenant.getId())) {
          if (url.contains(""String_Node_Str"" + said + ""String_Node_Str"")) {
            logger.debug(""String_Node_Str"" + url + ""String_Node_Str""+ username+ ""String_Node_Str""+ user.getTenant().getName());
            chain.doFilter(request,response);
          }
        }
 else         if (Role.OWNER.equals(user.getRole()) && user.getTenant().getId().equals(tenant.getId())) {
          logger.debug(""String_Node_Str"" + url + ""String_Node_Str""+ username+ ""String_Node_Str"");
          chain.doFilter(request,response);
        }
 else         if (Role.ADMIN.equals(user.getRole())) {
          logger.debug(""String_Node_Str"" + url + ""String_Node_Str""+ username+ ""String_Node_Str"");
          chain.doFilter(request,response);
        }
 else {
          throw new AccessControlException(req.getMethod() + ""String_Node_Str"" + url+ ""String_Node_Str""+ username);
        }
      }
    }
  }
 catch (  IndexOutOfBoundsException e) {
    logger.error(""String_Node_Str"" + url);
  }
catch (  NoResultException e) {
    throw new AccessControlException(req.getMethod() + ""String_Node_Str"" + url+ ""String_Node_Str""+ e.getMessage());
  }
}"
53351,"public void setConnectionProvider(ConnectionProvider conectionProvider){
  this.connectionProvider=conectionProvider;
}","public void setConnectionProvider(ConnectionProvider connectionProvider){
  this.connectionProvider=connectionProvider;
}"
53352,"public List<GroupDistanceWarning> getGroupWarnings(List<String> agentIDs,List<String> sharedThingIDs) throws NotFoundException, InfosphereException, RepositoryException, ClassCastException {
  List<GroupDistanceWarning> warnings=new ArrayList<GroupDistanceWarning>();
  for (  String res_uri : sharedThingIDs) {
    RDFReactorThing thing=getResource(new URIImpl(res_uri));
    List<Resource> related_groups=thing.getAllIsRelated_as().asList();
    if ((related_groups == null) || (related_groups.isEmpty())) {
      continue;
    }
    HashedMap targetGroups=getGroupList(agentIDs);
    MapIterator it=targetGroups.mapIterator();
    while (it.hasNext()) {
      String element_key=(String)it.next();
      PersonGroup groupA=(PersonGroup)getResourceStore().get(new URIImpl(element_key),PersonGroup.class);
      List<Resource> a=groupA.getAllIsRelated_as().asList();
      if (a.contains(thing)) {
        targetGroups.remove(element_key);
      }
    }
    MapIterator it2=targetGroups.mapIterator();
    while (it2.hasNext()) {
      String target_element_key=(String)it2.next();
      URI targetURI=new URIImpl(target_element_key);
      if (getResourceStore().isTypedAs(targetURI,PIMO.PersonGroup)) {
        for (        Resource groupRes : related_groups) {
          if (getResourceStore().isTypedAs(groupRes,PIMO.PersonGroup)) {
            PersonGroup groupA=(PersonGroup)getResourceStore().get(groupRes.asURI(),PersonGroup.class);
            PersonGroup groupB=(PersonGroup)getResourceStore().get(targetURI.asURI(),PersonGroup.class);
            double distance=GroupDistanceProcessor.getGroupDistance(groupA,groupB);
            if (distance > AdvisoryConstants.MIN_GROUP_DISTANCE) {
              GroupDistanceWarning warning=new GroupDistanceWarning();
              warning.addGroup(groupRes.toString());
              warning.addResource(res_uri);
              warning.setWarningLevel(distance);
              warnings.add(warning);
            }
          }
        }
      }
    }
  }
  return warnings;
}","public List<GroupDistanceWarning> getGroupWarnings(List<String> agentIDs,List<String> sharedThingIDs) throws NotFoundException, InfosphereException, RepositoryException, ClassCastException {
  List<GroupDistanceWarning> warnings=new ArrayList<GroupDistanceWarning>();
  List<String> sharedSingleElements=new ArrayList<String>();
  for (  String res : sharedThingIDs) {
    URI resUri=new URIImpl(res);
    if (getResourceStore().isTypedAs(resUri,PPO.PrivacyPreference)) {
      sharedSingleElements.addAll(getAllItemsInDataboxAsString(resUri));
    }
 else {
      sharedSingleElements.add(res);
    }
  }
  for (  String res_uri : sharedSingleElements) {
    RDFReactorThing thing=getResource(new URIImpl(res_uri));
    List<Resource> related_groups=thing.getAllIsRelated_as().asList();
    if ((related_groups == null) || (related_groups.isEmpty())) {
      continue;
    }
    HashedMap targetGroups=getGroupList(agentIDs);
    MapIterator it=targetGroups.mapIterator();
    while (it.hasNext()) {
      String element_key=(String)it.next();
      PersonGroup groupA=(PersonGroup)getResourceStore().get(new URIImpl(element_key),PersonGroup.class);
      List<Resource> a=groupA.getAllIsRelated_as().asList();
      if (a.contains(thing)) {
        targetGroups.remove(element_key);
      }
    }
    MapIterator it2=targetGroups.mapIterator();
    while (it2.hasNext()) {
      String target_element_key=(String)it2.next();
      URI targetURI=new URIImpl(target_element_key);
      if (getResourceStore().isTypedAs(targetURI,PIMO.PersonGroup)) {
        for (        Resource groupRes : related_groups) {
          if (getResourceStore().isTypedAs(groupRes,PIMO.PersonGroup)) {
            PersonGroup groupA=(PersonGroup)getResourceStore().get(groupRes.asURI(),PersonGroup.class);
            PersonGroup groupB=(PersonGroup)getResourceStore().get(targetURI.asURI(),PersonGroup.class);
            double distance=GroupDistanceProcessor.getGroupDistance(groupA,groupB);
            if (distance > AdvisoryConstants.MIN_GROUP_DISTANCE) {
              GroupDistanceWarning warning=new GroupDistanceWarning();
              warning.addGroup(groupRes.toString());
              warning.addResource(res_uri);
              warning.setWarningLevel(distance);
              warnings.add(warning);
            }
          }
        }
      }
    }
  }
  return warnings;
}"
53353,"@POST @Consumes(MediaType.APPLICATION_JSON + ""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON + ""String_Node_Str"") @Path(""String_Node_Str"") public Response getAdvisory(@PathParam(""String_Node_Str"") String said,Request<AdvisoryRequestEntry> request){
  Collection<AdvisoryRequestEntry> entries=request.getMessage().getData().getEntries();
  List<String> agentIDs=null, sharedThingIDs=null;
  String profileId=""String_Node_Str"";
  if (entries.iterator().hasNext()) {
    AdvisoryRequestEntry advisoryRequestEntry=(AdvisoryRequestEntry)entries.iterator().next();
    agentIDs=advisoryRequestEntry.agentGuids;
    sharedThingIDs=advisoryRequestEntry.shareableItems;
    profileId=advisoryRequestEntry.getProfileGuid();
  }
  Data<Warning> data=new Data<Warning>();
  int i=profileId.indexOf(""String_Node_Str"");
  while (i > 0) {
    profileId=profileId.substring(i);
    i=profileId.indexOf(""String_Node_Str"");
  }
  List<String> checkedThings=new ArrayList<String>();
  for (  String id : sharedThingIDs) {
    int index=id.indexOf(""String_Node_Str"");
    if (index == 0) {
      checkedThings.add(id);
    }
    while (index > 0) {
      id=id.substring(index);
      index=id.indexOf(""String_Node_Str"");
      checkedThings.add(id);
    }
  }
  try {
    Collection<Warning> warnings=advisoryController.getAdvisory(agentIDs,checkedThings,profileId);
    for (    Warning warning : warnings) {
      data.addEntry(warning);
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return Response.ok(data);
}","@POST @Consumes(MediaType.APPLICATION_JSON + ""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON + ""String_Node_Str"") @Path(""String_Node_Str"") public Response getAdvisory(@PathParam(""String_Node_Str"") String said,Request<AdvisoryRequestEntry> request){
  Collection<AdvisoryRequestEntry> entries=request.getMessage().getData().getEntries();
  List<String> agentIDs=null, sharedThingIDs=null;
  String profileId=""String_Node_Str"";
  if (entries.iterator().hasNext()) {
    AdvisoryRequestEntry advisoryRequestEntry=(AdvisoryRequestEntry)entries.iterator().next();
    agentIDs=advisoryRequestEntry.agentGuids;
    sharedThingIDs=advisoryRequestEntry.shareableItems;
    profileId=advisoryRequestEntry.getProfileGuid();
  }
  Data<Warning> data=new Data<Warning>();
  int i=profileId.indexOf(""String_Node_Str"");
  while (i > 0) {
    profileId=profileId.substring(i);
    i=profileId.indexOf(""String_Node_Str"");
  }
  List<String> checkedThings=new ArrayList<String>();
  for (  String id : sharedThingIDs) {
    int index=id.indexOf(""String_Node_Str"");
    if (index == 0) {
      checkedThings.add(id);
    }
    while (index > 0) {
      id=id.substring(index);
      index=id.indexOf(""String_Node_Str"");
      checkedThings.add(id);
    }
  }
  try {
    Collection<Warning> warnings=advisoryController.getAdvisory(agentIDs,checkedThings,profileId);
    for (    Warning warning : warnings) {
      data.addEntry(warning);
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return Response.serverError(e.getMessage(),e);
  }
  return Response.ok(data);
}"
53354,"public Collection<Warning> getAdvisory(List<String> agentIDs,List<String> sharedThingIDs,String profile) throws NotFoundException, InfosphereException {
  Collection<Warning> warnings=new ArrayList<Warning>();
  List<String> persons;
  try {
    persons=this.getPersonList(agentIDs);
    warnings.addAll(getTrustWarnings(persons,sharedThingIDs));
    warnings.addAll(getGroupWarnings(agentIDs,sharedThingIDs));
    warnings.addAll(getProfileWarnings(persons,profile));
    warnings.addAll(getResourceWarnings(sharedThingIDs));
    warnings.addAll(getReceiverWarnings(persons,sharedThingIDs));
  }
 catch (  RepositoryException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  ClassCastException e) {
    logger.error(""String_Node_Str"",e);
  }
  return warnings;
}","public Collection<Warning> getAdvisory(List<String> agentIDs,List<String> sharedThingIDs,String profile) throws NotFoundException, InfosphereException {
  Collection<Warning> warnings=new ArrayList<Warning>();
  List<String> persons;
  try {
    persons=this.getPersonList(agentIDs);
    warnings.addAll(getTrustWarnings(persons,sharedThingIDs));
    warnings.addAll(getGroupWarnings(agentIDs,sharedThingIDs));
    warnings.addAll(getProfileWarnings(persons,profile));
    warnings.addAll(getResourceWarnings(sharedThingIDs));
    warnings.addAll(getReceiverWarnings(persons,sharedThingIDs));
  }
 catch (  RepositoryException e) {
    logger.error(""String_Node_Str"",e);
    throw new InfosphereException(e.getMessage(),e);
  }
catch (  ClassCastException e) {
    logger.error(""String_Node_Str"",e);
    throw new InfosphereException(e.getMessage(),e);
  }
  return warnings;
}"
53355,"public String resolveSaid(String said) throws NamingException {
  return DnsResolver.resolve(dimeDns,said + ""String_Node_Str"");
}","public String resolveSaid(String said) throws NamingException {
  try {
    return DnsResolver.resolve(dimeDns,said + ""String_Node_Str"");
  }
 catch (  NamingException ex) {
    throw new NamingException(""String_Node_Str"" + said + ""String_Node_Str""+ dimeDns+ ""String_Node_Str""+ ex.getExplanation());
  }
}"
53356,"/** 
 * Inquires a USB serial driver and returns if any driver is detected.
 * @param deviceName null for wildcard
 * @return true if a USB serial driver is found and is ready.
 */
protected boolean inquireUsbSerialDriver(String deviceName,int baudRate){
  if (this.usbSerialDriver != null) {
    return true;
  }
  UsbSerialDriver usbSerialDriver=findUsbSerialDriver(deviceName);
  try {
    stopSerialInputOutputManager();
    if (usbSerialDriver != null) {
      this.usbDeviceConnection=this.usbManager.openDevice(usbSerialDriver.getDevice());
      final UsbSerialPort port=usbSerialDriver.getPorts().get(0);
      port.open(this.usbDeviceConnection);
      port.setParameters(baudRate,8,UsbSerialPort.STOPBITS_1,UsbSerialPort.PARITY_NONE);
    }
  }
 catch (  IOException exception) {
    usbSerialDriver=null;
  }
 finally {
    this.usbSerialDriver=usbSerialDriver.getPorts().get(0);
    startSerialInputOutputManager();
  }
  return usbSerialDriver != null;
}","/** 
 * Inquires a USB serial driver and returns if any driver is detected.
 * @param deviceName null for wildcard
 * @return true if a USB serial driver is found and is ready.
 */
protected boolean inquireUsbSerialDriver(String deviceName,int baudRate){
  if (this.usbSerialDriver != null) {
    return true;
  }
  UsbSerialDriver usbSerialDriver=findUsbSerialDriver(deviceName);
  try {
    stopSerialInputOutputManager();
    if (usbSerialDriver != null) {
      this.usbDeviceConnection=this.usbManager.openDevice(usbSerialDriver.getDevice());
      final UsbSerialPort port=usbSerialDriver.getPorts().get(0);
      port.open(this.usbDeviceConnection);
      port.setParameters(baudRate,8,UsbSerialPort.STOPBITS_1,UsbSerialPort.PARITY_NONE);
    }
  }
 catch (  IOException exception) {
    usbSerialDriver=null;
  }
 finally {
    if (usbSerialDriver != null) {
      this.usbSerialDriver=usbSerialDriver.getPorts().get(0);
    }
    startSerialInputOutputManager();
  }
  return usbSerialDriver != null;
}"
53357,"/** 
 * Continuously services the read and write buffers until   {@link #stop()} iscalled, or until a driver exception is raised. NOTE(mikey): Uses inefficient read/write-with-timeout. TODO(mikey): Read asynchronously with  {@link UsbRequest#queue(ByteBuffer,int)}
 */
public void run(){
synchronized (this) {
    if (getState() != State.STOPPED) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    mState=State.RUNNING;
  }
  Log.i(TAG,""String_Node_Str"");
  try {
    while (true) {
      if (getState() != State.RUNNING) {
        Log.i(TAG,""String_Node_Str"" + getState());
        break;
      }
      step();
    }
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"" + e.getMessage(),e);
    final Listener listener=getListener();
    if (listener != null) {
      listener.onRunError(e);
    }
  }
 finally {
synchronized (this) {
      mState=State.STOPPED;
      Log.i(TAG,""String_Node_Str"");
    }
  }
}","/** 
 * Continuously services the read and write buffers until   {@link #stop()} iscalled, or until a driver exception is raised. NOTE(mikey): Uses inefficient read/write-with-timeout. TODO(mikey): Read asynchronously with  {@link UsbRequest#queue(ByteBuffer,int)}
 */
public void run(){
synchronized (this) {
    if (getState() != State.STOPPED) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    mState=State.RUNNING;
  }
  Log.i(TAG,""String_Node_Str"");
  while (true) {
    try {
      if (getState() != State.RUNNING) {
        Log.i(TAG,""String_Node_Str"" + getState());
        break;
      }
      step();
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + e.getMessage(),e);
      final Listener listener=getListener();
      if (listener != null) {
        if (listener.onRunError(e) == false) {
          continue;
        }
      }
      break;
    }
  }
synchronized (this) {
    mState=State.STOPPED;
    Log.i(TAG,""String_Node_Str"");
  }
}"
53358,"/** 
 * Called when   {@link SerialInputOutputManager#run()} aborts due to anerror.
 */
public void onRunError(Exception e);","/** 
 * Called when   {@link SerialInputOutputManager#run()} aborts due to anerror.
 * @return true if transition to stop state
 */
public boolean onRunError(Exception e);"
53359,"/** 
 * {@inheritDoc}
 * @see SerialInputOutputManager.Listener#onRunError(java.lang.Exception)
 */
public void onRunError(Exception e){
  LOGGER.warn(""String_Node_Str"",e);
  doStop();
  try {
    Thread.sleep(Config.getWaitOnException());
  }
 catch (  InterruptedException ignored) {
  }
  doStart(getPortIdentifier(),getBaudrate(),getParity(),getDataBits(),getStopBits());
}","/** 
 * {@inheritDoc}
 * @see SerialInputOutputManager.Listener#onRunError(java.lang.Exception)
 */
public boolean onRunError(Exception e){
  if (e instanceof IOException) {
    final String message=e.getMessage();
    if (message != null && (message.indexOf(""String_Node_Str"") >= 0 || message.indexOf(""String_Node_Str"") >= 0)) {
      LOGGER.warn(""String_Node_Str"",message);
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException ignored) {
      }
      return false;
    }
  }
  LOGGER.warn(""String_Node_Str"",e);
  doStop();
  try {
    Thread.sleep(Config.getWaitOnException());
  }
 catch (  InterruptedException ignored) {
  }
  doStart(getPortIdentifier(),getBaudrate(),getParity(),getDataBits(),getStopBits());
  return true;
}"
53360,"/** 
 * @param deviceName
 * @return
 */
protected UsbSerialDriver findUsbSerialDriver(String deviceName){
  if (deviceName == null || deviceName.length() == 0) {
    return UsbSerialProber.acquire(usbManager);
  }
  for (  final UsbSerialProber prober : UsbSerialProber.values()) {
    for (    final UsbDevice usbDevice : usbManager.getDeviceList().values()) {
      final UsbSerialDriver driver=prober.getDevice(usbManager,usbDevice);
      if (driver != null && deviceName.equals(driver.getDevice().getDeviceName())) {
        return driver;
      }
    }
  }
  return null;
}","/** 
 * @param deviceName
 * @return
 */
protected UsbSerialDriver findUsbSerialDriver(String deviceName){
  if (deviceName == null || deviceName.length() == 0) {
    return UsbSerialProber.acquire(usbManager);
  }
  for (  final UsbSerialProber prober : UsbSerialProber.values()) {
    for (    final UsbDevice usbDevice : usbManager.getDeviceList().values()) {
      final UsbSerialDriver driver=getDevice(prober,usbDevice);
      if (driver != null && deviceName.equals(driver.getDevice().getDeviceName())) {
        return driver;
      }
    }
  }
  return null;
}"
53361,"/** 
 * {@inheritDoc}
 * @see com.yourinventit.processing.android.serial.SerialCommunicator#list()
 */
@Override public String[] list(){
  final List<String> names=new ArrayList<String>();
  for (  final UsbSerialProber prober : UsbSerialProber.values()) {
    for (    final UsbDevice usbDevice : usbManager.getDeviceList().values()) {
      final UsbSerialDriver driver=prober.getDevice(usbManager,usbDevice);
      if (driver != null) {
        names.add(driver.getDevice().getDeviceName());
      }
    }
  }
  return names.toArray(new String[names.size()]);
}","/** 
 * {@inheritDoc}
 * @see com.yourinventit.processing.android.serial.SerialCommunicator#list()
 */
@Override public String[] list(){
  final List<String> names=new ArrayList<String>();
  for (  final UsbSerialProber prober : UsbSerialProber.values()) {
    for (    final UsbDevice usbDevice : usbManager.getDeviceList().values()) {
      final UsbSerialDriver driver=getDevice(prober,usbDevice);
      if (driver != null) {
        names.add(driver.getDevice().getDeviceName());
      }
    }
  }
  return names.toArray(new String[names.size()]);
}"
53362,"public void getInterestingnessList(AsyncHttpResponseHandler handler){
  String apiUrl=getApiUrl(""String_Node_Str"");
  Log.d(""String_Node_Str"",""String_Node_Str"" + apiUrl);
  client.get(apiUrl,null,handler);
}","public void getInterestingnessList(AsyncHttpResponseHandler handler){
}"
53363,"/** 
 * Classify Named Entities creating the entities layer in the  {@link KAFDocument} using statistical models, post-processing and/ordictionaries only.
 * @param kaf the kaf document to be used for annotation
 * @throws IOException throws exception if problems with the kaf document
 */
public final void annotateNEs(final KAFDocument kaf) throws IOException {
  List<Span> allSpans=null;
  List<List<WF>> sentences=kaf.getSentences();
  for (  List<WF> sentence : sentences) {
    String[] tokens=new String[sentence.size()];
    String[] tokenIds=new String[sentence.size()];
    for (int i=0; i < sentence.size(); i++) {
      tokens[i]=sentence.get(i).getForm();
      tokenIds[i]=sentence.get(i).getId();
    }
    if (statistical) {
      if (clearFeatures.equalsIgnoreCase(""String_Node_Str"") && tokens[0].startsWith(""String_Node_Str"")) {
        nameFinder.clearAdaptiveData();
      }
      Span[] statSpans=nameFinder.nercToSpans(tokens);
      allSpans=Lists.newArrayList(statSpans);
    }
    if (postProcess) {
      Span[] dictSpans=dictFinder.nercToSpansExact(tokens);
      SpanUtils.postProcessDuplicatedSpans(allSpans,dictSpans);
      SpanUtils.concatenateSpans(allSpans,dictSpans);
    }
    if (dictTag) {
      Span[] dictOnlySpans=dictFinder.nercToSpansExact(tokens);
      allSpans=Lists.newArrayList(dictOnlySpans);
    }
    if (lexerFind) {
      String sentenceText=StringUtils.getStringFromTokens(tokens);
      StringReader stringReader=new StringReader(sentenceText);
      BufferedReader sentenceReader=new BufferedReader(stringReader);
      numericLexerFinder=new NumericNameFinder(sentenceReader,nameFactory);
      Span[] numericSpans=numericLexerFinder.nercToSpans(tokens);
      SpanUtils.concatenateSpans(allSpans,numericSpans);
    }
    Span[] allSpansArray=NameFinderME.dropOverlappingSpans(allSpans.toArray(new Span[allSpans.size()]));
    List<Name> names=new ArrayList<Name>();
    if (statistical) {
      names=nameFinder.getNamesFromSpans(allSpansArray,tokens);
    }
 else {
      names=dictFinder.getNamesFromSpans(allSpansArray,tokens);
    }
    for (    Name name : names) {
      Integer startIndex=name.getSpan().getStart();
      Integer endIndex=name.getSpan().getEnd();
      List<Term> nameTerms=kaf.getTermsFromWFs(Arrays.asList(Arrays.copyOfRange(tokenIds,startIndex,endIndex)));
      ixa.kaflib.Span<Term> neSpan=KAFDocument.newTermSpan(nameTerms);
      List<ixa.kaflib.Span<Term>> references=new ArrayList<ixa.kaflib.Span<Term>>();
      references.add(neSpan);
      Entity neEntity=kaf.newEntity(references);
      neEntity.setType(name.getType());
    }
    if (clearFeatures.equalsIgnoreCase(""String_Node_Str"")) {
      nameFinder.clearAdaptiveData();
    }
  }
  nameFinder.clearAdaptiveData();
}","/** 
 * Classify Named Entities creating the entities layer in the  {@link KAFDocument} using statistical models, post-processing and/ordictionaries only.
 * @param kaf the kaf document to be used for annotation
 * @throws IOException throws exception if problems with the kaf document
 */
public final void annotateNEs(final KAFDocument kaf) throws IOException {
  List<Span> allSpans=null;
  List<List<WF>> sentences=kaf.getSentences();
  for (  List<WF> sentence : sentences) {
    String[] tokens=new String[sentence.size()];
    String[] tokenIds=new String[sentence.size()];
    for (int i=0; i < sentence.size(); i++) {
      tokens[i]=sentence.get(i).getForm();
      tokenIds[i]=sentence.get(i).getId();
    }
    if (statistical) {
      if (clearFeatures.equalsIgnoreCase(""String_Node_Str"") && tokens[0].startsWith(""String_Node_Str"")) {
        nameFinder.clearAdaptiveData();
      }
      Span[] statSpans=nameFinder.nercToSpans(tokens);
      allSpans=Lists.newArrayList(statSpans);
    }
    if (postProcess) {
      Span[] dictSpans=dictFinder.nercToSpansExact(tokens);
      SpanUtils.postProcessDuplicatedSpans(allSpans,dictSpans);
      SpanUtils.concatenateSpans(allSpans,dictSpans);
    }
    if (dictTag) {
      Span[] dictOnlySpans=dictFinder.nercToSpansExact(tokens);
      allSpans=Lists.newArrayList(dictOnlySpans);
    }
    if (lexerFind) {
      String sentenceText=StringUtils.getStringFromTokens(tokens);
      StringReader stringReader=new StringReader(sentenceText);
      BufferedReader sentenceReader=new BufferedReader(stringReader);
      numericLexerFinder=new NumericNameFinder(sentenceReader,nameFactory);
      Span[] numericSpans=numericLexerFinder.nercToSpans(tokens);
      SpanUtils.concatenateSpans(allSpans,numericSpans);
    }
    Span[] allSpansArray=NameFinderME.dropOverlappingSpans(allSpans.toArray(new Span[allSpans.size()]));
    List<Name> names=new ArrayList<Name>();
    if (statistical) {
      names=nameFinder.getNamesFromSpans(allSpansArray,tokens);
    }
 else {
      names=dictFinder.getNamesFromSpans(allSpansArray,tokens);
    }
    for (    Name name : names) {
      Integer startIndex=name.getSpan().getStart();
      Integer endIndex=name.getSpan().getEnd();
      List<Term> nameTerms=kaf.getTermsFromWFs(Arrays.asList(Arrays.copyOfRange(tokenIds,startIndex,endIndex)));
      ixa.kaflib.Span<Term> neSpan=KAFDocument.newTermSpan(nameTerms);
      List<ixa.kaflib.Span<Term>> references=new ArrayList<ixa.kaflib.Span<Term>>();
      references.add(neSpan);
      Entity neEntity=kaf.newEntity(references);
      neEntity.setType(name.getType());
    }
    if (clearFeatures.equalsIgnoreCase(""String_Node_Str"")) {
      nameFinder.clearAdaptiveData();
    }
  }
  if (statistical) {
    nameFinder.clearAdaptiveData();
  }
}"
53364,"/** 
 * Generates the token to cluster map from Brown cluster input file. NOTE: we only add those tokens with frequency larger than 5.
 * @param in the inputstream
 * @throws IOException the io exception
 */
public BrownCluster(InputStream in) throws IOException {
  BufferedReader breader=new BufferedReader(new InputStreamReader(in,Charset.forName(""String_Node_Str"")));
  String line;
  while ((line=breader.readLine()) != null) {
    String[] lineArray=tabPattern.split(line);
    if (lineArray.length == 3) {
      int freq=Integer.parseInt(lineArray[2]);
      if (freq > 5) {
        tokenToClusterMap.put(lineArray[1],lineArray[0]);
      }
    }
 else     if (lineArray.length == 2) {
      tokenToClusterMap.put(lineArray[0],lineArray[1]);
    }
  }
}","/** 
 * Generates the token to cluster map from Brown cluster input file. NOTE: we only add those tokens with frequency larger than 5.
 * @param in the inputstream
 * @throws IOException the io exception
 */
public BrownCluster(InputStream in) throws IOException {
  BufferedReader breader=new BufferedReader(new InputStreamReader(in,Charset.forName(""String_Node_Str"")));
  String line;
  while ((line=breader.readLine()) != null) {
    String[] lineArray=tabPattern.split(line);
    if (lineArray.length == 3) {
      int freq=Integer.parseInt(lineArray[2]);
      if (freq > 5) {
        String normalizedToken=ClarkCluster.dotInsideI.matcher(lineArray[1]).replaceAll(""String_Node_Str"");
        tokenToClusterMap.put(normalizedToken,lineArray[0]);
      }
    }
 else     if (lineArray.length == 2) {
      String normalizedToken=ClarkCluster.dotInsideI.matcher(lineArray[0]).replaceAll(""String_Node_Str"");
      tokenToClusterMap.put(normalizedToken,lineArray[1]);
    }
  }
}"
53365,"public ClarkCluster(InputStream in) throws IOException {
  BufferedReader breader=new BufferedReader(new InputStreamReader(in,Charset.forName(""String_Node_Str"")));
  String line;
  while ((line=breader.readLine()) != null) {
    String[] lineArray=spacePattern.split(line);
    if (lineArray.length == 3) {
      tokenToClusterMap.put(lineArray[0].toLowerCase(),lineArray[1]);
    }
 else     if (lineArray.length == 2) {
      tokenToClusterMap.put(lineArray[0].toLowerCase(),lineArray[1]);
    }
  }
}","public ClarkCluster(InputStream in) throws IOException {
  BufferedReader breader=new BufferedReader(new InputStreamReader(in,Charset.forName(""String_Node_Str"")));
  String line;
  while ((line=breader.readLine()) != null) {
    String[] lineArray=spacePattern.split(line);
    if (lineArray.length == 3) {
      String normalizedToken=dotInsideI.matcher(lineArray[0]).replaceAll(""String_Node_Str"");
      tokenToClusterMap.put(normalizedToken.toLowerCase(),lineArray[1]);
    }
 else     if (lineArray.length == 2) {
      String normalizedToken=dotInsideI.matcher(lineArray[0]).replaceAll(""String_Node_Str"");
      tokenToClusterMap.put(normalizedToken.toLowerCase(),lineArray[1]);
    }
  }
}"
53366,"public Word2VecCluster(InputStream in) throws IOException {
  BufferedReader breader=new BufferedReader(new InputStreamReader(in,Charset.forName(""String_Node_Str"")));
  String line;
  while ((line=breader.readLine()) != null) {
    String[] lineArray=spacePattern.split(line);
    if (lineArray.length == 2) {
      tokenToClusterMap.put(lineArray[0].toLowerCase(),lineArray[1]);
    }
  }
}","public Word2VecCluster(InputStream in) throws IOException {
  BufferedReader breader=new BufferedReader(new InputStreamReader(in,Charset.forName(""String_Node_Str"")));
  String line;
  while ((line=breader.readLine()) != null) {
    String[] lineArray=spacePattern.split(line);
    if (lineArray.length == 2) {
      String normalizedToken=ClarkCluster.dotInsideI.matcher(lineArray[0]).replaceAll(""String_Node_Str"");
      tokenToClusterMap.put(normalizedToken.toLowerCase(),lineArray[1]);
    }
  }
}"
53367,"/** 
 * Check if mfs features are active.
 * @param params the parameters
 * @return whether the mfs features are activated or not
 */
public static boolean isMFSFeatures(TrainingParameters params){
  String mfsFeatures=getSuperSenseFeatures(params);
  return !mfsFeatures.equalsIgnoreCase(Flags.DEFAULT_FEATURE_FLAG);
}","/** 
 * Check if mfs features are active.
 * @param params the parameters
 * @return whether the mfs features are activated or not
 */
public static boolean isMFSFeatures(TrainingParameters params){
  String mfsFeatures=getMFSFeatures(params);
  return !mfsFeatures.equalsIgnoreCase(Flags.DEFAULT_FEATURE_FLAG);
}"
53368,"@Override public void init(Map<String,String> properties,FeatureGeneratorResourceProvider resourceProvider) throws InvalidFormatException {
  Object posResource=resourceProvider.getResource(properties.get(""String_Node_Str""));
  if (!(posResource instanceof POSModelResource)) {
    throw new InvalidFormatException(""String_Node_Str"" + properties.get(""String_Node_Str""));
  }
  this.posModelResource=(POSModelResource)posResource;
  Object lemmaResource=resourceProvider.getResource(properties.get(""String_Node_Str""));
  if (!(lemmaResource instanceof LemmaResource)) {
    throw new InvalidFormatException(""String_Node_Str"" + properties.get(""String_Node_Str""));
  }
}","@Override public void init(Map<String,String> properties,FeatureGeneratorResourceProvider resourceProvider) throws InvalidFormatException {
  Object posResource=resourceProvider.getResource(properties.get(""String_Node_Str""));
  if (!(posResource instanceof POSModelResource)) {
    throw new InvalidFormatException(""String_Node_Str"" + properties.get(""String_Node_Str""));
  }
  this.posModelResource=(POSModelResource)posResource;
  Object lemmaResource=resourceProvider.getResource(properties.get(""String_Node_Str""));
  if (!(lemmaResource instanceof LemmaResource)) {
    throw new InvalidFormatException(""String_Node_Str"" + properties.get(""String_Node_Str""));
  }
  this.lemmaDictResource=(LemmaResource)lemmaResource;
}"
53369,"public void createFeatures(List<String> features,String[] tokens,int index,String[] previousOutcomes){
  if (currentSentence != tokens) {
    currentSentence=tokens;
    currentTags=posModelResource.posTag(tokens);
  }
  String posTag=currentTags[index];
  String lemma=lemmaResource.lookUpLemma(tokens[index],posTag);
  features.add(""String_Node_Str"" + lemma);
}","public void createFeatures(List<String> features,String[] tokens,int index,String[] previousOutcomes){
  if (currentSentence != tokens) {
    currentSentence=tokens;
    currentTags=posModelResource.posTag(tokens);
  }
  String posTag=currentTags[index];
  String lemma=lemmaDictResource.lookUpLemma(tokens[index],posTag);
  features.add(""String_Node_Str"" + lemma);
}"
53370,"/** 
 * Generate the XML feature descriptor from the TrainingParameters prop file.
 * @param params the properties file
 * @return the XML feature descriptor
 * @throws IOException if input output fails
 */
public static String createXMLFeatureDescriptor(TrainingParameters params) throws IOException {
  Element aggGenerators=new Element(""String_Node_Str"");
  Document doc=new Document(aggGenerators);
  Element cached=new Element(""String_Node_Str"");
  Element generators=new Element(""String_Node_Str"");
  if (Flags.isTokenFeature(params)) {
    setWindow(params);
    Element tokenFeature=new Element(""String_Node_Str"");
    tokenFeature.setAttribute(""String_Node_Str"",TokenFeatureGenerator.class.getName());
    Element tokenWindow=new Element(""String_Node_Str"");
    tokenWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
    tokenWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
    tokenWindow.addContent(tokenFeature);
    generators.addContent(tokenWindow);
    System.err.println(""String_Node_Str"" + leftWindow + ""String_Node_Str""+ rightWindow);
  }
  if (Flags.isTokenClassFeature(params)) {
    setWindow(params);
    Element tokenClassFeature=new Element(""String_Node_Str"");
    tokenClassFeature.setAttribute(""String_Node_Str"",TokenClassFeatureGenerator.class.getName());
    Element tokenClassWindow=new Element(""String_Node_Str"");
    tokenClassWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
    tokenClassWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
    tokenClassWindow.addContent(tokenClassFeature);
    generators.addContent(tokenClassWindow);
    System.err.println(""String_Node_Str"" + leftWindow + ""String_Node_Str""+ rightWindow);
  }
  if (Flags.isOutcomePriorFeature(params)) {
    Element outcomePriorFeature=new Element(""String_Node_Str"");
    outcomePriorFeature.setAttribute(""String_Node_Str"",OutcomePriorFeatureGenerator.class.getName());
    generators.addContent(outcomePriorFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isPreviousMapFeature(params)) {
    Element previousMapFeature=new Element(""String_Node_Str"");
    previousMapFeature.setAttribute(""String_Node_Str"",PreviousMapFeatureGenerator.class.getName());
    generators.addContent(previousMapFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isSentenceFeature(params)) {
    Element sentenceFeature=new Element(""String_Node_Str"");
    sentenceFeature.setAttribute(""String_Node_Str"",SentenceFeatureGenerator.class.getName());
    sentenceFeature.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sentenceFeature.setAttribute(""String_Node_Str"",""String_Node_Str"");
    generators.addContent(sentenceFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isPrefixFeature(params)) {
    Element prefixFeature=new Element(""String_Node_Str"");
    prefixFeature.setAttribute(""String_Node_Str"",Prefix34FeatureGenerator.class.getName());
    generators.addContent(prefixFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isSuffixFeature(params)) {
    Element suffixFeature=new Element(""String_Node_Str"");
    suffixFeature.setAttribute(""String_Node_Str"",SuffixFeatureGenerator.class.getName());
    generators.addContent(suffixFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isBigramClassFeature(params)) {
    Element bigramFeature=new Element(""String_Node_Str"");
    bigramFeature.setAttribute(""String_Node_Str"",BigramClassFeatureGenerator.class.getName());
    generators.addContent(bigramFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isTrigramClassFeature(params)) {
    Element trigramFeature=new Element(""String_Node_Str"");
    trigramFeature.setAttribute(""String_Node_Str"",TrigramClassFeatureGenerator.class.getName());
    generators.addContent(trigramFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isFourgramClassFeature(params)) {
    Element fourgramFeature=new Element(""String_Node_Str"");
    fourgramFeature.setAttribute(""String_Node_Str"",FourgramClassFeatureGenerator.class.getName());
    generators.addContent(fourgramFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isFivegramClassFeature(params)) {
    Element fivegramFeature=new Element(""String_Node_Str"");
    fivegramFeature.setAttribute(""String_Node_Str"",FivegramClassFeatureGenerator.class.getName());
    generators.addContent(fivegramFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isCharNgramClassFeature(params)) {
    setNgramRange(params);
    Element charngramFeature=new Element(""String_Node_Str"");
    charngramFeature.setAttribute(""String_Node_Str"",CharacterNgramFeatureGenerator.class.getName());
    charngramFeature.setAttribute(""String_Node_Str"",Integer.toString(minCharNgram));
    charngramFeature.setAttribute(""String_Node_Str"",Integer.toString(maxCharNgram));
    generators.addContent(charngramFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isDictionaryFeatures(params)) {
    setWindow(params);
    String dictPath=Flags.getDictionaryFeatures(params);
    List<File> fileList=StringUtils.getFilesInDir(new File(dictPath));
    for (    File dictFile : fileList) {
      Element dictFeatures=new Element(""String_Node_Str"");
      dictFeatures.setAttribute(""String_Node_Str"",DictionaryFeatureGenerator.class.getName());
      dictFeatures.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(dictFile.getCanonicalPath()));
      Element dictWindow=new Element(""String_Node_Str"");
      dictWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
      dictWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
      dictWindow.addContent(dictFeatures);
      generators.addContent(dictWindow);
    }
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isBrownFeatures(params)) {
    setWindow(params);
    Element prev2MapFeature=new Element(""String_Node_Str"");
    prev2MapFeature.setAttribute(""String_Node_Str"",Prev2MapFeatureGenerator.class.getName());
    generators.addContent(prev2MapFeature);
    Element prevMapTokenFeature=new Element(""String_Node_Str"");
    prevMapTokenFeature.setAttribute(""String_Node_Str"",PreviousMapTokenFeatureGenerator.class.getName());
    Element prevMapTokenWindow=new Element(""String_Node_Str"");
    prevMapTokenWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
    prevMapTokenWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
    prevMapTokenWindow.addContent(prevMapTokenFeature);
    generators.addContent(prevMapTokenWindow);
    String brownClusterPath=Flags.getBrownFeatures(params);
    List<File> brownClusterFiles=Flags.getClusterLexiconFiles(brownClusterPath);
    for (    File brownClusterFile : brownClusterFiles) {
      Element brownBigramFeatures=new Element(""String_Node_Str"");
      brownBigramFeatures.setAttribute(""String_Node_Str"",BrownBigramFeatureGenerator.class.getName());
      brownBigramFeatures.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(brownClusterFile.getCanonicalPath()));
      generators.addContent(brownBigramFeatures);
      Element brownTokenFeature=new Element(""String_Node_Str"");
      brownTokenFeature.setAttribute(""String_Node_Str"",BrownTokenFeatureGenerator.class.getName());
      brownTokenFeature.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(brownClusterFile.getCanonicalPath()));
      Element brownTokenWindow=new Element(""String_Node_Str"");
      brownTokenWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
      brownTokenWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
      brownTokenWindow.addContent(brownTokenFeature);
      generators.addContent(brownTokenWindow);
      Element brownTokenClassFeature=new Element(""String_Node_Str"");
      brownTokenClassFeature.setAttribute(""String_Node_Str"",BrownTokenClassFeatureGenerator.class.getName());
      brownTokenClassFeature.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(brownClusterFile.getCanonicalPath()));
      Element brownTokenClassWindow=new Element(""String_Node_Str"");
      brownTokenClassWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
      brownTokenClassWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
      brownTokenClassWindow.addContent(brownTokenClassFeature);
      generators.addContent(brownTokenClassWindow);
    }
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isClarkFeatures(params)) {
    setWindow(params);
    String clarkClusterPath=Flags.getClarkFeatures(params);
    List<File> clarkClusterFiles=Flags.getClusterLexiconFiles(clarkClusterPath);
    for (    File clarkCluster : clarkClusterFiles) {
      Element clarkFeatures=new Element(""String_Node_Str"");
      clarkFeatures.setAttribute(""String_Node_Str"",ClarkFeatureGenerator.class.getName());
      clarkFeatures.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(clarkCluster.getCanonicalPath()));
      Element clarkWindow=new Element(""String_Node_Str"");
      clarkWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
      clarkWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
      clarkWindow.addContent(clarkFeatures);
      generators.addContent(clarkWindow);
    }
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isWord2VecClusterFeatures(params)) {
    setWindow(params);
    String word2vecClusterPath=Flags.getWord2VecClusterFeatures(params);
    List<File> word2vecClusterFiles=Flags.getClusterLexiconFiles(word2vecClusterPath);
    for (    File word2vecFile : word2vecClusterFiles) {
      Element word2vecClusterFeatures=new Element(""String_Node_Str"");
      word2vecClusterFeatures.setAttribute(""String_Node_Str"",Word2VecClusterFeatureGenerator.class.getName());
      word2vecClusterFeatures.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(word2vecFile.getCanonicalPath()));
      Element word2vecClusterWindow=new Element(""String_Node_Str"");
      word2vecClusterWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
      word2vecClusterWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
      word2vecClusterWindow.addContent(word2vecClusterFeatures);
      generators.addContent(word2vecClusterWindow);
    }
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isPOSFeatures(params)) {
    setWindow(params);
    String posModelPath=Flags.getPOSFeatures(params);
    Element posFeatureElement=new Element(""String_Node_Str"");
    posFeatureElement.setAttribute(""String_Node_Str"",POSFeatureGenerator.class.getName());
    posFeatureElement.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(posModelPath));
    Element posFeatureWindow=new Element(""String_Node_Str"");
    posFeatureWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
    posFeatureWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
    posFeatureWindow.addContent(posFeatureElement);
    generators.addContent(posFeatureWindow);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isPOSClassFeatures(params)) {
    String posModelPath=Flags.getPOSClassFeatures(params);
    Element posClassFeatureElement=new Element(""String_Node_Str"");
    posClassFeatureElement.setAttribute(""String_Node_Str"",POSClassFeatureGenerator.class.getName());
    posClassFeatureElement.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(posModelPath));
    Element posClassFeatureWindow=new Element(""String_Node_Str"");
    posClassFeatureWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
    posClassFeatureWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
    posClassFeatureWindow.addContent(posClassFeatureElement);
    generators.addContent(posClassFeatureWindow);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isLemmaFeatures(params)) {
    String lemmaPath=Flags.getLemmaFeatures(params);
    String[] lemmaResources=lemmaPath.split(""String_Node_Str"");
    Element lemmaClassFeatureElement=new Element(""String_Node_Str"");
    lemmaClassFeatureElement.setAttribute(""String_Node_Str"",LemmaFeatureGenerator.class.getName());
    lemmaClassFeatureElement.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(lemmaResources[0]));
    lemmaClassFeatureElement.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(lemmaResources[1]));
    Element lemmaClassFeatureWindow=new Element(""String_Node_Str"");
    lemmaClassFeatureWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
    lemmaClassFeatureWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
    lemmaClassFeatureWindow.addContent(lemmaClassFeatureElement);
    generators.addContent(lemmaClassFeatureWindow);
    System.err.println(""String_Node_Str"");
  }
  aggGenerators.addContent(cached);
  cached.addContent(generators);
  XMLOutputter xmlOutput=new XMLOutputter();
  Format format=Format.getPrettyFormat();
  xmlOutput.setFormat(format);
  return xmlOutput.outputString(doc);
}","/** 
 * Generate the XML feature descriptor from the TrainingParameters prop file.
 * @param params the properties file
 * @return the XML feature descriptor
 * @throws IOException if input output fails
 */
public static String createXMLFeatureDescriptor(TrainingParameters params) throws IOException {
  Element aggGenerators=new Element(""String_Node_Str"");
  Document doc=new Document(aggGenerators);
  Element cached=new Element(""String_Node_Str"");
  Element generators=new Element(""String_Node_Str"");
  if (Flags.isTokenFeature(params)) {
    setWindow(params);
    Element tokenFeature=new Element(""String_Node_Str"");
    tokenFeature.setAttribute(""String_Node_Str"",TokenFeatureGenerator.class.getName());
    Element tokenWindow=new Element(""String_Node_Str"");
    tokenWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
    tokenWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
    tokenWindow.addContent(tokenFeature);
    generators.addContent(tokenWindow);
    System.err.println(""String_Node_Str"" + leftWindow + ""String_Node_Str""+ rightWindow);
  }
  if (Flags.isTokenClassFeature(params)) {
    setWindow(params);
    Element tokenClassFeature=new Element(""String_Node_Str"");
    tokenClassFeature.setAttribute(""String_Node_Str"",TokenClassFeatureGenerator.class.getName());
    Element tokenClassWindow=new Element(""String_Node_Str"");
    tokenClassWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
    tokenClassWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
    tokenClassWindow.addContent(tokenClassFeature);
    generators.addContent(tokenClassWindow);
    System.err.println(""String_Node_Str"" + leftWindow + ""String_Node_Str""+ rightWindow);
  }
  if (Flags.isOutcomePriorFeature(params)) {
    Element outcomePriorFeature=new Element(""String_Node_Str"");
    outcomePriorFeature.setAttribute(""String_Node_Str"",OutcomePriorFeatureGenerator.class.getName());
    generators.addContent(outcomePriorFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isPreviousMapFeature(params)) {
    Element previousMapFeature=new Element(""String_Node_Str"");
    previousMapFeature.setAttribute(""String_Node_Str"",PreviousMapFeatureGenerator.class.getName());
    generators.addContent(previousMapFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isSentenceFeature(params)) {
    Element sentenceFeature=new Element(""String_Node_Str"");
    sentenceFeature.setAttribute(""String_Node_Str"",SentenceFeatureGenerator.class.getName());
    sentenceFeature.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sentenceFeature.setAttribute(""String_Node_Str"",""String_Node_Str"");
    generators.addContent(sentenceFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isPrefixFeature(params)) {
    Element prefixFeature=new Element(""String_Node_Str"");
    prefixFeature.setAttribute(""String_Node_Str"",Prefix34FeatureGenerator.class.getName());
    generators.addContent(prefixFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isSuffixFeature(params)) {
    Element suffixFeature=new Element(""String_Node_Str"");
    suffixFeature.setAttribute(""String_Node_Str"",SuffixFeatureGenerator.class.getName());
    generators.addContent(suffixFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isBigramClassFeature(params)) {
    Element bigramFeature=new Element(""String_Node_Str"");
    bigramFeature.setAttribute(""String_Node_Str"",BigramClassFeatureGenerator.class.getName());
    generators.addContent(bigramFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isTrigramClassFeature(params)) {
    Element trigramFeature=new Element(""String_Node_Str"");
    trigramFeature.setAttribute(""String_Node_Str"",TrigramClassFeatureGenerator.class.getName());
    generators.addContent(trigramFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isFourgramClassFeature(params)) {
    Element fourgramFeature=new Element(""String_Node_Str"");
    fourgramFeature.setAttribute(""String_Node_Str"",FourgramClassFeatureGenerator.class.getName());
    generators.addContent(fourgramFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isFivegramClassFeature(params)) {
    Element fivegramFeature=new Element(""String_Node_Str"");
    fivegramFeature.setAttribute(""String_Node_Str"",FivegramClassFeatureGenerator.class.getName());
    generators.addContent(fivegramFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isCharNgramClassFeature(params)) {
    setNgramRange(params);
    Element charngramFeature=new Element(""String_Node_Str"");
    charngramFeature.setAttribute(""String_Node_Str"",CharacterNgramFeatureGenerator.class.getName());
    charngramFeature.setAttribute(""String_Node_Str"",Integer.toString(minCharNgram));
    charngramFeature.setAttribute(""String_Node_Str"",Integer.toString(maxCharNgram));
    generators.addContent(charngramFeature);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isDictionaryFeatures(params)) {
    setWindow(params);
    String dictPath=Flags.getDictionaryFeatures(params);
    List<File> fileList=StringUtils.getFilesInDir(new File(dictPath));
    for (    File dictFile : fileList) {
      Element dictFeatures=new Element(""String_Node_Str"");
      dictFeatures.setAttribute(""String_Node_Str"",DictionaryFeatureGenerator.class.getName());
      dictFeatures.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(dictFile.getCanonicalPath()));
      Element dictWindow=new Element(""String_Node_Str"");
      dictWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
      dictWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
      dictWindow.addContent(dictFeatures);
      generators.addContent(dictWindow);
    }
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isBrownFeatures(params)) {
    setWindow(params);
    Element prev2MapFeature=new Element(""String_Node_Str"");
    prev2MapFeature.setAttribute(""String_Node_Str"",Prev2MapFeatureGenerator.class.getName());
    generators.addContent(prev2MapFeature);
    Element prevMapTokenFeature=new Element(""String_Node_Str"");
    prevMapTokenFeature.setAttribute(""String_Node_Str"",PreviousMapTokenFeatureGenerator.class.getName());
    Element prevMapTokenWindow=new Element(""String_Node_Str"");
    prevMapTokenWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
    prevMapTokenWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
    prevMapTokenWindow.addContent(prevMapTokenFeature);
    generators.addContent(prevMapTokenWindow);
    String brownClusterPath=Flags.getBrownFeatures(params);
    List<File> brownClusterFiles=Flags.getClusterLexiconFiles(brownClusterPath);
    for (    File brownClusterFile : brownClusterFiles) {
      Element brownBigramFeatures=new Element(""String_Node_Str"");
      brownBigramFeatures.setAttribute(""String_Node_Str"",BrownBigramFeatureGenerator.class.getName());
      brownBigramFeatures.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(brownClusterFile.getCanonicalPath()));
      generators.addContent(brownBigramFeatures);
      Element brownTokenFeature=new Element(""String_Node_Str"");
      brownTokenFeature.setAttribute(""String_Node_Str"",BrownTokenFeatureGenerator.class.getName());
      brownTokenFeature.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(brownClusterFile.getCanonicalPath()));
      Element brownTokenWindow=new Element(""String_Node_Str"");
      brownTokenWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
      brownTokenWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
      brownTokenWindow.addContent(brownTokenFeature);
      generators.addContent(brownTokenWindow);
      Element brownTokenClassFeature=new Element(""String_Node_Str"");
      brownTokenClassFeature.setAttribute(""String_Node_Str"",BrownTokenClassFeatureGenerator.class.getName());
      brownTokenClassFeature.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(brownClusterFile.getCanonicalPath()));
      Element brownTokenClassWindow=new Element(""String_Node_Str"");
      brownTokenClassWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
      brownTokenClassWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
      brownTokenClassWindow.addContent(brownTokenClassFeature);
      generators.addContent(brownTokenClassWindow);
    }
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isClarkFeatures(params)) {
    setWindow(params);
    String clarkClusterPath=Flags.getClarkFeatures(params);
    List<File> clarkClusterFiles=Flags.getClusterLexiconFiles(clarkClusterPath);
    for (    File clarkCluster : clarkClusterFiles) {
      Element clarkFeatures=new Element(""String_Node_Str"");
      clarkFeatures.setAttribute(""String_Node_Str"",ClarkFeatureGenerator.class.getName());
      clarkFeatures.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(clarkCluster.getCanonicalPath()));
      Element clarkWindow=new Element(""String_Node_Str"");
      clarkWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
      clarkWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
      clarkWindow.addContent(clarkFeatures);
      generators.addContent(clarkWindow);
    }
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isWord2VecClusterFeatures(params)) {
    setWindow(params);
    String word2vecClusterPath=Flags.getWord2VecClusterFeatures(params);
    List<File> word2vecClusterFiles=Flags.getClusterLexiconFiles(word2vecClusterPath);
    for (    File word2vecFile : word2vecClusterFiles) {
      Element word2vecClusterFeatures=new Element(""String_Node_Str"");
      word2vecClusterFeatures.setAttribute(""String_Node_Str"",Word2VecClusterFeatureGenerator.class.getName());
      word2vecClusterFeatures.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(word2vecFile.getCanonicalPath()));
      Element word2vecClusterWindow=new Element(""String_Node_Str"");
      word2vecClusterWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
      word2vecClusterWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
      word2vecClusterWindow.addContent(word2vecClusterFeatures);
      generators.addContent(word2vecClusterWindow);
    }
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isPOSFeatures(params)) {
    setWindow(params);
    String posModelPath=Flags.getPOSFeatures(params);
    Element posFeatureElement=new Element(""String_Node_Str"");
    posFeatureElement.setAttribute(""String_Node_Str"",POSFeatureGenerator.class.getName());
    posFeatureElement.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(posModelPath));
    Element posFeatureWindow=new Element(""String_Node_Str"");
    posFeatureWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
    posFeatureWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
    posFeatureWindow.addContent(posFeatureElement);
    generators.addContent(posFeatureWindow);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isPOSClassFeatures(params)) {
    leftWindow=1;
    rightWindow=1;
    String posModelPath=Flags.getPOSClassFeatures(params);
    Element posClassFeatureElement=new Element(""String_Node_Str"");
    posClassFeatureElement.setAttribute(""String_Node_Str"",POSClassFeatureGenerator.class.getName());
    posClassFeatureElement.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(posModelPath));
    Element posClassFeatureWindow=new Element(""String_Node_Str"");
    posClassFeatureWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
    posClassFeatureWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
    posClassFeatureWindow.addContent(posClassFeatureElement);
    generators.addContent(posClassFeatureWindow);
    System.err.println(""String_Node_Str"");
  }
  if (Flags.isLemmaFeatures(params)) {
    String lemmaPath=Flags.getLemmaFeatures(params);
    String[] lemmaResources=lemmaPath.split(""String_Node_Str"");
    Element lemmaClassFeatureElement=new Element(""String_Node_Str"");
    lemmaClassFeatureElement.setAttribute(""String_Node_Str"",LemmaFeatureGenerator.class.getName());
    lemmaClassFeatureElement.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(lemmaResources[0]));
    lemmaClassFeatureElement.setAttribute(""String_Node_Str"",InputOutputUtils.normalizeLexiconName(lemmaResources[1]));
    Element lemmaClassFeatureWindow=new Element(""String_Node_Str"");
    lemmaClassFeatureWindow.setAttribute(""String_Node_Str"",Integer.toString(leftWindow));
    lemmaClassFeatureWindow.setAttribute(""String_Node_Str"",Integer.toString(rightWindow));
    lemmaClassFeatureWindow.addContent(lemmaClassFeatureElement);
    generators.addContent(lemmaClassFeatureWindow);
    System.err.println(""String_Node_Str"");
  }
  aggGenerators.addContent(cached);
  cached.addContent(generators);
  XMLOutputter xmlOutput=new XMLOutputter();
  Format format=Format.getPrettyFormat();
  xmlOutput.setFormat(format);
  return xmlOutput.outputString(doc);
}"
53371,"public void serialize(OutputStream out) throws IOException {
  Writer writer=new BufferedWriter(new OutputStreamWriter(out));
  for (  Map.Entry<List<String>,String> entry : dictMap.entrySet()) {
    writer.write(entry.getKey().get(0) + ""String_Node_Str"" + entry.getKey().get(1)+ ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
  }
  writer.flush();
}","public void serialize(OutputStream out) throws IOException {
  Writer writer=new BufferedWriter(new OutputStreamWriter(out));
  for (  Map.Entry<List<String>,String> entry : dictMap.entrySet()) {
    writer.write(entry.getKey().get(0) + ""String_Node_Str"" + entry.getValue()+ ""String_Node_Str""+ entry.getKey().get(1)+ ""String_Node_Str"");
  }
  writer.flush();
}"
53372,"public void createFeatures(List<String> features,String[] tokens,int index,String[] preds){
  String normalizedToken=normalize(tokens[index]);
  features.add(""String_Node_Str"" + normalizedToken);
  if (Character.isLowerCase(tokens[index].codePointAt(0))) {
    features.add(""String_Node_Str"" + ""String_Node_Str"");
  }
 else   if (Character.isUpperCase(tokens[index].codePointAt(0))) {
    if (index > 0 && (tokens[index - 1].equalsIgnoreCase(""String_Node_Str"") || tokens[index - 1].equalsIgnoreCase(""String_Node_Str"") || tokens[index - 1].equalsIgnoreCase(""String_Node_Str""))) {
      features.add(""String_Node_Str"" + ""String_Node_Str"");
    }
 else     if (index == 0) {
      features.add(""String_Node_Str"" + ""String_Node_Str"");
    }
 else {
      features.add(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}","public void createFeatures(List<String> features,String[] tokens,int index,String[] preds){
  String normalizedToken=normalize(tokens[index]);
  features.add(""String_Node_Str"" + normalizedToken);
  if (Character.isLowerCase(tokens[index].charAt(0))) {
    features.add(""String_Node_Str"" + ""String_Node_Str"");
  }
 else   if (Character.isUpperCase(tokens[index].charAt(0))) {
    if (index > 0 && (tokens[index - 1].equalsIgnoreCase(""String_Node_Str"") || tokens[index - 1].equalsIgnoreCase(""String_Node_Str"") || tokens[index - 1].equalsIgnoreCase(""String_Node_Str""))) {
      features.add(""String_Node_Str"" + ""String_Node_Str"");
    }
 else     if (index == 0) {
      features.add(""String_Node_Str"" + ""String_Node_Str"");
    }
 else {
      features.add(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}"
53373,"/** 
 * Normalize upper case, lower case, digits and duplicate characters.
 * @param token the token to be normalized
 * @return the normalized token
 */
public static String normalize(String token){
  String normalizedToken=token.replaceAll(""String_Node_Str"",""String_Node_Str"");
  normalizedToken=token.replaceAll(""String_Node_Str"",""String_Node_Str"");
  normalizedToken=token.replaceAll(""String_Node_Str"",""String_Node_Str"");
  normalizedToken=replaceDuplicateCharacters(normalizedToken);
  return normalizedToken;
}","/** 
 * Normalize upper case, lower case, digits and duplicate characters.
 * @param token the token to be normalized
 * @return the normalized token
 */
public static String normalize(String token){
  Matcher duplicateMatcher=duplicateCharacters.matcher(token);
  String normalizedToken=duplicateMatcher.replaceAll(""String_Node_Str"");
  normalizedToken=normalizedToken.replaceAll(""String_Node_Str"",""String_Node_Str"");
  normalizedToken=normalizedToken.replaceAll(""String_Node_Str"",""String_Node_Str"");
  normalizedToken=normalizedToken.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return normalizedToken;
}"
53374,"/** 
 * Output Conll2002 format.
 * @param kaf the kaf document
 * @return the annotated named entities in conll03 format
 */
public String annotateNEsToCoNLL2002(KAFDocument kaf){
  List<Entity> namedEntityList=kaf.getEntities();
  Map<String,Integer> entityToSpanSize=new HashMap<String,Integer>();
  Map<String,String> entityToType=new HashMap<String,String>();
  for (  Entity ne : namedEntityList) {
    List<ixa.kaflib.Span<Term>> entitySpanList=ne.getSpans();
    for (    ixa.kaflib.Span<Term> spanTerm : entitySpanList) {
      Term neTerm=spanTerm.getFirstTarget();
      entityToSpanSize.put(neTerm.getId(),spanTerm.size());
      entityToType.put(neTerm.getId(),ne.getType());
    }
  }
  List<List<WF>> sentences=kaf.getSentences();
  StringBuilder sb=new StringBuilder();
  for (  List<WF> sentence : sentences) {
    int sentNumber=sentence.get(0).getSent();
    List<Term> sentenceTerms=kaf.getSentenceTerms(sentNumber);
    boolean previousIsEntity=false;
    for (int i=0; i < sentenceTerms.size(); i++) {
      Term thisTerm=sentenceTerms.get(i);
      if (entityToSpanSize.get(thisTerm.getId()) != null) {
        int neSpanSize=entityToSpanSize.get(thisTerm.getId());
        String neClass=entityToType.get(thisTerm.getId());
        String neType=convertToConLLTypes(neClass);
        if (neSpanSize > 1) {
          for (int j=0; j < neSpanSize; j++) {
            thisTerm=sentenceTerms.get(i + j);
            sb.append(thisTerm.getForm());
            sb.append(""String_Node_Str"");
            sb.append(thisTerm.getLemma());
            sb.append(""String_Node_Str"");
            sb.append(thisTerm.getMorphofeat());
            sb.append(""String_Node_Str"");
            if (j == 0 || previousIsEntity) {
              sb.append(BIO.BEGIN.toString());
            }
 else {
              sb.append(BIO.IN.toString());
            }
            sb.append(neType);
            sb.append(""String_Node_Str"");
          }
        }
 else {
          sb.append(thisTerm.getForm());
          sb.append(""String_Node_Str"");
          sb.append(thisTerm.getLemma());
          sb.append(""String_Node_Str"");
          sb.append(thisTerm.getMorphofeat());
          sb.append(""String_Node_Str"");
          sb.append(BIO.BEGIN.toString());
          sb.append(neType);
          sb.append(""String_Node_Str"");
        }
        previousIsEntity=true;
        i+=neSpanSize - 1;
      }
 else {
        sb.append(thisTerm.getForm());
        sb.append(""String_Node_Str"");
        sb.append(thisTerm.getLemma());
        sb.append(""String_Node_Str"");
        sb.append(thisTerm.getMorphofeat());
        sb.append(""String_Node_Str"");
        sb.append(BIO.OUT);
        sb.append(""String_Node_Str"");
        previousIsEntity=false;
      }
    }
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","/** 
 * Output Conll2002 format.
 * @param kaf the kaf document
 * @return the annotated named entities in conll03 format
 */
public String annotateNEsToCoNLL2002(KAFDocument kaf){
  List<Entity> namedEntityList=kaf.getEntities();
  Map<String,Integer> entityToSpanSize=new HashMap<String,Integer>();
  Map<String,String> entityToType=new HashMap<String,String>();
  for (  Entity ne : namedEntityList) {
    List<ixa.kaflib.Span<Term>> entitySpanList=ne.getSpans();
    for (    ixa.kaflib.Span<Term> spanTerm : entitySpanList) {
      Term neTerm=spanTerm.getFirstTarget();
      entityToSpanSize.put(neTerm.getId(),spanTerm.size());
      entityToType.put(neTerm.getId(),ne.getType());
    }
  }
  List<List<WF>> sentences=kaf.getSentences();
  StringBuilder sb=new StringBuilder();
  for (  List<WF> sentence : sentences) {
    int sentNumber=sentence.get(0).getSent();
    List<Term> sentenceTerms=kaf.getSentenceTerms(sentNumber);
    for (int i=0; i < sentenceTerms.size(); i++) {
      Term thisTerm=sentenceTerms.get(i);
      if (entityToSpanSize.get(thisTerm.getId()) != null) {
        int neSpanSize=entityToSpanSize.get(thisTerm.getId());
        String neClass=entityToType.get(thisTerm.getId());
        String neType=convertToConLLTypes(neClass);
        if (neSpanSize > 1) {
          for (int j=0; j < neSpanSize; j++) {
            thisTerm=sentenceTerms.get(i + j);
            sb.append(thisTerm.getForm());
            sb.append(""String_Node_Str"");
            sb.append(thisTerm.getLemma());
            sb.append(""String_Node_Str"");
            sb.append(thisTerm.getMorphofeat());
            sb.append(""String_Node_Str"");
            if (j == 0) {
              sb.append(BIO.BEGIN.toString());
            }
 else {
              sb.append(BIO.IN.toString());
            }
            sb.append(neType);
            sb.append(""String_Node_Str"");
          }
        }
 else {
          sb.append(thisTerm.getForm());
          sb.append(""String_Node_Str"");
          sb.append(thisTerm.getLemma());
          sb.append(""String_Node_Str"");
          sb.append(thisTerm.getMorphofeat());
          sb.append(""String_Node_Str"");
          sb.append(BIO.BEGIN.toString());
          sb.append(neType);
          sb.append(""String_Node_Str"");
        }
        i+=neSpanSize - 1;
      }
 else {
        sb.append(thisTerm.getForm());
        sb.append(""String_Node_Str"");
        sb.append(thisTerm.getLemma());
        sb.append(""String_Node_Str"");
        sb.append(thisTerm.getMorphofeat());
        sb.append(""String_Node_Str"");
        sb.append(BIO.OUT);
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}"
53375,"/** 
 * Create the available parameters for NER tagging.
 */
private void loadAnnotateParameters(){
  annotateParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(true).help(""String_Node_Str"");
  annotateParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(false).choices(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").help(""String_Node_Str"");
  annotateParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(false).choices(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setDefault(Flags.DEFAULT_OUTPUT_FORMAT).help(""String_Node_Str"");
  annotateParser.addArgument(""String_Node_Str"").choices(""String_Node_Str"").setDefault(Flags.DEFAULT_LEXER).required(false).help(""String_Node_Str"");
  annotateParser.addArgument(""String_Node_Str"").setDefault(Flags.DEFAULT_DICT_OPTION).help(""String_Node_Str"");
  annotateParser.addArgument(""String_Node_Str"").required(false).choices(""String_Node_Str"",""String_Node_Str"").setDefault(Flags.DEFAULT_DICT_OPTION).help(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  annotateParser.addArgument(""String_Node_Str"").required(false).setDefault(Flags.DEFAULT_DICT_PATH).help(""String_Node_Str"" + ""String_Node_Str"");
}","/** 
 * Create the available parameters for NER tagging.
 */
private void loadAnnotateParameters(){
  annotateParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(true).help(""String_Node_Str"");
  annotateParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(false).choices(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").help(""String_Node_Str"");
  annotateParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(false).choices(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setDefault(Flags.DEFAULT_OUTPUT_FORMAT).help(""String_Node_Str"");
  annotateParser.addArgument(""String_Node_Str"").choices(""String_Node_Str"").setDefault(Flags.DEFAULT_LEXER).required(false).help(""String_Node_Str"");
  annotateParser.addArgument(""String_Node_Str"").required(false).choices(""String_Node_Str"",""String_Node_Str"").setDefault(Flags.DEFAULT_DICT_OPTION).help(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  annotateParser.addArgument(""String_Node_Str"").required(false).setDefault(Flags.DEFAULT_DICT_PATH).help(""String_Node_Str"" + ""String_Node_Str"");
}"
53376,"/** 
 * Create the parameters available for evaluation.
 */
private void loadEvalParameters(){
  evalParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(true).choices(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").help(""String_Node_Str"");
  evalParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(false).setDefault(Flags.DEFAULT_EVALUATE_MODEL).help(""String_Node_Str"");
  evalParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(true).help(""String_Node_Str"");
  evalParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(false).choices(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setDefault(Flags.DEFAULT_EVAL_FORMAT).help(""String_Node_Str"");
  evalParser.addArgument(""String_Node_Str"").required(false).help(""String_Node_Str"");
  evalParser.addArgument(""String_Node_Str"").required(false).choices(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").help(""String_Node_Str"");
  evalParser.addArgument(""String_Node_Str"").required(false).setDefault(Flags.DEFAULT_NE_TYPES).help(""String_Node_Str"" + ""String_Node_Str"");
}","/** 
 * Create the parameters available for evaluation.
 */
private void loadEvalParameters(){
  evalParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(true).choices(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").help(""String_Node_Str"");
  evalParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(false).setDefault(Flags.DEFAULT_EVALUATE_MODEL).help(""String_Node_Str"");
  evalParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(true).help(""String_Node_Str"");
  evalParser.addArgument(""String_Node_Str"",""String_Node_Str"").required(false).choices(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setDefault(Flags.DEFAULT_EVAL_FORMAT).help(""String_Node_Str"");
  evalParser.addArgument(""String_Node_Str"").required(false).choices(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").help(""String_Node_Str"");
  evalParser.addArgument(""String_Node_Str"").required(false).setDefault(Flags.DEFAULT_NE_TYPES).help(""String_Node_Str"" + ""String_Node_Str"");
}"
53377,"/** 
 * Main method to do Named Entity tagging.
 * @param inputStream the input stream containing the content to tag
 * @param outputStream the output stream providing the named entities
 * @throws IOException exception if problems in input or output streams
 */
public final void annotate(final InputStream inputStream,final OutputStream outputStream) throws IOException, JDOMException {
  BufferedReader breader=new BufferedReader(new InputStreamReader(inputStream,""String_Node_Str""));
  BufferedWriter bwriter=new BufferedWriter(new OutputStreamWriter(outputStream,""String_Node_Str""));
  KAFDocument kaf=KAFDocument.createFromStream(breader);
  String model=parsedArguments.getString(""String_Node_Str"");
  String outputFormat=parsedArguments.getString(""String_Node_Str"");
  String lexer=parsedArguments.getString(""String_Node_Str"");
  String oepc=parsedArguments.getString(""String_Node_Str"");
  String dictTag=parsedArguments.getString(""String_Node_Str"");
  String dictPath=parsedArguments.getString(""String_Node_Str"");
  String lang=null;
  if (parsedArguments.getString(""String_Node_Str"") != null) {
    lang=parsedArguments.getString(""String_Node_Str"");
    if (!kaf.getLang().equalsIgnoreCase(lang)) {
      System.err.println(""String_Node_Str"");
      System.exit(1);
    }
  }
 else {
    lang=kaf.getLang();
  }
  Properties properties=setAnnotateProperties(model,lang,lexer,oepc,dictTag,dictPath);
  KAFDocument.LinguisticProcessor newLp=kaf.addLinguisticProcessor(""String_Node_Str"",""String_Node_Str"" + Files.getNameWithoutExtension(model),version + ""String_Node_Str"" + commit);
  newLp.setBeginTimestamp();
  Annotate annotator=new Annotate(properties);
  annotator.annotateNEs(kaf);
  newLp.setEndTimestamp();
  String kafToString=null;
  if (outputFormat.equalsIgnoreCase(""String_Node_Str"")) {
    kafToString=annotator.annotateNEsToCoNLL2003(kaf);
  }
 else   if (outputFormat.equalsIgnoreCase(""String_Node_Str"")) {
    kafToString=annotator.annotateNEsToCoNLL2002(kaf);
  }
 else   if (outputFormat.equalsIgnoreCase(""String_Node_Str"")) {
    kafToString=annotator.annotateNEsToOpenNLP(kaf);
  }
 else {
    kafToString=annotator.annotateNEsToKAF(kaf);
  }
  bwriter.write(kafToString);
  bwriter.close();
  breader.close();
}","/** 
 * Main method to do Named Entity tagging.
 * @param inputStream the input stream containing the content to tag
 * @param outputStream the output stream providing the named entities
 * @throws IOException exception if problems in input or output streams
 */
public final void annotate(final InputStream inputStream,final OutputStream outputStream) throws IOException, JDOMException {
  BufferedReader breader=new BufferedReader(new InputStreamReader(inputStream,""String_Node_Str""));
  BufferedWriter bwriter=new BufferedWriter(new OutputStreamWriter(outputStream,""String_Node_Str""));
  KAFDocument kaf=KAFDocument.createFromStream(breader);
  String model=parsedArguments.getString(""String_Node_Str"");
  String outputFormat=parsedArguments.getString(""String_Node_Str"");
  String lexer=parsedArguments.getString(""String_Node_Str"");
  String dictTag=parsedArguments.getString(""String_Node_Str"");
  String dictPath=parsedArguments.getString(""String_Node_Str"");
  String lang=null;
  if (parsedArguments.getString(""String_Node_Str"") != null) {
    lang=parsedArguments.getString(""String_Node_Str"");
    if (!kaf.getLang().equalsIgnoreCase(lang)) {
      System.err.println(""String_Node_Str"");
      System.exit(1);
    }
  }
 else {
    lang=kaf.getLang();
  }
  Properties properties=setAnnotateProperties(model,lang,lexer,dictTag,dictPath);
  KAFDocument.LinguisticProcessor newLp=kaf.addLinguisticProcessor(""String_Node_Str"",""String_Node_Str"" + Files.getNameWithoutExtension(model),version + ""String_Node_Str"" + commit);
  newLp.setBeginTimestamp();
  Annotate annotator=new Annotate(properties);
  annotator.annotateNEs(kaf);
  newLp.setEndTimestamp();
  String kafToString=null;
  if (outputFormat.equalsIgnoreCase(""String_Node_Str"")) {
    kafToString=annotator.annotateNEsToCoNLL2003(kaf);
  }
 else   if (outputFormat.equalsIgnoreCase(""String_Node_Str"")) {
    kafToString=annotator.annotateNEsToCoNLL2002(kaf);
  }
 else   if (outputFormat.equalsIgnoreCase(""String_Node_Str"")) {
    kafToString=annotator.annotateNEsToOpenNLP(kaf);
  }
 else {
    kafToString=annotator.annotateNEsToKAF(kaf);
  }
  bwriter.write(kafToString);
  bwriter.close();
  breader.close();
}"
53378,"/** 
 * Main evaluation entry point.
 * @throws IOException throws exception if test set not available
 */
public final void eval() throws IOException {
  String lang=parsedArguments.getString(""String_Node_Str"");
  String model=parsedArguments.getString(""String_Node_Str"");
  String testset=parsedArguments.getString(""String_Node_Str"");
  String corpusFormat=parsedArguments.getString(""String_Node_Str"");
  String netypes=parsedArguments.getString(""String_Node_Str"");
  Properties props=setEvalProperties(lang,model,testset,corpusFormat,netypes);
  if (parsedArguments.getString(""String_Node_Str"") == null) {
    Evaluate evaluator=new Evaluate(props);
    if (parsedArguments.getString(""String_Node_Str"") != null) {
      if (parsedArguments.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
        evaluator.evaluate();
      }
 else       if (parsedArguments.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
        evaluator.evalError();
      }
 else       if (parsedArguments.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
        evaluator.detailEvaluate();
      }
    }
 else {
      evaluator.detailEvaluate();
    }
  }
 else   if (parsedArguments.getString(""String_Node_Str"") != null) {
    String predFile=parsedArguments.getString(""String_Node_Str"");
    CorpusEvaluate corpusEvaluator=new CorpusEvaluate(predFile,props);
    corpusEvaluator.evaluate();
  }
 else {
    System.err.println(""String_Node_Str"");
  }
}","/** 
 * Main evaluation entry point.
 * @throws IOException throws exception if test set not available
 */
public final void eval() throws IOException {
  String lang=parsedArguments.getString(""String_Node_Str"");
  String model=parsedArguments.getString(""String_Node_Str"");
  String testset=parsedArguments.getString(""String_Node_Str"");
  String corpusFormat=parsedArguments.getString(""String_Node_Str"");
  String netypes=parsedArguments.getString(""String_Node_Str"");
  Properties props=setEvalProperties(lang,model,testset,corpusFormat,netypes);
  Evaluate evaluator=new Evaluate(props);
  if (parsedArguments.getString(""String_Node_Str"") != null) {
    if (parsedArguments.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      evaluator.evaluate();
    }
 else     if (parsedArguments.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      evaluator.evalError();
    }
 else     if (parsedArguments.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      evaluator.detailEvaluate();
    }
  }
 else {
    evaluator.detailEvaluate();
  }
}"
53379,"/** 
 * Set a Properties object with the CLI parameters for annotation.
 * @param model the model parameter
 * @param language language parameter
 * @param lexer rule based parameter
 * @param dictTag directly tag from a dictionary
 * @param dictPath directory to the dictionaries
 * @return the properties object
 */
private Properties setAnnotateProperties(String model,String language,String lexer,String oepc,String dictTag,String dictPath){
  Properties annotateProperties=new Properties();
  annotateProperties.setProperty(""String_Node_Str"",model);
  annotateProperties.setProperty(""String_Node_Str"",language);
  annotateProperties.setProperty(""String_Node_Str"",lexer);
  annotateProperties.setProperty(""String_Node_Str"",oepc);
  annotateProperties.setProperty(""String_Node_Str"",dictTag);
  annotateProperties.setProperty(""String_Node_Str"",dictPath);
  return annotateProperties;
}","/** 
 * Set a Properties object with the CLI parameters for annotation.
 * @param model the model parameter
 * @param language language parameter
 * @param lexer rule based parameter
 * @param dictTag directly tag from a dictionary
 * @param dictPath directory to the dictionaries
 * @return the properties object
 */
private Properties setAnnotateProperties(String model,String language,String lexer,String dictTag,String dictPath){
  Properties annotateProperties=new Properties();
  annotateProperties.setProperty(""String_Node_Str"",model);
  annotateProperties.setProperty(""String_Node_Str"",language);
  annotateProperties.setProperty(""String_Node_Str"",lexer);
  annotateProperties.setProperty(""String_Node_Str"",dictTag);
  annotateProperties.setProperty(""String_Node_Str"",dictPath);
  return annotateProperties;
}"
53380,"/** 
 * Output Conll2003 format.
 * @param kaf the kaf document
 * @return the annotated named entities in conll03 format
 */
public String annotateNEsToCoNLL2003(KAFDocument kaf){
  List<Entity> namedEntityList=kaf.getEntities();
  Map<String,Integer> entityToSpanSize=new HashMap<String,Integer>();
  Map<String,String> entityToType=new HashMap<String,String>();
  for (  Entity ne : namedEntityList) {
    List<ixa.kaflib.Span<Term>> entitySpanList=ne.getSpans();
    for (    ixa.kaflib.Span<Term> spanTerm : entitySpanList) {
      Term neTerm=spanTerm.getFirstTarget();
      entityToSpanSize.put(neTerm.getId(),spanTerm.size());
      entityToType.put(neTerm.getId(),ne.getType());
    }
  }
  List<List<WF>> sentences=kaf.getSentences();
  StringBuilder sb=new StringBuilder();
  for (  List<WF> sentence : sentences) {
    int sentNumber=sentence.get(0).getSent();
    List<Term> sentenceTerms=kaf.getSentenceTerms(sentNumber);
    boolean previousIsEntity=false;
    for (int i=0; i < sentenceTerms.size(); i++) {
      Term thisTerm=sentenceTerms.get(i);
      if (entityToSpanSize.get(thisTerm.getId()) != null) {
        int neSpanSize=entityToSpanSize.get(thisTerm.getId());
        String neClass=entityToType.get(thisTerm.getId());
        String neType=this.convertToConLLTypes(neClass);
        if (neSpanSize > 1) {
          for (int j=0; j < neSpanSize; j++) {
            thisTerm=sentenceTerms.get(i + j);
            sb.append(thisTerm.getForm());
            sb.append(""String_Node_Str"");
            sb.append(thisTerm.getLemma());
            sb.append(""String_Node_Str"");
            sb.append(thisTerm.getMorphofeat());
            sb.append(""String_Node_Str"");
            if (j == 0 && previousIsEntity) {
              sb.append(BIO.BEGIN.toString());
            }
 else {
              sb.append(BIO.IN.toString());
            }
            sb.append(neType);
            sb.append(""String_Node_Str"");
          }
        }
 else {
          sb.append(thisTerm.getForm());
          sb.append(""String_Node_Str"");
          sb.append(thisTerm.getLemma());
          sb.append(""String_Node_Str"");
          sb.append(thisTerm.getMorphofeat());
          sb.append(""String_Node_Str"");
          if (previousIsEntity) {
            sb.append(BIO.BEGIN.toString());
          }
 else {
            sb.append(BIO.IN.toString());
          }
          sb.append(neType);
          sb.append(""String_Node_Str"");
        }
        previousIsEntity=true;
        i+=neSpanSize - 1;
      }
 else {
        sb.append(thisTerm.getForm());
        sb.append(""String_Node_Str"");
        sb.append(thisTerm.getLemma());
        sb.append(""String_Node_Str"");
        sb.append(thisTerm.getMorphofeat());
        sb.append(""String_Node_Str"");
        sb.append(BIO.OUT);
        sb.append(""String_Node_Str"");
        previousIsEntity=false;
      }
    }
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","/** 
 * Output Conll2003 format.
 * @param kaf the kaf document
 * @return the annotated named entities in conll03 format
 */
public String annotateNEsToCoNLL2003(KAFDocument kaf){
  List<Entity> namedEntityList=kaf.getEntities();
  Map<String,Integer> entityToSpanSize=new HashMap<String,Integer>();
  Map<String,String> entityToType=new HashMap<String,String>();
  for (  Entity ne : namedEntityList) {
    List<ixa.kaflib.Span<Term>> entitySpanList=ne.getSpans();
    for (    ixa.kaflib.Span<Term> spanTerm : entitySpanList) {
      Term neTerm=spanTerm.getFirstTarget();
      entityToSpanSize.put(neTerm.getId(),spanTerm.size());
      entityToType.put(neTerm.getId(),ne.getType());
    }
  }
  List<List<WF>> sentences=kaf.getSentences();
  StringBuilder sb=new StringBuilder();
  for (  List<WF> sentence : sentences) {
    int sentNumber=sentence.get(0).getSent();
    List<Term> sentenceTerms=kaf.getSentenceTerms(sentNumber);
    boolean previousIsEntity=false;
    String previousType=null;
    for (int i=0; i < sentenceTerms.size(); i++) {
      Term thisTerm=sentenceTerms.get(i);
      if (entityToSpanSize.get(thisTerm.getId()) != null) {
        int neSpanSize=entityToSpanSize.get(thisTerm.getId());
        String neClass=entityToType.get(thisTerm.getId());
        String neType=this.convertToConLLTypes(neClass);
        if (neSpanSize > 1) {
          for (int j=0; j < neSpanSize; j++) {
            thisTerm=sentenceTerms.get(i + j);
            sb.append(thisTerm.getForm());
            sb.append(""String_Node_Str"");
            sb.append(thisTerm.getLemma());
            sb.append(""String_Node_Str"");
            sb.append(thisTerm.getMorphofeat());
            sb.append(""String_Node_Str"");
            if (j == 0 && previousIsEntity && previousType.equalsIgnoreCase(neType)) {
              sb.append(BIO.BEGIN.toString());
            }
 else {
              sb.append(BIO.IN.toString());
            }
            sb.append(neType);
            sb.append(""String_Node_Str"");
          }
          previousType=neType;
        }
 else {
          sb.append(thisTerm.getForm());
          sb.append(""String_Node_Str"");
          sb.append(thisTerm.getLemma());
          sb.append(""String_Node_Str"");
          sb.append(thisTerm.getMorphofeat());
          sb.append(""String_Node_Str"");
          if (previousIsEntity && previousType.equalsIgnoreCase(neType)) {
            sb.append(BIO.BEGIN.toString());
          }
 else {
            sb.append(BIO.IN.toString());
          }
          sb.append(neType);
          sb.append(""String_Node_Str"");
        }
        previousIsEntity=true;
        previousType=neType;
        i+=neSpanSize - 1;
      }
 else {
        sb.append(thisTerm.getForm());
        sb.append(""String_Node_Str"");
        sb.append(thisTerm.getLemma());
        sb.append(""String_Node_Str"");
        sb.append(thisTerm.getMorphofeat());
        sb.append(""String_Node_Str"");
        sb.append(BIO.OUT);
        sb.append(""String_Node_Str"");
        previousIsEntity=false;
        previousType=BIO.OUT.toString();
      }
    }
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}"
53381,"/** 
 * Convert Entity class annotation to CoNLL formats.
 * @param neType named entity class
 * @return the converted string
 */
public String convertToConLLTypes(String neType){
  String conllType=null;
  if (neType.equalsIgnoreCase(""String_Node_Str"") || neType.equalsIgnoreCase(""String_Node_Str"") || neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")) {
    conllType=neType.substring(0,3);
  }
 else   if (neType.equalsIgnoreCase(""String_Node_Str"") || neType.equalsIgnoreCase(""String_Node_Str"") || neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")) {
    conllType=neType;
  }
  return conllType;
}","/** 
 * Convert Entity class annotation to CoNLL formats.
 * @param neType named entity class
 * @return the converted string
 */
public String convertToConLLTypes(String neType){
  String conllType=null;
  if (neType.equalsIgnoreCase(""String_Node_Str"") || neType.equalsIgnoreCase(""String_Node_Str"") || neType.equalsIgnoreCase(""String_Node_Str"")|| neType.length() == 3) {
    conllType=neType.substring(0,3);
  }
 else   if (neType.equalsIgnoreCase(""String_Node_Str"") || neType.equalsIgnoreCase(""String_Node_Str"") || neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")|| neType.equalsIgnoreCase(""String_Node_Str"")) {
    conllType=neType;
  }
  return conllType;
}"
53382,"/** 
 * Classify Named Entities creating the entities layer in the  {@link KAFDocument} using statistical models, post-processing and/ordictionaries only.
 * @param kaf the kaf document to be used for annotation
 * @throws IOException throws exception if problems with the kaf document
 */
public final void annotateNEs(final KAFDocument kaf) throws IOException {
  List<Span> allSpans=null;
  List<List<WF>> sentences=kaf.getSentences();
  for (  List<WF> sentence : sentences) {
    String[] tokens=new String[sentence.size()];
    String[] tokenIds=new String[sentence.size()];
    for (int i=0; i < sentence.size(); i++) {
      tokens[i]=sentence.get(i).getForm();
      tokenIds[i]=sentence.get(i).getId();
    }
    if (statistical) {
      Span[] statSpans=nameFinder.nercToSpans(tokens);
      allSpans=Lists.newArrayList(statSpans);
    }
    if (postProcess) {
      Span[] dictSpans=dictFinder.nercToSpansExact(tokens);
      SpanUtils.postProcessDuplicatedSpans(allSpans,dictSpans);
      SpanUtils.concatenateSpans(allSpans,dictSpans);
    }
    if (dictTag) {
      Span[] dictOnlySpans=dictFinder.nercToSpansExact(tokens);
      allSpans=Lists.newArrayList(dictOnlySpans);
    }
    if (lexerFind) {
      String sentenceText=StringUtils.getStringFromTokens(tokens);
      StringReader stringReader=new StringReader(sentenceText);
      BufferedReader sentenceReader=new BufferedReader(stringReader);
      numericLexerFinder=new NumericNameFinder(sentenceReader,nameFactory);
      Span[] numericSpans=numericLexerFinder.nercToSpans(tokens);
      SpanUtils.concatenateSpans(allSpans,numericSpans);
    }
    Span[] allSpansArray=NameFinderME.dropOverlappingSpans(allSpans.toArray(new Span[allSpans.size()]));
    List<Name> names=new ArrayList<Name>();
    if (statistical) {
      names=nameFinder.getNamesFromSpans(allSpansArray,tokens);
    }
 else {
      names=dictFinder.getNamesFromSpans(allSpansArray,tokens);
    }
    for (    Name name : names) {
      Integer startIndex=name.getSpan().getStart();
      Integer endIndex=name.getSpan().getEnd();
      List<Term> nameTerms=kaf.getTermsFromWFs(Arrays.asList(Arrays.copyOfRange(tokenIds,startIndex,endIndex)));
      ixa.kaflib.Span<Term> neSpan=KAFDocument.newTermSpan(nameTerms);
      List<ixa.kaflib.Span<Term>> references=new ArrayList<ixa.kaflib.Span<Term>>();
      references.add(neSpan);
      Entity neEntity=kaf.newEntity(references);
      neEntity.setType(name.getType());
    }
  }
}","/** 
 * Classify Named Entities creating the entities layer in the  {@link KAFDocument} using statistical models, post-processing and/ordictionaries only.
 * @param kaf the kaf document to be used for annotation
 * @throws IOException throws exception if problems with the kaf document
 */
public final void annotateNEs(final KAFDocument kaf) throws IOException {
  List<Span> allSpans=null;
  List<List<WF>> sentences=kaf.getSentences();
  for (  List<WF> sentence : sentences) {
    String[] tokens=new String[sentence.size()];
    String[] tokenIds=new String[sentence.size()];
    for (int i=0; i < sentence.size(); i++) {
      tokens[i]=sentence.get(i).getForm();
      tokenIds[i]=sentence.get(i).getId();
    }
    if (statistical) {
      Span[] statSpans=nameFinder.nercToSpans(tokens);
      allSpans=Lists.newArrayList(statSpans);
    }
    if (postProcess) {
      Span[] dictSpans=dictFinder.nercToSpansExact(tokens);
      SpanUtils.postProcessDuplicatedSpans(allSpans,dictSpans);
      SpanUtils.concatenateSpans(allSpans,dictSpans);
    }
    if (dictTag) {
      Span[] dictOnlySpans=dictFinder.nercToSpansExact(tokens);
      allSpans=Lists.newArrayList(dictOnlySpans);
    }
    if (lexerFind) {
      String sentenceText=StringUtils.getStringFromTokens(tokens);
      StringReader stringReader=new StringReader(sentenceText);
      BufferedReader sentenceReader=new BufferedReader(stringReader);
      numericLexerFinder=new NumericNameFinder(sentenceReader,nameFactory);
      Span[] numericSpans=numericLexerFinder.nercToSpans(tokens);
      SpanUtils.concatenateSpans(allSpans,numericSpans);
    }
    Span[] allSpansArray=NameFinderME.dropOverlappingSpans(allSpans.toArray(new Span[allSpans.size()]));
    List<Name> names=new ArrayList<Name>();
    if (statistical) {
      names=nameFinder.getNamesFromSpans(allSpansArray,tokens);
    }
 else {
      names=dictFinder.getNamesFromSpans(allSpansArray,tokens);
    }
    for (    Name name : names) {
      Integer startIndex=name.getSpan().getStart();
      Integer endIndex=name.getSpan().getEnd();
      List<Term> nameTerms=kaf.getTermsFromWFs(Arrays.asList(Arrays.copyOfRange(tokenIds,startIndex,endIndex)));
      ixa.kaflib.Span<Term> neSpan=KAFDocument.newTermSpan(nameTerms);
      List<ixa.kaflib.Span<Term>> references=new ArrayList<ixa.kaflib.Span<Term>>();
      references.add(neSpan);
      Entity neEntity=kaf.newEntity(references);
      neEntity.setType(name.getType());
    }
  }
  nameFinder.getNameFinder().clearAdaptiveData();
}"
53383,"/** 
 * Output annotation in OpenNLP format.
 * @param kaf the naf document
 * @return the string containing the annotated document
 */
public final String annotateNEsToOpenNLP(KAFDocument kaf){
  StringBuilder sb=new StringBuilder();
  List<Span> allSpans=null;
  List<List<WF>> sentences=kaf.getSentences();
  for (  List<WF> sentence : sentences) {
    String[] tokens=new String[sentence.size()];
    String[] tokenIds=new String[sentence.size()];
    for (int i=0; i < sentence.size(); i++) {
      tokens[i]=sentence.get(i).getForm();
      tokenIds[i]=sentence.get(i).getId();
    }
    if (statistical) {
      Span[] statSpans=nameFinder.nercToSpans(tokens);
      allSpans=Lists.newArrayList(statSpans);
    }
    if (postProcess) {
      Span[] dictSpans=dictFinder.nercToSpansExact(tokens);
      SpanUtils.postProcessDuplicatedSpans(allSpans,dictSpans);
      SpanUtils.concatenateSpans(allSpans,dictSpans);
    }
    if (dictTag) {
      Span[] dictOnlySpans=dictFinder.nercToSpansExact(tokens);
      allSpans=Lists.newArrayList(dictOnlySpans);
    }
    if (lexerFind) {
      String sentenceText=StringUtils.getStringFromTokens(tokens);
      StringReader stringReader=new StringReader(sentenceText);
      BufferedReader sentenceReader=new BufferedReader(stringReader);
      numericLexerFinder=new NumericNameFinder(sentenceReader,nameFactory);
      Span[] numericSpans=numericLexerFinder.nercToSpans(tokens);
      SpanUtils.concatenateSpans(allSpans,numericSpans);
    }
    Span[] allSpansArray=NameFinderME.dropOverlappingSpans(allSpans.toArray(new Span[allSpans.size()]));
    NameSample nameSample=new NameSample(tokens,allSpansArray,false);
    sb.append(nameSample.toString()).append(""String_Node_Str"");
  }
  return sb.toString();
}","/** 
 * Output annotation in OpenNLP format.
 * @param kaf the naf document
 * @return the string containing the annotated document
 */
public final String annotateNEsToOpenNLP(KAFDocument kaf){
  StringBuilder sb=new StringBuilder();
  List<Span> allSpans=null;
  List<List<WF>> sentences=kaf.getSentences();
  for (  List<WF> sentence : sentences) {
    String[] tokens=new String[sentence.size()];
    String[] tokenIds=new String[sentence.size()];
    for (int i=0; i < sentence.size(); i++) {
      tokens[i]=sentence.get(i).getForm();
      tokenIds[i]=sentence.get(i).getId();
    }
    if (statistical) {
      Span[] statSpans=nameFinder.nercToSpans(tokens);
      allSpans=Lists.newArrayList(statSpans);
    }
    if (postProcess) {
      Span[] dictSpans=dictFinder.nercToSpansExact(tokens);
      SpanUtils.postProcessDuplicatedSpans(allSpans,dictSpans);
      SpanUtils.concatenateSpans(allSpans,dictSpans);
    }
    if (dictTag) {
      Span[] dictOnlySpans=dictFinder.nercToSpansExact(tokens);
      allSpans=Lists.newArrayList(dictOnlySpans);
    }
    if (lexerFind) {
      String sentenceText=StringUtils.getStringFromTokens(tokens);
      StringReader stringReader=new StringReader(sentenceText);
      BufferedReader sentenceReader=new BufferedReader(stringReader);
      numericLexerFinder=new NumericNameFinder(sentenceReader,nameFactory);
      Span[] numericSpans=numericLexerFinder.nercToSpans(tokens);
      SpanUtils.concatenateSpans(allSpans,numericSpans);
    }
    Span[] allSpansArray=NameFinderME.dropOverlappingSpans(allSpans.toArray(new Span[allSpans.size()]));
    NameSample nameSample=new NameSample(tokens,allSpansArray,true);
    sb.append(nameSample.toString());
  }
  return sb.toString();
}"
53384,"/** 
 * This method receives as input an array of tokenized text and calls the NameFinderME.find(tokens) to recognize and classify Named Entities. It outputs the spans of the detected and classified Named Entities. From Apache OpenNLP documentation: ""After every document clearAdaptiveData must be called to clear the adaptive data in the feature generators. Not calling clearAdaptiveData can lead to a sharp drop in the detection rate after a few documents.""
 * @param tokens an array of tokenized text
 * @return an list of {@link Span}s of Named Entities
 */
public final Span[] nercToSpans(final String[] tokens){
  Span[] annotatedText=nameFinder.find(tokens);
  clearAdaptiveData();
  List<Span> probSpans=new ArrayList<Span>(Arrays.asList(annotatedText));
  return probSpans.toArray(new Span[probSpans.size()]);
}","/** 
 * This method receives as input an array of tokenized text and calls the NameFinderME.find(tokens) to recognize and classify Named Entities. It outputs the spans of the detected and classified Named Entities. From Apache OpenNLP documentation: ""After every document clearAdaptiveData must be called to clear the adaptive data in the feature generators. Not calling clearAdaptiveData can lead to a sharp drop in the detection rate after a few documents.""
 * @param tokens an array of tokenized text
 * @return an list of {@link Span}s of Named Entities
 */
public final Span[] nercToSpans(final String[] tokens){
  Span[] annotatedText=nameFinder.find(tokens);
  List<Span> probSpans=new ArrayList<Span>(Arrays.asList(annotatedText));
  return probSpans.toArray(new Span[probSpans.size()]);
}"
53385,"/** 
 * Getting the stream with the right corpus format.
 * @param inputData the input data
 * @param aLang the language
 * @param aCorpusFormat the corpus format
 * @return the stream from the several corpus formats
 * @throws IOException the io exception
 */
public static ObjectStream<NameSample> getNameStream(final String inputData,final String aLang,final String aCorpusFormat) throws IOException {
  ObjectStream<NameSample> samples=null;
  if (aCorpusFormat.equalsIgnoreCase(""String_Node_Str"")) {
    ObjectStream<String> nameStream=InputOutputUtils.readInputData(inputData);
    if (aLang.equalsIgnoreCase(""String_Node_Str"")) {
      samples=new Conll03NameSampleStream(Conll03NameSampleStream.LANGUAGE.EN,nameStream,types);
    }
 else     if (aLang.equalsIgnoreCase(""String_Node_Str"")) {
      samples=new Conll03NameSampleStream(Conll03NameSampleStream.LANGUAGE.DE,nameStream,types);
    }
  }
 else   if (aCorpusFormat.equalsIgnoreCase(""String_Node_Str"")) {
    ObjectStream<String> nameStream=InputOutputUtils.readInputData(inputData);
    if (aLang.equalsIgnoreCase(""String_Node_Str"")) {
      samples=new Conll02NameSampleStream(Conll02NameSampleStream.LANGUAGE.ES,nameStream,types);
    }
 else     if (aLang.equalsIgnoreCase(""String_Node_Str"")) {
      samples=new Conll02NameSampleStream(Conll02NameSampleStream.LANGUAGE.NL,nameStream,types);
    }
  }
 else   if (aLang.equalsIgnoreCase(""String_Node_Str"")) {
    ObjectStream<String> nameStream=InputOutputUtils.readInputData(inputData);
    samples=new EvalitaNameSampleStream(EvalitaNameSampleStream.LANGUAGE.IT,nameStream,types);
  }
 else   if (aCorpusFormat.equalsIgnoreCase(""String_Node_Str"")) {
    ObjectStream<String> nameStream=InputOutputUtils.readInputData(inputData);
    samples=new GermEval2014OuterNameStream(nameStream);
  }
 else   if (aCorpusFormat.equalsIgnoreCase(""String_Node_Str"")) {
    ObjectStream<String> nameStream=InputOutputUtils.readInputData(inputData);
    samples=new GermEval2014InnerNameStream(nameStream);
  }
 else   if (aCorpusFormat.equalsIgnoreCase(""String_Node_Str"")) {
    ObjectStream<String> nameStream=InputOutputUtils.readInputData(inputData);
    samples=new NameSampleDataStream(nameStream);
  }
 else {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  return samples;
}","/** 
 * Getting the stream with the right corpus format.
 * @param inputData the input data
 * @param aLang the language
 * @param aCorpusFormat the corpus format
 * @return the stream from the several corpus formats
 * @throws IOException the io exception
 */
public static ObjectStream<NameSample> getNameStream(final String inputData,final String aLang,final String aCorpusFormat) throws IOException {
  ObjectStream<NameSample> samples=null;
  if (aCorpusFormat.equalsIgnoreCase(""String_Node_Str"")) {
    ObjectStream<String> nameStream=InputOutputUtils.readInputData(inputData);
    if (aLang.equalsIgnoreCase(""String_Node_Str"")) {
      samples=new Conll03NameSampleStream(Conll03NameSampleStream.LANGUAGE.EN,nameStream,types);
    }
 else     if (aLang.equalsIgnoreCase(""String_Node_Str"")) {
      samples=new Conll03NameSampleStream(Conll03NameSampleStream.LANGUAGE.DE,nameStream,types);
    }
  }
 else   if (aCorpusFormat.equalsIgnoreCase(""String_Node_Str"")) {
    ObjectStream<String> nameStream=InputOutputUtils.readInputData(inputData);
    if (aLang.equalsIgnoreCase(""String_Node_Str"")) {
      samples=new Conll02NameSampleStream(Conll02NameSampleStream.LANGUAGE.ES,nameStream,types);
    }
 else     if (aLang.equalsIgnoreCase(""String_Node_Str"")) {
      samples=new Conll02NameSampleStream(Conll02NameSampleStream.LANGUAGE.NL,nameStream,types);
    }
  }
 else   if (aCorpusFormat.equalsIgnoreCase(""String_Node_Str"")) {
    ObjectStream<String> nameStream=InputOutputUtils.readInputData(inputData);
    samples=new EvalitaNameSampleStream(EvalitaNameSampleStream.LANGUAGE.IT,nameStream,types);
  }
 else   if (aCorpusFormat.equalsIgnoreCase(""String_Node_Str"")) {
    ObjectStream<String> nameStream=InputOutputUtils.readInputData(inputData);
    samples=new GermEval2014OuterNameStream(nameStream);
  }
 else   if (aCorpusFormat.equalsIgnoreCase(""String_Node_Str"")) {
    ObjectStream<String> nameStream=InputOutputUtils.readInputData(inputData);
    samples=new GermEval2014InnerNameStream(nameStream);
  }
 else   if (aCorpusFormat.equalsIgnoreCase(""String_Node_Str"")) {
    ObjectStream<String> nameStream=InputOutputUtils.readInputData(inputData);
    samples=new NameSampleDataStream(nameStream);
  }
 else {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  return samples;
}"
53386,"/** 
 * Main method to do Named Entity tagging.
 * @param inputStream the input stream containing the content to tag
 * @param outputStream the output stream providing the named entities
 * @throws IOException exception if problems in input or output streams
 */
public final void annotate(final InputStream inputStream,final OutputStream outputStream) throws IOException, JDOMException {
  BufferedReader breader=new BufferedReader(new InputStreamReader(inputStream,""String_Node_Str""));
  BufferedWriter bwriter=new BufferedWriter(new OutputStreamWriter(outputStream,""String_Node_Str""));
  KAFDocument kaf=KAFDocument.createFromStream(breader);
  String paramFile=parsedArguments.getString(""String_Node_Str"");
  TrainingParameters params=InputOutputUtils.loadTrainingParameters(paramFile);
  String lang=null;
  if (params.getSettings().get(""String_Node_Str"") != null) {
    lang=params.getSettings().get(""String_Node_Str"");
    if (!kaf.getLang().equalsIgnoreCase(lang)) {
      System.err.println(""String_Node_Str"");
      System.exit(1);
    }
  }
 else {
    params.getSettings().put(""String_Node_Str"",kaf.getLang());
  }
  String lexer=parsedArguments.getString(""String_Node_Str"");
  KAFDocument.LinguisticProcessor newLp=kaf.addLinguisticProcessor(""String_Node_Str"",""String_Node_Str"" + lang + ""String_Node_Str""+ paramFile,version);
  newLp.setBeginTimestamp();
  Properties properties=setAnnotateProperties(lexer);
  Annotate annotator=new Annotate(properties,params);
  annotator.annotateNEs(kaf);
  String outputFormatOption=InputOutputUtils.getOutputFormat(params);
  String kafToString=null;
  if (outputFormatOption.equalsIgnoreCase(""String_Node_Str"")) {
    kafToString=annotator.annotateNEsToCoNLL2003(kaf);
  }
 else   if (outputFormatOption.equalsIgnoreCase(""String_Node_Str"")) {
    kafToString=annotator.annotateNEsToCoNLL2002(kaf);
  }
 else {
    kafToString=annotator.annotateNEsToKAF(kaf);
  }
  newLp.setEndTimestamp();
  bwriter.write(kafToString);
  bwriter.close();
  breader.close();
}","/** 
 * Main method to do Named Entity tagging.
 * @param inputStream the input stream containing the content to tag
 * @param outputStream the output stream providing the named entities
 * @throws IOException exception if problems in input or output streams
 */
public final void annotate(final InputStream inputStream,final OutputStream outputStream) throws IOException, JDOMException {
  BufferedReader breader=new BufferedReader(new InputStreamReader(inputStream,""String_Node_Str""));
  BufferedWriter bwriter=new BufferedWriter(new OutputStreamWriter(outputStream,""String_Node_Str""));
  KAFDocument kaf=KAFDocument.createFromStream(breader);
  String paramFile=parsedArguments.getString(""String_Node_Str"");
  TrainingParameters params=InputOutputUtils.loadTrainingParameters(paramFile);
  String lang=null;
  if (params.getSettings().get(""String_Node_Str"") != null) {
    lang=params.getSettings().get(""String_Node_Str"");
    if (!kaf.getLang().equalsIgnoreCase(lang)) {
      System.err.println(""String_Node_Str"");
      System.exit(1);
    }
  }
 else {
    params.getSettings().put(""String_Node_Str"",kaf.getLang());
  }
  String lexer=parsedArguments.getString(""String_Node_Str"");
  KAFDocument.LinguisticProcessor newLp=kaf.addLinguisticProcessor(""String_Node_Str"",""String_Node_Str"" + lang + ""String_Node_Str""+ paramFile,version);
  newLp.setBeginTimestamp();
  Properties properties=setAnnotateProperties(lexer);
  Annotate annotator=new Annotate(properties,params);
  annotator.annotateNEs(kaf);
  newLp.setEndTimestamp();
  String outputFormatOption=InputOutputUtils.getOutputFormat(params);
  String kafToString=null;
  if (outputFormatOption.equalsIgnoreCase(""String_Node_Str"")) {
    kafToString=annotator.annotateNEsToCoNLL2003(kaf);
  }
 else   if (outputFormatOption.equalsIgnoreCase(""String_Node_Str"")) {
    kafToString=annotator.annotateNEsToCoNLL2002(kaf);
  }
 else {
    kafToString=annotator.annotateNEsToKAF(kaf);
  }
  bwriter.write(kafToString);
  bwriter.close();
  breader.close();
}"
53387,"/** 
 * Adds the dictionary features of the curren token in a given window.
 * @param leftWindow the left window
 * @param rightWindow the right window
 * @param featureList the feature list
 */
private static void addDictionaryFeatures(int leftWindow,int rightWindow,final List<AdaptiveFeatureGenerator> featureList){
  for (int i=0; i < dictionaries.getIgnoreCaseDictionaries().size(); i++) {
    prefix=dictionaries.getDictNames().get(i);
    dictionary=dictionaries.getIgnoreCaseDictionaries().get(i);
    featureList.add(new WindowFeatureGenerator(leftWindow,rightWindow,new DictionaryFeatureGenerator(prefix,dictionary)));
  }
}","/** 
 * Adds the dictionary features of the curren token in a given window.
 * @param leftWindow the left window
 * @param rightWindow the right window
 * @param featureList the feature list
 */
private static void addDictionaryFeatures(final List<AdaptiveFeatureGenerator> featureList){
  for (int i=0; i < dictionaries.getIgnoreCaseDictionaries().size(); i++) {
    prefix=dictionaries.getDictNames().get(i);
    dictionary=dictionaries.getIgnoreCaseDictionaries().get(i);
    featureList.add(new DictionaryFeatureGenerator(prefix,dictionary));
  }
}"
53388,"/** 
 * Adds the previous outcome for each token as a feature.
 * @param featureList the feature list to which the feature generator is added
 */
public static void addPreviousMapFeatures(int leftWindow,int rightWindow,List<AdaptiveFeatureGenerator> featureList){
  featureList.add(new Prev2MapFeatureGenerator());
  featureList.add(new WindowFeatureGenerator(leftWindow,rightWindow,new PreviousMapTokenFeatureGenerator()));
}","/** 
 * Adds the previous outcome for each token as a feature.
 * @param featureList the feature list to which the feature generator is added
 */
public static void addPreviousMapFeatures(int leftWindow,int rightWindow,List<AdaptiveFeatureGenerator> featureList){
  featureList.add(new PreviousMapFeatureGenerator());
}"
53389,"/** 
 * Adds Brown classes features for each token feature in a given window.
 * @param leftWindow the leftwindow value
 * @param rightWindow the rightwindow value
 * @param featureList the feature list to which the feature generator is added
 */
private static void addBrownFeatures(int leftWindow,int rightWindow,final List<AdaptiveFeatureGenerator> featureList){
  featureList.add(new WindowFeatureGenerator(new BrownTokenFeatureGenerator(brownLexicon),leftWindow,rightWindow));
  featureList.add(new WindowFeatureGenerator(new BrownTokenClassFeatureGenerator(brownLexicon),leftWindow,rightWindow));
  featureList.add(new BrownBigramFeatureGenerator(brownLexicon));
}","/** 
 * Adds Brown classes features for each token feature in a given window.
 * @param leftWindow the leftwindow value
 * @param rightWindow the rightwindow value
 * @param featureList the feature list to which the feature generator is added
 */
private static void addBrownFeatures(final List<AdaptiveFeatureGenerator> featureList){
  featureList.add(new BrownTokenFeatureGenerator(brownLexicon));
  featureList.add(new BrownTokenClassFeatureGenerator(brownLexicon));
  featureList.add(new BrownBigramFeatureGenerator(brownLexicon));
}"
53390,"/** 
 * Add the word2vec cluster class feature of the curren token in a given window.
 * @param leftWindow the left window
 * @param rightWindow the right window
 * @param featureList the feature list
 */
private static void addWord2VecClusterFeatures(int leftWindow,int rightWindow,final List<AdaptiveFeatureGenerator> featureList){
  word2vecClusterLexicon=word2vecCluster.getIgnoreCaseDictionary();
  featureList.add(new WindowFeatureGenerator(leftWindow,rightWindow,new Word2VecClusterFeatureGenerator(word2vecClusterLexicon)));
}","/** 
 * Add the word2vec cluster class feature of the curren token in a given window.
 * @param leftWindow the left window
 * @param rightWindow the right window
 * @param featureList the feature list
 */
private static void addWord2VecClusterFeatures(final List<AdaptiveFeatureGenerator> featureList){
  word2vecClusterLexicon=word2vecCluster.getIgnoreCaseDictionary();
  featureList.add(Word2VecClusterFeatureGenerator(word2vecClusterLexicon));
}"
53391,"/** 
 * Add the Clark cluster class of the current token as a feature in a given window.
 * @param leftWindow the left window
 * @param rightWindow the right window
 * @param featureList the feature list
 */
private static void addClarkFeatures(int leftWindow,int rightWindow,final List<AdaptiveFeatureGenerator> featureList){
  clarkLexicon=clarkCluster.getIgnoreCaseDictionary();
  featureList.add(new WindowFeatureGenerator(leftWindow,rightWindow,new ClarkFeatureGenerator(clarkLexicon)));
}","/** 
 * Add the Clark cluster class of the current token as a feature in a given window.
 * @param leftWindow the left window
 * @param rightWindow the right window
 * @param featureList the feature list
 */
private static void addClarkFeatures(final List<AdaptiveFeatureGenerator> featureList){
  clarkLexicon=clarkCluster.getIgnoreCaseDictionary();
  featureList.add(new ClarkFeatureGenerator(clarkLexicon));
}"
53392,"/** 
 * Creates the list of features to be passed to the createFeatureGenerator(params) method. Every programatic use of ixa-pipe-nerc will need to implement/use a function like this to train a model.
 * @param params the training parameters
 * @return the list of {@code AdaptiveFeatureGenerator}s
 */
private final List<AdaptiveFeatureGenerator> createFeatureList(TrainingParameters params){
  List<AdaptiveFeatureGenerator> featureList=new ArrayList<AdaptiveFeatureGenerator>();
  int leftWindow=getWindowRange(params).get(0);
  int rightWindow=getWindowRange(params).get(1);
  String tokenParam=InputOutputUtils.getTokenFeatures(params);
  if (tokenParam.equalsIgnoreCase(""String_Node_Str"")) {
    addWindowTokenFeatures(leftWindow,rightWindow,featureList);
    System.err.println(""String_Node_Str"" + leftWindow + ""String_Node_Str""+ rightWindow);
  }
  String tokenClassParam=InputOutputUtils.getTokenClassFeatures(params);
  if (tokenClassParam.equalsIgnoreCase(""String_Node_Str"")) {
    addWindowTokenClassFeatures(leftWindow,rightWindow,featureList);
    System.err.println(""String_Node_Str"" + leftWindow + ""String_Node_Str""+ rightWindow);
  }
  String outcomePriorParam=InputOutputUtils.getOutcomePriorFeatures(params);
  if (outcomePriorParam.equalsIgnoreCase(""String_Node_Str"")) {
    addOutcomePriorFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String previousMapParam=InputOutputUtils.getPreviousMapFeatures(params);
  if (previousMapParam.equalsIgnoreCase(""String_Node_Str"")) {
    addPreviousMapFeatures(leftWindow,rightWindow,featureList);
    System.err.println(""String_Node_Str"");
  }
  String sentenceParam=InputOutputUtils.getSentenceFeatures(params);
  if (sentenceParam.equalsIgnoreCase(""String_Node_Str"")) {
    addSentenceFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String preffixParam=InputOutputUtils.getPreffixFeatures(params);
  if (preffixParam.equalsIgnoreCase(""String_Node_Str"")) {
    addPrefixFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String suffixParam=InputOutputUtils.getSuffixFeatures(params);
  if (suffixParam.equalsIgnoreCase(""String_Node_Str"")) {
    addSuffixFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String bigramClassParam=InputOutputUtils.getBigramClassFeatures(params);
  if (bigramClassParam.equalsIgnoreCase(""String_Node_Str"")) {
    addBigramClassFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String trigramClassParam=InputOutputUtils.getTrigramClassFeatures(params);
  if (trigramClassParam.equalsIgnoreCase(""String_Node_Str"")) {
    addTrigramClassFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String fourgramClassParam=InputOutputUtils.getFourgramClassFeatures(params);
  if (fourgramClassParam.equalsIgnoreCase(""String_Node_Str"")) {
    addFourgramClassFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String fivegramClassParam=InputOutputUtils.getFivegramClassFeatures(params);
  if (fivegramClassParam.equalsIgnoreCase(""String_Node_Str"")) {
    addFivegramClassFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String charNgramParam=InputOutputUtils.getCharNgramFeatures(params);
  if (charNgramParam.equalsIgnoreCase(""String_Node_Str"")) {
    int minLength=getNgramRange(params).get(0);
    int maxLength=getNgramRange(params).get(1);
    addCharNgramFeatures(minLength,maxLength,featureList);
    System.err.println(""String_Node_Str"" + minLength + ""String_Node_Str""+ maxLength);
  }
  String dictionaryParam=InputOutputUtils.getDictionaryFeatures(params);
  if (dictionaryParam.equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
    String dictPath=InputOutputUtils.getDictPath(params);
    if (dictionaries == null) {
      dictionaries=new Dictionaries(dictPath);
    }
    addDictionaryFeatures(leftWindow,rightWindow,featureList);
  }
  String distSimParam=InputOutputUtils.getClarkFeatures(params);
  if (distSimParam.equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
    String distSimPath=InputOutputUtils.getClarkPath(params);
    if (clarkCluster == null) {
      clarkCluster=new ClarkCluster(distSimPath);
    }
    addClarkFeatures(leftWindow,rightWindow,featureList);
  }
  String brownParam=InputOutputUtils.getBrownFeatures(params);
  if (brownParam.equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
    brownLexicon=setBrownResources(params,brownParam);
    addBrownFeatures(leftWindow,rightWindow,featureList);
  }
  String word2vecClusterParam=InputOutputUtils.getWord2VecClusterFeatures(params);
  if (word2vecClusterParam.equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
    String word2vecClusterPath=InputOutputUtils.getWord2VecClusterPath(params);
    if (word2vecCluster == null) {
      word2vecCluster=new Word2VecCluster(word2vecClusterPath);
    }
    addWord2VecClusterFeatures(leftWindow,rightWindow,featureList);
  }
  return featureList;
}","/** 
 * Creates the list of features to be passed to the createFeatureGenerator(params) method. Every programatic use of ixa-pipe-nerc will need to implement/use a function like this to train a model.
 * @param params the training parameters
 * @return the list of {@code AdaptiveFeatureGenerator}s
 */
private final List<AdaptiveFeatureGenerator> createFeatureList(TrainingParameters params){
  List<AdaptiveFeatureGenerator> featureList=new ArrayList<AdaptiveFeatureGenerator>();
  int leftWindow=getWindowRange(params).get(0);
  int rightWindow=getWindowRange(params).get(1);
  String tokenParam=InputOutputUtils.getTokenFeatures(params);
  if (tokenParam.equalsIgnoreCase(""String_Node_Str"")) {
    addWindowTokenFeatures(leftWindow,rightWindow,featureList);
    System.err.println(""String_Node_Str"" + leftWindow + ""String_Node_Str""+ rightWindow);
  }
  String tokenClassParam=InputOutputUtils.getTokenClassFeatures(params);
  if (tokenClassParam.equalsIgnoreCase(""String_Node_Str"")) {
    addWindowTokenClassFeatures(leftWindow,rightWindow,featureList);
    System.err.println(""String_Node_Str"" + leftWindow + ""String_Node_Str""+ rightWindow);
  }
  String outcomePriorParam=InputOutputUtils.getOutcomePriorFeatures(params);
  if (outcomePriorParam.equalsIgnoreCase(""String_Node_Str"")) {
    addOutcomePriorFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String previousMapParam=InputOutputUtils.getPreviousMapFeatures(params);
  if (previousMapParam.equalsIgnoreCase(""String_Node_Str"")) {
    addPreviousMapFeatures(leftWindow,rightWindow,featureList);
    System.err.println(""String_Node_Str"");
  }
  String sentenceParam=InputOutputUtils.getSentenceFeatures(params);
  if (sentenceParam.equalsIgnoreCase(""String_Node_Str"")) {
    addSentenceFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String preffixParam=InputOutputUtils.getPreffixFeatures(params);
  if (preffixParam.equalsIgnoreCase(""String_Node_Str"")) {
    addPrefixFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String suffixParam=InputOutputUtils.getSuffixFeatures(params);
  if (suffixParam.equalsIgnoreCase(""String_Node_Str"")) {
    addSuffixFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String bigramClassParam=InputOutputUtils.getBigramClassFeatures(params);
  if (bigramClassParam.equalsIgnoreCase(""String_Node_Str"")) {
    addBigramClassFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String trigramClassParam=InputOutputUtils.getTrigramClassFeatures(params);
  if (trigramClassParam.equalsIgnoreCase(""String_Node_Str"")) {
    addTrigramClassFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String fourgramClassParam=InputOutputUtils.getFourgramClassFeatures(params);
  if (fourgramClassParam.equalsIgnoreCase(""String_Node_Str"")) {
    addFourgramClassFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String fivegramClassParam=InputOutputUtils.getFivegramClassFeatures(params);
  if (fivegramClassParam.equalsIgnoreCase(""String_Node_Str"")) {
    addFivegramClassFeatures(featureList);
    System.err.println(""String_Node_Str"");
  }
  String charNgramParam=InputOutputUtils.getCharNgramFeatures(params);
  if (charNgramParam.equalsIgnoreCase(""String_Node_Str"")) {
    int minLength=getNgramRange(params).get(0);
    int maxLength=getNgramRange(params).get(1);
    addCharNgramFeatures(minLength,maxLength,featureList);
    System.err.println(""String_Node_Str"" + minLength + ""String_Node_Str""+ maxLength);
  }
  String dictionaryParam=InputOutputUtils.getDictionaryFeatures(params);
  if (dictionaryParam.equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
    String dictPath=InputOutputUtils.getDictPath(params);
    if (dictionaries == null) {
      dictionaries=new Dictionaries(dictPath);
    }
    addDictionaryFeatures(featureList);
  }
  String brownParam=InputOutputUtils.getBrownFeatures(params);
  if (brownParam.equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
    brownLexicon=setBrownResources(params,brownParam);
    addBrownFeatures(featureList);
  }
  String clarkParam=InputOutputUtils.getClarkFeatures(params);
  if (clarkParam.equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
    String clarkPath=InputOutputUtils.getClarkPath(params);
    if (clarkCluster == null) {
      clarkCluster=new ClarkCluster(clarkPath);
    }
    addClarkFeatures(featureList);
  }
  String word2vecClusterParam=InputOutputUtils.getWord2VecClusterFeatures(params);
  if (word2vecClusterParam.equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
    String word2vecClusterPath=InputOutputUtils.getWord2VecClusterPath(params);
    if (word2vecCluster == null) {
      word2vecCluster=new Word2VecCluster(word2vecClusterPath);
    }
    addWord2VecClusterFeatures(featureList);
  }
  return featureList;
}"
53393,"/** 
 * Output Conll2003 format.
 * @param kaf the kaf document
 * @return the annotated named entities in conll03 format
 */
public String annotateNEsToCoNLL2003(KAFDocument kaf){
  List<Entity> namedEntityList=kaf.getEntities();
  Map<String,Integer> entityToSpanSize=new HashMap<String,Integer>();
  Map<String,String> entityToType=new HashMap<String,String>();
  for (  Entity ne : namedEntityList) {
    List<ixa.kaflib.Span<Term>> entitySpanList=ne.getSpans();
    for (    ixa.kaflib.Span<Term> spanTerm : entitySpanList) {
      Term neTerm=spanTerm.getFirstTarget();
      entityToSpanSize.put(neTerm.getId(),spanTerm.size());
      entityToType.put(neTerm.getId(),ne.getType());
    }
  }
  List<List<WF>> sentences=kaf.getSentences();
  StringBuilder sb=new StringBuilder();
  for (  List<WF> sentence : sentences) {
    int index=1;
    int sentNumber=sentence.get(0).getSent();
    List<Term> sentenceTerms=kaf.getSentenceTerms(sentNumber);
    boolean previousIsEntity=false;
    for (int i=0; i < sentenceTerms.size(); i++) {
      Term thisTerm=sentenceTerms.get(i);
      if (entityToSpanSize.get(thisTerm.getId()) != null) {
        int neSpanSize=entityToSpanSize.get(thisTerm.getId());
        String neClass=entityToType.get(thisTerm.getId());
        String neType=this.convertToConLLTypes(neClass);
        if (neSpanSize > 1) {
          for (int j=0; j < neSpanSize; j++) {
            thisTerm=sentenceTerms.get(i + j);
            sb.append(thisTerm.getForm());
            sb.append(""String_Node_Str"");
            sb.append(thisTerm.getLemma());
            sb.append(""String_Node_Str"");
            sb.append(thisTerm.getMorphofeat());
            sb.append(""String_Node_Str"");
            if (j == 0 && previousIsEntity) {
              sb.append(BIO.BEGIN.toString());
            }
 else {
              sb.append(BIO.IN.toString());
            }
            sb.append(neType);
            sb.append(""String_Node_Str"");
            index++;
          }
        }
 else {
          sb.append(thisTerm.getForm());
          sb.append(""String_Node_Str"");
          sb.append(thisTerm.getLemma());
          sb.append(""String_Node_Str"");
          sb.append(thisTerm.getMorphofeat());
          sb.append(""String_Node_Str"");
          if (previousIsEntity) {
            sb.append(BIO.BEGIN.toString());
          }
 else {
            sb.append(BIO.IN.toString());
          }
          sb.append(""String_Node_Str"");
          index++;
        }
        previousIsEntity=true;
        i+=neSpanSize - 1;
      }
 else {
        sb.append(thisTerm.getForm());
        sb.append(""String_Node_Str"");
        sb.append(thisTerm.getLemma());
        sb.append(""String_Node_Str"");
        sb.append(thisTerm.getMorphofeat());
        sb.append(""String_Node_Str"");
        sb.append(BIO.OUT);
        sb.append(""String_Node_Str"");
        index++;
        previousIsEntity=false;
      }
    }
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","/** 
 * Output Conll2003 format.
 * @param kaf the kaf document
 * @return the annotated named entities in conll03 format
 */
public String annotateNEsToCoNLL2003(KAFDocument kaf){
  List<Entity> namedEntityList=kaf.getEntities();
  Map<String,Integer> entityToSpanSize=new HashMap<String,Integer>();
  Map<String,String> entityToType=new HashMap<String,String>();
  for (  Entity ne : namedEntityList) {
    List<ixa.kaflib.Span<Term>> entitySpanList=ne.getSpans();
    for (    ixa.kaflib.Span<Term> spanTerm : entitySpanList) {
      Term neTerm=spanTerm.getFirstTarget();
      entityToSpanSize.put(neTerm.getId(),spanTerm.size());
      entityToType.put(neTerm.getId(),ne.getType());
    }
  }
  List<List<WF>> sentences=kaf.getSentences();
  StringBuilder sb=new StringBuilder();
  for (  List<WF> sentence : sentences) {
    int index=1;
    int sentNumber=sentence.get(0).getSent();
    List<Term> sentenceTerms=kaf.getSentenceTerms(sentNumber);
    boolean previousIsEntity=false;
    for (int i=0; i < sentenceTerms.size(); i++) {
      Term thisTerm=sentenceTerms.get(i);
      if (entityToSpanSize.get(thisTerm.getId()) != null) {
        int neSpanSize=entityToSpanSize.get(thisTerm.getId());
        String neClass=entityToType.get(thisTerm.getId());
        String neType=this.convertToConLLTypes(neClass);
        if (neSpanSize > 1) {
          for (int j=0; j < neSpanSize; j++) {
            thisTerm=sentenceTerms.get(i + j);
            sb.append(thisTerm.getForm());
            sb.append(""String_Node_Str"");
            sb.append(thisTerm.getLemma());
            sb.append(""String_Node_Str"");
            sb.append(thisTerm.getMorphofeat());
            sb.append(""String_Node_Str"");
            if (j == 0 && previousIsEntity) {
              sb.append(BIO.BEGIN.toString());
            }
 else {
              sb.append(BIO.IN.toString());
            }
            sb.append(neType);
            sb.append(""String_Node_Str"");
            index++;
          }
        }
 else {
          sb.append(thisTerm.getForm());
          sb.append(""String_Node_Str"");
          sb.append(thisTerm.getLemma());
          sb.append(""String_Node_Str"");
          sb.append(thisTerm.getMorphofeat());
          sb.append(""String_Node_Str"");
          if (previousIsEntity) {
            sb.append(BIO.BEGIN.toString());
          }
 else {
            sb.append(BIO.IN.toString());
          }
          sb.append(neType);
          sb.append(""String_Node_Str"");
          index++;
        }
        previousIsEntity=true;
        i+=neSpanSize - 1;
      }
 else {
        sb.append(thisTerm.getForm());
        sb.append(""String_Node_Str"");
        sb.append(thisTerm.getLemma());
        sb.append(""String_Node_Str"");
        sb.append(thisTerm.getMorphofeat());
        sb.append(""String_Node_Str"");
        sb.append(BIO.OUT);
        sb.append(""String_Node_Str"");
        index++;
        previousIsEntity=false;
      }
    }
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}"
53394,"/** 
 * Generates the right options for dictionary-based NER tagging: Dictionary features by means of the   {@link StatisticalNameFinder} or using the{@link DictionaryNameFinder} or a combination of those with the{@link NumericNameFinder}.
 * @param lang
 * @param model
 * @param features
 * @param beamsize
 * @param dictOption
 * @param dictPath
 * @param ruleBasedOption
 * @throws IOException
 */
private void annotateOptions(Properties properties,TrainingParameters params) throws IOException {
  String ruleBasedOption=properties.getProperty(""String_Node_Str"");
  String dictPath=InputOutputUtils.getDictPath(params);
  String dictOption=InputOutputUtils.getDictOption(params);
  if (!dictPath.equals(CLI.DEFAULT_DICT_PATH)) {
    if (!ruleBasedOption.equals(CLI.DEFAULT_LEXER)) {
      lexerFind=true;
    }
    dictionaries=new Dictionaries(dictPath);
    if (!dictOption.equals(CLI.DEFAULT_DICT_OPTION)) {
      dictFinder=new DictionariesNameFinder(dictionaries,nameFactory);
      if (dictOption.equalsIgnoreCase(""String_Node_Str"")) {
        dictTag=true;
        postProcess=false;
        statistical=false;
      }
 else       if (dictOption.equalsIgnoreCase(""String_Node_Str"")) {
        nameFinder=new StatisticalNameFinder(properties,params,nameFactory);
        statistical=true;
        postProcess=true;
        dictTag=false;
      }
    }
 else {
      nameFinder=new StatisticalNameFinder(properties,params,nameFactory);
      statistical=true;
      dictTag=false;
      postProcess=false;
    }
  }
 else   if (!ruleBasedOption.equals(CLI.DEFAULT_LEXER)) {
    lexerFind=true;
    statistical=true;
    dictTag=false;
    postProcess=false;
    nameFinder=new StatisticalNameFinder(properties,params,nameFactory);
  }
 else {
    lexerFind=false;
    statistical=true;
    dictTag=false;
    postProcess=false;
    nameFinder=new StatisticalNameFinder(properties,params,nameFactory);
  }
}","/** 
 * Generates the right options for dictionary-based NER tagging: Dictionary features by means of the   {@link StatisticalNameFinder} or using the{@link DictionaryNameFinder} or a combination of those with the{@link NumericNameFinder}.
 * @param lang
 * @param model
 * @param features
 * @param beamsize
 * @param dictOption
 * @param dictPath
 * @param ruleBasedOption
 * @throws IOException
 */
private void annotateOptions(Properties properties,TrainingParameters params) throws IOException {
  String ruleBasedOption=properties.getProperty(""String_Node_Str"");
  String dictFeature=InputOutputUtils.getDictionaryFeatures(params);
  String dictOption=InputOutputUtils.getDictOption(params);
  if (dictFeature.equals(""String_Node_Str"")) {
    if (!ruleBasedOption.equals(CLI.DEFAULT_LEXER)) {
      lexerFind=true;
    }
    String dictPath=InputOutputUtils.getDictPath(params);
    dictionaries=new Dictionaries(dictPath);
    if (!dictOption.equals(CLI.DEFAULT_DICT_OPTION)) {
      dictFinder=new DictionariesNameFinder(dictionaries,nameFactory);
      if (dictOption.equalsIgnoreCase(""String_Node_Str"")) {
        dictTag=true;
        postProcess=false;
        statistical=false;
      }
 else       if (dictOption.equalsIgnoreCase(""String_Node_Str"")) {
        nameFinder=new StatisticalNameFinder(properties,params,nameFactory);
        statistical=true;
        postProcess=true;
        dictTag=false;
      }
    }
 else {
      nameFinder=new StatisticalNameFinder(properties,params,nameFactory);
      statistical=true;
      dictTag=false;
      postProcess=false;
    }
  }
 else   if (!ruleBasedOption.equals(CLI.DEFAULT_LEXER)) {
    lexerFind=true;
    statistical=true;
    dictTag=false;
    postProcess=false;
    nameFinder=new StatisticalNameFinder(properties,params,nameFactory);
  }
 else {
    lexerFind=false;
    statistical=true;
    dictTag=false;
    postProcess=false;
    nameFinder=new StatisticalNameFinder(properties,params,nameFactory);
  }
}"
53395,"public String getTermSpanCommentValue(Comment spanComment){
  String spanCommentValue=null;
  if (spanComment.getValue() == null) {
    spanCommentValue=""String_Node_Str"";
  }
 else {
    spanCommentValue=spanComment.getValue();
  }
  return spanCommentValue;
}","public String getTermSpanCommentValue(Comment spanComment){
  String spanCommentValue=null;
  if (spanComment.getValue() == null) {
    spanCommentValue=""String_Node_Str"";
  }
  if (spanComment.getValue().startsWith(""String_Node_Str"") || spanComment.getValue().endsWith(""String_Node_Str"")) {
    spanCommentValue=spanComment.getValue().replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    spanCommentValue=spanComment.getValue();
  }
  return spanCommentValue;
}"
53396,"/** 
 * It takes a NE span indexes and the tokens in a sentence and produces the string to which the NE span corresponds to. This function is used to get the NE textual representation from a Span. The NE string will then be added to the span element in the <entities> layer of the KAF document.
 * @param Span reducedSpan
 * @param String [] tokens
 * @return named entity string
 */
private String getStringFromSpan(Span reducedSpan,String[] tokens){
  StringBuilder sb=new StringBuilder();
  for (int si=reducedSpan.getStart(); si < reducedSpan.getEnd(); si++) {
    sb.append(tokens[si]).append(""String_Node_Str"");
  }
  String neString=sb.toString();
  return neString;
}","/** 
 * It takes a NE span indexes and the tokens in a sentence and produces the string to which the NE span corresponds to. This function is used to get the NE textual representation from a Span. The NE string will then be added to the span element in the <entities> layer of the KAF document.
 * @param Span reducedSpan
 * @param String [] tokens
 * @return named entity string
 */
private String getStringFromSpan(Span reducedSpan,String[] tokens){
  StringBuilder sb=new StringBuilder();
  for (int si=reducedSpan.getStart(); si < reducedSpan.getEnd(); si++) {
    sb.append(tokens[si]).append(""String_Node_Str"");
  }
  String neString=null;
  if (sb.toString().startsWith(""String_Node_Str"") || sb.toString().endsWith(""String_Node_Str"")) {
    neString=sb.toString().replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    neString=sb.toString();
  }
  return neString;
}"
53397,"@Override public void serializeToResValuesXml(XmlSerializer serializer,ResResource res) throws IOException, AndrolibException {
  String type=res.getResSpec().getType().getName();
  boolean item=!""String_Node_Str"".equals(mType) && !type.equals(mType);
  String body=encodeAsResXmlValue();
  if (body.contains(""String_Node_Str"")) {
    if (!res.getFilePath().contains(""String_Node_Str"")) {
      item=true;
    }
  }
  String tagName=item ? ""String_Node_Str"" : type;
  serializer.startTag(null,tagName);
  if (item) {
    serializer.attribute(null,""String_Node_Str"",type);
  }
  serializer.attribute(null,""String_Node_Str"",res.getResSpec().getName());
  serializeExtraXmlAttrs(serializer,res);
  if (!body.isEmpty()) {
    serializer.ignorableWhitespace(body);
  }
  serializer.endTag(null,tagName);
}","@Override public void serializeToResValuesXml(XmlSerializer serializer,ResResource res) throws IOException, AndrolibException {
  String type=res.getResSpec().getType().getName();
  boolean item=!""String_Node_Str"".equals(mType) && !type.equals(mType);
  String body=encodeAsResXmlValue();
  if (!type.equalsIgnoreCase(""String_Node_Str"")) {
    if (body.contains(""String_Node_Str"")) {
      if (!res.getFilePath().contains(""String_Node_Str"")) {
        item=true;
      }
    }
  }
  String tagName=item ? ""String_Node_Str"" : type;
  serializer.startTag(null,tagName);
  if (item) {
    serializer.attribute(null,""String_Node_Str"",type);
  }
  serializer.attribute(null,""String_Node_Str"",res.getResSpec().getName());
  serializeExtraXmlAttrs(serializer,res);
  if (!body.isEmpty()) {
    serializer.ignorableWhitespace(body);
  }
  serializer.endTag(null,tagName);
}"
53398,"private static void cmdDecode(CommandLine cli) throws AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int paraCount=cli.getArgList().size();
  String apkName=(String)cli.getArgList().get(paraCount - 1);
  File outDir=null;
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugMode(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setBaksmaliDebugMode(false);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkTag(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setForceDelete(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setKeepBrokenResources(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkDir(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setOutDir(new File(cli.getOptionValue(""String_Node_Str"")));
  }
 else {
    String outName=apkName;
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
    outDir=new File(outName);
    decoder.setOutDir(outDir);
  }
  decoder.setApkFile(new File(apkName));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + apkName + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
}","private static void cmdDecode(CommandLine cli) throws AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int paraCount=cli.getArgList().size();
  String apkName=(String)cli.getArgList().get(paraCount - 1);
  File outDir=null;
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugMode(true);
  }
  if (cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugLinePrefix(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setBaksmaliDebugMode(false);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkTag(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setForceDelete(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setKeepBrokenResources(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkDir(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setOutDir(new File(cli.getOptionValue(""String_Node_Str"")));
  }
 else {
    String outName=apkName;
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
    outDir=new File(outName);
    decoder.setOutDir(outDir);
  }
  decoder.setApkFile(new File(apkName));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + apkName + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
}"
53399,"@SuppressWarnings(""String_Node_Str"") private static void _Options(){
  Option versionOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option advanceOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noSrcOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noDbgOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option forceDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option frameTagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameIfDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option keepResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").create(""String_Node_Str"");
  Option forceBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option aaptOption=OptionBuilder.withLongOpt(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option originalOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option tagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option quietOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  Option verboseOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  if (isAdvanceMode()) {
    DecodeOptions.addOption(debugDecOption);
    DecodeOptions.addOption(noDbgOption);
    DecodeOptions.addOption(keepResOption);
    BuildOptions.addOption(debugBuiOption);
    BuildOptions.addOption(aaptOption);
    BuildOptions.addOption(originalOption);
  }
  normalOptions.addOption(versionOption);
  normalOptions.addOption(advanceOption);
  DecodeOptions.addOption(frameTagOption);
  DecodeOptions.addOption(outputDecOption);
  DecodeOptions.addOption(frameDirOption);
  DecodeOptions.addOption(forceDecOption);
  DecodeOptions.addOption(noSrcOption);
  DecodeOptions.addOption(noResOption);
  BuildOptions.addOption(outputBuiOption);
  BuildOptions.addOption(frameDirOption);
  BuildOptions.addOption(forceBuiOption);
  frameOptions.addOption(tagOption);
  frameOptions.addOption(frameIfDirOption);
  for (  Object op : normalOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : DecodeOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : BuildOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : frameOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  allOptions.addOption(debugDecOption);
  allOptions.addOption(noDbgOption);
  allOptions.addOption(keepResOption);
  allOptions.addOption(debugBuiOption);
  allOptions.addOption(aaptOption);
  allOptions.addOption(originalOption);
  allOptions.addOption(verboseOption);
  allOptions.addOption(quietOption);
}","@SuppressWarnings(""String_Node_Str"") private static void _Options(){
  Option versionOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option advanceOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noSrcOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugLinePrefix=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create();
  Option debugBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noDbgOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option forceDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option frameTagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameIfDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option keepResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").create(""String_Node_Str"");
  Option forceBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option aaptOption=OptionBuilder.withLongOpt(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option originalOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option tagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option quietOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  Option verboseOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  if (isAdvanceMode()) {
    DecodeOptions.addOption(debugLinePrefix);
    DecodeOptions.addOption(debugDecOption);
    DecodeOptions.addOption(noDbgOption);
    DecodeOptions.addOption(keepResOption);
    BuildOptions.addOption(debugBuiOption);
    BuildOptions.addOption(aaptOption);
    BuildOptions.addOption(originalOption);
  }
  normalOptions.addOption(versionOption);
  normalOptions.addOption(advanceOption);
  DecodeOptions.addOption(frameTagOption);
  DecodeOptions.addOption(outputDecOption);
  DecodeOptions.addOption(frameDirOption);
  DecodeOptions.addOption(forceDecOption);
  DecodeOptions.addOption(noSrcOption);
  DecodeOptions.addOption(noResOption);
  BuildOptions.addOption(outputBuiOption);
  BuildOptions.addOption(frameDirOption);
  BuildOptions.addOption(forceBuiOption);
  frameOptions.addOption(tagOption);
  frameOptions.addOption(frameIfDirOption);
  for (  Object op : normalOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : DecodeOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : BuildOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : frameOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  allOptions.addOption(debugLinePrefix);
  allOptions.addOption(debugDecOption);
  allOptions.addOption(noDbgOption);
  allOptions.addOption(keepResOption);
  allOptions.addOption(debugBuiOption);
  allOptions.addOption(aaptOption);
  allOptions.addOption(originalOption);
  allOptions.addOption(verboseOption);
  allOptions.addOption(quietOption);
}"
53400,"public void decodeSourcesSmali(File apkFile,File outDir,boolean debug,boolean bakdeb) throws AndrolibException {
  try {
    File smaliDir=new File(outDir,SMALI_DIRNAME);
    OS.rmdir(smaliDir);
    smaliDir.mkdirs();
    LOGGER.info(""String_Node_Str"");
    SmaliDecoder.decode(apkFile,smaliDir,debug,bakdeb);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
}","public void decodeSourcesSmali(File apkFile,File outDir,boolean debug,String debugLinePrefix,boolean bakdeb) throws AndrolibException {
  try {
    File smaliDir=new File(outDir,SMALI_DIRNAME);
    OS.rmdir(smaliDir);
    smaliDir.mkdirs();
    LOGGER.info(""String_Node_Str"");
    SmaliDecoder.decode(apkFile,smaliDir,debug,debugLinePrefix,bakdeb);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
}"
53401,"public void decode() throws AndrolibException, IOException {
  File outDir=getOutDir();
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
ZipExtFile zef=new ZipExtFile(mApkFile.getAbsolutePath());
ZipArchiveEntry ze=zef.getEntry(""String_Node_Str"");
if (ze != null) {
int compression=ze.getMethod();
mCompressResources=(compression != ZipEntry.STORED) && (compression == ZipEntry.DEFLATED);
}
zef.close();
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
mAndrolib.decodeUnknownFiles(mApkFile,outDir,mResTable);
mAndrolib.writeOriginalFiles(mApkFile,outDir);
writeMetaFile();
}","public void decode() throws AndrolibException, IOException {
  File outDir=getOutDir();
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mDebugLinePrefix,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
ZipExtFile zef=new ZipExtFile(mApkFile.getAbsolutePath());
ZipArchiveEntry ze=zef.getEntry(""String_Node_Str"");
if (ze != null) {
int compression=ze.getMethod();
mCompressResources=(compression != ZipEntry.STORED) && (compression == ZipEntry.DEFLATED);
}
zef.close();
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
mAndrolib.decodeUnknownFiles(mApkFile,outDir,mResTable);
mAndrolib.writeOriginalFiles(mApkFile,outDir);
writeMetaFile();
}"
53402,"@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  String fileName=file.getFileName().toString();
  if (!fileName.endsWith(""String_Node_Str"")) {
    return FileVisitResult.CONTINUE;
  }
  fileName=fileName.substring(0,fileName.length() - 6);
  try (BufferedReader in=Files.newBufferedReader(file,Charset.defaultCharset());BufferedWriter out=Files.newBufferedWriter(file.resolveSibling(fileName + ""String_Node_Str""),Charset.defaultCharset())){
    TypeName type=TypeName.fromPath(mOutDir.relativize(file.resolveSibling(fileName)));
    out.write(""String_Node_Str"" + type.package_ + ""String_Node_Str""+ type.getName(true,true)+ ""String_Node_Str"");
    out.newLine();
    String line;
    while ((line=in.readLine()) != null) {
      out.write(""String_Node_Str"");
      out.write(line);
      out.newLine();
    }
    out.write(""String_Node_Str"");
    out.newLine();
  }
   Files.delete(file);
  return FileVisitResult.CONTINUE;
}","@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  String fileName=file.getFileName().toString();
  if (!fileName.endsWith(""String_Node_Str"")) {
    return FileVisitResult.CONTINUE;
  }
  fileName=fileName.substring(0,fileName.length() - 6);
  try (BufferedReader in=Files.newBufferedReader(file,Charset.defaultCharset());BufferedWriter out=Files.newBufferedWriter(file.resolveSibling(fileName + ""String_Node_Str""),Charset.defaultCharset())){
    TypeName type=TypeName.fromPath(mOutDir.relativize(file.resolveSibling(fileName)));
    out.write(""String_Node_Str"" + type.package_ + ""String_Node_Str""+ type.getName(true,true)+ ""String_Node_Str"");
    out.newLine();
    String line;
    final String debugLinePrefix=mDebugLinePrefix;
    while ((line=in.readLine()) != null) {
      out.write(debugLinePrefix);
      out.write(line);
      out.newLine();
    }
    out.write(""String_Node_Str"");
    out.newLine();
  }
   Files.delete(file);
  return FileVisitResult.CONTINUE;
}"
53403,"private SmaliDecoder(File apkFile,File outDir,boolean debug,boolean bakdeb){
  mApkFile=apkFile;
  mOutDir=outDir.toPath();
  mDebug=debug;
  mBakDeb=bakdeb;
}","private SmaliDecoder(File apkFile,File outDir,boolean debug,String debugLinePrefix,boolean bakdeb){
  mApkFile=apkFile;
  mOutDir=outDir.toPath();
  mDebug=debug;
  mDebugLinePrefix=debugLinePrefix;
  mBakDeb=bakdeb;
}"
53404,"private static void cmdDecode(CommandLine cli) throws AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int paraCount=cli.getArgList().size();
  String apkName=(String)cli.getArgList().get(paraCount - 1);
  File outDir=null;
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugMode(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setBaksmaliDebugMode(false);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkTag(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setForceDelete(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setKeepBrokenResources(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkDir(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setOutDir(new File(cli.getOptionValue(""String_Node_Str"")));
  }
 else {
    String outName=apkName;
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
    outDir=new File(outName);
    decoder.setOutDir(outDir);
  }
  decoder.setApkFile(new File(apkName));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + apkName + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
}","private static void cmdDecode(CommandLine cli) throws AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int paraCount=cli.getArgList().size();
  String apkName=(String)cli.getArgList().get(paraCount - 1);
  File outDir=null;
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugMode(true);
  }
  if (cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugLinePrefix(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setBaksmaliDebugMode(false);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkTag(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setForceDelete(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setKeepBrokenResources(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkDir(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setOutDir(new File(cli.getOptionValue(""String_Node_Str"")));
  }
 else {
    String outName=apkName;
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
    outDir=new File(outName);
    decoder.setOutDir(outDir);
  }
  decoder.setApkFile(new File(apkName));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + apkName + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
}"
53405,"@SuppressWarnings(""String_Node_Str"") private static void _Options(){
  Option versionOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option advanceOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noSrcOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noDbgOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option forceDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option frameTagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameIfDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option keepResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").create(""String_Node_Str"");
  Option forceBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option aaptOption=OptionBuilder.withLongOpt(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option originalOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option tagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option quietOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  Option verboseOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  if (isAdvanceMode()) {
    DecodeOptions.addOption(debugDecOption);
    DecodeOptions.addOption(noDbgOption);
    DecodeOptions.addOption(keepResOption);
    BuildOptions.addOption(debugBuiOption);
    BuildOptions.addOption(aaptOption);
    BuildOptions.addOption(originalOption);
  }
  normalOptions.addOption(versionOption);
  normalOptions.addOption(advanceOption);
  DecodeOptions.addOption(frameTagOption);
  DecodeOptions.addOption(outputDecOption);
  DecodeOptions.addOption(frameDirOption);
  DecodeOptions.addOption(forceDecOption);
  DecodeOptions.addOption(noSrcOption);
  DecodeOptions.addOption(noResOption);
  BuildOptions.addOption(outputBuiOption);
  BuildOptions.addOption(frameDirOption);
  BuildOptions.addOption(forceBuiOption);
  frameOptions.addOption(tagOption);
  frameOptions.addOption(frameIfDirOption);
  for (  Object op : normalOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : DecodeOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : BuildOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : frameOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  allOptions.addOption(debugDecOption);
  allOptions.addOption(noDbgOption);
  allOptions.addOption(keepResOption);
  allOptions.addOption(debugBuiOption);
  allOptions.addOption(aaptOption);
  allOptions.addOption(originalOption);
  allOptions.addOption(verboseOption);
  allOptions.addOption(quietOption);
}","@SuppressWarnings(""String_Node_Str"") private static void _Options(){
  Option versionOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option advanceOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noSrcOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugLinePrefix=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create();
  Option debugBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noDbgOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option forceDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option frameTagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameIfDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option keepResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").create(""String_Node_Str"");
  Option forceBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option aaptOption=OptionBuilder.withLongOpt(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option originalOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option tagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option quietOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  Option verboseOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  if (isAdvanceMode()) {
    DecodeOptions.addOption(debugLinePrefix);
    DecodeOptions.addOption(debugDecOption);
    DecodeOptions.addOption(noDbgOption);
    DecodeOptions.addOption(keepResOption);
    BuildOptions.addOption(debugBuiOption);
    BuildOptions.addOption(aaptOption);
    BuildOptions.addOption(originalOption);
  }
  normalOptions.addOption(versionOption);
  normalOptions.addOption(advanceOption);
  DecodeOptions.addOption(frameTagOption);
  DecodeOptions.addOption(outputDecOption);
  DecodeOptions.addOption(frameDirOption);
  DecodeOptions.addOption(forceDecOption);
  DecodeOptions.addOption(noSrcOption);
  DecodeOptions.addOption(noResOption);
  BuildOptions.addOption(outputBuiOption);
  BuildOptions.addOption(frameDirOption);
  BuildOptions.addOption(forceBuiOption);
  frameOptions.addOption(tagOption);
  frameOptions.addOption(frameIfDirOption);
  for (  Object op : normalOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : DecodeOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : BuildOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : frameOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  allOptions.addOption(debugLinePrefix);
  allOptions.addOption(debugDecOption);
  allOptions.addOption(noDbgOption);
  allOptions.addOption(keepResOption);
  allOptions.addOption(debugBuiOption);
  allOptions.addOption(aaptOption);
  allOptions.addOption(originalOption);
  allOptions.addOption(verboseOption);
  allOptions.addOption(quietOption);
}"
53406,"public void decodeSourcesSmali(File apkFile,File outDir,boolean debug,boolean bakdeb) throws AndrolibException {
  try {
    File smaliDir=new File(outDir,SMALI_DIRNAME);
    OS.rmdir(smaliDir);
    smaliDir.mkdirs();
    LOGGER.info(""String_Node_Str"");
    SmaliDecoder.decode(apkFile,smaliDir,debug,bakdeb);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
}","public void decodeSourcesSmali(File apkFile,File outDir,boolean debug,String debugLinePrefix,boolean bakdeb) throws AndrolibException {
  try {
    File smaliDir=new File(outDir,SMALI_DIRNAME);
    OS.rmdir(smaliDir);
    smaliDir.mkdirs();
    LOGGER.info(""String_Node_Str"");
    SmaliDecoder.decode(apkFile,smaliDir,debug,debugLinePrefix,bakdeb);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
}"
53407,"public void decode() throws AndrolibException, IOException {
  File outDir=getOutDir();
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
ZipExtFile zef=new ZipExtFile(mApkFile.getAbsolutePath());
ZipArchiveEntry ze=zef.getEntry(""String_Node_Str"");
if (ze != null) {
int compression=ze.getMethod();
mCompressResources=(compression != ZipEntry.STORED) && (compression == ZipEntry.DEFLATED);
}
zef.close();
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
mAndrolib.decodeUnknownFiles(mApkFile,outDir,mResTable);
mAndrolib.writeOriginalFiles(mApkFile,outDir);
writeMetaFile();
}","public void decode() throws AndrolibException, IOException {
  File outDir=getOutDir();
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mDebugLinePrefix,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
ZipExtFile zef=new ZipExtFile(mApkFile.getAbsolutePath());
ZipArchiveEntry ze=zef.getEntry(""String_Node_Str"");
if (ze != null) {
int compression=ze.getMethod();
mCompressResources=(compression != ZipEntry.STORED) && (compression == ZipEntry.DEFLATED);
}
zef.close();
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
mAndrolib.decodeUnknownFiles(mApkFile,outDir,mResTable);
mAndrolib.writeOriginalFiles(mApkFile,outDir);
writeMetaFile();
}"
53408,"@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  String fileName=file.getFileName().toString();
  if (!fileName.endsWith(""String_Node_Str"")) {
    return FileVisitResult.CONTINUE;
  }
  fileName=fileName.substring(0,fileName.length() - 6);
  try (BufferedReader in=Files.newBufferedReader(file,Charset.defaultCharset());BufferedWriter out=Files.newBufferedWriter(file.resolveSibling(fileName + ""String_Node_Str""),Charset.defaultCharset())){
    TypeName type=TypeName.fromPath(mOutDir.relativize(file.resolveSibling(fileName)));
    out.write(""String_Node_Str"" + type.package_ + ""String_Node_Str""+ type.getName(true,true)+ ""String_Node_Str"");
    out.newLine();
    String line;
    while ((line=in.readLine()) != null) {
      out.write(""String_Node_Str"");
      out.write(line);
      out.newLine();
    }
    out.write(""String_Node_Str"");
    out.newLine();
  }
   Files.delete(file);
  return FileVisitResult.CONTINUE;
}","@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  String fileName=file.getFileName().toString();
  if (!fileName.endsWith(""String_Node_Str"")) {
    return FileVisitResult.CONTINUE;
  }
  fileName=fileName.substring(0,fileName.length() - 6);
  try (BufferedReader in=Files.newBufferedReader(file,Charset.defaultCharset());BufferedWriter out=Files.newBufferedWriter(file.resolveSibling(fileName + ""String_Node_Str""),Charset.defaultCharset())){
    TypeName type=TypeName.fromPath(mOutDir.relativize(file.resolveSibling(fileName)));
    out.write(""String_Node_Str"" + type.package_ + ""String_Node_Str""+ type.getName(true,true)+ ""String_Node_Str"");
    out.newLine();
    String line;
    final String debugLinePrefix=mDebugLinePrefix;
    while ((line=in.readLine()) != null) {
      out.write(debugLinePrefix);
      out.write(line);
      out.newLine();
    }
    out.write(""String_Node_Str"");
    out.newLine();
  }
   Files.delete(file);
  return FileVisitResult.CONTINUE;
}"
53409,"private SmaliDecoder(File apkFile,File outDir,boolean debug,boolean bakdeb){
  mApkFile=apkFile;
  mOutDir=outDir.toPath();
  mDebug=debug;
  mBakDeb=bakdeb;
}","private SmaliDecoder(File apkFile,File outDir,boolean debug,String debugLinePrefix,boolean bakdeb){
  mApkFile=apkFile;
  mOutDir=outDir.toPath();
  mDebug=debug;
  mDebugLinePrefix=debugLinePrefix;
  mBakDeb=bakdeb;
}"
53410,"private boolean step(){
  String line=next();
  if (line.isEmpty()) {
    return false;
  }
switch (line.charAt(0)) {
case '#':
    return processComment(line);
case ':':
  append(line);
return false;
case '.':
return processDirective(line);
default :
return processInstruction(line);
}
}","private boolean step(){
  String line=next();
  if (line.isEmpty()) {
    return false;
  }
switch (line.charAt(0)) {
case '#':
    return processComment(line);
case ':':
  append(line);
return false;
case '.':
return processDirective(line);
default :
if (!areParamsInjected) {
injectRemainingParams();
}
return processInstruction(line);
}
}"
53411,"private void inject() throws AndrolibException {
  String definition=nextAndAppend();
  if (definition.contains(""String_Node_Str"") || definition.contains(""String_Node_Str"")) {
    nextAndAppend();
    return;
  }
  injectParameters(definition);
  boolean end=false;
  while (!end) {
    end=step();
  }
}","private void inject() throws AndrolibException {
  String definition=nextAndAppend();
  if (definition.contains(""String_Node_Str"") || definition.contains(""String_Node_Str"")) {
    nextAndAppend();
    return;
  }
  parseParamsNumber(definition);
  boolean end=false;
  while (!end) {
    end=step();
  }
}"
53412,"private boolean processDirective(String line){
  String line2=line.substring(1);
  if (line2.startsWith(""String_Node_Str"") || line2.equals(""String_Node_Str"") || line2.startsWith(""String_Node_Str"")|| line2.startsWith(""String_Node_Str"")|| line2.startsWith(""String_Node_Str"")) {
    return false;
  }
  append(line);
  if (line2.equals(""String_Node_Str"")) {
    return true;
  }
  if (line2.startsWith(""String_Node_Str"") || line2.equals(""String_Node_Str"") || line2.startsWith(""String_Node_Str"")|| line2.startsWith(""String_Node_Str"")) {
    while (true) {
      line2=nextAndAppend();
      if (line2.startsWith(""String_Node_Str"")) {
        break;
      }
    }
  }
  return false;
}","private boolean processDirective(String line){
  String line2=line.substring(1);
  if (line2.startsWith(""String_Node_Str"") || line2.startsWith(""String_Node_Str"") || line2.startsWith(""String_Node_Str"")) {
    return false;
  }
  if (line2.equals(""String_Node_Str"")) {
    if (!areParamsInjected) {
      injectRemainingParams();
    }
    return false;
  }
  if (line2.equals(""String_Node_Str"")) {
    mOut.append(""String_Node_Str"").append(currParam++).append(""String_Node_Str"");
    return false;
  }
  append(line);
  if (line2.equals(""String_Node_Str"")) {
    return true;
  }
  if (line2.startsWith(""String_Node_Str"") || line2.equals(""String_Node_Str"") || line2.startsWith(""String_Node_Str"")|| line2.startsWith(""String_Node_Str"")) {
    while (true) {
      line2=nextAndAppend();
      if (line2.startsWith(""String_Node_Str"")) {
        break;
      }
    }
  }
  return false;
}"
53413,"private static void cmdDecode(String[] args) throws InvalidArgsError, AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int i;
  for (i=0; i < args.length; i++) {
    String opt=args[i];
    if (!opt.startsWith(""String_Node_Str"")) {
      break;
    }
    if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setDebugMode(true);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setBaksmaliDebugMode(false);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      i++;
      if (i >= args.length) {
        throw new InvalidArgsError();
      }
      decoder.setFrameworkTag(args[i]);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setForceDelete(true);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
    }
 else     if (""String_Node_Str"".equals(opt)) {
      decoder.setKeepBrokenResources(true);
    }
 else     if (""String_Node_Str"".equals(opt)) {
      i++;
      System.out.println(""String_Node_Str"" + args[i]);
      decoder.setFrameworkDir(args[i]);
    }
 else {
      throw new InvalidArgsError();
    }
  }
  String outName=null;
  if (args.length == i + 2) {
    outName=args[i + 1];
  }
 else   if (args.length == i + 1) {
    outName=args[i];
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
  }
 else {
    throw new InvalidArgsError();
  }
  File outDir=new File(outName);
  decoder.setOutDir(outDir);
  decoder.setApkFile(new File(args[i]));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + args[i] + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
}","private static void cmdDecode(String[] args) throws InvalidArgsError, AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int i;
  for (i=0; i < args.length; i++) {
    String opt=args[i];
    if (!opt.startsWith(""String_Node_Str"")) {
      break;
    }
    if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setDebugMode(true);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setBaksmaliDebugMode(false);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      i++;
      if (i >= args.length) {
        throw new InvalidArgsError();
      }
      decoder.setFrameworkTag(args[i]);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setForceDelete(true);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
    }
 else     if (""String_Node_Str"".equals(opt)) {
      decoder.setKeepBrokenResources(true);
    }
 else     if (""String_Node_Str"".equals(opt)) {
      i++;
      System.out.println(""String_Node_Str"" + args[i]);
      decoder.setFrameworkDir(args[i]);
    }
 else {
      throw new InvalidArgsError();
    }
  }
  String outName=null;
  if (args.length == i + 2) {
    outName=args[i + 1];
  }
 else   if (args.length == i + 1) {
    outName=args[i];
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
  }
 else {
    throw new InvalidArgsError();
  }
  File outDir=new File(outName);
  decoder.setOutDir(outDir);
  decoder.setApkFile(new File(args[i]));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + args[i] + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
}"
53414,"public void build(ExtFile appDir,File outFile,HashMap<String,Boolean> flags,ExtFile origApk,String aaptPath) throws BrutException {
  mAaptPath=aaptPath;
  Map<String,Object> meta=readMetaFile(appDir);
  Object t1=meta.get(""String_Node_Str"");
  flags.put(""String_Node_Str"",t1 == null ? false : (Boolean)t1);
  mAndRes.setSdkInfo((Map<String,String>)meta.get(""String_Node_Str""));
  if (flags.get(""String_Node_Str"")) {
    if (!origApk.isFile() || !origApk.canRead()) {
      throw new InFileNotFoundException();
    }
 else {
      mOrigApkFile=origApk;
    }
  }
  if (outFile == null) {
    String outFileName=(String)meta.get(""String_Node_Str"");
    outFile=new File(appDir,""String_Node_Str"" + File.separator + (outFileName == null ? ""String_Node_Str"" : outFileName));
  }
  new File(appDir,APK_DIRNAME).mkdirs();
  buildSources(appDir,flags);
  buildResources(appDir,flags,(Map<String,Object>)meta.get(""String_Node_Str""));
  buildLib(appDir,flags);
  buildApk(appDir,outFile,flags);
}","public void build(ExtFile appDir,File outFile,HashMap<String,Boolean> flags,ExtFile origApk,String aaptPath) throws BrutException {
  mAaptPath=aaptPath;
  Map<String,Object> meta=readMetaFile(appDir);
  Object t1=meta.get(""String_Node_Str"");
  flags.put(""String_Node_Str"",t1 == null ? false : (Boolean)t1);
  flags.put(""String_Node_Str"",meta.get(""String_Node_Str"") == null ? false : (Boolean)meta.get(""String_Node_Str""));
  mAndRes.setSdkInfo((Map<String,String>)meta.get(""String_Node_Str""));
  if (flags.get(""String_Node_Str"")) {
    if (!origApk.isFile() || !origApk.canRead()) {
      throw new InFileNotFoundException();
    }
 else {
      mOrigApkFile=origApk;
    }
  }
  if (outFile == null) {
    String outFileName=(String)meta.get(""String_Node_Str"");
    outFile=new File(appDir,""String_Node_Str"" + File.separator + (outFileName == null ? ""String_Node_Str"" : outFileName));
  }
  new File(appDir,APK_DIRNAME).mkdirs();
  buildSources(appDir,flags);
  buildResources(appDir,flags,(Map<String,Object>)meta.get(""String_Node_Str""));
  buildLib(appDir,flags);
  buildApk(appDir,outFile,flags);
}"
53415,"public void decode() throws AndrolibException {
  File outDir=getOutDir();
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
writeMetaFile();
}","public void decode() throws AndrolibException, IOException {
  File outDir=getOutDir();
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
JarFile jf=new JarFile(mApkFile.getAbsoluteFile());
Enumeration<?> e=jf.entries();
while (e.hasMoreElements()) {
JarEntry je=(JarEntry)e.nextElement();
if (je.getName().equalsIgnoreCase(""String_Node_Str"")) {
setCompressionType(je.getMethod());
continue;
}
}
jf.close();
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
writeMetaFile();
}"
53416,"private void writeMetaFile() throws AndrolibException {
  Map<String,Object> meta=new LinkedHashMap<String,Object>();
  meta.put(""String_Node_Str"",Androlib.getVersion());
  meta.put(""String_Node_Str"",mApkFile.getName());
  if (mDecodeResources != DECODE_RESOURCES_NONE && (hasManifest() || hasResources())) {
    meta.put(""String_Node_Str"",Boolean.valueOf(mAndrolib.isFrameworkApk(getResTable())));
    putUsesFramework(meta);
    putSdkInfo(meta);
    putPackageInfo(meta);
  }
  mAndrolib.writeMetaFile(mOutDir,meta);
}","private void writeMetaFile() throws AndrolibException {
  Map<String,Object> meta=new LinkedHashMap<String,Object>();
  meta.put(""String_Node_Str"",Androlib.getVersion());
  meta.put(""String_Node_Str"",mApkFile.getName());
  if (mDecodeResources != DECODE_RESOURCES_NONE && (hasManifest() || hasResources())) {
    meta.put(""String_Node_Str"",Boolean.valueOf(mAndrolib.isFrameworkApk(getResTable())));
    putUsesFramework(meta);
    putSdkInfo(meta);
    putPackageInfo(meta);
    putCompressionInfo(meta);
  }
  mAndrolib.writeMetaFile(mOutDir,meta);
}"
53417,"public void aaptPackage(File apkFile,File manifest,File resDir,File rawDir,File assetDir,File[] include,HashMap<String,Boolean> flags,String aaptPath) throws AndrolibException {
  List<String> cmd=new ArrayList<String>();
  if (!aaptPath.isEmpty()) {
    File aaptFile=new File(aaptPath);
    if (aaptFile.canRead() && aaptFile.exists()) {
      aaptFile.setExecutable(true);
      cmd.add(aaptFile.getPath());
      if (flags.get(""String_Node_Str"")) {
        LOGGER.info(aaptFile.getPath() + ""String_Node_Str"");
      }
    }
 else {
      LOGGER.warning(""String_Node_Str"");
      cmd.add(""String_Node_Str"");
    }
  }
 else {
    cmd.add(""String_Node_Str"");
  }
  cmd.add(""String_Node_Str"");
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (mMinSdkVersion != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mMinSdkVersion);
  }
  if (mTargetSdkVersion != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mTargetSdkVersion);
  }
  if (mMaxSdkVersion != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mMaxSdkVersion);
  }
  if (mPackageRenamed != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mPackageRenamed);
  }
  cmd.add(""String_Node_Str"");
  cmd.add(apkFile.getAbsolutePath());
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (include != null) {
    for (    File file : include) {
      cmd.add(""String_Node_Str"");
      cmd.add(file.getPath());
    }
  }
  if (resDir != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(resDir.getAbsolutePath());
  }
  if (manifest != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(manifest.getAbsolutePath());
  }
  if (assetDir != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(assetDir.getAbsolutePath());
  }
  if (rawDir != null) {
    cmd.add(rawDir.getAbsolutePath());
  }
  try {
    OS.exec(cmd.toArray(new String[0]));
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
}","public void aaptPackage(File apkFile,File manifest,File resDir,File rawDir,File assetDir,File[] include,HashMap<String,Boolean> flags,String aaptPath) throws AndrolibException {
  List<String> cmd=new ArrayList<String>();
  if (!aaptPath.isEmpty()) {
    File aaptFile=new File(aaptPath);
    if (aaptFile.canRead() && aaptFile.exists()) {
      aaptFile.setExecutable(true);
      cmd.add(aaptFile.getPath());
      if (flags.get(""String_Node_Str"")) {
        LOGGER.info(aaptFile.getPath() + ""String_Node_Str"");
      }
    }
 else {
      LOGGER.warning(""String_Node_Str"");
      cmd.add(""String_Node_Str"");
    }
  }
 else {
    cmd.add(""String_Node_Str"");
  }
  cmd.add(""String_Node_Str"");
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (mMinSdkVersion != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mMinSdkVersion);
  }
  if (mTargetSdkVersion != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mTargetSdkVersion);
  }
  if (mMaxSdkVersion != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mMaxSdkVersion);
  }
  if (mPackageRenamed != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mPackageRenamed);
  }
  cmd.add(""String_Node_Str"");
  cmd.add(apkFile.getAbsolutePath());
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (!(flags.get(""String_Node_Str""))) {
    cmd.add(""String_Node_Str"");
    cmd.add(""String_Node_Str"");
  }
  if (include != null) {
    for (    File file : include) {
      cmd.add(""String_Node_Str"");
      cmd.add(file.getPath());
    }
  }
  if (resDir != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(resDir.getAbsolutePath());
  }
  if (manifest != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(manifest.getAbsolutePath());
  }
  if (assetDir != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(assetDir.getAbsolutePath());
  }
  if (rawDir != null) {
    cmd.add(rawDir.getAbsolutePath());
  }
  try {
    OS.exec(cmd.toArray(new String[0]));
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
}"
53418,"@BeforeClass public static void beforeClass() throws BrutException {
  sTmpDir=new ExtFile(OS.createTempDirectory());
  sTestOrigDir=new ExtFile(sTmpDir,""String_Node_Str"");
  sTestNewDir=new ExtFile(sTmpDir,""String_Node_Str"");
  File testApk=new File(sTmpDir,""String_Node_Str"");
  LOGGER.info(""String_Node_Str"");
  TestUtils.copyResourceDir(BuildAndDecodeTest.class,""String_Node_Str"",sTestOrigDir);
  LOGGER.info(""String_Node_Str"");
  ExtFile blank=null;
  new Androlib().build(sTestOrigDir,testApk,BuildAndDecodeTest.returnStock(),blank,""String_Node_Str"");
  LOGGER.info(""String_Node_Str"");
  ApkDecoder apkDecoder=new ApkDecoder(testApk);
  apkDecoder.setOutDir(sTestNewDir);
  apkDecoder.decode();
}","@BeforeClass public static void beforeClass() throws BrutException, IOException {
  sTmpDir=new ExtFile(OS.createTempDirectory());
  sTestOrigDir=new ExtFile(sTmpDir,""String_Node_Str"");
  sTestNewDir=new ExtFile(sTmpDir,""String_Node_Str"");
  File testApk=new File(sTmpDir,""String_Node_Str"");
  LOGGER.info(""String_Node_Str"");
  TestUtils.copyResourceDir(BuildAndDecodeTest.class,""String_Node_Str"",sTestOrigDir);
  LOGGER.info(""String_Node_Str"");
  ExtFile blank=null;
  new Androlib().build(sTestOrigDir,testApk,BuildAndDecodeTest.returnStock(),blank,""String_Node_Str"");
  LOGGER.info(""String_Node_Str"");
  ApkDecoder apkDecoder=new ApkDecoder(testApk);
  apkDecoder.setOutDir(sTestNewDir);
  apkDecoder.decode();
}"
53419,"public void buildApk(File appDir,File outApk,HashMap<String,Boolean> flags) throws AndrolibException {
  LOGGER.info(""String_Node_Str"");
  if (outApk.exists()) {
    outApk.delete();
  }
 else {
    File outDir=outApk.getParentFile();
    if (outDir != null && !outDir.exists()) {
      outDir.mkdirs();
    }
  }
  File assetDir=new File(appDir,""String_Node_Str"");
  if (!assetDir.exists()) {
    assetDir=null;
  }
  mAndRes.aaptPackage(outApk,null,null,new File(appDir,APK_DIRNAME),assetDir,null,flags);
  if (flags.get(""String_Node_Str"")) {
    try {
      LOGGER.info(""String_Node_Str"");
      ZipFile editOrig=new ZipFile(mOrigApkFile.getAbsoluteFile());
      ZipParameters parameters=new ZipParameters();
      parameters.setCompressionMethod(Zip4jConstants.COMP_STORE);
      parameters.setCompressionLevel(0);
      parameters.setIncludeRootFolder(true);
      parameters.setRootFolderInZip(""String_Node_Str"");
      editOrig.addFolder(new File(appDir,APK_DIRNAME + ""String_Node_Str"").getAbsolutePath(),parameters);
      if (assetDir.exists()) {
      }
      parameters.setFileNameInZip(""String_Node_Str"");
    }
 catch (    ZipException e) {
      LOGGER.warning(e.getMessage());
    }
  }
}","public void buildApk(File appDir,File outApk,HashMap<String,Boolean> flags) throws AndrolibException {
  LOGGER.info(""String_Node_Str"");
  if (outApk.exists()) {
    outApk.delete();
  }
 else {
    File outDir=outApk.getParentFile();
    if (outDir != null && !outDir.exists()) {
      outDir.mkdirs();
    }
  }
  File assetDir=new File(appDir,""String_Node_Str"");
  if (!assetDir.exists()) {
    assetDir=null;
  }
  mAndRes.aaptPackage(outApk,null,null,new File(appDir,APK_DIRNAME),assetDir,null,flags);
  if (flags.get(""String_Node_Str"")) {
    try {
      LOGGER.info(""String_Node_Str"");
      ZipFile editOrig=new ZipFile(mOrigApkFile.getAbsoluteFile());
      ZipParameters parameters=new ZipParameters();
      parameters.setCompressionMethod(Zip4jConstants.COMP_STORE);
      parameters.setCompressionLevel(0);
      parameters.setIncludeRootFolder(true);
      parameters.setRootFolderInZip(""String_Node_Str"");
      editOrig.addFolder(new File(appDir,APK_DIRNAME + ""String_Node_Str"").getAbsolutePath(),parameters);
      if (assetDir != null) {
      }
      parameters.setFileNameInZip(""String_Node_Str"");
    }
 catch (    ZipException ex) {
      throw new AndrolibException(ex);
    }
  }
}"
53420,"private void decode() throws AndrolibException {
  try {
    baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),new DexFile(mApkFile),false,mOutDir.getAbsolutePath(),null,null,null,false,true,true,true,false,false,mDebug ? main.FULLMERGE : 0,false,mDebug ? true : false,null);
  }
 catch (  IOException ex) {
    throw new AndrolibException(ex);
  }
}","private void decode() throws AndrolibException {
  if (mDebug) {
    ClassPath.dontLoadClassPath=true;
  }
  try {
    baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),new DexFile(mApkFile),false,mOutDir.getAbsolutePath(),null,null,null,false,true,true,true,false,false,mDebug ? main.DIFFPRE : 0,false,false,null);
  }
 catch (  IOException ex) {
    throw new AndrolibException(ex);
  }
}"
53421,"public String getType() throws AndrolibException {
  if (mItems.length == 0) {
    return null;
  }
  String type=mItems[0].getType();
  if (!""String_Node_Str"".equals(type) && !""String_Node_Str"".equals(type)) {
    return null;
  }
  for (int i=1; i < mItems.length; i++) {
    if (StringUtils.containsIgnoreCase(""String_Node_Str"",mItems[i].encodeAsResXmlItemValue()) || mItems[i].getType().equalsIgnoreCase(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
    if (!type.equals(mItems[i].getType())) {
      return null;
    }
  }
  return type;
}","public String getType() throws AndrolibException {
  if (mItems.length == 0) {
    return null;
  }
  String type=mItems[0].getType();
  if (!""String_Node_Str"".equals(type) && !""String_Node_Str"".equals(type)) {
    return null;
  }
  for (int i=1; i < mItems.length; i++) {
    if (!type.equals(mItems[i].getType())) {
      return null;
    }
  }
  return type;
}"
53422,"@Test public void valuesArraysTest() throws BrutException {
  compareValuesFiles(""String_Node_Str"");
}","@Test public void valuesArraysTest() throws BrutException {
  compareValuesFiles(""String_Node_Str"");
  compareValuesFiles(""String_Node_Str"");
}"
53423,"private static List<Integer> findNonPositionalSubstitutions(String str,int max){
  int pos=0;
  int count=0;
  int length=str.length();
  List<Integer> ret=new ArrayList<Integer>();
  while ((pos=str.indexOf('%',pos)) != -1) {
    if (pos + 1 == length) {
      break;
    }
    char c=str.charAt(pos + 1);
    if (c >= 'a' && c <= 'z') {
      ret.add(pos);
      if (max != -1 && ++count >= max) {
        break;
      }
    }
    pos+=2;
  }
  return ret;
}","/** 
 * It searches for ""%"", but not ""%%"" nor ""%(\d)+\$""
 */
private static List<Integer> findNonPositionalSubstitutions(String str,int max){
  int pos=0;
  int pos2=0;
  int count=0;
  int length=str.length();
  List<Integer> ret=new ArrayList<Integer>();
  while ((pos2=(pos=str.indexOf('%',pos2)) + 1) != 0) {
    if (pos2 == length) {
      break;
    }
    char c=str.charAt(pos2++);
    if (c == '%') {
      continue;
    }
    if (c >= '0' && c <= '9' && pos2 < length) {
      do {
        c=str.charAt(pos2++);
      }
 while (c >= '0' && c <= '9' && pos2 < length);
      if (c == '$') {
        continue;
      }
    }
    ret.add(pos);
    if (max != -1 && ++count >= max) {
      break;
    }
  }
  return ret;
}"
53424,"public void serializeToResValuesXml(XmlSerializer serializer,ResResource res) throws IOException, AndrolibException {
  String type=res.getResSpec().getType().getName();
  boolean item=!""String_Node_Str"".equals(mType) && !type.equals(mType);
  String tagName=item ? ""String_Node_Str"" : type;
  serializer.startTag(null,tagName);
  if (item) {
    serializer.attribute(null,""String_Node_Str"",type);
  }
  serializer.attribute(null,""String_Node_Str"",res.getResSpec().getName());
  serializeExtraXmlAttrs(serializer,res);
  String body=encodeAsResXmlValue();
  if (!body.isEmpty()) {
    serializer.ignorableWhitespace(body);
  }
  serializer.endTag(null,tagName);
}","public void serializeToResValuesXml(XmlSerializer serializer,ResResource res) throws IOException, AndrolibException {
  String type=res.getResSpec().getType().getName();
  boolean item=!""String_Node_Str"".equals(mType) && !type.equals(mType);
  String body=encodeAsResXmlValue();
  if (body.contains(""String_Node_Str"")) {
    item=true;
  }
  String tagName=item ? ""String_Node_Str"" : type;
  serializer.startTag(null,tagName);
  if (item) {
    serializer.attribute(null,""String_Node_Str"",type);
  }
  serializer.attribute(null,""String_Node_Str"",res.getResSpec().getName());
  serializeExtraXmlAttrs(serializer,res);
  if (!body.isEmpty()) {
    serializer.ignorableWhitespace(body);
  }
  serializer.endTag(null,tagName);
}"
53425,"private String generateQualifiers(){
  StringBuilder ret=new StringBuilder();
  if (mcc != 0) {
    ret.append(""String_Node_Str"").append(String.format(""String_Node_Str"",mcc));
    if (mnc != 0) {
      ret.append(""String_Node_Str"").append(mnc);
    }
  }
  if (language[0] != '\00') {
    ret.append('-').append(language);
    if (country[0] != '\00') {
      ret.append(""String_Node_Str"").append(country);
    }
  }
  if (smallestScreenWidthDp != 0) {
    ret.append(""String_Node_Str"").append(smallestScreenWidthDp).append(""String_Node_Str"");
  }
  if (screenWidthDp != 0) {
    ret.append(""String_Node_Str"").append(screenWidthDp).append(""String_Node_Str"");
  }
  if (screenHeightDp != 0) {
    ret.append(""String_Node_Str"").append(screenHeightDp).append(""String_Node_Str"");
  }
switch (screenLayout & MASK_SCREENSIZE) {
case SCREENSIZE_SMALL:
    ret.append(""String_Node_Str"");
  break;
case SCREENSIZE_NORMAL:
ret.append(""String_Node_Str"");
break;
case SCREENSIZE_LARGE:
ret.append(""String_Node_Str"");
break;
case SCREENSIZE_XLARGE:
ret.append(""String_Node_Str"");
break;
}
switch (screenLayout & MASK_SCREENLONG) {
case SCREENLONG_YES:
ret.append(""String_Node_Str"");
break;
case SCREENLONG_NO:
ret.append(""String_Node_Str"");
break;
}
switch (orientation) {
case ORIENTATION_PORT:
ret.append(""String_Node_Str"");
break;
case ORIENTATION_LAND:
ret.append(""String_Node_Str"");
break;
case ORIENTATION_SQUARE:
ret.append(""String_Node_Str"");
break;
}
switch (uiMode & MASK_UI_MODE_TYPE) {
case UI_MODE_TYPE_CAR:
ret.append(""String_Node_Str"");
break;
case UI_MODE_TYPE_DESK:
ret.append(""String_Node_Str"");
break;
}
switch (uiMode & MASK_UI_MODE_NIGHT) {
case UI_MODE_NIGHT_YES:
ret.append(""String_Node_Str"");
break;
case UI_MODE_NIGHT_NO:
ret.append(""String_Node_Str"");
break;
}
switch (density) {
case DENSITY_DEFAULT:
break;
case DENSITY_LOW:
ret.append(""String_Node_Str"");
break;
case DENSITY_TV:
ret.append(""String_Node_Str"");
break;
case DENSITY_HIGH:
ret.append(""String_Node_Str"");
break;
case DENSITY_XHIGH:
ret.append(""String_Node_Str"");
break;
case DENSITY_NONE:
ret.append(""String_Node_Str"");
break;
default :
ret.append('-').append(density).append(""String_Node_Str"");
}
switch (touchscreen) {
case TOUCHSCREEN_NOTOUCH:
ret.append(""String_Node_Str"");
break;
case TOUCHSCREEN_STYLUS:
ret.append(""String_Node_Str"");
break;
case TOUCHSCREEN_FINGER:
ret.append(""String_Node_Str"");
break;
}
switch (inputFlags & MASK_KEYSHIDDEN) {
case KEYSHIDDEN_NO:
ret.append(""String_Node_Str"");
break;
case KEYSHIDDEN_YES:
ret.append(""String_Node_Str"");
break;
case KEYSHIDDEN_SOFT:
ret.append(""String_Node_Str"");
break;
}
switch (keyboard) {
case KEYBOARD_NOKEYS:
ret.append(""String_Node_Str"");
break;
case KEYBOARD_QWERTY:
ret.append(""String_Node_Str"");
break;
case KEYBOARD_12KEY:
ret.append(""String_Node_Str"");
break;
}
switch (inputFlags & MASK_NAVHIDDEN) {
case NAVHIDDEN_NO:
ret.append(""String_Node_Str"");
break;
case NAVHIDDEN_YES:
ret.append(""String_Node_Str"");
break;
}
switch (navigation) {
case NAVIGATION_NONAV:
ret.append(""String_Node_Str"");
break;
case NAVIGATION_DPAD:
ret.append(""String_Node_Str"");
break;
case NAVIGATION_TRACKBALL:
ret.append(""String_Node_Str"");
break;
case NAVIGATION_WHEEL:
ret.append(""String_Node_Str"");
break;
}
if (screenWidth != 0 && screenHeight != 0) {
if (screenWidth > screenHeight) {
ret.append(String.format(""String_Node_Str"",screenWidth,screenHeight));
}
 else {
ret.append(String.format(""String_Node_Str"",screenHeight,screenWidth));
}
}
if (sdkVersion > getNaturalSdkVersionRequirement()) {
ret.append(""String_Node_Str"").append(sdkVersion);
}
if (isInvalid) {
ret.append(""String_Node_Str"" + sErrCounter++);
}
return ret.toString();
}","private String generateQualifiers(){
  StringBuilder ret=new StringBuilder();
  if (mcc != 0) {
    ret.append(""String_Node_Str"").append(String.format(""String_Node_Str"",mcc));
    if (mnc != 0) {
      ret.append(""String_Node_Str"").append(mnc);
    }
  }
  if (language[0] != '\00') {
    ret.append('-').append(language);
    if (country[0] != '\00') {
      ret.append(""String_Node_Str"").append(country);
    }
  }
  if (smallestScreenWidthDp != 0) {
    ret.append(""String_Node_Str"").append(smallestScreenWidthDp).append(""String_Node_Str"");
  }
  if (screenWidthDp != 0) {
    ret.append(""String_Node_Str"").append(screenWidthDp).append(""String_Node_Str"");
  }
  if (screenHeightDp != 0) {
    ret.append(""String_Node_Str"").append(screenHeightDp).append(""String_Node_Str"");
  }
switch (screenLayout & MASK_SCREENSIZE) {
case SCREENSIZE_SMALL:
    ret.append(""String_Node_Str"");
  break;
case SCREENSIZE_NORMAL:
ret.append(""String_Node_Str"");
break;
case SCREENSIZE_LARGE:
ret.append(""String_Node_Str"");
break;
case SCREENSIZE_XLARGE:
ret.append(""String_Node_Str"");
break;
}
switch (screenLayout & MASK_SCREENLONG) {
case SCREENLONG_YES:
ret.append(""String_Node_Str"");
break;
case SCREENLONG_NO:
ret.append(""String_Node_Str"");
break;
}
switch (orientation) {
case ORIENTATION_PORT:
ret.append(""String_Node_Str"");
break;
case ORIENTATION_LAND:
ret.append(""String_Node_Str"");
break;
case ORIENTATION_SQUARE:
ret.append(""String_Node_Str"");
break;
}
switch (uiMode & MASK_UI_MODE_TYPE) {
case UI_MODE_TYPE_CAR:
ret.append(""String_Node_Str"");
break;
case UI_MODE_TYPE_DESK:
ret.append(""String_Node_Str"");
break;
case UI_MODE_TYPE_TELEVISION:
ret.append(""String_Node_Str"");
break;
}
switch (uiMode & MASK_UI_MODE_NIGHT) {
case UI_MODE_NIGHT_YES:
ret.append(""String_Node_Str"");
break;
case UI_MODE_NIGHT_NO:
ret.append(""String_Node_Str"");
break;
}
switch (density) {
case DENSITY_DEFAULT:
break;
case DENSITY_LOW:
ret.append(""String_Node_Str"");
break;
case DENSITY_MEDIUM:
ret.append(""String_Node_Str"");
break;
case DENSITY_HIGH:
ret.append(""String_Node_Str"");
break;
case DENSITY_XHIGH:
ret.append(""String_Node_Str"");
break;
case DENSITY_NONE:
ret.append(""String_Node_Str"");
break;
default :
ret.append('-').append(density).append(""String_Node_Str"");
}
switch (touchscreen) {
case TOUCHSCREEN_NOTOUCH:
ret.append(""String_Node_Str"");
break;
case TOUCHSCREEN_STYLUS:
ret.append(""String_Node_Str"");
break;
case TOUCHSCREEN_FINGER:
ret.append(""String_Node_Str"");
break;
}
switch (inputFlags & MASK_KEYSHIDDEN) {
case KEYSHIDDEN_NO:
ret.append(""String_Node_Str"");
break;
case KEYSHIDDEN_YES:
ret.append(""String_Node_Str"");
break;
case KEYSHIDDEN_SOFT:
ret.append(""String_Node_Str"");
break;
}
switch (keyboard) {
case KEYBOARD_NOKEYS:
ret.append(""String_Node_Str"");
break;
case KEYBOARD_QWERTY:
ret.append(""String_Node_Str"");
break;
case KEYBOARD_12KEY:
ret.append(""String_Node_Str"");
break;
}
switch (inputFlags & MASK_NAVHIDDEN) {
case NAVHIDDEN_NO:
ret.append(""String_Node_Str"");
break;
case NAVHIDDEN_YES:
ret.append(""String_Node_Str"");
break;
}
switch (navigation) {
case NAVIGATION_NONAV:
ret.append(""String_Node_Str"");
break;
case NAVIGATION_DPAD:
ret.append(""String_Node_Str"");
break;
case NAVIGATION_TRACKBALL:
ret.append(""String_Node_Str"");
break;
case NAVIGATION_WHEEL:
ret.append(""String_Node_Str"");
break;
}
if (screenWidth != 0 && screenHeight != 0) {
if (screenWidth > screenHeight) {
ret.append(String.format(""String_Node_Str"",screenWidth,screenHeight));
}
 else {
ret.append(String.format(""String_Node_Str"",screenHeight,screenWidth));
}
}
if (sdkVersion > getNaturalSdkVersionRequirement()) {
ret.append(""String_Node_Str"").append(sdkVersion);
}
if (isInvalid) {
ret.append(""String_Node_Str"" + sErrCounter++);
}
return ret.toString();
}"
53426,"public ResConfigFlags(short mcc,short mnc,char[] language,char[] country,byte orientation,byte touchscreen,short density,byte keyboard,byte navigation,byte inputFlags,short screenWidth,short screenHeight,short sdkVersion,byte screenLayout,byte uiMode,short smallestScreenWidthDp,short screenWidthDp,short screenHeightDp,boolean isInvalid){
  if (orientation < 0 || orientation > 3) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",orientation);
    orientation=0;
    isInvalid=true;
  }
  if (touchscreen < 0 || touchscreen > 3) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",touchscreen);
    touchscreen=0;
    isInvalid=true;
  }
  if (density < -1) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",density);
    density=0;
    isInvalid=true;
  }
  if (keyboard < 0 || keyboard > 3) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",keyboard);
    keyboard=0;
    isInvalid=true;
  }
  if (navigation < 0 || navigation > 4) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",navigation);
    navigation=0;
    isInvalid=true;
  }
  this.mcc=mcc;
  this.mnc=mnc;
  this.language=language;
  this.country=country;
  this.orientation=orientation;
  this.touchscreen=touchscreen;
  this.density=density;
  this.keyboard=keyboard;
  this.navigation=navigation;
  this.inputFlags=inputFlags;
  this.screenWidth=screenWidth;
  this.screenHeight=screenHeight;
  this.sdkVersion=sdkVersion;
  this.screenLayout=screenLayout;
  this.uiMode=uiMode;
  this.smallestScreenWidthDp=smallestScreenWidthDp;
  this.screenWidthDp=screenWidthDp;
  this.screenHeightDp=screenHeightDp;
  this.isInvalid=isInvalid;
  mQualifiers=generateQualifiers();
}","public ResConfigFlags(short mcc,short mnc,char[] language,char[] country,byte orientation,byte touchscreen,short density,byte keyboard,byte navigation,byte inputFlags,short screenWidth,short screenHeight,short sdkVersion,byte screenLayout,byte uiMode,short smallestScreenWidthDp,short screenWidthDp,short screenHeightDp,boolean isInvalid){
  if (orientation < 0 || orientation > 3) {
    LOGGER.warning(""String_Node_Str"" + orientation);
    orientation=0;
    isInvalid=true;
  }
  if (touchscreen < 0 || touchscreen > 3) {
    LOGGER.warning(""String_Node_Str"" + touchscreen);
    touchscreen=0;
    isInvalid=true;
  }
  if (density < -1) {
    LOGGER.warning(""String_Node_Str"" + density);
    density=0;
    isInvalid=true;
  }
  if (keyboard < 0 || keyboard > 3) {
    LOGGER.warning(""String_Node_Str"" + keyboard);
    keyboard=0;
    isInvalid=true;
  }
  if (navigation < 0 || navigation > 4) {
    LOGGER.warning(""String_Node_Str"" + navigation);
    navigation=0;
    isInvalid=true;
  }
  this.mcc=mcc;
  this.mnc=mnc;
  this.language=language;
  this.country=country;
  this.orientation=orientation;
  this.touchscreen=touchscreen;
  this.density=density;
  this.keyboard=keyboard;
  this.navigation=navigation;
  this.inputFlags=inputFlags;
  this.screenWidth=screenWidth;
  this.screenHeight=screenHeight;
  this.sdkVersion=sdkVersion;
  this.screenLayout=screenLayout;
  this.uiMode=uiMode;
  this.smallestScreenWidthDp=smallestScreenWidthDp;
  this.screenWidthDp=screenWidthDp;
  this.screenHeightDp=screenHeightDp;
  this.isInvalid=isInvalid;
  mQualifiers=generateQualifiers();
}"
53427,"private static List<Integer> findNonPositionalSubstitutions(String str,int max){
  int pos=0;
  int count=0;
  List<Integer> ret=new ArrayList<Integer>();
  while ((pos=str.indexOf('%',pos)) != -1) {
    if (str.charAt(pos + 1) != '%') {
      ret.add(pos);
      if (max != -1 && ++count >= max) {
        break;
      }
    }
    pos+=2;
  }
  return ret;
}","private static List<Integer> findNonPositionalSubstitutions(String str,int max){
  int pos=0;
  int count=0;
  int length=str.length();
  List<Integer> ret=new ArrayList<Integer>();
  while ((pos=str.indexOf('%',pos)) != -1) {
    if (pos + 1 == length) {
      break;
    }
    if (str.charAt(pos + 1) != '%') {
      ret.add(pos);
      if (max != -1 && ++count >= max) {
        break;
      }
    }
    pos+=2;
  }
  return ret;
}"
53428,"private void addMissingResSpecs() throws AndrolibException {
  int resId=mResId & 0xffff0000;
  for (int i=0; i < mMissingResSpecs.length; i++) {
    if (!mMissingResSpecs[i]) {
      continue;
    }
    ResResSpec spec=new ResResSpec(new ResID(resId | i),String.format(""String_Node_Str"",i),mPkg,mType);
    mPkg.addResSpec(spec);
    mType.addResSpec(spec);
    ResValue value=new ResBoolValue(false);
    ResResource res=new ResResource(mPkg.getConfig(new ResConfigFlags()),spec,value);
    mPkg.addResource(res);
    mConfig.addResource(res);
    spec.addResource(res);
  }
}","private void addMissingResSpecs() throws AndrolibException {
  int resId=mResId & 0xffff0000;
  for (int i=0; i < mMissingResSpecs.length; i++) {
    if (!mMissingResSpecs[i]) {
      continue;
    }
    ResResSpec spec=new ResResSpec(new ResID(resId | i),String.format(""String_Node_Str"",i),mPkg,mType);
    mPkg.addResSpec(spec);
    mType.addResSpec(spec);
    ResValue value=new ResBoolValue(false);
    ResResource res=new ResResource(mPkg.getOrCreateConfig(new ResConfigFlags()),spec,value);
    mPkg.addResource(res);
    mConfig.addResource(res);
    spec.addResource(res);
  }
}"
53429,"private void find9patchChunk(DataInput di) throws AndrolibException, IOException {
  di.skipBytes(8);
  while (true) {
    int size;
    try {
      size=di.readInt();
    }
 catch (    IOException ex) {
      throw new AndrolibException(""String_Node_Str"",ex);
    }
    if (di.readInt() == NP_CHUNK_TYPE) {
      return;
    }
    di.skipBytes(size + 4);
  }
}","private void find9patchChunk(DataInput di) throws AndrolibException, IOException {
  di.skipBytes(8);
  while (true) {
    int size;
    try {
      size=di.readInt();
    }
 catch (    IOException ex) {
      throw new CantFind9PatchChunk(""String_Node_Str"",ex);
    }
    if (di.readInt() == NP_CHUNK_TYPE) {
      return;
    }
    di.skipBytes(size + 4);
  }
}"
53430,"private File getFrameworkApk(int id,String frameTag) throws AndrolibException {
  File dir=getFrameworkDir();
  File apk=new File(dir,String.valueOf(id) + '-' + frameTag+ ""String_Node_Str"");
  if (apk.exists()) {
    return apk;
  }
  apk=new File(dir,String.valueOf(id) + ""String_Node_Str"");
  if (apk.exists()) {
    return apk;
  }
  if (id == 1) {
    InputStream in=null;
    OutputStream out=null;
    try {
      in=AndrolibResources.class.getResourceAsStream(""String_Node_Str"");
      out=new FileOutputStream(apk);
      IOUtils.copy(in,out);
      return apk;
    }
 catch (    IOException ex) {
      throw new AndrolibException(ex);
    }
 finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException ex) {
        }
      }
      if (out != null) {
        try {
          out.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  throw new CantFindFrameworkResException(id);
}","private File getFrameworkApk(int id,String frameTag) throws AndrolibException {
  File dir=getFrameworkDir();
  File apk;
  if (frameTag != null) {
    apk=new File(dir,String.valueOf(id) + '-' + frameTag+ ""String_Node_Str"");
    if (apk.exists()) {
      return apk;
    }
  }
  apk=new File(dir,String.valueOf(id) + ""String_Node_Str"");
  if (apk.exists()) {
    return apk;
  }
  if (id == 1) {
    InputStream in=null;
    OutputStream out=null;
    try {
      in=AndrolibResources.class.getResourceAsStream(""String_Node_Str"");
      out=new FileOutputStream(apk);
      IOUtils.copy(in,out);
      return apk;
    }
 catch (    IOException ex) {
      throw new AndrolibException(ex);
    }
 finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException ex) {
        }
      }
      if (out != null) {
        try {
          out.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  throw new CantFindFrameworkResException(id);
}"
53431,"public boolean buildResourcesFull(File appDir,boolean forceBuildAll,boolean framework,Map<String,Object> usesFramework) throws AndrolibException {
  try {
    if (!new File(appDir,""String_Node_Str"").exists()) {
      return false;
    }
    if (!forceBuildAll) {
      LOGGER.info(""String_Node_Str"");
    }
    File apkDir=new File(appDir,APK_DIRNAME);
    if (forceBuildAll || isModified(newFiles(APP_RESOURCES_FILENAMES,appDir),newFiles(APK_RESOURCES_FILENAMES,apkDir))) {
      LOGGER.info(""String_Node_Str"");
      File apkFile=File.createTempFile(""String_Node_Str"",null);
      apkFile.delete();
      File ninePatch=new File(appDir,""String_Node_Str"");
      if (!ninePatch.exists()) {
        ninePatch=null;
      }
      mAndRes.aaptPackage(apkFile,new File(appDir,""String_Node_Str""),new File(appDir,""String_Node_Str""),ninePatch,null,parseUsesFramework(usesFramework),false,framework);
      new ExtFile(apkFile).getDirectory().copyToDir(apkDir,APK_RESOURCES_FILENAMES);
    }
    return true;
  }
 catch (  IOException ex) {
    throw new AndrolibException(ex);
  }
catch (  DirectoryException ex) {
    throw new AndrolibException(ex);
  }
}","public boolean buildResourcesFull(File appDir,boolean forceBuildAll,boolean framework,Map<String,Object> usesFramework) throws AndrolibException {
  try {
    if (!new File(appDir,""String_Node_Str"").exists()) {
      return false;
    }
    if (!forceBuildAll) {
      LOGGER.info(""String_Node_Str"");
    }
    File apkDir=new File(appDir,APK_DIRNAME);
    if (forceBuildAll || isModified(newFiles(APP_RESOURCES_FILENAMES,appDir),newFiles(APK_RESOURCES_FILENAMES,apkDir))) {
      LOGGER.info(""String_Node_Str"");
      File apkFile=File.createTempFile(""String_Node_Str"",null);
      apkFile.delete();
      File ninePatch=new File(appDir,""String_Node_Str"");
      if (!ninePatch.exists()) {
        ninePatch=null;
      }
      mAndRes.aaptPackage(apkFile,new File(appDir,""String_Node_Str""),new File(appDir,""String_Node_Str""),ninePatch,null,parseUsesFramework(usesFramework),false,framework);
      Directory tmpDir=new ExtFile(apkFile).getDirectory();
      tmpDir.copyToDir(apkDir,tmpDir.containsDir(""String_Node_Str"") ? APK_RESOURCES_FILENAMES : APK_RESOURCES_WITHOUT_RES_FILENAMES);
    }
    return true;
  }
 catch (  IOException ex) {
    throw new AndrolibException(ex);
  }
catch (  DirectoryException ex) {
    throw new AndrolibException(ex);
  }
}"
53432,"public void decode(ResTable resTable,ExtFile apkFile,File outDir) throws AndrolibException {
  Duo<ResFileDecoder,ResAttrDecoder> duo=getResFileDecoder();
  ResFileDecoder fileDecoder=duo.m1;
  ResAttrDecoder attrDecoder=duo.m2;
  attrDecoder.setCurrentPackage(resTable.listMainPackages().iterator().next());
  Directory in, out;
  try {
    in=apkFile.getDirectory();
    out=new FileDirectory(outDir);
    fileDecoder.decode(in,""String_Node_Str"",out,""String_Node_Str"",""String_Node_Str"");
    in=in.getDir(""String_Node_Str"");
    out=out.createDir(""String_Node_Str"");
  }
 catch (  DirectoryException ex) {
    throw new AndrolibException(ex);
  }
  ExtMXSerializer xmlSerializer=getResXmlSerializer();
  for (  ResPackage pkg : resTable.listMainPackages()) {
    attrDecoder.setCurrentPackage(pkg);
    for (    ResResource res : pkg.listFiles()) {
      fileDecoder.decode(res,in,out);
    }
    for (    ResValuesFile valuesFile : pkg.listValuesFiles()) {
      generateValuesFile(valuesFile,out,xmlSerializer);
    }
    generatePublicXml(pkg,out,xmlSerializer);
  }
}","public void decode(ResTable resTable,ExtFile apkFile,File outDir) throws AndrolibException {
  Duo<ResFileDecoder,ResAttrDecoder> duo=getResFileDecoder();
  ResFileDecoder fileDecoder=duo.m1;
  ResAttrDecoder attrDecoder=duo.m2;
  attrDecoder.setCurrentPackage(resTable.listMainPackages().iterator().next());
  Directory inApk, in=null, out;
  try {
    inApk=apkFile.getDirectory();
    out=new FileDirectory(outDir);
    fileDecoder.decode(inApk,""String_Node_Str"",out,""String_Node_Str"",""String_Node_Str"");
    if (inApk.containsDir(""String_Node_Str"")) {
      in=inApk.getDir(""String_Node_Str"");
    }
    out=out.createDir(""String_Node_Str"");
  }
 catch (  DirectoryException ex) {
    throw new AndrolibException(ex);
  }
  ExtMXSerializer xmlSerializer=getResXmlSerializer();
  for (  ResPackage pkg : resTable.listMainPackages()) {
    attrDecoder.setCurrentPackage(pkg);
    for (    ResResource res : pkg.listFiles()) {
      fileDecoder.decode(res,in,out);
    }
    for (    ResValuesFile valuesFile : pkg.listValuesFiles()) {
      generateValuesFile(valuesFile,out,xmlSerializer);
    }
    generatePublicXml(pkg,out,xmlSerializer);
  }
}"
53433,"private void inject() throws AndrolibException {
  String definition=nextAndAppend();
  if (definition.contains(""String_Node_Str"")) {
    nextAndAppend();
    return;
  }
  injectParameters(definition);
  boolean end=false;
  while (!end) {
    end=step();
  }
}","private void inject() throws AndrolibException {
  String definition=nextAndAppend();
  if (definition.contains(""String_Node_Str"") || definition.contains(""String_Node_Str"")) {
    nextAndAppend();
    return;
  }
  injectParameters(definition);
  boolean end=false;
  while (!end) {
    end=step();
  }
}"
53434,"public static String escapeForResXml(String value){
  if (value.isEmpty()) {
    return value;
  }
  StringBuilder out=new StringBuilder(value.length() + 10);
  char[] chars=value.toCharArray();
switch (chars[0]) {
case '@':
case '#':
case '?':
    out.append('\\');
}
boolean space=true;
for (int i=0; i < chars.length; i++) {
  char c=chars[i];
  if (c == ' ') {
    if (space) {
      out.append(""String_Node_Str"");
    }
 else {
      out.append(c);
      space=true;
    }
    continue;
  }
  space=false;
switch (c) {
case '\\':
case '\'':
case '""':
    out.append('\\');
  break;
case '\n':
out.append(""String_Node_Str"");
continue;
}
out.append(c);
}
if (space) {
out.deleteCharAt(out.length() - 1);
out.append(""String_Node_Str"");
}
return out.toString();
}","public static String escapeForResXml(String value){
  if (value.isEmpty()) {
    return value;
  }
  StringBuilder out=new StringBuilder(value.length() + 10);
  char[] chars=value.toCharArray();
switch (chars[0]) {
case '@':
case '#':
case '?':
    out.append('\\');
}
boolean space=true;
for (int i=0; i < chars.length; i++) {
  char c=chars[i];
  if (c == ' ') {
    if (space) {
      out.append(""String_Node_Str"");
    }
 else {
      out.append(c);
      space=true;
    }
    continue;
  }
  space=false;
switch (c) {
case '\\':
case '\'':
case '""':
    out.append('\\');
  break;
case '\n':
out.append(""String_Node_Str"");
continue;
}
out.append(c);
}
if (space && out.charAt(out.length() - 1) == ' ') {
out.deleteCharAt(out.length() - 1);
out.append(""String_Node_Str"");
}
return out.toString();
}"
53435,"public static Duo<TypeName,Integer> fetchFromInternalName(String internal) throws AndrolibException {
  String origInternal=internal;
  int array=0;
  boolean isArray=false;
  do {
    if (internal.isEmpty()) {
      throw new AndrolibException(""String_Node_Str"" + origInternal);
    }
    isArray=internal.charAt(0) == '[';
    if (isArray) {
      array++;
      internal=internal.substring(1);
    }
  }
 while (isArray);
  int length=array + 1;
  String package_=null;
  String type=null;
  String innerType=null;
switch (internal.charAt(0)) {
case 'B':
    type=""String_Node_Str"";
  break;
case 'C':
type=""String_Node_Str"";
break;
case 'D':
type=""String_Node_Str"";
break;
case 'F':
type=""String_Node_Str"";
break;
case 'I':
type=""String_Node_Str"";
break;
case 'J':
type=""String_Node_Str"";
break;
case 'S':
type=""String_Node_Str"";
break;
case 'Z':
type=""String_Node_Str"";
break;
case 'V':
type=""String_Node_Str"";
break;
case 'L':
int pos=internal.indexOf(';');
if (pos == -1) {
throw new AndrolibException(""String_Node_Str"" + origInternal);
}
length+=pos;
internal=internal.substring(1,pos);
pos=internal.lastIndexOf('/');
package_=internal.substring(0,pos).replace('/','.');
type=internal.substring(pos + 1);
pos=type.indexOf('$');
if (pos != -1) {
innerType=type.substring(pos + 1);
type=type.substring(0,pos);
}
break;
default :
throw new AndrolibException(""String_Node_Str"" + origInternal);
}
return new Duo<TypeName,Integer>(new TypeName(package_,type,innerType,array),length);
}","public static Duo<TypeName,Integer> fetchFromInternalName(String internal) throws AndrolibException {
  String origInternal=internal;
  int array=0;
  boolean isArray=false;
  do {
    if (internal.isEmpty()) {
      throw new AndrolibException(""String_Node_Str"" + origInternal);
    }
    isArray=internal.charAt(0) == '[';
    if (isArray) {
      array++;
      internal=internal.substring(1);
    }
  }
 while (isArray);
  int length=array + 1;
  String package_=null;
  String type=null;
  String innerType=null;
switch (internal.charAt(0)) {
case 'B':
    type=""String_Node_Str"";
  break;
case 'C':
type=""String_Node_Str"";
break;
case 'D':
type=""String_Node_Str"";
break;
case 'F':
type=""String_Node_Str"";
break;
case 'I':
type=""String_Node_Str"";
break;
case 'J':
type=""String_Node_Str"";
break;
case 'S':
type=""String_Node_Str"";
break;
case 'Z':
type=""String_Node_Str"";
break;
case 'V':
type=""String_Node_Str"";
break;
case 'L':
int pos=internal.indexOf(';');
if (pos == -1) {
throw new AndrolibException(""String_Node_Str"" + origInternal);
}
length+=pos;
internal=internal.substring(1,pos);
pos=internal.lastIndexOf('/');
if (pos == -1) {
package_=""String_Node_Str"";
type=internal;
}
 else {
package_=internal.substring(0,pos).replace('/','.');
type=internal.substring(pos + 1);
}
pos=type.indexOf('$');
if (pos != -1) {
innerType=type.substring(pos + 1);
type=type.substring(0,pos);
}
break;
default :
throw new AndrolibException(""String_Node_Str"" + origInternal);
}
return new Duo<TypeName,Integer>(new TypeName(package_,type,innerType,array),length);
}"
53436,"public static String escapeForResXml(String value){
  value=value.replace(""String_Node_Str"",""String_Node_Str"");
  value=value.replace(""String_Node_Str"",""String_Node_Str"");
  char c=value.charAt(0);
  if (c == '@' || c == '#' || c == '?') {
    return '\\' + value;
  }
  return value;
}","public static String escapeForResXml(String value){
  if (value.isEmpty()) {
    return value;
  }
  value=value.replace(""String_Node_Str"",""String_Node_Str"");
  value=value.replace(""String_Node_Str"",""String_Node_Str"");
  char c=value.charAt(0);
  if (c == '@' || c == '#' || c == '?') {
    return '\\' + value;
  }
  return value;
}"
53437,"@Override public void setProperty(String name,Object value) throws IllegalArgumentException, IllegalStateException {
  if (PROPERTY_DEFAULT_ENCODING.equals(name)) {
    mDefaultEncoding=(String)value;
  }
  super.setProperty(name,value);
}","@Override public void setProperty(String name,Object value) throws IllegalArgumentException, IllegalStateException {
  if (PROPERTY_DEFAULT_ENCODING.equals(name)) {
    mDefaultEncoding=(String)value;
  }
 else {
    super.setProperty(name,value);
  }
}"
53438,"public void smali(String dir,String dexFile) throws AndrolibException {
  main.main(new String[]{""String_Node_Str"",dir,""String_Node_Str"",dexFile});
}","public void smali(String dir,String dexFile) throws AndrolibException {
  main.main(new String[]{dir,""String_Node_Str"",dexFile});
}"
53439,"@Override public Class<?> findClass(String name) throws ClassNotFoundException {
  if (classes.containsKey(name)) {
    return nodeToClass(classes.get(name));
  }
 else {
    return super.loadClass(name);
  }
}","@Override public Class<?> findClass(String name) throws ClassNotFoundException {
  if (classes.containsKey(name)) {
    return nodeToClass(classes.get(name));
  }
 else {
    return super.findClass(name);
  }
}"
53440,"public static void pingback(){
  JOptionPane pane=new JOptionPane(""String_Node_Str"");
  Object[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
  pane.setOptions(options);
  JDialog dialog=pane.createDialog(BytecodeViewer.viewer,""String_Node_Str"");
  dialog.setVisible(true);
  Object obj=pane.getValue();
  int result=-1;
  for (int k=0; k < options.length; k++)   if (options[k].equals(obj))   result=k;
  if (result == 0) {
    try {
      PingBack.start();
    }
 catch (    Exception e) {
      new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
    }
  }
}","public static void pingback(){
  JOptionPane pane=new JOptionPane(""String_Node_Str"");
  Object[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
  pane.setOptions(options);
  JDialog dialog=pane.createDialog(BytecodeViewer.viewer,""String_Node_Str"");
  dialog.setVisible(true);
  Object obj=pane.getValue();
  int result=-1;
  for (int k=0; k < options.length; k++)   if (options[k].equals(obj))   result=k;
  if (result == 0) {
    try {
      if (!PingBack.isAlive())       PingBack.start();
    }
 catch (    Exception e) {
      new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
    }
  }
}"
53441,"protected String printInvokeDynamicInsNode(InvokeDynamicInsnNode idin){
  StringBuilder sb=new StringBuilder();
  sb.append(nameOpcode(idin.opcode()) + ""String_Node_Str"" + idin.name+ ""String_Node_Str"");
  String desc=idin.desc;
  String partedDesc=idin.desc.substring(2);
  try {
    if (Type.getType(partedDesc) != null)     desc=Type.getType(partedDesc).getClassName();
    if (desc == null || desc.equals(""String_Node_Str""))     desc=idin.desc;
  }
 catch (  java.lang.ArrayIndexOutOfBoundsException e) {
  }
  sb.append(desc);
  sb.append(""String_Node_Str"");
  return sb.toString();
}","protected String printInvokeDynamicInsNode(InvokeDynamicInsnNode idin){
  StringBuilder sb=new StringBuilder();
  sb.append(nameOpcode(idin.opcode()) + ""String_Node_Str"" + idin.bsm.getName()+ ""String_Node_Str"");
  String desc=idin.desc;
  String partedDesc=idin.desc.substring(2);
  try {
    if (Type.getType(partedDesc) != null)     desc=Type.getType(partedDesc).getClassName();
    if (desc == null || desc.equals(""String_Node_Str""))     desc=idin.desc;
  }
 catch (  java.lang.ArrayIndexOutOfBoundsException e) {
  }
  sb.append(desc);
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
53442,"@Override public void keyTyped(KeyEvent arg0){
}","@Override public void keyTyped(KeyEvent e){
  quickSearch.grabFocus();
  quickSearch.setText(""String_Node_Str"" + e.getKeyChar());
  cancel=true;
}"
53443,"@Override public void keyReleased(KeyEvent arg0){
  if (arg0.getKeyCode() == KeyEvent.VK_ENTER) {
    if (arg0.getSource() instanceof MyTree) {
      MyTree tree=(MyTree)arg0.getSource();
      openPath(tree.getSelectionPath());
    }
  }
}","@Override public void keyReleased(KeyEvent arg0){
  if (arg0.getKeyCode() == KeyEvent.VK_ENTER) {
    if (arg0.getSource() instanceof MyTree) {
      MyTree tree=(MyTree)arg0.getSource();
      openPath(tree.getSelectionPath());
    }
  }
 else {
    cancel=true;
  }
}"
53444,"@Override public void keyPressed(KeyEvent arg0){
}","@Override public void keyPressed(KeyEvent e){
  quickSearch.grabFocus();
  quickSearch.setText(""String_Node_Str"" + e.getKeyChar());
  cancel=true;
}"
53445,"@Override public void valueChanged(final TreeSelectionEvent arg0){
  openPath(arg0.getPath());
}","@Override public void valueChanged(final TreeSelectionEvent arg0){
  if (cancel) {
    cancel=false;
    return;
  }
  openPath(arg0.getPath());
}"
53446,"public FileNavigationPane(final FileChangeNotifier fcn){
  super(""String_Node_Str"");
  this.fcn=fcn;
  tree.setRootVisible(false);
  tree.setShowsRootHandles(true);
  quickSearch.setForeground(Color.gray);
  setTitle(""String_Node_Str"");
  this.open.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final TreeNode root=(TreeNode)tree.getModel().getRoot();
      expandAll(tree,new TreePath(root),true);
    }
  }
);
  this.close.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final TreeNode root=(TreeNode)tree.getModel().getRoot();
      expandAll(tree,new TreePath(root),false);
      tree.expandPath(new TreePath(root));
    }
  }
);
  this.tree.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      openPath(tree.getPathForLocation(e.getX(),e.getY()));
    }
  }
);
  this.tree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    final TreeSelectionEvent arg0){
      openPath(arg0.getPath());
    }
  }
);
  this.tree.addKeyListener(new KeyListener(){
    @Override public void keyReleased(    KeyEvent arg0){
      if (arg0.getKeyCode() == KeyEvent.VK_ENTER) {
        if (arg0.getSource() instanceof MyTree) {
          MyTree tree=(MyTree)arg0.getSource();
          openPath(tree.getSelectionPath());
        }
      }
    }
    @Override public void keyPressed(    KeyEvent arg0){
    }
    @Override public void keyTyped(    KeyEvent arg0){
    }
  }
);
  quickSearch.addKeyListener(search);
  quickSearch.addFocusListener(new FocusListener(){
    @Override public void focusGained(    final FocusEvent arg0){
      if (quickSearch.getText().equals(quickSearchText)) {
        quickSearch.setText(""String_Node_Str"");
        quickSearch.setForeground(Color.black);
      }
    }
    @Override public void focusLost(    final FocusEvent arg0){
      if (quickSearch.getText().isEmpty()) {
        quickSearch.setText(quickSearchText);
        quickSearch.setForeground(Color.gray);
      }
    }
  }
);
  getContentPane().setLayout(new BorderLayout());
  getContentPane().add(new JScrollPane(tree),BorderLayout.CENTER);
  JPanel p2=new JPanel();
  p2.setLayout(new BorderLayout());
  p2.add(quickSearch,BorderLayout.NORTH);
  JPanel p3=new JPanel(new BorderLayout());
  p3.add(exact,BorderLayout.WEST);
  JPanel p4=new JPanel(new BorderLayout());
  p4.add(open,BorderLayout.EAST);
  p4.add(close,BorderLayout.WEST);
  p3.add(p4,BorderLayout.EAST);
  p2.add(p3,BorderLayout.SOUTH);
  getContentPane().add(p2,BorderLayout.SOUTH);
  this.setVisible(true);
  new FileDrop(this,this);
}","public FileNavigationPane(final FileChangeNotifier fcn){
  super(""String_Node_Str"");
  this.fcn=fcn;
  tree.setRootVisible(false);
  tree.setShowsRootHandles(true);
  quickSearch.setForeground(Color.gray);
  setTitle(""String_Node_Str"");
  this.open.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final TreeNode root=(TreeNode)tree.getModel().getRoot();
      expandAll(tree,new TreePath(root),true);
    }
  }
);
  this.close.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final TreeNode root=(TreeNode)tree.getModel().getRoot();
      expandAll(tree,new TreePath(root),false);
      tree.expandPath(new TreePath(root));
    }
  }
);
  this.tree.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      openPath(tree.getPathForLocation(e.getX(),e.getY()));
    }
  }
);
  this.tree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    final TreeSelectionEvent arg0){
      if (cancel) {
        cancel=false;
        return;
      }
      openPath(arg0.getPath());
    }
  }
);
  this.tree.addKeyListener(new KeyListener(){
    @Override public void keyReleased(    KeyEvent arg0){
      if (arg0.getKeyCode() == KeyEvent.VK_ENTER) {
        if (arg0.getSource() instanceof MyTree) {
          MyTree tree=(MyTree)arg0.getSource();
          openPath(tree.getSelectionPath());
        }
      }
 else {
        cancel=true;
      }
    }
    @Override public void keyTyped(    KeyEvent e){
      quickSearch.grabFocus();
      quickSearch.setText(""String_Node_Str"" + e.getKeyChar());
      cancel=true;
    }
    @Override public void keyPressed(    KeyEvent e){
      quickSearch.grabFocus();
      quickSearch.setText(""String_Node_Str"" + e.getKeyChar());
      cancel=true;
    }
  }
);
  quickSearch.addKeyListener(search);
  quickSearch.addFocusListener(new FocusListener(){
    @Override public void focusGained(    final FocusEvent arg0){
      if (quickSearch.getText().equals(quickSearchText)) {
        quickSearch.setText(""String_Node_Str"");
        quickSearch.setForeground(Color.black);
      }
    }
    @Override public void focusLost(    final FocusEvent arg0){
      if (quickSearch.getText().isEmpty()) {
        quickSearch.setText(quickSearchText);
        quickSearch.setForeground(Color.gray);
      }
    }
  }
);
  getContentPane().setLayout(new BorderLayout());
  getContentPane().add(new JScrollPane(tree),BorderLayout.CENTER);
  JPanel p2=new JPanel();
  p2.setLayout(new BorderLayout());
  p2.add(quickSearch,BorderLayout.NORTH);
  JPanel p3=new JPanel(new BorderLayout());
  p3.add(exact,BorderLayout.WEST);
  JPanel p4=new JPanel(new BorderLayout());
  p4.add(open,BorderLayout.EAST);
  p4.add(close,BorderLayout.WEST);
  p3.add(p4,BorderLayout.EAST);
  p2.add(p3,BorderLayout.SOUTH);
  getContentPane().add(p2,BorderLayout.SOUTH);
  this.setVisible(true);
  new FileDrop(this,this);
}"
53447,"@Override public String toString(){
  final StringBuilder sb=new StringBuilder();
  sb.append(ID).append('\t').append(LEMMA).append('\t').append(LEMMA).append('\t').append(CPOSTAG).append('\t').append(POSTAG).append('\t').append('_').append('\t').append(HEAD.ID).append('\t').append(DEPREL).append('\t').append('_').append('\t').append('_');
  return sb.toString();
}","@Override public String toString(){
  final StringBuilder sb=new StringBuilder();
  if (ID != 0 && ID != -1) {
    sb.append(ID).append('\t').append(LEMMA).append('\t').append(LEMMA).append('\t').append(CPOSTAG).append('\t').append(POSTAG).append('\t').append('_').append('\t').append(HEAD.ID).append('\t').append(DEPREL).append('\t').append('_').append('\t').append('_');
  }
 else {
    sb.append(ID).append('\t').append(LEMMA).append('\t').append(LEMMA).append('\t').append(CPOSTAG).append('\t').append(POSTAG).append('\t').append('_').append('\t').append('_').append('\t').append(DEPREL).append('\t').append('_').append('\t').append('_');
  }
  return sb.toString();
}"
53448,"@Override public String toString(){
  final StringBuilder sb=new StringBuilder();
  sb.append(ID).append('\t').append(LEMMA).append('\t').append(LEMMA).append('\t').append(CPOSTAG).append('\t').append(POSTAG).append('\t').append('_').append('\t').append(HEAD.ID).append('\t').append(DEPREL).append('\t').append('_').append('\t').append('_');
  return sb.toString();
}","@Override public String toString(){
  final StringBuilder sb=new StringBuilder();
  if (HEAD.ID != 0 && HEAD.ID != -1) {
    sb.append(ID).append('\t').append(LEMMA).append('\t').append(LEMMA).append('\t').append(CPOSTAG).append('\t').append(POSTAG).append('\t').append('_').append('\t').append(HEAD.ID).append('\t').append(DEPREL).append('\t').append('_').append('\t').append('_');
  }
 else {
    sb.append(ID).append('\t').append(LEMMA).append('\t').append(LEMMA).append('\t').append(CPOSTAG).append('\t').append(POSTAG).append('\t').append('_').append('\t').append('_').append('\t').append(DEPREL).append('\t').append('_').append('\t').append('_');
  }
  return sb.toString();
}"
53449,"/** 
 * 合并数字
 * @param termList
 */
protected void mergeNumberQuantifier(List<Vertex> termList,WordNet wordNetAll,Config config){
  if (termList.size() < 4)   return;
  StringBuilder sbQuantifier=new StringBuilder();
  ListIterator<Vertex> iterator=termList.listIterator();
  iterator.next();
  int line=1;
  while (iterator.hasNext()) {
    Vertex pre=iterator.next();
    if (pre.hasNature(Nature.m)) {
      sbQuantifier.append(pre.realWord);
      Vertex cur=null;
      while (iterator.hasNext() && (cur=iterator.next()).hasNature(Nature.m)) {
        sbQuantifier.append(cur.realWord);
        iterator.remove();
      }
      if (cur != null && (cur.hasNature(Nature.q) || cur.hasNature(Nature.qv) || cur.hasNature(Nature.qt))) {
        if (config.indexMode) {
          wordNetAll.add(line,new Vertex(sbQuantifier.toString(),new CoreDictionary.Attribute(Nature.m)));
        }
        sbQuantifier.append(cur.realWord);
        pre.attribute=new CoreDictionary.Attribute(Nature.mq);
        iterator.remove();
      }
      if (sbQuantifier.length() != pre.realWord.length()) {
        pre.realWord=sbQuantifier.toString();
        sbQuantifier.setLength(0);
      }
    }
    sbQuantifier.setLength(0);
    line+=pre.realWord.length();
  }
}","/** 
 * 合并数字
 * @param termList
 */
protected void mergeNumberQuantifier(List<Vertex> termList,WordNet wordNetAll,Config config){
  if (termList.size() < 4)   return;
  StringBuilder sbQuantifier=new StringBuilder();
  ListIterator<Vertex> iterator=termList.listIterator();
  iterator.next();
  int line=1;
  while (iterator.hasNext()) {
    Vertex pre=iterator.next();
    if (pre.hasNature(Nature.m)) {
      sbQuantifier.append(pre.realWord);
      Vertex cur=null;
      while (iterator.hasNext() && (cur=iterator.next()).hasNature(Nature.m)) {
        sbQuantifier.append(cur.realWord);
        iterator.remove();
      }
      if (cur != null && (cur.hasNature(Nature.q) || cur.hasNature(Nature.qv) || cur.hasNature(Nature.qt))) {
        if (config.indexMode) {
          wordNetAll.add(line,new Vertex(sbQuantifier.toString(),new CoreDictionary.Attribute(Nature.m)));
        }
        sbQuantifier.append(cur.realWord);
        pre.attribute=new CoreDictionary.Attribute(Nature.mq);
        pre.wordID=-1;
        iterator.remove();
      }
      if (sbQuantifier.length() != pre.realWord.length()) {
        pre.realWord=sbQuantifier.toString();
        sbQuantifier.setLength(0);
      }
    }
    sbQuantifier.setLength(0);
    line+=pre.realWord.length();
  }
}"
53450,"public boolean next(){
  if (i == arrayLength) {
    ++begin;
    i=begin;
    last=base[0];
  }
  int b=last;
  int n;
  int p;
  for (; i < arrayLength; ++i) {
    p=b + (int)(charArray[i]) + 1;
    if (b == check[p])     b=base[p];
 else {
      i=begin;
      ++begin;
      b=base[0];
      continue;
    }
    p=b;
    n=base[p];
    if (b == check[p] && n < 0) {
      length=i - begin + 1;
      index=-n - 1;
      value=v[index];
      last=b;
      ++i;
      return true;
    }
  }
  return false;
}","public boolean next(){
  int b=last;
  int n;
  int p;
  for (; ; ++i) {
    if (i == arrayLength) {
      ++begin;
      if (begin == arrayLength)       break;
      i=begin;
      b=base[0];
    }
    p=b + (int)(charArray[i]) + 1;
    if (b == check[p])     b=base[p];
 else {
      i=begin;
      ++begin;
      if (begin == arrayLength)       break;
      b=base[0];
      continue;
    }
    p=b;
    n=base[p];
    if (b == check[p] && n < 0) {
      length=i - begin + 1;
      index=-n - 1;
      value=v[index];
      last=b;
      ++i;
      return true;
    }
  }
  return false;
}"
53451,"public static List<EnumItem<NT>> roleTag(List<Vertex> vertexList,WordNet wordNetAll){
  List<EnumItem<NT>> tagList=new LinkedList<EnumItem<NT>>();
  for (  Vertex vertex : vertexList) {
    Nature nature=vertex.guessNature();
switch (nature) {
case nz:
{
        if (vertex.getAttribute().totalFrequency <= 1000) {
          tagList.add(new EnumItem<NT>(NT.F,1000));
        }
      }
    continue;
case ni:
case nic:
case nis:
case nit:
{
    EnumItem<NT> ntEnumItem=new EnumItem<NT>(NT.K,1000);
    ntEnumItem.addLabel(NT.D,1000);
    tagList.add(ntEnumItem);
  }
continue;
case m:
{
EnumItem<NT> ntEnumItem=new EnumItem<NT>(NT.M,1000);
tagList.add(ntEnumItem);
}
continue;
}
EnumItem<NT> NTEnumItem=OrganizationDictionary.dictionary.get(vertex.word);
if (NTEnumItem == null) {
NTEnumItem=new EnumItem<NT>(NT.Z,OrganizationDictionary.transformMatrixDictionary.getTotalFrequency(NT.Z));
}
tagList.add(NTEnumItem);
}
return tagList;
}","public static List<EnumItem<NT>> roleTag(List<Vertex> vertexList,WordNet wordNetAll){
  List<EnumItem<NT>> tagList=new LinkedList<EnumItem<NT>>();
  for (  Vertex vertex : vertexList) {
    Nature nature=vertex.guessNature();
switch (nature) {
case nz:
{
        if (vertex.getAttribute().totalFrequency <= 1000) {
          tagList.add(new EnumItem<NT>(NT.F,1000));
        }
 else         break;
      }
    continue;
case ni:
case nic:
case nis:
case nit:
{
    EnumItem<NT> ntEnumItem=new EnumItem<NT>(NT.K,1000);
    ntEnumItem.addLabel(NT.D,1000);
    tagList.add(ntEnumItem);
  }
continue;
case m:
{
EnumItem<NT> ntEnumItem=new EnumItem<NT>(NT.M,1000);
tagList.add(ntEnumItem);
}
continue;
}
EnumItem<NT> NTEnumItem=OrganizationDictionary.dictionary.get(vertex.word);
if (NTEnumItem == null) {
NTEnumItem=new EnumItem<NT>(NT.Z,OrganizationDictionary.transformMatrixDictionary.getTotalFrequency(NT.Z));
}
tagList.add(NTEnumItem);
}
return tagList;
}"
53452,"public List<String> getKeyword(String content){
  List<Term> termList=StandardTokenizer.segment(content);
  List<String> wordList=new ArrayList<String>();
  for (  Term t : termList) {
    if (shouldInclude(t)) {
      wordList.add(t.word);
    }
  }
  BinTrie<BinTrie<Boolean>> words=new BinTrie<BinTrie<Boolean>>();
  Queue<String> que=new LinkedList<String>();
  for (  String w : wordList) {
    if (!words.containsKey(w)) {
      words.put(w,new BinTrie<Boolean>());
    }
    que.offer(w);
    if (que.size() > 5) {
      que.poll();
    }
    for (    String w1 : que) {
      for (      String w2 : que) {
        if (w1.equals(w2)) {
          continue;
        }
        words.get(w1).put(w2,true);
        words.get(w2).put(w1,true);
      }
    }
  }
  Map<String,Float> score=new HashMap<String,Float>();
  for (int i=0; i < max_iter; ++i) {
    Map<String,Float> m=new HashMap<String,Float>();
    float max_diff=0;
    for (    Map.Entry<String,BinTrie<Boolean>> entry : words.entrySet()) {
      String key=entry.getKey();
      BinTrie<Boolean> value=entry.getValue();
      m.put(key,1 - d);
      Set<Map.Entry<String,Boolean>> set=value.entrySet();
      for (      Map.Entry<String,Boolean> element : set) {
        String other=element.getKey();
        int size=words.get(other).size();
        if (key.equals(other) || size == 0)         continue;
        m.put(key,m.get(key) + d / size * (score.get(other) == null ? 0 : score.get(other)));
      }
      max_diff=Math.max(max_diff,Math.abs(m.get(key) - (score.get(key) == null ? 0 : score.get(key))));
    }
    score=m;
    if (max_diff <= min_diff)     break;
  }
  List<Map.Entry<String,Float>> entryList=new ArrayList<Map.Entry<String,Float>>(score.entrySet());
  Collections.sort(entryList,new Comparator<Map.Entry<String,Float>>(){
    @Override public int compare(    Map.Entry<String,Float> o1,    Map.Entry<String,Float> o2){
      return (o1.getValue() - o2.getValue() > 0 ? -1 : 1);
    }
  }
);
  int limit=Math.min(nKeyword,entryList.size());
  List<String> result=new ArrayList<String>(limit);
  for (int i=0; i < limit; ++i) {
    result.add(entryList.get(i).getKey());
  }
  return result;
}","public List<String> getKeyword(String content){
  List<Term> termList=StandardTokenizer.segment(content);
  List<String> wordList=new ArrayList<String>();
  for (  Term t : termList) {
    if (shouldInclude(t)) {
      wordList.add(t.word);
    }
  }
  BinTrie<BinTrie<Boolean>> words=new BinTrie<BinTrie<Boolean>>();
  Queue<String> que=new LinkedList<String>();
  for (  String w : wordList) {
    if (!words.containsKey(w)) {
      words.put(w,new BinTrie<Boolean>());
    }
    que.offer(w);
    if (que.size() > 5) {
      que.poll();
    }
    for (    String w1 : que) {
      for (      String w2 : que) {
        if (w1.equals(w2)) {
          continue;
        }
        words.get(w1).put(w2,true);
        words.get(w2).put(w1,true);
      }
    }
  }
  Map<String,Float> score=new HashMap<String,Float>();
  for (int i=0; i < max_iter; ++i) {
    Map<String,Float> m=new HashMap<String,Float>();
    float max_diff=0;
    for (    Map.Entry<String,BinTrie<Boolean>> entry : words.entrySet()) {
      String key=entry.getKey();
      BinTrie<Boolean> value=entry.getValue();
      m.put(key,1 - d);
      Set<Map.Entry<String,Boolean>> set=value.entrySet();
      for (      Map.Entry<String,Boolean> element : set) {
        String other=element.getKey();
        int size=words.get(other).size();
        if (key.equals(other) || size == 0)         continue;
        m.put(key,m.get(key) + d / size * (score.get(other) == null ? 0 : score.get(other)));
      }
      max_diff=Math.max(max_diff,Math.abs(m.get(key) - (score.get(key) == null ? 0 : score.get(key))));
    }
    score=m;
    if (max_diff <= min_diff)     break;
  }
  List<Map.Entry<String,Float>> entryList=new ArrayList<Map.Entry<String,Float>>(score.entrySet());
  Collections.sort(entryList,new Comparator<Map.Entry<String,Float>>(){
    @Override public int compare(    Map.Entry<String,Float> o1,    Map.Entry<String,Float> o2){
      return o2.getValue().compareTo(o1.getValue());
    }
  }
);
  int limit=Math.min(nKeyword,entryList.size());
  List<String> result=new ArrayList<String>(limit);
  for (int i=0; i < limit; ++i) {
    result.add(entryList.get(i).getKey());
  }
  return result;
}"
53453,"@Override public int compare(Map.Entry<String,Float> o1,Map.Entry<String,Float> o2){
  return (o1.getValue() - o2.getValue() > 0 ? -1 : 1);
}","@Override public int compare(Map.Entry<String,Float> o1,Map.Entry<String,Float> o2){
  return o2.getValue().compareTo(o1.getValue());
}"
53454,"/** 
 * 用省内存的方式读取大文件
 * @param path
 * @return
 */
public static LinkedList<String> readLineListWithLessMemory(String path){
  LinkedList<String> result=new LinkedList<String>();
  String line=null;
  try {
    BufferedReader bw=new BufferedReader(new InputStreamReader(new FileInputStream(path)));
    while ((line=bw.readLine()) != null) {
      result.add(line);
    }
    bw.close();
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + path + ""String_Node_Str""+ e);
  }
  return result;
}","/** 
 * 用省内存的方式读取大文件
 * @param path
 * @return
 */
public static LinkedList<String> readLineListWithLessMemory(String path){
  LinkedList<String> result=new LinkedList<String>();
  String line=null;
  try {
    BufferedReader bw=new BufferedReader(new InputStreamReader(new FileInputStream(path),""String_Node_Str""));
    while ((line=bw.readLine()) != null) {
      result.add(line);
    }
    bw.close();
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + path + ""String_Node_Str""+ e);
  }
  return result;
}"
53455,"public Node(Term term,int id){
  this.id=id;
switch (term.nature) {
case bg:
    label=""String_Node_Str"";
  break;
case mg:
label=""String_Node_Str"";
break;
case nx:
label=""String_Node_Str"";
break;
case qg:
label=""String_Node_Str"";
break;
case ud:
label=""String_Node_Str"";
break;
case uj:
label=""String_Node_Str"";
break;
case uz:
label=""String_Node_Str"";
break;
case ug:
label=""String_Node_Str"";
break;
case ul:
label=""String_Node_Str"";
break;
case uv:
label=""String_Node_Str"";
break;
case yg:
label=""String_Node_Str"";
break;
case zg:
label=""String_Node_Str"";
break;
case ntc:
case ntcf:
case ntcb:
case ntch:
case nto:
case ntu:
case nts:
case nth:
label=""String_Node_Str"";
break;
case nh:
case nhm:
case nhd:
label=""String_Node_Str"";
break;
case nn:
label=""String_Node_Str"";
break;
case nnt:
label=""String_Node_Str"";
break;
case nnd:
label=""String_Node_Str"";
break;
case nf:
label=""String_Node_Str"";
break;
case ni:
case nit:
case nic:
label=""String_Node_Str"";
break;
case nis:
label=""String_Node_Str"";
break;
case nm:
label=""String_Node_Str"";
break;
case nmc:
label=""String_Node_Str"";
break;
case nb:
label=""String_Node_Str"";
break;
case nba:
label=""String_Node_Str"";
break;
case nbc:
case nbp:
case nz:
label=""String_Node_Str"";
break;
case g:
label=""String_Node_Str"";
break;
case gm:
case gp:
case gc:
case gb:
case gbc:
case gg:
case gi:
label=""String_Node_Str"";
break;
case j:
label=""String_Node_Str"";
break;
case i:
label=""String_Node_Str"";
break;
case l:
label=""String_Node_Str"";
break;
case rg:
case Rg:
label=""String_Node_Str"";
break;
case udh:
label=""String_Node_Str"";
break;
case e:
label=""String_Node_Str"";
break;
case xx:
label=""String_Node_Str"";
break;
case xu:
label=""String_Node_Str"";
break;
case w:
case wkz:
case wky:
case wyz:
case wyy:
case wj:
case ww:
case wt:
case wd:
case wf:
case wn:
case wm:
case ws:
case wp:
case wb:
case wh:
label=""String_Node_Str"";
case begin:
label=""String_Node_Str"";
break;
default :
label=term.nature.toString();
break;
}
word=term.word;
compiledWord=PosTagCompiler.compile(label,word);
}","public Node(Term term,int id){
  this.id=id;
switch (term.nature) {
case bg:
    label=""String_Node_Str"";
  break;
case mg:
label=""String_Node_Str"";
break;
case nx:
label=""String_Node_Str"";
break;
case qg:
label=""String_Node_Str"";
break;
case ud:
label=""String_Node_Str"";
break;
case uj:
label=""String_Node_Str"";
break;
case uz:
label=""String_Node_Str"";
break;
case ug:
label=""String_Node_Str"";
break;
case ul:
label=""String_Node_Str"";
break;
case uv:
label=""String_Node_Str"";
break;
case yg:
label=""String_Node_Str"";
break;
case zg:
label=""String_Node_Str"";
break;
case ntc:
case ntcf:
case ntcb:
case ntch:
case nto:
case ntu:
case nts:
case nth:
label=""String_Node_Str"";
break;
case nh:
case nhm:
case nhd:
label=""String_Node_Str"";
break;
case nn:
label=""String_Node_Str"";
break;
case nnt:
label=""String_Node_Str"";
break;
case nnd:
label=""String_Node_Str"";
break;
case nf:
label=""String_Node_Str"";
break;
case ni:
case nit:
case nic:
label=""String_Node_Str"";
break;
case nis:
label=""String_Node_Str"";
break;
case nm:
label=""String_Node_Str"";
break;
case nmc:
label=""String_Node_Str"";
break;
case nb:
label=""String_Node_Str"";
break;
case nba:
label=""String_Node_Str"";
break;
case nbc:
case nbp:
case nz:
label=""String_Node_Str"";
break;
case g:
label=""String_Node_Str"";
break;
case gm:
case gp:
case gc:
case gb:
case gbc:
case gg:
case gi:
label=""String_Node_Str"";
break;
case j:
label=""String_Node_Str"";
break;
case i:
label=""String_Node_Str"";
break;
case l:
label=""String_Node_Str"";
break;
case rg:
case Rg:
label=""String_Node_Str"";
break;
case udh:
label=""String_Node_Str"";
break;
case e:
label=""String_Node_Str"";
break;
case xx:
label=""String_Node_Str"";
break;
case xu:
label=""String_Node_Str"";
break;
case w:
case wkz:
case wky:
case wyz:
case wyy:
case wj:
case ww:
case wt:
case wd:
case wf:
case wn:
case wm:
case ws:
case wp:
case wb:
case wh:
label=""String_Node_Str"";
break;
case begin:
label=""String_Node_Str"";
break;
default :
label=term.nature.toString();
break;
}
word=term.word;
compiledWord=PosTagCompiler.compile(label,word);
}"
53456,"@Override public void before(Object target,Object[] args){
  if (isDebug) {
    logger.beforeInterceptor(target,args);
  }
  Trace trace=traceContext.currentRawTraceObject();
  if (trace == null) {
    trace=createTrace(target,args);
    if (trace == null) {
      return;
    }
    try {
      final SpanRecorder recorder=trace.getSpanRecorder();
      doInBeforeTrace(recorder,target,args);
    }
 catch (    Throwable th) {
      if (logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"",th.getMessage(),th);
      }
    }
    return;
  }
  if (isDebug) {
    logger.debug(""String_Node_Str"",trace,trace.canSampled());
  }
  trace.addScope(SCOPE_NAME);
  if (!trace.canSampled()) {
    return;
  }
  RpcInvocation invocation=(RpcInvocation)args[0];
  SpanEventRecorder recorder=trace.traceBlockBegin();
  recorder.recordServiceType(DubboConstants.DUBBO_PROVIDER_SERVICE_NO_STATISTICS_TYPE);
  recorder.recordApi(methodDescriptor);
  recorder.recordAttribute(DubboConstants.DUBBO_RPC_ANNOTATION_KEY,invocation.getInvoker().getInterface().getSimpleName() + ""String_Node_Str"" + invocation.getMethodName());
}","@Override public void before(Object target,Object[] args){
  if (isDebug) {
    logger.beforeInterceptor(target,args);
  }
  Trace trace=traceContext.currentRawTraceObject();
  if (trace == null) {
    trace=createTrace(target,args);
    if (trace == null) {
      return;
    }
    if (!trace.canSampled()) {
      return;
    }
    try {
      final SpanRecorder recorder=trace.getSpanRecorder();
      doInBeforeTrace(recorder,target,args);
    }
 catch (    Throwable th) {
      if (logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"",th.getMessage(),th);
      }
    }
    return;
  }
  if (isDebug) {
    logger.debug(""String_Node_Str"",trace,trace.canSampled());
  }
  trace.addScope(SCOPE_NAME);
  if (!trace.canSampled()) {
    return;
  }
  RpcInvocation invocation=(RpcInvocation)args[0];
  SpanEventRecorder recorder=trace.traceBlockBegin();
  recorder.recordServiceType(DubboConstants.DUBBO_PROVIDER_SERVICE_NO_STATISTICS_TYPE);
  recorder.recordApi(methodDescriptor);
  recorder.recordAttribute(DubboConstants.DUBBO_RPC_ANNOTATION_KEY,invocation.getInvoker().getInterface().getSimpleName() + ""String_Node_Str"" + invocation.getMethodName());
}"
53457,"@Test public void testConsumer() throws NoSuchMethodException {
  Exception expected=null;
  abstractClusterInvoker=new FailoverClusterInvoker(directory);
  when(abstractClusterInvoker.getInterface()).thenReturn(String.class);
  try {
    abstractClusterInvoker.invoke(rpcInvocation);
  }
 catch (  RpcException e) {
    expected=e;
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
  Method invoke=AbstractClusterInvoker.class.getMethod(""String_Node_Str"",Invocation.class);
  verifier.verifyTrace(Expectations.event(""String_Node_Str"",invoke,expected));
  verifier.verifyTraceCount(0);
}","@Test public void testConsumer() throws NoSuchMethodException {
  abstractClusterInvoker=new MockInvoker<Demo>(Demo.class,url);
  try {
    abstractClusterInvoker.invoke(rpcInvocation);
  }
 catch (  RpcException e) {
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
  Method invoke=AbstractInvoker.class.getMethod(""String_Node_Str"",Invocation.class);
  verifier.verifyTraceCount(1);
}"
53458,"@Test public void testConsumerMonitor(){
  abstractClusterInvoker=new FailoverClusterInvoker(directory);
  when(abstractClusterInvoker.getInterface()).thenReturn(MonitorService.class);
  try {
    abstractClusterInvoker.invoke(rpcInvocation);
  }
 catch (  RpcException ignore) {
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
  verifier.verifyTraceCount(0);
}","@Test public void testConsumerMonitor(){
  abstractClusterInvoker=mock(AbstractInvoker.class);
  when(abstractClusterInvoker.getInterface()).thenReturn(MonitorService.class);
  try {
    abstractClusterInvoker.invoke(rpcInvocation);
  }
 catch (  RpcException ignore) {
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
  verifier.verifyTraceCount(0);
}"
53459,"@Before public void setUp(){
  url=new URL(""String_Node_Str"",""String_Node_Str"",5678);
  MockitoAnnotations.initMocks(this);
  when(directory.getUrl()).thenReturn(url);
}","@Before public void setUp(){
  url=new URL(""String_Node_Str"",""String_Node_Str"",5678);
  MockitoAnnotations.initMocks(this);
}"
53460,"@Test public void testProvider() throws NoSuchMethodException {
  AbstractProxyInvoker abstractProxyInvoker=new AbstractProxyInvoker(new String(),String.class,url){
    @Override protected Object doInvoke(    Object proxy,    String methodName,    Class[] parameterTypes,    Object[] arguments) throws Throwable {
      Method method=proxy.getClass().getMethod(methodName,parameterTypes);
      return method.invoke(proxy,arguments);
    }
  }
;
  try {
    abstractProxyInvoker.invoke(rpcInvocation);
  }
 catch (  RpcException ignore) {
    ignore.printStackTrace();
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
  verifier.verifyTraceCount(1);
}","@Test public void testProvider() throws NoSuchMethodException {
  AbstractProxyInvoker abstractProxyInvoker=new AbstractProxyInvoker(new String(),String.class,url){
    @Override protected Object doInvoke(    Object proxy,    String methodName,    Class[] parameterTypes,    Object[] arguments) throws Throwable {
      Method method=proxy.getClass().getMethod(methodName,parameterTypes);
      return method.invoke(proxy,arguments);
    }
  }
;
  try {
    abstractProxyInvoker.invoke(rpcInvocation);
  }
 catch (  RpcException ignore) {
    ignore.printStackTrace();
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
  verifier.verifyTraceCount(2);
}"
53461,"private <T>Plugin<T> newPlugin(T plugin){
  URL pluginURL=CodeSourceUtils.getCodeLocation(plugin.getClass());
  final File file=new File(pluginURL.getFile());
  if (file.isDirectory()) {
    return new DirClassPathPlugin<T>(pluginURL,Collections.singletonList(plugin),Collections.<String>emptyList());
  }
  if (file.getName().endsWith(""String_Node_Str"")) {
    JarFile jarFile=toJarFile(file);
    return new JarPlugin<T>(pluginURL,jarFile,Collections.singletonList(plugin),Collections.<String>emptyList());
  }
  throw new IllegalArgumentException(""String_Node_Str"" + pluginURL);
}","private <T>Plugin<T> newPlugin(T plugin){
  final URL pluginURL=CodeSourceUtils.getCodeLocation(plugin.getClass());
  if (pluginURL == null) {
    throw new IllegalStateException(""String_Node_Str"" + plugin.getClass());
  }
  final File file=new File(pluginURL.getFile());
  if (file.isDirectory()) {
    return new DirClassPathPlugin<T>(pluginURL,Collections.singletonList(plugin),Collections.<String>emptyList());
  }
  if (file.getName().endsWith(""String_Node_Str"")) {
    JarFile jarFile=toJarFile(file);
    return new JarPlugin<T>(pluginURL,jarFile,Collections.singletonList(plugin),Collections.<String>emptyList());
  }
  throw new IllegalArgumentException(""String_Node_Str"" + pluginURL);
}"
53462,"protected TBase<?,?> deserialize(HeaderTBaseDeserializer deserializer,ResponseMessage responseMessage){
  byte[] message=responseMessage.getMessage();
  Message<TBase<?,?>> deserialize=SerializationUtils.deserialize(message,deserializer,null);
  return deserialize.getData();
}","protected TBase<?,?> deserialize(HeaderTBaseDeserializer deserializer,ResponseMessage responseMessage){
  final byte[] message=responseMessage.getMessage();
  final Message<TBase<?,?>> deserialize=SerializationUtils.deserialize(message,deserializer,null);
  if (deserialize == null) {
    return null;
  }
  return deserialize.getData();
}"
53463,"@Override public void handleSimple(ServerRequest serverRequest){
  if (serverRequest instanceof ThriftRequest) {
    handleSimple(((ThriftRequest)serverRequest).getData());
  }
  throw new UnSupportedServerRequestTypeException(serverRequest.getClass() + ""String_Node_Str"" + serverRequest);
}","@Override public void handleSimple(ServerRequest serverRequest){
  if (serverRequest instanceof ThriftRequest) {
    handleSimple(((ThriftRequest)serverRequest).getData());
  }
 else {
    throw new UnSupportedServerRequestTypeException(serverRequest.getClass() + ""String_Node_Str"" + serverRequest);
  }
}"
53464,"private static boolean isSimpleType(Object arg){
  Class<?> find=SIMPLE_TYPE.get(arg.getClass());
  if (find == null) {
    return false;
  }
  return true;
}","static boolean isSimpleType(Object arg){
  Class<?> find=SIMPLE_TYPE.get(arg.getClass());
  if (find == null) {
    return false;
  }
  return true;
}"
53465,"private static String normalizedParameter(Object arg){
  if (arg == null) {
    return ""String_Node_Str"";
  }
 else {
    if (isSimpleType(arg)) {
      return arg.toString();
    }
 else {
      return arg.getClass().getSimpleName();
    }
  }
}","private static String normalizedParameter(Object arg){
  if (arg == null) {
    return ""String_Node_Str"";
  }
 else {
    if (isSimpleType(arg)) {
      return arg.toString();
    }
 else {
      return getSimpleName(arg.getClass());
    }
  }
}"
53466,"private static String getSocketAddress(SocketAddress socketAddress){
  String address=socketAddress.toString();
  int addressLength=address.length();
  if (addressLength > 0) {
    if (address.startsWith(""String_Node_Str"")) {
      return address.substring(1);
    }
 else {
      final int delimeterIndex=address.indexOf('/');
      if (delimeterIndex != -1 && delimeterIndex < addressLength) {
        return address.substring(address.indexOf('/') + 1);
      }
    }
  }
  return address;
}","private static String getSocketAddress(SocketAddress socketAddress){
  String address=socketAddress.toString();
  int addressLength=address.length();
  if (addressLength > 0) {
    if (address.startsWith(""String_Node_Str"")) {
      return address.substring(1);
    }
 else {
      final int delimiterIndex=address.indexOf('/');
      if (delimiterIndex != -1 && delimiterIndex < addressLength) {
        return address.substring(address.indexOf('/') + 1);
      }
    }
  }
  return address;
}"
53467,"private boolean needFlush(SpanStreamSendData spanStreamSendData,int length,int delemeterBufferSize){
  if (!spanStreamSendData.isAvailableBufferCapacity(length + delemeterBufferSize)) {
    return true;
  }
  int availableComponentsCount=1;
  if (delemeterBufferSize > 0) {
    availableComponentsCount++;
  }
  if (!spanStreamSendData.isAvailableComponentsCount(availableComponentsCount)) {
    return true;
  }
  return false;
}","private boolean needFlush(SpanStreamSendData spanStreamSendData,int length,int delimiterBufferSize){
  if (!spanStreamSendData.isAvailableBufferCapacity(length + delimiterBufferSize)) {
    return true;
  }
  int availableComponentsCount=1;
  if (delimiterBufferSize > 0) {
    availableComponentsCount++;
  }
  if (!spanStreamSendData.isAvailableComponentsCount(availableComponentsCount)) {
    return true;
  }
  return false;
}"
53468,"private String getConstructorInfo(Constructor<?> constructor){
  Class<?>[] parameterTypes=constructor.getParameterTypes();
  String[] parameterTypeNames=JavaAssistUtils.getParameterType(parameterTypes);
  final String constructorSimpleName=MethodDescriptionUtils.getConstructorSimpleName(constructor);
  return MethodDescriptionUtils.toJavaMethodDescriptor(constructor.getDeclaringClass().getName(),constructorSimpleName,parameterTypeNames);
}","private String getConstructorInfo(Constructor<?> constructor){
  Class<?>[] parameterTypes=constructor.getParameterTypes();
  String[] parameterTypeNames=JavaAssistUtils.toPinpointParameterType(parameterTypes);
  final String constructorSimpleName=MethodDescriptionUtils.getConstructorSimpleName(constructor);
  return MethodDescriptionUtils.toJavaMethodDescriptor(constructor.getDeclaringClass().getName(),constructorSimpleName,parameterTypeNames);
}"
53469,"public static List<String> getHostIpList(){
  List<String> result=new ArrayList<String>();
  Enumeration<NetworkInterface> interfaces=null;
  try {
    interfaces=NetworkInterface.getNetworkInterfaces();
  }
 catch (  SocketException ignore) {
  }
  if (interfaces == null) {
    return Collections.EMPTY_LIST;
  }
  while (interfaces.hasMoreElements()) {
    NetworkInterface current=interfaces.nextElement();
    if (isSkipNetworkInterface(current)) {
      continue;
    }
    Enumeration<InetAddress> addresses=current.getInetAddresses();
    while (addresses.hasMoreElements()) {
      InetAddress address=addresses.nextElement();
      if (address.isLoopbackAddress()) {
        continue;
      }
      String hostAddress=address.getHostAddress();
      if (!isLoopbackAddress(hostAddress)) {
        result.add(address.getHostAddress());
      }
    }
  }
  return result;
}","public static List<String> getHostIpList(){
  List<String> result=new ArrayList<String>();
  Enumeration<NetworkInterface> interfaces=null;
  try {
    interfaces=NetworkInterface.getNetworkInterfaces();
  }
 catch (  SocketException ignore) {
  }
  if (interfaces == null) {
    return Collections.emptyList();
  }
  while (interfaces.hasMoreElements()) {
    NetworkInterface current=interfaces.nextElement();
    if (isSkipNetworkInterface(current)) {
      continue;
    }
    Enumeration<InetAddress> addresses=current.getInetAddresses();
    while (addresses.hasMoreElements()) {
      InetAddress address=addresses.nextElement();
      if (address.isLoopbackAddress()) {
        continue;
      }
      String hostAddress=address.getHostAddress();
      if (!isLoopbackAddress(hostAddress)) {
        result.add(address.getHostAddress());
      }
    }
  }
  return result;
}"
53470,"public List<ASMClassNodeAdapter> getInnerClasses(){
  if (this.classNode.innerClasses == null) {
    return Collections.EMPTY_LIST;
  }
  final List<ASMClassNodeAdapter> innerClasses=new ArrayList<ASMClassNodeAdapter>();
  final List<InnerClassNode> innerClassNodes=this.classNode.innerClasses;
  for (  InnerClassNode node : innerClassNodes) {
    if (node.name == null) {
      continue;
    }
    ASMClassNodeAdapter adapter=get(this.pluginContext,this.classLoader,node.name,true);
    if (adapter != null) {
      innerClasses.add(adapter);
    }
  }
  return innerClasses;
}","public List<ASMClassNodeAdapter> getInnerClasses(){
  if (this.classNode.innerClasses == null) {
    return Collections.emptyList();
  }
  final List<ASMClassNodeAdapter> innerClasses=new ArrayList<ASMClassNodeAdapter>();
  final List<InnerClassNode> innerClassNodes=this.classNode.innerClasses;
  for (  InnerClassNode node : innerClassNodes) {
    if (node.name == null) {
      continue;
    }
    ASMClassNodeAdapter adapter=get(this.pluginContext,this.classLoader,node.name,true);
    if (adapter != null) {
      innerClasses.add(adapter);
    }
  }
  return innerClasses;
}"
53471,"public DefaultInternalClassMetadata(final String classInternalName,final String superClassInternalName,final List<String> interfaceInternalNames,final List<String> annotationInternalNames,final boolean isInterface,final boolean isAnnotation,final boolean isSynthetic,final boolean isInnerClass){
  this.classInternalName=classInternalName;
  this.superClassInternalName=superClassInternalName;
  if (interfaceInternalNames == null) {
    this.interfaceInternalNames=Collections.EMPTY_LIST;
  }
 else {
    this.interfaceInternalNames=Collections.unmodifiableList(interfaceInternalNames);
  }
  if (annotationInternalNames == null) {
    this.annotationInternalNames=Collections.EMPTY_LIST;
  }
 else {
    this.annotationInternalNames=Collections.unmodifiableList(annotationInternalNames);
  }
  this.isInterface=isInterface;
  this.isAnnotation=isAnnotation;
  this.isSynthetic=isSynthetic;
  this.isInnerClass=isInnerClass;
}","public DefaultInternalClassMetadata(final String classInternalName,final String superClassInternalName,final List<String> interfaceInternalNames,final List<String> annotationInternalNames,final boolean isInterface,final boolean isAnnotation,final boolean isSynthetic,final boolean isInnerClass){
  this.classInternalName=classInternalName;
  this.superClassInternalName=superClassInternalName;
  this.interfaceInternalNames=defaultInterfaceName(interfaceInternalNames);
  this.annotationInternalNames=defaultAnnotationName(annotationInternalNames);
  this.isInterface=isInterface;
  this.isAnnotation=isAnnotation;
  this.isSynthetic=isSynthetic;
  this.isInnerClass=isInnerClass;
}"
53472,"public DefaultSimpleClassMetadata(final int version,final int accessFlag,final String classInternalName,final String superClassInternalName,final List<String> interfaceInternalNames,final byte[] classBinary){
  this.version=version;
  this.accessFlag=accessFlag;
  this.className=JavaAssistUtils.jvmNameToJavaName(classInternalName);
  if (superClassInternalName == null) {
    this.superClassName=null;
  }
 else {
    this.superClassName=JavaAssistUtils.jvmNameToJavaName(superClassInternalName);
  }
  if (interfaceInternalNames == null) {
    this.interfaceNames=Collections.EMPTY_LIST;
  }
 else {
    this.interfaceNames=Collections.unmodifiableList(JavaAssistUtils.jvmNameToJavaName(interfaceInternalNames));
  }
  this.classBinary=classBinary;
}","public DefaultSimpleClassMetadata(final int version,final int accessFlag,final String classInternalName,final String superClassInternalName,final List<String> interfaceInternalNames,final byte[] classBinary){
  this.version=version;
  this.accessFlag=accessFlag;
  this.className=JavaAssistUtils.jvmNameToJavaName(classInternalName);
  this.superClassName=defaultSuperClassName(superClassInternalName);
  this.interfaceNames=defaultInterfaceName(interfaceInternalNames);
  this.classBinary=classBinary;
}"
53473,"private TSpanChunk copySpanChunkWithoutSpanEvent(TSpanChunk spanChunk){
  TSpanChunk copiedSpanChunk=spanChunk.deepCopy();
  copiedSpanChunk.setSpanEventList(Collections.EMPTY_LIST);
  return copiedSpanChunk;
}","private TSpanChunk copySpanChunkWithoutSpanEvent(TSpanChunk spanChunk){
  TSpanChunk copiedSpanChunk=spanChunk.deepCopy();
  copiedSpanChunk.setSpanEventList(Collections.<TSpanEvent>emptyList());
  return copiedSpanChunk;
}"
53474,"private TSpan copySpanWithoutSpanEvent(TSpan span){
  TSpan copiedSpan=span.deepCopy();
  copiedSpan.setSpanEventList(Collections.EMPTY_LIST);
  return copiedSpan;
}","private TSpan copySpanWithoutSpanEvent(TSpan span){
  TSpan copiedSpan=span.deepCopy();
  copiedSpan.setSpanEventList(Collections.<TSpanEvent>emptyList());
  return copiedSpan;
}"
53475,"private TSpanChunk toSpanChunk(TSpan span){
  final TSpanChunk spanChunk=new TSpanChunk();
  spanChunk.setSpanEventList(Collections.EMPTY_LIST);
  spanChunk.setSpanEventListIsSet(true);
  spanChunk.setAgentId(span.getAgentId());
  spanChunk.setAgentIdIsSet(true);
  spanChunk.setApplicationName(span.getApplicationName());
  spanChunk.setApplicationNameIsSet(true);
  spanChunk.setAgentStartTime(span.getStartTime());
  spanChunk.setAgentStartTimeIsSet(true);
  spanChunk.setTransactionId(span.getTransactionId());
  spanChunk.setTransactionIdIsSet(true);
  spanChunk.setSpanId(span.getSpanId());
  spanChunk.setSpanIdIsSet(true);
  spanChunk.setEndPoint(span.getEndPoint());
  spanChunk.setEndPointIsSet(true);
  return spanChunk;
}","private TSpanChunk toSpanChunk(TSpan span){
  final TSpanChunk spanChunk=new TSpanChunk();
  spanChunk.setSpanEventList(Collections.<TSpanEvent>emptyList());
  spanChunk.setSpanEventListIsSet(true);
  spanChunk.setAgentId(span.getAgentId());
  spanChunk.setAgentIdIsSet(true);
  spanChunk.setApplicationName(span.getApplicationName());
  spanChunk.setApplicationNameIsSet(true);
  spanChunk.setAgentStartTime(span.getStartTime());
  spanChunk.setAgentStartTimeIsSet(true);
  spanChunk.setTransactionId(span.getTransactionId());
  spanChunk.setTransactionIdIsSet(true);
  spanChunk.setSpanId(span.getSpanId());
  spanChunk.setSpanIdIsSet(true);
  spanChunk.setEndPoint(span.getEndPoint());
  spanChunk.setEndPointIsSet(true);
  return spanChunk;
}"
53476,"@Test public void interfaceNamesNull() throws Exception {
  DefaultInternalClassMetadata classMetadata=new DefaultInternalClassMetadata(""String_Node_Str"",""String_Node_Str"",null,Collections.EMPTY_LIST,false,false,false,false);
  assertEquals(0,classMetadata.getInterfaceInternalNames().size());
}","@Test public void interfaceNamesNull() throws Exception {
  DefaultInternalClassMetadata classMetadata=new DefaultInternalClassMetadata(""String_Node_Str"",""String_Node_Str"",null,Collections.<String>emptyList(),false,false,false,false);
  assertEquals(0,classMetadata.getInterfaceInternalNames().size());
}"
53477,"@Test public void base() throws Exception {
  DefaultInternalClassMetadata classMetadata=new DefaultInternalClassMetadata(""String_Node_Str"",""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""),Collections.EMPTY_LIST,false,false,false,false);
  assertEquals(""String_Node_Str"",classMetadata.getClassInternalName());
  assertEquals(""String_Node_Str"",classMetadata.getSuperClassInternalName());
  assertTrue(classMetadata.getInterfaceInternalNames().contains(""String_Node_Str""));
  assertTrue(classMetadata.getInterfaceInternalNames().contains(""String_Node_Str""));
  assertEquals(0,classMetadata.getAnnotationInternalNames().size());
}","@Test public void base() throws Exception {
  DefaultInternalClassMetadata classMetadata=new DefaultInternalClassMetadata(""String_Node_Str"",""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""),Collections.<String>emptyList(),false,false,false,false);
  assertEquals(""String_Node_Str"",classMetadata.getClassInternalName());
  assertEquals(""String_Node_Str"",classMetadata.getSuperClassInternalName());
  assertTrue(classMetadata.getInterfaceInternalNames().contains(""String_Node_Str""));
  assertTrue(classMetadata.getInterfaceInternalNames().contains(""String_Node_Str""));
  assertEquals(0,classMetadata.getAnnotationInternalNames().size());
}"
53478,"Map<String,byte[]> getCollectorData(ZookeeperClient client,String path){
  try {
    List<String> collectorList=client.getChildren(path,true);
    if (collectorList == Collections.EMPTY_LIST) {
      return Collections.emptyMap();
    }
    Map<String,byte[]> map=new HashMap<>();
    for (    String collector : collectorList) {
      String node=bindingPathAndZNode(path,collector);
      byte[] data=client.getData(node,true);
      map.put(node,data);
    }
    return map;
  }
 catch (  Exception e) {
    logger.warn(e.getMessage(),e);
  }
  return Collections.emptyMap();
}","Map<String,byte[]> getCollectorData(ZookeeperClient client,String path){
  try {
    List<String> collectorList=client.getChildren(path,true);
    if (CollectionUtils.isEmpty(collectorList)) {
      return Collections.emptyMap();
    }
    Map<String,byte[]> map=new HashMap<>();
    for (    String collector : collectorList) {
      String node=bindingPathAndZNode(path,collector);
      byte[] data=client.getData(node,true);
      map.put(node,data);
    }
    return map;
  }
 catch (  Exception e) {
    logger.warn(e.getMessage(),e);
  }
  return Collections.emptyMap();
}"
53479,"private static List<Link> filterSpan(final List<Link> linkList,final SpanBo span){
  if (linkList == null || linkList.isEmpty()) {
    return Collections.EMPTY_LIST;
  }
  final List<Link> result=new ArrayList<>();
  for (  Link link : linkList) {
    if (span.getParentSpanId() == link.parentSpanId && span.getSpanId() == link.spanId) {
      continue;
    }
    if (link.nextSpanId == span.getParentSpanId()) {
      result.add(link);
    }
  }
  return result;
}","private static List<Link> filterSpan(final List<Link> linkList,final SpanBo span){
  if (CollectionUtils.isEmpty(linkList)) {
    return Collections.emptyList();
  }
  final List<Link> result=new ArrayList<>();
  for (  Link link : linkList) {
    if (span.getParentSpanId() == link.parentSpanId && span.getSpanId() == link.spanId) {
      continue;
    }
    if (link.nextSpanId == span.getParentSpanId()) {
      result.add(link);
    }
  }
  return result;
}"
53480,"private void fill(){
  final List<Node> unlinkedNodeList=NodeList.filterUnlinked(this.sortedNodeList);
  for (  Node node : unlinkedNodeList) {
    if (node.linked || node.span.isRoot()) {
      continue;
    }
    final List<Link> targetLinkList=LinkList.filterSpan(this.linkList,node.span);
    if (targetLinkList != null && !targetLinkList.isEmpty()) {
      final Link matchedLink=LinkList.matchSpan(targetLinkList,node.span);
      if (matchedLink != null) {
        if (isDebug) {
          logger.debug(""String_Node_Str"",matchedLink,node);
        }
        final CallTree unknownSpanCallTree=this.metaSpanCallTreeFactory.unknown(node.span.getStartTime());
        unknownSpanCallTree.add(node.spanCallTree);
        node.linked=true;
        matchedLink.linkedCallTree.update(unknownSpanCallTree);
        matchedLink.linked=true;
        this.linkList.remove(matchedLink);
        updateMatchType(PROGRESS_MATCH);
      }
    }
  }
}","private void fill(){
  final List<Node> unlinkedNodeList=NodeList.filterUnlinked(this.sortedNodeList);
  for (  Node node : unlinkedNodeList) {
    if (node.linked || node.span.isRoot()) {
      continue;
    }
    final List<Link> targetLinkList=LinkList.filterSpan(this.linkList,node.span);
    if (CollectionUtils.hasLength(targetLinkList)) {
      final Link matchedLink=LinkList.matchSpan(targetLinkList,node.span);
      if (matchedLink != null) {
        if (isDebug) {
          logger.debug(""String_Node_Str"",matchedLink,node);
        }
        final CallTree unknownSpanCallTree=this.metaSpanCallTreeFactory.unknown(node.span.getStartTime());
        unknownSpanCallTree.add(node.spanCallTree);
        node.linked=true;
        matchedLink.linkedCallTree.update(unknownSpanCallTree);
        matchedLink.linked=true;
        this.linkList.remove(matchedLink);
        updateMatchType(PROGRESS_MATCH);
      }
    }
  }
}"
53481,"private static Link matchSpan(final List<Link> linkList,final SpanBo span){
  if (linkList == null || linkList.isEmpty()) {
    return null;
  }
  linkList.sort(new Comparator<Link>(){
    @Override public int compare(    Link first,    Link second){
      return (int)(first.startTimeMillis - second.startTimeMillis);
    }
  }
);
  for (  Link link : linkList) {
    if (link.startTimeMillis <= span.getStartTime()) {
      return link;
    }
  }
  return null;
}","private static Link matchSpan(final List<Link> linkList,final SpanBo span){
  if (CollectionUtils.isEmpty(linkList)) {
    return null;
  }
  linkList.sort(new Comparator<Link>(){
    @Override public int compare(    Link first,    Link second){
      return (int)(first.startTimeMillis - second.startTimeMillis);
    }
  }
);
  for (  Link link : linkList) {
    if (link.startTimeMillis <= span.getStartTime()) {
      return link;
    }
  }
  return null;
}"
53482,"private void bindTraceComponent(){
  bind(TraceRootFactory.class).to(DefaultTraceRootFactory.class).in(Scopes.SINGLETON);
  bind(TraceIdFactory.class).to(DefaultTraceIdFactory.class).in(Scopes.SINGLETON);
  bind(CallStackFactory.class).toProvider(CallStackFactoryProvider.class).in(Scopes.SINGLETON);
  bind(SpanFactory.class).to(DefaultSpanFactory.class).in(Scopes.SINGLETON);
  bind(SpanPostProcessor.class).toProvider(SpanPostProcessorProvider.class).in(Scopes.SINGLETON);
  bind(SpanChunkFactory.class).toProvider(SpanChunkFactoryProvider.class).in(Scopes.SINGLETON);
  bind(RecorderFactory.class).to(DefaultRecorderFactory.class).in(Scopes.SINGLETON);
  bind(BaseTraceFactory.class).toProvider(BaseTraceFactoryProvider.class).in(Scopes.SINGLETON);
  ;
  bind(TraceFactory.class).toProvider(TraceFactoryProvider.class).in(Scopes.SINGLETON);
}","private void bindTraceComponent(){
  bind(TraceRootFactory.class).to(DefaultTraceRootFactory.class).in(Scopes.SINGLETON);
  bind(TraceIdFactory.class).to(DefaultTraceIdFactory.class).in(Scopes.SINGLETON);
  bind(CallStackFactory.class).toProvider(CallStackFactoryProvider.class).in(Scopes.SINGLETON);
  bind(SpanFactory.class).to(DefaultSpanFactory.class).in(Scopes.SINGLETON);
  bind(SpanPostProcessor.class).toProvider(SpanPostProcessorProvider.class).in(Scopes.SINGLETON);
  bind(SpanChunkFactory.class).toProvider(SpanChunkFactoryProvider.class).in(Scopes.SINGLETON);
  bind(RecorderFactory.class).to(DefaultRecorderFactory.class).in(Scopes.SINGLETON);
  bind(BaseTraceFactory.class).toProvider(BaseTraceFactoryProvider.class).in(Scopes.SINGLETON);
  bind(TraceFactory.class).toProvider(TraceFactoryProvider.class).in(Scopes.SINGLETON);
}"
53483,"public static List<String> getHostIpList(){
  List<String> result=new ArrayList<String>();
  Enumeration<NetworkInterface> interfaces=null;
  try {
    interfaces=NetworkInterface.getNetworkInterfaces();
  }
 catch (  SocketException ignore) {
  }
  if (interfaces == null) {
    return Collections.emptyList();
  }
  while (interfaces.hasMoreElements()) {
    NetworkInterface current=interfaces.nextElement();
    if (isSkipNetworkInterface(current)) {
      continue;
    }
    Enumeration<InetAddress> addresses=current.getInetAddresses();
    while (addresses.hasMoreElements()) {
      InetAddress address=addresses.nextElement();
      if (address.isLoopbackAddress()) {
        continue;
      }
      String hostAddress=address.getHostAddress();
      if (!isLoopbackAddress(hostAddress)) {
        result.add(address.getHostAddress());
      }
    }
  }
  return result;
}","public static List<String> getHostIpList(){
  Enumeration<NetworkInterface> interfaces=null;
  try {
    interfaces=NetworkInterface.getNetworkInterfaces();
  }
 catch (  SocketException ignore) {
  }
  if (interfaces == null) {
    return Collections.emptyList();
  }
  List<String> result=new ArrayList<String>();
  while (interfaces.hasMoreElements()) {
    NetworkInterface current=interfaces.nextElement();
    if (isSkipNetworkInterface(current)) {
      continue;
    }
    Enumeration<InetAddress> addresses=current.getInetAddresses();
    while (addresses.hasMoreElements()) {
      InetAddress address=addresses.nextElement();
      if (address.isLoopbackAddress()) {
        continue;
      }
      String hostAddress=address.getHostAddress();
      if (!isLoopbackAddress(hostAddress)) {
        result.add(address.getHostAddress());
      }
    }
  }
  return result;
}"
53484,"/** 
 * Returns a list of ip addresses on this machine that is accessible from a remote source. If no network interfaces can be found on this machine, returns an empty List.
 */
public static List<String> getLocalV4IpList(){
  List<String> result=new ArrayList<String>();
  Enumeration<NetworkInterface> interfaces=null;
  try {
    interfaces=NetworkInterface.getNetworkInterfaces();
  }
 catch (  SocketException ignore) {
  }
  if (interfaces == null) {
    return Collections.emptyList();
  }
  while (interfaces.hasMoreElements()) {
    NetworkInterface current=interfaces.nextElement();
    if (isSkipIp(current)) {
      continue;
    }
    Enumeration<InetAddress> addresses=current.getInetAddresses();
    while (addresses.hasMoreElements()) {
      InetAddress address=addresses.nextElement();
      if (address.isLoopbackAddress() || !(address instanceof Inet4Address)) {
        continue;
      }
      if (validationIpV4FormatAddress(address.getHostAddress())) {
        result.add(address.getHostAddress());
      }
    }
  }
  return result;
}","/** 
 * Returns a list of ip addresses on this machine that is accessible from a remote source. If no network interfaces can be found on this machine, returns an empty List.
 */
public static List<String> getLocalV4IpList(){
  Enumeration<NetworkInterface> interfaces=null;
  try {
    interfaces=NetworkInterface.getNetworkInterfaces();
  }
 catch (  SocketException ignore) {
  }
  if (interfaces == null) {
    return Collections.emptyList();
  }
  List<String> result=new ArrayList<String>();
  while (interfaces.hasMoreElements()) {
    NetworkInterface current=interfaces.nextElement();
    if (isSkipIp(current)) {
      continue;
    }
    Enumeration<InetAddress> addresses=current.getInetAddresses();
    while (addresses.hasMoreElements()) {
      InetAddress address=addresses.nextElement();
      if (address.isLoopbackAddress() || !(address instanceof Inet4Address)) {
        continue;
      }
      if (validationIpV4FormatAddress(address.getHostAddress())) {
        result.add(address.getHostAddress());
      }
    }
  }
  return result;
}"
53485,"public static boolean decisionBatchServer(String ip){
  Enumeration<NetworkInterface> interfaces;
  try {
    interfaces=NetworkInterface.getNetworkInterfaces();
  }
 catch (  SocketException e) {
    logger.error(""String_Node_Str"",e);
    return false;
  }
  while (interfaces.hasMoreElements()) {
    NetworkInterface network=interfaces.nextElement();
    Enumeration<InetAddress> inets=network.getInetAddresses();
    while (inets.hasMoreElements()) {
      InetAddress next=inets.nextElement();
      if (next instanceof Inet4Address) {
        if (next.getHostAddress().equals(ip)) {
          return true;
        }
      }
    }
  }
  return false;
}","public static boolean decisionBatchServer(String ip){
  Enumeration<NetworkInterface> interfaces;
  try {
    interfaces=NetworkInterface.getNetworkInterfaces();
  }
 catch (  SocketException e) {
    logger.error(""String_Node_Str"",e);
    return false;
  }
  if (interfaces == null) {
    return false;
  }
  while (interfaces.hasMoreElements()) {
    NetworkInterface network=interfaces.nextElement();
    Enumeration<InetAddress> inets=network.getInetAddresses();
    while (inets.hasMoreElements()) {
      InetAddress next=inets.nextElement();
      if (next instanceof Inet4Address) {
        if (next.getHostAddress().equals(ip)) {
          return true;
        }
      }
    }
  }
  return false;
}"
53486,"@Override public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(deadlockedThreadIdSet);
  sb.append('}');
  return sb.toString();
}","@Override public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(deadlockedThreadIdMap.keySet());
  sb.append('}');
  return sb.toString();
}"
53487,"@Override public Set<Long> getDeadlockedThreadIdSet(){
  Set<Long> copied=new HashSet<Long>(deadlockedThreadIdSet.size());
  copied.addAll(deadlockedThreadIdSet);
  return copied;
}","@Override public Set<Long> getDeadlockedThreadIdSet(){
  final ConcurrentMap<Long,Object> deadlockedThreadIdMap=this.deadlockedThreadIdMap;
  if (deadlockedThreadIdMap.isEmpty()) {
    return Collections.emptySet();
  }
  return new HashSet<Long>(deadlockedThreadIdMap.keySet());
}"
53488,"boolean addDeadlockedThread(long threadId){
  return deadlockedThreadIdSet.add(threadId);
}","boolean addDeadlockedThread(long threadId){
  Object oldValue=deadlockedThreadIdMap.putIfAbsent(threadId,DUMMY_VALUE);
  return oldValue == null;
}"
53489,"private void addServerInterceptor(final JettyConfiguration config){
  transformTemplate.transform(""String_Node_Str"",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader classLoader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentor.getInstrumentClass(classLoader,className,classfileBuffer);
      InstrumentMethod handleMethodEditorBuilder=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (handleMethodEditorBuilder != null) {
        handleMethodEditorBuilder.addInterceptor(""String_Node_Str"",va(config.getJettyExcludeUrlFilter()));
        return target.toBytecode();
      }
      InstrumentMethod jetty8HandleMethodEditorBuilder=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (jetty8HandleMethodEditorBuilder != null) {
        jetty8HandleMethodEditorBuilder.addInterceptor(""String_Node_Str"",va(config.getJettyExcludeUrlFilter()));
        return target.toBytecode();
      }
      return target.toBytecode();
    }
  }
);
}","private void addServerInterceptor(final JettyConfiguration config){
  transformTemplate.transform(""String_Node_Str"",new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader classLoader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      InstrumentClass target=instrumentor.getInstrumentClass(classLoader,className,classfileBuffer);
      InstrumentMethod handleMethodEditorBuilder=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (handleMethodEditorBuilder != null) {
        handleMethodEditorBuilder.addInterceptor(""String_Node_Str"",va(config.getJettyExcludeUrlFilter()));
        return target.toBytecode();
      }
      InstrumentMethod jetty80HandleMethodEditorBuilder=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (jetty80HandleMethodEditorBuilder != null) {
        jetty80HandleMethodEditorBuilder.addInterceptor(""String_Node_Str"",va(config.getJettyExcludeUrlFilter()));
        return target.toBytecode();
      }
      InstrumentMethod jetty82HandleMethodEditorBuilder=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (jetty82HandleMethodEditorBuilder != null) {
        jetty82HandleMethodEditorBuilder.addInterceptor(""String_Node_Str"",va(config.getJettyExcludeUrlFilter()));
        return target.toBytecode();
      }
      return target.toBytecode();
    }
  }
);
}"
53490,"@Override public byte[] doInTransform(Instrumentor instrumentor,ClassLoader classLoader,String className,Class<?> classBeingRedefined,ProtectionDomain protectionDomain,byte[] classfileBuffer) throws InstrumentException {
  InstrumentClass target=instrumentor.getInstrumentClass(classLoader,className,classfileBuffer);
  InstrumentMethod handleMethodEditorBuilder=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
  if (handleMethodEditorBuilder != null) {
    handleMethodEditorBuilder.addInterceptor(""String_Node_Str"",va(config.getJettyExcludeUrlFilter()));
    return target.toBytecode();
  }
  InstrumentMethod jetty8HandleMethodEditorBuilder=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
  if (jetty8HandleMethodEditorBuilder != null) {
    jetty8HandleMethodEditorBuilder.addInterceptor(""String_Node_Str"",va(config.getJettyExcludeUrlFilter()));
    return target.toBytecode();
  }
  return target.toBytecode();
}","@Override public byte[] doInTransform(Instrumentor instrumentor,ClassLoader classLoader,String className,Class<?> classBeingRedefined,ProtectionDomain protectionDomain,byte[] classfileBuffer) throws InstrumentException {
  InstrumentClass target=instrumentor.getInstrumentClass(classLoader,className,classfileBuffer);
  InstrumentMethod handleMethodEditorBuilder=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
  if (handleMethodEditorBuilder != null) {
    handleMethodEditorBuilder.addInterceptor(""String_Node_Str"",va(config.getJettyExcludeUrlFilter()));
    return target.toBytecode();
  }
  InstrumentMethod jetty80HandleMethodEditorBuilder=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
  if (jetty80HandleMethodEditorBuilder != null) {
    jetty80HandleMethodEditorBuilder.addInterceptor(""String_Node_Str"",va(config.getJettyExcludeUrlFilter()));
    return target.toBytecode();
  }
  InstrumentMethod jetty82HandleMethodEditorBuilder=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
  if (jetty82HandleMethodEditorBuilder != null) {
    jetty82HandleMethodEditorBuilder.addInterceptor(""String_Node_Str"",va(config.getJettyExcludeUrlFilter()));
    return target.toBytecode();
  }
  return target.toBytecode();
}"
53491,"private AgentStatPoint<Integer> createPoint(long timestamp,List<Integer> values){
  if (values.isEmpty()) {
    return SampledDataSource.UNCOLLECTED_POINT_CREATER.createUnCollectedPoint(timestamp);
  }
 else {
    return new AgentStatPoint<>(timestamp,INTEGER_DOWN_SAMPLER.sampleMin(values),INTEGER_DOWN_SAMPLER.sampleMax(values),INTEGER_DOWN_SAMPLER.sampleAvg(values,3),INTEGER_DOWN_SAMPLER.sampleSum(values));
  }
}","private AgentStatPoint<Integer> createPoint(long timestamp,List<Integer> values){
  if (values.isEmpty()) {
    return SampledDataSource.UNCOLLECTED_POINT_CREATOR.createUnCollectedPoint(timestamp);
  }
 else {
    return new AgentStatPoint<>(timestamp,INTEGER_DOWN_SAMPLER.sampleMin(values),INTEGER_DOWN_SAMPLER.sampleMax(values),INTEGER_DOWN_SAMPLER.sampleAvg(values,3),INTEGER_DOWN_SAMPLER.sampleSum(values));
  }
}"
53492,"private List<P> createInitialPoints(){
  int numTimeslots=(int)this.timeWindow.getWindowRangeCount();
  List<P> points=new ArrayList<>(numTimeslots);
  for (  long timestamp : this.timeWindow) {
    points.add(uncollectedPointCreater.createUnCollectedPoint(timestamp));
  }
  return points;
}","private List<P> createInitialPoints(){
  int numTimeslots=(int)this.timeWindow.getWindowRangeCount();
  List<P> points=new ArrayList<>(numTimeslots);
  for (  long timestamp : this.timeWindow) {
    points.add(uncollectedPointCreator.createUnCollectedPoint(timestamp));
  }
  return points;
}"
53493,"public TimeSeriesChartBuilder(TimeWindow timeWindow,Point.UncollectedPointCreater<P> uncollectedPointCreator){
  if (timeWindow.getWindowRangeCount() > Integer.MAX_VALUE) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (uncollectedPointCreator == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.timeWindow=timeWindow;
  this.uncollectedPointCreater=uncollectedPointCreator;
}","public TimeSeriesChartBuilder(TimeWindow timeWindow,Point.UncollectedPointCreator<P> uncollectedPointCreator){
  if (timeWindow.getWindowRangeCount() > Integer.MAX_VALUE) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (uncollectedPointCreator == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.timeWindow=timeWindow;
  this.uncollectedPointCreator=uncollectedPointCreator;
}"
53494,"private Chart<AgentStatPoint<Integer>> buildChart(TimeWindow timeWindow,List<AgentStatPoint<Integer>> activeConnectionSizes){
  TimeSeriesChartBuilder<AgentStatPoint<Integer>> builder=new TimeSeriesChartBuilder<>(timeWindow,SampledDataSource.UNCOLLECTED_POINT_CREATER);
  Chart<AgentStatPoint<Integer>> chart=builder.build(activeConnectionSizes);
  return chart;
}","private Chart<AgentStatPoint<Integer>> buildChart(TimeWindow timeWindow,List<AgentStatPoint<Integer>> activeConnectionSizes){
  TimeSeriesChartBuilder<AgentStatPoint<Integer>> builder=new TimeSeriesChartBuilder<>(timeWindow,SampledDataSource.UNCOLLECTED_POINT_CREATOR);
  Chart<AgentStatPoint<Integer>> chart=builder.build(activeConnectionSizes);
  return chart;
}"
53495,"public DatabaseInfo parse(String url){
  if (url == null) {
    return UnKnownDatabaseInfo.INSTANCE;
  }
  final DatabaseInfo hit=cache.get(url);
  if (hit != null) {
    logger.debug(""String_Node_Str"",url,hit);
    return hit;
  }
  DatabaseInfo databaseInfo=null;
  try {
    databaseInfo=doParse(url);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",url);
    databaseInfo=UnKnownDatabaseInfo.INSTANCE;
  }
  final DatabaseInfo old=cache.putIfAbsent(url,databaseInfo);
  if (old != null) {
    return old;
  }
  return databaseInfo;
}","public DatabaseInfo parse(String url){
  if (url == null) {
    return UnKnownDatabaseInfo.INSTANCE;
  }
  final DatabaseInfo hit=cache.get(url);
  if (hit != null) {
    logger.debug(""String_Node_Str"",url,hit);
    return hit;
  }
  final DatabaseInfo databaseInfo=getDatabaseInfo(url);
  final DatabaseInfo old=cache.putIfAbsent(url,databaseInfo);
  if (old != null) {
    return old;
  }
  return databaseInfo;
}"
53496,"private final long getTransactionCount(){
  final long transactionCount=longCounter.getCount();
  if (transactionCount < 0) {
    return UNCOLLECTED;
  }
  if (this.prevTransactionCount == UNINITIALIZED) {
    this.prevTransactionCount=transactionCount;
    return 0L;
  }
  final long transactionCountDelta=transactionCount - this.prevTransactionCount;
  this.prevTransactionCount=transactionCount;
  return transactionCountDelta;
}","private long getTransactionCount(){
  final long transactionCount=longCounter.getCount();
  if (transactionCount < 0) {
    return UNCOLLECTED;
  }
  if (this.prevTransactionCount == UNINITIALIZED) {
    this.prevTransactionCount=transactionCount;
    return 0L;
  }
  final long transactionCountDelta=transactionCount - this.prevTransactionCount;
  this.prevTransactionCount=transactionCount;
  return transactionCountDelta;
}"
53497,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Application that=(Application)o;
  if (serviceType != that.serviceType)   return false;
  if (!name.equals(that.name))   return false;
  return true;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Application that=(Application)o;
  if (!name.equals(that.name))   return false;
  return serviceType.equals(that.serviceType);
}"
53498,"@Override public ServiceType getServiceType(){
  if (this.serviceType != null) {
    return this.serviceType;
  }
  DataSourceMonitor dataSourceMonitor=getInstance();
  if (dataSourceMonitor != null) {
    ServiceType serviceType=dataSourceMonitor.getServiceType();
    if (serviceType != null) {
      this.serviceType=serviceType;
    }
    return serviceType;
  }
  return ServiceType.UNKNOWN;
}","@Override public ServiceType getServiceType(){
  final ServiceType copy=this.serviceType;
  if (copy != null) {
    return copy;
  }
  final DataSourceMonitor dataSourceMonitor=getInstance();
  if (dataSourceMonitor != null) {
    this.serviceType=getServiceType0(dataSourceMonitor);
    return serviceType;
  }
  return ServiceType.UNKNOWN;
}"
53499,"private MatcherOperand joinOr(){
  MatcherOperand operand=null;
  for (  String baseClassName : this.baseClassNames) {
    if (operand == null) {
      operand=new ClassInternalNameMatcherOperand(baseClassName);
    }
 else {
      final MatcherOperand classMatcherOperand=new ClassInternalNameMatcherOperand(baseClassName);
      operand=operand.or(classMatcherOperand);
    }
  }
  return operand;
}","private MatcherOperand joinOr(List<String> baseClassNames){
  MatcherOperand operand=null;
  for (  String baseClassName : baseClassNames) {
    if (operand == null) {
      operand=new ClassInternalNameMatcherOperand(baseClassName);
    }
 else {
      final MatcherOperand classMatcherOperand=new ClassInternalNameMatcherOperand(baseClassName);
      operand=operand.or(classMatcherOperand);
    }
  }
  return operand;
}"
53500,"DefaultMultiClassBasedMatcher(final List<String> baseClassNames,final MatcherOperand additional){
  if (CollectionUtils.isEmpty(baseClassNames)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.baseClassNames=baseClassNames;
  this.matcherOperand=getMatcherOperand(additional);
}","DefaultMultiClassBasedMatcher(final List<String> baseClassNames,final MatcherOperand additional){
  if (CollectionUtils.isEmpty(baseClassNames)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.baseClassNames=baseClassNames;
  this.matcherOperand=getMatcherOperand(baseClassNames,additional);
}"
53501,"private MatcherOperand joinOr(List<String> basePackageNames){
  if (basePackageNames.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"" + basePackageNames);
  }
  MatcherOperand operandGroup=null;
  for (  String basePackageName : basePackageNames) {
    if (operandGroup == null) {
      operandGroup=new PackageInternalNameMatcherOperand(basePackageName);
    }
 else {
      final MatcherOperand packageMatcherOperand=new PackageInternalNameMatcherOperand(basePackageName);
      operandGroup=operandGroup.or(packageMatcherOperand);
    }
  }
  return operandGroup;
}","private MatcherOperand joinOr(List<String> basePackageNames){
  if (basePackageNames.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  MatcherOperand operandGroup=null;
  for (  String basePackageName : basePackageNames) {
    if (operandGroup == null) {
      operandGroup=new PackageInternalNameMatcherOperand(basePackageName);
    }
 else {
      final MatcherOperand packageMatcherOperand=new PackageInternalNameMatcherOperand(basePackageName);
      operandGroup=operandGroup.or(packageMatcherOperand);
    }
  }
  return operandGroup;
}"
53502,"DefaultMultiPackageBasedMatcher(final List<String> basePackageNames,final MatcherOperand additional){
  if (CollectionUtils.isEmpty(basePackageNames)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final List<String> buildBasePackageName=buildBasePackageNameList(basePackageNames);
  final MatcherOperand operand=joinOr(buildBasePackageName);
  this.matcherOperand=addOr(operand,additional);
  this.basePackageNames=Collections.unmodifiableList(buildBasePackageName);
}","DefaultMultiPackageBasedMatcher(final List<String> basePackageNames,final MatcherOperand additional){
  if (CollectionUtils.isEmpty(basePackageNames)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final List<String> buildBasePackageName=buildBasePackageNameList(basePackageNames);
  final MatcherOperand operand=joinOr(buildBasePackageName);
  if (operand == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.matcherOperand=addOr(operand,additional);
  this.basePackageNames=Collections.unmodifiableList(buildBasePackageName);
}"
53503,"@Override public void afterPropertiesSet() throws Exception {
  Assert.notNull(properties);
  readPropertyValues(this.properties);
}","@Override public void afterPropertiesSet() throws Exception {
  final Properties properties=Objects.requireNonNull(this.properties,""String_Node_Str"");
  readPropertyValues(properties);
}"
53504,"private Socket createSocket(InetSocketAddress socketAddress) throws IOException {
  final Socket socket=new Socket();
  boolean success=false;
  try {
    socket.setSoTimeout(3000);
    socket.connect(socketAddress);
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeQuietly(socket);
    }
  }
  return socket;
}","private Socket createSocket(InetSocketAddress socketAddress) throws IOException {
  Socket socket=null;
  boolean success=false;
  try {
    socket=new Socket();
    socket.setSoTimeout(3000);
    socket.connect(socketAddress);
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeQuietly(socket);
    }
  }
  return socket;
}"
53505,"public StringUtils(){
  throw new AssertionError();
}","private StringUtils(){
}"
53506,"private Socket createSocket(InetSocketAddress socketAddress) throws IOException {
  Socket socket=new Socket();
  socket.connect(socketAddress);
  socket.setSoTimeout(3000);
  return socket;
}","private Socket createSocket(InetSocketAddress socketAddress) throws IOException {
  final Socket socket=new Socket();
  boolean success=false;
  try {
    socket.setSoTimeout(3000);
    socket.connect(socketAddress);
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeQuietly(socket);
    }
  }
  return socket;
}"
53507,"private byte[] read(Socket socket,int readSize) throws IOException {
  byte[] buf=new byte[readSize];
  InputStream inputStream=socket.getInputStream();
  inputStream.read(buf);
  return buf;
}","private byte[] read(Socket socket,int readSize) throws IOException {
  byte[] buf=new byte[readSize];
  InputStream inputStream=socket.getInputStream();
  int read=inputStream.read(buf);
  if (read == IOUtils.EOF) {
    return IOUtils.EMPTY_BYTES;
  }
  return Arrays.copyOf(buf,read);
}"
53508,"@Override protected boolean check(InetSocketAddress address,byte[] requestData,byte[] expectedResponseData) throws IOException {
  Socket socket=null;
  try {
    socket=createSocket(address);
    write(socket,requestData);
    byte[] responseData=read(socket,100);
    return Arrays.equals(expectedResponseData,responseData);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (socket != null) {
      socket.close();
    }
  }
  return false;
}","@Override protected boolean check(InetSocketAddress address,byte[] requestData,byte[] expectedResponseData) throws IOException {
  Socket socket=null;
  try {
    socket=createSocket(address);
    write(socket,requestData);
    byte[] responseData=read(socket,100);
    return Arrays.equals(expectedResponseData,responseData);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    IOUtils.closeQuietly(socket);
  }
  return false;
}"
53509,"private DatagramSocket createSocket(InetSocketAddress socketAddress) throws IOException {
  DatagramSocket socket=new DatagramSocket();
  socket.connect(socketAddress);
  socket.setSoTimeout(3000);
  return socket;
}","private DatagramSocket createSocket(InetSocketAddress socketAddress) throws IOException {
  final DatagramSocket socket=new DatagramSocket();
  boolean success=false;
  try {
    socket.setSoTimeout(3000);
    socket.connect(socketAddress);
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeQuietly(socket);
    }
  }
  return socket;
}"
53510,"private byte[] read(DatagramSocket socket,int readSize) throws IOException {
  byte[] buf=new byte[readSize];
  DatagramPacket datagramPacket=new DatagramPacket(buf,buf.length);
  socket.receive(datagramPacket);
  return buf;
}","private byte[] read(DatagramSocket socket,int readSize) throws IOException {
  byte[] buf=new byte[readSize];
  DatagramPacket datagramPacket=new DatagramPacket(buf,buf.length);
  socket.receive(datagramPacket);
  int length=datagramPacket.getLength();
  if (length == 0) {
    return IOUtils.EMPTY_BYTES;
  }
  return Arrays.copyOf(buf,length);
}"
53511,"@Override protected boolean check(InetSocketAddress address,byte[] requestData,byte[] expectedResponseData){
  DatagramSocket socket=null;
  try {
    socket=createSocket();
    write(socket,requestData,address);
    byte[] responseData=read(socket,expectedResponseData.length);
    return Arrays.equals(expectedResponseData,responseData);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (socket != null) {
      socket.close();
    }
  }
  return false;
}","@Override protected boolean check(InetSocketAddress address,byte[] requestData,byte[] expectedResponseData){
  DatagramSocket socket=null;
  try {
    socket=createSocket();
    write(socket,requestData,address);
    byte[] responseData=read(socket,expectedResponseData.length);
    return Arrays.equals(expectedResponseData,responseData);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    IOUtils.closeQuietly(socket);
  }
  return false;
}"
53512,"@Override public void doInAfterTrace(SpanEventRecorder recorder,Object target,Object[] args,Object result,Throwable throwable){
  recorder.recordApi(methodDescriptor);
  recorder.recordServiceType(VertxConstants.VERTX_HTTP_SERVER_INTERNAL);
  recorder.recordException(throwable);
  if (target instanceof ResponseGetter) {
    final HttpResponse response=((ResponseGetter)target)._$PINPOINT$_getResponse();
    final SpanRecorder spanRecorder=getAsyncContext(target).currentAsyncTraceObject().getSpanRecorder();
    this.httpStatusCodeRecorder.record(spanRecorder,response.status().code());
  }
}","@Override public void doInAfterTrace(SpanEventRecorder recorder,Object target,Object[] args,Object result,Throwable throwable){
  recorder.recordApi(methodDescriptor);
  recorder.recordServiceType(VertxConstants.VERTX_HTTP_SERVER_INTERNAL);
  recorder.recordException(throwable);
  if (target instanceof ResponseGetter) {
    final HttpResponse response=((ResponseGetter)target)._$PINPOINT$_getResponse();
    final AsyncContext asyncContext=getAsyncContext(target);
    if (asyncContext != null) {
      final Trace trace=asyncContext.currentAsyncTraceObject();
      if (trace != null) {
        final SpanRecorder spanRecorder=trace.getSpanRecorder();
        this.httpStatusCodeRecorder.record(spanRecorder,response.status().code());
      }
    }
  }
}"
53513,"@Override public void setup(ProfilerPluginSetupContext context){
  NettyConfig config=new NettyConfig(context.getConfig());
  this.config=config;
  if (!config.isPluginEnable()) {
    logger.info(""String_Node_Str"");
    return;
  }
  transformTemplate.transform(""String_Node_Str"",new BootstrapTransformer());
  transformTemplate.transform(""String_Node_Str"",new ChannelPipelineTransformer());
  transformTemplate.transform(""String_Node_Str"",new PromiseTransformer());
  transformTemplate.transform(""String_Node_Str"",new ChannelPromiseTransformer());
  if (config.isHttpCodecEnable()) {
    transformTemplate.transform(""String_Node_Str"",new HttpRequestTransformer());
    transformTemplate.transform(""String_Node_Str"",new HttpEncoderTransformer());
  }
}","@Override public void setup(ProfilerPluginSetupContext context){
  NettyConfig config=new NettyConfig(context.getConfig());
  if (!config.isPluginEnable()) {
    logger.info(""String_Node_Str"");
    return;
  }
  transformTemplate.transform(""String_Node_Str"",new BootstrapTransformer());
  transformTemplate.transform(""String_Node_Str"",new ChannelPipelineTransformer());
  transformTemplate.transform(""String_Node_Str"",new PromiseTransformer());
  transformTemplate.transform(""String_Node_Str"",new ChannelPromiseTransformer());
  if (config.isHttpCodecEnable()) {
    transformTemplate.transform(""String_Node_Str"",new HttpRequestTransformer());
    transformTemplate.transform(""String_Node_Str"",new HttpEncoderTransformer());
  }
}"
53514,"DefaultClassBasedMatcher(final String baseClassName,final MatcherOperand additional){
  Assert.requireNonNull(baseClassName,""String_Node_Str"");
  this.baseClassName=baseClassName;
  MatcherOperand operand=new ClassInternalNameMatcherOperand(baseClassName);
  if (additional != null) {
    operand=operand.and(additional);
  }
  this.matcherOperand=operand;
}","DefaultClassBasedMatcher(final String baseClassName,final MatcherOperand additional){
  this.baseClassName=Assert.requireNonNull(baseClassName,""String_Node_Str"");
  this.matcherOperand=getMatcherOperand(baseClassName,additional);
}"
53515,"DefaultMultiClassBasedMatcher(final List<String> baseClassNames,final MatcherOperand additional){
  Assert.requireNonNull(baseClassNames,""String_Node_Str"");
  this.baseClassNames=Collections.unmodifiableList(baseClassNames);
  MatcherOperand operand=null;
  for (  String baseClassName : this.baseClassNames) {
    final MatcherOperand classMatcherOperand=new ClassInternalNameMatcherOperand(baseClassName);
    if (operand == null) {
      operand=classMatcherOperand;
    }
 else {
      operand=operand.or(classMatcherOperand);
    }
  }
  if (additional != null) {
    operand=operand.and(additional);
  }
  this.matcherOperand=operand;
}","DefaultMultiClassBasedMatcher(final List<String> baseClassNames,final MatcherOperand additional){
  if (CollectionUtils.isEmpty(baseClassNames)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.baseClassNames=baseClassNames;
  this.matcherOperand=getMatcherOperand(additional);
}"
53516,"DefaultMultiPackageBasedMatcher(final List<String> basePackageNames,final MatcherOperand additional){
  Assert.requireNonNull(basePackageNames,""String_Node_Str"");
  final List<String> list=new ArrayList<String>();
  for (  String basePackageName : basePackageNames) {
    if (basePackageName != null && !basePackageName.isEmpty()) {
      list.add(basePackageName);
    }
  }
  if (list.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"" + basePackageNames);
  }
  this.basePackageNames=Collections.unmodifiableList(list);
  MatcherOperand operand=null;
  for (  String basePackageName : this.basePackageNames) {
    final MatcherOperand packageMatcherOperand=new PackageInternalNameMatcherOperand(basePackageName);
    if (operand == null) {
      operand=packageMatcherOperand;
    }
 else {
      operand=operand.or(packageMatcherOperand);
    }
  }
  if (additional != null) {
    operand=operand.and(additional);
  }
  this.matcherOperand=operand;
}","DefaultMultiPackageBasedMatcher(final List<String> basePackageNames,final MatcherOperand additional){
  if (CollectionUtils.isEmpty(basePackageNames)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final List<String> buildBasePackageName=buildBasePackageNameList(basePackageNames);
  final MatcherOperand operand=joinOr(buildBasePackageName);
  this.matcherOperand=addOr(operand,additional);
  this.basePackageNames=Collections.unmodifiableList(buildBasePackageName);
}"
53517,"DefaultPackageBasedMatcher(final String basePackageName,final MatcherOperand additional){
  Assert.requireNonNull(basePackageName,""String_Node_Str"");
  if (basePackageName.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.basePackageName=basePackageName;
  MatcherOperand operand=new PackageInternalNameMatcherOperand(basePackageName);
  if (additional != null) {
    operand=operand.and(additional);
  }
  this.matcherOperand=operand;
}","DefaultPackageBasedMatcher(final String basePackageName,final MatcherOperand additional){
  Assert.requireNonNull(basePackageName,""String_Node_Str"");
  if (!StringUtils.hasText(basePackageName)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.basePackageName=basePackageName;
  MatcherOperand operand=new PackageInternalNameMatcherOperand(basePackageName);
  if (additional != null) {
    operand=operand.and(additional);
  }
  this.matcherOperand=operand;
}"
53518,"public boolean match(final String annotationInternalName){
  if (annotationInternalName != null) {
    return this.annotationInternalName.equals(annotationInternalName);
  }
  return false;
}","public boolean match(final String annotationInternalName){
  if (annotationInternalName == null) {
    return false;
  }
  return this.annotationInternalName.equals(annotationInternalName);
}"
53519,"public boolean match(final String classInternalName){
  if (classInternalName != null) {
    return this.classInternalName.equals(classInternalName);
  }
  return false;
}","public boolean match(final String classInternalName){
  if (classInternalName == null) {
    return false;
  }
  return this.classInternalName.equals(classInternalName);
}"
53520,"public boolean match(final String interfaceInternalName){
  if (interfaceInternalName != null) {
    return this.interfaceInternalName.equals(interfaceInternalName);
  }
  return false;
}","public boolean match(final String interfaceInternalName){
  if (interfaceInternalName == null) {
    return false;
  }
  return this.interfaceInternalName.equals(interfaceInternalName);
}"
53521,"public boolean match(final String packageInternalName){
  if (packageInternalName != null) {
    return packageInternalName.startsWith(this.packageInternalName);
  }
  return false;
}","public boolean match(final String packageInternalName){
  if (packageInternalName == null) {
    return false;
  }
  return packageInternalName.startsWith(this.packageInternalName);
}"
53522,"public boolean match(final String superClassInternalName){
  if (superClassInternalName != null) {
    return this.superClassInternalName.equals(superClassInternalName);
  }
  return false;
}","public boolean match(final String superClassInternalName){
  if (superClassInternalName == null) {
    return false;
  }
  return this.superClassInternalName.equals(superClassInternalName);
}"
53523,"public AndMatcherOperator(final MatcherOperand leftOperand,final MatcherOperand rightOperand){
  Assert.requireNonNull(leftOperand,""String_Node_Str"");
  this.leftOperand=leftOperand;
  Assert.requireNonNull(rightOperand,""String_Node_Str"");
  this.rightOperand=rightOperand;
}","public AndMatcherOperator(final MatcherOperand leftOperand,final MatcherOperand rightOperand){
  this.leftOperand=Assert.requireNonNull(leftOperand,""String_Node_Str"");
  this.rightOperand=Assert.requireNonNull(rightOperand,""String_Node_Str"");
}"
53524,"public NotMatcherOperator(final MatcherOperand rightOperand){
  Assert.requireNonNull(rightOperand,""String_Node_Str"");
  this.rightOperand=rightOperand;
}","public NotMatcherOperator(final MatcherOperand rightOperand){
  this.rightOperand=Assert.requireNonNull(rightOperand,""String_Node_Str"");
}"
53525,"public OrMatcherOperator(final MatcherOperand leftOperand,final MatcherOperand rightOperand){
  Assert.requireNonNull(leftOperand,""String_Node_Str"");
  this.leftOperand=leftOperand;
  Assert.requireNonNull(rightOperand,""String_Node_Str"");
  this.rightOperand=rightOperand;
}","public OrMatcherOperator(final MatcherOperand leftOperand,final MatcherOperand rightOperand){
  this.leftOperand=Assert.requireNonNull(leftOperand,""String_Node_Str"");
  this.rightOperand=Assert.requireNonNull(rightOperand,""String_Node_Str"");
}"
53526,"@Override public Span postProcess(Span span,List<SpanEvent> spanEventList){
  span.finish();
  final long spanStartTime=span.getStartTime();
  spanEventCompressor.compress(spanEventList,spanStartTime);
  span.setSpanEventList((List)spanEventList);
  return span;
}","@Override public Span postProcess(Span span,List<SpanEvent> spanEventList){
  span.finish();
  if (CollectionUtils.hasLength(spanEventList)) {
    final long spanStartTime=span.getStartTime();
    spanEventCompressor.compress(spanEventList,spanStartTime);
    span.setSpanEventList((List)spanEventList);
  }
  return span;
}"
53527,"@Override public Span postProcess(Span span,List<SpanEvent> spanEventList){
  span.setVersion(V2.getVersion());
  span.finish();
  long spanStartTime=span.getStartTime();
  spanEventCompressor.compress(spanEventList,spanStartTime);
  span.setSpanEventList((List)spanEventList);
  return span;
}","@Override public Span postProcess(Span span,List<SpanEvent> spanEventList){
  span.setVersion(V2.getVersion());
  span.finish();
  if (CollectionUtils.hasLength(spanEventList)) {
    long spanStartTime=span.getStartTime();
    spanEventCompressor.compress(spanEventList,spanStartTime);
    span.setSpanEventList((List)spanEventList);
  }
  return span;
}"
53528,"@Override public void store(Span span){
  final List<SpanEvent> storage=clearBuffer();
  if (CollectionUtils.hasLength(storage)) {
    span=spanPostProcessor.postProcess(span,storage);
  }
  dataSender.send(span);
  if (isDebug) {
    logger.debug(""String_Node_Str"",span);
  }
}","@Override public void store(Span span){
  final List<SpanEvent> storage=clearBuffer();
  span=spanPostProcessor.postProcess(span,storage);
  dataSender.send(span);
  if (isDebug) {
    logger.debug(""String_Node_Str"",span);
  }
}"
53529,"@Override public byte[] doInTransform(Instrumentor instrumentor,ClassLoader loader,String className,Class<?> classBeingRedefined,ProtectionDomain protectionDomain,byte[] classfileBuffer) throws InstrumentException {
  InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
  final InstrumentMethod addListenerMethod1=InstrumentUtils.findMethod(target,""String_Node_Str"",""String_Node_Str"");
  if (addListenerMethod1 != null) {
    addListenerMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER,NettyConstants.SCOPE,ExecutionPolicy.BOUNDARY);
  }
  final InstrumentMethod addListenerMethod2=InstrumentUtils.findMethod(target,""String_Node_Str"",""String_Node_Str"");
  if (addListenerMethod2 != null) {
    addListenerMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER,NettyConstants.SCOPE,ExecutionPolicy.BOUNDARY);
  }
  return target.toBytecode();
}","@Override public byte[] doInTransform(Instrumentor instrumentor,ClassLoader loader,String className,Class<?> classBeingRedefined,ProtectionDomain protectionDomain,byte[] classfileBuffer) throws InstrumentException {
  InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
  final InstrumentMethod addListenerMethod1=InstrumentUtils.findMethod(target,""String_Node_Str"",""String_Node_Str"");
  if (addListenerMethod1 != null) {
    addListenerMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER,NettyConstants.SCOPE,ExecutionPolicy.BOUNDARY);
  }
  final InstrumentMethod addListenerMethod2=InstrumentUtils.findMethod(target,""String_Node_Str"",""String_Node_Str"");
  if (addListenerMethod2 != null) {
    addListenerMethod2.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER,NettyConstants.SCOPE,ExecutionPolicy.BOUNDARY);
  }
  return target.toBytecode();
}"
53530,"@Override public void before(Object target,Object[] args){
  if ((target instanceof DataSourceMonitorAccessor)) {
    DbcpDataSourceMonitor dataSourceMonitor=((DataSourceMonitorAccessor)target)._$PINPOINT$_getDataSourceMonitor();
    if (dataSourceMonitor != null) {
      ((DataSourceMonitorAccessor)target)._$PINPOINT$_setDataSourceMonitor(null);
      dataSourceMonitor.close();
      dataSourceMonitorRegistry.unregister(dataSourceMonitor);
    }
  }
}","@Override public void before(Object target,Object[] args){
  if (target instanceof DataSourceMonitorAccessor) {
    final DataSourceMonitorAccessor dataSourceMonitorAccessor=(DataSourceMonitorAccessor)target;
    final DbcpDataSourceMonitor dataSourceMonitor=dataSourceMonitorAccessor._$PINPOINT$_getDataSourceMonitor();
    if (dataSourceMonitor != null) {
      dataSourceMonitorAccessor._$PINPOINT$_setDataSourceMonitor(null);
      dataSourceMonitor.close();
      dataSourceMonitorRegistry.unregister(dataSourceMonitor);
    }
  }
}"
53531,"public DataSourceCloseInterceptor(TraceContext traceContext,DataSourceMonitorRegistry dataSourceMonitorRegistry,MethodDescriptor methodDescriptor){
  this.traceContext=traceContext;
  this.dataSourceMonitorRegistry=dataSourceMonitorRegistry;
  this.methodDescriptor=methodDescriptor;
}","public DataSourceCloseInterceptor(DataSourceMonitorRegistry dataSourceMonitorRegistry){
  this.dataSourceMonitorRegistry=dataSourceMonitorRegistry;
}"
53532,"@Override public void after(Object target,Object[] args,Object result,Throwable throwable){
  if (!InterceptorUtils.isSuccess(throwable)) {
    return;
  }
  if ((target instanceof DataSourceMonitorAccessor) && (target instanceof BasicDataSource)) {
    DbcpDataSourceMonitor dataSourceMonitor=new DbcpDataSourceMonitor((BasicDataSource)target);
    dataSourceMonitorRegistry.register(dataSourceMonitor);
    ((DataSourceMonitorAccessor)target)._$PINPOINT$_setDataSourceMonitor(dataSourceMonitor);
  }
}","@Override public void after(Object target,Object[] args,Object result,Throwable throwable){
  if (!InterceptorUtils.isSuccess(throwable)) {
    return;
  }
  final BasicDataSource basicDataSource=getBasicDatasource(target);
  if (basicDataSource instanceof DataSourceMonitorAccessor) {
    DbcpDataSourceMonitor dataSourceMonitor=new DbcpDataSourceMonitor(basicDataSource);
    dataSourceMonitorRegistry.register(dataSourceMonitor);
    ((DataSourceMonitorAccessor)basicDataSource)._$PINPOINT$_setDataSourceMonitor(dataSourceMonitor);
  }
}"
53533,"private Bootstrap(){
  String[] SPRING_CONFIG_XML=new String[]{""String_Node_Str"",""String_Node_Str""};
  applicationContext=new ClassPathXmlApplicationContext(SPRING_CONFIG_XML);
  tbaseFlatMapper=applicationContext.getBean(""String_Node_Str"",TbaseFlatMapper.class);
  flinkConfiguration=applicationContext.getBean(""String_Node_Str"",FlinkConfiguration.class);
  tcpDispatchHandler=applicationContext.getBean(""String_Node_Str"",TcpDispatchHandler.class);
  tcpSourceFunction=applicationContext.getBean(""String_Node_Str"",TcpSourceFunction.class);
  statisticsDao=applicationContext.getBean(""String_Node_Str"",StatisticsDao.class);
}","private Bootstrap(){
  String[] SPRING_CONFIG_XML=new String[]{""String_Node_Str"",""String_Node_Str""};
  applicationContext=new ClassPathXmlApplicationContext(SPRING_CONFIG_XML);
  tbaseFlatMapper=applicationContext.getBean(""String_Node_Str"",TbaseFlatMapper.class);
  flinkConfiguration=applicationContext.getBean(""String_Node_Str"",FlinkConfiguration.class);
  tcpDispatchHandler=applicationContext.getBean(""String_Node_Str"",TcpDispatchHandler.class);
  tcpSourceFunction=applicationContext.getBean(""String_Node_Str"",TcpSourceFunction.class);
  statisticsDao=applicationContext.getBean(""String_Node_Str"",StatisticsDao.class);
  applicationCache=applicationContext.getBean(""String_Node_Str"",ApplicationCache.class);
  cpuLoadDao=applicationContext.getBean(""String_Node_Str"",CpuLoadDao.class);
  memoryDao=applicationContext.getBean(""String_Node_Str"",MemoryDao.class);
  transactionDao=applicationContext.getBean(""String_Node_Str"",TransactionDao.class);
  activeTraceDao=applicationContext.getBean(""String_Node_Str"",ActiveTraceDao.class);
  responseTimeDao=applicationContext.getBean(""String_Node_Str"",ResponseTimeDao.class);
}"
53534,"public StatisticsDao(CpuLoadDao cpuLoadDao,MemoryDao memoryDao,TransactionDao transactionDao,ActiveTraceDao activeTraceDao,ResponseTimeDao responseTimeDao){
  this.cpuLoadDao=Objects.requireNonNull(cpuLoadDao,""String_Node_Str"");
  this.memoryDao=Objects.requireNonNull(memoryDao,""String_Node_Str"");
  this.transactionDao=Objects.requireNonNull(transactionDao,""String_Node_Str"");
  this.activeTraceDao=Objects.requireNonNull(activeTraceDao,""String_Node_Str"");
  this.responseTimeDao=Objects.requireNonNull(responseTimeDao,""String_Node_Str"");
}","public StatisticsDao(){
}"
53535,"@Override public void configure(Configuration parameters){
  this.APPLICATION_STAT_AGGRE=HBaseTables.APPLICATION_STAT_AGGRE;
}","@Override public void configure(Configuration parameters){
  this.APPLICATION_STAT_AGGRE=HBaseTables.APPLICATION_STAT_AGGRE;
  Bootstrap bootstrap=Bootstrap.getInstance();
  cpuLoadDao=bootstrap.getCpuLoadDao();
  memoryDao=bootstrap.getMemoryDao();
  transactionDao=bootstrap.getTransactionDao();
  activeTraceDao=bootstrap.getActiveTraceDao();
  responseTimeDao=bootstrap.getResponseTimeDao();
}"
53536,"@Override public void flatMap(TBase tBase,Collector<Tuple3<String,JoinStatBo,Long>> out) throws Exception {
  if (tBase instanceof TFAgentStatBatch) {
    logger.info(""String_Node_Str"",tBase);
    final TFAgentStatBatch tFAgentStatBatch=(TFAgentStatBatch)tBase;
    final JoinAgentStatBo joinAgentStatBo;
    try {
      joinAgentStatBo=joinAgentStatBoMapper.map(tFAgentStatBatch);
      if (joinAgentStatBo == JoinAgentStatBo.EMPTY_JOIN_AGENT_STAT_BO) {
        return;
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",tFAgentStatBatch,e);
      return;
    }
    out.collect(new Tuple3<String,JoinStatBo,Long>(joinAgentStatBo.getId(),joinAgentStatBo,joinAgentStatBo.getTimestamp()));
    final ApplicationCache.ApplicationKey applicationKey=new ApplicationCache.ApplicationKey(joinAgentStatBo.getId(),joinAgentStatBo.getAgentStartTimestamp());
    final String applicationId=applicationCache.findApplicationId(applicationKey);
    if (applicationId.equals(ApplicationCache.NOT_FOUND_APP_ID)) {
      logger.warn(""String_Node_Str"");
      return;
    }
    List<JoinApplicationStatBo> joinApplicationStatBoList=JoinApplicationStatBo.createJoinApplicationStatBo(applicationId,joinAgentStatBo,ApplicationStatBoWindow.WINDOW_SIZE);
    for (    JoinApplicationStatBo joinApplicationStatBo : joinApplicationStatBoList) {
      out.collect(new Tuple3<String,JoinStatBo,Long>(applicationId,joinApplicationStatBo,joinApplicationStatBo.getTimestamp()));
    }
  }
}","@Override public void flatMap(TBase tBase,Collector<Tuple3<String,JoinStatBo,Long>> out) throws Exception {
  if (tBase instanceof TFAgentStatBatch) {
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"",tBase);
    }
    final TFAgentStatBatch tFAgentStatBatch=(TFAgentStatBatch)tBase;
    final JoinAgentStatBo joinAgentStatBo;
    try {
      joinAgentStatBo=joinAgentStatBoMapper.map(tFAgentStatBatch);
      if (joinAgentStatBo == JoinAgentStatBo.EMPTY_JOIN_AGENT_STAT_BO) {
        return;
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",tFAgentStatBatch,e);
      return;
    }
    out.collect(new Tuple3<String,JoinStatBo,Long>(joinAgentStatBo.getId(),joinAgentStatBo,joinAgentStatBo.getTimestamp()));
    final ApplicationCache.ApplicationKey applicationKey=new ApplicationCache.ApplicationKey(joinAgentStatBo.getId(),joinAgentStatBo.getAgentStartTimestamp());
    final String applicationId=applicationCache.findApplicationId(applicationKey);
    if (applicationId.equals(ApplicationCache.NOT_FOUND_APP_ID)) {
      logger.warn(""String_Node_Str"");
      return;
    }
    List<JoinApplicationStatBo> joinApplicationStatBoList=JoinApplicationStatBo.createJoinApplicationStatBo(applicationId,joinAgentStatBo,ApplicationStatBoWindow.WINDOW_SIZE);
    for (    JoinApplicationStatBo joinApplicationStatBo : joinApplicationStatBoList) {
      out.collect(new Tuple3<String,JoinStatBo,Long>(applicationId,joinApplicationStatBo,joinApplicationStatBo.getTimestamp()));
    }
  }
}"
53537,"public TbaseFlatMapper(ApplicationCache applicationCache){
  this.applicationCache=Objects.requireNonNull(applicationCache,""String_Node_Str"");
}","public TbaseFlatMapper(JoinAgentStatBoMapper joinAgentStatBoMapper,ApplicationCache applicationCache){
  this.joinAgentStatBoMapper=joinAgentStatBoMapper;
  this.applicationCache=applicationCache;
}"
53538,"@Override public void before(Object target,Object[] args){
  logger.beforeInterceptor(target,target.getClass().getName(),targetMethod.getName(),""String_Node_Str"",args);
  try {
    if (target != null) {
      if (target instanceof AsyncAccessor) {
        ((AsyncAccessor)target)._$PINPOINT$_setAsync(Boolean.FALSE);
      }
      if (target instanceof TraceAccessor) {
        final Trace trace=((TraceAccessor)target)._$PINPOINT$_getTrace();
        if (trace != null && trace.canSampled()) {
          trace.close();
        }
        ((TraceAccessor)target)._$PINPOINT$_setTrace(null);
      }
    }
  }
 catch (  Throwable t) {
    logger.warn(""String_Node_Str"",t.getMessage(),t);
  }
}","@Override public void before(Object target,Object[] args){
  if (logger.isDebugEnabled()) {
    logger.beforeInterceptor(target,methodDescriptor.getClassName(),methodDescriptor.getMethodName(),""String_Node_Str"",args);
  }
  try {
    if (target != null) {
      if (target instanceof AsyncAccessor) {
        ((AsyncAccessor)target)._$PINPOINT$_setAsync(Boolean.FALSE);
      }
      if (target instanceof TraceAccessor) {
        final Trace trace=((TraceAccessor)target)._$PINPOINT$_getTrace();
        if (trace != null && trace.canSampled()) {
          trace.close();
        }
        ((TraceAccessor)target)._$PINPOINT$_setTrace(null);
      }
    }
  }
 catch (  Throwable t) {
    logger.warn(""String_Node_Str"",t.getMessage(),t);
  }
}"
53539,"public HttpRequestInterceptor(InstrumentMethod targetMethod){
  this.targetMethod=targetMethod;
}","public HttpRequestInterceptor(MethodDescriptor methodDescriptor){
  this.methodDescriptor=methodDescriptor;
}"
53540,"private void recordCookie(HttpServletRequest request,Trace trace){
  if (cookieSampler.isSampling()) {
    final SpanEventRecorder recorder=trace.currentSpanEventRecorder();
    Map<String,Object> cookies=ReadCookieMap(request);
    recorder.recordAttribute(AnnotationKey.HTTP_COOKIE,cookies);
  }
}","private void recordCookie(HttpServletRequest request,Trace trace){
  if (cookieSampler.isSampling()) {
    final SpanEventRecorder recorder=trace.currentSpanEventRecorder();
    Map<String,Object> cookies=readCookieMap(request);
    recorder.recordAttribute(AnnotationKey.HTTP_COOKIE,cookies);
  }
}"
53541,"public RequestRecycleInterceptor(InstrumentMethod targetMethod){
  this.targetMethod=targetMethod;
}","public RequestRecycleInterceptor(MethodDescriptor methodDescriptor){
  this.methodDescriptor=methodDescriptor;
}"
53542,"@Override public void before(Object target,Object[] args){
  logger.beforeInterceptor(target,target.getClass().getName(),targetMethod.getName(),""String_Node_Str"",args);
  try {
    if (target instanceof AsyncAccessor) {
      ((AsyncAccessor)target)._$PINPOINT$_setAsync(Boolean.FALSE);
    }
    if (target instanceof TraceAccessor) {
      final Trace trace=((TraceAccessor)target)._$PINPOINT$_getTrace();
      if (trace != null && trace.canSampled()) {
        trace.close();
      }
      ((TraceAccessor)target)._$PINPOINT$_setTrace(null);
    }
  }
 catch (  Throwable t) {
    logger.warn(""String_Node_Str"",t.getMessage(),t);
  }
}","@Override public void before(Object target,Object[] args){
  if (logger.isDebugEnabled()) {
    logger.beforeInterceptor(target,methodDescriptor.getClassName(),methodDescriptor.getMethodName(),""String_Node_Str"",args);
  }
  try {
    if (target instanceof AsyncAccessor) {
      ((AsyncAccessor)target)._$PINPOINT$_setAsync(Boolean.FALSE);
    }
    if (target instanceof TraceAccessor) {
      final Trace trace=((TraceAccessor)target)._$PINPOINT$_getTrace();
      if (trace != null && trace.canSampled()) {
        trace.close();
      }
      ((TraceAccessor)target)._$PINPOINT$_setTrace(null);
    }
  }
 catch (  Throwable t) {
    logger.warn(""String_Node_Str"",t.getMessage(),t);
  }
}"
53543,"/** 
 * @deprecated Since 1.6.1. Use {@link com.navercorp.pinpoint.common.util.StringUtils#abbreviate(String,int)}
 */
@Deprecated public static String drop(final String str,final int maxWidth){
  return abbreviate(str,maxWidth);
}","/** 
 * @deprecated Since 1.6.1. Use {@link com.navercorp.pinpoint.common.util.StringUtils#abbreviate(String,int)}
 */
@Deprecated public static String drop(final String str,final int maxWidth){
  return com.navercorp.pinpoint.common.util.StringUtils.abbreviate(str,maxWidth);
}"
53544,"/** 
 * @deprecated Since 1.7.0. Use {@link com.navercorp.pinpoint.common.util.StringUtils#tokenizeToStringList(String,String)}
 */
@Deprecated public static List<String> splitAndTrim(final String value,final String separator){
  return tokenizeToStringList(value,separator);
}","/** 
 * @deprecated Since 1.7.0. Use {@link com.navercorp.pinpoint.common.util.StringUtils#tokenizeToStringList(String,String)}
 */
@Deprecated public static List<String> splitAndTrim(final String value,final String separator){
  return com.navercorp.pinpoint.common.util.StringUtils.tokenizeToStringList(value,separator);
}"
53545,"/** 
 * @deprecated Since 1.6.1. Use {@link com.navercorp.pinpoint.common.util.StringUtils#appendAbbreviate(StringBuilder,String,int)}
 */
@Deprecated public static void appendDrop(final StringBuilder builder,final String str,final int maxWidth){
  appendAbbreviate(builder,str,maxWidth);
}","/** 
 * @deprecated Since 1.6.1. Use {@link com.navercorp.pinpoint.common.util.StringUtils#appendAbbreviate(StringBuilder,String,int)}
 */
@Deprecated public static void appendDrop(final StringBuilder builder,final String str,final int maxWidth){
  com.navercorp.pinpoint.common.util.StringUtils.appendAbbreviate(builder,str,maxWidth);
}"
53546,"private void recordCookie(HttpServletRequest request,Trace trace){
  if (cookieSampler.isSampling()) {
    final SpanEventRecorder recorder=trace.currentSpanEventRecorder();
    Map<String,Object> cookies=ReadCookieMap(request);
    recorder.recordAttribute(AnnotationKey.HTTP_COOKIE,cookies);
  }
  return;
}","private void recordCookie(HttpServletRequest request,Trace trace){
  if (cookieSampler.isSampling()) {
    final SpanEventRecorder recorder=trace.currentSpanEventRecorder();
    Map<String,Object> cookies=ReadCookieMap(request);
    recorder.recordAttribute(AnnotationKey.HTTP_COOKIE,cookies);
  }
}"
53547,"private String getRequestParameter(IRequest request,int eachLimit,int totalLimit){
  String queryString=request.getQueryString();
  final StringBuilder params=new StringBuilder(64);
  try {
    Map<String,String> query_pairs=splitQuery(queryString);
    Iterator<String> attrs=query_pairs.keySet().iterator();
    while (attrs.hasNext()) {
      if (params.length() != 0) {
        params.append('&');
      }
      if (params.length() > totalLimit) {
        params.append(""String_Node_Str"");
        return params.toString();
      }
      String key=attrs.next();
      params.append(StringUtils.abbreviate(key,eachLimit));
      params.append('=');
      String value=query_pairs.get(key);
      if (value != null) {
        params.append(StringUtils.abbreviate(StringUtils.toString(value),eachLimit));
      }
    }
  }
 catch (  UnsupportedEncodingException e) {
    logger.error(""String_Node_Str"",queryString,e);
  }
  return params.toString();
}","private String getRequestParameter(IRequest request,int eachLimit,int totalLimit){
  String queryString=request.getQueryString();
  final StringBuilder params=new StringBuilder(64);
  try {
    Map<String,String> query_pairs=splitQuery(queryString);
    for (    Map.Entry<String,String> entry : query_pairs.entrySet()) {
      if (params.length() != 0) {
        params.append('&');
      }
      if (params.length() > totalLimit) {
        params.append(""String_Node_Str"");
        return params.toString();
      }
      String key=entry.getKey();
      params.append(StringUtils.abbreviate(key,eachLimit));
      params.append('=');
      String value=entry.getValue();
      if (value != null) {
        params.append(StringUtils.abbreviate(StringUtils.toString(value),eachLimit));
      }
    }
  }
 catch (  UnsupportedEncodingException e) {
    logger.error(""String_Node_Str"",queryString,e);
  }
  return params.toString();
}"
53548,"public void init(FilterConfig filterConfig){
  this.filterConfig=filterConfig;
}","public void init(FilterConfig filterConfig){
}"
53549,"public void destroy(){
  this.filterConfig=null;
}","public void destroy(){
}"
53550,"private long getStartTimestamp(AgentStatBo agentStatBo){
  List<CpuLoadBo> cpuLoadBos=agentStatBo.getCpuLoadBos();
  if (cpuLoadBos != null) {
    CpuLoadBo cpuLoadBo=cpuLoadBos.get(0);
    if (cpuLoadBo != null) {
      return cpuLoadBo.getStartTimestamp();
    }
  }
  return Long.MIN_VALUE;
}","private long getStartTimestamp(AgentStatBo agentStatBo){
  List<CpuLoadBo> cpuLoadBos=agentStatBo.getCpuLoadBos();
  if (CollectionUtils.isEmpty(cpuLoadBos)) {
    CpuLoadBo cpuLoadBo=cpuLoadBos.get(0);
    if (cpuLoadBo != null) {
      return cpuLoadBo.getStartTimestamp();
    }
  }
  return Long.MIN_VALUE;
}"
53551,"public TFAgentStatBatch map(AgentStatBo agentStatBo){
  try {
    List<TFAgentStat> tFAgentstatList=tFAgentStatMapper.map(agentStatBo);
    long startTimestamp=getStartTimestamp(agentStatBo);
    TFAgentStatBatch tFAgentStatBatch=new TFAgentStatBatch(agentStatBo.getAgentId(),startTimestamp,tFAgentstatList);
    return tFAgentStatBatch;
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return null;
}","public TFAgentStatBatch map(AgentStatBo agentStatBo){
  try {
    List<TFAgentStat> tFAgentstatList=tFAgentStatMapper.map(agentStatBo);
    long startTimestamp=getStartTimestamp(agentStatBo);
    TFAgentStatBatch tFAgentStatBatch=new TFAgentStatBatch(agentStatBo.getAgentId(),startTimestamp,tFAgentstatList);
    return tFAgentStatBatch;
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + agentStatBo,e);
  }
  return null;
}"
53552,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + applicationId + '\''+ ""String_Node_Str""+ joinCpuLoadBoList+ ""String_Node_Str""+ joinMemoryBoList+ ""String_Node_Str""+ timestamp+ ""String_Node_Str""+ statType+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + applicationId + '\''+ ""String_Node_Str""+ joinCpuLoadBoList+ ""String_Node_Str""+ joinMemoryBoList+ ""String_Node_Str""+ joinTransactionBoList+ ""String_Node_Str""+ timestamp+ ""String_Node_Str""+ statType+ '}';
}"
53553,"private List<AggreJoinTransactionBo> cast(List<AggregationStatData> aggregationStatDataList){
  List<AggreJoinTransactionBo> aggreJoinCpuLoadBoList=new ArrayList<>(aggregationStatDataList.size());
  for (  AggregationStatData aggregationStatData : aggregationStatDataList) {
    aggreJoinCpuLoadBoList.add((AggreJoinTransactionBo)aggregationStatData);
  }
  return aggreJoinCpuLoadBoList;
}","private List<AggreJoinTransactionBo> cast(List<AggregationStatData> aggregationStatDataList){
  List<AggreJoinTransactionBo> aggreJoinTransactionBoList=new ArrayList<>(aggregationStatDataList.size());
  for (  AggregationStatData aggregationStatData : aggregationStatDataList) {
    aggreJoinTransactionBoList.add((AggreJoinTransactionBo)aggregationStatData);
  }
  return aggreJoinTransactionBoList;
}"
53554,"public ApplicationTransactionChartGroup(TimeWindow timeWindow,List<AggreJoinTransactionBo> aggreJoinTransactionBoList){
  transactionChartMap=new HashMap<>();
  List<Point> transactionList=new ArrayList<>(aggreJoinTransactionBoList.size());
  for (  AggreJoinTransactionBo aggreJoinTransactionBo : aggreJoinTransactionBoList) {
    transactionList.add(new TransactionPoint(aggreJoinTransactionBo.getTimestamp(),aggreJoinTransactionBo.getMinTotalCount(),aggreJoinTransactionBo.getMinTotalCountAgentId(),aggreJoinTransactionBo.getMaxTotalCount(),aggreJoinTransactionBo.getMaxTotalCountAgentId(),aggreJoinTransactionBo.getTotalCount()));
  }
  transactionChartMap.put(TransactionChartType.TRANSACTION_COUNT,new TimeSeriesChartBuilder(timeWindow,UNCOLLECTED_TRANSACTION_POINT).build(transactionList));
}","public ApplicationTransactionChartGroup(TimeWindow timeWindow,List<AggreJoinTransactionBo> aggreJoinTransactionBoList){
  transactionChartMap=new HashMap<>();
  List<Point> transactionList=new ArrayList<>(aggreJoinTransactionBoList.size());
  for (  AggreJoinTransactionBo aggreJoinTransactionBo : aggreJoinTransactionBoList) {
    double minTotalCount=calculateTPS(aggreJoinTransactionBo.getMinTotalCount(),aggreJoinTransactionBo.getCollectInterval());
    double maxTotalCount=calculateTPS(aggreJoinTransactionBo.getMaxTotalCount(),aggreJoinTransactionBo.getCollectInterval());
    double totalCount=calculateTPS(aggreJoinTransactionBo.getTotalCount(),aggreJoinTransactionBo.getCollectInterval());
    transactionList.add(new TransactionPoint(aggreJoinTransactionBo.getTimestamp(),minTotalCount,aggreJoinTransactionBo.getMinTotalCountAgentId(),maxTotalCount,aggreJoinTransactionBo.getMaxTotalCountAgentId(),totalCount));
  }
  transactionChartMap.put(TransactionChartType.TRANSACTION_COUNT,new TimeSeriesChartBuilder(timeWindow,UNCOLLECTED_TRANSACTION_POINT).build(transactionList));
}"
53555,"private void testTranCount(TransactionPoint transactionPoint,AggreJoinTransactionBo aggreJoinTransactionBo){
  assertEquals(transactionPoint.getyValForAvg(),aggreJoinTransactionBo.getTotalCount(),0);
  assertEquals(transactionPoint.getyValForMin(),aggreJoinTransactionBo.getMinTotalCount(),0);
  assertEquals(transactionPoint.getyValForMax(),aggreJoinTransactionBo.getMaxTotalCount(),0);
  assertEquals(transactionPoint.getAgentIdForMin(),aggreJoinTransactionBo.getMinTotalCountAgentId());
  assertEquals(transactionPoint.getAgentIdForMax(),aggreJoinTransactionBo.getMaxTotalCountAgentId());
}","private void testTranCount(TransactionPoint transactionPoint,AggreJoinTransactionBo aggreJoinTransactionBo){
  assertEquals(transactionPoint.getyValForAvg(),calculateTPS(aggreJoinTransactionBo.getTotalCount(),aggreJoinTransactionBo.getCollectInterval()),0);
  assertEquals(transactionPoint.getyValForMin(),calculateTPS(aggreJoinTransactionBo.getMinTotalCount(),aggreJoinTransactionBo.getCollectInterval()),0);
  assertEquals(transactionPoint.getyValForMax(),calculateTPS(aggreJoinTransactionBo.getMaxTotalCount(),aggreJoinTransactionBo.getCollectInterval()),0);
  assertEquals(transactionPoint.getAgentIdForMin(),aggreJoinTransactionBo.getMinTotalCountAgentId());
  assertEquals(transactionPoint.getAgentIdForMax(),aggreJoinTransactionBo.getMaxTotalCountAgentId());
}"
53556,"public Record getException(final int depth,final int parentId,final SpanAlign align){
  if (!align.hasException()) {
    return null;
  }
  final Record record=new Record(depth,getNextId(),parentId,false,getSimpleExceptionName(align.getExceptionClass()),align.getExceptionMessage(),0L,0L,0,null,null,null,null,false,true,align.getTransactionId(),align.getSpanId(),align.getExecutionMilliseconds(),MethodTypeEnum.DEFAULT,true);
  return record;
}","public Record getException(final int depth,final int parentId,final SpanAlign align){
  if (!align.hasException()) {
    return null;
  }
  final Record record=new Record(depth,getNextId(),parentId,false,getSimpleExceptionName(align.getExceptionClass()),getArgumentFromExceptionMessage(align.getExceptionMessage()),0L,0L,0,null,null,null,null,false,true,align.getTransactionId(),align.getSpanId(),align.getExecutionMilliseconds(),MethodTypeEnum.DEFAULT,true);
  return record;
}"
53557,"public Record getParameter(final int depth,final int parentId,final String method,final String argument){
  return new Record(depth,getNextId(),parentId,false,method,argument,0L,0L,0,null,null,null,null,false,false,null,0,0,MethodTypeEnum.DEFAULT,true);
}","public Record getParameter(final int depth,final int parentId,final String method,final String argument){
  return new Record(depth,getNextId(),parentId,false,method,getArgumentFromParameter(argument),0L,0L,0,null,null,null,null,false,false,null,0,0,MethodTypeEnum.DEFAULT,true);
}"
53558,"private void sendSimpleRequestPacket(OutputStream outputStream) throws ProtocolException, IOException {
  RequestPacket packet=new RequestPacket(new byte[0]);
  packet.setRequestId(10);
  ByteBuffer bb=packet.toBuffer().toByteBuffer(0,packet.toBuffer().writerIndex());
  sendData(outputStream,bb.array());
}","private void sendSimpleRequestPacket(OutputStream outputStream) throws ProtocolException, IOException {
  RequestPacket packet=new RequestPacket(new byte[0]);
  packet.setRequestId(10);
  ByteBuffer bb=packet.toBuffer().toByteBuffer(0,packet.toBuffer().writerIndex());
  IOUtils.write(outputStream,bb.array());
}"
53559,"private ControlHandshakeResponsePacket receiveRegisterConfirmPacket(InputStream inputStream) throws ProtocolException, IOException {
  byte[] payload=readData(inputStream);
  ChannelBuffer cb=ChannelBuffers.wrappedBuffer(payload);
  short packetType=cb.readShort();
  ControlHandshakeResponsePacket packet=ControlHandshakeResponsePacket.readBuffer(packetType,cb);
  return packet;
}","private ControlHandshakeResponsePacket receiveRegisterConfirmPacket(InputStream inputStream) throws ProtocolException, IOException {
  byte[] payload=IOUtils.read(inputStream,50,3000);
  ChannelBuffer cb=ChannelBuffers.wrappedBuffer(payload);
  short packetType=cb.readShort();
  ControlHandshakeResponsePacket packet=ControlHandshakeResponsePacket.readBuffer(packetType,cb);
  return packet;
}"
53560,"private void sendRegisterPacket(OutputStream outputStream,Map<String,Object> properties) throws ProtocolException, IOException {
  byte[] payload=ControlMessageEncodingUtils.encode(properties);
  ControlHandshakePacket packet=new ControlHandshakePacket(1,payload);
  ByteBuffer bb=packet.toBuffer().toByteBuffer(0,packet.toBuffer().writerIndex());
  sendData(outputStream,bb.array());
}","private void sendRegisterPacket(OutputStream outputStream,Map<String,Object> properties) throws ProtocolException, IOException {
  byte[] payload=ControlMessageEncodingUtils.encode(properties);
  ControlHandshakePacket packet=new ControlHandshakePacket(1,payload);
  ByteBuffer bb=packet.toBuffer().toByteBuffer(0,packet.toBuffer().writerIndex());
  IOUtils.write(outputStream,bb.array());
}"
53561,"private ResponsePacket readSimpleResponsePacket(InputStream inputStream) throws ProtocolException, IOException {
  byte[] payload=readData(inputStream);
  ChannelBuffer cb=ChannelBuffers.wrappedBuffer(payload);
  short packetType=cb.readShort();
  ResponsePacket packet=ResponsePacket.readBuffer(packetType,cb);
  return packet;
}","private ResponsePacket readSimpleResponsePacket(InputStream inputStream) throws ProtocolException, IOException {
  byte[] payload=IOUtils.read(inputStream,50,3000);
  ChannelBuffer cb=ChannelBuffers.wrappedBuffer(payload);
  short packetType=cb.readShort();
  ResponsePacket packet=ResponsePacket.readBuffer(packetType,cb);
  return packet;
}"
53562,"private void sendSimpleRequestPacket(OutputStream outputStream) throws ProtocolException, IOException {
  RequestPacket packet=new RequestPacket(new byte[0]);
  packet.setRequestId(10);
  ByteBuffer bb=packet.toBuffer().toByteBuffer(0,packet.toBuffer().writerIndex());
  sendData(outputStream,bb.array());
}","private void sendSimpleRequestPacket(OutputStream outputStream) throws ProtocolException, IOException {
  RequestPacket packet=new RequestPacket(new byte[0]);
  packet.setRequestId(10);
  ByteBuffer bb=packet.toBuffer().toByteBuffer(0,packet.toBuffer().writerIndex());
  IOUtils.write(outputStream,bb.array());
}"
53563,"private ControlHandshakeResponsePacket receiveRegisterConfirmPacket(InputStream inputStream) throws ProtocolException, IOException {
  byte[] payload=readData(inputStream);
  ChannelBuffer cb=ChannelBuffers.wrappedBuffer(payload);
  short packetType=cb.readShort();
  ControlHandshakeResponsePacket packet=ControlHandshakeResponsePacket.readBuffer(packetType,cb);
  return packet;
}","private ControlHandshakeResponsePacket receiveRegisterConfirmPacket(InputStream inputStream) throws ProtocolException, IOException {
  byte[] payload=IOUtils.read(inputStream,50,3000);
  ChannelBuffer cb=ChannelBuffers.wrappedBuffer(payload);
  short packetType=cb.readShort();
  ControlHandshakeResponsePacket packet=ControlHandshakeResponsePacket.readBuffer(packetType,cb);
  return packet;
}"
53564,"private void sendRegisterPacket(OutputStream outputStream,Map<String,Object> properties) throws ProtocolException, IOException {
  byte[] payload=ControlMessageEncodingUtils.encode(properties);
  ControlHandshakePacket packet=new ControlHandshakePacket(1,payload);
  ByteBuffer bb=packet.toBuffer().toByteBuffer(0,packet.toBuffer().writerIndex());
  sendData(outputStream,bb.array());
}","private void sendRegisterPacket(OutputStream outputStream,Map<String,Object> properties) throws ProtocolException, IOException {
  byte[] payload=ControlMessageEncodingUtils.encode(properties);
  ControlHandshakePacket packet=new ControlHandshakePacket(1,payload);
  ByteBuffer bb=packet.toBuffer().toByteBuffer(0,packet.toBuffer().writerIndex());
  IOUtils.write(outputStream,bb.array());
}"
53565,"private ResponsePacket readSimpleResponsePacket(InputStream inputStream) throws ProtocolException, IOException {
  byte[] payload=readData(inputStream);
  ChannelBuffer cb=ChannelBuffers.wrappedBuffer(payload);
  short packetType=cb.readShort();
  ResponsePacket packet=ResponsePacket.readBuffer(packetType,cb);
  return packet;
}","private ResponsePacket readSimpleResponsePacket(InputStream inputStream) throws ProtocolException, IOException {
  byte[] payload=IOUtils.read(inputStream,50,3000);
  ChannelBuffer cb=ChannelBuffers.wrappedBuffer(payload);
  short packetType=cb.readShort();
  ResponsePacket packet=ResponsePacket.readBuffer(packetType,cb);
  return packet;
}"
53566,"private void throwAuthException(String messsage) throws ModelAndViewDefiningException {
  logger.warn(messsage);
  throw new ModelAndViewDefiningException(ControllerUtils.createJsonView(false,messsage));
}","private void throwAuthException(String message) throws ModelAndViewDefiningException {
  logger.warn(message);
  throw new ModelAndViewDefiningException(ControllerUtils.createJsonView(false,message));
}"
53567,"/** 
 * Returns a list of ip addresses on this machine that is accessible from a remote source. If no network interfaces can be found on this machine, returns an empty List.
 */
public static List<String> getLocalV4IpList(){
  List<String> result=new ArrayList<String>();
  Enumeration<NetworkInterface> interfaces=null;
  try {
    interfaces=NetworkInterface.getNetworkInterfaces();
  }
 catch (  SocketException ignore) {
  }
  if (interfaces == null) {
    return Collections.EMPTY_LIST;
  }
  while (interfaces.hasMoreElements()) {
    NetworkInterface current=interfaces.nextElement();
    if (isSkipIp(current)) {
      continue;
    }
    Enumeration<InetAddress> addresses=current.getInetAddresses();
    while (addresses.hasMoreElements()) {
      InetAddress address=addresses.nextElement();
      if (address.isLoopbackAddress() || !(address instanceof Inet4Address)) {
        continue;
      }
      if (validationIpV4FormatAddress(address.getHostAddress())) {
        result.add(address.getHostAddress());
      }
    }
  }
  return result;
}","/** 
 * Returns a list of ip addresses on this machine that is accessible from a remote source. If no network interfaces can be found on this machine, returns an empty List.
 */
public static List<String> getLocalV4IpList(){
  List<String> result=new ArrayList<String>();
  Enumeration<NetworkInterface> interfaces=null;
  try {
    interfaces=NetworkInterface.getNetworkInterfaces();
  }
 catch (  SocketException ignore) {
  }
  if (interfaces == null) {
    return Collections.emptyList();
  }
  while (interfaces.hasMoreElements()) {
    NetworkInterface current=interfaces.nextElement();
    if (isSkipIp(current)) {
      continue;
    }
    Enumeration<InetAddress> addresses=current.getInetAddresses();
    while (addresses.hasMoreElements()) {
      InetAddress address=addresses.nextElement();
      if (address.isLoopbackAddress() || !(address instanceof Inet4Address)) {
        continue;
      }
      if (validationIpV4FormatAddress(address.getHostAddress())) {
        result.add(address.getHostAddress());
      }
    }
  }
  return result;
}"
53568,"public static String getParameterDescription(String[] params){
  if (params == null) {
    return EMTPY_ARRAY;
  }
  StringBuilder sb=new StringBuilder(64);
  sb.append('(');
  int end=params.length - 1;
  for (int i=0; i < params.length; i++) {
    sb.append(params[i]);
    if (i < end) {
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(')');
  return sb.toString();
}","public static String getParameterDescription(String[] params){
  if (params == null) {
    return EMPTY_ARRAY;
  }
  StringBuilder sb=new StringBuilder(64);
  sb.append('(');
  int end=params.length - 1;
  for (int i=0; i < params.length; i++) {
    sb.append(params[i]);
    if (i < end) {
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(')');
  return sb.toString();
}"
53569,"private String findFromBootDir(final String name,final Pattern pattern){
  String bootDirPath=agentDirPath + File.separator + ""String_Node_Str"";
  File[] files=listFiles(name,pattern,bootDirPath);
  if (ArrayUtils.isEmpty(files)) {
    logger.info(name + ""String_Node_Str"");
    return null;
  }
 else   if (files.length == 1) {
    File file=files[0];
    return toCanonicalPath(file);
  }
 else {
    logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ Arrays.toString(files));
    return null;
  }
}","private String findFromBootDir(final String name,final Pattern pattern){
  String bootDirPath=agentDirPath + File.separator + ""String_Node_Str"";
  File[] files=listFiles(name,pattern,bootDirPath);
  if (isEmpty(files)) {
    logger.info(name + ""String_Node_Str"");
    return null;
  }
 else   if (files.length == 1) {
    File file=files[0];
    return toCanonicalPath(file);
  }
 else {
    logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ Arrays.toString(files));
    return null;
  }
}"
53570,"private DatabaseInfo parse0(String jdbcUrl){
  final Matcher matcher=PATTERN.matcher(jdbcUrl);
  if (!matcher.find()) {
    throw new IllegalArgumentException();
  }
  String host=matcher.group(2);
  String portString=matcher.group(3);
  String db=matcher.group(4);
  String user=matcher.group(5);
  int port=DEFAULT_PORT;
  if (host == null || host.length() == 0) {
    host=DEFAULT_HOSTNAME;
  }
  if (portString == null || portString.length() == 0) {
    port=DEFAULT_PORT;
  }
 else {
    try {
      port=Integer.parseInt(portString);
    }
 catch (    NumberFormatException e) {
      logger.info(""String_Node_Str"",portString,jdbcUrl);
    }
  }
  if (user == null) {
    user=DEFAULT_USER;
  }
  StringMaker maker=new StringMaker(jdbcUrl);
  String normalizedUrl=maker.clear().before('?').value();
  List<String> hostList=new ArrayList<String>(1);
  final String hostAndPort=host + ""String_Node_Str"" + portString;
  hostList.add(hostAndPort);
  return new DefaultDatabaseInfo(CubridConstants.CUBRID,CubridConstants.CUBRID_EXECUTE_QUERY,jdbcUrl,normalizedUrl,hostList,db);
}","private DatabaseInfo parse0(String jdbcUrl){
  final Matcher matcher=PATTERN.matcher(jdbcUrl);
  if (!matcher.find()) {
    throw new IllegalArgumentException();
  }
  String host=matcher.group(2);
  String portString=matcher.group(3);
  String db=matcher.group(4);
  String user=matcher.group(5);
  if (host == null || host.length() == 0) {
    host=DEFAULT_HOSTNAME;
  }
  if (user == null) {
    user=DEFAULT_USER;
  }
  StringMaker maker=new StringMaker(jdbcUrl);
  String normalizedUrl=maker.clear().before('?').value();
  List<String> hostList=new ArrayList<String>(1);
  final String hostAndPort=host + ""String_Node_Str"" + portString;
  hostList.add(hostAndPort);
  return new DefaultDatabaseInfo(CubridConstants.CUBRID,CubridConstants.CUBRID_EXECUTE_QUERY,jdbcUrl,normalizedUrl,hostList,db);
}"
53571,"public DataSourceConstructorInterceptor(TraceContext traceContext,DataSourceMonitorRegistry dataSourceMonitorRegistry,MethodDescriptor methodDescriptor){
  this.traceContext=traceContext;
  this.dataSourceMonitorRegistry=dataSourceMonitorRegistry;
  this.methodDescriptor=methodDescriptor;
}","public DataSourceConstructorInterceptor(DataSourceMonitorRegistry dataSourceMonitorRegistry){
  this.dataSourceMonitorRegistry=dataSourceMonitorRegistry;
}"
53572,"public DataSourceConstructorInterceptor(TraceContext traceContext,DataSourceMonitorRegistry dataSourceMonitorRegistry,MethodDescriptor methodDescriptor){
  this.traceContext=traceContext;
  this.dataSourceMonitorRegistry=dataSourceMonitorRegistry;
  this.methodDescriptor=methodDescriptor;
}","public DataSourceConstructorInterceptor(DataSourceMonitorRegistry dataSourceMonitorRegistry){
  this.dataSourceMonitorRegistry=dataSourceMonitorRegistry;
}"
53573,"@Test public void test(){
  ProfilerConfig profilerConfig=new DefaultProfilerConfig();
  InterceptorRegistryBinder binder=new TestInterceptorRegistryBinder();
  AgentOption agentOption=new DefaultAgentOption(new DummyInstrumentation(),""String_Node_Str"",""String_Node_Str"",profilerConfig,new URL[0],null,new DefaultServiceTypeRegistryService(),new DefaultAnnotationKeyRegistryService());
  final PluginApplicationContextModule pluginApplicationContextModule=new PluginApplicationContextModule();
  PluginTestAgent pluginTestAgent=new PluginTestAgent(agentOption){
    @Override protected ApplicationContext newApplicationContext(    AgentOption agentOption,    InterceptorRegistryBinder interceptorRegistryBinder){
      ApplicationContext applicationContext=new DefaultApplicationContext(agentOption,interceptorRegistryBinder){
        @Override protected Module newApplicationContextModule(        AgentOption agentOption,        InterceptorRegistryBinder interceptorRegistryBinder){
          Module applicationContextModule=super.newApplicationContextModule(agentOption,interceptorRegistryBinder);
          return Modules.override(applicationContextModule).with(pluginApplicationContextModule);
        }
      }
;
      return applicationContext;
    }
  }
;
  try {
    pluginTestAgent.start();
  }
  finally {
    pluginTestAgent.stop(true);
  }
}","@Test public void test(){
  ProfilerConfig profilerConfig=new DefaultProfilerConfig();
  AgentOption agentOption=new DefaultAgentOption(new DummyInstrumentation(),""String_Node_Str"",""String_Node_Str"",profilerConfig,new URL[0],null,new DefaultServiceTypeRegistryService(),new DefaultAnnotationKeyRegistryService());
  final PluginApplicationContextModule pluginApplicationContextModule=new PluginApplicationContextModule();
  PluginTestAgent pluginTestAgent=new PluginTestAgent(agentOption){
    @Override protected ApplicationContext newApplicationContext(    AgentOption agentOption,    InterceptorRegistryBinder interceptorRegistryBinder){
      ApplicationContext applicationContext=new DefaultApplicationContext(agentOption,interceptorRegistryBinder){
        @Override protected Module newApplicationContextModule(        AgentOption agentOption,        InterceptorRegistryBinder interceptorRegistryBinder){
          Module applicationContextModule=super.newApplicationContextModule(agentOption,interceptorRegistryBinder);
          return Modules.override(applicationContextModule).with(pluginApplicationContextModule);
        }
      }
;
      return applicationContext;
    }
  }
;
  try {
    pluginTestAgent.start();
  }
  finally {
    pluginTestAgent.stop(true);
  }
}"
53574,"public static boolean await(TestAwaitTaskUtils awaitTaskUtils,long waitUnitTime,long maxWaitTime){
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  while (true) {
    try {
      if (awaitTaskUtils.checkCompleted()) {
        return true;
      }
    }
 catch (    Exception e) {
      LOGGER.warn(e.getMessage(),e);
    }
    try {
      Thread.sleep(waitUnitTime);
    }
 catch (    InterruptedException e) {
    }
    if (stopWatch.stop() > maxWaitTime) {
      return false;
    }
  }
}","public static boolean await(TestAwaitTaskUtils awaitTaskUtils,long waitUnitTime,long maxWaitTime){
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  int retryCount=0;
  while (true) {
    LOGGER.info(""String_Node_Str"",retryCount++,maxWaitTime,stopWatch.stop());
    try {
      if (awaitTaskUtils.checkCompleted()) {
        return true;
      }
    }
 catch (    Exception e) {
      LOGGER.warn(e.getMessage(),e);
    }
    try {
      Thread.sleep(waitUnitTime);
    }
 catch (    InterruptedException e) {
    }
    if (stopWatch.stop() > maxWaitTime) {
      return false;
    }
  }
}"
53575,"private List<String> getServerData(ZookeeperClient zookeeperClient) throws PinpointZookeeperException, InterruptedException {
  List<String> servers=new ArrayList<>();
  String[] allData=new String(zookeeperClient.getData(PATH)).split(""String_Node_Str"");
  for (  String data : allData) {
    if (!EMPTY_STRING.equals(data.trim())) {
      servers.add(data);
    }
  }
  return servers;
}","private List<String> getServerData(ZookeeperClient zookeeperClient) throws PinpointZookeeperException, InterruptedException {
  return decodeServerData(zookeeperClient.getData(PATH));
}"
53576,"@Test public void test1() throws Exception {
  MockZookeeperClient zookeeperClient=new MockZookeeperClient();
  zookeeperClient.connect();
  ZookeeperJobWorker zookeeperWorker=new ZookeeperJobWorker(zookeeperClient,IDENTIFIER);
  zookeeperWorker.start();
  try {
    int random=ThreadLocalRandom.current().nextInt(1,10);
    for (int i=0; i < random; i++) {
      PinpointServer mockServer=createMockPinpointServer(""String_Node_Str"" + i,""String_Node_Str"" + i,System.currentTimeMillis());
      zookeeperWorker.addPinpointServer(mockServer);
    }
    waitZookeeperServerData(random,zookeeperClient);
  }
  finally {
    zookeeperWorker.stop();
  }
}","@Test public void test1() throws Exception {
  MockZookeeperClient zookeeperClient=new MockZookeeperClient();
  zookeeperClient.connect();
  ZookeeperJobWorker zookeeperWorker=new ZookeeperJobWorker(zookeeperClient,IDENTIFIER);
  zookeeperWorker.start();
  zookeeperWorker.start();
  try {
    int random=ThreadLocalRandom.current().nextInt(1,10);
    for (int i=0; i < random; i++) {
      PinpointServer mockServer=createMockPinpointServer(""String_Node_Str"" + i,""String_Node_Str"" + i,System.currentTimeMillis());
      zookeeperWorker.addPinpointServer(mockServer);
    }
    waitZookeeperServerData(random,zookeeperClient);
    Assert.assertEquals(random,decodeServerData(zookeeperWorker.getClusterData()).size());
  }
  finally {
    zookeeperWorker.stop();
  }
}"
53577,"@Test public void test4() throws Exception {
  MockZookeeperClient zookeeperClient=new MockZookeeperClient();
  zookeeperClient.connect();
  ZookeeperJobWorker zookeeperWorker=new ZookeeperJobWorker(zookeeperClient,IDENTIFIER);
  zookeeperWorker.start();
  try {
    PinpointServer mockServer1=createMockPinpointServer(""String_Node_Str"",""String_Node_Str"",System.currentTimeMillis());
    zookeeperWorker.addPinpointServer(mockServer1);
    PinpointServer mockServer2=createMockPinpointServer(""String_Node_Str"",""String_Node_Str"",System.currentTimeMillis() + 1000);
    zookeeperWorker.addPinpointServer(mockServer2);
    waitZookeeperServerData(2,zookeeperClient);
    zookeeperWorker.removePinpointServer(mockServer1);
    waitZookeeperServerData(1,zookeeperClient);
  }
  finally {
    zookeeperWorker.stop();
  }
}","@Test public void test4() throws Exception {
  MockZookeeperClient zookeeperClient=new MockZookeeperClient();
  zookeeperClient.connect();
  ZookeeperJobWorker zookeeperWorker=new ZookeeperJobWorker(zookeeperClient,IDENTIFIER);
  zookeeperWorker.start();
  try {
    PinpointServer mockServer1=createMockPinpointServer(""String_Node_Str"",""String_Node_Str"",System.currentTimeMillis());
    zookeeperWorker.addPinpointServer(mockServer1);
    PinpointServer mockServer2=createMockPinpointServer(""String_Node_Str"",""String_Node_Str"",System.currentTimeMillis() + 1000);
    zookeeperWorker.addPinpointServer(mockServer2);
    waitZookeeperServerData(2,zookeeperClient);
    Assert.assertEquals(2,decodeServerData(zookeeperWorker.getClusterData()).size());
    zookeeperWorker.removePinpointServer(mockServer1);
    waitZookeeperServerData(1,zookeeperClient);
    Assert.assertEquals(1,decodeServerData(zookeeperWorker.getClusterData()).size());
  }
  finally {
    zookeeperWorker.stop();
  }
}"
53578,"@Test public void test2() throws Exception {
  MockZookeeperClient zookeeperClient=new MockZookeeperClient();
  zookeeperClient.connect();
  ZookeeperJobWorker zookeeperWorker=new ZookeeperJobWorker(zookeeperClient,IDENTIFIER);
  zookeeperWorker.start();
  try {
    PinpointServer mockServer=createMockPinpointServer(""String_Node_Str"",""String_Node_Str"",System.currentTimeMillis());
    zookeeperWorker.addPinpointServer(mockServer);
    zookeeperWorker.addPinpointServer(mockServer);
    waitZookeeperServerData(1,zookeeperClient);
    zookeeperWorker.removePinpointServer(mockServer);
    waitZookeeperServerData(0,zookeeperClient);
  }
  finally {
    zookeeperWorker.stop();
  }
}","@Test public void test2() throws Exception {
  MockZookeeperClient zookeeperClient=new MockZookeeperClient();
  zookeeperClient.connect();
  ZookeeperJobWorker zookeeperWorker=new ZookeeperJobWorker(zookeeperClient,IDENTIFIER);
  zookeeperWorker.start();
  try {
    PinpointServer mockServer=createMockPinpointServer(""String_Node_Str"",""String_Node_Str"",System.currentTimeMillis());
    zookeeperWorker.addPinpointServer(mockServer);
    zookeeperWorker.addPinpointServer(mockServer);
    waitZookeeperServerData(1,zookeeperClient);
    Assert.assertEquals(1,decodeServerData(zookeeperWorker.getClusterData()).size());
    zookeeperWorker.removePinpointServer(mockServer);
    waitZookeeperServerData(0,zookeeperClient);
    Assert.assertEquals(0,decodeServerData(zookeeperWorker.getClusterData()).size());
  }
  finally {
    zookeeperWorker.stop();
  }
}"
53579,"@Test public void test3() throws Exception {
  MockZookeeperClient zookeeperClient=new MockZookeeperClient();
  zookeeperClient.connect();
  ZookeeperJobWorker zookeeperWorker=new ZookeeperJobWorker(zookeeperClient,IDENTIFIER);
  zookeeperWorker.start();
  try {
    PinpointServer mockServer=createMockPinpointServer(""String_Node_Str"",""String_Node_Str"",System.currentTimeMillis());
    zookeeperWorker.addPinpointServer(mockServer);
    waitZookeeperServerData(1,zookeeperClient);
    zookeeperWorker.clear();
    waitZookeeperServerData(0,zookeeperClient);
    zookeeperWorker.addPinpointServer(mockServer);
    waitZookeeperServerData(1,zookeeperClient);
  }
  finally {
    zookeeperWorker.stop();
  }
}","@Test public void test3() throws Exception {
  MockZookeeperClient zookeeperClient=new MockZookeeperClient();
  zookeeperClient.connect();
  ZookeeperJobWorker zookeeperWorker=new ZookeeperJobWorker(zookeeperClient,IDENTIFIER);
  zookeeperWorker.start();
  try {
    PinpointServer mockServer=createMockPinpointServer(""String_Node_Str"",""String_Node_Str"",System.currentTimeMillis());
    zookeeperWorker.addPinpointServer(mockServer);
    waitZookeeperServerData(1,zookeeperClient);
    Assert.assertEquals(1,decodeServerData(zookeeperWorker.getClusterData()).size());
    zookeeperWorker.clear();
    waitZookeeperServerData(0,zookeeperClient);
    Assert.assertEquals(0,decodeServerData(zookeeperWorker.getClusterData()).size());
    zookeeperWorker.addPinpointServer(mockServer);
    waitZookeeperServerData(1,zookeeperClient);
    Assert.assertEquals(1,decodeServerData(zookeeperWorker.getClusterData()).size());
  }
  finally {
    zookeeperWorker.stop();
  }
}"
53580,"public CommandHeaderTBaseDeserializerFactory(){
  TBaseLocator commandTbaseLocator=commandTbaseLocator=new TCommandRegistry(Arrays.asList(TCommandType.values()));
  TProtocolFactory protocolFactory=new TCompactProtocol.Factory();
  HeaderTBaseDeserializerFactory deserializerFactory=new HeaderTBaseDeserializerFactory(protocolFactory,commandTbaseLocator);
  this.factory=new ThreadLocalHeaderTBaseDeserializerFactory<HeaderTBaseDeserializer>(deserializerFactory);
}","public CommandHeaderTBaseDeserializerFactory(){
  TBaseLocator commandTbaseLocator=new TCommandRegistry(Arrays.asList(TCommandType.values()));
  TProtocolFactory protocolFactory=new TCompactProtocol.Factory();
  HeaderTBaseDeserializerFactory deserializerFactory=new HeaderTBaseDeserializerFactory(protocolFactory,commandTbaseLocator);
  this.factory=new ThreadLocalHeaderTBaseDeserializerFactory<HeaderTBaseDeserializer>(deserializerFactory);
}"
53581,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,params={""String_Node_Str"",""String_Node_Str""}) @ResponseBody public List<AgentCountStatistics> selectAgentCount(@RequestParam(""String_Node_Str"") long from,@RequestParam(""String_Node_Str"") long to){
  Range range=new Range(DateUtils.timestampToMidNight(from),DateUtils.timestampToMidNight(to),true);
  List<AgentCountStatistics> agentCountStatisticsList=agentStatisticsService.selectAgentCount(range);
  Collections.sort(agentCountStatisticsList,new Comparator<AgentCountStatistics>(){
    @Override public int compare(    AgentCountStatistics o1,    AgentCountStatistics o2){
      o1.getTimestamp();
      o2.getTimestamp();
      if (o1.getTimestamp() > o2.getTimestamp()) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
);
  return agentCountStatisticsList;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,params={""String_Node_Str"",""String_Node_Str""}) @ResponseBody public List<AgentCountStatistics> selectAgentCount(@RequestParam(""String_Node_Str"") long from,@RequestParam(""String_Node_Str"") long to){
  Range range=new Range(DateUtils.timestampToMidNight(from),DateUtils.timestampToMidNight(to),true);
  List<AgentCountStatistics> agentCountStatisticsList=agentStatisticsService.selectAgentCount(range);
  Collections.sort(agentCountStatisticsList,new Comparator<AgentCountStatistics>(){
    @Override public int compare(    AgentCountStatistics o1,    AgentCountStatistics o2){
      if (o1.getTimestamp() > o2.getTimestamp()) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
);
  return agentCountStatisticsList;
}"
53582,"@Override public int compare(AgentCountStatistics o1,AgentCountStatistics o2){
  o1.getTimestamp();
  o2.getTimestamp();
  if (o1.getTimestamp() > o2.getTimestamp()) {
    return -1;
  }
 else {
    return 1;
  }
}","@Override public int compare(AgentCountStatistics o1,AgentCountStatistics o2){
  if (o1.getTimestamp() > o2.getTimestamp()) {
    return -1;
  }
 else {
    return 1;
  }
}"
53583,"private PinpointRouteResponse getResponse(Future<ResponseMessage> future,long timeout){
  if (future == null) {
    return new FailedPinpointRouteResponse(TRouteResult.NOT_FOUND,null);
  }
  boolean completed=future.await(DEFAULT_FUTURE_TIMEOUT);
  if (completed) {
    DefaultPinpointRouteResponse response=new DefaultPinpointRouteResponse(future.getResult().getMessage());
    response.parse(commandDeserializerFactory);
    return response;
  }
 else {
    return new FailedPinpointRouteResponse(TRouteResult.TIMEOUT,null);
  }
}","private PinpointRouteResponse getResponse(Future<ResponseMessage> future,long timeout){
  if (future == null) {
    return new FailedPinpointRouteResponse(TRouteResult.NOT_FOUND,null);
  }
  boolean completed=future.await(timeout);
  if (completed) {
    DefaultPinpointRouteResponse response=new DefaultPinpointRouteResponse(future.getResult().getMessage());
    response.parse(commandDeserializerFactory);
    return response;
  }
 else {
    return new FailedPinpointRouteResponse(TRouteResult.TIMEOUT,null);
  }
}"
53584,"public String createDumpMessage(TThreadDump threadDump){
  TThreadState threadState=getThreadState(threadDump.getThreadState());
  StringBuilder message=new StringBuilder(""String_Node_Str"" + threadDump.getThreadName() + ""String_Node_Str"");
  String hexStringThreadId=Long.toHexString(threadDump.getThreadId());
  message.append(""String_Node_Str"" + hexStringThreadId);
  message.append(""String_Node_Str"" + threadState.name());
  if (!StringUtils.isBlank(threadDump.getLockName())) {
    message.append(""String_Node_Str"").append(threadDump.getLockName());
  }
  if (!StringUtils.isBlank(threadDump.getLockOwnerName())) {
    message.append(""String_Node_Str"").append(threadDump.getLockOwnerName()).append(""String_Node_Str"").append(threadDump.getLockOwnerId());
  }
  if (threadDump.isSuspended()) {
    message.append(""String_Node_Str"");
  }
  if (threadDump.isInNative()) {
    message.append(""String_Node_Str"");
  }
  message.append(LINE_SEPARATOR);
  for (int i=0; i < threadDump.getStackTraceSize(); i++) {
    String stackTrace=threadDump.getStackTrace().get(i);
    message.append(TAB_SEPARATOR + ""String_Node_Str"").append(stackTrace);
    message.append(LINE_SEPARATOR);
    if (i == 0 && !StringUtils.isBlank(threadDump.getLockName())) {
switch (threadState) {
case BLOCKED:
        message.append(TAB_SEPARATOR + ""String_Node_Str"").append(threadDump.getLockName());
      message.append(LINE_SEPARATOR);
    break;
case WAITING:
  message.append(TAB_SEPARATOR + ""String_Node_Str"").append(threadDump.getLockName());
message.append(LINE_SEPARATOR);
break;
case TIMED_WAITING:
message.append(TAB_SEPARATOR + ""String_Node_Str"").append(threadDump.getLockName());
message.append(LINE_SEPARATOR);
break;
default :
}
}
if (threadDump.getLockedMonitors() != null) {
for (TMonitorInfo lockedMonitor : threadDump.getLockedMonitors()) {
if (lockedMonitor.getStackDepth() == i) {
message.append(TAB_SEPARATOR + ""String_Node_Str"").append(lockedMonitor.getStackFrame());
message.append(LINE_SEPARATOR);
}
}
}
}
List<String> lockedSynchronizers=threadDump.getLockedSynchronizers();
if (lockedSynchronizers != null) {
if (!lockedSynchronizers.isEmpty()) {
message.append(LINE_SEPARATOR + TAB_SEPARATOR + ""String_Node_Str"").append(lockedSynchronizers.size());
message.append(LINE_SEPARATOR);
for (String lockedSynchronizer : lockedSynchronizers) {
message.append(TAB_SEPARATOR + ""String_Node_Str"").append(lockedSynchronizer);
message.append(LINE_SEPARATOR);
}
}
}
message.append(LINE_SEPARATOR);
return message.toString();
}","public String createDumpMessage(TThreadDump threadDump){
  TThreadState threadState=getThreadState(threadDump.getThreadState());
  StringBuilder message=new StringBuilder(""String_Node_Str"" + threadDump.getThreadName() + ""String_Node_Str"");
  String hexStringThreadId=Long.toHexString(threadDump.getThreadId());
  message.append(""String_Node_Str"" + hexStringThreadId);
  message.append(""String_Node_Str"" + threadState.name());
  if (!StringUtils.isBlank(threadDump.getLockName())) {
    message.append(""String_Node_Str"").append(threadDump.getLockName());
  }
  if (!StringUtils.isBlank(threadDump.getLockOwnerName())) {
    message.append(""String_Node_Str"").append(threadDump.getLockOwnerName()).append(""String_Node_Str"").append(threadDump.getLockOwnerId());
  }
  if (threadDump.isSuspended()) {
    message.append(""String_Node_Str"");
  }
  if (threadDump.isInNative()) {
    message.append(""String_Node_Str"");
  }
  message.append(LINE_SEPARATOR);
  for (int i=0; i < threadDump.getStackTraceSize(); i++) {
    String stackTrace=threadDump.getStackTrace().get(i);
    message.append(TAB_SEPARATOR + ""String_Node_Str"").append(stackTrace);
    message.append(LINE_SEPARATOR);
    if (i == 0 && !StringUtils.isBlank(threadDump.getLockName())) {
switch (threadState) {
case BLOCKED:
        message.append(TAB_SEPARATOR + ""String_Node_Str"").append(threadDump.getLockName());
      message.append(LINE_SEPARATOR);
    break;
case WAITING:
  message.append(TAB_SEPARATOR + ""String_Node_Str"").append(threadDump.getLockName());
message.append(LINE_SEPARATOR);
break;
case TIMED_WAITING:
message.append(TAB_SEPARATOR + ""String_Node_Str"").append(threadDump.getLockName());
message.append(LINE_SEPARATOR);
break;
default :
}
}
if (threadDump.getLockedMonitors() != null) {
for (TMonitorInfo lockedMonitor : threadDump.getLockedMonitors()) {
if (lockedMonitor.getStackDepth() == i) {
message.append(TAB_SEPARATOR + ""String_Node_Str"").append(lockedMonitor.getStackFrame());
message.append(LINE_SEPARATOR);
}
}
}
}
List<String> lockedSynchronizers=threadDump.getLockedSynchronizers();
if (!CollectionUtils.isEmpty(lockedSynchronizers)) {
message.append(LINE_SEPARATOR + TAB_SEPARATOR + ""String_Node_Str"").append(lockedSynchronizers.size());
message.append(LINE_SEPARATOR);
for (String lockedSynchronizer : lockedSynchronizers) {
message.append(TAB_SEPARATOR + ""String_Node_Str"").append(lockedSynchronizer);
message.append(LINE_SEPARATOR);
}
}
message.append(LINE_SEPARATOR);
return message.toString();
}"
53585,"@Override public void flush(Executor executor) throws Exception {
  if ((flushCount.getAndIncrement() % flushLogRecordRate) == 0) {
    logger.info(""String_Node_Str"",applicationName);
  }
  if (isStopped) {
    return;
  }
  AgentActiveThreadCountList response=new AgentActiveThreadCountList();
synchronized (aggregatorLock) {
    for (    ActiveThreadCountWorker activeThreadCountWorker : activeThreadCountWorkerRepository.values()) {
      String agentId=activeThreadCountWorker.getAgentId();
      AgentActiveThreadCount agentActiveThreadCount=activeThreadCountMap.get(agentId);
      if (agentActiveThreadCount != null) {
        response.add(agentActiveThreadCount);
      }
 else {
        response.add(activeThreadCountWorker.getDefaultFailResponse());
      }
    }
    activeThreadCountMap=new HashMap<>(activeThreadCountWorkerRepository.size());
  }
  TextMessage webSocketTextMessage=createWebSocketTextMessage(response);
  if (webSocketTextMessage != null) {
    if (executor == null) {
      flush0(webSocketTextMessage);
    }
 else {
      flushAsync0(webSocketTextMessage,executor);
    }
  }
}","@Override public void flush(Executor executor) throws Exception {
  if ((flushCount.getAndIncrement() % LOG_RECORD_RATE) == 0) {
    logger.info(""String_Node_Str"",applicationName);
  }
  if (isStopped) {
    return;
  }
  AgentActiveThreadCountList response=new AgentActiveThreadCountList();
synchronized (aggregatorLock) {
    for (    ActiveThreadCountWorker activeThreadCountWorker : activeThreadCountWorkerRepository.values()) {
      String agentId=activeThreadCountWorker.getAgentId();
      AgentActiveThreadCount agentActiveThreadCount=activeThreadCountMap.get(agentId);
      if (agentActiveThreadCount != null) {
        response.add(agentActiveThreadCount);
      }
 else {
        response.add(activeThreadCountWorker.getDefaultFailResponse());
      }
    }
    activeThreadCountMap=new HashMap<>(activeThreadCountWorkerRepository.size());
  }
  TextMessage webSocketTextMessage=createWebSocketTextMessage(response);
  if (webSocketTextMessage != null) {
    if (executor == null) {
      flush0(webSocketTextMessage);
    }
 else {
      flushAsync0(webSocketTextMessage,executor);
    }
  }
}"
53586,"@Inject public DefaultAgentInformationFactory(@AgentId String agentId,@ApplicationName String applicationName,@AgentStartTime long agentStartTime,@AgentServiceType ServiceType serverType){
  if (agentId == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (applicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (serverType == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.agentId=checkId(agentId);
  this.applicationName=checkId(applicationName);
  this.serverType=serverType;
  this.agentStartTime=agentStartTime;
}","@Inject public DefaultAgentInformationFactory(@AgentId String agentId,@ApplicationName String applicationName,@AgentStartTime long agentStartTime,@ApplicationServerType ServiceType serverType){
  if (agentId == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (applicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (serverType == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.agentId=checkId(agentId);
  this.applicationName=checkId(applicationName);
  this.serverType=serverType;
  this.agentStartTime=agentStartTime;
}"
53587,"private void bindAgentInformation(String agentId,String applicationName){
  bind(String.class).annotatedWith(AgentId.class).toInstance(agentId);
  bind(String.class).annotatedWith(ApplicationName.class).toInstance(applicationName);
  bind(Long.class).annotatedWith(AgentStartTime.class).toProvider(AgentStartTimeProvider.class);
  bind(ServiceType.class).annotatedWith(AgentServiceType.class).toProvider(AgentServiceTypeProvider.class);
}","private void bindAgentInformation(String agentId,String applicationName){
  bind(String.class).annotatedWith(AgentId.class).toInstance(agentId);
  bind(String.class).annotatedWith(ApplicationName.class).toInstance(applicationName);
  bind(Long.class).annotatedWith(AgentStartTime.class).toProvider(AgentStartTimeProvider.class);
  bind(ServiceType.class).annotatedWith(ApplicationServerType.class).toProvider(ApplicationServerTypeProvider.class);
}"
53588,"@Override protected void configure(){
  bind(ApplicationContext.class).toInstance(applicationContext);
  bind(ProfilerConfig.class).toInstance(profilerConfig);
  bind(ServiceTypeRegistryService.class).toInstance(serviceTypeRegistryService);
  bind(AgentOption.class).toInstance(agentOption);
  bind(Instrumentation.class).toInstance(agentOption.getInstrumentation());
  bind(InterceptorRegistryBinder.class).toInstance(interceptorRegistryBinder);
  bind(URL[].class).annotatedWith(PluginJars.class).toInstance(agentOption.getPluginJars());
  TypeLiteral<List<String>> listString=new TypeLiteral<List<String>>(){
  }
;
  bind(listString).annotatedWith(BootstrapJarPaths.class).toInstance(agentOption.getBootstrapJarPaths());
  bindAgentInformation(agentOption.getAgentId(),agentOption.getApplicationName());
  bindDataTransferComponent();
  bind(ServerMetaDataHolder.class).toProvider(ServerMetaDataHolderProvider.class).in(Scopes.SINGLETON);
  bind(StorageFactory.class).toProvider(StorageFactoryProvider.class).in(Scopes.SINGLETON);
  bindServiceComponent();
  bind(PluginMonitorContext.class).toProvider(PluginMonitorContextProvider.class).in(Scopes.SINGLETON);
  bind(IdGenerator.class).to(AtomicIdGenerator.class);
  bind(TransactionCounter.class).to(DefaultTransactionCounter.class).in(Scopes.SINGLETON);
  bind(Sampler.class).toProvider(SamplerProvider.class).in(Scopes.SINGLETON);
  bind(TraceFactoryBuilder.class).to(DefaultTraceFactoryBuilder.class).in(Scopes.SINGLETON);
  bind(TraceContext.class).to(DefaultTraceContext.class).in(Scopes.SINGLETON);
  bind(AgentStatCollectorFactory.class).to(DefaultAgentStatCollectorFactory.class).in(Scopes.SINGLETON);
  bind(AgentStatMonitor.class).to(DefaultAgentStatMonitor.class).in(Scopes.SINGLETON);
  bind(PluginSetup.class).toProvider(PluginSetupProvider.class).in(Scopes.SINGLETON);
  bind(PluginContextLoadResult.class).toProvider(PluginContextLoadResultProvider.class).in(Scopes.SINGLETON);
  bind(ApplicationServerTypeResolver.class).toProvider(ApplicationServerTypeResolverProvider.class).in(Scopes.SINGLETON);
  bind(AgentInformation.class).toProvider(AgentInformationProvider.class).in(Scopes.SINGLETON);
  bind(JvmInformation.class).toProvider(JvmInformationProvider.class).in(Scopes.SINGLETON);
  bind(AgentInfoSender.class).toProvider(AgentInfoSenderProvider.class).in(Scopes.SINGLETON);
  bind(InstrumentEngine.class).toProvider(InstrumentEngineProvider.class).in(Scopes.SINGLETON);
  bind(ClassFileTransformerDispatcher.class).toProvider(ClassFileTransformerDispatcherProvider.class).in(Scopes.SINGLETON);
  bind(DynamicTransformTrigger.class).toProvider(DynamicTransformTriggerProvider.class).in(Scopes.SINGLETON);
}","@Override protected void configure(){
  bind(ApplicationContext.class).toInstance(applicationContext);
  bind(ProfilerConfig.class).toInstance(profilerConfig);
  bind(ServiceTypeRegistryService.class).toInstance(serviceTypeRegistryService);
  bind(AgentOption.class).toInstance(agentOption);
  bind(Instrumentation.class).toInstance(agentOption.getInstrumentation());
  bind(InterceptorRegistryBinder.class).toInstance(interceptorRegistryBinder);
  bind(URL[].class).annotatedWith(PluginJars.class).toInstance(agentOption.getPluginJars());
  TypeLiteral<List<String>> listString=new TypeLiteral<List<String>>(){
  }
;
  bind(listString).annotatedWith(BootstrapJarPaths.class).toInstance(agentOption.getBootstrapJarPaths());
  bindAgentInformation(agentOption.getAgentId(),agentOption.getApplicationName());
  bindDataTransferComponent();
  bind(ServerMetaDataHolder.class).toProvider(ServerMetaDataHolderProvider.class).in(Scopes.SINGLETON);
  bind(StorageFactory.class).toProvider(StorageFactoryProvider.class).in(Scopes.SINGLETON);
  bindServiceComponent();
  bind(PluginMonitorContext.class).toProvider(PluginMonitorContextProvider.class).in(Scopes.SINGLETON);
  bind(IdGenerator.class).to(AtomicIdGenerator.class);
  bind(TransactionCounter.class).to(DefaultTransactionCounter.class).in(Scopes.SINGLETON);
  bind(Sampler.class).toProvider(SamplerProvider.class).in(Scopes.SINGLETON);
  bind(TraceFactoryBuilder.class).to(DefaultTraceFactoryBuilder.class).in(Scopes.SINGLETON);
  bind(TraceContext.class).to(DefaultTraceContext.class).in(Scopes.SINGLETON);
  bind(AgentStatCollectorFactory.class).to(DefaultAgentStatCollectorFactory.class).in(Scopes.SINGLETON);
  bind(AgentStatMonitor.class).to(DefaultAgentStatMonitor.class).in(Scopes.SINGLETON);
  bind(PluginSetup.class).toProvider(PluginSetupProvider.class).in(Scopes.SINGLETON);
  bind(PluginContextLoadResult.class).toProvider(PluginContextLoadResultProvider.class).in(Scopes.SINGLETON);
  bind(AgentInformation.class).toProvider(AgentInformationProvider.class).in(Scopes.SINGLETON);
  bind(JvmInformation.class).toProvider(JvmInformationProvider.class).in(Scopes.SINGLETON);
  bind(AgentInfoSender.class).toProvider(AgentInfoSenderProvider.class).in(Scopes.SINGLETON);
  bind(InstrumentEngine.class).toProvider(InstrumentEngineProvider.class).in(Scopes.SINGLETON);
  bind(ClassFileTransformerDispatcher.class).toProvider(ClassFileTransformerDispatcherProvider.class).in(Scopes.SINGLETON);
  bind(DynamicTransformTrigger.class).toProvider(DynamicTransformTriggerProvider.class).in(Scopes.SINGLETON);
}"
53589,"@Inject public AgentInformationProvider(@AgentId String agentId,@ApplicationName String applicationName,@AgentStartTime long agentStartTime,@AgentServiceType ServiceType serverType){
  if (agentId == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (applicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (serverType == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.agentId=agentId;
  this.applicationName=applicationName;
  this.agentStartTime=agentStartTime;
  this.serverType=serverType;
}","@Inject public AgentInformationProvider(@AgentId String agentId,@ApplicationName String applicationName,@AgentStartTime long agentStartTime,@ApplicationServerType ServiceType serverType){
  if (agentId == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (applicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (serverType == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.agentId=agentId;
  this.applicationName=applicationName;
  this.agentStartTime=agentStartTime;
  this.serverType=serverType;
}"
53590,"public ApplicationServerTypeResolver(PluginContextLoadResult plugins,@AgentServiceType ServiceType defaultType,List<String> orderedDetectors){
  if (isValidApplicationServerType(defaultType)) {
    this.defaultType=defaultType;
  }
 else {
    this.defaultType=ServiceType.UNDEFINED;
  }
  Map<String,ApplicationTypeDetector> registeredDetectors=getRegisteredServerTypeDetectors(plugins);
  for (  String orderedDetector : orderedDetectors) {
    if (registeredDetectors.containsKey(orderedDetector)) {
      this.detectors.add(registeredDetectors.remove(orderedDetector));
    }
  }
  this.detectors.addAll(registeredDetectors.values());
  this.resolver=new ApplicationServerTypePluginResolver(this.detectors);
}","public ApplicationServerTypeResolver(PluginContextLoadResult plugins,ServiceType defaultType,List<String> orderedDetectors){
  if (isValidApplicationServerType(defaultType)) {
    this.defaultType=defaultType;
  }
 else {
    this.defaultType=ServiceType.UNDEFINED;
  }
  Map<String,ApplicationTypeDetector> registeredDetectors=getRegisteredServerTypeDetectors(plugins);
  for (  String orderedDetector : orderedDetectors) {
    if (registeredDetectors.containsKey(orderedDetector)) {
      this.detectors.add(registeredDetectors.remove(orderedDetector));
    }
  }
  this.detectors.addAll(registeredDetectors.values());
  this.resolver=new ApplicationServerTypePluginResolver(this.detectors);
}"
53591,"public static <V>boolean isFirst(List<V> list,V object){
  V first=getFirst(list);
  return first.equals(object);
}","public static <V>boolean isFirst(List<V> list,V object){
  V first=getFirst(list);
  if (first == null) {
    return object == null;
  }
  return first.equals(object);
}"
53592,"public static <V>boolean isLast(List<V> list,V object){
  V last=getLast(list);
  return last.equals(object);
}","public static <V>boolean isLast(List<V> list,V object){
  V last=getLast(list);
  if (last == null) {
    return object == null;
  }
  return last.equals(object);
}"
53593,"public static <V>V getFirst(List<V> list,V defaultValue){
  int size=list.size();
  if (size > 0) {
    return list.get(0);
  }
 else {
    return defaultValue;
  }
}","public static <V>V getFirst(List<V> list,V defaultValue){
  if (list == null) {
    return defaultValue;
  }
  int size=list.size();
  if (size > 0) {
    return list.get(0);
  }
 else {
    return defaultValue;
  }
}"
53594,"public static <V>V getLast(List<V> list,V defaultValue){
  int size=list.size();
  if (size > 0) {
    return list.get(size - 1);
  }
 else {
    return defaultValue;
  }
}","public static <V>V getLast(List<V> list,V defaultValue){
  if (list == null) {
    return defaultValue;
  }
  int size=list.size();
  if (size > 0) {
    return list.get(size - 1);
  }
 else {
    return defaultValue;
  }
}"
53595,"@Test public void serializeTest() throws Exception {
  ThreadInfo[] allThreadInfo=ThreadMXBeanUtils.dumpAllThread();
  AgentActiveThreadDumpList activeThreadDumpList=createThreadDumpList(allThreadInfo);
  String jsonValue=mapper.writeValueAsString(activeThreadDumpList);
  List list=mapper.readValue(jsonValue,List.class);
  Assert.assertTrue(CollectionUtils.isNotEmpty(list));
  Map map=(Map)list.get(0);
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
}","@Test public void serializeTest() throws Exception {
  ThreadInfo[] allThreadInfo=ThreadMXBeanUtils.dumpAllThread();
  AgentActiveThreadDumpList activeThreadDumpList=createThreadDumpList(allThreadInfo);
  String jsonValue=mapper.writeValueAsString(activeThreadDumpList);
  List list=mapper.readValue(jsonValue,List.class);
  Assert.assertTrue(CollectionUtils.isNotEmpty(list));
  Map map=(Map)list.get(0);
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
  Assert.assertTrue(map.containsKey(""String_Node_Str""));
}"
53596,"@Test public void test() throws Exception {
  HttpClient client=new HttpClient();
  client.getParams().setConnectionManagerTimeout(CONNECTION_TIMEOUT);
  GetMethod method=new GetMethod(""String_Node_Str"");
  method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,new DefaultHttpMethodRetryHandler(3,false));
  method.setQueryString(new NameValuePair[]{new NameValuePair(""String_Node_Str"",""String_Node_Str"")});
  try {
    client.executeMethod(method);
  }
 catch (  Exception ignored) {
  }
 finally {
    method.releaseConnection();
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
}","@Test public void test() throws Exception {
  HttpClient client=new HttpClient();
  client.getParams().setConnectionManagerTimeout(CONNECTION_TIMEOUT);
  client.getParams().setSoTimeout(SO_TIMEOUT);
  GetMethod method=new GetMethod(""String_Node_Str"");
  method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,new DefaultHttpMethodRetryHandler(3,false));
  method.setQueryString(new NameValuePair[]{new NameValuePair(""String_Node_Str"",""String_Node_Str"")});
  try {
    client.executeMethod(method);
  }
 catch (  Exception ignored) {
  }
 finally {
    method.releaseConnection();
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
}"
53597,"@Test public void hostConfig() throws Exception {
  HttpClient client=new HttpClient();
  client.getParams().setConnectionManagerTimeout(CONNECTION_TIMEOUT);
  HostConfiguration config=new HostConfiguration();
  config.setHost(""String_Node_Str"",80,""String_Node_Str"");
  GetMethod method=new GetMethod(""String_Node_Str"");
  method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,new DefaultHttpMethodRetryHandler(3,false));
  method.setQueryString(new NameValuePair[]{new NameValuePair(""String_Node_Str"",""String_Node_Str"")});
  try {
    client.executeMethod(config,method);
  }
 catch (  Exception ignored) {
  }
 finally {
    method.releaseConnection();
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
}","@Test public void hostConfig() throws Exception {
  HttpClient client=new HttpClient();
  client.getParams().setConnectionManagerTimeout(CONNECTION_TIMEOUT);
  client.getParams().setSoTimeout(SO_TIMEOUT);
  HostConfiguration config=new HostConfiguration();
  config.setHost(""String_Node_Str"",80,""String_Node_Str"");
  GetMethod method=new GetMethod(""String_Node_Str"");
  method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,new DefaultHttpMethodRetryHandler(3,false));
  method.setQueryString(new NameValuePair[]{new NameValuePair(""String_Node_Str"",""String_Node_Str"")});
  try {
    client.executeMethod(config,method);
  }
 catch (  Exception ignored) {
  }
 finally {
    method.releaseConnection();
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
}"
53598,"@Test public void test() throws Exception {
  HttpClient client=new HttpClient();
  GetMethod method=new GetMethod(""String_Node_Str"");
  method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,new DefaultHttpMethodRetryHandler(3,false));
  method.setQueryString(new NameValuePair[]{new NameValuePair(""String_Node_Str"",""String_Node_Str"")});
  try {
    client.executeMethod(method);
  }
 catch (  Exception ignored) {
  }
 finally {
    method.releaseConnection();
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
}","@Test public void test() throws Exception {
  HttpClient client=new HttpClient();
  client.getParams().setConnectionManagerTimeout(CONNECTION_TIMEOUT);
  GetMethod method=new GetMethod(""String_Node_Str"");
  method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,new DefaultHttpMethodRetryHandler(3,false));
  method.setQueryString(new NameValuePair[]{new NameValuePair(""String_Node_Str"",""String_Node_Str"")});
  try {
    client.executeMethod(method);
  }
 catch (  Exception ignored) {
  }
 finally {
    method.releaseConnection();
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
}"
53599,"@Test public void hostConfig() throws Exception {
  HttpClient client=new HttpClient();
  HostConfiguration config=new HostConfiguration();
  config.setHost(""String_Node_Str"",80,""String_Node_Str"");
  GetMethod method=new GetMethod(""String_Node_Str"");
  method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,new DefaultHttpMethodRetryHandler(3,false));
  method.setQueryString(new NameValuePair[]{new NameValuePair(""String_Node_Str"",""String_Node_Str"")});
  try {
    client.executeMethod(config,method);
  }
 catch (  Exception ignored) {
  }
 finally {
    method.releaseConnection();
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
}","@Test public void hostConfig() throws Exception {
  HttpClient client=new HttpClient();
  client.getParams().setConnectionManagerTimeout(CONNECTION_TIMEOUT);
  HostConfiguration config=new HostConfiguration();
  config.setHost(""String_Node_Str"",80,""String_Node_Str"");
  GetMethod method=new GetMethod(""String_Node_Str"");
  method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,new DefaultHttpMethodRetryHandler(3,false));
  method.setQueryString(new NameValuePair[]{new NameValuePair(""String_Node_Str"",""String_Node_Str"")});
  try {
    client.executeMethod(config,method);
  }
 catch (  Exception ignored) {
  }
 finally {
    method.releaseConnection();
  }
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache();
}"
53600,"@Override public InterceptorScope getInterceptorScope(String name){
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  InterceptorScope scope=interceptorScopeList.get(name);
  if (scope == null) {
    scope=new DefaultInterceptorScope(name);
    interceptorScopeList.add(name,scope);
  }
  return scope;
}","@Override public InterceptorScope getInterceptorScope(String name){
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return interceptorScopePool.add(name);
}"
53601,"@Override public V get(K key){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return pool.get(key);
}","@Override public V get(K key){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final V alreadyExist=this.pool.get(key);
  if (alreadyExist != null) {
    return alreadyExist;
  }
  final V newValue=this.objectFactory.create(key);
  final V oldValue=this.pool.putIfAbsent(key,newValue);
  if (oldValue != null) {
    return oldValue;
  }
  return newValue;
}"
53602,"@Override public InterceptorScope getInterceptorScope(String name){
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return interceptorScopePool.add(name);
}","@Override public InterceptorScope getInterceptorScope(String name){
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return interceptorScopePool.get(name);
}"
53603,"@Test public void testConcurrentPool() throws Exception {
  InterceptorScopeFactory traceScopeFactory=new InterceptorScopeFactory();
  Pool<String,InterceptorScope> pool=new ConcurrentPool<String,InterceptorScope>(traceScopeFactory);
  final String OBJECT_NAME=""String_Node_Str"";
  Assert.assertNull(pool.get(OBJECT_NAME));
  InterceptorScope addedScope=pool.add(OBJECT_NAME);
  Assert.assertSame(pool.get(OBJECT_NAME),addedScope);
  InterceptorScope exist=pool.add(OBJECT_NAME);
  Assert.assertSame(exist,addedScope);
}","@Test public void testConcurrentPool() throws Exception {
  InterceptorScopeFactory traceScopeFactory=new InterceptorScopeFactory();
  Pool<String,InterceptorScope> pool=new ConcurrentPool<String,InterceptorScope>(traceScopeFactory);
  final String OBJECT_NAME=""String_Node_Str"";
  InterceptorScope addedScope=pool.get(OBJECT_NAME);
  Assert.assertSame(pool.get(OBJECT_NAME),addedScope);
  InterceptorScope exist=pool.get(OBJECT_NAME);
  Assert.assertSame(exist,addedScope);
  InterceptorScope another=pool.get(""String_Node_Str"");
  Assert.assertNotSame(exist,another);
}"
53604,"private void handleRequestMessage0(WebSocketSession webSocketSession,RequestMessage requestMessage){
  if (serverMapDataFilter != null && serverMapDataFilter.filter(webSocketSession,requestMessage)) {
    closeSession(webSocketSession,serverMapDataFilter.getCloseStatus(requestMessage));
    return;
  }
  String command=requestMessage.getCommand();
  if (API_ACTIVE_THREAD_COUNT.equals(command)) {
    String applicationName=MapUtils.getString(requestMessage.getParams(),APPLICATION_NAME_KEY);
    if (applicationName != null) {
synchronized (lock) {
        if (StringUtils.isEquals(applicationName,(String)webSocketSession.getAttributes().get(APPLICATION_NAME_KEY))) {
          return;
        }
        unbindingResponseAggregator(webSocketSession);
        bindingResponseAggregator(webSocketSession,applicationName);
      }
    }
  }
}","private void handleRequestMessage0(WebSocketSession webSocketSession,RequestMessage requestMessage){
  if (serverMapDataFilter != null && serverMapDataFilter.filter(webSocketSession,requestMessage)) {
    closeSession(webSocketSession,serverMapDataFilter.getCloseStatus(requestMessage));
    return;
  }
  String command=requestMessage.getCommand();
  if (API_ACTIVE_THREAD_COUNT.equals(command)) {
    String applicationName=MapUtils.getString(requestMessage.getParams(),APPLICATION_NAME_KEY);
    if (applicationName != null) {
synchronized (lock) {
        if (StringUtils.isEquals(applicationName,(String)webSocketSession.getAttributes().get(APPLICATION_NAME_KEY))) {
          return;
        }
        unbindingResponseAggregator(webSocketSession);
        if (webSocketSession.isOpen()) {
          bindingResponseAggregator(webSocketSession,applicationName);
        }
 else {
          logger.warn(""String_Node_Str"");
        }
      }
    }
  }
}"
53605,"@Override public List<List<SpanBo>> selectSpans(List<TransactionId> transactionIdList){
  List<List<SpanBo>> spanBos=this.master.selectSpans(transactionIdList);
  if (CollectionUtils.isNotEmpty(spanBos)) {
    return spanBos;
  }
  return slave.selectSpans(transactionIdList);
}","@Override public List<List<SpanBo>> selectSpans(List<TransactionId> transactionIdList){
  List<List<SpanBo>> spanBos=this.master.selectSpans(transactionIdList);
  if (CollectionUtils.isNotEmpty(spanBos)) {
    for (    List<SpanBo> spanBo : spanBos) {
      if (CollectionUtils.isNotEmpty(spanBo)) {
        return spanBos;
      }
    }
  }
  return slave.selectSpans(transactionIdList);
}"
53606,"@Override public List<List<SpanBo>> selectAllSpans(List<TransactionId> transactionIdList){
  List<List<SpanBo>> spanBos=this.master.selectAllSpans(transactionIdList);
  if (CollectionUtils.isNotEmpty(spanBos)) {
    return spanBos;
  }
  return slave.selectAllSpans(transactionIdList);
}","@Override public List<List<SpanBo>> selectAllSpans(List<TransactionId> transactionIdList){
  List<List<SpanBo>> spanBos=this.master.selectAllSpans(transactionIdList);
  if (CollectionUtils.isNotEmpty(spanBos)) {
    for (    List<SpanBo> spanBo : spanBos) {
      if (CollectionUtils.isNotEmpty(spanBo)) {
        return spanBos;
      }
    }
  }
  return slave.selectAllSpans(transactionIdList);
}"
53607,"public void clear(){
  cache=new Cache();
}","public void clear(){
  cache.clear();
}"
53608,"public TomcatConfiguration(ProfilerConfig config){
  this.tomcatHidePinpointHeader=config.readBoolean(""String_Node_Str"",true);
  final String tomcatExcludeURL=config.readString(""String_Node_Str"",""String_Node_Str"");
  if (!tomcatExcludeURL.isEmpty()) {
    this.tomcatExcludeUrlFilter=new ExcludePathFilter(tomcatExcludeURL);
  }
}","public TomcatConfiguration(ProfilerConfig config){
  this.tomcatHidePinpointHeader=config.readBoolean(""String_Node_Str"",true);
  if (config.getTomcatExcludeProfileMethodFilter() == null) {
    this.tomcatExcludeUrlFilter=new SkipFilter<String>();
  }
 else {
    this.tomcatExcludeUrlFilter=config.getTomcatExcludeUrlFilter();
  }
}"
53609,"public TomcatConfiguration(ProfilerConfig config){
  this.tomcatHidePinpointHeader=config.readBoolean(""String_Node_Str"",true);
  if (config.getTomcatExcludeProfileMethodFilter() == null) {
    this.tomcatExcludeUrlFilter=new SkipFilter<String>();
  }
 else {
    this.tomcatExcludeUrlFilter=config.getTomcatExcludeUrlFilter();
  }
}","public TomcatConfiguration(ProfilerConfig config){
  this.tomcatHidePinpointHeader=config.readBoolean(""String_Node_Str"",true);
  Filter<String> tomcatExcludeUrlFilter=config.getTomcatExcludeUrlFilter();
  if (tomcatExcludeUrlFilter == null) {
    this.tomcatExcludeUrlFilter=new SkipFilter<String>();
  }
 else {
    this.tomcatExcludeUrlFilter=tomcatExcludeUrlFilter;
  }
}"
53610,"@Override public void start(){
  PinpointThreadFactory flushThreadFactory=new PinpointThreadFactory(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
  webSocketflushExecutor=new SimpleOrderedThreadPool(Runtime.getRuntime().availableProcessors(),65535,flushThreadFactory);
  flushTimer=new java.util.Timer(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
  healthCheckTimer=new java.util.Timer(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
  reactiveTimer=new java.util.Timer(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
}","@Override public void start(){
  PinpointThreadFactory flushThreadFactory=new PinpointThreadFactory(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
  webSocketFlushExecutor=new SimpleOrderedThreadPool(Runtime.getRuntime().availableProcessors(),65535,flushThreadFactory);
  flushTimer=new java.util.Timer(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
  healthCheckTimer=new java.util.Timer(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
  reactiveTimer=new java.util.Timer(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
}"
53611,"private void sendPingMessage(WebSocketSession session,TextMessage pingMessage){
  try {
    webSocketflushExecutor.execute(new OrderedWebSocketFlushRunnable(session,pingMessage,true));
  }
 catch (  RuntimeException e) {
    logger.warn(""String_Node_Str"",e.getMessage(),e);
  }
}","private void sendPingMessage(WebSocketSession session,TextMessage pingMessage){
  try {
    webSocketFlushExecutor.execute(new OrderedWebSocketFlushRunnable(session,pingMessage,true));
  }
 catch (  RuntimeException e) {
    logger.warn(""String_Node_Str"",e.getMessage(),e);
  }
}"
53612,"@Override public void stop(){
  for (  PinpointWebSocketResponseAggregator aggregator : aggregatorRepository.values()) {
    if (aggregator != null) {
      aggregator.stop();
    }
  }
  aggregatorRepository.clear();
  if (flushTimer != null) {
    flushTimer.cancel();
  }
  if (healthCheckTimer != null) {
    healthCheckTimer.cancel();
  }
  if (reactiveTimer != null) {
    reactiveTimer.cancel();
  }
  if (webSocketflushExecutor != null) {
    webSocketflushExecutor.shutdown();
  }
}","@Override public void stop(){
  for (  PinpointWebSocketResponseAggregator aggregator : aggregatorRepository.values()) {
    if (aggregator != null) {
      aggregator.stop();
    }
  }
  aggregatorRepository.clear();
  if (flushTimer != null) {
    flushTimer.cancel();
  }
  if (healthCheckTimer != null) {
    healthCheckTimer.cancel();
  }
  if (reactiveTimer != null) {
    reactiveTimer.cancel();
  }
  if (webSocketFlushExecutor != null) {
    webSocketFlushExecutor.shutdown();
  }
}"
53613,"public void afterPropertiesSet(){
  Assert.notNull(metricRegistry,""String_Node_Str"");
  Assert.notNull(packetHandlerFactory,""String_Node_Str"");
  this.worker=createWorker(workerType,workerThreadSize,workerThreadQueueSize,receiverName + ""String_Node_Str"");
  if (enableCollectorMetric) {
    this.worker=new MonitoredExecutorService(worker,metricRegistry,receiverName + ""String_Node_Str"");
  }
 else {
    this.worker=worker;
  }
  final int packetPoolSize=getPacketPoolSize(workerThreadSize,workerThreadQueueSize);
  this.datagramPacketPool=new DefaultObjectPool<>(new DatagramPacketFactory(),packetPoolSize);
  this.io=(ThreadPoolExecutor)Executors.newCachedThreadPool(new PinpointThreadFactory(receiverName + ""String_Node_Str"",true));
}","public void afterPropertiesSet(){
  Assert.notNull(metricRegistry,""String_Node_Str"");
  Assert.notNull(packetHandlerFactory,""String_Node_Str"");
  this.worker=createWorker(workerType,workerThreadSize,workerThreadQueueSize,receiverName + ""String_Node_Str"");
  if (enableCollectorMetric) {
    this.worker=new MonitoredExecutorService(worker,metricRegistry,receiverName + ""String_Node_Str"");
  }
  final int packetPoolSize=getPacketPoolSize(workerThreadSize,workerThreadQueueSize);
  this.datagramPacketPool=new DefaultObjectPool<>(new DatagramPacketFactory(),packetPoolSize);
  this.io=(ThreadPoolExecutor)Executors.newCachedThreadPool(new PinpointThreadFactory(receiverName + ""String_Node_Str"",true));
}"
53614,"private Object[] getParameters(String operation,Object[] args){
  Object[] orgParams=(args[2] == null) ? null : (Object[])args[2];
  if (orgParams == null) {
    return orgParams;
  }
  String[] hiddenParams=pluginConfig.getClientHiddenParams();
  if (hiddenParams == null || hiddenParams.length == 0) {
    return orgParams;
  }
  Object[] params=Arrays.copyOf(orgParams,orgParams.length);
  for (  String op : hiddenParams) {
    Matcher matcher=hiddenParamPattern.matcher(op);
    if (matcher.matches()) {
      if (operation.equals(matcher.group(1))) {
        int idx=Integer.valueOf(matcher.group(2));
        if (idx >= params.length) {
          continue;
        }
        params[idx]=""String_Node_Str"";
      }
    }
 else {
      if (op.equals(operation)) {
        return new Object[]{""String_Node_Str"" + params.length + ""String_Node_Str""};
      }
    }
  }
  return params;
}","private Object[] getParameters(String operation,Object[] args){
  Object[] orgParams=(args[2] == null) ? null : (Object[])args[2];
  if (orgParams == null) {
    return null;
  }
  String[] hiddenParams=pluginConfig.getClientHiddenParams();
  if (hiddenParams == null || hiddenParams.length == 0) {
    return orgParams;
  }
  Object[] params=Arrays.copyOf(orgParams,orgParams.length);
  for (  String op : hiddenParams) {
    Matcher matcher=hiddenParamPattern.matcher(op);
    if (matcher.matches()) {
      if (operation.equals(matcher.group(1))) {
        String group=matcher.group(2);
        int idx=Integer.parseInt(group);
        if (idx >= params.length) {
          continue;
        }
        params[idx]=""String_Node_Str"";
      }
    }
 else {
      if (op.equals(operation)) {
        return new Object[]{""String_Node_Str"" + params.length + ""String_Node_Str""};
      }
    }
  }
  return params;
}"
53615,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.DELETE) @ResponseBody public Map<String,String> deleteUserGroupMember(@RequestBody UserGroupMemberParam userGroupMember){
  if (StringUtils.isEmpty(userGroupMember.getUserGroupId()) || StringUtils.isEmpty(userGroupMember.getMemberId())) {
    Map<String,String> result=new HashMap<>();
    result.put(""String_Node_Str"",""String_Node_Str"");
    result.put(""String_Node_Str"",""String_Node_Str"");
    return result;
  }
  if (webProperties.isOpenSource() == false) {
    boolean isValid=checkValid(userGroupMember.getUserId(),userGroupMember.getUserGroupId());
    if (isValid == false) {
      Map<String,String> result=new HashMap<>();
      result.put(""String_Node_Str"",""String_Node_Str"");
      result.put(""String_Node_Str"",""String_Node_Str"");
      return result;
    }
  }
  userGroupService.deleteMember(userGroupMember);
  Map<String,String> result=new HashMap<>();
  result.put(""String_Node_Str"",""String_Node_Str"");
  return result;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.DELETE) @ResponseBody public Map<String,String> deleteUserGroupMember(@RequestBody UserGroupMemberParam userGroupMember,@RequestHeader(value=SSO_USER,required=false) String userId){
  if (StringUtils.isEmpty(userGroupMember.getUserGroupId()) || StringUtils.isEmpty(userGroupMember.getMemberId())) {
    Map<String,String> result=new HashMap<>();
    result.put(""String_Node_Str"",""String_Node_Str"");
    result.put(""String_Node_Str"",""String_Node_Str"");
    return result;
  }
  if (webProperties.isOpenSource() == false) {
    boolean isValid=checkValid(userId,userGroupMember.getUserGroupId());
    if (isValid == false) {
      Map<String,String> result=new HashMap<>();
      result.put(""String_Node_Str"",""String_Node_Str"");
      result.put(""String_Node_Str"",""String_Node_Str"");
      return result;
    }
  }
  userGroupService.deleteMember(userGroupMember);
  Map<String,String> result=new HashMap<>();
  result.put(""String_Node_Str"",""String_Node_Str"");
  return result;
}"
53616,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) @ResponseBody public Map<String,String> insertUserGroupMember(@RequestBody UserGroupMemberParam userGroupMember){
  if (StringUtils.isEmpty(userGroupMember.getMemberId()) || StringUtils.isEmpty(userGroupMember.getUserGroupId())) {
    Map<String,String> result=new HashMap<>();
    result.put(""String_Node_Str"",""String_Node_Str"");
    result.put(""String_Node_Str"",""String_Node_Str"");
    return result;
  }
  if (webProperties.isOpenSource() == false) {
    boolean isValid=checkValid(userGroupMember.getUserId(),userGroupMember.getUserGroupId());
    if (isValid == false) {
      Map<String,String> result=new HashMap<>();
      result.put(""String_Node_Str"",""String_Node_Str"");
      result.put(""String_Node_Str"",""String_Node_Str"");
      return result;
    }
  }
  userGroupService.insertMember(userGroupMember);
  Map<String,String> result=new HashMap<>();
  result.put(""String_Node_Str"",""String_Node_Str"");
  return result;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) @ResponseBody public Map<String,String> insertUserGroupMember(@RequestBody UserGroupMemberParam userGroupMember,@RequestHeader(value=SSO_USER,required=false) String userId){
  if (StringUtils.isEmpty(userGroupMember.getMemberId()) || StringUtils.isEmpty(userGroupMember.getUserGroupId())) {
    Map<String,String> result=new HashMap<>();
    result.put(""String_Node_Str"",""String_Node_Str"");
    result.put(""String_Node_Str"",""String_Node_Str"");
    return result;
  }
  if (webProperties.isOpenSource() == false) {
    boolean isValid=checkValid(userId,userGroupMember.getUserGroupId());
    if (isValid == false) {
      Map<String,String> result=new HashMap<>();
      result.put(""String_Node_Str"",""String_Node_Str"");
      result.put(""String_Node_Str"",""String_Node_Str"");
      return result;
    }
  }
  userGroupService.insertMember(userGroupMember);
  Map<String,String> result=new HashMap<>();
  result.put(""String_Node_Str"",""String_Node_Str"");
  return result;
}"
53617,"@Override public void run(){
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
  }
}","@Override public void run(){
  if (startLatch != null) {
    startLatch.countDown();
  }
  try {
    endLatch.await();
  }
 catch (  InterruptedException e) {
  }
}"
53618,"public LatchAwaitRunnable(CountDownLatch latch){
  this.latch=latch;
}","public LatchAwaitRunnable(CountDownLatch startLatch,CountDownLatch endLatch){
  this.startLatch=startLatch;
  this.endLatch=endLatch;
}"
53619,"private void execute(int newBufferSize,ExecutorService executor,CountDownLatch latch){
  for (int i=0; i < newBufferSize; i++) {
    executor.execute(new LatchAwaitRunnable(latch));
  }
}","private void execute(int newBufferSize,ExecutorService executor,CountDownLatch startLatch,CountDownLatch endLatch){
  for (int i=0; i < newBufferSize; i++) {
    executor.execute(new LatchAwaitRunnable(startLatch,endLatch));
  }
}"
53620,"@Test public void simpleTest() throws InterruptedException {
  int bufferSize=10;
  int newBufferSize=DisruptorExecutors.nextPowerOfTwo(bufferSize);
  ExecutorService executor=DisruptorExecutors.newSingleProducerExecutor(1,newBufferSize,threadFactory,new TimeoutBlockingWaitStrategy(10000,TimeUnit.MILLISECONDS));
  CountDownLatch latch=new CountDownLatch(1);
  execute(newBufferSize,executor,latch);
  List<Runnable> runnableList=executor.shutdownNow();
  latch.countDown();
  Assert.assertEquals(newBufferSize - 1,runnableList.size());
  Assert.assertTrue(executor.isShutdown());
}","@Test public void simpleTest() throws InterruptedException {
  int bufferSize=10;
  int newBufferSize=DisruptorExecutors.nextPowerOfTwo(bufferSize);
  ExecutorService executor=DisruptorExecutors.newSingleProducerExecutor(1,newBufferSize,threadFactory,new TimeoutBlockingWaitStrategy(10000,TimeUnit.MILLISECONDS));
  CountDownLatch startLatch=new CountDownLatch(1);
  CountDownLatch endLatch=new CountDownLatch(1);
  execute(newBufferSize,executor,startLatch,endLatch);
  startLatch.await();
  List<Runnable> runnableList=executor.shutdownNow();
  endLatch.countDown();
  Assert.assertEquals(newBufferSize - 1,runnableList.size());
  Assert.assertTrue(executor.isShutdown());
}"
53621,"private void addField0(String accessorTypeName,String initValExp) throws InstrumentException {
  try {
    Class<?> accessorType=pluginContext.injectClass(classLoader,accessorTypeName);
    final AccessorAnalyzer accessorAnalyzer=new AccessorAnalyzer();
    final AccessorDetails accessorDetails=accessorAnalyzer.analyze(accessorType);
    final CtField newField=CtField.make(""String_Node_Str"" + accessorDetails.getFieldType().getName() + ""String_Node_Str""+ FIELD_PREFIX+ accessorTypeName.replace('.','_').replace('$','_')+ ""String_Node_Str"",ctClass);
    if (initValExp == null) {
      ctClass.addField(newField);
    }
 else {
      ctClass.addField(newField,initValExp);
    }
    final CtClass accessorInterface=ctClass.getClassPool().get(accessorTypeName);
    ctClass.addInterface(accessorInterface);
    CtMethod getterMethod=CtNewMethod.getter(accessorDetails.getGetter().getName(),newField);
    ctClass.addMethod(getterMethod);
    CtMethod setterMethod=CtNewMethod.setter(accessorDetails.getSetter().getName(),newField);
    ctClass.addMethod(setterMethod);
  }
 catch (  Exception e) {
    throw new InstrumentException(""String_Node_Str"" + accessorTypeName + ""String_Node_Str""+ e.getMessage(),e);
  }
}","private void addField0(String accessorTypeName,String initValExp) throws InstrumentException {
  try {
    Class<?> accessorType=pluginContext.injectClass(classLoader,accessorTypeName);
    final AccessorAnalyzer accessorAnalyzer=new AccessorAnalyzer();
    final AccessorDetails accessorDetails=accessorAnalyzer.analyze(accessorType);
    Class<?> fieldType=accessorDetails.getFieldType();
    String fieldTypeName=JavaAssistUtils.javaClassNameToObjectName(fieldType.getName());
    final CtField newField=CtField.make(""String_Node_Str"" + fieldTypeName + ""String_Node_Str""+ FIELD_PREFIX+ accessorTypeName.replace('.','_').replace('$','_')+ ""String_Node_Str"",ctClass);
    if (initValExp == null) {
      ctClass.addField(newField);
    }
 else {
      ctClass.addField(newField,initValExp);
    }
    final CtClass accessorInterface=ctClass.getClassPool().get(accessorTypeName);
    ctClass.addInterface(accessorInterface);
    CtMethod getterMethod=CtNewMethod.getter(accessorDetails.getGetter().getName(),newField);
    ctClass.addMethod(getterMethod);
    CtMethod setterMethod=CtNewMethod.setter(accessorDetails.getSetter().getName(),newField);
    ctClass.addMethod(setterMethod);
  }
 catch (  Exception e) {
    throw new InstrumentException(""String_Node_Str"" + accessorTypeName + ""String_Node_Str""+ e.getMessage(),e);
  }
}"
53622,"@Override public void addGetter(String getterTypeName,String fieldName) throws InstrumentException {
  try {
    Class<?> getterType=pluginContext.injectClass(classLoader,getterTypeName);
    GetterDetails getterDetails=new GetterAnalyzer().analyze(getterType);
    CtField field=ctClass.getField(fieldName);
    if (!field.getType().getName().equals(getterDetails.getFieldType().getName())) {
      throw new IllegalArgumentException(""String_Node_Str"" + getterDetails.getGetter() + ""String_Node_Str""+ field.getType().getName());
    }
    CtMethod getterMethod=CtNewMethod.getter(getterDetails.getGetter().getName(),field);
    if (getterMethod.getDeclaringClass() != ctClass) {
      getterMethod=CtNewMethod.copy(getterMethod,ctClass,null);
    }
    ctClass.addMethod(getterMethod);
    CtClass ctInterface=ctClass.getClassPool().get(getterTypeName);
    ctClass.addInterface(ctInterface);
  }
 catch (  Exception e) {
    throw new InstrumentException(""String_Node_Str"" + getterTypeName,e);
  }
}","@Override public void addGetter(String getterTypeName,String fieldName) throws InstrumentException {
  try {
    Class<?> getterType=pluginContext.injectClass(classLoader,getterTypeName);
    GetterDetails getterDetails=new GetterAnalyzer().analyze(getterType);
    CtField field=ctClass.getField(fieldName);
    String fieldTypeName=JavaAssistUtils.javaClassNameToObjectName(getterDetails.getFieldType().getName());
    if (!field.getType().getName().equals(fieldTypeName)) {
      throw new IllegalArgumentException(""String_Node_Str"" + getterDetails.getGetter() + ""String_Node_Str""+ field.getType().getName());
    }
    CtMethod getterMethod=CtNewMethod.getter(getterDetails.getGetter().getName(),field);
    if (getterMethod.getDeclaringClass() != ctClass) {
      getterMethod=CtNewMethod.copy(getterMethod,ctClass,null);
    }
    ctClass.addMethod(getterMethod);
    CtClass ctInterface=ctClass.getClassPool().get(getterTypeName);
    ctClass.addInterface(ctInterface);
  }
 catch (  Exception e) {
    throw new InstrumentException(""String_Node_Str"" + getterTypeName,e);
  }
}"
53623,"@Override public void addSetter(String setterTypeName,String fieldName,boolean removeFinalFlag) throws InstrumentException {
  try {
    Class<?> setterType=pluginContext.injectClass(classLoader,setterTypeName);
    SetterDetails setterDetails=new SetterAnalyzer().analyze(setterType);
    CtField field=ctClass.getField(fieldName);
    if (!field.getType().getName().equals(setterDetails.getFieldType().getName())) {
      throw new IllegalArgumentException(""String_Node_Str"" + setterDetails.getSetter() + ""String_Node_Str""+ field.getType().getName());
    }
    final int originalModifiers=field.getModifiers();
    if (Modifier.isStatic(originalModifiers)) {
      throw new IllegalArgumentException(""String_Node_Str"" + setterDetails.getSetter().getName() + ""String_Node_Str""+ fieldName);
    }
    boolean finalRemoved=false;
    if (Modifier.isFinal(originalModifiers)) {
      if (!removeFinalFlag) {
        throw new IllegalArgumentException(""String_Node_Str"" + setterDetails.getSetter().getName() + ""String_Node_Str""+ fieldName);
      }
 else {
        final int modifiersWithFinalRemoved=Modifier.clear(originalModifiers,Modifier.FINAL);
        field.setModifiers(modifiersWithFinalRemoved);
        finalRemoved=true;
      }
    }
    try {
      CtMethod setterMethod=CtNewMethod.setter(setterDetails.getSetter().getName(),field);
      if (setterMethod.getDeclaringClass() != ctClass) {
        setterMethod=CtNewMethod.copy(setterMethod,ctClass,null);
      }
      ctClass.addMethod(setterMethod);
      CtClass ctInterface=ctClass.getClassPool().get(setterTypeName);
      ctClass.addInterface(ctInterface);
    }
 catch (    Exception e) {
      if (finalRemoved) {
        field.setModifiers(originalModifiers);
      }
      throw e;
    }
  }
 catch (  Exception e) {
    throw new InstrumentException(""String_Node_Str"" + setterTypeName,e);
  }
}","@Override public void addSetter(String setterTypeName,String fieldName,boolean removeFinalFlag) throws InstrumentException {
  try {
    Class<?> setterType=pluginContext.injectClass(classLoader,setterTypeName);
    SetterDetails setterDetails=new SetterAnalyzer().analyze(setterType);
    CtField field=ctClass.getField(fieldName);
    String fieldTypeName=JavaAssistUtils.javaClassNameToObjectName(setterDetails.getFieldType().getName());
    if (!field.getType().getName().equals(fieldTypeName)) {
      throw new IllegalArgumentException(""String_Node_Str"" + setterDetails.getSetter() + ""String_Node_Str""+ field.getType().getName());
    }
    final int originalModifiers=field.getModifiers();
    if (Modifier.isStatic(originalModifiers)) {
      throw new IllegalArgumentException(""String_Node_Str"" + setterDetails.getSetter().getName() + ""String_Node_Str""+ fieldName);
    }
    boolean finalRemoved=false;
    if (Modifier.isFinal(originalModifiers)) {
      if (!removeFinalFlag) {
        throw new IllegalArgumentException(""String_Node_Str"" + setterDetails.getSetter().getName() + ""String_Node_Str""+ fieldName);
      }
 else {
        final int modifiersWithFinalRemoved=Modifier.clear(originalModifiers,Modifier.FINAL);
        field.setModifiers(modifiersWithFinalRemoved);
        finalRemoved=true;
      }
    }
    try {
      CtMethod setterMethod=CtNewMethod.setter(setterDetails.getSetter().getName(),field);
      if (setterMethod.getDeclaringClass() != ctClass) {
        setterMethod=CtNewMethod.copy(setterMethod,ctClass,null);
      }
      ctClass.addMethod(setterMethod);
      CtClass ctInterface=ctClass.getClassPool().get(setterTypeName);
      ctClass.addInterface(ctInterface);
    }
 catch (    Exception e) {
      if (finalRemoved) {
        field.setModifiers(originalModifiers);
      }
      throw e;
    }
  }
 catch (  Exception e) {
    throw new InstrumentException(""String_Node_Str"" + setterTypeName,e);
  }
}"
53624,"@Test public void testAddGetter() throws Exception {
  final TestClassLoader loader=getTestClassLoader();
  final String targetClassName=""String_Node_Str"";
  loader.addTransformer(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader classLoader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      try {
        logger.info(""String_Node_Str"",classLoader);
        InstrumentClass aClass=instrumentor.getInstrumentClass(classLoader,className,classfileBuffer);
        aClass.addGetter(StringGetter.class.getName(),""String_Node_Str"");
        aClass.addGetter(IntGetter.class.getName(),""String_Node_Str"");
        return aClass.toBytecode();
      }
 catch (      InstrumentException e) {
        throw new RuntimeException(e.getMessage(),e);
      }
    }
  }
);
  loader.initialize();
  Object testObject=loader.loadClass(targetClassName).newInstance();
  Class<?> stringGetter=loader.loadClass(StringGetter.class.getName());
  Class<?> intGetter=loader.loadClass(IntGetter.class.getName());
  Assert.assertTrue(stringGetter.isInstance(testObject));
  Assert.assertTrue(intGetter.isInstance(testObject));
  String value=""String_Node_Str"";
  int intValue=99;
  Method method=testObject.getClass().getMethod(""String_Node_Str"",String.class);
  method.invoke(testObject,value);
  Method getString=stringGetter.getMethod(""String_Node_Str"");
  Assert.assertEquals(value,getString.invoke(testObject));
  Method setIntValue=testObject.getClass().getMethod(""String_Node_Str"",int.class);
  setIntValue.invoke(testObject,intValue);
  Method getInt=intGetter.getMethod(""String_Node_Str"");
  Assert.assertEquals(intValue,getInt.invoke(testObject));
}","@Test public void testAddGetter() throws Exception {
  final TestClassLoader loader=getTestClassLoader();
  final String targetClassName=""String_Node_Str"";
  loader.addTransformer(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader classLoader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      try {
        logger.info(""String_Node_Str"",classLoader);
        InstrumentClass aClass=instrumentor.getInstrumentClass(classLoader,className,classfileBuffer);
        aClass.addGetter(StringGetter.class.getName(),""String_Node_Str"");
        aClass.addGetter(IntGetter.class.getName(),""String_Node_Str"");
        aClass.addGetter(IntArrayGetter.class.getName(),""String_Node_Str"");
        aClass.addGetter(IntegerArrayGetter.class.getName(),""String_Node_Str"");
        return aClass.toBytecode();
      }
 catch (      InstrumentException e) {
        throw new RuntimeException(e.getMessage(),e);
      }
    }
  }
);
  loader.initialize();
  Object testObject=loader.loadClass(targetClassName).newInstance();
  Class<?> stringGetter=loader.loadClass(StringGetter.class.getName());
  Class<?> intGetter=loader.loadClass(IntGetter.class.getName());
  Class<?> intsGetter=loader.loadClass(IntArrayGetter.class.getName());
  Class<?> integersGetter=loader.loadClass(IntegerArrayGetter.class.getName());
  Assert.assertTrue(stringGetter.isInstance(testObject));
  Assert.assertTrue(intGetter.isInstance(testObject));
  Assert.assertTrue(intsGetter.isInstance(testObject));
  Assert.assertTrue(integersGetter.isInstance(testObject));
  String value=""String_Node_Str"";
  int intValue=99;
  int[] intValues={99,100};
  Integer[] integerValues={99,100};
  Method method=testObject.getClass().getMethod(""String_Node_Str"",String.class);
  method.invoke(testObject,value);
  Method getString=stringGetter.getMethod(""String_Node_Str"");
  Assert.assertEquals(value,getString.invoke(testObject));
  Method setIntValue=testObject.getClass().getMethod(""String_Node_Str"",int.class);
  setIntValue.invoke(testObject,intValue);
  Method getInt=intGetter.getMethod(""String_Node_Str"");
  Assert.assertEquals(intValue,getInt.invoke(testObject));
  Method setIntValues=testObject.getClass().getMethod(""String_Node_Str"",int[].class);
  setIntValues.invoke(testObject,intValues);
  Method getIntValues=intsGetter.getMethod(""String_Node_Str"");
  Assert.assertEquals(intValues,getIntValues.invoke(testObject));
  Method setIntegerValues=testObject.getClass().getMethod(""String_Node_Str"",Integer[].class);
  Object[] wrappedIntegerValues=new Object[]{integerValues};
  setIntegerValues.invoke(testObject,wrappedIntegerValues);
  Method getIntegerValues=integersGetter.getMethod(""String_Node_Str"");
  Assert.assertEquals(integerValues,getIntegerValues.invoke(testObject));
}"
53625,"@Override public byte[] doInTransform(Instrumentor instrumentor,ClassLoader classLoader,String className,Class<?> classBeingRedefined,ProtectionDomain protectionDomain,byte[] classfileBuffer) throws InstrumentException {
  try {
    logger.info(""String_Node_Str"",classLoader);
    InstrumentClass aClass=instrumentor.getInstrumentClass(classLoader,className,classfileBuffer);
    aClass.addGetter(StringGetter.class.getName(),""String_Node_Str"");
    aClass.addGetter(IntGetter.class.getName(),""String_Node_Str"");
    return aClass.toBytecode();
  }
 catch (  InstrumentException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}","@Override public byte[] doInTransform(Instrumentor instrumentor,ClassLoader classLoader,String className,Class<?> classBeingRedefined,ProtectionDomain protectionDomain,byte[] classfileBuffer) throws InstrumentException {
  try {
    logger.info(""String_Node_Str"",classLoader);
    InstrumentClass testClass=instrumentor.getInstrumentClass(classLoader,className,classfileBuffer);
    testClass.addSetter(IntSetter.class.getName(),""String_Node_Str"");
    testClass.addSetter(IntArraySetter.class.getName(),""String_Node_Str"");
    testClass.addSetter(IntegerArraySetter.class.getName(),""String_Node_Str"");
    return testClass.toBytecode();
  }
 catch (  InstrumentException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}"
53626,"@Test public void addTraceValue() throws Exception {
  final TestClassLoader loader=getTestClassLoader();
  final String javassistClassName=""String_Node_Str"";
  loader.addTransformer(javassistClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      try {
        logger.info(""String_Node_Str"",loader);
        InstrumentClass aClass=instrumentor.getInstrumentClass(loader,javassistClassName,classfileBuffer);
        aClass.addField(ObjectTraceValue.class.getName());
        aClass.addField(IntTraceValue.class.getName());
        aClass.addField(DatabaseInfoTraceValue.class.getName());
        aClass.addField(BindValueTraceValue.class.getName());
        String methodName=""String_Node_Str"";
        aClass.getDeclaredMethod(methodName).addInterceptor(""String_Node_Str"");
        return aClass.toBytecode();
      }
 catch (      InstrumentException e) {
        e.printStackTrace();
        throw new RuntimeException(e.getMessage(),e);
      }
    }
  }
);
  loader.initialize();
  Class<?> testObjectClazz=loader.loadClass(javassistClassName);
  final String methodName=""String_Node_Str"";
  logger.info(""String_Node_Str"",testObjectClazz.toString());
  final Object testObject=testObjectClazz.newInstance();
  Method callA=testObjectClazz.getMethod(methodName);
  callA.invoke(testObject);
  Class<?> objectTraceValue=loader.loadClass(ObjectTraceValue.class.getName());
  Assert.assertTrue(""String_Node_Str"",objectTraceValue.isInstance(testObject));
  objectTraceValue.getMethod(""String_Node_Str"",Object.class).invoke(testObject,""String_Node_Str"");
  Object get=objectTraceValue.getMethod(""String_Node_Str"").invoke(testObject);
  Assert.assertEquals(""String_Node_Str"",get);
  Class<?> intTraceValue=loader.loadClass(IntTraceValue.class.getName());
  Assert.assertTrue(""String_Node_Str"",intTraceValue.isInstance(testObject));
  intTraceValue.getMethod(""String_Node_Str"",int.class).invoke(testObject,1);
  int a=(Integer)intTraceValue.getMethod(""String_Node_Str"").invoke(testObject);
  Assert.assertEquals(1,a);
  Class<?> databaseTraceValue=loader.loadClass(DatabaseInfoTraceValue.class.getName());
  Assert.assertTrue(""String_Node_Str"",databaseTraceValue.isInstance(testObject));
  databaseTraceValue.getMethod(""String_Node_Str"",DatabaseInfo.class).invoke(testObject,UnKnownDatabaseInfo.INSTANCE);
  Object databaseInfo=databaseTraceValue.getMethod(""String_Node_Str"").invoke(testObject);
  Assert.assertSame(UnKnownDatabaseInfo.INSTANCE,databaseInfo);
}","@Test public void addTraceValue() throws Exception {
  final TestClassLoader loader=getTestClassLoader();
  final String javassistClassName=""String_Node_Str"";
  loader.addTransformer(javassistClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      try {
        logger.info(""String_Node_Str"",loader);
        InstrumentClass aClass=instrumentor.getInstrumentClass(loader,javassistClassName,classfileBuffer);
        aClass.addField(ObjectTraceValue.class.getName());
        aClass.addField(IntTraceValue.class.getName());
        aClass.addField(IntArrayTraceValue.class.getName());
        aClass.addField(IntegerArrayTraceValue.class.getName());
        aClass.addField(DatabaseInfoTraceValue.class.getName());
        aClass.addField(BindValueTraceValue.class.getName());
        String methodName=""String_Node_Str"";
        aClass.getDeclaredMethod(methodName).addInterceptor(""String_Node_Str"");
        return aClass.toBytecode();
      }
 catch (      InstrumentException e) {
        e.printStackTrace();
        throw new RuntimeException(e.getMessage(),e);
      }
    }
  }
);
  loader.initialize();
  Class<?> testObjectClazz=loader.loadClass(javassistClassName);
  final String methodName=""String_Node_Str"";
  logger.info(""String_Node_Str"",testObjectClazz.toString());
  final Object testObject=testObjectClazz.newInstance();
  Method callA=testObjectClazz.getMethod(methodName);
  callA.invoke(testObject);
  Class<?> objectTraceValue=loader.loadClass(ObjectTraceValue.class.getName());
  Assert.assertTrue(""String_Node_Str"",objectTraceValue.isInstance(testObject));
  objectTraceValue.getMethod(""String_Node_Str"",Object.class).invoke(testObject,""String_Node_Str"");
  Object get=objectTraceValue.getMethod(""String_Node_Str"").invoke(testObject);
  Assert.assertEquals(""String_Node_Str"",get);
  Class<?> intTraceValue=loader.loadClass(IntTraceValue.class.getName());
  Assert.assertTrue(""String_Node_Str"",intTraceValue.isInstance(testObject));
  intTraceValue.getMethod(""String_Node_Str"",int.class).invoke(testObject,1);
  int a=(Integer)intTraceValue.getMethod(""String_Node_Str"").invoke(testObject);
  Assert.assertEquals(1,a);
  Class<?> intArrayTraceValue=loader.loadClass(IntArrayTraceValue.class.getName());
  Assert.assertTrue(""String_Node_Str"",intArrayTraceValue.isInstance(testObject));
  int[] expectedInts={1,2,3};
  intArrayTraceValue.getMethod(""String_Node_Str"",int[].class).invoke(testObject,expectedInts);
  int[] ints=(int[])intArrayTraceValue.getMethod(""String_Node_Str"").invoke(testObject);
  Assert.assertEquals(expectedInts,ints);
  Class<?> integerArrayTraceValue=loader.loadClass(IntegerArrayTraceValue.class.getName());
  Assert.assertTrue(""String_Node_Str"",integerArrayTraceValue.isInstance(testObject));
  Integer[] expectedIntegers={1,2};
  Object[] wrappedExpectedIntegers=new Object[]{expectedIntegers};
  integerArrayTraceValue.getMethod(""String_Node_Str"",Integer[].class).invoke(testObject,wrappedExpectedIntegers);
  Integer[] integers=(Integer[])integerArrayTraceValue.getMethod(""String_Node_Str"").invoke(testObject);
  Assert.assertArrayEquals(expectedIntegers,integers);
  Class<?> databaseTraceValue=loader.loadClass(DatabaseInfoTraceValue.class.getName());
  Assert.assertTrue(""String_Node_Str"",databaseTraceValue.isInstance(testObject));
  databaseTraceValue.getMethod(""String_Node_Str"",DatabaseInfo.class).invoke(testObject,UnKnownDatabaseInfo.INSTANCE);
  Object databaseInfo=databaseTraceValue.getMethod(""String_Node_Str"").invoke(testObject);
  Assert.assertSame(UnKnownDatabaseInfo.INSTANCE,databaseInfo);
}"
53627,"public static long toAggregatedTimestamp(AgentStat stat,long interval){
  long timestamp=(stat.getTimestamp() / interval) * interval;
  if (stat.getTimestamp() != timestamp) {
    timestamp+=interval;
  }
  return timestamp;
}","public static long toAggregatedTimestamp(AgentStat stat,long interval){
  long timestamp=(stat.getTimestamp() / interval) * interval;
  return timestamp;
}"
53628,"public static AgentStat merge(AgentStat s1,AgentStat s2){
  AgentStat latest=s1.getTimestamp() > s2.getTimestamp() ? s1 : s2;
  AgentStat stat=new AgentStat(s1.getAgentId(),s1.getTimestamp());
  stat.setGcType(latest.getGcType());
  stat.setGcOldCount(latest.getGcOldCount());
  stat.setGcOldTime(latest.getGcOldTime());
  stat.setHeapUsed(latest.getHeapUsed());
  stat.setHeapMax(maxValue(s1.getHeapMax(),s2.getHeapMax()));
  stat.setNonHeapUsed(latest.getNonHeapUsed());
  stat.setNonHeapMax(maxValue(s1.getNonHeapMax(),s2.getNonHeapMax()));
  stat.setJvmCpuUsage(latest.getJvmCpuUsage());
  stat.setSystemCpuUsage(latest.getSystemCpuUsage());
  stat.setSampledNewCount(addValue(s1.getSampledNewCount(),s2.getSampledNewCount()));
  stat.setSampledContinuationCount(addValue(s1.getSampledContinuationCount(),s2.getSampledContinuationCount()));
  stat.setUnsampledNewCount(addValue(s1.getUnsampledNewCount(),s2.getUnsampledNewCount()));
  stat.setUnsampledContinuationCount(addValue(s1.getUnsampledContinuationCount(),s2.getUnsampledContinuationCount()));
  stat.setHistogramSchema(latest.getHistogramSchema());
  stat.setActiveTraceCounts(latest.getActiveTraceCounts());
  return stat;
}","public static AgentStat merge(AgentStat s1,AgentStat s2,long interval){
  AgentStat latest=s1.getTimestamp() > s2.getTimestamp() ? s1 : s2;
  AgentStat stat=new AgentStat(s1.getAgentId(),latest.getTimestamp());
  stat.setCollectInterval(interval);
  stat.setGcType(latest.getGcType());
  stat.setGcOldCount(latest.getGcOldCount());
  stat.setGcOldTime(latest.getGcOldTime());
  stat.setHeapUsed(latest.getHeapUsed());
  stat.setHeapMax(maxValue(s1.getHeapMax(),s2.getHeapMax()));
  stat.setNonHeapUsed(latest.getNonHeapUsed());
  stat.setNonHeapMax(maxValue(s1.getNonHeapMax(),s2.getNonHeapMax()));
  stat.setJvmCpuUsage(latest.getJvmCpuUsage());
  stat.setSystemCpuUsage(latest.getSystemCpuUsage());
  stat.setSampledNewCount(addValue(s1.getSampledNewCount(),s2.getSampledNewCount()));
  stat.setSampledContinuationCount(addValue(s1.getSampledContinuationCount(),s2.getSampledContinuationCount()));
  stat.setUnsampledNewCount(addValue(s1.getUnsampledNewCount(),s2.getUnsampledNewCount()));
  stat.setUnsampledContinuationCount(addValue(s1.getUnsampledContinuationCount(),s2.getUnsampledContinuationCount()));
  stat.setHistogramSchema(latest.getHistogramSchema());
  stat.setActiveTraceCounts(latest.getActiveTraceCounts());
  return stat;
}"
53629,"public List<AgentStat> aggregate(){
  if (stats.isEmpty()) {
    return stats;
  }
  List<AgentStat> result=new ArrayList<>();
  AgentStat current=toAggregatedAgentStat(stats.get(0));
  for (  AgentStat stat : stats.subList(1,stats.size())) {
    long timestamp=toAggregatedTimestamp(stat,interval);
    if (current.getTimestamp() == timestamp) {
      current=merge(current,stat);
    }
 else {
      result.add(current);
      current=toAggregatedAgentStat(stat);
    }
  }
  result.add(current);
  return result;
}","public List<AgentStat> aggregate(){
  if (stats.isEmpty()) {
    return stats;
  }
  List<AgentStat> result=new ArrayList<>();
  AgentStat current=toAggregatedAgentStat(stats.get(0));
  for (  AgentStat stat : stats.subList(1,stats.size())) {
    long timestamp=toAggregatedTimestamp(stat,interval);
    if (current.getTimestamp() == timestamp) {
      current=merge(current,stat,interval);
    }
 else {
      result.add(current);
      current=toAggregatedAgentStat(stat);
    }
  }
  current.setCollectInterval(interval);
  result.add(current);
  return result;
}"
53630,"@Override @SuppressWarnings(""String_Node_Str"") public <T>Class<? extends T> injectClass(ClassLoader classLoader,String className){
  try {
    if (classLoader == null) {
      return (Class<T>)injectToBootstrapClassLoader(className);
    }
 else     if (classLoader instanceof URLClassLoader) {
      final URLClassLoader urlClassLoader=(URLClassLoader)classLoader;
      return (Class<T>)injectToURLClassLoader(urlClassLoader,className);
    }
 else {
      return (Class<T>)injectToPlainClassLoader(classLoader,className);
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",className,classLoader,e);
    throw new PinpointException(""String_Node_Str"" + className + ""String_Node_Str""+ classLoader,e);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>Class<? extends T> injectClass(ClassLoader classLoader,String className){
  try {
    if (classLoader == null) {
      return (Class<T>)bootstrapClassLoaderHandler.injectClass(null,className);
    }
 else     if (classLoader instanceof URLClassLoader) {
      final URLClassLoader urlClassLoader=(URLClassLoader)classLoader;
      return (Class<T>)urlClassLoaderHandler.injectClass(urlClassLoader,className);
    }
 else {
      return (Class<T>)plainClassLoaderHandler.injectClass(classLoader,className);
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",className,classLoader,e);
    throw new PinpointException(""String_Node_Str"" + className + ""String_Node_Str""+ classLoader,e);
  }
}"
53631,"public JarProfilerPluginClassInjector(PluginConfig pluginConfig){
  if (pluginConfig == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.pluginConfig=pluginConfig;
}","public JarProfilerPluginClassInjector(PluginConfig pluginConfig){
  if (pluginConfig == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.bootstrapClassLoaderHandler=new BootstrapClassLoaderHandler(pluginConfig);
  this.urlClassLoaderHandler=new URLClassLoaderHandler(pluginConfig);
  this.plainClassLoaderHandler=new PlainClassLoaderHandler(pluginConfig);
}"
53632,"@Override public void start(){
  PinpointThreadFactory flushThreadFactory=new PinpointThreadFactory(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
  webSocketFlushThreadPool=new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(),Integer.MAX_VALUE,DEFAULT_HEALTH_CHECk_DELAY,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>(),flushThreadFactory);
  flushTimer=new java.util.Timer(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
  healthCheckTimer=new java.util.Timer(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
  reactiveTimer=new java.util.Timer(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
}","@Override public void start(){
  PinpointThreadFactory flushThreadFactory=new PinpointThreadFactory(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
  webSocketflushExecutor=new SimpleOrderedThreadPool(Runtime.getRuntime().availableProcessors(),65535,flushThreadFactory);
  flushTimer=new java.util.Timer(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
  healthCheckTimer=new java.util.Timer(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
  reactiveTimer=new java.util.Timer(ClassUtils.simpleClassName(this) + ""String_Node_Str"",true);
}"
53633,"private void sendPingMessage(WebSocketSession session,TextMessage pingMessage){
  try {
    session.sendMessage(pingMessage);
  }
 catch (  Exception e) {
    logger.warn(e.getMessage(),e);
    closeSession(session,CloseStatus.SERVER_ERROR);
  }
}","private void sendPingMessage(WebSocketSession session,TextMessage pingMessage){
  try {
    webSocketflushExecutor.execute(new OrderedWebSocketFlushRunnable(session,pingMessage,true));
  }
 catch (  RuntimeException e) {
    logger.warn(""String_Node_Str"",e.getMessage(),e);
  }
}"
53634,"@Override public void stop(){
  for (  PinpointWebSocketResponseAggregator aggregator : aggregatorRepository.values()) {
    if (aggregator != null) {
      aggregator.stop();
    }
  }
  aggregatorRepository.clear();
  if (flushTimer != null) {
    flushTimer.cancel();
  }
  if (healthCheckTimer != null) {
    healthCheckTimer.cancel();
  }
  if (reactiveTimer != null) {
    reactiveTimer.cancel();
  }
  if (webSocketFlushThreadPool != null) {
    webSocketFlushThreadPool.shutdown();
  }
}","@Override public void stop(){
  for (  PinpointWebSocketResponseAggregator aggregator : aggregatorRepository.values()) {
    if (aggregator != null) {
      aggregator.stop();
    }
  }
  aggregatorRepository.clear();
  if (flushTimer != null) {
    flushTimer.cancel();
  }
  if (healthCheckTimer != null) {
    healthCheckTimer.cancel();
  }
  if (reactiveTimer != null) {
    reactiveTimer.cancel();
  }
  if (webSocketflushExecutor != null) {
    webSocketflushExecutor.shutdown();
  }
}"
53635,"private String createEmptyResponseMessage(String applicationName,long timeStamp){
  StringBuilder emptyJsonMessage=new StringBuilder();
  emptyJsonMessage.append(""String_Node_Str"");
  emptyJsonMessage.append(""String_Node_Str"").append(APPLICATION_NAME).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(applicationName).append(""String_Node_Str"").append(""String_Node_Str"");
  emptyJsonMessage.append(""String_Node_Str"").append(ACTIVE_THREAD_COUNTS).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  emptyJsonMessage.append(""String_Node_Str"").append(TIME_STAMP).append(""String_Node_Str"").append(""String_Node_Str"").append(timeStamp);
  emptyJsonMessage.append(""String_Node_Str"");
  return emptyJsonMessage.toString();
}","private String createEmptyResponseMessage(String applicationName,long timeStamp){
  StringBuilder emptyJsonMessage=new StringBuilder(32);
  emptyJsonMessage.append(""String_Node_Str"");
  emptyJsonMessage.append(""String_Node_Str"").append(APPLICATION_NAME).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(applicationName).append(""String_Node_Str"").append(""String_Node_Str"");
  emptyJsonMessage.append(""String_Node_Str"").append(ACTIVE_THREAD_COUNTS).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  emptyJsonMessage.append(""String_Node_Str"").append(TIME_STAMP).append(""String_Node_Str"").append(""String_Node_Str"").append(timeStamp);
  emptyJsonMessage.append(""String_Node_Str"");
  return emptyJsonMessage.toString();
}"
53636,"@Override public void flush() throws Exception {
  if ((flushCount.getAndIncrement() % flushLogRecordRate) == 0) {
    logger.info(""String_Node_Str"",applicationName);
  }
  if (isStopped) {
    return;
  }
  AgentActiveThreadCountList response=new AgentActiveThreadCountList();
synchronized (aggregatorLock) {
    for (    ActiveThreadCountWorker activeThreadCountWorker : activeThreadCountWorkerRepository.values()) {
      String agentId=activeThreadCountWorker.getAgentId();
      AgentActiveThreadCount agentActiveThreadCount=activeThreadCountMap.get(agentId);
      if (agentActiveThreadCount != null) {
        response.add(agentActiveThreadCount);
      }
 else {
        response.add(activeThreadCountWorker.getDefaultFailedResponse());
      }
    }
    activeThreadCountMap=new HashMap<>(activeThreadCountWorkerRepository.size());
  }
  flush0(response);
}","@Override public void flush(Executor executor) throws Exception {
  if ((flushCount.getAndIncrement() % flushLogRecordRate) == 0) {
    logger.info(""String_Node_Str"",applicationName);
  }
  if (isStopped) {
    return;
  }
  AgentActiveThreadCountList response=new AgentActiveThreadCountList();
synchronized (aggregatorLock) {
    for (    ActiveThreadCountWorker activeThreadCountWorker : activeThreadCountWorkerRepository.values()) {
      String agentId=activeThreadCountWorker.getAgentId();
      AgentActiveThreadCount agentActiveThreadCount=activeThreadCountMap.get(agentId);
      if (agentActiveThreadCount != null) {
        response.add(agentActiveThreadCount);
      }
 else {
        response.add(activeThreadCountWorker.getDefaultFailedResponse());
      }
    }
    activeThreadCountMap=new HashMap<>(activeThreadCountWorkerRepository.size());
  }
  TextMessage webSocketTextMessage=createWebSocketTextMessage(response);
  if (webSocketTextMessage != null) {
    if (executor == null) {
      flush0(webSocketTextMessage);
    }
 else {
      flushAsync0(webSocketTextMessage,executor);
    }
  }
}"
53637,"private void flush0(AgentActiveThreadCountList activeThreadCountList){
  Map resultMap=createResultMap(activeThreadCountList,System.currentTimeMillis());
  try {
    TextMessage responseTextMessage=new TextMessage(messageConverter.getResponseTextMessage(ActiveThreadCountHandler.API_ACTIVE_THREAD_COUNT,resultMap));
    for (    WebSocketSession webSocketSession : webSocketSessions) {
      try {
        logger.debug(""String_Node_Str"",webSocketSession,responseTextMessage);
        webSocketSession.sendMessage(responseTextMessage);
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"",webSocketSession,applicationName,e.getMessage(),e);
      }
    }
  }
 catch (  JsonProcessingException e) {
    logger.warn(""String_Node_Str"",applicationName,resultMap,e.getMessage(),e);
  }
}","private void flush0(TextMessage webSocketMessage){
  for (  WebSocketSession webSocketSession : webSocketSessions) {
    try {
      logger.debug(""String_Node_Str"",webSocketSession,webSocketMessage);
      webSocketSession.sendMessage(webSocketMessage);
    }
 catch (    Exception e) {
      logger.warn(""String_Node_Str"",webSocketSession,webSocketMessage,e.getMessage(),e);
    }
  }
}"
53638,void flush() throws Exception ;,void flush(Executor executor) throws Exception ;
53639,"public LinkDataDuplexMap select(Application sourceApplication,Range range,SearchOption searchOption){
  if (searchOption == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  SearchDepth callerDepth=new SearchDepth(searchOption.getCallerSearchDepth());
  SearchDepth calleeDepth=new SearchDepth(searchOption.getCalleeSearchDepth());
  logger.debug(""String_Node_Str"",sourceApplication);
  addNextNode(sourceApplication);
  LinkDataDuplexMap linkDataDuplexMap=new LinkDataDuplexMap();
  while (!this.nextQueue.isEmpty()) {
    final List<Application> currentNode=this.nextQueue.copyAndClear();
    logger.debug(""String_Node_Str"",currentNode.size(),callerDepth.getDepth(),calleeDepth.getDepth(),currentNode);
    LinkDataDuplexMap levelData=selectLink(currentNode,range,callerDepth,calleeDepth);
    linkDataDuplexMap.addLinkDataDuplexMap(levelData);
    callerDepth=callerDepth.nextDepth();
    calleeDepth=calleeDepth.nextDepth();
  }
  if (!emulationLinkMarker.isEmpty()) {
    logger.debug(""String_Node_Str"",emulationLinkMarker.size());
    checkUnsearchEmulationCalleeNode(linkDataDuplexMap,range);
    fillEmulationLink(linkDataDuplexMap);
  }
  return linkDataDuplexMap;
}","public LinkDataDuplexMap select(Application sourceApplication,Range range,SearchOption searchOption){
  if (searchOption == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  SearchDepth callerDepth=new SearchDepth(searchOption.getCallerSearchDepth());
  SearchDepth calleeDepth=new SearchDepth(searchOption.getCalleeSearchDepth());
  logger.debug(""String_Node_Str"",sourceApplication);
  addNextNode(sourceApplication);
  LinkDataDuplexMap linkDataDuplexMap=new LinkDataDuplexMap();
  while (!this.nextQueue.isEmpty()) {
    final List<Application> currentNode=this.nextQueue.copyAndClear();
    logger.debug(""String_Node_Str"",currentNode.size(),callerDepth.getDepth(),calleeDepth.getDepth(),currentNode);
    LinkDataDuplexMap levelData=selectLink(currentNode,range,callerDepth,calleeDepth);
    linkDataDuplexMap.addLinkDataDuplexMap(levelData);
    callerDepth=callerDepth.nextDepth();
    calleeDepth=calleeDepth.nextDepth();
  }
  if (!emulationLinkMarker.isEmpty()) {
    logger.debug(""String_Node_Str"",emulationLinkMarker.size());
    checkUnsearchEmulationCalleeNode(linkDataDuplexMap,range);
    fillEmulationLink(linkDataDuplexMap,range);
  }
  return linkDataDuplexMap;
}"
53640,"private void fillEmulationLink(LinkDataDuplexMap linkDataDuplexMap){
  logger.debug(""String_Node_Str"",this.emulationLinkMarker);
  List<LinkData> emulationLinkDataList=findEmulationLinkData(linkDataDuplexMap);
  for (  LinkData emulationLinkData : emulationLinkDataList) {
    LinkCallDataMap beforeImage=emulationLinkData.getLinkCallDataMap();
    logger.debug(""String_Node_Str"",beforeImage);
    emulationLinkData.resetLinkData();
    LinkKey findLinkKey=new LinkKey(emulationLinkData.getFromApplication(),emulationLinkData.getToApplication());
    LinkData targetLinkData=linkDataDuplexMap.getTargetLinkData(findLinkKey);
    if (targetLinkData == null) {
      logger.error(""String_Node_Str"",findLinkKey);
      continue;
    }
    LinkCallDataMap targetList=targetLinkData.getLinkCallDataMap();
    Collection<LinkCallData> beforeLinkDataList=beforeImage.getLinkDataList();
    LinkCallData beforeLinkCallData=beforeLinkDataList.iterator().next();
    for (    LinkCallData agentHistogram : targetList.getLinkDataList()) {
      Collection<TimeHistogram> timeHistogramList=agentHistogram.getTimeHistogram();
      LinkCallDataMap linkCallDataMap=emulationLinkData.getLinkCallDataMap();
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"",beforeLinkCallData);
        logger.debug(""String_Node_Str"",agentHistogram);
        logger.debug(""String_Node_Str"",agentHistogram.getTarget(),agentHistogram.getTargetServiceType(),beforeLinkCallData.getTarget(),beforeLinkCallData.getTargetServiceType().getCode());
      }
      linkCallDataMap.addCallData(agentHistogram.getTarget(),agentHistogram.getTargetServiceType(),beforeLinkCallData.getTarget(),beforeLinkCallData.getTargetServiceType(),timeHistogramList);
    }
  }
}","private void fillEmulationLink(LinkDataDuplexMap linkDataDuplexMap,Range range){
  logger.debug(""String_Node_Str"",this.emulationLinkMarker);
  List<LinkData> emulationLinkDataList=findEmulationLinkData(linkDataDuplexMap);
  for (  LinkData emulationLinkData : emulationLinkDataList) {
    LinkCallDataMap beforeImage=emulationLinkData.getLinkCallDataMap();
    logger.debug(""String_Node_Str"",beforeImage);
    emulationLinkData.resetLinkData();
    LinkKey findLinkKey=new LinkKey(emulationLinkData.getFromApplication(),emulationLinkData.getToApplication());
    LinkData targetLinkData=linkDataDuplexMap.getTargetLinkData(findLinkKey);
    if (targetLinkData == null) {
      final Application targetApplication=emulationLinkData.getToApplication();
      final LinkDataMap callee=mapStatisticsCalleeDao.selectCallee(targetApplication,range);
      targetLinkData=callee.getLinkData(findLinkKey);
      if (targetLinkData == null) {
        logger.error(""String_Node_Str"",findLinkKey);
        continue;
      }
    }
    LinkCallDataMap targetList=targetLinkData.getLinkCallDataMap();
    Collection<LinkCallData> beforeLinkDataList=beforeImage.getLinkDataList();
    LinkCallData beforeLinkCallData=beforeLinkDataList.iterator().next();
    for (    LinkCallData agentHistogram : targetList.getLinkDataList()) {
      Collection<TimeHistogram> timeHistogramList=agentHistogram.getTimeHistogram();
      LinkCallDataMap linkCallDataMap=emulationLinkData.getLinkCallDataMap();
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"",beforeLinkCallData);
        logger.debug(""String_Node_Str"",agentHistogram);
        logger.debug(""String_Node_Str"",agentHistogram.getTarget(),agentHistogram.getTargetServiceType(),beforeLinkCallData.getTarget(),beforeLinkCallData.getTargetServiceType().getCode());
      }
      linkCallDataMap.addCallData(agentHistogram.getTarget(),agentHistogram.getTargetServiceType(),beforeLinkCallData.getTarget(),beforeLinkCallData.getTargetServiceType(),timeHistogramList);
    }
  }
}"
53641,"@Override public void handleStreamData(ClientStreamChannelContext streamChannelContext,StreamResponsePacket packet){
  LOGGER.info(""String_Node_Str"",streamChannelContext,packet);
}","@Override public void handleStreamData(ClientStreamChannelContext streamChannelContext,StreamResponsePacket packet){
  LOGGER.debug(""String_Node_Str"",streamChannelContext,packet);
}"
53642,"private void sendPingMessage(WebSocketSession session,TextMessage pingMessage){
  try {
    session.sendMessage(pingMessage);
  }
 catch (  IOException e) {
    logger.warn(e.getMessage(),e);
  }
}","private void sendPingMessage(WebSocketSession session,TextMessage pingMessage){
  try {
    session.sendMessage(pingMessage);
  }
 catch (  Exception e) {
    logger.warn(e.getMessage(),e);
    closeSession(session,CloseStatus.SERVER_ERROR);
  }
}"
53643,"private void closeSession(WebSocketSession session,CloseStatus status){
  try {
    session.close(status);
  }
 catch (  IOException e) {
    logger.warn(e.getMessage(),e);
  }
}","private void closeSession(WebSocketSession session,CloseStatus status){
  try {
    session.close(status);
  }
 catch (  Exception e) {
    logger.warn(e.getMessage(),e);
  }
}"
53644,"@Override public void flush() throws Exception {
  logger.info(""String_Node_Str"",applicationName);
  if (isStopped) {
    return;
  }
  AgentActiveThreadCountList response=new AgentActiveThreadCountList();
synchronized (aggregatorLock) {
    for (    ActiveThreadCountWorker activeThreadCountWorker : activeThreadCountWorkerRepository.values()) {
      String agentId=activeThreadCountWorker.getAgentId();
      AgentActiveThreadCount agentActiveThreadCount=activeThreadCountMap.get(agentId);
      if (agentActiveThreadCount != null) {
        response.add(agentActiveThreadCount);
      }
 else {
        response.add(activeThreadCountWorker.getDefaultFailedResponse());
      }
    }
    activeThreadCountMap=new HashMap<>(activeThreadCountWorkerRepository.size());
  }
  flush0(response);
}","@Override public void flush() throws Exception {
  if ((flushCount.getAndIncrement() % flushLogRecordRate) == 0) {
    logger.info(""String_Node_Str"",applicationName);
  }
  if (isStopped) {
    return;
  }
  AgentActiveThreadCountList response=new AgentActiveThreadCountList();
synchronized (aggregatorLock) {
    for (    ActiveThreadCountWorker activeThreadCountWorker : activeThreadCountWorkerRepository.values()) {
      String agentId=activeThreadCountWorker.getAgentId();
      AgentActiveThreadCount agentActiveThreadCount=activeThreadCountMap.get(agentId);
      if (agentActiveThreadCount != null) {
        response.add(agentActiveThreadCount);
      }
 else {
        response.add(activeThreadCountWorker.getDefaultFailedResponse());
      }
    }
    activeThreadCountMap=new HashMap<>(activeThreadCountWorkerRepository.size());
  }
  flush0(response);
}"
53645,"private void flush0(AgentActiveThreadCountList activeThreadCountList){
  Map resultMap=createResultMap(activeThreadCountList,System.currentTimeMillis());
  try {
    TextMessage responseTextMessage=new TextMessage(messageConverter.getResponseTextMessage(ActiveThreadCountHandler.API_ACTIVE_THREAD_COUNT,resultMap));
    for (    WebSocketSession webSocketSession : webSocketSessions) {
      try {
        logger.debug(""String_Node_Str"",webSocketSession,responseTextMessage);
        webSocketSession.sendMessage(responseTextMessage);
      }
 catch (      IOException e) {
        logger.warn(e.getMessage(),e);
      }
    }
  }
 catch (  JsonProcessingException e) {
    logger.warn(""String_Node_Str"",resultMap,e.getMessage(),e);
  }
}","private void flush0(AgentActiveThreadCountList activeThreadCountList){
  Map resultMap=createResultMap(activeThreadCountList,System.currentTimeMillis());
  try {
    TextMessage responseTextMessage=new TextMessage(messageConverter.getResponseTextMessage(ActiveThreadCountHandler.API_ACTIVE_THREAD_COUNT,resultMap));
    for (    WebSocketSession webSocketSession : webSocketSessions) {
      try {
        logger.debug(""String_Node_Str"",webSocketSession,responseTextMessage);
        webSocketSession.sendMessage(responseTextMessage);
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"",webSocketSession,applicationName,e.getMessage(),e);
      }
    }
  }
 catch (  JsonProcessingException e) {
    logger.warn(""String_Node_Str"",applicationName,resultMap,e.getMessage(),e);
  }
}"
53646,"public DefaultAgentOption(final String agentArgs,final Instrumentation instrumentation,final ProfilerConfig profilerConfig,final URL[] pluginJars,final String bootStrapJarPath,final ServiceTypeRegistryService serviceTypeRegistryService,final AnnotationKeyRegistryService annotationKeyRegistryService){
  if (instrumentation == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (profilerConfig == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (pluginJars == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (annotationKeyRegistryService == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (serviceTypeRegistryService == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.agentArgs=agentArgs;
  this.instrumentation=instrumentation;
  this.profilerConfig=profilerConfig;
  this.pluginJars=pluginJars;
  this.bootStrapJarPath=bootStrapJarPath;
  this.serviceTypeRegistryService=serviceTypeRegistryService;
  this.annotationKeyRegistryService=annotationKeyRegistryService;
}","public DefaultAgentOption(final String agentArgs,final Instrumentation instrumentation,final ProfilerConfig profilerConfig,final URL[] pluginJars,final String bootStrapJarCorePath,final ServiceTypeRegistryService serviceTypeRegistryService,final AnnotationKeyRegistryService annotationKeyRegistryService){
  if (instrumentation == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (profilerConfig == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (pluginJars == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (annotationKeyRegistryService == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (serviceTypeRegistryService == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.agentArgs=agentArgs;
  this.instrumentation=instrumentation;
  this.profilerConfig=profilerConfig;
  this.pluginJars=pluginJars;
  this.bootStrapJarCorePath=bootStrapJarCorePath;
  this.serviceTypeRegistryService=serviceTypeRegistryService;
  this.annotationKeyRegistryService=annotationKeyRegistryService;
}"
53647,"public void start(){
  final ClassPathResolver classPathResolver=new ClassPathResolver();
  boolean agentJarNotFound=classPathResolver.findAgentJar();
  if (!agentJarNotFound) {
    logger.severe(""String_Node_Str"");
    logPinpointAgentLoadFail();
    return;
  }
  final String bootStrapCoreJar=classPathResolver.getBootStrapCoreJar();
  if (bootStrapCoreJar == null) {
    logger.severe(""String_Node_Str"");
    logPinpointAgentLoadFail();
    return;
  }
  if (!isValidId(""String_Node_Str"",PinpointConstants.AGENT_NAME_MAX_LEN)) {
    logPinpointAgentLoadFail();
    return;
  }
  if (!isValidId(""String_Node_Str"",PinpointConstants.APPLICATION_NAME_MAX_LEN)) {
    logPinpointAgentLoadFail();
    return;
  }
  URL[] pluginJars=classPathResolver.resolvePlugins();
  TraceMetadataLoaderService typeLoaderService=new DefaultTraceMetadataLoaderService(pluginJars);
  ServiceTypeRegistryService serviceTypeRegistryService=new DefaultServiceTypeRegistryService(typeLoaderService);
  AnnotationKeyRegistryService annotationKeyRegistryService=new DefaultAnnotationKeyRegistryService(typeLoaderService);
  String configPath=getConfigPath(classPathResolver);
  if (configPath == null) {
    logPinpointAgentLoadFail();
    return;
  }
  saveLogFilePath(classPathResolver);
  savePinpointVersion();
  try {
    ProfilerConfig profilerConfig=DefaultProfilerConfig.load(configPath);
    List<URL> libUrlList=resolveLib(classPathResolver);
    AgentClassLoader agentClassLoader=new AgentClassLoader(libUrlList.toArray(new URL[libUrlList.size()]));
    String bootClass=argMap.containsKey(""String_Node_Str"") ? argMap.get(""String_Node_Str"") : BOOT_CLASS;
    agentClassLoader.setBootClass(bootClass);
    logger.info(""String_Node_Str"" + bootClass + ""String_Node_Str"");
    AgentOption option=createAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,null,serviceTypeRegistryService,annotationKeyRegistryService);
    Agent pinpointAgent=agentClassLoader.boot(option);
    pinpointAgent.start();
    registerShutdownHook(pinpointAgent);
    logger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,ProductInfo.NAME + ""String_Node_Str"" + e.getMessage(),e);
    logPinpointAgentLoadFail();
  }
}","public void start(){
  final ClassPathResolver classPathResolver=new ClassPathResolver();
  boolean agentJarNotFound=classPathResolver.findAgentJar();
  if (!agentJarNotFound) {
    logger.severe(""String_Node_Str"");
    logPinpointAgentLoadFail();
    return;
  }
  final String bootStrapCoreJar=classPathResolver.getBootStrapCoreJar();
  if (bootStrapCoreJar == null) {
    logger.severe(""String_Node_Str"");
    logPinpointAgentLoadFail();
    return;
  }
  this.bootStrapCore=bootStrapCoreJar;
  if (!isValidId(""String_Node_Str"",PinpointConstants.AGENT_NAME_MAX_LEN)) {
    logPinpointAgentLoadFail();
    return;
  }
  if (!isValidId(""String_Node_Str"",PinpointConstants.APPLICATION_NAME_MAX_LEN)) {
    logPinpointAgentLoadFail();
    return;
  }
  URL[] pluginJars=classPathResolver.resolvePlugins();
  TraceMetadataLoaderService typeLoaderService=new DefaultTraceMetadataLoaderService(pluginJars);
  ServiceTypeRegistryService serviceTypeRegistryService=new DefaultServiceTypeRegistryService(typeLoaderService);
  AnnotationKeyRegistryService annotationKeyRegistryService=new DefaultAnnotationKeyRegistryService(typeLoaderService);
  String configPath=getConfigPath(classPathResolver);
  if (configPath == null) {
    logPinpointAgentLoadFail();
    return;
  }
  saveLogFilePath(classPathResolver);
  savePinpointVersion();
  try {
    ProfilerConfig profilerConfig=DefaultProfilerConfig.load(configPath);
    List<URL> libUrlList=resolveLib(classPathResolver);
    AgentClassLoader agentClassLoader=new AgentClassLoader(libUrlList.toArray(new URL[libUrlList.size()]));
    String bootClass=argMap.containsKey(""String_Node_Str"") ? argMap.get(""String_Node_Str"") : BOOT_CLASS;
    agentClassLoader.setBootClass(bootClass);
    logger.info(""String_Node_Str"" + bootClass + ""String_Node_Str"");
    AgentOption option=createAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapCore,serviceTypeRegistryService,annotationKeyRegistryService,bootStrapCoreJar);
    Agent pinpointAgent=agentClassLoader.boot(option);
    pinpointAgent.start();
    registerShutdownHook(pinpointAgent);
    logger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,ProductInfo.NAME + ""String_Node_Str"" + e.getMessage(),e);
    logPinpointAgentLoadFail();
  }
}"
53648,"private AgentOption createAgentOption(String agentArgs,Instrumentation instrumentation,ProfilerConfig profilerConfig,URL[] pluginJars,String bootStrapJarPath,ServiceTypeRegistryService serviceTypeRegistryService,AnnotationKeyRegistryService annotationKeyRegistryService){
  return new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarPath,serviceTypeRegistryService,annotationKeyRegistryService);
}","private AgentOption createAgentOption(String agentArgs,Instrumentation instrumentation,ProfilerConfig profilerConfig,URL[] pluginJars,String bootStrapJarPath,ServiceTypeRegistryService serviceTypeRegistryService,AnnotationKeyRegistryService annotationKeyRegistryService,String bootStrapCoreJar){
  return new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarPath,serviceTypeRegistryService,annotationKeyRegistryService);
}"
53649,"protected List<DefaultProfilerPluginContext> loadPlugins(AgentOption agentOption){
  return new ProfilerPluginLoader(this).load(agentOption.getPluginJars());
}","protected List<DefaultProfilerPluginContext> loadPlugins(AgentOption agentOption){
  final ProfilerPluginLoader loader=new ProfilerPluginLoader(this);
  return loader.load(agentOption.getPluginJars());
}"
53650,"public DefaultAgent(AgentOption agentOption,final InterceptorRegistryBinder interceptorRegistryBinder){
  if (agentOption == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (agentOption.getInstrumentation() == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (agentOption.getProfilerConfig() == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (agentOption.getServiceTypeRegistryService() == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (interceptorRegistryBinder == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.binder=new Slf4jLoggerBinder();
  bindPLoggerFactory(this.binder);
  this.interceptorRegistryBinder=interceptorRegistryBinder;
  interceptorRegistryBinder.bind();
  this.serviceTypeRegistryService=agentOption.getServiceTypeRegistryService();
  dumpSystemProperties();
  dumpConfig(agentOption.getProfilerConfig());
  changeStatus(AgentStatus.INITIALIZING);
  this.profilerConfig=agentOption.getProfilerConfig();
  this.instrumentation=agentOption.getInstrumentation();
  this.classPool=new JavassistClassPool(interceptorRegistryBinder,agentOption.getBootStrapJarPath());
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"",this.getClass().getClassLoader());
  }
  pluginContexts=loadPlugins(agentOption);
  this.classFileTransformer=new ClassFileTransformerDispatcher(this,pluginContexts);
  this.dynamicTransformService=new DynamicTransformService(instrumentation,classFileTransformer);
  instrumentation.addTransformer(this.classFileTransformer,true);
  String applicationServerTypeString=profilerConfig.getApplicationServerType();
  ServiceType applicationServerType=this.serviceTypeRegistryService.findServiceTypeByName(applicationServerTypeString);
  final ApplicationServerTypeResolver typeResolver=new ApplicationServerTypeResolver(pluginContexts,applicationServerType,profilerConfig.getApplicationTypeDetectOrder());
  final AgentInformationFactory agentInformationFactory=new AgentInformationFactory();
  this.agentInformation=agentInformationFactory.createAgentInformation(typeResolver.resolve());
  logger.info(""String_Node_Str"",agentInformation);
  CommandDispatcher commandDispatcher=new CommandDispatcher();
  this.tcpDataSender=createTcpDataSender(commandDispatcher);
  this.serverMetaDataHolder=createServerMetaDataHolder();
  this.spanDataSender=createUdpSpanDataSender(this.profilerConfig.getCollectorSpanServerPort(),""String_Node_Str"",this.profilerConfig.getSpanDataSenderWriteQueueSize(),this.profilerConfig.getSpanDataSenderSocketTimeout(),this.profilerConfig.getSpanDataSenderSocketSendBufferSize());
  this.statDataSender=createUdpStatDataSender(this.profilerConfig.getCollectorStatServerPort(),""String_Node_Str"",this.profilerConfig.getStatDataSenderWriteQueueSize(),this.profilerConfig.getStatDataSenderSocketTimeout(),this.profilerConfig.getStatDataSenderSocketSendBufferSize());
  this.traceContext=createTraceContext();
  addCommandService(commandDispatcher,traceContext);
  this.agentInfoSender=new AgentInfoSender.Builder(tcpDataSender,this.agentInformation).sendInterval(profilerConfig.getAgentInfoSendRetryInterval()).build();
  this.serverMetaDataHolder.addListener(this.agentInfoSender);
  AgentStatCollectorFactory agentStatCollectorFactory=new AgentStatCollectorFactory(this.getTransactionCounter(this.traceContext),this.profilerConfig);
  this.agentStatMonitor=new AgentStatMonitor(this.statDataSender,this.agentInformation.getAgentId(),this.agentInformation.getStartTime(),agentStatCollectorFactory);
  InterceptorInvokerHelper.setPropagateException(profilerConfig.isPropagateInterceptorException());
}","public DefaultAgent(AgentOption agentOption,final InterceptorRegistryBinder interceptorRegistryBinder){
  if (agentOption == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (agentOption.getInstrumentation() == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (agentOption.getProfilerConfig() == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (agentOption.getServiceTypeRegistryService() == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (interceptorRegistryBinder == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  logger.info(""String_Node_Str"",agentOption);
  this.binder=new Slf4jLoggerBinder();
  bindPLoggerFactory(this.binder);
  this.interceptorRegistryBinder=interceptorRegistryBinder;
  interceptorRegistryBinder.bind();
  this.serviceTypeRegistryService=agentOption.getServiceTypeRegistryService();
  dumpSystemProperties();
  dumpConfig(agentOption.getProfilerConfig());
  changeStatus(AgentStatus.INITIALIZING);
  this.profilerConfig=agentOption.getProfilerConfig();
  this.instrumentation=agentOption.getInstrumentation();
  this.agentOption=agentOption;
  this.classPool=new JavassistClassPool(interceptorRegistryBinder,agentOption.getBootStrapCoreJarPath());
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"",this.getClass().getClassLoader());
  }
  pluginContexts=loadPlugins(agentOption);
  this.classFileTransformer=new ClassFileTransformerDispatcher(this,pluginContexts);
  this.dynamicTransformService=new DynamicTransformService(instrumentation,classFileTransformer);
  instrumentation.addTransformer(this.classFileTransformer,true);
  String applicationServerTypeString=profilerConfig.getApplicationServerType();
  ServiceType applicationServerType=this.serviceTypeRegistryService.findServiceTypeByName(applicationServerTypeString);
  final ApplicationServerTypeResolver typeResolver=new ApplicationServerTypeResolver(pluginContexts,applicationServerType,profilerConfig.getApplicationTypeDetectOrder());
  final AgentInformationFactory agentInformationFactory=new AgentInformationFactory();
  this.agentInformation=agentInformationFactory.createAgentInformation(typeResolver.resolve());
  logger.info(""String_Node_Str"",agentInformation);
  CommandDispatcher commandDispatcher=new CommandDispatcher();
  this.tcpDataSender=createTcpDataSender(commandDispatcher);
  this.serverMetaDataHolder=createServerMetaDataHolder();
  this.spanDataSender=createUdpSpanDataSender(this.profilerConfig.getCollectorSpanServerPort(),""String_Node_Str"",this.profilerConfig.getSpanDataSenderWriteQueueSize(),this.profilerConfig.getSpanDataSenderSocketTimeout(),this.profilerConfig.getSpanDataSenderSocketSendBufferSize());
  this.statDataSender=createUdpStatDataSender(this.profilerConfig.getCollectorStatServerPort(),""String_Node_Str"",this.profilerConfig.getStatDataSenderWriteQueueSize(),this.profilerConfig.getStatDataSenderSocketTimeout(),this.profilerConfig.getStatDataSenderSocketSendBufferSize());
  this.traceContext=createTraceContext();
  addCommandService(commandDispatcher,traceContext);
  this.agentInfoSender=new AgentInfoSender.Builder(tcpDataSender,this.agentInformation).sendInterval(profilerConfig.getAgentInfoSendRetryInterval()).build();
  this.serverMetaDataHolder.addListener(this.agentInfoSender);
  AgentStatCollectorFactory agentStatCollectorFactory=new AgentStatCollectorFactory(this.getTransactionCounter(this.traceContext),this.profilerConfig);
  this.agentStatMonitor=new AgentStatMonitor(this.statDataSender,this.agentInformation.getAgentId(),this.agentInformation.getStartTime(),agentStatCollectorFactory);
  InterceptorInvokerHelper.setPropagateException(profilerConfig.isPropagateInterceptorException());
}"
53651,"@Override public ClassFileTransformer getTransformer(ClassLoader classLoader,String targetClassName){
  if (transformerMap.isEmpty()) {
    return null;
  }
  final TransformerKey key=new TransformerKey(classLoader,targetClassName);
  final ClassFileTransformer transformer=transformerMap.remove(key);
  if (logger.isDebugEnabled()) {
    logger.info(""String_Node_Str"",classLoader,targetClassName,transformerMap.size());
  }
  return transformer;
}","@Override public ClassFileTransformer getTransformer(ClassLoader classLoader,String targetClassName){
  if (transformerMap.isEmpty()) {
    return null;
  }
  final TransformerKey key=new TransformerKey(classLoader,targetClassName);
  final ClassFileTransformer transformer=transformerMap.remove(key);
  if (transformer != null) {
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"",classLoader,targetClassName,transformerMap.size());
    }
  }
  return transformer;
}"
53652,"@Override @SuppressWarnings(""String_Node_Str"") public <T>Class<? extends T> injectClass(ClassLoader classLoader,String className){
  try {
    if (classLoader == null) {
      return (Class<T>)injectToBootstrapClassLoader(className);
    }
 else     if (classLoader instanceof URLClassLoader) {
      return (Class<T>)injectToURLClassLoader((URLClassLoader)classLoader,className);
    }
 else {
      return (Class<T>)injectToPlainClassLoader(classLoader,className);
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",className,classLoader,e);
    throw new PinpointException(""String_Node_Str"" + className + ""String_Node_Str""+ classLoader,e);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>Class<? extends T> injectClass(ClassLoader classLoader,String className){
  try {
    if (classLoader == null) {
      return (Class<T>)injectToBootstrapClassLoader(className);
    }
 else     if (classLoader instanceof URLClassLoader) {
      final URLClassLoader urlClassLoader=(URLClassLoader)classLoader;
      return (Class<T>)injectToURLClassLoader(urlClassLoader,className);
    }
 else {
      return (Class<T>)injectToPlainClassLoader(classLoader,className);
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",className,classLoader,e);
    throw new PinpointException(""String_Node_Str"" + className + ""String_Node_Str""+ classLoader,e);
  }
}"
53653,"private Class<?> injectToPlainClassLoader(ClassPool pool,ClassLoader classLoader,String className) throws NotFoundException, IOException, CannotCompileException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  Class<?> c=null;
  try {
    c=classLoader.loadClass(className);
  }
 catch (  ClassNotFoundException ex) {
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"",ex.getMessage(),ex);
    }
  }
  if (c != null) {
    return c;
  }
  final CtClass ct=pool.get(className);
  if (ct == null) {
    throw new NotFoundException(className);
  }
  final CtClass superClass=ct.getSuperclass();
  if (superClass != null) {
    injectToPlainClassLoader(pool,classLoader,superClass.getName());
  }
  final CtClass[] interfaces=ct.getInterfaces();
  for (  CtClass ctInterface : interfaces) {
    injectToPlainClassLoader(pool,classLoader,ctInterface.getName());
  }
  final Collection<String> refs=ct.getRefClasses();
  for (  String ref : refs) {
    try {
      injectToPlainClassLoader(pool,classLoader,ref);
    }
 catch (    NotFoundException e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
  final byte[] bytes=ct.toBytecode();
  return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);
}","private Class<?> injectToPlainClassLoader(ClassPool pool,ClassLoader classLoader,String className,ClassLoadingChecker classLoadingChecker) throws NotFoundException, IOException, CannotCompileException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  if (pluginConfig.getProfilerPackageFilter().accept(className)) {
    if (isDebug) {
      logger.debug(""String_Node_Str"",className);
    }
    return null;
  }
  if (!pluginConfig.getPluginPackageFilter().accept(className)) {
    if (isDebug) {
      logger.debug(""String_Node_Str"",className);
    }
    return null;
  }
  if (!classLoadingChecker.isFirstLoad(className)) {
    if (isDebug) {
      logger.debug(""String_Node_Str"",className);
    }
    return null;
  }
  Class<?> c=null;
  try {
    c=classLoader.loadClass(className);
    if (isDebug) {
      logger.debug(""String_Node_Str"",className);
    }
  }
 catch (  ClassNotFoundException ex) {
    if (isDebug) {
      logger.debug(""String_Node_Str"",ex.getMessage());
    }
  }
  if (c != null) {
    return c;
  }
  final CtClass ct=pool.getOrNull(className);
  if (ct == null) {
    throw new NotFoundException(className);
  }
  final CtClass superClass=ct.getSuperclass();
  if (superClass != null) {
    if (""String_Node_Str"".equals(superClass.getName())) {
      return null;
    }
    injectToPlainClassLoader(pool,classLoader,superClass.getName(),classLoadingChecker);
  }
  final CtClass[] interfaces=ct.getInterfaces();
  for (  CtClass ctInterface : interfaces) {
    injectToPlainClassLoader(pool,classLoader,ctInterface.getName(),classLoadingChecker);
  }
  @SuppressWarnings(""String_Node_Str"") final Collection<String> referenceClassList=ct.getRefClasses();
  if (isDebug) {
    logger.debug(""String_Node_Str"",className,referenceClassList);
  }
  for (  String referenceClass : referenceClassList) {
    try {
      injectToPlainClassLoader(pool,classLoader,referenceClass,classLoadingChecker);
    }
 catch (    NotFoundException e) {
      logger.warn(""String_Node_Str"",e.getMessage(),e);
    }
  }
  if (logger.isInfoEnabled()) {
    logger.debug(""String_Node_Str"",className,classLoader);
  }
  final byte[] bytes=ct.toBytecode();
  return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);
}"
53654,"private Class<?> injectToBootstrapClassLoader(String className) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
synchronized (lock) {
    if (this.injectedToRoot == false) {
      this.injectedToRoot=true;
      instrumentation.appendToBootstrapClassLoaderSearch(pluginJar);
      classPool.appendToBootstrapClassPath(pluginJar.getName());
    }
  }
  return Class.forName(className,false,null);
}","private Class<?> injectToBootstrapClassLoader(String className) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
synchronized (lock) {
    if (this.injectedToRoot == false) {
      this.injectedToRoot=true;
      pluginConfig.getInstrumentation().appendToBootstrapClassLoaderSearch(pluginConfig.getPluginJarFile());
      pluginConfig.getClassPool().appendToBootstrapClassPath(pluginConfig.getPluginJarFile().getName());
    }
  }
  return Class.forName(className,false,null);
}"
53655,"private Class<?> injectToURLClassLoader(URLClassLoader classLoader,String className) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  final URL[] urls=classLoader.getURLs();
  if (urls != null) {
    boolean hasPluginJar=false;
    for (    URL url : urls) {
      final String externalForm=url.toExternalForm();
      if (pluginJarURLExternalForm.equals(externalForm)) {
        hasPluginJar=true;
        break;
      }
    }
    if (!hasPluginJar) {
      ADD_URL.invoke(classLoader,pluginJarURL);
    }
  }
  return classLoader.loadClass(className);
}","private Class<?> injectToURLClassLoader(URLClassLoader classLoader,String className) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  final URL[] urls=classLoader.getURLs();
  if (urls != null) {
    boolean hasPluginJar=false;
    for (    URL url : urls) {
      final String externalForm=url.toExternalForm();
      if (pluginConfig.getPluginJarURLExternalForm().equals(externalForm)) {
        hasPluginJar=true;
        break;
      }
    }
    if (!hasPluginJar) {
      ADD_URL.invoke(classLoader,pluginConfig.getPluginJar());
    }
  }
  return classLoader.loadClass(className);
}"
53656,"private JarProfilerPluginClassInjector(Instrumentation instrumentation,InstrumentClassPool classPool,URL pluginJarURL,JarFile pluginJar){
  this.instrumentation=instrumentation;
  this.classPool=classPool;
  this.pluginJarURL=pluginJarURL;
  this.pluginJarURLExternalForm=pluginJarURL.toExternalForm();
  this.pluginJar=pluginJar;
}","public JarProfilerPluginClassInjector(PluginConfig pluginConfig){
  if (pluginConfig == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.pluginConfig=pluginConfig;
}"
53657,"@Override public Set<AgentInfo> getAgentsByApplicationName(String applicationName,long timestamp,long timeDiff){
  if (applicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (timestamp < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (timeDiff > timestamp) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final long eventTimestampFloor=timestamp - timeDiff;
  List<String> agentIds=this.applicationIndexDao.selectAgentIds(applicationName);
  List<AgentInfo> unfilteredAgentInfos=this.agentInfoDao.getAgentInfos(agentIds,timestamp);
  if (unfilteredAgentInfos == null || unfilteredAgentInfos.isEmpty()) {
    return Collections.emptySet();
  }
  this.agentLifeCycleDao.populateAgentStatuses(unfilteredAgentInfos,timestamp);
  Set<AgentInfo> filteredAgentInfos=new HashSet<>();
  for (  AgentInfo agentInfo : unfilteredAgentInfos) {
    AgentStatus agentStatus=agentInfo.getStatus();
    if (AgentLifeCycleState.UNKNOWN == agentStatus.getState() || eventTimestampFloor <= agentStatus.getEventTimestamp()) {
      filteredAgentInfos.add(agentInfo);
    }
  }
  return filteredAgentInfos;
}","@Override public Set<AgentInfo> getAgentsByApplicationName(String applicationName,long timestamp,long timeDiff){
  if (applicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (timestamp < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (timeDiff > timestamp) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final long eventTimestampFloor=timestamp - timeDiff;
  List<String> agentIds=this.applicationIndexDao.selectAgentIds(applicationName);
  List<AgentInfo> unfilteredAgentInfos=this.agentInfoDao.getAgentInfos(agentIds,timestamp);
  if (unfilteredAgentInfos == null || unfilteredAgentInfos.isEmpty()) {
    return Collections.emptySet();
  }
  CollectionUtils.filter(unfilteredAgentInfos,PredicateUtils.notNullPredicate());
  this.agentLifeCycleDao.populateAgentStatuses(unfilteredAgentInfos,timestamp);
  Set<AgentInfo> filteredAgentInfos=new HashSet<>();
  for (  AgentInfo agentInfo : unfilteredAgentInfos) {
    AgentStatus agentStatus=agentInfo.getStatus();
    if (AgentLifeCycleState.UNKNOWN == agentStatus.getState() || eventTimestampFloor <= agentStatus.getEventTimestamp()) {
      filteredAgentInfos.add(agentInfo);
    }
  }
  return filteredAgentInfos;
}"
53658,"private boolean isAgentRunning(AgentInfo agentInfo){
  return agentInfo.getStatus().getState() == AgentLifeCycleState.RUNNING;
}","private boolean isAgentRunning(AgentInfo agentInfo){
  if (agentInfo.getStatus() != null) {
    return agentInfo.getStatus().getState() == AgentLifeCycleState.RUNNING;
  }
 else {
    return false;
  }
}"
53659,"public void appendAgentInfo(NodeList nodeList,LinkDataDuplexMap linkDataDuplexMap,AgentInfoService agentInfoService){
  for (  Node node : nodeList.getNodeList()) {
    appendServerInfo(node,linkDataDuplexMap,agentInfoService);
  }
}","public void appendAgentInfo(NodeList nodeList,LinkDataDuplexMap linkDataDuplexMap,AgentInfoPopulator agentInfoPopulator){
  for (  Node node : nodeList.getNodeList()) {
    appendServerInfo(node,linkDataDuplexMap,agentInfoPopulator);
  }
}"
53660,"private void appendServerInfo(Node node,LinkDataDuplexMap linkDataDuplexMap,AgentInfoService agentInfoService){
  final ServiceType nodeServiceType=node.getServiceType();
  if (nodeServiceType.isUnknown()) {
    return;
  }
  if (nodeServiceType.isTerminal()) {
    ServerBuilder builder=new ServerBuilder();
    for (    LinkData linkData : linkDataDuplexMap.getSourceLinkDataList()) {
      Application toApplication=linkData.getToApplication();
      if (node.getApplication().equals(toApplication)) {
        builder.addCallHistogramList(linkData.getTargetList());
      }
    }
    ServerInstanceList serverInstanceList=builder.build();
    node.setServerInstanceList(serverInstanceList);
  }
 else   if (nodeServiceType.isWas()) {
    Set<AgentInfo> agentList=agentInfoService.getAgentsByApplicationName(node.getApplication().getName(),range.getTo());
    if (agentList.isEmpty()) {
      logger.warn(""String_Node_Str"",node.getApplication());
      node.setServerInstanceList(new ServerInstanceList());
      return;
    }
    logger.debug(""String_Node_Str"",node.getApplication(),agentList);
    ServerBuilder builder=new ServerBuilder();
    agentList=filterAgentInfoByResponseData(agentList,node);
    builder.addAgentInfo(agentList);
    ServerInstanceList serverInstanceList=builder.build();
    node.setServerInstanceList(serverInstanceList);
  }
 else {
    node.setServerInstanceList(new ServerInstanceList());
  }
}","private void appendServerInfo(Node node,LinkDataDuplexMap linkDataDuplexMap,AgentInfoPopulator agentInfoPopulator){
  final ServiceType nodeServiceType=node.getServiceType();
  if (nodeServiceType.isUnknown()) {
    return;
  }
  if (nodeServiceType.isTerminal()) {
    ServerBuilder builder=new ServerBuilder();
    for (    LinkData linkData : linkDataDuplexMap.getSourceLinkDataList()) {
      Application toApplication=linkData.getToApplication();
      if (node.getApplication().equals(toApplication)) {
        builder.addCallHistogramList(linkData.getTargetList());
      }
    }
    ServerInstanceList serverInstanceList=builder.build();
    node.setServerInstanceList(serverInstanceList);
  }
 else   if (nodeServiceType.isWas()) {
    agentInfoPopulator.addAgentInfos(node);
  }
 else {
    node.setServerInstanceList(new ServerInstanceList());
  }
}"
53661,"public ApplicationMap build(LinkDataDuplexMap linkDataDuplexMap,AgentInfoService agentInfoService,final ResponseHistogramBuilder mapHistogramSummary){
  NodeHistogramDataSource responseSource=new NodeHistogramDataSource(){
    @Override public NodeHistogram createNodeHistogram(    Application application){
      List<ResponseTime> responseHistogram=mapHistogramSummary.getResponseTimeList(application);
      final NodeHistogram nodeHistogram=new NodeHistogram(application,range,responseHistogram);
      return nodeHistogram;
    }
  }
;
  return this.build(linkDataDuplexMap,agentInfoService,responseSource);
}","public ApplicationMap build(LinkDataDuplexMap linkDataDuplexMap,final ResponseHistogramBuilder mapHistogramSummary){
  AgentInfoPopulator emptyPopulator=new AgentInfoPopulator(){
    @Override public void addAgentInfos(    Node node){
      node.setServerInstanceList(new ServerInstanceList());
    }
  }
;
  NodeHistogramDataSource responseSource=new NodeHistogramDataSource(){
    @Override public NodeHistogram createNodeHistogram(    Application application){
      List<ResponseTime> responseHistogram=mapHistogramSummary.getResponseTimeList(application);
      final NodeHistogram nodeHistogram=new NodeHistogram(application,range,responseHistogram);
      return nodeHistogram;
    }
  }
;
  return this.build(linkDataDuplexMap,emptyPopulator,responseSource);
}"
53662,"/** 
 * Returns the information of the agent with its start time closest to the given timestamp
 * @param agentId
 * @param timestamp
 * @return
 */
@Override public AgentInfo getAgentInfo(final String agentId,final long timestamp){
  if (agentId == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Scan scan=createScan(agentId,timestamp);
  AgentInfo agentInfo=this.hbaseOperations2.find(HBaseTables.AGENTINFO,scan,new AgentInfoResultsExtractor());
  if (agentInfo != null) {
    this.agentLifeCycleDao.populateAgentStatus(agentInfo,timestamp);
  }
  return agentInfo;
}","/** 
 * Returns the information of the agent with its start time closest to the given timestamp
 * @param agentId
 * @param timestamp
 * @return
 */
@Override public AgentInfo getAgentInfo(final String agentId,final long timestamp){
  if (agentId == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Scan scan=createScan(agentId,timestamp);
  return this.hbaseOperations2.find(HBaseTables.AGENTINFO,scan,new AgentInfoResultsExtractor());
}"
53663,"@Override public List<AgentInfo> getAgentInfos(List<String> agentIds,long timestamp){
  if (CollectionUtils.isEmpty(agentIds)) {
    return Collections.emptyList();
  }
  List<Scan> scans=new ArrayList<>(agentIds.size());
  for (  String agentId : agentIds) {
    scans.add(createScan(agentId,timestamp));
  }
  List<AgentInfo> agentInfos=this.hbaseOperations2.findParallel(HBaseTables.AGENTINFO,scans,new AgentInfoResultsExtractor());
  this.agentLifeCycleDao.populateAgentStatuses(agentInfos,timestamp);
  return agentInfos;
}","@Override public List<AgentInfo> getAgentInfos(List<String> agentIds,long timestamp){
  if (CollectionUtils.isEmpty(agentIds)) {
    return Collections.emptyList();
  }
  List<Scan> scans=new ArrayList<>(agentIds.size());
  for (  String agentId : agentIds) {
    scans.add(createScan(agentId,timestamp));
  }
  return this.hbaseOperations2.findParallel(HBaseTables.AGENTINFO,scans,new AgentInfoResultsExtractor());
}"
53664,"@Override public ApplicationAgentList getApplicationAgentList(ApplicationAgentList.Key applicationAgentListKey,String applicationName,long timestamp){
  if (applicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (applicationAgentListKey == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final List<String> agentIdList=this.applicationIndexDao.selectAgentIds(applicationName);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",agentIdList);
  }
  if (CollectionUtils.isEmpty(agentIdList)) {
    logger.debug(""String_Node_Str"",applicationName);
    return new ApplicationAgentList(new TreeMap<String,List<AgentInfo>>());
  }
  SortedMap<String,List<AgentInfo>> result=new TreeMap<>();
  List<AgentInfo> agentInfos=this.agentInfoDao.getAgentInfos(agentIdList,timestamp);
  for (  AgentInfo agentInfo : agentInfos) {
    if (agentInfo != null) {
      String hostname=applicationAgentListKey.getKey(agentInfo);
      if (result.containsKey(hostname)) {
        result.get(hostname).add(agentInfo);
      }
 else {
        List<AgentInfo> list=new ArrayList<>();
        list.add(agentInfo);
        result.put(hostname,list);
      }
    }
  }
  for (  List<AgentInfo> agentInfoList : result.values()) {
    Collections.sort(agentInfoList,AgentInfo.AGENT_NAME_ASC_COMPARATOR);
  }
  logger.info(""String_Node_Str"",result);
  return new ApplicationAgentList(result);
}","@Override public ApplicationAgentList getApplicationAgentList(ApplicationAgentList.Key applicationAgentListKey,String applicationName,long timestamp){
  if (applicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (applicationAgentListKey == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final List<String> agentIdList=this.applicationIndexDao.selectAgentIds(applicationName);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",agentIdList);
  }
  if (CollectionUtils.isEmpty(agentIdList)) {
    logger.debug(""String_Node_Str"",applicationName);
    return new ApplicationAgentList(new TreeMap<String,List<AgentInfo>>());
  }
  SortedMap<String,List<AgentInfo>> result=new TreeMap<>();
  List<AgentInfo> agentInfos=this.agentInfoDao.getAgentInfos(agentIdList,timestamp);
  this.agentLifeCycleDao.populateAgentStatuses(agentInfos,timestamp);
  for (  AgentInfo agentInfo : agentInfos) {
    if (agentInfo != null) {
      String hostname=applicationAgentListKey.getKey(agentInfo);
      if (result.containsKey(hostname)) {
        result.get(hostname).add(agentInfo);
      }
 else {
        List<AgentInfo> list=new ArrayList<>();
        list.add(agentInfo);
        result.put(hostname,list);
      }
    }
  }
  for (  List<AgentInfo> agentInfoList : result.values()) {
    Collections.sort(agentInfoList,AgentInfo.AGENT_NAME_ASC_COMPARATOR);
  }
  logger.info(""String_Node_Str"",result);
  return new ApplicationAgentList(result);
}"
53665,"@Override public AgentInfo getAgentInfo(String agentId,long timestamp){
  if (agentId == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (timestamp < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return this.agentInfoDao.getAgentInfo(agentId,timestamp);
}","@Override public AgentInfo getAgentInfo(String agentId,long timestamp){
  if (agentId == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (timestamp < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  AgentInfo agentInfo=this.agentInfoDao.getAgentInfo(agentId,timestamp);
  if (agentInfo != null) {
    this.agentLifeCycleDao.populateAgentStatus(agentInfo,timestamp);
  }
  return agentInfo;
}"
53666,"@Override public Set<AgentInfo> getAgentsByApplicationName(String applicationName,long timestamp,long timeDiff){
  if (timeDiff > timestamp) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final long eventTimestampFloor=timestamp - timeDiff;
  Set<AgentInfo> unfilteredAgentInfos=this.getAgentsByApplicationName(applicationName,timestamp);
  if (unfilteredAgentInfos == null || unfilteredAgentInfos.isEmpty()) {
    return Collections.emptySet();
  }
  Set<AgentInfo> filteredAgentInfos=new HashSet<>();
  for (  AgentInfo agentInfo : unfilteredAgentInfos) {
    AgentStatus agentStatus=agentInfo.getStatus();
    if (AgentLifeCycleState.UNKNOWN == agentStatus.getState() || eventTimestampFloor <= agentStatus.getEventTimestamp()) {
      filteredAgentInfos.add(agentInfo);
    }
  }
  return filteredAgentInfos;
}","@Override public Set<AgentInfo> getAgentsByApplicationName(String applicationName,long timestamp,long timeDiff){
  if (applicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (timestamp < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (timeDiff > timestamp) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final long eventTimestampFloor=timestamp - timeDiff;
  List<String> agentIds=this.applicationIndexDao.selectAgentIds(applicationName);
  List<AgentInfo> unfilteredAgentInfos=this.agentInfoDao.getAgentInfos(agentIds,timestamp);
  if (unfilteredAgentInfos == null || unfilteredAgentInfos.isEmpty()) {
    return Collections.emptySet();
  }
  this.agentLifeCycleDao.populateAgentStatuses(unfilteredAgentInfos,timestamp);
  Set<AgentInfo> filteredAgentInfos=new HashSet<>();
  for (  AgentInfo agentInfo : unfilteredAgentInfos) {
    AgentStatus agentStatus=agentInfo.getStatus();
    if (AgentLifeCycleState.UNKNOWN == agentStatus.getState() || eventTimestampFloor <= agentStatus.getEventTimestamp()) {
      filteredAgentInfos.add(agentInfo);
    }
  }
  return filteredAgentInfos;
}"
53667,"private ApplicationMap createMap(Range range,Range scanRange,List<List<SpanBo>> filterList){
  final TimeWindow window=new TimeWindow(range,TimeWindowDownSampler.SAMPLER);
  final LinkDataDuplexMap linkDataDuplexMap=new LinkDataDuplexMap();
  final DotExtractor dotExtractor=new DotExtractor(scanRange,applicationFactory);
  final ResponseHistogramBuilder mapHistogramSummary=new ResponseHistogramBuilder(range);
  for (  List<SpanBo> transaction : filterList) {
    final Map<Long,SpanBo> transactionSpanMap=checkDuplicatedSpanId(transaction);
    for (    SpanBo span : transaction) {
      final Application parentApplication=createParentApplication(span,transactionSpanMap);
      final Application spanApplication=this.applicationFactory.createApplication(span.getApplicationId(),span.getApplicationServiceType());
      recordSpanResponseTime(spanApplication,span,mapHistogramSummary,span.getCollectorAcceptTime());
      if (!spanApplication.getServiceType().isRecordStatistics() || spanApplication.getServiceType().isRpcClient()) {
        logger.warn(""String_Node_Str"",spanApplication);
        continue;
      }
      final short slotTime=getHistogramSlotTime(span,spanApplication.getServiceType());
      long timestamp=window.refineTimestamp(span.getCollectorAcceptTime());
      if (parentApplication.getServiceType() == ServiceType.USER) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());
        }
        final LinkDataMap sourceLinkData=linkDataDuplexMap.getSourceLinkDataMap();
        sourceLinkData.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());
        }
        final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();
        targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);
      }
 else {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());
        }
        final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();
        targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);
      }
      addNodeFromSpanEvent(span,window,linkDataDuplexMap,transactionSpanMap);
      dotExtractor.addDot(span);
    }
  }
  List<ApplicationScatterScanResult> applicationScatterScanResult=dotExtractor.getApplicationScatterScanResult();
  ApplicationMapBuilder applicationMapBuilder=new ApplicationMapBuilder(range);
  mapHistogramSummary.build();
  ApplicationMap map=applicationMapBuilder.build(linkDataDuplexMap,agentInfoService,mapHistogramSummary);
  map.setApplicationScatterScanResult(applicationScatterScanResult);
  return map;
}","private ApplicationMap createMap(Range range,Range scanRange,List<List<SpanBo>> filterList){
  final TimeWindow window=new TimeWindow(range,TimeWindowDownSampler.SAMPLER);
  final LinkDataDuplexMap linkDataDuplexMap=new LinkDataDuplexMap();
  final DotExtractor dotExtractor=new DotExtractor(scanRange,applicationFactory);
  final ResponseHistogramBuilder mapHistogramSummary=new ResponseHistogramBuilder(range);
  for (  List<SpanBo> transaction : filterList) {
    final Map<Long,SpanBo> transactionSpanMap=checkDuplicatedSpanId(transaction);
    for (    SpanBo span : transaction) {
      final Application parentApplication=createParentApplication(span,transactionSpanMap);
      final Application spanApplication=this.applicationFactory.createApplication(span.getApplicationId(),span.getApplicationServiceType());
      recordSpanResponseTime(spanApplication,span,mapHistogramSummary,span.getCollectorAcceptTime());
      if (!spanApplication.getServiceType().isRecordStatistics() || spanApplication.getServiceType().isRpcClient()) {
        logger.warn(""String_Node_Str"",spanApplication);
        continue;
      }
      final short slotTime=getHistogramSlotTime(span,spanApplication.getServiceType());
      long timestamp=window.refineTimestamp(span.getCollectorAcceptTime());
      if (parentApplication.getServiceType() == ServiceType.USER) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());
        }
        final LinkDataMap sourceLinkData=linkDataDuplexMap.getSourceLinkDataMap();
        sourceLinkData.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());
        }
        final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();
        targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);
      }
 else {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());
        }
        final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();
        targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);
      }
      addNodeFromSpanEvent(span,window,linkDataDuplexMap,transactionSpanMap);
      dotExtractor.addDot(span);
    }
  }
  List<ApplicationScatterScanResult> applicationScatterScanResult=dotExtractor.getApplicationScatterScanResult();
  ApplicationMapBuilder applicationMapBuilder=new ApplicationMapBuilder(range);
  mapHistogramSummary.build();
  ApplicationMap map=applicationMapBuilder.build(linkDataDuplexMap,mapHistogramSummary);
  map.setApplicationScatterScanResult(applicationScatterScanResult);
  return map;
}"
53668,"@Override public void serialize(AgentInfo agentInfo,JsonGenerator jgen,SerializerProvider provider) throws IOException, JsonProcessingException {
  jgen.writeStartObject();
  jgen.writeStringField(""String_Node_Str"",agentInfo.getApplicationName());
  jgen.writeStringField(""String_Node_Str"",agentInfo.getAgentId());
  jgen.writeNumberField(""String_Node_Str"",agentInfo.getStartTimestamp());
  jgen.writeStringField(""String_Node_Str"",agentInfo.getHostName());
  jgen.writeStringField(""String_Node_Str"",agentInfo.getIp());
  jgen.writeStringField(""String_Node_Str"",agentInfo.getPorts());
  final ServiceType serviceType=serviceTypeRegistryService.findServiceType(agentInfo.getServiceTypeCode());
  jgen.writeStringField(""String_Node_Str"",serviceType.getDesc());
  jgen.writeNumberField(""String_Node_Str"",agentInfo.getPid());
  jgen.writeStringField(""String_Node_Str"",agentInfo.getVmVersion());
  jgen.writeStringField(""String_Node_Str"",agentInfo.getAgentVersion());
  jgen.writeObjectField(""String_Node_Str"",agentInfo.getServerMetaData());
  AgentStatus status=agentInfo.getStatus();
  if (status == null) {
    status=new AgentStatus(agentInfo.getAgentId());
    status.setState(AgentLifeCycleState.UNKNOWN);
  }
  jgen.writeObjectField(""String_Node_Str"",status);
  jgen.writeNumberField(""String_Node_Str"",agentInfo.getInitialStartTimestamp());
  if (matcherGroupList != null) {
    jgen.writeFieldName(""String_Node_Str"");
    jgen.writeStartArray();
    for (    MatcherGroup matcherGroup : matcherGroupList) {
      if (matcherGroup.ismatchingType(agentInfo)) {
        LinkInfo linkInfo=matcherGroup.makeLinkInfo(agentInfo);
        jgen.writeStartObject();
        jgen.writeStringField(""String_Node_Str"",linkInfo.getLinkName());
        jgen.writeStringField(""String_Node_Str"",linkInfo.getLinkUrl());
        jgen.writeStringField(""String_Node_Str"",linkInfo.getLinktype());
        jgen.writeEndObject();
      }
    }
    jgen.writeEndArray();
  }
  jgen.writeEndObject();
}","@Override public void serialize(AgentInfo agentInfo,JsonGenerator jgen,SerializerProvider provider) throws IOException, JsonProcessingException {
  jgen.writeStartObject();
  jgen.writeStringField(""String_Node_Str"",agentInfo.getApplicationName());
  jgen.writeStringField(""String_Node_Str"",agentInfo.getAgentId());
  jgen.writeNumberField(""String_Node_Str"",agentInfo.getStartTimestamp());
  jgen.writeStringField(""String_Node_Str"",agentInfo.getHostName());
  jgen.writeStringField(""String_Node_Str"",agentInfo.getIp());
  jgen.writeStringField(""String_Node_Str"",agentInfo.getPorts());
  final ServiceType serviceType=serviceTypeRegistryService.findServiceType(agentInfo.getServiceTypeCode());
  jgen.writeStringField(""String_Node_Str"",serviceType.getDesc());
  jgen.writeNumberField(""String_Node_Str"",agentInfo.getPid());
  jgen.writeStringField(""String_Node_Str"",agentInfo.getVmVersion());
  jgen.writeStringField(""String_Node_Str"",agentInfo.getAgentVersion());
  jgen.writeObjectField(""String_Node_Str"",agentInfo.getServerMetaData());
  AgentStatus status=agentInfo.getStatus();
  if (status != null) {
    jgen.writeObjectField(""String_Node_Str"",status);
  }
  jgen.writeNumberField(""String_Node_Str"",agentInfo.getInitialStartTimestamp());
  if (matcherGroupList != null) {
    jgen.writeFieldName(""String_Node_Str"");
    jgen.writeStartArray();
    for (    MatcherGroup matcherGroup : matcherGroupList) {
      if (matcherGroup.ismatchingType(agentInfo)) {
        LinkInfo linkInfo=matcherGroup.makeLinkInfo(agentInfo);
        jgen.writeStartObject();
        jgen.writeStringField(""String_Node_Str"",linkInfo.getLinkName());
        jgen.writeStringField(""String_Node_Str"",linkInfo.getLinkUrl());
        jgen.writeStringField(""String_Node_Str"",linkInfo.getLinktype());
        jgen.writeEndObject();
      }
    }
    jgen.writeEndArray();
  }
  jgen.writeEndObject();
}"
53669,"private List<AgentEvent> createAgentEvents(List<AgentEventBo> agentEventBos,boolean includeEventMessage){
  List<AgentEvent> agentEvents=new ArrayList<>(agentEventBos.size());
  PriorityQueue<DurationalAgentEvent> durationalAgentEvents=new PriorityQueue<>(agentEventBos.size(),AgentEvent.EVENT_TIMESTAMP_ASC_COMPARATOR);
  for (  AgentEventBo agentEventBo : agentEventBos) {
    if (agentEventBo.getEventType().isCategorizedAs(AgentEventTypeCategory.DURATIONAL)) {
      durationalAgentEvents.add(createDurationalAgentEvent(agentEventBo,includeEventMessage));
    }
 else {
      agentEvents.add(createAgentEvent(agentEventBo,includeEventMessage));
    }
  }
  long durationStartTimestamp=DurationalAgentEvent.UNKNOWN_TIMESTAMP;
  while (!durationalAgentEvents.isEmpty()) {
    DurationalAgentEvent currentEvent=durationalAgentEvents.remove();
    currentEvent.setDurationStartTimestamp(durationStartTimestamp);
    DurationalAgentEvent nextEvent=durationalAgentEvents.peek();
    if (nextEvent != null) {
      long nextEventTimestamp=nextEvent.getEventTimestamp();
      currentEvent.setDurationEndTimestamp(nextEventTimestamp);
      durationStartTimestamp=nextEventTimestamp;
    }
    agentEvents.add(currentEvent);
  }
  return agentEvents;
}","private List<AgentEvent> createAgentEvents(List<AgentEventBo> agentEventBos,boolean includeEventMessage){
  if (CollectionUtils.isEmpty(agentEventBos)) {
    return Collections.emptyList();
  }
  List<AgentEvent> agentEvents=new ArrayList<>(agentEventBos.size());
  PriorityQueue<DurationalAgentEvent> durationalAgentEvents=new PriorityQueue<>(agentEventBos.size(),AgentEvent.EVENT_TIMESTAMP_ASC_COMPARATOR);
  for (  AgentEventBo agentEventBo : agentEventBos) {
    if (agentEventBo.getEventType().isCategorizedAs(AgentEventTypeCategory.DURATIONAL)) {
      durationalAgentEvents.add(createDurationalAgentEvent(agentEventBo,includeEventMessage));
    }
 else {
      agentEvents.add(createAgentEvent(agentEventBo,includeEventMessage));
    }
  }
  long durationStartTimestamp=DurationalAgentEvent.UNKNOWN_TIMESTAMP;
  while (!durationalAgentEvents.isEmpty()) {
    DurationalAgentEvent currentEvent=durationalAgentEvents.remove();
    currentEvent.setDurationStartTimestamp(durationStartTimestamp);
    DurationalAgentEvent nextEvent=durationalAgentEvents.peek();
    if (nextEvent != null) {
      long nextEventTimestamp=nextEvent.getEventTimestamp();
      currentEvent.setDurationEndTimestamp(nextEventTimestamp);
      durationStartTimestamp=nextEventTimestamp;
    }
    agentEvents.add(currentEvent);
  }
  return agentEvents;
}"
53670,"public void start(){
  final ClassPathResolver classPathResolver=new ClassPathResolver();
  boolean agentJarNotFound=classPathResolver.findAgentJar();
  if (!agentJarNotFound) {
    logger.severe(""String_Node_Str"");
    logPinpointAgentLoadFail();
    return;
  }
  final String bootStrapCoreJar=classPathResolver.getBootStrapCoreJar();
  if (bootStrapCoreJar == null) {
    logger.severe(""String_Node_Str"");
    logPinpointAgentLoadFail();
    return;
  }
  this.bootStrapCore=bootStrapCoreJar;
  if (!isValidId(""String_Node_Str"",PinpointConstants.AGENT_NAME_MAX_LEN)) {
    logPinpointAgentLoadFail();
    return;
  }
  if (!isValidId(""String_Node_Str"",PinpointConstants.APPLICATION_NAME_MAX_LEN)) {
    logPinpointAgentLoadFail();
    return;
  }
  URL[] pluginJars=classPathResolver.resolvePlugins();
  TraceMetadataLoaderService typeLoaderService=new DefaultTraceMetadataLoaderService(pluginJars);
  ServiceTypeRegistryService serviceTypeRegistryService=new DefaultServiceTypeRegistryService(typeLoaderService);
  AnnotationKeyRegistryService annotationKeyRegistryService=new DefaultAnnotationKeyRegistryService(typeLoaderService);
  String configPath=getConfigPath(classPathResolver);
  if (configPath == null) {
    logPinpointAgentLoadFail();
    return;
  }
  saveLogFilePath(classPathResolver);
  savePinpointVersion();
  try {
    ProfilerConfig profilerConfig=DefaultProfilerConfig.load(configPath);
    List<URL> libUrlList=resolveLib(classPathResolver);
    AgentClassLoader agentClassLoader=new AgentClassLoader(libUrlList.toArray(new URL[libUrlList.size()]));
    String bootClass=argMap.containsKey(""String_Node_Str"") ? argMap.get(""String_Node_Str"") : BOOT_CLASS;
    agentClassLoader.setBootClass(bootClass);
    logger.info(""String_Node_Str"" + bootClass + ""String_Node_Str"");
    AgentOption option=createAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapCore,serviceTypeRegistryService,annotationKeyRegistryService,bootStrapCoreJar);
    Agent pinpointAgent=agentClassLoader.boot(option);
    pinpointAgent.start();
    registerShutdownHook(pinpointAgent);
    logger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,ProductInfo.NAME + ""String_Node_Str"" + e.getMessage(),e);
    logPinpointAgentLoadFail();
  }
}","public void start(){
  final ClassPathResolver classPathResolver=new ClassPathResolver();
  boolean agentJarNotFound=classPathResolver.findAgentJar();
  if (!agentJarNotFound) {
    logger.severe(""String_Node_Str"");
    logPinpointAgentLoadFail();
    return;
  }
  final String bootStrapCoreJar=classPathResolver.getBootStrapCoreJar();
  if (bootStrapCoreJar == null) {
    logger.severe(""String_Node_Str"");
    logPinpointAgentLoadFail();
    return;
  }
  this.bootStrapCore=bootStrapCoreJar;
  if (!isValidId(""String_Node_Str"",PinpointConstants.AGENT_NAME_MAX_LEN)) {
    logPinpointAgentLoadFail();
    return;
  }
  if (!isValidId(""String_Node_Str"",PinpointConstants.APPLICATION_NAME_MAX_LEN)) {
    logPinpointAgentLoadFail();
    return;
  }
  URL[] pluginJars=classPathResolver.resolvePlugins();
  TraceMetadataLoaderService typeLoaderService=new DefaultTraceMetadataLoaderService(pluginJars);
  ServiceTypeRegistryService serviceTypeRegistryService=new DefaultServiceTypeRegistryService(typeLoaderService);
  AnnotationKeyRegistryService annotationKeyRegistryService=new DefaultAnnotationKeyRegistryService(typeLoaderService);
  String configPath=getConfigPath(classPathResolver);
  if (configPath == null) {
    logPinpointAgentLoadFail();
    return;
  }
  saveLogFilePath(classPathResolver);
  savePinpointVersion();
  try {
    ProfilerConfig profilerConfig=DefaultProfilerConfig.load(configPath);
    List<URL> libUrlList=resolveLib(classPathResolver);
    AgentClassLoader agentClassLoader=new AgentClassLoader(libUrlList.toArray(new URL[libUrlList.size()]));
    String bootClass=argMap.containsKey(""String_Node_Str"") ? argMap.get(""String_Node_Str"") : BOOT_CLASS;
    agentClassLoader.setBootClass(bootClass);
    logger.info(""String_Node_Str"" + bootClass + ""String_Node_Str"");
    AgentOption option=createAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapCore,serviceTypeRegistryService,annotationKeyRegistryService);
    Agent pinpointAgent=agentClassLoader.boot(option);
    pinpointAgent.start();
    registerShutdownHook(pinpointAgent);
    logger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,ProductInfo.NAME + ""String_Node_Str"" + e.getMessage(),e);
    logPinpointAgentLoadFail();
  }
}"
53671,"private AgentOption createAgentOption(String agentArgs,Instrumentation instrumentation,ProfilerConfig profilerConfig,URL[] pluginJars,String bootStrapJarPath,ServiceTypeRegistryService serviceTypeRegistryService,AnnotationKeyRegistryService annotationKeyRegistryService,String bootStrapCoreJar){
  return new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarPath,serviceTypeRegistryService,annotationKeyRegistryService);
}","private AgentOption createAgentOption(String agentArgs,Instrumentation instrumentation,ProfilerConfig profilerConfig,URL[] pluginJars,String bootStrapJarCorePath,ServiceTypeRegistryService serviceTypeRegistryService,AnnotationKeyRegistryService annotationKeyRegistryService){
  return new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarCorePath,serviceTypeRegistryService,annotationKeyRegistryService);
}"
53672,"private Class<?> injectToPlainClassLoader(ClassPool pool,ClassLoader classLoader,String className,ClassLoadingChecker classLoadingChecker) throws NotFoundException, IOException, CannotCompileException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  if (pluginConfig.getProfilerPackageFilter().accept(className)) {
    if (isDebug) {
      logger.debug(""String_Node_Str"",className);
    }
    return null;
  }
  if (!pluginConfig.getPluginPackageFilter().accept(className)) {
    if (isDebug) {
      logger.debug(""String_Node_Str"",className);
    }
    return null;
  }
  if (!classLoadingChecker.isFirstLoad(className)) {
    if (isDebug) {
      logger.debug(""String_Node_Str"",className);
    }
    return null;
  }
  Class<?> c=null;
  try {
    c=classLoader.loadClass(className);
    if (isDebug) {
      logger.debug(""String_Node_Str"",className);
    }
  }
 catch (  ClassNotFoundException ex) {
    if (isDebug) {
      logger.debug(""String_Node_Str"",ex.getMessage());
    }
  }
  if (c != null) {
    return c;
  }
  final CtClass ct=pool.getOrNull(className);
  if (ct == null) {
    throw new NotFoundException(className);
  }
  final CtClass superClass=ct.getSuperclass();
  if (superClass != null) {
    if (""String_Node_Str"".equals(superClass.getName())) {
      return null;
    }
    injectToPlainClassLoader(pool,classLoader,superClass.getName(),classLoadingChecker);
  }
  final CtClass[] interfaces=ct.getInterfaces();
  for (  CtClass ctInterface : interfaces) {
    injectToPlainClassLoader(pool,classLoader,ctInterface.getName(),classLoadingChecker);
  }
  @SuppressWarnings(""String_Node_Str"") final Collection<String> referenceClassList=ct.getRefClasses();
  if (isDebug) {
    logger.debug(""String_Node_Str"",className,referenceClassList);
  }
  for (  String referenceClass : referenceClassList) {
    try {
      injectToPlainClassLoader(pool,classLoader,referenceClass,classLoadingChecker);
    }
 catch (    NotFoundException e) {
      logger.warn(""String_Node_Str"",e.getMessage(),e);
    }
  }
  if (logger.isInfoEnabled()) {
    logger.debug(""String_Node_Str"",className,classLoader);
  }
  final byte[] bytes=ct.toBytecode();
  return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);
}","private Class<?> injectToPlainClassLoader(ClassPool pool,ClassLoader classLoader,String className,ClassLoadingChecker classLoadingChecker) throws NotFoundException, IOException, CannotCompileException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  if (pluginConfig.getProfilerPackageFilter().accept(className)) {
    if (isDebug) {
      logger.debug(""String_Node_Str"",className);
    }
    return null;
  }
  if (!pluginConfig.getPluginPackageFilter().accept(className)) {
    if (isDebug) {
      logger.debug(""String_Node_Str"",className);
    }
    return null;
  }
  if (!classLoadingChecker.isFirstLoad(className)) {
    if (isDebug) {
      logger.debug(""String_Node_Str"",className);
    }
    return null;
  }
  Class<?> c=null;
  try {
    c=classLoader.loadClass(className);
    if (isDebug) {
      logger.debug(""String_Node_Str"",className);
    }
  }
 catch (  ClassNotFoundException ex) {
    if (isDebug) {
      logger.debug(""String_Node_Str"",ex.getMessage());
    }
  }
  if (c != null) {
    return c;
  }
  final CtClass ct=pool.getOrNull(className);
  if (ct == null) {
    throw new NotFoundException(className);
  }
  final CtClass superClass=ct.getSuperclass();
  if (superClass != null) {
    if (""String_Node_Str"".equals(superClass.getName())) {
      return null;
    }
    injectToPlainClassLoader(pool,classLoader,superClass.getName(),classLoadingChecker);
  }
  final CtClass[] interfaces=ct.getInterfaces();
  for (  CtClass ctInterface : interfaces) {
    injectToPlainClassLoader(pool,classLoader,ctInterface.getName(),classLoadingChecker);
  }
  @SuppressWarnings(""String_Node_Str"") final Collection<String> referenceClassList=ct.getRefClasses();
  if (isDebug) {
    logger.debug(""String_Node_Str"",className,referenceClassList);
  }
  for (  String referenceClass : referenceClassList) {
    try {
      injectToPlainClassLoader(pool,classLoader,referenceClass,classLoadingChecker);
    }
 catch (    NotFoundException e) {
      logger.warn(""String_Node_Str"",e.getMessage(),e);
    }
  }
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"",className,classLoader);
  }
  final byte[] bytes=ct.toBytecode();
  return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);
}"
53673,"@Override public Set<AgentInfo> getAgentsByApplicationName(String applicationName,long timestamp,long timeDiff){
  if (applicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (timeDiff < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (timeDiff > timestamp) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final long eventTimestampFloor=timestamp - timeDiff;
  List<String> agentIds=this.applicationIndexDao.selectAgentIds(applicationName);
  Set<AgentInfo> agentSet=new HashSet<>();
  for (  String agentId : agentIds) {
    AgentInfoBo agentInfoBo=this.agentInfoDao.getAgentInfo(agentId,timestamp);
    if (agentInfoBo != null) {
      AgentStatus agentStatus=this.getAgentStatus(agentId,timestamp);
      if (AgentLifeCycleState.UNKNOWN == agentStatus.getState() || eventTimestampFloor <= agentStatus.getEventTimestamp()) {
        AgentInfo agentInfo=new AgentInfo(agentInfoBo);
        agentInfo.setStatus(agentStatus);
        agentSet.add(agentInfo);
      }
    }
  }
  return agentSet;
}","@Override public Set<AgentInfo> getAgentsByApplicationName(String applicationName,long timestamp,long timeDiff){
  if (applicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (timeDiff > timestamp) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final long eventTimestampFloor=timestamp - timeDiff;
  List<String> agentIds=this.applicationIndexDao.selectAgentIds(applicationName);
  Set<AgentInfo> agentSet=new HashSet<>();
  for (  String agentId : agentIds) {
    AgentInfoBo agentInfoBo=this.agentInfoDao.getAgentInfo(agentId,timestamp);
    if (agentInfoBo != null) {
      AgentStatus agentStatus=this.getAgentStatus(agentId,timestamp);
      if (AgentLifeCycleState.UNKNOWN == agentStatus.getState() || eventTimestampFloor <= agentStatus.getEventTimestamp()) {
        AgentInfo agentInfo=new AgentInfo(agentInfoBo);
        agentInfo.setStatus(agentStatus);
        agentSet.add(agentInfo);
      }
    }
  }
  return agentSet;
}"
53674,"private void addTNonblockingSocketEditor(){
  final String targetClassName=""String_Node_Str"";
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(SocketFieldAccessor.class.getName());
      target.addField(SocketAddressFieldAccessor.class.getName());
      final InstrumentMethod constructor=target.getConstructor(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      if (constructor != null) {
        String interceptor=""String_Node_Str"";
        constructor.addInterceptor(interceptor);
      }
      return target.toBytecode();
    }
  }
);
}","private void addTNonblockingSocketEditor(){
  final String targetClassName=""String_Node_Str"";
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(ThriftConstants.FIELD_ACCESSOR_SOCKET);
      target.addField(ThriftConstants.FIELD_ACCESSOR_SOCKET_ADDRESS);
      final InstrumentMethod constructor=target.getConstructor(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      if (constructor != null) {
        String interceptor=""String_Node_Str"";
        constructor.addInterceptor(interceptor);
      }
      return target.toBytecode();
    }
  }
);
}"
53675,"private void addTProtocolInterceptors(ThriftPluginConfig config,String tProtocolClassName){
  final boolean traceThriftClient=config.traceThriftClient();
  final boolean traceThriftProcessor=config.traceThriftProcessor();
  final String targetClassName=tProtocolClassName;
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      if (traceThriftClient) {
        final InstrumentMethod writeFieldStop=target.getDeclaredMethod(""String_Node_Str"");
        if (writeFieldStop != null) {
          String interceptor=""String_Node_Str"";
          writeFieldStop.addInterceptor(interceptor);
        }
      }
      if (traceThriftProcessor) {
        target.addField(ServerMarkerFlagFieldAccessor.class.getName());
        final InstrumentMethod readFieldBegin=target.getDeclaredMethod(""String_Node_Str"");
        if (readFieldBegin != null) {
          String interceptor=""String_Node_Str"";
          readFieldBegin.addInterceptor(interceptor);
        }
        final List<InstrumentMethod> readTTypes=target.getDeclaredMethods(MethodFilters.name(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        if (readTTypes != null) {
          String tTypeCommonInterceptor=""String_Node_Str"";
          for (          InstrumentMethod readTType : readTTypes) {
            if (readTType != null) {
              readTType.addInterceptor(tTypeCommonInterceptor);
            }
          }
        }
        final InstrumentMethod readMessageEnd=target.getDeclaredMethod(""String_Node_Str"");
        if (readMessageEnd != null) {
          String interceptor=""String_Node_Str"";
          readMessageEnd.addInterceptor(interceptor);
        }
        target.addField(AsyncMarkerFlagFieldAccessor.class.getName());
        final InstrumentMethod readMessageBegin=target.getDeclaredMethod(""String_Node_Str"");
        if (readMessageBegin != null) {
          String interceptor=""String_Node_Str"";
          readMessageBegin.addInterceptor(interceptor);
        }
      }
      return target.toBytecode();
    }
  }
);
}","private void addTProtocolInterceptors(ThriftPluginConfig config,String tProtocolClassName){
  final boolean traceThriftClient=config.traceThriftClient();
  final boolean traceThriftProcessor=config.traceThriftProcessor();
  final String targetClassName=tProtocolClassName;
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      if (traceThriftClient) {
        final InstrumentMethod writeFieldStop=target.getDeclaredMethod(""String_Node_Str"");
        if (writeFieldStop != null) {
          String interceptor=""String_Node_Str"";
          writeFieldStop.addInterceptor(interceptor);
        }
      }
      if (traceThriftProcessor) {
        target.addField(ThriftConstants.FIELD_ACCESSOR_SERVER_MARKER_FLAG);
        final InstrumentMethod readFieldBegin=target.getDeclaredMethod(""String_Node_Str"");
        if (readFieldBegin != null) {
          String interceptor=""String_Node_Str"";
          readFieldBegin.addInterceptor(interceptor);
        }
        final List<InstrumentMethod> readTTypes=target.getDeclaredMethods(MethodFilters.name(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        if (readTTypes != null) {
          String tTypeCommonInterceptor=""String_Node_Str"";
          for (          InstrumentMethod readTType : readTTypes) {
            if (readTType != null) {
              readTType.addInterceptor(tTypeCommonInterceptor);
            }
          }
        }
        final InstrumentMethod readMessageEnd=target.getDeclaredMethod(""String_Node_Str"");
        if (readMessageEnd != null) {
          String interceptor=""String_Node_Str"";
          readMessageEnd.addInterceptor(interceptor);
        }
        target.addField(ThriftConstants.FIELD_ACCESSOR_ASYNC_MARKER_FLAG);
        final InstrumentMethod readMessageBegin=target.getDeclaredMethod(""String_Node_Str"");
        if (readMessageBegin != null) {
          String interceptor=""String_Node_Str"";
          readMessageBegin.addInterceptor(interceptor);
        }
      }
      return target.toBytecode();
    }
  }
);
}"
53676,"private void addProcessFunctionEditor(){
  final String targetClassName=""String_Node_Str"";
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(ServerMarkerFlagFieldAccessor.class.getName());
      final InstrumentMethod process=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      if (process != null) {
        String interceptor=""String_Node_Str"";
        process.addInterceptor(interceptor);
      }
      return target.toBytecode();
    }
  }
);
}","private void addProcessFunctionEditor(){
  final String targetClassName=""String_Node_Str"";
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(ThriftConstants.FIELD_ACCESSOR_SERVER_MARKER_FLAG);
      final InstrumentMethod process=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      if (process != null) {
        String interceptor=""String_Node_Str"";
        process.addInterceptor(interceptor);
      }
      return target.toBytecode();
    }
  }
);
}"
53677,"private void addTAsyncMethodCallEditor(){
  final String targetClassName=""String_Node_Str"";
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(SocketAddressFieldAccessor.class.getName());
      target.addField(AsyncMarkerFlagFieldAccessor.class.getName());
      target.addField(AsyncTraceIdFieldAccessor.class.getName());
      target.addField(AsyncNextSpanIdFieldAccessor.class.getName());
      target.addField(AsyncCallEndFlagFieldAccessor.class.getName());
      target.addField(AsyncCallRemoteAddressFieldAccessor.class.getName());
      target.addGetter(TNonblockingTransportFieldGetter.class.getName(),ThriftConstants.T_ASYNC_METHOD_CALL_FIELD_TRANSPORT);
      final InstrumentMethod constructor=target.getConstructor(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      if (constructor != null) {
        String interceptor=""String_Node_Str"";
        constructor.addInterceptor(interceptor);
      }
      final InstrumentMethod start=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (start != null) {
        String interceptor=""String_Node_Str"";
        start.addInterceptor(interceptor);
      }
      final InstrumentMethod doConnecting=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (doConnecting != null) {
        String interceptor=""String_Node_Str"";
        doConnecting.addInterceptor(interceptor);
      }
      final InstrumentMethod doWritingRequestSize=target.getDeclaredMethod(""String_Node_Str"");
      if (doWritingRequestSize != null) {
        String interceptor=""String_Node_Str"";
        doWritingRequestSize.addInterceptor(interceptor);
      }
      final InstrumentMethod doWritingRequestBody=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (doWritingRequestBody != null) {
        String interceptor=""String_Node_Str"";
        doWritingRequestBody.addInterceptor(interceptor);
      }
      final InstrumentMethod doReadingResponseSize=target.getDeclaredMethod(""String_Node_Str"");
      if (doReadingResponseSize != null) {
        String interceptor=""String_Node_Str"";
        doReadingResponseSize.addInterceptor(interceptor);
      }
      final InstrumentMethod doReadingResponseBody=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (doReadingResponseBody != null) {
        String interceptor=""String_Node_Str"";
        doReadingResponseBody.addInterceptor(interceptor);
      }
      final InstrumentMethod cleanUpAndFireCallback=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (cleanUpAndFireCallback != null) {
        String interceptor=""String_Node_Str"";
        cleanUpAndFireCallback.addInterceptor(interceptor);
      }
      final InstrumentMethod onError=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (onError != null) {
        String interceptor=""String_Node_Str"";
        onError.addInterceptor(interceptor);
      }
      return target.toBytecode();
    }
  }
);
}","private void addTAsyncMethodCallEditor(){
  final String targetClassName=""String_Node_Str"";
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(ThriftConstants.FIELD_ACCESSOR_SOCKET_ADDRESS);
      target.addField(ThriftConstants.FIELD_ACCESSOR_ASYNC_MARKER_FLAG);
      target.addField(ThriftConstants.FIELD_ACCESSOR_ASYNC_TRACE_ID);
      target.addField(ThriftConstants.FIELD_ACCESSOR_ASYNC_NEXT_SPAN_ID);
      target.addField(ThriftConstants.FIELD_ACCESSOR_ASYNC_CALL_END_FLAG);
      target.addField(ThriftConstants.FIELD_ACCESSOR_ASYNC_CALL_REMOTE_ADDRESS);
      target.addGetter(ThriftConstants.FIELD_GETTER_T_NON_BLOCKING_TRANSPORT,ThriftConstants.T_ASYNC_METHOD_CALL_FIELD_TRANSPORT);
      final InstrumentMethod constructor=target.getConstructor(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      if (constructor != null) {
        String interceptor=""String_Node_Str"";
        constructor.addInterceptor(interceptor);
      }
      final InstrumentMethod start=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (start != null) {
        String interceptor=""String_Node_Str"";
        start.addInterceptor(interceptor);
      }
      final InstrumentMethod doConnecting=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (doConnecting != null) {
        String interceptor=""String_Node_Str"";
        doConnecting.addInterceptor(interceptor);
      }
      final InstrumentMethod doWritingRequestSize=target.getDeclaredMethod(""String_Node_Str"");
      if (doWritingRequestSize != null) {
        String interceptor=""String_Node_Str"";
        doWritingRequestSize.addInterceptor(interceptor);
      }
      final InstrumentMethod doWritingRequestBody=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (doWritingRequestBody != null) {
        String interceptor=""String_Node_Str"";
        doWritingRequestBody.addInterceptor(interceptor);
      }
      final InstrumentMethod doReadingResponseSize=target.getDeclaredMethod(""String_Node_Str"");
      if (doReadingResponseSize != null) {
        String interceptor=""String_Node_Str"";
        doReadingResponseSize.addInterceptor(interceptor);
      }
      final InstrumentMethod doReadingResponseBody=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (doReadingResponseBody != null) {
        String interceptor=""String_Node_Str"";
        doReadingResponseBody.addInterceptor(interceptor);
      }
      final InstrumentMethod cleanUpAndFireCallback=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (cleanUpAndFireCallback != null) {
        String interceptor=""String_Node_Str"";
        cleanUpAndFireCallback.addInterceptor(interceptor);
      }
      final InstrumentMethod onError=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (onError != null) {
        String interceptor=""String_Node_Str"";
        onError.addInterceptor(interceptor);
      }
      return target.toBytecode();
    }
  }
);
}"
53678,"private void addTTransportEditor(String tTransportClassName,final String tTransportInterceptorFqcn,final String[]... parameterTypeGroups){
  final String targetClassName=tTransportClassName;
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(SocketFieldAccessor.class.getName());
      for (      String[] parameterTypeGroup : parameterTypeGroups) {
        final InstrumentMethod constructor=target.getConstructor(parameterTypeGroup);
        if (constructor != null) {
          constructor.addInterceptor(tTransportInterceptorFqcn);
        }
      }
      return target.toBytecode();
    }
  }
);
}","private void addTTransportEditor(String tTransportClassName,final String tTransportInterceptorFqcn,final String[]... parameterTypeGroups){
  final String targetClassName=tTransportClassName;
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(ThriftConstants.FIELD_ACCESSOR_SOCKET);
      for (      String[] parameterTypeGroup : parameterTypeGroups) {
        final InstrumentMethod constructor=target.getConstructor(parameterTypeGroup);
        if (constructor != null) {
          constructor.addInterceptor(tTransportInterceptorFqcn);
        }
      }
      return target.toBytecode();
    }
  }
);
}"
53679,"private void addFrameBufferEditor(){
  final String targetClassName=""String_Node_Str"";
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(SocketFieldAccessor.class.getName());
      target.addGetter(TNonblockingTransportFieldGetter.class.getName(),ThriftConstants.FRAME_BUFFER_FIELD_TRANS_);
      if (target.hasField(ThriftConstants.FRAME_BUFFER_FIELD_IN_TRANS_)) {
        target.addGetter(TTransportFieldGetter.class.getName(),ThriftConstants.FRAME_BUFFER_FIELD_IN_TRANS_);
        final InstrumentMethod constructor=target.getConstructor(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        if (constructor != null) {
          String interceptor=""String_Node_Str"";
          constructor.addInterceptor(interceptor);
        }
      }
      if (target.hasMethod(""String_Node_Str"",""String_Node_Str"")) {
        final InstrumentMethod getInputTransport=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
        if (getInputTransport != null) {
          String interceptor=""String_Node_Str"";
          getInputTransport.addInterceptor(interceptor);
        }
      }
      return target.toBytecode();
    }
  }
);
}","private void addFrameBufferEditor(){
  final String targetClassName=""String_Node_Str"";
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(ThriftConstants.FIELD_ACCESSOR_SOCKET);
      target.addGetter(ThriftConstants.FIELD_GETTER_T_NON_BLOCKING_TRANSPORT,ThriftConstants.FRAME_BUFFER_FIELD_TRANS_);
      if (target.hasField(ThriftConstants.FRAME_BUFFER_FIELD_IN_TRANS_)) {
        target.addGetter(ThriftConstants.FIELD_GETTER_T_TRANSPORT,ThriftConstants.FRAME_BUFFER_FIELD_IN_TRANS_);
        final InstrumentMethod constructor=target.getConstructor(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        if (constructor != null) {
          String interceptor=""String_Node_Str"";
          constructor.addInterceptor(interceptor);
        }
      }
      if (target.hasMethod(""String_Node_Str"",""String_Node_Str"")) {
        final InstrumentMethod getInputTransport=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
        if (getInputTransport != null) {
          String interceptor=""String_Node_Str"";
          getInputTransport.addInterceptor(interceptor);
        }
      }
      return target.toBytecode();
    }
  }
);
}"
53680,"@Override public byte[] doInTransform(Instrumentor instrumentor,ClassLoader loader,String className,Class<?> classBeingRedefined,ProtectionDomain protectionDomain,byte[] classfileBuffer) throws InstrumentException {
  final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
  if (traceThriftClient) {
    final InstrumentMethod writeFieldStop=target.getDeclaredMethod(""String_Node_Str"");
    if (writeFieldStop != null) {
      String interceptor=""String_Node_Str"";
      writeFieldStop.addInterceptor(interceptor);
    }
  }
  if (traceThriftProcessor) {
    target.addField(ServerMarkerFlagFieldAccessor.class.getName());
    final InstrumentMethod readFieldBegin=target.getDeclaredMethod(""String_Node_Str"");
    if (readFieldBegin != null) {
      String interceptor=""String_Node_Str"";
      readFieldBegin.addInterceptor(interceptor);
    }
    final List<InstrumentMethod> readTTypes=target.getDeclaredMethods(MethodFilters.name(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    if (readTTypes != null) {
      String tTypeCommonInterceptor=""String_Node_Str"";
      for (      InstrumentMethod readTType : readTTypes) {
        if (readTType != null) {
          readTType.addInterceptor(tTypeCommonInterceptor);
        }
      }
    }
    final InstrumentMethod readMessageEnd=target.getDeclaredMethod(""String_Node_Str"");
    if (readMessageEnd != null) {
      String interceptor=""String_Node_Str"";
      readMessageEnd.addInterceptor(interceptor);
    }
    target.addField(AsyncMarkerFlagFieldAccessor.class.getName());
    final InstrumentMethod readMessageBegin=target.getDeclaredMethod(""String_Node_Str"");
    if (readMessageBegin != null) {
      String interceptor=""String_Node_Str"";
      readMessageBegin.addInterceptor(interceptor);
    }
  }
  return target.toBytecode();
}","@Override public byte[] doInTransform(Instrumentor instrumentor,ClassLoader loader,String className,Class<?> classBeingRedefined,ProtectionDomain protectionDomain,byte[] classfileBuffer) throws InstrumentException {
  final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
  if (traceThriftClient) {
    final InstrumentMethod writeFieldStop=target.getDeclaredMethod(""String_Node_Str"");
    if (writeFieldStop != null) {
      String interceptor=""String_Node_Str"";
      writeFieldStop.addInterceptor(interceptor);
    }
  }
  if (traceThriftProcessor) {
    target.addField(ThriftConstants.FIELD_ACCESSOR_SERVER_MARKER_FLAG);
    final InstrumentMethod readFieldBegin=target.getDeclaredMethod(""String_Node_Str"");
    if (readFieldBegin != null) {
      String interceptor=""String_Node_Str"";
      readFieldBegin.addInterceptor(interceptor);
    }
    final List<InstrumentMethod> readTTypes=target.getDeclaredMethods(MethodFilters.name(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    if (readTTypes != null) {
      String tTypeCommonInterceptor=""String_Node_Str"";
      for (      InstrumentMethod readTType : readTTypes) {
        if (readTType != null) {
          readTType.addInterceptor(tTypeCommonInterceptor);
        }
      }
    }
    final InstrumentMethod readMessageEnd=target.getDeclaredMethod(""String_Node_Str"");
    if (readMessageEnd != null) {
      String interceptor=""String_Node_Str"";
      readMessageEnd.addInterceptor(interceptor);
    }
    target.addField(ThriftConstants.FIELD_ACCESSOR_ASYNC_MARKER_FLAG);
    final InstrumentMethod readMessageBegin=target.getDeclaredMethod(""String_Node_Str"");
    if (readMessageBegin != null) {
      String interceptor=""String_Node_Str"";
      readMessageBegin.addInterceptor(interceptor);
    }
  }
  return target.toBytecode();
}"
53681,"private void addTBaseAsyncProcessorEditor(){
  final String targetClassName=""String_Node_Str"";
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(ServerMarkerFlagFieldAccessor.class.getName());
      target.addField(AsyncMarkerFlagFieldAccessor.class.getName());
      final InstrumentMethod process=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (process != null) {
        String interceptor=""String_Node_Str"";
        process.addInterceptor(interceptor);
      }
      return target.toBytecode();
    }
  }
);
}","private void addTBaseAsyncProcessorEditor(){
  final String targetClassName=""String_Node_Str"";
  transformTemplate.transform(targetClassName,new TransformCallback(){
    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {
      final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
      target.addField(ThriftConstants.FIELD_ACCESSOR_SERVER_MARKER_FLAG);
      target.addField(ThriftConstants.FIELD_ACCESSOR_ASYNC_MARKER_FLAG);
      final InstrumentMethod process=target.getDeclaredMethod(""String_Node_Str"",""String_Node_Str"");
      if (process != null) {
        String interceptor=""String_Node_Str"";
        process.addInterceptor(interceptor);
      }
      return target.toBytecode();
    }
  }
);
}"
53682,"@Override public void eventPerformed(PinpointServer pinpointServer,SocketStateCode stateCode){
  if (workerState.isStarted()) {
    logger.info(""String_Node_Str"",pinpointServer,stateCode);
    Map agentProperties=pinpointServer.getChannelProperties();
    if (skipAgent(agentProperties)) {
      return;
    }
    if (SocketStateCode.RUN_DUPLEX == stateCode) {
      UpdateJob job=new UpdateJob(pinpointServer,new byte[0]);
      worker.putJob(job);
      profileCluster.addClusterPoint(new PinpointServerClusterPoint(pinpointServer));
    }
 else     if (SocketStateCode.isClosed(stateCode)) {
      DeleteJob job=new DeleteJob(pinpointServer);
      worker.putJob(job);
      profileCluster.removeClusterPoint(new PinpointServerClusterPoint(pinpointServer));
    }
  }
 else {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
}","@Override public void eventPerformed(PinpointServer pinpointServer,SocketStateCode stateCode){
  if (workerState.isStarted()) {
    logger.info(""String_Node_Str"",pinpointServer,stateCode);
    Map agentProperties=pinpointServer.getChannelProperties();
    if (skipAgent(agentProperties)) {
      return;
    }
    if (SocketStateCode.RUN_DUPLEX == stateCode) {
      UpdateJob job=new UpdateJob(pinpointServer,new byte[0]);
      profileCluster.addClusterPoint(new PinpointServerClusterPoint(pinpointServer));
      worker.putJob(job);
    }
 else     if (SocketStateCode.isClosed(stateCode)) {
      DeleteJob job=new DeleteJob(pinpointServer);
      worker.putJob(job);
      profileCluster.removeClusterPoint(new PinpointServerClusterPoint(pinpointServer));
    }
  }
 else {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
}"
53683,"public void stop(){
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  this.isStarted=false;
  long startTimeMillis=System.currentTimeMillis();
  long maxWaitTimeMillis=3000;
  while (this.workerThread.isAlive()) {
    this.workerThread.interrupt();
    try {
      this.workerThread.join(100L);
      if (System.currentTimeMillis() - startTimeMillis > maxWaitTimeMillis) {
        break;
      }
    }
 catch (    InterruptedException ignored) {
    }
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}","public void stop(){
  logger.info(""String_Node_Str"");
  this.isStarted=false;
  long startTimeMillis=System.currentTimeMillis();
  long maxWaitTimeMillis=3000;
  while (workerThread != null && workerThread.isAlive()) {
    workerThread.interrupt();
    try {
      workerThread.join(100L);
      if (System.currentTimeMillis() - startTimeMillis > maxWaitTimeMillis) {
        break;
      }
    }
 catch (    InterruptedException ignored) {
    }
  }
  logger.info(""String_Node_Str"");
}"
53684,"public void start(){
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  if (!workerThread.isAlive()) {
    this.isStarted=true;
    this.workerThread.start();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  }
 else {
    logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  }
}","public void start(){
  final ThreadFactory threadFactory=new PinpointThreadFactory(this.getClass().getSimpleName(),true);
  this.workerThread=threadFactory.newThread(this);
  logger.info(""String_Node_Str"");
  if (!workerThread.isAlive()) {
    this.isStarted=true;
    this.workerThread.start();
    logger.info(""String_Node_Str"");
  }
 else {
    logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  }
}"
53685,"public StandbySpanStreamDataSendWorker(StandbySpanStreamDataFlushHandler flushHandler,StandbySpanStreamDataStorage dataStorage,long blockTime){
  this.flushHandler=flushHandler;
  this.standbySpanStreamDataStorage=dataStorage;
  this.blockTime=blockTime;
  final ThreadFactory threadFactory=new PinpointThreadFactory(this.getClass().getSimpleName(),true);
  this.workerThread=threadFactory.newThread(this);
}","public StandbySpanStreamDataSendWorker(StandbySpanStreamDataFlushHandler flushHandler,StandbySpanStreamDataStorage dataStorage,long blockTime){
  this.flushHandler=flushHandler;
  this.standbySpanStreamDataStorage=dataStorage;
  this.blockTime=blockTime;
}"
53686,"synchronized boolean addStandbySpanStreamData(SpanStreamSendData standbySpanStreamData){
  SpanStreamSendDataMode flushMode=standbySpanStreamData.getFlushMode();
  if (flushMode == SpanStreamSendDataMode.FLUSH) {
    return false;
  }
  if (standbySpanStreamData.getAvailableBufferCapacity() > 0 && standbySpanStreamData.getAvailableBufferCapacity() > 0) {
    if (priorityQueue.size() >= capacity) {
      return false;
    }
    return priorityQueue.offer(standbySpanStreamData);
  }
 else {
    return false;
  }
}","synchronized boolean addStandbySpanStreamData(SpanStreamSendData standbySpanStreamData){
  SpanStreamSendDataMode flushMode=standbySpanStreamData.getFlushMode();
  if (flushMode == SpanStreamSendDataMode.FLUSH) {
    return false;
  }
  if (standbySpanStreamData.getAvailableBufferCapacity() > 0 && standbySpanStreamData.getAvailableGatheringComponentsCount() > 0) {
    if (priorityQueue.size() >= capacity) {
      return false;
    }
    return priorityQueue.offer(standbySpanStreamData);
  }
 else {
    return false;
  }
}"
53687,"private boolean isFinished(int currentState){
  return this.state.get() == STATE_FINISHED;
}","private boolean isFinished(int currentState){
  return currentState == STATE_FINISHED;
}"
53688,"@Override public void after(Object target,Object[] args,Object result,Throwable throwable){
  if (isDebug) {
    logger.afterInterceptor(target,args,result,throwable);
  }
  Object iprot=args[1];
  if (validateInputProtocol(iprot)) {
    ((ServerMarkerFlagFieldAccessor)iprot)._$PINPOINT$_setServerMarkerFlag(false);
  }
}","@Override public void after(Object target,Object[] args,Object result,Throwable throwable){
  if (isDebug) {
    logger.afterInterceptor(target,args,result,throwable);
  }
  if (args.length != 4) {
    Object iprot=args[1];
    if (validateInputProtocol(iprot)) {
      ((ServerMarkerFlagFieldAccessor)iprot)._$PINPOINT$_setServerMarkerFlag(false);
    }
  }
}"
53689,"protected final Socket getRootSocket(Object target){
  TNonblockingTransport inTrans=((TNonblockingTransportFieldGetter)target)._$PINPOINT$_getTNonblockingTransport();
  if (inTrans != null) {
    if (inTrans instanceof SocketFieldAccessor) {
      return ((SocketFieldAccessor)inTrans)._$PINPOINT$_getSocket();
    }
 else {
      if (isDebug) {
        logger.debug(""String_Node_Str"",SocketFieldAccessor.class.getName());
      }
    }
  }
  return null;
}","protected final Socket getRootSocket(Object target){
  if (target instanceof TNonblockingTransportFieldGetter) {
    TNonblockingTransport inTrans=((TNonblockingTransportFieldGetter)target)._$PINPOINT$_getTNonblockingTransport();
    if (inTrans != null) {
      if (inTrans instanceof SocketFieldAccessor) {
        return ((SocketFieldAccessor)inTrans)._$PINPOINT$_getSocket();
      }
 else {
        if (isDebug) {
          logger.debug(""String_Node_Str"",SocketFieldAccessor.class.getName());
        }
      }
    }
  }
  return null;
}"
53690,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) @ResponseBody public Map<String,String> insertUserGroupMember(@RequestBody UserGroupMember userGroupMember){
  if (StringUtils.isEmpty(userGroupMember.getMemberId()) || StringUtils.isEmpty(userGroupMember.getMemberId())) {
    Map<String,String> result=new HashMap<>();
    result.put(""String_Node_Str"",""String_Node_Str"");
    result.put(""String_Node_Str"",""String_Node_Str"");
    return result;
  }
  userGroupService.insertMember(userGroupMember);
  Map<String,String> result=new HashMap<>();
  result.put(""String_Node_Str"",""String_Node_Str"");
  return result;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) @ResponseBody public Map<String,String> insertUserGroupMember(@RequestBody UserGroupMember userGroupMember){
  if (StringUtils.isEmpty(userGroupMember.getMemberId()) || StringUtils.isEmpty(userGroupMember.getUserGroupId())) {
    Map<String,String> result=new HashMap<>();
    result.put(""String_Node_Str"",""String_Node_Str"");
    result.put(""String_Node_Str"",""String_Node_Str"");
    return result;
  }
  userGroupService.insertMember(userGroupMember);
  Map<String,String> result=new HashMap<>();
  result.put(""String_Node_Str"",""String_Node_Str"");
  return result;
}"
53691,"@Override public void setup(ProfilerPluginSetupContext context){
  final HttpClient4PluginConfig config=new HttpClient4PluginConfig(context.getConfig());
  addHttpRequestExecutorClass();
  addDefaultHttpRequestRetryHandlerClass();
  logger.debug(""String_Node_Str"");
  addAbstractHttpClient4Class();
  addAbstractPooledConnAdapterClass();
  addManagedClientConnectionImplClass();
  logger.debug(""String_Node_Str"");
  addCloseableHttpClientClass();
  addBasicHttpClientConnectionManagerClass();
  addPoolingHttpClientConnectionManagerClass();
  logger.debug(""String_Node_Str"");
  addClosableHttpAsyncClientClass();
  addDefaultClientExchangeHandlerImplClass();
  addBasicFutureClass();
}","@Override public void setup(ProfilerPluginSetupContext context){
  addHttpRequestExecutorClass();
  addDefaultHttpRequestRetryHandlerClass();
  logger.debug(""String_Node_Str"");
  addAbstractHttpClient4Class();
  addAbstractPooledConnAdapterClass();
  addManagedClientConnectionImplClass();
  logger.debug(""String_Node_Str"");
  addCloseableHttpClientClass();
  addBasicHttpClientConnectionManagerClass();
  addPoolingHttpClientConnectionManagerClass();
  logger.debug(""String_Node_Str"");
  addClosableHttpAsyncClientClass();
  addDefaultClientExchangeHandlerImplClass();
  addBasicFutureClass();
}"
53692,"private void addInterceptor(InstrumentMethod targetMethod) throws InstrumentException {
  int id=interceptorId.get();
  if (id != -1) {
    targetMethod.addInterceptor(id);
    return;
  }
synchronized (interceptorId) {
    id=interceptorId.get();
    if (id != -1) {
      targetMethod.addInterceptor(id);
      return;
    }
    id=targetMethod.addInterceptor(""String_Node_Str"");
    interceptorId.set(id);
  }
}","private void addInterceptor(InstrumentMethod targetMethod) throws InstrumentException {
  int id=interceptorId.get();
  if (id != -1) {
    targetMethod.addInterceptor(id);
    return;
  }
synchronized (lock) {
    id=interceptorId.get();
    if (id != -1) {
      targetMethod.addInterceptor(id);
      return;
    }
    id=targetMethod.addInterceptor(""String_Node_Str"");
    interceptorId.set(id);
  }
}"
53693,"@Override public byte[] doInTransform(Instrumentor instrumentor,ClassLoader loader,String className,Class<?> classBeingRedefined,ProtectionDomain protectionDomain,byte[] classfileBuffer) throws InstrumentException {
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"",className);
  }
  try {
    InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
    if (!target.isInterceptable()) {
      return null;
    }
    List<InstrumentMethod> methodList=target.getDeclaredMethods(METHOD_FILTER);
    for (    InstrumentMethod method : methodList) {
      if (logger.isTraceEnabled()) {
        logger.trace(""String_Node_Str"",className,method.getName(),Arrays.toString(method.getParameterTypes()));
      }
      addInterceptor(method);
    }
    return target.toBytecode();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e.getMessage(),e);
    return null;
  }
}","@Override public byte[] doInTransform(Instrumentor instrumentor,ClassLoader loader,String className,Class<?> classBeingRedefined,ProtectionDomain protectionDomain,byte[] classfileBuffer) throws InstrumentException {
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"",className);
  }
  try {
    final InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);
    if (!target.isInterceptable()) {
      return null;
    }
    final List<InstrumentMethod> methodList=target.getDeclaredMethods(METHOD_FILTER);
    for (    InstrumentMethod method : methodList) {
      if (logger.isTraceEnabled()) {
        logger.trace(""String_Node_Str"",className,method.getName(),Arrays.toString(method.getParameterTypes()));
      }
      addInterceptor(method);
    }
    return target.toBytecode();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e.getMessage(),e);
    return null;
  }
}"
53694,"private void add(ClassLoader classLoader,String targetClassName,ClassFileTransformer transformer){
  ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);
  if (prev != null) {
    throw new ProfilerException(""String_Node_Str"" + classLoader + ""String_Node_Str""+ targetClassName+ ""String_Node_Str""+ prev);
  }
}","private void add(ClassLoader classLoader,String targetClassName,ClassFileTransformer transformer){
  final String jvmName=JavaAssistUtils.javaNameToJvmName(targetClassName);
  final TransformerKey key=new TransformerKey(classLoader,jvmName);
  final ClassFileTransformer prev=transformerMap.putIfAbsent(key,transformer);
  if (prev != null) {
    throw new ProfilerException(""String_Node_Str"" + classLoader + ""String_Node_Str""+ targetClassName+ ""String_Node_Str""+ prev);
  }
}"
53695,"@Override public ClassFileTransformer getTransformer(ClassLoader classLoader,String targetClassName){
  if (transformerMap.isEmpty()) {
    return null;
  }
  ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));
  if (logger.isDebugEnabled()) {
    logger.info(""String_Node_Str"",classLoader,targetClassName,transformerMap.size());
  }
  return transformer;
}","@Override public ClassFileTransformer getTransformer(ClassLoader classLoader,String targetClassName){
  if (transformerMap.isEmpty()) {
    return null;
  }
  final TransformerKey key=new TransformerKey(classLoader,targetClassName);
  final ClassFileTransformer transformer=transformerMap.remove(key);
  if (logger.isDebugEnabled()) {
    logger.info(""String_Node_Str"",classLoader,targetClassName,transformerMap.size());
  }
  return transformer;
}"
53696,"public TransformerKey(ClassLoader classLoader,String targetClassName){
  this.classLoader=classLoader;
  this.targetClassName=targetClassName;
}","public TransformerKey(ClassLoader classLoader,String targetClassName){
  if (targetClassName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.classLoader=classLoader;
  this.targetClassName=targetClassName;
}"
53697,"@Override public int hashCode(){
  return classLoader.hashCode() * 31 + targetClassName.hashCode();
}","@Override public int hashCode(){
  int result=classLoader != null ? classLoader.hashCode() : 0;
  result=31 * result + targetClassName.hashCode();
  return result;
}"
53698,"@Override public boolean equals(Object obj){
  TransformerKey other=(TransformerKey)obj;
  return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  TransformerKey that=(TransformerKey)o;
  if (classLoader != null ? !classLoader.equals(that.classLoader) : that.classLoader != null)   return false;
  return targetClassName.equals(that.targetClassName);
}"
53699,"@Override public void testFinished(Description description) throws Exception {
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"" + JUNIT_OUTPUT_DELIMITER+ description.getDisplayName());
  out.flush();
}","@Override public void testFinished(Description description) throws Exception {
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"" + JUNIT_OUTPUT_DELIMITER+ description.getDisplayName());
}"
53700,"@Override public void testRunStarted(Description description) throws Exception {
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"");
  out.flush();
}","@Override public void testRunStarted(Description description) throws Exception {
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"");
}"
53701,"private String failureToString(Failure failure){
  StringBuilder builder=new StringBuilder();
  builder.append(failure.getTestHeader());
  builder.append(JUNIT_OUTPUT_DELIMITER);
  builder.append(failure.getException().getClass().getName());
  builder.append(JUNIT_OUTPUT_DELIMITER);
  builder.append(failure.getMessage());
  builder.append(JUNIT_OUTPUT_DELIMITER);
  for (  StackTraceElement e : failure.getException().getStackTrace()) {
    builder.append(e.getClassName());
    builder.append(',');
    builder.append(e.getMethodName());
    builder.append(',');
    builder.append(e.getFileName());
    builder.append(',');
    builder.append(e.getLineNumber());
    builder.append(JUNIT_OUTPUT_DELIMITER);
  }
  return builder.toString();
}","private String failureToString(Failure failure){
  StringBuilder builder=new StringBuilder(64);
  builder.append(failure.getTestHeader());
  builder.append(JUNIT_OUTPUT_DELIMITER);
  builder.append(failure.getException().getClass().getName());
  builder.append(JUNIT_OUTPUT_DELIMITER);
  builder.append(failure.getMessage());
  builder.append(JUNIT_OUTPUT_DELIMITER);
  for (  StackTraceElement e : failure.getException().getStackTrace()) {
    builder.append(e.getClassName());
    builder.append(',');
    builder.append(e.getMethodName());
    builder.append(',');
    builder.append(e.getFileName());
    builder.append(',');
    builder.append(e.getLineNumber());
    builder.append(JUNIT_OUTPUT_DELIMITER);
  }
  return builder.toString();
}"
53702,"@Override public void testAssumptionFailure(Failure failure){
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"" + JUNIT_OUTPUT_DELIMITER+ failureToString(failure));
  out.flush();
}","@Override public void testAssumptionFailure(Failure failure){
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"" + JUNIT_OUTPUT_DELIMITER+ failureToString(failure));
}"
53703,"@Override public void testStarted(Description description) throws Exception {
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"" + JUNIT_OUTPUT_DELIMITER+ description.getDisplayName());
  out.flush();
}","@Override public void testStarted(Description description) throws Exception {
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"" + JUNIT_OUTPUT_DELIMITER+ description.getDisplayName());
}"
53704,"public PinpointPluginTestRunListener(PrintWriter out){
  this.out=out;
}","public PinpointPluginTestRunListener(OutputStream out,String encoding){
  try {
    this.out=new PrintStream(out,true,encoding);
  }
 catch (  UnsupportedEncodingException ex) {
    throw new RuntimeException(""String_Node_Str"" + ex.getMessage(),ex);
  }
}"
53705,"@Override public void testFailure(Failure failure) throws Exception {
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"" + JUNIT_OUTPUT_DELIMITER+ failureToString(failure));
  out.flush();
}","@Override public void testFailure(Failure failure) throws Exception {
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"" + JUNIT_OUTPUT_DELIMITER+ failureToString(failure));
}"
53706,"@Override public void testIgnored(Description description) throws Exception {
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"" + JUNIT_OUTPUT_DELIMITER+ description.getDisplayName());
  out.flush();
}","@Override public void testIgnored(Description description) throws Exception {
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"" + JUNIT_OUTPUT_DELIMITER+ description.getDisplayName());
}"
53707,"@Override public void testRunFinished(Result result) throws Exception {
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"");
  out.flush();
}","@Override public void testRunFinished(Result result) throws Exception {
  out.println(JUNIT_OUTPUT_DELIMITER + ""String_Node_Str"");
}"
53708,"public boolean contains(Class<?> clazz){
  Shard shard=getShard(clazz);
synchronized (shard) {
    return shard.containsKey(clazz);
  }
}","public boolean contains(Class<?> clazz){
  final Shard shard=getShard(clazz);
synchronized (shard) {
    return shard.containsKey(clazz);
  }
}"
53709,"public void put(Class<?> clazz){
  Shard shard=getShard(clazz);
synchronized (shard) {
    shard.put(clazz,Boolean.TRUE);
  }
}","public void put(Class<?> clazz){
  final Shard shard=getShard(clazz);
synchronized (shard) {
    shard.put(clazz,Boolean.TRUE);
  }
}"
53710,"void readPropertyValues(){
  final ValueResolver placeHolderResolver=new PlaceHolderResolver();
  this.profileEnable=readBoolean(""String_Node_Str"",true);
  this.collectorSpanServerIp=readString(""String_Node_Str"",DEFAULT_IP,placeHolderResolver);
  this.collectorSpanServerPort=readInt(""String_Node_Str"",9996);
  this.collectorStatServerIp=readString(""String_Node_Str"",DEFAULT_IP,placeHolderResolver);
  this.collectorStatServerPort=readInt(""String_Node_Str"",9995);
  this.collectorTcpServerIp=readString(""String_Node_Str"",DEFAULT_IP,placeHolderResolver);
  this.collectorTcpServerPort=readInt(""String_Node_Str"",9994);
  this.spanDataSenderWriteQueueSize=readInt(""String_Node_Str"",1024 * 5);
  this.spanDataSenderSocketSendBufferSize=readInt(""String_Node_Str"",1024 * 64 * 16);
  this.spanDataSenderSocketTimeout=readInt(""String_Node_Str"",1000 * 3);
  this.spanDataSenderChunkSize=readInt(""String_Node_Str"",1024 * 16);
  this.statDataSenderWriteQueueSize=readInt(""String_Node_Str"",1024 * 5);
  this.statDataSenderSocketSendBufferSize=readInt(""String_Node_Str"",1024 * 64 * 16);
  this.statDataSenderSocketTimeout=readInt(""String_Node_Str"",1000 * 3);
  this.statDataSenderChunkSize=readInt(""String_Node_Str"",1024 * 16);
  this.tcpDataSenderCommandAcceptEnable=readBoolean(""String_Node_Str"",false);
  this.traceAgentActiveThread=readBoolean(""String_Node_Str"",true);
  this.callStackMaxDepth=readInt(""String_Node_Str"",64);
  if (this.callStackMaxDepth < 2) {
    this.callStackMaxDepth=2;
  }
  this.jdbcSqlCacheSize=readInt(""String_Node_Str"",1024);
  this.traceSqlBindValue=readBoolean(""String_Node_Str"",false);
  this.tomcatHidePinpointHeader=readBoolean(""String_Node_Str"",true);
  final String tomcatExcludeURL=readString(""String_Node_Str"",""String_Node_Str"");
  if (!tomcatExcludeURL.isEmpty()) {
    this.tomcatExcludeUrlFilter=new ExcludeUrlFilter(tomcatExcludeURL);
  }
  this.tomcatRealIpHeader=readString(""String_Node_Str"",null);
  this.tomcatRealIpEmptyValue=readString(""String_Node_Str"",null);
  final String tomcatExcludeProfileMethod=readString(""String_Node_Str"",""String_Node_Str"");
  if (!tomcatExcludeProfileMethod.isEmpty()) {
  }
  this.tomcatExcludeProfileMethodFilter=new ExcludeMethodFilter(tomcatExcludeProfileMethod);
  this.apacheHttpClient3Profile=readBoolean(""String_Node_Str"",true);
  this.apacheHttpClient3ProfileCookie=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient3ProfileCookieDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.apacheHttpClient3ProfileCookieSamplingRate=readInt(""String_Node_Str"",1);
  this.apacheHttpClient3ProfileEntity=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient3ProfileEntityDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.apacheHttpClient3ProfileEntitySamplingRate=readInt(""String_Node_Str"",1);
  this.apacheHttpClient3ProfileIo=readBoolean(""String_Node_Str"",true);
  this.apacheHttpClient4Profile=readBoolean(""String_Node_Str"",true);
  this.apacheHttpClient4ProfileCookie=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient4ProfileCookieDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.apacheHttpClient4ProfileCookieSamplingRate=readInt(""String_Node_Str"",1);
  this.apacheHttpClient4ProfileEntity=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient4ProfileEntityDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.apacheHttpClient4ProfileEntitySamplingRate=readInt(""String_Node_Str"",1);
  this.apacheHttpClient4ProfileStatusCode=readBoolean(""String_Node_Str"",true);
  this.apacheHttpClient4ProfileIo=readBoolean(""String_Node_Str"",true);
  this.apacheNIOHttpClient4Profile=readBoolean(""String_Node_Str"",true);
  this.log4jLoggingTransactionInfo=readBoolean(""String_Node_Str"",false);
  this.logbackLoggingTransactionInfo=readBoolean(""String_Node_Str"",false);
  this.redis=readBoolean(""String_Node_Str"",true);
  this.redisPipeline=readBoolean(""String_Node_Str"",true);
  this.ibatis=readBoolean(""String_Node_Str"",true);
  this.mybatis=readBoolean(""String_Node_Str"",true);
  this.samplingEnable=readBoolean(""String_Node_Str"",true);
  this.samplingRate=readInt(""String_Node_Str"",1);
  this.ioBufferingEnable=readBoolean(""String_Node_Str"",true);
  this.ioBufferingBufferSize=readInt(""String_Node_Str"",20);
  this.profileJvmCollectInterval=readInt(""String_Node_Str"",1000);
  this.agentInfoSendRetryInterval=readLong(""String_Node_Str"",DEFAULT_AGENT_INFO_SEND_RETRY_INTERVAL);
  this.applicationServerType=readString(""String_Node_Str"",null);
  this.applicationTypeDetectOrder=readList(""String_Node_Str"");
  this.disabledPlugins=readList(""String_Node_Str"");
  final String profilableClass=readString(""String_Node_Str"",""String_Node_Str"");
  if (!profilableClass.isEmpty()) {
    this.profilableClassFilter=new ProfilableClassFilter(profilableClass);
  }
  this.propagateInterceptorException=readBoolean(""String_Node_Str"",false);
  logger.info(""String_Node_Str"");
}","void readPropertyValues(){
  final ValueResolver placeHolderResolver=new PlaceHolderResolver();
  this.profileEnable=readBoolean(""String_Node_Str"",true);
  this.collectorSpanServerIp=readString(""String_Node_Str"",DEFAULT_IP,placeHolderResolver);
  this.collectorSpanServerPort=readInt(""String_Node_Str"",9996);
  this.collectorStatServerIp=readString(""String_Node_Str"",DEFAULT_IP,placeHolderResolver);
  this.collectorStatServerPort=readInt(""String_Node_Str"",9995);
  this.collectorTcpServerIp=readString(""String_Node_Str"",DEFAULT_IP,placeHolderResolver);
  this.collectorTcpServerPort=readInt(""String_Node_Str"",9994);
  this.spanDataSenderWriteQueueSize=readInt(""String_Node_Str"",1024 * 5);
  this.spanDataSenderSocketSendBufferSize=readInt(""String_Node_Str"",1024 * 64 * 16);
  this.spanDataSenderSocketTimeout=readInt(""String_Node_Str"",1000 * 3);
  this.spanDataSenderChunkSize=readInt(""String_Node_Str"",1024 * 16);
  this.statDataSenderWriteQueueSize=readInt(""String_Node_Str"",1024 * 5);
  this.statDataSenderSocketSendBufferSize=readInt(""String_Node_Str"",1024 * 64 * 16);
  this.statDataSenderSocketTimeout=readInt(""String_Node_Str"",1000 * 3);
  this.statDataSenderChunkSize=readInt(""String_Node_Str"",1024 * 16);
  this.tcpDataSenderCommandAcceptEnable=readBoolean(""String_Node_Str"",false);
  this.traceAgentActiveThread=readBoolean(""String_Node_Str"",true);
  this.callStackMaxDepth=readInt(""String_Node_Str"",64);
  if (this.callStackMaxDepth < 2) {
    this.callStackMaxDepth=2;
  }
  this.jdbcSqlCacheSize=readInt(""String_Node_Str"",1024);
  this.traceSqlBindValue=readBoolean(""String_Node_Str"",false);
  this.tomcatHidePinpointHeader=readBoolean(""String_Node_Str"",true);
  final String tomcatExcludeURL=readString(""String_Node_Str"",""String_Node_Str"");
  if (!tomcatExcludeURL.isEmpty()) {
    this.tomcatExcludeUrlFilter=new ExcludeUrlFilter(tomcatExcludeURL);
  }
  this.tomcatRealIpHeader=readString(""String_Node_Str"",null);
  this.tomcatRealIpEmptyValue=readString(""String_Node_Str"",null);
  final String tomcatExcludeProfileMethod=readString(""String_Node_Str"",""String_Node_Str"");
  if (!tomcatExcludeProfileMethod.isEmpty()) {
    this.tomcatExcludeProfileMethodFilter=new ExcludeMethodFilter(tomcatExcludeProfileMethod);
  }
  this.apacheHttpClient3Profile=readBoolean(""String_Node_Str"",true);
  this.apacheHttpClient3ProfileCookie=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient3ProfileCookieDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.apacheHttpClient3ProfileCookieSamplingRate=readInt(""String_Node_Str"",1);
  this.apacheHttpClient3ProfileEntity=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient3ProfileEntityDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.apacheHttpClient3ProfileEntitySamplingRate=readInt(""String_Node_Str"",1);
  this.apacheHttpClient3ProfileIo=readBoolean(""String_Node_Str"",true);
  this.apacheHttpClient4Profile=readBoolean(""String_Node_Str"",true);
  this.apacheHttpClient4ProfileCookie=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient4ProfileCookieDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.apacheHttpClient4ProfileCookieSamplingRate=readInt(""String_Node_Str"",1);
  this.apacheHttpClient4ProfileEntity=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient4ProfileEntityDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.apacheHttpClient4ProfileEntitySamplingRate=readInt(""String_Node_Str"",1);
  this.apacheHttpClient4ProfileStatusCode=readBoolean(""String_Node_Str"",true);
  this.apacheHttpClient4ProfileIo=readBoolean(""String_Node_Str"",true);
  this.apacheNIOHttpClient4Profile=readBoolean(""String_Node_Str"",true);
  this.log4jLoggingTransactionInfo=readBoolean(""String_Node_Str"",false);
  this.logbackLoggingTransactionInfo=readBoolean(""String_Node_Str"",false);
  this.redis=readBoolean(""String_Node_Str"",true);
  this.redisPipeline=readBoolean(""String_Node_Str"",true);
  this.ibatis=readBoolean(""String_Node_Str"",true);
  this.mybatis=readBoolean(""String_Node_Str"",true);
  this.samplingEnable=readBoolean(""String_Node_Str"",true);
  this.samplingRate=readInt(""String_Node_Str"",1);
  this.ioBufferingEnable=readBoolean(""String_Node_Str"",true);
  this.ioBufferingBufferSize=readInt(""String_Node_Str"",20);
  this.profileJvmCollectInterval=readInt(""String_Node_Str"",1000);
  this.agentInfoSendRetryInterval=readLong(""String_Node_Str"",DEFAULT_AGENT_INFO_SEND_RETRY_INTERVAL);
  this.applicationServerType=readString(""String_Node_Str"",null);
  this.applicationTypeDetectOrder=readList(""String_Node_Str"");
  this.disabledPlugins=readList(""String_Node_Str"");
  final String profilableClass=readString(""String_Node_Str"",""String_Node_Str"");
  if (!profilableClass.isEmpty()) {
    this.profilableClassFilter=new ProfilableClassFilter(profilableClass);
  }
  this.propagateInterceptorException=readBoolean(""String_Node_Str"",false);
  logger.info(""String_Node_Str"");
}"
53711,"private Class<?> injectToPlainClassLoader(ClassPool pool,ClassLoader classLoader,String className) throws NotFoundException, IOException, CannotCompileException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  Class<?> c=null;
  try {
    c=classLoader.loadClass(className);
  }
 catch (  ClassNotFoundException ignore) {
  }
  if (c != null) {
    return c;
  }
  CtClass ct=pool.get(className);
  if (ct == null) {
    throw new NotFoundException(className);
  }
  CtClass superClass=ct.getSuperclass();
  if (superClass != null) {
    injectToPlainClassLoader(pool,classLoader,superClass.getName());
  }
  CtClass[] interfaces=ct.getInterfaces();
  for (  CtClass i : interfaces) {
    injectToPlainClassLoader(pool,classLoader,i.getName());
  }
  Collection<String> refs=ct.getRefClasses();
  for (  String ref : refs) {
    try {
      injectToPlainClassLoader(pool,classLoader,ref);
    }
 catch (    NotFoundException e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
  byte[] bytes=ct.toBytecode();
  return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);
}","private Class<?> injectToPlainClassLoader(ClassPool pool,ClassLoader classLoader,String className) throws NotFoundException, IOException, CannotCompileException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  Class<?> c=null;
  try {
    c=classLoader.loadClass(className);
  }
 catch (  ClassNotFoundException ex) {
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"",ex.getMessage(),ex);
    }
  }
  if (c != null) {
    return c;
  }
  final CtClass ct=pool.get(className);
  if (ct == null) {
    throw new NotFoundException(className);
  }
  final CtClass superClass=ct.getSuperclass();
  if (superClass != null) {
    injectToPlainClassLoader(pool,classLoader,superClass.getName());
  }
  final CtClass[] interfaces=ct.getInterfaces();
  for (  CtClass ctInterface : interfaces) {
    injectToPlainClassLoader(pool,classLoader,ctInterface.getName());
  }
  final Collection<String> refs=ct.getRefClasses();
  for (  String ref : refs) {
    try {
      injectToPlainClassLoader(pool,classLoader,ref);
    }
 catch (    NotFoundException e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
  final byte[] bytes=ct.toBytecode();
  return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);
}"
53712,"private Class<?> injectToBootstrapClassLoader(String className) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  if (injectedToRoot.compareAndSet(false,true)) {
    instrumentation.appendToBootstrapClassLoaderSearch(pluginJar);
    classPool.appendToBootstrapClassPath(pluginJar.getName());
  }
  return Class.forName(className,false,null);
}","private Class<?> injectToBootstrapClassLoader(String className) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
synchronized (lock) {
    if (this.injectedToRoot == false) {
      this.injectedToRoot=true;
      instrumentation.appendToBootstrapClassLoaderSearch(pluginJar);
      classPool.appendToBootstrapClassPath(pluginJar.getName());
    }
  }
  return Class.forName(className,false,null);
}"
53713,"private String getHost(HttpMethod httpMethod){
  try {
    return httpMethod.getURI().getHost();
  }
 catch (  URIException e) {
    logger.error(""String_Node_Str"",e);
  }
  return null;
}","private String getHost(HttpMethod httpMethod){
  try {
    URI url=httpMethod.getURI();
    return getEndpoint(url.getHost(),url.getPort());
  }
 catch (  URIException e) {
    logger.error(""String_Node_Str"",e);
  }
  return null;
}"
53714,"@Override public void before(Object target,Object[] args){
  if (isDebug) {
    logger.beforeInterceptor(target,""String_Node_Str"",methodDescriptor.getMethodName(),""String_Node_Str"",args);
  }
  final Trace trace=traceContext.currentRawTraceObject();
  if (trace == null) {
    return;
  }
  final HttpRequest httpRequest=getHttpRequest(target);
  final boolean sampling=trace.canSampled();
  if (!sampling) {
    if (isDebug) {
      logger.debug(""String_Node_Str"");
    }
    if (httpRequest != null) {
      httpRequest.setHeader(Header.HTTP_SAMPLED.toString(),SamplingFlagUtils.SAMPLING_RATE_FALSE);
    }
    return;
  }
  SpanEventRecorder recorder=trace.traceBlockBegin();
  final TraceId nextId=trace.getTraceId().getNextTraceId();
  recorder.recordNextSpanId(nextId.getSpanId());
  recorder.recordServiceType(HttpClient4Constants.HTTP_CLIENT_4);
  if (httpRequest != null) {
    httpRequest.setHeader(Header.HTTP_TRACE_ID.toString(),nextId.getTransactionId());
    httpRequest.setHeader(Header.HTTP_SPAN_ID.toString(),String.valueOf(nextId.getSpanId()));
    httpRequest.setHeader(Header.HTTP_PARENT_SPAN_ID.toString(),String.valueOf(nextId.getParentSpanId()));
    httpRequest.setHeader(Header.HTTP_FLAGS.toString(),String.valueOf(nextId.getFlags()));
    httpRequest.setHeader(Header.HTTP_PARENT_APPLICATION_NAME.toString(),traceContext.getApplicationName());
    httpRequest.setHeader(Header.HTTP_PARENT_APPLICATION_TYPE.toString(),Short.toString(traceContext.getServerTypeCode()));
    final NameIntValuePair<String> host=getHost(target);
    if (host != null) {
      httpRequest.setHeader(Header.HTTP_HOST.toString(),host.getName());
    }
  }
  try {
    if (isAsynchronousInvocation(target,args)) {
      final AsyncTraceId asyncTraceId=trace.getAsyncTraceId();
      recorder.recordNextAsyncId(asyncTraceId.getAsyncId());
      ((AsyncTraceIdAccessor)((ResultFutureGetter)target)._$PINPOINT$_getResultFuture())._$PINPOINT$_setAsyncTraceId(asyncTraceId);
      if (isDebug) {
        logger.debug(""String_Node_Str"",asyncTraceId);
      }
    }
  }
 catch (  Throwable t) {
    logger.warn(""String_Node_Str"",t.getMessage(),t);
  }
}","@Override public void before(Object target,Object[] args){
  if (isDebug) {
    logger.beforeInterceptor(target,""String_Node_Str"",methodDescriptor.getMethodName(),""String_Node_Str"",args);
  }
  final Trace trace=traceContext.currentRawTraceObject();
  if (trace == null) {
    return;
  }
  final HttpRequest httpRequest=getHttpRequest(target);
  final boolean sampling=trace.canSampled();
  if (!sampling) {
    if (isDebug) {
      logger.debug(""String_Node_Str"");
    }
    if (httpRequest != null) {
      httpRequest.setHeader(Header.HTTP_SAMPLED.toString(),SamplingFlagUtils.SAMPLING_RATE_FALSE);
    }
    return;
  }
  SpanEventRecorder recorder=trace.traceBlockBegin();
  final TraceId nextId=trace.getTraceId().getNextTraceId();
  recorder.recordNextSpanId(nextId.getSpanId());
  recorder.recordServiceType(HttpClient4Constants.HTTP_CLIENT_4);
  if (httpRequest != null) {
    httpRequest.setHeader(Header.HTTP_TRACE_ID.toString(),nextId.getTransactionId());
    httpRequest.setHeader(Header.HTTP_SPAN_ID.toString(),String.valueOf(nextId.getSpanId()));
    httpRequest.setHeader(Header.HTTP_PARENT_SPAN_ID.toString(),String.valueOf(nextId.getParentSpanId()));
    httpRequest.setHeader(Header.HTTP_FLAGS.toString(),String.valueOf(nextId.getFlags()));
    httpRequest.setHeader(Header.HTTP_PARENT_APPLICATION_NAME.toString(),traceContext.getApplicationName());
    httpRequest.setHeader(Header.HTTP_PARENT_APPLICATION_TYPE.toString(),Short.toString(traceContext.getServerTypeCode()));
    final NameIntValuePair<String> host=getHost(target);
    if (host != null) {
      final StringBuilder hostStringBuilder=new StringBuilder(host.getName());
      if (host.getValue() > 0) {
        hostStringBuilder.append(""String_Node_Str"").append(host.getValue());
      }
      final String hostString=hostStringBuilder.toString();
      logger.debug(""String_Node_Str"",hostString);
      httpRequest.setHeader(Header.HTTP_HOST.toString(),hostString);
    }
  }
  try {
    if (isAsynchronousInvocation(target,args)) {
      final AsyncTraceId asyncTraceId=trace.getAsyncTraceId();
      recorder.recordNextAsyncId(asyncTraceId.getAsyncId());
      ((AsyncTraceIdAccessor)((ResultFutureGetter)target)._$PINPOINT$_getResultFuture())._$PINPOINT$_setAsyncTraceId(asyncTraceId);
      if (isDebug) {
        logger.debug(""String_Node_Str"",asyncTraceId);
      }
    }
  }
 catch (  Throwable t) {
    logger.warn(""String_Node_Str"",t.getMessage(),t);
  }
}"
53715,"@Override public void before(Object target,Object[] args){
  if (isDebug) {
    logger.beforeInterceptor(target,args);
  }
  final Trace trace=traceContext.currentRawTraceObject();
  if (trace == null) {
    return;
  }
  final HttpRequest httpRequest=getHttpRequest(args);
  final boolean sampling=trace.canSampled();
  if (!sampling) {
    if (isDebug) {
      logger.debug(""String_Node_Str"");
    }
    if (httpRequest != null) {
      httpRequest.setHeader(Header.HTTP_SAMPLED.toString(),SamplingFlagUtils.SAMPLING_RATE_FALSE);
    }
    return;
  }
  final SpanEventRecorder recorder=trace.traceBlockBegin();
  TraceId nextId=trace.getTraceId().getNextTraceId();
  recorder.recordNextSpanId(nextId.getSpanId());
  recorder.recordServiceType(HttpClient4Constants.HTTP_CLIENT_4);
  if (httpRequest != null) {
    httpRequest.setHeader(Header.HTTP_TRACE_ID.toString(),nextId.getTransactionId());
    httpRequest.setHeader(Header.HTTP_SPAN_ID.toString(),String.valueOf(nextId.getSpanId()));
    httpRequest.setHeader(Header.HTTP_PARENT_SPAN_ID.toString(),String.valueOf(nextId.getParentSpanId()));
    httpRequest.setHeader(Header.HTTP_FLAGS.toString(),String.valueOf(nextId.getFlags()));
    httpRequest.setHeader(Header.HTTP_PARENT_APPLICATION_NAME.toString(),traceContext.getApplicationName());
    httpRequest.setHeader(Header.HTTP_PARENT_APPLICATION_TYPE.toString(),Short.toString(traceContext.getServerTypeCode()));
    final NameIntValuePair<String> host=getHost();
    if (host != null) {
      logger.debug(""String_Node_Str"",host.getName());
      httpRequest.setHeader(Header.HTTP_HOST.toString(),host.getName());
    }
  }
  InterceptorGroupInvocation invocation=interceptorGroup.getCurrentInvocation();
  if (invocation != null) {
    HttpCallContext callContext=(HttpCallContext)invocation.getOrCreateAttachment(new AttachmentFactory(){
      @Override public Object createAttachment(){
        return new HttpCallContext();
      }
    }
);
    invocation.setAttachment(callContext);
  }
}","@Override public void before(Object target,Object[] args){
  if (isDebug) {
    logger.beforeInterceptor(target,args);
  }
  final Trace trace=traceContext.currentRawTraceObject();
  if (trace == null) {
    return;
  }
  final HttpRequest httpRequest=getHttpRequest(args);
  final boolean sampling=trace.canSampled();
  if (!sampling) {
    if (isDebug) {
      logger.debug(""String_Node_Str"");
    }
    if (httpRequest != null) {
      httpRequest.setHeader(Header.HTTP_SAMPLED.toString(),SamplingFlagUtils.SAMPLING_RATE_FALSE);
    }
    return;
  }
  final SpanEventRecorder recorder=trace.traceBlockBegin();
  TraceId nextId=trace.getTraceId().getNextTraceId();
  recorder.recordNextSpanId(nextId.getSpanId());
  recorder.recordServiceType(HttpClient4Constants.HTTP_CLIENT_4);
  if (httpRequest != null) {
    httpRequest.setHeader(Header.HTTP_TRACE_ID.toString(),nextId.getTransactionId());
    httpRequest.setHeader(Header.HTTP_SPAN_ID.toString(),String.valueOf(nextId.getSpanId()));
    httpRequest.setHeader(Header.HTTP_PARENT_SPAN_ID.toString(),String.valueOf(nextId.getParentSpanId()));
    httpRequest.setHeader(Header.HTTP_FLAGS.toString(),String.valueOf(nextId.getFlags()));
    httpRequest.setHeader(Header.HTTP_PARENT_APPLICATION_NAME.toString(),traceContext.getApplicationName());
    httpRequest.setHeader(Header.HTTP_PARENT_APPLICATION_TYPE.toString(),Short.toString(traceContext.getServerTypeCode()));
    final NameIntValuePair<String> host=getHost();
    if (host != null) {
      final StringBuilder hostStringBuilder=new StringBuilder(host.getName());
      if (host.getValue() > 0) {
        hostStringBuilder.append(""String_Node_Str"").append(host.getValue());
      }
      final String hostString=hostStringBuilder.toString();
      logger.debug(""String_Node_Str"",hostString);
      httpRequest.setHeader(Header.HTTP_HOST.toString(),hostString);
    }
  }
  InterceptorGroupInvocation invocation=interceptorGroup.getCurrentInvocation();
  if (invocation != null) {
    HttpCallContext callContext=(HttpCallContext)invocation.getOrCreateAttachment(new AttachmentFactory(){
      @Override public Object createAttachment(){
        return new HttpCallContext();
      }
    }
);
    invocation.setAttachment(callContext);
  }
}"
53716,"@Override public void before(Object target,Object[] args){
  if (isDebug) {
    logger.beforeInterceptor(target,args);
  }
  Trace trace=traceContext.currentRawTraceObject();
  if (trace == null) {
    return;
  }
  HttpURLConnection request=(HttpURLConnection)target;
  boolean connected=((ConnectedGetter)target)._$PINPOINT$_isConnected();
  boolean connecting=(target instanceof ConnectingGetter) && ((ConnectingGetter)target)._$PINPOINT$_isConnecting();
  if (connected || connecting) {
    return;
  }
  final boolean sampling=trace.canSampled();
  if (!sampling) {
    request.setRequestProperty(Header.HTTP_SAMPLED.toString(),SamplingFlagUtils.SAMPLING_RATE_FALSE);
    return;
  }
  group.getCurrentInvocation().setAttachment(TRACE_BLOCK_BEGIN_MARKER);
  SpanEventRecorder recorder=trace.traceBlockBegin();
  TraceId nextId=trace.getTraceId().getNextTraceId();
  recorder.recordNextSpanId(nextId.getSpanId());
  final URL url=request.getURL();
  final String host=url.getHost();
  final int port=url.getPort();
  request.setRequestProperty(Header.HTTP_TRACE_ID.toString(),nextId.getTransactionId());
  request.setRequestProperty(Header.HTTP_SPAN_ID.toString(),String.valueOf(nextId.getSpanId()));
  request.setRequestProperty(Header.HTTP_PARENT_SPAN_ID.toString(),String.valueOf(nextId.getParentSpanId()));
  request.setRequestProperty(Header.HTTP_FLAGS.toString(),String.valueOf(nextId.getFlags()));
  request.setRequestProperty(Header.HTTP_PARENT_APPLICATION_NAME.toString(),traceContext.getApplicationName());
  request.setRequestProperty(Header.HTTP_PARENT_APPLICATION_TYPE.toString(),Short.toString(traceContext.getServerTypeCode()));
  if (host != null) {
    request.setRequestProperty(Header.HTTP_HOST.toString(),host);
  }
  recorder.recordServiceType(SERVICE_TYPE);
  String endpoint=getEndpoint(host,port);
  recorder.recordDestinationId(endpoint);
  recorder.recordAttribute(AnnotationKey.HTTP_URL,url.toString());
}","@Override public void before(Object target,Object[] args){
  if (isDebug) {
    logger.beforeInterceptor(target,args);
  }
  Trace trace=traceContext.currentRawTraceObject();
  if (trace == null) {
    return;
  }
  HttpURLConnection request=(HttpURLConnection)target;
  boolean connected=((ConnectedGetter)target)._$PINPOINT$_isConnected();
  boolean connecting=(target instanceof ConnectingGetter) && ((ConnectingGetter)target)._$PINPOINT$_isConnecting();
  if (connected || connecting) {
    return;
  }
  final boolean sampling=trace.canSampled();
  if (!sampling) {
    request.setRequestProperty(Header.HTTP_SAMPLED.toString(),SamplingFlagUtils.SAMPLING_RATE_FALSE);
    return;
  }
  group.getCurrentInvocation().setAttachment(TRACE_BLOCK_BEGIN_MARKER);
  SpanEventRecorder recorder=trace.traceBlockBegin();
  TraceId nextId=trace.getTraceId().getNextTraceId();
  recorder.recordNextSpanId(nextId.getSpanId());
  final URL url=request.getURL();
  final String host=url.getHost();
  final int port=url.getPort();
  String endpoint=getEndpoint(host,port);
  request.setRequestProperty(Header.HTTP_TRACE_ID.toString(),nextId.getTransactionId());
  request.setRequestProperty(Header.HTTP_SPAN_ID.toString(),String.valueOf(nextId.getSpanId()));
  request.setRequestProperty(Header.HTTP_PARENT_SPAN_ID.toString(),String.valueOf(nextId.getParentSpanId()));
  request.setRequestProperty(Header.HTTP_FLAGS.toString(),String.valueOf(nextId.getFlags()));
  request.setRequestProperty(Header.HTTP_PARENT_APPLICATION_NAME.toString(),traceContext.getApplicationName());
  request.setRequestProperty(Header.HTTP_PARENT_APPLICATION_TYPE.toString(),Short.toString(traceContext.getServerTypeCode()));
  if (host != null) {
    request.setRequestProperty(Header.HTTP_HOST.toString(),endpoint);
  }
  recorder.recordServiceType(SERVICE_TYPE);
  recorder.recordDestinationId(endpoint);
  recorder.recordAttribute(AnnotationKey.HTTP_URL,url.toString());
}"
53717,"@Override public void before(Object target,Object[] args){
  if (isDebug) {
    logger.beforeInterceptor(target,args);
  }
  final Trace trace=traceContext.currentRawTraceObject();
  if (trace == null) {
    return;
  }
  if (args.length == 0 || !(args[0] instanceof com.ning.http.client.Request)) {
    return;
  }
  final com.ning.http.client.Request httpRequest=(com.ning.http.client.Request)args[0];
  final boolean sampling=trace.canSampled();
  if (!sampling) {
    if (isDebug) {
      logger.debug(""String_Node_Str"");
    }
    if (httpRequest != null) {
      final FluentCaseInsensitiveStringsMap httpRequestHeaders=httpRequest.getHeaders();
      httpRequestHeaders.add(Header.HTTP_SAMPLED.toString(),SamplingFlagUtils.SAMPLING_RATE_FALSE);
    }
    return;
  }
  trace.traceBlockBegin();
  SpanEventRecorder recorder=trace.currentSpanEventRecorder();
  TraceId nextId=trace.getTraceId().getNextTraceId();
  recorder.recordNextSpanId(nextId.getSpanId());
  recorder.recordServiceType(NingAsyncHttpClientPlugin.ASYNC_HTTP_CLIENT);
  if (httpRequest != null) {
    final FluentCaseInsensitiveStringsMap httpRequestHeaders=httpRequest.getHeaders();
    putHeader(httpRequestHeaders,Header.HTTP_TRACE_ID.toString(),nextId.getTransactionId());
    putHeader(httpRequestHeaders,Header.HTTP_SPAN_ID.toString(),String.valueOf(nextId.getSpanId()));
    putHeader(httpRequestHeaders,Header.HTTP_PARENT_SPAN_ID.toString(),String.valueOf(nextId.getParentSpanId()));
    putHeader(httpRequestHeaders,Header.HTTP_FLAGS.toString(),String.valueOf(nextId.getFlags()));
    putHeader(httpRequestHeaders,Header.HTTP_PARENT_APPLICATION_NAME.toString(),traceContext.getApplicationName());
    putHeader(httpRequestHeaders,Header.HTTP_PARENT_APPLICATION_TYPE.toString(),Short.toString(traceContext.getServerTypeCode()));
    final String host=httpRequest.getURI().getHost();
    if (host != null) {
      putHeader(httpRequestHeaders,Header.HTTP_HOST.toString(),host);
    }
  }
}","@Override public void before(Object target,Object[] args){
  if (isDebug) {
    logger.beforeInterceptor(target,args);
  }
  final Trace trace=traceContext.currentRawTraceObject();
  if (trace == null) {
    return;
  }
  if (args.length == 0 || !(args[0] instanceof com.ning.http.client.Request)) {
    return;
  }
  final com.ning.http.client.Request httpRequest=(com.ning.http.client.Request)args[0];
  final boolean sampling=trace.canSampled();
  if (!sampling) {
    if (isDebug) {
      logger.debug(""String_Node_Str"");
    }
    if (httpRequest != null) {
      final FluentCaseInsensitiveStringsMap httpRequestHeaders=httpRequest.getHeaders();
      httpRequestHeaders.add(Header.HTTP_SAMPLED.toString(),SamplingFlagUtils.SAMPLING_RATE_FALSE);
    }
    return;
  }
  trace.traceBlockBegin();
  SpanEventRecorder recorder=trace.currentSpanEventRecorder();
  TraceId nextId=trace.getTraceId().getNextTraceId();
  recorder.recordNextSpanId(nextId.getSpanId());
  recorder.recordServiceType(NingAsyncHttpClientPlugin.ASYNC_HTTP_CLIENT);
  if (httpRequest != null) {
    final FluentCaseInsensitiveStringsMap httpRequestHeaders=httpRequest.getHeaders();
    putHeader(httpRequestHeaders,Header.HTTP_TRACE_ID.toString(),nextId.getTransactionId());
    putHeader(httpRequestHeaders,Header.HTTP_SPAN_ID.toString(),String.valueOf(nextId.getSpanId()));
    putHeader(httpRequestHeaders,Header.HTTP_PARENT_SPAN_ID.toString(),String.valueOf(nextId.getParentSpanId()));
    putHeader(httpRequestHeaders,Header.HTTP_FLAGS.toString(),String.valueOf(nextId.getFlags()));
    putHeader(httpRequestHeaders,Header.HTTP_PARENT_APPLICATION_NAME.toString(),traceContext.getApplicationName());
    putHeader(httpRequestHeaders,Header.HTTP_PARENT_APPLICATION_TYPE.toString(),Short.toString(traceContext.getServerTypeCode()));
    final String hostString=getEndpoint(httpRequest.getURI().getHost(),httpRequest.getURI().getPort());
    if (hostString != null) {
      putHeader(httpRequestHeaders,Header.HTTP_HOST.toString(),hostString);
    }
  }
}"
53718,"private boolean notCollected(double cpuLoad){
  return cpuLoad < 0;
}","private boolean notCollected(double cpuLoad){
  return cpuLoad < 0 || Double.isNaN(cpuLoad);
}"
53719,"@Override public void verifyTraces(PluginTestVerifier verifier,String expectedMessage) throws Exception {
  ExpectedTrace asyncClientInvocationTrace=event(""String_Node_Str"",""String_Node_Str"");
  Method start=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"",Selector.class);
  ExpectedTrace startTrace=event(""String_Node_Str"",start);
  Method doConnecting=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"",SelectionKey.class);
  ExpectedTrace doConnectingTrace=event(""String_Node_Str"",doConnecting);
  Method doWritingRequestSize=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"");
  ExpectedTrace doWritingRequestSizeTrace=event(""String_Node_Str"",doWritingRequestSize);
  Method doWritingRequestBody=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"",SelectionKey.class);
  ExpectedAnnotation thriftUrl=Expectations.annotation(""String_Node_Str"",SERVER_ADDRESS.getHostName() + ""String_Node_Str"" + SERVER_ADDRESS.getPort()+ ""String_Node_Str"");
  ExpectedTrace doWritingRequestBodyTrace=event(""String_Node_Str"",doWritingRequestBody,null,null,SERVER_ADDRESS.getHostName() + ""String_Node_Str"" + SERVER_ADDRESS.getPort(),thriftUrl);
  Method doReadingResponseSize=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"");
  ExpectedTrace doReadingResponseSizeTrace=event(""String_Node_Str"",doReadingResponseSize);
  Method doReadingResponseBody=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"",SelectionKey.class);
  ExpectedTrace doReadingResponseBodyTrace=event(""String_Node_Str"",doReadingResponseBody);
  Method cleanUpAndFireCallback=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"",SelectionKey.class);
  ExpectedTrace cleanUpAndFireCallbackTrace=event(""String_Node_Str"",cleanUpAndFireCallback);
  Method receiveBase=TServiceClient.class.getDeclaredMethod(""String_Node_Str"",TBase.class,String.class);
  ExpectedAnnotation thriftResult=Expectations.annotation(""String_Node_Str"",""String_Node_Str"" + expectedMessage + ""String_Node_Str"");
  ExpectedTrace receiveBaseTrace=event(""String_Node_Str"",receiveBase,thriftResult);
  Method call=TAsyncClientManager.class.getDeclaredMethod(""String_Node_Str"",TAsyncMethodCall.class);
  verifier.verifyTrace(async(Expectations.event(""String_Node_Str"",call),asyncClientInvocationTrace,startTrace,doConnectingTrace,doWritingRequestSizeTrace,doWritingRequestBodyTrace,doReadingResponseSizeTrace,doReadingResponseBodyTrace,cleanUpAndFireCallbackTrace,receiveBaseTrace));
}","@Override public void verifyTraces(PluginTestVerifier verifier,String expectedMessage) throws Exception {
  final InetSocketAddress actualServerAddress=this.environment.getServerAddress();
  ExpectedTrace asyncClientInvocationTrace=event(""String_Node_Str"",""String_Node_Str"");
  Method start=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"",Selector.class);
  ExpectedTrace startTrace=event(""String_Node_Str"",start);
  Method doConnecting=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"",SelectionKey.class);
  ExpectedTrace doConnectingTrace=event(""String_Node_Str"",doConnecting);
  Method doWritingRequestSize=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"");
  ExpectedTrace doWritingRequestSizeTrace=event(""String_Node_Str"",doWritingRequestSize);
  Method doWritingRequestBody=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"",SelectionKey.class);
  ExpectedAnnotation thriftUrl=Expectations.annotation(""String_Node_Str"",actualServerAddress.getHostName() + ""String_Node_Str"" + actualServerAddress.getPort()+ ""String_Node_Str"");
  ExpectedTrace doWritingRequestBodyTrace=event(""String_Node_Str"",doWritingRequestBody,null,null,actualServerAddress.getHostName() + ""String_Node_Str"" + actualServerAddress.getPort(),thriftUrl);
  Method doReadingResponseSize=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"");
  ExpectedTrace doReadingResponseSizeTrace=event(""String_Node_Str"",doReadingResponseSize);
  Method doReadingResponseBody=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"",SelectionKey.class);
  ExpectedTrace doReadingResponseBodyTrace=event(""String_Node_Str"",doReadingResponseBody);
  Method cleanUpAndFireCallback=TAsyncMethodCall.class.getDeclaredMethod(""String_Node_Str"",SelectionKey.class);
  ExpectedTrace cleanUpAndFireCallbackTrace=event(""String_Node_Str"",cleanUpAndFireCallback);
  Method receiveBase=TServiceClient.class.getDeclaredMethod(""String_Node_Str"",TBase.class,String.class);
  ExpectedAnnotation thriftResult=Expectations.annotation(""String_Node_Str"",""String_Node_Str"" + expectedMessage + ""String_Node_Str"");
  ExpectedTrace receiveBaseTrace=event(""String_Node_Str"",receiveBase,thriftResult);
  Method call=TAsyncClientManager.class.getDeclaredMethod(""String_Node_Str"",TAsyncMethodCall.class);
  verifier.verifyTrace(async(Expectations.event(""String_Node_Str"",call),asyncClientInvocationTrace,startTrace,doConnectingTrace,doWritingRequestSizeTrace,doWritingRequestBodyTrace,doReadingResponseSizeTrace,doReadingResponseBodyTrace,cleanUpAndFireCallbackTrace,receiveBaseTrace));
}"
53720,"private AsyncEchoTestClient(TNonblockingTransport transport) throws IOException {
  this.transport=transport;
  this.asyncClient=new EchoService.AsyncClient(PROTOCOL_FACTORY,this.asyncClientManager,this.transport);
}","private AsyncEchoTestClient(TestEnvironment environment) throws IOException {
  this.environment=environment;
  this.transport=new TNonblockingSocket(this.environment.getServerIp(),this.environment.getPort());
  this.asyncClient=new EchoService.AsyncClient(this.environment.getProtocolFactory(),this.asyncClientManager,this.transport);
}"
53721,"public Client() throws IOException {
  super(new TNonblockingSocket(SERVER_IP,SERVER_PORT));
}","public Client(TestEnvironment environment) throws IOException {
  super(environment);
}"
53722,"@Override public void verifyTraces(PluginTestVerifier verifier,String expectedMessage) throws Exception {
  Method sendBase=TServiceClient.class.getDeclaredMethod(""String_Node_Str"",String.class,TBase.class);
  ExpectedAnnotation thriftUrl=Expectations.annotation(""String_Node_Str"",SERVER_ADDRESS.getHostName() + ""String_Node_Str"" + SERVER_ADDRESS.getPort()+ ""String_Node_Str"");
  ExpectedAnnotation thriftArgs=Expectations.annotation(""String_Node_Str"",""String_Node_Str"" + expectedMessage + ""String_Node_Str"");
  Method receiveBase=TServiceClient.class.getDeclaredMethod(""String_Node_Str"",TBase.class,String.class);
  ExpectedAnnotation thriftResult=Expectations.annotation(""String_Node_Str"",""String_Node_Str"" + expectedMessage + ""String_Node_Str"");
  verifier.verifyDiscreteTrace(event(""String_Node_Str"",sendBase,null,null,SERVER_ADDRESS.getHostName() + ""String_Node_Str"" + SERVER_ADDRESS.getPort(),thriftUrl,thriftArgs),event(""String_Node_Str"",receiveBase,thriftResult));
}","@Override public void verifyTraces(PluginTestVerifier verifier,String expectedMessage) throws Exception {
  final InetSocketAddress actualServerAddress=this.environment.getServerAddress();
  Method sendBase=TServiceClient.class.getDeclaredMethod(""String_Node_Str"",String.class,TBase.class);
  ExpectedAnnotation thriftUrl=Expectations.annotation(""String_Node_Str"",actualServerAddress.getHostName() + ""String_Node_Str"" + actualServerAddress.getPort()+ ""String_Node_Str"");
  ExpectedAnnotation thriftArgs=Expectations.annotation(""String_Node_Str"",""String_Node_Str"" + expectedMessage + ""String_Node_Str"");
  Method receiveBase=TServiceClient.class.getDeclaredMethod(""String_Node_Str"",TBase.class,String.class);
  ExpectedAnnotation thriftResult=Expectations.annotation(""String_Node_Str"",""String_Node_Str"" + expectedMessage + ""String_Node_Str"");
  verifier.verifyDiscreteTrace(event(""String_Node_Str"",sendBase,null,null,actualServerAddress.getHostName() + ""String_Node_Str"" + actualServerAddress.getPort(),thriftUrl,thriftArgs),event(""String_Node_Str"",receiveBase,thriftResult));
}"
53723,"public ClientForNonblockingServer() throws TTransportException {
  super(new TFramedTransport(new TSocket(SERVER_IP,SERVER_PORT)));
}","public ClientForNonblockingServer(TestEnvironment environment) throws TTransportException {
  super(environment,new TFramedTransport(new TSocket(environment.getServerIp(),environment.getPort())));
}"
53724,"@Override public final String echo(String message) throws TException {
  TProtocol protocol=PROTOCOL_FACTORY.getProtocol(transport);
  EchoService.Client client=new EchoService.Client(protocol);
  return client.echo(message);
}","@Override public final String echo(String message) throws TException {
  TProtocol protocol=this.environment.getProtocolFactory().getProtocol(transport);
  EchoService.Client client=new EchoService.Client(protocol);
  return client.echo(message);
}"
53725,"public Client() throws TTransportException {
  super(new TSocket(SERVER_IP,SERVER_PORT));
}","public Client(TestEnvironment environment) throws TTransportException {
  super(environment,new TSocket(environment.getServerIp(),environment.getPort()));
}"
53726,"private SyncEchoTestClient(TTransport transport) throws TTransportException {
  this.transport=transport;
  this.transport.open();
}","private SyncEchoTestClient(TestEnvironment environment,TTransport transport) throws TTransportException {
  this.environment=environment;
  this.transport=transport;
  this.transport.open();
}"
53727,"@Override public void before(Object target,Object[] args){
  if (isDebug) {
    logger.beforeInterceptor(target,args);
  }
  Trace trace=traceContext.currentTraceObject();
  if (trace == null) {
    trace=traceContext.newTraceObject();
    if (!trace.canSampled()) {
      if (isDebug) {
        logger.debug(""String_Node_Str"",trace);
      }
      return;
    }
    if (isDebug) {
      logger.debug(""String_Node_Str"",trace);
    }
    SpanRecorder recorder=trace.getSpanRecorder();
    recordRootSpan(recorder);
  }
  trace.traceBlockBegin();
}","@Override public void before(Object target,Object[] args){
  if (isDebug) {
    logger.beforeInterceptor(target,args);
  }
  Trace trace=traceContext.currentTraceObject();
  if (trace == null) {
    trace=traceContext.newTraceObject(TraceType.USER);
    if (!trace.canSampled()) {
      if (isDebug) {
        logger.debug(""String_Node_Str"",trace);
      }
      return;
    }
    if (isDebug) {
      logger.debug(""String_Node_Str"",trace);
    }
    SpanRecorder recorder=trace.getSpanRecorder();
    recordRootSpan(recorder);
  }
  trace.traceBlockBegin();
}"
53728,"@Override public void after(Object target,Object[] args,Object result,Throwable throwable){
  if (isDebug) {
    logger.afterInterceptor(target,args);
  }
  final Trace trace=traceContext.currentTraceObject();
  if (trace == null) {
    return;
  }
  try {
    SpanEventRecorder recorder=trace.currentSpanEventRecorder();
    recorder.recordApi(descriptor);
    recorder.recordServiceType(ServiceType.USER_INCLUDE);
    recorder.recordException(throwable);
  }
  finally {
    trace.traceBlockEnd();
    if (trace.getTraceType() == TraceType.USER && trace.isRootStack()) {
      trace.close();
      traceContext.removeTraceObject();
    }
  }
}","@Override public void after(Object target,Object[] args,Object result,Throwable throwable){
  if (isDebug) {
    logger.afterInterceptor(target,args);
  }
  final Trace trace=traceContext.currentTraceObject();
  if (trace == null) {
    return;
  }
  try {
    SpanEventRecorder recorder=trace.currentSpanEventRecorder();
    recorder.recordApi(descriptor);
    recorder.recordServiceType(ServiceType.USER_INCLUDE);
    recorder.recordException(throwable);
  }
  finally {
    trace.traceBlockEnd();
    if (isDebug) {
      logger.debug(""String_Node_Str"",trace.getCallStackFrameId());
    }
    if (trace.getTraceType() == TraceType.USER && trace.isRootStack()) {
      if (isDebug) {
        logger.debug(""String_Node_Str"",trace);
      }
      trace.close();
      traceContext.removeTraceObject();
    }
  }
}"
53729,"@Override public void setup(ProfilerPluginContext context){
  context.addApplicationTypeDetector(new JettyDetector());
  JettyConfiguration config=new JettyConfiguration(context.getConfig());
  addServerInterceptor(context,config);
}","@Override public void setup(ProfilerPluginContext context){
  context.addApplicationTypeDetector(new JettyDetector());
  JettyConfiguration config=new JettyConfiguration(context.getConfig());
  addServerInterceptor(context,config);
  addRequestEditor(context);
}"
53730,"private String getRequestParameter(HttpServletRequest request,int eachLimit,int totalLimit){
  Enumeration<?> attrs=request.getParameterNames();
  final StringBuilder params=new StringBuilder(64);
  while (attrs.hasMoreElements()) {
    if (params.length() != 0) {
      params.append('&');
    }
    if (params.length() > totalLimit) {
      params.append(""String_Node_Str"");
      return params.toString();
    }
    String key=attrs.nextElement().toString();
    params.append(StringUtils.drop(key,eachLimit));
    params.append(""String_Node_Str"");
    Object value=request.getParameter(key);
    if (value != null) {
      params.append(StringUtils.drop(StringUtils.toString(value),eachLimit));
    }
  }
  return params.toString();
}","private String getRequestParameter(Request request,int eachLimit,int totalLimit){
  Enumeration<?> attrs=request.getParameterNames();
  final StringBuilder params=new StringBuilder(64);
  while (attrs.hasMoreElements()) {
    if (params.length() != 0) {
      params.append('&');
    }
    if (params.length() > totalLimit) {
      params.append(""String_Node_Str"");
      return params.toString();
    }
    String key=attrs.nextElement().toString();
    params.append(StringUtils.drop(key,eachLimit));
    params.append(""String_Node_Str"");
    Object value=request.getParameter(key);
    if (value != null) {
      params.append(StringUtils.drop(StringUtils.toString(value),eachLimit));
    }
  }
  return params.toString();
}"
53731,"private Trace createTrace(Object target,Object[] args){
  final HttpChannel<?> channel=(HttpChannel<?>)args[0];
  final HttpServletRequest request=(HttpServletRequest)channel.getRequest();
  final String requestURI=request.getRequestURI();
  if (excludeUrlFilter.filter(requestURI)) {
    if (isTrace) {
      logger.trace(""String_Node_Str"",requestURI);
    }
    return null;
  }
  final boolean sampling=samplingEnable(request);
  if (!sampling) {
    final Trace trace=traceContext.disableSampling();
    if (isDebug) {
      logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
    }
    return trace;
  }
  final TraceId traceId=populateTraceIdFromRequest(request);
  if (traceId != null) {
    final Trace trace=traceContext.continueTraceObject(traceId);
    if (trace.canSampled()) {
      SpanRecorder recorder=trace.getSpanRecorder();
      recordRootSpan(recorder,request);
      setTraceMetadata(request,trace);
      if (isDebug) {
        logger.debug(""String_Node_Str"",new Object[]{traceId,request.getRequestURI(),request.getRemoteAddr()});
      }
    }
 else {
      if (isDebug) {
        logger.debug(""String_Node_Str"",new Object[]{traceId,request.getRequestURI(),request.getRemoteAddr()});
      }
    }
    return trace;
  }
 else {
    final Trace trace=traceContext.newTraceObject();
    if (trace.canSampled()) {
      SpanRecorder recorder=trace.getSpanRecorder();
      recordRootSpan(recorder,request);
      setTraceMetadata(request,trace);
      if (isDebug) {
        logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
      }
    }
 else {
      if (isDebug) {
        logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
      }
    }
    return trace;
  }
}","private Trace createTrace(Object target,Object[] args){
  final HttpChannel<?> channel=(HttpChannel<?>)args[0];
  final Request request=channel.getRequest();
  final String requestURI=request.getRequestURI();
  if (excludeUrlFilter.filter(requestURI)) {
    if (isTrace) {
      logger.trace(""String_Node_Str"",requestURI);
    }
    return null;
  }
  final boolean sampling=samplingEnable(request);
  if (!sampling) {
    final Trace trace=traceContext.disableSampling();
    if (isDebug) {
      logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
    }
    return trace;
  }
  final TraceId traceId=populateTraceIdFromRequest(request);
  if (traceId != null) {
    final Trace trace=traceContext.continueTraceObject(traceId);
    if (trace.canSampled()) {
      SpanRecorder recorder=trace.getSpanRecorder();
      recordRootSpan(recorder,request);
      setTraceMetadata(request,trace);
      if (isDebug) {
        logger.debug(""String_Node_Str"",new Object[]{traceId,request.getRequestURI(),request.getRemoteAddr()});
      }
    }
 else {
      if (isDebug) {
        logger.debug(""String_Node_Str"",new Object[]{traceId,request.getRequestURI(),request.getRemoteAddr()});
      }
    }
    return trace;
  }
 else {
    final Trace trace=traceContext.newTraceObject();
    if (trace.canSampled()) {
      SpanRecorder recorder=trace.getSpanRecorder();
      recordRootSpan(recorder,request);
      setTraceMetadata(request,trace);
      if (isDebug) {
        logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
      }
    }
 else {
      if (isDebug) {
        logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
      }
    }
    return trace;
  }
}"
53732,"private void setTraceMetadata(final HttpServletRequest request,final Trace trace){
  if (traceAccessor.isApplicable(request)) {
    traceAccessor.set(request,trace);
  }
}","private void setTraceMetadata(final Request request,final Trace trace){
  if (traceAccessor.isApplicable(request)) {
    traceAccessor.set(request,trace);
  }
}"
53733,"private void recordRootSpan(final SpanRecorder recorder,final HttpServletRequest request){
  recorder.recordServiceType(JettyConstants.JETTY);
  final String requestURL=request.getRequestURI();
  recorder.recordRpcName(requestURL);
  final int port=request.getServerPort();
  final String endPoint=request.getServerName() + ""String_Node_Str"" + port;
  recorder.recordEndPoint(endPoint);
  final String remoteAddr=request.getRemoteAddr();
  recorder.recordRemoteAddress(remoteAddr);
  if (!recorder.isRoot()) {
    recordParentInfo(recorder,request);
  }
  recorder.recordApi(JETTY_SYNC_API_TAG);
}","private void recordRootSpan(final SpanRecorder recorder,final Request request){
  recorder.recordServiceType(JettyConstants.JETTY);
  final String requestURL=request.getRequestURI();
  recorder.recordRpcName(requestURL);
  final int port=request.getServerPort();
  final String endPoint=request.getServerName() + ""String_Node_Str"" + port;
  recorder.recordEndPoint(endPoint);
  final String remoteAddr=request.getRemoteAddr();
  recorder.recordRemoteAddress(remoteAddr);
  if (!recorder.isRoot()) {
    recordParentInfo(recorder,request);
  }
  recorder.recordApi(JETTY_SYNC_API_TAG);
}"
53734,"private boolean samplingEnable(HttpServletRequest request){
  final String samplingFlag=request.getHeader(Header.HTTP_SAMPLED.toString());
  if (isDebug) {
    logger.debug(""String_Node_Str"",samplingFlag);
  }
  return SamplingFlagUtils.isSamplingFlag(samplingFlag);
}","private boolean samplingEnable(Request request){
  final String samplingFlag=request.getHeader(Header.HTTP_SAMPLED.toString());
  if (isDebug) {
    logger.debug(""String_Node_Str"",samplingFlag);
  }
  return SamplingFlagUtils.isSamplingFlag(samplingFlag);
}"
53735,"private void recordParentInfo(SpanRecorder recorder,HttpServletRequest request){
  String parentApplicationName=request.getHeader(Header.HTTP_PARENT_APPLICATION_NAME.toString());
  if (parentApplicationName != null) {
    final String host=request.getHeader(Header.HTTP_HOST.toString());
    if (host != null) {
      recorder.recordAcceptorHost(host);
    }
 else {
      recorder.recordAcceptorHost(NetworkUtils.getHostFromURL(request.getRequestURL().toString()));
    }
    final String type=request.getHeader(Header.HTTP_PARENT_APPLICATION_TYPE.toString());
    final short parentApplicationType=NumberUtils.parseShort(type,ServiceType.UNDEFINED.getCode());
    recorder.recordParentApplication(parentApplicationName,parentApplicationType);
  }
}","private void recordParentInfo(SpanRecorder recorder,Request request){
  String parentApplicationName=request.getHeader(Header.HTTP_PARENT_APPLICATION_NAME.toString());
  if (parentApplicationName != null) {
    final String host=request.getHeader(Header.HTTP_HOST.toString());
    if (host != null) {
      recorder.recordAcceptorHost(host);
    }
 else {
      recorder.recordAcceptorHost(NetworkUtils.getHostFromURL(request.getRequestURL().toString()));
    }
    final String type=request.getHeader(Header.HTTP_PARENT_APPLICATION_TYPE.toString());
    final short parentApplicationType=NumberUtils.parseShort(type,ServiceType.UNDEFINED.getCode());
    recorder.recordParentApplication(parentApplicationName,parentApplicationType);
  }
}"
53736,"@Override public void after(Object target,Object[] args,Object result,Throwable throwable){
  if (isDebug) {
    logger.afterInterceptor(target,args,result,throwable);
  }
  final Trace trace=traceContext.currentRawTraceObject();
  if (trace == null) {
    return;
  }
  if (!trace.canSampled()) {
    traceContext.removeTraceObject();
    return;
  }
  try {
    SpanEventRecorder recorder=trace.currentSpanEventRecorder();
    final HttpChannel<?> channel=(HttpChannel<?>)args[0];
    final HttpServletRequest request=(HttpServletRequest)channel.getRequest();
    final String parameters=getRequestParameter(request,64,512);
    if (parameters != null && parameters.length() > 0) {
      recorder.recordAttribute(AnnotationKey.HTTP_PARAM,parameters);
    }
    recorder.recordApi(methodDescriptor);
    recorder.recordException(throwable);
  }
 catch (  Throwable th) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"",th.getMessage(),th);
    }
  }
 finally {
    traceContext.removeTraceObject();
    deleteTrace(trace,target,args,result,throwable);
  }
}","@Override public void after(Object target,Object[] args,Object result,Throwable throwable){
  if (isDebug) {
    logger.afterInterceptor(target,args,result,throwable);
  }
  final Trace trace=traceContext.currentRawTraceObject();
  if (trace == null) {
    return;
  }
  if (!trace.canSampled()) {
    traceContext.removeTraceObject();
    return;
  }
  try {
    SpanEventRecorder recorder=trace.currentSpanEventRecorder();
    final HttpChannel<?> channel=(HttpChannel<?>)args[0];
    final Request request=channel.getRequest();
    final String parameters=getRequestParameter(request,64,512);
    if (parameters != null && parameters.length() > 0) {
      recorder.recordAttribute(AnnotationKey.HTTP_PARAM,parameters);
    }
    recorder.recordApi(methodDescriptor);
    recorder.recordException(throwable);
  }
 catch (  Throwable th) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"",th.getMessage(),th);
    }
  }
 finally {
    traceContext.removeTraceObject();
    deleteTrace(trace,target,args,result,throwable);
  }
}"
53737,"private void deleteTrace(Trace trace,Object target,Object[] args,Object result,Throwable throwable){
  trace.traceBlockEnd();
  trace.close();
  final HttpChannel<?> channel=(HttpChannel<?>)args[0];
  final HttpServletRequest request=(HttpServletRequest)channel.getRequest();
  setTraceMetadata(request,null);
}","private void deleteTrace(Trace trace,Object target,Object[] args,Object result,Throwable throwable){
  trace.traceBlockEnd();
  trace.close();
  final HttpChannel<?> channel=(HttpChannel<?>)args[0];
  final Request request=channel.getRequest();
  setTraceMetadata(request,null);
}"
53738,"/** 
 * Populate source trace from HTTP Header.
 * @param request
 * @return TraceId when it is possible to get a transactionId from Http header. if not possible return null
 */
private TraceId populateTraceIdFromRequest(HttpServletRequest request){
  String transactionId=request.getHeader(Header.HTTP_TRACE_ID.toString());
  if (transactionId != null) {
    long parentSpanID=NumberUtils.parseLong(request.getHeader(Header.HTTP_PARENT_SPAN_ID.toString()),SpanId.NULL);
    long spanID=NumberUtils.parseLong(request.getHeader(Header.HTTP_SPAN_ID.toString()),SpanId.NULL);
    short flags=NumberUtils.parseShort(request.getHeader(Header.HTTP_FLAGS.toString()),(short)0);
    final TraceId id=traceContext.createTraceId(transactionId,parentSpanID,spanID,flags);
    if (isDebug) {
      logger.debug(""String_Node_Str"",id);
    }
    return id;
  }
 else {
    return null;
  }
}","/** 
 * Populate source trace from HTTP Header.
 * @param request
 * @return TraceId when it is possible to get a transactionId from Http header. if not possible return null
 */
private TraceId populateTraceIdFromRequest(Request request){
  String transactionId=request.getHeader(Header.HTTP_TRACE_ID.toString());
  if (transactionId != null) {
    long parentSpanID=NumberUtils.parseLong(request.getHeader(Header.HTTP_PARENT_SPAN_ID.toString()),SpanId.NULL);
    long spanID=NumberUtils.parseLong(request.getHeader(Header.HTTP_SPAN_ID.toString()),SpanId.NULL);
    short flags=NumberUtils.parseShort(request.getHeader(Header.HTTP_FLAGS.toString()),(short)0);
    final TraceId id=traceContext.createTraceId(transactionId,parentSpanID,spanID,flags);
    if (isDebug) {
      logger.debug(""String_Node_Str"",id);
    }
    return id;
  }
 else {
    return null;
  }
}"
53739,"@Test public void testSerialize() throws Exception {
  PinpointObjectMapper mapper=new PinpointObjectMapper();
  mapper.afterPropertiesSet();
  AgentInfoBo.Builder agentInfoBuilder=new AgentInfoBo.Builder();
  agentInfoBuilder.setAgentId(""String_Node_Str"");
  agentInfoBuilder.setServiceTypeCode(ServiceType.TEST_STAND_ALONE.getCode());
  agentInfoBuilder.setServiceType(ServiceType.TEST_STAND_ALONE);
  agentInfoBuilder.setHostName(""String_Node_Str"");
  AgentInfoBo agentInfoBo=agentInfoBuilder.build();
  HashSet<AgentInfoBo> set=new HashSet<AgentInfoBo>();
  set.add(agentInfoBo);
  ServerBuilder builder=new ServerBuilder(null);
  builder.addAgentInfo(set);
  ServerInstanceList serverInstanceList=builder.build();
  ObjectWriter objectWriter=mapper.writerWithDefaultPrettyPrinter();
  String json=objectWriter.writeValueAsString(serverInstanceList);
  logger.debug(json);
}","@Test public void testSerialize() throws Exception {
  PinpointObjectMapper mapper=new PinpointObjectMapper();
  mapper.afterPropertiesSet();
  AgentInfoBo agentInfoBo=ServerInstanceListTest.createAgentInfo(""String_Node_Str"",""String_Node_Str"");
  HashSet<AgentInfoBo> agentInfoBoSet=new HashSet<AgentInfoBo>();
  agentInfoBoSet.add(agentInfoBo);
  ServerBuilder builder=new ServerBuilder();
  builder.addAgentInfo(agentInfoBoSet);
  ServerInstanceList serverInstanceList=builder.build();
  ObjectWriter objectWriter=mapper.writerWithDefaultPrettyPrinter();
  String json=objectWriter.writeValueAsString(serverInstanceList);
  logger.debug(json);
}"
53740,"private String toBindVariable(Map<Integer,String> bindValue){
  final String[] temp=new String[bindValue.size()];
  for (  Map.Entry<Integer,String> entry : bindValue.entrySet()) {
    Integer key=entry.getKey() - 1;
    if (temp.length <= key) {
      continue;
    }
    temp[key]=entry.getValue();
  }
  return BindValueUtils.bindValueToString(temp,maxSqlBindValueLength);
}","private String toBindVariable(Map<Integer,String> bindValue){
  return BindValueUtils.bindValueToString(bindValue,maxSqlBindValueLength);
}"
53741,"private String toBindVariable(Map<Integer,String> bindValue){
  final String[] temp=new String[bindValue.size()];
  for (  Map.Entry<Integer,String> entry : bindValue.entrySet()) {
    Integer key=entry.getKey() - 1;
    if (temp.length < key) {
      continue;
    }
    temp[key]=entry.getValue();
  }
  return BindValueUtils.bindValueToString(temp,maxSqlBindValueLength);
}","private String toBindVariable(Map<Integer,String> bindValue){
  return BindValueUtils.bindValueToString(bindValue,maxSqlBindValueLength);
}"
53742,"@Test public void testBindValueToString_null() throws Exception {
  String result=BindValueUtils.bindValueToString(null,10);
  Assert.assertEquals(""String_Node_Str"",result);
}","@Test public void testBindValueToString_null() throws Exception {
  String result=BindValueUtils.bindValueToString((String[])null,10);
  Assert.assertEquals(""String_Node_Str"",result);
}"
53743,"private void recordRootSpan(final Trace trace,final ThriftRequestProperty parentTraceInfo){
  SpanRecorder recorder=trace.getSpanRecorder();
  recorder.markBeforeTime();
  recorder.recordServiceType(THRIFT_SERVER);
  recorder.recordApi(this.thriftServerEntryMethodDescriptor);
  if (!trace.isRoot()) {
    recordParentInfo(recorder,parentTraceInfo);
  }
  trace.traceBlockBegin();
}","private void recordRootSpan(final Trace trace,final ThriftRequestProperty parentTraceInfo){
  SpanRecorder recorder=trace.getSpanRecorder();
  recorder.markBeforeTime();
  recorder.recordServiceType(THRIFT_SERVER);
  recorder.recordApi(this.thriftServerEntryMethodDescriptor);
  if (!trace.isRoot()) {
    recordParentInfo(recorder,parentTraceInfo);
  }
}"
53744,"private void appendServerInfo(Node node,LinkDataDuplexMap linkDataDuplexMap,AgentInfoService agentInfoService){
  final ServiceType nodeServiceType=node.getServiceType();
  if (nodeServiceType.isUnknown()) {
    return;
  }
  if (nodeServiceType.isTerminal()) {
    ServerBuilder builder=new ServerBuilder(matcherGroup);
    for (    LinkData linkData : linkDataDuplexMap.getSourceLinkDataList()) {
      Application toApplication=linkData.getToApplication();
      if (node.getApplication().equals(toApplication)) {
        builder.addCallHistogramList(linkData.getTargetList());
      }
    }
    ServerInstanceList serverInstanceList=builder.build();
    node.setServerInstanceList(serverInstanceList);
  }
 else   if (nodeServiceType.isWas()) {
    Set<AgentInfoBo> agentList=agentInfoService.selectAgent(node.getApplication().getName(),range);
    if (agentList.isEmpty()) {
      return;
    }
    logger.debug(""String_Node_Str"",node.getApplication(),agentList);
    ServerBuilder builder=new ServerBuilder(matcherGroup);
    agentList=filterAgentInfoByResponseData(agentList,node);
    builder.addAgentInfo(agentList);
    ServerInstanceList serverInstanceList=builder.build();
    node.setServerInstanceList(serverInstanceList);
  }
 else {
    node.setServerInstanceList(new ServerInstanceList());
  }
}","private void appendServerInfo(Node node,LinkDataDuplexMap linkDataDuplexMap,AgentInfoService agentInfoService){
  final ServiceType nodeServiceType=node.getServiceType();
  if (nodeServiceType.isUnknown()) {
    return;
  }
  if (nodeServiceType.isTerminal()) {
    ServerBuilder builder=new ServerBuilder(matcherGroup);
    for (    LinkData linkData : linkDataDuplexMap.getSourceLinkDataList()) {
      Application toApplication=linkData.getToApplication();
      if (node.getApplication().equals(toApplication)) {
        builder.addCallHistogramList(linkData.getTargetList());
      }
    }
    ServerInstanceList serverInstanceList=builder.build();
    node.setServerInstanceList(serverInstanceList);
  }
 else   if (nodeServiceType.isWas()) {
    Set<AgentInfoBo> agentList=agentInfoService.selectAgent(node.getApplication().getName(),range);
    if (agentList.isEmpty()) {
      logger.warn(""String_Node_Str"",node.getApplication());
      node.setServerInstanceList(new ServerInstanceList());
      return;
    }
    logger.debug(""String_Node_Str"",node.getApplication(),agentList);
    ServerBuilder builder=new ServerBuilder(matcherGroup);
    agentList=filterAgentInfoByResponseData(agentList,node);
    builder.addAgentInfo(agentList);
    ServerInstanceList serverInstanceList=builder.build();
    node.setServerInstanceList(serverInstanceList);
  }
 else {
    node.setServerInstanceList(new ServerInstanceList());
  }
}"
53745,"public void setServerInstanceList(ServerInstanceList serverInstanceList){
  this.serverInstanceList=serverInstanceList;
}","public void setServerInstanceList(ServerInstanceList serverInstanceList){
  if (serverInstanceList == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.serverInstanceList=serverInstanceList;
}"
53746,"private String getExceptionStackTrace(Throwable throwable){
  if (throwable == null) {
    return UNKNOWN;
  }
  StringBuilder stackTrace=new StringBuilder(128);
  stackTrace.append(throwable.toString()).append(""String_Node_Str"");
  for (  StackTraceElement traceElement : throwable.getStackTrace()) {
    stackTrace.append(""String_Node_Str"" + traceElement.toString()).append(""String_Node_Str"");
  }
  return stackTrace.toString();
}","private String getExceptionStackTrace(Throwable throwable){
  if (throwable == null) {
    return UNKNOWN;
  }
  StringBuilder stackTrace=new StringBuilder(128);
  stackTrace.append(throwable.toString());
  stackTrace.append(""String_Node_Str"");
  for (  StackTraceElement traceElement : throwable.getStackTrace()) {
    stackTrace.append(""String_Node_Str"" + traceElement.toString());
    stackTrace.append(""String_Node_Str"");
  }
  return stackTrace.toString();
}"
53747,"@ExceptionHandler(value=Exception.class) public ModelAndView defaultErrorHandler(HttpServletRequest request,Exception exception) throws Exception {
  ModelAndView mav=new ModelAndView();
  mav.addObject(""String_Node_Str"",createExceptionResource(request,exception));
  mav.setViewName(DEFAULT_ERROR_VIEW);
  return mav;
}","@ExceptionHandler(value=Exception.class) public ModelAndView defaultErrorHandler(HttpServletRequest request,Exception exception) throws Exception {
  logger.warn(""String_Node_Str"",exception.getMessage(),exception);
  ModelAndView mav=new ModelAndView();
  mav.addObject(""String_Node_Str"",createExceptionResource(request,exception));
  mav.setViewName(DEFAULT_ERROR_VIEW);
  return mav;
}"
53748,"@Override public void serialize(Link link,JsonGenerator jgen,SerializerProvider provider) throws IOException, JsonProcessingException {
  jgen.writeStartObject();
  jgen.writeStringField(""String_Node_Str"",link.getLinkName());
  jgen.writeStringField(""String_Node_Str"",link.getFrom().getNodeName());
  jgen.writeStringField(""String_Node_Str"",link.getTo().getNodeName());
  writeSimpleNode(""String_Node_Str"",link.getFrom(),jgen);
  writeSimpleNode(""String_Node_Str"",link.getTo(),jgen);
  Application filterApplication=link.getFilterApplication();
  jgen.writeStringField(""String_Node_Str"",filterApplication.getName());
  jgen.writeNumberField(""String_Node_Str"",filterApplication.getServiceTypeCode());
  jgen.writeStringField(""String_Node_Str"",filterApplication.getServiceType().getName());
  if (link.isWasToWasLink()) {
    writeWasToWasTargetRpcList(link,jgen);
  }
  Histogram histogram=link.getHistogram();
  jgen.writeNumberField(""String_Node_Str"",histogram.getTotalCount());
  jgen.writeNumberField(""String_Node_Str"",histogram.getErrorCount());
  jgen.writeNumberField(""String_Node_Str"",histogram.getSlowCount());
  jgen.writeObjectField(""String_Node_Str"",histogram);
  writeAgentHistogram(""String_Node_Str"",link.getSourceList(),jgen);
  writeAgentHistogram(""String_Node_Str"",link.getTargetList(),jgen);
  writeTimeSeriesHistogram(link,jgen);
  writeSourceAgentTimeSeriesHistogram(link,jgen);
  jgen.writeBooleanField(""String_Node_Str"",link.getLinkAlert());
  jgen.writeEndObject();
}","@Override public void serialize(Link link,JsonGenerator jgen,SerializerProvider provider) throws IOException, JsonProcessingException {
  jgen.writeStartObject();
  jgen.writeStringField(""String_Node_Str"",link.getLinkName());
  jgen.writeStringField(""String_Node_Str"",link.getFrom().getNodeName());
  jgen.writeStringField(""String_Node_Str"",link.getTo().getNodeName());
  writeAgentId(""String_Node_Str"",link.getFrom(),jgen);
  writeAgentId(""String_Node_Str"",link.getTo(),jgen);
  writeSimpleNode(""String_Node_Str"",link.getFrom(),jgen);
  writeSimpleNode(""String_Node_Str"",link.getTo(),jgen);
  Application filterApplication=link.getFilterApplication();
  jgen.writeStringField(""String_Node_Str"",filterApplication.getName());
  jgen.writeNumberField(""String_Node_Str"",filterApplication.getServiceTypeCode());
  jgen.writeStringField(""String_Node_Str"",filterApplication.getServiceType().getName());
  if (link.isWasToWasLink()) {
    writeWasToWasTargetRpcList(link,jgen);
  }
  Histogram histogram=link.getHistogram();
  jgen.writeNumberField(""String_Node_Str"",histogram.getTotalCount());
  jgen.writeNumberField(""String_Node_Str"",histogram.getErrorCount());
  jgen.writeNumberField(""String_Node_Str"",histogram.getSlowCount());
  jgen.writeObjectField(""String_Node_Str"",histogram);
  writeAgentHistogram(""String_Node_Str"",link.getSourceList(),jgen);
  writeAgentHistogram(""String_Node_Str"",link.getTargetList(),jgen);
  writeTimeSeriesHistogram(link,jgen);
  writeSourceAgentTimeSeriesHistogram(link,jgen);
  jgen.writeBooleanField(""String_Node_Str"",link.getLinkAlert());
  jgen.writeEndObject();
}"
53749,"/** 
 * info lookup for a selected transaction
 * @param traceIdParam
 * @param focusTimestamp
 * @return
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ModelAndView transactionInfo(@RequestParam(""String_Node_Str"") String traceIdParam,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") long focusTimestamp,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") int viewVersion,HttpServletResponse response){
  logger.debug(""String_Node_Str"",traceIdParam);
  final TransactionId traceId=new TransactionId(traceIdParam);
  final SpanResult spanResult=this.spanService.selectSpan(traceId,focusTimestamp);
  final CallTreeIterator callTreeIterator=spanResult.getCallTree();
  if (callTreeIterator.isEmpty()) {
    final ModelAndView error=new ModelAndView();
    error.addObject(""String_Node_Str"",9);
    error.addObject(""String_Node_Str"",""String_Node_Str"" + traceId);
    error.setViewName(""String_Node_Str"");
    return error;
  }
  final ModelAndView mv=new ModelAndView();
  mv.addObject(""String_Node_Str"",callTreeIterator.values());
  mv.addObject(""String_Node_Str"",traceId);
  ApplicationMap map=filteredMapService.selectApplicationMap(traceId);
  mv.addObject(""String_Node_Str"",map.getNodes());
  mv.addObject(""String_Node_Str"",map.getLinks());
  RecordSet recordSet=this.transactionInfoService.createRecordSet(callTreeIterator,focusTimestamp);
  mv.addObject(""String_Node_Str"",recordSet);
  mv.addObject(""String_Node_Str"",recordSet.getApplicationName());
  mv.addObject(""String_Node_Str"",recordSet.getRecordList());
  mv.addObject(""String_Node_Str"",recordSet.getRecordList());
  mv.addObject(""String_Node_Str"",recordSet.getStartTime());
  mv.addObject(""String_Node_Str"",recordSet.getEndTime());
  mv.addObject(""String_Node_Str"",spanResult.getCompleteTypeString());
  mv.addObject(""String_Node_Str"",logLinkEnable);
  if (logLinkEnable) {
    mv.addObject(""String_Node_Str"",recordSet.isLoggingTransactionInfo());
    mv.addObject(""String_Node_Str"",logButtonName);
    mv.addObject(""String_Node_Str"",logPageUrl);
  }
  if (viewVersion == 2) {
    mv.setViewName(""String_Node_Str"");
  }
 else {
    mv.setViewName(""String_Node_Str"");
  }
  return mv;
}","/** 
 * info lookup for a selected transaction
 * @param traceIdParam
 * @param focusTimestamp
 * @return
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ModelAndView transactionInfo(@RequestParam(""String_Node_Str"") String traceIdParam,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") long focusTimestamp,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") int viewVersion,HttpServletResponse response){
  logger.debug(""String_Node_Str"",traceIdParam);
  final TransactionId traceId=new TransactionId(traceIdParam);
  final SpanResult spanResult=this.spanService.selectSpan(traceId,focusTimestamp);
  final CallTreeIterator callTreeIterator=spanResult.getCallTree();
  if (callTreeIterator.isEmpty()) {
    final ModelAndView error=new ModelAndView();
    error.addObject(""String_Node_Str"",9);
    error.addObject(""String_Node_Str"",""String_Node_Str"" + traceId);
    error.setViewName(""String_Node_Str"");
    return error;
  }
  final ModelAndView mv=new ModelAndView();
  mv.addObject(""String_Node_Str"",callTreeIterator.values());
  mv.addObject(""String_Node_Str"",traceId);
  ApplicationMap map=filteredMapService.selectApplicationMap(traceId);
  mv.addObject(""String_Node_Str"",map.getNodes());
  mv.addObject(""String_Node_Str"",map.getLinks());
  RecordSet recordSet=this.transactionInfoService.createRecordSet(callTreeIterator,focusTimestamp);
  mv.addObject(""String_Node_Str"",recordSet);
  mv.addObject(""String_Node_Str"",recordSet.getApplicationName());
  mv.addObject(""String_Node_Str"",recordSet.getRecordList());
  mv.addObject(""String_Node_Str"",recordSet.getRecordList());
  mv.addObject(""String_Node_Str"",recordSet.getStartTime());
  mv.addObject(""String_Node_Str"",recordSet.getEndTime());
  mv.addObject(""String_Node_Str"",spanResult.getCompleteTypeString());
  mv.addObject(""String_Node_Str"",logLinkEnable);
  if (logLinkEnable) {
    mv.addObject(""String_Node_Str"",recordSet.isLoggingTransactionInfo());
    mv.addObject(""String_Node_Str"",logButtonName);
    mv.addObject(""String_Node_Str"",logPageUrl);
    mv.addObject(""String_Node_Str"",disableButtonMessage);
  }
  if (viewVersion == 2) {
    mv.setViewName(""String_Node_Str"");
  }
 else {
    mv.setViewName(""String_Node_Str"");
  }
  return mv;
}"
53750,"/** 
 * info lookup for a selected transaction
 * @param traceIdParam
 * @param focusTimestamp
 * @return
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ModelAndView transactionInfo(@RequestParam(""String_Node_Str"") String traceIdParam,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") long focusTimestamp,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") int viewVersion,HttpServletResponse response){
  logger.debug(""String_Node_Str"",traceIdParam);
  final TransactionId traceId=new TransactionId(traceIdParam);
  final SpanResult spanResult=this.spanService.selectSpan(traceId,focusTimestamp);
  final CallTreeIterator callTreeIterator=spanResult.getCallTree();
  if (callTreeIterator.isEmpty()) {
    final ModelAndView error=new ModelAndView();
    error.addObject(""String_Node_Str"",9);
    error.addObject(""String_Node_Str"",""String_Node_Str"" + traceId);
    error.setViewName(""String_Node_Str"");
    return error;
  }
  final ModelAndView mv=new ModelAndView();
  mv.addObject(""String_Node_Str"",callTreeIterator.values());
  mv.addObject(""String_Node_Str"",traceId);
  ApplicationMap map=filteredMapService.selectApplicationMap(traceId);
  mv.addObject(""String_Node_Str"",map.getNodes());
  mv.addObject(""String_Node_Str"",map.getLinks());
  RecordSet recordSet=this.transactionInfoService.createRecordSet(callTreeIterator,focusTimestamp);
  mv.addObject(""String_Node_Str"",recordSet);
  mv.addObject(""String_Node_Str"",recordSet.getApplicationName());
  mv.addObject(""String_Node_Str"",recordSet.getRecordList());
  mv.addObject(""String_Node_Str"",recordSet.getRecordList());
  mv.addObject(""String_Node_Str"",recordSet.getStartTime());
  mv.addObject(""String_Node_Str"",recordSet.getEndTime());
  mv.addObject(""String_Node_Str"",spanResult.getCompleteTypeString());
  mv.addObject(""String_Node_Str"",logLinkEnable);
  if (logLinkEnable) {
    mv.addObject(""String_Node_Str"",recordSet.isLoggingTransactionInfo());
    mv.addObject(""String_Node_Str"",logButtonName);
    mv.addObject(""String_Node_Str"",logPageUrl);
    mv.addObject(""String_Node_Str"",disableButtonMessage);
  }
  if (viewVersion == 2) {
    mv.setViewName(""String_Node_Str"");
  }
 else {
    mv.setViewName(""String_Node_Str"");
  }
  return mv;
}","/** 
 * info lookup for a selected transaction
 * @param traceIdParam
 * @param focusTimestamp
 * @return
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ModelAndView transactionInfo(@RequestParam(""String_Node_Str"") String traceIdParam,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") long focusTimestamp,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") int viewVersion,HttpServletResponse response){
  logger.debug(""String_Node_Str"",traceIdParam);
  final TransactionId traceId=new TransactionId(traceIdParam);
  final SpanResult spanResult=this.spanService.selectSpan(traceId,focusTimestamp);
  final CallTreeIterator callTreeIterator=spanResult.getCallTree();
  if (callTreeIterator.isEmpty()) {
    final ModelAndView error=new ModelAndView();
    error.addObject(""String_Node_Str"",9);
    error.addObject(""String_Node_Str"",""String_Node_Str"" + traceId);
    error.setViewName(""String_Node_Str"");
    return error;
  }
  final ModelAndView mv=new ModelAndView();
  mv.addObject(""String_Node_Str"",callTreeIterator.values());
  mv.addObject(""String_Node_Str"",traceId);
  ApplicationMap map=filteredMapService.selectApplicationMap(traceId);
  mv.addObject(""String_Node_Str"",map.getNodes());
  mv.addObject(""String_Node_Str"",map.getLinks());
  RecordSet recordSet=this.transactionInfoService.createRecordSet(callTreeIterator,focusTimestamp);
  mv.addObject(""String_Node_Str"",recordSet);
  mv.addObject(""String_Node_Str"",recordSet.getApplicationName());
  mv.addObject(""String_Node_Str"",recordSet.getRecordList());
  mv.addObject(""String_Node_Str"",recordSet.getRecordList());
  mv.addObject(""String_Node_Str"",recordSet.getStartTime());
  mv.addObject(""String_Node_Str"",recordSet.getEndTime());
  mv.addObject(""String_Node_Str"",spanResult.getCompleteTypeString());
  mv.addObject(""String_Node_Str"",logLinkEnable);
  mv.addObject(""String_Node_Str"",recordSet.isLoggingTransactionInfo());
  mv.addObject(""String_Node_Str"",logButtonName);
  mv.addObject(""String_Node_Str"",logPageUrl);
  mv.addObject(""String_Node_Str"",disableButtonMessage);
  if (viewVersion == 2) {
    mv.setViewName(""String_Node_Str"");
  }
 else {
    mv.setViewName(""String_Node_Str"");
  }
  return mv;
}"
53751,"@Override public boolean hasField(String name,String type){
  try {
    ctClass.getField(name,type);
  }
 catch (  NotFoundException e) {
    return false;
  }
  return true;
}","@Override public boolean hasField(String name,String type){
  try {
    ctClass.getField(name,JavaAssistUtils.toJvmSignature(type));
  }
 catch (  NotFoundException e) {
    return false;
  }
  return true;
}"
53752,"static String toJvmSignature(String javaType){
  if (javaType == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (javaType.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final int javaObjectArraySize=getJavaObjectArraySize(javaType);
  final int javaArrayLength=javaObjectArraySize * 2;
  String pureJavaType;
  if (javaObjectArraySize != 0) {
    pureJavaType=javaType.substring(0,javaType.length() - javaArrayLength);
  }
 else {
    pureJavaType=javaType;
  }
  final String signature=PRIMITIVE_JAVA_TO_JVM.get(pureJavaType);
  if (signature != null) {
    return appendJvmArray(signature,javaObjectArraySize);
  }
  return toJvmObject(javaObjectArraySize,pureJavaType);
}","public static String toJvmSignature(String javaType){
  if (javaType == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (javaType.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final int javaObjectArraySize=getJavaObjectArraySize(javaType);
  final int javaArrayLength=javaObjectArraySize * 2;
  String pureJavaType;
  if (javaObjectArraySize != 0) {
    pureJavaType=javaType.substring(0,javaType.length() - javaArrayLength);
  }
 else {
    pureJavaType=javaType;
  }
  final String signature=PRIMITIVE_JAVA_TO_JVM.get(pureJavaType);
  if (signature != null) {
    return appendJvmArray(signature,javaObjectArraySize);
  }
  return toJvmObject(javaObjectArraySize,pureJavaType);
}"
53753,"@Test public void testWriteValue() throws Exception {
  ObjectMapper mapper=new ObjectMapper();
  __POJO pojo=new __POJO();
  pojo.setName(""String_Node_Str"");
  String jsonStr=mapper.writeValueAsString(pojo);
  byte[] jsonByte=mapper.writeValueAsBytes(pojo);
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache(System.out);
  verifier.printBlocks(System.out);
  Constructor<?> omConstructor=ObjectMapper.class.getConstructor();
  Method writeval1=ObjectMapper.class.getMethod(""String_Node_Str"",Object.class);
  Method writeval2=ObjectMapper.class.getMethod(""String_Node_Str"",Object.class);
  ExpectedAnnotation length=annotation(""String_Node_Str"",18);
  verifier.verifyApi(""String_Node_Str"",omConstructor);
  verifier.verifyTraceBlock(BlockType.EVENT,""String_Node_Str"",writeval1,null,null,null,null,length);
  verifier.verifyTraceBlock(BlockType.EVENT,""String_Node_Str"",writeval2,null,null,null,null,length);
  verifier.verifyTraceBlockCount(0);
}","@Test public void testWriteValue() throws Exception {
  ObjectMapper mapper=new ObjectMapper();
  __POJO pojo=new __POJO();
  pojo.setName(""String_Node_Str"");
  String jsonStr=mapper.writeValueAsString(pojo);
  byte[] jsonByte=mapper.writeValueAsBytes(pojo);
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache(System.out);
  verifier.printBlocks(System.out);
  Constructor<?> omConstructor=ObjectMapper.class.getConstructor(JsonFactory.class,DefaultSerializerProvider.class,DefaultDeserializationContext.class);
  Constructor<?> omConstructor1=ObjectMapper.class.getConstructor();
  Method writeval1=ObjectMapper.class.getMethod(""String_Node_Str"",Object.class);
  Method writeval2=ObjectMapper.class.getMethod(""String_Node_Str"",Object.class);
  ExpectedAnnotation length=annotation(""String_Node_Str"",18);
  verifier.verifyApi(""String_Node_Str"",omConstructor);
  verifier.verifyApi(""String_Node_Str"",omConstructor1);
  verifier.verifyTraceBlock(BlockType.EVENT,""String_Node_Str"",writeval1,null,null,null,null,length);
  verifier.verifyTraceBlock(BlockType.EVENT,""String_Node_Str"",writeval2,null,null,null,null,length);
  verifier.verifyTraceBlockCount(0);
}"
53754,"@Test public void testConstructor() throws Exception {
  ObjectMapper mapper1=new ObjectMapper();
  ObjectMapper mapper2=new ObjectMapper(new JsonFactory());
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache(System.out);
  verifier.printBlocks(System.out);
  Constructor<?> omConstructor1=ObjectMapper.class.getConstructor();
  Constructor<?> omConstructor2=ObjectMapper.class.getConstructor(JsonFactory.class);
  verifier.verifyApi(""String_Node_Str"",omConstructor1);
  verifier.verifyApi(""String_Node_Str"",omConstructor2);
  verifier.verifyTraceBlockCount(0);
}","@Test public void testConstructor() throws Exception {
  ObjectMapper mapper1=new ObjectMapper();
  ObjectMapper mapper2=new ObjectMapper(new JsonFactory());
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache(System.out);
  verifier.printBlocks(System.out);
  Constructor<?> omConstructor=ObjectMapper.class.getConstructor(JsonFactory.class,DefaultSerializerProvider.class,DefaultDeserializationContext.class);
  Constructor<?> omConstructor1=ObjectMapper.class.getConstructor();
  Constructor<?> omConstructor2=ObjectMapper.class.getConstructor(JsonFactory.class);
  verifier.verifyApi(""String_Node_Str"",omConstructor);
  verifier.verifyApi(""String_Node_Str"",omConstructor1);
  verifier.verifyApi(""String_Node_Str"",omConstructor);
  verifier.verifyApi(""String_Node_Str"",omConstructor2);
  verifier.verifyTraceBlockCount(0);
}"
53755,"@Test public void testReadValue() throws Exception {
  ObjectMapper mapper=new ObjectMapper();
  String json_str=""String_Node_Str"";
  byte[] json_b=json_str.getBytes(""String_Node_Str"");
  __POJO pojo=mapper.readValue(json_str,__POJO.class);
  pojo=mapper.readValue(json_b,__POJO.class);
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache(System.out);
  verifier.printBlocks(System.out);
  Constructor<?> omConstructor=ObjectMapper.class.getConstructor();
  Method readval1=ObjectMapper.class.getMethod(""String_Node_Str"",String.class,Class.class);
  Method readval2=ObjectMapper.class.getMethod(""String_Node_Str"",byte[].class,Class.class);
  ExpectedAnnotation length=annotation(""String_Node_Str"",20);
  verifier.verifyApi(""String_Node_Str"",omConstructor);
  verifier.verifyTraceBlock(BlockType.EVENT,""String_Node_Str"",readval1,null,null,null,null,length);
  verifier.verifyTraceBlock(BlockType.EVENT,""String_Node_Str"",readval2,null,null,null,null,length);
  verifier.verifyTraceBlockCount(0);
}","@Test public void testReadValue() throws Exception {
  ObjectMapper mapper=new ObjectMapper();
  String json_str=""String_Node_Str"";
  byte[] json_b=json_str.getBytes(""String_Node_Str"");
  __POJO pojo=mapper.readValue(json_str,__POJO.class);
  pojo=mapper.readValue(json_b,__POJO.class);
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache(System.out);
  verifier.printBlocks(System.out);
  Constructor<?> omConstructor=ObjectMapper.class.getConstructor(JsonFactory.class,DefaultSerializerProvider.class,DefaultDeserializationContext.class);
  Constructor<?> omConstructor1=ObjectMapper.class.getConstructor();
  Method readval1=ObjectMapper.class.getMethod(""String_Node_Str"",String.class,Class.class);
  Method readval2=ObjectMapper.class.getMethod(""String_Node_Str"",byte[].class,Class.class);
  ExpectedAnnotation length=annotation(""String_Node_Str"",20);
  verifier.verifyApi(""String_Node_Str"",omConstructor);
  verifier.verifyApi(""String_Node_Str"",omConstructor1);
  verifier.verifyTraceBlock(BlockType.EVENT,""String_Node_Str"",readval1,null,null,null,null,length);
  verifier.verifyTraceBlock(BlockType.EVENT,""String_Node_Str"",readval2,null,null,null,null,length);
  verifier.verifyTraceBlockCount(0);
}"
53756,"@Override public void after(Object target,Object[] args,Object result,Throwable throwable){
  if (isDebug) {
    logger.afterInterceptor(target,args);
  }
  Trace trace=traceContext.currentTraceObject();
  if (trace == null) {
    return;
  }
  try {
    trace.recordApi(descriptor);
    trace.recordException(throwable);
    if (args[0] instanceof String) {
      trace.recordAttribute(ANNOTATION_KEY_LENGTH_VALUE,((String)args[0]).length());
    }
 else     if (args[0] instanceof byte[]) {
      trace.recordAttribute(ANNOTATION_KEY_LENGTH_VALUE,(new String((byte[])args[0])).length());
    }
 else     if (args[0] instanceof File) {
      trace.recordAttribute(ANNOTATION_KEY_LENGTH_VALUE,((File)args[0]).length());
    }
    trace.markAfterTime();
  }
  finally {
    trace.traceBlockEnd();
  }
}","@Override public void after(Object target,Object[] args,Object result,Throwable throwable){
  if (isDebug) {
    logger.afterInterceptor(target,args);
  }
  Trace trace=traceContext.currentTraceObject();
  if (trace == null) {
    return;
  }
  try {
    trace.recordApi(descriptor);
    trace.recordException(throwable);
    if (args[0] instanceof String) {
      trace.recordAttribute(ANNOTATION_KEY_LENGTH_VALUE,((String)args[0]).length());
    }
 else     if (args[0] instanceof byte[]) {
      trace.recordAttribute(ANNOTATION_KEY_LENGTH_VALUE,((byte[])args[0]).length);
    }
 else     if (args[0] instanceof File) {
      trace.recordAttribute(ANNOTATION_KEY_LENGTH_VALUE,((File)args[0]).length());
    }
    trace.markAfterTime();
  }
  finally {
    trace.traceBlockEnd();
  }
}"
53757,"@Test public void jsonToArrayTest() throws Exception {
  Method fromObject=JSONArray.class.getMethod(""String_Node_Str"",Object.class);
  Method toArray=JSONArray.class.getMethod(""String_Node_Str"",JSONArray.class);
  Method toString=JSONArray.class.getMethod(""String_Node_Str"");
  Method toCollection=JSONArray.class.getMethod(""String_Node_Str"",JSONArray.class);
  Method toList=JSONArray.class.getMethod(""String_Node_Str"",JSONArray.class);
  String test=""String_Node_Str"";
  JSONArray jsn=JSONArray.fromObject(test);
  toArray.invoke(null,jsn);
  jsn.toString();
  toCollection.invoke(null,jsn);
  toList.invoke(null,jsn);
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache(System.out);
  verifier.printBlocks(System.out);
  verifier.verifyApi(""String_Node_Str"",fromObject);
  verifier.verifyApi(""String_Node_Str"",toArray);
  verifier.verifyApi(""String_Node_Str"",toString);
  verifier.verifyApi(""String_Node_Str"",toCollection);
  verifier.verifyApi(""String_Node_Str"",toList);
  verifier.verifyTraceBlockCount(0);
}","@Test public void jsonToArrayTest() throws Exception {
  Method fromObject=JSONArray.class.getMethod(""String_Node_Str"",Object.class);
  Method toArray=JSONArray.class.getMethod(""String_Node_Str"",JSONArray.class);
  Method toString=JSONArray.class.getMethod(""String_Node_Str"");
  Method toCollection=null;
  try {
    toCollection=JSONArray.class.getMethod(""String_Node_Str"",JSONArray.class);
  }
 catch (  NoSuchMethodException e) {
  }
  Method toList=JSONArray.class.getMethod(""String_Node_Str"",JSONArray.class);
  String test=""String_Node_Str"";
  JSONArray jsn=JSONArray.fromObject(test);
  toArray.invoke(null,jsn);
  jsn.toString();
  if (toCollection != null) {
    toCollection.invoke(null,jsn);
  }
  toList.invoke(null,jsn);
  PluginTestVerifier verifier=PluginTestVerifierHolder.getInstance();
  verifier.printCache(System.out);
  verifier.printBlocks(System.out);
  verifier.verifyApi(""String_Node_Str"",fromObject);
  verifier.verifyApi(""String_Node_Str"",toArray);
  verifier.verifyApi(""String_Node_Str"",toString);
  if (toCollection != null) {
    verifier.verifyApi(""String_Node_Str"",toCollection);
  }
  verifier.verifyApi(""String_Node_Str"",toList);
  verifier.verifyTraceBlockCount(0);
}"
53758,"private void verifySpan(Expected expected){
  Object obj=popSpan();
  Facade span=wrap(obj);
  if (!expected.type.isInstance(obj)) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ obj.getClass().getName()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ obj);
  }
  if (expected.serviceType.getCode() != span.getServiceType()) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ expected.serviceType.getCode()+ ""String_Node_Str""+ span.getServiceType()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  if (!equals(expected.apiId,span.getApiId())) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ expected.apiId+ ""String_Node_Str""+ span.getApiId()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  if (!equals(expected.rpc,span.getRpc())) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ expected.rpc+ ""String_Node_Str""+ span.getRpc()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  if (!equals(expected.endPoint,span.getEndPoint())) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ expected.endPoint+ ""String_Node_Str""+ span.getEndPoint()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  if (!equals(expected.remoteAddr,span.getRemoteAddr())) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ expected.remoteAddr+ ""String_Node_Str""+ span.getRemoteAddr()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  if (!equals(expected.destinationId,span.getDestinationId())) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ expected.destinationId+ ""String_Node_Str""+ span.getDestinationId()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  List<TAnnotation> actualAnnotations=span.getAnnotations();
  int len=expected.annotations.length;
  int actualLen=actualAnnotations == null ? 0 : actualAnnotations.size();
  if (actualLen != len) {
    throw new AssertionError(""String_Node_Str"" + len + ""String_Node_Str""+ actualLen+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  for (int i=0; i < len; i++) {
    ExpectedAnnotation expect=expected.annotations[i];
    AnnotationKey expectedAnnotationKey=annotationKeyRegistryService.findAnnotationKeyByName(expect.getKeyName());
    TAnnotation actual=actualAnnotations.get(i);
    if (expectedAnnotationKey.getCode() != actual.getKey()) {
      throw new AssertionError(""String_Node_Str"" + i + ""String_Node_Str""+ expectedAnnotationKey.getCode()+ ""String_Node_Str""+ expect.getValue()+ ""String_Node_Str""+ toString(actual)+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
    }
    if (expectedAnnotationKey == AnnotationKey.SQL_ID && expect instanceof ExpectedSql) {
      verifySql((ExpectedSql)expect,actual);
    }
 else {
      Object expectedValue=expect.getValue();
      if (AnnotationKey.isCachedArgsKey(expectedAnnotationKey.getCode())) {
        expectedValue=getTestTcpDataSender().getStringId(expectedValue.toString());
      }
      if (!Objects.equal(expectedValue,actual.getValue().getFieldValue())) {
        throw new AssertionError(""String_Node_Str"" + i + ""String_Node_Str""+ expectedAnnotationKey.getCode()+ ""String_Node_Str""+ expect.getValue()+ ""String_Node_Str""+ toString(actual)+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
      }
    }
  }
}","private void verifySpan(Expected expected){
  Object obj=popSpan();
  if (obj == null) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str"");
  }
  Facade span=wrap(obj);
  if (!expected.type.isInstance(obj)) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ obj.getClass().getName()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ obj);
  }
  if (expected.serviceType.getCode() != span.getServiceType()) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ expected.serviceType.getCode()+ ""String_Node_Str""+ span.getServiceType()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  if (!equals(expected.apiId,span.getApiId())) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ expected.apiId+ ""String_Node_Str""+ span.getApiId()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  if (!equals(expected.rpc,span.getRpc())) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ expected.rpc+ ""String_Node_Str""+ span.getRpc()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  if (!equals(expected.endPoint,span.getEndPoint())) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ expected.endPoint+ ""String_Node_Str""+ span.getEndPoint()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  if (!equals(expected.remoteAddr,span.getRemoteAddr())) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ expected.remoteAddr+ ""String_Node_Str""+ span.getRemoteAddr()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  if (!equals(expected.destinationId,span.getDestinationId())) {
    throw new AssertionError(""String_Node_Str"" + expected.type.getSimpleName() + ""String_Node_Str""+ expected.destinationId+ ""String_Node_Str""+ span.getDestinationId()+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  List<TAnnotation> actualAnnotations=span.getAnnotations();
  int len=expected.annotations.length;
  int actualLen=actualAnnotations == null ? 0 : actualAnnotations.size();
  if (actualLen != len) {
    throw new AssertionError(""String_Node_Str"" + len + ""String_Node_Str""+ actualLen+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
  }
  for (int i=0; i < len; i++) {
    ExpectedAnnotation expect=expected.annotations[i];
    AnnotationKey expectedAnnotationKey=annotationKeyRegistryService.findAnnotationKeyByName(expect.getKeyName());
    TAnnotation actual=actualAnnotations.get(i);
    if (expectedAnnotationKey.getCode() != actual.getKey()) {
      throw new AssertionError(""String_Node_Str"" + i + ""String_Node_Str""+ expectedAnnotationKey.getCode()+ ""String_Node_Str""+ expect.getValue()+ ""String_Node_Str""+ toString(actual)+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
    }
    if (expectedAnnotationKey == AnnotationKey.SQL_ID && expect instanceof ExpectedSql) {
      verifySql((ExpectedSql)expect,actual);
    }
 else {
      Object expectedValue=expect.getValue();
      if (AnnotationKey.isCachedArgsKey(expectedAnnotationKey.getCode())) {
        expectedValue=getTestTcpDataSender().getStringId(expectedValue.toString());
      }
      if (!Objects.equal(expectedValue,actual.getValue().getFieldValue())) {
        throw new AssertionError(""String_Node_Str"" + i + ""String_Node_Str""+ expectedAnnotationKey.getCode()+ ""String_Node_Str""+ expect.getValue()+ ""String_Node_Str""+ toString(actual)+ ""String_Node_Str""+ expected+ ""String_Node_Str""+ span);
      }
    }
  }
}"
53759,"public AbstractPinpointPluginTestSuite(Class<?> testClass) throws InitializationError, ArtifactResolutionException, DependencyResolutionException {
  super(testClass,Collections.<Runner>emptyList());
  PinpointAgent agent=testClass.getAnnotation(PinpointAgent.class);
  this.agentJar=resolveAgentPath(agent);
  PinpointConfig config=testClass.getAnnotation(PinpointConfig.class);
  this.configFile=config == null ? null : resolveConfigFileLocation(config.value());
  JvmArgument jvmArgument=testClass.getAnnotation(JvmArgument.class);
  this.jvmArguments=jvmArgument == null ? new String[0] : jvmArgument.value();
  JvmVersion jvmVersion=testClass.getAnnotation(JvmVersion.class);
  this.jvmVersions=jvmVersion == null ? DEFAULT_JVM_VERSIONS : jvmVersion.value();
  this.requiredLibraries=resolveRequiredLibraries();
  this.testClassLocation=resolveTestClassLocation(testClass);
  this.debug=isDebugMode();
}","public AbstractPinpointPluginTestSuite(Class<?> testClass) throws InitializationError, ArtifactResolutionException, DependencyResolutionException {
  super(testClass,Collections.<Runner>emptyList());
  PinpointAgent agent=testClass.getAnnotation(PinpointAgent.class);
  this.agentJar=resolveAgentPath(agent);
  PinpointConfig config=testClass.getAnnotation(PinpointConfig.class);
  this.configFile=config == null ? null : resolveConfigFileLocation(config.value());
  JvmArgument jvmArgument=testClass.getAnnotation(JvmArgument.class);
  this.jvmArguments=jvmArgument == null ? new String[0] : jvmArgument.value();
  JvmVersion jvmVersion=testClass.getAnnotation(JvmVersion.class);
  this.jvmVersions=jvmVersion == null ? new int[]{NO_JVM_VERSION} : jvmVersion.value();
  this.requiredLibraries=resolveRequiredLibraries();
  this.testClassLocation=resolveTestClassLocation(testClass);
  this.debug=isDebugMode();
}"
53760,"protected String getJavaExecutable(Integer version){
  StringBuilder builder=new StringBuilder();
  String javaHome;
  if (version == null) {
    javaHome=SystemProperty.INSTANCE.getProperty(""String_Node_Str"");
  }
 else {
    String envName=""String_Node_Str"" + version + ""String_Node_Str"";
    javaHome=SystemProperty.INSTANCE.getEnv(envName);
  }
  if (javaHome == null) {
    return null;
  }
  builder.append(javaHome);
  builder.append(File.separatorChar);
  builder.append(""String_Node_Str"");
  builder.append(File.separatorChar);
  builder.append(""String_Node_Str"");
  if (SystemProperty.INSTANCE.getProperty(""String_Node_Str"").contains(""String_Node_Str"")) {
    builder.append(""String_Node_Str"");
  }
  return builder.toString();
}","protected String getJavaExecutable(int version){
  StringBuilder builder=new StringBuilder();
  String javaHome;
  if (version == NO_JVM_VERSION) {
    javaHome=SystemProperty.INSTANCE.getProperty(""String_Node_Str"");
  }
 else {
    String envName=""String_Node_Str"" + version + ""String_Node_Str"";
    javaHome=SystemProperty.INSTANCE.getEnv(envName);
  }
  if (javaHome == null) {
    return null;
  }
  builder.append(javaHome);
  builder.append(File.separatorChar);
  builder.append(""String_Node_Str"");
  builder.append(File.separatorChar);
  builder.append(""String_Node_Str"");
  if (SystemProperty.INSTANCE.getProperty(""String_Node_Str"").contains(""String_Node_Str"")) {
    builder.append(""String_Node_Str"");
  }
  return builder.toString();
}"
53761,"@Override protected List<Runner> getChildren(){
  List<Runner> runners=new ArrayList<Runner>();
  try {
    for (    int ver : jvmVersions) {
      String javaExe=getJavaExecutable(ver);
      if (javaExe == null) {
        System.out.println(""String_Node_Str"" + ver + ""String_Node_Str""+ ver);
        continue;
      }
      PinpointPluginTestContext context=new PinpointPluginTestContext(agentJar,configFile,requiredLibraries,getTestClass().getJavaClass(),testClassLocation,jvmArguments,debug,ver,javaExe);
      List<PinpointPluginTestInstance> cases=createTestCases(context);
      for (      PinpointPluginTestInstance c : cases) {
        runners.add(new PinpointPluginTestRunner(context,c));
      }
    }
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    throw new RuntimeException(""String_Node_Str"",e);
  }
  return runners;
}","@Override protected List<Runner> getChildren(){
  List<Runner> runners=new ArrayList<Runner>();
  try {
    for (    int ver : jvmVersions) {
      String javaExe=getJavaExecutable(ver);
      if (javaExe == null) {
        System.out.println(""String_Node_Str"" + ver + ""String_Node_Str""+ ver);
        continue;
      }
      PinpointPluginTestContext context=new PinpointPluginTestContext(agentJar,configFile,requiredLibraries,getTestClass().getJavaClass(),testClassLocation,jvmArguments,debug,ver,javaExe);
      List<PinpointPluginTestInstance> cases=createTestCases(context);
      for (      PinpointPluginTestInstance c : cases) {
        runners.add(new PinpointPluginTestRunner(context,c));
      }
    }
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    throw new RuntimeException(""String_Node_Str"",e);
  }
  if (runners.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return runners;
}"
53762,"private FromToResponseFilter createFromToResponseFilter(FilterDescriptor descriptor,FilterHint hint){
  if (descriptor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  List<ServiceType> fromServiceType=registry.findDesc(descriptor.getFromServiceType());
  if (fromServiceType == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + descriptor.getFromServiceType());
  }
  String fromApplicationName=descriptor.getFromApplicationName();
  String fromAgentName=descriptor.getFromAgentName();
  List<ServiceType> toServiceType=registry.findDesc(descriptor.getToServiceType());
  if (toServiceType == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + descriptor.getToServiceType());
  }
  String toApplicationName=descriptor.getToApplicationName();
  String toAgentName=descriptor.getToAgentName();
  Long fromResponseTime=descriptor.getResponseFrom();
  Long toResponseTime=descriptor.getResponseTo();
  Boolean includeFailed=descriptor.getIncludeException();
  return new FromToResponseFilter(fromServiceType,fromApplicationName,fromAgentName,toServiceType,toApplicationName,toAgentName,fromResponseTime,toResponseTime,includeFailed,hint);
}","private FromToResponseFilter createFromToResponseFilter(FilterDescriptor descriptor,FilterHint hint){
  if (descriptor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  List<ServiceType> fromServiceType=registry.findDesc(descriptor.getFromServiceType());
  if (fromServiceType == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + descriptor.getFromServiceType());
  }
  String fromApplicationName=descriptor.getFromApplicationName();
  String fromAgentName=descriptor.getFromAgentName();
  List<ServiceType> toServiceType=registry.findDesc(descriptor.getToServiceType());
  if (toServiceType == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + descriptor.getToServiceType());
  }
  String toApplicationName=descriptor.getToApplicationName();
  String toAgentName=descriptor.getToAgentName();
  Long fromResponseTime=descriptor.getResponseFrom();
  Long toResponseTime=descriptor.getResponseTo();
  Boolean includeFailed=descriptor.getIncludeException();
  return new FromToResponseFilter(fromServiceType,fromApplicationName,fromAgentName,toServiceType,toApplicationName,toAgentName,fromResponseTime,toResponseTime,includeFailed,hint,this.registry);
}"
53763,"public boolean containApplicationEndpoint(String applicationName,String endPoint,int serviceTypeCode){
  if (!containApplicationHint(applicationName)) {
    return false;
  }
  List<Object> list=get(applicationName);
  for (int i=0; i < list.size(); i+=2) {
    if (endPoint.equals(list.get(i))) {
      if (serviceTypeCode == (Integer)list.get(i + 1)) {
        return true;
      }
    }
  }
  return false;
}","public boolean containApplicationEndpoint(String applicationName,String endPoint,int serviceTypeCode){
  if (!containApplicationHint(applicationName)) {
    return false;
  }
  if (endPoint == null) {
    return false;
  }
  List<Object> list=get(applicationName);
  for (int i=0; i < list.size(); i+=2) {
    if (endPoint.equals(list.get(i))) {
      if (serviceTypeCode == (Integer)list.get(i + 1)) {
        return true;
      }
    }
  }
  return false;
}"
53764,"public FromToResponseFilter(List<ServiceType> fromServiceList,String fromApplicationName,String fromAgentName,List<ServiceType> toServiceList,String toApplicationName,String toAgentName,Long fromResponseTime,Long toResponseTime,Boolean includeFailed,FilterHint hint){
  if (fromServiceList == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (fromApplicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (toServiceList == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (toApplicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (hint == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.fromServiceCode=fromServiceList;
  this.fromApplicationName=fromApplicationName;
  this.fromAgentName=fromAgentName;
  this.toServiceCode=toServiceList;
  this.toApplicationName=toApplicationName;
  this.toAgentName=toAgentName;
  this.fromResponseTime=fromResponseTime;
  this.toResponseTime=toResponseTime;
  this.includeFailed=includeFailed;
  this.hint=hint;
}","public FromToResponseFilter(List<ServiceType> fromServiceList,String fromApplicationName,String fromAgentName,List<ServiceType> toServiceList,String toApplicationName,String toAgentName,Long fromResponseTime,Long toResponseTime,Boolean includeFailed,FilterHint hint,ServiceTypeRegistryService registry){
  if (fromServiceList == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (fromApplicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (toServiceList == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (toApplicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (hint == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (registry == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.fromServiceCode=fromServiceList;
  this.fromApplicationName=fromApplicationName;
  this.fromAgentName=fromAgentName;
  this.toServiceCode=toServiceList;
  this.toApplicationName=toApplicationName;
  this.toAgentName=toAgentName;
  this.fromResponseTime=fromResponseTime;
  this.toResponseTime=toResponseTime;
  this.includeFailed=includeFailed;
  this.hint=hint;
  this.registry=registry;
}"
53765,"private boolean isRpcClient(short serviceType){
  return ServiceTypeCategory.RPC.contains(serviceType);
}","private boolean isRpcClient(short serviceTypeCode){
  if (ServiceTypeCategory.RPC.contains(serviceTypeCode)) {
    ServiceType serviceType=this.registry.findServiceType(serviceTypeCode);
    return serviceType.isRecordStatistics();
  }
  return false;
}"
53766,"public static void lock(ClassLoader loader){
  LockInfo info=map.get(loader);
  if (info == null) {
    return;
  }
  while (!info.lock.tryLock()) {
    try {
      if (Thread.holdsLock(loader)) {
        loader.wait(0,1);
      }
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}","public static void lock(ClassLoader loader){
  LockInfo info=map.get(loader);
  if (info == null) {
    return;
  }
  while (!info.lock.tryLock()) {
    try {
      if (Thread.holdsLock(info.child)) {
        info.child.wait(0,1);
      }
 else       if (Thread.holdsLock(info.parent)) {
        info.parent.wait(0,1);
      }
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}"
53767,"public Java6PluginClassLoader(URL[] urls,ClassLoader parent){
  super(urls,parent);
}","public Java6PluginClassLoader(URL[] urls,ClassLoader parent){
  super(urls,parent);
  ClassLoaderLock.register(parent,this);
}"
53768,"@Test public void testPadBytes() throws Exception {
  int TOTAL_LENGTH=20;
  int TEST_SIZE=10;
  int PAD_SIZE=TOTAL_LENGTH - TEST_SIZE;
  Buffer buffer=new AutomaticBuffer(10);
  byte[] test=new byte[10];
  random.nextBytes(test);
  buffer.putPadBytes(test,TOTAL_LENGTH);
  byte[] result=buffer.getBuffer();
  org.junit.Assert.assertEquals(result.length,TOTAL_LENGTH);
  org.junit.Assert.assertTrue(""String_Node_Str"",Bytes.equals(test,0,TEST_SIZE,result,0,TEST_SIZE));
  byte[] padBytes=new byte[TOTAL_LENGTH - TEST_SIZE];
  org.junit.Assert.assertTrue(""String_Node_Str"",Bytes.equals(padBytes,0,TEST_SIZE,result,TEST_SIZE,PAD_SIZE));
}","@Test public void testPadBytes() throws Exception {
  int TOTAL_LENGTH=20;
  int TEST_SIZE=10;
  Buffer buffer=new AutomaticBuffer(10);
  byte[] test=new byte[10];
  random.nextBytes(test);
  buffer.putPadBytes(test,TOTAL_LENGTH);
  byte[] result=buffer.getBuffer();
  org.junit.Assert.assertEquals(result.length,TOTAL_LENGTH);
  org.junit.Assert.assertTrue(""String_Node_Str"",Arrays.equals(Arrays.copyOfRange(test,0,TEST_SIZE),Arrays.copyOfRange(result,0,TEST_SIZE)));
  byte[] padBytes=new byte[TOTAL_LENGTH - TEST_SIZE];
  org.junit.Assert.assertTrue(""String_Node_Str"",Arrays.equals(Arrays.copyOfRange(padBytes,0,TEST_SIZE),Arrays.copyOfRange(result,TEST_SIZE,TOTAL_LENGTH)));
}"
53769,"@Test public void testRead4PrefixedString() throws Exception {
  String value=""String_Node_Str"";
  byte[] length=Bytes.toBytes(value.length());
  byte[] string=Bytes.toBytes(value);
  byte[] result=Bytes.add(length,string);
  Buffer buffer=new FixedBuffer(result);
  String prefixedString=buffer.read4PrefixedString();
  Assert.assertEquals(prefixedString,value);
}","@Test public void testRead4PrefixedString() throws Exception {
  String value=""String_Node_Str"";
  byte[] length=Ints.toByteArray(value.length());
  byte[] string=value.getBytes();
  byte[] result=BytesUtils.merge(length,string);
  Buffer buffer=new FixedBuffer(result);
  String prefixedString=buffer.read4PrefixedString();
  Assert.assertEquals(prefixedString,value);
}"
53770,"@Test public void testRead4PrefixedString_Null() throws Exception {
  byte[] length=Bytes.toBytes(-1);
  Buffer buffer=new FixedBuffer(length);
  String prefixedString=buffer.read4PrefixedString();
  Assert.assertEquals(prefixedString,null);
}","@Test public void testRead4PrefixedString_Null() throws Exception {
  byte[] length=Ints.toByteArray(-1);
  Buffer buffer=new FixedBuffer(length);
  String prefixedString=buffer.read4PrefixedString();
  Assert.assertEquals(prefixedString,null);
}"
53771,"@Test public void testPadBytes() throws Exception {
  int TOTAL_LENGTH=20;
  int TEST_SIZE=10;
  int PAD_SIZE=TOTAL_LENGTH - TEST_SIZE;
  Buffer buffer=new FixedBuffer(32);
  byte[] test=new byte[10];
  random.nextBytes(test);
  buffer.putPadBytes(test,TOTAL_LENGTH);
  byte[] result=buffer.getBuffer();
  Assert.assertEquals(result.length,TOTAL_LENGTH);
  Assert.assertTrue(""String_Node_Str"",Bytes.equals(test,0,TEST_SIZE,result,0,TEST_SIZE));
  byte[] padBytes=new byte[TOTAL_LENGTH - TEST_SIZE];
  Assert.assertTrue(""String_Node_Str"",Bytes.equals(padBytes,0,TEST_SIZE,result,TEST_SIZE,PAD_SIZE));
}","@Test public void testPadBytes() throws Exception {
  int TOTAL_LENGTH=20;
  int TEST_SIZE=10;
  Buffer buffer=new FixedBuffer(32);
  byte[] test=new byte[10];
  random.nextBytes(test);
  buffer.putPadBytes(test,TOTAL_LENGTH);
  byte[] result=buffer.getBuffer();
  Assert.assertEquals(result.length,TOTAL_LENGTH);
  Assert.assertTrue(""String_Node_Str"",Arrays.equals(Arrays.copyOfRange(test,0,TEST_SIZE),Arrays.copyOfRange(result,0,TEST_SIZE)));
  byte[] padBytes=new byte[TOTAL_LENGTH - TEST_SIZE];
  Assert.assertTrue(""String_Node_Str"",Arrays.equals(Arrays.copyOfRange(padBytes,0,TEST_SIZE),Arrays.copyOfRange(result,TEST_SIZE,TOTAL_LENGTH)));
}"
53772,"public void find_SVarInt_errorCode() throws Exception {
  Random random=new Random();
  byte[] bytes=new byte[10];
  while (true) {
    random.nextBytes(bytes);
    Buffer buffer=new FixedBuffer(bytes);
    try {
      int i=buffer.readVarInt();
    }
 catch (    IllegalArgumentException e) {
      logger.info(e.getMessage(),e);
      String binaryString=Bytes.toStringBinary(bytes);
      logger.info(binaryString);
      ;
      for (      byte aByte : bytes) {
        String code=String.valueOf((int)aByte);
        logger.info(code);
      }
      return;
    }
  }
}","public void find_SVarInt_errorCode() throws Exception {
  Random random=new Random();
  byte[] bytes=new byte[10];
  while (true) {
    random.nextBytes(bytes);
    Buffer buffer=new FixedBuffer(bytes);
    try {
      int i=buffer.readVarInt();
    }
 catch (    IllegalArgumentException e) {
      logger.info(e.getMessage(),e);
      String binaryString=BytesUtils.toString(bytes);
      logger.info(binaryString);
      ;
      for (      byte aByte : bytes) {
        String code=String.valueOf((int)aByte);
        logger.info(code);
      }
      return;
    }
  }
}"
53773,"public void find_SVarLong_errorCode() throws Exception {
  Random random=new Random();
  byte[] bytes=new byte[10];
  while (true) {
    random.nextBytes(bytes);
    Buffer buffer=new FixedBuffer(bytes);
    try {
      long i=buffer.readVarLong();
    }
 catch (    IllegalArgumentException e) {
      logger.info(e.getMessage(),e);
      String binaryString=Bytes.toStringBinary(bytes);
      logger.info(binaryString);
      ;
      for (      byte aByte : bytes) {
        String code=String.valueOf((int)aByte);
        logger.info(code);
      }
      return;
    }
  }
}","public void find_SVarLong_errorCode() throws Exception {
  Random random=new Random();
  byte[] bytes=new byte[10];
  while (true) {
    random.nextBytes(bytes);
    Buffer buffer=new FixedBuffer(bytes);
    try {
      long i=buffer.readVarLong();
    }
 catch (    IllegalArgumentException e) {
      logger.info(e.getMessage(),e);
      String binaryString=BytesUtils.toString(bytes);
      logger.info(binaryString);
      ;
      for (      byte aByte : bytes) {
        String code=String.valueOf((int)aByte);
        logger.info(code);
      }
      return;
    }
  }
}"
53774,"@Test public void testMakeColumnName() throws Exception {
  final byte[] columnNameBytes=ApplicationMapStatisticsUtils.makeColumnName(""String_Node_Str"",(short)10);
  short slotNumber=Bytes.toShort(columnNameBytes);
  Assert.assertEquals(slotNumber,10);
  String columnName=Bytes.toString(columnNameBytes,Bytes.SIZEOF_SHORT,columnNameBytes.length - Bytes.SIZEOF_SHORT);
  Assert.assertEquals(columnName,""String_Node_Str"");
}","@Test public void testMakeColumnName() throws Exception {
  final byte[] columnNameBytes=ApplicationMapStatisticsUtils.makeColumnName(""String_Node_Str"",(short)10);
  short slotNumber=BytesUtils.bytesToShort(columnNameBytes,0);
  Assert.assertEquals(slotNumber,10);
  String columnName=BytesUtils.toString(columnNameBytes,BytesUtils.SHORT_BYTE_LENGTH,columnNameBytes.length - BytesUtils.SHORT_BYTE_LENGTH);
  Assert.assertEquals(columnName,""String_Node_Str"");
}"
53775,"@Test public void testAddStringLong(){
  byte[] testAgents=BytesUtils.add(""String_Node_Str"",11L);
  byte[] buf=Bytes.add(Bytes.toBytes(""String_Node_Str""),Bytes.toBytes(11L));
  Assert.assertArrayEquals(testAgents,buf);
}","@Test public void testAddStringLong(){
  byte[] testAgents=BytesUtils.add(""String_Node_Str"",11L);
  byte[] buf=ByteBuffer.allocate(17).put(""String_Node_Str"".getBytes()).putLong(11L).array();
  Assert.assertArrayEquals(testAgents,buf);
}"
53776,"private void checkInt(int i){
  byte[] bytes=Bytes.toBytes(i);
  int i2=BytesUtils.bytesToInt(bytes,0);
  Assert.assertEquals(i,i2);
  int i3=Bytes.toInt(bytes);
  Assert.assertEquals(i,i3);
}","private void checkInt(int i){
  byte[] bytes=Ints.toByteArray(i);
  int i2=BytesUtils.bytesToInt(bytes,0);
  Assert.assertEquals(i,i2);
  int i3=Ints.fromByteArray(bytes);
  Assert.assertEquals(i,i3);
}"
53777,"private void check(String agentId0,long l1){
  TSpan span=new TSpan();
  span.setAgentId(agentId0);
  span.setStartTime(l1);
  byte[] traceIndexRowKey=SpanUtils.getAgentIdTraceIndexRowKey(span.getAgentId(),span.getStartTime());
  String agentId=Bytes.toString(traceIndexRowKey,0,PinpointConstants.AGENT_NAME_MAX_LEN).trim();
  Assert.assertEquals(agentId0,agentId);
  long time=TimeUtils.recoveryTimeMillis(Bytes.toLong(traceIndexRowKey,PinpointConstants.AGENT_NAME_MAX_LEN));
  Assert.assertEquals(time,l1);
}","private void check(String agentId0,long l1){
  TSpan span=new TSpan();
  span.setAgentId(agentId0);
  span.setStartTime(l1);
  byte[] traceIndexRowKey=SpanUtils.getAgentIdTraceIndexRowKey(span.getAgentId(),span.getStartTime());
  String agentId=BytesUtils.toString(traceIndexRowKey,0,PinpointConstants.AGENT_NAME_MAX_LEN).trim();
  Assert.assertEquals(agentId0,agentId);
  long time=Longs.fromByteArray(Arrays.copyOfRange(traceIndexRowKey,PinpointConstants.AGENT_NAME_MAX_LEN,PinpointConstants.AGENT_NAME_MAX_LEN + 8));
  time=TimeUtils.recoveryTimeMillis(time);
  Assert.assertEquals(time,l1);
}"
53778,"public PluginClassLoader run(){
  return new PluginClassLoader(urls,parent);
}","public PluginLoaderClassLoader run(){
  return new PluginLoaderClassLoader(urls,parent);
}"
53779,"private static PluginClassLoader createPluginClassLoader(final URL[] urls,final ClassLoader parent){
  if (SECURITY_MANAGER != null) {
    return AccessController.doPrivileged(new PrivilegedAction<PluginClassLoader>(){
      public PluginClassLoader run(){
        return new PluginClassLoader(urls,parent);
      }
    }
);
  }
 else {
    return new PluginClassLoader(urls,parent);
  }
}","private static PluginLoaderClassLoader createPluginClassLoader(final URL[] urls,final ClassLoader parent){
  if (SECURITY_MANAGER != null) {
    return AccessController.doPrivileged(new PrivilegedAction<PluginLoaderClassLoader>(){
      public PluginLoaderClassLoader run(){
        return new PluginLoaderClassLoader(urls,parent);
      }
    }
);
  }
 else {
    return new PluginLoaderClassLoader(urls,parent);
  }
}"
53780,"public PluginClassLoader run(){
  return new PluginClassLoader(urls,parent);
}","public ClassLoader run(){
  return createPluginClassLoader0(urls,parent);
}"
53781,"private PluginClassLoader createPluginClassLoader(final URL[] urls,final ClassLoader parent){
  if (SECURITY_MANAGER != null) {
    return AccessController.doPrivileged(new PrivilegedAction<PluginClassLoader>(){
      public PluginClassLoader run(){
        return new PluginClassLoader(urls,parent);
      }
    }
);
  }
 else {
    return new PluginClassLoader(urls,parent);
  }
}","private ClassLoader createPluginClassLoader(final URL[] urls,final ClassLoader parent){
  if (SECURITY_MANAGER != null) {
    return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>(){
      public ClassLoader run(){
        return createPluginClassLoader0(urls,parent);
      }
    }
);
  }
 else {
    return createPluginClassLoader0(urls,parent);
  }
}"
53782,"@Override protected Trace createTrace(Object target,Object[] args){
  final Request request=(Request)args[0];
  if (isAsynchronousProcess(request)) {
    final Trace trace=getTraceMetadata(request);
    if (trace != null) {
      trace.recordApi(TomcatConstants.SERVLET_ASYNCHRONOUS_API_TAG);
      getTraceContext().attachTraceObject(trace);
      return trace;
    }
  }
  final String requestURI=request.getRequestURI();
  if (excludeUrlFilter.filter(requestURI)) {
    if (isTrace) {
      logger.trace(""String_Node_Str"",requestURI);
    }
    return null;
  }
  final boolean sampling=samplingEnable(request);
  if (!sampling) {
    final TraceContext traceContext=getTraceContext();
    final Trace trace=traceContext.disableSampling();
    if (isDebug) {
      logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
    }
    return trace;
  }
  final TraceId traceId=populateTraceIdFromRequest(request);
  if (traceId != null) {
    final TraceContext traceContext=getTraceContext();
    final Trace trace=traceContext.continueTraceObject(traceId);
    if (trace.canSampled()) {
      recordRootSpan(trace,request);
      setTraceMetadata(request,trace);
      if (isDebug) {
        logger.debug(""String_Node_Str"",new Object[]{traceId,request.getRequestURI(),request.getRemoteAddr()});
      }
    }
 else {
      if (isDebug) {
        logger.debug(""String_Node_Str"",new Object[]{traceId,request.getRequestURI(),request.getRemoteAddr()});
      }
    }
    return trace;
  }
 else {
    final TraceContext traceContext=getTraceContext();
    final Trace trace=traceContext.newTraceObject();
    if (trace.canSampled()) {
      recordRootSpan(trace,request);
      setTraceMetadata(request,trace);
      if (isDebug) {
        logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
      }
    }
 else {
      if (isDebug) {
        logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
      }
    }
    return trace;
  }
}","@Override protected Trace createTrace(Object target,Object[] args){
  final Request request=(Request)args[0];
  if (isAsynchronousProcess(request)) {
    final Trace trace=getTraceMetadata(request);
    if (trace != null) {
      trace.recordApi(SERVLET_ASYNCHRONOUS_API_TAG);
      getTraceContext().attachTraceObject(trace);
      return trace;
    }
  }
  final String requestURI=request.getRequestURI();
  if (excludeUrlFilter.filter(requestURI)) {
    if (isTrace) {
      logger.trace(""String_Node_Str"",requestURI);
    }
    return null;
  }
  final boolean sampling=samplingEnable(request);
  if (!sampling) {
    final TraceContext traceContext=getTraceContext();
    final Trace trace=traceContext.disableSampling();
    if (isDebug) {
      logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
    }
    return trace;
  }
  final TraceId traceId=populateTraceIdFromRequest(request);
  if (traceId != null) {
    final TraceContext traceContext=getTraceContext();
    final Trace trace=traceContext.continueTraceObject(traceId);
    if (trace.canSampled()) {
      recordRootSpan(trace,request);
      setTraceMetadata(request,trace);
      if (isDebug) {
        logger.debug(""String_Node_Str"",new Object[]{traceId,request.getRequestURI(),request.getRemoteAddr()});
      }
    }
 else {
      if (isDebug) {
        logger.debug(""String_Node_Str"",new Object[]{traceId,request.getRequestURI(),request.getRemoteAddr()});
      }
    }
    return trace;
  }
 else {
    final TraceContext traceContext=getTraceContext();
    final Trace trace=traceContext.newTraceObject();
    if (trace.canSampled()) {
      recordRootSpan(trace,request);
      setTraceMetadata(request,trace);
      if (isDebug) {
        logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
      }
    }
 else {
      if (isDebug) {
        logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
      }
    }
    return trace;
  }
}"
53783,"private void recordRootSpan(final Trace trace,final HttpServletRequest request){
  trace.markBeforeTime();
  trace.recordServiceType(TomcatConstants.TOMCAT);
  final String requestURL=request.getRequestURI();
  trace.recordRpcName(requestURL);
  final int port=request.getServerPort();
  final String endPoint=request.getServerName() + ""String_Node_Str"" + port;
  trace.recordEndPoint(endPoint);
  final String remoteAddr=request.getRemoteAddr();
  trace.recordRemoteAddress(remoteAddr);
  if (!trace.isRoot()) {
    recordParentInfo(trace,request);
  }
  trace.recordApi(TomcatConstants.SERVLET_SYNCHRONOUS_API_TAG);
}","private void recordRootSpan(final Trace trace,final HttpServletRequest request){
  trace.markBeforeTime();
  trace.recordServiceType(TomcatConstants.TOMCAT);
  final String requestURL=request.getRequestURI();
  trace.recordRpcName(requestURL);
  final int port=request.getServerPort();
  final String endPoint=request.getServerName() + ""String_Node_Str"" + port;
  trace.recordEndPoint(endPoint);
  final String remoteAddr=request.getRemoteAddr();
  trace.recordRemoteAddress(remoteAddr);
  if (!trace.isRoot()) {
    recordParentInfo(trace,request);
  }
  trace.recordApi(SERVLET_SYNCHRONOUS_API_TAG);
}"
53784,"public ApplicationServerTypeResolver(List<DefaultProfilerPluginContext> plugins,ServiceType defaultType,List<String> orderedDetectors){
  if (isValidApplicationServerType(defaultType)) {
    this.defaultType=defaultType;
  }
 else {
    this.defaultType=ServiceType.UNDEFINED;
  }
  Map<String,ServerTypeDetector> registeredDetectors=getRegisteredServerTypeDetectors(plugins);
  for (  String orderedDetector : orderedDetectors) {
    if (registeredDetectors.containsKey(orderedDetector))     ;
    this.detectors.add(registeredDetectors.remove(orderedDetector));
  }
  this.detectors.addAll(registeredDetectors.values());
  this.resolver=new ApplicationServerTypePluginResolver(this.detectors);
}","public ApplicationServerTypeResolver(List<DefaultProfilerPluginContext> plugins,ServiceType defaultType,List<String> orderedDetectors){
  if (isValidApplicationServerType(defaultType)) {
    this.defaultType=defaultType;
  }
 else {
    this.defaultType=ServiceType.UNDEFINED;
  }
  Map<String,ServerTypeDetector> registeredDetectors=getRegisteredServerTypeDetectors(plugins);
  for (  String orderedDetector : orderedDetectors) {
    if (registeredDetectors.containsKey(orderedDetector)) {
      this.detectors.add(registeredDetectors.remove(orderedDetector));
    }
  }
  this.detectors.addAll(registeredDetectors.values());
  this.resolver=new ApplicationServerTypePluginResolver(this.detectors);
}"
53785,"public ApplicationServerTypeResolver(List<DefaultProfilerPluginContext> plugins,ServiceType defaultType,List<String> orderedDetectors){
  if (isValidApplicationServerType(defaultType)) {
    this.defaultType=defaultType;
  }
 else {
    this.defaultType=ServiceType.UNDEFINED;
  }
  Map<String,ServerTypeDetector> registeredDetectors=getRegisteredServerTypeDetectors(plugins);
  for (  String orderedDetector : orderedDetectors) {
    if (registeredDetectors.containsKey(orderedDetector))     ;
    this.detectors.add(registeredDetectors.remove(orderedDetector));
  }
  this.detectors.addAll(registeredDetectors.values());
  this.resolver=new ApplicationServerTypePluginResolver(this.detectors);
}","public ApplicationServerTypeResolver(List<DefaultProfilerPluginContext> plugins,ServiceType defaultType,List<String> orderedDetectors){
  if (isValidApplicationServerType(defaultType)) {
    this.defaultType=defaultType;
  }
 else {
    this.defaultType=ServiceType.UNDEFINED;
  }
  Map<String,ServerTypeDetector> registeredDetectors=getRegisteredServerTypeDetectors(plugins);
  for (  String orderedDetector : orderedDetectors) {
    if (registeredDetectors.containsKey(orderedDetector)) {
      this.detectors.add(registeredDetectors.remove(orderedDetector));
    }
  }
  this.detectors.addAll(registeredDetectors.values());
  this.resolver=new ApplicationServerTypePluginResolver(this.detectors);
}"
53786,"public boolean findClass(String javassistClassName,ClassPool classPool){
  URL url=classPool.find(javassistClassName);
  if (url == null) {
    return false;
  }
  return true;
}","@Override public boolean findClass(ClassLoader classLoader,String javassistClassName){
  ClassPool classPool=findClassPool(classLoader);
  return findClass(javassistClassName,classPool);
}"
53787,"private void addOracleDriver(){
  AbstractModifier oracleDriverModifier=new OracleDriverModifier(byteCodeInstrumentor,agent);
  addModifier(oracleDriverModifier);
  AbstractModifier oracleConnectionModifier=new PhysicalConnectionModifier(byteCodeInstrumentor,agent);
  addModifier(oracleConnectionModifier);
  AbstractModifier oraclePreparedStatementModifier=new OraclePreparedStatementWrapperModifier(byteCodeInstrumentor,agent);
  addModifier(oraclePreparedStatementModifier);
  AbstractModifier oracleStatement=new OracleStatementWrapperModifier(byteCodeInstrumentor,agent);
  addModifier(oracleStatement);
}","private void addOracleDriver(){
  AbstractModifier oracleDriverModifier=new OracleDriverModifier(byteCodeInstrumentor,agent);
  addModifier(oracleDriverModifier);
  AbstractModifier oracleConnectionModifier=new PhysicalConnectionModifier(byteCodeInstrumentor,agent);
  addModifier(oracleConnectionModifier);
  AbstractModifier oraclePreparedStatementWrapperModifier=new OraclePreparedStatementWrapperModifier(byteCodeInstrumentor,agent);
  addModifier(oraclePreparedStatementWrapperModifier);
  AbstractModifier oraclePreparedStatementModifier=new OraclePreparedStatementModifier(byteCodeInstrumentor,agent);
  addModifier(oraclePreparedStatementModifier);
  AbstractModifier oracleStatementWrapperModifier=new OracleStatementWrapperModifier(byteCodeInstrumentor,agent);
  addModifier(oracleStatementWrapperModifier);
  AbstractModifier oracleStatementModifier=new OracleStatementModifier(byteCodeInstrumentor,agent);
  addModifier(oracleStatementModifier);
}"
53788,"@Override public void doInAfterTrace(RecordableTrace trace,Object target,Object[] args,Object result,Throwable throwable){
  ParsingResult parsingResult=((ParsingResultTraceValue)result)._$PINPOINT$_getTraceParsingResult();
  trace.recordSqlParsingResult(parsingResult);
  trace.recordException(throwable);
  trace.recordApi(getMethodDescriptor());
  trace.markAfterTime();
}","@Override public void doInAfterTrace(RecordableTrace trace,Object target,Object[] args,Object result,Throwable throwable){
  if (result instanceof ParsingResultTraceValue) {
    ParsingResult parsingResult=((ParsingResultTraceValue)result)._$PINPOINT$_getTraceParsingResult();
    trace.recordSqlParsingResult(parsingResult);
  }
  trace.recordException(throwable);
  trace.recordApi(getMethodDescriptor());
  trace.markAfterTime();
}"
53789,"private ZooKeeper createNewZookeeper(){
  ZooKeeper zookeeper=null;
  try {
    zookeeper=new ZooKeeper(hostPort,sessionTimeout,watcher);
    return zookeeper;
  }
 catch (  IOException e) {
    if (zookeeper != null) {
      try {
        zookeeper.close();
      }
 catch (      InterruptedException ie) {
        Thread.currentThread().interrupt();
      }
    }
  }
  return null;
}","private ZooKeeper createNewZookeeper(){
  try {
    return new ZooKeeper(hostPort,sessionTimeout,watcher);
  }
 catch (  IOException ignore) {
  }
  return null;
}"
53790,"private ZooKeeper createNewZookeeper(){
  ZooKeeper zookeeper=null;
  try {
    zookeeper=new ZooKeeper(hostPort,sessionTimeout,manager);
    return zookeeper;
  }
 catch (  IOException e) {
    if (zookeeper != null) {
      try {
        zookeeper.close();
      }
 catch (      InterruptedException ie) {
        Thread.currentThread().interrupt();
      }
    }
  }
  return null;
}","private ZooKeeper createNewZookeeper(){
  try {
    return new ZooKeeper(hostPort,sessionTimeout,manager);
  }
 catch (  IOException ignore) {
  }
  return null;
}"
53791,"private static Map<String,String> parseAgentArgs(String str){
  Map<String,String> map=new HashMap<String,String>();
  Scanner scanner=new Scanner(str);
  scanner.useDelimiter(""String_Node_Str"");
  while (scanner.hasNext()) {
    String token=scanner.next();
    int assign=token.indexOf('=');
    if (assign == -1) {
      map.put(token,""String_Node_Str"");
    }
 else {
      map.put(token.substring(0,assign),token.substring(assign + 1));
    }
  }
  return map;
}","private static Map<String,String> parseAgentArgs(String str){
  Map<String,String> map=new HashMap<String,String>();
  if (str == null || str.isEmpty()) {
    return map;
  }
  Scanner scanner=new Scanner(str);
  scanner.useDelimiter(""String_Node_Str"");
  while (scanner.hasNext()) {
    String token=scanner.next();
    int assign=token.indexOf('=');
    if (assign == -1) {
      map.put(token,""String_Node_Str"");
    }
 else {
      map.put(token.substring(0,assign),token.substring(assign + 1));
    }
  }
  return map;
}"
53792,"private List<Class<? extends Annotation>> getTargetAnnotations(ClassLoader loader){
  List<Class<? extends Annotation>> targetAnnotations=targetAnnotationMap.get(loader);
  if (targetAnnotations == null) {
    targetAnnotations=loadTargetAnnotations(loader);
    targetAnnotationMap.put(loader,targetAnnotations);
  }
  return targetAnnotations;
}","private List<Class<? extends Annotation>> getTargetAnnotations(ClassLoader classLoader){
  ClassLoader nonNull=classLoader == null ? ClassLoader.getSystemClassLoader() : classLoader;
  List<Class<? extends Annotation>> targetAnnotations=targetAnnotationMap.get(nonNull);
  if (targetAnnotations == null) {
    targetAnnotations=loadTargetAnnotations(nonNull);
    targetAnnotationMap.put(nonNull,targetAnnotations);
  }
  return targetAnnotations;
}"
53793,"@PreDestroy @Override public void tearDown(){
  if (!config.isClusterEnable()) {
    logger.info(""String_Node_Str"");
    return;
  }
  if (!(this.serviceState.changeStateDestroying())) {
    WorkerState state=this.serviceState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  if (this.profilerClusterManager != null) {
    profilerClusterManager.stop();
  }
  if (this.webClusterManager != null) {
    webClusterManager.stop();
  }
  if (client != null) {
    client.close();
  }
  if (webCluster != null) {
    webCluster.close();
  }
  this.serviceState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}","@PreDestroy @Override public void tearDown(){
  if (!config.isClusterEnable()) {
    logger.info(""String_Node_Str"");
    return;
  }
  if (!(this.serviceState.changeStateDestroying())) {
    WorkerState state=this.serviceState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  if (this.profilerClusterManager != null) {
    profilerClusterManager.stop();
  }
  if (this.webClusterManager != null) {
    webClusterManager.stop();
  }
  if (client != null) {
    client.close();
  }
  if (webCluster != null) {
    webCluster.close();
  }
  this.serviceState.changeStateStopped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}"
53794,"public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  boolean interrupted=false;
  while (this.workerThread.isAlive()) {
    this.workerThread.interrupt();
    try {
      this.workerThread.join(100L);
    }
 catch (    InterruptedException e) {
      interrupted=true;
    }
  }
  this.workerState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}","public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  boolean interrupted=false;
  while (this.workerThread.isAlive()) {
    this.workerThread.interrupt();
    try {
      this.workerThread.join(100L);
    }
 catch (    InterruptedException e) {
      interrupted=true;
    }
  }
  this.workerState.changeStateStopped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}"
53795,"public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  if (worker != null) {
    worker.stop();
  }
  this.workerState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}","public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  if (worker != null) {
    worker.stop();
  }
  this.workerState.changeStateStopped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}"
53796,"public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  final boolean stopOffer=queue.offer(stopTask);
  if (!stopOffer) {
    logger.warn(""String_Node_Str"");
  }
  boolean interrupted=false;
  while (this.workerThread.isAlive()) {
    this.workerThread.interrupt();
    try {
      this.workerThread.join(100L);
    }
 catch (    InterruptedException e) {
      interrupted=true;
    }
  }
  this.workerState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}","public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  final boolean stopOffer=queue.offer(stopTask);
  if (!stopOffer) {
    logger.warn(""String_Node_Str"");
  }
  boolean interrupted=false;
  while (this.workerThread.isAlive()) {
    this.workerThread.interrupt();
    try {
      this.workerThread.join(100L);
    }
 catch (    InterruptedException e) {
      interrupted=true;
    }
  }
  this.workerState.changeStateStopped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}"
53797,"public void readRowKey(byte[] bytes){
  this.agentId=BytesUtils.toString(bytes,0,PinpointConstants.AGENT_NAME_MAX_LEN).trim();
  this.startTime=TimeUtils.recoveryTimeMillis(readTime(bytes));
  this.apiId=readKeyCode(bytes);
}","public void readRowKey(byte[] bytes){
  this.agentId=BytesUtils.safeTrim(BytesUtils.toString(bytes,0,PinpointConstants.AGENT_NAME_MAX_LEN));
  this.startTime=TimeUtils.recoveryTimeMillis(readTime(bytes));
  this.apiId=readKeyCode(bytes);
}"
53798,"public void readRowKey(byte[] rowKey){
  this.agentId=BytesUtils.toString(rowKey,0,PinpointConstants.AGENT_NAME_MAX_LEN).trim();
  this.startTime=TimeUtils.recoveryTimeMillis(readTime(rowKey));
  this.hashCode=readKeyCode(rowKey);
}","public void readRowKey(byte[] rowKey){
  this.agentId=BytesUtils.safeTrim(BytesUtils.toString(rowKey,0,PinpointConstants.AGENT_NAME_MAX_LEN));
  this.startTime=TimeUtils.recoveryTimeMillis(readTime(rowKey));
  this.hashCode=readKeyCode(rowKey);
}"
53799,"public void readRowKey(byte[] rowKey){
  this.agentId=BytesUtils.toString(rowKey,0,PinpointConstants.AGENT_NAME_MAX_LEN).trim();
  this.startTime=TimeUtils.recoveryTimeMillis(readTime(rowKey));
  this.stringId=readKeyCode(rowKey);
}","public void readRowKey(byte[] rowKey){
  this.agentId=BytesUtils.safeTrim(BytesUtils.toString(rowKey,0,PinpointConstants.AGENT_NAME_MAX_LEN));
  this.startTime=TimeUtils.recoveryTimeMillis(readTime(rowKey));
  this.stringId=readKeyCode(rowKey);
}"
53800,"public static String toString(final byte[] bytes,final int offset,final int length){
  if (bytes == null) {
    return null;
  }
  if (offset < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + offset);
  }
  if (length == 0) {
    return ""String_Node_Str"";
  }
  try {
    return new String(bytes,offset,length,UTF8);
  }
 catch (  UnsupportedEncodingException e) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
    return null;
  }
}","public static String toString(final byte[] bytes,final int offset,final int length){
  if (bytes == null) {
    return null;
  }
  if (offset < 0) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + offset);
  }
  if (length == 0) {
    return ""String_Node_Str"";
  }
  try {
    return new String(bytes,offset,length,UTF8);
  }
 catch (  UnsupportedEncodingException e) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
    return null;
  }
}"
53801,"private void next(){
  if (nextElement != null || nextException != null) {
    return;
  }
  while (true) {
    final boolean hasMoreElements=delegate.hasMoreElements();
    E nextElement;
    try {
      nextElement=delegate.nextElement();
    }
 catch (    Exception e) {
      this.hasMoreElements=hasMoreElements;
      this.nextException=e;
      break;
    }
    if (filter.filter(nextElement)) {
      continue;
    }
    this.hasMoreElements=hasMoreElements;
    if (nextElement == null) {
      this.nextElement=(E)NULL_OBJECT;
    }
 else {
      this.nextElement=nextElement;
    }
    break;
  }
}","private void next(final boolean hasMoreElementMethod){
  if (nextElement != null || nextException != null) {
    return;
  }
  while (true) {
    final boolean nextExist=delegate.hasMoreElements();
    if (!nextExist && hasMoreElementMethod) {
      this.hasMoreElements=false;
      return;
    }
    E nextElement;
    try {
      nextElement=delegate.nextElement();
    }
 catch (    Exception e) {
      this.hasMoreElements=nextExist;
      this.nextException=e;
      break;
    }
    if (filter.filter(nextElement)) {
      continue;
    }
    this.hasMoreElements=nextExist;
    if (nextElement == null) {
      this.nextElement=(E)NULL_OBJECT;
    }
 else {
      this.nextElement=nextElement;
    }
    break;
  }
}"
53802,"@Override public boolean hasMoreElements(){
  next();
  return hasMoreElements;
}","@Override public boolean hasMoreElements(){
  next(true);
  return hasMoreElements;
}"
53803,"@SuppressWarnings(""String_Node_Str"") private <T extends Exception>void throwException(Exception exception) throws T {
  throw (T)exception;
}","@SuppressWarnings(""String_Node_Str"") private <T extends Exception>void throwException(final Exception exception) throws T {
  throw (T)exception;
}"
53804,"@Override public E nextElement(){
  next();
  if (nextException != null) {
    Exception exception=this.nextException;
    this.nextException=null;
    this.<RuntimeException>throwException(exception);
  }
  final E result=getNextElement();
  this.nextElement=null;
  return result;
}","@Override public E nextElement(){
  next(false);
  if (nextException != null) {
    final Exception exception=this.nextException;
    clearNext();
    this.<RuntimeException>throwException(exception);
  }
  final E result=getNextElement();
  clearNext();
  return result;
}"
53805,"@Test public void testNormal() throws Exception {
  Hashtable<String,String> hashTable=new Hashtable<String,String>();
  hashTable.put(""String_Node_Str"",""String_Node_Str"");
  hashTable.put(""String_Node_Str"",""String_Node_Str"");
  hashTable.put(""String_Node_Str"",""String_Node_Str"");
  List<String> valueList=new ArrayList<String>(hashTable.values());
  Enumeration<String> enumeration=hashTable.elements();
  DelegateEnumeration<String> delegateEnumeration=new DelegateEnumeration<String>(enumeration);
  Assert.assertTrue(delegateEnumeration.hasMoreElements());
  Assert.assertTrue(valueList.remove(delegateEnumeration.nextElement()));
  Assert.assertTrue(delegateEnumeration.hasMoreElements());
  Assert.assertTrue(valueList.remove(delegateEnumeration.nextElement()));
  Assert.assertTrue(delegateEnumeration.hasMoreElements());
  Assert.assertTrue(valueList.remove(delegateEnumeration.nextElement()));
  Assert.assertTrue(valueList.isEmpty());
  Assert.assertFalse(delegateEnumeration.hasMoreElements());
  assertNextElements_Expected_ExceptionEmulation(enumeration,delegateEnumeration);
}","@Test public void testNormal() throws Exception {
  Hashtable<String,String> hashTable=new Hashtable<String,String>();
  hashTable.put(""String_Node_Str"",""String_Node_Str"");
  hashTable.put(""String_Node_Str"",""String_Node_Str"");
  hashTable.put(""String_Node_Str"",""String_Node_Str"");
  List<String> valueList=new ArrayList<String>(hashTable.values());
  Enumeration<String> enumeration=hashTable.elements();
  DelegateEnumeration<String> delegateEnumeration=new DelegateEnumeration<String>(enumeration);
  Assert.assertTrue(delegateEnumeration.hasMoreElements());
  Assert.assertTrue(valueList.remove(delegateEnumeration.nextElement()));
  Assert.assertTrue(delegateEnumeration.hasMoreElements());
  Assert.assertTrue(valueList.remove(delegateEnumeration.nextElement()));
  Assert.assertTrue(delegateEnumeration.hasMoreElements());
  Assert.assertTrue(valueList.remove(delegateEnumeration.nextElement()));
  Assert.assertTrue(valueList.isEmpty());
  Assert.assertFalse(delegateEnumeration.hasMoreElements());
  Assert.assertNull(delegateEnumeration._getNextException());
  assertNextElements_Expected_ExceptionEmulation(enumeration,delegateEnumeration);
}"
53806,"public AsyncQueueingExecutor(int queueSize,String executorName){
  if (executorName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.queue=new LinkedBlockingQueue<T>(queueSize);
  this.executeThread=this.createExecuteThread(executorName);
  this.executorName=executeThread.getName();
  this.maxDrainSize=10;
  this.drain=new UnsafeArrayCollection<T>(maxDrainSize);
}","public AsyncQueueingExecutor(int queueSize,String executorName){
  if (executorName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.maxDrainSize=10;
  this.drain=new UnsafeArrayCollection<T>(maxDrainSize);
  this.queue=new LinkedBlockingQueue<T>(queueSize);
  this.executeThread=this.createExecuteThread(executorName);
  this.executorName=executeThread.getName();
}"
53807,"private boolean isTarget(Class<?> clazz){
  if (rejected.getIfPresent(clazz) == Boolean.TRUE) {
    return false;
  }
  if (targetAnnotationNames != null) {
    List<Class<? extends Annotation>> targetAnnotations=getTargetAnnotations(clazz.getClassLoader());
    for (    Class<? extends Annotation> a : targetAnnotations) {
      if (clazz.isAnnotationPresent(a)) {
        return true;
      }
    }
    for (    Annotation a : clazz.getAnnotations()) {
      for (      Class<? extends Annotation> ac : targetAnnotations) {
        if (a.annotationType().isAnnotationPresent(ac)) {
          return true;
        }
      }
    }
  }
  if (targetClassPatterns != null) {
    String className=clazz.getName();
    for (    Pattern pattern : targetClassPatterns) {
      if (pattern.matcher(className).matches()) {
        return true;
      }
    }
  }
  rejected.put(clazz,Boolean.TRUE);
  return false;
}","private boolean isTarget(Class<?> clazz){
  if (rejected.getIfPresent(clazz) == EXIST) {
    return false;
  }
  if (targetAnnotationNames != null) {
    List<Class<? extends Annotation>> targetAnnotations=getTargetAnnotations(clazz.getClassLoader());
    for (    Class<? extends Annotation> a : targetAnnotations) {
      if (clazz.isAnnotationPresent(a)) {
        return true;
      }
    }
    for (    Annotation a : clazz.getAnnotations()) {
      for (      Class<? extends Annotation> ac : targetAnnotations) {
        if (a.annotationType().isAnnotationPresent(ac)) {
          return true;
        }
      }
    }
  }
  if (targetClassPatterns != null) {
    String className=clazz.getName();
    for (    Pattern pattern : targetClassPatterns) {
      if (pattern.matcher(className).matches()) {
        return true;
      }
    }
  }
  rejected.put(clazz,EXIST);
  return false;
}"
53808,"private Cache<Class<?>,Boolean> createCache(){
  final CacheBuilder<Object,Object> builder=CacheBuilder.newBuilder();
  builder.concurrencyLevel(CACHE_CONCURRENCY_LEVEL);
  builder.maximumSize(CACHE_SIZE);
  builder.weakKeys();
  return builder.build();
}","private Cache<Class<?>,Object> createCache(){
  final CacheBuilder<Object,Object> builder=CacheBuilder.newBuilder();
  builder.concurrencyLevel(CACHE_CONCURRENCY_LEVEL);
  builder.maximumSize(CACHE_SIZE);
  builder.weakKeys();
  return builder.build();
}"
53809,"public void addTransformed(Class<?> clazz){
  transformed.put(clazz,Boolean.TRUE);
}","public void addTransformed(Class<?> clazz){
  transformed.put(clazz,EXIST);
}"
53810,"public static Class<?> defineClass(ClassLoader classLoader,String className,byte[] classFile){
  try {
    return (Class<?>)DEFINE_CLASS.invoke(classLoader,className,classFile,0,classFile.length);
  }
 catch (  Exception e) {
    return null;
  }
}","public static Class<?> defineClass(ClassLoader classLoader,String className,byte[] classFile){
  try {
    return (Class<?>)DEFINE_CLASS.invoke(classLoader,className,classFile,0,classFile.length);
  }
 catch (  Exception ex) {
    throw new RuntimeException(""String_Node_Str"" + ex.getMessage(),ex);
  }
}"
53811,"public static Loader createLoader(ClassPool classPool){
  if (classPool == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final Loader loader=new Loader(classPool);
  loader.delegateLoadingOf(""String_Node_Str"");
  return loader;
}","public static Loader createLoader(final ClassPool classPool){
  if (classPool == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Loader loader;
  if (SECURITY_MANAGER != null) {
    loader=AccessController.doPrivileged(new PrivilegedAction<Loader>(){
      public Loader run(){
        return new Loader(classPool);
      }
    }
);
  }
 else {
    loader=new Loader(classPool);
  }
  loader.delegateLoadingOf(""String_Node_Str"");
  return loader;
}"
53812,"private static void close(Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    IOException e) {
    }
  }
}","private static void close(Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    IOException ignore) {
    }
  }
}"
53813,"/** 
 * 파라미터의 대기시간동안 이벤트가 일어날 경우 true 일어나지 않을 경우 false
 * @param waitTimeMillis
 * @return
 */
private boolean await(long waitTimeMillis,long waitUnitTimeMillis){
synchronized (lock) {
    long waitTime=waitTimeMillis;
    long waitUnitTime=waitUnitTimeMillis;
    if (waitTimeMillis < 1000) {
      waitTime=1000;
    }
    if (waitUnitTimeMillis < 100) {
      waitUnitTime=100;
    }
    long startTimeMillis=System.currentTimeMillis();
    while (latestJobRepository.size() == 0 && !isOverWaitTime(waitTime,startTimeMillis) && workerState.isStarted()) {
      try {
        lock.wait(waitUnitTime);
      }
 catch (      InterruptedException e) {
      }
    }
    if (isOverWaitTime(waitTime,startTimeMillis)) {
      return false;
    }
    return true;
  }
}","/** 
 * 파라미터의 대기시간동안 이벤트가 일어날 경우 true 일어나지 않을 경우 false
 * @param waitTimeMillis
 * @return
 */
private boolean await(long waitTimeMillis,long waitUnitTimeMillis){
synchronized (lock) {
    long waitTime=waitTimeMillis;
    long waitUnitTime=waitUnitTimeMillis;
    if (waitTimeMillis < 1000) {
      waitTime=1000;
    }
    if (waitUnitTimeMillis < 100) {
      waitUnitTime=100;
    }
    long startTimeMillis=System.currentTimeMillis();
    while (latestJobRepository.size() == 0 && !isOverWaitTime(waitTime,startTimeMillis) && workerState.isStarted()) {
      try {
        lock.wait(waitUnitTime);
      }
 catch (      InterruptedException ignore) {
      }
    }
    if (isOverWaitTime(waitTime,startTimeMillis)) {
      return false;
    }
    return true;
  }
}"
53814,"public static ClassLoader getDefaultClassLoader(ClassLoaderCallable defaultClassLoaderCallable){
  if (defaultClassLoaderCallable == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  try {
    final Thread th=Thread.currentThread();
    final ClassLoader contextClassLoader=th.getContextClassLoader();
    if (contextClassLoader != null) {
      return contextClassLoader;
    }
  }
 catch (  Throwable e) {
  }
  return defaultClassLoaderCallable.getClassLoader();
}","public static ClassLoader getDefaultClassLoader(ClassLoaderCallable defaultClassLoaderCallable){
  if (defaultClassLoaderCallable == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  try {
    final Thread th=Thread.currentThread();
    final ClassLoader contextClassLoader=th.getContextClassLoader();
    if (contextClassLoader != null) {
      return contextClassLoader;
    }
  }
 catch (  Throwable ignore) {
  }
  return defaultClassLoaderCallable.getClassLoader();
}"
53815,"public static boolean isLoaded(String name,ClassLoader classLoader){
  if (name == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ClassLoader classLoaderToUse=classLoader;
  if (classLoaderToUse == null) {
    classLoaderToUse=ClassLoaderUtils.getDefaultClassLoader();
  }
  try {
    return (classLoaderToUse.loadClass(name) != CLASS_NOT_LOADED);
  }
 catch (  ClassNotFoundException e) {
  }
  return false;
}","public static boolean isLoaded(String name,ClassLoader classLoader){
  if (name == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ClassLoader classLoaderToUse=classLoader;
  if (classLoaderToUse == null) {
    classLoaderToUse=ClassLoaderUtils.getDefaultClassLoader();
  }
  try {
    return (classLoaderToUse.loadClass(name) != CLASS_NOT_LOADED);
  }
 catch (  ClassNotFoundException ignore) {
  }
  return false;
}"
53816,"public static InetSocketAddress toInetSocketAddress(String address){
  try {
    URI uri=new URI(""String_Node_Str"" + address);
    return new InetSocketAddress(uri.getHost(),uri.getPort());
  }
 catch (  URISyntaxException e) {
  }
  return null;
}","public static InetSocketAddress toInetSocketAddress(String address){
  try {
    URI uri=new URI(""String_Node_Str"" + address);
    return new InetSocketAddress(uri.getHost(),uri.getPort());
  }
 catch (  URISyntaxException ignore) {
  }
  return null;
}"
53817,"/** 
 * 가지고 있는 외부에서 접근할수 있는 ip를 모두 반환합니다.  만약 로컬 ip가 획득하지 못할 경우 Empty List를 반환합니다. 
 */
public static List<String> getLocalV4IpList(){
  List<String> result=new ArrayList<String>();
  Enumeration<NetworkInterface> interfaces=null;
  try {
    interfaces=NetworkInterface.getNetworkInterfaces();
  }
 catch (  SocketException e) {
  }
  if (interfaces == null) {
    return Collections.EMPTY_LIST;
  }
  while (interfaces.hasMoreElements()) {
    NetworkInterface current=interfaces.nextElement();
    if (isSkipIp(current)) {
      continue;
    }
    Enumeration<InetAddress> addresses=current.getInetAddresses();
    while (addresses.hasMoreElements()) {
      InetAddress address=addresses.nextElement();
      if (address.isLoopbackAddress() || !(address instanceof Inet4Address)) {
        continue;
      }
      if (validationIpV4FormatAddress(address.getHostAddress())) {
        result.add(address.getHostAddress());
      }
    }
  }
  return result;
}","/** 
 * 가지고 있는 외부에서 접근할수 있는 ip를 모두 반환합니다.  만약 로컬 ip가 획득하지 못할 경우 Empty List를 반환합니다. 
 */
public static List<String> getLocalV4IpList(){
  List<String> result=new ArrayList<String>();
  Enumeration<NetworkInterface> interfaces=null;
  try {
    interfaces=NetworkInterface.getNetworkInterfaces();
  }
 catch (  SocketException ignore) {
  }
  if (interfaces == null) {
    return Collections.EMPTY_LIST;
  }
  while (interfaces.hasMoreElements()) {
    NetworkInterface current=interfaces.nextElement();
    if (isSkipIp(current)) {
      continue;
    }
    Enumeration<InetAddress> addresses=current.getInetAddresses();
    while (addresses.hasMoreElements()) {
      InetAddress address=addresses.nextElement();
      if (address.isLoopbackAddress() || !(address instanceof Inet4Address)) {
        continue;
      }
      if (validationIpV4FormatAddress(address.getHostAddress())) {
        result.add(address.getHostAddress());
      }
    }
  }
  return result;
}"
53818,"public static boolean validationIpV4FormatAddress(String address){
  try {
    String[] eachDotAddress=address.split(""String_Node_Str"");
    if (eachDotAddress.length != 4) {
      return false;
    }
    for (    String eachAddress : eachDotAddress) {
      if (Integer.parseInt(eachAddress) > 255) {
        return false;
      }
    }
    return true;
  }
 catch (  NumberFormatException e) {
  }
  return false;
}","public static boolean validationIpV4FormatAddress(String address){
  try {
    String[] eachDotAddress=address.split(""String_Node_Str"");
    if (eachDotAddress.length != 4) {
      return false;
    }
    for (    String eachAddress : eachDotAddress) {
      if (Integer.parseInt(eachAddress) > 255) {
        return false;
      }
    }
    return true;
  }
 catch (  NumberFormatException ignore) {
  }
  return false;
}"
53819,"public static boolean validationIpPortV4FormatAddress(String address){
  try {
    int splitIndex=address.indexOf(':');
    if (splitIndex == -1 || splitIndex + 1 >= address.length()) {
      return false;
    }
    String ip=address.substring(0,splitIndex);
    if (!validationIpV4FormatAddress(ip)) {
      return false;
    }
    String port=address.substring(splitIndex + 1,address.length());
    if (Integer.parseInt(port) > 65535) {
      return false;
    }
    return true;
  }
 catch (  Exception e) {
  }
  return false;
}","public static boolean validationIpPortV4FormatAddress(String address){
  try {
    int splitIndex=address.indexOf(':');
    if (splitIndex == -1 || splitIndex + 1 >= address.length()) {
      return false;
    }
    String ip=address.substring(0,splitIndex);
    if (!validationIpV4FormatAddress(ip)) {
      return false;
    }
    String port=address.substring(splitIndex + 1,address.length());
    if (Integer.parseInt(port) > 65535) {
      return false;
    }
    return true;
  }
 catch (  Exception ignore) {
  }
  return false;
}"
53820,"public static String getLocalV4Ip(){
  try {
    InetAddress localHost=InetAddress.getLocalHost();
    String localIp=localHost.getHostAddress();
    if (validationIpV4FormatAddress(localIp)) {
      return localIp;
    }
  }
 catch (  UnknownHostException e) {
  }
  return LOOPBACK_ADDRESS_V4;
}","public static String getLocalV4Ip(){
  try {
    InetAddress localHost=InetAddress.getLocalHost();
    String localIp=localHost.getHostAddress();
    if (validationIpV4FormatAddress(localIp)) {
      return localIp;
    }
  }
 catch (  UnknownHostException ignore) {
  }
  return LOOPBACK_ADDRESS_V4;
}"
53821,"private static boolean isSkipIp(NetworkInterface networkInterface){
  try {
    if (!networkInterface.isUp() || networkInterface.isLoopback() || networkInterface.isVirtual()) {
      return true;
    }
    return false;
  }
 catch (  Exception e) {
  }
  return true;
}","private static boolean isSkipIp(NetworkInterface networkInterface){
  try {
    if (!networkInterface.isUp() || networkInterface.isLoopback() || networkInterface.isVirtual()) {
      return true;
    }
    return false;
  }
 catch (  Exception ignore) {
  }
  return true;
}"
53822,"/** 
 * copy org.apache.http.client.utils.URIUtils#extractHost(java.net.URI)
 * @param uri
 * @return
 */
private NameIntValuePair<String> extractHost(final URI uri){
  if (uri == null) {
    return null;
  }
  NameIntValuePair<String> target=null;
  if (uri.isAbsolute()) {
    int port=uri.getPort();
    String host=uri.getHost();
    if (host == null) {
      host=uri.getAuthority();
      if (host != null) {
        int at=host.indexOf('@');
        if (at >= 0) {
          if (host.length() > at + 1) {
            host=host.substring(at + 1);
          }
 else {
            host=null;
          }
        }
        if (host != null) {
          int colon=host.indexOf(':');
          if (colon >= 0) {
            int pos=colon + 1;
            int len=0;
            for (int i=pos; i < host.length(); i++) {
              if (Character.isDigit(host.charAt(i))) {
                len++;
              }
 else {
                break;
              }
            }
            if (len > 0) {
              try {
                port=Integer.parseInt(host.substring(pos,pos + len));
              }
 catch (              NumberFormatException ex) {
              }
            }
            host=host.substring(0,colon);
          }
        }
      }
    }
    if (host != null) {
      target=new NameIntValuePair<String>(host,port);
    }
  }
  return target;
}","/** 
 * copy org.apache.http.client.utils.URIUtils#extractHost(java.net.URI)
 * @param uri
 * @return
 */
private NameIntValuePair<String> extractHost(final URI uri){
  if (uri == null) {
    return null;
  }
  NameIntValuePair<String> target=null;
  if (uri.isAbsolute()) {
    int port=uri.getPort();
    String host=uri.getHost();
    if (host == null) {
      host=uri.getAuthority();
      if (host != null) {
        int at=host.indexOf('@');
        if (at >= 0) {
          if (host.length() > at + 1) {
            host=host.substring(at + 1);
          }
 else {
            host=null;
          }
        }
        if (host != null) {
          int colon=host.indexOf(':');
          if (colon >= 0) {
            int pos=colon + 1;
            int len=0;
            for (int i=pos; i < host.length(); i++) {
              if (Character.isDigit(host.charAt(i))) {
                len++;
              }
 else {
                break;
              }
            }
            if (len > 0) {
              try {
                port=Integer.parseInt(host.substring(pos,pos + len));
              }
 catch (              NumberFormatException ignore) {
              }
            }
            host=host.substring(0,colon);
          }
        }
      }
    }
    if (host != null) {
      target=new NameIntValuePair<String>(host,port);
    }
  }
  return target;
}"
53823,"static Map<Integer,String> inverse(){
  Map<Integer,String> map=new HashMap<Integer,String>();
  Field[] fields=java.sql.Types.class.getFields();
  for (  Field field : fields) {
    String name=field.getName();
    try {
      Integer value=(Integer)field.get(java.sql.Types.class);
      map.put(value,name);
    }
 catch (    IllegalAccessException e) {
    }
  }
  return map;
}","static Map<Integer,String> inverse(){
  Map<Integer,String> map=new HashMap<Integer,String>();
  Field[] fields=java.sql.Types.class.getFields();
  for (  Field field : fields) {
    String name=field.getName();
    try {
      Integer value=(Integer)field.get(java.sql.Types.class);
      map.put(value,name);
    }
 catch (    IllegalAccessException ignore) {
    }
  }
  return map;
}"
53824,"private void close(Closeable closeable){
  if (closeable == null) {
    return;
  }
  try {
    closeable.close();
  }
 catch (  IOException e) {
  }
}","private void close(Closeable closeable){
  if (closeable == null) {
    return;
  }
  try {
    closeable.close();
  }
 catch (  IOException ignore) {
  }
}"
53825,"@Override public void close(){
  if (out != null) {
    try {
      out.close();
    }
 catch (    IOException e) {
    }
  }
}","@Override public void close(){
  if (out != null) {
    try {
      out.close();
    }
 catch (    IOException ignore) {
    }
  }
}"
53826,"@Test public void testDropNegative() throws Exception {
  String string=""String_Node_Str"";
  try {
    StringUtils.drop(string,-1);
    Assert.fail();
  }
 catch (  Exception e) {
  }
}","@Test public void testDropNegative() throws Exception {
  String string=""String_Node_Str"";
  try {
    StringUtils.drop(string,-1);
    Assert.fail();
  }
 catch (  Exception ignore) {
  }
}"
53827,"@Override protected synchronized Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
  Class clazz=findLoadedClass(name);
  if (clazz == null) {
    if (onLoadClass(name)) {
      clazz=findClass(name);
    }
 else {
      try {
        clazz=parent.loadClass(name);
      }
 catch (      ClassNotFoundException e) {
      }
      if (clazz == null) {
        clazz=findClass(name);
      }
    }
  }
  if (resolve) {
    resolveClass(clazz);
  }
  return clazz;
}","@Override protected synchronized Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
  Class clazz=findLoadedClass(name);
  if (clazz == null) {
    if (onLoadClass(name)) {
      clazz=findClass(name);
    }
 else {
      try {
        clazz=parent.loadClass(name);
      }
 catch (      ClassNotFoundException ignore) {
      }
      if (clazz == null) {
        clazz=findClass(name);
      }
    }
  }
  if (resolve) {
    resolveClass(clazz);
  }
  return clazz;
}"
53828,"public ClassLoader get(ClassLoader loader){
  final ClassLoader forPlugin=cache.get(loader);
  if (forPlugin != null) {
    return forPlugin;
  }
  final ClassLoader newInstance=new URLClassLoader(pluginJars,loader);
  final ClassLoader before=cache.putIfAbsent(loader,newInstance);
  if (before == null) {
    return newInstance;
  }
 else {
    close(newInstance);
    return before;
  }
}","public ClassLoader get(ClassLoader loader){
  final ClassLoader forPlugin=cache.get(loader);
  if (forPlugin != null) {
    return forPlugin;
  }
  final ClassLoader newInstance=createPluginClassLoader(pluginJars,loader);
  final ClassLoader before=cache.putIfAbsent(loader,newInstance);
  if (before == null) {
    return newInstance;
  }
 else {
    close(newInstance);
    return before;
  }
}"
53829,"public static <T>PluginLoader<T> get(Class<T> serviceType,String pluginPath){
  URL[] jars=findJars(pluginPath);
  URLClassLoader classLoader=new URLClassLoader(jars,ClassLoader.getSystemClassLoader());
  return new PluginLoader<T>(serviceType,classLoader);
}","public static <T>PluginLoader<T> get(Class<T> serviceType,String pluginPath){
  URL[] jars=findJars(pluginPath);
  URLClassLoader classLoader=createPluginClassLoader(jars,ClassLoader.getSystemClassLoader());
  return new PluginLoader<T>(serviceType,classLoader);
}"
53830,"public CmsCollector(MetricMonitorRegistry registry){
  if (registry == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final MetricRegistry metricRegistry=registry.getRegistry();
  final SortedMap<String,Gauge> gauges=metricRegistry.getGauges();
  this.heapMax=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_HEAP_MAX);
  this.heapUsed=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_HEAP_USED);
  this.heapNonHeapMax=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_NONHEAP_MAX);
  this.heapNonHeapUsed=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_NONHEAP_USED);
  this.gcCount=MetricMonitorValues.getLongGauge(gauges,JVM_GC_CMS_COUNT);
  this.gcTime=MetricMonitorValues.getLongGauge(gauges,JVM_GC_CMS_TIME);
}","public CmsCollector(MetricMonitorRegistry registry){
  if (registry == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final MetricRegistry metricRegistry=registry.getRegistry();
  final SortedMap<String,Gauge> gauges=metricRegistry.getGauges();
  this.heapMax=getLongGauge(gauges,JVM_MEMORY_HEAP_MAX);
  this.heapUsed=getLongGauge(gauges,JVM_MEMORY_HEAP_USED);
  this.heapNonHeapMax=getLongGauge(gauges,JVM_MEMORY_NONHEAP_MAX);
  this.heapNonHeapUsed=getLongGauge(gauges,JVM_MEMORY_NONHEAP_USED);
  this.gcCount=getLongGauge(gauges,JVM_GC_CMS_COUNT);
  this.gcTime=getLongGauge(gauges,JVM_GC_CMS_TIME);
}"
53831,"public G1Collector(MetricMonitorRegistry registry){
  if (registry == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final MetricRegistry metricRegistry=registry.getRegistry();
  final SortedMap<String,Gauge> gauges=metricRegistry.getGauges();
  this.heapMax=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_HEAP_MAX);
  this.heapUsed=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_HEAP_USED);
  this.heapNonHeapMax=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_NONHEAP_MAX);
  this.heapNonHeapUsed=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_NONHEAP_USED);
  this.gcCount=MetricMonitorValues.getLongGauge(gauges,JVM_GC_G1_OLD_COUNT);
  this.gcTime=MetricMonitorValues.getLongGauge(gauges,JVM_GC_G1_OLD_TIME);
}","public G1Collector(MetricMonitorRegistry registry){
  if (registry == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final MetricRegistry metricRegistry=registry.getRegistry();
  final SortedMap<String,Gauge> gauges=metricRegistry.getGauges();
  this.heapMax=getLongGauge(gauges,JVM_MEMORY_HEAP_MAX);
  this.heapUsed=getLongGauge(gauges,JVM_MEMORY_HEAP_USED);
  this.heapNonHeapMax=getLongGauge(gauges,JVM_MEMORY_NONHEAP_MAX);
  this.heapNonHeapUsed=getLongGauge(gauges,JVM_MEMORY_NONHEAP_USED);
  this.gcCount=getLongGauge(gauges,JVM_GC_G1_OLD_COUNT);
  this.gcTime=getLongGauge(gauges,JVM_GC_G1_OLD_TIME);
}"
53832,"public ParallelCollector(MetricMonitorRegistry registry){
  if (registry == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final MetricRegistry metricRegistry=registry.getRegistry();
  final SortedMap<String,Gauge> gauges=metricRegistry.getGauges();
  this.heapMax=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_HEAP_MAX);
  this.heapUsed=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_HEAP_USED);
  this.heapNonHeapMax=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_NONHEAP_MAX);
  this.heapNonHeapUsed=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_NONHEAP_USED);
  this.gcCount=MetricMonitorValues.getLongGauge(gauges,JVM_GC_PS_MS_COUNT);
  this.gcTime=MetricMonitorValues.getLongGauge(gauges,JVM_GC_PS_MS_TIME);
}","public ParallelCollector(MetricMonitorRegistry registry){
  if (registry == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final MetricRegistry metricRegistry=registry.getRegistry();
  final SortedMap<String,Gauge> gauges=metricRegistry.getGauges();
  this.heapMax=getLongGauge(gauges,JVM_MEMORY_HEAP_MAX);
  this.heapUsed=getLongGauge(gauges,JVM_MEMORY_HEAP_USED);
  this.heapNonHeapMax=getLongGauge(gauges,JVM_MEMORY_NONHEAP_MAX);
  this.heapNonHeapUsed=getLongGauge(gauges,JVM_MEMORY_NONHEAP_USED);
  this.gcCount=getLongGauge(gauges,JVM_GC_PS_MS_COUNT);
  this.gcTime=getLongGauge(gauges,JVM_GC_PS_MS_TIME);
}"
53833,"public SerialCollector(MetricMonitorRegistry registry){
  if (registry == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final MetricRegistry metricRegistry=registry.getRegistry();
  final SortedMap<String,Gauge> gauges=metricRegistry.getGauges();
  this.heapMax=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_HEAP_MAX);
  this.heapUsed=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_HEAP_USED);
  this.heapNonHeapMax=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_NONHEAP_MAX);
  this.heapNonHeapUsed=MetricMonitorValues.getLongGauge(gauges,JVM_MEMORY_NONHEAP_USED);
  this.gcCount=MetricMonitorValues.getLongGauge(gauges,JVM_GC_SERIAL_MSC_COUNT);
  this.gcTime=MetricMonitorValues.getLongGauge(gauges,JVM_GC_SERIAL_MSC_TIME);
}","public SerialCollector(MetricMonitorRegistry registry){
  if (registry == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final MetricRegistry metricRegistry=registry.getRegistry();
  final SortedMap<String,Gauge> gauges=metricRegistry.getGauges();
  this.heapMax=getLongGauge(gauges,JVM_MEMORY_HEAP_MAX);
  this.heapUsed=getLongGauge(gauges,JVM_MEMORY_HEAP_USED);
  this.heapNonHeapMax=getLongGauge(gauges,JVM_MEMORY_NONHEAP_MAX);
  this.heapNonHeapUsed=getLongGauge(gauges,JVM_MEMORY_NONHEAP_USED);
  this.gcCount=getLongGauge(gauges,JVM_GC_SERIAL_MSC_COUNT);
  this.gcTime=getLongGauge(gauges,JVM_GC_SERIAL_MSC_TIME);
}"
53834,"private int addInterceptor0(CtBehavior behavior,String methodName,Interceptor interceptor,int interceptorId,Type type,boolean useContextClassLoader) throws InstrumentException, NotFoundInstrumentException {
  try {
    if (interceptor != null) {
      if (interceptor instanceof StaticAroundInterceptor) {
        StaticAroundInterceptor staticAroundInterceptor=(StaticAroundInterceptor)interceptor;
        interceptorId=InterceptorRegistry.addInterceptor(staticAroundInterceptor);
      }
 else       if (interceptor instanceof SimpleAroundInterceptor) {
        SimpleAroundInterceptor simpleAroundInterceptor=(SimpleAroundInterceptor)interceptor;
        interceptorId=InterceptorRegistry.addSimpleInterceptor(simpleAroundInterceptor);
      }
 else {
        throw new InstrumentException(""String_Node_Str"" + interceptor);
      }
      injectInterceptor(behavior,interceptor);
    }
 else {
      interceptor=InterceptorRegistry.findInterceptor(interceptorId);
    }
    if (interceptor instanceof StaticAroundInterceptor) {
switch (type) {
case around:
        addStaticAroundInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
      break;
case before:
    addStaticBeforeInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
  break;
case after:
addStaticAfterInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"");
}
}
 else if (interceptor instanceof SimpleAroundInterceptor) {
switch (type) {
case around:
addSimpleAroundInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
break;
case before:
addSimpleBeforeInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
break;
case after:
addSimpleAfterInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"");
}
}
 else {
throw new IllegalArgumentException(""String_Node_Str"");
}
return interceptorId;
}
 catch (NotFoundException e) {
throw new InstrumentException(interceptor.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage(),e);
}
catch (CannotCompileException e) {
throw new InstrumentException(interceptor.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage(),e);
}
}","private int addInterceptor0(CtBehavior behavior,String methodName,Interceptor interceptor,int interceptorId,Type type,boolean useContextClassLoader) throws InstrumentException, NotFoundInstrumentException {
  try {
    if (interceptor != null) {
      if (interceptor instanceof StaticAroundInterceptor) {
        StaticAroundInterceptor staticAroundInterceptor=(StaticAroundInterceptor)interceptor;
        interceptorId=InterceptorRegistry.addInterceptor(staticAroundInterceptor);
      }
 else       if (interceptor instanceof SimpleAroundInterceptor) {
        SimpleAroundInterceptor simpleAroundInterceptor=(SimpleAroundInterceptor)interceptor;
        interceptorId=InterceptorRegistry.addSimpleInterceptor(simpleAroundInterceptor);
      }
 else {
        throw new InstrumentException(""String_Node_Str"" + interceptor);
      }
      injectInterceptor(behavior,interceptor);
    }
 else {
      interceptor=InterceptorRegistry.findInterceptor(interceptorId);
    }
    if (interceptor instanceof StaticAroundInterceptor) {
switch (type) {
case around:
        addStaticAroundInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
      break;
case before:
    addStaticBeforeInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
  break;
case after:
addStaticAfterInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"");
}
}
 else if (interceptor instanceof SimpleAroundInterceptor) {
switch (type) {
case around:
addSimpleAroundInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
break;
case before:
addSimpleBeforeInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
break;
case after:
addSimpleAfterInterceptor(methodName,interceptorId,behavior,useContextClassLoader);
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"");
}
}
 else {
throw new IllegalArgumentException(""String_Node_Str"");
}
return interceptorId;
}
 catch (NotFoundException e) {
throw new InstrumentException(getInterceptorName(interceptor) + ""String_Node_Str"" + e.getMessage(),e);
}
catch (CannotCompileException e) {
throw new InstrumentException(getInterceptorName(interceptor) + ""String_Node_Str"" + e.getMessage(),e);
}
}"
53835,"@Override public byte[] modify(ClassLoader classLoader,String javassistClassName,ProtectionDomain protectedDomain,byte[] classFileBuffer){
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"",javassistClassName);
  }
  try {
    InstrumentClass ibatisClientImpl=byteCodeInstrumentor.getClass(classLoader,javassistClassName,classFileBuffer);
    List<MethodInfo> declaredMethods=ibatisClientImpl.getDeclaredMethods(getIbatisApiMethodFilter());
    for (    MethodInfo method : declaredMethods) {
      Interceptor ibatisApiInterceptor=new IbatisSqlMapOperationInterceptor(serviceType);
      ibatisClientImpl.addScopeInterceptor(method.getName(),method.getParameterTypes(),ibatisApiInterceptor,scope);
    }
    return ibatisClientImpl.toBytecode();
  }
 catch (  Throwable e) {
    this.logger.warn(""String_Node_Str"",javassistClassName,e.getMessage(),e);
    return null;
  }
}","@Override public byte[] modify(ClassLoader classLoader,String javassistClassName,ProtectionDomain protectedDomain,byte[] classFileBuffer){
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"",javassistClassName);
  }
  try {
    InstrumentClass ibatisClientImpl=byteCodeInstrumentor.getClass(classLoader,javassistClassName,classFileBuffer);
    List<MethodInfo> declaredMethods=ibatisClientImpl.getDeclaredMethods(getIbatisApiMethodFilter());
    for (    MethodInfo method : declaredMethods) {
      Interceptor ibatisApiInterceptor=new IbatisSqlMapOperationInterceptor(serviceType);
      ibatisClientImpl.addScopeInterceptor(method.getName(),method.getParameterTypes(),ibatisApiInterceptor,SCOPE);
    }
    return ibatisClientImpl.toBytecode();
  }
 catch (  Throwable e) {
    this.logger.warn(""String_Node_Str"",javassistClassName,e.getMessage(),e);
    return null;
  }
}"
53836,"public DefaultSqlSessionModifier(ByteCodeInstrumentor byteCodeInstrumentor,Agent agent){
  super(byteCodeInstrumentor,agent);
  logger=LoggerFactory.getLogger(this.getClass());
}","public DefaultSqlSessionModifier(ByteCodeInstrumentor byteCodeInstrumentor,Agent agent){
  super(byteCodeInstrumentor,agent,DefaultSqlSessionModifier.class);
}"
53837,"@Override public byte[] modify(ClassLoader classLoader,String javassistClassName,ProtectionDomain protectedDomain,byte[] classFileBuffer){
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"",javassistClassName);
  }
  try {
    InstrumentClass myBatisClientImpl=byteCodeInstrumentor.getClass(classLoader,javassistClassName,classFileBuffer);
    List<MethodInfo> declaredMethods=myBatisClientImpl.getDeclaredMethods(getSqlSessionMethodFilter());
    for (    MethodInfo method : declaredMethods) {
      Interceptor sqlSessionInterceptor=new MyBatisSqlMapOperationInterceptor(serviceType);
      myBatisClientImpl.addScopeInterceptor(method.getName(),method.getParameterTypes(),sqlSessionInterceptor,scope);
    }
    return myBatisClientImpl.toBytecode();
  }
 catch (  Throwable e) {
    logger.warn(""String_Node_Str"",javassistClassName,e.getMessage(),e);
    return null;
  }
}","@Override public byte[] modify(ClassLoader classLoader,String javassistClassName,ProtectionDomain protectedDomain,byte[] classFileBuffer){
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"",javassistClassName);
  }
  try {
    InstrumentClass myBatisClientImpl=byteCodeInstrumentor.getClass(classLoader,javassistClassName,classFileBuffer);
    List<MethodInfo> declaredMethods=myBatisClientImpl.getDeclaredMethods(getSqlSessionMethodFilter());
    for (    MethodInfo method : declaredMethods) {
      Interceptor sqlSessionInterceptor=new MyBatisSqlMapOperationInterceptor(serviceType);
      myBatisClientImpl.addScopeInterceptor(method.getName(),method.getParameterTypes(),sqlSessionInterceptor,SCOPE);
    }
    return myBatisClientImpl.toBytecode();
  }
 catch (  Throwable e) {
    logger.warn(""String_Node_Str"",javassistClassName,e.getMessage(),e);
    return null;
  }
}"
53838,"public MyBatisClientModifier(ByteCodeInstrumentor byteCodeInstrumentor,Agent agent){
  super(byteCodeInstrumentor,agent);
}","public MyBatisClientModifier(ByteCodeInstrumentor byteCodeInstrumentor,Agent agent,Class<? extends MyBatisClientModifier> childClazz){
  super(byteCodeInstrumentor,agent);
  logger=LoggerFactory.getLogger(childClazz);
}"
53839,"public SqlSessionTemplateModifier(ByteCodeInstrumentor byteCodeInstrumentor,Agent agent){
  super(byteCodeInstrumentor,agent);
  this.logger=LoggerFactory.getLogger(this.getClass());
}","public SqlSessionTemplateModifier(ByteCodeInstrumentor byteCodeInstrumentor,Agent agent){
  super(byteCodeInstrumentor,agent,SqlSessionTemplateModifier.class);
}"
53840,"@Deprecated public static String getMachineName(){
  try {
    String name=null;
    Enumeration<NetworkInterface> enet=NetworkInterface.getNetworkInterfaces();
    while (enet.hasMoreElements() && (name == null)) {
      NetworkInterface net=enet.nextElement();
      if (net.isLoopback())       continue;
      Enumeration<InetAddress> eaddr=net.getInetAddresses();
      while (eaddr.hasMoreElements()) {
        InetAddress inet=eaddr.nextElement();
        final String canonicalHostName=inet.getCanonicalHostName();
        if (!canonicalHostName.equalsIgnoreCase(inet.getHostAddress())) {
          name=canonicalHostName;
          break;
        }
      }
    }
    return name;
  }
 catch (  SocketException e) {
    Logger.getLogger(NetworkUtils.class.getClass().getName()).warning(e.getMessage());
    return ""String_Node_Str"";
  }
}","@Deprecated public static String getMachineName(){
  try {
    Enumeration<NetworkInterface> enet=NetworkInterface.getNetworkInterfaces();
    while (enet.hasMoreElements()) {
      NetworkInterface net=enet.nextElement();
      if (net.isLoopback()) {
        continue;
      }
      Enumeration<InetAddress> eaddr=net.getInetAddresses();
      while (eaddr.hasMoreElements()) {
        InetAddress inet=eaddr.nextElement();
        final String canonicalHostName=inet.getCanonicalHostName();
        if (!canonicalHostName.equalsIgnoreCase(inet.getHostAddress())) {
          return canonicalHostName;
        }
      }
    }
    return ERROR_HOST_NAME;
  }
 catch (  SocketException e) {
    Logger.getLogger(NetworkUtils.class.getClass().getName()).warning(e.getMessage());
    return ERROR_HOST_NAME;
  }
}"
53841,"private void sendSMS(String jobName,Date start,Date end){
  String encodeMsg=encodeMessage(""String_Node_Str"" + jobName + ""String_Node_Str""+ start+ ""String_Node_Str"");
  for (  String number : cellPhoneNumbers) {
    String url=mexServerUrl + ""String_Node_Str"" + serviceID+ ""String_Node_Str""+ ""String_Node_Str""+ number+ ""String_Node_Str""+ ""String_Node_Str""+ number+ ""String_Node_Str""+ ""String_Node_Str""+ encodeMsg+ ""String_Node_Str"";
    try {
      URL submitURL=new URL(url);
      HttpURLConnection connection=(HttpURLConnection)submitURL.openConnection();
      connection.setConnectTimeout(3000);
      connection.setReadTimeout(3000);
      connection.setRequestMethod(""String_Node_Str"");
      connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      connection.connect();
      if (connection != null && connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
        logger.error(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}","private void sendSMS(String jobName,Date start,Date end){
  String encodeMsg=encodeMessage(""String_Node_Str"" + jobName + ""String_Node_Str""+ start+ ""String_Node_Str"");
  for (  String number : cellPhoneNumbers) {
    String url=mexServerUrl + ""String_Node_Str"" + serviceID+ ""String_Node_Str""+ ""String_Node_Str""+ number+ ""String_Node_Str""+ ""String_Node_Str""+ number+ ""String_Node_Str""+ ""String_Node_Str""+ encodeMsg+ ""String_Node_Str"";
    HttpURLConnection connection=null;
    try {
      connection=openHttpURLConnection(url);
      connection.setRequestMethod(""String_Node_Str"");
      connection.connect();
      if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
        logger.error(""String_Node_Str"");
      }
    }
 catch (    IOException ex) {
      logger.error(""String_Node_Str"" + ex.getMessage(),ex);
    }
 finally {
      close(connection);
    }
  }
}"
53842,"public ClassLoader get(ClassLoader loader){
  ClassLoader forPlugin=cache.get(loader);
  if (forPlugin != null) {
    return forPlugin;
  }
  ClassLoader newInstance=new URLClassLoader(pluginJars,loader);
  ClassLoader inCache=cache.putIfAbsent(loader,newInstance);
  return inCache == null ? newInstance : inCache;
}","public ClassLoader get(ClassLoader loader){
  final ClassLoader forPlugin=cache.get(loader);
  if (forPlugin != null) {
    return forPlugin;
  }
  final ClassLoader newInstance=new URLClassLoader(pluginJars,loader);
  final ClassLoader before=cache.putIfAbsent(loader,newInstance);
  if (before == null) {
    return newInstance;
  }
 else {
    close(newInstance);
    return before;
  }
}"
53843,"private String getEndpoint(String host,int port){
  if (host == null) {
    return ""String_Node_Str"";
  }
  if (port < 0) {
    return host;
  }
  StringBuilder sb=new StringBuilder(host.length() + 8);
  sb.append(host);
  sb.append(':');
  sb.append(port);
  return sb.toString();
}","private String getEndpoint(String host,int port){
  if (host == null) {
    return ""String_Node_Str"";
  }
  if (port < 0) {
    return host;
  }
  final StringBuilder sb=new StringBuilder(host.length() + 8);
  sb.append(host);
  sb.append(':');
  sb.append(port);
  return sb.toString();
}"
53844,"public HttpRequestExecuteInterceptor(){
  this.logger=PLoggerFactory.getLogger(this.getClass());
  this.isDebug=logger.isDebugEnabled();
}","public HttpRequestExecuteInterceptor(){
  super(HttpRequestExecuteInterceptor.class);
}"
53845,"public HttpUriRequestExecuteInterceptor(){
  this.logger=PLoggerFactory.getLogger(this.getClass());
  this.isDebug=logger.isDebugEnabled();
}","public HttpUriRequestExecuteInterceptor(){
  super(HttpUriRequestExecuteInterceptor.class);
}"
53846,"private ChildProcessException toException(String message,String exceptionClass,List<String> traceInText){
  StackTraceElement[] stackTrace=new StackTraceElement[traceInText.size()];
  for (int i=0; i < traceInText.size(); i++) {
    String trace=traceInText.get(i);
    String[] tokens=trace.split(""String_Node_Str"");
    stackTrace[i]=new StackTraceElement(tokens[0],tokens[1],tokens[2],Integer.valueOf(tokens[3]));
  }
  return new ChildProcessException(exceptionClass + ""String_Node_Str"" + message,stackTrace);
}","private ChildProcessException toException(String message,String exceptionClass,List<String> traceInText){
  StackTraceElement[] stackTrace=new StackTraceElement[traceInText.size()];
  for (int i=0; i < traceInText.size(); i++) {
    String trace=traceInText.get(i);
    String[] tokens=trace.split(""String_Node_Str"");
    stackTrace[i]=new StackTraceElement(tokens[0],tokens[1],tokens[2],Integer.parseInt(tokens[3]));
  }
  return new ChildProcessException(exceptionClass + ""String_Node_Str"" + message,stackTrace);
}"
53847,"public void close(){
  if (clientState.compareAndSet(true,false)) {
    if (zookeeper != null) {
      try {
        zookeeper.close();
      }
 catch (      InterruptedException ignore) {
        logger.debug(ignore.getMessage(),ignore);
      }
    }
  }
}","public void close(){
  if (clientState.compareAndSet(true,false)) {
    if (zookeeper != null) {
      try {
        zookeeper.close();
      }
 catch (      InterruptedException ignore) {
        logger.info(""String_Node_Str"" + ignore.getMessage(),ignore);
        Thread.currentThread().interrupt();
      }
    }
  }
}"
53848,"@PreDestroy @Override public void tearDown(){
  if (!config.isClusterEnable()) {
    logger.info(""String_Node_Str"");
    return;
  }
  if (!(this.serviceState.changeStateDestroying())) {
    WorkerState state=this.serviceState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  if (this.profilerClusterManager != null) {
    profilerClusterManager.stop();
  }
  if (this.webClusterManager != null) {
    webClusterManager.stop();
  }
  if (client != null) {
    client.close();
  }
  if (webCluster != null) {
    webCluster.close();
  }
  this.serviceState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  return;
}","@PreDestroy @Override public void tearDown(){
  if (!config.isClusterEnable()) {
    logger.info(""String_Node_Str"");
    return;
  }
  if (!(this.serviceState.changeStateDestroying())) {
    WorkerState state=this.serviceState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  if (this.profilerClusterManager != null) {
    profilerClusterManager.stop();
  }
  if (this.webClusterManager != null) {
    webClusterManager.stop();
  }
  if (client != null) {
    client.close();
  }
  if (webCluster != null) {
    webCluster.close();
  }
  this.serviceState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}"
53849,"public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  boolean interrupted=false;
  while (this.workerThread.isAlive()) {
    this.workerThread.interrupt();
    try {
      this.workerThread.join(100L);
    }
 catch (    InterruptedException e) {
      interrupted=true;
    }
  }
  this.workerState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  return;
}","public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  boolean interrupted=false;
  while (this.workerThread.isAlive()) {
    this.workerThread.interrupt();
    try {
      this.workerThread.join(100L);
    }
 catch (    InterruptedException e) {
      interrupted=true;
    }
  }
  this.workerState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}"
53850,"public ZookeeperProfilerClusterManager(ZookeeperClient client,String serverIdentifier,ClusterPointRepository profileCluster){
  this.workerState=new WorkerStateContext();
  this.profileCluster=profileCluster;
  this.client=client;
  this.worker=new ZookeeperLatestJobWorker(client,serverIdentifier);
}","public ZookeeperProfilerClusterManager(ZookeeperClient client,String serverIdentifier,ClusterPointRepository profileCluster){
  this.workerState=new WorkerStateContext();
  this.profileCluster=profileCluster;
  this.worker=new ZookeeperLatestJobWorker(client,serverIdentifier);
}"
53851,"public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  if (worker != null) {
    worker.stop();
  }
  this.workerState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  return;
}","public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  if (worker != null) {
    worker.stop();
  }
  this.workerState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}"
53852,"public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  queue.offer(stopTask);
  boolean interrupted=false;
  while (this.workerThread.isAlive()) {
    this.workerThread.interrupt();
    try {
      this.workerThread.join(100L);
    }
 catch (    InterruptedException e) {
      interrupted=true;
    }
  }
  this.workerState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  return;
}","public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  queue.offer(stopTask);
  boolean interrupted=false;
  while (this.workerThread.isAlive()) {
    this.workerThread.interrupt();
    try {
      this.workerThread.join(100L);
    }
 catch (    InterruptedException e) {
      interrupted=true;
    }
  }
  this.workerState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}"
53853,"public IDGenerator(int startIndex,int gap){
  AssertUtils.assertTrue(startIndex >= 0,""String_Node_Str"");
  AssertUtils.assertTrue(gap > 0,""String_Node_Str"");
  this.startIndex=startIndex;
  this.gap=gap;
  idGenerator=new AtomicInteger(startIndex);
}","public IDGenerator(int startIndex,int gap){
  AssertUtils.assertTrue(startIndex >= 0,""String_Node_Str"");
  AssertUtils.assertTrue(gap > 0,""String_Node_Str"");
  this.gap=gap;
  this.idGenerator=new AtomicInteger(startIndex);
}"
53854,public boolean isInterceptable();,boolean isInterceptable();
53855,public MethodDescriptor getDescriptor();,MethodDescriptor getDescriptor();
53856,public String getName();,String getName();
53857,public boolean isConstructor();,boolean isConstructor();
53858,public String[] getParameterTypes();,String[] getParameterTypes();
53859,public int getModifiers();,int getModifiers();
53860,"public void warn(String msg,Throwable t);","void warn(String msg,Throwable t);"
53861,"public void debug(String msg,Throwable t);","void debug(String msg,Throwable t);"
53862,public boolean isInfoEnabled();,boolean isInfoEnabled();
53863,public boolean isErrorEnabled();,boolean isErrorEnabled();
53864,public boolean isDebugEnabled();,boolean isDebugEnabled();
53865,public boolean isWarnEnabled();,boolean isWarnEnabled();
53866,"public void error(String msg,Throwable t);","void error(String msg,Throwable t);"
53867,"public void info(String msg,Throwable t);","void info(String msg,Throwable t);"
53868,"public byte[] edit(ClassLoader classLoader,InstrumentClass target);","byte[] edit(ClassLoader classLoader,InstrumentClass target);"
53869,public ClassEditor get(ProfilerPluginContext context);,ClassEditor get(ProfilerPluginContext context);
53870,public boolean check(InstrumentClass target);,boolean check(InstrumentClass target);
53871,public String getTargetClassName();,String getTargetClassName();
53872,"public Interceptor getInterceptor(ClassLoader classLoader,InstrumentClass target,MethodInfo targetMethod);","Interceptor getInterceptor(ClassLoader classLoader,InstrumentClass target,MethodInfo targetMethod);"
53873,"public void inject(ClassLoader classLoader,InstrumentClass target) throws InstrumentException ;","void inject(ClassLoader classLoader,InstrumentClass target) throws InstrumentException ;"
53874,"public void inject(ClassLoader classLoader,InstrumentClass target) throws InstrumentException ;","void inject(ClassLoader classLoader,InstrumentClass target) throws InstrumentException ;"
53875,public List<ClassEditor> getClassEditors(ProfilerPluginContext context);,List<ClassEditor> getClassEditors(ProfilerPluginContext context);
53876,public void insert(final TAgentInfo agentInfo);,void insert(final TAgentInfo agentInfo);
53877,public T map(F thriftObject);,T map(F thriftObject);
53878,public long getTimeSlot(long time);,long getTimeSlot(long time);
53879,"public List<Modifier> getModifiers(ByteCodeInstrumentor byteCodeInstrumentor,Agent agent);","List<Modifier> getModifiers(ByteCodeInstrumentor byteCodeInstrumentor,Agent agent);"
53880,"public boolean addResponseTime(String parentApplicationName,short serviceType,int millis);","boolean addResponseTime(String parentApplicationName,short serviceType,int millis);"
53881,"@Override public void collect(){
  if (init.get()) {
    return;
  }
  Range range=Range.createUncheckedRange(timeSlotEndTime - slotInterval,timeSlotEndTime);
  List<String> agentIds=applicationIndexDao.selectAgentIds(application.getName());
  for (  String agentId : agentIds) {
    List<AgentStat> scanAgentStatList=agentStatDao.scanAgentStatList(agentId,range);
    int listSize=scanAgentStatList.size();
    long totalHeapSize=0;
    long usedHeapSize=0;
    long jvmCpuUsaged=0;
    for (    AgentStat agentStat : scanAgentStatList) {
      totalHeapSize+=agentStat.getMemoryGc().getJvmMemoryHeapMax();
      usedHeapSize+=agentStat.getMemoryGc().getJvmMemoryHeapUsed();
      jvmCpuUsaged+=agentStat.getCpuLoad().getJvmCpuLoad() * 100;
    }
    if (listSize > 0) {
      long percent=0;
      percent=calculatePercent(usedHeapSize,totalHeapSize);
      agentHeapUsageRate.put(agentId,percent);
      percent=calculatePercent(jvmCpuUsaged,100 * scanAgentStatList.size());
      agentJvmCpuUsageRate.put(agentId,percent);
      long accruedLastGCcount=scanAgentStatList.get(0).getMemoryGc().getJvmGcOldCount();
      long accruedFirstGCcount=scanAgentStatList.get(listSize - 1).getMemoryGc().getJvmGcOldCount();
      agentGcCount.put(agentId,accruedLastGCcount - accruedFirstGCcount);
    }
  }
  init.set(true);
}","@Override public void collect(){
  if (init.get()) {
    return;
  }
  Range range=Range.createUncheckedRange(timeSlotEndTime - slotInterval,timeSlotEndTime);
  List<String> agentIds=applicationIndexDao.selectAgentIds(application.getName());
  for (  String agentId : agentIds) {
    List<AgentStat> scanAgentStatList=agentStatDao.scanAgentStatList(agentId,range);
    int listSize=scanAgentStatList.size();
    long totalHeapSize=0;
    long usedHeapSize=0;
    long jvmCpuUsaged=0;
    for (    AgentStat agentStat : scanAgentStatList) {
      totalHeapSize+=agentStat.getMemoryGc().getJvmMemoryHeapMax();
      usedHeapSize+=agentStat.getMemoryGc().getJvmMemoryHeapUsed();
      jvmCpuUsaged+=agentStat.getCpuLoad().getJvmCpuLoad() * 100;
    }
    if (listSize > 0) {
      long percent=calculatePercent(usedHeapSize,totalHeapSize);
      agentHeapUsageRate.put(agentId,percent);
      percent=calculatePercent(jvmCpuUsaged,100 * scanAgentStatList.size());
      agentJvmCpuUsageRate.put(agentId,percent);
      long accruedLastGCcount=scanAgentStatList.get(0).getMemoryGc().getJvmGcOldCount();
      long accruedFirstGCcount=scanAgentStatList.get(listSize - 1).getMemoryGc().getJvmGcOldCount();
      agentGcCount.put(agentId,accruedLastGCcount - accruedFirstGCcount);
    }
  }
  init.set(true);
}"
53882,"private long calculatePercent(long used,long total){
  if (total == 0 || used == 0) {
    return 0;
  }
 else {
    return Math.round((used * 100) / total);
  }
}","private long calculatePercent(long used,long total){
  if (total == 0 || used == 0) {
    return 0;
  }
 else {
    return (used * 100L) / total;
  }
}"
53883,"private int calculatePercent(long count,long totalCount){
  if (totalCount == 0 || count == 0) {
    return 0;
  }
 else {
    return Math.round((count * 100) / totalCount);
  }
}","private long calculatePercent(long count,long totalCount){
  if (totalCount == 0 || count == 0) {
    return 0;
  }
 else {
    return (count * 100L) / totalCount;
  }
}"
53884,"private int calculatePercent(long value){
  if (totalCount == 0 || value == 0) {
    return 0;
  }
 else {
    return Math.round((value * 100) / totalCount);
  }
}","private long calculatePercent(long value){
  if (totalCount == 0 || value == 0) {
    return 0;
  }
 else {
    return (value * 100L) / totalCount;
  }
}"
53885,"void readPropertyValues(){
  final ValueResolver placeHolderResolver=new PlaceHolderResolver();
  this.profileEnable=readBoolean(""String_Node_Str"",true);
  this.collectorSpanServerIp=readString(""String_Node_Str"",""String_Node_Str"",placeHolderResolver);
  this.collectorSpanServerPort=readInt(""String_Node_Str"",9996);
  this.collectorStatServerIp=readString(""String_Node_Str"",""String_Node_Str"",placeHolderResolver);
  this.collectorStatServerPort=readInt(""String_Node_Str"",9995);
  this.collectorTcpServerIp=readString(""String_Node_Str"",""String_Node_Str"",placeHolderResolver);
  this.collectorTcpServerPort=readInt(""String_Node_Str"",9994);
  this.spanDataSenderWriteQueueSize=readInt(""String_Node_Str"",1024 * 5);
  this.spanDataSenderSocketSendBufferSize=readInt(""String_Node_Str"",1024 * 64 * 16);
  this.spanDataSenderSocketTimeout=readInt(""String_Node_Str"",1000 * 3);
  this.spanDataSenderChunkSize=readInt(""String_Node_Str"",1024 * 16);
  this.statDataSenderWriteQueueSize=readInt(""String_Node_Str"",1024 * 5);
  this.statDataSenderSocketSendBufferSize=readInt(""String_Node_Str"",1024 * 64 * 16);
  this.statDataSenderSocketTimeout=readInt(""String_Node_Str"",1000 * 3);
  this.statDataSenderChunkSize=readInt(""String_Node_Str"",1024 * 16);
  this.tcpDataSenderCommandAcceptEnable=readBoolean(""String_Node_Str"",false);
  this.jdbcProfile=readBoolean(""String_Node_Str"",true);
  this.jdbcSqlCacheSize=readInt(""String_Node_Str"",1024);
  this.jdbcMaxSqlBindValueSize=readInt(""String_Node_Str"",1024);
  this.jdbcProfileMySql=readBoolean(""String_Node_Str"",true);
  this.jdbcProfileMySqlSetAutoCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileMySqlCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileMySqlRollback=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileJtds=readBoolean(""String_Node_Str"",true);
  this.jdbcProfileJtdsSetAutoCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileJtdsCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileJtdsRollback=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileOracle=readBoolean(""String_Node_Str"",true);
  this.jdbcProfileOracleSetAutoCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileOracleCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileOracleRollback=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileCubrid=readBoolean(""String_Node_Str"",true);
  this.jdbcProfileCubridSetAutoCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileCubridCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileCubridRollback=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileDbcp=readBoolean(""String_Node_Str"",true);
  this.jdbcProfileDbcpConnectionClose=readBoolean(""String_Node_Str"",false);
  this.tomcatHidePinpointHeader=readBoolean(""String_Node_Str"",true);
  final String tomcatExcludeURL=readString(""String_Node_Str"",""String_Node_Str"");
  if (!tomcatExcludeURL.isEmpty()) {
    this.tomcatExcludeUrlFilter=new ExcludeUrlFilter(tomcatExcludeURL);
  }
  this.arucs=readBoolean(""String_Node_Str"",true);
  this.arucsKeyTrace=readBoolean(""String_Node_Str"",false);
  this.memcached=readBoolean(""String_Node_Str"",true);
  this.memcachedKeyTrace=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient4Profile=readBoolean(""String_Node_Str"",true);
  this.apacheHttpClient4ProfileCookie=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient4ProfileCookieDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.apacheHttpClient4ProfileCookieSamplingRate=readInt(""String_Node_Str"",1);
  this.apacheHttpClient4ProfileEntity=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient4ProfileEntityDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.apacheHttpClient4ProfileEntitySamplingRate=readInt(""String_Node_Str"",1);
  this.apacheNIOHttpClient4Profile=readBoolean(""String_Node_Str"",true);
  this.ningAsyncHttpClientProfile=readBoolean(""String_Node_Str"",true);
  this.ningAsyncHttpClientProfileCookie=readBoolean(""String_Node_Str"",false);
  this.ningAsyncHttpClientProfileCookieDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.ningAsyncHttpClientProfileCookieDumpSize=readInt(""String_Node_Str"",1024);
  this.ningAsyncHttpClientProfileCookieSamplingRate=readInt(""String_Node_Str"",1);
  this.ningAsyncHttpClientProfileEntity=readBoolean(""String_Node_Str"",false);
  this.ningAsyncHttpClientProfileEntityDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.ningAsyncHttpClientProfileEntityDumpSize=readInt(""String_Node_Str"",1024);
  this.ningAsyncHttpClientProfileEntitySamplingRate=readInt(""String_Node_Str"",1);
  this.ningAsyncHttpClientProfileParam=readBoolean(""String_Node_Str"",false);
  this.ningAsyncHttpClientProfileParamDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.ningAsyncHttpClientProfileParamDumpSize=readInt(""String_Node_Str"",1024);
  this.ningAsyncHttpClientProfileParamSamplingRate=readInt(""String_Node_Str"",1);
  this.redis=readBoolean(""String_Node_Str"",true);
  this.redisPipeline=readBoolean(""String_Node_Str"",true);
  this.nbaseArc=readBoolean(""String_Node_Str"",true);
  this.nbaseArcPipeline=readBoolean(""String_Node_Str"",true);
  this.lineGameNettyParamDumpSize=readInt(""String_Node_Str"",512);
  this.lineGameNettyEntityDumpSize=readInt(""String_Node_Str"",512);
  this.ibatis=readBoolean(""String_Node_Str"",true);
  this.mybatis=readBoolean(""String_Node_Str"",true);
  this.springBeans=readBoolean(""String_Node_Str"",false);
  this.springBeansNamePatterns=readString(""String_Node_Str"",null);
  this.springBeansClassPatterns=readString(""String_Node_Str"",null);
  this.springBeansAnnotations=readString(""String_Node_Str"",null);
  this.samplingEnable=readBoolean(""String_Node_Str"",true);
  this.samplingRate=readInt(""String_Node_Str"",1);
  this.ioBufferingEnable=readBoolean(""String_Node_Str"",true);
  this.ioBufferingBufferSize=readInt(""String_Node_Str"",20);
  this.profileJvmCollectInterval=readInt(""String_Node_Str"",1000);
  this.agentInfoSendRetryInterval=readLong(""String_Node_Str"",DEFAULT_AGENT_INFO_SEND_RETRY_INTERVAL);
  this.applicationServerType=readServiceType(""String_Node_Str"");
  final String profileableClass=readString(""String_Node_Str"",""String_Node_Str"");
  if (!profileableClass.isEmpty()) {
    this.profilableClassFilter=new ProfilableClassFilter(profileableClass);
  }
  logger.info(""String_Node_Str"");
}","void readPropertyValues(){
  final ValueResolver placeHolderResolver=new PlaceHolderResolver();
  this.profileEnable=readBoolean(""String_Node_Str"",true);
  this.collectorSpanServerIp=readString(""String_Node_Str"",DEFAULT_IP,placeHolderResolver);
  this.collectorSpanServerPort=readInt(""String_Node_Str"",9996);
  this.collectorStatServerIp=readString(""String_Node_Str"",DEFAULT_IP,placeHolderResolver);
  this.collectorStatServerPort=readInt(""String_Node_Str"",9995);
  this.collectorTcpServerIp=readString(""String_Node_Str"",DEFAULT_IP,placeHolderResolver);
  this.collectorTcpServerPort=readInt(""String_Node_Str"",9994);
  this.spanDataSenderWriteQueueSize=readInt(""String_Node_Str"",1024 * 5);
  this.spanDataSenderSocketSendBufferSize=readInt(""String_Node_Str"",1024 * 64 * 16);
  this.spanDataSenderSocketTimeout=readInt(""String_Node_Str"",1000 * 3);
  this.spanDataSenderChunkSize=readInt(""String_Node_Str"",1024 * 16);
  this.statDataSenderWriteQueueSize=readInt(""String_Node_Str"",1024 * 5);
  this.statDataSenderSocketSendBufferSize=readInt(""String_Node_Str"",1024 * 64 * 16);
  this.statDataSenderSocketTimeout=readInt(""String_Node_Str"",1000 * 3);
  this.statDataSenderChunkSize=readInt(""String_Node_Str"",1024 * 16);
  this.tcpDataSenderCommandAcceptEnable=readBoolean(""String_Node_Str"",false);
  this.jdbcProfile=readBoolean(""String_Node_Str"",true);
  this.jdbcSqlCacheSize=readInt(""String_Node_Str"",1024);
  this.jdbcMaxSqlBindValueSize=readInt(""String_Node_Str"",1024);
  this.jdbcProfileMySql=readBoolean(""String_Node_Str"",true);
  this.jdbcProfileMySqlSetAutoCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileMySqlCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileMySqlRollback=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileJtds=readBoolean(""String_Node_Str"",true);
  this.jdbcProfileJtdsSetAutoCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileJtdsCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileJtdsRollback=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileOracle=readBoolean(""String_Node_Str"",true);
  this.jdbcProfileOracleSetAutoCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileOracleCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileOracleRollback=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileCubrid=readBoolean(""String_Node_Str"",true);
  this.jdbcProfileCubridSetAutoCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileCubridCommit=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileCubridRollback=readBoolean(""String_Node_Str"",false);
  this.jdbcProfileDbcp=readBoolean(""String_Node_Str"",true);
  this.jdbcProfileDbcpConnectionClose=readBoolean(""String_Node_Str"",false);
  this.tomcatHidePinpointHeader=readBoolean(""String_Node_Str"",true);
  final String tomcatExcludeURL=readString(""String_Node_Str"",""String_Node_Str"");
  if (!tomcatExcludeURL.isEmpty()) {
    this.tomcatExcludeUrlFilter=new ExcludeUrlFilter(tomcatExcludeURL);
  }
  this.arucs=readBoolean(""String_Node_Str"",true);
  this.arucsKeyTrace=readBoolean(""String_Node_Str"",false);
  this.memcached=readBoolean(""String_Node_Str"",true);
  this.memcachedKeyTrace=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient4Profile=readBoolean(""String_Node_Str"",true);
  this.apacheHttpClient4ProfileCookie=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient4ProfileCookieDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.apacheHttpClient4ProfileCookieSamplingRate=readInt(""String_Node_Str"",1);
  this.apacheHttpClient4ProfileEntity=readBoolean(""String_Node_Str"",false);
  this.apacheHttpClient4ProfileEntityDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.apacheHttpClient4ProfileEntitySamplingRate=readInt(""String_Node_Str"",1);
  this.apacheNIOHttpClient4Profile=readBoolean(""String_Node_Str"",true);
  this.ningAsyncHttpClientProfile=readBoolean(""String_Node_Str"",true);
  this.ningAsyncHttpClientProfileCookie=readBoolean(""String_Node_Str"",false);
  this.ningAsyncHttpClientProfileCookieDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.ningAsyncHttpClientProfileCookieDumpSize=readInt(""String_Node_Str"",1024);
  this.ningAsyncHttpClientProfileCookieSamplingRate=readInt(""String_Node_Str"",1);
  this.ningAsyncHttpClientProfileEntity=readBoolean(""String_Node_Str"",false);
  this.ningAsyncHttpClientProfileEntityDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.ningAsyncHttpClientProfileEntityDumpSize=readInt(""String_Node_Str"",1024);
  this.ningAsyncHttpClientProfileEntitySamplingRate=readInt(""String_Node_Str"",1);
  this.ningAsyncHttpClientProfileParam=readBoolean(""String_Node_Str"",false);
  this.ningAsyncHttpClientProfileParamDumpType=readDumpType(""String_Node_Str"",DumpType.EXCEPTION);
  this.ningAsyncHttpClientProfileParamDumpSize=readInt(""String_Node_Str"",1024);
  this.ningAsyncHttpClientProfileParamSamplingRate=readInt(""String_Node_Str"",1);
  this.redis=readBoolean(""String_Node_Str"",true);
  this.redisPipeline=readBoolean(""String_Node_Str"",true);
  this.nbaseArc=readBoolean(""String_Node_Str"",true);
  this.nbaseArcPipeline=readBoolean(""String_Node_Str"",true);
  this.lineGameNettyParamDumpSize=readInt(""String_Node_Str"",512);
  this.lineGameNettyEntityDumpSize=readInt(""String_Node_Str"",512);
  this.ibatis=readBoolean(""String_Node_Str"",true);
  this.mybatis=readBoolean(""String_Node_Str"",true);
  this.springBeans=readBoolean(""String_Node_Str"",false);
  this.springBeansNamePatterns=readString(""String_Node_Str"",null);
  this.springBeansClassPatterns=readString(""String_Node_Str"",null);
  this.springBeansAnnotations=readString(""String_Node_Str"",null);
  this.samplingEnable=readBoolean(""String_Node_Str"",true);
  this.samplingRate=readInt(""String_Node_Str"",1);
  this.ioBufferingEnable=readBoolean(""String_Node_Str"",true);
  this.ioBufferingBufferSize=readInt(""String_Node_Str"",20);
  this.profileJvmCollectInterval=readInt(""String_Node_Str"",1000);
  this.agentInfoSendRetryInterval=readLong(""String_Node_Str"",DEFAULT_AGENT_INFO_SEND_RETRY_INTERVAL);
  this.applicationServerType=readServiceType(""String_Node_Str"");
  final String profileableClass=readString(""String_Node_Str"",""String_Node_Str"");
  if (!profileableClass.isEmpty()) {
    this.profilableClassFilter=new ProfilableClassFilter(profileableClass);
  }
  logger.info(""String_Node_Str"");
}"
53886,"public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  queue.offer(stopTask);
  boolean interrupted=false;
  while (this.workerThread.isAlive()) {
    this.workerThread.interrupt();
    try {
      this.workerThread.join(100L);
    }
 catch (    InterruptedException e) {
      interrupted=true;
    }
  }
  this.workerState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}","public void stop(){
  if (!(this.workerState.changeStateDestroying())) {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
  final boolean stopOffer=queue.offer(stopTask);
  if (!stopOffer) {
    logger.warn(""String_Node_Str"");
  }
  boolean interrupted=false;
  while (this.workerThread.isAlive()) {
    this.workerThread.interrupt();
    try {
      this.workerThread.join(100L);
    }
 catch (    InterruptedException e) {
      interrupted=true;
    }
  }
  this.workerState.changeStateStoped();
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
}"
53887,"public void handleAndRegisterWatcher(String path){
  if (workerState.isStarted()) {
    if (zNodePath.equals(path)) {
      boolean offerSuccess=queue.offer(getAndRegisterTask);
      if (!offerSuccess) {
        logger.info(""String_Node_Str"");
      }
    }
 else {
      logger.info(""String_Node_Str"",path);
    }
  }
 else {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
    return;
  }
}","public void handleAndRegisterWatcher(String path){
  if (workerState.isStarted()) {
    if (zNodePath.equals(path)) {
      final boolean offerSuccess=queue.offer(getAndRegisterTask);
      if (!offerSuccess) {
        logger.info(""String_Node_Str"");
      }
    }
 else {
      logger.info(""String_Node_Str"",path);
    }
  }
 else {
    WorkerState state=this.workerState.getCurrentState();
    logger.info(""String_Node_Str"",this.getClass().getSimpleName(),state.toString());
  }
}"
53888,"public TBase dispatchRequestMessage(org.apache.thrift.TBase<?,?> tBase,byte[] packet,int offset,int length){
  acceptedTimeService.accept();
  RequestResponseHandler requestResponseHandler=getRequestResponseHandler(tBase);
  if (requestResponseHandler != null) {
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"",requestResponseHandler.getClass().getName());
    }
    return requestResponseHandler.handleRequest(tBase);
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + tBase);
}","public TBase dispatchRequestMessage(TBase<?,?> tBase,byte[] packet,int offset,int length){
  acceptedTimeService.accept();
  RequestResponseHandler requestResponseHandler=getRequestResponseHandler(tBase);
  if (requestResponseHandler != null) {
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"",requestResponseHandler.getClass().getName());
    }
    return requestResponseHandler.handleRequest(tBase);
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + tBase);
}"
53889,"private static long readTime(byte[] rowKey){
  return BytesUtils.bytesToLong(rowKey,AGENT_NAME_MAX_LEN);
}","private static long readTime(byte[] rowKey){
  return BytesUtils.bytesToLong(rowKey,PinpointConstants.AGENT_NAME_MAX_LEN);
}"
53890,"public void readRowKey(byte[] bytes){
  this.agentId=Bytes.toString(bytes,0,AGENT_NAME_MAX_LEN).trim();
  this.startTime=TimeUtils.recoveryTimeMillis(readTime(bytes));
  this.apiId=readKeyCode(bytes);
}","public void readRowKey(byte[] bytes){
  this.agentId=Bytes.toString(bytes,0,PinpointConstants.AGENT_NAME_MAX_LEN).trim();
  this.startTime=TimeUtils.recoveryTimeMillis(readTime(bytes));
  this.apiId=readKeyCode(bytes);
}"
53891,"private static int readKeyCode(byte[] rowKey){
  return BytesUtils.bytesToInt(rowKey,AGENT_NAME_MAX_LEN + LONG_BYTE_LENGTH);
}","private static int readKeyCode(byte[] rowKey){
  return BytesUtils.bytesToInt(rowKey,PinpointConstants.AGENT_NAME_MAX_LEN + BytesUtils.LONG_BYTE_LENGTH);
}"
53892,"private static long readTime(byte[] rowKey){
  return BytesUtils.bytesToLong(rowKey,AGENT_NAME_MAX_LEN);
}","private static long readTime(byte[] rowKey){
  return BytesUtils.bytesToLong(rowKey,PinpointConstants.AGENT_NAME_MAX_LEN);
}"
53893,"public void readRowKey(byte[] rowKey){
  this.agentId=Bytes.toString(rowKey,0,AGENT_NAME_MAX_LEN).trim();
  this.startTime=TimeUtils.recoveryTimeMillis(readTime(rowKey));
  this.hashCode=readKeyCode(rowKey);
}","public void readRowKey(byte[] rowKey){
  this.agentId=Bytes.toString(rowKey,0,PinpointConstants.AGENT_NAME_MAX_LEN).trim();
  this.startTime=TimeUtils.recoveryTimeMillis(readTime(rowKey));
  this.hashCode=readKeyCode(rowKey);
}"
53894,"private static int readKeyCode(byte[] rowKey){
  return BytesUtils.bytesToInt(rowKey,AGENT_NAME_MAX_LEN + LONG_BYTE_LENGTH);
}","private static int readKeyCode(byte[] rowKey){
  return BytesUtils.bytesToInt(rowKey,PinpointConstants.AGENT_NAME_MAX_LEN + BytesUtils.LONG_BYTE_LENGTH);
}"
53895,"private static long readTime(byte[] rowKey){
  return BytesUtils.bytesToLong(rowKey,AGENT_NAME_MAX_LEN);
}","private static long readTime(byte[] rowKey){
  return BytesUtils.bytesToLong(rowKey,PinpointConstants.AGENT_NAME_MAX_LEN);
}"
53896,"public void readRowKey(byte[] rowKey){
  this.agentId=Bytes.toString(rowKey,0,AGENT_NAME_MAX_LEN).trim();
  this.startTime=TimeUtils.recoveryTimeMillis(readTime(rowKey));
  this.stringId=readKeyCode(rowKey);
}","public void readRowKey(byte[] rowKey){
  this.agentId=Bytes.toString(rowKey,0,PinpointConstants.AGENT_NAME_MAX_LEN).trim();
  this.startTime=TimeUtils.recoveryTimeMillis(readTime(rowKey));
  this.stringId=readKeyCode(rowKey);
}"
53897,"private static int readKeyCode(byte[] rowKey){
  return BytesUtils.bytesToInt(rowKey,AGENT_NAME_MAX_LEN + LONG_BYTE_LENGTH);
}","private static int readKeyCode(byte[] rowKey){
  return BytesUtils.bytesToInt(rowKey,PinpointConstants.AGENT_NAME_MAX_LEN + BytesUtils.LONG_BYTE_LENGTH);
}"
53898,"private List<ThreadInfo> getThreadInfo(long pendingTimeMillis){
  List<ThreadInfo> result=new ArrayList<ThreadInfo>();
  if (pendingTimeMillis <= 0) {
    return Arrays.asList(getAllThreadInfo());
  }
  for (  ThreadInfo threadInfo : getAllThreadInfo()) {
    if (threadInfo.getBlockedTime() >= pendingTimeMillis) {
      result.add(threadInfo);
      continue;
    }
    if (threadInfo.getWaitedTime() >= pendingTimeMillis) {
      result.add(threadInfo);
      continue;
    }
  }
  return result;
}","private List<ThreadInfo> getThreadInfo(long pendingTimeMillis){
  List<ThreadInfo> result=new ArrayList<ThreadInfo>();
  if (pendingTimeMillis <= 0) {
    return Arrays.asList(getAllThreadInfo());
  }
  for (  ThreadInfo threadInfo : getAllThreadInfo()) {
    if (threadInfo.getBlockedTime() >= pendingTimeMillis) {
      result.add(threadInfo);
      continue;
    }
    if (threadInfo.getWaitedTime() >= pendingTimeMillis) {
      result.add(threadInfo);
    }
  }
  return result;
}"
53899,"private static void close(InputStream is){
  if (is != null) {
    try {
      is.close();
    }
 catch (    IOException e) {
    }
  }
}","private static void close(Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    IOException e) {
    }
  }
}"
53900,"private String[] buildCommand() throws URISyntaxException {
  List<String> list=new ArrayList<String>();
  list.add(getJavaExecutable());
  list.add(""String_Node_Str"");
  list.add(getClassPath());
  list.add(getAgent());
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  if (isDebugMode()) {
    list.addAll(getDebugOptions());
  }
  if (configFile != null) {
    list.add(""String_Node_Str"" + resolveConfigFileLocation());
  }
  list.add(ForkedJUnit.class.getName());
  if (testOnChildClassLoader) {
    list.add(getChildClassPath());
  }
  list.add(getTestClass().getName());
  return list.toArray(new String[list.size()]);
}","private String[] buildCommand() throws URISyntaxException {
  List<String> list=new ArrayList<String>();
  list.add(getJavaExecutable());
  list.add(""String_Node_Str"");
  list.add(getClassPath());
  list.add(getAgent());
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"" + DEFAULT_ENCODING);
  if (isDebugMode()) {
    list.addAll(getDebugOptions());
  }
  if (configFile != null) {
    list.add(""String_Node_Str"" + resolveConfigFileLocation());
  }
  list.add(ForkedJUnit.class.getName());
  if (testOnChildClassLoader) {
    list.add(getChildClassPath());
  }
  list.add(getTestClass().getName());
  return list.toArray(new String[list.size()]);
}"
53901,"@Override public void evaluate() throws Throwable {
  ProcessBuilder builder=new ProcessBuilder();
  builder.command(buildCommand());
  builder.redirectErrorStream(true);
  System.out.println(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + builder.command());
  Process process;
  try {
    process=builder.start();
  }
 catch (  IOException e) {
    return;
  }
  Scanner out=new Scanner(process.getInputStream());
  try {
    while (out.hasNextLine()) {
      String line=out.nextLine();
      if (line.startsWith(ForkedJUnit.JUNIT_OUTPUT_DELIMETER)) {
        String[] tokens=line.split(ForkedJUnit.JUNIT_OUTPUT_DELIMETER_REGEXP);
        String event=tokens[1];
        if (""String_Node_Str"".equals(event)) {
          notifier.fireTestRunStarted(getDescription());
        }
 else         if (""String_Node_Str"".equals(event)) {
          notifier.fireTestRunFinished(result);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Description ofTest=findDescription(getDescription(),tokens[2]);
          notifier.fireTestStarted(ofTest);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Description ofTest=findDescription(getDescription(),tokens[2]);
          notifier.fireTestFinished(ofTest);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Failure failure=toFailure(tokens[2],tokens[3],tokens[4],Arrays.asList(tokens).subList(5,tokens.length - 1));
          notifier.fireTestFailure(failure);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Failure failure=toFailure(tokens[2],tokens[3],tokens[4],Arrays.asList(tokens).subList(5,tokens.length - 1));
          notifier.fireTestAssumptionFailed(failure);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Description ofTest=findDescription(getDescription(),tokens[2]);
          notifier.fireTestIgnored(ofTest);
        }
      }
 else {
        System.out.println(line);
      }
    }
  }
  finally {
    out.close();
  }
  try {
    process.waitFor();
  }
 catch (  InterruptedException e) {
    process.destroy();
  }
}","@Override public void evaluate() throws Throwable {
  ProcessBuilder builder=new ProcessBuilder();
  builder.command(buildCommand());
  builder.redirectErrorStream(true);
  System.out.println(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + builder.command());
  Process process;
  try {
    process=builder.start();
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  final InputStream inputStream=process.getInputStream();
  final Scanner out=new Scanner(inputStream,DEFAULT_ENCODING);
  try {
    while (out.hasNextLine()) {
      String line=out.nextLine();
      if (line.startsWith(ForkedJUnit.JUNIT_OUTPUT_DELIMETER)) {
        String[] tokens=line.split(ForkedJUnit.JUNIT_OUTPUT_DELIMETER_REGEXP);
        String event=tokens[1];
        if (""String_Node_Str"".equals(event)) {
          notifier.fireTestRunStarted(getDescription());
        }
 else         if (""String_Node_Str"".equals(event)) {
          notifier.fireTestRunFinished(result);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Description ofTest=findDescription(getDescription(),tokens[2]);
          notifier.fireTestStarted(ofTest);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Description ofTest=findDescription(getDescription(),tokens[2]);
          notifier.fireTestFinished(ofTest);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Failure failure=toFailure(tokens[2],tokens[3],tokens[4],Arrays.asList(tokens).subList(5,tokens.length - 1));
          notifier.fireTestFailure(failure);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Failure failure=toFailure(tokens[2],tokens[3],tokens[4],Arrays.asList(tokens).subList(5,tokens.length - 1));
          notifier.fireTestAssumptionFailed(failure);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Description ofTest=findDescription(getDescription(),tokens[2]);
          notifier.fireTestIgnored(ofTest);
        }
      }
 else {
        System.out.println(line);
      }
    }
  }
  finally {
    out.close();
    close(inputStream);
  }
  try {
    process.waitFor();
  }
 catch (  InterruptedException e) {
    process.destroy();
  }
}"
53902,"private Object reflectionInvoke(Object target,String method,Class[] type,final Object[] args){
  final Method findMethod=findMethod(target.getClass(),method,type);
  return executeTemplate.execute(new Callable(){
    @Override public Object call(){
      try {
        return findMethod.invoke(agentBootStrap,args);
      }
 catch (      InvocationTargetException e) {
        throw new BootStrapException(findMethod.getName() + ""String_Node_Str"" + e.getMessage(),e);
      }
catch (      IllegalAccessException e) {
        throw new BootStrapException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
);
}","private Object reflectionInvoke(Object target,String method,Class[] type,final Object[] args){
  final Method findMethod=findMethod(target.getClass(),method,type);
  return executeTemplate.execute(new Callable<Object>(){
    @Override public Object call(){
      try {
        return findMethod.invoke(agentBootStrap,args);
      }
 catch (      InvocationTargetException e) {
        throw new BootStrapException(findMethod.getName() + ""String_Node_Str"" + e.getMessage(),e);
      }
catch (      IllegalAccessException e) {
        throw new BootStrapException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
);
}"
53903,"public AgentClassLoader(URL[] urls){
  if (urls == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  ClassLoader bootStrapClassLoader=AgentClassLoader.class.getClassLoader();
  this.classLoader=createClassLoader(urls,bootStrapClassLoader);
  this.executeTemplate=new ContextClassLoaderExecuteTemplate(classLoader);
}","public AgentClassLoader(URL[] urls){
  if (urls == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  ClassLoader bootStrapClassLoader=AgentClassLoader.class.getClassLoader();
  this.classLoader=createClassLoader(urls,bootStrapClassLoader);
  this.executeTemplate=new ContextClassLoaderExecuteTemplate<Object>(classLoader);
}"
53904,"public void boot(final String agentPath,final String agentArgs,final Instrumentation instrumentation,final ProfilerConfig profilerConfig){
  final Class<?> bootStrapClazz=getBootStrapClass();
  agentBootStrap=(Agent)executeTemplate.execute(new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        Constructor<?> constructor=bootStrapClazz.getConstructor(String.class,String.class,Instrumentation.class,ProfilerConfig.class);
        return constructor.newInstance(agentPath,agentArgs,instrumentation,profilerConfig);
      }
 catch (      InstantiationException e) {
        throw new BootStrapException(""String_Node_Str"" + e.getMessage(),e);
      }
catch (      IllegalAccessException e) {
        throw new BootStrapException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
);
}","public void boot(final String agentPath,final String agentArgs,final Instrumentation instrumentation,final ProfilerConfig profilerConfig){
  final Class<?> bootStrapClazz=getBootStrapClass();
  final Object agent=executeTemplate.execute(new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        Constructor<?> constructor=bootStrapClazz.getConstructor(String.class,String.class,Instrumentation.class,ProfilerConfig.class);
        return constructor.newInstance(agentPath,agentArgs,instrumentation,profilerConfig);
      }
 catch (      InstantiationException e) {
        throw new BootStrapException(""String_Node_Str"" + e.getMessage(),e);
      }
catch (      IllegalAccessException e) {
        throw new BootStrapException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
);
  if (agent instanceof Agent) {
    this.agentBootStrap=(Agent)agent;
  }
 else {
    String agentClassName;
    if (agent == null) {
      agentClassName=""String_Node_Str"";
    }
 else {
      agentClassName=agent.getClass().getName();
    }
    throw new BootStrapException(""String_Node_Str"" + agentClassName);
  }
}"
53905,"private Class<?> getBootStrapClass(){
  try {
    return this.classLoader.loadClass(bootClass);
  }
 catch (  ClassNotFoundException e) {
    throw new BootStrapException(""String_Node_Str"" + e.getMessage(),e);
  }
}","private Class<?> getBootStrapClass(){
  try {
    return this.classLoader.loadClass(bootClass);
  }
 catch (  ClassNotFoundException e) {
    throw new BootStrapException(""String_Node_Str"" + bootClass + ""String_Node_Str""+ e.getMessage(),e);
  }
}"
53906,"public AsyncQueueingExecutor(int queueSize,String executorName){
  if (executorName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.queue=new LinkedBlockingQueue<T>(queueSize);
  this.executeThread=this.createExecuteThread(executorName);
  this.executorName=executeThread.getName();
}","public AsyncQueueingExecutor(int queueSize,String executorName){
  if (executorName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.queue=new LinkedBlockingQueue<T>(queueSize);
  this.executeThread=this.createExecuteThread(executorName);
  this.executorName=executeThread.getName();
  this.maxDrainSize=10;
  this.drain=new UnsafeArrayCollection<T>(maxDrainSize);
}"
53907,"private ChildProcessException toException(String message,String exceptionClass,List<String> traceInText){
  StackTraceElement[] stackTrace=new StackTraceElement[traceInText.size()];
  for (int i=0; i < traceInText.size(); i++) {
    String trace=traceInText.get(i);
    String[] tokens=trace.split(""String_Node_Str"");
    stackTrace[i]=new StackTraceElement(tokens[0],tokens[1],tokens[2],Integer.valueOf(tokens[3]));
  }
  return new ChildProcessException(exceptionClass + ""String_Node_Str"" + message,stackTrace);
}","private ChildProcessException toException(String message,String exceptionClass,List<String> traceInText){
  StackTraceElement[] stackTrace=new StackTraceElement[traceInText.size()];
  for (int i=0; i < traceInText.size(); i++) {
    String trace=traceInText.get(i);
    String[] tokens=trace.split(""String_Node_Str"");
    stackTrace[i]=new StackTraceElement(tokens[0],tokens[1],tokens[2],Integer.parseInt(tokens[3]));
  }
  return new ChildProcessException(exceptionClass + ""String_Node_Str"" + message,stackTrace);
}"
53908,"private void addChecker(Application application){
  List<Rule> rules=alarmResourceDao.selectAppRule(application.getName());
  long timeSlotEndTime=System.currentTimeMillis();
  Map<DataCollectorCategory,DataCollector> collectorMap=new HashMap<DataCollectorCategory,DataCollector>();
  for (  Rule rule : rules) {
    CheckerCategory checkerCategory=CheckerCategory.getValue(rule.getCheckerName());
    DataCollector collector=collectorMap.get(checkerCategory);
    if (collector == null) {
      collector=dataCollectorFactory.createDataCollector(checkerCategory,application,timeSlotEndTime);
      collectorMap.put(collector.getDataCollectorCategory(),collector);
    }
    AlarmChecker checker=checkerCategory.createChecker(collector,rule);
    checkers.add(checker);
  }
}","private void addChecker(Application application){
  List<Rule> rules=alarmResourceDao.selectAppRule(application.getName());
  long timeSlotEndTime=System.currentTimeMillis();
  Map<DataCollectorCategory,DataCollector> collectorMap=new HashMap<DataCollectorCategory,DataCollector>();
  for (  Rule rule : rules) {
    CheckerCategory checkerCategory=CheckerCategory.getValue(rule.getCheckerName());
    DataCollector collector=collectorMap.get(checkerCategory.getDataCollectorCategory());
    if (collector == null) {
      collector=dataCollectorFactory.createDataCollector(checkerCategory,application,timeSlotEndTime);
      collectorMap.put(collector.getDataCollectorCategory(),collector);
    }
    AlarmChecker checker=checkerCategory.createChecker(collector,rule);
    checkers.add(checker);
  }
}"
53909,"private static boolean isValidId(String propertyName,int maxSize){
  logger.info(""String_Node_Str"" + propertyName);
  String value=System.getProperty(propertyName);
  if (value == null) {
    logger.severe(""String_Node_Str"" + propertyName + ""String_Node_Str"");
    return false;
  }
  value=value.trim();
  if (value.isEmpty()) {
    logger.severe(""String_Node_Str"" + propertyName + ""String_Node_Str"");
    return false;
  }
  if (!IdValidateUtils.validateId(value,maxSize)) {
    logger.severe(""String_Node_Str"" + propertyName + ""String_Node_Str""+ maxSize+ ""String_Node_Str""+ value);
    return false;
  }
  logger.info(""String_Node_Str"" + propertyName + ""String_Node_Str""+ value+ ""String_Node_Str""+ BytesUtils.toBytes(value).length);
  return true;
}","private static boolean isValidId(String propertyName,int maxSize){
  logger.info(""String_Node_Str"" + propertyName);
  String value=System.getProperty(propertyName);
  if (value == null) {
    logger.severe(""String_Node_Str"" + propertyName + ""String_Node_Str"");
    return false;
  }
  value=value.trim();
  if (value.isEmpty()) {
    logger.severe(""String_Node_Str"" + propertyName + ""String_Node_Str"");
    return false;
  }
  if (!IdValidateUtils.validateId(value,maxSize)) {
    logger.severe(""String_Node_Str"" + propertyName + ""String_Node_Str""+ maxSize+ ""String_Node_Str""+ value);
    return false;
  }
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + propertyName + ""String_Node_Str""+ value+ ""String_Node_Str""+ getLength(value));
  }
  return true;
}"
53910,"public URL[] getPluginJars(){
  if (classLoader instanceof URLClassLoader) {
    return ((URLClassLoader)classLoader).getURLs();
  }
 else {
    return new URL[0];
  }
}","public URL[] getPluginJars(){
  if (classLoader instanceof URLClassLoader) {
    return ((URLClassLoader)classLoader).getURLs();
  }
 else {
    return EMPTY_URL;
  }
}"
53911,"private static URL[] findJars(String pluginPath){
  File file=new File(pluginPath);
  if (!file.exists() || !file.isDirectory()) {
    return new URL[0];
  }
  File[] jars=file.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"");
    }
  }
);
  URL[] urls=new URL[jars.length];
  for (int i=0; i < jars.length; i++) {
    try {
      urls[i]=jars[i].toURI().toURL();
    }
 catch (    MalformedURLException e) {
      throw new PinpointException(""String_Node_Str"",e);
    }
  }
  return urls;
}","private static URL[] findJars(String pluginPath){
  final File file=new File(pluginPath);
  if (!file.exists() || !file.isDirectory()) {
    return EMPTY_URL;
  }
  final File[] jars=file.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"");
    }
  }
);
  if (jars == null || jars.length == 0) {
    return EMPTY_URL;
  }
  final URL[] urls=new URL[jars.length];
  for (int i=0; i < jars.length; i++) {
    try {
      urls[i]=jars[i].toURI().toURL();
    }
 catch (    MalformedURLException e) {
      throw new PinpointException(""String_Node_Str"",e);
    }
  }
  return urls;
}"
53912,"public boolean registerCommandService(ProfilerCommandService commandService){
  return this.commandServiceRegistry.addService(commandService);
}","public boolean registerCommandService(ProfilerCommandService commandService){
  if (commandService == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return this.commandServiceRegistry.addService(commandService);
}"
53913,"@Override public void handleRequest(RequestPacket requestPacket,Channel channel){
  logger.info(""String_Node_Str"",requestPacket,channel);
  TBase<?,?> request=SerializationUtils.deserialize(requestPacket.getPayload(),deserializerFactory,null);
  TBase response=null;
  if (request == null) {
    TResult tResult=new TResult(false);
    tResult.setMessage(""String_Node_Str"");
    response=tResult;
  }
 else {
    ProfilerRequestCommandService service=commandServiceRegistry.getRequestService(request);
    if (service == null) {
      TResult tResult=new TResult(false);
      tResult.setMessage(""String_Node_Str"");
      response=tResult;
    }
 else {
      response=service.requestCommandService(request);
    }
  }
  byte[] payload=SerializationUtils.serialize(response,serializerFactory,null);
  if (payload != null) {
    channel.write(new ResponsePacket(requestPacket.getRequestId(),payload));
  }
}","@Override public void handleRequest(RequestPacket requestPacket,Channel channel){
  logger.info(""String_Node_Str"",requestPacket,channel);
  final TBase<?,?> request=SerializationUtils.deserialize(requestPacket.getPayload(),deserializerFactory,null);
  TBase response;
  if (request == null) {
    final TResult tResult=new TResult(false);
    tResult.setMessage(""String_Node_Str"");
    response=tResult;
  }
 else {
    final ProfilerRequestCommandService service=commandServiceRegistry.getRequestService(request);
    if (service == null) {
      TResult tResult=new TResult(false);
      tResult.setMessage(""String_Node_Str"");
      response=tResult;
    }
 else {
      response=service.requestCommandService(request);
    }
  }
  final byte[] payload=SerializationUtils.serialize(response,serializerFactory,null);
  if (payload != null) {
    channel.write(new ResponsePacket(requestPacket.getRequestId(),payload));
  }
}"
53914,"@Override public short handleStreamCreate(ServerStreamChannelContext streamChannelContext,StreamCreatePacket packet){
  logger.info(""String_Node_Str"",packet,streamChannelContext);
  TBase<?,?> request=SerializationUtils.deserialize(packet.getPayload(),deserializerFactory,null);
  ProfilerStreamCommandService service=commandServiceRegistry.getStreamService(request);
  if (service == null) {
    return StreamCreateFailPacket.PACKET_UNSUPPORT;
  }
  service.streamCommandService(request,streamChannelContext);
  return StreamCreatePacket.SUCCESS;
}","@Override public short handleStreamCreate(ServerStreamChannelContext streamChannelContext,StreamCreatePacket packet){
  logger.info(""String_Node_Str"",packet,streamChannelContext);
  final TBase<?,?> request=SerializationUtils.deserialize(packet.getPayload(),deserializerFactory,null);
  final ProfilerStreamCommandService service=commandServiceRegistry.getStreamService(request);
  if (service == null) {
    return StreamCreateFailPacket.PACKET_UNSUPPORT;
  }
  service.streamCommandService(request,streamChannelContext);
  return StreamCreatePacket.SUCCESS;
}"
53915,"public boolean addService(Class<? extends TBase> clazz,ProfilerCommandService service){
  ProfilerCommandService inValue=profilerCommandServiceRepository.putIfAbsent(clazz,service);
  if (inValue != null) {
    logger.warn(""String_Node_Str"",clazz.getName());
    return false;
  }
  return true;
}","public boolean addService(Class<? extends TBase> clazz,ProfilerCommandService service){
  if (clazz == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (service == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final ProfilerCommandService before=profilerCommandServiceRepository.putIfAbsent(clazz,service);
  if (before != null) {
    logger.warn(""String_Node_Str"",clazz.getName());
    return false;
  }
  return true;
}"
53916,"@Override public ProfilerRequestCommandService getRequestService(TBase tBase){
  ProfilerCommandService service=profilerCommandServiceRepository.get(tBase.getClass());
  if (service instanceof ProfilerRequestCommandService) {
    return (ProfilerRequestCommandService)service;
  }
  return null;
}","@Override public ProfilerRequestCommandService getRequestService(TBase tBase){
  if (tBase == null) {
    return null;
  }
  final ProfilerCommandService service=profilerCommandServiceRepository.get(tBase.getClass());
  if (service instanceof ProfilerRequestCommandService) {
    return (ProfilerRequestCommandService)service;
  }
  return null;
}"
53917,"@Override public ProfilerSimpleCommandService getSimpleService(TBase tBase){
  ProfilerCommandService service=profilerCommandServiceRepository.get(tBase.getClass());
  if (service instanceof ProfilerSimpleCommandService) {
    return (ProfilerSimpleCommandService)service;
  }
  return null;
}","@Override public ProfilerSimpleCommandService getSimpleService(TBase tBase){
  if (tBase == null) {
    return null;
  }
  final ProfilerCommandService service=profilerCommandServiceRepository.get(tBase.getClass());
  if (service instanceof ProfilerSimpleCommandService) {
    return (ProfilerSimpleCommandService)service;
  }
  return null;
}"
53918,"@Override public ProfilerStreamCommandService getStreamService(TBase tBase){
  ProfilerCommandService service=profilerCommandServiceRepository.get(tBase.getClass());
  if (service instanceof ProfilerStreamCommandService) {
    return (ProfilerStreamCommandService)service;
  }
  return null;
}","@Override public ProfilerStreamCommandService getStreamService(TBase tBase){
  if (tBase == null) {
    return null;
  }
  final ProfilerCommandService service=profilerCommandServiceRepository.get(tBase.getClass());
  if (service instanceof ProfilerStreamCommandService) {
    return (ProfilerStreamCommandService)service;
  }
  return null;
}"
53919,"@Override public ProfilerCommandService getService(TBase tBase){
  return profilerCommandServiceRepository.get(tBase.getClass());
}","@Override public ProfilerCommandService getService(TBase tBase){
  if (tBase == null) {
    return null;
  }
  return profilerCommandServiceRepository.get(tBase.getClass());
}"
53920,"private String[] buildCommand() throws URISyntaxException {
  List<String> list=new ArrayList<String>();
  list.add(getJavaExecutable());
  list.add(""String_Node_Str"");
  list.add(getClassPath());
  list.add(getAgent());
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  if (isDebugMode()) {
    list.addAll(getDebugOptions());
  }
  if (configFile != null) {
    list.add(""String_Node_Str"" + resolveConfigFileLocation());
  }
  list.add(ForkedJUnit.class.getName());
  if (testOnChildClassLoader) {
    list.add(getChildClassPath());
  }
  list.add(getTestClass().getName());
  return list.toArray(new String[list.size()]);
}","private String[] buildCommand() throws URISyntaxException {
  List<String> list=new ArrayList<String>();
  list.add(getJavaExecutable());
  list.add(""String_Node_Str"");
  list.add(getClassPath());
  list.add(getAgent());
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"" + DEFAULT_ENCODING);
  if (isDebugMode()) {
    list.addAll(getDebugOptions());
  }
  if (configFile != null) {
    list.add(""String_Node_Str"" + resolveConfigFileLocation());
  }
  list.add(ForkedJUnit.class.getName());
  if (testOnChildClassLoader) {
    list.add(getChildClassPath());
  }
  list.add(getTestClass().getName());
  return list.toArray(new String[list.size()]);
}"
53921,"@Override public void evaluate() throws Throwable {
  ProcessBuilder builder=new ProcessBuilder();
  builder.command(buildCommand());
  builder.redirectErrorStream(true);
  System.out.println(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + builder.command());
  Process process;
  try {
    process=builder.start();
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  final InputStream inputStream=process.getInputStream();
  final Scanner out=new Scanner(inputStream);
  try {
    while (out.hasNextLine()) {
      String line=out.nextLine();
      if (line.startsWith(ForkedJUnit.JUNIT_OUTPUT_DELIMETER)) {
        String[] tokens=line.split(ForkedJUnit.JUNIT_OUTPUT_DELIMETER_REGEXP);
        String event=tokens[1];
        if (""String_Node_Str"".equals(event)) {
          notifier.fireTestRunStarted(getDescription());
        }
 else         if (""String_Node_Str"".equals(event)) {
          notifier.fireTestRunFinished(result);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Description ofTest=findDescription(getDescription(),tokens[2]);
          notifier.fireTestStarted(ofTest);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Description ofTest=findDescription(getDescription(),tokens[2]);
          notifier.fireTestFinished(ofTest);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Failure failure=toFailure(tokens[2],tokens[3],tokens[4],Arrays.asList(tokens).subList(5,tokens.length - 1));
          notifier.fireTestFailure(failure);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Failure failure=toFailure(tokens[2],tokens[3],tokens[4],Arrays.asList(tokens).subList(5,tokens.length - 1));
          notifier.fireTestAssumptionFailed(failure);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Description ofTest=findDescription(getDescription(),tokens[2]);
          notifier.fireTestIgnored(ofTest);
        }
      }
 else {
        System.out.println(line);
      }
    }
  }
  finally {
    out.close();
    close(inputStream);
  }
  try {
    process.waitFor();
  }
 catch (  InterruptedException e) {
    process.destroy();
  }
}","@Override public void evaluate() throws Throwable {
  ProcessBuilder builder=new ProcessBuilder();
  builder.command(buildCommand());
  builder.redirectErrorStream(true);
  System.out.println(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + builder.command());
  Process process;
  try {
    process=builder.start();
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  final InputStream inputStream=process.getInputStream();
  final Scanner out=new Scanner(inputStream,DEFAULT_ENCODING);
  try {
    while (out.hasNextLine()) {
      String line=out.nextLine();
      if (line.startsWith(ForkedJUnit.JUNIT_OUTPUT_DELIMETER)) {
        String[] tokens=line.split(ForkedJUnit.JUNIT_OUTPUT_DELIMETER_REGEXP);
        String event=tokens[1];
        if (""String_Node_Str"".equals(event)) {
          notifier.fireTestRunStarted(getDescription());
        }
 else         if (""String_Node_Str"".equals(event)) {
          notifier.fireTestRunFinished(result);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Description ofTest=findDescription(getDescription(),tokens[2]);
          notifier.fireTestStarted(ofTest);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Description ofTest=findDescription(getDescription(),tokens[2]);
          notifier.fireTestFinished(ofTest);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Failure failure=toFailure(tokens[2],tokens[3],tokens[4],Arrays.asList(tokens).subList(5,tokens.length - 1));
          notifier.fireTestFailure(failure);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Failure failure=toFailure(tokens[2],tokens[3],tokens[4],Arrays.asList(tokens).subList(5,tokens.length - 1));
          notifier.fireTestAssumptionFailed(failure);
        }
 else         if (""String_Node_Str"".equals(event)) {
          Description ofTest=findDescription(getDescription(),tokens[2]);
          notifier.fireTestIgnored(ofTest);
        }
      }
 else {
        System.out.println(line);
      }
    }
  }
  finally {
    out.close();
    close(inputStream);
  }
  try {
    process.waitFor();
  }
 catch (  InterruptedException e) {
    process.destroy();
  }
}"
53922,"public static ProfilerConfig load(String pinpiontConfigFileName) throws IOException {
  try {
    Properties properties=PropertyUtils.loadProperty(pinpiontConfigFileName);
    return new ProfilerConfig(properties);
  }
 catch (  FileNotFoundException fe) {
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,pinpiontConfigFileName + ""String_Node_Str"");
    }
    throw fe;
  }
catch (  IOException e) {
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,pinpiontConfigFileName + ""String_Node_Str"" + e.getMessage(),e);
    }
    throw e;
  }
}","public static ProfilerConfig load(String pinpointConfigFileName) throws IOException {
  try {
    Properties properties=PropertyUtils.loadProperty(pinpointConfigFileName);
    return new ProfilerConfig(properties);
  }
 catch (  FileNotFoundException fe) {
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,pinpointConfigFileName + ""String_Node_Str"");
    }
    throw fe;
  }
catch (  IOException e) {
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,pinpointConfigFileName + ""String_Node_Str"" + e.getMessage(),e);
    }
    throw e;
  }
}"
53923,"public ProfilerConfig(Properties properties){
  this.properties=properties;
  readPropertyValues();
}","public ProfilerConfig(Properties properties){
  if (properties == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.properties=properties;
  readPropertyValues();
}"
53924,"public AgentInformation(String agentId,String applicationName,long startTime,int pid,String machineName,String hostIp,short serverType,String version){
  if (agentId == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (applicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (machineName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (version == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.agentId=agentId;
  this.applicationName=applicationName;
  this.startTime=startTime;
  this.pid=pid;
  this.machineName=machineName;
  this.hostIp=hostIp;
  this.serverType=serverType;
  this.version=version;
}","public AgentInformation(String agentId,String applicationName,long startTime,int pid,String machineName,String hostIp,short serverType,String version){
  if (agentId == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (applicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (machineName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (version == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.agentId=agentId;
  this.applicationName=applicationName;
  this.startTime=startTime;
  this.pid=pid;
  this.machineName=machineName;
  this.hostIp=hostIp;
  this.serverType=serverType;
  this.serverServiceType=ServiceType.findServiceType(serverType);
  this.version=version;
}"
53925,"@Override public Trace disableSampling(){
  return null;
}","@Override public Trace disableSampling(){
  return traceFactory.disableSampling();
}"
53926,"public void setProfilerConfig(final ProfilerConfig profilerConfig){
  this.profilerConfig=profilerConfig;
}","public void setProfilerConfig(final ProfilerConfig profilerConfig){
  if (profilerConfig == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.profilerConfig=profilerConfig;
}"
53927,"@Override public String getServerType(){
  return ServiceType.findServiceType(this.agentInformation.getServerType()).getDesc();
}","@Override public String getServerType(){
  return this.agentInformation.getServerServiceType().getDesc();
}"
53928,"@Override public Trace disableSampling(){
  checkBeforeTraceObject();
  final Trace metricTrace=createMetricTrace();
  threadLocal.set(metricTrace);
  return null;
}","@Override public Trace disableSampling(){
  checkBeforeTraceObject();
  final Trace metricTrace=createMetricTrace();
  threadLocal.set(metricTrace);
  return metricTrace;
}"
53929,"@Override protected Trace createTrace(Object target,Object[] args){
  org.jboss.netty.channel.MessageEvent messageEvent=getMessageEvent.invoke(target);
  org.jboss.netty.handler.codec.http.HttpRequest request=(org.jboss.netty.handler.codec.http.HttpRequest)messageEvent.getMessage();
  Channel channel=messageEvent.getChannel();
  if (channel == null) {
    logger.debug(""String_Node_Str"");
    return null;
  }
  final boolean sampling=isSamplingEnabled(request);
  if (!sampling) {
    final Trace trace=getTraceContext().disableSampling();
    if (isDebug) {
      String requestURL=request.getUri();
      String remoteAddr=getRemoteAddress(channel);
      logger.debug(""String_Node_Str"",requestURL,remoteAddr);
    }
    return trace;
  }
  final TraceId traceId=populateTraceIdFromRequest(request);
  if (traceId != null) {
    final Trace trace=getTraceContext().continueTraceObject(traceId);
    if (trace.canSampled()) {
      if (isDebug) {
        String requestURL=request.getUri();
        String remoteAddr=getRemoteAddress(channel);
        logger.debug(""String_Node_Str"",new Object[]{traceId,requestURL,remoteAddr});
      }
      return trace;
    }
 else {
      if (isDebug) {
        String requestURL=request.getUri();
        String remoteAddr=getRemoteAddress(channel);
        logger.debug(""String_Node_Str"",new Object[]{traceId,requestURL,remoteAddr});
      }
      return trace;
    }
  }
 else {
    final Trace trace=getTraceContext().newTraceObject();
    if (trace.canSampled()) {
      if (isDebug) {
        String requestURL=request.getUri();
        String remoteAddr=getRemoteAddress(channel);
        logger.debug(""String_Node_Str"",new Object[]{requestURL,remoteAddr});
      }
      return trace;
    }
 else {
      if (isDebug) {
        String requestURL=request.getUri();
        String remoteAddr=getRemoteAddress(channel);
        logger.debug(""String_Node_Str"",new Object[]{requestURL,remoteAddr});
      }
      return trace;
    }
  }
}","@Override protected Trace createTrace(Object target,Object[] args){
  org.jboss.netty.channel.MessageEvent messageEvent=getMessageEvent.invoke(target);
  org.jboss.netty.handler.codec.http.HttpRequest request=(org.jboss.netty.handler.codec.http.HttpRequest)messageEvent.getMessage();
  Channel channel=messageEvent.getChannel();
  if (channel == null) {
    logger.debug(""String_Node_Str"");
    return null;
  }
  final boolean sampling=isSamplingEnabled(request);
  if (!sampling) {
    final TraceContext traceContext=getTraceContext();
    final Trace trace=traceContext.disableSampling();
    if (isDebug) {
      String requestURL=request.getUri();
      String remoteAddr=getRemoteAddress(channel);
      logger.debug(""String_Node_Str"",requestURL,remoteAddr);
    }
    return trace;
  }
  final TraceId traceId=populateTraceIdFromRequest(request);
  if (traceId != null) {
    final TraceContext traceContext=getTraceContext();
    final Trace trace=traceContext.continueTraceObject(traceId);
    if (trace.canSampled()) {
      if (isDebug) {
        String requestURL=request.getUri();
        String remoteAddr=getRemoteAddress(channel);
        logger.debug(""String_Node_Str"",new Object[]{traceId,requestURL,remoteAddr});
      }
      return trace;
    }
 else {
      if (isDebug) {
        String requestURL=request.getUri();
        String remoteAddr=getRemoteAddress(channel);
        logger.debug(""String_Node_Str"",new Object[]{traceId,requestURL,remoteAddr});
      }
      return trace;
    }
  }
 else {
    TraceContext traceContext=getTraceContext();
    final Trace trace=traceContext.newTraceObject();
    if (trace.canSampled()) {
      if (isDebug) {
        String requestURL=request.getUri();
        String remoteAddr=getRemoteAddress(channel);
        logger.debug(""String_Node_Str"",new Object[]{requestURL,remoteAddr});
      }
      return trace;
    }
 else {
      if (isDebug) {
        String requestURL=request.getUri();
        String remoteAddr=getRemoteAddress(channel);
        logger.debug(""String_Node_Str"",new Object[]{requestURL,remoteAddr});
      }
      return trace;
    }
  }
}"
53930,"@Override protected Trace createTrace(Object target,Object[] args){
  final HttpServletRequest request=(HttpServletRequest)args[0];
  final String requestURI=request.getRequestURI();
  if (excludeUrlFilter.filter(requestURI)) {
    if (isTrace) {
      logger.trace(""String_Node_Str"",requestURI);
    }
    return null;
  }
  final boolean sampling=samplingEnable(request);
  if (!sampling) {
    final Trace trace=getTraceContext().disableSampling();
    if (isDebug) {
      logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
    }
    return trace;
  }
  final TraceId traceId=populateTraceIdFromRequest(request);
  if (traceId != null) {
    final Trace trace=getTraceContext().continueTraceObject(traceId);
    if (trace.canSampled()) {
      if (isDebug) {
        logger.debug(""String_Node_Str"",new Object[]{traceId,request.getRequestURI(),request.getRemoteAddr()});
      }
    }
 else {
      if (isDebug) {
        logger.debug(""String_Node_Str"",new Object[]{traceId,request.getRequestURI(),request.getRemoteAddr()});
      }
    }
    return trace;
  }
 else {
    final Trace trace=getTraceContext().newTraceObject();
    if (trace.canSampled()) {
      if (isDebug) {
        logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
      }
    }
 else {
      if (isDebug) {
        logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
      }
    }
    return trace;
  }
}","@Override protected Trace createTrace(Object target,Object[] args){
  final HttpServletRequest request=(HttpServletRequest)args[0];
  final String requestURI=request.getRequestURI();
  if (excludeUrlFilter.filter(requestURI)) {
    if (isTrace) {
      logger.trace(""String_Node_Str"",requestURI);
    }
    return null;
  }
  final boolean sampling=samplingEnable(request);
  if (!sampling) {
    final TraceContext traceContext=getTraceContext();
    final Trace trace=traceContext.disableSampling();
    if (isDebug) {
      logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
    }
    return trace;
  }
  final TraceId traceId=populateTraceIdFromRequest(request);
  if (traceId != null) {
    final TraceContext traceContext=getTraceContext();
    final Trace trace=traceContext.continueTraceObject(traceId);
    if (trace.canSampled()) {
      if (isDebug) {
        logger.debug(""String_Node_Str"",new Object[]{traceId,request.getRequestURI(),request.getRemoteAddr()});
      }
    }
 else {
      if (isDebug) {
        logger.debug(""String_Node_Str"",new Object[]{traceId,request.getRequestURI(),request.getRemoteAddr()});
      }
    }
    return trace;
  }
 else {
    final TraceContext traceContext=getTraceContext();
    final Trace trace=traceContext.newTraceObject();
    if (trace.canSampled()) {
      if (isDebug) {
        logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
      }
    }
 else {
      if (isDebug) {
        logger.debug(""String_Node_Str"",request.getRequestURI(),request.getRemoteAddr());
      }
    }
    return trace;
  }
}"
53931,"@Test public void trace(){
  DefaultTraceId traceID=new DefaultTraceId(""String_Node_Str"",0,1);
  DefaultTraceContext defaultTraceConetxt=getDefaultTraceConetxt();
  DefaultTrace trace=new DefaultTrace(defaultTraceConetxt,traceID);
  trace.setStorage(new SpanStorage(LoggingDataSender.DEFAULT_LOGGING_DATA_SENDER));
  trace.traceBlockBegin();
  trace.recordServiceType(ServiceType.UNKNOWN);
  trace.recordRpcName(""String_Node_Str"");
  trace.recordEndPoint(""String_Node_Str"");
  trace.recordAttribute(AnnotationKey.API,""String_Node_Str"");
  getDataFromDB(trace);
  trace.traceBlockEnd();
}","@Test public void trace(){
  DefaultTraceId traceID=new DefaultTraceId(""String_Node_Str"",0,1);
  DefaultTraceContext defaultTraceConetxt=getDefaultTraceContext();
  DefaultTrace trace=new DefaultTrace(defaultTraceConetxt,traceID);
  trace.setStorage(new SpanStorage(LoggingDataSender.DEFAULT_LOGGING_DATA_SENDER));
  trace.traceBlockBegin();
  trace.recordServiceType(ServiceType.UNKNOWN);
  trace.recordRpcName(""String_Node_Str"");
  trace.recordEndPoint(""String_Node_Str"");
  trace.recordAttribute(AnnotationKey.API,""String_Node_Str"");
  getDataFromDB(trace);
  trace.traceBlockEnd();
}"
53932,"@Test public void popEventTest(){
  DefaultTraceId traceID=new DefaultTraceId(""String_Node_Str"",0,1);
  DefaultTraceContext defaultTraceConetxt=getDefaultTraceConetxt();
  DefaultTrace trace=new DefaultTrace(defaultTraceConetxt,traceID);
  TestDataSender dataSender=new TestDataSender();
  trace.setStorage(new SpanStorage(LoggingDataSender.DEFAULT_LOGGING_DATA_SENDER));
  trace.traceRootBlockEnd();
  logger.info(String.valueOf(dataSender.event));
}","@Test public void popEventTest(){
  DefaultTraceId traceID=new DefaultTraceId(""String_Node_Str"",0,1);
  DefaultTraceContext defaultTraceConetxt=getDefaultTraceContext();
  DefaultTrace trace=new DefaultTrace(defaultTraceConetxt,traceID);
  TestDataSender dataSender=new TestDataSender();
  trace.setStorage(new SpanStorage(LoggingDataSender.DEFAULT_LOGGING_DATA_SENDER));
  trace.traceRootBlockEnd();
  logger.info(String.valueOf(dataSender.event));
}"
53933,"@Test public void testValidHeaderExists(){
  HttpServletRequest request=mock(HttpServletRequest.class);
  HttpServletResponse response=mock(HttpServletResponse.class);
  when(request.getRequestURI()).thenReturn(""String_Node_Str"");
  when(request.getRemoteAddr()).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_TRACE_ID.toString())).thenReturn(UUID.randomUUID().toString());
  when(request.getHeader(Header.HTTP_PARENT_SPAN_ID.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_SPAN_ID.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_SAMPLED.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_FLAGS.toString())).thenReturn(""String_Node_Str"");
  Enumeration<?> enumeration=mock(Enumeration.class);
  when(request.getParameterNames()).thenReturn(enumeration);
  TraceContext traceContext=new MockTraceContextFactory().create();
  StandardHostValveInvokeInterceptor interceptor=new StandardHostValveInvokeInterceptor();
  interceptor.setTraceContext(traceContext);
  interceptor.before(""String_Node_Str"",new Object[]{request,response});
  interceptor.after(""String_Node_Str"",new Object[]{request,response},new Object(),null);
  interceptor.before(""String_Node_Str"",new Object[]{request,response});
  interceptor.after(""String_Node_Str"",new Object[]{request,response},new Object(),null);
}","@Test public void testValidHeaderExists(){
  when(request.getRequestURI()).thenReturn(""String_Node_Str"");
  when(request.getRemoteAddr()).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_TRACE_ID.toString())).thenReturn(UUID.randomUUID().toString());
  when(request.getHeader(Header.HTTP_PARENT_SPAN_ID.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_SPAN_ID.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_SAMPLED.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_FLAGS.toString())).thenReturn(""String_Node_Str"");
  when(request.getParameterNames()).thenReturn(enumeration);
  TraceContext traceContext=new MockTraceContextFactory().create();
  StandardHostValveInvokeInterceptor interceptor=new StandardHostValveInvokeInterceptor();
  interceptor.setTraceContext(traceContext);
  interceptor.before(""String_Node_Str"",new Object[]{request,response});
  interceptor.after(""String_Node_Str"",new Object[]{request,response},new Object(),null);
  interceptor.before(""String_Node_Str"",new Object[]{request,response});
  interceptor.after(""String_Node_Str"",new Object[]{request,response},new Object(),null);
}"
53934,"@Test public void testInvalidHeaderExists(){
  HttpServletRequest request=mock(HttpServletRequest.class);
  HttpServletResponse response=mock(HttpServletResponse.class);
  when(request.getRequestURI()).thenReturn(""String_Node_Str"");
  when(request.getRemoteAddr()).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_TRACE_ID.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_PARENT_SPAN_ID.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_SPAN_ID.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_SAMPLED.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_FLAGS.toString())).thenReturn(""String_Node_Str"");
  Enumeration<?> enumeration=mock(Enumeration.class);
  when(request.getParameterNames()).thenReturn(enumeration);
  TraceContext traceContext=new MockTraceContextFactory().create();
  StandardHostValveInvokeInterceptor interceptor=new StandardHostValveInvokeInterceptor();
  interceptor.setTraceContext(traceContext);
  interceptor.before(""String_Node_Str"",new Object[]{request,response});
  interceptor.after(""String_Node_Str"",new Object[]{request,response},new Object(),null);
  interceptor.before(""String_Node_Str"",new Object[]{request,response});
  interceptor.after(""String_Node_Str"",new Object[]{request,response},new Object(),null);
}","@Test public void testInvalidHeaderExists(){
  when(request.getRequestURI()).thenReturn(""String_Node_Str"");
  when(request.getRemoteAddr()).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_TRACE_ID.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_PARENT_SPAN_ID.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_SPAN_ID.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_SAMPLED.toString())).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_FLAGS.toString())).thenReturn(""String_Node_Str"");
  when(request.getParameterNames()).thenReturn(enumeration);
  TraceContext traceContext=new MockTraceContextFactory().create();
  StandardHostValveInvokeInterceptor interceptor=new StandardHostValveInvokeInterceptor();
  interceptor.setTraceContext(traceContext);
  interceptor.before(""String_Node_Str"",new Object[]{request,response});
  interceptor.after(""String_Node_Str"",new Object[]{request,response},new Object(),null);
  interceptor.before(""String_Node_Str"",new Object[]{request,response});
  interceptor.after(""String_Node_Str"",new Object[]{request,response},new Object(),null);
}"
53935,"@Test public void testHeaderNOTExists(){
  HttpServletRequest request=mock(HttpServletRequest.class);
  HttpServletResponse response=mock(HttpServletResponse.class);
  when(request.getRequestURI()).thenReturn(""String_Node_Str"");
  when(request.getRemoteAddr()).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_TRACE_ID.toString())).thenReturn(null);
  when(request.getHeader(Header.HTTP_PARENT_SPAN_ID.toString())).thenReturn(null);
  when(request.getHeader(Header.HTTP_SPAN_ID.toString())).thenReturn(null);
  when(request.getHeader(Header.HTTP_SAMPLED.toString())).thenReturn(null);
  when(request.getHeader(Header.HTTP_FLAGS.toString())).thenReturn(null);
  Enumeration<?> enumeration=mock(Enumeration.class);
  when(request.getParameterNames()).thenReturn(enumeration);
  StandardHostValveInvokeInterceptor interceptor=new StandardHostValveInvokeInterceptor();
  TraceContext traceContext=new MockTraceContextFactory().create();
  interceptor.setTraceContext(traceContext);
  interceptor.before(""String_Node_Str"",new Object[]{request,response});
  interceptor.after(""String_Node_Str"",new Object[]{request,response},new Object(),null);
  interceptor.before(""String_Node_Str"",new Object[]{request,response});
  interceptor.after(""String_Node_Str"",new Object[]{request,response},new Object(),null);
}","@Test public void testHeaderNOTExists(){
  when(request.getRequestURI()).thenReturn(""String_Node_Str"");
  when(request.getRemoteAddr()).thenReturn(""String_Node_Str"");
  when(request.getHeader(Header.HTTP_TRACE_ID.toString())).thenReturn(null);
  when(request.getHeader(Header.HTTP_PARENT_SPAN_ID.toString())).thenReturn(null);
  when(request.getHeader(Header.HTTP_SPAN_ID.toString())).thenReturn(null);
  when(request.getHeader(Header.HTTP_SAMPLED.toString())).thenReturn(null);
  when(request.getHeader(Header.HTTP_FLAGS.toString())).thenReturn(null);
  when(request.getParameterNames()).thenReturn(enumeration);
  StandardHostValveInvokeInterceptor interceptor=new StandardHostValveInvokeInterceptor();
  TraceContext traceContext=new MockTraceContextFactory().create();
  interceptor.setTraceContext(traceContext);
  interceptor.before(""String_Node_Str"",new Object[]{request,response});
  interceptor.after(""String_Node_Str"",new Object[]{request,response},new Object(),null);
  interceptor.before(""String_Node_Str"",new Object[]{request,response});
  interceptor.after(""String_Node_Str"",new Object[]{request,response},new Object(),null);
}"
53936,"public void start(){
switch (this.workerState.getCurrentState()) {
case NEW:
    if (this.workerState.changeStateInitializing()) {
      logger.info(""String_Node_Str"",this.getClass().getSimpleName());
      this.workerThread.start();
      workerState.changeStateStarted();
      logger.info(""String_Node_Str"",this.getClass().getSimpleName());
      break;
    }
case INITIALIZING:
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
break;
case STARTED:
logger.info(""String_Node_Str"",this.getClass().getSimpleName());
break;
case DESTROYING:
throw new IllegalStateException(""String_Node_Str"");
case STOPPED:
throw new IllegalStateException(""String_Node_Str"");
case ILLEGAL_STATE:
throw new IllegalStateException(""String_Node_Str"");
}
}","public void start(){
switch (this.workerState.getCurrentState()) {
case NEW:
    if (this.workerState.changeStateInitializing()) {
      logger.info(""String_Node_Str"",this.getClass().getSimpleName());
      workerState.changeStateStarted();
      this.workerThread.start();
      logger.info(""String_Node_Str"",this.getClass().getSimpleName());
      break;
    }
case INITIALIZING:
  logger.info(""String_Node_Str"",this.getClass().getSimpleName());
break;
case STARTED:
logger.info(""String_Node_Str"",this.getClass().getSimpleName());
break;
case DESTROYING:
throw new IllegalStateException(""String_Node_Str"");
case STOPPED:
throw new IllegalStateException(""String_Node_Str"");
case ILLEGAL_STATE:
throw new IllegalStateException(""String_Node_Str"");
}
}"
53937,"private boolean isTarget(Class<?> clazz){
  if (Boolean.TRUE.equals(rejected.getIfPresent(clazz))) {
    return false;
  }
  if (targetAnnotationNames != null) {
    List<Class<? extends Annotation>> targetAnnotations=getTargetAnnotations(clazz.getClassLoader());
    for (    Class<? extends Annotation> a : targetAnnotations) {
      if (clazz.isAnnotationPresent(a)) {
        return true;
      }
    }
    for (    Annotation a : clazz.getAnnotations()) {
      for (      Class<? extends Annotation> ac : targetAnnotations) {
        if (a.annotationType().isAnnotationPresent(ac)) {
          return true;
        }
      }
    }
  }
  if (targetClassPatterns != null) {
    String className=clazz.getName();
    for (    Pattern pattern : targetClassPatterns) {
      if (pattern.matcher(className).matches()) {
        return true;
      }
    }
  }
  rejected.put(clazz,Boolean.TRUE);
  return false;
}","private boolean isTarget(Class<?> clazz){
  if (rejected.getIfPresent(clazz) == Boolean.TRUE) {
    return false;
  }
  if (targetAnnotationNames != null) {
    List<Class<? extends Annotation>> targetAnnotations=getTargetAnnotations(clazz.getClassLoader());
    for (    Class<? extends Annotation> a : targetAnnotations) {
      if (clazz.isAnnotationPresent(a)) {
        return true;
      }
    }
    for (    Annotation a : clazz.getAnnotations()) {
      for (      Class<? extends Annotation> ac : targetAnnotations) {
        if (a.annotationType().isAnnotationPresent(ac)) {
          return true;
        }
      }
    }
  }
  if (targetClassPatterns != null) {
    String className=clazz.getName();
    for (    Pattern pattern : targetClassPatterns) {
      if (pattern.matcher(className).matches()) {
        return true;
      }
    }
  }
  rejected.put(clazz,Boolean.TRUE);
  return false;
}"
53938,"private static List<String> split(String values){
  if (values == null) {
    return Collections.emptyList();
  }
  String[] tokens=values.split(""String_Node_Str"");
  List<String> result=new ArrayList<String>(tokens.length);
  for (  String token : tokens) {
    String trimmed=token.trim();
    if (!trimmed.isEmpty()) {
      result.add(trimmed);
    }
  }
  return result;
}","private static List<String> split(String values){
  if (values == null) {
    return Collections.<String>emptyList();
  }
  String[] tokens=values.split(""String_Node_Str"");
  List<String> result=new ArrayList<String>(tokens.length);
  for (  String token : tokens) {
    String trimmed=token.trim();
    if (!trimmed.isEmpty()) {
      result.add(trimmed);
    }
  }
  return result;
}"
53939,"private List<Class<? extends Annotation>> loadTargetAnnotations(ClassLoader loader){
  List<Class<? extends Annotation>> targetAnnotationClasses=null;
  if (!targetAnnotationNames.isEmpty()) {
    targetAnnotationClasses=new ArrayList<Class<? extends Annotation>>(targetAnnotationNames.size());
    for (    String annotationName : targetAnnotationNames) {
      try {
        Class<?> clazz=loader.loadClass(annotationName);
        Class<? extends Annotation> ac=clazz.asSubclass(Annotation.class);
        targetAnnotationClasses.add(ac);
      }
 catch (      ClassNotFoundException ex) {
        logger.warn(""String_Node_Str"",annotationName,ex);
      }
catch (      ClassCastException ex) {
        logger.warn(""String_Node_Str"",annotationName,ex);
      }
    }
  }
  return targetAnnotationClasses;
}","private List<Class<? extends Annotation>> loadTargetAnnotations(ClassLoader loader){
  if (targetAnnotationNames.isEmpty()) {
    return Collections.<Class<? extends Annotation>>emptyList();
  }
  List<Class<? extends Annotation>> targetAnnotationClasses=new ArrayList<Class<? extends Annotation>>(targetAnnotationNames.size());
  for (  String s : targetAnnotationNames) {
    try {
      Class<?> c=loader.loadClass(s);
      Class<? extends Annotation> ac=c.asSubclass(Annotation.class);
      targetAnnotationClasses.add(ac);
    }
 catch (    ClassNotFoundException e) {
      logger.warn(""String_Node_Str"" + s + ""String_Node_Str"",e);
    }
catch (    ClassCastException e) {
      logger.warn(""String_Node_Str"" + s + ""String_Node_Str"",e);
    }
  }
  return targetAnnotationClasses;
}"
53940,"public static TargetBeanFilter of(ProfilerConfig config){
  List<String> targetNamePatternStrings=split(config.getSpringBeansNamePatterns());
  List<String> targetClassPatternStrings=split(config.getSpringBeansClassPatterns());
  List<String> targetAnnotationNames=split(config.getSpringBeansAnnotations());
  List<Pattern> beanNamePatterns=compilePattern(targetNamePatternStrings);
  List<Pattern> beanClassPatterns=compilePattern(targetClassPatternStrings);
  return new TargetBeanFilter(beanNamePatterns,beanClassPatterns,targetAnnotationNames);
}","public static TargetBeanFilter of(ProfilerConfig config){
  List<String> targetNamePatternStrings=split(config.getSpringBeansNamePatterns());
  List<String> targetClassPatternStrings=split(config.getSpringBeansClassPatterns());
  List<String> targetAnnotationNames=split(config.getSpringBeansAnnotations());
  List<Pattern> beanNamePatterns=null;
  if (!targetNamePatternStrings.isEmpty()) {
    beanNamePatterns=new ArrayList<Pattern>(targetNamePatternStrings.size());
    for (    String s : targetNamePatternStrings) {
      Pattern p=Pattern.compile(s);
      beanNamePatterns.add(p);
    }
  }
  List<Pattern> beanClassPatterns=null;
  if (!targetClassPatternStrings.isEmpty()) {
    beanClassPatterns=new ArrayList<Pattern>(targetClassPatternStrings.size());
    for (    String s : targetClassPatternStrings) {
      Pattern p=Pattern.compile(s);
      beanClassPatterns.add(p);
    }
  }
  return new TargetBeanFilter(beanNamePatterns,beanClassPatterns,targetAnnotationNames);
}"
53941,"protected boolean decideResult(long value){
  if (value >= rule.getThreshold()) {
    return true;
  }
 else {
    return false;
  }
}","protected boolean decideResult(long value){
  return value >= rule.getThreshold();
}"
53942,"public void check(){
  dataCollector.collect();
  if (decideResult(getDetectedValue())) {
    detected=true;
  }
 else {
    detected=false;
  }
  logger.info(""String_Node_Str"",this.getClass().getSimpleName(),detected,rule.getApplicationId(),getDetectedValue(),rule.getThreshold());
}","public void check(){
  dataCollector.collect();
  detected=decideResult(getDetectedValue());
  logger.info(""String_Node_Str"",this.getClass().getSimpleName(),detected,rule.getApplicationId(),getDetectedValue(),rule.getThreshold());
}"
53943,"protected final void processBean(String beanName,Object bean){
  if (bean == null) {
    return;
  }
  Class<? extends Object> clazz=bean.getClass();
  if (!filter.isTarget(beanName,clazz)) {
    return;
  }
  try {
    retransformer.retransform(clazz,modifier);
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"" + clazz.getName());
    }
  }
 catch (  ProfilerException e) {
    logger.warn(""String_Node_Str"" + clazz.getName(),e);
    return;
  }
  filter.addTransformed(clazz);
}","protected final void processBean(String beanName,Object bean){
  if (bean == null) {
    return;
  }
  Class<?> clazz=bean.getClass();
  if (!filter.isTarget(beanName,clazz)) {
    return;
  }
  try {
    retransformer.retransform(clazz,modifier);
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"",clazz.getName());
    }
  }
 catch (  ProfilerException e) {
    logger.warn(""String_Node_Str"",clazz.getName(),e);
    return;
  }
  filter.addTransformed(clazz);
}"
53944,"private boolean isTarget(Class<?> clazz){
  if (rejected.getIfPresent(clazz) == Boolean.TRUE) {
    return false;
  }
  if (targetAnnotationNames != null) {
    List<Class<? extends Annotation>> targetAnnotations=getTargetAnnotations(clazz.getClassLoader());
    for (    Class<? extends Annotation> a : targetAnnotations) {
      if (clazz.isAnnotationPresent(a)) {
        return true;
      }
    }
    for (    Annotation a : clazz.getAnnotations()) {
      for (      Class<? extends Annotation> ac : targetAnnotations) {
        if (a.annotationType().isAnnotationPresent(ac)) {
          return true;
        }
      }
    }
  }
  if (targetClassPatterns != null) {
    String className=clazz.getName();
    for (    Pattern pattern : targetClassPatterns) {
      if (pattern.matcher(className).matches()) {
        return true;
      }
    }
  }
  rejected.put(clazz,Boolean.TRUE);
  return false;
}","private boolean isTarget(Class<?> clazz){
  if (Boolean.TRUE.equals(rejected.getIfPresent(clazz))) {
    return false;
  }
  if (targetAnnotationNames != null) {
    List<Class<? extends Annotation>> targetAnnotations=getTargetAnnotations(clazz.getClassLoader());
    for (    Class<? extends Annotation> a : targetAnnotations) {
      if (clazz.isAnnotationPresent(a)) {
        return true;
      }
    }
    for (    Annotation a : clazz.getAnnotations()) {
      for (      Class<? extends Annotation> ac : targetAnnotations) {
        if (a.annotationType().isAnnotationPresent(ac)) {
          return true;
        }
      }
    }
  }
  if (targetClassPatterns != null) {
    String className=clazz.getName();
    for (    Pattern pattern : targetClassPatterns) {
      if (pattern.matcher(className).matches()) {
        return true;
      }
    }
  }
  rejected.put(clazz,Boolean.TRUE);
  return false;
}"
53945,"private static List<String> split(String values){
  if (values == null) {
    return Collections.<String>emptyList();
  }
  String[] tokens=values.split(""String_Node_Str"");
  List<String> result=new ArrayList<String>(tokens.length);
  for (  String token : tokens) {
    String trimmed=token.trim();
    if (!trimmed.isEmpty()) {
      result.add(trimmed);
    }
  }
  return result;
}","private static List<String> split(String values){
  if (values == null) {
    return Collections.emptyList();
  }
  String[] tokens=values.split(""String_Node_Str"");
  List<String> result=new ArrayList<String>(tokens.length);
  for (  String token : tokens) {
    String trimmed=token.trim();
    if (!trimmed.isEmpty()) {
      result.add(trimmed);
    }
  }
  return result;
}"
53946,"private List<Class<? extends Annotation>> loadTargetAnnotations(ClassLoader loader){
  List<Class<? extends Annotation>> targetAnnotationClasses=null;
  if (!targetAnnotationNames.isEmpty()) {
    targetAnnotationClasses=new ArrayList<Class<? extends Annotation>>(targetAnnotationNames.size());
    for (    String s : targetAnnotationNames) {
      try {
        Class<?> c=loader.loadClass(s);
        Class<? extends Annotation> ac=c.asSubclass(Annotation.class);
        targetAnnotationClasses.add(ac);
      }
 catch (      ClassNotFoundException e) {
        logger.warn(""String_Node_Str"" + s + ""String_Node_Str"",e);
      }
catch (      ClassCastException e) {
        logger.warn(""String_Node_Str"" + s + ""String_Node_Str"",e);
      }
    }
  }
  return targetAnnotationClasses;
}","private List<Class<? extends Annotation>> loadTargetAnnotations(ClassLoader loader){
  List<Class<? extends Annotation>> targetAnnotationClasses=null;
  if (!targetAnnotationNames.isEmpty()) {
    targetAnnotationClasses=new ArrayList<Class<? extends Annotation>>(targetAnnotationNames.size());
    for (    String annotationName : targetAnnotationNames) {
      try {
        Class<?> clazz=loader.loadClass(annotationName);
        Class<? extends Annotation> ac=clazz.asSubclass(Annotation.class);
        targetAnnotationClasses.add(ac);
      }
 catch (      ClassNotFoundException ex) {
        logger.warn(""String_Node_Str"",annotationName,ex);
      }
catch (      ClassCastException ex) {
        logger.warn(""String_Node_Str"",annotationName,ex);
      }
    }
  }
  return targetAnnotationClasses;
}"
53947,"public static TargetBeanFilter of(ProfilerConfig config){
  List<String> targetNamePatternStrings=split(config.getSpringBeansNamePatterns());
  List<String> targetClassPatternStrings=split(config.getSpringBeansClassPatterns());
  List<String> targetAnnotationNames=split(config.getSpringBeansAnnotations());
  List<Pattern> beanNamePatterns=null;
  if (!targetNamePatternStrings.isEmpty()) {
    beanNamePatterns=new ArrayList<Pattern>(targetNamePatternStrings.size());
    for (    String s : targetNamePatternStrings) {
      Pattern p=Pattern.compile(s);
      beanNamePatterns.add(p);
    }
  }
  List<Pattern> beanClassPatterns=null;
  if (!targetClassPatternStrings.isEmpty()) {
    beanClassPatterns=new ArrayList<Pattern>(targetClassPatternStrings.size());
    for (    String s : targetClassPatternStrings) {
      Pattern p=Pattern.compile(s);
      beanClassPatterns.add(p);
    }
  }
  return new TargetBeanFilter(beanNamePatterns,beanClassPatterns,targetAnnotationNames);
}","public static TargetBeanFilter of(ProfilerConfig config){
  List<String> targetNamePatternStrings=split(config.getSpringBeansNamePatterns());
  List<String> targetClassPatternStrings=split(config.getSpringBeansClassPatterns());
  List<String> targetAnnotationNames=split(config.getSpringBeansAnnotations());
  List<Pattern> beanNamePatterns=null;
  if (!targetNamePatternStrings.isEmpty()) {
    beanNamePatterns=new ArrayList<Pattern>(targetNamePatternStrings.size());
    for (    String namePattern : targetNamePatternStrings) {
      Pattern pattern=Pattern.compile(namePattern);
      beanNamePatterns.add(pattern);
    }
  }
  List<Pattern> beanClassPatterns=null;
  if (!targetClassPatternStrings.isEmpty()) {
    beanClassPatterns=new ArrayList<Pattern>(targetClassPatternStrings.size());
    for (    String classPattern : targetClassPatternStrings) {
      Pattern pattern=Pattern.compile(classPattern);
      beanClassPatterns.add(pattern);
    }
  }
  return new TargetBeanFilter(beanNamePatterns,beanClassPatterns,targetAnnotationNames);
}"
53948,"private <T extends TAgentStat>void handleAgentStat(String agentId,long startTimestamp,T agentStat){
  try {
    agentStat.setAgentId(agentId);
    agentStat.setStartTimestamp(startTimestamp);
    agentStatDao.insert(agentStat);
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e.getMessage());
    ;
  }
}","private <T extends TAgentStat>void handleAgentStat(String agentId,long startTimestamp,T agentStat){
  try {
    agentStat.setAgentId(agentId);
    agentStat.setStartTimestamp(startTimestamp);
    agentStatDao.insert(agentStat);
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e.getMessage());
  }
}"
53949,"private boolean await0(long timeoutMillis){
  if (timeoutMillis < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + timeoutMillis);
  }
  boolean interrupted=false;
synchronized (this) {
    if (ready) {
      return true;
    }
    try {
      this.waiters++;
      wait(timeoutMillis);
    }
 catch (    InterruptedException e) {
      interrupted=true;
    }
 finally {
      this.waiters--;
    }
  }
  if (interrupted) {
    Thread.currentThread().interrupt();
  }
  return ready;
}","private boolean await0(long timeoutMillis){
  if (timeoutMillis < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + timeoutMillis);
  }
  boolean interrupted=false;
  try {
synchronized (this) {
      if (ready) {
        return true;
      }
      try {
        this.waiters++;
        wait(timeoutMillis);
      }
 catch (      InterruptedException e) {
        interrupted=true;
      }
 finally {
        this.waiters--;
      }
      return ready;
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}"
53950,"@Override public void start(){
synchronized (this) {
    if (this.agentStatus == AgentStatus.INITIALIZING) {
      changeStatus(AgentStatus.RUNNING);
    }
 else {
      logger.warn(""String_Node_Str"");
      return;
    }
  }
  logger.info(""String_Node_Str"",ProductInfo.CAMEL_NAME);
  ServerMetaData serverMetaData=this.traceContext.getServerMetaDataHolder().getServerMetaData();
  logger.debug(serverMetaData.toString());
  this.heartBitChecker.start();
  this.agentStatMonitor.start();
}","@Override public void start(){
synchronized (this) {
    if (this.agentStatus == AgentStatus.INITIALIZING) {
      changeStatus(AgentStatus.RUNNING);
    }
 else {
      logger.warn(""String_Node_Str"");
      return;
    }
  }
  logger.info(""String_Node_Str"",ProductInfo.CAMEL_NAME);
  ServerMetaData serverMetaData=this.traceContext.getServerMetaDataHolder().getServerMetaData();
  logger.debug(serverMetaData.toString());
  this.heartBeatChecker.start();
  this.agentStatMonitor.start();
}"
53951,"@Override public void stop(){
synchronized (this) {
    if (this.agentStatus == AgentStatus.RUNNING) {
      changeStatus(AgentStatus.STOPPED);
    }
 else {
      logger.warn(""String_Node_Str"",this.agentStatus);
      return;
    }
  }
  logger.info(""String_Node_Str"",ProductInfo.CAMEL_NAME);
  this.heartBitChecker.stop();
  tAgentInfo.setEndStatus(0);
  tAgentInfo.setEndTimestamp(System.currentTimeMillis());
  this.tcpDataSender.send(tAgentInfo);
  this.agentStatMonitor.stop();
  this.spanDataSender.stop();
  this.statDataSender.stop();
  this.tcpDataSender.stop();
  if (this.socket != null) {
    this.socket.close();
  }
  if (this.factory != null) {
    this.factory.release();
  }
}","@Override public void stop(){
synchronized (this) {
    if (this.agentStatus == AgentStatus.RUNNING) {
      changeStatus(AgentStatus.STOPPED);
    }
 else {
      logger.warn(""String_Node_Str"",this.agentStatus);
      return;
    }
  }
  logger.info(""String_Node_Str"",ProductInfo.CAMEL_NAME);
  this.heartBeatChecker.stop();
  tAgentInfo.setEndStatus(0);
  tAgentInfo.setEndTimestamp(System.currentTimeMillis());
  this.tcpDataSender.send(tAgentInfo);
  this.agentStatMonitor.stop();
  this.spanDataSender.stop();
  this.statDataSender.stop();
  this.tcpDataSender.stop();
  if (this.socket != null) {
    this.socket.close();
  }
  if (this.factory != null) {
    this.factory.release();
  }
}"
53952,"public DefaultAgent(String agentArgs,Instrumentation instrumentation,ProfilerConfig profilerConfig){
  if (instrumentation == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (profilerConfig == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.binder=new Slf4jLoggerBinder();
  bindPLoggerFactory(this.binder);
  dumpSystemProperties();
  dumpConfig(profilerConfig);
  changeStatus(AgentStatus.INITIALIZING);
  this.profilerConfig=profilerConfig;
  this.serverInfo=new ServerInfo();
  final ApplicationServerTypeResolver typeResolver=new ApplicationServerTypeResolver(profilerConfig.getApplicationServerType());
  if (!typeResolver.resolve()) {
    throw new PinpointException(""String_Node_Str"");
  }
  this.byteCodeInstrumentor=new JavaAssistByteCodeInstrumentor(typeResolver.getServerLibPath(),this);
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"",this.getClass().getClassLoader());
  }
  this.classFileTransformer=new ClassFileTransformerDispatcher(this,byteCodeInstrumentor);
  instrumentation.addTransformer(this.classFileTransformer);
  final AgentInformationFactory agentInformationFactory=new AgentInformationFactory();
  this.agentInformation=agentInformationFactory.createAgentInformation(typeResolver.getServerType());
  logger.info(""String_Node_Str"",agentInformation);
  this.tAgentInfo=createTAgentInfo();
  this.factory=createPinpointSocketFactory();
  this.socket=createPinpointSocket(this.profilerConfig.getCollectorServerIp(),this.profilerConfig.getCollectorTcpServerPort(),factory,this.profilerConfig.isTcpDataSenderCommandAcceptEnable());
  this.tcpDataSender=createTcpDataSender(socket);
  this.spanDataSender=createUdpDataSender(this.profilerConfig.getCollectorUdpSpanServerPort(),""String_Node_Str"",this.profilerConfig.getSpanDataSenderWriteQueueSize(),this.profilerConfig.getSpanDataSenderSocketTimeout(),this.profilerConfig.getSpanDataSenderSocketSendBufferSize());
  this.statDataSender=createUdpDataSender(this.profilerConfig.getCollectorUdpServerPort(),""String_Node_Str"",this.profilerConfig.getStatDataSenderWriteQueueSize(),this.profilerConfig.getStatDataSenderSocketTimeout(),this.profilerConfig.getStatDataSenderSocketSendBufferSize());
  this.traceContext=createTraceContext(agentInformation.getServerType());
  this.heartBitChecker=new HeartBitChecker(tcpDataSender,profilerConfig.getHeartbeatInterval(),tAgentInfo);
  this.agentStatMonitor=new AgentStatMonitor(this.statDataSender,this.agentInformation.getAgentId(),this.agentInformation.getStartTime());
  preLoadClass();
  if (typeResolver.isManuallyStartupRequired()) {
    start();
  }
}","public DefaultAgent(String agentArgs,Instrumentation instrumentation,ProfilerConfig profilerConfig){
  if (instrumentation == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (profilerConfig == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.binder=new Slf4jLoggerBinder();
  bindPLoggerFactory(this.binder);
  dumpSystemProperties();
  dumpConfig(profilerConfig);
  changeStatus(AgentStatus.INITIALIZING);
  this.profilerConfig=profilerConfig;
  this.serverInfo=new ServerInfo();
  final ApplicationServerTypeResolver typeResolver=new ApplicationServerTypeResolver(profilerConfig.getApplicationServerType());
  if (!typeResolver.resolve()) {
    throw new PinpointException(""String_Node_Str"");
  }
  this.byteCodeInstrumentor=new JavaAssistByteCodeInstrumentor(typeResolver.getServerLibPath(),this);
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"",this.getClass().getClassLoader());
  }
  this.classFileTransformer=new ClassFileTransformerDispatcher(this,byteCodeInstrumentor);
  instrumentation.addTransformer(this.classFileTransformer);
  final AgentInformationFactory agentInformationFactory=new AgentInformationFactory();
  this.agentInformation=agentInformationFactory.createAgentInformation(typeResolver.getServerType());
  logger.info(""String_Node_Str"",agentInformation);
  this.tAgentInfo=createTAgentInfo();
  this.factory=createPinpointSocketFactory();
  this.socket=createPinpointSocket(this.profilerConfig.getCollectorServerIp(),this.profilerConfig.getCollectorTcpServerPort(),factory,this.profilerConfig.isTcpDataSenderCommandAcceptEnable());
  this.tcpDataSender=createTcpDataSender(socket);
  this.spanDataSender=createUdpDataSender(this.profilerConfig.getCollectorUdpSpanServerPort(),""String_Node_Str"",this.profilerConfig.getSpanDataSenderWriteQueueSize(),this.profilerConfig.getSpanDataSenderSocketTimeout(),this.profilerConfig.getSpanDataSenderSocketSendBufferSize());
  this.statDataSender=createUdpDataSender(this.profilerConfig.getCollectorUdpServerPort(),""String_Node_Str"",this.profilerConfig.getStatDataSenderWriteQueueSize(),this.profilerConfig.getStatDataSenderSocketTimeout(),this.profilerConfig.getStatDataSenderSocketSendBufferSize());
  this.traceContext=createTraceContext(agentInformation.getServerType());
  this.heartBeatChecker=new HeartBeatChecker(tcpDataSender,profilerConfig.getHeartbeatInterval(),tAgentInfo);
  this.agentStatMonitor=new AgentStatMonitor(this.statDataSender,this.agentInformation.getAgentId(),this.agentInformation.getStartTime());
  preLoadClass();
  if (typeResolver.isManuallyStartupRequired()) {
    start();
  }
}"
53953,"@Override public byte[] modify(ClassLoader classLoader,String javassistClassName,ProtectionDomain protectedDomain,byte[] classFileBuffer){
  logger.info(""String_Node_Str"",javassistClassName);
  try {
    InstrumentClass standardService=byteCodeInstrumentor.getClass(javassistClassName);
    LifeCycleEventListener lifeCycleEventListener=new LifeCycleEventListener(agent);
    Interceptor standardServiceStartInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,""String_Node_Str"",new Object[]{lifeCycleEventListener},new Class[]{LifeCycleEventListener.class});
    Interceptor standardServiceStopInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,""String_Node_Str"",new Object[]{lifeCycleEventListener},new Class[]{LifeCycleEventListener.class});
    boolean isHooked=false;
    if (isHooked=(standardService.hasDeclaredMethod(""String_Node_Str"",null) && standardService.hasDeclaredMethod(""String_Node_Str"",null))) {
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStartInterceptor);
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStopInterceptor);
    }
 else     if (isHooked=(standardService.hasDeclaredMethod(""String_Node_Str"",null) && standardService.hasDeclaredMethod(""String_Node_Str"",null))) {
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStartInterceptor);
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStopInterceptor);
    }
    if (isHooked) {
      logger.info(""String_Node_Str"",javassistClassName);
    }
 else {
      logger.warn(""String_Node_Str"",javassistClassName);
    }
    return standardService.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  return null;
}","@Override public byte[] modify(ClassLoader classLoader,String javassistClassName,ProtectionDomain protectedDomain,byte[] classFileBuffer){
  logger.info(""String_Node_Str"",javassistClassName);
  try {
    InstrumentClass standardService=byteCodeInstrumentor.getClass(javassistClassName);
    LifeCycleEventListener lifeCycleEventListener=new LifeCycleEventListener(agent);
    Interceptor standardServiceStartInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,""String_Node_Str"",new Object[]{lifeCycleEventListener},new Class[]{LifeCycleEventListener.class});
    Interceptor standardServiceStopInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,""String_Node_Str"",new Object[]{lifeCycleEventListener},new Class[]{LifeCycleEventListener.class});
    boolean isHooked=false;
    if (standardService.hasDeclaredMethod(""String_Node_Str"",null) && standardService.hasDeclaredMethod(""String_Node_Str"",null)) {
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStartInterceptor);
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStopInterceptor);
      isHooked=true;
    }
 else     if (standardService.hasDeclaredMethod(""String_Node_Str"",null) && standardService.hasDeclaredMethod(""String_Node_Str"",null)) {
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStartInterceptor);
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStopInterceptor);
      isHooked=true;
    }
    if (isHooked) {
      logger.info(""String_Node_Str"",javassistClassName);
    }
 else {
      logger.warn(""String_Node_Str"",javassistClassName);
    }
    return standardService.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  return null;
}"
53954,"@Override public byte[] modify(ClassLoader classLoader,String javassistClassName,ProtectionDomain protectedDomain,byte[] classFileBuffer){
  logger.info(""String_Node_Str"",javassistClassName);
  try {
    InstrumentClass webappLoader=byteCodeInstrumentor.getClass(javassistClassName);
    Interceptor webappLoaderStartInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,""String_Node_Str"",null,null);
    boolean isHooked=false;
    if (isHooked=webappLoader.hasDeclaredMethod(""String_Node_Str"",null)) {
      webappLoader.addInterceptor(""String_Node_Str"",null,webappLoaderStartInterceptor);
    }
 else     if (isHooked=webappLoader.hasDeclaredMethod(""String_Node_Str"",null)) {
      webappLoader.addInterceptor(""String_Node_Str"",null,webappLoaderStartInterceptor);
    }
    if (isHooked) {
      logger.info(""String_Node_Str"",javassistClassName);
    }
 else {
      logger.warn(""String_Node_Str"",javassistClassName);
    }
    return webappLoader.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  return null;
}","@Override public byte[] modify(ClassLoader classLoader,String javassistClassName,ProtectionDomain protectedDomain,byte[] classFileBuffer){
  logger.info(""String_Node_Str"",javassistClassName);
  try {
    InstrumentClass webappLoader=byteCodeInstrumentor.getClass(javassistClassName);
    Interceptor webappLoaderStartInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,""String_Node_Str"",null,null);
    boolean isHooked=false;
    if (webappLoader.hasDeclaredMethod(""String_Node_Str"",null)) {
      webappLoader.addInterceptor(""String_Node_Str"",null,webappLoaderStartInterceptor);
      isHooked=true;
    }
 else     if (webappLoader.hasDeclaredMethod(""String_Node_Str"",null)) {
      webappLoader.addInterceptor(""String_Node_Str"",null,webappLoaderStartInterceptor);
      isHooked=true;
    }
    if (isHooked) {
      logger.info(""String_Node_Str"",javassistClassName);
    }
 else {
      logger.warn(""String_Node_Str"",javassistClassName);
    }
    return webappLoader.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  return null;
}"
53955,"public void stressTest() throws InterruptedException {
  AtomicInteger requestCount=new AtomicInteger();
  AtomicInteger successCount=new AtomicInteger();
  ResponseServerMessageListener serverListener=new ResponseServerMessageListener(requestCount,successCount);
  PinpointSocketFactory socketFactory=createPinpointSocketFactory();
  PinpointSocket socket=createPinpointSocket(HOST,PORT,socketFactory);
  TcpDataSender sender=new TcpDataSender(socket);
  HeartBitChecker checker=new HeartBitChecker(sender,1000L,getAgentInfo());
  long strarTime=System.currentTimeMillis();
  try {
    checker.start();
    Random random=new Random(System.currentTimeMillis());
    while (System.currentTimeMillis() < strarTime + STRESS_TEST_TIME) {
      createAndDeleteServer(serverListener,Math.abs(random.nextInt(RANDOM_MAX_TIME)));
      Thread.sleep(Math.abs(random.nextInt(1000)));
    }
  }
  finally {
    if (checker != null) {
      checker.stop();
    }
    if (socket != null) {
      socket.close();
    }
    if (socketFactory != null) {
      socketFactory.release();
    }
  }
}","public void stressTest() throws InterruptedException {
  AtomicInteger requestCount=new AtomicInteger();
  AtomicInteger successCount=new AtomicInteger();
  ResponseServerMessageListener serverListener=new ResponseServerMessageListener(requestCount,successCount);
  PinpointSocketFactory socketFactory=createPinpointSocketFactory();
  PinpointSocket socket=createPinpointSocket(HOST,PORT,socketFactory);
  TcpDataSender sender=new TcpDataSender(socket);
  HeartBeatChecker checker=new HeartBeatChecker(sender,1000L,getAgentInfo());
  long strarTime=System.currentTimeMillis();
  try {
    checker.start();
    Random random=new Random(System.currentTimeMillis());
    while (System.currentTimeMillis() < strarTime + STRESS_TEST_TIME) {
      createAndDeleteServer(serverListener,Math.abs(random.nextInt(RANDOM_MAX_TIME)));
      Thread.sleep(Math.abs(random.nextInt(1000)));
    }
  }
  finally {
    if (checker != null) {
      checker.stop();
    }
    if (socket != null) {
      socket.close();
    }
    if (socketFactory != null) {
      socketFactory.release();
    }
  }
}"
53956,"private void closeAll(PinpointServerSocket server,HeartBitChecker checker){
  if (server != null) {
    server.close();
  }
  if (checker != null) {
    checker.stop();
  }
}","private void closeAll(PinpointServerSocket server,HeartBeatChecker checker){
  if (server != null) {
    server.close();
  }
  if (checker != null) {
    checker.stop();
  }
}"
53957,"@Test public void loadBalancedUrlModify() throws Exception {
  Connection connection=connectDB(db.getProperty(""String_Node_Str""));
  logger.info(""String_Node_Str"",connection.getClass().getName());
  logger.info(""String_Node_Str"",connection.getClass().getClassLoader());
  InvocationHandler invocationHandler=Proxy.getInvocationHandler(connection);
  Class<? extends InvocationHandler> aClass=invocationHandler.getClass();
  Field current=aClass.getDeclaredField(""String_Node_Str"");
  current.setAccessible(true);
  Object internalConnection=current.get(invocationHandler);
  DatabaseInfo url=((DatabaseInfoTraceValue)internalConnection).__getTraceDatabaseInfo();
  Assert.assertNotNull(url);
  statement(connection);
  preparedStatement(connection);
  preparedStatement2(connection);
  preparedStatement3(connection);
  preparedStatement4(connection);
  preparedStatement5(connection);
  preparedStatement6(connection);
  preparedStatement7(connection);
  preparedStatement8(connection);
  connection.close();
  DatabaseInfo clearUrl=((DatabaseInfoTraceValue)internalConnection).__getTraceDatabaseInfo();
  Assert.assertNull(clearUrl);
}","@Ignore @Test public void loadBalancedUrlModify() throws Exception {
  Connection connection=connectDB(db.getProperty(""String_Node_Str""));
  logger.info(""String_Node_Str"",connection.getClass().getName());
  logger.info(""String_Node_Str"",connection.getClass().getClassLoader());
  InvocationHandler invocationHandler=Proxy.getInvocationHandler(connection);
  Class<? extends InvocationHandler> aClass=invocationHandler.getClass();
  Field current=aClass.getDeclaredField(""String_Node_Str"");
  current.setAccessible(true);
  Object internalConnection=current.get(invocationHandler);
  DatabaseInfo url=((DatabaseInfoTraceValue)internalConnection).__getTraceDatabaseInfo();
  Assert.assertNotNull(url);
  statement(connection);
  preparedStatement(connection);
  preparedStatement2(connection);
  preparedStatement3(connection);
  preparedStatement4(connection);
  preparedStatement5(connection);
  preparedStatement6(connection);
  preparedStatement7(connection);
  preparedStatement8(connection);
  connection.close();
  DatabaseInfo clearUrl=((DatabaseInfoTraceValue)internalConnection).__getTraceDatabaseInfo();
  Assert.assertNull(clearUrl);
}"
53958,"@Override public void start(){
synchronized (this) {
    if (this.agentStatus == AgentStatus.INITIALIZING) {
      changeStatus(AgentStatus.RUNNING);
    }
 else {
      logger.warn(""String_Node_Str"");
      return;
    }
  }
  logger.info(""String_Node_Str"",ProductInfo.CAMEL_NAME);
  ServerMetaData serverMetaData=this.traceContext.getServerMetaDataHolder().getServerMetaData();
  logger.debug(serverMetaData.toString());
  this.heartBitChecker.start();
  this.agentStatMonitor.start();
}","@Override public void start(){
synchronized (this) {
    if (this.agentStatus == AgentStatus.INITIALIZING) {
      changeStatus(AgentStatus.RUNNING);
    }
 else {
      logger.warn(""String_Node_Str"");
      return;
    }
  }
  logger.info(""String_Node_Str"",ProductInfo.CAMEL_NAME);
  ServerMetaData serverMetaData=this.traceContext.getServerMetaDataHolder().getServerMetaData();
  logger.debug(serverMetaData.toString());
  this.heartBeatChecker.start();
  this.agentStatMonitor.start();
}"
53959,"@Override public void stop(){
synchronized (this) {
    if (this.agentStatus == AgentStatus.RUNNING) {
      changeStatus(AgentStatus.STOPPED);
    }
 else {
      logger.warn(""String_Node_Str"",this.agentStatus);
      return;
    }
  }
  logger.info(""String_Node_Str"",ProductInfo.CAMEL_NAME);
  this.heartBitChecker.stop();
  tAgentInfo.setEndStatus(0);
  tAgentInfo.setEndTimestamp(System.currentTimeMillis());
  this.tcpDataSender.send(tAgentInfo);
  this.agentStatMonitor.stop();
  this.spanDataSender.stop();
  this.statDataSender.stop();
  this.tcpDataSender.stop();
  if (this.socket != null) {
    this.socket.close();
  }
  if (this.factory != null) {
    this.factory.release();
  }
}","@Override public void stop(){
synchronized (this) {
    if (this.agentStatus == AgentStatus.RUNNING) {
      changeStatus(AgentStatus.STOPPED);
    }
 else {
      logger.warn(""String_Node_Str"",this.agentStatus);
      return;
    }
  }
  logger.info(""String_Node_Str"",ProductInfo.CAMEL_NAME);
  this.heartBeatChecker.stop();
  tAgentInfo.setEndStatus(0);
  tAgentInfo.setEndTimestamp(System.currentTimeMillis());
  this.tcpDataSender.send(tAgentInfo);
  this.agentStatMonitor.stop();
  this.spanDataSender.stop();
  this.statDataSender.stop();
  this.tcpDataSender.stop();
  if (this.socket != null) {
    this.socket.close();
  }
  if (this.factory != null) {
    this.factory.release();
  }
}"
53960,"public DefaultAgent(String agentArgs,Instrumentation instrumentation,ProfilerConfig profilerConfig){
  if (instrumentation == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (profilerConfig == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.binder=new Slf4jLoggerBinder();
  bindPLoggerFactory(this.binder);
  dumpSystemProperties();
  dumpConfig(profilerConfig);
  changeStatus(AgentStatus.INITIALIZING);
  this.profilerConfig=profilerConfig;
  this.serverInfo=new ServerInfo();
  final ApplicationServerTypeResolver typeResolver=new ApplicationServerTypeResolver(profilerConfig.getApplicationServerType());
  if (!typeResolver.resolve()) {
    throw new PinpointException(""String_Node_Str"");
  }
  this.byteCodeInstrumentor=new JavaAssistByteCodeInstrumentor(typeResolver.getServerLibPath(),this);
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"",this.getClass().getClassLoader());
  }
  this.classFileTransformer=new ClassFileTransformerDispatcher(this,byteCodeInstrumentor);
  instrumentation.addTransformer(this.classFileTransformer);
  final AgentInformationFactory agentInformationFactory=new AgentInformationFactory();
  this.agentInformation=agentInformationFactory.createAgentInformation(typeResolver.getServerType());
  logger.info(""String_Node_Str"",agentInformation);
  this.tAgentInfo=createTAgentInfo();
  this.factory=createPinpointSocketFactory();
  this.socket=createPinpointSocket(this.profilerConfig.getCollectorServerIp(),this.profilerConfig.getCollectorTcpServerPort(),factory,this.profilerConfig.isTcpDataSenderCommandAcceptEnable());
  this.tcpDataSender=createTcpDataSender(socket);
  this.spanDataSender=createUdpDataSender(this.profilerConfig.getCollectorUdpSpanServerPort(),""String_Node_Str"",this.profilerConfig.getSpanDataSenderWriteQueueSize(),this.profilerConfig.getSpanDataSenderSocketTimeout(),this.profilerConfig.getSpanDataSenderSocketSendBufferSize());
  this.statDataSender=createUdpDataSender(this.profilerConfig.getCollectorUdpServerPort(),""String_Node_Str"",this.profilerConfig.getStatDataSenderWriteQueueSize(),this.profilerConfig.getStatDataSenderSocketTimeout(),this.profilerConfig.getStatDataSenderSocketSendBufferSize());
  this.traceContext=createTraceContext(agentInformation.getServerType());
  this.heartBitChecker=new HeartBitChecker(tcpDataSender,profilerConfig.getHeartbeatInterval(),tAgentInfo);
  this.agentStatMonitor=new AgentStatMonitor(this.statDataSender,this.agentInformation.getAgentId(),this.agentInformation.getStartTime());
  preLoadClass();
  if (typeResolver.isManuallyStartupRequired()) {
    start();
  }
}","public DefaultAgent(String agentArgs,Instrumentation instrumentation,ProfilerConfig profilerConfig){
  if (instrumentation == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (profilerConfig == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.binder=new Slf4jLoggerBinder();
  bindPLoggerFactory(this.binder);
  dumpSystemProperties();
  dumpConfig(profilerConfig);
  changeStatus(AgentStatus.INITIALIZING);
  this.profilerConfig=profilerConfig;
  this.serverInfo=new ServerInfo();
  final ApplicationServerTypeResolver typeResolver=new ApplicationServerTypeResolver(profilerConfig.getApplicationServerType());
  if (!typeResolver.resolve()) {
    throw new PinpointException(""String_Node_Str"");
  }
  this.byteCodeInstrumentor=new JavaAssistByteCodeInstrumentor(typeResolver.getServerLibPath(),this);
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"",this.getClass().getClassLoader());
  }
  this.classFileTransformer=new ClassFileTransformerDispatcher(this,byteCodeInstrumentor);
  instrumentation.addTransformer(this.classFileTransformer);
  final AgentInformationFactory agentInformationFactory=new AgentInformationFactory();
  this.agentInformation=agentInformationFactory.createAgentInformation(typeResolver.getServerType());
  logger.info(""String_Node_Str"",agentInformation);
  this.tAgentInfo=createTAgentInfo();
  this.factory=createPinpointSocketFactory();
  this.socket=createPinpointSocket(this.profilerConfig.getCollectorServerIp(),this.profilerConfig.getCollectorTcpServerPort(),factory,this.profilerConfig.isTcpDataSenderCommandAcceptEnable());
  this.tcpDataSender=createTcpDataSender(socket);
  this.spanDataSender=createUdpDataSender(this.profilerConfig.getCollectorUdpSpanServerPort(),""String_Node_Str"",this.profilerConfig.getSpanDataSenderWriteQueueSize(),this.profilerConfig.getSpanDataSenderSocketTimeout(),this.profilerConfig.getSpanDataSenderSocketSendBufferSize());
  this.statDataSender=createUdpDataSender(this.profilerConfig.getCollectorUdpServerPort(),""String_Node_Str"",this.profilerConfig.getStatDataSenderWriteQueueSize(),this.profilerConfig.getStatDataSenderSocketTimeout(),this.profilerConfig.getStatDataSenderSocketSendBufferSize());
  this.traceContext=createTraceContext(agentInformation.getServerType());
  this.heartBeatChecker=new HeartBeatChecker(tcpDataSender,profilerConfig.getHeartbeatInterval(),tAgentInfo);
  this.agentStatMonitor=new AgentStatMonitor(this.statDataSender,this.agentInformation.getAgentId(),this.agentInformation.getStartTime());
  preLoadClass();
  if (typeResolver.isManuallyStartupRequired()) {
    start();
  }
}"
53961,"@Override public byte[] modify(ClassLoader classLoader,String javassistClassName,ProtectionDomain protectedDomain,byte[] classFileBuffer){
  logger.info(""String_Node_Str"",javassistClassName);
  try {
    InstrumentClass standardService=byteCodeInstrumentor.getClass(javassistClassName);
    LifeCycleEventListener lifeCycleEventListener=new LifeCycleEventListener(agent);
    Interceptor standardServiceStartInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,""String_Node_Str"",new Object[]{lifeCycleEventListener},new Class[]{LifeCycleEventListener.class});
    Interceptor standardServiceStopInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,""String_Node_Str"",new Object[]{lifeCycleEventListener},new Class[]{LifeCycleEventListener.class});
    boolean isHooked=false;
    if (isHooked=(standardService.hasDeclaredMethod(""String_Node_Str"",null) && standardService.hasDeclaredMethod(""String_Node_Str"",null))) {
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStartInterceptor);
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStopInterceptor);
    }
 else     if (isHooked=(standardService.hasDeclaredMethod(""String_Node_Str"",null) && standardService.hasDeclaredMethod(""String_Node_Str"",null))) {
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStartInterceptor);
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStopInterceptor);
    }
    if (isHooked) {
      logger.info(""String_Node_Str"",javassistClassName);
    }
 else {
      logger.warn(""String_Node_Str"",javassistClassName);
    }
    return standardService.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  return null;
}","@Override public byte[] modify(ClassLoader classLoader,String javassistClassName,ProtectionDomain protectedDomain,byte[] classFileBuffer){
  logger.info(""String_Node_Str"",javassistClassName);
  try {
    InstrumentClass standardService=byteCodeInstrumentor.getClass(javassistClassName);
    LifeCycleEventListener lifeCycleEventListener=new LifeCycleEventListener(agent);
    Interceptor standardServiceStartInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,""String_Node_Str"",new Object[]{lifeCycleEventListener},new Class[]{LifeCycleEventListener.class});
    Interceptor standardServiceStopInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,""String_Node_Str"",new Object[]{lifeCycleEventListener},new Class[]{LifeCycleEventListener.class});
    boolean isHooked=false;
    if (standardService.hasDeclaredMethod(""String_Node_Str"",null) && standardService.hasDeclaredMethod(""String_Node_Str"",null)) {
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStartInterceptor);
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStopInterceptor);
      isHooked=true;
    }
 else     if (standardService.hasDeclaredMethod(""String_Node_Str"",null) && standardService.hasDeclaredMethod(""String_Node_Str"",null)) {
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStartInterceptor);
      standardService.addInterceptor(""String_Node_Str"",null,standardServiceStopInterceptor);
      isHooked=true;
    }
    if (isHooked) {
      logger.info(""String_Node_Str"",javassistClassName);
    }
 else {
      logger.warn(""String_Node_Str"",javassistClassName);
    }
    return standardService.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  return null;
}"
53962,"@Override public byte[] modify(ClassLoader classLoader,String javassistClassName,ProtectionDomain protectedDomain,byte[] classFileBuffer){
  logger.info(""String_Node_Str"",javassistClassName);
  try {
    InstrumentClass webappLoader=byteCodeInstrumentor.getClass(javassistClassName);
    Interceptor webappLoaderStartInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,""String_Node_Str"",null,null);
    boolean isHooked=false;
    if (isHooked=webappLoader.hasDeclaredMethod(""String_Node_Str"",null)) {
      webappLoader.addInterceptor(""String_Node_Str"",null,webappLoaderStartInterceptor);
    }
 else     if (isHooked=webappLoader.hasDeclaredMethod(""String_Node_Str"",null)) {
      webappLoader.addInterceptor(""String_Node_Str"",null,webappLoaderStartInterceptor);
    }
    if (isHooked) {
      logger.info(""String_Node_Str"",javassistClassName);
    }
 else {
      logger.warn(""String_Node_Str"",javassistClassName);
    }
    return webappLoader.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  return null;
}","@Override public byte[] modify(ClassLoader classLoader,String javassistClassName,ProtectionDomain protectedDomain,byte[] classFileBuffer){
  logger.info(""String_Node_Str"",javassistClassName);
  try {
    InstrumentClass webappLoader=byteCodeInstrumentor.getClass(javassistClassName);
    Interceptor webappLoaderStartInterceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,""String_Node_Str"",null,null);
    boolean isHooked=false;
    if (webappLoader.hasDeclaredMethod(""String_Node_Str"",null)) {
      webappLoader.addInterceptor(""String_Node_Str"",null,webappLoaderStartInterceptor);
      isHooked=true;
    }
 else     if (webappLoader.hasDeclaredMethod(""String_Node_Str"",null)) {
      webappLoader.addInterceptor(""String_Node_Str"",null,webappLoaderStartInterceptor);
      isHooked=true;
    }
    if (isHooked) {
      logger.info(""String_Node_Str"",javassistClassName);
    }
 else {
      logger.warn(""String_Node_Str"",javassistClassName);
    }
    return webappLoader.toBytecode();
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  return null;
}"
53963,"public void stressTest() throws InterruptedException {
  AtomicInteger requestCount=new AtomicInteger();
  AtomicInteger successCount=new AtomicInteger();
  ResponseServerMessageListener serverListener=new ResponseServerMessageListener(requestCount,successCount);
  PinpointSocketFactory socketFactory=createPinpointSocketFactory();
  PinpointSocket socket=createPinpointSocket(HOST,PORT,socketFactory);
  TcpDataSender sender=new TcpDataSender(socket);
  HeartBitChecker checker=new HeartBitChecker(sender,1000L,getAgentInfo());
  long strarTime=System.currentTimeMillis();
  try {
    checker.start();
    Random random=new Random(System.currentTimeMillis());
    while (System.currentTimeMillis() < strarTime + STRESS_TEST_TIME) {
      createAndDeleteServer(serverListener,Math.abs(random.nextInt(RANDOM_MAX_TIME)));
      Thread.sleep(Math.abs(random.nextInt(1000)));
    }
  }
  finally {
    if (checker != null) {
      checker.stop();
    }
    if (socket != null) {
      socket.close();
    }
    if (socketFactory != null) {
      socketFactory.release();
    }
  }
}","public void stressTest() throws InterruptedException {
  AtomicInteger requestCount=new AtomicInteger();
  AtomicInteger successCount=new AtomicInteger();
  ResponseServerMessageListener serverListener=new ResponseServerMessageListener(requestCount,successCount);
  PinpointSocketFactory socketFactory=createPinpointSocketFactory();
  PinpointSocket socket=createPinpointSocket(HOST,PORT,socketFactory);
  TcpDataSender sender=new TcpDataSender(socket);
  HeartBeatChecker checker=new HeartBeatChecker(sender,1000L,getAgentInfo());
  long strarTime=System.currentTimeMillis();
  try {
    checker.start();
    Random random=new Random(System.currentTimeMillis());
    while (System.currentTimeMillis() < strarTime + STRESS_TEST_TIME) {
      createAndDeleteServer(serverListener,Math.abs(random.nextInt(RANDOM_MAX_TIME)));
      Thread.sleep(Math.abs(random.nextInt(1000)));
    }
  }
  finally {
    if (checker != null) {
      checker.stop();
    }
    if (socket != null) {
      socket.close();
    }
    if (socketFactory != null) {
      socketFactory.release();
    }
  }
}"
53964,"private void closeAll(PinpointServerSocket server,HeartBitChecker checker){
  if (server != null) {
    server.close();
  }
  if (checker != null) {
    checker.stop();
  }
}","private void closeAll(PinpointServerSocket server,HeartBeatChecker checker){
  if (server != null) {
    server.close();
  }
  if (checker != null) {
    checker.stop();
  }
}"
53965,"@Test public void loadBalancedUrlModify() throws Exception {
  Connection connection=connectDB(db.getProperty(""String_Node_Str""));
  logger.info(""String_Node_Str"",connection.getClass().getName());
  logger.info(""String_Node_Str"",connection.getClass().getClassLoader());
  InvocationHandler invocationHandler=Proxy.getInvocationHandler(connection);
  Class<? extends InvocationHandler> aClass=invocationHandler.getClass();
  Field current=aClass.getDeclaredField(""String_Node_Str"");
  current.setAccessible(true);
  Object internalConnection=current.get(invocationHandler);
  DatabaseInfo url=((DatabaseInfoTraceValue)internalConnection).__getTraceDatabaseInfo();
  Assert.assertNotNull(url);
  statement(connection);
  preparedStatement(connection);
  preparedStatement2(connection);
  preparedStatement3(connection);
  preparedStatement4(connection);
  preparedStatement5(connection);
  preparedStatement6(connection);
  preparedStatement7(connection);
  preparedStatement8(connection);
  connection.close();
  DatabaseInfo clearUrl=((DatabaseInfoTraceValue)internalConnection).__getTraceDatabaseInfo();
  Assert.assertNull(clearUrl);
}","@Ignore @Test public void loadBalancedUrlModify() throws Exception {
  Connection connection=connectDB(db.getProperty(""String_Node_Str""));
  logger.info(""String_Node_Str"",connection.getClass().getName());
  logger.info(""String_Node_Str"",connection.getClass().getClassLoader());
  InvocationHandler invocationHandler=Proxy.getInvocationHandler(connection);
  Class<? extends InvocationHandler> aClass=invocationHandler.getClass();
  Field current=aClass.getDeclaredField(""String_Node_Str"");
  current.setAccessible(true);
  Object internalConnection=current.get(invocationHandler);
  DatabaseInfo url=((DatabaseInfoTraceValue)internalConnection).__getTraceDatabaseInfo();
  Assert.assertNotNull(url);
  statement(connection);
  preparedStatement(connection);
  preparedStatement2(connection);
  preparedStatement3(connection);
  preparedStatement4(connection);
  preparedStatement5(connection);
  preparedStatement6(connection);
  preparedStatement7(connection);
  preparedStatement8(connection);
  connection.close();
  DatabaseInfo clearUrl=((DatabaseInfoTraceValue)internalConnection).__getTraceDatabaseInfo();
  Assert.assertNull(clearUrl);
}"
53966,"@Test public void afterCatch() throws NotFoundException, CannotCompileException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException {
  ClassPool pool=ClassPool.getDefault();
  CtClass ctClass=pool.get(""String_Node_Str"");
  CtClass object=pool.get(""String_Node_Str"");
  System.out.println(ctClass);
  CtMethod callA=ctClass.getDeclaredMethod(""String_Node_Str"",null);
  System.out.println(callA);
  final String before=""String_Node_Str"";
  final String after=""String_Node_Str"";
  callA.instrument(new ExprEditor(){
    @Override public void edit(    MethodCall m) throws CannotCompileException {
      System.out.println(m.getClassName());
      try {
        System.out.println(m.getMethod().toString());
      }
 catch (      NotFoundException e) {
        e.printStackTrace();
      }
      System.out.println(m.getMethodName());
      m.replace(before + ""String_Node_Str"" + after);
    }
  }
);
  Class aClass=ctClass.toClass();
  java.lang.reflect.Method callA1=aClass.getMethod(""String_Node_Str"");
  Object target=aClass.newInstance();
  Object result=callA1.invoke(target);
  System.out.println(result);
}","@Test public void afterCatch() throws NotFoundException, CannotCompileException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException, ClassNotFoundException {
  ClassPool pool=new ClassPool(true);
  Loader loader=getLoader(pool);
  CtClass ctClass=pool.get(""String_Node_Str"");
  CtClass object=pool.get(""String_Node_Str"");
  logger.debug(""String_Node_Str"",ctClass);
  CtMethod callA=ctClass.getDeclaredMethod(""String_Node_Str"",null);
  logger.debug(""String_Node_Str"",callA);
  final String before=""String_Node_Str"";
  final String after=""String_Node_Str"";
  callA.instrument(new ExprEditor(){
    @Override public void edit(    MethodCall m) throws CannotCompileException {
      System.out.println(m.getClassName());
      try {
        System.out.println(m.getMethod().toString());
      }
 catch (      NotFoundException e) {
        e.printStackTrace();
      }
      System.out.println(m.getMethodName());
      m.replace(before + ""String_Node_Str"" + after);
    }
  }
);
  Class aClass=loader.loadClass(ctClass.getName());
  java.lang.reflect.Method callA1=aClass.getMethod(""String_Node_Str"");
  Object target=aClass.newInstance();
  Object result=callA1.invoke(target);
  logger.debug(""String_Node_Str"",result);
}"
53967,"@Test public void around() throws NotFoundException, CannotCompileException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException {
  ClassPool pool=ClassPool.getDefault();
  CtClass ctClass=pool.get(""String_Node_Str"");
  CtClass object=pool.get(""String_Node_Str"");
  System.out.println(ctClass);
  CtMethod callA=ctClass.getDeclaredMethod(""String_Node_Str"",null);
  System.out.println(callA);
  callA.addLocalVariable(""String_Node_Str"",object);
  String inti=""String_Node_Str"";
  callA.insertBefore(""String_Node_Str"");
  callA.insertAfter(""String_Node_Str"");
  callA.addCatch(""String_Node_Str"",pool.get(""String_Node_Str""));
  Class aClass=ctClass.toClass();
  java.lang.reflect.Method callA1=aClass.getMethod(""String_Node_Str"");
  Object target=aClass.newInstance();
  try {
    Object result=callA1.invoke(target);
    System.out.println(result);
  }
 catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
  ctClass.debugWriteFile(""String_Node_Str"");
}","@Test public void around() throws NotFoundException, CannotCompileException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException, ClassNotFoundException {
  ClassPool pool=new ClassPool(true);
  Loader loader=getLoader(pool);
  CtClass ctClass=pool.get(""String_Node_Str"");
  CtClass object=pool.get(""String_Node_Str"");
  logger.debug(""String_Node_Str"",ctClass);
  CtMethod callA=ctClass.getDeclaredMethod(""String_Node_Str"",null);
  logger.debug(""String_Node_Str"",callA);
  callA.addLocalVariable(""String_Node_Str"",object);
  String inti=""String_Node_Str"";
  callA.insertBefore(""String_Node_Str"");
  callA.insertAfter(""String_Node_Str"");
  callA.addCatch(""String_Node_Str"",pool.get(""String_Node_Str""));
  Class aClass=loader.loadClass(ctClass.getName());
  java.lang.reflect.Method callA1=aClass.getMethod(""String_Node_Str"");
  Object target=aClass.newInstance();
  try {
    Object result=callA1.invoke(target);
    logger.debug(""String_Node_Str"",result);
  }
 catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
}"
53968,"@Test public void afterCatch2() throws NotFoundException, CannotCompileException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException {
  ClassPool pool=ClassPool.getDefault();
  CtClass ctClass=pool.get(""String_Node_Str"");
  CtClass object=pool.get(""String_Node_Str"");
  System.out.println(ctClass);
  CtMethod callA=ctClass.getDeclaredMethod(""String_Node_Str"",null);
  System.out.println(callA);
  callA.insertBefore(""String_Node_Str"");
  callA.insertAfter(""String_Node_Str"");
  callA.addCatch(""String_Node_Str"",pool.get(""String_Node_Str""));
  Class aClass=ctClass.toClass();
  java.lang.reflect.Method callA1=aClass.getMethod(""String_Node_Str"");
  Object target=aClass.newInstance();
  Object result=callA1.invoke(target);
  System.out.println(result);
}","@Test public void afterCatch2() throws NotFoundException, CannotCompileException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException, ClassNotFoundException {
  ClassPool pool=new ClassPool(true);
  Loader loader=getLoader(pool);
  CtClass ctClass=pool.get(""String_Node_Str"");
  CtClass object=pool.get(""String_Node_Str"");
  logger.debug(""String_Node_Str"",ctClass);
  CtMethod callA=ctClass.getDeclaredMethod(""String_Node_Str"",null);
  logger.debug(""String_Node_Str"",callA);
  callA.addLocalVariable(""String_Node_Str"",object);
  callA.insertBefore(""String_Node_Str"");
  callA.insertAfter(""String_Node_Str"");
  callA.addCatch(""String_Node_Str"",pool.get(""String_Node_Str""));
  Class aClass=loader.loadClass(ctClass.getName());
  java.lang.reflect.Method callA1=aClass.getMethod(""String_Node_Str"");
  Object target=aClass.newInstance();
  Object result=callA1.invoke(target);
  logger.debug(""String_Node_Str"",result);
}"
53969,"public void addArcusModifier(){
  final boolean arcus=profilerConfig.isArucs();
  boolean memcached;
  if (arcus) {
    memcached=true;
  }
 else {
    memcached=profilerConfig.isMemcached();
  }
  if (memcached) {
    BaseOperationModifier baseOperationModifier=new BaseOperationModifier(byteCodeInstrumentor,agent);
    addModifier(baseOperationModifier);
    MemcachedClientModifier memcachedClientModifier=new MemcachedClientModifier(byteCodeInstrumentor,agent);
    addModifier(memcachedClientModifier);
    FrontCacheMemcachedClientModifier frontCacheMemcachedClientModifier=new FrontCacheMemcachedClientModifier(byteCodeInstrumentor,agent);
    if (arcus) {
      ArcusClientModifier arcusClientModifier=new ArcusClientModifier(byteCodeInstrumentor,agent);
      addModifier(arcusClientModifier);
      CollectionFutureModifier collectionFutureModifier=new CollectionFutureModifier(byteCodeInstrumentor,agent);
      addModifier(collectionFutureModifier);
    }
    GetFutureModifier getFutureModifier=new GetFutureModifier(byteCodeInstrumentor,agent);
    addModifier(getFutureModifier);
    ImmediateFutureModifier immediateFutureModifier=new ImmediateFutureModifier(byteCodeInstrumentor,agent);
    addModifier(immediateFutureModifier);
    OperationFutureModifier operationFutureModifier=new OperationFutureModifier(byteCodeInstrumentor,agent);
    addModifier(operationFutureModifier);
    FrontCacheGetFutureModifier frontCacheGetFutureModifier=new FrontCacheGetFutureModifier(byteCodeInstrumentor,agent);
    CacheManagerModifier cacheManagerModifier=new CacheManagerModifier(byteCodeInstrumentor,agent);
    addModifier(cacheManagerModifier);
  }
}","public void addArcusModifier(){
  final boolean arcus=profilerConfig.isArucs();
  boolean memcached;
  if (arcus) {
    memcached=true;
  }
 else {
    memcached=profilerConfig.isMemcached();
  }
  if (memcached) {
    BaseOperationModifier baseOperationModifier=new BaseOperationModifier(byteCodeInstrumentor,agent);
    addModifier(baseOperationModifier);
    MemcachedClientModifier memcachedClientModifier=new MemcachedClientModifier(byteCodeInstrumentor,agent);
    addModifier(memcachedClientModifier);
    if (arcus) {
      ArcusClientModifier arcusClientModifier=new ArcusClientModifier(byteCodeInstrumentor,agent);
      addModifier(arcusClientModifier);
      CollectionFutureModifier collectionFutureModifier=new CollectionFutureModifier(byteCodeInstrumentor,agent);
      addModifier(collectionFutureModifier);
    }
    GetFutureModifier getFutureModifier=new GetFutureModifier(byteCodeInstrumentor,agent);
    addModifier(getFutureModifier);
    ImmediateFutureModifier immediateFutureModifier=new ImmediateFutureModifier(byteCodeInstrumentor,agent);
    addModifier(immediateFutureModifier);
    OperationFutureModifier operationFutureModifier=new OperationFutureModifier(byteCodeInstrumentor,agent);
    addModifier(operationFutureModifier);
    CacheManagerModifier cacheManagerModifier=new CacheManagerModifier(byteCodeInstrumentor,agent);
    addModifier(cacheManagerModifier);
  }
}"
53970,"public void addArcusModifier(){
  final boolean arcus=profilerConfig.isArucs();
  boolean memcached;
  if (arcus) {
    memcached=true;
  }
 else {
    memcached=profilerConfig.isMemcached();
  }
  if (memcached) {
    BaseOperationModifier baseOperationModifier=new BaseOperationModifier(byteCodeInstrumentor,agent);
    addModifier(baseOperationModifier);
    MemcachedClientModifier memcachedClientModifier=new MemcachedClientModifier(byteCodeInstrumentor,agent);
    addModifier(memcachedClientModifier);
    FrontCacheMemcachedClientModifier frontCacheMemcachedClientModifier=new FrontCacheMemcachedClientModifier(byteCodeInstrumentor,agent);
    if (arcus) {
      ArcusClientModifier arcusClientModifier=new ArcusClientModifier(byteCodeInstrumentor,agent);
      addModifier(arcusClientModifier);
      CollectionFutureModifier collectionFutureModifier=new CollectionFutureModifier(byteCodeInstrumentor,agent);
      addModifier(collectionFutureModifier);
    }
    GetFutureModifier getFutureModifier=new GetFutureModifier(byteCodeInstrumentor,agent);
    addModifier(getFutureModifier);
    ImmediateFutureModifier immediateFutureModifier=new ImmediateFutureModifier(byteCodeInstrumentor,agent);
    addModifier(immediateFutureModifier);
    OperationFutureModifier operationFutureModifier=new OperationFutureModifier(byteCodeInstrumentor,agent);
    addModifier(operationFutureModifier);
    FrontCacheGetFutureModifier frontCacheGetFutureModifier=new FrontCacheGetFutureModifier(byteCodeInstrumentor,agent);
    CacheManagerModifier cacheManagerModifier=new CacheManagerModifier(byteCodeInstrumentor,agent);
    addModifier(cacheManagerModifier);
  }
}","public void addArcusModifier(){
  final boolean arcus=profilerConfig.isArucs();
  boolean memcached;
  if (arcus) {
    memcached=true;
  }
 else {
    memcached=profilerConfig.isMemcached();
  }
  if (memcached) {
    BaseOperationModifier baseOperationModifier=new BaseOperationModifier(byteCodeInstrumentor,agent);
    addModifier(baseOperationModifier);
    MemcachedClientModifier memcachedClientModifier=new MemcachedClientModifier(byteCodeInstrumentor,agent);
    addModifier(memcachedClientModifier);
    if (arcus) {
      ArcusClientModifier arcusClientModifier=new ArcusClientModifier(byteCodeInstrumentor,agent);
      addModifier(arcusClientModifier);
      CollectionFutureModifier collectionFutureModifier=new CollectionFutureModifier(byteCodeInstrumentor,agent);
      addModifier(collectionFutureModifier);
    }
    GetFutureModifier getFutureModifier=new GetFutureModifier(byteCodeInstrumentor,agent);
    addModifier(getFutureModifier);
    ImmediateFutureModifier immediateFutureModifier=new ImmediateFutureModifier(byteCodeInstrumentor,agent);
    addModifier(immediateFutureModifier);
    OperationFutureModifier operationFutureModifier=new OperationFutureModifier(byteCodeInstrumentor,agent);
    addModifier(operationFutureModifier);
    CacheManagerModifier cacheManagerModifier=new CacheManagerModifier(byteCodeInstrumentor,agent);
    addModifier(cacheManagerModifier);
  }
}"
53971,"public AgentClassLoader(URL[] urls){
  if (urls == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  ClassLoader bootStrapClassLoader=AgentClassLoader.class.getClassLoader();
  this.classLoader=new PinpointURLClassLoader(urls,bootStrapClassLoader);
  this.executeTemplate=new ContextClassLoaderExecuteTemplate(classLoader);
}","public AgentClassLoader(URL[] urls){
  if (urls == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  ClassLoader bootStrapClassLoader=AgentClassLoader.class.getClassLoader();
  this.classLoader=createClassLoader(urls,bootStrapClassLoader);
  this.executeTemplate=new ContextClassLoaderExecuteTemplate(classLoader);
}"
53972,"private void insertHostVer2(String host,String bindApplicationName,short bindServiceType,long statisticsRowSlot,String parentApplicationName,short parentServiceType){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",host,bindApplicationName,bindServiceType,parentApplicationName,parentServiceType);
  }
  String parentAgentId=null;
  final byte[] rowKey=createRowKey(parentApplicationName,parentServiceType,statisticsRowSlot,parentAgentId);
  byte[] columnName=createColumnName(host,bindApplicationName,bindServiceType);
  try {
    hbaseTemplate.put(HBaseTables.HOST_APPLICATION_MAP_VER2,rowKey,HBaseTables.HOST_APPLICATION_MAP_VER2_CF_MAP,columnName,null);
  }
 catch (  Exception ex) {
    logger.warn(""String_Node_Str"",ex.getCause(),ex);
    hbaseTemplate.put(HBaseTables.HOST_APPLICATION_MAP_VER2,rowKey,HBaseTables.HOST_APPLICATION_MAP_VER2_CF_MAP,columnName,null);
  }
}","private void insertHostVer2(String host,String bindApplicationName,short bindServiceType,long statisticsRowSlot,String parentApplicationName,short parentServiceType){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",host,bindApplicationName,bindServiceType,parentApplicationName,parentServiceType);
  }
  final byte[] rowKey=createRowKey(parentApplicationName,parentServiceType,statisticsRowSlot,null);
  byte[] columnName=createColumnName(host,bindApplicationName,bindServiceType);
  try {
    hbaseTemplate.put(HBaseTables.HOST_APPLICATION_MAP_VER2,rowKey,HBaseTables.HOST_APPLICATION_MAP_VER2_CF_MAP,columnName,null);
  }
 catch (  Exception ex) {
    logger.warn(""String_Node_Str"",ex.getCause(),ex);
    hbaseTemplate.put(HBaseTables.HOST_APPLICATION_MAP_VER2,rowKey,HBaseTables.HOST_APPLICATION_MAP_VER2_CF_MAP,columnName,null);
  }
}"
53973,"@Override public void init(String storedParams){
  this.mod=Integer.valueOf(storedParams);
}","@Override public void init(String storedParams){
  this.mod=Integer.parseInt(storedParams);
}"
53974,"private void validateId(String id,String idName,int maxlen){
  byte[] bytes=BytesUtils.toBytes(id);
  if (bytes.length > maxlen) {
    logger.warn(""String_Node_Str"",idName,id);
  }
}","private void validateId(String id,String idName,int maxlen){
  if (id == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final byte[] bytes=BytesUtils.toBytes(id);
  if (bytes.length > maxlen) {
    logger.warn(""String_Node_Str"",idName,id);
  }
}"
53975,"public FromToResponseFilter1(String fromServiceType,String fromApplicationName,String toServiceType,String toApplicationName,String condition){
  if (fromApplicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (toApplicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.fromServiceCode=ServiceType.findDesc(fromServiceType);
  if (fromServiceCode == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + fromServiceType);
  }
  this.fromApplicationName=fromApplicationName;
  this.toServiceCode=ServiceType.findDesc(toServiceType);
  if (toServiceCode == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + toServiceType);
  }
  this.toApplicationName=toApplicationName;
  if (condition == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String[] conditions=condition.split(""String_Node_Str"");
  if (conditions.length == 2) {
    findError=false;
    fromResponseTime=Long.valueOf(conditions[0]);
    toResponseTime=Long.valueOf(conditions[1]);
  }
 else   if (conditions.length == 3) {
    findError=ERROR.equals(conditions[0]);
    if (!findError) {
      throw new IllegalArgumentException(""String_Node_Str"" + condition);
    }
    fromResponseTime=Long.valueOf(conditions[1]);
    toResponseTime=Long.valueOf(conditions[2]);
  }
 else   if (conditions.length == 1) {
    findError=ERROR.equals(conditions[0]);
    if (!findError) {
      throw new IllegalArgumentException(""String_Node_Str"" + condition);
    }
    fromResponseTime=0;
    toResponseTime=Long.MAX_VALUE;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + condition);
  }
}","public FromToResponseFilter1(String fromServiceType,String fromApplicationName,String toServiceType,String toApplicationName,String condition){
  if (fromApplicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (toApplicationName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.fromServiceCode=ServiceType.findDesc(fromServiceType);
  if (fromServiceCode == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + fromServiceType);
  }
  this.fromApplicationName=fromApplicationName;
  this.toServiceCode=ServiceType.findDesc(toServiceType);
  if (toServiceCode == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + toServiceType);
  }
  this.toApplicationName=toApplicationName;
  if (condition == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String[] conditions=condition.split(""String_Node_Str"");
  if (conditions.length == 2) {
    findError=false;
    fromResponseTime=Long.parseLong(conditions[0]);
    toResponseTime=Long.parseLong(conditions[1]);
  }
 else   if (conditions.length == 3) {
    findError=ERROR.equals(conditions[0]);
    if (!findError) {
      throw new IllegalArgumentException(""String_Node_Str"" + condition);
    }
    fromResponseTime=Long.parseLong(conditions[1]);
    toResponseTime=Long.parseLong(conditions[2]);
  }
 else   if (conditions.length == 1) {
    findError=ERROR.equals(conditions[0]);
    if (!findError) {
      throw new IllegalArgumentException(""String_Node_Str"" + condition);
    }
    fromResponseTime=0;
    toResponseTime=Long.MAX_VALUE;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + condition);
  }
}"
53976,"private void insertHostVer2(String host,String bindApplicationName,short bindServiceType,long statisticsRowSlot,String parentApplicationName,short parentServiceType){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",host,bindApplicationName,bindServiceType,parentApplicationName,parentServiceType);
  }
  String parentAgentId=null;
  final byte[] rowKey=createRowKey(parentApplicationName,parentServiceType,statisticsRowSlot,parentAgentId);
  byte[] columnName=createColumnName(host,bindApplicationName,bindServiceType);
  try {
    hbaseTemplate.put(HBaseTables.HOST_APPLICATION_MAP_VER2,rowKey,HBaseTables.HOST_APPLICATION_MAP_VER2_CF_MAP,columnName,null);
  }
 catch (  Exception ex) {
    logger.warn(""String_Node_Str"",ex.getCause(),ex);
    hbaseTemplate.put(HBaseTables.HOST_APPLICATION_MAP_VER2,rowKey,HBaseTables.HOST_APPLICATION_MAP_VER2_CF_MAP,columnName,null);
  }
}","private void insertHostVer2(String host,String bindApplicationName,short bindServiceType,long statisticsRowSlot,String parentApplicationName,short parentServiceType){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",host,bindApplicationName,bindServiceType,parentApplicationName,parentServiceType);
  }
  final byte[] rowKey=createRowKey(parentApplicationName,parentServiceType,statisticsRowSlot,null);
  byte[] columnName=createColumnName(host,bindApplicationName,bindServiceType);
  try {
    hbaseTemplate.put(HBaseTables.HOST_APPLICATION_MAP_VER2,rowKey,HBaseTables.HOST_APPLICATION_MAP_VER2_CF_MAP,columnName,null);
  }
 catch (  Exception ex) {
    logger.warn(""String_Node_Str"",ex.getCause(),ex);
    hbaseTemplate.put(HBaseTables.HOST_APPLICATION_MAP_VER2,rowKey,HBaseTables.HOST_APPLICATION_MAP_VER2_CF_MAP,columnName,null);
  }
}"
53977,"public AgentClassLoader(URL[] urls){
  if (urls == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  ClassLoader bootStrapClassLoader=AgentClassLoader.class.getClassLoader();
  this.classLoader=new PinpointURLClassLoader(urls,bootStrapClassLoader);
  this.executeTemplate=new ContextClassLoaderExecuteTemplate(classLoader);
}","public AgentClassLoader(URL[] urls){
  if (urls == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  ClassLoader bootStrapClassLoader=AgentClassLoader.class.getClassLoader();
  this.classLoader=createClassLoader(urls,bootStrapClassLoader);
  this.executeTemplate=new ContextClassLoaderExecuteTemplate(classLoader);
}"
53978,"/** 
 * Creates a new byte array output stream, with a buffer capacity of the specified size, in bytes.
 * @param size the initial size.
 * @throws IllegalArgumentException if size is negative.
 */
public UnsafeByteArrayOutputStream(int size){
  if (size < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + size);
  }
  buf=new byte[size];
}","/** 
 * Creates a new byte array output stream, with a buffer capacity of the specified size, in bytes.
 * @param size the initial size.
 * @throws IllegalArgumentException if size is negative.
 */
public UnsafeByteArrayOutputStream(int size){
  super(size);
}"
53979,"@Override public DatabaseInfo parse(String url){
  if (url == null) {
    return JDBCUrlParser.createUnknownDataBase(ServiceType.CUBRID,ServiceType.CUBRID_EXECUTE_QUERY,url);
  }
  final Matcher matcher=PATTERN.matcher(url);
  if (!matcher.find()) {
    logger.warn(""String_Node_Str"",url);
    return JDBCUrlParser.createUnknownDataBase(ServiceType.CUBRID,ServiceType.CUBRID_EXECUTE_QUERY,url);
  }
  String host=matcher.group(2);
  String portString=matcher.group(3);
  String db=matcher.group(4);
  String user=matcher.group(5);
  int port=DEFAULT_PORT;
  if (host == null || host.length() == 0) {
    host=DEFAULT_HOSTNAME;
  }
  if (portString == null || portString.length() == 0) {
    port=DEFAULT_PORT;
  }
 else {
    try {
      port=Integer.parseInt(portString);
    }
 catch (    NumberFormatException e) {
      logger.warn(""String_Node_Str"",portString,url);
    }
  }
  if (user == null) {
    user=DEFAULT_USER;
  }
  StringMaker maker=new StringMaker(url);
  String normalizedUrl=maker.clear().before('?').value();
  List<String> hostList=new ArrayList<String>(1);
  final String hostAndPort=host + ""String_Node_Str"" + portString;
  hostList.add(hostAndPort);
  return new DefaultDatabaseInfo(ServiceType.CUBRID,ServiceType.CUBRID_EXECUTE_QUERY,url,normalizedUrl,hostList,db);
}","@Override public DatabaseInfo parse(String url){
  if (url == null) {
    return JDBCUrlParser.createUnknownDataBase(ServiceType.CUBRID,ServiceType.CUBRID_EXECUTE_QUERY,null);
  }
  final Matcher matcher=PATTERN.matcher(url);
  if (!matcher.find()) {
    logger.warn(""String_Node_Str"",url);
    return JDBCUrlParser.createUnknownDataBase(ServiceType.CUBRID,ServiceType.CUBRID_EXECUTE_QUERY,url);
  }
  String host=matcher.group(2);
  String portString=matcher.group(3);
  String db=matcher.group(4);
  String user=matcher.group(5);
  int port=DEFAULT_PORT;
  if (host == null || host.length() == 0) {
    host=DEFAULT_HOSTNAME;
  }
  if (portString == null || portString.length() == 0) {
    port=DEFAULT_PORT;
  }
 else {
    try {
      port=Integer.parseInt(portString);
    }
 catch (    NumberFormatException e) {
      logger.warn(""String_Node_Str"",portString,url);
    }
  }
  if (user == null) {
    user=DEFAULT_USER;
  }
  StringMaker maker=new StringMaker(url);
  String normalizedUrl=maker.clear().before('?').value();
  List<String> hostList=new ArrayList<String>(1);
  final String hostAndPort=host + ""String_Node_Str"" + portString;
  hostList.add(hostAndPort);
  return new DefaultDatabaseInfo(ServiceType.CUBRID,ServiceType.CUBRID_EXECUTE_QUERY,url,normalizedUrl,hostList,db);
}"
53980,"@Override public DatabaseInfo parse(String url){
  if (url == null) {
    return JDBCUrlParser.createUnknownDataBase(ServiceType.MSSQL,ServiceType.MSSQL_EXECUTE_QUERY,url);
  }
  StringMaker maker=new StringMaker(url);
  maker.lower().after(""String_Node_Str"");
  StringMaker before=maker.after(""String_Node_Str"").before(';');
  final String hostAndPortAndDataBaseString=before.value();
  String databaseId=""String_Node_Str"";
  String hostAndPortString=""String_Node_Str"";
  final int databaseIdIndex=hostAndPortAndDataBaseString.indexOf('/');
  if (databaseIdIndex != -1) {
    hostAndPortString=hostAndPortAndDataBaseString.substring(0,databaseIdIndex);
    databaseId=hostAndPortAndDataBaseString.substring(databaseIdIndex + 1,hostAndPortAndDataBaseString.length());
  }
 else {
    hostAndPortString=hostAndPortAndDataBaseString;
  }
  List<String> hostList=new ArrayList<String>(1);
  hostList.add(hostAndPortString);
  if (databaseId.isEmpty()) {
    databaseId=maker.next().after(""String_Node_Str"").before(';').value();
  }
  String normalizedUrl=maker.clear().before(""String_Node_Str"").value();
  return new DefaultDatabaseInfo(ServiceType.MSSQL,ServiceType.MSSQL_EXECUTE_QUERY,url,normalizedUrl,hostList,databaseId);
}","@Override public DatabaseInfo parse(String url){
  if (url == null) {
    return JDBCUrlParser.createUnknownDataBase(ServiceType.MSSQL,ServiceType.MSSQL_EXECUTE_QUERY,null);
  }
  StringMaker maker=new StringMaker(url);
  maker.lower().after(""String_Node_Str"");
  StringMaker before=maker.after(""String_Node_Str"").before(';');
  final String hostAndPortAndDataBaseString=before.value();
  String databaseId=""String_Node_Str"";
  String hostAndPortString=""String_Node_Str"";
  final int databaseIdIndex=hostAndPortAndDataBaseString.indexOf('/');
  if (databaseIdIndex != -1) {
    hostAndPortString=hostAndPortAndDataBaseString.substring(0,databaseIdIndex);
    databaseId=hostAndPortAndDataBaseString.substring(databaseIdIndex + 1,hostAndPortAndDataBaseString.length());
  }
 else {
    hostAndPortString=hostAndPortAndDataBaseString;
  }
  List<String> hostList=new ArrayList<String>(1);
  hostList.add(hostAndPortString);
  if (databaseId.isEmpty()) {
    databaseId=maker.next().after(""String_Node_Str"").before(';').value();
  }
  String normalizedUrl=maker.clear().before(""String_Node_Str"").value();
  return new DefaultDatabaseInfo(ServiceType.MSSQL,ServiceType.MSSQL_EXECUTE_QUERY,url,normalizedUrl,hostList,databaseId);
}"
53981,"@Override public DatabaseInfo parse(String url){
  if (url == null) {
    return JDBCUrlParser.createUnknownDataBase(ServiceType.MYSQL,ServiceType.MYSQL_EXECUTE_QUERY,url);
  }
  if (isLoadbalanceUrl(url)) {
    return parseLoadbalancedUrl(url);
  }
  return parseNormal(url);
}","@Override public DatabaseInfo parse(String url){
  if (url == null) {
    return JDBCUrlParser.createUnknownDataBase(ServiceType.MYSQL,ServiceType.MYSQL_EXECUTE_QUERY,null);
  }
  if (isLoadbalanceUrl(url)) {
    return parseLoadbalancedUrl(url);
  }
  return parseNormal(url);
}"
53982,"public static String mergeParameterVariableNameDescription(String[] parameterType,String[] variableName){
  if (parameterType == null) {
    if (variableName == null) {
      return EMPTY_ARRAY;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + Arrays.toString(parameterType) + ""String_Node_Str""+ Arrays.toString(variableName));
    }
  }
  if (parameterType.length != variableName.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (parameterType.length == 0) {
    return EMPTY_ARRAY;
  }
  StringBuilder sb=new StringBuilder(64);
  sb.append('(');
  int end=parameterType.length - 1;
  for (int i=0; i < parameterType.length; i++) {
    sb.append(parameterType[i]);
    sb.append(' ');
    sb.append(variableName[i]);
    if (i < end) {
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(')');
  return sb.toString();
}","public static String mergeParameterVariableNameDescription(String[] parameterType,String[] variableName){
  if (parameterType == null && variableName == null) {
    return EMPTY_ARRAY;
  }
  if (variableName != null && parameterType != null) {
    if (parameterType.length != variableName.length) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (parameterType.length == 0) {
      return EMPTY_ARRAY;
    }
    StringBuilder sb=new StringBuilder(64);
    sb.append('(');
    int end=parameterType.length - 1;
    for (int i=0; i < parameterType.length; i++) {
      sb.append(parameterType[i]);
      sb.append(' ');
      sb.append(variableName[i]);
      if (i < end) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(')');
    return sb.toString();
  }
  throw new IllegalArgumentException(""String_Node_Str"" + Arrays.toString(parameterType) + ""String_Node_Str""+ Arrays.toString(variableName));
}"
53983,"@Override public DatabaseInfo parse(String url){
  if (url == null) {
    return JDBCUrlParser.createUnknownDataBase(ServiceType.CUBRID,ServiceType.CUBRID_EXECUTE_QUERY,url);
  }
  final Matcher matcher=PATTERN.matcher(url);
  if (!matcher.find()) {
    logger.warn(""String_Node_Str"",url);
    return JDBCUrlParser.createUnknownDataBase(ServiceType.CUBRID,ServiceType.CUBRID_EXECUTE_QUERY,url);
  }
  String host=matcher.group(2);
  String portString=matcher.group(3);
  String db=matcher.group(4);
  String user=matcher.group(5);
  int port=DEFAULT_PORT;
  if (host == null || host.length() == 0) {
    host=DEFAULT_HOSTNAME;
  }
  if (portString == null || portString.length() == 0) {
    port=DEFAULT_PORT;
  }
 else {
    try {
      port=Integer.parseInt(portString);
    }
 catch (    NumberFormatException e) {
      logger.warn(""String_Node_Str"",portString,url);
    }
  }
  if (user == null) {
    user=DEFAULT_USER;
  }
  StringMaker maker=new StringMaker(url);
  String normalizedUrl=maker.clear().before('?').value();
  List<String> hostList=new ArrayList<String>(1);
  final String hostAndPort=host + ""String_Node_Str"" + portString;
  hostList.add(hostAndPort);
  return new DefaultDatabaseInfo(ServiceType.CUBRID,ServiceType.CUBRID_EXECUTE_QUERY,url,normalizedUrl,hostList,db);
}","@Override public DatabaseInfo parse(String url){
  if (url == null) {
    return JDBCUrlParser.createUnknownDataBase(ServiceType.CUBRID,ServiceType.CUBRID_EXECUTE_QUERY,null);
  }
  final Matcher matcher=PATTERN.matcher(url);
  if (!matcher.find()) {
    logger.warn(""String_Node_Str"",url);
    return JDBCUrlParser.createUnknownDataBase(ServiceType.CUBRID,ServiceType.CUBRID_EXECUTE_QUERY,url);
  }
  String host=matcher.group(2);
  String portString=matcher.group(3);
  String db=matcher.group(4);
  String user=matcher.group(5);
  int port=DEFAULT_PORT;
  if (host == null || host.length() == 0) {
    host=DEFAULT_HOSTNAME;
  }
  if (portString == null || portString.length() == 0) {
    port=DEFAULT_PORT;
  }
 else {
    try {
      port=Integer.parseInt(portString);
    }
 catch (    NumberFormatException e) {
      logger.warn(""String_Node_Str"",portString,url);
    }
  }
  if (user == null) {
    user=DEFAULT_USER;
  }
  StringMaker maker=new StringMaker(url);
  String normalizedUrl=maker.clear().before('?').value();
  List<String> hostList=new ArrayList<String>(1);
  final String hostAndPort=host + ""String_Node_Str"" + portString;
  hostList.add(hostAndPort);
  return new DefaultDatabaseInfo(ServiceType.CUBRID,ServiceType.CUBRID_EXECUTE_QUERY,url,normalizedUrl,hostList,db);
}"
53984,"@Override public DatabaseInfo parse(String url){
  if (url == null) {
    return JDBCUrlParser.createUnknownDataBase(ServiceType.MSSQL,ServiceType.MSSQL_EXECUTE_QUERY,url);
  }
  StringMaker maker=new StringMaker(url);
  maker.lower().after(""String_Node_Str"");
  StringMaker before=maker.after(""String_Node_Str"").before(';');
  final String hostAndPortAndDataBaseString=before.value();
  String databaseId=""String_Node_Str"";
  String hostAndPortString=""String_Node_Str"";
  final int databaseIdIndex=hostAndPortAndDataBaseString.indexOf('/');
  if (databaseIdIndex != -1) {
    hostAndPortString=hostAndPortAndDataBaseString.substring(0,databaseIdIndex);
    databaseId=hostAndPortAndDataBaseString.substring(databaseIdIndex + 1,hostAndPortAndDataBaseString.length());
  }
 else {
    hostAndPortString=hostAndPortAndDataBaseString;
  }
  List<String> hostList=new ArrayList<String>(1);
  hostList.add(hostAndPortString);
  if (databaseId.isEmpty()) {
    databaseId=maker.next().after(""String_Node_Str"").before(';').value();
  }
  String normalizedUrl=maker.clear().before(""String_Node_Str"").value();
  return new DefaultDatabaseInfo(ServiceType.MSSQL,ServiceType.MSSQL_EXECUTE_QUERY,url,normalizedUrl,hostList,databaseId);
}","@Override public DatabaseInfo parse(String url){
  if (url == null) {
    return JDBCUrlParser.createUnknownDataBase(ServiceType.MSSQL,ServiceType.MSSQL_EXECUTE_QUERY,null);
  }
  StringMaker maker=new StringMaker(url);
  maker.lower().after(""String_Node_Str"");
  StringMaker before=maker.after(""String_Node_Str"").before(';');
  final String hostAndPortAndDataBaseString=before.value();
  String databaseId=""String_Node_Str"";
  String hostAndPortString=""String_Node_Str"";
  final int databaseIdIndex=hostAndPortAndDataBaseString.indexOf('/');
  if (databaseIdIndex != -1) {
    hostAndPortString=hostAndPortAndDataBaseString.substring(0,databaseIdIndex);
    databaseId=hostAndPortAndDataBaseString.substring(databaseIdIndex + 1,hostAndPortAndDataBaseString.length());
  }
 else {
    hostAndPortString=hostAndPortAndDataBaseString;
  }
  List<String> hostList=new ArrayList<String>(1);
  hostList.add(hostAndPortString);
  if (databaseId.isEmpty()) {
    databaseId=maker.next().after(""String_Node_Str"").before(';').value();
  }
  String normalizedUrl=maker.clear().before(""String_Node_Str"").value();
  return new DefaultDatabaseInfo(ServiceType.MSSQL,ServiceType.MSSQL_EXECUTE_QUERY,url,normalizedUrl,hostList,databaseId);
}"
53985,"@Override public DatabaseInfo parse(String url){
  if (url == null) {
    return JDBCUrlParser.createUnknownDataBase(ServiceType.MYSQL,ServiceType.MYSQL_EXECUTE_QUERY,url);
  }
  if (isLoadbalanceUrl(url)) {
    return parseLoadbalancedUrl(url);
  }
  return parseNormal(url);
}","@Override public DatabaseInfo parse(String url){
  if (url == null) {
    return JDBCUrlParser.createUnknownDataBase(ServiceType.MYSQL,ServiceType.MYSQL_EXECUTE_QUERY,null);
  }
  if (isLoadbalanceUrl(url)) {
    return parseLoadbalancedUrl(url);
  }
  return parseNormal(url);
}"
53986,"public static String mergeParameterVariableNameDescription(String[] parameterType,String[] variableName){
  if (parameterType == null) {
    if (variableName == null) {
      return EMPTY_ARRAY;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + Arrays.toString(parameterType) + ""String_Node_Str""+ Arrays.toString(variableName));
    }
  }
  if (parameterType.length != variableName.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (parameterType.length == 0) {
    return EMPTY_ARRAY;
  }
  StringBuilder sb=new StringBuilder(64);
  sb.append('(');
  int end=parameterType.length - 1;
  for (int i=0; i < parameterType.length; i++) {
    sb.append(parameterType[i]);
    sb.append(' ');
    sb.append(variableName[i]);
    if (i < end) {
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(')');
  return sb.toString();
}","public static String mergeParameterVariableNameDescription(String[] parameterType,String[] variableName){
  if (parameterType == null && variableName == null) {
    return EMPTY_ARRAY;
  }
  if (variableName != null && parameterType != null) {
    if (parameterType.length != variableName.length) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (parameterType.length == 0) {
      return EMPTY_ARRAY;
    }
    StringBuilder sb=new StringBuilder(64);
    sb.append('(');
    int end=parameterType.length - 1;
    for (int i=0; i < parameterType.length; i++) {
      sb.append(parameterType[i]);
      sb.append(' ');
      sb.append(variableName[i]);
      if (i < end) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(')');
    return sb.toString();
  }
  throw new IllegalArgumentException(""String_Node_Str"" + Arrays.toString(parameterType) + ""String_Node_Str""+ Arrays.toString(variableName));
}"
53987,"/** 
 * Creates a new byte array output stream, with a buffer capacity of the specified size, in bytes.
 * @param size the initial size.
 * @throws IllegalArgumentException if size is negative.
 */
public UnsafeByteArrayOutputStream(int size){
  if (size < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + size);
  }
  buf=new byte[size];
}","/** 
 * Creates a new byte array output stream, with a buffer capacity of the specified size, in bytes.
 * @param size the initial size.
 * @throws IllegalArgumentException if size is negative.
 */
public UnsafeByteArrayOutputStream(int size){
  super(size);
}"
53988,"int addSimpleInterceptor0(SimpleAroundInterceptor interceptor){
  if (interceptor == null) {
    return -1;
  }
  int newId=nextId();
  if (newId > max) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + index.length + ""String_Node_Str""+ id);
  }
  this.simpleIndex[newId]=interceptor;
  return newId;
}","int addSimpleInterceptor0(SimpleAroundInterceptor interceptor){
  if (interceptor == null) {
    return -1;
  }
  int newId=nextId();
  if (newId >= max) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + index.length + ""String_Node_Str""+ id);
  }
  this.simpleIndex[newId]=interceptor;
  return newId;
}"
53989,"public int addInterceptor0(StaticAroundInterceptor interceptor){
  if (interceptor == null) {
    return -1;
  }
  int newId=nextId();
  if (newId > max) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + index.length + ""String_Node_Str""+ id);
  }
  this.index[newId]=interceptor;
  return newId;
}","public int addInterceptor0(StaticAroundInterceptor interceptor){
  if (interceptor == null) {
    return -1;
  }
  int newId=nextId();
  if (newId >= max) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + index.length + ""String_Node_Str""+ id);
  }
  this.index[newId]=interceptor;
  return newId;
}"
53990,"@Override public boolean include(List<SpanBo> transaction){
  if (includeServiceType(fromServiceCode,ServiceType.CLIENT) || includeServiceType(fromServiceCode,ServiceType.USER)) {
    for (    SpanBo span : transaction) {
      if (span.isRoot() && includeServiceType(toServiceCode,span.getServiceType()) && toApplicationName.equals(span.getApplicationId())) {
        if (findError) {
          return span.getErrCode() > 0 && checkResponseCondition(span.getElapsed());
        }
 else {
          return checkResponseCondition(span.getElapsed());
        }
      }
    }
  }
 else   if (includeUnknown(toServiceCode)) {
    for (    SpanBo span : transaction) {
      if (includeServiceType(fromServiceCode,span.getServiceType()) && fromApplicationName.equals(span.getApplicationId())) {
        List<SpanEventBo> eventBoList=span.getSpanEventBoList();
        if (eventBoList == null) {
          continue;
        }
        for (        SpanEventBo event : eventBoList) {
          if (event.getServiceType().isRpcClient() && toApplicationName.equals(event.getDestinationId())) {
            if (findError) {
              return event.hasException() && checkResponseCondition(event.getEndElapsed());
            }
 else {
              return checkResponseCondition(event.getEndElapsed());
            }
          }
        }
      }
    }
  }
 else   if (includeWas(toServiceCode)) {
    for (    SpanBo srcSpan : transaction) {
      if (includeServiceType(fromServiceCode,srcSpan.getServiceType()) && fromApplicationName.equals(srcSpan.getApplicationId())) {
        for (        SpanBo destSpan : transaction) {
          if (destSpan.getParentSpanId() != srcSpan.getSpanId()) {
            continue;
          }
          if (includeServiceType(toServiceCode,destSpan.getServiceType()) && toApplicationName.equals(destSpan.getApplicationId())) {
            if (findError) {
              return destSpan.getErrCode() > 0 && checkResponseCondition(destSpan.getElapsed());
            }
 else {
              return checkResponseCondition(destSpan.getElapsed());
            }
          }
        }
      }
    }
  }
 else {
    for (    SpanBo span : transaction) {
      if (includeServiceType(fromServiceCode,span.getServiceType()) && fromApplicationName.equals(span.getApplicationId())) {
        List<SpanEventBo> eventBoList=span.getSpanEventBoList();
        if (eventBoList == null) {
          continue;
        }
        for (        SpanEventBo event : eventBoList) {
          if (includeServiceType(toServiceCode,event.getServiceType()) && toApplicationName.equals(event.getDestinationId())) {
            if (findError) {
              return event.hasException() && checkResponseCondition(event.getEndElapsed());
            }
 else {
              return checkResponseCondition(event.getEndElapsed());
            }
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean include(List<SpanBo> transaction){
  if (includeServiceType(fromServiceCode,ServiceType.CLIENT) || includeServiceType(fromServiceCode,ServiceType.USER)) {
    for (    SpanBo span : transaction) {
      if (span.isRoot() && includeServiceType(toServiceCode,span.getServiceType()) && toApplicationName.equals(span.getApplicationId())) {
        if (findError) {
          return span.getErrCode() > 0 && checkResponseCondition(span.getElapsed());
        }
 else {
          return span.getErrCode() == 0 && checkResponseCondition(span.getElapsed());
        }
      }
    }
  }
 else   if (includeUnknown(toServiceCode)) {
    for (    SpanBo span : transaction) {
      if (includeServiceType(fromServiceCode,span.getServiceType()) && fromApplicationName.equals(span.getApplicationId())) {
        List<SpanEventBo> eventBoList=span.getSpanEventBoList();
        if (eventBoList == null) {
          continue;
        }
        for (        SpanEventBo event : eventBoList) {
          if (event.getServiceType().isRpcClient() && toApplicationName.equals(event.getDestinationId())) {
            if (findError) {
              return event.hasException() && checkResponseCondition(event.getEndElapsed());
            }
 else {
              return !event.hasException() && checkResponseCondition(event.getEndElapsed());
            }
          }
        }
      }
    }
  }
 else   if (includeWas(toServiceCode)) {
    for (    SpanBo srcSpan : transaction) {
      if (includeServiceType(fromServiceCode,srcSpan.getServiceType()) && fromApplicationName.equals(srcSpan.getApplicationId())) {
        for (        SpanBo destSpan : transaction) {
          if (destSpan.getParentSpanId() != srcSpan.getSpanId()) {
            continue;
          }
          if (includeServiceType(toServiceCode,destSpan.getServiceType()) && toApplicationName.equals(destSpan.getApplicationId())) {
            if (findError) {
              return destSpan.getErrCode() > 0 && checkResponseCondition(destSpan.getElapsed());
            }
 else {
              return destSpan.getErrCode() == 0 && checkResponseCondition(destSpan.getElapsed());
            }
          }
        }
      }
    }
  }
 else {
    for (    SpanBo span : transaction) {
      if (includeServiceType(fromServiceCode,span.getServiceType()) && fromApplicationName.equals(span.getApplicationId())) {
        List<SpanEventBo> eventBoList=span.getSpanEventBoList();
        if (eventBoList == null) {
          continue;
        }
        for (        SpanEventBo event : eventBoList) {
          if (includeServiceType(toServiceCode,event.getServiceType()) && toApplicationName.equals(event.getDestinationId())) {
            if (findError) {
              return event.hasException() && checkResponseCondition(event.getEndElapsed());
            }
 else {
              return !event.hasException() && checkResponseCondition(event.getEndElapsed());
            }
          }
        }
      }
    }
  }
  return false;
}"
53991,"/** 
 * @param model
 * @param response
 * @param applicationName
 * @param from
 * @param to
 * @param limit 한번에 조회 할 데이터의 크기, 조회 결과가 이 크기를 넘어가면 limit개만 반환한다. 나머지는 다시 요청해서 조회해야 한다.
 * @return
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String getScatterData(Model model,HttpServletResponse response,@RequestParam(""String_Node_Str"") String applicationName,@RequestParam(""String_Node_Str"") long from,@RequestParam(""String_Node_Str"") long to,@RequestParam(""String_Node_Str"") int limit,@RequestParam(value=""String_Node_Str"",required=false) String filterText,@RequestParam(value=""String_Node_Str"",required=false) String jsonpCallback,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") int version){
  StopWatch watch=new StopWatch();
  watch.start(""String_Node_Str"");
  List<Dot> scatterData;
  if (filterText == null) {
    scatterData=scatter.selectScatterData(applicationName,from,to,limit);
    if (scatterData.isEmpty()) {
      model.addAttribute(""String_Node_Str"",-1);
      model.addAttribute(""String_Node_Str"",-1);
    }
 else {
      model.addAttribute(""String_Node_Str"",scatterData.get(0).getTimestamp());
      model.addAttribute(""String_Node_Str"",scatterData.get(scatterData.size() - 1).getTimestamp());
    }
  }
 else {
    List<TraceId> traceIds=scatter.selectScatterTraceIdList(applicationName,from,to,limit);
    if (!traceIds.isEmpty()) {
      model.addAttribute(""String_Node_Str"",-1);
      model.addAttribute(""String_Node_Str"",-1);
    }
 else {
      model.addAttribute(""String_Node_Str"",((TraceIdWithTime)traceIds.get(0)).getAcceptedTime());
      model.addAttribute(""String_Node_Str"",((TraceIdWithTime)traceIds.get(traceIds.size() - 1)).getAcceptedTime());
    }
    scatterData=scatter.selectScatterData(traceIds,applicationName,FilterBuilder.build(filterText));
  }
  watch.stop();
  logger.info(""String_Node_Str"",watch.getLastTaskTimeMillis());
  model.addAttribute(""String_Node_Str"",scatterData);
  if (jsonpCallback == null) {
    return ""String_Node_Str"" + ((version > 1) ? version : ""String_Node_Str"");
  }
 else {
    model.addAttribute(""String_Node_Str"",jsonpCallback);
    return ""String_Node_Str"" + ((version > 1) ? version : ""String_Node_Str"");
  }
}","/** 
 * @param model
 * @param response
 * @param applicationName
 * @param from
 * @param to
 * @param limit 한번에 조회 할 데이터의 크기, 조회 결과가 이 크기를 넘어가면 limit개만 반환한다. 나머지는 다시 요청해서 조회해야 한다.
 * @return
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String getScatterData(Model model,HttpServletResponse response,@RequestParam(""String_Node_Str"") String applicationName,@RequestParam(""String_Node_Str"") long from,@RequestParam(""String_Node_Str"") long to,@RequestParam(""String_Node_Str"") int limit,@RequestParam(value=""String_Node_Str"",required=false) String filterText,@RequestParam(value=""String_Node_Str"",required=false) String jsonpCallback,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") int version){
  StopWatch watch=new StopWatch();
  watch.start(""String_Node_Str"");
  List<Dot> scatterData;
  if (filterText == null) {
    scatterData=scatter.selectScatterData(applicationName,from,to,limit);
    if (scatterData.isEmpty()) {
      model.addAttribute(""String_Node_Str"",-1);
      model.addAttribute(""String_Node_Str"",-1);
    }
 else {
      model.addAttribute(""String_Node_Str"",scatterData.get(0).getTimestamp());
      model.addAttribute(""String_Node_Str"",scatterData.get(scatterData.size() - 1).getTimestamp());
    }
  }
 else {
    List<TraceId> traceIds=scatter.selectScatterTraceIdList(applicationName,from,to,limit);
    if (traceIds.isEmpty()) {
      model.addAttribute(""String_Node_Str"",-1);
      model.addAttribute(""String_Node_Str"",-1);
    }
 else {
      model.addAttribute(""String_Node_Str"",((TraceIdWithTime)traceIds.get(0)).getAcceptedTime());
      model.addAttribute(""String_Node_Str"",((TraceIdWithTime)traceIds.get(traceIds.size() - 1)).getAcceptedTime());
    }
    scatterData=scatter.selectScatterData(traceIds,applicationName,FilterBuilder.build(filterText));
  }
  watch.stop();
  logger.info(""String_Node_Str"",watch.getLastTaskTimeMillis());
  model.addAttribute(""String_Node_Str"",scatterData);
  if (jsonpCallback == null) {
    return ""String_Node_Str"" + ((version > 1) ? version : ""String_Node_Str"");
  }
 else {
    model.addAttribute(""String_Node_Str"",jsonpCallback);
    return ""String_Node_Str"" + ((version > 1) ? version : ""String_Node_Str"");
  }
}"
53992,"public void add(SpanBo span){
  long elapsed=span.getElapsed();
  totalTime+=elapsed;
  if (maxTime < elapsed)   maxTime=elapsed;
  if (minTime > elapsed)   minTime=elapsed;
  this.traces.add(new Trace(new UUID(span.getMostTraceId(),span.getLeastTraceId()).toString(),elapsed,span.getStartTime(),span.isException()));
  if (span.getParentSpanId() == -1) {
    calls++;
  }
}","public void add(SpanBo span){
  long elapsed=span.getElapsed();
  totalTime+=elapsed;
  if (maxTime < elapsed)   maxTime=elapsed;
  if (minTime > elapsed)   minTime=elapsed;
  this.traces.add(new Trace(new UUID(span.getMostTraceId(),span.getLeastTraceId()).toString(),elapsed,span.getStartTime(),span.isException()));
  calls++;
}"
53993,"public com.profiler.common.dto.thrift.SubSpan toThrift(boolean child){
  com.profiler.common.dto.thrift.SubSpan subSpan=new com.profiler.common.dto.thrift.SubSpan();
  long parentSpanStartTime=parentSpan.getStartTime();
  subSpan.setStartElapsed((int)(startTime - parentSpanStartTime));
  subSpan.setEndElapsed((int)(endTime - startTime));
  subSpan.setSequence(sequence);
  if (!child) {
    subSpan.setAgentId(Agent.getInstance().getAgentId());
    TraceID parentSpanTraceID=parentSpan.getTraceID();
    subSpan.setMostTraceId(parentSpanTraceID.getId().getMostSignificantBits());
    subSpan.setLeastTraceId(parentSpanTraceID.getId().getLeastSignificantBits());
    subSpan.setSpanId(parentSpanTraceID.getSpanId());
  }
  subSpan.setRpc(rpc);
  subSpan.setServiceName(serviceName);
  if (serviceType != null) {
    subSpan.setServiceType(serviceType.getCode());
  }
  subSpan.setEndPoint(endPoint);
  subSpan.setErr(exception);
  List<com.profiler.common.dto.thrift.Annotation> annotationList=new ArrayList<com.profiler.common.dto.thrift.Annotation>(annotations.size());
  for (  HippoAnnotation a : annotations) {
    annotationList.add(a.toThrift());
  }
  subSpan.setAnnotations(annotationList);
  if (depth != null) {
    subSpan.setDepth(depth);
  }
  if (nextSpanId != null) {
    subSpan.setNextSpanId(nextSpanId);
  }
  return subSpan;
}","public com.profiler.common.dto.thrift.SubSpan toThrift(boolean child){
  com.profiler.common.dto.thrift.SubSpan subSpan=new com.profiler.common.dto.thrift.SubSpan();
  long parentSpanStartTime=parentSpan.getStartTime();
  subSpan.setStartElapsed((int)(startTime - parentSpanStartTime));
  subSpan.setEndElapsed((int)(endTime - startTime));
  subSpan.setSequence(sequence);
  if (!child) {
    subSpan.setAgentId(Agent.getInstance().getAgentId());
    TraceID parentSpanTraceID=parentSpan.getTraceID();
    subSpan.setMostTraceId(parentSpanTraceID.getId().getMostSignificantBits());
    subSpan.setLeastTraceId(parentSpanTraceID.getId().getLeastSignificantBits());
    subSpan.setSpanId(parentSpanTraceID.getSpanId());
  }
  subSpan.setRpc(rpc);
  subSpan.setServiceName(serviceName);
  if (serviceType != null) {
    subSpan.setServiceType(serviceType.getCode());
  }
  subSpan.setEndPoint(endPoint);
  subSpan.setErr(exception);
  List<com.profiler.common.dto.thrift.Annotation> annotationList=new ArrayList<com.profiler.common.dto.thrift.Annotation>(annotations.size());
  for (  HippoAnnotation a : annotations) {
    annotationList.add(a.toThrift());
  }
  subSpan.setAnnotations(annotationList);
  if (depth != -1) {
    subSpan.setDepth(depth);
  }
  if (nextSpanId != -1) {
    subSpan.setNextSpanId(nextSpanId);
  }
  return subSpan;
}"
53994,"private List<com.profiler.common.dto.thrift.SubSpan> createSubSpan(List<SubSpan> subSpanList){
  List<com.profiler.common.dto.thrift.SubSpan> result=new ArrayList<com.profiler.common.dto.thrift.SubSpan>(subSpanList.size());
  for (  SubSpan subSpan : subSpanList) {
    com.profiler.common.dto.thrift.SubSpan tSubSpan=new com.profiler.common.dto.thrift.SubSpan();
    tSubSpan.setAgentId(Agent.getInstance().getAgentId());
    long parentSpanStartTime=subSpan.getParentSpan().getStartTime();
    tSubSpan.setStartElapsed((int)(subSpan.getStartTime() - parentSpanStartTime));
    tSubSpan.setEndElapsed((int)(subSpan.getEndTime() - subSpan.getStartTime()));
    tSubSpan.setSequence(subSpan.getSequence());
    tSubSpan.setRpc(subSpan.getRpc());
    tSubSpan.setServiceName(subSpan.getServiceName());
    tSubSpan.setServiceType(subSpan.getServiceType().getCode());
    tSubSpan.setEndPoint(subSpan.getEndPoint());
    List<com.profiler.common.dto.thrift.Annotation> annotationList=new ArrayList<com.profiler.common.dto.thrift.Annotation>(subSpan.getAnnotationSize());
    for (    HippoAnnotation a : subSpan.getAnnotations()) {
      annotationList.add(a.toThrift());
    }
    tSubSpan.setAnnotations(annotationList);
    result.add(tSubSpan);
  }
  return result;
}","private List<com.profiler.common.dto.thrift.SubSpan> createSubSpan(List<SubSpan> subSpanList){
  List<com.profiler.common.dto.thrift.SubSpan> result=new ArrayList<com.profiler.common.dto.thrift.SubSpan>(subSpanList.size());
  for (  SubSpan subSpan : subSpanList) {
    com.profiler.common.dto.thrift.SubSpan tSubSpan=new com.profiler.common.dto.thrift.SubSpan();
    tSubSpan.setAgentId(Agent.getInstance().getAgentId());
    long parentSpanStartTime=subSpan.getParentSpan().getStartTime();
    tSubSpan.setStartElapsed((int)(subSpan.getStartTime() - parentSpanStartTime));
    tSubSpan.setEndElapsed((int)(subSpan.getEndTime() - subSpan.getStartTime()));
    tSubSpan.setSequence(subSpan.getSequence());
    tSubSpan.setRpc(subSpan.getRpc());
    tSubSpan.setServiceName(subSpan.getServiceName());
    tSubSpan.setServiceType(subSpan.getServiceType().getCode());
    tSubSpan.setEndPoint(subSpan.getEndPoint());
    List<com.profiler.common.dto.thrift.Annotation> annotationList=new ArrayList<com.profiler.common.dto.thrift.Annotation>(subSpan.getAnnotationSize());
    for (    HippoAnnotation a : subSpan.getAnnotations()) {
      annotationList.add(a.toThrift());
    }
    if (subSpan.getDepth() != -1) {
      tSubSpan.setDepth(subSpan.getDepth());
    }
    if (subSpan.getNextSpanId() != -1) {
      tSubSpan.setNextSpanId(subSpan.getNextSpanId());
    }
    tSubSpan.setAnnotations(annotationList);
    result.add(tSubSpan);
  }
  return result;
}"
53995,"@Override public void before(Object target,String className,String methodName,String parameterDescription,Object[] args){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + StringUtils.toString(target) + ""String_Node_Str""+ className+ ""String_Node_Str""+ methodName+ parameterDescription+ ""String_Node_Str""+ Arrays.toString(args));
  }
  Trace trace=TraceContext.getTraceContext().currentTraceObject();
  if (trace == null) {
    return;
  }
  trace.traceBlockBegin();
  trace.markBeforeTime();
}","@Override public void before(Object target,String className,String methodName,String parameterDescription,Object[] args){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + StringUtils.toString(target) + ""String_Node_Str""+ className+ ""String_Node_Str""+ methodName+ parameterDescription+ ""String_Node_Str""+ Arrays.toString(args));
  }
  Trace trace=TraceContext.getTraceContext().currentTraceObject();
  if (trace == null) {
    return;
  }
  trace.traceBlockBegin();
  trace.recordRpcName(ServiceType.INTERNAL_METHOD,null,null);
  trace.markBeforeTime();
}"
53996,"public long getNextSpanStartTime(){
  int nextIndex=index + 1;
  if (nextIndex >= list.size()) {
    return Long.MAX_VALUE;
  }
  return list.get(nextIndex).getSpan().getStartTime();
}","public long getNextSpanStartTime(){
  int nextIndex=index + 1;
  if (nextIndex >= list.size()) {
    return Long.MAX_VALUE;
  }
  return list.get(nextIndex).getSpanBo().getStartTime();
}"
53997,"private void populatedSpan(List<SpanAlign> populatedList){
  SpanAlign spanAlign=list.get(index);
  SpanBo span=spanAlign.getSpan();
  populatedList.add(spanAlign);
  long startTime=span.getStartTime();
  List<SubSpanBo> subSpanBos=sortSubSpan(span);
  for (  SubSpanBo subSpanBo : subSpanBos) {
    long subStartTime=startTime + subSpanBo.getStartElapsed();
    long nextSpanStartTime=getNextSpanStartTime();
    if (subStartTime <= nextSpanStartTime) {
      SpanAlign subSpanAlign=new SpanAlign(spanAlign.getDepth(),span,subSpanBo);
      subSpanAlign.setSpan(false);
      populatedList.add(subSpanAlign);
    }
 else {
      if (nextSpanStartTime == Long.MAX_VALUE) {
        return;
      }
      index++;
      populatedSpan(populatedList);
    }
  }
  index++;
}","private void populatedSpan(List<SpanAlign> populatedList){
  SpanAlign spanAlign=list.get(index);
  SpanBo span=spanAlign.getSpanBo();
  populatedList.add(spanAlign);
  long startTime=span.getStartTime();
  List<SubSpanBo> subSpanBos=sortSubSpan(span);
  for (  SubSpanBo subSpanBo : subSpanBos) {
    long subStartTime=startTime + subSpanBo.getStartElapsed();
    long nextSpanStartTime=getNextSpanStartTime();
    if (subStartTime <= nextSpanStartTime) {
      SpanAlign subSpanAlign=new SpanAlign(spanAlign.getDepth(),span,subSpanBo);
      subSpanAlign.setSpan(false);
      populatedList.add(subSpanAlign);
    }
 else {
      if (nextSpanStartTime == Long.MAX_VALUE) {
        return;
      }
      index++;
      populatedSpan(populatedList);
    }
  }
  index++;
}"
53998,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ModelAndView flow(@RequestParam(value=""String_Node_Str"") String traceId){
  logger.debug(""String_Node_Str"",traceId);
  List<SpanAlign> spanAligns=spanService.selectSpan(traceId);
  ModelAndView mv=new ModelAndView(""String_Node_Str"");
  if (spanAligns.isEmpty()) {
    mv.addObject(""String_Node_Str"",9);
    mv.setViewName(""String_Node_Str"");
    return mv;
  }
  mv.addObject(""String_Node_Str"",spanAligns);
  mv.addObject(""String_Node_Str"",traceId);
  ServerCallTree callTree=flow.selectServerCallTree(new TraceId(UUID.fromString(traceId)));
  mv.addObject(""String_Node_Str"",callTree.getNodes());
  mv.addObject(""String_Node_Str"",callTree.getLinks());
  RecordSet recordset=new RecordSet(spanAligns);
  mv.addObject(""String_Node_Str"",recordset.getApplicationName());
  mv.addObject(""String_Node_Str"",recordset.getIterator());
  mv.addObject(""String_Node_Str"",recordset.getIterator());
  mv.addObject(""String_Node_Str"",recordset.getStartTime());
  mv.addObject(""String_Node_Str"",recordset.getEndTime());
  return mv;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ModelAndView flow(@RequestParam(value=""String_Node_Str"") String traceId){
  logger.debug(""String_Node_Str"",traceId);
  ModelAndView mv=new ModelAndView(""String_Node_Str"");
  try {
    List<SpanAlign> spanAligns=spanService.selectSpan(traceId);
    if (spanAligns.isEmpty()) {
      mv.addObject(""String_Node_Str"",9);
      mv.setViewName(""String_Node_Str"");
      return mv;
    }
    mv.addObject(""String_Node_Str"",spanAligns);
    mv.addObject(""String_Node_Str"",traceId);
    ServerCallTree callTree=flow.selectServerCallTree(new TraceId(UUID.fromString(traceId)));
    mv.addObject(""String_Node_Str"",callTree.getNodes());
    mv.addObject(""String_Node_Str"",callTree.getLinks());
    RecordSet recordset=new RecordSet(spanAligns);
    mv.addObject(""String_Node_Str"",recordset.getApplicationName());
    mv.addObject(""String_Node_Str"",recordset.getIterator());
    mv.addObject(""String_Node_Str"",recordset.getIterator());
    mv.addObject(""String_Node_Str"",recordset.getStartTime());
    mv.addObject(""String_Node_Str"",recordset.getEndTime());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return mv;
}"
53999,"private String getAgentId(SpanAlign spanAlign){
  if (spanAlign.isSpan()) {
    return spanAlign.getSpan().getAgentId();
  }
 else {
    return spanAlign.getSubSpanBo().getAgentId();
  }
}","private String getAgentId(SpanAlign spanAlign){
  if (spanAlign.isSpan()) {
    return spanAlign.getSpanBo().getAgentId();
  }
 else {
    return spanAlign.getSubSpanBo().getAgentId();
  }
}"
54000,"private void transitionSqlId(final List<SpanAlign> spans){
  this.transitionAnnotation(spans,new AnnotationReplacementCallback(){
    @Override public void replacement(    SpanAlign spanAlign,    List<AnnotationBo> annotationBoList){
      AnnotationBo sqlIdAnnotation=findAnnotation(annotationBoList,AnnotationNames.SQL_ID);
      if (sqlIdAnnotation == null) {
        return;
      }
      String agentId=getAgentId(spanAlign);
      long startTime=spanAlign.getSpan().getStartTime();
      long agentStartTime=agentInfoDao.selectAgentInfoBeforeStartTime(agentId,startTime);
      logger.info(""String_Node_Str"",agentId,agentStartTime);
      int hashCode=(Integer)sqlIdAnnotation.getValue();
      List<SqlMetaDataBo> sqlMetaDataList=sqlMetaDataDao.getSqlMetaData(agentId,hashCode,agentStartTime);
      int size=sqlMetaDataList.size();
      if (size == 0) {
        AnnotationBo api=new AnnotationBo();
        api.setKey(AnnotationNames.SQL_METADATA);
        api.setValue(""String_Node_Str"" + hashCode);
        annotationBoList.add(api);
      }
 else       if (size == 1) {
        AnnotationBo sqlParamAnnotationBo=findAnnotation(annotationBoList,AnnotationNames.SQL_PARAM);
        if (sqlParamAnnotationBo == null) {
          AnnotationBo sqlMeta=new AnnotationBo();
          sqlMeta.setKey(AnnotationNames.SQL_METADATA);
          sqlMeta.setValue(sqlMetaDataList.get(0).getSql());
          annotationBoList.add(sqlMeta);
          AnnotationBo sql=new AnnotationBo();
          sql.setKey(AnnotationNames.SQL);
          sql.setValue(sqlMetaDataList.get(0).getSql());
          annotationBoList.add(sql);
        }
 else {
        }
      }
 else {
        AnnotationBo api=new AnnotationBo();
        api.setKey(AnnotationNames.SQL_METADATA);
        api.setValue(collisionSqlHashCodeMessage(hashCode,sqlMetaDataList));
        annotationBoList.add(api);
      }
    }
  }
);
}","private void transitionSqlId(final List<SpanAlign> spans){
  this.transitionAnnotation(spans,new AnnotationReplacementCallback(){
    @Override public void replacement(    SpanAlign spanAlign,    List<AnnotationBo> annotationBoList){
      AnnotationBo sqlIdAnnotation=findAnnotation(annotationBoList,AnnotationNames.SQL_ID);
      if (sqlIdAnnotation == null) {
        return;
      }
      String agentId=getAgentId(spanAlign);
      long startTime=spanAlign.getSpanBo().getStartTime();
      long agentStartTime=agentInfoDao.selectAgentInfoBeforeStartTime(agentId,startTime);
      logger.info(""String_Node_Str"",agentId,agentStartTime);
      int hashCode=(Integer)sqlIdAnnotation.getValue();
      List<SqlMetaDataBo> sqlMetaDataList=sqlMetaDataDao.getSqlMetaData(agentId,hashCode,agentStartTime);
      int size=sqlMetaDataList.size();
      if (size == 0) {
        AnnotationBo api=new AnnotationBo();
        api.setKey(AnnotationNames.SQL_METADATA);
        api.setValue(""String_Node_Str"" + hashCode);
        annotationBoList.add(api);
      }
 else       if (size == 1) {
        AnnotationBo sqlParamAnnotationBo=findAnnotation(annotationBoList,AnnotationNames.SQL_PARAM);
        if (sqlParamAnnotationBo == null) {
          AnnotationBo sqlMeta=new AnnotationBo();
          sqlMeta.setKey(AnnotationNames.SQL_METADATA);
          sqlMeta.setValue(sqlMetaDataList.get(0).getSql());
          annotationBoList.add(sqlMeta);
          AnnotationBo sql=new AnnotationBo();
          sql.setKey(AnnotationNames.SQL);
          sql.setValue(sqlMetaDataList.get(0).getSql());
          annotationBoList.add(sql);
        }
 else {
        }
      }
 else {
        AnnotationBo api=new AnnotationBo();
        api.setKey(AnnotationNames.SQL_METADATA);
        api.setValue(collisionSqlHashCodeMessage(hashCode,sqlMetaDataList));
        annotationBoList.add(api);
      }
    }
  }
);
}"
