record_number,buggy_code,fixed_code
85001,"public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  mcc.getInstance().CommandCheck(player,split,spawn);
}","public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(target).getParty())) {
        player.teleportTo(target);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
        target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
      }
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      if (mcUsers.getProfile(target).inParty())       player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getParty());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getMining());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getRepair());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    spawn=player.getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getMining());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting());
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getParty()+ ""String_Node_Str"");
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split.length > 1 && split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (split.length >= 2) {
      mcUsers.getProfile(player).setParty(split[1]);
      player.sendMessage(""String_Node_Str"" + split[1]);
      informPartyMembers(player);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcUsers.getProfile(player).getMySpawn(player) != null) {
      player.getInventory().clear();
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}"
85002,"public static boolean inSameParty(Player playera,Player playerb){
  if (mcUsers.getProfile(playera).getParty().equals(mcUsers.getProfile(playerb).getParty())) {
    return true;
  }
 else {
    return false;
  }
}","public boolean inSameParty(Player playera,Player playerb){
  if (mcUsers.getProfile(playera).getParty().equals(mcUsers.getProfile(playerb).getParty())) {
    return true;
  }
 else {
    return false;
  }
}"
85003,"public boolean onConsoleCommand(String[] split){
  String server=Colors.LightGreen + ""String_Node_Str"" + Colors.DarkPurple;
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length > 1) {
      String args=""String_Node_Str"" + etc.combineSplit(1,split,""String_Node_Str"");
      vChat.gmsg(server + ""String_Node_Str"" + args);
      log.log(Level.INFO,""String_Node_Str"" + args);
      return true;
    }
    return false;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str""))   vChat.gmsg(server + ""String_Node_Str"");
  log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"");
  return false;
}","public boolean onConsoleCommand(String[] split){
  String server=Colors.LightGreen + ""String_Node_Str"" + Colors.DarkPurple;
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length > 1) {
      String args=""String_Node_Str"" + etc.combineSplit(1,split,""String_Node_Str"");
      vChat.gmsg(server + ""String_Node_Str"" + args);
      log.log(Level.INFO,""String_Node_Str"" + args);
      return true;
    }
    return false;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    vChat.gmsg(server + ""String_Node_Str"");
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"");
  }
  return false;
}"
85004,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    if (args.length < 2) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (player != other && other.hasControlOver(player)) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      other.setPrefix(args[1]);
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      FlatFileSource ffs=new FlatFileSource();
      ffs.modifyPlayer(other);
    }
    if (args.length >= 3 && args[1] != null) {
      String tagbag=etc.combineSplit(2,args,""String_Node_Str"");
      vUsers.players.findProfile(other).setTag(tagbag);
      player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
      log.log(Level.INFO,player + ""String_Node_Str"" + tagbag);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    if (args.length < 2) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (player != other && other.hasControlOver(player)) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      other.setPrefix(args[1]);
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      FlatFileSource ffs=new FlatFileSource();
      ffs.modifyPlayer(other);
    }
    if (args.length >= 3 && args[1] != null) {
      vUsers.players.findProfile(other).setTag(args[2]);
      player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
      log.log(Level.INFO,player + ""String_Node_Str"" + args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}"
85005,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    if (args.length < 2) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (player != other && other.hasControlOver(player)) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      other.setPrefix(args[1]);
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      FlatFileSource ffs=new FlatFileSource();
      ffs.modifyPlayer(other);
    }
    if (args.length >= 3 && args[1] != null) {
      vUsers.players.findProfile(other).setTag(args[2]);
      player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    if (args.length < 2) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (player != other && other.hasControlOver(player)) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      other.setPrefix(args[1]);
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      FlatFileSource ffs=new FlatFileSource();
      ffs.modifyPlayer(other);
    }
    if (args.length >= 3 && args[1] != null) {
      String tagbag=etc.combineSplit(2,args,""String_Node_Str"");
      vUsers.players.findProfile(other).setTag(tagbag);
      player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
      log.log(Level.INFO,player + ""String_Node_Str"" + tagbag);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}"
85006,"public String getGroupPrefix(Player player){
  String groups[]=player.getGroups();
  String groupline[]=null;
  String prefix=Colors.White;
  if (vConfig.getInstance().groupcoloredbrackets()) {
    properties=new PropertiesFile(location);
    try {
      properties.load();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
    if (!groups[0].isEmpty())     groupline=properties.getString(groups[0]).split(""String_Node_Str"");
    if (groupline[0] != null) {
      prefix=groupline[0];
      prefix=vChat.colorChange(prefix.charAt(0));
    }
  }
  return prefix;
}","public String getGroupPrefix(Player player){
  String groups[]=player.getGroups();
  String groupline[]=null;
  String prefix=Colors.White;
  if (vConfig.getInstance().groupcoloredbrackets() && groups[0].toString().length() > 0) {
    properties=new PropertiesFile(location);
    try {
      properties.load();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
    groupline=properties.getString(groups[0]).split(""String_Node_Str"");
    if (!groupline[0].isEmpty()) {
      prefix=groupline[0];
      prefix=vChat.colorChange(prefix.charAt(0));
    }
  }
  return prefix;
}"
85007,"public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(playerTarget).setTpback(xyz);
    if (playerTarget.canUseCommand(""String_Node_Str"")) {
      playerTarget.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}","public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(playerTarget).setTpback(xyz);
    if (playerTarget.canUseCommand(""String_Node_Str"")) {
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}"
85008,"public static int teleport(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTp())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"");
 else {
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(player).setTpback(xyz);
    if (player.canUseCommand(""String_Node_Str"")) {
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
    if (!vMinecraftUsers.getProfile(player).isSilent()) {
      vMinecraftChat.gmsg(player,vMinecraftChat.getName(player) + Colors.LightBlue + ""String_Node_Str""+ vMinecraftChat.getName(playerTarget));
    }
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName());
    player.teleportTo(playerTarget);
  }
  return EXIT_SUCCESS;
}","public static int teleport(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTp())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"");
 else {
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(player).setTpback(xyz);
    if (player.canUseCommand(""String_Node_Str"")) {
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
    if (!vMinecraftUsers.getProfile(player).isSilent()) {
      vMinecraftChat.gmsg(player,vMinecraftChat.getName(player) + Colors.LightBlue + ""String_Node_Str""+ vMinecraftChat.getName(playerTarget));
    }
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName());
    player.teleportTo(playerTarget);
  }
  return EXIT_SUCCESS;
}"
85009,"public static int silent(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    vMinecraftUsers.getProfile(player).setSilent();
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  return EXIT_FAIL;
}","public static int silent(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (!vMinecraftUsers.getProfile(player).isSilent()) {
      vMinecraftUsers.getProfile(player).setSilent();
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vMinecraftUsers.getProfile(player).isSilent()) {
      vMinecraftUsers.getProfile(player).disableSilent();
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    return EXIT_FAIL;
  }
  return EXIT_FAIL;
}"
85010,"public boolean isSilent(){
  if (silent == true) {
    return true;
  }
 else {
    return false;
  }
}","public boolean isSilent(){
  return silent;
}"
85011,"public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(playerTarget).setTpback(xyz);
    if (playerTarget.canUseCommand(""String_Node_Str"")) {
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}","public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(playerTarget).setTpback(xyz);
    if (playerTarget.canUseCommand(""String_Node_Str"")) {
      playerTarget.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      playerTarget.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}"
85012,"public static int promote(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player target=etc.getServer().matchPlayer(args[0]);
  if (target == null) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String[] ranks=vMinecraftSettings.getInstance().getRanks();
  String[] tarGroups=target.getGroups();
  int tarRank=0, tarPos=0;
  boolean leave=false;
  for (  String rank : ranks) {
    for (    String group : tarGroups) {
      if (rank.equalsIgnoreCase(group)) {
        leave=true;
        break;
      }
 else       tarPos++;
    }
    if (leave)     break;
    tarRank++;
    tarPos=0;
  }
  if (!leave) {
    tarRank=0;
    tarPos=0;
    if (tarGroups != null) {
      String[] tempGroups=new String[tarGroups.length + 1];
      System.arraycopy(tarGroups,0,tempGroups,1,tarGroups.length);
      tarGroups=tempGroups;
    }
 else     tarGroups=new String[1];
  }
  leave=false;
  String[] myGroups=player.getGroups();
  int myRank=0;
  for (  String rank : ranks) {
    for (    String group : myGroups)     if (rank.equalsIgnoreCase(group)) {
      log.log(Level.INFO,myRank + ""String_Node_Str"");
      leave=true;
      break;
    }
    if (leave)     break;
    myRank++;
  }
  if (!leave)   myRank=0;
  log.log(Level.INFO,myRank + ""String_Node_Str"" + tarRank);
  if (myRank <= tarRank + 1) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  tarGroups[tarPos]=ranks[tarRank + 1];
  target.setGroups(tarGroups);
  FlatFileSource ffs=new FlatFileSource();
  if (!ffs.doesPlayerExist(target.getName())) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    ffs.addPlayer(target);
  }
 else {
    ffs.modifyPlayer(target);
  }
  vMinecraftChat.sendMessage(player,Colors.Rose + target.getName() + ""String_Node_Str""+ ranks[tarRank + 1]+ ""String_Node_Str"");
  vMinecraftChat.sendMessage(target,Colors.Rose + ""String_Node_Str"" + ranks[tarRank + 1]+ ""String_Node_Str"");
  return EXIT_SUCCESS;
}","public static int promote(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player target=etc.getServer().matchPlayer(args[0]);
  if (target == null) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String[] ranks=vMinecraftSettings.getInstance().getRanks();
  String[] tarGroups=target.getGroups();
  int tarRank=0, tarPos=0;
  boolean leave=false;
  for (  String rank : ranks) {
    for (    String group : tarGroups) {
      if (rank.equalsIgnoreCase(group)) {
        leave=true;
        break;
      }
 else       tarPos++;
    }
    if (leave)     break;
    tarRank++;
    tarPos=0;
  }
  if (!leave) {
    tarRank=0;
    tarPos=0;
    if (tarGroups != null) {
      String[] tempGroups=new String[tarGroups.length + 1];
      System.arraycopy(tarGroups,0,tempGroups,1,tarGroups.length);
      tarGroups=tempGroups;
    }
 else     tarGroups=new String[1];
  }
  leave=false;
  String[] myGroups=player.getGroups();
  int myRank=0;
  for (  String rank : ranks) {
    for (    String group : myGroups)     if (rank.equalsIgnoreCase(group)) {
      leave=true;
      break;
    }
    if (leave)     break;
    myRank++;
  }
  if (!leave)   myRank=0;
  if (myRank <= tarRank + 1) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  tarGroups[tarPos]=ranks[tarRank + 1];
  target.setGroups(tarGroups);
  FlatFileSource ffs=new FlatFileSource();
  if (!ffs.doesPlayerExist(target.getName())) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    ffs.addPlayer(target);
  }
 else {
    ffs.modifyPlayer(target);
  }
  vMinecraftChat.sendMessage(player,Colors.Rose + target.getName() + ""String_Node_Str""+ ranks[tarRank + 1]+ ""String_Node_Str"");
  vMinecraftChat.sendMessage(target,Colors.Rose + ""String_Node_Str"" + ranks[tarRank + 1]+ ""String_Node_Str"");
  return EXIT_SUCCESS;
}"
85013,"public static int reload(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  vMinecraftSettings.getInstance().loadSettings();
  return EXIT_SUCCESS;
}","public static int reload(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  vMinecraftSettings.getInstance().loadSettings();
  return EXIT_FAIL;
}"
85014,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 15) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args[1].length() > 15) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}"
85015,"public static int suffix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.getProfile(other).setSuffix(args[1]);
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args[0].length() > 10) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  vMinecraftUsers.getProfile(player).setSuffix(args[0]);
  return EXIT_SUCCESS;
}","public static int suffix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 20) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.getProfile(other).setSuffix(args[1]);
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args[0].length() > 20) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  vMinecraftUsers.getProfile(player).setSuffix(args[0]);
  return EXIT_SUCCESS;
}"
85016,"public static int nickName(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 20) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.getProfile(other).setNick(args[1]);
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args[0].length() > 20) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  vMinecraftUsers.getProfile(player).setNick(args[0]);
  return EXIT_SUCCESS;
}","public static int nickName(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 30) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.getProfile(other).setNick(args[1]);
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args[0].length() > 30) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  vMinecraftUsers.getProfile(player).setNick(args[0]);
  return EXIT_SUCCESS;
}"
85017,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 15) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args[1].length() > 15) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 15) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (args[1].length() > 15) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}"
85018,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 20) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}"
85019,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}"
85020,"public static boolean adminChat(Player player,String message){
  if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
    String adminchat=Colors.DarkPurple + ""String_Node_Str"" + getName(player)+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
    if (message.startsWith(""String_Node_Str""))     message=message.substring(1,message.length());
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          sendMessage(player,p,adminchat + message);
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + getName(player) + Colors.White+ ""String_Node_Str""+ message);
    return true;
  }
  return false;
}","public static boolean adminChat(Player player,String message){
  if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
    String adminchat=Colors.DarkPurple + ""String_Node_Str"" + getName(player)+ Colors.DarkPurple+ ""String_Node_Str"";
    if (message.startsWith(""String_Node_Str""))     message=message.substring(1,message.length());
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          sendMessage(player,p,adminchat + message);
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + getName(player) + Colors.White+ ""String_Node_Str""+ message);
    return true;
  }
  return false;
}"
85021,"public void addAlias(String name,String callCommand,String[] args){
  aliasList.registerAlias(name,callCommand,args);
}","public void addAlias(String name,String callCommand){
  aliasList.registerAlias(name,callCommand);
}"
85022,"public PlayerProfile(Player player){
  playerName=player.getName();
  nickName=new String();
  tag=new String();
  suffix=new String();
  ignoreList=new ArrayList<Player>();
  aliasList=new commandList();
  String location=""String_Node_Str"";
  try {
    Scanner scanner=new Scanner(new File(location));
    while (scanner.hasNextLine()) {
      String line=scanner.nextLine();
      if (line.startsWith(""String_Node_Str"") || line.equals(""String_Node_Str"") || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      String[] split=line.split(""String_Node_Str"");
      if (split.length > 0 && split[0].equalsIgnoreCase(player.getName())) {
        nickName=(split[1].split(""String_Node_Str"").toString());
        suffix=split[2];
        if (split.length >= 4) {
          tag=(split[3]);
        }
        if (split.length >= 5) {
          for (          String name : split[4].split(""String_Node_Str""))           ignoreList.add(etc.getServer().getPlayer(name));
        }
        if (split.length >= 6) {
          for (          String alias : split[5].split(""String_Node_Str"")) {
            String[] parts=alias.split(""String_Node_Str"");
            if (parts.length > 1) {
              String[] command=parts[1].split(""String_Node_Str"");
              String[] args=null;
              if (command.length > 1)               System.arraycopy(command,1,args,0,command.length - 2);
              aliasList.registerAlias(parts[0],command[0],args);
            }
          }
        }
        break;
      }
    }
    scanner.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
}","public PlayerProfile(Player player){
  playerName=player.getName();
  nickName=new String();
  tag=new String();
  suffix=new String();
  ignoreList=new ArrayList<Player>();
  aliasList=new commandList();
  String location=""String_Node_Str"";
  try {
    Scanner scanner=new Scanner(new File(location));
    while (scanner.hasNextLine()) {
      String line=scanner.nextLine();
      if (line.startsWith(""String_Node_Str"") || line.equals(""String_Node_Str"") || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      String[] split=line.split(""String_Node_Str"");
      if (split.length > 0 && split[0].equalsIgnoreCase(player.getName())) {
        nickName=(split[1].split(""String_Node_Str"").toString());
        suffix=split[2];
        if (split.length >= 4) {
          tag=(split[3]);
        }
        if (split.length >= 5) {
          for (          String name : split[4].split(""String_Node_Str""))           ignoreList.add(etc.getServer().getPlayer(name));
        }
        if (split.length >= 6) {
          for (          String alias : split[5].split(""String_Node_Str"")) {
            String[] parts=alias.split(""String_Node_Str"");
            if (parts.length > 1) {
              aliasList.registerAlias(parts[0],parts[2]);
            }
          }
        }
        break;
      }
    }
    scanner.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
}"
85023,"public static int addIgnored(Player player,String[] args){
  if (args.length > 0) {
    Player ignore=etc.getServer().matchPlayer(args[0]);
    if (ignore != null) {
      if (!ignore.getName().equalsIgnoreCase(player.getName())) {
        if (vMinecraftUsers.getProfile(player).addIgnore(ignore))         vMinecraftChat.sendMessage(player,player,Colors.Rose + ignore.getName() + ""String_Node_Str""+ ""String_Node_Str"");
 else         vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + ignore.getName());
      }
 else       vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    }
 else     vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
  }
 else   vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
  return EXIT_SUCCESS;
}","public static int addIgnored(Player player,String[] args){
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player ignore=etc.getServer().matchPlayer(args[0]);
  if (ignore == null) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (!ignore.getName().equalsIgnoreCase(player.getName())) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (vMinecraftUsers.getProfile(player).addIgnore(ignore))   vMinecraftChat.sendMessage(player,player,Colors.Rose + ignore.getName() + ""String_Node_Str"");
 else   vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + ignore.getName());
  return EXIT_SUCCESS;
}"
85024,"public static int adminChatToggle(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().adminChatToggle())   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().isAdminToggled(player.getName())) {
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().removeAdminToggled(player.getName());
  }
 else {
    player.sendMessage(Colors.Blue + ""String_Node_Str"");
    vMinecraftSettings.getInstance().addAdminToggled(player.getName());
  }
  return EXIT_SUCCESS;
}","public static int adminChatToggle(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().adminChatToggle())   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().isAdminToggled(player.getName())) {
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().removeAdminToggled(player.getName());
  }
 else {
    player.sendMessage(Colors.Blue + ""String_Node_Str"");
    vMinecraftSettings.getInstance().addAdminToggled(player.getName());
  }
  return EXIT_SUCCESS;
}"
85025,"public static int rules(Player player,String[] args){
  if (vMinecraftSettings.getInstance().cmdRules() && vMinecraftSettings.getInstance().getRules().length > 0) {
    return EXIT_FAIL;
  }
  String[] rules=vMinecraftChat.applyColors(vMinecraftSettings.getInstance().getRules());
  for (  String str : rules) {
    if (!str.isEmpty())     player.sendMessage(Colors.Blue + str);
 else     player.sendMessage(Colors.Blue + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int rules(Player player,String[] args){
  if (!vMinecraftSettings.getInstance().cmdRules() && vMinecraftSettings.getInstance().getRules().length > 0 && !vMinecraftSettings.getInstance().getRules()[0].isEmpty()) {
    return EXIT_FAIL;
  }
  String[] rules=vMinecraftChat.applyColors(vMinecraftSettings.getInstance().getRules());
  for (  String str : rules) {
    if (!str.isEmpty())     player.sendMessage(Colors.Blue + str);
 else     player.sendMessage(Colors.Blue + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}"
85026,"public static int ezlist(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  player.sendMessage(""String_Node_Str"" + vMinecraftSettings.getInstance().ezModoList());
  return EXIT_SUCCESS;
}","public static int ezlist(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  player.sendMessage(""String_Node_Str"" + vMinecraftSettings.getInstance().ezModoList());
  return EXIT_SUCCESS;
}"
85027,"public static int invuln(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().isEzModo(player.getName())) {
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().removeEzModo(player.getName());
  }
 else {
    player.sendMessage(Colors.LightBlue + ""String_Node_Str"");
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.LightBlue + ""String_Node_Str"" + ""String_Node_Str"");
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().addEzModo(player.getName());
  }
  return EXIT_SUCCESS;
}","public static int invuln(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().isEzModo(player.getName())) {
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().removeEzModo(player.getName());
  }
 else {
    player.sendMessage(Colors.LightBlue + ""String_Node_Str"");
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.LightBlue + ""String_Node_Str"" + ""String_Node_Str"");
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().addEzModo(player.getName());
  }
  return EXIT_SUCCESS;
}"
85028,"public static int whois(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdWhoIs())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget != null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  player.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(playerTarget));
  for (  String group : playerTarget.getGroups())   player.sendMessage(Colors.Blue + ""String_Node_Str"" + group);
  if (player.isAdmin()) {
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + String.valueOf(playerTarget.isAdmin()));
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + playerTarget.getIP());
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + String.valueOf(playerTarget.canIgnoreRestrictions()));
  }
  return EXIT_SUCCESS;
}","public static int whois(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdWhoIs())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  player.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(playerTarget));
  for (  String group : playerTarget.getGroups())   player.sendMessage(Colors.Blue + ""String_Node_Str"" + group);
  if (player.isAdmin()) {
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + String.valueOf(playerTarget.isAdmin()));
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + playerTarget.getIP());
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + String.valueOf(playerTarget.canIgnoreRestrictions()));
  }
  return EXIT_SUCCESS;
}"
85029,"public static int heal(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdHeal())   return EXIT_FAIL;
  if (args.length < 1) {
    player.setHealth(20);
    player.sendMessage(""String_Node_Str"");
  }
 else   if (args.length > 0) {
    Player playerTarget=etc.getServer().matchPlayer(args[0]);
    if (playerTarget != null) {
      playerTarget.setHealth(20);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(playerTarget));
      playerTarget.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(player));
    }
 else     if (playerTarget == null) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}","public static int heal(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdHeal())   return EXIT_FAIL;
  if (args.length < 1) {
    player.setHealth(20);
    player.sendMessage(""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  playerTarget.setHealth(20);
  player.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(playerTarget));
  playerTarget.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(player));
  return EXIT_SUCCESS;
}"
85030,"public static int reply(Player player,String[] args){
  if (vMinecraftUsers.getProfile(player) == null) {
    return EXIT_SUCCESS;
  }
  Player toPlayer=vMinecraftUsers.getProfile(player).getMessage();
  if (toPlayer != null && args.length > 0) {
    String msg=etc.combineSplit(0,args,""String_Node_Str"");
    vMinecraftChat.sendMessage(player,toPlayer,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
    vMinecraftChat.sendMessage(player,player,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(toPlayer)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
    vMinecraftUsers.getProfile(player).setMessage(toPlayer);
    vMinecraftUsers.getProfile(toPlayer).setMessage(player);
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + toPlayer.getName()+ ""String_Node_Str""+ msg);
  }
 else {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int reply(Player player,String[] args){
  if (vMinecraftUsers.getProfile(player) == null) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player toPlayer=vMinecraftUsers.getProfile(player).getMessage();
  if (toPlayer == null) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String msg=etc.combineSplit(0,args,""String_Node_Str"");
  vMinecraftChat.sendMessage(player,toPlayer,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
  vMinecraftChat.sendMessage(player,player,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(toPlayer)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
  vMinecraftUsers.getProfile(player).setMessage(toPlayer);
  vMinecraftUsers.getProfile(toPlayer).setMessage(player);
  log.log(Level.INFO,player.getName() + ""String_Node_Str"" + toPlayer.getName()+ ""String_Node_Str""+ msg);
  return EXIT_SUCCESS;
}"
85031,"public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
  }
  return EXIT_SUCCESS;
}","public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
  }
  return EXIT_SUCCESS;
}"
85032,"public static int slay(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (vMinecraftSettings.getInstance().isEzModo(playerTarget.getName())) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
  }
  playerTarget.setHealth(0);
  vMinecraftChat.gmsg(player,vMinecraftChat.getName(player) + Colors.LightBlue + ""String_Node_Str""+ vMinecraftChat.getName(playerTarget));
  return EXIT_SUCCESS;
}","public static int slay(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (vMinecraftSettings.getInstance().isEzModo(playerTarget.getName())) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
  }
  playerTarget.setHealth(0);
  vMinecraftChat.gmsg(player,vMinecraftChat.getName(player) + Colors.LightBlue + ""String_Node_Str""+ vMinecraftChat.getName(playerTarget));
  return EXIT_SUCCESS;
}"
85033,"public static int say(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdSay())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  vMinecraftChat.gmsg(player,Colors.Yellow + etc.combineSplit(0,args,""String_Node_Str""));
  return EXIT_SUCCESS;
}","public static int say(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdSay())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  vMinecraftChat.gmsg(player,Colors.Yellow + etc.combineSplit(0,args,""String_Node_Str""));
  return EXIT_SUCCESS;
}"
85034,"public static int message(Player player,String[] args){
  if (args.length > 1) {
    String msg=etc.combineSplit(1,args,""String_Node_Str"");
    Player toPlayer=etc.getServer().matchPlayer(args[0]);
    if (toPlayer != null && args.length > 0) {
      vMinecraftChat.sendMessage(player,toPlayer,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
      vMinecraftChat.sendMessage(player,player,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(toPlayer)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
      vMinecraftUsers.getProfile(player).setMessage(toPlayer);
      vMinecraftUsers.getProfile(toPlayer).setMessage(player);
      log.log(Level.INFO,player.getName() + ""String_Node_Str"" + toPlayer.getName()+ ""String_Node_Str""+ msg);
    }
 else {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    }
  }
 else {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int message(Player player,String[] args){
  if (args.length > 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player toPlayer=etc.getServer().matchPlayer(args[0]);
  if (toPlayer != null && args.length > 0) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String msg=etc.combineSplit(1,args,""String_Node_Str"");
  vMinecraftChat.sendMessage(player,toPlayer,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
  vMinecraftChat.sendMessage(player,player,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(toPlayer)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
  vMinecraftUsers.getProfile(player).setMessage(toPlayer);
  vMinecraftUsers.getProfile(toPlayer).setMessage(player);
  log.log(Level.INFO,player.getName() + ""String_Node_Str"" + toPlayer.getName()+ ""String_Node_Str""+ msg);
  return EXIT_SUCCESS;
}"
85035,"public static int masstp(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (vMinecraftSettings.getInstance().cmdMasstp())   return EXIT_FAIL;
  for (  Player p : etc.getServer().getPlayerList()) {
    if (!p.hasControlOver(player)) {
      p.teleportTo(player);
    }
  }
  player.sendMessage(Colors.Blue + ""String_Node_Str"");
  return EXIT_SUCCESS;
}","public static int masstp(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdMasstp())   return EXIT_FAIL;
  for (  Player p : etc.getServer().getPlayerList()) {
    if (!p.hasControlOver(player)) {
      p.teleportTo(player);
    }
  }
  player.sendMessage(Colors.Blue + ""String_Node_Str"");
  return EXIT_SUCCESS;
}"
85036,"public static int fabulous(Player player,String[] args){
  if (vMinecraftSettings.getInstance().cmdFabulous())   return EXIT_FAIL;
  if (args.length < 1) {
    return EXIT_SUCCESS;
  }
  String playerName=Colors.White + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.White+ ""String_Node_Str"";
  String str=etc.combineSplit(0,args,""String_Node_Str"");
  log.log(Level.INFO,player.getName() + ""String_Node_Str"" + str+ ""String_Node_Str"");
  vMinecraftChat.gmsg(player,playerName + vMinecraftChat.rainbow(str));
  return EXIT_SUCCESS;
}","public static int fabulous(Player player,String[] args){
  if (!vMinecraftSettings.getInstance().cmdFabulous())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String playerName=Colors.White + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.White+ ""String_Node_Str"";
  String str=etc.combineSplit(0,args,""String_Node_Str"");
  log.log(Level.INFO,player.getName() + ""String_Node_Str"" + str+ ""String_Node_Str"");
  vMinecraftChat.gmsg(player,playerName + vMinecraftChat.rainbow(str));
  return EXIT_SUCCESS;
}"
85037,"public static int who(Player player,String[] args){
  if (vMinecraftSettings.getInstance().cmdWho())   return EXIT_FAIL;
  int count=0;
  String tempList=""String_Node_Str"";
  for (  Player p : etc.getServer().getPlayerList()) {
    if (p != null) {
      if (count == 0)       tempList+=vMinecraftChat.getName(p);
 else       tempList+=Colors.White + ""String_Node_Str"" + vMinecraftChat.getName(p);
      count++;
    }
  }
  PropertiesFile server=new PropertiesFile(""String_Node_Str"");
  try {
    server.load();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int maxPlayers=server.getInt(""String_Node_Str"");
  vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + count+ ""String_Node_Str""+ maxPlayers+ ""String_Node_Str""+ tempList);
  return EXIT_SUCCESS;
}","public static int who(Player player,String[] args){
  if (!vMinecraftSettings.getInstance().cmdWho())   return EXIT_FAIL;
  int count=0;
  String tempList=""String_Node_Str"";
  for (  Player p : etc.getServer().getPlayerList()) {
    if (p != null) {
      if (count == 0)       tempList+=vMinecraftChat.getName(p);
 else       tempList+=Colors.White + ""String_Node_Str"" + vMinecraftChat.getName(p);
      count++;
    }
  }
  PropertiesFile server=new PropertiesFile(""String_Node_Str"");
  try {
    server.load();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int maxPlayers=server.getInt(""String_Node_Str"");
  vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + count+ ""String_Node_Str""+ maxPlayers+ ""String_Node_Str""+ tempList);
  return EXIT_SUCCESS;
}"
85038,"public boolean onChat(Player player,String message){
  String temp2=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str"";
  String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
  String message2=""String_Node_Str"";
  String check=temp2 + message;
  if (settings.getInstance().adminchat() && message.startsWith(""String_Node_Str"") && (player.isAdmin() || player.canUseCommand(""String_Node_Str""))) {
    for (    Player p : etc.getServer().getPlayerList()) {
      String blaa=""String_Node_Str"";
      if (p != null) {
        if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
          for (int x=1; x < message.length(); x++) {
            blaa+=message.charAt(x);
          }
          if (p.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
            if (p != null) {
              p.sendMessage(adminchat + blaa);
            }
          }
        }
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + temp2 + message);
    return true;
  }
  if (settings.getInstance().greentext() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.LightGreen + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().FFF() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.Red + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().quakeColors() && message.length() > 2 && other.lengthCheck(check)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=other.colorChange(message.charAt(x + 1));
        x+=1;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=temp2 + temp + ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        other.gmsg(message);
        return true;
      }
    }
  }
  return false;
}","public boolean onChat(Player player,String message){
  String temp2=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str"";
  String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
  String message2=""String_Node_Str"";
  String check=temp2 + message;
  if (settings.getInstance().adminchat() && message.startsWith(""String_Node_Str"") && (player.isAdmin() || player.canUseCommand(""String_Node_Str""))) {
    for (    Player p : etc.getServer().getPlayerList()) {
      String blaa=""String_Node_Str"";
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          for (int x=1; x < message.length(); x++) {
            blaa+=message.charAt(x);
          }
          if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
            if (p != null) {
              p.sendMessage(adminchat + blaa);
            }
          }
        }
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + temp2 + message);
    return true;
  }
  if (settings.getInstance().greentext() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.LightGreen + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().FFF() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.Red + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().quakeColors() && message.length() > 2 && other.lengthCheck(check)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=other.colorChange(message.charAt(x + 1));
        x+=1;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=temp2 + temp + ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        other.gmsg(message);
        return true;
      }
    }
  }
  return false;
}"
85039,"public static boolean adminChat(Player player,String message){
  if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
    String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          p.sendMessage(adminchat + message.substring(1,message.length()));
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str""+ message);
    return true;
  }
  return false;
}","public static boolean adminChat(Player player,String message){
  if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
    String adminchat=Colors.DarkPurple + ""String_Node_Str"" + nameColor(player)+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
    String[] msg=wordWrap(player,message.substring(1,message.length()));
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          p.sendMessage(adminchat + msg[0]);
          String[] tempOut=new String[msg.length - 1];
          System.arraycopy(msg,1,tempOut,0,tempOut.length);
          for (          String str : tempOut)           p.sendMessage(str);
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str""+ message);
    return true;
  }
  return false;
}"
85040,"public static boolean quote(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().greentext()) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    gmsg(playerName + Colors.LightGreen + message);
  }
  return false;
}","public static boolean quote(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().greentext()) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    String[] msg=wordWrap(player,message);
    gmsg(playerName + Colors.LightGreen + msg[0]);
    String[] tempOut=new String[msg.length - 1];
    System.arraycopy(msg,1,tempOut,0,tempOut.length);
    for (    String str : tempOut)     gmsg(Colors.LightGreen + str);
    return true;
  }
  return false;
}"
85041,"public static boolean rage(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().FFF()) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    gmsg(playerName + Colors.Red + message);
    return true;
  }
  return false;
}","public static boolean rage(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().FFF()) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    String[] msg=wordWrap(player,message);
    gmsg(playerName + Colors.Red + msg[0]);
    String[] tempOut=new String[msg.length - 1];
    System.arraycopy(msg,1,tempOut,0,tempOut.length);
    for (    String str : tempOut)     gmsg(Colors.Red + str);
    return true;
  }
  return false;
}"
85042,"public static boolean quakeColors(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().quakeColors() && message.length() > 2 && vminecraftChat.lengthCheck(playerName + message)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=vminecraftChat.colorChange(message.charAt(x + 1));
        x++;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    gmsg(playerName + temp + ""String_Node_Str"");
    return true;
  }
  return false;
}","public static boolean quakeColors(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().quakeColors() && message.length() > 2) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    String[] msg=wordWrap(player,message);
    applyColors(msg);
    gmsg(playerName + msg[0]);
    String[] tempOut=new String[msg.length - 1];
    System.arraycopy(msg,1,tempOut,0,tempOut.length);
    for (    String str : tempOut)     gmsg(str);
    return true;
  }
  return false;
}"
85043,"public void loadSettings(){
  if (properties == null) {
    String location=""String_Node_Str"";
    properties=new PropertiesFile(""String_Node_Str"");
    FileWriter writer=null;
    try {
      writer=new FileWriter(location);
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
 finally {
      try {
        if (writer != null) {
          writer.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + location,e);
      }
    }
  }
 else {
    properties.load();
  }
  try {
    adminChat=properties.getBoolean(""String_Node_Str"",true);
    greentext=properties.getBoolean(""String_Node_Str"",true);
    FFF=properties.getBoolean(""String_Node_Str"",true);
    quakeColors=properties.getBoolean(""String_Node_Str"",true);
    cmdFabulous=properties.getBoolean(""String_Node_Str"",true);
    cmdPromote=properties.getBoolean(""String_Node_Str"",true);
    cmdDemote=properties.getBoolean(""String_Node_Str"",true);
    cmdWhoIs=properties.getBoolean(""String_Node_Str"",true);
    cmdRules=properties.getBoolean(""String_Node_Str"",true);
    cmdTp=properties.getBoolean(""String_Node_Str"",true);
    cmdMasstp=properties.getBoolean(""String_Node_Str"",true);
    cmdTphere=properties.getBoolean(""String_Node_Str"",true);
    globalmessages=properties.getBoolean(""String_Node_Str"",true);
    cmdSay=properties.getBoolean(""String_Node_Str"",true);
    rules=properties.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    id.a.log(Level.INFO,""String_Node_Str"");
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"");
  }
}","public void loadSettings(){
  File theDir=new File(""String_Node_Str"");
  if (!theDir.exists()) {
    String location=""String_Node_Str"";
    properties=new PropertiesFile(""String_Node_Str"");
    FileWriter writer=null;
    try {
      writer=new FileWriter(location);
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
 finally {
      try {
        if (writer != null) {
          writer.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + location,e);
      }
    }
  }
 else {
    properties=new PropertiesFile(""String_Node_Str"");
    properties.load();
  }
  try {
    adminChat=properties.getBoolean(""String_Node_Str"",true);
    greentext=properties.getBoolean(""String_Node_Str"",true);
    FFF=properties.getBoolean(""String_Node_Str"",true);
    quakeColors=properties.getBoolean(""String_Node_Str"",true);
    cmdFabulous=properties.getBoolean(""String_Node_Str"",true);
    cmdPromote=properties.getBoolean(""String_Node_Str"",true);
    cmdDemote=properties.getBoolean(""String_Node_Str"",true);
    cmdWhoIs=properties.getBoolean(""String_Node_Str"",true);
    cmdRules=properties.getBoolean(""String_Node_Str"",true);
    cmdTp=properties.getBoolean(""String_Node_Str"",true);
    cmdMasstp=properties.getBoolean(""String_Node_Str"",true);
    cmdTphere=properties.getBoolean(""String_Node_Str"",true);
    globalmessages=properties.getBoolean(""String_Node_Str"",true);
    cmdSay=properties.getBoolean(""String_Node_Str"",true);
    rules=properties.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    log.log(Level.INFO,""String_Node_Str"");
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"");
  }
}"
85044,"public void disable(){
  id.a.log(Level.INFO,""String_Node_Str"");
}","public void disable(){
  log.log(Level.INFO,""String_Node_Str"");
}"
85045,"public void enable(){
  settings.getInstance().loadSettings();
  id.a.log(Level.INFO,""String_Node_Str"");
}","public void enable(){
  settings.getInstance().loadSettings();
  log.log(Level.INFO,""String_Node_Str"");
}"
85046,"public boolean onCommand(Player player,String[] split){
  if (!player.canUseCommand(split[0])) {
    return false;
  }
  if (settings.getInstance().cmdMasstp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    Player p : etc.getServer().getPlayerList()) {
      if (!p.hasControlOver(player)) {
        p.teleportTo(player);
      }
    }
    player.sendMessage(Colors.Blue + ""String_Node_Str"");
  }
  if (settings.getInstance().cmdTp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
{
      if (split.length < 2) {
        player.sendMessage(Colors.Rose + ""String_Node_Str"");
        return true;
      }
      Player playerTarget=etc.getServer().matchPlayer(split[1]);
      if (player.getName().equalsIgnoreCase(split[1])) {
        player.sendMessage(Colors.Rose + ""String_Node_Str"");
        return true;
      }
      if (!player.hasControlOver(playerTarget)) {
        player.sendMessage(Colors.Red + ""String_Node_Str"");
        return true;
      }
      if (playerTarget != null) {
        id.a.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName());
        player.teleportTo(playerTarget);
        return true;
      }
 else {
        player.sendMessage(Colors.Rose + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
        return true;
      }
    }
  }
  if (settings.getInstance().cmdTphere() && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (split.length < 2) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      return true;
    }
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (!player.hasControlOver(playerTarget)) {
      player.sendMessage(Colors.Red + ""String_Node_Str"");
      return true;
    }
    if (player.getName().equalsIgnoreCase(split[1])) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      return true;
    }
    if (playerTarget != null) {
      id.a.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      playerTarget.teleportTo(player);
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length <= 2) {
      other.gmsg(Colors.Blue + ""String_Node_Str"" + player.getColor()+ player.getName());
      return false;
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.canUseCommand(""String_Node_Str"")) {
    settings.getInstance().loadSettings();
    return false;
  }
  if (settings.getInstance().cmdRules() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String str : settings.getInstance().getRules()) {
      player.sendMessage(Colors.Blue + str);
    }
    return true;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && settings.getInstance().cmdFabulous()) {
    if (split.length == 1) {
      return false;
    }
    String temp=""String_Node_Str"";
    String str=""String_Node_Str"";
    str=etc.combineSplit(1,split,""String_Node_Str"");
    String temp2=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ str;
    String[] rainbow=new String[]{Colors.Red,Colors.Rose,Colors.Yellow,Colors.Green,Colors.Blue,Colors.LightPurple,Colors.Purple};
    int counter=0;
    if (other.lengthCheck(temp2)) {
      id.a.log(Level.INFO,player.getName() + ""String_Node_Str"" + str+ ""String_Node_Str"");
      for (int x=0; x < str.length(); x++) {
        temp+=rainbow[counter] + str.charAt(x);
        counter++;
        if (str.charAt(x) == ' ') {
          counter--;
        }
        if (counter == -1) {
          counter=6;
        }
        if (counter == 7) {
          counter=0;
        }
      }
      str=temp + ""String_Node_Str"";
      String message=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str""+ str;
      other.gmsg(message);
      return true;
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    return true;
  }
  if (settings.getInstance().cmdWhoIs() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    String admin=""String_Node_Str"";
    String ignore=""String_Node_Str"";
    String IP=""String_Node_Str"";
    Player playerTarget=null;
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p.getName().equalsIgnoreCase(split[1])) {
        playerTarget=p;
      }
    }
    if (playerTarget != null) {
      IP=playerTarget.getIP();
      if (playerTarget.canIgnoreRestrictions()) {
        ignore=""String_Node_Str"";
      }
 else {
        ignore=""String_Node_Str"";
      }
      if (playerTarget.canIgnoreRestrictions()) {
        admin=""String_Node_Str"";
      }
 else {
        admin=""String_Node_Str"";
      }
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
      for (      String group : playerTarget.getGroups()) {
        player.sendMessage(Colors.Blue + ""String_Node_Str"" + group);
      }
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + admin);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + IP);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + ignore);
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    return true;
  }
  if (settings.getInstance().cmdSay() && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    String sayan;
    sayan=etc.combineSplit(1,split,""String_Node_Str"");
    other.gmsg(Colors.Yellow + sayan);
  }
 else {
    return false;
  }
  return true;
}","public boolean onCommand(Player player,String[] split){
  if (!player.canUseCommand(split[0])) {
    return false;
  }
  if (settings.getInstance().cmdMasstp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    Player p : etc.getServer().getPlayerList()) {
      if (!p.hasControlOver(player)) {
        p.teleportTo(player);
      }
    }
    player.sendMessage(Colors.Blue + ""String_Node_Str"");
  }
  if (settings.getInstance().cmdTp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
{
      if (split.length < 2) {
        player.sendMessage(Colors.Rose + ""String_Node_Str"");
        return true;
      }
      Player playerTarget=etc.getServer().matchPlayer(split[1]);
      if (player.getName().equalsIgnoreCase(split[1])) {
        player.sendMessage(Colors.Rose + ""String_Node_Str"");
        return true;
      }
      if (!player.hasControlOver(playerTarget)) {
        player.sendMessage(Colors.Red + ""String_Node_Str"");
        return true;
      }
      if (playerTarget != null) {
        log.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName());
        player.teleportTo(playerTarget);
        return true;
      }
 else {
        player.sendMessage(Colors.Rose + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
        return true;
      }
    }
  }
  if (settings.getInstance().cmdTphere() && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (split.length < 2) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      return true;
    }
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (!player.hasControlOver(playerTarget)) {
      player.sendMessage(Colors.Red + ""String_Node_Str"");
      return true;
    }
    if (player.getName().equalsIgnoreCase(split[1])) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      return true;
    }
    if (playerTarget != null) {
      log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      playerTarget.teleportTo(player);
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length <= 2) {
      other.gmsg(Colors.Blue + ""String_Node_Str"" + player.getColor()+ player.getName());
      return false;
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.canUseCommand(""String_Node_Str"")) {
    settings.getInstance().loadSettings();
    return false;
  }
  if (settings.getInstance().cmdRules() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String str : settings.getInstance().getRules()) {
      player.sendMessage(Colors.Blue + str);
    }
    return true;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && settings.getInstance().cmdFabulous()) {
    if (split.length == 1) {
      return false;
    }
    String temp=""String_Node_Str"";
    String str=""String_Node_Str"";
    str=etc.combineSplit(1,split,""String_Node_Str"");
    String temp2=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ str;
    String[] rainbow=new String[]{Colors.Red,Colors.Rose,Colors.Yellow,Colors.Green,Colors.Blue,Colors.LightPurple,Colors.Purple};
    int counter=0;
    if (other.lengthCheck(temp2)) {
      log.log(Level.INFO,player.getName() + ""String_Node_Str"" + str+ ""String_Node_Str"");
      for (int x=0; x < str.length(); x++) {
        temp+=rainbow[counter] + str.charAt(x);
        counter++;
        if (str.charAt(x) == ' ') {
          counter--;
        }
        if (counter == -1) {
          counter=6;
        }
        if (counter == 7) {
          counter=0;
        }
      }
      str=temp + ""String_Node_Str"";
      String message=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str""+ str;
      other.gmsg(message);
      return true;
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    return true;
  }
  if (settings.getInstance().cmdWhoIs() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    String admin=""String_Node_Str"";
    String ignore=""String_Node_Str"";
    String IP=""String_Node_Str"";
    Player playerTarget=null;
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p.getName().equalsIgnoreCase(split[1])) {
        playerTarget=p;
      }
    }
    if (playerTarget != null) {
      IP=playerTarget.getIP();
      if (playerTarget.canIgnoreRestrictions()) {
        ignore=""String_Node_Str"";
      }
 else {
        ignore=""String_Node_Str"";
      }
      if (playerTarget.canIgnoreRestrictions()) {
        admin=""String_Node_Str"";
      }
 else {
        admin=""String_Node_Str"";
      }
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
      for (      String group : playerTarget.getGroups()) {
        player.sendMessage(Colors.Blue + ""String_Node_Str"" + group);
      }
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + admin);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + IP);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + ignore);
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    return true;
  }
  if (settings.getInstance().cmdSay() && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    String sayan;
    sayan=etc.combineSplit(1,split,""String_Node_Str"");
    other.gmsg(Colors.Yellow + sayan);
  }
 else {
    return false;
  }
  return true;
}"
85047,"public boolean onChat(Player player,String message){
  String temp2=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str"";
  String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
  String message2=""String_Node_Str"";
  String check=temp2 + message;
  if (settings.getInstance().adminchat() && message.startsWith(""String_Node_Str"") && (player.isAdmin() || player.canUseCommand(""String_Node_Str""))) {
    for (    Player p : etc.getServer().getPlayerList()) {
      String blaa=""String_Node_Str"";
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          for (int x=1; x < message.length(); x++) {
            blaa+=message.charAt(x);
          }
          if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
            if (p != null) {
              p.sendMessage(adminchat + blaa);
            }
          }
        }
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + temp2 + message);
    return true;
  }
  if (settings.getInstance().greentext() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.LightGreen + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().FFF() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.Red + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().quakeColors() && message.length() > 2 && other.lengthCheck(check)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=other.colorChange(message.charAt(x + 1));
        x+=1;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=temp2 + temp + ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        other.gmsg(message);
        return true;
      }
    }
  }
  return false;
}","public boolean onChat(Player player,String message){
  String temp2=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str"";
  String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
  String message2=""String_Node_Str"";
  String check=temp2 + message;
  if (settings.getInstance().adminchat() && message.startsWith(""String_Node_Str"") && (player.isAdmin() || player.canUseCommand(""String_Node_Str""))) {
    for (    Player p : etc.getServer().getPlayerList()) {
      String blaa=""String_Node_Str"";
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          for (int x=1; x < message.length(); x++) {
            blaa+=message.charAt(x);
          }
          if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
            if (p != null) {
              p.sendMessage(adminchat + blaa);
            }
          }
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + temp2 + message);
    return true;
  }
  if (settings.getInstance().greentext() && message.startsWith(""String_Node_Str"")) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.LightGreen + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().FFF() && message.startsWith(""String_Node_Str"")) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.Red + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().quakeColors() && message.length() > 2 && other.lengthCheck(check)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=other.colorChange(message.charAt(x + 1));
        x+=1;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=temp2 + temp + ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        other.gmsg(message);
        return true;
      }
    }
  }
  return false;
}"
85048,"public RedisRegistry(URL url){
  super(url);
  if (url.isAnyHost()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  GenericObjectPoolConfig config=new GenericObjectPoolConfig();
  config.setTestOnBorrow(url.getParameter(""String_Node_Str"",true));
  config.setTestOnReturn(url.getParameter(""String_Node_Str"",false));
  config.setTestWhileIdle(url.getParameter(""String_Node_Str"",false));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setMaxIdle(url.getParameter(""String_Node_Str"",0));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setMinIdle(url.getParameter(""String_Node_Str"",0));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setMaxTotal(url.getParameter(""String_Node_Str"",0));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setMaxTotal(url.getParameter(""String_Node_Str"",0));
  if (url.getParameter(""String_Node_Str"",url.getParameter(""String_Node_Str"",0)) > 0)   config.setMaxWaitMillis(url.getParameter(""String_Node_Str"",url.getParameter(""String_Node_Str"",0)));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setNumTestsPerEvictionRun(url.getParameter(""String_Node_Str"",0));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setTimeBetweenEvictionRunsMillis(url.getParameter(""String_Node_Str"",0));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setMinEvictableIdleTimeMillis(url.getParameter(""String_Node_Str"",0));
  String cluster=url.getParameter(""String_Node_Str"",""String_Node_Str"");
  if (!""String_Node_Str"".equals(cluster) && !""String_Node_Str"".equals(cluster)) {
    throw new IllegalArgumentException(""String_Node_Str"" + cluster + ""String_Node_Str"");
  }
  replicate=""String_Node_Str"".equals(cluster);
  List<String> addresses=new ArrayList<String>();
  addresses.add(url.getAddress());
  String[] backups=url.getParameter(Constants.BACKUP_KEY,new String[0]);
  if (backups != null && backups.length > 0) {
    addresses.addAll(Arrays.asList(backups));
  }
  String password=url.getPassword();
  for (  String address : addresses) {
    int i=address.indexOf(':');
    String host;
    int port;
    if (i > 0) {
      host=address.substring(0,i);
      port=Integer.parseInt(address.substring(i + 1));
    }
 else {
      host=address;
      port=DEFAULT_REDIS_PORT;
    }
    if (StringUtils.isEmpty(password)) {
      this.jedisPools.put(address,new JedisPool(config,host,port,url.getParameter(Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT),null,url.getParameter(""String_Node_Str"",0)));
    }
 else {
      this.jedisPools.put(address,new JedisPool(config,host,port,url.getParameter(Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT),password,url.getParameter(""String_Node_Str"",0)));
    }
  }
  this.reconnectPeriod=url.getParameter(Constants.REGISTRY_RECONNECT_PERIOD_KEY,Constants.DEFAULT_REGISTRY_RECONNECT_PERIOD);
  String group=url.getParameter(Constants.GROUP_KEY,DEFAULT_ROOT);
  if (!group.startsWith(Constants.PATH_SEPARATOR)) {
    group=Constants.PATH_SEPARATOR + group;
  }
  if (!group.endsWith(Constants.PATH_SEPARATOR)) {
    group=group + Constants.PATH_SEPARATOR;
  }
  this.root=group;
  this.expirePeriod=url.getParameter(Constants.SESSION_TIMEOUT_KEY,Constants.DEFAULT_SESSION_TIMEOUT);
  this.expireFuture=expireExecutor.scheduleWithFixedDelay(new Runnable(){
    @Override public void run(){
      try {
        deferExpired();
      }
 catch (      Throwable t) {
        logger.error(""String_Node_Str"" + t.getMessage(),t);
      }
    }
  }
,expirePeriod / 2,expirePeriod / 2,TimeUnit.MILLISECONDS);
}","public RedisRegistry(URL url){
  super(url);
  if (url.isAnyHost()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  GenericObjectPoolConfig config=new GenericObjectPoolConfig();
  config.setTestOnBorrow(url.getParameter(""String_Node_Str"",true));
  config.setTestOnReturn(url.getParameter(""String_Node_Str"",false));
  config.setTestWhileIdle(url.getParameter(""String_Node_Str"",false));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setMaxIdle(url.getParameter(""String_Node_Str"",0));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setMinIdle(url.getParameter(""String_Node_Str"",0));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setMaxTotal(url.getParameter(""String_Node_Str"",0));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setMaxTotal(url.getParameter(""String_Node_Str"",0));
  if (url.getParameter(""String_Node_Str"",url.getParameter(""String_Node_Str"",0)) > 0)   config.setMaxWaitMillis(url.getParameter(""String_Node_Str"",url.getParameter(""String_Node_Str"",0)));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setNumTestsPerEvictionRun(url.getParameter(""String_Node_Str"",0));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setTimeBetweenEvictionRunsMillis(url.getParameter(""String_Node_Str"",0));
  if (url.getParameter(""String_Node_Str"",0) > 0)   config.setMinEvictableIdleTimeMillis(url.getParameter(""String_Node_Str"",0));
  String cluster=url.getParameter(""String_Node_Str"",""String_Node_Str"");
  if (!""String_Node_Str"".equals(cluster) && !""String_Node_Str"".equals(cluster)) {
    throw new IllegalArgumentException(""String_Node_Str"" + cluster + ""String_Node_Str"");
  }
  replicate=""String_Node_Str"".equals(cluster);
  List<String> addresses=new ArrayList<String>();
  addresses.add(url.getAddress());
  String[] backups=url.getParameter(Constants.BACKUP_KEY,new String[0]);
  if (backups != null && backups.length > 0) {
    addresses.addAll(Arrays.asList(backups));
  }
  for (  String address : addresses) {
    int i=address.indexOf(':');
    String host;
    int port;
    if (i > 0) {
      host=address.substring(0,i);
      port=Integer.parseInt(address.substring(i + 1));
    }
 else {
      host=address;
      port=DEFAULT_REDIS_PORT;
    }
    this.jedisPools.put(address,new JedisPool(config,host,port,url.getParameter(Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT),StringUtils.isEmpty(url.getPassword()) ? null : url.getPassword(),url.getParameter(""String_Node_Str"",0)));
  }
  this.reconnectPeriod=url.getParameter(Constants.REGISTRY_RECONNECT_PERIOD_KEY,Constants.DEFAULT_REGISTRY_RECONNECT_PERIOD);
  String group=url.getParameter(Constants.GROUP_KEY,DEFAULT_ROOT);
  if (!group.startsWith(Constants.PATH_SEPARATOR)) {
    group=Constants.PATH_SEPARATOR + group;
  }
  if (!group.endsWith(Constants.PATH_SEPARATOR)) {
    group=group + Constants.PATH_SEPARATOR;
  }
  this.root=group;
  this.expirePeriod=url.getParameter(Constants.SESSION_TIMEOUT_KEY,Constants.DEFAULT_SESSION_TIMEOUT);
  this.expireFuture=expireExecutor.scheduleWithFixedDelay(new Runnable(){
    @Override public void run(){
      try {
        deferExpired();
      }
 catch (      Throwable t) {
        logger.error(""String_Node_Str"" + t.getMessage(),t);
      }
    }
  }
,expirePeriod / 2,expirePeriod / 2,TimeUnit.MILLISECONDS);
}"
85049,"@Override public <T>Invoker<T> refer(final Class<T> type,final URL url) throws RpcException {
  try {
    GenericObjectPoolConfig config=new GenericObjectPoolConfig();
    config.setTestOnBorrow(url.getParameter(""String_Node_Str"",true));
    config.setTestOnReturn(url.getParameter(""String_Node_Str"",false));
    config.setTestWhileIdle(url.getParameter(""String_Node_Str"",false));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxIdle(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMinIdle(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxTotal(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxTotal(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxWaitMillis(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setNumTestsPerEvictionRun(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setTimeBetweenEvictionRunsMillis(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMinEvictableIdleTimeMillis(url.getParameter(""String_Node_Str"",0));
    final JedisPool jedisPool=new JedisPool(config,url.getHost(),url.getPort(DEFAULT_PORT),url.getParameter(Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT));
    final int expiry=url.getParameter(""String_Node_Str"",0);
    final String get=url.getParameter(""String_Node_Str"",""String_Node_Str"");
    final String set=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    final String delete=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    return new AbstractInvoker<T>(type,url){
      @Override protected Result doInvoke(      Invocation invocation) throws Throwable {
        Jedis jedis=null;
        try {
          jedis=jedisPool.getResource();
          if (get.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] value=jedis.get(String.valueOf(invocation.getArguments()[0]).getBytes());
            if (value == null) {
              return new RpcResult();
            }
            ObjectInput oin=getSerialization(url).deserialize(url,new ByteArrayInputStream(value));
            return new RpcResult(oin.readObject());
          }
 else           if (set.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 2) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] key=String.valueOf(invocation.getArguments()[0]).getBytes();
            ByteArrayOutputStream output=new ByteArrayOutputStream();
            ObjectOutput value=getSerialization(url).serialize(url,output);
            value.writeObject(invocation.getArguments()[1]);
            jedis.set(key,output.toByteArray());
            if (expiry > 1000) {
              jedis.expire(key,expiry / 1000);
            }
            return new RpcResult();
          }
 else           if (delete.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            jedis.del(String.valueOf(invocation.getArguments()[0]).getBytes());
            return new RpcResult();
          }
 else {
            throw new UnsupportedOperationException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str"");
          }
        }
 catch (        Throwable t) {
          RpcException re=new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
          if (t instanceof TimeoutException || t instanceof SocketTimeoutException) {
            re.setCode(RpcException.TIMEOUT_EXCEPTION);
          }
 else           if (t instanceof JedisConnectionException || t instanceof IOException) {
            re.setCode(RpcException.NETWORK_EXCEPTION);
          }
 else           if (t instanceof JedisDataException) {
            re.setCode(RpcException.SERIALIZATION_EXCEPTION);
          }
          throw re;
        }
 finally {
          if (jedis != null) {
            try {
              jedis.close();
            }
 catch (            Throwable t) {
              logger.warn(""String_Node_Str"" + t.getMessage(),t);
            }
          }
        }
      }
      @Override public void destroy(){
        super.destroy();
        try {
          jedisPool.destroy();
        }
 catch (        Throwable e) {
          logger.warn(e.getMessage(),e);
        }
      }
    }
;
  }
 catch (  Throwable t) {
    throw new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
  }
}","@Override public <T>Invoker<T> refer(final Class<T> type,final URL url) throws RpcException {
  try {
    GenericObjectPoolConfig config=new GenericObjectPoolConfig();
    config.setTestOnBorrow(url.getParameter(""String_Node_Str"",true));
    config.setTestOnReturn(url.getParameter(""String_Node_Str"",false));
    config.setTestWhileIdle(url.getParameter(""String_Node_Str"",false));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxIdle(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMinIdle(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxTotal(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxTotal(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxWaitMillis(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setNumTestsPerEvictionRun(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setTimeBetweenEvictionRunsMillis(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMinEvictableIdleTimeMillis(url.getParameter(""String_Node_Str"",0));
    final JedisPool jedisPool=new JedisPool(config,url.getHost(),url.getPort(DEFAULT_PORT),url.getParameter(Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT),StringUtils.isBlank(url.getPassword()) ? null : url.getPassword(),url.getParameter(""String_Node_Str"",0));
    final int expiry=url.getParameter(""String_Node_Str"",0);
    final String get=url.getParameter(""String_Node_Str"",""String_Node_Str"");
    final String set=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    final String delete=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    return new AbstractInvoker<T>(type,url){
      @Override protected Result doInvoke(      Invocation invocation) throws Throwable {
        Jedis jedis=null;
        try {
          jedis=jedisPool.getResource();
          if (get.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] value=jedis.get(String.valueOf(invocation.getArguments()[0]).getBytes());
            if (value == null) {
              return new RpcResult();
            }
            ObjectInput oin=getSerialization(url).deserialize(url,new ByteArrayInputStream(value));
            return new RpcResult(oin.readObject());
          }
 else           if (set.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 2) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] key=String.valueOf(invocation.getArguments()[0]).getBytes();
            ByteArrayOutputStream output=new ByteArrayOutputStream();
            ObjectOutput value=getSerialization(url).serialize(url,output);
            value.writeObject(invocation.getArguments()[1]);
            jedis.set(key,output.toByteArray());
            if (expiry > 1000) {
              jedis.expire(key,expiry / 1000);
            }
            return new RpcResult();
          }
 else           if (delete.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            jedis.del(String.valueOf(invocation.getArguments()[0]).getBytes());
            return new RpcResult();
          }
 else {
            throw new UnsupportedOperationException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str"");
          }
        }
 catch (        Throwable t) {
          RpcException re=new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
          if (t instanceof TimeoutException || t instanceof SocketTimeoutException) {
            re.setCode(RpcException.TIMEOUT_EXCEPTION);
          }
 else           if (t instanceof JedisConnectionException || t instanceof IOException) {
            re.setCode(RpcException.NETWORK_EXCEPTION);
          }
 else           if (t instanceof JedisDataException) {
            re.setCode(RpcException.SERIALIZATION_EXCEPTION);
          }
          throw re;
        }
 finally {
          if (jedis != null) {
            try {
              jedis.close();
            }
 catch (            Throwable t) {
              logger.warn(""String_Node_Str"" + t.getMessage(),t);
            }
          }
        }
      }
      @Override public void destroy(){
        super.destroy();
        try {
          jedisPool.destroy();
        }
 catch (        Throwable e) {
          logger.warn(e.getMessage(),e);
        }
      }
    }
;
  }
 catch (  Throwable t) {
    throw new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
  }
}"
85050,"@Before public void setUp() throws Exception {
  int redisPort=NetUtils.getAvailablePort();
  this.redisServer=new RedisServer(redisPort);
  this.redisServer.start();
  this.registryUrl=URL.valueOf(""String_Node_Str"" + redisPort);
}","@Before public void setUp() throws Exception {
  int redisPort=NetUtils.getAvailablePort();
  if (name.getMethodName().equals(""String_Node_Str"") || name.getMethodName().equals(""String_Node_Str"")) {
    String password=""String_Node_Str"";
    this.redisServer=RedisServer.builder().port(redisPort).setting(""String_Node_Str"" + password).build();
    this.registryUrl=URL.valueOf(""String_Node_Str"" + password + ""String_Node_Str""+ redisPort+ ""String_Node_Str"");
  }
 else {
    this.redisServer=RedisServer.builder().port(redisPort).build();
    this.registryUrl=URL.valueOf(""String_Node_Str"" + redisPort);
  }
  this.redisServer.start();
}"
85051,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) private T createProxy(Map<String,String> map){
  URL tmpUrl=new URL(""String_Node_Str"",""String_Node_Str"",0,map);
  final boolean isJvmRefer;
  if (isInjvm() == null) {
    if (url != null && url.length() > 0) {
      isJvmRefer=false;
    }
 else     if (InjvmProtocol.getInjvmProtocol().isInjvmRefer(tmpUrl)) {
      isJvmRefer=true;
    }
 else {
      isJvmRefer=false;
    }
  }
 else {
    isJvmRefer=isInjvm().booleanValue();
  }
  if (isJvmRefer) {
    URL url=new URL(Constants.LOCAL_PROTOCOL,NetUtils.LOCALHOST,0,interfaceClass.getName()).addParameters(map);
    invoker=refprotocol.refer(interfaceClass,url);
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"" + interfaceClass.getName());
    }
  }
 else {
    if (url != null && url.length() > 0) {
      String[] us=Constants.SEMICOLON_SPLIT_PATTERN.split(url);
      if (us != null && us.length > 0) {
        for (        String u : us) {
          URL url=URL.valueOf(u);
          if (url.getPath() == null || url.getPath().length() == 0) {
            url=url.setPath(interfaceName);
          }
          if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) {
            urls.add(url.addParameterAndEncoded(Constants.REFER_KEY,StringUtils.toQueryString(map)));
          }
 else {
            urls.add(ClusterUtils.mergeUrl(url,map));
          }
        }
      }
    }
 else {
      List<URL> us=loadRegistries(false);
      if (us != null && !us.isEmpty()) {
        for (        URL u : us) {
          URL monitorUrl=loadMonitor(u);
          if (monitorUrl != null) {
            map.put(Constants.MONITOR_KEY,URL.encode(monitorUrl.toFullString()));
          }
          urls.add(u.addParameterAndEncoded(Constants.REFER_KEY,StringUtils.toQueryString(map)));
        }
      }
      if (urls.isEmpty()) {
        throw new IllegalStateException(""String_Node_Str"" + interfaceName + ""String_Node_Str""+ NetUtils.getLocalHost()+ ""String_Node_Str""+ Version.getVersion()+ ""String_Node_Str"");
      }
    }
    if (urls.size() == 1) {
      invoker=refprotocol.refer(interfaceClass,urls.get(0));
    }
 else {
      List<Invoker<?>> invokers=new ArrayList<Invoker<?>>();
      URL registryURL=null;
      for (      URL url : urls) {
        invokers.add(refprotocol.refer(interfaceClass,url));
        if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) {
          registryURL=url;
        }
      }
      if (registryURL != null) {
        URL u=registryURL.addParameter(Constants.CLUSTER_KEY,AvailableCluster.NAME);
        invoker=cluster.join(new StaticDirectory(u,invokers));
      }
 else {
        invoker=cluster.join(new StaticDirectory(invokers));
      }
    }
  }
  Boolean c=check;
  if (c == null && consumer != null) {
    c=consumer.isCheck();
  }
  if (c == null) {
    c=true;
  }
  if (c && !invoker.isAvailable()) {
    throw new IllegalStateException(""String_Node_Str"" + interfaceName + ""String_Node_Str""+ (group == null ? ""String_Node_Str"" : group + ""String_Node_Str"")+ interfaceName+ (version == null ? ""String_Node_Str"" : ""String_Node_Str"" + version)+ ""String_Node_Str""+ invoker.getUrl()+ ""String_Node_Str""+ NetUtils.getLocalHost()+ ""String_Node_Str""+ Version.getVersion());
  }
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + interfaceClass.getName() + ""String_Node_Str""+ invoker.getUrl());
  }
  return (T)proxyFactory.getProxy(invoker);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) private T createProxy(Map<String,String> map){
  URL tmpUrl=new URL(""String_Node_Str"",""String_Node_Str"",0,map);
  final boolean isJvmRefer;
  if (isInjvm() == null) {
    if (url != null && url.length() > 0) {
      isJvmRefer=false;
    }
 else     if (InjvmProtocol.getInjvmProtocol().isInjvmRefer(tmpUrl)) {
      isJvmRefer=true;
    }
 else {
      isJvmRefer=false;
    }
  }
 else {
    isJvmRefer=isInjvm().booleanValue();
  }
  if (isJvmRefer) {
    URL url=new URL(Constants.LOCAL_PROTOCOL,NetUtils.LOCALHOST,0,interfaceClass.getName()).addParameters(map);
    invoker=refprotocol.refer(interfaceClass,url);
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"" + interfaceClass.getName());
    }
  }
 else {
    if (url != null && url.length() > 0) {
      String[] us=Constants.SEMICOLON_SPLIT_PATTERN.split(url);
      if (us != null && us.length > 0) {
        for (        String u : us) {
          URL url=URL.valueOf(u);
          if (url.getPath() == null || url.getPath().length() == 0) {
            url=url.setPath(interfaceName);
          }
          if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) {
            urls.add(url.addParameterAndEncoded(Constants.REFER_KEY,StringUtils.toQueryString(map)));
          }
 else {
            urls.add(ClusterUtils.mergeUrl(url,map));
          }
        }
      }
    }
 else {
      List<URL> us=loadRegistries(false);
      if (us != null && !us.isEmpty()) {
        for (        URL u : us) {
          URL monitorUrl=loadMonitor(u);
          if (monitorUrl != null) {
            map.put(Constants.MONITOR_KEY,URL.encode(monitorUrl.toFullString()));
          }
          urls.add(u.addParameterAndEncoded(Constants.REFER_KEY,StringUtils.toQueryString(map)));
        }
      }
      if (urls.isEmpty()) {
        throw new IllegalStateException(""String_Node_Str"" + interfaceName + ""String_Node_Str""+ NetUtils.getLocalHost()+ ""String_Node_Str""+ Version.getVersion()+ ""String_Node_Str"");
      }
    }
    if (urls.size() == 1) {
      invoker=refprotocol.refer(interfaceClass,urls.get(0));
    }
 else {
      List<Invoker<?>> invokers=new ArrayList<Invoker<?>>();
      URL registryURL=null;
      for (      URL url : urls) {
        invokers.add(refprotocol.refer(interfaceClass,url));
        if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) {
          registryURL=url;
        }
      }
      if (registryURL != null) {
        URL u=registryURL.addParameter(Constants.CLUSTER_KEY,AvailableCluster.NAME);
        invoker=cluster.join(new StaticDirectory(u,invokers));
      }
 else {
        invoker=cluster.join(new StaticDirectory(invokers));
      }
    }
  }
  Boolean c=check;
  if (c == null && consumer != null) {
    c=consumer.isCheck();
  }
  if (c == null) {
    c=true;
  }
  if (c && !invoker.isAvailable()) {
    initialized=false;
    throw new IllegalStateException(""String_Node_Str"" + interfaceName + ""String_Node_Str""+ (group == null ? ""String_Node_Str"" : group + ""String_Node_Str"")+ interfaceName+ (version == null ? ""String_Node_Str"" : ""String_Node_Str"" + version)+ ""String_Node_Str""+ invoker.getUrl()+ ""String_Node_Str""+ NetUtils.getLocalHost()+ ""String_Node_Str""+ Version.getVersion());
  }
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + interfaceClass.getName() + ""String_Node_Str""+ invoker.getUrl());
  }
  return (T)proxyFactory.getProxy(invoker);
}"
85052,"@Override public void reconnect() throws RemotingException {
  disconnect();
  connect();
}","@Override public void reconnect() throws RemotingException {
  if (!isConnected()) {
    connectLock.lock();
    try {
      if (!isConnected()) {
        disconnect();
        connect();
      }
    }
  finally {
      connectLock.unlock();
    }
  }
}"
85053,"@Override public boolean isDone(){
  return this.isDone();
}","@Override public boolean isDone(){
  return super.isDone();
}"
85054,"@Override @SuppressWarnings(""String_Node_Str"") public <T>T getExtension(Class<T> type,String name){
  for (  ApplicationContext context : contexts) {
    if (context.containsBean(name)) {
      Object bean=context.getBean(name);
      if (type.isInstance(bean)) {
        return (T)bean;
      }
    }
  }
  logger.warn(""String_Node_Str"" + name + ""String_Node_Str""+ type.getName());
  for (  ApplicationContext context : contexts) {
    try {
      return context.getBean(type);
    }
 catch (    NoUniqueBeanDefinitionException multiBeanExe) {
      throw multiBeanExe;
    }
catch (    NoSuchBeanDefinitionException noBeanExe) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + type.getName(),noBeanExe);
      }
    }
  }
  logger.warn(""String_Node_Str"" + name + ""String_Node_Str""+ type.getName()+ ""String_Node_Str"");
  return null;
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>T getExtension(Class<T> type,String name){
  if (type.isInterface() && type.isAnnotationPresent(SPI.class)) {
    return null;
  }
  for (  ApplicationContext context : contexts) {
    if (context.containsBean(name)) {
      Object bean=context.getBean(name);
      if (type.isInstance(bean)) {
        return (T)bean;
      }
    }
  }
  logger.warn(""String_Node_Str"" + name + ""String_Node_Str""+ type.getName());
  for (  ApplicationContext context : contexts) {
    try {
      return context.getBean(type);
    }
 catch (    NoUniqueBeanDefinitionException multiBeanExe) {
      throw multiBeanExe;
    }
catch (    NoSuchBeanDefinitionException noBeanExe) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + type.getName(),noBeanExe);
      }
    }
  }
  logger.warn(""String_Node_Str"" + name + ""String_Node_Str""+ type.getName()+ ""String_Node_Str"");
  return null;
}"
85055,boolean stop();,"/** 
 * change the context state to stop
 */
boolean stop();"
85056,void start();,"/** 
 * change the context state to stop
 */
void start();"
85057,void write(Object value);,"/** 
 * write value and complete the async context.
 * @param value invoke result
 */
void write(Object value);"
85058,boolean isAsyncStarted();,"/** 
 * @return true if the aysnc context is started
 */
boolean isAsyncStarted();"
85059,"@Override public boolean stop(){
  if (started.compareAndSet(true,false)) {
    return true;
  }
  return false;
}","@Override public boolean stop(){
  return started.compareAndSet(true,false);
}"
85060,"@Override public void write(Object value){
  if (stop()) {
    if (value instanceof Throwable) {
      Throwable bizExe=(Throwable)value;
      future.complete(new RpcResult(bizExe));
    }
    future.complete(new RpcResult(value));
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","@Override public void write(Object value){
  if (stop()) {
    if (value instanceof Throwable) {
      Throwable bizExe=(Throwable)value;
      future.complete(new RpcResult(bizExe));
    }
 else {
      future.complete(new RpcResult(value));
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}"
85061,"@Override protected void doUnsubscribe(URL url,NotifyListener listener){
  ConcurrentMap<NotifyListener,ChildListener> listeners=zkListeners.get(url);
  if (listeners != null) {
    ChildListener zkListener=listeners.get(listener);
    if (zkListener != null) {
      zkClient.removeChildListener(toUrlPath(url),zkListener);
    }
  }
}","@Override protected void doUnsubscribe(URL url,NotifyListener listener){
  ConcurrentMap<NotifyListener,ChildListener> listeners=zkListeners.get(url);
  if (listeners != null) {
    ChildListener zkListener=listeners.get(listener);
    if (zkListener != null) {
      if (Constants.ANY_VALUE.equals(url.getServiceInterface())) {
        String root=toRootPath();
        zkClient.removeChildListener(root,zkListener);
      }
 else {
        for (        String path : toCategoriesPath(url)) {
          zkClient.removeChildListener(path,zkListener);
        }
      }
    }
  }
}"
85062,"/** 
 * Parse url string
 * @param url URL string
 * @return URL instance
 * @see URL
 */
public static URL valueOf(String url){
  if (url == null || (url=url.trim()).length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String protocol=null;
  String username=null;
  String password=null;
  String host=null;
  int port=0;
  String path=null;
  Map<String,String> parameters=null;
  int i=url.indexOf(""String_Node_Str"");
  if (i >= 0) {
    String[] parts=url.substring(i + 1).split(""String_Node_Str"");
    parameters=new HashMap<String,String>();
    for (    String part : parts) {
      part=part.trim();
      if (part.length() > 0) {
        int j=part.indexOf('=');
        if (j >= 0) {
          parameters.put(part.substring(0,j),part.substring(j + 1));
        }
 else {
          parameters.put(part,part);
        }
      }
    }
    url=url.substring(0,i);
  }
  i=url.indexOf(""String_Node_Str"");
  if (i >= 0) {
    if (i == 0)     throw new IllegalStateException(""String_Node_Str"" + url + ""String_Node_Str"");
    protocol=url.substring(0,i);
    url=url.substring(i + 3);
  }
 else {
    i=url.indexOf(""String_Node_Str"");
    if (i >= 0) {
      if (i == 0)       throw new IllegalStateException(""String_Node_Str"" + url + ""String_Node_Str"");
      protocol=url.substring(0,i);
      url=url.substring(i + 1);
    }
  }
  i=url.indexOf(""String_Node_Str"");
  if (i >= 0) {
    path=url.substring(i + 1);
    url=url.substring(0,i);
  }
  i=url.indexOf(""String_Node_Str"");
  if (i >= 0) {
    username=url.substring(0,i);
    int j=username.indexOf(""String_Node_Str"");
    if (j >= 0) {
      password=username.substring(j + 1);
      username=username.substring(0,j);
    }
    url=url.substring(i + 1);
  }
  i=url.indexOf(""String_Node_Str"");
  if (i >= 0 && i < url.length() - 1) {
    port=Integer.parseInt(url.substring(i + 1));
    url=url.substring(0,i);
  }
  if (url.length() > 0)   host=url;
  return new URL(protocol,username,password,host,port,path,parameters);
}","/** 
 * Parse url string
 * @param url URL string
 * @return URL instance
 * @see URL
 */
public static URL valueOf(String url){
  if (url == null || (url=url.trim()).length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String protocol=null;
  String username=null;
  String password=null;
  String host=null;
  int port=0;
  String path=null;
  Map<String,String> parameters=null;
  int i=url.indexOf(""String_Node_Str"");
  if (i >= 0) {
    String[] parts=url.substring(i + 1).split(""String_Node_Str"");
    parameters=new HashMap<String,String>();
    for (    String part : parts) {
      part=part.trim();
      if (part.length() > 0) {
        int j=part.indexOf('=');
        if (j >= 0) {
          parameters.put(part.substring(0,j),part.substring(j + 1));
        }
 else {
          parameters.put(part,part);
        }
      }
    }
    url=url.substring(0,i);
  }
  i=url.indexOf(""String_Node_Str"");
  if (i >= 0) {
    if (i == 0)     throw new IllegalStateException(""String_Node_Str"" + url + ""String_Node_Str"");
    protocol=url.substring(0,i);
    url=url.substring(i + 3);
  }
 else {
    i=url.indexOf(""String_Node_Str"");
    if (i >= 0) {
      if (i == 0)       throw new IllegalStateException(""String_Node_Str"" + url + ""String_Node_Str"");
      protocol=url.substring(0,i);
      url=url.substring(i + 1);
    }
  }
  i=url.indexOf(""String_Node_Str"");
  if (i >= 0) {
    path=url.substring(i + 1);
    url=url.substring(0,i);
  }
  i=url.lastIndexOf(""String_Node_Str"");
  if (i >= 0) {
    username=url.substring(0,i);
    int j=username.indexOf(""String_Node_Str"");
    if (j >= 0) {
      password=username.substring(j + 1);
      username=username.substring(0,j);
    }
    url=url.substring(i + 1);
  }
  i=url.indexOf(""String_Node_Str"");
  if (i >= 0 && i < url.length() - 1) {
    port=Integer.parseInt(url.substring(i + 1));
    url=url.substring(0,i);
  }
  if (url.length() > 0)   host=url;
  return new URL(protocol,username,password,host,port,path,parameters);
}"
85063,"/** 
 * Removes all   {@link InternalThreadLocal} variables bound to the current thread.  This operation is useful when youare in a container environment, and you don't want to leave the thread local variables in the threads you do not manage.
 */
@SuppressWarnings(""String_Node_Str"") public static void removeAll(){
  InternalThreadLocalMap threadLocalMap=InternalThreadLocalMap.getIfSet();
  if (threadLocalMap == null) {
    return;
  }
  try {
    Object v=threadLocalMap.indexedVariable(variablesToRemoveIndex);
    if (v != null && v != InternalThreadLocalMap.UNSET) {
      Set<InternalThreadLocal<?>> variablesToRemove=(Set<InternalThreadLocal<?>>)v;
      for (      InternalThreadLocal<?> tlv : variablesToRemove) {
        tlv.remove(threadLocalMap);
      }
    }
  }
  finally {
    InternalThreadLocalMap.remove();
  }
}","/** 
 * Removes all   {@link InternalThreadLocal} variables bound to the current thread.  This operation is useful when youare in a container environment, and you don't want to leave the thread local variables in the threads you do not manage.
 */
@SuppressWarnings(""String_Node_Str"") public static void removeAll(){
  InternalThreadLocalMap threadLocalMap=InternalThreadLocalMap.getIfSet();
  if (threadLocalMap == null) {
    return;
  }
  try {
    Object v=threadLocalMap.indexedVariable(variablesToRemoveIndex);
    if (v != null && v != InternalThreadLocalMap.UNSET) {
      Set<InternalThreadLocal<?>> variablesToRemove=(Set<InternalThreadLocal<?>>)v;
      InternalThreadLocal<?>[] variablesToRemoveArray=variablesToRemove.toArray(new InternalThreadLocal[variablesToRemove.size()]);
      for (      InternalThreadLocal<?> tlv : variablesToRemoveArray) {
        tlv.remove(threadLocalMap);
      }
    }
  }
  finally {
    InternalThreadLocalMap.remove();
  }
}"
85064,"public HeaderExchangeClient(Client client,boolean needHeartbeat){
  if (client == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.client=client;
  this.channel=new HeaderExchangeChannel(client);
  String dubbo=client.getUrl().getParameter(Constants.DUBBO_VERSION_KEY);
  this.heartbeat=client.getUrl().getParameter(Constants.HEARTBEAT_KEY,dubbo != null && dubbo.startsWith(""String_Node_Str"") ? Constants.DEFAULT_HEARTBEAT : 0);
  this.heartbeatTimeout=client.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY,heartbeat * 3);
  if (heartbeatTimeout < heartbeat * 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (needHeartbeat) {
    startHeatbeatTimer();
  }
}","public HeaderExchangeClient(Client client,boolean needHeartbeat){
  if (client == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.client=client;
  this.channel=new HeaderExchangeChannel(client);
  String dubbo=client.getUrl().getParameter(Constants.DUBBO_VERSION_KEY);
  this.heartbeat=client.getUrl().getParameter(Constants.HEARTBEAT_KEY,dubbo != null && dubbo.startsWith(""String_Node_Str"") ? Constants.DEFAULT_HEARTBEAT : 0);
  this.heartbeatTimeout=client.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY,heartbeat * 3);
  if (heartbeatTimeout < heartbeat * 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (needHeartbeat) {
    startHeartbeatTimer();
  }
}"
85065,"@Test(expected=RuntimeException.class) public void test_Async_Future_Ex() throws Exception {
  try {
    initOrResetUrl(true);
    destroyService();
    exportExService();
    referService();
    int requestId=2;
    Person ret=demoProxy.get(requestId);
    Assert.assertEquals(null,ret);
    Future<Person> pFuture=RpcContext.getContext().getFuture();
    ret=pFuture.get(1000,TimeUnit.MICROSECONDS);
    Assert.assertEquals(requestId,ret.getId());
  }
  finally {
    destroyService();
  }
}","@Test(expected=RuntimeException.class) public void test_Async_Future_Ex() throws Exception {
  try {
    initOrResetUrl(true);
    destroyService();
    exportExService();
    referService();
    int requestId=2;
    Person ret=demoProxy.get(requestId);
    Assert.assertEquals(null,ret);
    Future<Person> pFuture=RpcContext.getContext().getFuture();
    ret=pFuture.get(1000 * 1000,TimeUnit.MICROSECONDS);
    Assert.assertEquals(requestId,ret.getId());
  }
  finally {
    destroyService();
  }
}"
85066,"@Test public void serialize_string_short_map_then_deserialize() throws Exception {
  Hessian2StringShortType stringShort=new Hessian2StringShortType();
  Map<String,Short> stringShortMap=new HashMap<String,Short>();
  stringShortMap.put(""String_Node_Str"",(short)0);
  stringShortMap.put(""String_Node_Str"",(short)60);
  stringShort.stringShortMap=stringShortMap;
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  Hessian2Output out=new Hessian2Output(bout);
  out.writeObject(stringShort);
  out.flush();
  ByteArrayInputStream bin=new ByteArrayInputStream(bout.toByteArray());
  Hessian2Input input=new Hessian2Input(bin);
  Hessian2StringShortType deserialize=(Hessian2StringShortType)input.readObject();
  assertTrue(deserialize.stringShortMap != null);
  assertTrue(deserialize.stringShortMap.size() == 2);
  assertTrue(deserialize.stringShortMap.get(""String_Node_Str"") instanceof Short);
  assertEquals(Short.valueOf((short)0),deserialize.stringShortMap.get(""String_Node_Str""));
  assertEquals(Short.valueOf((short)60),deserialize.stringShortMap.get(""String_Node_Str""));
}","@Test public void serialize_string_short_map_then_deserialize() throws Exception {
  Hessian2StringShortType stringShort=new Hessian2StringShortType();
  Map<String,Short> stringShortMap=new HashMap<String,Short>();
  stringShortMap.put(""String_Node_Str"",(short)0);
  stringShortMap.put(""String_Node_Str"",(short)60);
  stringShort.stringShortMap=stringShortMap;
  Hessian2StringShortType deserialize=baseHession2Serialize(stringShort);
  assertTrue(deserialize.stringShortMap != null);
  assertTrue(deserialize.stringShortMap.size() == 2);
  assertTrue(deserialize.stringShortMap.get(""String_Node_Str"") instanceof Short);
  assertEquals(Short.valueOf((short)0),deserialize.stringShortMap.get(""String_Node_Str""));
  assertEquals(Short.valueOf((short)60),deserialize.stringShortMap.get(""String_Node_Str""));
}"
85067,"@Test public void serialize_list_then_deserialize() throws Exception {
  List<Short> shortList=new ArrayList<Short>();
  shortList.add((short)0);
  shortList.add((short)60);
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  Hessian2Output out=new Hessian2Output(bout);
  out.writeObject(shortList);
  out.flush();
  ByteArrayInputStream bin=new ByteArrayInputStream(bout.toByteArray());
  Hessian2Input input=new Hessian2Input(bin);
  List deserialize=(List)input.readObject(ArrayList.class,Short.class);
  assertTrue(deserialize != null);
  assertTrue(deserialize.size() == 2);
  assertTrue(deserialize.get(1) instanceof Short);
  assertEquals(Short.valueOf((short)0),deserialize.get(0));
  assertEquals(Short.valueOf((short)60),deserialize.get(1));
}","@Test public void serialize_list_then_deserialize() throws Exception {
  List<Short> shortList=new ArrayList<Short>();
  shortList.add((short)0);
  shortList.add((short)60);
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  Hessian2Output out=new Hessian2Output(bout);
  out.writeObject(shortList);
  out.flush();
  ByteArrayInputStream bin=new ByteArrayInputStream(bout.toByteArray());
  Hessian2Input input=new Hessian2Input(bin);
  List<Short> deserialize=(List)input.readObject(ArrayList.class,Short.class);
  assertTrue(deserialize != null);
  assertTrue(deserialize.size() == 2);
  assertTrue(deserialize.get(1) instanceof Short);
  assertEquals(Short.valueOf((short)0),deserialize.get(0));
  assertEquals(Short.valueOf((short)60),deserialize.get(1));
}"
85068,"@Test public void serialize_string_byte_map_then_deserialize() throws Exception {
  Hessian2StringShortType stringShort=new Hessian2StringShortType();
  Map<String,Byte> stringByteMap=new HashMap<String,Byte>();
  stringByteMap.put(""String_Node_Str"",(byte)0);
  stringByteMap.put(""String_Node_Str"",(byte)60);
  stringShort.stringByteMap=stringByteMap;
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  Hessian2Output out=new Hessian2Output(bout);
  out.writeObject(stringShort);
  out.flush();
  ByteArrayInputStream bin=new ByteArrayInputStream(bout.toByteArray());
  Hessian2Input input=new Hessian2Input(bin);
  Hessian2StringShortType deserialize=(Hessian2StringShortType)input.readObject();
  assertTrue(deserialize.stringByteMap != null);
  assertTrue(deserialize.stringByteMap.size() == 2);
  assertTrue(deserialize.stringByteMap.get(""String_Node_Str"") instanceof Byte);
  assertEquals(Byte.valueOf((byte)0),deserialize.stringByteMap.get(""String_Node_Str""));
  assertEquals(Byte.valueOf((byte)60),deserialize.stringByteMap.get(""String_Node_Str""));
}","@Test public void serialize_string_byte_map_then_deserialize() throws Exception {
  Hessian2StringShortType stringShort=new Hessian2StringShortType();
  Map<String,Byte> stringByteMap=new HashMap<String,Byte>();
  stringByteMap.put(""String_Node_Str"",(byte)0);
  stringByteMap.put(""String_Node_Str"",(byte)60);
  stringShort.stringByteMap=stringByteMap;
  Hessian2StringShortType deserialize=baseHession2Serialize(stringShort);
  assertTrue(deserialize.stringByteMap != null);
  assertTrue(deserialize.stringByteMap.size() == 2);
  assertTrue(deserialize.stringByteMap.get(""String_Node_Str"") instanceof Byte);
  assertEquals(Byte.valueOf((byte)0),deserialize.stringByteMap.get(""String_Node_Str""));
  assertEquals(Byte.valueOf((byte)60),deserialize.stringByteMap.get(""String_Node_Str""));
}"
85069,"@Test public void test_Async_Future_Multi() throws Exception {
  initOrResetUrl(true);
  destroyService();
  exportService();
  referService();
  int requestId1=1;
  Person ret=demoProxy.get(requestId1);
  Assert.assertEquals(null,ret);
  Future<Person> p1Future=RpcContext.getContext().getFuture();
  int requestId2=1;
  Person ret2=demoProxy.get(requestId2);
  Assert.assertEquals(null,ret2);
  Future<Person> p2Future=RpcContext.getContext().getFuture();
  ret=p1Future.get(1000,TimeUnit.MICROSECONDS);
  ret2=p2Future.get(1000,TimeUnit.MICROSECONDS);
  Assert.assertEquals(requestId1,ret.getId());
  Assert.assertEquals(requestId2,ret.getId());
  destroyService();
}","@Test public void test_Async_Future_Multi() throws Exception {
  initOrResetUrl(true);
  destroyService();
  exportService();
  referService();
  int requestId1=1;
  Person ret=demoProxy.get(requestId1);
  Assert.assertEquals(null,ret);
  Future<Person> p1Future=RpcContext.getContext().getFuture();
  int requestId2=1;
  Person ret2=demoProxy.get(requestId2);
  Assert.assertEquals(null,ret2);
  Future<Person> p2Future=RpcContext.getContext().getFuture();
  ret=p1Future.get(1000 * 1000,TimeUnit.MICROSECONDS);
  ret2=p2Future.get(1000 * 1000,TimeUnit.MICROSECONDS);
  Assert.assertEquals(requestId1,ret.getId());
  Assert.assertEquals(requestId2,ret.getId());
  destroyService();
}"
85070,"@Test public void test_Async_Future() throws Exception {
  initOrResetUrl(true);
  destroyService();
  exportService();
  referService();
  int requestId=2;
  Person ret=demoProxy.get(requestId);
  Assert.assertEquals(null,ret);
  Future<Person> pFuture=RpcContext.getContext().getFuture();
  ret=pFuture.get(1000,TimeUnit.MICROSECONDS);
  Assert.assertEquals(requestId,ret.getId());
  destroyService();
}","@Test public void test_Async_Future() throws Exception {
  initOrResetUrl(true);
  destroyService();
  exportService();
  referService();
  int requestId=2;
  Person ret=demoProxy.get(requestId);
  Assert.assertEquals(null,ret);
  Future<Person> pFuture=RpcContext.getContext().getFuture();
  ret=pFuture.get(1000 * 1000,TimeUnit.MICROSECONDS);
  Assert.assertEquals(requestId,ret.getId());
  destroyService();
}"
85071,"public Object reply(ExchangeChannel channel,Object message) throws RemotingException {
  if (message instanceof Invocation) {
    Invocation inv=(Invocation)message;
    Invoker<?> invoker=getInvoker(channel,inv);
    if (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) {
      String methodsStr=invoker.getUrl().getParameters().get(""String_Node_Str"");
      boolean hasMethod=false;
      if (methodsStr == null || methodsStr.indexOf(""String_Node_Str"") == -1) {
        hasMethod=inv.getMethodName().equals(methodsStr);
      }
 else {
        String[] methods=methodsStr.split(""String_Node_Str"");
        for (        String method : methods) {
          if (inv.getMethodName().equals(method)) {
            hasMethod=true;
            break;
          }
        }
      }
      if (!hasMethod) {
        logger.warn(new IllegalStateException(""String_Node_Str"" + inv.getMethodName() + ""String_Node_Str""+ invoker.getUrl()) + ""String_Node_Str"" + inv);
        return null;
      }
    }
    RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress());
    return invoker.invoke(inv);
  }
  throw new RemotingException(channel,""String_Node_Str"" + message == null ? null : (message.getClass().getName() + ""String_Node_Str"" + message) + ""String_Node_Str"" + channel.getRemoteAddress()+ ""String_Node_Str""+ channel.getLocalAddress());
}","public Object reply(ExchangeChannel channel,Object message) throws RemotingException {
  if (message instanceof Invocation) {
    Invocation inv=(Invocation)message;
    Invoker<?> invoker=getInvoker(channel,inv);
    if (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) {
      String methodsStr=invoker.getUrl().getParameters().get(""String_Node_Str"");
      boolean hasMethod=false;
      if (methodsStr == null || methodsStr.indexOf(""String_Node_Str"") == -1) {
        hasMethod=inv.getMethodName().equals(methodsStr);
      }
 else {
        String[] methods=methodsStr.split(""String_Node_Str"");
        for (        String method : methods) {
          if (inv.getMethodName().equals(method)) {
            hasMethod=true;
            break;
          }
        }
      }
      if (!hasMethod) {
        logger.warn(new IllegalStateException(""String_Node_Str"" + inv.getMethodName() + ""String_Node_Str""+ ""String_Node_Str""+ invoker.getUrl()) + ""String_Node_Str"" + inv);
        return null;
      }
    }
    RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress());
    return invoker.invoke(inv);
  }
  throw new RemotingException(channel,""String_Node_Str"" + (message == null ? null : (message.getClass().getName() + ""String_Node_Str"" + message)) + ""String_Node_Str""+ channel.getRemoteAddress()+ ""String_Node_Str""+ channel.getLocalAddress());
}"
85072,"@Test public void test_Async_Future_Multi() throws Exception {
  initOrResetUrl(true);
  destroyService();
  exportService();
  referService();
  int requestId1=1;
  Person ret=demoProxy.get(requestId1);
  Assert.assertEquals(null,ret);
  Future<Person> p1Future=RpcContext.getContext().getFuture();
  int requestId2=1;
  Person ret2=demoProxy.get(requestId2);
  Assert.assertEquals(null,ret2);
  Future<Person> p2Future=RpcContext.getContext().getFuture();
  ret=p1Future.get(1000,TimeUnit.MICROSECONDS);
  ret2=p2Future.get(1000,TimeUnit.MICROSECONDS);
  Assert.assertEquals(requestId1,ret.getId());
  Assert.assertEquals(requestId2,ret.getId());
  destroyService();
}","@Test public void test_Async_Future_Multi() throws Exception {
  initOrResetUrl(true);
  destroyService();
  exportService();
  referService();
  int requestId1=1;
  Person ret=demoProxy.get(requestId1);
  Assert.assertEquals(null,ret);
  Future<Person> p1Future=RpcContext.getContext().getFuture();
  int requestId2=1;
  Person ret2=demoProxy.get(requestId2);
  Assert.assertEquals(null,ret2);
  Future<Person> p2Future=RpcContext.getContext().getFuture();
  ret=p1Future.get(1000 * 1000,TimeUnit.MICROSECONDS);
  ret2=p2Future.get(1000 * 1000,TimeUnit.MICROSECONDS);
  Assert.assertEquals(requestId1,ret.getId());
  Assert.assertEquals(requestId2,ret.getId());
  destroyService();
}"
85073,"@Test(expected=RuntimeException.class) public void test_Async_Future_Ex() throws Exception {
  try {
    initOrResetUrl(true);
    destroyService();
    exportExService();
    referService();
    int requestId=2;
    Person ret=demoProxy.get(requestId);
    Assert.assertEquals(null,ret);
    Future<Person> pFuture=RpcContext.getContext().getFuture();
    ret=pFuture.get(1000,TimeUnit.MICROSECONDS);
    Assert.assertEquals(requestId,ret.getId());
  }
  finally {
    destroyService();
  }
}","@Test(expected=RuntimeException.class) public void test_Async_Future_Ex() throws Exception {
  try {
    initOrResetUrl(true);
    destroyService();
    exportExService();
    referService();
    int requestId=2;
    Person ret=demoProxy.get(requestId);
    Assert.assertEquals(null,ret);
    Future<Person> pFuture=RpcContext.getContext().getFuture();
    ret=pFuture.get(1000 * 1000,TimeUnit.MICROSECONDS);
    Assert.assertEquals(requestId,ret.getId());
  }
  finally {
    destroyService();
  }
}"
85074,"@Test public void test_Async_Future() throws Exception {
  initOrResetUrl(true);
  destroyService();
  exportService();
  referService();
  int requestId=2;
  Person ret=demoProxy.get(requestId);
  Assert.assertEquals(null,ret);
  Future<Person> pFuture=RpcContext.getContext().getFuture();
  ret=pFuture.get(1000,TimeUnit.MICROSECONDS);
  Assert.assertEquals(requestId,ret.getId());
  destroyService();
}","@Test public void test_Async_Future() throws Exception {
  initOrResetUrl(true);
  destroyService();
  exportService();
  referService();
  int requestId=2;
  Person ret=demoProxy.get(requestId);
  Assert.assertEquals(null,ret);
  Future<Person> pFuture=RpcContext.getContext().getFuture();
  ret=pFuture.get(1000 * 1000,TimeUnit.MICROSECONDS);
  Assert.assertEquals(requestId,ret.getId());
  destroyService();
}"
85075,"public Object readLengthList(AbstractHessianInput in,int length) throws IOException {
  throw new UnsupportedOperationException(String.valueOf(this));
}","@Override public Object readLengthList(AbstractHessianInput in,int length,Class<?> expectType) throws IOException {
  if (expectType == null) {
    return readLengthList(in,length);
  }
  throw new UnsupportedOperationException(String.valueOf(this));
}"
85076,"public Object readList(AbstractHessianInput in,int length) throws IOException {
  throw new UnsupportedOperationException(String.valueOf(this));
}","@Override public Object readList(AbstractHessianInput in,int length,Class<?> expectType) throws IOException {
  if (expectType == null) {
    return readList(in,length);
  }
  throw new UnsupportedOperationException(String.valueOf(this));
}"
85077,"public Object readMap(AbstractHessianInput in) throws IOException {
  Object obj=in.readObject();
  String className=getClass().getName();
  if (obj != null)   throw error(className + ""String_Node_Str"" + obj.getClass().getName()+ ""String_Node_Str""+ obj+ ""String_Node_Str"");
 else   throw error(className + ""String_Node_Str"");
}","@Override public Object readMap(AbstractHessianInput in,Class<?> expectKeyType,Class<?> expectValueType) throws IOException {
  if (expectKeyType == null && expectValueType == null) {
    return readMap(in);
  }
  throw new UnsupportedOperationException(String.valueOf(this));
}"
85078,"/** 
 * Reads an arbitrary object from the input stream.
 */
abstract public Object readObject() throws IOException ;","/** 
 * Reads an arbitrary object from the input stream.
 * @param expectedTypes the runtime type hints, eg: expectedTypes canequals String.class, Short.class for HashMap
 */
public Object readObject(List<Class<?>> expectedTypes) throws IOException {
  throw new UnsupportedOperationException(String.valueOf(this));
}"
85079,"public Object readLengthList(AbstractHessianInput in,int length) throws IOException {
  Collection list=createList();
  in.addRef(list);
  for (; length > 0; length--)   list.add(in.readObject());
  return list;
}","@Override public Object readLengthList(AbstractHessianInput in,int length,Class<?> expectType) throws IOException {
  Collection list=createList();
  in.addRef(list);
  Deserializer deserializer=null;
  SerializerFactory factory=findSerializerFactory(in);
  if (expectType != null) {
    deserializer=factory.getDeserializer(expectType.getName());
  }
  for (; length > 0; length--)   list.add(deserializer != null ? deserializer.readObject(in) : in.readObject());
  return list;
}"
85080,"public Object readList(AbstractHessianInput in,int length) throws IOException {
  Collection list=createList();
  in.addRef(list);
  while (!in.isEnd())   list.add(in.readObject());
  in.readEnd();
  return list;
}","@Override public Object readList(AbstractHessianInput in,int length,Class<?> expectType) throws IOException {
  Collection list=createList();
  in.addRef(list);
  Deserializer deserializer=null;
  SerializerFactory factory=findSerializerFactory(in);
  if (expectType != null) {
    deserializer=factory.getDeserializer(expectType.getName());
  }
  while (!in.isEnd())   list.add(deserializer != null ? deserializer.readObject(in) : in.readObject());
  in.readEnd();
  return list;
}"
85081,"public Object readLengthList(AbstractHessianInput in,int length) throws IOException ;","/** 
 * deserialize list object from expect type.
 * @param in
 * @param length
 * @param expectType
 * @return
 * @throws IOException
 */
public Object readLengthList(AbstractHessianInput in,int length,Class<?> expectType) throws IOException ;"
85082,"public Object readList(AbstractHessianInput in,int length) throws IOException ;","/** 
 * deserialize list object from expect type.
 * @param in
 * @param length
 * @param expectType
 * @return
 * @throws IOException
 */
public Object readList(AbstractHessianInput in,int length,Class<?> expectType) throws IOException ;"
85083,public Object readMap(AbstractHessianInput in) throws IOException ;,"/** 
 * deserialize map object from expect key and value type.
 * @param in
 * @param expectKeyType
 * @param expectValueType
 * @return
 * @throws IOException
 */
public Object readMap(AbstractHessianInput in,Class<?> expectKeyType,Class<?> expectValueType) throws IOException ;"
85084,"public JavaSerializer(Class cl,ClassLoader loader){
  introspectWriteReplace(cl,loader);
  if (_writeReplace != null)   _writeReplace.setAccessible(true);
  ArrayList primitiveFields=new ArrayList();
  ArrayList compoundFields=new ArrayList();
  for (; cl != null; cl=cl.getSuperclass()) {
    Field[] fields=cl.getDeclaredFields();
    for (int i=0; i < fields.length; i++) {
      Field field=fields[i];
      if (Modifier.isTransient(field.getModifiers()) || Modifier.isStatic(field.getModifiers()))       continue;
      field.setAccessible(true);
      if (field.getType().isPrimitive() || (field.getType().getName().startsWith(""String_Node_Str"") && !field.getType().equals(Object.class)))       primitiveFields.add(field);
 else       compoundFields.add(field);
    }
  }
  ArrayList fields=new ArrayList();
  fields.addAll(primitiveFields);
  fields.addAll(compoundFields);
  _fields=new Field[fields.size()];
  fields.toArray(_fields);
  _fieldSerializers=new FieldSerializer[_fields.length];
  for (int i=0; i < _fields.length; i++) {
    _fieldSerializers[i]=getFieldSerializer(_fields[i].getType());
  }
}","public JavaSerializer(Class cl,ClassLoader loader){
  introspectWriteReplace(cl,loader);
  if (_writeReplace != null)   _writeReplace.setAccessible(true);
  List primitiveFields=new ArrayList();
  List compoundFields=new ArrayList();
  for (; cl != null; cl=cl.getSuperclass()) {
    Field[] fields=cl.getDeclaredFields();
    for (int i=0; i < fields.length; i++) {
      Field field=fields[i];
      if (Modifier.isTransient(field.getModifiers()) || Modifier.isStatic(field.getModifiers()))       continue;
      field.setAccessible(true);
      if (field.getType().isPrimitive() || (field.getType().getName().startsWith(""String_Node_Str"") && !field.getType().equals(Object.class)))       primitiveFields.add(field);
 else       compoundFields.add(field);
    }
  }
  List fields=new ArrayList();
  fields.addAll(primitiveFields);
  fields.addAll(compoundFields);
  Collections.reverse(fields);
  _fields=new Field[fields.size()];
  fields.toArray(_fields);
  _fieldSerializers=new FieldSerializer[_fields.length];
  for (int i=0; i < _fields.length; i++) {
    _fieldSerializers[i]=getFieldSerializer(_fields[i].getType());
  }
}"
85085,"@Test public void singleton() throws Exception {
  EnumSet h=EnumSet.of(Type.High);
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  Hessian2Output out=new Hessian2Output(bout);
  out.writeObject(h);
  out.flush();
  ByteArrayInputStream bin=new ByteArrayInputStream(bout.toByteArray());
  Hessian2Input input=new Hessian2Input(bin);
  EnumSet set=(EnumSet)input.readObject();
  assertTrue(Arrays.asList(set.toArray()).contains(Type.High));
  assertFalse(Arrays.asList(set.toArray()).contains(Type.Lower));
}","@Test public void singleton() throws Exception {
  EnumSet h=EnumSet.of(Type.High);
  EnumSet set=baseHession2Serialize(h);
  assertTrue(Arrays.asList(set.toArray()).contains(Type.High));
  assertFalse(Arrays.asList(set.toArray()).contains(Type.Lower));
}"
85086,"@Test public void set() throws Exception {
  EnumSet<Type> types=EnumSet.of(Type.High,Type.Lower);
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  Hessian2Output out=new Hessian2Output(bout);
  out.writeObject(types);
  out.flush();
  ByteArrayInputStream bin=new ByteArrayInputStream(bout.toByteArray());
  Hessian2Input input=new Hessian2Input(bin);
  EnumSet set=(EnumSet)input.readObject();
  assertTrue(set.contains(Type.High));
  assertFalse(set.contains(Type.Normal));
}","@Test public void set() throws Exception {
  EnumSet<Type> types=EnumSet.of(Type.High,Type.Lower);
  EnumSet set=baseHession2Serialize(types);
  assertTrue(set.contains(Type.High));
  assertFalse(set.contains(Type.Normal));
}"
85087,"@Test public void none() throws Exception {
  EnumSet<Type> types=EnumSet.noneOf(Type.class);
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  Hessian2Output out=new Hessian2Output(bout);
  out.writeObject(types);
  out.flush();
  ByteArrayInputStream bin=new ByteArrayInputStream(bout.toByteArray());
  Hessian2Input input=new Hessian2Input(bin);
  EnumSet set=(EnumSet)input.readObject();
  TestCase.assertEquals(set,EnumSet.noneOf(Type.class));
}","@Test public void none() throws Exception {
  EnumSet<Type> types=EnumSet.noneOf(Type.class);
  EnumSet set=baseHession2Serialize(types);
  TestCase.assertEquals(set,EnumSet.noneOf(Type.class));
}"
85088,"void deserialize(AbstractHessianInput in,Object obj) throws IOException {
  java.sql.Time value=null;
  try {
    java.util.Date date=(java.util.Date)in.readObject();
    value=new java.sql.Time(date.getTime());
    _field.set(obj,value);
  }
 catch (  Exception e) {
    logDeserializeError(_field,obj,value,e);
  }
}","void deserialize(AbstractHessianInput in,Object obj) throws IOException {
  java.sql.Time value=null;
  try {
    java.util.Date date=(java.util.Date)in.readObject();
    if (date != null)     value=new java.sql.Time(date.getTime());
    _field.set(obj,value);
  }
 catch (  Exception e) {
    logDeserializeError(_field,obj,value,e);
  }
}"
85089,"/** 
 * Create new connection
 */
private ExchangeClient initClient(URL url){
  String str=url.getParameter(Constants.CLIENT_KEY,url.getParameter(Constants.SERVER_KEY,Constants.DEFAULT_REMOTING_CLIENT));
  String version=url.getParameter(Constants.DUBBO_VERSION_KEY);
  boolean compatible=(version != null && version.startsWith(""String_Node_Str""));
  url=url.addParameter(Constants.CODEC_KEY,DubboCodec.NAME);
  url=url.addParameterIfAbsent(Constants.HEARTBEAT_KEY,String.valueOf(Constants.DEFAULT_HEARTBEAT));
  if (str != null && str.length() > 0 && !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) {
    throw new RpcException(""String_Node_Str"" + str + ""String_Node_Str""+ ""String_Node_Str""+ StringUtils.join(ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions(),""String_Node_Str""));
  }
  ExchangeClient client;
  try {
    if (url.getParameter(Constants.LAZY_CONNECT_KEY,false)) {
      client=new LazyConnectExchangeClient(url,requestHandler);
    }
 else {
      client=Exchangers.connect(url,requestHandler);
    }
  }
 catch (  RemotingException e) {
    throw new RpcException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
  return client;
}","/** 
 * Create new connection
 */
private ExchangeClient initClient(URL url){
  String str=url.getParameter(Constants.CLIENT_KEY,url.getParameter(Constants.SERVER_KEY,Constants.DEFAULT_REMOTING_CLIENT));
  url=url.addParameter(Constants.CODEC_KEY,DubboCodec.NAME);
  url=url.addParameterIfAbsent(Constants.HEARTBEAT_KEY,String.valueOf(Constants.DEFAULT_HEARTBEAT));
  if (str != null && str.length() > 0 && !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) {
    throw new RpcException(""String_Node_Str"" + str + ""String_Node_Str""+ ""String_Node_Str""+ StringUtils.join(ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions(),""String_Node_Str""));
  }
  ExchangeClient client;
  try {
    if (url.getParameter(Constants.LAZY_CONNECT_KEY,false)) {
      client=new LazyConnectExchangeClient(url,requestHandler);
    }
 else {
      client=Exchangers.connect(url,requestHandler);
    }
  }
 catch (  RemotingException e) {
    throw new RpcException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
  return client;
}"
85090,"@SuppressWarnings(""String_Node_Str"") protected <T>T doRefer(final Class<T> serviceType,final URL url) throws RpcException {
  final RmiProxyFactoryBean rmiProxyFactoryBean=new RmiProxyFactoryBean();
  rmiProxyFactoryBean.setRemoteInvocationFactory(new RemoteInvocationFactory(){
    public RemoteInvocation createRemoteInvocation(    MethodInvocation methodInvocation){
      return new RmiRemoteInvocation(methodInvocation);
    }
  }
);
  rmiProxyFactoryBean.setServiceUrl(url.toIdentityString());
  rmiProxyFactoryBean.setServiceInterface(serviceType);
  rmiProxyFactoryBean.setCacheStub(true);
  rmiProxyFactoryBean.setLookupStubOnStartup(true);
  rmiProxyFactoryBean.setRefreshStubOnConnectFailure(true);
  rmiProxyFactoryBean.afterPropertiesSet();
  return (T)rmiProxyFactoryBean.getObject();
}","@SuppressWarnings(""String_Node_Str"") protected <T>T doRefer(final Class<T> serviceType,final URL url) throws RpcException {
  final RmiProxyFactoryBean rmiProxyFactoryBean=new RmiProxyFactoryBean();
  if (url.getParameter(Constants.DUBBO_VERSION_KEY,Version.getVersion()).equals(Version.getVersion())) {
    rmiProxyFactoryBean.setRemoteInvocationFactory(new RemoteInvocationFactory(){
      public RemoteInvocation createRemoteInvocation(      MethodInvocation methodInvocation){
        return new RmiRemoteInvocation(methodInvocation);
      }
    }
);
  }
  rmiProxyFactoryBean.setServiceUrl(url.toIdentityString());
  rmiProxyFactoryBean.setServiceInterface(serviceType);
  rmiProxyFactoryBean.setCacheStub(true);
  rmiProxyFactoryBean.setLookupStubOnStartup(true);
  rmiProxyFactoryBean.setRefreshStubOnConnectFailure(true);
  rmiProxyFactoryBean.afterPropertiesSet();
  return (T)rmiProxyFactoryBean.getObject();
}"
85091,"public void destroy(){
  super.destroy();
  for (  String key : new ArrayList<String>(serverMap.keySet())) {
    ExchangeServer server=serverMap.remove(key);
    if (server != null) {
      try {
        if (logger.isInfoEnabled()) {
          logger.info(""String_Node_Str"" + server.getLocalAddress());
        }
        server.close(getServerShutdownTimeout());
      }
 catch (      Throwable t) {
        logger.warn(t.getMessage(),t);
      }
    }
  }
}","public void destroy(){
  super.destroy();
  for (  String key : new ArrayList<String>(serverMap.keySet())) {
    ExchangeServer server=serverMap.remove(key);
    if (server != null) {
      try {
        if (logger.isInfoEnabled()) {
          logger.info(""String_Node_Str"" + server.getLocalAddress());
        }
        server.close(ConfigUtils.getServerShutdownTimeout());
      }
 catch (      Throwable t) {
        logger.warn(t.getMessage(),t);
      }
    }
  }
}"
85092,"private Set<String> resolvePackagesToScan(Set<String> packagesToScan){
  Set<String> resolvedPackagesToScan=new LinkedHashSet<String>(packagesToScan.size());
  for (  String packageToScan : packagesToScan) {
    String resolvedPackageToScan=environment.resolvePlaceholders(packageToScan);
    resolvedPackagesToScan.add(resolvedPackageToScan);
  }
  return resolvedPackagesToScan;
}","private Set<String> resolvePackagesToScan(Set<String> packagesToScan){
  Set<String> resolvedPackagesToScan=new LinkedHashSet<String>(packagesToScan.size());
  for (  String packageToScan : packagesToScan) {
    if (StringUtils.hasText(packageToScan)) {
      String resolvedPackageToScan=environment.resolvePlaceholders(packageToScan.trim());
      resolvedPackagesToScan.add(resolvedPackageToScan);
    }
  }
  return resolvedPackagesToScan;
}"
85093,"@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {
  Set<String> resolvedPackagesToScan=resolvePackagesToScan(packagesToScan);
  registerServiceBeans(resolvedPackagesToScan,registry);
}","@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {
  Set<String> resolvedPackagesToScan=resolvePackagesToScan(packagesToScan);
  if (!CollectionUtils.isEmpty(resolvedPackagesToScan)) {
    registerServiceBeans(resolvedPackagesToScan,registry);
  }
 else {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"");
    }
  }
}"
85094,"/** 
 * Registers   {@link ServiceBean} from new annotated {@link Service} {@link BeanDefinition}
 * @param beanDefinitionHolder
 * @param registry
 * @see ServiceBean
 * @see BeanDefinition
 */
private void registerServiceBean(BeanDefinitionHolder beanDefinitionHolder,BeanDefinitionRegistry registry){
  Class<?> beanClass=resolveClass(beanDefinitionHolder);
  Service service=findAnnotation(beanClass,Service.class);
  Class<?> interfaceClass=resolveServiceInterfaceClass(beanClass,service);
  String beanName=beanDefinitionHolder.getBeanName();
  AbstractBeanDefinition serviceBeanDefinition=buildServiceBeanDefinition(service,interfaceClass,beanName);
  registerWithGeneratedName(serviceBeanDefinition,registry);
}","/** 
 * Registers   {@link ServiceBean} from new annotated {@link Service} {@link BeanDefinition}
 * @param beanDefinitionHolder
 * @param registry
 * @param scanner
 * @see ServiceBean
 * @see BeanDefinition
 */
private void registerServiceBean(BeanDefinitionHolder beanDefinitionHolder,BeanDefinitionRegistry registry,DubboClassPathBeanDefinitionScanner scanner){
  Class<?> beanClass=resolveClass(beanDefinitionHolder);
  Service service=findAnnotation(beanClass,Service.class);
  Class<?> interfaceClass=resolveServiceInterfaceClass(beanClass,service);
  String annotatedServiceBeanName=beanDefinitionHolder.getBeanName();
  AbstractBeanDefinition serviceBeanDefinition=buildServiceBeanDefinition(service,interfaceClass,annotatedServiceBeanName);
  String beanName=generateServiceBeanName(interfaceClass,annotatedServiceBeanName);
  if (scanner.checkCandidate(beanName,serviceBeanDefinition)) {
    registry.registerBeanDefinition(beanName,serviceBeanDefinition);
    if (logger.isInfoEnabled()) {
      logger.warn(""String_Node_Str"" + serviceBeanDefinition + ""String_Node_Str""+ beanName);
    }
  }
 else {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"" + serviceBeanDefinition + ""String_Node_Str""+ beanName+ ""String_Node_Str"");
    }
  }
}"
85095,"/** 
 * Registers Beans whose classes was annotated   {@link Service}
 * @param packagesToScan The base packages to scan
 * @param registry       {@link BeanDefinitionRegistry}
 */
private void registerServiceBeans(Set<String> packagesToScan,BeanDefinitionRegistry registry){
  DubboClassPathBeanDefinitionScanner scanner=new DubboClassPathBeanDefinitionScanner(registry,environment,resourceLoader);
  BeanNameGenerator beanNameGenerator=resolveBeanNameGenerator(registry);
  scanner.setBeanNameGenerator(beanNameGenerator);
  scanner.addIncludeFilter(new AnnotationTypeFilter(Service.class));
  for (  String packageToScan : packagesToScan) {
    Set<BeanDefinitionHolder> beanDefinitionHolders=scanner.doScan(packageToScan);
    if (CollectionUtils.isEmpty(beanDefinitionHolders)) {
      if (logger.isInfoEnabled()) {
        logger.info(""String_Node_Str"" + ""String_Node_Str"");
        logger.info(""String_Node_Str"");
      }
      beanDefinitionHolders=findServiceBeanDefinitionHolders(scanner,packageToScan,registry,beanNameGenerator);
    }
    if (!CollectionUtils.isEmpty(beanDefinitionHolders)) {
      for (      BeanDefinitionHolder beanDefinitionHolder : beanDefinitionHolders) {
        registerServiceBean(beanDefinitionHolder,registry);
      }
      if (logger.isInfoEnabled()) {
        logger.info(beanDefinitionHolders.size() + ""String_Node_Str"" + beanDefinitionHolders+ ""String_Node_Str""+ packageToScan+ ""String_Node_Str"");
      }
    }
 else {
      if (logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"");
      }
    }
  }
}","/** 
 * Registers Beans whose classes was annotated   {@link Service}
 * @param packagesToScan The base packages to scan
 * @param registry       {@link BeanDefinitionRegistry}
 */
private void registerServiceBeans(Set<String> packagesToScan,BeanDefinitionRegistry registry){
  DubboClassPathBeanDefinitionScanner scanner=new DubboClassPathBeanDefinitionScanner(registry,environment,resourceLoader);
  BeanNameGenerator beanNameGenerator=resolveBeanNameGenerator(registry);
  scanner.setBeanNameGenerator(beanNameGenerator);
  scanner.addIncludeFilter(new AnnotationTypeFilter(Service.class));
  for (  String packageToScan : packagesToScan) {
    scanner.scan(packageToScan);
    Set<BeanDefinitionHolder> beanDefinitionHolders=findServiceBeanDefinitionHolders(scanner,packageToScan,registry,beanNameGenerator);
    if (!CollectionUtils.isEmpty(beanDefinitionHolders)) {
      for (      BeanDefinitionHolder beanDefinitionHolder : beanDefinitionHolders) {
        registerServiceBean(beanDefinitionHolder,registry,scanner);
      }
      if (logger.isInfoEnabled()) {
        logger.info(beanDefinitionHolders.size() + ""String_Node_Str"" + beanDefinitionHolders+ ""String_Node_Str""+ packageToScan+ ""String_Node_Str"");
      }
    }
 else {
      if (logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"" + packageToScan + ""String_Node_Str"");
      }
    }
  }
}"
85096,"public void init(){
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ApplicationConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ModuleConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(RegistryConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(MonitorConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ProviderConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ConsumerConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ProtocolConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ServiceBean.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ReferenceBean.class,false));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(AnnotationBean.class,true));
}","public void init(){
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ApplicationConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ModuleConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(RegistryConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(MonitorConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ProviderConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ConsumerConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ProtocolConfig.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ServiceBean.class,true));
  registerBeanDefinitionParser(""String_Node_Str"",new DubboBeanDefinitionParser(ReferenceBean.class,false));
  registerBeanDefinitionParser(""String_Node_Str"",new AnnotationBeanDefinitionParser());
}"
85097,"public void notify(List<URL> urls){
  if (urls == null || urls.isEmpty()) {
    return;
  }
  final Map<String,Map<String,Map<Long,URL>>> categories=new HashMap<String,Map<String,Map<Long,URL>>>();
  for (  URL url : urls) {
    String category=url.getParameter(Constants.CATEGORY_KEY,Constants.PROVIDERS_CATEGORY);
    if (Constants.EMPTY_PROTOCOL.equalsIgnoreCase(url.getProtocol())) {
      ConcurrentMap<String,Map<Long,URL>> services=registryCache.get(category);
      if (services != null) {
        String group=url.getParameter(Constants.GROUP_KEY);
        String version=url.getParameter(Constants.VERSION_KEY);
        if (!Constants.ANY_VALUE.equals(group) && !Constants.ANY_VALUE.equals(version)) {
          services.remove(url.getServiceKey());
        }
 else {
          for (          Map.Entry<String,Map<Long,URL>> serviceEntry : services.entrySet()) {
            String service=serviceEntry.getKey();
            if (Tool.getInterface(service).equals(url.getServiceInterface()) && (Constants.ANY_VALUE.equals(group) || StringUtils.isEquals(group,Tool.getGroup(service))) && (Constants.ANY_VALUE.equals(version) || StringUtils.isEquals(version,Tool.getVersion(service)))) {
              services.remove(service);
            }
          }
        }
      }
    }
 else {
      Map<String,Map<Long,URL>> services=categories.get(category);
      if (services == null) {
        services=new HashMap<String,Map<Long,URL>>();
        categories.put(category,services);
      }
      String service=url.getServiceKey();
      Map<Long,URL> ids=services.get(service);
      if (ids == null) {
        ids=new HashMap<Long,URL>();
        services.put(service,ids);
      }
      ids.put(ID.incrementAndGet(),url);
    }
  }
  for (  Map.Entry<String,Map<String,Map<Long,URL>>> categoryEntry : categories.entrySet()) {
    String category=categoryEntry.getKey();
    ConcurrentMap<String,Map<Long,URL>> services=registryCache.get(category);
    if (services == null) {
      services=new ConcurrentHashMap<String,Map<Long,URL>>();
      registryCache.put(category,services);
    }
    services.putAll(categoryEntry.getValue());
  }
}","public void notify(List<URL> urls){
  if (urls == null || urls.isEmpty()) {
    return;
  }
  final Map<String,Map<String,Map<Long,URL>>> categories=new HashMap<String,Map<String,Map<Long,URL>>>();
  String interfaceName=null;
  for (  URL url : urls) {
    String category=url.getParameter(Constants.CATEGORY_KEY,Constants.PROVIDERS_CATEGORY);
    if (Constants.EMPTY_PROTOCOL.equalsIgnoreCase(url.getProtocol())) {
      ConcurrentMap<String,Map<Long,URL>> services=registryCache.get(category);
      if (services != null) {
        String group=url.getParameter(Constants.GROUP_KEY);
        String version=url.getParameter(Constants.VERSION_KEY);
        if (!Constants.ANY_VALUE.equals(group) && !Constants.ANY_VALUE.equals(version)) {
          services.remove(url.getServiceKey());
        }
 else {
          for (          Map.Entry<String,Map<Long,URL>> serviceEntry : services.entrySet()) {
            String service=serviceEntry.getKey();
            if (Tool.getInterface(service).equals(url.getServiceInterface()) && (Constants.ANY_VALUE.equals(group) || StringUtils.isEquals(group,Tool.getGroup(service))) && (Constants.ANY_VALUE.equals(version) || StringUtils.isEquals(version,Tool.getVersion(service)))) {
              services.remove(service);
            }
          }
        }
      }
    }
 else {
      if (StringUtils.isEmpty(interfaceName)) {
        interfaceName=url.getServiceInterface();
      }
      Map<String,Map<Long,URL>> services=categories.get(category);
      if (services == null) {
        services=new HashMap<String,Map<Long,URL>>();
        categories.put(category,services);
      }
      String service=url.getServiceKey();
      Map<Long,URL> ids=services.get(service);
      if (ids == null) {
        ids=new HashMap<Long,URL>();
        services.put(service,ids);
      }
      if (URL_IDS_MAPPER.containsKey(url.toFullString())) {
        ids.put(URL_IDS_MAPPER.get(url.toFullString()),url);
      }
 else {
        long currentId=ID.incrementAndGet();
        ids.put(currentId,url);
        URL_IDS_MAPPER.putIfAbsent(url.toFullString(),currentId);
      }
    }
  }
  if (categories.size() == 0) {
    return;
  }
  for (  Map.Entry<String,Map<String,Map<Long,URL>>> categoryEntry : categories.entrySet()) {
    String category=categoryEntry.getKey();
    ConcurrentMap<String,Map<Long,URL>> services=registryCache.get(category);
    if (services == null) {
      services=new ConcurrentHashMap<String,Map<Long,URL>>();
      registryCache.put(category,services);
    }
 else {
      Set<String> keys=new HashSet<String>(services.keySet());
      for (      String key : keys) {
        if (Tool.getInterface(key).equals(interfaceName) && !categoryEntry.getValue().entrySet().contains(key)) {
          services.remove(key);
        }
      }
    }
    services.putAll(categoryEntry.getValue());
  }
}"
85098,"public void index(Provider provider,Map<String,Object> context){
  String service=(String)context.get(""String_Node_Str"");
  String application=(String)context.get(""String_Node_Str"");
  String address=(String)context.get(""String_Node_Str"");
  String value=""String_Node_Str"";
  String separators=""String_Node_Str"";
  List<Provider> providers=null;
  if (service != null && service.length() > 0) {
    providers=providerService.findByService(service);
    value=service + separators + request.getRequestURI();
  }
 else   if (address != null && address.length() > 0) {
    providers=providerService.findByAddress(address);
    value=address + separators + request.getRequestURI();
  }
 else   if (application != null && application.length() > 0) {
    providers=providerService.findByApplication(application);
    value=application + separators + request.getRequestURI();
  }
 else {
    providers=providerService.findAll();
  }
  context.put(""String_Node_Str"",providers);
  setSearchHistroy(context,value);
}","public void index(Provider provider,Map<String,Object> context){
  String service=(String)context.get(""String_Node_Str"");
  String application=(String)context.get(""String_Node_Str"");
  String address=(String)context.get(""String_Node_Str"");
  String value=""String_Node_Str"";
  String separators=""String_Node_Str"";
  List<Provider> providers=null;
  if (service != null && service.length() > 0) {
    providers=providerService.findByService(service);
    value=service + separators + request.getRequestURI();
  }
 else   if (address != null && address.length() > 0) {
    providers=providerService.findByAddress(address);
    value=address + separators + request.getRequestURI();
  }
 else   if (application != null && application.length() > 0) {
    providers=providerService.findByApplication(application);
    value=application + separators + request.getRequestURI();
  }
 else {
    providers=providerService.findAll();
  }
  context.put(""String_Node_Str"",providers);
  context.put(""String_Node_Str"",getServiceAppMap(providers));
  setSearchHistroy(context,value);
}"
85099,"@Override public String toString(){
  return getInterface() + ""String_Node_Str"" + getUrl() == null ? ""String_Node_Str"" : getUrl().toString();
}","@Override public String toString(){
  return getInterface() + ""String_Node_Str"" + (getUrl() == null ? ""String_Node_Str"" : getUrl().toString());
}"
85100,"/** 
 * Adds the   {@code Runnable} and accompanying {@code Executor} to the list oflisteners to execute. If execution has already begun, the listener is executed immediately. <p> <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider  {@link MoreExecutors#sameThreadExecutor}. For heavier listeners,   {@code sameThreadExecutor()} carries some caveats: First, thethread that the listener runs in depends on whether the  {@code ExecutionList} has been executed at the time it is added. In particular,listeners may run in the thread that calls  {@code add}. Second, the thread that calls   {@link #execute} may be an internal implementation thread, suchas an RPC network thread, and  {@code sameThreadExecutor()} listeners mayrun in this thread. Finally, during the execution of a  {@code sameThreadExecutor} listener, all other registered but unexecutedlisteners are prevented from running, even if those listeners are to run in other executors.
 */
public void add(Runnable runnable,Executor executor){
  if (runnable == null || executor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
synchronized (this) {
    if (!executed) {
      runnables=new RunnableExecutorPair(runnable,executor,runnables);
      return;
    }
  }
  executeListener(runnable,executor);
}","/** 
 * Adds the   {@code Runnable} and accompanying {@code Executor} to the list oflisteners to execute. If execution has already begun, the listener is executed immediately. <p> <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider  {@link MoreExecutors#sameThreadExecutor}. For heavier listeners,   {@code sameThreadExecutor()} carries some caveats: First, thethread that the listener runs in depends on whether the  {@code ExecutionList} has been executed at the time it is added. In particular,listeners may run in the thread that calls  {@code add}. Second, the thread that calls   {@link #execute} may be an internal implementation thread, suchas an RPC network thread, and  {@code sameThreadExecutor()} listeners mayrun in this thread. Finally, during the execution of a  {@code sameThreadExecutor} listener, all other registered but unexecutedlisteners are prevented from running, even if those listeners are to run in other executors.
 */
public void add(Runnable runnable,Executor executor){
  if (runnable == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (executor == null) {
    logger.info(""String_Node_Str"");
    executor=DEFAULT_EXECUTOR;
  }
synchronized (this) {
    if (!executed) {
      runnables=new RunnableExecutorPair(runnable,executor,runnables);
      return;
    }
  }
  executeListener(runnable,executor);
}"
85101,"/** 
 * Registers a listener to be   {@linkplain Executor#execute(Runnable) run} onthe given executor.  The listener will run when the  {@code Future}'s computation is   {@linkplain Future#isDone() complete} or, if the computationis already complete, immediately. <p> <p>There is no guaranteed ordering of execution of listeners, but any listener added through this method is guaranteed to be called once the computation is complete. <p> <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown during  {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception thrown by {@linkplain MoreExecutors#sameThreadExecutor inline execution}) will be caught and logged. <p> <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider   {@link MoreExecutors#sameThreadExecutor}. For heavier listeners,   {@code sameThreadExecutor()} carries some caveats.  Forexample, the listener may run on an unpredictable or undesirable thread: <p> <ul> <li>If this  {@code Future} is done at the time {@code addListener} iscalled,  {@code addListener} will execute the listener inline.<li>If this  {@code Future} is not yet done, {@code addListener} willschedule the listener to be run by the thread that completes this  {@code Future}, which may be an internal system thread such as an RPC network thread. </ul> <p> <p>Also note that, regardless of which thread executes the  {@code sameThreadExecutor()} listener, all other registered but unexecutedlisteners are prevented from running during its execution, even if those listeners are to run in other executors. <p> <p>This is the most general listener interface. For common operations performed using listeners, see  {@link com.google.common.util.concurrent.Futures}. For a simplified but general listener interface, see   {@link com.google.common.util.concurrent.Futures#addCallback addCallback()}.
 * @param listener the listener to run when the computation is complete
 * @param executor the executor to run the listener in
 * @throws NullPointerException       if the executor or listener was null
 * @throws RejectedExecutionException if we tried to execute the listenerimmediately but the executor rejected it.
 */
void addListener(Runnable listener,Executor executor);",void addListener(Runnable listener);
85102,"@Override public void addListener(Runnable listener,Executor exec){
  executionList.add(listener,exec);
}","@Override public void addListener(Runnable listener){
  executionList.add(listener,null);
}"
85103,"public static void notNull(Object obj,String message){
  if (obj == null) {
    throw new IllegalArgumentException(message);
  }
}","public static void notNull(Object obj,RuntimeException exeception){
  if (obj == null) {
    throw exeception;
  }
}"
85104,"public Monitor getMonitor(URL url){
  url=url.setPath(MonitorService.class.getName()).addParameter(Constants.INTERFACE_KEY,MonitorService.class.getName());
  String key=url.toServiceStringWithoutResolving();
  Monitor monitor=MONITORS.get(key);
  Future<Monitor> future=FUTURES.get(key);
  if (monitor != null || future != null) {
    return monitor;
  }
  LOCK.lock();
  try {
    monitor=MONITORS.get(key);
    future=FUTURES.get(key);
    if (monitor != null || future != null) {
      return monitor;
    }
    final URL monitorUrl=url;
    final ListenableFutureTask<Monitor> listenableFutureTask=ListenableFutureTask.create(new MonitorCreator(monitorUrl));
    listenableFutureTask.addListener(new MonitorListener(key),executor);
    executor.execute(listenableFutureTask);
    FUTURES.put(key,listenableFutureTask);
    return null;
  }
  finally {
    LOCK.unlock();
  }
}","public Monitor getMonitor(URL url){
  url=url.setPath(MonitorService.class.getName()).addParameter(Constants.INTERFACE_KEY,MonitorService.class.getName());
  String key=url.toServiceStringWithoutResolving();
  Monitor monitor=MONITORS.get(key);
  Future<Monitor> future=FUTURES.get(key);
  if (monitor != null || future != null) {
    return monitor;
  }
  LOCK.lock();
  try {
    monitor=MONITORS.get(key);
    future=FUTURES.get(key);
    if (monitor != null || future != null) {
      return monitor;
    }
    final URL monitorUrl=url;
    final ListenableFutureTask<Monitor> listenableFutureTask=ListenableFutureTask.create(new MonitorCreator(monitorUrl));
    listenableFutureTask.addListener(new MonitorListener(key));
    executor.execute(listenableFutureTask);
    FUTURES.put(key,listenableFutureTask);
    return null;
  }
  finally {
    LOCK.unlock();
  }
}"
85105,"public CuratorZookeeperClient(URL url){
  super(url);
  try {
    CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder().connectString(url.getBackupAddress()).retryPolicy(new RetryNTimes(Integer.MAX_VALUE,1000)).connectionTimeoutMs(5000);
    String authority=url.getAuthority();
    if (authority != null && authority.length() > 0) {
      builder=builder.authorization(""String_Node_Str"",authority.getBytes());
    }
    client=builder.build();
    client.getConnectionStateListenable().addListener(new ConnectionStateListener(){
      public void stateChanged(      CuratorFramework client,      ConnectionState state){
        if (state == ConnectionState.LOST) {
          CuratorZookeeperClient.this.stateChanged(StateListener.DISCONNECTED);
        }
 else         if (state == ConnectionState.CONNECTED) {
          CuratorZookeeperClient.this.stateChanged(StateListener.CONNECTED);
        }
 else         if (state == ConnectionState.RECONNECTED) {
          CuratorZookeeperClient.this.stateChanged(StateListener.RECONNECTED);
        }
      }
    }
);
    client.start();
  }
 catch (  Exception e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
}","public CuratorZookeeperClient(URL url){
  super(url);
  try {
    CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder().connectString(url.getBackupAddress()).retryPolicy(new RetryNTimes(1,1000)).connectionTimeoutMs(5000);
    String authority=url.getAuthority();
    if (authority != null && authority.length() > 0) {
      builder=builder.authorization(""String_Node_Str"",authority.getBytes());
    }
    client=builder.build();
    client.getConnectionStateListenable().addListener(new ConnectionStateListener(){
      public void stateChanged(      CuratorFramework client,      ConnectionState state){
        if (state == ConnectionState.LOST) {
          CuratorZookeeperClient.this.stateChanged(StateListener.DISCONNECTED);
        }
 else         if (state == ConnectionState.CONNECTED) {
          CuratorZookeeperClient.this.stateChanged(StateListener.CONNECTED);
        }
 else         if (state == ConnectionState.RECONNECTED) {
          CuratorZookeeperClient.this.stateChanged(StateListener.RECONNECTED);
        }
      }
    }
);
    client.start();
  }
 catch (  Exception e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
}"
85106,"public ZkclientZookeeperClient(URL url){
  super(url);
  client=new ZkClient(url.getBackupAddress());
  client.subscribeStateChanges(new IZkStateListener(){
    public void handleStateChanged(    KeeperState state) throws Exception {
      ZkclientZookeeperClient.this.state=state;
      if (state == KeeperState.Disconnected) {
        stateChanged(StateListener.DISCONNECTED);
      }
 else       if (state == KeeperState.SyncConnected) {
        stateChanged(StateListener.CONNECTED);
      }
    }
    public void handleNewSession() throws Exception {
      stateChanged(StateListener.RECONNECTED);
    }
  }
);
}","public ZkclientZookeeperClient(URL url){
  super(url);
  client=new ZkClientWrapper(url.getBackupAddress(),30000);
  client.addListener(new IZkStateListener(){
    public void handleStateChanged(    KeeperState state) throws Exception {
      ZkclientZookeeperClient.this.state=state;
      if (state == KeeperState.Disconnected) {
        stateChanged(StateListener.DISCONNECTED);
      }
 else       if (state == KeeperState.SyncConnected) {
        stateChanged(StateListener.CONNECTED);
      }
    }
    public void handleNewSession() throws Exception {
      stateChanged(StateListener.RECONNECTED);
    }
  }
);
  client.start();
}"
85107,"public void createPersistent(String path){
  try {
    client.createPersistent(path,true);
  }
 catch (  ZkNodeExistsException e) {
  }
}","public void createPersistent(String path){
  try {
    client.createPersistent(path);
  }
 catch (  ZkNodeExistsException e) {
  }
}"
85108,"public void process(WatchedEvent event) throws Exception {
  if (listener != null) {
    listener.childChanged(event.getPath(),client.getChildren().usingWatcher(this).forPath(event.getPath()));
  }
}","public void process(WatchedEvent event) throws Exception {
  if (listener != null) {
    String path=event.getPath() == null ? ""String_Node_Str"" : event.getPath();
    listener.childChanged(path,StringUtils.isNotEmpty(path) ? client.getChildren().usingWatcher(this).forPath(path) : Collections.<String>emptyList());
  }
}"
85109,"public void doSaveProperties(long version){
  if (version < lastCacheChanged.get()) {
    return;
  }
  if (file == null) {
    return;
  }
  Properties newProperties=new Properties();
  InputStream in=null;
  try {
    if (file.exists()) {
      in=new FileInputStream(file);
      newProperties.load(in);
    }
  }
 catch (  Throwable e) {
    logger.warn(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
        logger.warn(e.getMessage(),e);
      }
    }
  }
  try {
    newProperties.putAll(properties);
    File lockfile=new File(file.getAbsolutePath() + ""String_Node_Str"");
    if (!lockfile.exists()) {
      lockfile.createNewFile();
    }
    RandomAccessFile raf=new RandomAccessFile(lockfile,""String_Node_Str"");
    try {
      FileChannel channel=raf.getChannel();
      try {
        FileLock lock=channel.tryLock();
        if (lock == null) {
          throw new IOException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
        }
        try {
          if (!file.exists()) {
            file.createNewFile();
          }
          FileOutputStream outputFile=new FileOutputStream(file);
          try {
            newProperties.store(outputFile,""String_Node_Str"");
          }
  finally {
            outputFile.close();
          }
        }
  finally {
          lock.release();
        }
      }
  finally {
        channel.close();
      }
    }
  finally {
      raf.close();
    }
  }
 catch (  Throwable e) {
    if (version < lastCacheChanged.get()) {
      return;
    }
 else {
      registryCacheExecutor.execute(new SaveProperties(lastCacheChanged.incrementAndGet()));
    }
    logger.warn(""String_Node_Str"" + e.getMessage(),e);
  }
}","public void doSaveProperties(long version){
  if (version < lastCacheChanged.get()) {
    return;
  }
  if (file == null) {
    return;
  }
  try {
    File lockfile=new File(file.getAbsolutePath() + ""String_Node_Str"");
    if (!lockfile.exists()) {
      lockfile.createNewFile();
    }
    RandomAccessFile raf=new RandomAccessFile(lockfile,""String_Node_Str"");
    try {
      FileChannel channel=raf.getChannel();
      try {
        FileLock lock=channel.tryLock();
        if (lock == null) {
          throw new IOException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
        }
        try {
          if (!file.exists()) {
            file.createNewFile();
          }
          FileOutputStream outputFile=new FileOutputStream(file);
          try {
            properties.store(outputFile,""String_Node_Str"");
          }
  finally {
            outputFile.close();
          }
        }
  finally {
          lock.release();
        }
      }
  finally {
        channel.close();
      }
    }
  finally {
      raf.close();
    }
  }
 catch (  Throwable e) {
    if (version < lastCacheChanged.get()) {
      return;
    }
 else {
      registryCacheExecutor.execute(new SaveProperties(lastCacheChanged.incrementAndGet()));
    }
    logger.warn(""String_Node_Str"" + e.getMessage(),e);
  }
}"
85110,"public AbstractRegistry(URL url){
  setUrl(url);
  syncSaveFile=url.getParameter(Constants.REGISTRY_FILESAVE_SYNC_KEY,false);
  String filename=url.getParameter(Constants.FILE_KEY,System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + url.getHost()+ ""String_Node_Str"");
  File file=null;
  if (ConfigUtils.isNotEmpty(filename)) {
    file=new File(filename);
    if (!file.exists() && file.getParentFile() != null && !file.getParentFile().exists()) {
      if (!file.getParentFile().mkdirs()) {
        throw new IllegalArgumentException(""String_Node_Str"" + file + ""String_Node_Str""+ file.getParentFile()+ ""String_Node_Str"");
      }
    }
  }
  this.file=file;
  loadProperties();
  notify(url.getBackupUrls());
}","public AbstractRegistry(URL url){
  setUrl(url);
  syncSaveFile=url.getParameter(Constants.REGISTRY_FILESAVE_SYNC_KEY,false);
  String filename=url.getParameter(Constants.FILE_KEY,System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + url.getParameter(Constants.APPLICATION_KEY)+ ""String_Node_Str""+ url.getAddress()+ ""String_Node_Str"");
  File file=null;
  if (ConfigUtils.isNotEmpty(filename)) {
    file=new File(filename);
    if (!file.exists() && file.getParentFile() != null && !file.getParentFile().exists()) {
      if (!file.getParentFile().mkdirs()) {
        throw new IllegalArgumentException(""String_Node_Str"" + file + ""String_Node_Str""+ file.getParentFile()+ ""String_Node_Str"");
      }
    }
  }
  this.file=file;
  loadProperties();
  notify(url.getBackupUrls());
}"
85111,"public void create(String path,boolean ephemeral){
  int i=path.lastIndexOf('/');
  if (i > 0) {
    create(path.substring(0,i),false);
  }
  if (ephemeral) {
    createEphemeral(path);
  }
 else {
    createPersistent(path);
  }
}","public void create(String path,boolean ephemeral){
  int i=path.lastIndexOf('/');
  if (i > 0) {
    String parentPath=path.substring(0,i);
    if (!checkExists(parentPath)) {
      create(parentPath,false);
    }
  }
  if (ephemeral) {
    createEphemeral(path);
  }
 else {
    createPersistent(path);
  }
}"
85112,"private static Object getMethodParameterBean(Class<?> clazz,Method method,Object[] args){
  if (!hasConstraintParameter(method)) {
    return null;
  }
  try {
    String upperName=toUpperMethoName(method.getName());
    String parameterSimpleName=upperName + ""String_Node_Str"";
    String parameterClassName=clazz.getName() + ""String_Node_Str"" + parameterSimpleName;
    Class<?> parameterClass;
    try {
      parameterClass=(Class<?>)Class.forName(parameterClassName,true,clazz.getClassLoader());
    }
 catch (    ClassNotFoundException e) {
      ClassPool pool=ClassGenerator.getClassPool(clazz.getClassLoader());
      CtClass ctClass=pool.makeClass(parameterClassName);
      ClassFile classFile=ctClass.getClassFile();
      classFile.setVersionToJava5();
      ctClass.addConstructor(CtNewConstructor.defaultConstructor(pool.getCtClass(parameterClassName)));
      Class<?>[] parameterTypes=method.getParameterTypes();
      Annotation[][] parameterAnnotations=method.getParameterAnnotations();
      for (int i=0; i < parameterTypes.length; i++) {
        Class<?> type=parameterTypes[i];
        Annotation[] annotations=parameterAnnotations[i];
        AnnotationsAttribute attribute=new AnnotationsAttribute(classFile.getConstPool(),AnnotationsAttribute.visibleTag);
        for (        Annotation annotation : annotations) {
          if (annotation.annotationType().isAnnotationPresent(Constraint.class)) {
            javassist.bytecode.annotation.Annotation ja=new javassist.bytecode.annotation.Annotation(classFile.getConstPool(),pool.getCtClass(annotation.annotationType().getName()));
            Method[] members=annotation.annotationType().getMethods();
            for (            Method member : members) {
              if (Modifier.isPublic(member.getModifiers()) && member.getParameterTypes().length == 0 && member.getDeclaringClass() == annotation.annotationType()) {
                Object value=member.invoke(annotation,new Object[0]);
                if (value != null && !value.equals(member.getDefaultValue())) {
                  MemberValue memberValue=createMemberValue(classFile.getConstPool(),pool.get(member.getReturnType().getName()),value);
                  ja.addMemberValue(member.getName(),memberValue);
                }
              }
            }
            attribute.addAnnotation(ja);
          }
        }
        String fieldName=method.getName() + ""String_Node_Str"" + i;
        CtField ctField=CtField.make(""String_Node_Str"" + type.getCanonicalName() + ""String_Node_Str""+ fieldName+ ""String_Node_Str"",pool.getCtClass(parameterClassName));
        ctField.getFieldInfo().addAttribute(attribute);
        ctClass.addField(ctField);
      }
      parameterClass=ctClass.toClass();
    }
    Object parameterBean=parameterClass.newInstance();
    for (int i=0; i < args.length; i++) {
      Field field=parameterClass.getField(method.getName() + ""String_Node_Str"" + i);
      field.set(parameterBean,args[i]);
    }
    return parameterBean;
  }
 catch (  Throwable e) {
    logger.warn(e.getMessage(),e);
    return null;
  }
}","private static Object getMethodParameterBean(Class<?> clazz,Method method,Object[] args){
  if (!hasConstraintParameter(method)) {
    return null;
  }
  try {
    String parameterClassName=generateMethodParameterClassName(clazz,method);
    Class<?> parameterClass;
    try {
      parameterClass=(Class<?>)Class.forName(parameterClassName,true,clazz.getClassLoader());
    }
 catch (    ClassNotFoundException e) {
      ClassPool pool=ClassGenerator.getClassPool(clazz.getClassLoader());
      CtClass ctClass=pool.makeClass(parameterClassName);
      ClassFile classFile=ctClass.getClassFile();
      classFile.setVersionToJava5();
      ctClass.addConstructor(CtNewConstructor.defaultConstructor(pool.getCtClass(parameterClassName)));
      Class<?>[] parameterTypes=method.getParameterTypes();
      Annotation[][] parameterAnnotations=method.getParameterAnnotations();
      for (int i=0; i < parameterTypes.length; i++) {
        Class<?> type=parameterTypes[i];
        Annotation[] annotations=parameterAnnotations[i];
        AnnotationsAttribute attribute=new AnnotationsAttribute(classFile.getConstPool(),AnnotationsAttribute.visibleTag);
        for (        Annotation annotation : annotations) {
          if (annotation.annotationType().isAnnotationPresent(Constraint.class)) {
            javassist.bytecode.annotation.Annotation ja=new javassist.bytecode.annotation.Annotation(classFile.getConstPool(),pool.getCtClass(annotation.annotationType().getName()));
            Method[] members=annotation.annotationType().getMethods();
            for (            Method member : members) {
              if (Modifier.isPublic(member.getModifiers()) && member.getParameterTypes().length == 0 && member.getDeclaringClass() == annotation.annotationType()) {
                Object value=member.invoke(annotation,new Object[0]);
                if (null != value) {
                  MemberValue memberValue=createMemberValue(classFile.getConstPool(),pool.get(member.getReturnType().getName()),value);
                  ja.addMemberValue(member.getName(),memberValue);
                }
              }
            }
            attribute.addAnnotation(ja);
          }
        }
        String fieldName=method.getName() + ""String_Node_Str"" + i;
        CtField ctField=CtField.make(""String_Node_Str"" + type.getCanonicalName() + ""String_Node_Str""+ fieldName+ ""String_Node_Str"",pool.getCtClass(parameterClassName));
        ctField.getFieldInfo().addAttribute(attribute);
        ctClass.addField(ctField);
      }
      parameterClass=ctClass.toClass();
    }
    Object parameterBean=parameterClass.newInstance();
    for (int i=0; i < args.length; i++) {
      Field field=parameterClass.getField(method.getName() + ""String_Node_Str"" + i);
      field.set(parameterBean,args[i]);
    }
    return parameterBean;
  }
 catch (  Throwable e) {
    logger.warn(e.getMessage(),e);
    return null;
  }
}"
85113,"protected int getWeight(Invoker<?> invoker,Invocation invocation){
  int weight=invoker.getUrl().getMethodParameter(invocation.getMethodName(),Constants.WEIGHT_KEY,Constants.DEFAULT_WEIGHT);
  if (weight > 0) {
    long timestamp=invoker.getUrl().getParameter(Constants.TIMESTAMP_KEY,0L);
    if (timestamp > 0L) {
      int uptime=(int)(System.currentTimeMillis() - timestamp);
      int warmup=invoker.getUrl().getParameter(Constants.WARMUP_KEY,Constants.DEFAULT_WARMUP);
      if (uptime > 0 && uptime < warmup) {
        weight=calculateWarmupWeight(uptime,warmup,weight);
      }
    }
  }
  return weight;
}","protected int getWeight(Invoker<?> invoker,Invocation invocation){
  int weight=invoker.getUrl().getMethodParameter(invocation.getMethodName(),Constants.WEIGHT_KEY,Constants.DEFAULT_WEIGHT);
  if (weight > 0) {
    long timestamp=invoker.getUrl().getParameter(Constants.REMOTE_TIMESTAMP_KEY,0L);
    if (timestamp > 0L) {
      int uptime=(int)(System.currentTimeMillis() - timestamp);
      int warmup=invoker.getUrl().getParameter(Constants.WARMUP_KEY,Constants.DEFAULT_WARMUP);
      if (uptime > 0 && uptime < warmup) {
        weight=calculateWarmupWeight(uptime,warmup,weight);
      }
    }
  }
  return weight;
}"
85114,"public static URL mergeUrl(URL remoteUrl,Map<String,String> localMap){
  Map<String,String> map=new HashMap<String,String>();
  Map<String,String> remoteMap=remoteUrl.getParameters();
  if (remoteMap != null && remoteMap.size() > 0) {
    map.putAll(remoteMap);
    map.remove(Constants.THREAD_NAME_KEY);
    map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.THREAD_NAME_KEY);
    map.remove(Constants.THREADPOOL_KEY);
    map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.THREADPOOL_KEY);
    map.remove(Constants.CORE_THREADS_KEY);
    map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.CORE_THREADS_KEY);
    map.remove(Constants.THREADS_KEY);
    map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.THREADS_KEY);
    map.remove(Constants.QUEUES_KEY);
    map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.QUEUES_KEY);
    map.remove(Constants.ALIVE_KEY);
    map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.ALIVE_KEY);
  }
  if (localMap != null && localMap.size() > 0) {
    map.putAll(localMap);
  }
  if (remoteMap != null && remoteMap.size() > 0) {
    String dubbo=remoteMap.get(Constants.DUBBO_VERSION_KEY);
    if (dubbo != null && dubbo.length() > 0) {
      map.put(Constants.DUBBO_VERSION_KEY,dubbo);
    }
    String version=remoteMap.get(Constants.VERSION_KEY);
    if (version != null && version.length() > 0) {
      map.put(Constants.VERSION_KEY,version);
    }
    String group=remoteMap.get(Constants.GROUP_KEY);
    if (group != null && group.length() > 0) {
      map.put(Constants.GROUP_KEY,group);
    }
    String methods=remoteMap.get(Constants.METHODS_KEY);
    if (methods != null && methods.length() > 0) {
      map.put(Constants.METHODS_KEY,methods);
    }
    String remoteFilter=remoteMap.get(Constants.REFERENCE_FILTER_KEY);
    String localFilter=localMap.get(Constants.REFERENCE_FILTER_KEY);
    if (remoteFilter != null && remoteFilter.length() > 0 && localFilter != null && localFilter.length() > 0) {
      localMap.put(Constants.REFERENCE_FILTER_KEY,remoteFilter + ""String_Node_Str"" + localFilter);
    }
    String remoteListener=remoteMap.get(Constants.INVOKER_LISTENER_KEY);
    String localListener=localMap.get(Constants.INVOKER_LISTENER_KEY);
    if (remoteListener != null && remoteListener.length() > 0 && localListener != null && localListener.length() > 0) {
      localMap.put(Constants.INVOKER_LISTENER_KEY,remoteListener + ""String_Node_Str"" + localListener);
    }
  }
  return remoteUrl.clearParameters().addParameters(map);
}","public static URL mergeUrl(URL remoteUrl,Map<String,String> localMap){
  Map<String,String> map=new HashMap<String,String>();
  Map<String,String> remoteMap=remoteUrl.getParameters();
  if (remoteMap != null && remoteMap.size() > 0) {
    map.putAll(remoteMap);
    map.remove(Constants.THREAD_NAME_KEY);
    map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.THREAD_NAME_KEY);
    map.remove(Constants.THREADPOOL_KEY);
    map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.THREADPOOL_KEY);
    map.remove(Constants.CORE_THREADS_KEY);
    map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.CORE_THREADS_KEY);
    map.remove(Constants.THREADS_KEY);
    map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.THREADS_KEY);
    map.remove(Constants.QUEUES_KEY);
    map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.QUEUES_KEY);
    map.remove(Constants.ALIVE_KEY);
    map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.ALIVE_KEY);
  }
  if (localMap != null && localMap.size() > 0) {
    map.putAll(localMap);
  }
  if (remoteMap != null && remoteMap.size() > 0) {
    String dubbo=remoteMap.get(Constants.DUBBO_VERSION_KEY);
    if (dubbo != null && dubbo.length() > 0) {
      map.put(Constants.DUBBO_VERSION_KEY,dubbo);
    }
    String version=remoteMap.get(Constants.VERSION_KEY);
    if (version != null && version.length() > 0) {
      map.put(Constants.VERSION_KEY,version);
    }
    String group=remoteMap.get(Constants.GROUP_KEY);
    if (group != null && group.length() > 0) {
      map.put(Constants.GROUP_KEY,group);
    }
    String methods=remoteMap.get(Constants.METHODS_KEY);
    if (methods != null && methods.length() > 0) {
      map.put(Constants.METHODS_KEY,methods);
    }
    map.put(Constants.REMOTE_TIMESTAMP_KEY,remoteMap.get(Constants.TIMESTAMP_KEY));
    String remoteFilter=remoteMap.get(Constants.REFERENCE_FILTER_KEY);
    String localFilter=localMap.get(Constants.REFERENCE_FILTER_KEY);
    if (remoteFilter != null && remoteFilter.length() > 0 && localFilter != null && localFilter.length() > 0) {
      localMap.put(Constants.REFERENCE_FILTER_KEY,remoteFilter + ""String_Node_Str"" + localFilter);
    }
    String remoteListener=remoteMap.get(Constants.INVOKER_LISTENER_KEY);
    String localListener=localMap.get(Constants.INVOKER_LISTENER_KEY);
    if (remoteListener != null && remoteListener.length() > 0 && localListener != null && localListener.length() > 0) {
      localMap.put(Constants.INVOKER_LISTENER_KEY,remoteListener + ""String_Node_Str"" + localListener);
    }
  }
  return remoteUrl.clearParameters().addParameters(map);
}"
85115,"/** 
 * Returns the serializer for a class.
 * @param cl the class of the object that needs to be serialized.
 * @return a serializer object for the serialization.
 */
public Serializer getSerializer(Class cl) throws HessianProtocolException {
  Serializer serializer;
  serializer=(Serializer)_staticSerializerMap.get(cl);
  if (serializer != null)   return serializer;
  if (_cachedSerializerMap != null) {
synchronized (_cachedSerializerMap) {
      serializer=(Serializer)_cachedSerializerMap.get(cl);
    }
    if (serializer != null)     return serializer;
  }
  for (int i=0; serializer == null && _factories != null && i < _factories.size(); i++) {
    AbstractSerializerFactory factory;
    factory=(AbstractSerializerFactory)_factories.get(i);
    serializer=factory.getSerializer(cl);
  }
  if (serializer != null) {
  }
 else   if (isZoneId(cl))   serializer=ZoneIdSerializer.getInstance();
 else   if (JavaSerializer.getWriteReplace(cl) != null)   serializer=new JavaSerializer(cl,_loader);
 else   if (HessianRemoteObject.class.isAssignableFrom(cl))   serializer=new RemoteSerializer();
 else   if (Map.class.isAssignableFrom(cl)) {
    if (_mapSerializer == null)     _mapSerializer=new MapSerializer();
    serializer=_mapSerializer;
  }
 else   if (Collection.class.isAssignableFrom(cl)) {
    if (_collectionSerializer == null) {
      _collectionSerializer=new CollectionSerializer();
    }
    serializer=_collectionSerializer;
  }
 else   if (cl.isArray())   serializer=new ArraySerializer();
 else   if (Throwable.class.isAssignableFrom(cl))   serializer=new ThrowableSerializer(cl,getClassLoader());
 else   if (InputStream.class.isAssignableFrom(cl))   serializer=new InputStreamSerializer();
 else   if (Iterator.class.isAssignableFrom(cl))   serializer=IteratorSerializer.create();
 else   if (Enumeration.class.isAssignableFrom(cl))   serializer=EnumerationSerializer.create();
 else   if (Calendar.class.isAssignableFrom(cl))   serializer=CalendarSerializer.create();
 else   if (Locale.class.isAssignableFrom(cl))   serializer=LocaleSerializer.create();
 else   if (Enum.class.isAssignableFrom(cl))   serializer=new EnumSerializer(cl);
  if (serializer == null)   serializer=getDefaultSerializer(cl);
  if (_cachedSerializerMap == null)   _cachedSerializerMap=new HashMap(8);
synchronized (_cachedSerializerMap) {
    _cachedSerializerMap.put(cl,serializer);
  }
  return serializer;
}","/** 
 * Returns the serializer for a class.
 * @param cl the class of the object that needs to be serialized.
 * @return a serializer object for the serialization.
 */
public Serializer getSerializer(Class cl) throws HessianProtocolException {
  Serializer serializer;
  serializer=(Serializer)_staticSerializerMap.get(cl);
  if (serializer != null)   return serializer;
  if (_cachedSerializerMap != null) {
synchronized (_cachedSerializerMap) {
      serializer=(Serializer)_cachedSerializerMap.get(cl);
    }
    if (serializer != null)     return serializer;
  }
  for (int i=0; serializer == null && _factories != null && i < _factories.size(); i++) {
    AbstractSerializerFactory factory;
    factory=(AbstractSerializerFactory)_factories.get(i);
    serializer=factory.getSerializer(cl);
  }
  if (serializer != null) {
  }
 else   if (isZoneId(cl))   serializer=ZoneIdSerializer.getInstance();
 else   if (isEnumSet(cl))   serializer=EnumSetSerializer.getInstance();
 else   if (JavaSerializer.getWriteReplace(cl) != null)   serializer=new JavaSerializer(cl,_loader);
 else   if (HessianRemoteObject.class.isAssignableFrom(cl))   serializer=new RemoteSerializer();
 else   if (Map.class.isAssignableFrom(cl)) {
    if (_mapSerializer == null)     _mapSerializer=new MapSerializer();
    serializer=_mapSerializer;
  }
 else   if (Collection.class.isAssignableFrom(cl)) {
    if (_collectionSerializer == null) {
      _collectionSerializer=new CollectionSerializer();
    }
    serializer=_collectionSerializer;
  }
 else   if (cl.isArray())   serializer=new ArraySerializer();
 else   if (Throwable.class.isAssignableFrom(cl))   serializer=new ThrowableSerializer(cl,getClassLoader());
 else   if (InputStream.class.isAssignableFrom(cl))   serializer=new InputStreamSerializer();
 else   if (Iterator.class.isAssignableFrom(cl))   serializer=IteratorSerializer.create();
 else   if (Enumeration.class.isAssignableFrom(cl))   serializer=EnumerationSerializer.create();
 else   if (Calendar.class.isAssignableFrom(cl))   serializer=CalendarSerializer.create();
 else   if (Locale.class.isAssignableFrom(cl))   serializer=LocaleSerializer.create();
 else   if (Enum.class.isAssignableFrom(cl))   serializer=new EnumSerializer(cl);
  if (serializer == null)   serializer=getDefaultSerializer(cl);
  if (_cachedSerializerMap == null)   _cachedSerializerMap=new HashMap(8);
synchronized (_cachedSerializerMap) {
    _cachedSerializerMap.put(cl,serializer);
  }
  return serializer;
}"
85116,"public Result invoke(Invoker<?> invoker,Invocation invocation) throws RpcException {
  URL url=invoker.getUrl();
  String methodName=invocation.getMethodName();
  Semaphore executesLimit=null;
  boolean acquireResult=false;
  int max=url.getMethodParameter(methodName,Constants.EXECUTES_KEY,0);
  if (max > 0) {
    RpcStatus count=RpcStatus.getStatus(url,invocation.getMethodName());
    executesLimit=count.getSemaphore(max);
    if (executesLimit != null && !(acquireResult=executesLimit.tryAcquire())) {
      throw new RpcException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str""+ url+ ""String_Node_Str""+ max+ ""String_Node_Str"");
    }
  }
  long begin=System.currentTimeMillis();
  boolean isException=false;
  RpcStatus.beginCount(url,methodName);
  try {
    Result result=invoker.invoke(invocation);
    return result;
  }
 catch (  Throwable t) {
    isException=true;
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RpcException(""String_Node_Str"",t);
    }
  }
 finally {
    RpcStatus.endCount(url,methodName,System.currentTimeMillis() - begin,isException);
    if (acquireResult) {
      executesLimit.release();
    }
  }
}","public Result invoke(Invoker<?> invoker,Invocation invocation) throws RpcException {
  URL url=invoker.getUrl();
  String methodName=invocation.getMethodName();
  Semaphore executesLimit=null;
  boolean acquireResult=false;
  int max=url.getMethodParameter(methodName,Constants.EXECUTES_KEY,0);
  if (max > 0) {
    RpcStatus count=RpcStatus.getStatus(url,invocation.getMethodName());
    executesLimit=count.getSemaphore(max);
    if (executesLimit != null && !(acquireResult=executesLimit.tryAcquire())) {
      throw new RpcException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str""+ url+ ""String_Node_Str""+ max+ ""String_Node_Str"");
    }
  }
  long begin=System.currentTimeMillis();
  boolean isSuccess=true;
  RpcStatus.beginCount(url,methodName);
  try {
    Result result=invoker.invoke(invocation);
    return result;
  }
 catch (  Throwable t) {
    isSuccess=false;
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RpcException(""String_Node_Str"",t);
    }
  }
 finally {
    RpcStatus.endCount(url,methodName,System.currentTimeMillis() - begin,isSuccess);
    if (acquireResult) {
      executesLimit.release();
    }
  }
}"
85117,"protected void encodeResponse(Channel channel,ChannelBuffer buffer,Response res) throws IOException {
  try {
    Serialization serialization=getSerialization(channel);
    byte[] header=new byte[HEADER_LENGTH];
    Bytes.short2bytes(MAGIC,header);
    header[2]=serialization.getContentTypeId();
    if (res.isHeartbeat())     header[2]|=FLAG_EVENT;
    byte status=res.getStatus();
    header[3]=status;
    Bytes.long2bytes(res.getId(),header,4);
    int savedWriteIndex=buffer.writerIndex();
    buffer.writerIndex(savedWriteIndex + HEADER_LENGTH);
    ChannelBufferOutputStream bos=new ChannelBufferOutputStream(buffer);
    ObjectOutput out=serialization.serialize(channel.getUrl(),bos);
    if (status == Response.OK) {
      if (res.isHeartbeat()) {
        encodeHeartbeatData(channel,out,res.getResult());
      }
 else {
        encodeResponseData(channel,out,res.getResult());
      }
    }
 else     out.writeUTF(res.getErrorMessage());
    out.flushBuffer();
    bos.flush();
    bos.close();
    int len=bos.writtenBytes();
    checkPayload(channel,len);
    Bytes.int2bytes(len,header,12);
    buffer.writerIndex(savedWriteIndex);
    buffer.writeBytes(header);
    buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len);
  }
 catch (  Throwable t) {
    if (!res.isEvent() && res.getStatus() != Response.BAD_RESPONSE) {
      try {
        logger.warn(""String_Node_Str"" + res + ""String_Node_Str""+ t.getMessage(),t);
        Response r=new Response(res.getId(),res.getVersion());
        r.setStatus(Response.BAD_RESPONSE);
        r.setErrorMessage(""String_Node_Str"" + res + ""String_Node_Str""+ StringUtils.toString(t));
        channel.send(r);
        return;
      }
 catch (      RemotingException e) {
        logger.warn(""String_Node_Str"" + res + ""String_Node_Str""+ e.getMessage(),e);
      }
    }
    if (t instanceof IOException) {
      throw (IOException)t;
    }
 else     if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else     if (t instanceof Error) {
      throw (Error)t;
    }
 else {
      throw new RuntimeException(t.getMessage(),t);
    }
  }
}","protected void encodeResponse(Channel channel,ChannelBuffer buffer,Response res) throws IOException {
  int savedWriteIndex=buffer.writerIndex();
  try {
    Serialization serialization=getSerialization(channel);
    byte[] header=new byte[HEADER_LENGTH];
    Bytes.short2bytes(MAGIC,header);
    header[2]=serialization.getContentTypeId();
    if (res.isHeartbeat())     header[2]|=FLAG_EVENT;
    byte status=res.getStatus();
    header[3]=status;
    Bytes.long2bytes(res.getId(),header,4);
    buffer.writerIndex(savedWriteIndex + HEADER_LENGTH);
    ChannelBufferOutputStream bos=new ChannelBufferOutputStream(buffer);
    ObjectOutput out=serialization.serialize(channel.getUrl(),bos);
    if (status == Response.OK) {
      if (res.isHeartbeat()) {
        encodeHeartbeatData(channel,out,res.getResult());
      }
 else {
        encodeResponseData(channel,out,res.getResult());
      }
    }
 else     out.writeUTF(res.getErrorMessage());
    out.flushBuffer();
    bos.flush();
    bos.close();
    int len=bos.writtenBytes();
    checkPayload(channel,len);
    Bytes.int2bytes(len,header,12);
    buffer.writerIndex(savedWriteIndex);
    buffer.writeBytes(header);
    buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len);
  }
 catch (  Throwable t) {
    buffer.writerIndex(savedWriteIndex);
    if (!res.isEvent() && res.getStatus() != Response.BAD_RESPONSE) {
      Response r=new Response(res.getId(),res.getVersion());
      r.setStatus(Response.BAD_RESPONSE);
      if (t instanceof ExceedPayloadLimitException) {
        logger.warn(t.getMessage(),t);
        try {
          r.setErrorMessage(t.getMessage());
          channel.send(r);
          return;
        }
 catch (        RemotingException e) {
          logger.warn(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ e.getMessage(),e);
        }
      }
 else {
        logger.warn(""String_Node_Str"" + res + ""String_Node_Str""+ t.getMessage(),t);
        try {
          r.setErrorMessage(""String_Node_Str"" + res + ""String_Node_Str""+ StringUtils.toString(t));
          channel.send(r);
          return;
        }
 catch (        RemotingException e) {
          logger.warn(""String_Node_Str"" + res + ""String_Node_Str""+ e.getMessage(),e);
        }
      }
    }
    if (t instanceof IOException) {
      throw (IOException)t;
    }
 else     if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else     if (t instanceof Error) {
      throw (Error)t;
    }
 else {
      throw new RuntimeException(t.getMessage(),t);
    }
  }
}"
85118,"protected static void checkPayload(Channel channel,long size) throws IOException {
  int payload=Constants.DEFAULT_PAYLOAD;
  if (channel != null && channel.getUrl() != null) {
    payload=channel.getUrl().getParameter(Constants.PAYLOAD_KEY,Constants.DEFAULT_PAYLOAD);
  }
  if (payload > 0 && size > payload) {
    IOException e=new IOException(""String_Node_Str"" + size + ""String_Node_Str""+ payload+ ""String_Node_Str""+ channel);
    logger.error(e);
    throw e;
  }
}","protected static void checkPayload(Channel channel,long size) throws IOException {
  int payload=Constants.DEFAULT_PAYLOAD;
  if (channel != null && channel.getUrl() != null) {
    payload=channel.getUrl().getParameter(Constants.PAYLOAD_KEY,Constants.DEFAULT_PAYLOAD);
  }
  if (payload > 0 && size > payload) {
    ExceedPayloadLimitException e=new ExceedPayloadLimitException(""String_Node_Str"" + size + ""String_Node_Str""+ payload+ ""String_Node_Str""+ channel);
    logger.error(e);
    throw e;
  }
}"
85119,"public HeaderExchangeClient(Client client){
  if (client == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.client=client;
  this.channel=new HeaderExchangeChannel(client);
  String dubbo=client.getUrl().getParameter(Constants.DUBBO_VERSION_KEY);
  this.heartbeat=client.getUrl().getParameter(Constants.HEARTBEAT_KEY,dubbo != null && dubbo.startsWith(""String_Node_Str"") ? Constants.DEFAULT_HEARTBEAT : 0);
  this.heartbeatTimeout=client.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY,heartbeat * 3);
  if (heartbeatTimeout < heartbeat * 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  startHeatbeatTimer();
}","public HeaderExchangeClient(Client client,boolean needHeartbeat){
  if (client == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.client=client;
  this.channel=new HeaderExchangeChannel(client);
  String dubbo=client.getUrl().getParameter(Constants.DUBBO_VERSION_KEY);
  this.heartbeat=client.getUrl().getParameter(Constants.HEARTBEAT_KEY,dubbo != null && dubbo.startsWith(""String_Node_Str"") ? Constants.DEFAULT_HEARTBEAT : 0);
  this.heartbeatTimeout=client.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY,heartbeat * 3);
  if (heartbeatTimeout < heartbeat * 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (needHeartbeat) {
    startHeatbeatTimer();
  }
}"
85120,"public ExchangeClient connect(URL url,ExchangeHandler handler) throws RemotingException {
  return new HeaderExchangeClient(Transporters.connect(url,new DecodeHandler(new HeaderExchangeHandler(handler))));
}","public ExchangeClient connect(URL url,ExchangeHandler handler) throws RemotingException {
  return new HeaderExchangeClient(Transporters.connect(url,new DecodeHandler(new HeaderExchangeHandler(handler))),true);
}"
85121,"@Override protected Result doInvoke(Invocation invocation) throws Throwable {
  RpcInvocation inv=(RpcInvocation)invocation;
  inv.setAttachment(Constants.PATH_KEY,getInterface().getName());
  inv.setAttachment(Constants.CALLBACK_SERVICE_KEY,serviceKey);
  ExchangeClient currentClient=new HeaderExchangeClient(new ChannelWrapper(this.channel));
  try {
    if (getUrl().getMethodParameter(invocation.getMethodName(),Constants.ASYNC_KEY,false)) {
      currentClient.send(inv,getUrl().getMethodParameter(invocation.getMethodName(),Constants.SENT_KEY,false));
      return new RpcResult();
    }
    int timeout=getUrl().getMethodParameter(invocation.getMethodName(),Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT);
    if (timeout > 0) {
      return (Result)currentClient.request(inv,timeout).get();
    }
 else {
      return (Result)currentClient.request(inv).get();
    }
  }
 catch (  RpcException e) {
    throw e;
  }
catch (  TimeoutException e) {
    throw new RpcException(RpcException.TIMEOUT_EXCEPTION,e.getMessage(),e);
  }
catch (  RemotingException e) {
    throw new RpcException(RpcException.NETWORK_EXCEPTION,e.getMessage(),e);
  }
catch (  Throwable e) {
    throw new RpcException(e.getMessage(),e);
  }
}","@Override protected Result doInvoke(Invocation invocation) throws Throwable {
  RpcInvocation inv=(RpcInvocation)invocation;
  inv.setAttachment(Constants.PATH_KEY,getInterface().getName());
  inv.setAttachment(Constants.CALLBACK_SERVICE_KEY,serviceKey);
  try {
    if (getUrl().getMethodParameter(invocation.getMethodName(),Constants.ASYNC_KEY,false)) {
      currentClient.send(inv,getUrl().getMethodParameter(invocation.getMethodName(),Constants.SENT_KEY,false));
      return new RpcResult();
    }
    int timeout=getUrl().getMethodParameter(invocation.getMethodName(),Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT);
    if (timeout > 0) {
      return (Result)currentClient.request(inv,timeout).get();
    }
 else {
      return (Result)currentClient.request(inv).get();
    }
  }
 catch (  RpcException e) {
    throw e;
  }
catch (  TimeoutException e) {
    throw new RpcException(RpcException.TIMEOUT_EXCEPTION,e.getMessage(),e);
  }
catch (  RemotingException e) {
    throw new RpcException(RpcException.NETWORK_EXCEPTION,e.getMessage(),e);
  }
catch (  Throwable e) {
    throw new RpcException(e.getMessage(),e);
  }
}"
85122,"public ChannelWrappedInvoker(Class<T> serviceType,Channel channel,URL url,String serviceKey){
  super(serviceType,url,new String[]{Constants.GROUP_KEY,Constants.TOKEN_KEY,Constants.TIMEOUT_KEY});
  this.channel=channel;
  this.serviceKey=serviceKey;
}","ChannelWrappedInvoker(Class<T> serviceType,Channel channel,URL url,String serviceKey){
  super(serviceType,url,new String[]{Constants.GROUP_KEY,Constants.TOKEN_KEY,Constants.TIMEOUT_KEY});
  this.channel=channel;
  this.serviceKey=serviceKey;
  this.currentClient=new HeaderExchangeClient(new ChannelWrapper(this.channel),false);
}"
85123,"public boolean isConnected(){
  return channel == null ? false : channel.isConnected();
}","public boolean isConnected(){
  return channel != null && channel.isConnected();
}"
85124,"public ChannelWrapper(Channel channel){
  this.channel=channel;
  this.url=channel.getUrl().addParameter(""String_Node_Str"",DubboCodec.NAME);
}","ChannelWrapper(Channel channel){
  this.channel=channel;
  this.url=channel.getUrl().addParameter(""String_Node_Str"",DubboCodec.NAME);
}"
85125,"public boolean isClosed(){
  return channel == null ? true : channel.isClosed();
}","public boolean isClosed(){
  return channel == null || channel.isClosed();
}"
85126,"public Invoker<T> select(Invocation invocation){
  String key=toKey(invocation.getArguments());
  byte[] digest=md5(key);
  Invoker<T> invoker=sekectForKey(hash(digest,0));
  return invoker;
}","public Invoker<T> select(Invocation invocation){
  String key=toKey(invocation.getArguments());
  byte[] digest=md5(key);
  return selectForKey(hash(digest,0));
}"
85127,"public ConsistentHashSelector(List<Invoker<T>> invokers,String methodName,int identityHashCode){
  this.virtualInvokers=new TreeMap<Long,Invoker<T>>();
  this.identityHashCode=System.identityHashCode(invokers);
  URL url=invokers.get(0).getUrl();
  this.replicaNumber=url.getMethodParameter(methodName,""String_Node_Str"",160);
  String[] index=Constants.COMMA_SPLIT_PATTERN.split(url.getMethodParameter(methodName,""String_Node_Str"",""String_Node_Str""));
  argumentIndex=new int[index.length];
  for (int i=0; i < index.length; i++) {
    argumentIndex[i]=Integer.parseInt(index[i]);
  }
  for (  Invoker<T> invoker : invokers) {
    for (int i=0; i < replicaNumber / 4; i++) {
      byte[] digest=md5(invoker.getUrl().toFullString() + i);
      for (int h=0; h < 4; h++) {
        long m=hash(digest,h);
        virtualInvokers.put(m,invoker);
      }
    }
  }
}","ConsistentHashSelector(List<Invoker<T>> invokers,String methodName,int identityHashCode){
  this.virtualInvokers=new TreeMap<Long,Invoker<T>>();
  this.identityHashCode=identityHashCode;
  URL url=invokers.get(0).getUrl();
  this.replicaNumber=url.getMethodParameter(methodName,""String_Node_Str"",160);
  String[] index=Constants.COMMA_SPLIT_PATTERN.split(url.getMethodParameter(methodName,""String_Node_Str"",""String_Node_Str""));
  argumentIndex=new int[index.length];
  for (int i=0; i < index.length; i++) {
    argumentIndex[i]=Integer.parseInt(index[i]);
  }
  for (  Invoker<T> invoker : invokers) {
    String address=invoker.getUrl().getAddress();
    for (int i=0; i < replicaNumber / 4; i++) {
      byte[] digest=md5(address + i);
      for (int h=0; h < 4; h++) {
        long m=hash(digest,h);
        virtualInvokers.put(m,invoker);
      }
    }
  }
}"
85128,"@SuppressWarnings(""String_Node_Str"") @Override protected <T>Invoker<T> doSelect(List<Invoker<T>> invokers,URL url,Invocation invocation){
  String key=invokers.get(0).getUrl().getServiceKey() + ""String_Node_Str"" + invocation.getMethodName();
  int identityHashCode=System.identityHashCode(invokers);
  ConsistentHashSelector<T> selector=(ConsistentHashSelector<T>)selectors.get(key);
  if (selector == null || selector.getIdentityHashCode() != identityHashCode) {
    selectors.put(key,new ConsistentHashSelector<T>(invokers,invocation.getMethodName(),identityHashCode));
    selector=(ConsistentHashSelector<T>)selectors.get(key);
  }
  return selector.select(invocation);
}","@SuppressWarnings(""String_Node_Str"") @Override protected <T>Invoker<T> doSelect(List<Invoker<T>> invokers,URL url,Invocation invocation){
  String key=invokers.get(0).getUrl().getServiceKey() + ""String_Node_Str"" + invocation.getMethodName();
  int identityHashCode=System.identityHashCode(invokers);
  ConsistentHashSelector<T> selector=(ConsistentHashSelector<T>)selectors.get(key);
  if (selector == null || selector.identityHashCode != identityHashCode) {
    selectors.put(key,new ConsistentHashSelector<T>(invokers,invocation.getMethodName(),identityHashCode));
    selector=(ConsistentHashSelector<T>)selectors.get(key);
  }
  return selector.select(invocation);
}"
85129,"private long hash(byte[] digest,int number){
  return (((long)(digest[3 + number * 4] & 0xFF) << 24) | ((long)(digest[2 + number * 4] & 0xFF) << 16) | ((long)(digest[1 + number * 4] & 0xFF) << 8)| (digest[0 + number * 4] & 0xFF)) & 0xFFFFFFFFL;
}","private long hash(byte[] digest,int number){
  return (((long)(digest[3 + number * 4] & 0xFF) << 24) | ((long)(digest[2 + number * 4] & 0xFF) << 16) | ((long)(digest[1 + number * 4] & 0xFF) << 8)| (digest[number * 4] & 0xFF)) & 0xFFFFFFFFL;
}"
85130,"private byte[] md5(String value){
  MessageDigest md5;
  try {
    md5=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
  md5.reset();
  byte[] bytes=null;
  try {
    bytes=value.getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
  md5.update(bytes);
  return md5.digest();
}","private byte[] md5(String value){
  MessageDigest md5;
  try {
    md5=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
  md5.reset();
  byte[] bytes;
  try {
    bytes=value.getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
  md5.update(bytes);
  return md5.digest();
}"
85131,"/** 
 * 获取共享连接
 */
private ExchangeClient getSharedClient(URL url){
  String key=url.getAddress();
  ReferenceCountExchangeClient client=referenceClientMap.get(key);
  if (client != null) {
    if (!client.isClosed()) {
      client.incrementAndGetCount();
      return client;
    }
 else {
      referenceClientMap.remove(key);
    }
  }
  ExchangeClient exchagneclient=initClient(url);
  client=new ReferenceCountExchangeClient(exchagneclient,ghostClientMap);
  referenceClientMap.put(key,client);
  ghostClientMap.remove(key);
  return client;
}","/** 
 * 获取共享连接
 */
private ExchangeClient getSharedClient(URL url){
  String key=url.getAddress();
  ReferenceCountExchangeClient client=referenceClientMap.get(key);
  if (client != null) {
    if (!client.isClosed()) {
      client.incrementAndGetCount();
      return client;
    }
 else {
      referenceClientMap.remove(key);
    }
  }
synchronized (key.intern()) {
    ExchangeClient exchangeClient=initClient(url);
    client=new ReferenceCountExchangeClient(exchangeClient,ghostClientMap);
    referenceClientMap.put(key,client);
    ghostClientMap.remove(key);
    return client;
  }
}"
85132,"public <T>Invoker<T> refer(final Class<T> type,final URL url) throws RpcException {
  try {
    GenericObjectPoolConfig config=new GenericObjectPoolConfig();
    config.setTestOnBorrow(url.getParameter(""String_Node_Str"",true));
    config.setTestOnReturn(url.getParameter(""String_Node_Str"",false));
    config.setTestWhileIdle(url.getParameter(""String_Node_Str"",false));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxIdle(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMinIdle(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxTotal(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxWaitMillis(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setNumTestsPerEvictionRun(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setTimeBetweenEvictionRunsMillis(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMinEvictableIdleTimeMillis(url.getParameter(""String_Node_Str"",0));
    final JedisPool jedisPool=new JedisPool(config,url.getHost(),url.getPort(DEFAULT_PORT),url.getParameter(Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT));
    final int expiry=url.getParameter(""String_Node_Str"",0);
    final String get=url.getParameter(""String_Node_Str"",""String_Node_Str"");
    final String set=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    final String delete=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    return new AbstractInvoker<T>(type,url){
      protected Result doInvoke(      Invocation invocation) throws Throwable {
        Jedis resource=null;
        try {
          resource=jedisPool.getResource();
          if (get.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] value=resource.get(String.valueOf(invocation.getArguments()[0]).getBytes());
            if (value == null) {
              return new RpcResult();
            }
            ObjectInput oin=getSerialization(url).deserialize(url,new ByteArrayInputStream(value));
            return new RpcResult(oin.readObject());
          }
 else           if (set.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 2) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] key=String.valueOf(invocation.getArguments()[0]).getBytes();
            ByteArrayOutputStream output=new ByteArrayOutputStream();
            ObjectOutput value=getSerialization(url).serialize(url,output);
            value.writeObject(invocation.getArguments()[1]);
            resource.set(key,output.toByteArray());
            if (expiry > 1000) {
              resource.expire(key,expiry / 1000);
            }
            return new RpcResult();
          }
 else           if (delete.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            resource.del(String.valueOf(invocation.getArguments()[0]).getBytes());
            return new RpcResult();
          }
 else {
            throw new UnsupportedOperationException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str"");
          }
        }
 catch (        Throwable t) {
          RpcException re=new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
          if (t instanceof TimeoutException || t instanceof SocketTimeoutException) {
            re.setCode(RpcException.TIMEOUT_EXCEPTION);
          }
 else           if (t instanceof JedisConnectionException || t instanceof IOException) {
            re.setCode(RpcException.NETWORK_EXCEPTION);
          }
 else           if (t instanceof JedisDataException) {
            re.setCode(RpcException.SERIALIZATION_EXCEPTION);
          }
          throw re;
        }
 finally {
          if (resource != null) {
            try {
              jedisPool.returnResource(resource);
            }
 catch (            Throwable t) {
              logger.warn(""String_Node_Str"" + t.getMessage(),t);
            }
          }
        }
      }
      public void destroy(){
        super.destroy();
        try {
          jedisPool.destroy();
        }
 catch (        Throwable e) {
          logger.warn(e.getMessage(),e);
        }
      }
    }
;
  }
 catch (  Throwable t) {
    throw new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
  }
}","public <T>Invoker<T> refer(final Class<T> type,final URL url) throws RpcException {
  try {
    GenericObjectPool.Config config=new GenericObjectPool.Config();
    config.testOnBorrow=url.getParameter(""String_Node_Str"",true);
    config.testOnReturn=url.getParameter(""String_Node_Str"",false);
    config.testWhileIdle=url.getParameter(""String_Node_Str"",false);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.maxIdle=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.minIdle=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.maxActive=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.maxWait=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.numTestsPerEvictionRun=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.timeBetweenEvictionRunsMillis=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.minEvictableIdleTimeMillis=url.getParameter(""String_Node_Str"",0);
    final JedisPool jedisPool=new JedisPool(config,url.getHost(),url.getPort(DEFAULT_PORT),url.getParameter(Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT));
    final int expiry=url.getParameter(""String_Node_Str"",0);
    final String get=url.getParameter(""String_Node_Str"",""String_Node_Str"");
    final String set=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    final String delete=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    return new AbstractInvoker<T>(type,url){
      protected Result doInvoke(      Invocation invocation) throws Throwable {
        Jedis resource=null;
        try {
          resource=jedisPool.getResource();
          if (get.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] value=resource.get(String.valueOf(invocation.getArguments()[0]).getBytes());
            if (value == null) {
              return new RpcResult();
            }
            ObjectInput oin=getSerialization(url).deserialize(url,new ByteArrayInputStream(value));
            return new RpcResult(oin.readObject());
          }
 else           if (set.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 2) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] key=String.valueOf(invocation.getArguments()[0]).getBytes();
            ByteArrayOutputStream output=new ByteArrayOutputStream();
            ObjectOutput value=getSerialization(url).serialize(url,output);
            value.writeObject(invocation.getArguments()[1]);
            resource.set(key,output.toByteArray());
            if (expiry > 1000) {
              resource.expire(key,expiry / 1000);
            }
            return new RpcResult();
          }
 else           if (delete.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            resource.del(String.valueOf(invocation.getArguments()[0]).getBytes());
            return new RpcResult();
          }
 else {
            throw new UnsupportedOperationException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str"");
          }
        }
 catch (        Throwable t) {
          RpcException re=new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
          if (t instanceof TimeoutException || t instanceof SocketTimeoutException) {
            re.setCode(RpcException.TIMEOUT_EXCEPTION);
          }
 else           if (t instanceof JedisConnectionException || t instanceof IOException) {
            re.setCode(RpcException.NETWORK_EXCEPTION);
          }
 else           if (t instanceof JedisDataException) {
            re.setCode(RpcException.SERIALIZATION_EXCEPTION);
          }
          throw re;
        }
 finally {
          if (resource != null) {
            try {
              jedisPool.returnResource(resource);
            }
 catch (            Throwable t) {
              logger.warn(""String_Node_Str"" + t.getMessage(),t);
            }
          }
        }
      }
      public void destroy(){
        super.destroy();
        try {
          jedisPool.destroy();
        }
 catch (        Throwable e) {
          logger.warn(e.getMessage(),e);
        }
      }
    }
;
  }
 catch (  Throwable t) {
    throw new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
  }
}"
85133,"public URL configure(URL url){
  if (configuratorUrl == null || configuratorUrl.getHost() == null || url == null || url.getHost() == null) {
    return url;
  }
  if (Constants.ANYHOST_VALUE.equals(configuratorUrl.getHost()) || url.getHost().equals(configuratorUrl.getHost())) {
    String configApplication=configuratorUrl.getParameter(Constants.APPLICATION_KEY,configuratorUrl.getUsername());
    String currentApplication=url.getParameter(Constants.APPLICATION_KEY,url.getUsername());
    if (configApplication == null || Constants.ANY_VALUE.equals(configApplication) || configApplication.equals(currentApplication)) {
      if (configuratorUrl.getPort() == 0 || url.getPort() == configuratorUrl.getPort()) {
        Set<String> condtionKeys=new HashSet<String>();
        condtionKeys.add(Constants.CATEGORY_KEY);
        condtionKeys.add(Constants.CHECK_KEY);
        condtionKeys.add(Constants.DYNAMIC_KEY);
        condtionKeys.add(Constants.ENABLED_KEY);
        for (        Map.Entry<String,String> entry : configuratorUrl.getParameters().entrySet()) {
          String key=entry.getKey();
          String value=entry.getValue();
          if (key.startsWith(""String_Node_Str"") || Constants.APPLICATION_KEY.equals(key) || Constants.SIDE_KEY.equals(key)) {
            condtionKeys.add(key);
            if (value != null && !Constants.ANY_VALUE.equals(value) && !value.equals(url.getParameter(key.startsWith(""String_Node_Str"") ? key.substring(1) : key))) {
              return url;
            }
          }
        }
        return doConfigure(url,configuratorUrl.removeParameters(condtionKeys));
      }
    }
  }
  return url;
}","public URL configure(URL url){
  if (configuratorUrl == null || configuratorUrl.getHost() == null || url == null || url.getHost() == null) {
    return url;
  }
  if (configuratorUrl.getPort() != 0) {
    if (url.getPort() == configuratorUrl.getPort()) {
      return configureIfMatch(url.getHost(),url);
    }
  }
 else {
    if (url.getParameter(Constants.SIDE_KEY,Constants.PROVIDER).equals(Constants.CONSUMER)) {
      return configureIfMatch(NetUtils.getLocalHost(),url);
    }
 else     if (url.getParameter(Constants.SIDE_KEY,Constants.CONSUMER).equals(Constants.PROVIDER)) {
      return configureIfMatch(Constants.ANYHOST_VALUE,url);
    }
  }
  return url;
}"
85134,"public int compareTo(Configurator o){
  if (o == null) {
    return -1;
  }
  return getUrl().getHost().compareTo(o.getUrl().getHost());
}","/** 
 * 根据priority、host依次排序 priority值越大，优先级越高； priority相同，特定host优先级高于anyhost 0.0.0.0
 * @param o
 * @return
 */
public int compareTo(Configurator o){
  if (o == null) {
    return -1;
  }
  int ipCompare=getUrl().getHost().compareTo(o.getUrl().getHost());
  if (ipCompare == 0) {
    int i=getUrl().getParameter(Constants.PRIORITY_KEY,0), j=o.getUrl().getParameter(Constants.PRIORITY_KEY,0);
    if (i < j) {
      return -1;
    }
 else     if (i > j) {
      return 1;
    }
 else {
      return 0;
    }
  }
 else {
    return ipCompare;
  }
}"
85135,"public void notify(List<URL> urls){
  List<URL> result=null;
  for (  URL url : urls) {
    URL overrideUrl=url;
    if (url.getParameter(Constants.CATEGORY_KEY) == null && Constants.OVERRIDE_PROTOCOL.equals(url.getProtocol())) {
      overrideUrl=url.addParameter(Constants.CATEGORY_KEY,Constants.CONFIGURATORS_CATEGORY);
    }
    if (!UrlUtils.isMatch(subscribeUrl,overrideUrl)) {
      if (result == null) {
        result=new ArrayList<URL>(urls);
      }
      result.remove(url);
      logger.warn(""String_Node_Str"" + url);
    }
  }
  if (result != null) {
    urls=result;
  }
  this.configurators=RegistryDirectory.toConfigurators(urls);
  List<ExporterChangeableWrapper<?>> exporters=new ArrayList<ExporterChangeableWrapper<?>>(bounds.values());
  for (  ExporterChangeableWrapper<?> exporter : exporters) {
    Invoker<?> invoker=exporter.getOriginInvoker();
    final Invoker<?> originInvoker;
    if (invoker instanceof InvokerDelegete) {
      originInvoker=((InvokerDelegete<?>)invoker).getInvoker();
    }
 else {
      originInvoker=invoker;
    }
    URL originUrl=RegistryProtocol.this.getProviderUrl(originInvoker);
    URL newUrl=getNewInvokerUrl(originUrl,urls);
    if (!originUrl.equals(newUrl)) {
      RegistryProtocol.this.doChangeLocalExport(originInvoker,newUrl);
    }
  }
}","public void notify(List<URL> urls){
  List<URL> result=null;
  for (  URL url : urls) {
    URL overrideUrl=url;
    if (url.getParameter(Constants.CATEGORY_KEY) == null && Constants.OVERRIDE_PROTOCOL.equals(url.getProtocol())) {
      overrideUrl=url.addParameter(Constants.CATEGORY_KEY,Constants.CONFIGURATORS_CATEGORY);
    }
    if (!UrlUtils.isMatch(subscribeUrl,overrideUrl)) {
      if (result == null) {
        result=new ArrayList<URL>(urls);
      }
      result.remove(url);
      logger.warn(""String_Node_Str"" + url);
    }
  }
  if (result != null) {
    urls=result;
  }
  this.configurators=RegistryDirectory.toConfigurators(urls);
  List<ExporterChangeableWrapper<?>> exporters=new ArrayList<ExporterChangeableWrapper<?>>(bounds.values());
  for (  ExporterChangeableWrapper<?> exporter : exporters) {
    Invoker<?> invoker=exporter.getOriginInvoker();
    final Invoker<?> originInvoker;
    if (invoker instanceof InvokerDelegete) {
      originInvoker=((InvokerDelegete<?>)invoker).getInvoker();
    }
 else {
      originInvoker=invoker;
    }
    URL originUrl=RegistryProtocol.this.getProviderUrl(originInvoker);
    if (urls != null && urls.size() > 0 && originUrl.getServiceKey().equals(urls.get(0).getServiceKey())) {
      URL newUrl=getNewInvokerUrl(originUrl,urls);
      if (!originUrl.equals(newUrl) || (this.configurators == null || this.configurators.size() == 0)) {
        RegistryProtocol.this.doChangeLocalExport(originInvoker,newUrl);
      }
    }
  }
}"
85136,"public Result invoke(Invoker<?> invoker,Invocation invocation) throws RpcException {
  Map<String,String> attachments=invocation.getAttachments();
  if (attachments != null) {
    attachments=new HashMap<String,String>(attachments);
    attachments.remove(Constants.PATH_KEY);
    attachments.remove(Constants.GROUP_KEY);
    attachments.remove(Constants.VERSION_KEY);
    attachments.remove(Constants.DUBBO_VERSION_KEY);
    attachments.remove(Constants.TOKEN_KEY);
    attachments.remove(Constants.TIMEOUT_KEY);
  }
  RpcContext.getContext().setInvoker(invoker).setInvocation(invocation).setAttachments(attachments).setLocalAddress(invoker.getUrl().getHost(),invoker.getUrl().getPort());
  if (invocation instanceof RpcInvocation) {
    ((RpcInvocation)invocation).setInvoker(invoker);
  }
  try {
    return invoker.invoke(invocation);
  }
  finally {
    RpcContext.removeContext();
  }
}","public Result invoke(Invoker<?> invoker,Invocation invocation) throws RpcException {
  Map<String,String> attachments=invocation.getAttachments();
  if (attachments != null) {
    attachments=new HashMap<String,String>(attachments);
    attachments.remove(Constants.PATH_KEY);
    attachments.remove(Constants.GROUP_KEY);
    attachments.remove(Constants.VERSION_KEY);
    attachments.remove(Constants.DUBBO_VERSION_KEY);
    attachments.remove(Constants.TOKEN_KEY);
    attachments.remove(Constants.TIMEOUT_KEY);
    attachments.remove(Constants.ASYNC_KEY);
  }
  RpcContext.getContext().setInvoker(invoker).setInvocation(invocation).setAttachments(attachments).setLocalAddress(invoker.getUrl().getHost(),invoker.getUrl().getPort());
  if (invocation instanceof RpcInvocation) {
    ((RpcInvocation)invocation).setInvoker(invoker);
  }
  try {
    return invoker.invoke(invocation);
  }
  finally {
    RpcContext.removeContext();
  }
}"
85137,"private static Map<String,MatchPair> parseRule(String rule) throws ParseException {
  Map<String,MatchPair> condition=new HashMap<String,MatchPair>();
  if (StringUtils.isBlank(rule)) {
    return condition;
  }
  MatchPair pair=null;
  Set<String> values=null;
  final Matcher matcher=ROUTE_PATTERN.matcher(rule);
  while (matcher.find()) {
    String separator=matcher.group(1);
    String content=matcher.group(2);
    if (separator == null || separator.length() == 0) {
      pair=new MatchPair();
      condition.put(content,pair);
    }
 else     if (""String_Node_Str"".equals(separator)) {
      if (condition.get(content) == null) {
        pair=new MatchPair();
        condition.put(content,pair);
      }
 else {
        condition.put(content,pair);
      }
    }
 else     if (""String_Node_Str"".equals(separator)) {
      if (pair == null)       throw new ParseException(""String_Node_Str"" + rule + ""String_Node_Str""+ separator+ ""String_Node_Str""+ matcher.start()+ ""String_Node_Str""+ content+ ""String_Node_Str"",matcher.start());
      values=pair.matches;
      values.add(content);
    }
 else     if (""String_Node_Str"".equals(separator)) {
      if (pair == null)       throw new ParseException(""String_Node_Str"" + rule + ""String_Node_Str""+ separator+ ""String_Node_Str""+ matcher.start()+ ""String_Node_Str""+ content+ ""String_Node_Str"",matcher.start());
      values=pair.mismatches;
      values.add(content);
    }
 else     if (""String_Node_Str"".equals(separator)) {
      if (values == null || values.size() == 0)       throw new ParseException(""String_Node_Str"" + rule + ""String_Node_Str""+ separator+ ""String_Node_Str""+ matcher.start()+ ""String_Node_Str""+ content+ ""String_Node_Str"",matcher.start());
      values.add(content);
    }
 else {
      throw new ParseException(""String_Node_Str"" + rule + ""String_Node_Str""+ separator+ ""String_Node_Str""+ matcher.start()+ ""String_Node_Str""+ content+ ""String_Node_Str"",matcher.start());
    }
  }
  return condition;
}","private static Map<String,MatchPair> parseRule(String rule) throws ParseException {
  Map<String,MatchPair> condition=new HashMap<String,MatchPair>();
  if (StringUtils.isBlank(rule)) {
    return condition;
  }
  MatchPair pair=null;
  Set<String> values=null;
  final Matcher matcher=ROUTE_PATTERN.matcher(rule);
  while (matcher.find()) {
    String separator=matcher.group(1);
    String content=matcher.group(2);
    if (separator == null || separator.length() == 0) {
      pair=new MatchPair();
      condition.put(content,pair);
    }
 else     if (""String_Node_Str"".equals(separator)) {
      if (condition.get(content) == null) {
        pair=new MatchPair();
        condition.put(content,pair);
      }
 else {
        pair=condition.get(content);
      }
    }
 else     if (""String_Node_Str"".equals(separator)) {
      if (pair == null)       throw new ParseException(""String_Node_Str"" + rule + ""String_Node_Str""+ separator+ ""String_Node_Str""+ matcher.start()+ ""String_Node_Str""+ content+ ""String_Node_Str"",matcher.start());
      values=pair.matches;
      values.add(content);
    }
 else     if (""String_Node_Str"".equals(separator)) {
      if (pair == null)       throw new ParseException(""String_Node_Str"" + rule + ""String_Node_Str""+ separator+ ""String_Node_Str""+ matcher.start()+ ""String_Node_Str""+ content+ ""String_Node_Str"",matcher.start());
      values=pair.mismatches;
      values.add(content);
    }
 else     if (""String_Node_Str"".equals(separator)) {
      if (values == null || values.size() == 0)       throw new ParseException(""String_Node_Str"" + rule + ""String_Node_Str""+ separator+ ""String_Node_Str""+ matcher.start()+ ""String_Node_Str""+ content+ ""String_Node_Str"",matcher.start());
      values.add(content);
    }
 else {
      throw new ParseException(""String_Node_Str"" + rule + ""String_Node_Str""+ separator+ ""String_Node_Str""+ matcher.start()+ ""String_Node_Str""+ content+ ""String_Node_Str"",matcher.start());
    }
  }
  return condition;
}"
85138,"public <T>List<Invoker<T>> route(List<Invoker<T>> invokers,URL url,Invocation invocation) throws RpcException {
  if (invokers == null || invokers.size() == 0) {
    return invokers;
  }
  try {
    if (!matchWhen(url)) {
      return invokers;
    }
    List<Invoker<T>> result=new ArrayList<Invoker<T>>();
    if (thenCondition == null) {
      logger.warn(""String_Node_Str"" + NetUtils.getLocalHost() + ""String_Node_Str""+ url.getServiceKey());
      return result;
    }
    for (    Invoker<T> invoker : invokers) {
      if (matchThen(invoker.getUrl(),url)) {
        result.add(invoker);
      }
    }
    if (result.size() > 0) {
      return result;
    }
 else     if (force) {
      logger.warn(""String_Node_Str"" + NetUtils.getLocalHost() + ""String_Node_Str""+ url.getServiceKey()+ ""String_Node_Str""+ url.getParameterAndDecoded(Constants.RULE_KEY));
      return result;
    }
  }
 catch (  Throwable t) {
    logger.error(""String_Node_Str"" + getUrl() + ""String_Node_Str""+ invokers+ ""String_Node_Str""+ t.getMessage(),t);
  }
  return invokers;
}","public <T>List<Invoker<T>> route(List<Invoker<T>> invokers,URL url,Invocation invocation) throws RpcException {
  if (invokers == null || invokers.size() == 0) {
    return invokers;
  }
  try {
    if (!matchWhen(url,invocation)) {
      return invokers;
    }
    List<Invoker<T>> result=new ArrayList<Invoker<T>>();
    if (thenCondition == null) {
      logger.warn(""String_Node_Str"" + NetUtils.getLocalHost() + ""String_Node_Str""+ url.getServiceKey());
      return result;
    }
    for (    Invoker<T> invoker : invokers) {
      if (matchThen(invoker.getUrl(),url)) {
        result.add(invoker);
      }
    }
    if (result.size() > 0) {
      return result;
    }
 else     if (force) {
      logger.warn(""String_Node_Str"" + NetUtils.getLocalHost() + ""String_Node_Str""+ url.getServiceKey()+ ""String_Node_Str""+ url.getParameterAndDecoded(Constants.RULE_KEY));
      return result;
    }
  }
 catch (  Throwable t) {
    logger.error(""String_Node_Str"" + getUrl() + ""String_Node_Str""+ invokers+ ""String_Node_Str""+ t.getMessage(),t);
  }
  return invokers;
}"
85139,"private boolean matchCondition(Map<String,MatchPair> condition,URL url,URL param){
  Map<String,String> sample=url.toMap();
  for (  Map.Entry<String,String> entry : sample.entrySet()) {
    String key=entry.getKey();
    MatchPair pair=condition.get(key);
    if (pair != null && !pair.isMatch(entry.getValue(),param)) {
      return false;
    }
  }
  return true;
}","private boolean matchCondition(Map<String,MatchPair> condition,URL url,URL param,Invocation invocation){
  Map<String,String> sample=url.toMap();
  boolean result=false;
  for (  Map.Entry<String,MatchPair> matchPair : condition.entrySet()) {
    String key=matchPair.getKey();
    String sampleValue;
    if (invocation != null && (Constants.METHOD_KEY.equals(key) || Constants.METHODS_KEY.equals(key))) {
      sampleValue=invocation.getMethodName();
    }
 else {
      sampleValue=sample.get(key);
    }
    if (sampleValue != null) {
      if (!matchPair.getValue().isMatch(sampleValue,param)) {
        return false;
      }
 else {
        result=true;
      }
    }
 else {
      if (matchPair.getValue().matches.size() > 0) {
        return false;
      }
 else {
        result=true;
      }
    }
  }
  return result;
}"
85140,"public boolean matchWhen(URL url){
  return matchCondition(whenCondition,url,null);
}","boolean matchWhen(URL url,Invocation invocation){
  return whenCondition == null || whenCondition.isEmpty() || matchCondition(whenCondition,url,null,invocation);
}"
85141,"public boolean matchThen(URL url,URL param){
  return thenCondition != null && matchCondition(thenCondition,url,param);
}","private boolean matchThen(URL url,URL param){
  return !(thenCondition == null || thenCondition.isEmpty()) && matchCondition(thenCondition,url,param,null);
}"
85142,"public boolean isMatch(String value,URL param){
  for (  String match : matches) {
    if (!UrlUtils.isMatchGlobPattern(match,value,param)) {
      return false;
    }
  }
  for (  String mismatch : mismatches) {
    if (UrlUtils.isMatchGlobPattern(mismatch,value,param)) {
      return false;
    }
  }
  return true;
}","private boolean isMatch(String value,URL param){
  if (matches.size() > 0 && mismatches.size() == 0) {
    for (    String match : matches) {
      if (UrlUtils.isMatchGlobPattern(match,value,param)) {
        return true;
      }
    }
    return false;
  }
  if (mismatches.size() > 0 && matches.size() == 0) {
    for (    String mismatch : mismatches) {
      if (UrlUtils.isMatchGlobPattern(mismatch,value,param)) {
        return false;
      }
    }
    return true;
  }
  if (matches.size() > 0 && mismatches.size() > 0) {
    for (    String mismatch : mismatches) {
      if (UrlUtils.isMatchGlobPattern(mismatch,value,param)) {
        return false;
      }
    }
    for (    String match : matches) {
      if (UrlUtils.isMatchGlobPattern(match,value,param)) {
        return true;
      }
    }
    return false;
  }
  return false;
}"
85143,"public <T>Invoker<T> refer(final Class<T> type,final URL url) throws RpcException {
  try {
    GenericObjectPool.Config config=new GenericObjectPool.Config();
    config.testOnBorrow=url.getParameter(""String_Node_Str"",true);
    config.testOnReturn=url.getParameter(""String_Node_Str"",false);
    config.testWhileIdle=url.getParameter(""String_Node_Str"",false);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.maxIdle=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.minIdle=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.maxActive=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.maxWait=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.numTestsPerEvictionRun=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.timeBetweenEvictionRunsMillis=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.minEvictableIdleTimeMillis=url.getParameter(""String_Node_Str"",0);
    final JedisPool jedisPool=new JedisPool(config,url.getHost(),url.getPort(DEFAULT_PORT),url.getParameter(Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT));
    final int expiry=url.getParameter(""String_Node_Str"",0);
    final String get=url.getParameter(""String_Node_Str"",""String_Node_Str"");
    final String set=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    final String delete=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    return new AbstractInvoker<T>(type,url){
      protected Result doInvoke(      Invocation invocation) throws Throwable {
        Jedis resource=null;
        try {
          resource=jedisPool.getResource();
          if (get.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] value=resource.get(String.valueOf(invocation.getArguments()[0]).getBytes());
            if (value == null) {
              return new RpcResult();
            }
            ObjectInput oin=getSerialization(url).deserialize(url,new ByteArrayInputStream(value));
            return new RpcResult(oin.readObject());
          }
 else           if (set.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 2) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] key=String.valueOf(invocation.getArguments()[0]).getBytes();
            ByteArrayOutputStream output=new ByteArrayOutputStream();
            ObjectOutput value=getSerialization(url).serialize(url,output);
            value.writeObject(invocation.getArguments()[1]);
            resource.set(key,output.toByteArray());
            if (expiry > 1000) {
              resource.expire(key,expiry / 1000);
            }
            return new RpcResult();
          }
 else           if (delete.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            resource.del(String.valueOf(invocation.getArguments()[0]).getBytes());
            return new RpcResult();
          }
 else {
            throw new UnsupportedOperationException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str"");
          }
        }
 catch (        Throwable t) {
          RpcException re=new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
          if (t instanceof TimeoutException || t instanceof SocketTimeoutException) {
            re.setCode(RpcException.TIMEOUT_EXCEPTION);
          }
 else           if (t instanceof JedisConnectionException || t instanceof IOException) {
            re.setCode(RpcException.NETWORK_EXCEPTION);
          }
 else           if (t instanceof JedisDataException) {
            re.setCode(RpcException.SERIALIZATION_EXCEPTION);
          }
          throw re;
        }
 finally {
          if (resource != null) {
            try {
              jedisPool.returnResource(resource);
            }
 catch (            Throwable t) {
              logger.warn(""String_Node_Str"" + t.getMessage(),t);
            }
          }
        }
      }
      public void destroy(){
        super.destroy();
        try {
          jedisPool.destroy();
        }
 catch (        Throwable e) {
          logger.warn(e.getMessage(),e);
        }
      }
    }
;
  }
 catch (  Throwable t) {
    throw new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
  }
}","public <T>Invoker<T> refer(final Class<T> type,final URL url) throws RpcException {
  try {
    GenericObjectPoolConfig config=new GenericObjectPoolConfig();
    config.setTestOnBorrow(url.getParameter(""String_Node_Str"",true));
    config.setTestOnReturn(url.getParameter(""String_Node_Str"",false));
    config.setTestWhileIdle(url.getParameter(""String_Node_Str"",false));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxIdle(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMinIdle(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxTotal(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMaxWaitMillis(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setNumTestsPerEvictionRun(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setTimeBetweenEvictionRunsMillis(url.getParameter(""String_Node_Str"",0));
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.setMinEvictableIdleTimeMillis(url.getParameter(""String_Node_Str"",0));
    final JedisPool jedisPool=new JedisPool(config,url.getHost(),url.getPort(DEFAULT_PORT),url.getParameter(Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT));
    final int expiry=url.getParameter(""String_Node_Str"",0);
    final String get=url.getParameter(""String_Node_Str"",""String_Node_Str"");
    final String set=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    final String delete=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    return new AbstractInvoker<T>(type,url){
      protected Result doInvoke(      Invocation invocation) throws Throwable {
        Jedis resource=null;
        try {
          resource=jedisPool.getResource();
          if (get.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] value=resource.get(String.valueOf(invocation.getArguments()[0]).getBytes());
            if (value == null) {
              return new RpcResult();
            }
            ObjectInput oin=getSerialization(url).deserialize(url,new ByteArrayInputStream(value));
            return new RpcResult(oin.readObject());
          }
 else           if (set.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 2) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] key=String.valueOf(invocation.getArguments()[0]).getBytes();
            ByteArrayOutputStream output=new ByteArrayOutputStream();
            ObjectOutput value=getSerialization(url).serialize(url,output);
            value.writeObject(invocation.getArguments()[1]);
            resource.set(key,output.toByteArray());
            if (expiry > 1000) {
              resource.expire(key,expiry / 1000);
            }
            return new RpcResult();
          }
 else           if (delete.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            resource.del(String.valueOf(invocation.getArguments()[0]).getBytes());
            return new RpcResult();
          }
 else {
            throw new UnsupportedOperationException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str"");
          }
        }
 catch (        Throwable t) {
          RpcException re=new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
          if (t instanceof TimeoutException || t instanceof SocketTimeoutException) {
            re.setCode(RpcException.TIMEOUT_EXCEPTION);
          }
 else           if (t instanceof JedisConnectionException || t instanceof IOException) {
            re.setCode(RpcException.NETWORK_EXCEPTION);
          }
 else           if (t instanceof JedisDataException) {
            re.setCode(RpcException.SERIALIZATION_EXCEPTION);
          }
          throw re;
        }
 finally {
          if (resource != null) {
            try {
              jedisPool.returnResource(resource);
            }
 catch (            Throwable t) {
              logger.warn(""String_Node_Str"" + t.getMessage(),t);
            }
          }
        }
      }
      public void destroy(){
        super.destroy();
        try {
          jedisPool.destroy();
        }
 catch (        Throwable e) {
          logger.warn(e.getMessage(),e);
        }
      }
    }
;
  }
 catch (  Throwable t) {
    throw new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
  }
}"
85144,"public Result invoke(Invoker<?> invoker,Invocation invocation) throws RpcException {
  URL url=invoker.getUrl();
  String methodName=invocation.getMethodName();
  int max=url.getMethodParameter(methodName,Constants.EXECUTES_KEY,0);
  if (max > 0) {
    RpcStatus count=RpcStatus.getStatus(url,invocation.getMethodName());
    if (count.getActive() >= max) {
      throw new RpcException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str""+ url+ ""String_Node_Str""+ max+ ""String_Node_Str"");
    }
  }
  long begin=System.currentTimeMillis();
  boolean isException=false;
  RpcStatus.beginCount(url,methodName);
  try {
    Result result=invoker.invoke(invocation);
    return result;
  }
 catch (  Throwable t) {
    isException=true;
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RpcException(""String_Node_Str"",t);
    }
  }
 finally {
    RpcStatus.endCount(url,methodName,System.currentTimeMillis() - begin,isException);
  }
}","public Result invoke(Invoker<?> invoker,Invocation invocation) throws RpcException {
  URL url=invoker.getUrl();
  String methodName=invocation.getMethodName();
  Semaphore executesLimit=null;
  boolean acquireResult=false;
  int max=url.getMethodParameter(methodName,Constants.EXECUTES_KEY,0);
  if (max > 0) {
    RpcStatus count=RpcStatus.getStatus(url,invocation.getMethodName());
    executesLimit=count.getSemaphore(max);
    if (executesLimit != null && !(acquireResult=executesLimit.tryAcquire())) {
      throw new RpcException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str""+ url+ ""String_Node_Str""+ max+ ""String_Node_Str"");
    }
  }
  long begin=System.currentTimeMillis();
  boolean isException=false;
  RpcStatus.beginCount(url,methodName);
  try {
    Result result=invoker.invoke(invocation);
    return result;
  }
 catch (  Throwable t) {
    isException=true;
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RpcException(""String_Node_Str"",t);
    }
  }
 finally {
    RpcStatus.endCount(url,methodName,System.currentTimeMillis() - begin,isException);
    if (acquireResult) {
      executesLimit.release();
    }
  }
}"
85145,"public Menu(Map<String,List<String>> menus){
  this.menus.putAll(menus);
}","public Menu(Map<String,List<String>> menus){
  for (  String key : menus.keySet()) {
    this.menus.put(key,new ArrayList<String>(menus.get(key)));
  }
}"
85146,"@Test public void testGetMenuSuccessfully() throws Exception {
  url=url.addParameter(Constants.MERGER_KEY,""String_Node_Str"");
  EasyMock.expect(invocation.getMethodName()).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(invocation.getParameterTypes()).andReturn(new Class<?>[]{}).anyTimes();
  EasyMock.expect(invocation.getArguments()).andReturn(new Object[]{}).anyTimes();
  EasyMock.expect(invocation.getAttachments()).andReturn(new HashMap<String,String>()).anyTimes();
  EasyMock.expect(invocation.getInvoker()).andReturn(firstInvoker).anyTimes();
  EasyMock.replay(invocation);
  firstInvoker=(Invoker)Proxy.newProxyInstance(getClass().getClassLoader(),new Class<?>[]{Invoker.class},new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      if (""String_Node_Str"".equals(method.getName())) {
        return url.addParameter(Constants.GROUP_KEY,""String_Node_Str"");
      }
      if (""String_Node_Str"".equals(method.getName())) {
        return MenuService.class;
      }
      if (""String_Node_Str"".equals(method.getName())) {
        return new RpcResult(firstMenu);
      }
      return null;
    }
  }
);
  secondInvoker=(Invoker)Proxy.newProxyInstance(getClass().getClassLoader(),new Class<?>[]{Invoker.class},new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      if (""String_Node_Str"".equals(method.getName())) {
        return url.addParameter(Constants.GROUP_KEY,""String_Node_Str"");
      }
      if (""String_Node_Str"".equals(method.getName())) {
        return MenuService.class;
      }
      if (""String_Node_Str"".equals(method.getName())) {
        return new RpcResult(secondMenu);
      }
      return null;
    }
  }
);
  EasyMock.expect(directory.list(invocation)).andReturn(new ArrayList(){
{
      add(firstInvoker);
      add(secondInvoker);
    }
  }
).anyTimes();
  EasyMock.expect(directory.getUrl()).andReturn(url).anyTimes();
  EasyMock.expect(directory.getInterface()).andReturn(MenuService.class).anyTimes();
  EasyMock.replay(directory);
  mergeableClusterInvoker=new MergeableClusterInvoker<MenuService>(directory);
  Result result=mergeableClusterInvoker.invoke(invocation);
  Assert.assertTrue(result.getValue() instanceof Menu);
  Menu menu=(Menu)result.getValue();
  Map<String,List<String>> expected=new HashMap<String,List<String>>();
  merge(expected,firstMenuMap);
  merge(expected,secondMenuMap);
  Assert.assertEquals(expected,menu.getMenus());
}","@Test public void testGetMenuSuccessfully() throws Exception {
  url=url.addParameter(Constants.MERGER_KEY,""String_Node_Str"");
  EasyMock.expect(invocation.getMethodName()).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(invocation.getParameterTypes()).andReturn(new Class<?>[]{}).anyTimes();
  EasyMock.expect(invocation.getArguments()).andReturn(new Object[]{}).anyTimes();
  EasyMock.expect(invocation.getAttachments()).andReturn(new HashMap<String,String>()).anyTimes();
  EasyMock.expect(invocation.getInvoker()).andReturn(firstInvoker).anyTimes();
  EasyMock.replay(invocation);
  firstInvoker=(Invoker)Proxy.newProxyInstance(getClass().getClassLoader(),new Class<?>[]{Invoker.class},new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      if (""String_Node_Str"".equals(method.getName())) {
        return url.addParameter(Constants.GROUP_KEY,""String_Node_Str"");
      }
      if (""String_Node_Str"".equals(method.getName())) {
        return MenuService.class;
      }
      if (""String_Node_Str"".equals(method.getName())) {
        return new RpcResult(firstMenu);
      }
      return null;
    }
  }
);
  secondInvoker=(Invoker)Proxy.newProxyInstance(getClass().getClassLoader(),new Class<?>[]{Invoker.class},new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      if (""String_Node_Str"".equals(method.getName())) {
        return url.addParameter(Constants.GROUP_KEY,""String_Node_Str"");
      }
      if (""String_Node_Str"".equals(method.getName())) {
        return MenuService.class;
      }
      if (""String_Node_Str"".equals(method.getName())) {
        return new RpcResult(secondMenu);
      }
      return null;
    }
  }
);
  EasyMock.expect(directory.list(invocation)).andReturn(new ArrayList(){
{
      add(firstInvoker);
      add(secondInvoker);
    }
  }
).anyTimes();
  EasyMock.expect(directory.getUrl()).andReturn(url).anyTimes();
  EasyMock.expect(directory.getInterface()).andReturn(MenuService.class).anyTimes();
  EasyMock.replay(directory);
  mergeableClusterInvoker=new MergeableClusterInvoker<MenuService>(directory);
  Result result=mergeableClusterInvoker.invoke(invocation);
  Assert.assertTrue(result.getValue() instanceof Menu);
  Menu menu=(Menu)result.getValue();
  Map<String,List<String>> expected=new HashMap<String,List<String>>();
  merge(expected,firstMenuMap);
  merge(expected,secondMenuMap);
  TestCase.assertEquals(expected.keySet(),menu.getMenus().keySet());
  for (  String key : expected.keySet()) {
    List<String> values1=new ArrayList<String>(expected.get(key));
    List<String> values2=new ArrayList<String>(menu.getMenus().get(key));
    Collections.sort(values1);
    Collections.sort(values2);
    TestCase.assertEquals(values1,values2);
  }
}"
85147,"static void merge(Map<String,List<String>> first,Map<String,List<String>> second){
  for (  Map.Entry<String,List<String>> entry : second.entrySet()) {
    List<String> value=first.get(entry.getKey());
    if (value != null) {
      value.addAll(entry.getValue());
    }
 else {
      first.put(entry.getKey(),entry.getValue());
    }
  }
}","static void merge(Map<String,List<String>> first,Map<String,List<String>> second){
  for (  Map.Entry<String,List<String>> entry : second.entrySet()) {
    List<String> value=first.get(entry.getKey());
    if (value != null) {
      value.addAll(entry.getValue());
    }
 else {
      first.put(entry.getKey(),new ArrayList<String>(entry.getValue()));
    }
  }
}"
85148,"public Result invoke(Invoker<?> invoker,Invocation inv) throws RpcException {
  if (inv.getMethodName().equals(Constants.$INVOKE) && inv.getArguments() != null && inv.getArguments().length == 3 && !invoker.getUrl().getParameter(Constants.GENERIC_KEY,false)) {
    String name=((String)inv.getArguments()[0]).trim();
    String[] types=(String[])inv.getArguments()[1];
    Object[] args=(Object[])inv.getArguments()[2];
    try {
      Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);
      Class<?>[] params=method.getParameterTypes();
      if (args == null) {
        args=new Object[params.length];
      }
      String generic=inv.getAttachment(Constants.GENERIC_KEY);
      if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic)) {
        args=PojoUtils.realize(args,params,method.getGenericParameterTypes());
      }
 else       if (ProtocolUtils.isJavaGenericSerialization(generic)) {
        for (int i=0; i < args.length; i++) {
          if (byte[].class == args[i].getClass()) {
            try {
              UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i]);
              args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(Constants.GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();
            }
 catch (            Exception e) {
              throw new RpcException(""String_Node_Str"" + (i + 1) + ""String_Node_Str"",e);
            }
          }
 else {
            throw new RpcException(new StringBuilder(32).append(""String_Node_Str"").append(Constants.GENERIC_SERIALIZATION_NATIVE_JAVA).append(""String_Node_Str"").append(byte[].class).append(""String_Node_Str"").append(args[i].getClass()).toString());
          }
        }
      }
 else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {
        for (int i=0; i < args.length; i++) {
          if (args[i] instanceof JavaBeanDescriptor) {
            args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);
          }
 else {
            throw new RpcException(new StringBuilder(32).append(""String_Node_Str"").append(Constants.GENERIC_SERIALIZATION_BEAN).append(""String_Node_Str"").append(JavaBeanDescriptor.class.getName()).append(""String_Node_Str"").append(args[i].getClass().getName()).toString());
          }
        }
      }
      Result result=invoker.invoke(new RpcInvocation(method,args,inv.getAttachments()));
      if (result.hasException() && !(result.getException() instanceof GenericException)) {
        return new RpcResult(new GenericException(result.getException()));
      }
      if (ProtocolUtils.isJavaGenericSerialization(generic)) {
        try {
          UnsafeByteArrayOutputStream os=new UnsafeByteArrayOutputStream(512);
          ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(Constants.GENERIC_SERIALIZATION_NATIVE_JAVA).serialize(null,os).writeObject(result.getValue());
          return new RpcResult(os.toByteArray());
        }
 catch (        IOException e) {
          throw new RpcException(""String_Node_Str"",e);
        }
      }
 else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {
        return new RpcResult(JavaBeanSerializeUtil.serialize(result.getValue(),JavaBeanAccessor.METHOD));
      }
 else {
        return new RpcResult(PojoUtils.generalize(result.getValue()));
      }
    }
 catch (    NoSuchMethodException e) {
      throw new RpcException(e.getMessage(),e);
    }
catch (    ClassNotFoundException e) {
      throw new RpcException(e.getMessage(),e);
    }
  }
  return invoker.invoke(inv);
}","public Result invoke(Invoker<?> invoker,Invocation inv) throws RpcException {
  if (inv.getMethodName().equals(Constants.$INVOKE) && inv.getArguments() != null && inv.getArguments().length == 3 && !ProtocolUtils.isGeneric(invoker.getUrl().getParameter(Constants.GENERIC_KEY))) {
    String name=((String)inv.getArguments()[0]).trim();
    String[] types=(String[])inv.getArguments()[1];
    Object[] args=(Object[])inv.getArguments()[2];
    try {
      Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);
      Class<?>[] params=method.getParameterTypes();
      if (args == null) {
        args=new Object[params.length];
      }
      String generic=inv.getAttachment(Constants.GENERIC_KEY);
      if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic)) {
        args=PojoUtils.realize(args,params,method.getGenericParameterTypes());
      }
 else       if (ProtocolUtils.isJavaGenericSerialization(generic)) {
        for (int i=0; i < args.length; i++) {
          if (byte[].class == args[i].getClass()) {
            try {
              UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i]);
              args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(Constants.GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();
            }
 catch (            Exception e) {
              throw new RpcException(""String_Node_Str"" + (i + 1) + ""String_Node_Str"",e);
            }
          }
 else {
            throw new RpcException(new StringBuilder(32).append(""String_Node_Str"").append(Constants.GENERIC_SERIALIZATION_NATIVE_JAVA).append(""String_Node_Str"").append(byte[].class).append(""String_Node_Str"").append(args[i].getClass()).toString());
          }
        }
      }
 else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {
        for (int i=0; i < args.length; i++) {
          if (args[i] instanceof JavaBeanDescriptor) {
            args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);
          }
 else {
            throw new RpcException(new StringBuilder(32).append(""String_Node_Str"").append(Constants.GENERIC_SERIALIZATION_BEAN).append(""String_Node_Str"").append(JavaBeanDescriptor.class.getName()).append(""String_Node_Str"").append(args[i].getClass().getName()).toString());
          }
        }
      }
      Result result=invoker.invoke(new RpcInvocation(method,args,inv.getAttachments()));
      if (result.hasException() && !(result.getException() instanceof GenericException)) {
        return new RpcResult(new GenericException(result.getException()));
      }
      if (ProtocolUtils.isJavaGenericSerialization(generic)) {
        try {
          UnsafeByteArrayOutputStream os=new UnsafeByteArrayOutputStream(512);
          ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(Constants.GENERIC_SERIALIZATION_NATIVE_JAVA).serialize(null,os).writeObject(result.getValue());
          return new RpcResult(os.toByteArray());
        }
 catch (        IOException e) {
          throw new RpcException(""String_Node_Str"",e);
        }
      }
 else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {
        return new RpcResult(JavaBeanSerializeUtil.serialize(result.getValue(),JavaBeanAccessor.METHOD));
      }
 else {
        return new RpcResult(PojoUtils.generalize(result.getValue()));
      }
    }
 catch (    NoSuchMethodException e) {
      throw new RpcException(e.getMessage(),e);
    }
catch (    ClassNotFoundException e) {
      throw new RpcException(e.getMessage(),e);
    }
  }
  return invoker.invoke(inv);
}"
85149,"protected void doSubscribe(final URL url,final NotifyListener listener){
  try {
    if (Constants.ANY_VALUE.equals(url.getServiceInterface())) {
      String root=toRootPath();
      ConcurrentMap<NotifyListener,ChildListener> listeners=zkListeners.get(url);
      if (listeners == null) {
        zkListeners.putIfAbsent(url,new ConcurrentHashMap<NotifyListener,ChildListener>());
        listeners=zkListeners.get(url);
      }
      ChildListener zkListener=listeners.get(listener);
      if (zkListener == null) {
        listeners.putIfAbsent(listener,new ChildListener(){
          public void childChanged(          String parentPath,          List<String> currentChilds){
            for (            String child : currentChilds) {
              if (!anyServices.contains(child)) {
                anyServices.add(child);
                subscribe(url.setPath(child).addParameters(Constants.INTERFACE_KEY,child,Constants.CHECK_KEY,String.valueOf(false)),listener);
              }
            }
          }
        }
);
        zkListener=listeners.get(listener);
      }
      zkClient.create(root,false);
      List<String> services=zkClient.addChildListener(root,zkListener);
      if (services != null && services.size() > 0) {
        anyServices.addAll(services);
        for (        String service : services) {
          subscribe(url.setPath(service).addParameters(Constants.INTERFACE_KEY,service,Constants.CHECK_KEY,String.valueOf(false)),listener);
        }
      }
    }
 else {
      List<URL> urls=new ArrayList<URL>();
      for (      String path : toCategoriesPath(url)) {
        ConcurrentMap<NotifyListener,ChildListener> listeners=zkListeners.get(url);
        if (listeners == null) {
          zkListeners.putIfAbsent(url,new ConcurrentHashMap<NotifyListener,ChildListener>());
          listeners=zkListeners.get(url);
        }
        ChildListener zkListener=listeners.get(listener);
        if (zkListener == null) {
          listeners.putIfAbsent(listener,new ChildListener(){
            public void childChanged(            String parentPath,            List<String> currentChilds){
              ZookeeperRegistry.this.notify(url,listener,toUrlsWithEmpty(url,parentPath,currentChilds));
            }
          }
);
          zkListener=listeners.get(listener);
        }
        zkClient.create(path,false);
        List<String> children=zkClient.addChildListener(path,zkListener);
        if (children != null) {
          urls.addAll(toUrlsWithEmpty(url,path,children));
        }
      }
      notify(url,listener,urls);
    }
  }
 catch (  Throwable e) {
    throw new RpcException(""String_Node_Str"" + url + ""String_Node_Str""+ getUrl()+ ""String_Node_Str""+ e.getMessage(),e);
  }
}","protected void doSubscribe(final URL url,final NotifyListener listener){
  try {
    if (Constants.ANY_VALUE.equals(url.getServiceInterface())) {
      String root=toRootPath();
      ConcurrentMap<NotifyListener,ChildListener> listeners=zkListeners.get(url);
      if (listeners == null) {
        zkListeners.putIfAbsent(url,new ConcurrentHashMap<NotifyListener,ChildListener>());
        listeners=zkListeners.get(url);
      }
      ChildListener zkListener=listeners.get(listener);
      if (zkListener == null) {
        listeners.putIfAbsent(listener,new ChildListener(){
          public void childChanged(          String parentPath,          List<String> currentChilds){
            for (            String child : currentChilds) {
              child=URL.decode(child);
              if (!anyServices.contains(child)) {
                anyServices.add(child);
                subscribe(url.setPath(child).addParameters(Constants.INTERFACE_KEY,child,Constants.CHECK_KEY,String.valueOf(false)),listener);
              }
            }
          }
        }
);
        zkListener=listeners.get(listener);
      }
      zkClient.create(root,false);
      List<String> services=zkClient.addChildListener(root,zkListener);
      if (services != null && services.size() > 0) {
        for (        String service : services) {
          service=URL.decode(service);
          anyServices.add(service);
          subscribe(url.setPath(service).addParameters(Constants.INTERFACE_KEY,service,Constants.CHECK_KEY,String.valueOf(false)),listener);
        }
      }
    }
 else {
      List<URL> urls=new ArrayList<URL>();
      for (      String path : toCategoriesPath(url)) {
        ConcurrentMap<NotifyListener,ChildListener> listeners=zkListeners.get(url);
        if (listeners == null) {
          zkListeners.putIfAbsent(url,new ConcurrentHashMap<NotifyListener,ChildListener>());
          listeners=zkListeners.get(url);
        }
        ChildListener zkListener=listeners.get(listener);
        if (zkListener == null) {
          listeners.putIfAbsent(listener,new ChildListener(){
            public void childChanged(            String parentPath,            List<String> currentChilds){
              ZookeeperRegistry.this.notify(url,listener,toUrlsWithEmpty(url,parentPath,currentChilds));
            }
          }
);
          zkListener=listeners.get(listener);
        }
        zkClient.create(path,false);
        List<String> children=zkClient.addChildListener(path,zkListener);
        if (children != null) {
          urls.addAll(toUrlsWithEmpty(url,path,children));
        }
      }
      notify(url,listener,urls);
    }
  }
 catch (  Throwable e) {
    throw new RpcException(""String_Node_Str"" + url + ""String_Node_Str""+ getUrl()+ ""String_Node_Str""+ e.getMessage(),e);
  }
}"
85150,"private static void serializeInternal(JavaBeanDescriptor descriptor,Object obj,JavaBeanAccessor accessor,IdentityHashMap<Object,JavaBeanDescriptor> cache){
  if (obj == null || descriptor == null) {
    return;
  }
  if (obj.getClass().isEnum()) {
    descriptor.setEnumNameProperty(((Enum<?>)obj).name());
  }
 else   if (ReflectUtils.isPrimitive(obj.getClass())) {
    descriptor.setPrimitiveProperty(obj);
  }
 else   if (Class.class.equals(obj.getClass())) {
    descriptor.setClassNameProperty(((Class<?>)obj).getName());
  }
 else   if (obj.getClass().isArray()) {
    int len=Array.getLength(obj);
    for (int i=0; i < len; i++) {
      Object item=Array.get(obj,i);
      if (item == null) {
        descriptor.setProperty(i++,null);
      }
 else {
        JavaBeanDescriptor itemDescriptor=createDescriptorIfAbsent(item,accessor,cache);
        descriptor.setProperty(i,itemDescriptor);
      }
    }
  }
 else   if (obj instanceof Collection) {
    Collection collection=(Collection)obj;
    int index=0;
    for (    Object item : collection) {
      if (item == null) {
        descriptor.setProperty(index++,null);
      }
 else {
        JavaBeanDescriptor itemDescriptor=createDescriptorIfAbsent(item,accessor,cache);
        descriptor.setProperty(index++,itemDescriptor);
      }
    }
  }
 else   if (obj instanceof Map) {
    Map map=(Map)obj;
    for (    Object key : map.keySet()) {
      Object value=map.get(key);
      Object keyDescriptor=key == null ? null : createDescriptorIfAbsent(key,accessor,cache);
      Object valueDescriptor=value == null ? null : createDescriptorIfAbsent(value,accessor,cache);
      descriptor.setProperty(keyDescriptor,valueDescriptor);
    }
  }
 else {
    if (JavaBeanAccessor.isAccessByMethod(accessor)) {
      Map<String,Method> methods=ReflectUtils.getBeanPropertyReadMethods(obj.getClass());
      for (      Map.Entry<String,Method> entry : methods.entrySet()) {
        try {
          Object value=entry.getValue().invoke(obj);
          if (value == null) {
            continue;
          }
          JavaBeanDescriptor valueDescriptor=createDescriptorIfAbsent(value,accessor,cache);
          descriptor.setProperty(entry.getKey(),valueDescriptor);
        }
 catch (        Exception e) {
          throw new RuntimeException(e.getMessage(),e);
        }
      }
    }
    if (JavaBeanAccessor.isAccessByField(accessor)) {
      Map<String,Field> fields=ReflectUtils.getBeanPropertyFields(obj.getClass());
      for (      Map.Entry<String,Field> entry : fields.entrySet()) {
        if (!descriptor.containsProperty(entry.getKey())) {
          try {
            Object value=entry.getValue().get(obj);
            if (value == null) {
              continue;
            }
            JavaBeanDescriptor valueDescriptor=createDescriptorIfAbsent(value,accessor,cache);
            descriptor.setProperty(entry.getKey(),valueDescriptor);
          }
 catch (          Exception e) {
            throw new RuntimeException(e.getMessage(),e);
          }
        }
      }
    }
  }
}","private static void serializeInternal(JavaBeanDescriptor descriptor,Object obj,JavaBeanAccessor accessor,IdentityHashMap<Object,JavaBeanDescriptor> cache){
  if (obj == null || descriptor == null) {
    return;
  }
  if (obj.getClass().isEnum()) {
    descriptor.setEnumNameProperty(((Enum<?>)obj).name());
  }
 else   if (ReflectUtils.isPrimitive(obj.getClass())) {
    descriptor.setPrimitiveProperty(obj);
  }
 else   if (Class.class.equals(obj.getClass())) {
    descriptor.setClassNameProperty(((Class<?>)obj).getName());
  }
 else   if (obj.getClass().isArray()) {
    int len=Array.getLength(obj);
    for (int i=0; i < len; i++) {
      Object item=Array.get(obj,i);
      if (item == null) {
        descriptor.setProperty(i,null);
      }
 else {
        JavaBeanDescriptor itemDescriptor=createDescriptorIfAbsent(item,accessor,cache);
        descriptor.setProperty(i,itemDescriptor);
      }
    }
  }
 else   if (obj instanceof Collection) {
    Collection collection=(Collection)obj;
    int index=0;
    for (    Object item : collection) {
      if (item == null) {
        descriptor.setProperty(index++,null);
      }
 else {
        JavaBeanDescriptor itemDescriptor=createDescriptorIfAbsent(item,accessor,cache);
        descriptor.setProperty(index++,itemDescriptor);
      }
    }
  }
 else   if (obj instanceof Map) {
    Map map=(Map)obj;
    for (    Object key : map.keySet()) {
      Object value=map.get(key);
      Object keyDescriptor=key == null ? null : createDescriptorIfAbsent(key,accessor,cache);
      Object valueDescriptor=value == null ? null : createDescriptorIfAbsent(value,accessor,cache);
      descriptor.setProperty(keyDescriptor,valueDescriptor);
    }
  }
 else {
    if (JavaBeanAccessor.isAccessByMethod(accessor)) {
      Map<String,Method> methods=ReflectUtils.getBeanPropertyReadMethods(obj.getClass());
      for (      Map.Entry<String,Method> entry : methods.entrySet()) {
        try {
          Object value=entry.getValue().invoke(obj);
          if (value == null) {
            continue;
          }
          JavaBeanDescriptor valueDescriptor=createDescriptorIfAbsent(value,accessor,cache);
          descriptor.setProperty(entry.getKey(),valueDescriptor);
        }
 catch (        Exception e) {
          throw new RuntimeException(e.getMessage(),e);
        }
      }
    }
    if (JavaBeanAccessor.isAccessByField(accessor)) {
      Map<String,Field> fields=ReflectUtils.getBeanPropertyFields(obj.getClass());
      for (      Map.Entry<String,Field> entry : fields.entrySet()) {
        if (!descriptor.containsProperty(entry.getKey())) {
          try {
            Object value=entry.getValue().get(obj);
            if (value == null) {
              continue;
            }
            JavaBeanDescriptor valueDescriptor=createDescriptorIfAbsent(value,accessor,cache);
            descriptor.setProperty(entry.getKey(),valueDescriptor);
          }
 catch (          Exception e) {
            throw new RuntimeException(e.getMessage(),e);
          }
        }
      }
    }
  }
}"
85151,"@Test public void testSerialize_Array() throws Exception {
  int[] array={1,2,3,4,5,6,7,8,9};
  JavaBeanDescriptor descriptor=JavaBeanSerializeUtil.serialize(array,JavaBeanAccessor.METHOD);
  Assert.assertTrue(descriptor.isArrayType());
  Assert.assertEquals(int.class.getName(),descriptor.getClassName());
  for (int i=0; i < array.length; i++) {
    Assert.assertEquals(array[i],((JavaBeanDescriptor)descriptor.getProperty(i)).getPrimitiveProperty());
  }
  int[][] second={{1,2},{3,4}};
  descriptor=JavaBeanSerializeUtil.serialize(second,JavaBeanAccessor.METHOD);
  Assert.assertTrue(descriptor.isArrayType());
  Assert.assertEquals(int[].class.getName(),descriptor.getClassName());
  for (int i=0; i < second.length; i++) {
    for (int j=0; j < second[i].length; j++) {
      JavaBeanDescriptor item=(((JavaBeanDescriptor)descriptor.getProperty(i)));
      Assert.assertTrue(item.isArrayType());
      Assert.assertEquals(int.class.getName(),item.getClassName());
      Assert.assertEquals(second[i][j],((JavaBeanDescriptor)item.getProperty(j)).getPrimitiveProperty());
    }
  }
  BigPerson[] persons=new BigPerson[]{createBigPerson(),createBigPerson()};
  descriptor=JavaBeanSerializeUtil.serialize(persons);
  Assert.assertTrue(descriptor.isArrayType());
  Assert.assertEquals(BigPerson.class.getName(),descriptor.getClassName());
  for (int i=0; i < persons.length; i++) {
    assertEqualsBigPerson(persons[i],descriptor.getProperty(i));
  }
}","@Test public void testSerialize_Array() throws Exception {
  int[] array={1,2,3,4,5,6,7,8,9};
  JavaBeanDescriptor descriptor=JavaBeanSerializeUtil.serialize(array,JavaBeanAccessor.METHOD);
  Assert.assertTrue(descriptor.isArrayType());
  Assert.assertEquals(int.class.getName(),descriptor.getClassName());
  for (int i=0; i < array.length; i++) {
    Assert.assertEquals(array[i],((JavaBeanDescriptor)descriptor.getProperty(i)).getPrimitiveProperty());
  }
  Integer[] integers=new Integer[]{1,2,3,4,null,null,null};
  descriptor=JavaBeanSerializeUtil.serialize(integers,JavaBeanAccessor.METHOD);
  Assert.assertTrue(descriptor.isArrayType());
  Assert.assertEquals(Integer.class.getName(),descriptor.getClassName());
  Assert.assertEquals(integers.length,descriptor.propertySize());
  for (int i=0; i < integers.length; i++) {
    if (integers[i] == null) {
      Assert.assertTrue(integers[i] == descriptor.getProperty(i));
    }
 else {
      Assert.assertEquals(integers[i],((JavaBeanDescriptor)descriptor.getProperty(i)).getPrimitiveProperty());
    }
  }
  int[][] second={{1,2},{3,4}};
  descriptor=JavaBeanSerializeUtil.serialize(second,JavaBeanAccessor.METHOD);
  Assert.assertTrue(descriptor.isArrayType());
  Assert.assertEquals(int[].class.getName(),descriptor.getClassName());
  for (int i=0; i < second.length; i++) {
    for (int j=0; j < second[i].length; j++) {
      JavaBeanDescriptor item=(((JavaBeanDescriptor)descriptor.getProperty(i)));
      Assert.assertTrue(item.isArrayType());
      Assert.assertEquals(int.class.getName(),item.getClassName());
      Assert.assertEquals(second[i][j],((JavaBeanDescriptor)item.getProperty(j)).getPrimitiveProperty());
    }
  }
  BigPerson[] persons=new BigPerson[]{createBigPerson(),createBigPerson()};
  descriptor=JavaBeanSerializeUtil.serialize(persons);
  Assert.assertTrue(descriptor.isArrayType());
  Assert.assertEquals(BigPerson.class.getName(),descriptor.getClassName());
  for (int i=0; i < persons.length; i++) {
    assertEqualsBigPerson(persons[i],descriptor.getProperty(i));
  }
}"
85152,"protected Result doInvoke(Invocation invocation) throws Throwable {
  try {
    if (get.equals(invocation.getMethodName())) {
      if (invocation.getArguments().length != 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
      }
      byte[] value=jedisPool.getResource().get(String.valueOf(invocation.getArguments()[0]).getBytes());
      if (value == null) {
        return new RpcResult();
      }
      ObjectInput oin=getSerialization(url).deserialize(url,new ByteArrayInputStream(value));
      return new RpcResult(oin.readObject());
    }
 else     if (set.equals(invocation.getMethodName())) {
      if (invocation.getArguments().length != 2) {
        throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
      }
      byte[] key=String.valueOf(invocation.getArguments()[0]).getBytes();
      ByteArrayOutputStream output=new ByteArrayOutputStream();
      ObjectOutput value=getSerialization(url).serialize(url,output);
      value.writeObject(invocation.getArguments()[1]);
      jedisPool.getResource().set(key,output.toByteArray());
      if (expiry > 1000) {
        jedisPool.getResource().expire(key,expiry / 1000);
      }
      return new RpcResult();
    }
 else     if (delete.equals(invocation.getMethodName())) {
      if (invocation.getArguments().length != 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
      }
      jedisPool.getResource().del(String.valueOf(invocation.getArguments()[0]).getBytes());
      return new RpcResult();
    }
 else {
      throw new UnsupportedOperationException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    RpcException re=new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
    if (t instanceof TimeoutException || t instanceof SocketTimeoutException) {
      re.setCode(RpcException.TIMEOUT_EXCEPTION);
    }
 else     if (t instanceof JedisConnectionException || t instanceof IOException) {
      re.setCode(RpcException.NETWORK_EXCEPTION);
    }
 else     if (t instanceof JedisDataException) {
      re.setCode(RpcException.SERIALIZATION_EXCEPTION);
    }
    throw re;
  }
}","protected Result doInvoke(Invocation invocation) throws Throwable {
  Jedis resource=null;
  try {
    resource=jedisPool.getResource();
    if (get.equals(invocation.getMethodName())) {
      if (invocation.getArguments().length != 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
      }
      byte[] value=resource.get(String.valueOf(invocation.getArguments()[0]).getBytes());
      if (value == null) {
        return new RpcResult();
      }
      ObjectInput oin=getSerialization(url).deserialize(url,new ByteArrayInputStream(value));
      return new RpcResult(oin.readObject());
    }
 else     if (set.equals(invocation.getMethodName())) {
      if (invocation.getArguments().length != 2) {
        throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
      }
      byte[] key=String.valueOf(invocation.getArguments()[0]).getBytes();
      ByteArrayOutputStream output=new ByteArrayOutputStream();
      ObjectOutput value=getSerialization(url).serialize(url,output);
      value.writeObject(invocation.getArguments()[1]);
      resource.set(key,output.toByteArray());
      if (expiry > 1000) {
        resource.expire(key,expiry / 1000);
      }
      return new RpcResult();
    }
 else     if (delete.equals(invocation.getMethodName())) {
      if (invocation.getArguments().length != 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
      }
      resource.del(String.valueOf(invocation.getArguments()[0]).getBytes());
      return new RpcResult();
    }
 else {
      throw new UnsupportedOperationException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    RpcException re=new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
    if (t instanceof TimeoutException || t instanceof SocketTimeoutException) {
      re.setCode(RpcException.TIMEOUT_EXCEPTION);
    }
 else     if (t instanceof JedisConnectionException || t instanceof IOException) {
      re.setCode(RpcException.NETWORK_EXCEPTION);
    }
 else     if (t instanceof JedisDataException) {
      re.setCode(RpcException.SERIALIZATION_EXCEPTION);
    }
    throw re;
  }
 finally {
    if (resource != null) {
      try {
        jedisPool.returnResource(resource);
      }
 catch (      Throwable t) {
        logger.warn(""String_Node_Str"" + t.getMessage(),t);
      }
    }
  }
}"
85153,"public <T>Invoker<T> refer(final Class<T> type,final URL url) throws RpcException {
  try {
    GenericObjectPool.Config config=new GenericObjectPool.Config();
    config.testOnBorrow=url.getParameter(""String_Node_Str"",true);
    config.testOnReturn=url.getParameter(""String_Node_Str"",false);
    config.testWhileIdle=url.getParameter(""String_Node_Str"",false);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.maxIdle=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.minIdle=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.maxActive=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.maxWait=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.numTestsPerEvictionRun=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.timeBetweenEvictionRunsMillis=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.minEvictableIdleTimeMillis=url.getParameter(""String_Node_Str"",0);
    final JedisPool jedisPool=new JedisPool(config,url.getHost(),url.getPort(DEFAULT_PORT),url.getParameter(Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT));
    final int expiry=url.getParameter(""String_Node_Str"",0);
    final String get=url.getParameter(""String_Node_Str"",""String_Node_Str"");
    final String set=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    final String delete=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    return new AbstractInvoker<T>(type,url){
      protected Result doInvoke(      Invocation invocation) throws Throwable {
        try {
          if (get.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] value=jedisPool.getResource().get(String.valueOf(invocation.getArguments()[0]).getBytes());
            if (value == null) {
              return new RpcResult();
            }
            ObjectInput oin=getSerialization(url).deserialize(url,new ByteArrayInputStream(value));
            return new RpcResult(oin.readObject());
          }
 else           if (set.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 2) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] key=String.valueOf(invocation.getArguments()[0]).getBytes();
            ByteArrayOutputStream output=new ByteArrayOutputStream();
            ObjectOutput value=getSerialization(url).serialize(url,output);
            value.writeObject(invocation.getArguments()[1]);
            jedisPool.getResource().set(key,output.toByteArray());
            if (expiry > 1000) {
              jedisPool.getResource().expire(key,expiry / 1000);
            }
            return new RpcResult();
          }
 else           if (delete.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            jedisPool.getResource().del(String.valueOf(invocation.getArguments()[0]).getBytes());
            return new RpcResult();
          }
 else {
            throw new UnsupportedOperationException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str"");
          }
        }
 catch (        Throwable t) {
          RpcException re=new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
          if (t instanceof TimeoutException || t instanceof SocketTimeoutException) {
            re.setCode(RpcException.TIMEOUT_EXCEPTION);
          }
 else           if (t instanceof JedisConnectionException || t instanceof IOException) {
            re.setCode(RpcException.NETWORK_EXCEPTION);
          }
 else           if (t instanceof JedisDataException) {
            re.setCode(RpcException.SERIALIZATION_EXCEPTION);
          }
          throw re;
        }
      }
      public void destroy(){
        super.destroy();
        try {
          jedisPool.destroy();
        }
 catch (        Throwable e) {
          logger.warn(e.getMessage(),e);
        }
      }
    }
;
  }
 catch (  Throwable t) {
    throw new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
  }
}","public <T>Invoker<T> refer(final Class<T> type,final URL url) throws RpcException {
  try {
    GenericObjectPool.Config config=new GenericObjectPool.Config();
    config.testOnBorrow=url.getParameter(""String_Node_Str"",true);
    config.testOnReturn=url.getParameter(""String_Node_Str"",false);
    config.testWhileIdle=url.getParameter(""String_Node_Str"",false);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.maxIdle=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.minIdle=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.maxActive=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.maxWait=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.numTestsPerEvictionRun=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.timeBetweenEvictionRunsMillis=url.getParameter(""String_Node_Str"",0);
    if (url.getParameter(""String_Node_Str"",0) > 0)     config.minEvictableIdleTimeMillis=url.getParameter(""String_Node_Str"",0);
    final JedisPool jedisPool=new JedisPool(config,url.getHost(),url.getPort(DEFAULT_PORT),url.getParameter(Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT));
    final int expiry=url.getParameter(""String_Node_Str"",0);
    final String get=url.getParameter(""String_Node_Str"",""String_Node_Str"");
    final String set=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    final String delete=url.getParameter(""String_Node_Str"",Map.class.equals(type) ? ""String_Node_Str"" : ""String_Node_Str"");
    return new AbstractInvoker<T>(type,url){
      protected Result doInvoke(      Invocation invocation) throws Throwable {
        Jedis resource=null;
        try {
          resource=jedisPool.getResource();
          if (get.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] value=resource.get(String.valueOf(invocation.getArguments()[0]).getBytes());
            if (value == null) {
              return new RpcResult();
            }
            ObjectInput oin=getSerialization(url).deserialize(url,new ByteArrayInputStream(value));
            return new RpcResult(oin.readObject());
          }
 else           if (set.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 2) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            byte[] key=String.valueOf(invocation.getArguments()[0]).getBytes();
            ByteArrayOutputStream output=new ByteArrayOutputStream();
            ObjectOutput value=getSerialization(url).serialize(url,output);
            value.writeObject(invocation.getArguments()[1]);
            resource.set(key,output.toByteArray());
            if (expiry > 1000) {
              resource.expire(key,expiry / 1000);
            }
            return new RpcResult();
          }
 else           if (delete.equals(invocation.getMethodName())) {
            if (invocation.getArguments().length != 1) {
              throw new IllegalArgumentException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url);
            }
            resource.del(String.valueOf(invocation.getArguments()[0]).getBytes());
            return new RpcResult();
          }
 else {
            throw new UnsupportedOperationException(""String_Node_Str"" + invocation.getMethodName() + ""String_Node_Str"");
          }
        }
 catch (        Throwable t) {
          RpcException re=new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
          if (t instanceof TimeoutException || t instanceof SocketTimeoutException) {
            re.setCode(RpcException.TIMEOUT_EXCEPTION);
          }
 else           if (t instanceof JedisConnectionException || t instanceof IOException) {
            re.setCode(RpcException.NETWORK_EXCEPTION);
          }
 else           if (t instanceof JedisDataException) {
            re.setCode(RpcException.SERIALIZATION_EXCEPTION);
          }
          throw re;
        }
 finally {
          if (resource != null) {
            try {
              jedisPool.returnResource(resource);
            }
 catch (            Throwable t) {
              logger.warn(""String_Node_Str"" + t.getMessage(),t);
            }
          }
        }
      }
      public void destroy(){
        super.destroy();
        try {
          jedisPool.destroy();
        }
 catch (        Throwable e) {
          logger.warn(e.getMessage(),e);
        }
      }
    }
;
  }
 catch (  Throwable t) {
    throw new RpcException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ url+ ""String_Node_Str""+ t.getMessage(),t);
  }
}"
85154,"private String createAdaptiveExtensionClassCode(){
  StringBuilder codeBuidler=new StringBuilder();
  Method[] methods=type.getMethods();
  boolean hasAdaptiveAnnotation=false;
  for (  Method m : methods) {
    if (m.isAnnotationPresent(Adaptive.class)) {
      hasAdaptiveAnnotation=true;
      break;
    }
  }
  if (!hasAdaptiveAnnotation)   throw new IllegalStateException(""String_Node_Str"" + type.getName() + ""String_Node_Str"");
  codeBuidler.append(""String_Node_Str"" + type.getPackage().getName() + ""String_Node_Str"");
  codeBuidler.append(""String_Node_Str"" + ExtensionLoader.class.getPackage().getName() + ""String_Node_Str"");
  codeBuidler.append(""String_Node_Str"" + type.getSimpleName() + ""String_Node_Str""+ ""String_Node_Str""+ type.getCanonicalName()+ ""String_Node_Str"");
  for (  Method method : methods) {
    Class<?> rt=method.getReturnType();
    Class<?>[] pts=method.getParameterTypes();
    Class<?>[] ets=method.getExceptionTypes();
    Adaptive adaptiveAnnotation=method.getAnnotation(Adaptive.class);
    StringBuilder code=new StringBuilder(512);
    if (adaptiveAnnotation == null) {
      code.append(""String_Node_Str"").append(method.toString()).append(""String_Node_Str"").append(type.getName()).append(""String_Node_Str"");
    }
 else {
      int urlTypeIndex=-1;
      for (int i=0; i < pts.length; ++i) {
        if (pts[i].equals(URL.class)) {
          urlTypeIndex=i;
          break;
        }
      }
      if (urlTypeIndex != -1) {
        String s=String.format(""String_Node_Str"",urlTypeIndex);
        code.append(s);
        s=String.format(""String_Node_Str"",URL.class.getName(),urlTypeIndex);
        code.append(s);
      }
 else {
        String attribMethod=null;
        LBL_PTS:         for (int i=0; i < pts.length; ++i) {
          Method[] ms=pts[i].getMethods();
          for (          Method m : ms) {
            String name=m.getName();
            if ((name.startsWith(""String_Node_Str"") || name.length() > 3) && Modifier.isPublic(m.getModifiers()) && !Modifier.isStatic(m.getModifiers())&& m.getParameterTypes().length == 0 && m.getReturnType() == URL.class) {
              urlTypeIndex=i;
              attribMethod=name;
              break LBL_PTS;
            }
          }
        }
        if (attribMethod == null) {
          throw new IllegalStateException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ method.getName());
        }
        String s=String.format(""String_Node_Str"",urlTypeIndex,pts[urlTypeIndex].getName());
        code.append(s);
        s=String.format(""String_Node_Str"",urlTypeIndex,attribMethod,pts[urlTypeIndex].getName(),attribMethod);
        code.append(s);
        s=String.format(""String_Node_Str"",URL.class.getName(),urlTypeIndex,attribMethod);
        code.append(s);
      }
      String[] value=adaptiveAnnotation.value();
      if (value.length == 0) {
        char[] charArray=type.getSimpleName().toCharArray();
        StringBuilder sb=new StringBuilder(128);
        for (int i=0; i < charArray.length; i++) {
          if (Character.isUpperCase(charArray[i])) {
            if (i != 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(Character.toLowerCase(charArray[i]));
          }
 else {
            sb.append(charArray[i]);
          }
        }
        value=new String[]{sb.toString()};
      }
      boolean hasInvocation=false;
      for (int i=0; i < pts.length; ++i) {
        if (pts[i].getName().equals(""String_Node_Str"")) {
          String s=String.format(""String_Node_Str"",i);
          code.append(s);
          s=String.format(""String_Node_Str"",i);
          code.append(s);
          hasInvocation=true;
          break;
        }
      }
      String defaultExtName=cachedDefaultName;
      String getNameCode=null;
      for (int i=value.length - 1; i >= 0; --i) {
        if (i == value.length - 1) {
          if (null != defaultExtName) {
            if (!""String_Node_Str"".equals(value[i]))             if (hasInvocation)             getNameCode=String.format(""String_Node_Str"",value[i],defaultExtName);
 else             getNameCode=String.format(""String_Node_Str"",value[i],defaultExtName);
 else             getNameCode=String.format(""String_Node_Str"",defaultExtName);
          }
 else {
            if (!""String_Node_Str"".equals(value[i]))             if (hasInvocation)             getNameCode=String.format(""String_Node_Str"",value[i],defaultExtName);
 else             getNameCode=String.format(""String_Node_Str"",value[i]);
 else             getNameCode=""String_Node_Str"";
          }
        }
 else {
          if (!""String_Node_Str"".equals(value[i]))           if (hasInvocation)           getNameCode=String.format(""String_Node_Str"",value[i],defaultExtName);
 else           getNameCode=String.format(""String_Node_Str"",value[i],getNameCode);
 else           getNameCode=String.format(""String_Node_Str"",getNameCode);
        }
      }
      code.append(""String_Node_Str"").append(getNameCode).append(""String_Node_Str"");
      String s=String.format(""String_Node_Str"" + ""String_Node_Str"",type.getName(),Arrays.toString(value));
      code.append(s);
      s=String.format(""String_Node_Str"",type.getName(),ExtensionLoader.class.getSimpleName(),type.getName());
      code.append(s);
      if (!rt.equals(void.class)) {
        code.append(""String_Node_Str"");
      }
      s=String.format(""String_Node_Str"",method.getName());
      code.append(s);
      for (int i=0; i < pts.length; i++) {
        if (i != 0)         code.append(""String_Node_Str"");
        code.append(""String_Node_Str"").append(i);
      }
      code.append(""String_Node_Str"");
    }
    codeBuidler.append(""String_Node_Str"" + rt.getCanonicalName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str"");
    for (int i=0; i < pts.length; i++) {
      if (i > 0) {
        codeBuidler.append(""String_Node_Str"");
      }
      codeBuidler.append(pts[i].getCanonicalName());
      codeBuidler.append(""String_Node_Str"");
      codeBuidler.append(""String_Node_Str"" + i);
    }
    codeBuidler.append(""String_Node_Str"");
    if (ets.length > 0) {
      codeBuidler.append(""String_Node_Str"");
      for (int i=0; i < ets.length; i++) {
        if (i > 0) {
          codeBuidler.append(""String_Node_Str"");
        }
        codeBuidler.append(pts[i].getCanonicalName());
      }
    }
    codeBuidler.append(""String_Node_Str"");
    codeBuidler.append(code.toString());
    codeBuidler.append(""String_Node_Str"");
  }
  codeBuidler.append(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(codeBuidler.toString());
  }
  return codeBuidler.toString();
}","private String createAdaptiveExtensionClassCode(){
  StringBuilder codeBuidler=new StringBuilder();
  Method[] methods=type.getMethods();
  boolean hasAdaptiveAnnotation=false;
  for (  Method m : methods) {
    if (m.isAnnotationPresent(Adaptive.class)) {
      hasAdaptiveAnnotation=true;
      break;
    }
  }
  if (!hasAdaptiveAnnotation)   throw new IllegalStateException(""String_Node_Str"" + type.getName() + ""String_Node_Str"");
  codeBuidler.append(""String_Node_Str"" + type.getPackage().getName() + ""String_Node_Str"");
  codeBuidler.append(""String_Node_Str"" + ExtensionLoader.class.getName() + ""String_Node_Str"");
  codeBuidler.append(""String_Node_Str"" + type.getSimpleName() + ""String_Node_Str""+ ""String_Node_Str""+ type.getCanonicalName()+ ""String_Node_Str"");
  for (  Method method : methods) {
    Class<?> rt=method.getReturnType();
    Class<?>[] pts=method.getParameterTypes();
    Class<?>[] ets=method.getExceptionTypes();
    Adaptive adaptiveAnnotation=method.getAnnotation(Adaptive.class);
    StringBuilder code=new StringBuilder(512);
    if (adaptiveAnnotation == null) {
      code.append(""String_Node_Str"").append(method.toString()).append(""String_Node_Str"").append(type.getName()).append(""String_Node_Str"");
    }
 else {
      int urlTypeIndex=-1;
      for (int i=0; i < pts.length; ++i) {
        if (pts[i].equals(URL.class)) {
          urlTypeIndex=i;
          break;
        }
      }
      if (urlTypeIndex != -1) {
        String s=String.format(""String_Node_Str"",urlTypeIndex);
        code.append(s);
        s=String.format(""String_Node_Str"",URL.class.getName(),urlTypeIndex);
        code.append(s);
      }
 else {
        String attribMethod=null;
        LBL_PTS:         for (int i=0; i < pts.length; ++i) {
          Method[] ms=pts[i].getMethods();
          for (          Method m : ms) {
            String name=m.getName();
            if ((name.startsWith(""String_Node_Str"") || name.length() > 3) && Modifier.isPublic(m.getModifiers()) && !Modifier.isStatic(m.getModifiers())&& m.getParameterTypes().length == 0 && m.getReturnType() == URL.class) {
              urlTypeIndex=i;
              attribMethod=name;
              break LBL_PTS;
            }
          }
        }
        if (attribMethod == null) {
          throw new IllegalStateException(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ method.getName());
        }
        String s=String.format(""String_Node_Str"",urlTypeIndex,pts[urlTypeIndex].getName());
        code.append(s);
        s=String.format(""String_Node_Str"",urlTypeIndex,attribMethod,pts[urlTypeIndex].getName(),attribMethod);
        code.append(s);
        s=String.format(""String_Node_Str"",URL.class.getName(),urlTypeIndex,attribMethod);
        code.append(s);
      }
      String[] value=adaptiveAnnotation.value();
      if (value.length == 0) {
        char[] charArray=type.getSimpleName().toCharArray();
        StringBuilder sb=new StringBuilder(128);
        for (int i=0; i < charArray.length; i++) {
          if (Character.isUpperCase(charArray[i])) {
            if (i != 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(Character.toLowerCase(charArray[i]));
          }
 else {
            sb.append(charArray[i]);
          }
        }
        value=new String[]{sb.toString()};
      }
      boolean hasInvocation=false;
      for (int i=0; i < pts.length; ++i) {
        if (pts[i].getName().equals(""String_Node_Str"")) {
          String s=String.format(""String_Node_Str"",i);
          code.append(s);
          s=String.format(""String_Node_Str"",i);
          code.append(s);
          hasInvocation=true;
          break;
        }
      }
      String defaultExtName=cachedDefaultName;
      String getNameCode=null;
      for (int i=value.length - 1; i >= 0; --i) {
        if (i == value.length - 1) {
          if (null != defaultExtName) {
            if (!""String_Node_Str"".equals(value[i]))             if (hasInvocation)             getNameCode=String.format(""String_Node_Str"",value[i],defaultExtName);
 else             getNameCode=String.format(""String_Node_Str"",value[i],defaultExtName);
 else             getNameCode=String.format(""String_Node_Str"",defaultExtName);
          }
 else {
            if (!""String_Node_Str"".equals(value[i]))             if (hasInvocation)             getNameCode=String.format(""String_Node_Str"",value[i],defaultExtName);
 else             getNameCode=String.format(""String_Node_Str"",value[i]);
 else             getNameCode=""String_Node_Str"";
          }
        }
 else {
          if (!""String_Node_Str"".equals(value[i]))           if (hasInvocation)           getNameCode=String.format(""String_Node_Str"",value[i],defaultExtName);
 else           getNameCode=String.format(""String_Node_Str"",value[i],getNameCode);
 else           getNameCode=String.format(""String_Node_Str"",getNameCode);
        }
      }
      code.append(""String_Node_Str"").append(getNameCode).append(""String_Node_Str"");
      String s=String.format(""String_Node_Str"" + ""String_Node_Str"",type.getName(),Arrays.toString(value));
      code.append(s);
      s=String.format(""String_Node_Str"",type.getName(),ExtensionLoader.class.getSimpleName(),type.getName());
      code.append(s);
      if (!rt.equals(void.class)) {
        code.append(""String_Node_Str"");
      }
      s=String.format(""String_Node_Str"",method.getName());
      code.append(s);
      for (int i=0; i < pts.length; i++) {
        if (i != 0)         code.append(""String_Node_Str"");
        code.append(""String_Node_Str"").append(i);
      }
      code.append(""String_Node_Str"");
    }
    codeBuidler.append(""String_Node_Str"" + rt.getCanonicalName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str"");
    for (int i=0; i < pts.length; i++) {
      if (i > 0) {
        codeBuidler.append(""String_Node_Str"");
      }
      codeBuidler.append(pts[i].getCanonicalName());
      codeBuidler.append(""String_Node_Str"");
      codeBuidler.append(""String_Node_Str"" + i);
    }
    codeBuidler.append(""String_Node_Str"");
    if (ets.length > 0) {
      codeBuidler.append(""String_Node_Str"");
      for (int i=0; i < ets.length; i++) {
        if (i > 0) {
          codeBuidler.append(""String_Node_Str"");
        }
        codeBuidler.append(pts[i].getCanonicalName());
      }
    }
    codeBuidler.append(""String_Node_Str"");
    codeBuidler.append(code.toString());
    codeBuidler.append(""String_Node_Str"");
  }
  codeBuidler.append(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(codeBuidler.toString());
  }
  return codeBuidler.toString();
}"
85155,"public Result invoke(Invoker<?> invoker,Invocation invocation) throws RpcException {
  try {
    Result result=invoker.invoke(invocation);
    if (result.hasException() && GenericService.class != invoker.getInterface()) {
      try {
        Throwable exception=result.getException();
        if (!(exception instanceof RuntimeException)) {
          return result;
        }
        try {
          Method method=invoker.getInterface().getMethod(invocation.getMethodName(),invocation.getParameterTypes());
          Class<?>[] exceptionClassses=method.getExceptionTypes();
          for (          Class<?> exceptionClass : exceptionClassses) {
            if (exception.getClass().equals(exceptionClass)) {
              return result;
            }
          }
        }
 catch (        NoSuchMethodException e) {
          return result;
        }
        logger.error(""String_Node_Str"" + RpcContext.getContext().getRemoteHost() + ""String_Node_Str""+ invoker.getInterface().getName()+ ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ exception.getClass().getName()+ ""String_Node_Str""+ exception.getMessage(),exception);
        String serviceFile=ReflectUtils.getCodeBase(invoker.getInterface());
        String exceptionFile=ReflectUtils.getCodeBase(exception.getClass());
        if (serviceFile == null || exceptionFile == null || serviceFile.equals(exceptionFile)) {
          return result;
        }
        String className=exception.getClass().getName();
        if (className.startsWith(""String_Node_Str"") || className.startsWith(""String_Node_Str"")) {
          return result;
        }
        if (exception instanceof RpcException) {
          return result;
        }
        return new RpcResult(new RuntimeException(StringUtils.toString(exception)));
      }
 catch (      Throwable e) {
        logger.warn(e.getMessage(),e);
        return result;
      }
    }
    return result;
  }
 catch (  RuntimeException e) {
    logger.error(""String_Node_Str"" + RpcContext.getContext().getRemoteHost() + ""String_Node_Str""+ invoker.getInterface().getName()+ ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage(),e);
    throw e;
  }
}","public Result invoke(Invoker<?> invoker,Invocation invocation) throws RpcException {
  try {
    Result result=invoker.invoke(invocation);
    if (result.hasException() && GenericService.class != invoker.getInterface()) {
      try {
        Throwable exception=result.getException();
        if (!(exception instanceof RuntimeException) && (exception instanceof Exception)) {
          return result;
        }
        try {
          Method method=invoker.getInterface().getMethod(invocation.getMethodName(),invocation.getParameterTypes());
          Class<?>[] exceptionClassses=method.getExceptionTypes();
          for (          Class<?> exceptionClass : exceptionClassses) {
            if (exception.getClass().equals(exceptionClass)) {
              return result;
            }
          }
        }
 catch (        NoSuchMethodException e) {
          return result;
        }
        logger.error(""String_Node_Str"" + RpcContext.getContext().getRemoteHost() + ""String_Node_Str""+ invoker.getInterface().getName()+ ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ exception.getClass().getName()+ ""String_Node_Str""+ exception.getMessage(),exception);
        String serviceFile=ReflectUtils.getCodeBase(invoker.getInterface());
        String exceptionFile=ReflectUtils.getCodeBase(exception.getClass());
        if (serviceFile == null || exceptionFile == null || serviceFile.equals(exceptionFile)) {
          return result;
        }
        String className=exception.getClass().getName();
        if (className.startsWith(""String_Node_Str"") || className.startsWith(""String_Node_Str"")) {
          return result;
        }
        if (exception instanceof RpcException) {
          return result;
        }
        return new RpcResult(new RuntimeException(StringUtils.toString(exception)));
      }
 catch (      Throwable e) {
        logger.warn(""String_Node_Str"" + RpcContext.getContext().getRemoteHost() + ""String_Node_Str""+ invoker.getInterface().getName()+ ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage(),e);
        return result;
      }
    }
    return result;
  }
 catch (  RuntimeException e) {
    logger.error(""String_Node_Str"" + RpcContext.getContext().getRemoteHost() + ""String_Node_Str""+ invoker.getInterface().getName()+ ""String_Node_Str""+ invocation.getMethodName()+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage(),e);
    throw e;
  }
}"
85156,"public ChannelHandler getHandler(){
  if (handler instanceof ChannelHandlerDelegate) {
    ((ChannelHandlerDelegate)handler).getHandler();
  }
  return handler;
}","public ChannelHandler getHandler(){
  if (handler instanceof ChannelHandlerDelegate) {
    return ((ChannelHandlerDelegate)handler).getHandler();
  }
  return handler;
}"
85157,"public boolean isRegistered(String key){
  return StringUtils.isNotEmpty(key) && exportMap.containsKey(key);
}","public boolean isRegistered(String key){
  return StringUtils.isNotEmpty(key) && protocol instanceof InjvmProtocol && ((InjvmProtocol)protocol).isExported(key);
}"
85158,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void exportLocal(URL url){
  if (!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(url.getProtocol())) {
    URL local=URL.valueOf(url.toFullString()).setProtocol(Constants.LOCAL_PROTOCOL).setHost(NetUtils.LOCALHOST).setPort(0);
    Exporter<?> exporter=protocol.export(proxyFactory.getInvoker(ref,(Class)interfaceClass,local));
    LocalServiceStore.getInstance().register(url,exporter);
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void exportLocal(URL url){
  if (!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(url.getProtocol())) {
    URL local=URL.valueOf(url.toFullString()).setProtocol(Constants.LOCAL_PROTOCOL).setHost(NetUtils.LOCALHOST).setPort(0);
    Exporter<?> exporter=protocol.export(proxyFactory.getInvoker(ref,(Class)interfaceClass,local));
  }
}"
85159,"public synchronized void unexport(){
  if (!exported) {
    return;
  }
  if (unexported) {
    return;
  }
  if (exporters != null && exporters.size() > 0) {
    for (    Exporter<?> exporter : exporters) {
      try {
        exporter.unexport();
        LocalServiceStore.getInstance().unregister(exporter.getInvoker().getUrl());
      }
 catch (      Throwable t) {
        logger.warn(""String_Node_Str"" + exporter,t);
      }
    }
    exporters.clear();
  }
  unexported=true;
}","public synchronized void unexport(){
  if (!exported) {
    return;
  }
  if (unexported) {
    return;
  }
  if (exporters != null && exporters.size() > 0) {
    for (    Exporter<?> exporter : exporters) {
      try {
        exporter.unexport();
      }
 catch (      Throwable t) {
        logger.warn(""String_Node_Str"" + exporter,t);
      }
    }
    exporters.clear();
  }
  unexported=true;
}"
85160,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void doExportUrls(){
  List<URL> registryURLs=loadRegistries();
  for (  ProtocolConfig protocolConfig : protocols) {
    String name=protocolConfig.getName();
    if (name == null || name.length() == 0) {
      name=""String_Node_Str"";
    }
    String host=protocolConfig.getHost();
    if (provider != null && (host == null || host.length() == 0)) {
      host=provider.getHost();
    }
    boolean anyhost=false;
    if (NetUtils.isInvalidLocalHost(host)) {
      anyhost=true;
      try {
        host=InetAddress.getLocalHost().getHostAddress();
      }
 catch (      UnknownHostException e) {
        logger.warn(e.getMessage(),e);
      }
      if (NetUtils.isInvalidLocalHost(host)) {
        if (registryURLs != null && registryURLs.size() > 0) {
          for (          URL registryURL : registryURLs) {
            try {
              Socket socket=new Socket(registryURL.getHost(),registryURL.getPort());
              try {
                host=socket.getLocalAddress().getHostAddress();
                break;
              }
  finally {
                socket.close();
              }
            }
 catch (            Exception e) {
              logger.warn(e.getMessage(),e);
            }
          }
        }
        if (NetUtils.isInvalidLocalHost(host)) {
          host=NetUtils.getLocalHost();
        }
      }
    }
    Integer port=protocolConfig.getPort();
    if (provider != null && (port == null || port == 0)) {
      port=provider.getPort();
    }
    if (port == null || port == 0) {
      port=ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(name).getDefaultPort();
    }
    if (port == null || port <= 0) {
      port=NetUtils.getAvailablePort();
      logger.warn(""String_Node_Str"" + port + ""String_Node_Str""+ name);
    }
    Map<String,String> map=new HashMap<String,String>();
    if (anyhost) {
      map.put(Constants.ANYHOST_KEY,""String_Node_Str"");
    }
    map.put(""String_Node_Str"",Version.getVersion());
    appendParameters(map,application);
    appendParameters(map,provider);
    appendParameters(map,protocolConfig);
    appendParameters(map,this);
    map.put(""String_Node_Str"",""String_Node_Str"");
    if (methods != null && methods.size() > 0) {
      for (      MethodConfig method : methods) {
        appendParameters(map,method,method.getName());
        List<ArgumentConfig> arguments=method.getArguments();
        if (arguments != null && arguments.size() > 0) {
          for (          ArgumentConfig argument : arguments) {
            if (argument.getType() != null && argument.getType().length() > 0) {
              Method[] methods=interfaceClass.getMethods();
              if (methods != null && methods.length > 0) {
                for (int i=0; i < methods.length; i++) {
                  String methodName=methods[i].getName();
                  if (methodName.equals(method.getName())) {
                    Class<?>[] argtypes=methods[i].getParameterTypes();
                    if (argument.getIndex() != -1) {
                      if (argtypes[argument.getIndex()].getName().equals(argument.getType())) {
                        appendParameters(map,argument,method.getName() + ""String_Node_Str"" + argument.getIndex());
                      }
 else {
                        throw new IllegalArgumentException(""String_Node_Str"" + argument.getIndex() + ""String_Node_Str""+ argument.getType());
                      }
                    }
 else {
                      for (int j=0; j < argtypes.length; j++) {
                        Class<?> argclazz=argtypes[j];
                        if (argclazz.getName().equals(argument.getType())) {
                          appendParameters(map,argument,method.getName() + ""String_Node_Str"" + j);
                          if (argument.getIndex() != -1 && argument.getIndex() != j) {
                            throw new IllegalArgumentException(""String_Node_Str"" + argument.getIndex() + ""String_Node_Str""+ argument.getType());
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
 else             if (argument.getIndex() != -1) {
              appendParameters(map,argument,method.getName() + ""String_Node_Str"" + argument.getIndex());
            }
 else {
              throw new IllegalArgumentException(""String_Node_Str"");
            }
          }
        }
      }
    }
    if (generic) {
      map.put(""String_Node_Str"",String.valueOf(true));
      map.put(""String_Node_Str"",Constants.ANY_VALUE);
    }
 else {
      map.put(""String_Node_Str"",Version.getVersion(interfaceClass,version));
      map.put(""String_Node_Str"",StringUtils.join(new HashSet<String>(Arrays.asList(Wrapper.getWrapper(interfaceClass).getDeclaredMethodNames())),""String_Node_Str""));
    }
    if (!ConfigUtils.isEmpty(token)) {
      if (ConfigUtils.isDefault(token)) {
        map.put(""String_Node_Str"",UUID.randomUUID().toString());
      }
 else {
        map.put(""String_Node_Str"",token);
      }
    }
    if (""String_Node_Str"".equals(protocolConfig.getName())) {
      protocolConfig.setPort(0);
      protocolConfig.setRegister(false);
      map.put(""String_Node_Str"",""String_Node_Str"");
    }
    String contextPath=protocolConfig.getContextpath();
    if ((contextPath == null || contextPath.length() == 0) && provider != null) {
      contextPath=provider.getContextpath();
    }
    URL url=new URL(name,host,port,(contextPath == null || contextPath.length() == 0 ? ""String_Node_Str"" : contextPath + ""String_Node_Str"") + path,map);
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"" + interfaceClass.getName() + ""String_Node_Str""+ url);
    }
    if (registryURLs != null && registryURLs.size() > 0 && url.getParameter(""String_Node_Str"",true)) {
      for (      URL registryURL : registryURLs) {
        URL monitorUrl=loadMonitor(registryURL);
        if (monitorUrl != null) {
          url=url.addParameterAndEncoded(Constants.MONITOR_KEY,monitorUrl.toFullString());
        }
        String providerURL=url.toFullString();
        if (logger.isInfoEnabled()) {
          logger.info(""String_Node_Str"" + interfaceClass.getName() + ""String_Node_Str""+ providerURL+ ""String_Node_Str""+ registryURL);
        }
        Invoker<?> invoker=proxyFactory.getInvoker(ref,(Class)interfaceClass,registryURL.addParameterAndEncoded(RpcConstants.EXPORT_KEY,providerURL));
        Exporter<?> exporter=protocol.export(invoker);
        exporters.add(exporter);
      }
    }
 else {
      Invoker<?> invoker=proxyFactory.getInvoker(ref,(Class)interfaceClass,url);
      Exporter<?> exporter=protocol.export(invoker);
      exporters.add(exporter);
    }
    this.urls.add(url);
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void doExportUrls(){
  List<URL> registryURLs=loadRegistries();
  for (  ProtocolConfig protocolConfig : protocols) {
    String name=protocolConfig.getName();
    if (name == null || name.length() == 0) {
      name=""String_Node_Str"";
    }
    String host=protocolConfig.getHost();
    if (provider != null && (host == null || host.length() == 0)) {
      host=provider.getHost();
    }
    boolean anyhost=false;
    if (NetUtils.isInvalidLocalHost(host)) {
      anyhost=true;
      try {
        host=InetAddress.getLocalHost().getHostAddress();
      }
 catch (      UnknownHostException e) {
        logger.warn(e.getMessage(),e);
      }
      if (NetUtils.isInvalidLocalHost(host)) {
        if (registryURLs != null && registryURLs.size() > 0) {
          for (          URL registryURL : registryURLs) {
            try {
              Socket socket=new Socket(registryURL.getHost(),registryURL.getPort());
              try {
                host=socket.getLocalAddress().getHostAddress();
                break;
              }
  finally {
                socket.close();
              }
            }
 catch (            Exception e) {
              logger.warn(e.getMessage(),e);
            }
          }
        }
        if (NetUtils.isInvalidLocalHost(host)) {
          host=NetUtils.getLocalHost();
        }
      }
    }
    Integer port=protocolConfig.getPort();
    if (provider != null && (port == null || port == 0)) {
      port=provider.getPort();
    }
    if (port == null || port == 0) {
      port=ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(name).getDefaultPort();
    }
    if (port == null || port <= 0) {
      port=NetUtils.getAvailablePort();
      logger.warn(""String_Node_Str"" + port + ""String_Node_Str""+ name);
    }
    Map<String,String> map=new HashMap<String,String>();
    if (anyhost) {
      map.put(Constants.ANYHOST_KEY,""String_Node_Str"");
    }
    map.put(""String_Node_Str"",Version.getVersion());
    appendParameters(map,application);
    appendParameters(map,provider);
    appendParameters(map,protocolConfig);
    appendParameters(map,this);
    map.put(""String_Node_Str"",""String_Node_Str"");
    if (methods != null && methods.size() > 0) {
      for (      MethodConfig method : methods) {
        appendParameters(map,method,method.getName());
        List<ArgumentConfig> arguments=method.getArguments();
        if (arguments != null && arguments.size() > 0) {
          for (          ArgumentConfig argument : arguments) {
            if (argument.getType() != null && argument.getType().length() > 0) {
              Method[] methods=interfaceClass.getMethods();
              if (methods != null && methods.length > 0) {
                for (int i=0; i < methods.length; i++) {
                  String methodName=methods[i].getName();
                  if (methodName.equals(method.getName())) {
                    Class<?>[] argtypes=methods[i].getParameterTypes();
                    if (argument.getIndex() != -1) {
                      if (argtypes[argument.getIndex()].getName().equals(argument.getType())) {
                        appendParameters(map,argument,method.getName() + ""String_Node_Str"" + argument.getIndex());
                      }
 else {
                        throw new IllegalArgumentException(""String_Node_Str"" + argument.getIndex() + ""String_Node_Str""+ argument.getType());
                      }
                    }
 else {
                      for (int j=0; j < argtypes.length; j++) {
                        Class<?> argclazz=argtypes[j];
                        if (argclazz.getName().equals(argument.getType())) {
                          appendParameters(map,argument,method.getName() + ""String_Node_Str"" + j);
                          if (argument.getIndex() != -1 && argument.getIndex() != j) {
                            throw new IllegalArgumentException(""String_Node_Str"" + argument.getIndex() + ""String_Node_Str""+ argument.getType());
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
 else             if (argument.getIndex() != -1) {
              appendParameters(map,argument,method.getName() + ""String_Node_Str"" + argument.getIndex());
            }
 else {
              throw new IllegalArgumentException(""String_Node_Str"");
            }
          }
        }
      }
    }
    if (generic) {
      map.put(""String_Node_Str"",String.valueOf(true));
      map.put(""String_Node_Str"",Constants.ANY_VALUE);
    }
 else {
      map.put(""String_Node_Str"",Version.getVersion(interfaceClass,version));
      map.put(""String_Node_Str"",StringUtils.join(new HashSet<String>(Arrays.asList(Wrapper.getWrapper(interfaceClass).getDeclaredMethodNames())),""String_Node_Str""));
    }
    if (!ConfigUtils.isEmpty(token)) {
      if (ConfigUtils.isDefault(token)) {
        map.put(""String_Node_Str"",UUID.randomUUID().toString());
      }
 else {
        map.put(""String_Node_Str"",token);
      }
    }
    if (""String_Node_Str"".equals(protocolConfig.getName())) {
      protocolConfig.setRegister(false);
      map.put(""String_Node_Str"",""String_Node_Str"");
    }
    String contextPath=protocolConfig.getContextpath();
    if ((contextPath == null || contextPath.length() == 0) && provider != null) {
      contextPath=provider.getContextpath();
    }
    URL url=new URL(name,host,port,(contextPath == null || contextPath.length() == 0 ? ""String_Node_Str"" : contextPath + ""String_Node_Str"") + path,map);
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"" + interfaceClass.getName() + ""String_Node_Str""+ url);
    }
    if (registryURLs != null && registryURLs.size() > 0 && url.getParameter(""String_Node_Str"",true)) {
      for (      URL registryURL : registryURLs) {
        URL monitorUrl=loadMonitor(registryURL);
        if (monitorUrl != null) {
          url=url.addParameterAndEncoded(Constants.MONITOR_KEY,monitorUrl.toFullString());
        }
        String providerURL=url.toFullString();
        if (logger.isInfoEnabled()) {
          logger.info(""String_Node_Str"" + interfaceClass.getName() + ""String_Node_Str""+ providerURL+ ""String_Node_Str""+ registryURL);
        }
        Invoker<?> invoker=proxyFactory.getInvoker(ref,(Class)interfaceClass,registryURL.addParameterAndEncoded(RpcConstants.EXPORT_KEY,providerURL));
        Exporter<?> exporter=protocol.export(invoker);
        exporters.add(exporter);
      }
    }
 else {
      Invoker<?> invoker=proxyFactory.getInvoker(ref,(Class)interfaceClass,url);
      Exporter<?> exporter=protocol.export(invoker);
      exporters.add(exporter);
    }
    this.urls.add(url);
  }
}"
85161,"public <T>Exporter<T> export(Invoker<T> invoker) throws RpcException {
  return new InjvmExporter<T>(invoker,serviceKey(invoker.getUrl()),exporterMap);
}","public <T>Exporter<T> export(Invoker<T> invoker) throws RpcException {
  return new InjvmExporter<T>(invoker,serviceKey(invoker.getUrl().setPort(DEFAULT_PORT)),exporterMap);
}"
85162,"protected static String convertMonitor(String monitor,URL registry){
  if (monitor == null || monitor.length() == 0) {
    return null;
  }
  if (GROUP_AND_VERION.matcher(monitor).matches()) {
    String group;
    String version;
    int i=monitor.indexOf(':');
    if (i > 0) {
      group=monitor.substring(0,i);
      version=monitor.substring(i + 1);
    }
 else {
      group=monitor;
      version=""String_Node_Str"";
    }
    monitor=registry.setProtocol(""String_Node_Str"").addParameter(Constants.MONITOR_KEY,registry.getProtocol()).addParameterAndEncoded(RpcConstants.REFER_KEY,""String_Node_Str"" + group + ""String_Node_Str""+ version+ ""String_Node_Str""+ MonitorService.class.getName()).toFullString();
  }
  try {
    return URLEncoder.encode(monitor,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
}","protected static String convertMonitor(String monitor,URL registry){
  if (monitor == null || monitor.length() == 0) {
    return null;
  }
  if (GROUP_AND_VERION.matcher(monitor).matches()) {
    String group;
    String version;
    int i=monitor.indexOf(':');
    if (i > 0) {
      group=monitor.substring(0,i);
      version=monitor.substring(i + 1);
    }
 else {
      group=monitor;
      version=null;
    }
    monitor=registry.setProtocol(""String_Node_Str"").addParameter(Constants.MONITOR_KEY,registry.getProtocol()).addParameterAndEncoded(RpcConstants.REFER_KEY,""String_Node_Str"" + group + (version == null || version.length() == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + version)+ ""String_Node_Str""+ MonitorService.class.getName()).toFullString();
  }
  try {
    return URLEncoder.encode(monitor,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
}"
85163,"public static Exporter<RegistryService> export(int port){
  RegistryService registryService=new SimpleRegistryService();
  return protocol.export(proxyFactory.getInvoker(registryService,RegistryService.class,new URL(""String_Node_Str"",NetUtils.getLocalHost(),port,RegistryService.class.getName()).setPath(RegistryService.class.getName()).addParameter(Constants.INTERFACE_KEY,RegistryService.class.getName()).addParameter(Constants.VERSION_KEY,""String_Node_Str"").addParameter(RpcConstants.CLUSTER_STICKY_KEY,""String_Node_Str"").addParameter(RpcConstants.CALLBACK_INSTANCES_LIMIT_KEY,""String_Node_Str"").addParameter(""String_Node_Str"",""String_Node_Str"").addParameter(""String_Node_Str"",""String_Node_Str"").addParameter(""String_Node_Str"",""String_Node_Str"")));
}","public static Exporter<RegistryService> export(int port){
  RegistryService registryService=new SimpleRegistryService();
  return protocol.export(proxyFactory.getInvoker(registryService,RegistryService.class,new URL(""String_Node_Str"",NetUtils.getLocalHost(),port,RegistryService.class.getName()).setPath(RegistryService.class.getName()).addParameter(Constants.INTERFACE_KEY,RegistryService.class.getName()).addParameter(RpcConstants.CLUSTER_STICKY_KEY,""String_Node_Str"").addParameter(RpcConstants.CALLBACK_INSTANCES_LIMIT_KEY,""String_Node_Str"").addParameter(""String_Node_Str"",""String_Node_Str"").addParameter(""String_Node_Str"",""String_Node_Str"").addParameter(""String_Node_Str"",""String_Node_Str"")));
}"
85164,"public void send(){
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + getUrl());
  }
  for (  Map.Entry<Statistics,AtomicReference<long[]>> entry : statisticsMap.entrySet()) {
    Statistics statistics=entry.getKey();
    AtomicReference<long[]> reference=entry.getValue();
    long[] numbers=reference.get();
    long success=numbers[0];
    long failure=numbers[1];
    long input=numbers[2];
    long output=numbers[3];
    long elapsed=numbers[4];
    long concurrent=numbers[5];
    long maxInput=numbers[6];
    long maxOutput=numbers[7];
    long maxElapsed=numbers[8];
    long maxConcurrent=numbers[9];
    URL url=statistics.getUrl();
    url.addParameter(MonitorService.SUCCESS,success);
    url.addParameter(MonitorService.FAILURE,failure);
    url.addParameter(MonitorService.INPUT,input);
    url.addParameter(MonitorService.OUTPUT,output);
    url.addParameter(MonitorService.ELAPSED,elapsed);
    url.addParameter(MonitorService.CONCURRENT,concurrent);
    url.addParameter(MonitorService.MAX_INPUT,maxInput);
    url.addParameter(MonitorService.MAX_OUTPUT,maxOutput);
    url.addParameter(MonitorService.MAX_ELAPSED,maxElapsed);
    url.addParameter(MonitorService.MAX_CONCURRENT,maxConcurrent);
    monitorService.count(url);
    long[] current;
    long[] update=new long[LENGTH];
    do {
      current=reference.get();
      if (current == null) {
        update[0]=0;
        update[1]=0;
        update[2]=0;
        update[3]=0;
        update[4]=0;
        update[5]=0;
      }
 else {
        update[0]=current[0] - success;
        update[1]=current[1] - failure;
        update[2]=current[2] - input;
        update[3]=current[3] - output;
        update[4]=current[4] - output;
        update[5]=current[5] - output;
      }
    }
 while (!reference.compareAndSet(current,update));
  }
}","public void send(){
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + getUrl());
  }
  for (  Map.Entry<Statistics,AtomicReference<long[]>> entry : statisticsMap.entrySet()) {
    Statistics statistics=entry.getKey();
    AtomicReference<long[]> reference=entry.getValue();
    long[] numbers=reference.get();
    long success=numbers[0];
    long failure=numbers[1];
    long input=numbers[2];
    long output=numbers[3];
    long elapsed=numbers[4];
    long concurrent=numbers[5];
    long maxInput=numbers[6];
    long maxOutput=numbers[7];
    long maxElapsed=numbers[8];
    long maxConcurrent=numbers[9];
    URL url=statistics.getUrl().addParameter(MonitorService.SUCCESS,success).addParameter(MonitorService.FAILURE,failure).addParameter(MonitorService.INPUT,input).addParameter(MonitorService.OUTPUT,output).addParameter(MonitorService.ELAPSED,elapsed).addParameter(MonitorService.CONCURRENT,concurrent).addParameter(MonitorService.MAX_INPUT,maxInput).addParameter(MonitorService.MAX_OUTPUT,maxOutput).addParameter(MonitorService.MAX_ELAPSED,maxElapsed).addParameter(MonitorService.MAX_CONCURRENT,maxConcurrent);
    monitorService.count(url);
    long[] current;
    long[] update=new long[LENGTH];
    do {
      current=reference.get();
      if (current == null) {
        update[0]=0;
        update[1]=0;
        update[2]=0;
        update[3]=0;
        update[4]=0;
        update[5]=0;
      }
 else {
        update[0]=current[0] - success;
        update[1]=current[1] - failure;
        update[2]=current[2] - input;
        update[3]=current[3] - output;
        update[4]=current[4] - output;
        update[5]=current[5] - output;
      }
    }
 while (!reference.compareAndSet(current,update));
  }
}"
85165,"private void collect(Invoker<?> invoker,Invocation invocation,RpcContext context,long start,boolean error){
  long elapsed=System.currentTimeMillis() - start;
  int concurrent=getConcurrent(invoker,invocation).get();
  String application=invoker.getUrl().getParameter(Constants.APPLICATION_KEY);
  String service=invoker.getInterface().getName();
  String method=invocation.getMethodName();
  URL url=URL.valueOf(invoker.getUrl().getParameterAndDecoded(Constants.MONITOR_KEY));
  Monitor monitor=monitorFactory.getMonitor(url);
  String server=context.getLocalAddressString();
  if (invoker.getUrl().getAddress().equals(server)) {
    monitor.count(new URL(invoker.getUrl().getProtocol(),NetUtils.getLocalHost(),context.getLocalPort()).addParameters(MonitorService.APPLICATION,application,MonitorService.INTERFACE,service,MonitorService.METHOD,method,MonitorService.CLIENT,context.getRemoteHost(),error ? MonitorService.FAILURE : MonitorService.SUCCESS,String.valueOf(1),MonitorService.ELAPSED,String.valueOf(elapsed),MonitorService.CONCURRENT,String.valueOf(concurrent)));
  }
  context=RpcContext.getContext();
  server=context.getRemoteAddressString();
  if (invoker.getUrl().getAddress().equals(server)) {
    monitor.count(new URL(invoker.getUrl().getProtocol(),NetUtils.getLocalHost(),0).addParameters(MonitorService.APPLICATION,application,MonitorService.INTERFACE,service,MonitorService.METHOD,method,MonitorService.SERVER,server,error ? MonitorService.FAILURE : MonitorService.SUCCESS,String.valueOf(1),MonitorService.ELAPSED,String.valueOf(elapsed),MonitorService.CONCURRENT,String.valueOf(concurrent)));
  }
}","private void collect(Invoker<?> invoker,Invocation invocation,RpcContext context,long start,boolean error){
  try {
    long elapsed=System.currentTimeMillis() - start;
    int concurrent=getConcurrent(invoker,invocation).get();
    String application=invoker.getUrl().getParameter(Constants.APPLICATION_KEY);
    String service=invoker.getInterface().getName();
    String method=invocation.getMethodName();
    URL url=URL.valueOf(invoker.getUrl().getParameterAndDecoded(Constants.MONITOR_KEY));
    Monitor monitor=monitorFactory.getMonitor(url);
    String server=context.getLocalAddressString();
    if (invoker.getUrl().getAddress().equals(server)) {
      monitor.count(new URL(invoker.getUrl().getProtocol(),NetUtils.getLocalHost(),context.getLocalPort()).addParameters(MonitorService.APPLICATION,application,MonitorService.INTERFACE,service,MonitorService.METHOD,method,MonitorService.CLIENT,context.getRemoteHost(),error ? MonitorService.FAILURE : MonitorService.SUCCESS,String.valueOf(1),MonitorService.ELAPSED,String.valueOf(elapsed),MonitorService.CONCURRENT,String.valueOf(concurrent)));
    }
    context=RpcContext.getContext();
    server=context.getRemoteAddressString();
    if (invoker.getUrl().getAddress().equals(server)) {
      monitor.count(new URL(invoker.getUrl().getProtocol(),NetUtils.getLocalHost(),0).addParameters(MonitorService.APPLICATION,application,MonitorService.INTERFACE,service,MonitorService.METHOD,method,MonitorService.SERVER,server,error ? MonitorService.FAILURE : MonitorService.SUCCESS,String.valueOf(1),MonitorService.ELAPSED,String.valueOf(elapsed),MonitorService.CONCURRENT,String.valueOf(concurrent)));
    }
  }
 catch (  Throwable t) {
    logger.error(""String_Node_Str"" + invoker.getUrl() + ""String_Node_Str""+ t.getMessage(),t);
  }
}"
85166,"/** 
 * get image file path
 * @param imageUrl
 * @return
 */
public String getImagePath(String imageUrl){
  return secondaryCache.getImagePath(imageUrl);
}","/** 
 * get image file path
 * @param imageUrl
 * @return if not in cache return null, else return full path.
 */
public String getImagePath(String imageUrl){
  return secondaryCache.getImagePath(imageUrl);
}"
85167,"/** 
 * get image file path
 * @param imageUrl
 * @return
 */
public String getImagePath(String imageUrl){
  return new StringBuilder(cacheFolder).append(File.separator).append(fileNameRule.getFileName(imageUrl)).toString();
}","/** 
 * get image file path
 * @param imageUrl
 * @return if not in cache return null, else return full path.
 */
public String getImagePath(String imageUrl){
  return (this.containsKey(imageUrl)) ? new StringBuilder(cacheFolder).append(File.separator).append(fileNameRule.getFileName(imageUrl)).toString() : null;
}"
85168,"/** 
 * start thread to wait for image get
 * @param imageUrl
 * @param urlList url list, if is null, not preload, else preload forward by{@link PreloadDataCache#preloadDataForward(Object,List,int)}, preload backward by  {@link PreloadDataCache#preloadDataBackward(Object,List,int)}
 */
private void startGetImageThread(final String imageUrl,final List<String> urlList){
  threadPool.execute(new Runnable(){
    @Override public void run(){
      CacheObject<Bitmap> object=get(imageUrl,urlList);
      Bitmap bitmap=(object == null ? null : object.getData());
      if (bitmap == null) {
        remove(imageUrl);
        String failedException=""String_Node_Str"";
        FailedReason failedReason=new FailedReason(FailedType.ERROR_IO,failedException);
        handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_FAILED,new MessageObject(imageUrl,bitmap,failedReason)));
      }
 else {
        handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_SUCCESS,new MessageObject(imageUrl,bitmap)));
      }
    }
  }
);
}","/** 
 * start thread to wait for image get
 * @param imageUrl
 * @param urlList url list, if is null, not preload, else preload forward by{@link PreloadDataCache#preloadDataForward(Object,List,int)}, preload backward by  {@link PreloadDataCache#preloadDataBackward(Object,List,int)}
 */
private void startGetImageThread(final String imageUrl,final List<String> urlList){
  threadPool.execute(new Runnable(){
    @Override public void run(){
      try {
        CacheObject<Bitmap> object=get(imageUrl,urlList);
        Bitmap bitmap=(object == null ? null : object.getData());
        if (bitmap == null) {
          remove(imageUrl);
          String failedException=""String_Node_Str"";
          FailedReason failedReason=new FailedReason(FailedType.ERROR_IO,failedException);
          handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_FAILED,new MessageObject(imageUrl,bitmap,failedReason)));
        }
 else {
          handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_SUCCESS,new MessageObject(imageUrl,bitmap)));
        }
      }
 catch (      OutOfMemoryError e) {
        MessageObject msg=new MessageObject(imageUrl,null,new FailedReason(FailedType.ERROR_OUT_OF_MEMORY,e));
        handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_FAILED,msg));
      }
    }
  }
);
}"
85169,"@Override public void run(){
  CacheObject<Bitmap> object=get(imageUrl,urlList);
  Bitmap bitmap=(object == null ? null : object.getData());
  if (bitmap == null) {
    remove(imageUrl);
    String failedException=""String_Node_Str"";
    FailedReason failedReason=new FailedReason(FailedType.ERROR_IO,failedException);
    handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_FAILED,new MessageObject(imageUrl,bitmap,failedReason)));
  }
 else {
    handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_SUCCESS,new MessageObject(imageUrl,bitmap)));
  }
}","@Override public void run(){
  try {
    CacheObject<Bitmap> object=get(imageUrl,urlList);
    Bitmap bitmap=(object == null ? null : object.getData());
    if (bitmap == null) {
      remove(imageUrl);
      String failedException=""String_Node_Str"";
      FailedReason failedReason=new FailedReason(FailedType.ERROR_IO,failedException);
      handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_FAILED,new MessageObject(imageUrl,bitmap,failedReason)));
    }
 else {
      handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_SUCCESS,new MessageObject(imageUrl,bitmap)));
    }
  }
 catch (  OutOfMemoryError e) {
    MessageObject msg=new MessageObject(imageUrl,null,new FailedReason(FailedType.ERROR_OUT_OF_MEMORY,e));
    handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_FAILED,msg));
  }
}"
85170,"/** 
 * start thread to wait for image get
 * @param imageUrl
 * @param urlList url list, if is null, not preload, else preload forward by{@link PreloadDataCache#preloadDataForward(Object,List,int)}, preload backward by  {@link PreloadDataCache#preloadDataBackward(Object,List,int)}
 */
private void startGetImageThread(final String imageUrl,final List<String> urlList){
  threadPool.execute(new Runnable(){
    @Override public void run(){
      CacheObject<String> object=get(imageUrl,urlList);
      String imagePath=(object == null ? null : object.getData());
      if (StringUtils.isEmpty(imagePath) || !FileUtils.isFileExist(imagePath)) {
        remove(imageUrl);
        String failedException=""String_Node_Str"";
        FailedReason failedReason=new FailedReason(FailedType.ERROR_IO,failedException);
        handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_FAILED,new MessageObject(imageUrl,imagePath,failedReason)));
      }
 else {
        handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_SUCCESS,new MessageObject(imageUrl,imagePath)));
      }
    }
  }
);
}","/** 
 * start thread to wait for image get
 * @param imageUrl
 * @param urlList url list, if is null, not preload, else preload forward by{@link PreloadDataCache#preloadDataForward(Object,List,int)}, preload backward by  {@link PreloadDataCache#preloadDataBackward(Object,List,int)}
 */
private void startGetImageThread(final String imageUrl,final List<String> urlList){
  threadPool.execute(new Runnable(){
    @Override public void run(){
      try {
        CacheObject<String> object=get(imageUrl,urlList);
        String imagePath=(object == null ? null : object.getData());
        if (StringUtils.isEmpty(imagePath) || !FileUtils.isFileExist(imagePath)) {
          remove(imageUrl);
          String failedException=""String_Node_Str"";
          FailedReason failedReason=new FailedReason(FailedType.ERROR_IO,failedException);
          handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_FAILED,new MessageObject(imageUrl,imagePath,failedReason)));
        }
 else {
          handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_SUCCESS,new MessageObject(imageUrl,imagePath)));
        }
      }
 catch (      OutOfMemoryError e) {
        MessageObject msg=new MessageObject(imageUrl,null,new FailedReason(FailedType.ERROR_OUT_OF_MEMORY,e));
        handler.sendMessage(handler.obtainMessage(WHAT_GET_IMAGE_FAILED,msg));
      }
    }
  }
);
}"
85171,"public void handleMessage(Message message){
switch (message.what) {
case WHAT_GET_IMAGE_SUCCESS:
case WHAT_GET_IMAGE_FAILED:
    MessageObject object=(MessageObject)message.obj;
  if (object == null) {
    break;
  }
String imageUrl=object.imageUrl;
Drawable drawable=object.drawable;
if (onImageCallbackListener != null) {
if (isOpenWaitingQueue) {
synchronized (viewSetMap) {
  HashSet<View> viewSet=viewSetMap.get(imageUrl);
  if (viewSet != null) {
    for (    View view : viewSet) {
      if (view != null) {
        onImageCallbackListener.onGetSuccess(imageUrl,drawable,view,false);
      }
      if (WHAT_GET_IMAGE_SUCCESS == message.what) {
        onImageCallbackListener.onGetSuccess(imageUrl,drawable,view,false);
      }
 else {
        onImageCallbackListener.onGetFailed(imageUrl,drawable,view,object.failedReason);
      }
    }
  }
}
}
 else {
View view=viewMap.get(imageUrl);
if (view != null) {
  if (WHAT_GET_IMAGE_SUCCESS == message.what) {
    onImageCallbackListener.onGetSuccess(imageUrl,drawable,view,false);
  }
 else {
    onImageCallbackListener.onGetFailed(imageUrl,drawable,view,object.failedReason);
  }
}
}
}
if (isOpenWaitingQueue) {
synchronized (viewSetMap) {
viewSetMap.remove(imageUrl);
}
}
 else {
viewMap.remove(imageUrl);
}
break;
}
}","public void handleMessage(Message message){
switch (message.what) {
case WHAT_GET_IMAGE_SUCCESS:
case WHAT_GET_IMAGE_FAILED:
    MessageObject object=(MessageObject)message.obj;
  if (object == null) {
    break;
  }
String imageUrl=object.imageUrl;
Drawable drawable=object.drawable;
if (drawable != null) {
drawable=drawable.getConstantState().newDrawable();
}
if (onImageCallbackListener != null) {
if (isOpenWaitingQueue) {
synchronized (viewSetMap) {
HashSet<View> viewSet=viewSetMap.get(imageUrl);
if (viewSet != null) {
  for (  View view : viewSet) {
    if (view != null) {
      onImageCallbackListener.onGetSuccess(imageUrl,drawable,view,false);
    }
    if (WHAT_GET_IMAGE_SUCCESS == message.what) {
      onImageCallbackListener.onGetSuccess(imageUrl,drawable,view,false);
    }
 else {
      onImageCallbackListener.onGetFailed(imageUrl,drawable,view,object.failedReason);
    }
  }
}
}
}
 else {
View view=viewMap.get(imageUrl);
if (view != null) {
if (WHAT_GET_IMAGE_SUCCESS == message.what) {
  onImageCallbackListener.onGetSuccess(imageUrl,drawable,view,false);
}
 else {
  onImageCallbackListener.onGetFailed(imageUrl,drawable,view,object.failedReason);
}
}
}
}
if (isOpenWaitingQueue) {
synchronized (viewSetMap) {
viewSetMap.remove(imageUrl);
}
}
 else {
viewMap.remove(imageUrl);
}
break;
}
}"
85172,"/** 
 * get image asynchronous and preload other images asynchronous according to urlList
 * @param imageUrl
 * @param urlList url list, if is null, not preload, else preload forward by{@link PreloadDataCache#preloadDataForward(Object,List,int)}, preload backward by  {@link PreloadDataCache#preloadDataBackward(Object,List,int)}
 * @param view
 * @return whether image already in cache or not
 */
public boolean get(final String imageUrl,final List<String> urlList,final View view){
  if (onImageCallbackListener != null) {
    onImageCallbackListener.onPreGet(imageUrl,view);
  }
  if (StringUtils.isEmpty(imageUrl)) {
    if (onImageCallbackListener != null) {
      onImageCallbackListener.onGetNotInCache(imageUrl,view);
    }
    return false;
  }
  CacheObject<Drawable> object=getFromCache(imageUrl,urlList);
  if (object != null) {
    Drawable drawable=object.getData();
    if (drawable != null) {
      if (onImageCallbackListener != null) {
        onImageCallbackListener.onGetSuccess(imageUrl,drawable,view,true);
      }
      return true;
    }
 else {
      remove(imageUrl);
    }
  }
  if (isOpenWaitingQueue) {
synchronized (viewSetMap) {
      HashSet<View> viewSet=viewSetMap.get(imageUrl);
      if (viewSet == null) {
        viewSet=new HashSet<View>();
        viewSetMap.put(imageUrl,viewSet);
      }
      viewSet.add(view);
    }
  }
 else {
    viewMap.put(imageUrl,view);
  }
  if (onImageCallbackListener != null) {
    onImageCallbackListener.onGetNotInCache(imageUrl,view);
  }
  if (isExistGettingDataThread(imageUrl)) {
    return false;
  }
  startGetImageThread(imageUrl,urlList);
  return false;
}","/** 
 * get image asynchronous and preload other images asynchronous according to urlList
 * @param imageUrl
 * @param urlList url list, if is null, not preload, else preload forward by{@link PreloadDataCache#preloadDataForward(Object,List,int)}, preload backward by  {@link PreloadDataCache#preloadDataBackward(Object,List,int)}
 * @param view
 * @return whether image already in cache or not
 */
public boolean get(final String imageUrl,final List<String> urlList,final View view){
  if (onImageCallbackListener != null) {
    onImageCallbackListener.onPreGet(imageUrl,view);
  }
  if (StringUtils.isEmpty(imageUrl)) {
    if (onImageCallbackListener != null) {
      onImageCallbackListener.onGetNotInCache(imageUrl,view);
    }
    return false;
  }
  CacheObject<Drawable> object=getFromCache(imageUrl,urlList);
  if (object != null) {
    Drawable drawable=object.getData();
    if (drawable != null) {
      if (onImageCallbackListener != null) {
        onImageCallbackListener.onGetSuccess(imageUrl,drawable.getConstantState().newDrawable(),view,true);
      }
      return true;
    }
 else {
      remove(imageUrl);
    }
  }
  if (isOpenWaitingQueue) {
synchronized (viewSetMap) {
      HashSet<View> viewSet=viewSetMap.get(imageUrl);
      if (viewSet == null) {
        viewSet=new HashSet<View>();
        viewSetMap.put(imageUrl,viewSet);
      }
      viewSet.add(view);
    }
  }
 else {
    viewMap.put(imageUrl,view);
  }
  if (onImageCallbackListener != null) {
    onImageCallbackListener.onGetNotInCache(imageUrl,view);
  }
  if (isExistGettingDataThread(imageUrl)) {
    return false;
  }
  startGetImageThread(imageUrl,urlList);
  return false;
}"
85173,"/** 
 * get download file name
 * @param downloadId
 * @return
 */
public String getFileName(long downloadId){
  return getString(downloadId,COLUMN_LOCAL_FILENAME);
}","/** 
 * get download file name
 * @param downloadId
 * @return
 */
public String getFileName(long downloadId){
  return getString(downloadId,(Build.VERSION.SDK_INT < 11 ? COLUMN_LOCAL_URI : COLUMN_LOCAL_FILENAME));
}"
85174,"/** 
 * join map
 * @param map
 * @return
 */
public static String toJson(Map<String,String> map){
  if (map == null || map.size() == 0) {
    return null;
  }
  StringBuilder paras=new StringBuilder();
  paras.append(""String_Node_Str"");
  Iterator<Map.Entry<String,String>> ite=map.entrySet().iterator();
  while (ite.hasNext()) {
    Map.Entry<String,String> entry=(Map.Entry<String,String>)ite.next();
    paras.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue());
    if (ite.hasNext()) {
      paras.append(""String_Node_Str"");
    }
  }
  paras.append(""String_Node_Str"");
  return paras.toString();
}","/** 
 * join map
 * @param map
 * @return
 */
public static String toJson(Map<String,String> map){
  if (map == null || map.size() == 0) {
    return null;
  }
  StringBuilder paras=new StringBuilder();
  paras.append(""String_Node_Str"");
  Iterator<Map.Entry<String,String>> ite=map.entrySet().iterator();
  while (ite.hasNext()) {
    Map.Entry<String,String> entry=(Map.Entry<String,String>)ite.next();
    paras.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
    if (ite.hasNext()) {
      paras.append(""String_Node_Str"");
    }
  }
  paras.append(""String_Node_Str"");
  return paras.toString();
}"
85175,"@Override public String getFileName(String imageUrl){
  if (StringUtils.isEmpty(imageUrl)) {
    return DEFAULT_FILE_NAME;
  }
  String ext=(fileExtension == null ? FileUtils.getFileExtension(imageUrl) : fileExtension);
  String fileName=(imageUrl.length() >= MAX_FILE_NAME_LENGTH ? imageUrl.substring(imageUrl.length() - MAX_FILE_NAME_LENGTH,imageUrl.length()) : imageUrl).replaceAll(""String_Node_Str"",""String_Node_Str"");
  return StringUtils.isEmpty(ext) ? fileName : (new StringBuilder().append(fileName).append(""String_Node_Str"").append(ext).toString());
}","@Override public String getFileName(String imageUrl){
  if (StringUtils.isEmpty(imageUrl)) {
    return DEFAULT_FILE_NAME;
  }
  String ext=(fileExtension == null ? FileUtils.getFileExtension(imageUrl) : fileExtension);
  String fileName=(imageUrl.length() > MAX_FILE_NAME_LENGTH ? imageUrl.substring(imageUrl.length() - MAX_FILE_NAME_LENGTH,imageUrl.length()) : imageUrl).replaceAll(""String_Node_Str"",""String_Node_Str"");
  return StringUtils.isEmpty(ext) ? fileName : (new StringBuilder().append(fileName).append(""String_Node_Str"").append(ext.replaceAll(""String_Node_Str"",""String_Node_Str"")).toString());
}"
85176,"public static <V>int getSize(List<V> sourceList){
  return ListUtils.isEmpty(sourceList) ? 0 : sourceList.size();
}","public static <V>int getSize(List<V> sourceList){
  return sourceList == null ? 0 : sourceList.size();
}"
85177,"/** 
 * read file to string list, a element of list is a line
 * @param filePath
 * @return if file not exist, return null, else return content of file
 * @throws IOException if an error occurs while operator BufferedReader
 */
public static List<String> readFileToList(String filePath){
  File file=new File(filePath);
  List<String> fileContent=new ArrayList<String>();
  if (file == null || !file.isFile()) {
    return null;
  }
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(file));
    String line=null;
    while ((line=reader.readLine()) != null) {
      fileContent.add(line);
    }
    reader.close();
    return fileContent;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
        throw new RuntimeException(""String_Node_Str"",e);
      }
    }
  }
}","/** 
 * read file to string list, a element of list is a line
 * @param filePath
 * @param charsetName The name of a supported {@link java.nio.charset.Charset </code>charset<code>}
 * @return if file not exist, return null, else return content of file
 * @throws IOException if an error occurs while operator BufferedReader
 */
public static List<String> readFileToList(String filePath,String charsetName){
  File file=new File(filePath);
  List<String> fileContent=new ArrayList<String>();
  if (file == null || !file.isFile()) {
    return null;
  }
  BufferedReader reader=null;
  try {
    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);
    reader=new BufferedReader(is);
    String line=null;
    while ((line=reader.readLine()) != null) {
      fileContent.add(line);
    }
    reader.close();
    return fileContent;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
        throw new RuntimeException(""String_Node_Str"",e);
      }
    }
  }
}"
85178,"/** 
 * read file
 * @param filePath
 * @return if file not exist, return null, else return content of file
 * @throws IOException if an error occurs while operator BufferedReader
 */
public static StringBuilder readFile(String filePath){
  File file=new File(filePath);
  StringBuilder fileContent=new StringBuilder(""String_Node_Str"");
  if (file == null || !file.isFile()) {
    return null;
  }
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(file));
    String line=null;
    while ((line=reader.readLine()) != null) {
      if (!fileContent.toString().equals(""String_Node_Str"")) {
        fileContent.append(""String_Node_Str"");
      }
      fileContent.append(line);
    }
    reader.close();
    return fileContent;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
        throw new RuntimeException(""String_Node_Str"",e);
      }
    }
  }
}","/** 
 * read file
 * @param filePath
 * @param charsetName The name of a supported {@link java.nio.charset.Charset </code>charset<code>}
 * @return if file not exist, return null, else return content of file
 * @throws IOException if an error occurs while operator BufferedReader
 */
public static StringBuilder readFile(String filePath,String charsetName){
  File file=new File(filePath);
  StringBuilder fileContent=new StringBuilder(""String_Node_Str"");
  if (file == null || !file.isFile()) {
    return null;
  }
  BufferedReader reader=null;
  try {
    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);
    reader=new BufferedReader(is);
    String line=null;
    while ((line=reader.readLine()) != null) {
      if (!fileContent.toString().equals(""String_Node_Str"")) {
        fileContent.append(""String_Node_Str"");
      }
      fileContent.append(line);
    }
    reader.close();
    return fileContent;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
        throw new RuntimeException(""String_Node_Str"",e);
      }
    }
  }
}"
85179,"/** 
 * get expires
 * @return <ul><li>if max-age in cache-control is exists, return current time plus it</li> <li>else return expires</li> <li>if something error, return -1</li> </ul>
 */
public long getExpiresInMillis(){
  int maxAge=getCacheControlMaxAge();
  if (maxAge != -1) {
    return System.currentTimeMillis() + maxAge;
  }
 else {
    String expire=getExpiresHeader();
    if (!StringUtils.isEmpty(expire)) {
      return HttpUtils.parseGmtTime(getExpiresHeader());
    }
  }
  return -1;
}","/** 
 * get expires
 * @return <ul><li>if max-age in cache-control is exists, return current time plus it</li> <li>else return expires</li> <li>if something error, return -1</li> </ul>
 */
public long getExpiresInMillis(){
  int maxAge=getCacheControlMaxAge();
  if (maxAge != -1) {
    return System.currentTimeMillis() + maxAge * 1000;
  }
 else {
    String expire=getExpiresHeader();
    if (!StringUtils.isEmpty(expire)) {
      return HttpUtils.parseGmtTime(getExpiresHeader());
    }
  }
  return -1;
}"
85180,"/** 
 * http cache-control in reponse header
 * @return -1 represents http error or no cache-control in response headers
 */
public int getCacheControlMaxAge(){
  try {
    String cacheControl=(String)responseHeaders.get(HttpConstants.CACHE_CONTROL);
    if (!StringUtils.isEmpty(cacheControl)) {
      int start=cacheControl.indexOf(""String_Node_Str"");
      if (start != -1) {
        int end=cacheControl.indexOf(""String_Node_Str"",start);
        String maxAge;
        if (end != -1) {
          maxAge=cacheControl.substring(start + ""String_Node_Str"".length(),end);
        }
 else {
          maxAge=cacheControl.substring(start + ""String_Node_Str"".length());
        }
        return Integer.parseInt(maxAge);
      }
    }
    return -1;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return -1;
  }
}","/** 
 * http cache-control in reponse header
 * @return -1 represents http error or no cache-control in response headers, or max-age in seconds
 */
public int getCacheControlMaxAge(){
  try {
    String cacheControl=(String)responseHeaders.get(HttpConstants.CACHE_CONTROL);
    if (!StringUtils.isEmpty(cacheControl)) {
      int start=cacheControl.indexOf(""String_Node_Str"");
      if (start != -1) {
        int end=cacheControl.indexOf(""String_Node_Str"",start);
        String maxAge;
        if (end != -1) {
          maxAge=cacheControl.substring(start + ""String_Node_Str"".length(),end);
        }
 else {
          maxAge=cacheControl.substring(start + ""String_Node_Str"".length());
        }
        return Integer.parseInt(maxAge);
      }
    }
    return -1;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return -1;
  }
}"
85181,"/** 
 * parse gmt time to long
 * @param gmtTime likes Thu, 11 Apr 2013 10:20:30 GMT
 * @return -1 represents exception
 */
public static long parseGmtTime(String gmtTime){
  try {
    return GMT_FORMAT.parse(gmtTime).getTime();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return -1;
}","/** 
 * parse gmt time to long
 * @param gmtTime likes Thu, 11 Apr 2013 10:20:30 GMT
 * @return -1 represents exception otherwise time in  milliseconds
 */
public static long parseGmtTime(String gmtTime){
  try {
    return GMT_FORMAT.parse(gmtTime).getTime();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return -1;
}"
85182,"protected float computeMinZoom(){
  final Drawable drawable=getDrawable();
  if (drawable == null) {
    return 1F;
  }
  float scale=getScale(mBaseMatrix);
  if (LOG_ENABLED) {
    Log.d(LOG_TAG,""String_Node_Str"" + scale + ""String_Node_Str""+ (1f / scale));
  }
  scale=Math.min(1f,1f / scale);
  if (LOG_ENABLED) {
    Log.i(LOG_TAG,""String_Node_Str"" + scale);
  }
  return scale;
}","protected float computeMinZoom(){
  final Drawable drawable=getDrawable();
  if (drawable == null) {
    return 1F;
  }
  float scale=getScale(mBaseMatrix);
  scale=Math.min(1f,1f / scale);
  if (LOG_ENABLED) {
    Log.i(LOG_TAG,""String_Node_Str"" + scale);
  }
  return scale;
}"
85183,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  if (LOG_ENABLED) {
    Log.i(LOG_TAG,""String_Node_Str"" + changed + ""String_Node_Str""+ mBitmapChanged+ ""String_Node_Str""+ mScaleTypeChanged);
  }
  super.onLayout(changed,left,top,right,bottom);
  int deltaX=0;
  int deltaY=0;
  if (changed) {
    int oldw=mThisWidth;
    int oldh=mThisHeight;
    mThisWidth=right - left;
    mThisHeight=bottom - top;
    deltaX=mThisWidth - oldw;
    deltaY=mThisHeight - oldh;
    mCenter.x=mThisWidth / 2f;
    mCenter.y=mThisHeight / 2f;
  }
  Runnable r=mLayoutRunnable;
  if (r != null) {
    mLayoutRunnable=null;
    r.run();
  }
  final Drawable drawable=getDrawable();
  if (drawable != null) {
    if (changed || mScaleTypeChanged || mBitmapChanged) {
      float scale=1;
      getProperBaseMatrix(drawable,mBaseMatrix);
      if (mBitmapChanged || mScaleTypeChanged) {
        Log.d(LOG_TAG,""String_Node_Str"" + mScaleType);
        if (mNextMatrix != null) {
          mSuppMatrix.set(mNextMatrix);
          mNextMatrix=null;
          scale=getScale();
        }
 else {
          mSuppMatrix.reset();
          if (mScaleType == DisplayType.FIT_TO_SCREEN) {
            scale=1f;
          }
 else {
            scale=Math.min(1f,1f / getScale(mBaseMatrix));
          }
        }
        setImageMatrix(getImageViewMatrix());
        if (scale != getScale()) {
          zoomTo(scale);
        }
      }
 else       if (changed) {
        if (!mMinZoomDefined)         mMinZoom=ZOOM_INVALID;
        if (!mMaxZoomDefined)         mMaxZoom=ZOOM_INVALID;
        setImageMatrix(getImageViewMatrix());
        postTranslate(-deltaX,-deltaY);
        scale=getScale();
      }
      if (LOG_ENABLED) {
        Log.d(LOG_TAG,""String_Node_Str"" + scale);
      }
      if (scale > getMaxScale() || scale < getMinScale()) {
        zoomTo(scale);
      }
      center(true,true);
      if (mBitmapChanged)       onDrawableChanged(drawable);
      if (changed || mBitmapChanged || mScaleTypeChanged)       onLayoutChanged(left,top,right,bottom);
      if (mScaleTypeChanged)       mScaleTypeChanged=false;
      if (mBitmapChanged)       mBitmapChanged=false;
    }
  }
 else {
    if (mBitmapChanged)     onDrawableChanged(drawable);
    if (changed || mBitmapChanged || mScaleTypeChanged)     onLayoutChanged(left,top,right,bottom);
    if (mBitmapChanged)     mBitmapChanged=false;
    if (mScaleTypeChanged)     mScaleTypeChanged=false;
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  if (LOG_ENABLED) {
    Log.e(LOG_TAG,""String_Node_Str"" + changed + ""String_Node_Str""+ mBitmapChanged+ ""String_Node_Str""+ mScaleTypeChanged);
  }
  super.onLayout(changed,left,top,right,bottom);
  int deltaX=0;
  int deltaY=0;
  if (changed) {
    int oldw=mThisWidth;
    int oldh=mThisHeight;
    mThisWidth=right - left;
    mThisHeight=bottom - top;
    deltaX=mThisWidth - oldw;
    deltaY=mThisHeight - oldh;
    mCenter.x=mThisWidth / 2f;
    mCenter.y=mThisHeight / 2f;
  }
  Runnable r=mLayoutRunnable;
  if (r != null) {
    mLayoutRunnable=null;
    r.run();
  }
  final Drawable drawable=getDrawable();
  if (drawable != null) {
    if (changed || mScaleTypeChanged || mBitmapChanged) {
      float scale=1;
      float old_default_scale=getDefaultScale(mScaleType);
      getProperBaseMatrix(drawable,mBaseMatrix);
      if (mBitmapChanged || mScaleTypeChanged) {
        if (LOG_ENABLED) {
          Log.d(LOG_TAG,""String_Node_Str"" + mScaleType);
        }
        if (mNextMatrix != null) {
          mSuppMatrix.set(mNextMatrix);
          mNextMatrix=null;
          scale=getScale();
        }
 else {
          mSuppMatrix.reset();
          scale=getDefaultScale(mScaleType);
        }
        setImageMatrix(getImageViewMatrix());
        if (scale != getScale()) {
          zoomTo(scale);
        }
      }
 else       if (changed) {
        if (!mMinZoomDefined)         mMinZoom=ZOOM_INVALID;
        if (!mMaxZoomDefined)         mMaxZoom=ZOOM_INVALID;
        setImageMatrix(getImageViewMatrix());
        postTranslate(-deltaX,-deltaY);
        scale=getScale();
        if (LOG_ENABLED) {
          Log.d(LOG_TAG,""String_Node_Str"" + old_default_scale);
          Log.d(LOG_TAG,""String_Node_Str"" + scale);
        }
        if (Math.abs(scale - old_default_scale) < 0.01) {
          scale=getDefaultScale(mScaleType);
          zoomTo(scale);
        }
      }
      if (scale > getMaxScale() || scale < getMinScale()) {
        zoomTo(scale);
      }
      center(true,true);
      if (mBitmapChanged)       onDrawableChanged(drawable);
      if (changed || mBitmapChanged || mScaleTypeChanged)       onLayoutChanged(left,top,right,bottom);
      if (mScaleTypeChanged)       mScaleTypeChanged=false;
      if (mBitmapChanged)       mBitmapChanged=false;
    }
  }
 else {
    if (mBitmapChanged)     onDrawableChanged(drawable);
    if (changed || mBitmapChanged || mScaleTypeChanged)     onLayoutChanged(left,top,right,bottom);
    if (mBitmapChanged)     mBitmapChanged=false;
    if (mScaleTypeChanged)     mScaleTypeChanged=false;
  }
}"
85184,"private SootField checkStatic(SootField ret){
  if (Options.v().wrong_staticness() == Options.wrong_staticness_fail || Options.v().wrong_staticness() == Options.wrong_staticness_fixstrict) {
    if (ret.isStatic() != isStatic() && !ret.isPhantom()) {
      throw new ResolutionFailedException(""String_Node_Str"" + this + ""String_Node_Str""+ ret+ ""String_Node_Str"");
    }
  }
  return ret;
}","private SootField checkStatic(SootField ret){
  if ((Options.v().wrong_staticness() == Options.wrong_staticness_fail || Options.v().wrong_staticness() == Options.wrong_staticness_fixstrict) && ret.isStatic() != isStatic() && !ret.isPhantom()) {
    throw new ResolutionFailedException(""String_Node_Str"" + this + ""String_Node_Str""+ ret+ ""String_Node_Str"");
  }
  return ret;
}"
85185,"private SootMethod checkStatic(SootMethod ret){
  if (ret.isStatic() != isStatic()) {
    if (Options.v().wrong_staticness() != Options.wrong_staticness_ignore && Options.v().wrong_staticness() != Options.wrong_staticness_fixstrict) {
      throw new ResolutionFailedException(""String_Node_Str"" + this + ""String_Node_Str""+ ret+ ""String_Node_Str"");
    }
  }
  return ret;
}","private SootMethod checkStatic(SootMethod ret){
  if ((Options.v().wrong_staticness() == Options.wrong_staticness_fail || Options.v().wrong_staticness() == Options.wrong_staticness_fixstrict) && ret.isStatic() != isStatic() && !ret.isPhantom()) {
    throw new ResolutionFailedException(""String_Node_Str"" + this + ""String_Node_Str""+ ret+ ""String_Node_Str"");
  }
  return ret;
}"
85186,"/** 
 * Return the jimple equivalent of this body.
 * @param m the SootMethod that contains this body
 */
public Body jimplify(Body b,SootMethod m){
  final Jimple jimple=Jimple.v();
  final UnknownType unknownType=UnknownType.v();
  final NullConstant nullConstant=NullConstant.v();
  final Options options=Options.v();
  jBody=(JimpleBody)b;
  deferredInstructions=new ArrayList<DeferableInstruction>();
  instructionsToRetype=new HashSet<RetypeableInstruction>();
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    DalvikTyper.v().clear();
  }
  List<Local> paramLocals=new LinkedList<Local>();
  if (!isStatic) {
    int thisRegister=numRegisters - numParameterRegisters - 1;
    Local thisLocal=jimple.newLocal(""String_Node_Str"" + thisRegister,unknownType);
    jBody.getLocals().add(thisLocal);
    registerLocals[thisRegister]=thisLocal;
    JIdentityStmt idStmt=(JIdentityStmt)jimple.newIdentityStmt(thisLocal,jimple.newThisRef(declaringClassType));
    add(idStmt);
    paramLocals.add(thisLocal);
    if (IDalvikTyper.ENABLE_DVKTYPER) {
      DalvikTyper.v().setType(idStmt.leftBox,jBody.getMethod().getDeclaringClass().getType(),false);
    }
  }
{
    int i=0;
    int parameterRegister=numRegisters - numParameterRegisters;
    for (    Type t : parameterTypes) {
      Local gen=jimple.newLocal(""String_Node_Str"" + parameterRegister,unknownType);
      jBody.getLocals().add(gen);
      registerLocals[parameterRegister]=gen;
      JIdentityStmt idStmt=(JIdentityStmt)jimple.newIdentityStmt(gen,jimple.newParameterRef(t,i++));
      add(idStmt);
      paramLocals.add(gen);
      if (IDalvikTyper.ENABLE_DVKTYPER) {
        DalvikTyper.v().setType(idStmt.leftBox,t,false);
      }
      if (t instanceof LongType || t instanceof DoubleType) {
        parameterRegister++;
        Local g=jimple.newLocal(""String_Node_Str"" + parameterRegister,unknownType);
        jBody.getLocals().add(g);
        registerLocals[parameterRegister]=g;
      }
      parameterRegister++;
    }
  }
  for (int i=0; i < (numRegisters - numParameterRegisters - (isStatic ? 0 : 1)); i++) {
    registerLocals[i]=jimple.newLocal(""String_Node_Str"" + i,unknownType);
    jBody.getLocals().add(registerLocals[i]);
  }
  storeResultLocal=jimple.newLocal(""String_Node_Str"",unknownType);
  jBody.getLocals().add(storeResultLocal);
  final boolean isOdex=dexFile instanceof DexBackedDexFile ? ((DexBackedDexFile)dexFile).isOdexFile() : false;
  ClassPath cp=null;
  if (isOdex) {
    String[] sootClasspath=options.soot_classpath().split(File.pathSeparator);
    List<String> classpathList=new ArrayList<String>();
    for (    String str : sootClasspath) {
      classpathList.add(str);
    }
    try {
      ClassPathResolver resolver=new ClassPathResolver(classpathList,classpathList,classpathList,dexFile);
      cp=new ClassPath(resolver.getResolvedClassProviders().toArray(new ClassProvider[0]));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  int prevLineNumber=-1;
  for (  DexlibAbstractInstruction instruction : instructions) {
    if (isOdex && instruction instanceof OdexInstruction) {
      ((OdexInstruction)instruction).deOdex(dexFile,method,cp);
    }
    if (dangling != null) {
      dangling.finalize(this,instruction);
      dangling=null;
    }
    instruction.jimplify(this);
    if (instruction.getLineNumber() > 0) {
      prevLineNumber=instruction.getLineNumber();
    }
 else {
      instruction.setLineNumber(prevLineNumber);
    }
  }
  for (  DeferableInstruction instruction : deferredInstructions) {
    instruction.deferredJimplify(this);
  }
  if (tries != null) {
    addTraps();
  }
  if (options.keep_line_number()) {
    fixLineNumbers();
  }
  instructions=null;
  instructionAtAddress.clear();
  deferredInstructions=null;
  dangling=null;
  tries=null;
  DexTrapStackFixer.v().transform(jBody);
  DexJumpChainShortener.v().transform(jBody);
  DexReturnInliner.v().transform(jBody);
  DexArrayInitReducer.v().transform(jBody);
  getLocalSplitter().transform(jBody);
  getUnreachableCodeEliminator().transform(jBody);
  DeadAssignmentEliminator.v().transform(jBody);
  UnusedLocalEliminator.v().transform(jBody);
  for (  RetypeableInstruction i : instructionsToRetype) {
    i.retype(jBody);
  }
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    DexReturnValuePropagator.v().transform(jBody);
    getCopyPopagator().transform(jBody);
    DexNullThrowTransformer.v().transform(jBody);
    DalvikTyper.v().typeUntypedConstrantInDiv(jBody);
    DeadAssignmentEliminator.v().transform(jBody);
    UnusedLocalEliminator.v().transform(jBody);
    DalvikTyper.v().assignType(jBody);
    jBody.validateUses();
    jBody.validateValueBoxes();
  }
 else {
    DexNumTransformer.v().transform(jBody);
    DexReturnValuePropagator.v().transform(jBody);
    getCopyPopagator().transform(jBody);
    DexNullThrowTransformer.v().transform(jBody);
    DexNullTransformer.v().transform(jBody);
    DexIfTransformer.v().transform(jBody);
    DeadAssignmentEliminator.v().transform(jBody);
    UnusedLocalEliminator.v().transform(jBody);
    DexNullArrayRefTransformer.v().transform(jBody);
  }
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    for (    Local l : jBody.getLocals()) {
      l.setType(unknownType);
    }
  }
  DexNullInstanceofTransformer.v().transform(jBody);
  TypeAssigner.v().transform(jBody);
  final RefType objectType=RefType.v(""String_Node_Str"");
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    for (    Unit u : jBody.getUnits()) {
      if (u instanceof IfStmt) {
        ConditionExpr expr=(ConditionExpr)((IfStmt)u).getCondition();
        if (((expr instanceof EqExpr) || (expr instanceof NeExpr))) {
          Value op1=expr.getOp1();
          Value op2=expr.getOp2();
          if (op1 instanceof Constant && op2 instanceof Local) {
            Local l=(Local)op2;
            Type ltype=l.getType();
            if (ltype instanceof PrimType) {
              continue;
            }
            if (!(op1 instanceof IntConstant)) {
              continue;
            }
            IntConstant icst=(IntConstant)op1;
            int val=icst.value;
            if (val != 0) {
              continue;
            }
            expr.setOp1(nullConstant);
          }
 else           if (op1 instanceof Local && op2 instanceof Constant) {
            Local l=(Local)op1;
            Type ltype=l.getType();
            if (ltype instanceof PrimType) {
              continue;
            }
            if (!(op2 instanceof IntConstant)) {
              continue;
            }
            IntConstant icst=(IntConstant)op2;
            int val=icst.value;
            if (val != 0) {
              continue;
            }
            expr.setOp2(nullConstant);
          }
 else           if (op1 instanceof Local && op2 instanceof Local) {
          }
 else           if (op1 instanceof Constant && op2 instanceof Constant) {
            if (op1 instanceof NullConstant && op2 instanceof NumericConstant) {
              IntConstant nc=(IntConstant)op2;
              if (nc.value != 0) {
                throw new RuntimeException(""String_Node_Str"" + expr);
              }
              expr.setOp2(NullConstant.v());
            }
 else             if (op2 instanceof NullConstant && op1 instanceof NumericConstant) {
              IntConstant nc=(IntConstant)op1;
              if (nc.value != 0) {
                throw new RuntimeException(""String_Node_Str"" + expr);
              }
              expr.setOp1(nullConstant);
            }
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + u);
          }
        }
      }
    }
    List<ValueBox> uses=jBody.getUseBoxes();
    List<ValueBox> toNullConstantify=new ArrayList<ValueBox>();
    List<Local> toRemove=new ArrayList<Local>();
    for (    Local l : jBody.getLocals()) {
      if (l.getType() instanceof NullType) {
        toRemove.add(l);
        for (        ValueBox vb : uses) {
          Value v=vb.getValue();
          if (v == l) {
            toNullConstantify.add(vb);
          }
        }
      }
    }
    for (    ValueBox vb : toNullConstantify) {
      System.out.println(""String_Node_Str"" + vb + ""String_Node_Str"");
      vb.setValue(nullConstant);
    }
    for (    Local l : toRemove) {
      System.out.println(""String_Node_Str"" + l);
      l.setType(objectType);
    }
  }
  LocalPacker.v().transform(jBody);
  UnusedLocalEliminator.v().transform(jBody);
  LocalNameStandardizer.v().transform(jBody);
  if (options.wrong_staticness() == Options.wrong_staticness_fix) {
    FieldStaticnessCorrector.v().transform(jBody);
    MethodStaticnessCorrector.v().transform(jBody);
  }
  TrapTightener.v().transform(jBody);
  TrapMinimizer.v().transform(jBody);
  Aggregator.v().transform(jBody);
  ConditionalBranchFolder.v().transform(jBody);
  ConstantCastEliminator.v().transform(jBody);
  IdentityCastEliminator.v().transform(jBody);
  IdentityOperationEliminator.v().transform(jBody);
  UnreachableCodeEliminator.v().transform(jBody);
  DeadAssignmentEliminator.v().transform(jBody);
  UnusedLocalEliminator.v().transform(jBody);
  NopEliminator.v().transform(jBody);
  DexReturnPacker.v().transform(jBody);
  for (  Unit u : jBody.getUnits()) {
    if (u instanceof AssignStmt) {
      AssignStmt ass=(AssignStmt)u;
      if (ass.getRightOp() instanceof CastExpr) {
        CastExpr c=(CastExpr)ass.getRightOp();
        if (c.getType() instanceof NullType) {
          ass.setRightOp(nullConstant);
        }
      }
    }
    if (u instanceof DefinitionStmt) {
      DefinitionStmt def=(DefinitionStmt)u;
      if (def.getLeftOp() instanceof Local && def.getRightOp() instanceof CaughtExceptionRef) {
        Type t=def.getLeftOp().getType();
        if (t instanceof RefType) {
          RefType rt=(RefType)t;
          if (rt.getSootClass().isPhantom() && !rt.getSootClass().hasSuperclass() && !rt.getSootClass().getName().equals(""String_Node_Str"")) {
            rt.getSootClass().setSuperclass(Scene.v().getSootClass(""String_Node_Str""));
          }
        }
      }
    }
  }
  for (  Local l : jBody.getLocals()) {
    Type t=l.getType();
    if (t instanceof NullType) {
      l.setType(objectType);
    }
  }
  return jBody;
}","/** 
 * Return the jimple equivalent of this body.
 * @param m the SootMethod that contains this body
 */
public Body jimplify(Body b,SootMethod m){
  final Jimple jimple=Jimple.v();
  final UnknownType unknownType=UnknownType.v();
  final NullConstant nullConstant=NullConstant.v();
  final Options options=Options.v();
  jBody=(JimpleBody)b;
  deferredInstructions=new ArrayList<DeferableInstruction>();
  instructionsToRetype=new HashSet<RetypeableInstruction>();
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    DalvikTyper.v().clear();
  }
  List<Local> paramLocals=new LinkedList<Local>();
  if (!isStatic) {
    int thisRegister=numRegisters - numParameterRegisters - 1;
    Local thisLocal=jimple.newLocal(""String_Node_Str"" + thisRegister,unknownType);
    jBody.getLocals().add(thisLocal);
    registerLocals[thisRegister]=thisLocal;
    JIdentityStmt idStmt=(JIdentityStmt)jimple.newIdentityStmt(thisLocal,jimple.newThisRef(declaringClassType));
    add(idStmt);
    paramLocals.add(thisLocal);
    if (IDalvikTyper.ENABLE_DVKTYPER) {
      DalvikTyper.v().setType(idStmt.leftBox,jBody.getMethod().getDeclaringClass().getType(),false);
    }
  }
{
    int i=0;
    int parameterRegister=numRegisters - numParameterRegisters;
    for (    Type t : parameterTypes) {
      Local gen=jimple.newLocal(""String_Node_Str"" + parameterRegister,unknownType);
      jBody.getLocals().add(gen);
      registerLocals[parameterRegister]=gen;
      JIdentityStmt idStmt=(JIdentityStmt)jimple.newIdentityStmt(gen,jimple.newParameterRef(t,i++));
      add(idStmt);
      paramLocals.add(gen);
      if (IDalvikTyper.ENABLE_DVKTYPER) {
        DalvikTyper.v().setType(idStmt.leftBox,t,false);
      }
      if (t instanceof LongType || t instanceof DoubleType) {
        parameterRegister++;
        Local g=jimple.newLocal(""String_Node_Str"" + parameterRegister,unknownType);
        jBody.getLocals().add(g);
        registerLocals[parameterRegister]=g;
      }
      parameterRegister++;
    }
  }
  for (int i=0; i < (numRegisters - numParameterRegisters - (isStatic ? 0 : 1)); i++) {
    registerLocals[i]=jimple.newLocal(""String_Node_Str"" + i,unknownType);
    jBody.getLocals().add(registerLocals[i]);
  }
  storeResultLocal=jimple.newLocal(""String_Node_Str"",unknownType);
  jBody.getLocals().add(storeResultLocal);
  final boolean isOdex=dexFile instanceof DexBackedDexFile ? ((DexBackedDexFile)dexFile).isOdexFile() : false;
  ClassPath cp=null;
  if (isOdex) {
    String[] sootClasspath=options.soot_classpath().split(File.pathSeparator);
    List<String> classpathList=new ArrayList<String>();
    for (    String str : sootClasspath) {
      classpathList.add(str);
    }
    try {
      ClassPathResolver resolver=new ClassPathResolver(classpathList,classpathList,classpathList,dexFile);
      cp=new ClassPath(resolver.getResolvedClassProviders().toArray(new ClassProvider[0]));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  int prevLineNumber=-1;
  for (  DexlibAbstractInstruction instruction : instructions) {
    if (isOdex && instruction instanceof OdexInstruction) {
      ((OdexInstruction)instruction).deOdex(dexFile,method,cp);
    }
    if (dangling != null) {
      dangling.finalize(this,instruction);
      dangling=null;
    }
    instruction.jimplify(this);
    if (instruction.getLineNumber() > 0) {
      prevLineNumber=instruction.getLineNumber();
    }
 else {
      instruction.setLineNumber(prevLineNumber);
    }
  }
  for (  DeferableInstruction instruction : deferredInstructions) {
    instruction.deferredJimplify(this);
  }
  if (tries != null) {
    addTraps();
  }
  if (options.keep_line_number()) {
    fixLineNumbers();
  }
  instructions=null;
  instructionAtAddress.clear();
  deferredInstructions=null;
  dangling=null;
  tries=null;
  DexTrapStackFixer.v().transform(jBody);
  DexJumpChainShortener.v().transform(jBody);
  DexReturnInliner.v().transform(jBody);
  DexArrayInitReducer.v().transform(jBody);
  getLocalSplitter().transform(jBody);
  getUnreachableCodeEliminator().transform(jBody);
  DeadAssignmentEliminator.v().transform(jBody);
  UnusedLocalEliminator.v().transform(jBody);
  for (  RetypeableInstruction i : instructionsToRetype) {
    i.retype(jBody);
  }
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    DexReturnValuePropagator.v().transform(jBody);
    getCopyPopagator().transform(jBody);
    DexNullThrowTransformer.v().transform(jBody);
    DalvikTyper.v().typeUntypedConstrantInDiv(jBody);
    DeadAssignmentEliminator.v().transform(jBody);
    UnusedLocalEliminator.v().transform(jBody);
    DalvikTyper.v().assignType(jBody);
    jBody.validateUses();
    jBody.validateValueBoxes();
  }
 else {
    DexNumTransformer.v().transform(jBody);
    DexReturnValuePropagator.v().transform(jBody);
    getCopyPopagator().transform(jBody);
    DexNullThrowTransformer.v().transform(jBody);
    DexNullTransformer.v().transform(jBody);
    DexIfTransformer.v().transform(jBody);
    DeadAssignmentEliminator.v().transform(jBody);
    UnusedLocalEliminator.v().transform(jBody);
    DexNullArrayRefTransformer.v().transform(jBody);
  }
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    for (    Local l : jBody.getLocals()) {
      l.setType(unknownType);
    }
  }
  DexNullInstanceofTransformer.v().transform(jBody);
  TypeAssigner.v().transform(jBody);
  final RefType objectType=RefType.v(""String_Node_Str"");
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    for (    Unit u : jBody.getUnits()) {
      if (u instanceof IfStmt) {
        ConditionExpr expr=(ConditionExpr)((IfStmt)u).getCondition();
        if (((expr instanceof EqExpr) || (expr instanceof NeExpr))) {
          Value op1=expr.getOp1();
          Value op2=expr.getOp2();
          if (op1 instanceof Constant && op2 instanceof Local) {
            Local l=(Local)op2;
            Type ltype=l.getType();
            if (ltype instanceof PrimType) {
              continue;
            }
            if (!(op1 instanceof IntConstant)) {
              continue;
            }
            IntConstant icst=(IntConstant)op1;
            int val=icst.value;
            if (val != 0) {
              continue;
            }
            expr.setOp1(nullConstant);
          }
 else           if (op1 instanceof Local && op2 instanceof Constant) {
            Local l=(Local)op1;
            Type ltype=l.getType();
            if (ltype instanceof PrimType) {
              continue;
            }
            if (!(op2 instanceof IntConstant)) {
              continue;
            }
            IntConstant icst=(IntConstant)op2;
            int val=icst.value;
            if (val != 0) {
              continue;
            }
            expr.setOp2(nullConstant);
          }
 else           if (op1 instanceof Local && op2 instanceof Local) {
          }
 else           if (op1 instanceof Constant && op2 instanceof Constant) {
            if (op1 instanceof NullConstant && op2 instanceof NumericConstant) {
              IntConstant nc=(IntConstant)op2;
              if (nc.value != 0) {
                throw new RuntimeException(""String_Node_Str"" + expr);
              }
              expr.setOp2(NullConstant.v());
            }
 else             if (op2 instanceof NullConstant && op1 instanceof NumericConstant) {
              IntConstant nc=(IntConstant)op1;
              if (nc.value != 0) {
                throw new RuntimeException(""String_Node_Str"" + expr);
              }
              expr.setOp1(nullConstant);
            }
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + u);
          }
        }
      }
    }
    List<ValueBox> uses=jBody.getUseBoxes();
    List<ValueBox> toNullConstantify=new ArrayList<ValueBox>();
    List<Local> toRemove=new ArrayList<Local>();
    for (    Local l : jBody.getLocals()) {
      if (l.getType() instanceof NullType) {
        toRemove.add(l);
        for (        ValueBox vb : uses) {
          Value v=vb.getValue();
          if (v == l) {
            toNullConstantify.add(vb);
          }
        }
      }
    }
    for (    ValueBox vb : toNullConstantify) {
      System.out.println(""String_Node_Str"" + vb + ""String_Node_Str"");
      vb.setValue(nullConstant);
    }
    for (    Local l : toRemove) {
      System.out.println(""String_Node_Str"" + l);
      l.setType(objectType);
    }
  }
  LocalPacker.v().transform(jBody);
  UnusedLocalEliminator.v().transform(jBody);
  LocalNameStandardizer.v().transform(jBody);
  if (Options.v().wrong_staticness() == Options.wrong_staticness_fix || Options.v().wrong_staticness() == Options.wrong_staticness_fixstrict) {
    FieldStaticnessCorrector.v().transform(jBody);
    MethodStaticnessCorrector.v().transform(jBody);
  }
  TrapTightener.v().transform(jBody);
  TrapMinimizer.v().transform(jBody);
  Aggregator.v().transform(jBody);
  ConditionalBranchFolder.v().transform(jBody);
  ConstantCastEliminator.v().transform(jBody);
  IdentityCastEliminator.v().transform(jBody);
  IdentityOperationEliminator.v().transform(jBody);
  UnreachableCodeEliminator.v().transform(jBody);
  DeadAssignmentEliminator.v().transform(jBody);
  UnusedLocalEliminator.v().transform(jBody);
  NopEliminator.v().transform(jBody);
  DexReturnPacker.v().transform(jBody);
  for (  Unit u : jBody.getUnits()) {
    if (u instanceof AssignStmt) {
      AssignStmt ass=(AssignStmt)u;
      if (ass.getRightOp() instanceof CastExpr) {
        CastExpr c=(CastExpr)ass.getRightOp();
        if (c.getType() instanceof NullType) {
          ass.setRightOp(nullConstant);
        }
      }
    }
    if (u instanceof DefinitionStmt) {
      DefinitionStmt def=(DefinitionStmt)u;
      if (def.getLeftOp() instanceof Local && def.getRightOp() instanceof CaughtExceptionRef) {
        Type t=def.getLeftOp().getType();
        if (t instanceof RefType) {
          RefType rt=(RefType)t;
          if (rt.getSootClass().isPhantom() && !rt.getSootClass().hasSuperclass() && !rt.getSootClass().getName().equals(""String_Node_Str"")) {
            rt.getSootClass().setSuperclass(Scene.v().getSootClass(""String_Node_Str""));
          }
        }
      }
    }
  }
  for (  Local l : jBody.getLocals()) {
    Type t=l.getType();
    if (t instanceof NullType) {
      l.setType(objectType);
    }
  }
  return jBody;
}"
85187,"private Composite Processing_OptionsCreate(Composite parent){
  String defKey;
  String defaultString;
  boolean defaultBool=false;
  String defaultArray;
  Group editGroupProcessing_Options=new Group(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  editGroupProcessing_Options.setLayout(layout);
  editGroupProcessing_Options.setText(""String_Node_Str"");
  editGroupProcessing_Options.setData(""String_Node_Str"",""String_Node_Str"");
  String descProcessing_Options=""String_Node_Str"";
  if (descProcessing_Options.length() > 0) {
    Label descLabelProcessing_Options=new Label(editGroupProcessing_Options,SWT.WRAP);
    descLabelProcessing_Options.setText(descProcessing_Options);
  }
  OptionData[] data;
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionsoptimize_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionswhole_optimize_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionsvia_grimp_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionsvia_shimple_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionsomit_excepting_unit_edges_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionstrim_cfgs_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionsignore_resolution_errors_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  data=new OptionData[]{new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true)};
  setProcessing_Optionswrong_staticness_widget(new MultiOptionWidget(editGroupProcessing_Options,SWT.NONE,data,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultString=getStringDef(defKey);
    getProcessing_Optionswrong_staticness_widget().setDef(defaultString);
  }
  data=new OptionData[]{new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true)};
  setProcessing_Optionsfield_type_mismatches_widget(new MultiOptionWidget(editGroupProcessing_Options,SWT.NONE,data,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultString=getStringDef(defKey);
    getProcessing_Optionsfield_type_mismatches_widget().setDef(defaultString);
  }
  data=new OptionData[]{new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false)};
  setProcessing_Optionsthrow_analysis_widget(new MultiOptionWidget(editGroupProcessing_Options,SWT.NONE,data,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultString=getStringDef(defKey);
    getProcessing_Optionsthrow_analysis_widget().setDef(defaultString);
  }
  data=new OptionData[]{new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false)};
  setProcessing_Optionscheck_init_throw_analysis_widget(new MultiOptionWidget(editGroupProcessing_Options,SWT.NONE,data,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultString=getStringDef(defKey);
    getProcessing_Optionscheck_init_throw_analysis_widget().setDef(defaultString);
  }
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultString=getArrayDef(defKey);
  }
 else {
    defaultString=""String_Node_Str"";
  }
  setProcessing_Optionsplugin_widget(new ListOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultString)));
  return editGroupProcessing_Options;
}","private Composite Processing_OptionsCreate(Composite parent){
  String defKey;
  String defaultString;
  boolean defaultBool=false;
  String defaultArray;
  Group editGroupProcessing_Options=new Group(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  editGroupProcessing_Options.setLayout(layout);
  editGroupProcessing_Options.setText(""String_Node_Str"");
  editGroupProcessing_Options.setData(""String_Node_Str"",""String_Node_Str"");
  String descProcessing_Options=""String_Node_Str"";
  if (descProcessing_Options.length() > 0) {
    Label descLabelProcessing_Options=new Label(editGroupProcessing_Options,SWT.WRAP);
    descLabelProcessing_Options.setText(descProcessing_Options);
  }
  OptionData[] data;
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionsoptimize_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionswhole_optimize_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionsvia_grimp_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionsvia_shimple_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionsomit_excepting_unit_edges_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionstrim_cfgs_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultBool=getBoolDef(defKey);
  }
 else {
    defaultBool=false;
  }
  setProcessing_Optionsignore_resolution_errors_widget(new BooleanOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultBool)));
  data=new OptionData[]{new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true)};
  setProcessing_Optionswrong_staticness_widget(new MultiOptionWidget(editGroupProcessing_Options,SWT.NONE,data,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultString=getStringDef(defKey);
    getProcessing_Optionswrong_staticness_widget().setDef(defaultString);
  }
  data=new OptionData[]{new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true)};
  setProcessing_Optionsfield_type_mismatches_widget(new MultiOptionWidget(editGroupProcessing_Options,SWT.NONE,data,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultString=getStringDef(defKey);
    getProcessing_Optionsfield_type_mismatches_widget().setDef(defaultString);
  }
  data=new OptionData[]{new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false)};
  setProcessing_Optionsthrow_analysis_widget(new MultiOptionWidget(editGroupProcessing_Options,SWT.NONE,data,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultString=getStringDef(defKey);
    getProcessing_Optionsthrow_analysis_widget().setDef(defaultString);
  }
  data=new OptionData[]{new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false),new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false)};
  setProcessing_Optionscheck_init_throw_analysis_widget(new MultiOptionWidget(editGroupProcessing_Options,SWT.NONE,data,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultString=getStringDef(defKey);
    getProcessing_Optionscheck_init_throw_analysis_widget().setDef(defaultString);
  }
  defKey=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  defKey=defKey.trim();
  if (isInDefList(defKey)) {
    defaultString=getArrayDef(defKey);
  }
 else {
    defaultString=""String_Node_Str"";
  }
  setProcessing_Optionsplugin_widget(new ListOptionWidget(editGroupProcessing_Options,SWT.NONE,new OptionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",defaultString)));
  return editGroupProcessing_Options;
}"
85188,"private boolean createNewConfig(){
  setConfig(new HashMap());
  boolean boolRes=false;
  String stringRes=""String_Node_Str"";
  boolean defBoolRes=false;
  String defStringRes=""String_Node_Str"";
  StringTokenizer listOptTokens;
  String nextListToken;
  boolRes=getGeneral_Optionscoffi_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionscoffi_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsjasmin_backend_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsjasmin_backend_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionshelp_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionshelp_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsphase_list_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsphase_list_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsversion_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsversion_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsinteractive_mode_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsinteractive_mode_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsunfriendly_mode_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsunfriendly_mode_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsapp_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsapp_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionswhole_program_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionswhole_program_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionswhole_shimple_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionswhole_shimple_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionson_the_fly_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionson_the_fly_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsvalidate_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsvalidate_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsdebug_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsdebug_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsdebug_resolver_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsdebug_resolver_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsignore_resolving_levels_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsignore_resolving_levels_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getGeneral_Optionsphase_help_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getGeneral_Optionsphase_help_widget().getAlias(),stringRes);
  }
  boolRes=getInput_Optionsprepend_classpath_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsprepend_classpath_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsignore_classpath_errors_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsignore_classpath_errors_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsprocess_multiple_dex_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsprocess_multiple_dex_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionssearch_dex_in_archives_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionssearch_dex_in_archives_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsoaat_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsoaat_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsast_metrics_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsast_metrics_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsfull_resolver_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsfull_resolver_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsallow_phantom_refs_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsallow_phantom_refs_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsno_bodies_for_excluded_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsno_bodies_for_excluded_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsj2me_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsj2me_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionspolyglot_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionspolyglot_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionspermissive_resolving_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionspermissive_resolving_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsdrop_bodies_after_load_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsdrop_bodies_after_load_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getInput_Optionssoot_classpath_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getInput_Optionssoot_classpath_widget().getAlias(),stringRes);
  }
  stringRes=getInput_Optionsprocess_dir_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getInput_Optionsprocess_dir_widget().getAlias(),stringRes);
  }
  stringRes=getInput_Optionsandroid_jars_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getInput_Optionsandroid_jars_widget().getAlias(),stringRes);
  }
  stringRes=getInput_Optionsforce_android_jar_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getInput_Optionsforce_android_jar_widget().getAlias(),stringRes);
  }
  stringRes=getInput_Optionsandroid_api_version_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getInput_Optionsandroid_api_version_widget().getAlias(),stringRes);
  }
  stringRes=getInput_Optionsmain_class_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getInput_Optionsmain_class_widget().getAlias(),stringRes);
  }
  stringRes=getInput_Optionssrc_prec_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getInput_Optionssrc_prec_widget().getAlias(),stringRes);
  }
  boolRes=getOutput_Optionsoutput_jar_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsoutput_jar_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsxml_attributes_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsxml_attributes_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsprint_tags_in_output_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsprint_tags_in_output_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsno_output_source_file_attribute_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsno_output_source_file_attribute_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsno_output_inner_classes_attribute_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsno_output_inner_classes_attribute_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsshow_exception_dests_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsshow_exception_dests_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsgzip_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsgzip_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsforce_overwrite_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsforce_overwrite_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getOutput_Optionsoutput_dir_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getOutput_Optionsoutput_dir_widget().getAlias(),stringRes);
  }
  stringRes=getOutput_Optionsdump_body_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getOutput_Optionsdump_body_widget().getAlias(),stringRes);
  }
  stringRes=getOutput_Optionsdump_cfg_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getOutput_Optionsdump_cfg_widget().getAlias(),stringRes);
  }
  stringRes=getOutput_Optionsoutput_format_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getOutput_Optionsoutput_format_widget().getAlias(),stringRes);
  }
  stringRes=getOutput_Optionsjava_version_widget().getSelectedAlias();
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getOutput_Optionsjava_version_widget().getAlias(),stringRes);
  }
  boolRes=getProcessing_Optionsoptimize_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionsoptimize_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getProcessing_Optionswhole_optimize_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionswhole_optimize_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getProcessing_Optionsvia_grimp_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionsvia_grimp_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getProcessing_Optionsvia_shimple_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionsvia_shimple_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getProcessing_Optionsomit_excepting_unit_edges_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionsomit_excepting_unit_edges_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getProcessing_Optionstrim_cfgs_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionstrim_cfgs_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getProcessing_Optionsignore_resolution_errors_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionsignore_resolution_errors_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getProcessing_Optionsplugin_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getProcessing_Optionsplugin_widget().getAlias(),stringRes);
  }
  stringRes=getProcessing_Optionswrong_staticness_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getProcessing_Optionswrong_staticness_widget().getAlias(),stringRes);
  }
  stringRes=getProcessing_Optionsfield_type_mismatches_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getProcessing_Optionsfield_type_mismatches_widget().getAlias(),stringRes);
  }
  stringRes=getProcessing_Optionsthrow_analysis_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getProcessing_Optionsthrow_analysis_widget().getAlias(),stringRes);
  }
  stringRes=getProcessing_Optionscheck_init_throw_analysis_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getProcessing_Optionscheck_init_throw_analysis_widget().getAlias(),stringRes);
  }
  boolRes=getjbenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbuse_original_names_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbuse_original_names_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbpreserve_source_annotations_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbpreserve_source_annotations_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbstabilize_local_names_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbstabilize_local_names_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_dtrenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_dtrenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_eseenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_eseenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_lsenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_lsenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_aenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_aenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_aonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_aonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_trenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_trenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_truse_older_type_assigner_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_truse_older_type_assigner_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_trcompare_type_assigners_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_trcompare_type_assigners_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_trignore_nullpointer_dereferences_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_trignore_nullpointer_dereferences_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_ulpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_ulpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_ulpunsplit_original_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_ulpunsplit_original_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_lnsenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_lnsenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_lnsonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_lnsonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_lnssort_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_lnssort_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_cpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_cpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_cponly_regular_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_cponly_regular_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_cponly_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_cponly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_daeenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_daeenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_daeonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_daeonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_cp_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_cp_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_lpenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_lpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_lpunsplit_original_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_lpunsplit_original_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_neenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_neenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_uceenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_uceenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_uceremove_unreachable_traps_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_uceremove_unreachable_traps_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_ttenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_ttenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjuse_original_names_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjuse_original_names_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_lsenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_lsenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_aenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_aenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_aonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_aonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_trenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_trenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_ulpenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_ulpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_ulpunsplit_original_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_ulpunsplit_original_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_lnsenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_lnsenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_lnsonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_lnsonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_cpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_cpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_cponly_regular_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_cponly_regular_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_cponly_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_cponly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_daeenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_daeenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_daeonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_daeonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_cp_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_cp_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_lpenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_lpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_lpunsplit_original_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_lpunsplit_original_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_neenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_neenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_uceenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_uceenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjppenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjppenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjppwjpp_cimbtenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjppwjpp_cimbtenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjppwjpp_cimbtverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjppwjpp_cimbtverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwsppenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwsppenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgsafe_forname_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgsafe_forname_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgsafe_newinstance_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgsafe_newinstance_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgall_reachable_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgall_reachable_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgimplicit_entry_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgimplicit_entry_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgtrim_clinit_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgtrim_clinit_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgtypes_for_invoke_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgtypes_for_invoke_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgjdkver_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgjdkver_widget().getAlias(),stringRes);
  }
  stringRes=getcgreflection_log_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgreflection_log_widget().getAlias(),stringRes);
  }
  stringRes=getcgguards_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgguards_widget().getAlias(),stringRes);
  }
  stringRes=getcglibrary_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcglibrary_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_chaenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_chaenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_chaverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_chaverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_chaapponly_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_chaapponly_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkignore_types_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkignore_types_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkforce_gc_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkforce_gc_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkpre_jimplify_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkpre_jimplify_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkapponly_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkapponly_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkvta_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkvta_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkrta_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkrta_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkfield_based_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkfield_based_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparktypes_for_sites_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparktypes_for_sites_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkmerge_stringbuffer_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkmerge_stringbuffer_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkstring_constants_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkstring_constants_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparksimulate_natives_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparksimulate_natives_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkempties_as_allocs_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkempties_as_allocs_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparksimple_edges_bidirectional_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparksimple_edges_bidirectional_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkon_fly_cg_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkon_fly_cg_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparksimplify_offline_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparksimplify_offline_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparksimplify_sccs_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparksimplify_sccs_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkignore_types_for_sccs_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkignore_types_for_sccs_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgcg_sparkpropagator_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_sparkpropagator_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkset_impl_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_sparkset_impl_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkdouble_set_old_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_sparkdouble_set_old_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkdouble_set_new_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_sparkdouble_set_new_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_sparkdump_html_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkdump_html_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkdump_pag_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkdump_pag_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkdump_solution_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkdump_solution_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparktopo_sort_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparktopo_sort_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkdump_types_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkdump_types_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkclass_method_var_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkclass_method_var_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkdump_answer_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkdump_answer_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkadd_tags_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkadd_tags_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkset_mass_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkset_mass_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkcs_demand_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkcs_demand_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparklazy_pts_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparklazy_pts_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgcg_sparktraversal_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparktraversal_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkpasses_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparkpasses_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_sparkgeom_pta_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkgeom_pta_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkgeom_trans_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkgeom_trans_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkgeom_blocking_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkgeom_blocking_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkgeom_app_only_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkgeom_app_only_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgcg_sparkgeom_dump_verbose_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparkgeom_dump_verbose_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkgeom_verify_name_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparkgeom_verify_name_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkgeom_eval_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparkgeom_eval_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkgeom_frac_base_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparkgeom_frac_base_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkgeom_runs_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparkgeom_runs_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkgeom_encoding_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_sparkgeom_encoding_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkgeom_worklist_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_sparkgeom_worklist_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_paddleenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlebdd_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlebdd_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddledynamic_order_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddledynamic_order_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleprofile_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleprofile_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleverbosegc_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleverbosegc_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleignore_types_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleignore_types_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlepre_jimplify_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlepre_jimplify_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgcg_paddleorder_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_paddleorder_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddlebdd_nodes_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_paddlebdd_nodes_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddleconf_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddleconf_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddleq_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddleq_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddlebackend_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddlebackend_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_paddlecontext_heap_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlecontext_heap_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgcg_paddlek_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_paddlek_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddlecontext_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddlecontext_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_paddlerta_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlerta_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlefield_based_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlefield_based_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddletypes_for_sites_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddletypes_for_sites_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlemerge_stringbuffer_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlemerge_stringbuffer_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlestring_constants_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlestring_constants_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlesimulate_natives_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlesimulate_natives_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleglobal_nodes_in_natives_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleglobal_nodes_in_natives_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlesimple_edges_bidirectional_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlesimple_edges_bidirectional_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlethis_edges_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlethis_edges_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleprecise_newinstance_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleprecise_newinstance_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgcg_paddlepropagator_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddlepropagator_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddleset_impl_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddleset_impl_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddledouble_set_old_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddledouble_set_old_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddledouble_set_new_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddledouble_set_new_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_paddlecontext_counts_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlecontext_counts_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddletotal_context_counts_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddletotal_context_counts_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlemethod_context_counts_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlemethod_context_counts_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleset_mass_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleset_mass_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlenumber_nodes_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlenumber_nodes_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwstpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwstpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwsopenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwsopenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_mhpenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_mhpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tnenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tnenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tnavoid_deadlock_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tnavoid_deadlock_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tnopen_nesting_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tnopen_nesting_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tndo_mhp_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tndo_mhp_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tndo_tlo_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tndo_tlo_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tnprint_graph_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tnprint_graph_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tnprint_table_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tnprint_table_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tnprint_debug_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tnprint_debug_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getwjtpwjtp_tnlocking_scheme_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getwjtpwjtp_tnlocking_scheme_widget().getAlias(),stringRes);
  }
  boolRes=getwjtpwjtp_rdcenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_rdcenabled_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getwjtpwjtp_rdcfixed_class_names_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getwjtpwjtp_rdcfixed_class_names_widget().getAlias(),stringRes);
  }
  boolRes=getwjopenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjopwjop_smbenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_smbenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjopwjop_smbinsert_null_checks_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_smbinsert_null_checks_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjopwjop_smbinsert_redundant_casts_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_smbinsert_redundant_casts_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getwjopwjop_smballowed_modifier_changes_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getwjopwjop_smballowed_modifier_changes_widget().getAlias(),stringRes);
  }
  boolRes=getwjopwjop_sienabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_sienabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjopwjop_sirerun_jb_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_sirerun_jb_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjopwjop_siinsert_null_checks_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_siinsert_null_checks_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjopwjop_siinsert_redundant_casts_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_siinsert_redundant_casts_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getwjopwjop_siexpansion_factor_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getwjopwjop_siexpansion_factor_widget().getAlias(),stringRes);
  }
  stringRes=getwjopwjop_simax_container_size_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getwjopwjop_simax_container_size_widget().getAlias(),stringRes);
  }
  stringRes=getwjopwjop_simax_inlinee_size_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getwjopwjop_simax_inlinee_size_widget().getAlias(),stringRes);
  }
  stringRes=getwjopwjop_siallowed_modifier_changes_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getwjopwjop_siallowed_modifier_changes_widget().getAlias(),stringRes);
  }
  boolRes=getwjapenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_raenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_raenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_umtenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_umtenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_uftenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_uftenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_tqtenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_tqtenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_cggenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_cggenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_cggshow_lib_meths_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_cggshow_lib_meths_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_purityenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_purityenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_puritydump_summaries_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_puritydump_summaries_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_puritydump_cg_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_puritydump_cg_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_puritydump_intra_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_puritydump_intra_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_purityprint_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_purityprint_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_purityannotate_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_purityannotate_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_purityverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_purityverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getshimpleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getshimpleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getshimplenode_elim_opt_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getshimplenode_elim_opt_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getshimplestandard_local_names_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getshimplestandard_local_names_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getshimpleextended_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getshimpleextended_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getshimpledebug_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getshimpledebug_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getstpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getstpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getsopenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getsopenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getsopsop_cpfenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getsopsop_cpfenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getsopsop_cpfprune_cfg_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getsopsop_cpfprune_cfg_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjtpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjtpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_cseenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_cseenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_csenaive_side_effect_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_csenaive_side_effect_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_bcmenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_bcmenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_bcmnaive_side_effect_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_bcmnaive_side_effect_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_lcmenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_lcmenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_lcmunroll_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_lcmunroll_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_lcmnaive_side_effect_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_lcmnaive_side_effect_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getjopjop_lcmsafety_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getjopjop_lcmsafety_widget().getAlias(),stringRes);
  }
  boolRes=getjopjop_cpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_cpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_cponly_regular_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_cponly_regular_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_cponly_stack_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_cponly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_cpfenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_cpfenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_cbfenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_cbfenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_daeenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_daeenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_daeonly_tag_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_daeonly_tag_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_daeonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_daeonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_nceenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_nceenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_uce1enabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_uce1enabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_uce1remove_unreachable_traps_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_uce1remove_unreachable_traps_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_ubf1enabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_ubf1enabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_uce2enabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_uce2enabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_uce2remove_unreachable_traps_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_uce2remove_unreachable_traps_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_ubf2enabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_ubf2enabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_npcenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_npcenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_npconly_array_ref_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_npconly_array_ref_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_npcprofiling_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_npcprofiling_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_npcolorerenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_npcolorerenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcwith_all_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcwith_all_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcwith_cse_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcwith_cse_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcwith_arrayref_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcwith_arrayref_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcwith_fieldref_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcwith_fieldref_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcwith_classfield_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcwith_classfield_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcwith_rectarray_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcwith_rectarray_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcprofiling_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcprofiling_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcadd_color_tags_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcadd_color_tags_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_profilingenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_profilingenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_profilingnotmainentry_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_profilingnotmainentry_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_seaenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_seaenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_seanaive_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_seanaive_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_fieldrwenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_fieldrwenabled_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getjapjap_fieldrwthreshold_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getjapjap_fieldrwthreshold_widget().getAlias(),stringRes);
  }
  boolRes=getjapjap_cgtaggerenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_cgtaggerenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_parityenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_parityenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_patenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_patenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_lvtaggerenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_lvtaggerenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_rdtaggerenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_rdtaggerenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_cheenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_cheenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_umtenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_umtenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_litenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_litenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_aetenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_aetenabled_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getjapjap_aetkind_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getjapjap_aetkind_widget().getAlias(),stringRes);
  }
  boolRes=getjapjap_dmtenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_dmtenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbgb_a1enabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbgb_a1enabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbgb_a1only_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbgb_a1only_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbgb_cfenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbgb_cfenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbgb_a2enabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbgb_a2enabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbgb_a2only_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbgb_a2only_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbgb_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbgb_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgopenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getgopenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsoenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsoenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsodebug_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsodebug_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsointer_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsointer_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsosl_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsosl_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsosl2_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsosl2_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsosll_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsosll_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsosll2_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsosll2_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_scoenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_scoenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_phoenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_phoenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lpunsplit_original_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lpunsplit_original_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbopenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getbopenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=gettagenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(gettagenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=gettagtag_lnenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(gettagtag_lnenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=gettagtag_anenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(gettagtag_anenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=gettagtag_depenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(gettagtag_depenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=gettagtag_fieldrwenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(gettagtag_fieldrwenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getdbenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getdbenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getdbsource_is_javac_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getdbsource_is_javac_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getdbdb_transformationsenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getdbdb_transformationsenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getdbdb_renamerenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getdbdb_renamerenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getdbdb_deobfuscateenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getdbdb_deobfuscateenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getdbdb_force_recompileenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getdbdb_force_recompileenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getApplication_Mode_Optionsinclude_all_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getApplication_Mode_Optionsinclude_all_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getApplication_Mode_Optionsinclude_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getApplication_Mode_Optionsinclude_widget().getAlias(),stringRes);
  }
  stringRes=getApplication_Mode_Optionsexclude_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getApplication_Mode_Optionsexclude_widget().getAlias(),stringRes);
  }
  stringRes=getApplication_Mode_Optionsdynamic_class_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getApplication_Mode_Optionsdynamic_class_widget().getAlias(),stringRes);
  }
  stringRes=getApplication_Mode_Optionsdynamic_dir_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getApplication_Mode_Optionsdynamic_dir_widget().getAlias(),stringRes);
  }
  stringRes=getApplication_Mode_Optionsdynamic_package_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getApplication_Mode_Optionsdynamic_package_widget().getAlias(),stringRes);
  }
  boolRes=getInput_Attribute_Optionskeep_line_number_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Attribute_Optionskeep_line_number_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Attribute_Optionskeep_offset_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Attribute_Optionskeep_offset_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Attribute_Optionswrite_local_annotations_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Attribute_Optionswrite_local_annotations_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getAnnotation_Optionsannot_purity_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getAnnotation_Optionsannot_purity_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getAnnotation_Optionsannot_nullpointer_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getAnnotation_Optionsannot_nullpointer_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getAnnotation_Optionsannot_arraybounds_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getAnnotation_Optionsannot_arraybounds_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getAnnotation_Optionsannot_side_effect_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getAnnotation_Optionsannot_side_effect_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getAnnotation_Optionsannot_fieldrw_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getAnnotation_Optionsannot_fieldrw_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getMiscellaneous_Optionstime_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getMiscellaneous_Optionstime_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getMiscellaneous_Optionssubtract_gc_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getMiscellaneous_Optionssubtract_gc_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getMiscellaneous_Optionsno_writeout_body_releasing_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getMiscellaneous_Optionsno_writeout_body_releasing_widget().getAlias(),new Boolean(boolRes));
  }
  setSootMainClass(getSootMainClassWidget().getText().getText());
  return setSootMainProject(getSootMainProjectWidget().getText().getText());
}","private boolean createNewConfig(){
  setConfig(new HashMap());
  boolean boolRes=false;
  String stringRes=""String_Node_Str"";
  boolean defBoolRes=false;
  String defStringRes=""String_Node_Str"";
  StringTokenizer listOptTokens;
  String nextListToken;
  boolRes=getGeneral_Optionscoffi_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionscoffi_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsjasmin_backend_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsjasmin_backend_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionshelp_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionshelp_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsphase_list_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsphase_list_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsversion_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsversion_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsinteractive_mode_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsinteractive_mode_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsunfriendly_mode_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsunfriendly_mode_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsapp_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsapp_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionswhole_program_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionswhole_program_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionswhole_shimple_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionswhole_shimple_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionson_the_fly_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionson_the_fly_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsvalidate_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsvalidate_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsdebug_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsdebug_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsdebug_resolver_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsdebug_resolver_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getGeneral_Optionsignore_resolving_levels_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getGeneral_Optionsignore_resolving_levels_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getGeneral_Optionsphase_help_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getGeneral_Optionsphase_help_widget().getAlias(),stringRes);
  }
  boolRes=getInput_Optionsprepend_classpath_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsprepend_classpath_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsignore_classpath_errors_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsignore_classpath_errors_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsprocess_multiple_dex_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsprocess_multiple_dex_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionssearch_dex_in_archives_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionssearch_dex_in_archives_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsoaat_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsoaat_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsast_metrics_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsast_metrics_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsfull_resolver_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsfull_resolver_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsallow_phantom_refs_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsallow_phantom_refs_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsno_bodies_for_excluded_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsno_bodies_for_excluded_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsj2me_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsj2me_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionspolyglot_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionspolyglot_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionspermissive_resolving_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionspermissive_resolving_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Optionsdrop_bodies_after_load_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Optionsdrop_bodies_after_load_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getInput_Optionssoot_classpath_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getInput_Optionssoot_classpath_widget().getAlias(),stringRes);
  }
  stringRes=getInput_Optionsprocess_dir_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getInput_Optionsprocess_dir_widget().getAlias(),stringRes);
  }
  stringRes=getInput_Optionsandroid_jars_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getInput_Optionsandroid_jars_widget().getAlias(),stringRes);
  }
  stringRes=getInput_Optionsforce_android_jar_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getInput_Optionsforce_android_jar_widget().getAlias(),stringRes);
  }
  stringRes=getInput_Optionsandroid_api_version_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getInput_Optionsandroid_api_version_widget().getAlias(),stringRes);
  }
  stringRes=getInput_Optionsmain_class_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getInput_Optionsmain_class_widget().getAlias(),stringRes);
  }
  stringRes=getInput_Optionssrc_prec_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getInput_Optionssrc_prec_widget().getAlias(),stringRes);
  }
  boolRes=getOutput_Optionsoutput_jar_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsoutput_jar_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsxml_attributes_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsxml_attributes_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsprint_tags_in_output_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsprint_tags_in_output_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsno_output_source_file_attribute_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsno_output_source_file_attribute_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsno_output_inner_classes_attribute_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsno_output_inner_classes_attribute_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsshow_exception_dests_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsshow_exception_dests_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsgzip_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsgzip_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Optionsforce_overwrite_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Optionsforce_overwrite_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getOutput_Optionsoutput_dir_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getOutput_Optionsoutput_dir_widget().getAlias(),stringRes);
  }
  stringRes=getOutput_Optionsdump_body_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getOutput_Optionsdump_body_widget().getAlias(),stringRes);
  }
  stringRes=getOutput_Optionsdump_cfg_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getOutput_Optionsdump_cfg_widget().getAlias(),stringRes);
  }
  stringRes=getOutput_Optionsoutput_format_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getOutput_Optionsoutput_format_widget().getAlias(),stringRes);
  }
  stringRes=getOutput_Optionsjava_version_widget().getSelectedAlias();
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getOutput_Optionsjava_version_widget().getAlias(),stringRes);
  }
  boolRes=getProcessing_Optionsoptimize_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionsoptimize_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getProcessing_Optionswhole_optimize_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionswhole_optimize_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getProcessing_Optionsvia_grimp_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionsvia_grimp_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getProcessing_Optionsvia_shimple_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionsvia_shimple_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getProcessing_Optionsomit_excepting_unit_edges_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionsomit_excepting_unit_edges_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getProcessing_Optionstrim_cfgs_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionstrim_cfgs_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getProcessing_Optionsignore_resolution_errors_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getProcessing_Optionsignore_resolution_errors_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getProcessing_Optionsplugin_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getProcessing_Optionsplugin_widget().getAlias(),stringRes);
  }
  stringRes=getProcessing_Optionswrong_staticness_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getProcessing_Optionswrong_staticness_widget().getAlias(),stringRes);
  }
  stringRes=getProcessing_Optionsfield_type_mismatches_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getProcessing_Optionsfield_type_mismatches_widget().getAlias(),stringRes);
  }
  stringRes=getProcessing_Optionsthrow_analysis_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getProcessing_Optionsthrow_analysis_widget().getAlias(),stringRes);
  }
  stringRes=getProcessing_Optionscheck_init_throw_analysis_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getProcessing_Optionscheck_init_throw_analysis_widget().getAlias(),stringRes);
  }
  boolRes=getjbenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbuse_original_names_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbuse_original_names_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbpreserve_source_annotations_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbpreserve_source_annotations_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbstabilize_local_names_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbstabilize_local_names_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_dtrenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_dtrenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_eseenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_eseenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_lsenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_lsenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_aenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_aenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_aonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_aonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_trenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_trenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_truse_older_type_assigner_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_truse_older_type_assigner_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_trcompare_type_assigners_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_trcompare_type_assigners_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_trignore_nullpointer_dereferences_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_trignore_nullpointer_dereferences_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_ulpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_ulpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_ulpunsplit_original_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_ulpunsplit_original_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_lnsenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_lnsenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_lnsonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_lnsonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_lnssort_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_lnssort_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_cpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_cpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_cponly_regular_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_cponly_regular_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_cponly_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_cponly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_daeenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_daeenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_daeonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_daeonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_cp_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_cp_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_lpenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_lpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_lpunsplit_original_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_lpunsplit_original_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_neenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_neenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_uceenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_uceenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_uceremove_unreachable_traps_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_uceremove_unreachable_traps_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjbjb_ttenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjbjb_ttenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjuse_original_names_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjuse_original_names_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_lsenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_lsenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_aenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_aenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_aonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_aonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_trenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_trenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_ulpenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_ulpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_ulpunsplit_original_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_ulpunsplit_original_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_lnsenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_lnsenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_lnsonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_lnsonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_cpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_cpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_cponly_regular_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_cponly_regular_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_cponly_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_cponly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_daeenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_daeenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_daeonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_daeonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_cp_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_cp_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_lpenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_lpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_lpunsplit_original_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_lpunsplit_original_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_neenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_neenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjjjj_uceenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjjjj_uceenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjppenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjppenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjppwjpp_cimbtenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjppwjpp_cimbtenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjppwjpp_cimbtverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjppwjpp_cimbtverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwsppenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwsppenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgsafe_forname_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgsafe_forname_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgsafe_newinstance_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgsafe_newinstance_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgall_reachable_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgall_reachable_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgimplicit_entry_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgimplicit_entry_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgtrim_clinit_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgtrim_clinit_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgtypes_for_invoke_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgtypes_for_invoke_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgjdkver_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgjdkver_widget().getAlias(),stringRes);
  }
  stringRes=getcgreflection_log_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgreflection_log_widget().getAlias(),stringRes);
  }
  stringRes=getcgguards_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgguards_widget().getAlias(),stringRes);
  }
  stringRes=getcglibrary_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcglibrary_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_chaenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_chaenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_chaverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_chaverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_chaapponly_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_chaapponly_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkignore_types_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkignore_types_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkforce_gc_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkforce_gc_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkpre_jimplify_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkpre_jimplify_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkapponly_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkapponly_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkvta_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkvta_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkrta_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkrta_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkfield_based_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkfield_based_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparktypes_for_sites_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparktypes_for_sites_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkmerge_stringbuffer_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkmerge_stringbuffer_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkstring_constants_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkstring_constants_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparksimulate_natives_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparksimulate_natives_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkempties_as_allocs_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkempties_as_allocs_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparksimple_edges_bidirectional_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparksimple_edges_bidirectional_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkon_fly_cg_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkon_fly_cg_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparksimplify_offline_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparksimplify_offline_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparksimplify_sccs_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparksimplify_sccs_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkignore_types_for_sccs_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkignore_types_for_sccs_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgcg_sparkpropagator_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_sparkpropagator_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkset_impl_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_sparkset_impl_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkdouble_set_old_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_sparkdouble_set_old_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkdouble_set_new_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_sparkdouble_set_new_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_sparkdump_html_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkdump_html_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkdump_pag_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkdump_pag_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkdump_solution_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkdump_solution_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparktopo_sort_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparktopo_sort_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkdump_types_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkdump_types_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkclass_method_var_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkclass_method_var_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkdump_answer_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkdump_answer_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkadd_tags_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkadd_tags_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkset_mass_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkset_mass_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkcs_demand_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkcs_demand_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparklazy_pts_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparklazy_pts_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgcg_sparktraversal_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparktraversal_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkpasses_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparkpasses_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_sparkgeom_pta_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkgeom_pta_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkgeom_trans_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkgeom_trans_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkgeom_blocking_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkgeom_blocking_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_sparkgeom_app_only_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_sparkgeom_app_only_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgcg_sparkgeom_dump_verbose_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparkgeom_dump_verbose_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkgeom_verify_name_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparkgeom_verify_name_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkgeom_eval_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparkgeom_eval_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkgeom_frac_base_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparkgeom_frac_base_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkgeom_runs_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_sparkgeom_runs_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkgeom_encoding_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_sparkgeom_encoding_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_sparkgeom_worklist_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_sparkgeom_worklist_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_paddleenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlebdd_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlebdd_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddledynamic_order_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddledynamic_order_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleprofile_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleprofile_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleverbosegc_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleverbosegc_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleignore_types_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleignore_types_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlepre_jimplify_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlepre_jimplify_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgcg_paddleorder_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_paddleorder_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddlebdd_nodes_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_paddlebdd_nodes_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddleconf_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddleconf_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddleq_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddleq_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddlebackend_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddlebackend_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_paddlecontext_heap_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlecontext_heap_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgcg_paddlek_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getcgcg_paddlek_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddlecontext_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddlecontext_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_paddlerta_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlerta_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlefield_based_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlefield_based_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddletypes_for_sites_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddletypes_for_sites_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlemerge_stringbuffer_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlemerge_stringbuffer_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlestring_constants_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlestring_constants_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlesimulate_natives_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlesimulate_natives_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleglobal_nodes_in_natives_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleglobal_nodes_in_natives_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlesimple_edges_bidirectional_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlesimple_edges_bidirectional_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlethis_edges_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlethis_edges_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleprecise_newinstance_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleprecise_newinstance_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getcgcg_paddlepropagator_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddlepropagator_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddleset_impl_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddleset_impl_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddledouble_set_old_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddledouble_set_old_widget().getAlias(),stringRes);
  }
  stringRes=getcgcg_paddledouble_set_new_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getcgcg_paddledouble_set_new_widget().getAlias(),stringRes);
  }
  boolRes=getcgcg_paddlecontext_counts_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlecontext_counts_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddletotal_context_counts_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddletotal_context_counts_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlemethod_context_counts_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlemethod_context_counts_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddleset_mass_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddleset_mass_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getcgcg_paddlenumber_nodes_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getcgcg_paddlenumber_nodes_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwstpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwstpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwsopenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwsopenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_mhpenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_mhpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tnenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tnenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tnavoid_deadlock_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tnavoid_deadlock_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tnopen_nesting_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tnopen_nesting_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tndo_mhp_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tndo_mhp_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tndo_tlo_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tndo_tlo_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tnprint_graph_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tnprint_graph_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tnprint_table_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tnprint_table_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjtpwjtp_tnprint_debug_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_tnprint_debug_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getwjtpwjtp_tnlocking_scheme_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getwjtpwjtp_tnlocking_scheme_widget().getAlias(),stringRes);
  }
  boolRes=getwjtpwjtp_rdcenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjtpwjtp_rdcenabled_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getwjtpwjtp_rdcfixed_class_names_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getwjtpwjtp_rdcfixed_class_names_widget().getAlias(),stringRes);
  }
  boolRes=getwjopenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjopwjop_smbenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_smbenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjopwjop_smbinsert_null_checks_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_smbinsert_null_checks_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjopwjop_smbinsert_redundant_casts_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_smbinsert_redundant_casts_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getwjopwjop_smballowed_modifier_changes_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getwjopwjop_smballowed_modifier_changes_widget().getAlias(),stringRes);
  }
  boolRes=getwjopwjop_sienabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_sienabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjopwjop_sirerun_jb_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_sirerun_jb_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjopwjop_siinsert_null_checks_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_siinsert_null_checks_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjopwjop_siinsert_redundant_casts_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjopwjop_siinsert_redundant_casts_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getwjopwjop_siexpansion_factor_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getwjopwjop_siexpansion_factor_widget().getAlias(),stringRes);
  }
  stringRes=getwjopwjop_simax_container_size_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getwjopwjop_simax_container_size_widget().getAlias(),stringRes);
  }
  stringRes=getwjopwjop_simax_inlinee_size_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getwjopwjop_simax_inlinee_size_widget().getAlias(),stringRes);
  }
  stringRes=getwjopwjop_siallowed_modifier_changes_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getwjopwjop_siallowed_modifier_changes_widget().getAlias(),stringRes);
  }
  boolRes=getwjapenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_raenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_raenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_umtenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_umtenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_uftenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_uftenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_tqtenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_tqtenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_cggenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_cggenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_cggshow_lib_meths_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_cggshow_lib_meths_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_purityenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_purityenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_puritydump_summaries_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_puritydump_summaries_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_puritydump_cg_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_puritydump_cg_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_puritydump_intra_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_puritydump_intra_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_purityprint_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_purityprint_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_purityannotate_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_purityannotate_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getwjapwjap_purityverbose_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getwjapwjap_purityverbose_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getshimpleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getshimpleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getshimplenode_elim_opt_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getshimplenode_elim_opt_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getshimplestandard_local_names_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getshimplestandard_local_names_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getshimpleextended_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getshimpleextended_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getshimpledebug_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getshimpledebug_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getstpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getstpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getsopenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getsopenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getsopsop_cpfenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getsopsop_cpfenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getsopsop_cpfprune_cfg_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getsopsop_cpfprune_cfg_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjtpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjtpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_cseenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_cseenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_csenaive_side_effect_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_csenaive_side_effect_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_bcmenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_bcmenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_bcmnaive_side_effect_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_bcmnaive_side_effect_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_lcmenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_lcmenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_lcmunroll_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_lcmunroll_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_lcmnaive_side_effect_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_lcmnaive_side_effect_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getjopjop_lcmsafety_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getjopjop_lcmsafety_widget().getAlias(),stringRes);
  }
  boolRes=getjopjop_cpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_cpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_cponly_regular_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_cponly_regular_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_cponly_stack_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_cponly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_cpfenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_cpfenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_cbfenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_cbfenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_daeenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_daeenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_daeonly_tag_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_daeonly_tag_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_daeonly_stack_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_daeonly_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_nceenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_nceenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_uce1enabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_uce1enabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_uce1remove_unreachable_traps_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_uce1remove_unreachable_traps_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_ubf1enabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_ubf1enabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_uce2enabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_uce2enabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_uce2remove_unreachable_traps_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_uce2remove_unreachable_traps_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_ubf2enabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_ubf2enabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjopjop_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjopjop_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_npcenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_npcenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_npconly_array_ref_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_npconly_array_ref_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_npcprofiling_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_npcprofiling_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_npcolorerenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_npcolorerenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcwith_all_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcwith_all_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcwith_cse_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcwith_cse_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcwith_arrayref_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcwith_arrayref_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcwith_fieldref_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcwith_fieldref_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcwith_classfield_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcwith_classfield_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcwith_rectarray_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcwith_rectarray_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcprofiling_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcprofiling_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_abcadd_color_tags_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_abcadd_color_tags_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_profilingenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_profilingenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_profilingnotmainentry_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_profilingnotmainentry_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_seaenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_seaenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_seanaive_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_seanaive_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_fieldrwenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_fieldrwenabled_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getjapjap_fieldrwthreshold_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getjapjap_fieldrwthreshold_widget().getAlias(),stringRes);
  }
  boolRes=getjapjap_cgtaggerenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_cgtaggerenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_parityenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_parityenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_patenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_patenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_lvtaggerenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_lvtaggerenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_rdtaggerenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_rdtaggerenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_cheenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_cheenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_umtenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_umtenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_litenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_litenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getjapjap_aetenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_aetenabled_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getjapjap_aetkind_widget().getSelectedAlias();
  defStringRes=""String_Node_Str"";
  if (!stringRes.equals(defStringRes)) {
    getConfig().put(getjapjap_aetkind_widget().getAlias(),stringRes);
  }
  boolRes=getjapjap_dmtenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getjapjap_dmtenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbgb_a1enabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbgb_a1enabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbgb_a1only_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbgb_a1only_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbgb_cfenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbgb_cfenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbgb_a2enabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbgb_a2enabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbgb_a2only_stack_locals_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbgb_a2only_stack_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgbgb_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getgbgb_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getgopenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getgopenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsoenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsoenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsodebug_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsodebug_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsointer_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsointer_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsosl_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsosl_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsosl2_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsosl2_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsosll_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsosll_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lsosll2_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lsosll2_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_scoenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_scoenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_phoenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_phoenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_uleenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_uleenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lpenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lpenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbbbb_lpunsplit_original_locals_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getbbbb_lpunsplit_original_locals_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getbopenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getbopenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=gettagenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(gettagenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=gettagtag_lnenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(gettagtag_lnenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=gettagtag_anenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(gettagtag_anenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=gettagtag_depenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(gettagtag_depenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=gettagtag_fieldrwenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(gettagtag_fieldrwenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getdbenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getdbenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getdbsource_is_javac_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getdbsource_is_javac_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getdbdb_transformationsenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getdbdb_transformationsenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getdbdb_renamerenabled_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getdbdb_renamerenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getdbdb_deobfuscateenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getdbdb_deobfuscateenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getdbdb_force_recompileenabled_widget().getButton().getSelection();
  defBoolRes=true;
  if (boolRes != defBoolRes) {
    getConfig().put(getdbdb_force_recompileenabled_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getApplication_Mode_Optionsinclude_all_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getApplication_Mode_Optionsinclude_all_widget().getAlias(),new Boolean(boolRes));
  }
  stringRes=getApplication_Mode_Optionsinclude_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getApplication_Mode_Optionsinclude_widget().getAlias(),stringRes);
  }
  stringRes=getApplication_Mode_Optionsexclude_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getApplication_Mode_Optionsexclude_widget().getAlias(),stringRes);
  }
  stringRes=getApplication_Mode_Optionsdynamic_class_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getApplication_Mode_Optionsdynamic_class_widget().getAlias(),stringRes);
  }
  stringRes=getApplication_Mode_Optionsdynamic_dir_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getApplication_Mode_Optionsdynamic_dir_widget().getAlias(),stringRes);
  }
  stringRes=getApplication_Mode_Optionsdynamic_package_widget().getText().getText();
  defStringRes=""String_Node_Str"";
  if ((!(stringRes.equals(defStringRes))) && (stringRes != null) && (stringRes.length() != 0)) {
    getConfig().put(getApplication_Mode_Optionsdynamic_package_widget().getAlias(),stringRes);
  }
  boolRes=getInput_Attribute_Optionskeep_line_number_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Attribute_Optionskeep_line_number_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getInput_Attribute_Optionskeep_offset_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getInput_Attribute_Optionskeep_offset_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getOutput_Attribute_Optionswrite_local_annotations_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getOutput_Attribute_Optionswrite_local_annotations_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getAnnotation_Optionsannot_purity_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getAnnotation_Optionsannot_purity_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getAnnotation_Optionsannot_nullpointer_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getAnnotation_Optionsannot_nullpointer_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getAnnotation_Optionsannot_arraybounds_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getAnnotation_Optionsannot_arraybounds_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getAnnotation_Optionsannot_side_effect_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getAnnotation_Optionsannot_side_effect_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getAnnotation_Optionsannot_fieldrw_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getAnnotation_Optionsannot_fieldrw_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getMiscellaneous_Optionstime_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getMiscellaneous_Optionstime_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getMiscellaneous_Optionssubtract_gc_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getMiscellaneous_Optionssubtract_gc_widget().getAlias(),new Boolean(boolRes));
  }
  boolRes=getMiscellaneous_Optionsno_writeout_body_releasing_widget().getButton().getSelection();
  defBoolRes=false;
  if (boolRes != defBoolRes) {
    getConfig().put(getMiscellaneous_Optionsno_writeout_body_releasing_widget().getAlias(),new Boolean(boolRes));
  }
  setSootMainClass(getSootMainClassWidget().getText().getText());
  return setSootMainProject(getSootMainProjectWidget().getText().getText());
}"
85189,"public int wrong_staticness(){
  if (wrong_staticness == 0)   return wrong_staticness_fix;
  if (wrong_staticness == 0)   return wrong_staticness_fixstrict;
  return wrong_staticness;
}","public int wrong_staticness(){
  if (wrong_staticness == 0)   return wrong_staticness_fixstrict;
  return wrong_staticness;
}"
85190,"private void postProcessDAVA(){
  Chain<SootClass> appClasses=Scene.v().getApplicationClasses();
  Map<String,String> options=PhaseOptions.v().getPhaseOptions(""String_Node_Str"");
  boolean transformations=PhaseOptions.getBoolean(options,""String_Node_Str"");
  for (  SootClass s : appClasses) {
    String fileName=SourceLocator.v().getFileNameFor(s,Options.v().output_format());
    DavaStaticBlockCleaner.v().staticBlockInlining(s);
    VoidReturnRemover.cleanClass(s);
    RemoveEmptyBodyDefaultConstructor.checkAndRemoveDefault(s);
    logger.debug(""String_Node_Str"" + fileName + ""String_Node_Str"");
    for (    SootMethod m : s.getMethods()) {
      if (m.hasActiveBody()) {
        DavaBody body=(DavaBody)m.getActiveBody();
        if (transformations) {
          body.analyzeAST();
        }
 else {
          body.applyBugFixes();
        }
      }
 else {
        continue;
      }
    }
  }
  if (transformations) {
    InterProceduralAnalyses.applyInterProceduralAnalyses();
  }
  outputDava();
}","private void postProcessDAVA(){
  Chain<SootClass> appClasses=Scene.v().getApplicationClasses();
  Map<String,String> options=PhaseOptions.v().getPhaseOptions(""String_Node_Str"");
  boolean transformations=PhaseOptions.getBoolean(options,""String_Node_Str"");
  for (  SootClass s : appClasses) {
    String fileName=SourceLocator.v().getFileNameFor(s,Options.v().output_format());
    DavaStaticBlockCleaner.v().staticBlockInlining(s);
    VoidReturnRemover.cleanClass(s);
    RemoveEmptyBodyDefaultConstructor.checkAndRemoveDefault(s);
    logger.debug(""String_Node_Str"" + fileName + ""String_Node_Str"");
    for (    SootMethod m : s.getMethods()) {
      if (m.hasActiveBody()) {
        DavaBody body=(DavaBody)m.getActiveBody();
        if (transformations) {
          body.analyzeAST();
        }
 else {
          body.applyBugFixes();
        }
      }
 else {
        continue;
      }
    }
  }
  if (transformations) {
    InterProceduralAnalyses.applyInterProceduralAnalyses();
  }
}"
85191,"public static void checkAndRemoveDefault(SootClass s){
  debug(""String_Node_Str"" + s.getName());
  List methods=s.getMethods();
  Iterator it=methods.iterator();
  List<SootMethod> constructors=new ArrayList<SootMethod>();
  while (it.hasNext()) {
    SootMethod method=(SootMethod)it.next();
    debug(""String_Node_Str"" + method.getName());
    if (method.getName().indexOf(""String_Node_Str"") > -1) {
      constructors.add(method);
    }
  }
  if (constructors.size() != 1) {
    debug(""String_Node_Str"");
    return;
  }
  SootMethod constructor=constructors.get(0);
  if (constructor.getParameterCount() != 0) {
    debug(""String_Node_Str"");
    return;
  }
  debug(""String_Node_Str"");
  if (!constructor.hasActiveBody()) {
    debug(""String_Node_Str"");
    return;
  }
  Body body=constructor.getActiveBody();
  Chain units=((DavaBody)body).getUnits();
  if (units.size() != 1) {
    debug(""String_Node_Str"");
    return;
  }
  ASTNode AST=(ASTNode)units.getFirst();
  if (!(AST instanceof ASTMethodNode)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ASTMethodNode methodNode=(ASTMethodNode)AST;
  debug(""String_Node_Str"");
  List<Object> subBodies=methodNode.get_SubBodies();
  if (subBodies.size() != 1) {
    debug(""String_Node_Str"");
    return;
  }
  List methodBody=(List)subBodies.get(0);
  if (methodBody.size() != 0) {
    debug(""String_Node_Str"");
    return;
  }
  debug(""String_Node_Str"");
  if (((DavaBody)body).get_ConstructorExpr().getArgCount() != 0) {
    debug(""String_Node_Str"");
    return;
  }
  debug(""String_Node_Str"");
  s.removeMethod(constructor);
}","public static void checkAndRemoveDefault(SootClass s){
  debug(""String_Node_Str"" + s.getName());
  List methods=s.getMethods();
  Iterator it=methods.iterator();
  List<SootMethod> constructors=new ArrayList<SootMethod>();
  while (it.hasNext()) {
    SootMethod method=(SootMethod)it.next();
    debug(""String_Node_Str"" + method.getName());
    if (method.getName().indexOf(""String_Node_Str"") > -1) {
      constructors.add(method);
    }
  }
  if (constructors.size() != 1) {
    debug(""String_Node_Str"");
    return;
  }
  SootMethod constructor=constructors.get(0);
  if (constructor.getParameterCount() != 0) {
    debug(""String_Node_Str"");
    return;
  }
  debug(""String_Node_Str"");
  if (!constructor.hasActiveBody()) {
    debug(""String_Node_Str"");
    return;
  }
  if (!constructor.isPublic()) {
    debug(""String_Node_Str"");
    return;
  }
  Body body=constructor.getActiveBody();
  Chain units=((DavaBody)body).getUnits();
  if (units.size() != 1) {
    debug(""String_Node_Str"");
    return;
  }
  ASTNode AST=(ASTNode)units.getFirst();
  if (!(AST instanceof ASTMethodNode)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ASTMethodNode methodNode=(ASTMethodNode)AST;
  debug(""String_Node_Str"");
  List<Object> subBodies=methodNode.get_SubBodies();
  if (subBodies.size() != 1) {
    debug(""String_Node_Str"");
    return;
  }
  List methodBody=(List)subBodies.get(0);
  if (methodBody.size() != 0) {
    debug(""String_Node_Str"");
    return;
  }
  debug(""String_Node_Str"");
  if (((DavaBody)body).get_ConstructorExpr().getArgCount() != 0) {
    debug(""String_Node_Str"");
    return;
  }
  debug(""String_Node_Str"");
  s.removeMethod(constructor);
}"
85192,"private void postProcessDAVA(){
  Chain<SootClass> appClasses=Scene.v().getApplicationClasses();
  Map<String,String> options=PhaseOptions.v().getPhaseOptions(""String_Node_Str"");
  boolean transformations=PhaseOptions.getBoolean(options,""String_Node_Str"");
  for (  SootClass s : appClasses) {
    String fileName=SourceLocator.v().getFileNameFor(s,Options.v().output_format());
    DavaStaticBlockCleaner.v().staticBlockInlining(s);
    VoidReturnRemover.cleanClass(s);
    RemoveEmptyBodyDefaultConstructor.checkAndRemoveDefault(s);
    logger.debug(""String_Node_Str"" + fileName + ""String_Node_Str"");
    for (    SootMethod m : s.getMethods()) {
      if (m.hasActiveBody()) {
        DavaBody body=(DavaBody)m.getActiveBody();
        if (transformations) {
          body.analyzeAST();
        }
 else {
          body.applyBugFixes();
        }
      }
 else {
        continue;
      }
    }
  }
  if (transformations) {
    InterProceduralAnalyses.applyInterProceduralAnalyses();
  }
  outputDava();
}","private void postProcessDAVA(){
  Chain<SootClass> appClasses=Scene.v().getApplicationClasses();
  Map<String,String> options=PhaseOptions.v().getPhaseOptions(""String_Node_Str"");
  boolean transformations=PhaseOptions.getBoolean(options,""String_Node_Str"");
  for (  SootClass s : appClasses) {
    String fileName=SourceLocator.v().getFileNameFor(s,Options.v().output_format());
    DavaStaticBlockCleaner.v().staticBlockInlining(s);
    VoidReturnRemover.cleanClass(s);
    RemoveEmptyBodyDefaultConstructor.checkAndRemoveDefault(s);
    logger.debug(""String_Node_Str"" + fileName + ""String_Node_Str"");
    for (    SootMethod m : s.getMethods()) {
      if (m.hasActiveBody()) {
        DavaBody body=(DavaBody)m.getActiveBody();
        if (transformations) {
          body.analyzeAST();
        }
 else {
          body.applyBugFixes();
        }
      }
 else {
        continue;
      }
    }
  }
  if (transformations) {
    InterProceduralAnalyses.applyInterProceduralAnalyses();
  }
}"
85193,"public static void checkAndRemoveDefault(SootClass s){
  debug(""String_Node_Str"" + s.getName());
  List methods=s.getMethods();
  Iterator it=methods.iterator();
  List<SootMethod> constructors=new ArrayList<SootMethod>();
  while (it.hasNext()) {
    SootMethod method=(SootMethod)it.next();
    debug(""String_Node_Str"" + method.getName());
    if (method.getName().indexOf(""String_Node_Str"") > -1) {
      constructors.add(method);
    }
  }
  if (constructors.size() != 1) {
    debug(""String_Node_Str"");
    return;
  }
  SootMethod constructor=constructors.get(0);
  if (constructor.getParameterCount() != 0) {
    debug(""String_Node_Str"");
    return;
  }
  debug(""String_Node_Str"");
  if (!constructor.hasActiveBody()) {
    debug(""String_Node_Str"");
    return;
  }
  Body body=constructor.getActiveBody();
  Chain units=((DavaBody)body).getUnits();
  if (units.size() != 1) {
    debug(""String_Node_Str"");
    return;
  }
  ASTNode AST=(ASTNode)units.getFirst();
  if (!(AST instanceof ASTMethodNode)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ASTMethodNode methodNode=(ASTMethodNode)AST;
  debug(""String_Node_Str"");
  List<Object> subBodies=methodNode.get_SubBodies();
  if (subBodies.size() != 1) {
    debug(""String_Node_Str"");
    return;
  }
  List methodBody=(List)subBodies.get(0);
  if (methodBody.size() != 0) {
    debug(""String_Node_Str"");
    return;
  }
  debug(""String_Node_Str"");
  if (((DavaBody)body).get_ConstructorExpr().getArgCount() != 0) {
    debug(""String_Node_Str"");
    return;
  }
  debug(""String_Node_Str"");
  s.removeMethod(constructor);
}","public static void checkAndRemoveDefault(SootClass s){
  debug(""String_Node_Str"" + s.getName());
  List methods=s.getMethods();
  Iterator it=methods.iterator();
  List<SootMethod> constructors=new ArrayList<SootMethod>();
  while (it.hasNext()) {
    SootMethod method=(SootMethod)it.next();
    debug(""String_Node_Str"" + method.getName());
    if (method.getName().indexOf(""String_Node_Str"") > -1) {
      constructors.add(method);
    }
  }
  if (constructors.size() != 1) {
    debug(""String_Node_Str"");
    return;
  }
  SootMethod constructor=constructors.get(0);
  if (constructor.getParameterCount() != 0) {
    debug(""String_Node_Str"");
    return;
  }
  debug(""String_Node_Str"");
  if (!constructor.hasActiveBody()) {
    debug(""String_Node_Str"");
    return;
  }
  if (!constructor.isPublic()) {
    debug(""String_Node_Str"");
    return;
  }
  Body body=constructor.getActiveBody();
  Chain units=((DavaBody)body).getUnits();
  if (units.size() != 1) {
    debug(""String_Node_Str"");
    return;
  }
  ASTNode AST=(ASTNode)units.getFirst();
  if (!(AST instanceof ASTMethodNode)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ASTMethodNode methodNode=(ASTMethodNode)AST;
  debug(""String_Node_Str"");
  List<Object> subBodies=methodNode.get_SubBodies();
  if (subBodies.size() != 1) {
    debug(""String_Node_Str"");
    return;
  }
  List methodBody=(List)subBodies.get(0);
  if (methodBody.size() != 0) {
    debug(""String_Node_Str"");
    return;
  }
  debug(""String_Node_Str"");
  if (((DavaBody)body).get_ConstructorExpr().getArgCount() != 0) {
    debug(""String_Node_Str"");
    return;
  }
  debug(""String_Node_Str"");
  s.removeMethod(constructor);
}"
85194,"public static Type eval_(Typing tg,Value expr,Stmt stmt,JimpleBody jb){
  if (expr instanceof ThisRef) {
    return ((ThisRef)expr).getType();
  }
 else   if (expr instanceof ParameterRef) {
    return ((ParameterRef)expr).getType();
  }
 else   if (expr instanceof Local) {
    Local ex=(Local)expr;
    if (tg == null) {
      return null;
    }
 else {
      return tg.get(ex);
    }
  }
 else   if (expr instanceof BinopExpr) {
    BinopExpr be=(BinopExpr)expr;
    Value opl=be.getOp1(), opr=be.getOp2();
    Type tl=eval_(tg,opl,stmt,jb), tr=eval_(tg,opr,stmt,jb);
    if (expr instanceof CmpExpr || expr instanceof CmpgExpr || expr instanceof CmplExpr) {
      return ByteType.v();
    }
 else     if (expr instanceof GeExpr || expr instanceof GtExpr || expr instanceof LeExpr|| expr instanceof LtExpr|| expr instanceof EqExpr|| expr instanceof NeExpr) {
      return BooleanType.v();
    }
 else     if (expr instanceof ShlExpr) {
      if (tl instanceof IntegerType) {
        return IntType.v();
      }
 else {
        return tl;
      }
    }
 else     if (expr instanceof ShrExpr || expr instanceof UshrExpr) {
      return tl;
    }
 else     if (expr instanceof AddExpr || expr instanceof SubExpr || expr instanceof MulExpr|| expr instanceof DivExpr|| expr instanceof RemExpr) {
      if (tl instanceof IntegerType) {
        return IntType.v();
      }
 else {
        return tl;
      }
    }
 else     if (expr instanceof AndExpr || expr instanceof OrExpr || expr instanceof XorExpr) {
      if (tl instanceof IntegerType && tr instanceof IntegerType) {
        if (tl instanceof BooleanType) {
          if (tr instanceof BooleanType) {
            return BooleanType.v();
          }
 else {
            return tr;
          }
        }
 else         if (tr instanceof BooleanType) {
          return tl;
        }
 else {
          Collection<Type> rs=AugHierarchy.lcas_(tl,tr);
          for (          Type r : rs) {
            return r;
          }
          throw new RuntimeException();
        }
      }
 else {
        return tl;
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + expr);
    }
  }
 else   if (expr instanceof NegExpr) {
    Type t=eval_(tg,((NegExpr)expr).getOp(),stmt,jb);
    if (t instanceof IntegerType) {
      if (t instanceof Integer1Type || t instanceof BooleanType || t instanceof Integer127Type|| t instanceof ByteType) {
        return ByteType.v();
      }
 else       if (t instanceof ShortType || t instanceof Integer32767Type) {
        return ShortType.v();
      }
 else {
        return IntType.v();
      }
    }
 else {
      return t;
    }
  }
 else   if (expr instanceof CaughtExceptionRef) {
    RefType r=null;
    RefType throwableType=Scene.v().getRefType(""String_Node_Str"");
    for (    RefType t : TrapManager.getExceptionTypesOf(stmt,jb)) {
      if (r == null) {
        r=t;
      }
 else       if (t.getSootClass().isPhantom() || r.getSootClass().isPhantom()) {
        r=throwableType;
      }
 else {
        r=BytecodeHierarchy.lcsc(r,t,throwableType);
      }
    }
    if (r == null) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
    }
    return r;
  }
 else   if (expr instanceof ArrayRef) {
    Local av=(Local)((ArrayRef)expr).getBase();
    Type at=tg.get(av);
    if (at instanceof ArrayType) {
      return ((ArrayType)at).getElementType();
    }
 else     if (at instanceof RefType) {
      RefType ref=(RefType)at;
      if (ref.getSootClass().getName().equals(""String_Node_Str"") || ref.getSootClass().getName().equals(""String_Node_Str"") || ref.getSootClass().getName().equals(""String_Node_Str"")) {
        return ref;
      }
 else {
        return BottomType.v();
      }
    }
 else {
      return BottomType.v();
    }
  }
 else   if (expr instanceof NewArrayExpr) {
    return ((NewArrayExpr)expr).getBaseType().makeArrayType();
  }
 else   if (expr instanceof NewMultiArrayExpr) {
    return ((NewMultiArrayExpr)expr).getBaseType();
  }
 else   if (expr instanceof CastExpr) {
    return ((CastExpr)expr).getCastType();
  }
 else   if (expr instanceof InstanceOfExpr) {
    return BooleanType.v();
  }
 else   if (expr instanceof LengthExpr) {
    return IntType.v();
  }
 else   if (expr instanceof InvokeExpr) {
    return ((InvokeExpr)expr).getMethodRef().returnType();
  }
 else   if (expr instanceof NewExpr) {
    return ((NewExpr)expr).getBaseType();
  }
 else   if (expr instanceof FieldRef) {
    return ((FieldRef)expr).getType();
  }
 else   if (expr instanceof DoubleConstant) {
    return DoubleType.v();
  }
 else   if (expr instanceof FloatConstant) {
    return FloatType.v();
  }
 else   if (expr instanceof IntConstant) {
    int value=((IntConstant)expr).value;
    if (value >= 0 && value < 2) {
      return Integer1Type.v();
    }
 else     if (value >= 2 && value < 128) {
      return Integer127Type.v();
    }
 else     if (value >= -128 && value < 0) {
      return ByteType.v();
    }
 else     if (value >= 128 && value < 32768) {
      return Integer32767Type.v();
    }
 else     if (value >= -32768 && value < -128) {
      return ShortType.v();
    }
 else     if (value >= 32768 && value < 65536) {
      return CharType.v();
    }
 else {
      return IntType.v();
    }
  }
 else   if (expr instanceof LongConstant) {
    return LongType.v();
  }
 else   if (expr instanceof NullConstant) {
    return NullType.v();
  }
 else   if (expr instanceof StringConstant) {
    return RefType.v(""String_Node_Str"");
  }
 else   if (expr instanceof ClassConstant) {
    return RefType.v(""String_Node_Str"");
  }
 else   if (expr instanceof MethodHandle) {
    return RefType.v(""String_Node_Str"");
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + expr);
  }
}","public static Type eval_(Typing tg,Value expr,Stmt stmt,JimpleBody jb){
  if (expr instanceof ThisRef) {
    return ((ThisRef)expr).getType();
  }
 else   if (expr instanceof ParameterRef) {
    return ((ParameterRef)expr).getType();
  }
 else   if (expr instanceof Local) {
    Local ex=(Local)expr;
    if (tg == null) {
      return null;
    }
 else {
      return tg.get(ex);
    }
  }
 else   if (expr instanceof BinopExpr) {
    BinopExpr be=(BinopExpr)expr;
    Value opl=be.getOp1(), opr=be.getOp2();
    Type tl=eval_(tg,opl,stmt,jb), tr=eval_(tg,opr,stmt,jb);
    if (expr instanceof CmpExpr || expr instanceof CmpgExpr || expr instanceof CmplExpr) {
      return ByteType.v();
    }
 else     if (expr instanceof GeExpr || expr instanceof GtExpr || expr instanceof LeExpr|| expr instanceof LtExpr|| expr instanceof EqExpr|| expr instanceof NeExpr) {
      return BooleanType.v();
    }
 else     if (expr instanceof ShlExpr) {
      if (tl instanceof IntegerType) {
        return IntType.v();
      }
 else {
        return tl;
      }
    }
 else     if (expr instanceof ShrExpr || expr instanceof UshrExpr) {
      return tl;
    }
 else     if (expr instanceof AddExpr || expr instanceof SubExpr || expr instanceof MulExpr|| expr instanceof DivExpr|| expr instanceof RemExpr) {
      if (tl instanceof IntegerType) {
        return IntType.v();
      }
 else {
        return tl;
      }
    }
 else     if (expr instanceof AndExpr || expr instanceof OrExpr || expr instanceof XorExpr) {
      if (tl instanceof IntegerType && tr instanceof IntegerType) {
        if (tl instanceof BooleanType) {
          if (tr instanceof BooleanType) {
            return BooleanType.v();
          }
 else {
            return tr;
          }
        }
 else         if (tr instanceof BooleanType) {
          return tl;
        }
 else {
          Collection<Type> rs=AugHierarchy.lcas_(tl,tr);
          for (          Type r : rs) {
            return r;
          }
          throw new RuntimeException();
        }
      }
 else {
        return tl;
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + expr);
    }
  }
 else   if (expr instanceof NegExpr) {
    Type t=eval_(tg,((NegExpr)expr).getOp(),stmt,jb);
    if (t instanceof IntegerType) {
      if (t instanceof Integer1Type || t instanceof BooleanType || t instanceof Integer127Type|| t instanceof ByteType) {
        return ByteType.v();
      }
 else       if (t instanceof ShortType || t instanceof Integer32767Type) {
        return ShortType.v();
      }
 else {
        return IntType.v();
      }
    }
 else {
      return t;
    }
  }
 else   if (expr instanceof CaughtExceptionRef) {
    RefType r=null;
    RefType throwableType=Scene.v().getRefType(""String_Node_Str"");
    for (    RefType t : TrapManager.getExceptionTypesOf(stmt,jb)) {
      if (r == null) {
        if (t.getSootClass().isPhantom()) {
          r=throwableType;
        }
 else {
          r=t;
        }
      }
 else {
        if (t.getSootClass().isPhantom()) {
          r=throwableType;
        }
 else {
          r=BytecodeHierarchy.lcsc(r,t,throwableType);
        }
      }
    }
    if (r == null) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
    }
    return r;
  }
 else   if (expr instanceof ArrayRef) {
    Local av=(Local)((ArrayRef)expr).getBase();
    Type at=tg.get(av);
    if (at instanceof ArrayType) {
      return ((ArrayType)at).getElementType();
    }
 else     if (at instanceof RefType) {
      RefType ref=(RefType)at;
      if (ref.getSootClass().getName().equals(""String_Node_Str"") || ref.getSootClass().getName().equals(""String_Node_Str"") || ref.getSootClass().getName().equals(""String_Node_Str"")) {
        return ref;
      }
 else {
        return BottomType.v();
      }
    }
 else {
      return BottomType.v();
    }
  }
 else   if (expr instanceof NewArrayExpr) {
    return ((NewArrayExpr)expr).getBaseType().makeArrayType();
  }
 else   if (expr instanceof NewMultiArrayExpr) {
    return ((NewMultiArrayExpr)expr).getBaseType();
  }
 else   if (expr instanceof CastExpr) {
    return ((CastExpr)expr).getCastType();
  }
 else   if (expr instanceof InstanceOfExpr) {
    return BooleanType.v();
  }
 else   if (expr instanceof LengthExpr) {
    return IntType.v();
  }
 else   if (expr instanceof InvokeExpr) {
    return ((InvokeExpr)expr).getMethodRef().returnType();
  }
 else   if (expr instanceof NewExpr) {
    return ((NewExpr)expr).getBaseType();
  }
 else   if (expr instanceof FieldRef) {
    return ((FieldRef)expr).getType();
  }
 else   if (expr instanceof DoubleConstant) {
    return DoubleType.v();
  }
 else   if (expr instanceof FloatConstant) {
    return FloatType.v();
  }
 else   if (expr instanceof IntConstant) {
    int value=((IntConstant)expr).value;
    if (value >= 0 && value < 2) {
      return Integer1Type.v();
    }
 else     if (value >= 2 && value < 128) {
      return Integer127Type.v();
    }
 else     if (value >= -128 && value < 0) {
      return ByteType.v();
    }
 else     if (value >= 128 && value < 32768) {
      return Integer32767Type.v();
    }
 else     if (value >= -32768 && value < -128) {
      return ShortType.v();
    }
 else     if (value >= 32768 && value < 65536) {
      return CharType.v();
    }
 else {
      return IntType.v();
    }
  }
 else   if (expr instanceof LongConstant) {
    return LongType.v();
  }
 else   if (expr instanceof NullConstant) {
    return NullType.v();
  }
 else   if (expr instanceof StringConstant) {
    return RefType.v(""String_Node_Str"");
  }
 else   if (expr instanceof ClassConstant) {
    return RefType.v(""String_Node_Str"");
  }
 else   if (expr instanceof MethodHandle) {
    return RefType.v(""String_Node_Str"");
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + expr);
  }
}"
85195,"private static Deque<RefType> superclassPath(RefType t,RefType anchor){
  Deque<RefType> r=new LinkedList<RefType>();
  r.addFirst(t);
  if (t.getSootClass().isPhantom() && anchor != null) {
    r.addFirst(anchor);
    return r;
  }
  SootClass sc=t.getSootClass();
  while (sc.hasSuperclass()) {
    sc=sc.getSuperclass();
    r.addFirst(sc.getType());
    if (sc.isPhantom() && anchor != null) {
      r.addFirst(anchor);
      break;
    }
  }
  return r;
}","private static Deque<RefType> superclassPath(RefType t,RefType anchor){
  Deque<RefType> r=new ArrayDeque<RefType>();
  r.addFirst(t);
  if (TypeResolver.typesEqual(t,anchor)) {
    return r;
  }
  SootClass sc=t.getSootClass();
  while (sc.hasSuperclass()) {
    sc=sc.getSuperclass();
    RefType cur=sc.getType();
    r.addFirst(cur);
    if (TypeResolver.typesEqual(cur,anchor)) {
      break;
    }
  }
  if (!TypeResolver.typesEqual(r.getFirst(),anchor)) {
    r.addFirst(anchor);
  }
  return r;
}"
85196,"public void caseAssignStmt(AssignStmt stmt){
  Value lhs=stmt.getLeftOp();
  Value rhs=stmt.getRightOp();
  Type tlhs=null;
  if (lhs instanceof Local) {
    tlhs=this.tg.get((Local)lhs);
  }
 else   if (lhs instanceof ArrayRef) {
    ArrayRef aref=(ArrayRef)lhs;
    Local base=(Local)aref.getBase();
    ArrayType at=null;
    Type tgType=this.tg.get(base);
    if (tgType instanceof ArrayType) {
      at=(ArrayType)tgType;
    }
 else {
      if (tgType == Scene.v().getObjectType() && rhs instanceof Local) {
        Type rhsType=this.tg.get((Local)rhs);
        if (rhsType instanceof PrimType) {
          if (defs == null) {
            defs=LocalDefs.Factory.newLocalDefs(jb);
            uses=LocalUses.Factory.newLocalUses(jb,defs);
          }
          for (          Unit defU : defs.getDefsOfAt(base,stmt)) {
            if (defU instanceof AssignStmt) {
              AssignStmt defUas=(AssignStmt)defU;
              if (defUas.getRightOp() instanceof NewArrayExpr) {
                at=(ArrayType)defUas.getRightOp().getType();
                break;
              }
            }
          }
        }
      }
      if (at == null) {
        at=tgType.makeArrayType();
      }
    }
    tlhs=((ArrayType)at).getElementType();
    this.handleArrayRef(aref,stmt);
    aref.setBase((Local)this.uv.visit(aref.getBase(),at,stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
    stmt.setLeftOp(this.uv.visit(lhs,tlhs,stmt));
  }
 else   if (lhs instanceof FieldRef) {
    tlhs=((FieldRef)lhs).getFieldRef().type();
    if (lhs instanceof InstanceFieldRef) {
      this.handleInstanceFieldRef((InstanceFieldRef)lhs,stmt);
    }
  }
  lhs=stmt.getLeftOp();
  rhs=stmt.getRightOp();
  if (rhs instanceof Local) {
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof ArrayRef) {
    ArrayRef aref=(ArrayRef)rhs;
    Local base=(Local)aref.getBase();
    ArrayType at=null;
    Type et=null;
    if (this.tg.get(base) instanceof ArrayType) {
      at=(ArrayType)this.tg.get(base);
    }
 else {
      Type bt=this.tg.get(base);
      if (bt instanceof RefType || bt instanceof NullType) {
        RefType rt=bt instanceof NullType ? null : (RefType)bt;
        if (rt == null || rt.getSootClass().getName().equals(""String_Node_Str"") || rt.getSootClass().getName().equals(""String_Node_Str"") || rt.getSootClass().getName().equals(""String_Node_Str"")) {
          if (defs == null) {
            defs=LocalDefs.Factory.newLocalDefs(jb);
            uses=LocalUses.Factory.newLocalUses(jb,defs);
          }
          outer:           for (          UnitValueBoxPair usePair : uses.getUsesOf(stmt)) {
            Stmt useStmt=(Stmt)usePair.getUnit();
            if (useStmt.containsInvokeExpr()) {
              for (int i=0; i < useStmt.getInvokeExpr().getArgCount(); i++) {
                if (useStmt.getInvokeExpr().getArg(i) == usePair.getValueBox().getValue()) {
                  et=useStmt.getInvokeExpr().getMethod().getParameterType(i);
                  at=et.makeArrayType();
                  break outer;
                }
              }
            }
 else             if (useStmt instanceof IfStmt) {
              IfStmt ifStmt=(IfStmt)useStmt;
              if (ifStmt.getCondition() instanceof EqExpr) {
                EqExpr expr=(EqExpr)ifStmt.getCondition();
                final Value other;
                if (expr.getOp1() == usePair.getValueBox().getValue()) {
                  other=expr.getOp2();
                }
 else {
                  other=expr.getOp1();
                }
                Type newEt=getTargetType(other);
                if (newEt != null) {
                  et=newEt;
                }
              }
            }
 else             if (useStmt instanceof AssignStmt) {
              AssignStmt useAssignStmt=(AssignStmt)useStmt;
              if (useAssignStmt.getRightOp() instanceof BinopExpr) {
                BinopExpr binOp=(BinopExpr)useAssignStmt.getRightOp();
                final Value other;
                if (binOp.getOp1() == usePair.getValueBox().getValue()) {
                  other=binOp.getOp2();
                }
 else {
                  other=binOp.getOp1();
                }
                Type newEt=getTargetType(other);
                if (newEt != null) {
                  et=newEt;
                }
              }
            }
 else             if (useStmt instanceof ReturnStmt) {
              et=jb.getMethod().getReturnType();
            }
          }
        }
      }
      if (at == null) {
        at=et.makeArrayType();
      }
    }
    Type trhs=((ArrayType)at).getElementType();
    this.handleArrayRef(aref,stmt);
    aref.setBase((Local)this.uv.visit(aref.getBase(),at,stmt));
    stmt.setRightOp(this.uv.visit(rhs,trhs,stmt));
  }
 else   if (rhs instanceof InstanceFieldRef) {
    this.handleInstanceFieldRef((InstanceFieldRef)rhs,stmt);
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof BinopExpr) {
    this.handleBinopExpr((BinopExpr)rhs,stmt,tlhs);
  }
 else   if (rhs instanceof InvokeExpr) {
    this.handleInvokeExpr((InvokeExpr)rhs,stmt);
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof CastExpr) {
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof InstanceOfExpr) {
    InstanceOfExpr ioe=(InstanceOfExpr)rhs;
    ioe.setOp(this.uv.visit(ioe.getOp(),RefType.v(""String_Node_Str""),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NewArrayExpr) {
    NewArrayExpr nae=(NewArrayExpr)rhs;
    nae.setSize(this.uv.visit(nae.getSize(),IntType.v(),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NewMultiArrayExpr) {
    NewMultiArrayExpr nmae=(NewMultiArrayExpr)rhs;
    for (int i=0; i < nmae.getSizeCount(); i++) {
      nmae.setSize(i,this.uv.visit(nmae.getSize(i),IntType.v(),stmt));
    }
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof LengthExpr) {
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NegExpr) {
    ((NegExpr)rhs).setOp(this.uv.visit(((NegExpr)rhs).getOp(),tlhs,stmt));
  }
 else   if (rhs instanceof Constant) {
    if (!(rhs instanceof NullConstant)) {
      stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
    }
  }
}","public void caseAssignStmt(AssignStmt stmt){
  Value lhs=stmt.getLeftOp();
  Value rhs=stmt.getRightOp();
  Type tlhs=null;
  if (lhs instanceof Local) {
    tlhs=this.tg.get((Local)lhs);
  }
 else   if (lhs instanceof ArrayRef) {
    ArrayRef aref=(ArrayRef)lhs;
    Local base=(Local)aref.getBase();
    ArrayType at=null;
    Type tgType=this.tg.get(base);
    if (tgType instanceof ArrayType) {
      at=(ArrayType)tgType;
    }
 else {
      if (tgType == Scene.v().getObjectType() && rhs instanceof Local) {
        Type rhsType=this.tg.get((Local)rhs);
        if (rhsType instanceof PrimType) {
          if (defs == null) {
            defs=LocalDefs.Factory.newLocalDefs(jb);
            uses=LocalUses.Factory.newLocalUses(jb,defs);
          }
          for (          Unit defU : defs.getDefsOfAt(base,stmt)) {
            if (defU instanceof AssignStmt) {
              AssignStmt defUas=(AssignStmt)defU;
              if (defUas.getRightOp() instanceof NewArrayExpr) {
                at=(ArrayType)defUas.getRightOp().getType();
                break;
              }
            }
          }
        }
      }
      if (at == null) {
        at=tgType.makeArrayType();
      }
    }
    tlhs=((ArrayType)at).getElementType();
    this.handleArrayRef(aref,stmt);
    aref.setBase((Local)this.uv.visit(aref.getBase(),at,stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
    stmt.setLeftOp(this.uv.visit(lhs,tlhs,stmt));
  }
 else   if (lhs instanceof FieldRef) {
    tlhs=((FieldRef)lhs).getFieldRef().type();
    if (lhs instanceof InstanceFieldRef) {
      this.handleInstanceFieldRef((InstanceFieldRef)lhs,stmt);
    }
  }
  lhs=stmt.getLeftOp();
  rhs=stmt.getRightOp();
  if (rhs instanceof Local) {
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof ArrayRef) {
    ArrayRef aref=(ArrayRef)rhs;
    Local base=(Local)aref.getBase();
    ArrayType at=null;
    Type et=null;
    if (this.tg.get(base) instanceof ArrayType) {
      at=(ArrayType)this.tg.get(base);
    }
 else {
      Type bt=this.tg.get(base);
      et=bt;
      if (bt instanceof RefType || bt instanceof NullType) {
        RefType rt=bt instanceof NullType ? null : (RefType)bt;
        if (rt == null || rt.getSootClass().getName().equals(""String_Node_Str"") || rt.getSootClass().getName().equals(""String_Node_Str"") || rt.getSootClass().getName().equals(""String_Node_Str"")) {
          if (defs == null) {
            defs=LocalDefs.Factory.newLocalDefs(jb);
            uses=LocalUses.Factory.newLocalUses(jb,defs);
          }
          outer:           for (          UnitValueBoxPair usePair : uses.getUsesOf(stmt)) {
            Stmt useStmt=(Stmt)usePair.getUnit();
            if (useStmt.containsInvokeExpr()) {
              for (int i=0; i < useStmt.getInvokeExpr().getArgCount(); i++) {
                if (useStmt.getInvokeExpr().getArg(i) == usePair.getValueBox().getValue()) {
                  et=useStmt.getInvokeExpr().getMethod().getParameterType(i);
                  at=et.makeArrayType();
                  break outer;
                }
              }
            }
 else             if (useStmt instanceof IfStmt) {
              IfStmt ifStmt=(IfStmt)useStmt;
              if (ifStmt.getCondition() instanceof EqExpr) {
                EqExpr expr=(EqExpr)ifStmt.getCondition();
                final Value other;
                if (expr.getOp1() == usePair.getValueBox().getValue()) {
                  other=expr.getOp2();
                }
 else {
                  other=expr.getOp1();
                }
                Type newEt=getTargetType(other);
                if (newEt != null) {
                  et=newEt;
                }
              }
            }
 else             if (useStmt instanceof AssignStmt) {
              AssignStmt useAssignStmt=(AssignStmt)useStmt;
              if (useAssignStmt.getRightOp() instanceof BinopExpr) {
                BinopExpr binOp=(BinopExpr)useAssignStmt.getRightOp();
                final Value other;
                if (binOp.getOp1() == usePair.getValueBox().getValue()) {
                  other=binOp.getOp2();
                }
 else {
                  other=binOp.getOp1();
                }
                Type newEt=getTargetType(other);
                if (newEt != null) {
                  et=newEt;
                }
              }
            }
 else             if (useStmt instanceof ReturnStmt) {
              et=jb.getMethod().getReturnType();
            }
          }
        }
      }
      if (at == null) {
        at=et.makeArrayType();
      }
    }
    Type trhs=((ArrayType)at).getElementType();
    this.handleArrayRef(aref,stmt);
    aref.setBase((Local)this.uv.visit(aref.getBase(),at,stmt));
    stmt.setRightOp(this.uv.visit(rhs,trhs,stmt));
  }
 else   if (rhs instanceof InstanceFieldRef) {
    this.handleInstanceFieldRef((InstanceFieldRef)rhs,stmt);
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof BinopExpr) {
    this.handleBinopExpr((BinopExpr)rhs,stmt,tlhs);
  }
 else   if (rhs instanceof InvokeExpr) {
    this.handleInvokeExpr((InvokeExpr)rhs,stmt);
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof CastExpr) {
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof InstanceOfExpr) {
    InstanceOfExpr ioe=(InstanceOfExpr)rhs;
    ioe.setOp(this.uv.visit(ioe.getOp(),RefType.v(""String_Node_Str""),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NewArrayExpr) {
    NewArrayExpr nae=(NewArrayExpr)rhs;
    nae.setSize(this.uv.visit(nae.getSize(),IntType.v(),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NewMultiArrayExpr) {
    NewMultiArrayExpr nmae=(NewMultiArrayExpr)rhs;
    for (int i=0; i < nmae.getSizeCount(); i++) {
      nmae.setSize(i,this.uv.visit(nmae.getSize(i),IntType.v(),stmt));
    }
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof LengthExpr) {
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NegExpr) {
    ((NegExpr)rhs).setOp(this.uv.visit(((NegExpr)rhs).getOp(),tlhs,stmt));
  }
 else   if (rhs instanceof Constant) {
    if (!(rhs instanceof NullConstant)) {
      stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
    }
  }
}"
85197,"private SootMethod tryResolve(StringBuffer trace){
  if (declaringClass.getName().equals(""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  SootClass cl=declaringClass;
  while (true) {
    if (trace != null) {
      trace.append(""String_Node_Str"" + cl + ""String_Node_Str""+ cl.getMethods()+ ""String_Node_Str"");
    }
    SootMethod sm=cl.getMethodUnsafe(getSubSignature());
    if (sm != null) {
      return checkStatic(sm);
    }
    if (Scene.v().allowsPhantomRefs() && (cl.isPhantom() || Options.v().ignore_resolution_errors())) {
      SootMethod m=Scene.v().makeSootMethod(name,parameterTypes,returnType,isStatic() ? Modifier.STATIC : 0);
      m.setPhantom(true);
      m=cl.getOrAddMethod(m);
      return checkStatic(m);
    }
    if (cl.hasSuperclass()) {
      cl=cl.getSuperclass();
    }
 else {
      break;
    }
  }
  cl=declaringClass;
  while (true) {
    ArrayDeque<SootClass> queue=new ArrayDeque<SootClass>();
    queue.addAll(cl.getInterfaces());
    while (true) {
      SootClass iface=queue.poll();
      if (iface == null) {
        break;
      }
      if (trace != null) {
        trace.append(""String_Node_Str"" + iface + ""String_Node_Str""+ iface.getMethods()+ ""String_Node_Str"");
      }
      SootMethod sm=iface.getMethodUnsafe(getSubSignature());
      if (sm != null) {
        return checkStatic(sm);
      }
      queue.addAll(iface.getInterfaces());
    }
    if (cl.hasSuperclass()) {
      cl=cl.getSuperclass();
    }
 else {
      break;
    }
  }
  return null;
}","private SootMethod tryResolve(StringBuffer trace){
  if (declaringClass.getName().equals(""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  SootClass cl=declaringClass;
  while (cl != null) {
    if (trace != null) {
      trace.append(""String_Node_Str"" + cl + ""String_Node_Str""+ cl.getMethods()+ ""String_Node_Str"");
    }
    SootMethod sm=cl.getMethodUnsafe(getSubSignature());
    if (sm != null) {
      return checkStatic(sm);
    }
    if (Scene.v().allowsPhantomRefs() && cl.isPhantom()) {
      SootMethod m=Scene.v().makeSootMethod(name,parameterTypes,returnType,isStatic() ? Modifier.STATIC : 0);
      m.setPhantom(true);
      m=cl.getOrAddMethod(m);
      return checkStatic(m);
    }
    cl=cl.getSuperclassUnsafe();
  }
  cl=declaringClass;
  while (cl != null) {
    ArrayDeque<SootClass> queue=new ArrayDeque<SootClass>();
    queue.addAll(cl.getInterfaces());
    while (!queue.isEmpty()) {
      SootClass iface=queue.poll();
      if (trace != null) {
        trace.append(""String_Node_Str"" + iface + ""String_Node_Str""+ iface.getMethods()+ ""String_Node_Str"");
      }
      SootMethod sm=iface.getMethodUnsafe(getSubSignature());
      if (sm != null) {
        return checkStatic(sm);
      }
      queue.addAll(iface.getInterfaces());
    }
    cl=cl.getSuperclassUnsafe();
  }
  if (cl == null && Scene.v().allowsPhantomRefs() && Options.v().ignore_resolution_errors()) {
    SootMethod m=Scene.v().makeSootMethod(name,parameterTypes,returnType,isStatic() ? Modifier.STATIC : 0);
    m.setPhantom(true);
    m=declaringClass.getOrAddMethod(m);
    return checkStatic(m);
  }
  return null;
}"
85198,"/** 
 * Using Tarjan's algorithm to contract the SCCs.
 */
private void callGraphDFS(int s){
  int t;
  CgEdge p;
  vis_cg[s]=low_cg[s]=pre_cnt++;
  queue_cg.addLast(s);
  p=call_graph[s];
  while (p != null) {
    t=p.t;
    if (vis_cg[t] == 0) {
      callGraphDFS(t);
    }
    if (low_cg[t] < low_cg[s]) {
      low_cg[s]=low_cg[t];
    }
    p=p.next;
  }
  if (low_cg[s] < vis_cg[s]) {
    scc_size[s]=1;
    return;
  }
  scc_size[s]=queue_cg.size();
  do {
    t=queue_cg.getLast();
    queue_cg.removeLast();
    rep_cg[t]=s;
    low_cg[t]+=n_func;
  }
 while (s != t);
  scc_size[s]-=queue_cg.size();
  if (scc_size[s] > max_scc_size) {
    max_scc_size=scc_size[s];
    max_scc_id=s;
  }
}","/** 
 * Using Tarjan's algorithm to contract the SCCs.
 */
private void callGraphDFS(int s){
  int t;
  CgEdge p;
  vis_cg[s]=low_cg[s]=pre_cnt++;
  queue_cg.addLast(s);
  p=call_graph[s];
  while (p != null) {
    t=p.t;
    if (vis_cg[t] == 0) {
      callGraphDFS(t);
      low_cg[s]=Math.min(low_cg[s],low_cg[t]);
    }
 else {
      low_cg[s]=Math.min(low_cg[s],vis_cg[t]);
    }
    p=p.next;
  }
  if (low_cg[s] < vis_cg[s]) {
    scc_size[s]=1;
    return;
  }
  scc_size[s]=queue_cg.size();
  do {
    t=queue_cg.getLast();
    queue_cg.removeLast();
    rep_cg[t]=s;
    low_cg[t]+=n_func;
  }
 while (s != t);
  scc_size[s]-=queue_cg.size();
  if (scc_size[s] > max_scc_size) {
    max_scc_size=scc_size[s];
    max_scc_id=s;
  }
}"
85199,"protected void bringToHierarchyUnchecked(SootClass sc){
  String className=sc.getName();
  ClassSource is=SourceLocator.v().getClassSource(className);
  try {
    boolean modelAsPhantomRef=is == null;
    if (modelAsPhantomRef) {
      if (!Scene.v().allowsPhantomRefs()) {
        String suffix=""String_Node_Str"";
        if (className.equals(""String_Node_Str"")) {
          suffix=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
        }
 else         if (className.equals(""String_Node_Str"")) {
          suffix=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
        }
        throw new SootClassNotFoundException(""String_Node_Str"" + className + ""String_Node_Str""+ suffix);
      }
 else {
        sc.setPhantomClass();
      }
    }
 else {
      Dependencies dependencies=is.resolve(sc);
      if (!dependencies.typesToSignature.isEmpty())       classToTypesSignature.putAll(sc,dependencies.typesToSignature);
      if (!dependencies.typesToHierarchy.isEmpty())       classToTypesHierarchy.putAll(sc,dependencies.typesToHierarchy);
    }
  }
  finally {
    if (is != null)     is.close();
  }
  reResolveHierarchy(sc);
}","protected void bringToHierarchyUnchecked(SootClass sc){
  String className=sc.getName();
  ClassSource is=SourceLocator.v().getClassSource(className);
  try {
    boolean modelAsPhantomRef=is == null;
    if (modelAsPhantomRef) {
      if (!Scene.v().allowsPhantomRefs()) {
        String suffix=""String_Node_Str"";
        if (className.equals(""String_Node_Str"")) {
          suffix=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
        }
 else         if (className.equals(""String_Node_Str"")) {
          suffix=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
        }
        throw new SootClassNotFoundException(""String_Node_Str"" + className + ""String_Node_Str""+ suffix);
      }
 else {
        sc.setPhantomClass();
      }
    }
 else {
      Dependencies dependencies=is.resolve(sc);
      if (!dependencies.typesToSignature.isEmpty())       classToTypesSignature.putAll(sc,dependencies.typesToSignature);
      if (!dependencies.typesToHierarchy.isEmpty())       classToTypesHierarchy.putAll(sc,dependencies.typesToHierarchy);
    }
  }
  finally {
    if (is != null)     is.close();
  }
  reResolveHierarchy(sc,SootClass.HIERARCHY);
}"
85200,"public void reResolveHierarchy(SootClass sc){
  SootClass superClass=sc.getSuperclassUnsafe();
  if (superClass != null)   addToResolveWorklist(superClass,SootClass.HIERARCHY);
  SootClass outerClass=sc.getOuterClassUnsafe();
  if (outerClass != null)   addToResolveWorklist(outerClass,SootClass.HIERARCHY);
  for (  SootClass iface : sc.getInterfaces()) {
    addToResolveWorklist(iface,SootClass.HIERARCHY);
  }
}","public void reResolveHierarchy(SootClass sc,int level){
  SootClass superClass=sc.getSuperclassUnsafe();
  if (superClass != null)   addToResolveWorklist(superClass,level);
  SootClass outerClass=sc.getOuterClassUnsafe();
  if (outerClass != null)   addToResolveWorklist(outerClass,level);
  for (  SootClass iface : sc.getInterfaces()) {
    addToResolveWorklist(iface,level);
  }
}"
85201,"protected void bringToSignaturesUnchecked(SootClass sc){
  for (  SootField f : sc.getFields()) {
    addToResolveWorklist(f.getType(),SootClass.HIERARCHY);
  }
  for (  SootMethod m : sc.getMethods()) {
    addToResolveWorklist(m.getReturnType(),SootClass.HIERARCHY);
    for (    Type ptype : m.getParameterTypes()) {
      addToResolveWorklist(ptype,SootClass.HIERARCHY);
    }
    List<SootClass> exceptions=m.getExceptionsUnsafe();
    if (exceptions != null) {
      for (      SootClass exception : exceptions) {
        addToResolveWorklist(exception,SootClass.HIERARCHY);
      }
    }
  }
  reResolveHierarchy(sc);
}","protected void bringToSignaturesUnchecked(SootClass sc){
  for (  SootField f : sc.getFields()) {
    addToResolveWorklist(f.getType(),SootClass.HIERARCHY);
  }
  for (  SootMethod m : sc.getMethods()) {
    addToResolveWorklist(m.getReturnType(),SootClass.HIERARCHY);
    for (    Type ptype : m.getParameterTypes()) {
      addToResolveWorklist(ptype,SootClass.HIERARCHY);
    }
    List<SootClass> exceptions=m.getExceptionsUnsafe();
    if (exceptions != null) {
      for (      SootClass exception : exceptions) {
        addToResolveWorklist(exception,SootClass.HIERARCHY);
      }
    }
  }
  reResolveHierarchy(sc,SootClass.SIGNATURES);
}"
85202,"/** 
 * Creates a method body that throws an ""unresolved compilation error"" message
 * @param declaringClass The class that was supposed to contain the method
 * @return The created SootMethod
 */
private SootMethod createUnresolvedErrorMethod(SootClass declaringClass){
  SootMethod m=Scene.v().makeSootMethod(name,parameterTypes,returnType,isStatic() ? Modifier.STATIC : 0);
  int modifiers=Modifier.PUBLIC;
  if (isStatic())   modifiers|=Modifier.STATIC;
  m.setModifiers(modifiers);
  JimpleBody body=Jimple.v().newBody(m);
  m.setActiveBody(body);
  final LocalGenerator lg=new LocalGenerator(body);
  body.insertIdentityStmts();
  RefType runtimeExceptionType=RefType.v(""String_Node_Str"");
  NewExpr newExpr=Jimple.v().newNewExpr(runtimeExceptionType);
  Local exceptionLocal=lg.generateLocal(runtimeExceptionType);
  AssignStmt assignStmt=Jimple.v().newAssignStmt(exceptionLocal,newExpr);
  body.getUnits().add(assignStmt);
  SootMethodRef cref=Scene.v().makeConstructorRef(runtimeExceptionType.getSootClass(),Collections.<Type>singletonList(RefType.v(""String_Node_Str"")));
  SpecialInvokeExpr constructorInvokeExpr=Jimple.v().newSpecialInvokeExpr(exceptionLocal,cref,StringConstant.v(""String_Node_Str"" + getSignature() + ""String_Node_Str""));
  InvokeStmt initStmt=Jimple.v().newInvokeStmt(constructorInvokeExpr);
  body.getUnits().insertAfter(initStmt,assignStmt);
  body.getUnits().insertAfter(Jimple.v().newThrowStmt(exceptionLocal),initStmt);
  return declaringClass.getOrAddMethod(m);
}","/** 
 * Creates a method body that throws an ""unresolved compilation error"" message
 * @param declaringClass The class that was supposed to contain the method
 * @return The created SootMethod
 */
private SootMethod createUnresolvedErrorMethod(SootClass declaringClass){
  SootMethod m=Scene.v().makeSootMethod(name,parameterTypes,returnType,isStatic() ? Modifier.STATIC : 0);
  int modifiers=Modifier.PUBLIC;
  if (isStatic())   modifiers|=Modifier.STATIC;
  m.setModifiers(modifiers);
  JimpleBody body=Jimple.v().newBody(m);
  m.setActiveBody(body);
  final LocalGenerator lg=new LocalGenerator(body);
  body.insertIdentityStmts(declaringClass);
  RefType runtimeExceptionType=RefType.v(""String_Node_Str"");
  NewExpr newExpr=Jimple.v().newNewExpr(runtimeExceptionType);
  Local exceptionLocal=lg.generateLocal(runtimeExceptionType);
  AssignStmt assignStmt=Jimple.v().newAssignStmt(exceptionLocal,newExpr);
  body.getUnits().add(assignStmt);
  SootMethodRef cref=Scene.v().makeConstructorRef(runtimeExceptionType.getSootClass(),Collections.<Type>singletonList(RefType.v(""String_Node_Str"")));
  SpecialInvokeExpr constructorInvokeExpr=Jimple.v().newSpecialInvokeExpr(exceptionLocal,cref,StringConstant.v(""String_Node_Str"" + getSignature() + ""String_Node_Str""));
  InvokeStmt initStmt=Jimple.v().newInvokeStmt(constructorInvokeExpr);
  body.getUnits().insertAfter(initStmt,assignStmt);
  body.getUnits().insertAfter(Jimple.v().newThrowStmt(exceptionLocal),initStmt);
  return declaringClass.getOrAddMethod(m);
}"
85203,"/** 
 * Clones the current body, making deep copies of the contents. 
 */
public Object clone(){
  Body b=new JimpleBody(getMethod());
  b.importBodyContentsFrom(this);
  return b;
}","/** 
 * Clones the current body, making deep copies of the contents. 
 */
@Override public Object clone(){
  Body b=new JimpleBody(getMethod());
  b.importBodyContentsFrom(this);
  return b;
}"
85204,"/** 
 * Inserts usual statements for handling this & parameters into body. 
 */
public void insertIdentityStmts(){
  Unit lastUnit=null;
  if (!getMethod().isStatic()) {
    Local l=Jimple.v().newLocal(""String_Node_Str"",RefType.v(getMethod().getDeclaringClass()));
    Stmt s=Jimple.v().newIdentityStmt(l,Jimple.v().newThisRef((RefType)l.getType()));
    getLocals().add(l);
    getUnits().addFirst(s);
    lastUnit=s;
  }
  int i=0;
  for (  Type t : getMethod().getParameterTypes()) {
    Local l=Jimple.v().newLocal(""String_Node_Str"" + i,t);
    Stmt s=Jimple.v().newIdentityStmt(l,Jimple.v().newParameterRef(l.getType(),i));
    getLocals().add(l);
    if (lastUnit == null)     getUnits().addFirst(s);
 else     getUnits().insertAfter(s,lastUnit);
    lastUnit=s;
    i++;
  }
}","/** 
 * Inserts usual statements for handling this & parameters into body.
 * @param declaringClass the class, which should be used for this references. Can be null for static methods 
 */
public void insertIdentityStmts(SootClass declaringClass){
  final Jimple jimple=Jimple.v();
  final PatchingChain<Unit> unitChain=getUnits();
  final Chain<Local> localChain=getLocals();
  Unit lastUnit=null;
  if (!getMethod().isStatic()) {
    if (declaringClass == null)     throw new IllegalArgumentException(String.format(""String_Node_Str"",method.getSubSignature()));
    Local l=jimple.newLocal(""String_Node_Str"",RefType.v(declaringClass));
    Stmt s=jimple.newIdentityStmt(l,jimple.newThisRef((RefType)l.getType()));
    localChain.add(l);
    unitChain.addFirst(s);
    lastUnit=s;
  }
  int i=0;
  for (  Type t : getMethod().getParameterTypes()) {
    Local l=jimple.newLocal(""String_Node_Str"" + i,t);
    Stmt s=jimple.newIdentityStmt(l,jimple.newParameterRef(l.getType(),i));
    localChain.add(l);
    if (lastUnit == null)     unitChain.addFirst(s);
 else     unitChain.insertAfter(s,lastUnit);
    lastUnit=s;
    i++;
  }
}"
85205,"/** 
 * Validates the jimple body and saves a list of all validation errors
 * @param exceptionList the list of validation errors
 */
public void validate(List<ValidationException> exceptionList){
  super.validate(exceptionList);
  final boolean runAllValidators=Options.v().debug() || Options.v().validate();
  for (  BodyValidator validator : getValidators()) {
    if (!validator.isBasicValidator() && !runAllValidators)     continue;
    validator.validate(this,exceptionList);
  }
}","/** 
 * Validates the jimple body and saves a list of all validation errors
 * @param exceptionList the list of validation errors
 */
@Override public void validate(List<ValidationException> exceptionList){
  super.validate(exceptionList);
  final boolean runAllValidators=Options.v().debug() || Options.v().validate();
  for (  BodyValidator validator : getValidators()) {
    if (!validator.isBasicValidator() && !runAllValidators)     continue;
    validator.validate(this,exceptionList);
  }
}"
85206,"private MethodImplementation toMethodImplementation(SootMethod m){
  if (m.isAbstract() || m.isNative()) {
    return null;
  }
  Body activeBody=m.retrieveActiveBody();
  if (m.getName().contains(""String_Node_Str"") || m.getName().equals(""String_Node_Str""))   if (!m.getName().equals(""String_Node_Str"") && !m.getName().equals(""String_Node_Str""))   throw new RuntimeException(""String_Node_Str"" + m.getName());
  EmptySwitchEliminator.v().transform(activeBody);
  SynchronizedMethodTransformer.v().transform(activeBody);
  FastDexTrapTightener.v().transform(activeBody);
  DexArrayInitDetector initDetector=new DexArrayInitDetector();
  initDetector.constructArrayInitializations(activeBody);
  initDetector.fixTraps(activeBody);
  TrapSplitter.v().transform(activeBody);
  int inWords=SootToDexUtils.getDexWords(m.getParameterTypes());
  if (!m.isStatic()) {
    inWords++;
  }
  Collection<Unit> units=activeBody.getUnits();
  StmtVisitor stmtV=new StmtVisitor(m,initDetector);
  toInstructions(units,stmtV);
  int registerCount=stmtV.getRegisterCount();
  if (inWords > registerCount) {
    registerCount=inWords;
  }
  MethodImplementationBuilder builder=new MethodImplementationBuilder(registerCount);
  LabelAssigner labelAssinger=new LabelAssigner(builder);
  List<BuilderInstruction> instructions=stmtV.getRealInsns(labelAssinger);
  fixLongJumps(instructions,labelAssinger,stmtV);
  Map<Local,Integer> seenRegisters=new HashMap<Local,Integer>();
  Map<Instruction,LocalRegisterAssignmentInformation> instructionRegisterMap=stmtV.getInstructionRegisterMap();
  if (Options.v().write_local_annotations()) {
    for (    LocalRegisterAssignmentInformation assignment : stmtV.getParameterInstructionsList()) {
      if (assignment.getLocal().getName().equals(""String_Node_Str""))       continue;
      addRegisterAssignmentDebugInfo(assignment,seenRegisters,builder);
    }
  }
  for (  BuilderInstruction ins : instructions) {
    Stmt origStmt=stmtV.getStmtForInstruction(ins);
    if (stmtV.getInstructionPayloadMap().containsKey(ins))     builder.addLabel(labelAssinger.getLabelName(stmtV.getInstructionPayloadMap().get(ins)));
    if (origStmt != null) {
      for (      Trap t : m.getActiveBody().getTraps()) {
        if (t.getBeginUnit() == origStmt || t.getEndUnit() == origStmt || t.getHandlerUnit() == origStmt) {
          labelAssinger.getOrCreateLabel(origStmt);
          break;
        }
      }
      String labelName=labelAssinger.getLabelName(origStmt);
      if (labelName != null && !builder.getLabel(labelName).isPlaced())       builder.addLabel(labelName);
      if (stmtV.getStmtForInstruction(ins) != null) {
        List<Tag> tags=origStmt.getTags();
        for (        Tag t : tags) {
          if (t instanceof LineNumberTag) {
            LineNumberTag lnt=(LineNumberTag)t;
            builder.addLineNumber(lnt.getLineNumber());
          }
 else           if (t instanceof SourceFileTag) {
            SourceFileTag sft=(SourceFileTag)t;
            builder.addSetSourceFile(new ImmutableStringReference(sft.getSourceFile()));
          }
        }
      }
    }
    builder.addInstruction(ins);
    LocalRegisterAssignmentInformation registerAssignmentTag=instructionRegisterMap.get(ins);
    if (registerAssignmentTag != null) {
      addRegisterAssignmentDebugInfo(registerAssignmentTag,seenRegisters,builder);
    }
  }
  for (  int registersLeft : seenRegisters.values())   builder.addEndLocal(registersLeft);
  toTries(activeBody.getTraps(),stmtV,builder,labelAssinger);
  for (  Label lbl : labelAssinger.getAllLabels())   if (!lbl.isPlaced())   throw new RuntimeException(""String_Node_Str"" + lbl);
  return builder.getMethodImplementation();
}","private MethodImplementation toMethodImplementation(SootMethod m){
  if (m.isAbstract() || m.isNative()) {
    return null;
  }
  Body activeBody=m.retrieveActiveBody();
  if (m.getName().contains(""String_Node_Str"") || m.getName().equals(""String_Node_Str""))   if (!m.getName().equals(""String_Node_Str"") && !m.getName().equals(""String_Node_Str""))   throw new RuntimeException(""String_Node_Str"" + m.getName());
  EmptySwitchEliminator.v().transform(activeBody);
  SynchronizedMethodTransformer.v().transform(activeBody);
  FastDexTrapTightener.v().transform(activeBody);
  DexArrayInitDetector initDetector=new DexArrayInitDetector();
  initDetector.constructArrayInitializations(activeBody);
  initDetector.fixTraps(activeBody);
  TrapSplitter.v().transform(activeBody);
  int inWords=SootToDexUtils.getDexWords(m.getParameterTypes());
  if (!m.isStatic()) {
    inWords++;
  }
  Collection<Unit> units=activeBody.getUnits();
  StmtVisitor stmtV=new StmtVisitor(m,initDetector);
  Chain<Trap> traps=activeBody.getTraps();
  Set<Unit> trapReferences=new HashSet<Unit>(traps.size() * 3);
  for (  Trap t : activeBody.getTraps()) {
    trapReferences.add(t.getBeginUnit());
    trapReferences.add(t.getEndUnit());
    trapReferences.add(t.getHandlerUnit());
  }
  toInstructions(units,stmtV,trapReferences);
  int registerCount=stmtV.getRegisterCount();
  if (inWords > registerCount) {
    registerCount=inWords;
  }
  MethodImplementationBuilder builder=new MethodImplementationBuilder(registerCount);
  LabelAssigner labelAssinger=new LabelAssigner(builder);
  List<BuilderInstruction> instructions=stmtV.getRealInsns(labelAssinger);
  fixLongJumps(instructions,labelAssinger,stmtV);
  Map<Local,Integer> seenRegisters=new HashMap<Local,Integer>();
  Map<Instruction,LocalRegisterAssignmentInformation> instructionRegisterMap=stmtV.getInstructionRegisterMap();
  if (Options.v().write_local_annotations()) {
    for (    LocalRegisterAssignmentInformation assignment : stmtV.getParameterInstructionsList()) {
      if (assignment.getLocal().getName().equals(""String_Node_Str""))       continue;
      addRegisterAssignmentDebugInfo(assignment,seenRegisters,builder);
    }
  }
  for (  BuilderInstruction ins : instructions) {
    Stmt origStmt=stmtV.getStmtForInstruction(ins);
    if (stmtV.getInstructionPayloadMap().containsKey(ins))     builder.addLabel(labelAssinger.getLabelName(stmtV.getInstructionPayloadMap().get(ins)));
    if (origStmt != null) {
      if (trapReferences.contains(origStmt))       labelAssinger.getOrCreateLabel(origStmt);
      String labelName=labelAssinger.getLabelName(origStmt);
      if (labelName != null && !builder.getLabel(labelName).isPlaced())       builder.addLabel(labelName);
      if (stmtV.getStmtForInstruction(ins) != null) {
        List<Tag> tags=origStmt.getTags();
        for (        Tag t : tags) {
          if (t instanceof LineNumberTag) {
            LineNumberTag lnt=(LineNumberTag)t;
            builder.addLineNumber(lnt.getLineNumber());
          }
 else           if (t instanceof SourceFileTag) {
            SourceFileTag sft=(SourceFileTag)t;
            builder.addSetSourceFile(new ImmutableStringReference(sft.getSourceFile()));
          }
        }
      }
    }
    builder.addInstruction(ins);
    LocalRegisterAssignmentInformation registerAssignmentTag=instructionRegisterMap.get(ins);
    if (registerAssignmentTag != null) {
      addRegisterAssignmentDebugInfo(registerAssignmentTag,seenRegisters,builder);
    }
  }
  for (  int registersLeft : seenRegisters.values())   builder.addEndLocal(registersLeft);
  toTries(activeBody.getTraps(),stmtV,builder,labelAssinger);
  for (  Label lbl : labelAssinger.getAllLabels())   if (!lbl.isPlaced())   throw new RuntimeException(""String_Node_Str"" + lbl);
  return builder.getMethodImplementation();
}"
85207,"private void toInstructions(Collection<Unit> units,StmtVisitor stmtV){
  Set<ClassConstant> monitorConsts=new HashSet<ClassConstant>();
  for (  Unit u : units) {
    if (u instanceof MonitorStmt) {
      MonitorStmt monitorStmt=(MonitorStmt)u;
      if (monitorStmt.getOp() instanceof ClassConstant) {
        monitorConsts.add((ClassConstant)monitorStmt.getOp());
      }
    }
  }
  boolean monitorAllocsMade=false;
  for (  Unit u : units) {
    if (!monitorAllocsMade && !monitorConsts.isEmpty() && !(u instanceof IdentityStmt)) {
      stmtV.preAllocateMonitorConsts(monitorConsts);
      monitorAllocsMade=true;
    }
    stmtV.beginNewStmt((Stmt)u);
    u.apply(stmtV);
  }
  stmtV.finalizeInstructions();
}","private void toInstructions(Collection<Unit> units,StmtVisitor stmtV,Set<Unit> trapReferences){
  Set<ClassConstant> monitorConsts=new HashSet<ClassConstant>();
  for (  Unit u : units) {
    if (u instanceof MonitorStmt) {
      MonitorStmt monitorStmt=(MonitorStmt)u;
      if (monitorStmt.getOp() instanceof ClassConstant) {
        monitorConsts.add((ClassConstant)monitorStmt.getOp());
      }
    }
  }
  boolean monitorAllocsMade=false;
  for (  Unit u : units) {
    if (!monitorAllocsMade && !monitorConsts.isEmpty() && !(u instanceof IdentityStmt)) {
      stmtV.preAllocateMonitorConsts(monitorConsts);
      monitorAllocsMade=true;
    }
    stmtV.beginNewStmt((Stmt)u);
    u.apply(stmtV);
  }
  stmtV.finalizeInstructions(trapReferences);
}"
85208,"public void jimplify(DexBody body){
  if (getTargetInstruction(body).getUnit() != null) {
    body.add(gotoStatement());
    return;
  }
  body.addDeferredJimplification(this);
  markerUnit=Jimple.v().newNopStmt();
  unit=markerUnit;
  body.add(markerUnit);
}","public void jimplify(DexBody body){
  if (getTargetInstruction(body).getUnit() != null) {
    body.add(gotoStatement());
    return;
  }
  body.addDeferredJimplification(this);
  markerUnit=Jimple.v().newNopStmt();
  addTags(markerUnit);
  unit=markerUnit;
  body.add(markerUnit);
}"
85209,"@Override protected IfStmt ifStatement(DexBody body){
  Instruction22t i=(Instruction22t)instruction;
  Local one=body.getRegisterLocal(i.getRegisterA());
  Local other=body.getRegisterLocal(i.getRegisterB());
  BinopExpr condition=getComparisonExpr(one,other);
  IfStmt jif=Jimple.v().newIfStmt(condition,targetInstruction.getUnit());
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    DalvikTyper.v().addConstraint(condition.getOp1Box(),condition.getOp2Box());
  }
  return jif;
}","@Override protected IfStmt ifStatement(DexBody body){
  Instruction22t i=(Instruction22t)instruction;
  Local one=body.getRegisterLocal(i.getRegisterA());
  Local other=body.getRegisterLocal(i.getRegisterB());
  BinopExpr condition=getComparisonExpr(one,other);
  IfStmt jif=Jimple.v().newIfStmt(condition,targetInstruction.getUnit());
  addTags(jif);
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    DalvikTyper.v().addConstraint(condition.getOp1Box(),condition.getOp2Box());
  }
  return jif;
}"
85210,"@Override protected IfStmt ifStatement(DexBody body){
  Instruction21t i=(Instruction21t)instruction;
  BinopExpr condition=getComparisonExpr(body,i.getRegisterA());
  IfStmt jif=Jimple.v().newIfStmt(condition,targetInstruction.getUnit());
  if (IDalvikTyper.ENABLE_DVKTYPER) {
  }
  return jif;
}","@Override protected IfStmt ifStatement(DexBody body){
  Instruction21t i=(Instruction21t)instruction;
  BinopExpr condition=getComparisonExpr(body,i.getRegisterA());
  IfStmt jif=Jimple.v().newIfStmt(condition,targetInstruction.getUnit());
  addTags(jif);
  if (IDalvikTyper.ENABLE_DVKTYPER) {
  }
  return jif;
}"
85211,"@Override protected Stmt switchStatement(DexBody body,Instruction targetData,Local key){
  SparseSwitchPayload i=(SparseSwitchPayload)targetData;
  List<? extends SwitchElement> seList=i.getSwitchElements();
  int defaultTargetAddress=codeAddress + instruction.getCodeUnits();
  Unit defaultTarget=body.instructionAtAddress(defaultTargetAddress).getUnit();
  List<IntConstant> lookupValues=new ArrayList<IntConstant>();
  List<Unit> targets=new ArrayList<Unit>();
  for (  SwitchElement se : seList) {
    lookupValues.add(IntConstant.v(se.getKey()));
    int offset=se.getOffset();
    targets.add(body.instructionAtAddress(codeAddress + offset).getUnit());
  }
  LookupSwitchStmt switchStmt=Jimple.v().newLookupSwitchStmt(key,lookupValues,targets,defaultTarget);
  setUnit(switchStmt);
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    DalvikTyper.v().setType(switchStmt.getKeyBox(),IntType.v(),true);
  }
  return switchStmt;
}","@Override protected Stmt switchStatement(DexBody body,Instruction targetData,Local key){
  SparseSwitchPayload i=(SparseSwitchPayload)targetData;
  List<? extends SwitchElement> seList=i.getSwitchElements();
  int defaultTargetAddress=codeAddress + instruction.getCodeUnits();
  Unit defaultTarget=body.instructionAtAddress(defaultTargetAddress).getUnit();
  List<IntConstant> lookupValues=new ArrayList<IntConstant>();
  List<Unit> targets=new ArrayList<Unit>();
  for (  SwitchElement se : seList) {
    lookupValues.add(IntConstant.v(se.getKey()));
    int offset=se.getOffset();
    targets.add(body.instructionAtAddress(codeAddress + offset).getUnit());
  }
  LookupSwitchStmt switchStmt=Jimple.v().newLookupSwitchStmt(key,lookupValues,targets,defaultTarget);
  setUnit(switchStmt);
  addTags(switchStmt);
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    DalvikTyper.v().setType(switchStmt.getKeyBox(),IntType.v(),true);
  }
  return switchStmt;
}"
85212,"public void outputSummary(){
  out.println(""String_Node_Str"" + (divPerformed + mulPerformed));
  out.println(""String_Node_Str"" + total);
}","public void outputSummary(){
  if (!output) {
    return;
  }
  out.println(""String_Node_Str"" + (divPerformed + mulPerformed));
  out.println(""String_Node_Str"" + total);
}"
85213,"protected void internalTransform(Body b,String phaseName,Map<String,String> options){
  int weight=soot.jbco.Main.getWeight(phaseName,b.getMethod().getSignature());
  if (weight == 0)   return;
  PatchingChain<Unit> units=b.getUnits();
  int localCount=0;
  Collection<Local> locals=b.getLocals();
  if (output)   out.println(""String_Node_Str"" + b.getMethod().getSignature());
  Iterator<Unit> it=units.snapshotIterator();
  while (it.hasNext()) {
    Unit u=(Unit)it.next();
    if (u instanceof AssignStmt) {
      AssignStmt as=(AssignStmt)u;
      Value v=as.getRightOp();
      if (v instanceof MulExpr) {
        total++;
        MulExpr me=(MulExpr)v;
        Value op1=me.getOp1();
        Value op=null, op2=me.getOp2();
        NumericConstant nc=null;
        if (op1 instanceof NumericConstant) {
          nc=(NumericConstant)op1;
          op=op2;
        }
 else         if (op2 instanceof NumericConstant) {
          nc=(NumericConstant)op2;
          op=op1;
        }
        if (nc != null) {
          if (output)           out.println(""String_Node_Str"" + as + ""String_Node_Str"");
          Type opType=op.getType();
          int max=opType instanceof IntType ? 32 : opType instanceof LongType ? 64 : 0;
          if (max != 0) {
            Object shft_rem[]=checkNumericValue(nc);
            if (shft_rem[0] != null && ((Integer)shft_rem[0]).intValue() < max && Rand.getInt(10) <= weight) {
              List<Unit> unitsBuilt=new ArrayList<Unit>();
              int rand=Rand.getInt(16);
              int shift=((Integer)shft_rem[0]).intValue();
              boolean neg=((Boolean)shft_rem[2]).booleanValue();
              if (rand % 2 == 0) {
                shift+=rand * max;
              }
 else {
                shift-=rand * max;
              }
              Expr e=null;
              if (shft_rem[1] != null) {
                Local tmp2=null, tmp1=Jimple.v().newLocal(""String_Node_Str"" + localCount++,opType);
                locals.add(tmp1);
                Unit newU=Jimple.v().newAssignStmt(tmp1,Jimple.v().newShlExpr(op,IntConstant.v(shift)));
                unitsBuilt.add(newU);
                units.insertBefore(newU,u);
                double rem=((Double)shft_rem[1]).doubleValue();
                if (rem != 1) {
                  if (rem == ((int)rem) && opType instanceof IntType)                   nc=IntConstant.v((int)rem);
 else                   if (rem == ((long)rem) && opType instanceof LongType)                   nc=LongConstant.v((long)rem);
 else                   nc=DoubleConstant.v(rem);
                  if (nc instanceof DoubleConstant && !(opType instanceof DoubleType)) {
                    tmp2=Jimple.v().newLocal(""String_Node_Str"" + localCount++,DoubleType.v());
                    locals.add(tmp2);
                    newU=Jimple.v().newAssignStmt(tmp2,Jimple.v().newCastExpr(op,DoubleType.v()));
                    unitsBuilt.add(newU);
                    units.insertBefore(newU,u);
                    newU=Jimple.v().newAssignStmt(tmp2,Jimple.v().newMulExpr(tmp2,nc));
                  }
 else {
                    tmp2=Jimple.v().newLocal(""String_Node_Str"" + localCount++,nc.getType());
                    locals.add(tmp2);
                    newU=Jimple.v().newAssignStmt(tmp2,Jimple.v().newMulExpr(op,nc));
                  }
                  unitsBuilt.add(newU);
                  units.insertBefore(newU,u);
                }
                if (tmp2 == null) {
                  e=Jimple.v().newAddExpr(tmp1,op);
                }
 else                 if (tmp2.getType().getClass() != tmp1.getType().getClass()) {
                  Local tmp3=Jimple.v().newLocal(""String_Node_Str"" + localCount++,tmp2.getType());
                  locals.add(tmp3);
                  newU=Jimple.v().newAssignStmt(tmp3,Jimple.v().newCastExpr(tmp1,tmp2.getType()));
                  unitsBuilt.add(newU);
                  units.insertBefore(newU,u);
                  e=Jimple.v().newAddExpr(tmp3,tmp2);
                }
 else {
                  e=Jimple.v().newAddExpr(tmp1,tmp2);
                }
              }
 else {
                e=Jimple.v().newShlExpr(op,IntConstant.v(shift));
              }
              if (e.getType().getClass() != as.getLeftOp().getType().getClass()) {
                Local tmp=Jimple.v().newLocal(""String_Node_Str"" + localCount++,e.getType());
                locals.add(tmp);
                Unit newU=Jimple.v().newAssignStmt(tmp,e);
                unitsBuilt.add(newU);
                units.insertAfter(newU,u);
                e=Jimple.v().newCastExpr(tmp,as.getLeftOp().getType());
              }
              as.setRightOp(e);
              unitsBuilt.add(as);
              if (neg) {
                Unit newU=Jimple.v().newAssignStmt(as.getLeftOp(),Jimple.v().newNegExpr(as.getLeftOp()));
                unitsBuilt.add(newU);
                units.insertAfter(newU,u);
              }
              mulPerformed++;
              if (output) {
                System.out.println(""String_Node_Str"");
                Iterator<Unit> ait=unitsBuilt.iterator();
                while (ait.hasNext()) {
                  Unit uu=ait.next();
                  System.out.println(""String_Node_Str"" + uu + ""String_Node_Str""+ (uu instanceof AssignStmt ? ((AssignStmt)uu).getLeftOp().getType().toString() : ""String_Node_Str""));
                }
              }
            }
          }
        }
      }
 else       if (v instanceof DivExpr) {
        total++;
        DivExpr de=(DivExpr)v;
        Value op2=de.getOp2();
        NumericConstant nc=null;
        if (op2 instanceof NumericConstant) {
          nc=(NumericConstant)op2;
          if (nc != null) {
            Type opType=de.getOp1().getType();
            int max=opType instanceof IntType ? 32 : opType instanceof LongType ? 64 : 0;
            if (max != 0) {
              Object shft_rem[]=checkNumericValue(nc);
              if (shft_rem[0] != null && ((Integer)shft_rem[0]).intValue() < max && Rand.getInt(10) <= weight) {
                List<Unit> unitsBuilt=new ArrayList<Unit>();
                int rand=Rand.getInt(16);
                int shift=((Integer)shft_rem[0]).intValue();
                boolean neg=((Boolean)shft_rem[2]).booleanValue();
                if (Rand.getInt() % 2 == 0) {
                  shift+=rand * max;
                }
 else {
                  shift-=rand * max;
                }
                Expr e=Jimple.v().newShrExpr(de.getOp1(),IntConstant.v(shift));
                if (e.getType().getClass() != as.getLeftOp().getType().getClass()) {
                  Local tmp=Jimple.v().newLocal(""String_Node_Str"" + localCount++,e.getType());
                  locals.add(tmp);
                  Unit newU=Jimple.v().newAssignStmt(tmp,e);
                  unitsBuilt.add(newU);
                  units.insertAfter(newU,u);
                  e=Jimple.v().newCastExpr(tmp,as.getLeftOp().getType());
                }
                as.setRightOp(e);
                unitsBuilt.add(as);
                if (neg) {
                  Unit newU=Jimple.v().newAssignStmt(as.getLeftOp(),Jimple.v().newNegExpr(as.getLeftOp()));
                  unitsBuilt.add(newU);
                  units.insertAfter(newU,u);
                }
                divPerformed++;
                if (output) {
                  System.out.println(""String_Node_Str"");
                  Iterator<Unit> ait=unitsBuilt.iterator();
                  while (ait.hasNext()) {
                    Unit uu=ait.next();
                    System.out.println(""String_Node_Str"" + uu + ""String_Node_Str""+ (uu instanceof AssignStmt ? ((AssignStmt)uu).getLeftOp().getType().toString() : ""String_Node_Str""));
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}","protected void internalTransform(Body b,String phaseName,Map<String,String> options){
  int weight=soot.jbco.Main.getWeight(phaseName,b.getMethod().getSignature());
  if (weight == 0) {
    return;
  }
  PatchingChain<Unit> units=b.getUnits();
  int localCount=0;
  Chain<Local> locals=b.getLocals();
  if (output) {
    out.println(""String_Node_Str"" + b.getMethod().getSignature());
  }
  Iterator<Unit> it=units.snapshotIterator();
  while (it.hasNext()) {
    Unit u=it.next();
    if (u instanceof AssignStmt) {
      AssignStmt as=(AssignStmt)u;
      Value v=as.getRightOp();
      if (v instanceof MulExpr) {
        total++;
        MulExpr me=(MulExpr)v;
        Value op1=me.getOp1();
        Value op=null, op2=me.getOp2();
        NumericConstant nc=null;
        if (op1 instanceof NumericConstant) {
          nc=(NumericConstant)op1;
          op=op2;
        }
 else         if (op2 instanceof NumericConstant) {
          nc=(NumericConstant)op2;
          op=op1;
        }
        if (nc != null) {
          if (output) {
            out.println(""String_Node_Str"" + as + ""String_Node_Str"");
          }
          Type opType=op.getType();
          int max=opType instanceof IntType ? 32 : opType instanceof LongType ? 64 : 0;
          if (max != 0) {
            Object shft_rem[]=checkNumericValue(nc);
            if (shft_rem[0] != null && (Integer)shft_rem[0] < max && Rand.getInt(10) <= weight) {
              List<Unit> unitsBuilt=new ArrayList<>();
              int rand=Rand.getInt(16);
              int shift=(Integer)shft_rem[0];
              boolean neg=(Boolean)shft_rem[2];
              if (rand % 2 == 0) {
                shift+=rand * max;
              }
 else {
                shift-=rand * max;
              }
              Expr e;
              if (shft_rem[1] != null) {
                Local tmp2=null, tmp1=Jimple.v().newLocal(""String_Node_Str"" + localCount++,opType);
                locals.add(tmp1);
                Unit newU=Jimple.v().newAssignStmt(tmp1,Jimple.v().newShlExpr(op,IntConstant.v(shift)));
                unitsBuilt.add(newU);
                units.insertBefore(newU,u);
                double rem=(Double)shft_rem[1];
                if (rem != 1) {
                  if (rem == ((int)rem) && opType instanceof IntType) {
                    nc=IntConstant.v((int)rem);
                  }
 else                   if (rem == ((long)rem) && opType instanceof LongType) {
                    nc=LongConstant.v((long)rem);
                  }
 else {
                    nc=DoubleConstant.v(rem);
                  }
                  if (nc instanceof DoubleConstant) {
                    tmp2=Jimple.v().newLocal(""String_Node_Str"" + localCount++,DoubleType.v());
                    locals.add(tmp2);
                    newU=Jimple.v().newAssignStmt(tmp2,Jimple.v().newCastExpr(op,DoubleType.v()));
                    unitsBuilt.add(newU);
                    units.insertBefore(newU,u);
                    newU=Jimple.v().newAssignStmt(tmp2,Jimple.v().newMulExpr(tmp2,nc));
                  }
 else {
                    tmp2=Jimple.v().newLocal(""String_Node_Str"" + localCount++,nc.getType());
                    locals.add(tmp2);
                    newU=Jimple.v().newAssignStmt(tmp2,Jimple.v().newMulExpr(op,nc));
                  }
                  unitsBuilt.add(newU);
                  units.insertBefore(newU,u);
                }
                if (tmp2 == null) {
                  e=Jimple.v().newAddExpr(tmp1,op);
                }
 else                 if (tmp2.getType().getClass() != tmp1.getType().getClass()) {
                  Local tmp3=Jimple.v().newLocal(""String_Node_Str"" + localCount++,tmp2.getType());
                  locals.add(tmp3);
                  newU=Jimple.v().newAssignStmt(tmp3,Jimple.v().newCastExpr(tmp1,tmp2.getType()));
                  unitsBuilt.add(newU);
                  units.insertBefore(newU,u);
                  e=Jimple.v().newAddExpr(tmp3,tmp2);
                }
 else {
                  e=Jimple.v().newAddExpr(tmp1,tmp2);
                }
              }
 else {
                e=Jimple.v().newShlExpr(op,IntConstant.v(shift));
              }
              if (e.getType().getClass() != as.getLeftOp().getType().getClass()) {
                Local tmp=Jimple.v().newLocal(""String_Node_Str"" + localCount++,e.getType());
                locals.add(tmp);
                Unit newU=Jimple.v().newAssignStmt(tmp,e);
                unitsBuilt.add(newU);
                units.insertAfter(newU,u);
                e=Jimple.v().newCastExpr(tmp,as.getLeftOp().getType());
              }
              as.setRightOp(e);
              unitsBuilt.add(as);
              if (neg) {
                Unit newU=Jimple.v().newAssignStmt(as.getLeftOp(),Jimple.v().newNegExpr(as.getLeftOp()));
                unitsBuilt.add(newU);
                units.insertAfter(newU,u);
              }
              mulPerformed++;
              printOutput(unitsBuilt);
            }
          }
        }
      }
 else       if (v instanceof DivExpr) {
        total++;
        DivExpr de=(DivExpr)v;
        Value op2=de.getOp2();
        NumericConstant nc;
        if (op2 instanceof NumericConstant) {
          nc=(NumericConstant)op2;
          Type opType=de.getOp1().getType();
          int max=opType instanceof IntType ? 32 : opType instanceof LongType ? 64 : 0;
          if (max != 0) {
            Object shft_rem[]=checkNumericValue(nc);
            if (shft_rem[0] != null && (shft_rem[1] == null || (Double)shft_rem[1] == 0) && (Integer)shft_rem[0] < max && Rand.getInt(10) <= weight) {
              List<Unit> unitsBuilt=new ArrayList<>();
              int rand=Rand.getInt(16);
              int shift=(Integer)shft_rem[0];
              boolean neg=(Boolean)shft_rem[2];
              if (Rand.getInt() % 2 == 0) {
                shift+=rand * max;
              }
 else {
                shift-=rand * max;
              }
              Expr e=Jimple.v().newShrExpr(de.getOp1(),IntConstant.v(shift));
              if (e.getType().getClass() != as.getLeftOp().getType().getClass()) {
                Local tmp=Jimple.v().newLocal(""String_Node_Str"" + localCount++,e.getType());
                locals.add(tmp);
                Unit newU=Jimple.v().newAssignStmt(tmp,e);
                unitsBuilt.add(newU);
                units.insertAfter(newU,u);
                e=Jimple.v().newCastExpr(tmp,as.getLeftOp().getType());
              }
              as.setRightOp(e);
              unitsBuilt.add(as);
              if (neg) {
                Unit newU=Jimple.v().newAssignStmt(as.getLeftOp(),Jimple.v().newNegExpr(as.getLeftOp()));
                unitsBuilt.add(newU);
                units.insertAfter(newU,u);
              }
              divPerformed++;
              printOutput(unitsBuilt);
            }
          }
        }
      }
    }
  }
}"
85214,"private Object[] checkNumericValue(NumericConstant nc){
  Double d=null;
  Object shift[]=new Object[3];
  if (nc instanceof IntConstant) {
    d=new Double(((IntConstant)nc).value);
  }
 else   if (nc instanceof DoubleConstant) {
    d=new Double(((DoubleConstant)nc).value);
  }
 else   if (nc instanceof FloatConstant) {
    d=new Double(((FloatConstant)nc).value);
  }
 else   if (nc instanceof LongConstant) {
    d=new Double(((LongConstant)nc).value);
  }
  if (d != null) {
    shift[2]=new Boolean(d.doubleValue() < 0);
    double tmp[]=checkShiftValue(d.doubleValue());
    if (tmp[0] != 0) {
      shift[0]=new Integer((int)tmp[0]);
      if (tmp[1] != 0)       shift[1]=new Double(tmp[1]);
 else       shift[1]=null;
    }
 else     d=null;
  }
  if (d == null) {
    shift[0]=null;
    shift[1]=null;
  }
  return shift;
}","private Object[] checkNumericValue(NumericConstant nc){
  Double dnc=null;
  if (nc instanceof IntConstant) {
    dnc=(double)((IntConstant)nc).value;
  }
 else   if (nc instanceof DoubleConstant) {
    dnc=((DoubleConstant)nc).value;
  }
 else   if (nc instanceof FloatConstant) {
    dnc=(double)((FloatConstant)nc).value;
  }
 else   if (nc instanceof LongConstant) {
    dnc=(double)((LongConstant)nc).value;
  }
  Object shift[]=new Object[3];
  if (dnc != null) {
    shift[2]=dnc < 0;
    double tmp[]=checkShiftValue(dnc);
    if (tmp[0] != 0) {
      shift[0]=(int)tmp[0];
      if (tmp[1] != 0) {
        shift[1]=tmp[1];
      }
 else {
        shift[1]=null;
      }
    }
 else {
      dnc=null;
    }
  }
  if (dnc == null) {
    shift[0]=null;
    shift[1]=null;
  }
  return shift;
}"
85215,"private double[] checkShiftValue(double val){
  double shift[]=new double[2];
  if (val == 0 || val == 1 || val == -1) {
    shift[0]=0;
    shift[1]=0;
  }
 else {
    double shift_dbl=Math.log(val) / Math.log(2);
    double shift_int=Math.rint(shift_dbl);
    if (shift_dbl == shift_int) {
      shift[1]=0;
    }
 else {
      if (Math.pow(2,shift_int) > val)       shift_int--;
      shift[1]=val - Math.pow(2,shift_int);
    }
    shift[0]=shift_int;
  }
  return shift;
}","private double[] checkShiftValue(double val){
  double shift[]=new double[2];
  if (val == 0 || val == 1 || val == -1) {
    shift[0]=0;
    shift[1]=0;
  }
 else {
    double shift_dbl=Math.log(val) / Math.log(2);
    double shift_int=Math.rint(shift_dbl);
    if (shift_dbl == shift_int) {
      shift[1]=0;
    }
 else {
      if (Math.pow(2,shift_int) > val) {
        shift_int--;
      }
      shift[1]=val - Math.pow(2,shift_int);
    }
    shift[0]=shift_int;
  }
  return shift;
}"
85216,"public UnitInterferenceGraph(Body body,Map<Local,Object> localToGroup,LiveLocals liveLocals,ExceptionalUnitGraph unitGraph){
  locals=new ArrayList<Local>();
  locals.addAll(body.getLocals());
{
    localToLocals=new HashMap<Local,Set<Local>>(body.getLocalCount() * 2 + 1,0.7f);
  }
{
    for (    Unit unit : body.getUnits()) {
      List<ValueBox> defBoxes=unit.getDefBoxes();
      if (!defBoxes.isEmpty()) {
        if (!(defBoxes.size() == 1))         throw new RuntimeException(""String_Node_Str"");
        Set<Local> liveLocalsAtUnit=new HashSet<Local>();
        for (        Unit succ : unitGraph.getUnexceptionalSuccsOf(unit)) {
          List<Local> beforeSucc=liveLocals.getLiveLocalsBefore(succ);
          liveLocalsAtUnit.addAll(beforeSucc);
        }
        Value defValue=((ValueBox)defBoxes.get(0)).getValue();
        if (defValue instanceof Local) {
          Local defLocal=(Local)defValue;
          for (          Local otherLocal : liveLocalsAtUnit) {
            if (localToGroup.get(otherLocal).equals(localToGroup.get(defLocal)))             setInterference(defLocal,otherLocal);
          }
        }
      }
    }
  }
}","public UnitInterferenceGraph(Body body,Map<Local,Object> localToGroup,LiveLocals liveLocals,ExceptionalUnitGraph unitGraph){
  locals=new ArrayList<Local>();
  locals.addAll(body.getLocals());
{
    localToLocals=new HashMap<Local,Set<Local>>(body.getLocalCount() * 2 + 1,0.7f);
  }
{
    for (    Unit unit : body.getUnits()) {
      List<ValueBox> defBoxes=unit.getDefBoxes();
      if (!defBoxes.isEmpty()) {
        if (!(defBoxes.size() == 1))         throw new RuntimeException(""String_Node_Str"");
        Set<Local> liveLocalsAtUnit=new HashSet<Local>();
        for (        Unit succ : unitGraph.getSuccsOf(unit)) {
          List<Local> beforeSucc=liveLocals.getLiveLocalsBefore(succ);
          liveLocalsAtUnit.addAll(beforeSucc);
        }
        Value defValue=defBoxes.get(0).getValue();
        if (defValue instanceof Local) {
          Local defLocal=(Local)defValue;
          for (          Local otherLocal : liveLocalsAtUnit) {
            if (localToGroup.get(otherLocal).equals(localToGroup.get(defLocal)))             setInterference(defLocal,otherLocal);
          }
        }
      }
    }
  }
}"
85217,"public int hashCode(){
  return string.hashCode() * 101 + group.hashCode() + 17;
}","@Override public int hashCode(){
  return string.hashCode() * 101 + group.hashCode() + 17;
}"
85218,"public boolean equals(Object p){
  if (p instanceof StringGroupPair) {
    return ((StringGroupPair)p).string.equals(this.string) && ((StringGroupPair)p).group.equals(this.group);
  }
  return false;
}","@Override public boolean equals(Object p){
  if (p instanceof StringGroupPair) {
    return ((StringGroupPair)p).string.equals(this.string) && ((StringGroupPair)p).group.equals(this.group);
  }
  return false;
}"
85219,"public static String getNewName(){
  int size=5;
  int tries=0;
  int index=Rand.getInt(stringChars.length);
  int length=stringChars[index].length;
  String result=null;
  char cNewName[]=new char[size];
  do {
    if (tries == size) {
      cNewName=new char[++size];
      tries=0;
    }
    do {
      cNewName[0]=stringChars[index][Rand.getInt(length)];
    }
 while (!Character.isJavaIdentifierStart(cNewName[0]));
    for (int i=1; i < cNewName.length; i++) {
      int rand=Rand.getInt(length);
      cNewName[i]=stringChars[index][rand];
    }
    result=String.copyValueOf(cNewName);
    tries++;
  }
 while (oldToNewMethodNames.containsValue(result) || BodyBuilder.nameList.contains(result));
  BodyBuilder.nameList.add(result);
  return result;
}","public static String getNewName(){
  int size=5;
  int tries=0;
  int index=Rand.getInt(stringChars.length);
  int length=stringChars[index].length;
  String result;
  char cNewName[]=new char[size];
  do {
    if (tries == size) {
      cNewName=new char[++size];
      tries=0;
    }
    do {
      cNewName[0]=stringChars[index][Rand.getInt(length)];
    }
 while (!Character.isJavaIdentifierStart(cNewName[0]));
    for (int i=1; i < cNewName.length; i++) {
      int rand=Rand.getInt(length);
      cNewName[i]=stringChars[index][rand];
    }
    result=String.copyValueOf(cNewName);
    tries++;
  }
 while (oldToNewMethodNames.containsValue(result) || BodyBuilder.nameList.contains(result));
  BodyBuilder.nameList.add(result);
  return result;
}"
85220,"private static boolean allowsRename(SootClass c,SootMethod m){
  if (soot.jbco.Main.getWeight(MethodRenamer.name,m.getName()) == 0)   return false;
  String subSig=m.getSubSignature();
  if (subSig.equals(""String_Node_Str"") && m.isPublic() && m.isStatic()) {
    return false;
  }
 else   if (subSig.indexOf(""String_Node_Str"") >= 0 || subSig.equals(""String_Node_Str"")) {
    return false;
  }
 else {
    for (    SootClass _c : hierarchy.getSuperclassesOfIncluding(c.getSuperclass())) {
      if (_c.isLibraryClass() && _c.declaresMethod(subSig) && hierarchy.isVisible(c,_c.getMethod(subSig))) {
        return false;
      }
    }
    do {
      if (checkInterfacesForMethod(c,m))       return false;
    }
 while (c.hasSuperclass() && (c=c.getSuperclass()) != null);
  }
  return true;
}","private static boolean allowsRename(SootClass sc,SootMethod method){
  if (soot.jbco.Main.getWeight(MethodRenamer.name,method.getName()) == 0) {
    return false;
  }
  String subSig=method.getSubSignature();
  if (""String_Node_Str"".equals(subSig) && method.isPublic() && method.isStatic()) {
    return false;
  }
 else   if (subSig.contains(SootMethod.constructorName) || subSig.equals(SootMethod.staticInitializerName)) {
    return false;
  }
 else {
    return !(isOverriddenLibraryInterfaceMethod(sc,method) || isOverriddenLibrarySuperclassMethod(sc,method));
  }
}"
85221,"protected void internalTransform(String phaseName,Map<String,String> options){
  if (output)   out.println(""String_Node_Str"");
  BodyBuilder.retrieveAllBodies();
  BodyBuilder.retrieveAllNames();
  Scene scene=G.v().soot_Scene();
  scene.releaseActiveHierarchy();
  hierarchy=scene.getActiveHierarchy();
  for (  SootClass c : scene.getApplicationClasses()) {
    Vector<String> fields=new Vector<String>();
    Iterator<SootField> fIt=c.getFields().iterator();
    while (fIt.hasNext()) {
      fields.add(fIt.next().getName());
    }
    final List<SootMethod> methods=new ArrayList<>(c.getMethods());
    for (    SootMethod m : methods) {
      String subSig=m.getSubSignature();
      if (!allowsRename(c,m))       continue;
      boolean rename=true;
      for (      SootClass _c : hierarchy.getSuperclassesOfIncluding(c.getSuperclass())) {
        if (_c.declaresMethod(subSig) && hierarchy.isVisible(c,_c.getMethod(subSig)) && _c.isLibraryClass()) {
          if (output)           out.println(""String_Node_Str"" + _c.getName() + ""String_Node_Str""+ subSig+ ""String_Node_Str""+ c.getName());
          rename=false;
          break;
        }
      }
      if (rename) {
        String newName=oldToNewMethodNames.get(m.getName());
        if (newName == null) {
          if (fields.size() > 0) {
            int rand=Rand.getInt(fields.size());
            newName=fields.remove(rand);
            if (oldToNewMethodNames.containsValue(newName))             newName=getNewName();
          }
 else {
            newName=getNewName();
          }
        }
        oldToNewMethodNames.put(m.getName(),newName);
        if (output)         out.println(""String_Node_Str"" + m.getSignature() + ""String_Node_Str""+ newName);
        m.setName(newName);
      }
    }
  }
  for (  SootClass c : scene.getApplicationClasses()) {
    final List<SootMethod> methods=new ArrayList<>(c.getMethods());
    for (    SootMethod m : methods) {
      if (!m.isConcrete() || m.getDeclaringClass().isLibraryClass())       continue;
      Body aBody=null;
      try {
        aBody=m.getActiveBody();
      }
 catch (      Exception exc) {
        continue;
      }
      Iterator<Unit> uIt=aBody.getUnits().iterator();
      while (uIt.hasNext()) {
        Iterator<ValueBox> ubIt=uIt.next().getUseBoxes().iterator();
        while (ubIt.hasNext()) {
          Value v=ubIt.next().getValue();
          if (!(v instanceof InvokeExpr))           continue;
          InvokeExpr ie=(InvokeExpr)v;
          SootMethodRef methodRef=ie.getMethodRef();
          if (methodRef.declaringClass().getMethodUnsafe(methodRef.getSubSignature()) != null) {
            continue;
          }
          String newName=oldToNewMethodNames.get(methodRef.name());
          if (newName == null)           continue;
          methodRef=scene.makeMethodRef(methodRef.declaringClass(),newName,methodRef.parameterTypes(),methodRef.returnType(),methodRef.isStatic());
          ie.setMethodRef(methodRef);
        }
      }
    }
  }
  scene.releaseActiveHierarchy();
  scene.getActiveHierarchy();
  scene.setFastHierarchy(new FastHierarchy());
}","protected void internalTransform(String phaseName,Map<String,String> options){
  if (output) {
    out.println(""String_Node_Str"");
  }
  BodyBuilder.retrieveAllBodies();
  BodyBuilder.retrieveAllNames();
  Scene scene=G.v().soot_Scene();
  scene.releaseActiveHierarchy();
  hierarchy=scene.getActiveHierarchy();
  for (  SootClass sc : scene.getApplicationClasses()) {
    List<String> fieldNames=sc.getFields().stream().map(SootField::getName).collect(toList());
    List<SootMethod> methods=new ArrayList<>(sc.getMethods());
    for (    SootMethod method : methods) {
      String subSig=method.getSubSignature();
      if (!allowsRename(sc,method)) {
        continue;
      }
      boolean rename=true;
      for (      SootClass c : hierarchy.getSuperclassesOfIncluding(sc.getSuperclass())) {
        if (c.declaresMethod(subSig) && hierarchy.isVisible(sc,c.getMethod(subSig)) && c.isLibraryClass()) {
          if (output) {
            out.println(""String_Node_Str"" + c.getName() + ""String_Node_Str""+ subSig+ ""String_Node_Str""+ sc.getName());
          }
          rename=false;
          break;
        }
      }
      if (rename) {
        String newName=oldToNewMethodNames.get(method.getName());
        if (newName == null) {
          if (!fieldNames.isEmpty()) {
            int rand=Rand.getInt(fieldNames.size());
            newName=fieldNames.remove(rand);
            if (oldToNewMethodNames.containsKey(newName) || oldToNewMethodNames.containsValue(newName)) {
              newName=getNewName();
            }
          }
 else {
            newName=getNewName();
          }
        }
        oldToNewMethodNames.put(method.getName(),newName);
        if (output) {
          out.println(""String_Node_Str"" + method.getSignature() + ""String_Node_Str""+ newName);
        }
        method.setName(newName);
      }
    }
  }
  for (  SootClass c : scene.getApplicationClasses()) {
    final List<SootMethod> methods=new ArrayList<>(c.getMethods());
    for (    SootMethod m : methods) {
      if (!m.isConcrete() || m.getDeclaringClass().isLibraryClass()) {
        continue;
      }
      Body body;
      try {
        body=m.getActiveBody();
      }
 catch (      Exception exc) {
        continue;
      }
      for (      Unit unit : body.getUnits()) {
        for (        ValueBox valueBox : unit.getUseBoxes()) {
          Value v=valueBox.getValue();
          if (!(v instanceof InvokeExpr)) {
            continue;
          }
          InvokeExpr invokeExpr=(InvokeExpr)v;
          SootMethodRef methodRef=invokeExpr.getMethodRef();
          if (methodRef.declaringClass().getMethodUnsafe(methodRef.getSubSignature()) != null) {
            continue;
          }
          String newName=oldToNewMethodNames.get(methodRef.name());
          if (newName == null) {
            continue;
          }
          methodRef=scene.makeMethodRef(methodRef.declaringClass(),newName,methodRef.parameterTypes(),methodRef.returnType(),methodRef.isStatic());
          invokeExpr.setMethodRef(methodRef);
        }
      }
    }
  }
  scene.releaseActiveHierarchy();
  scene.getActiveHierarchy();
  scene.setFastHierarchy(new FastHierarchy());
}"
85222,"@Override public SootMethod next(){
  if (!hasNext())   throw new NoSuchElementException();
  SootMethod n=next;
  next=null;
  return n;
}","@Override public SootMethod next(){
  if (!hasNext())   throw new NoSuchElementException();
  SootMethod n=current;
  current=null;
  SootClass currentClass=n.getDeclaringClass();
  while (true) {
    SootClass superClass=currentClass.getSuperclassUnsafe();
    if (superClass == null)     break;
    SootMethod m=superClass.getMethodUnsafe(sigClinit);
    if (m != null) {
      current=m;
      break;
    }
    currentClass=superClass;
  }
  return n;
}"
85223,"/** 
 * Returns a list of all clinits of class cl and its superclasses. 
 */
public Iterable<SootMethod> clinitsOf(SootClass cl){
  final SootMethod initStart=cl.getMethodUnsafe(sigClinit);
  if (initStart == null)   return Collections.emptyList();
  return new Iterable<SootMethod>(){
    @Override public Iterator<SootMethod> iterator(){
      return new Iterator<SootMethod>(){
        SootMethod current=initStart;
        SootMethod next=null;
        @Override public SootMethod next(){
          if (!hasNext())           throw new NoSuchElementException();
          SootMethod n=next;
          next=null;
          return n;
        }
        @Override public boolean hasNext(){
          if (next != null)           return true;
          SootClass currentClass=current.getDeclaringClass();
          while (true) {
            SootClass superClass=currentClass.getSuperclassUnsafe();
            if (superClass == null)             return false;
            SootMethod m=superClass.getMethodUnsafe(sigClinit);
            if (m != null) {
              next=m;
              current=m;
              return true;
            }
            currentClass=superClass;
          }
        }
      }
;
    }
  }
;
}","/** 
 * Returns a list of all clinits of class cl and its superclasses. 
 */
public Iterable<SootMethod> clinitsOf(SootClass cl){
  final SootMethod initStart=cl.getMethodUnsafe(sigClinit);
  if (initStart == null)   return Collections.emptyList();
  return new Iterable<SootMethod>(){
    @Override public Iterator<SootMethod> iterator(){
      return new Iterator<SootMethod>(){
        SootMethod current=initStart;
        @Override public SootMethod next(){
          if (!hasNext())           throw new NoSuchElementException();
          SootMethod n=current;
          current=null;
          SootClass currentClass=n.getDeclaringClass();
          while (true) {
            SootClass superClass=currentClass.getSuperclassUnsafe();
            if (superClass == null)             break;
            SootMethod m=superClass.getMethodUnsafe(sigClinit);
            if (m != null) {
              current=m;
              break;
            }
            currentClass=superClass;
          }
          return n;
        }
        @Override public boolean hasNext(){
          return current != null;
        }
      }
;
    }
  }
;
}"
85224,"@Override public boolean hasNext(){
  if (next != null)   return true;
  SootClass currentClass=current.getDeclaringClass();
  while (true) {
    SootClass superClass=currentClass.getSuperclassUnsafe();
    if (superClass == null)     return false;
    SootMethod m=superClass.getMethodUnsafe(sigClinit);
    if (m != null) {
      next=m;
      current=m;
      return true;
    }
    currentClass=superClass;
  }
}","@Override public boolean hasNext(){
  return current != null;
}"
85225,"@Override public Iterator<SootMethod> iterator(){
  return new Iterator<SootMethod>(){
    SootMethod current=initStart;
    SootMethod next=null;
    @Override public SootMethod next(){
      if (!hasNext())       throw new NoSuchElementException();
      SootMethod n=next;
      next=null;
      return n;
    }
    @Override public boolean hasNext(){
      if (next != null)       return true;
      SootClass currentClass=current.getDeclaringClass();
      while (true) {
        SootClass superClass=currentClass.getSuperclassUnsafe();
        if (superClass == null)         return false;
        SootMethod m=superClass.getMethodUnsafe(sigClinit);
        if (m != null) {
          next=m;
          current=m;
          return true;
        }
        currentClass=superClass;
      }
    }
  }
;
}","@Override public Iterator<SootMethod> iterator(){
  return new Iterator<SootMethod>(){
    SootMethod current=initStart;
    @Override public SootMethod next(){
      if (!hasNext())       throw new NoSuchElementException();
      SootMethod n=current;
      current=null;
      SootClass currentClass=n.getDeclaringClass();
      while (true) {
        SootClass superClass=currentClass.getSuperclassUnsafe();
        if (superClass == null)         break;
        SootMethod m=superClass.getMethodUnsafe(sigClinit);
        if (m != null) {
          current=m;
          break;
        }
        currentClass=superClass;
      }
      return n;
    }
    @Override public boolean hasNext(){
      return current != null;
    }
  }
;
}"
85226,"public void transformClass(SootClass sc){
  SootMethod smInit=null;
  Set<SootField> alreadyInitialized=new HashSet<SootField>();
  for (  SootField sf : sc.getFields()) {
    if (!sf.isStatic() || !sf.isFinal())     continue;
    if (alreadyInitialized.contains(sf))     continue;
    for (    Tag t : sf.getTags()) {
      Stmt initStmt=null;
      if (t instanceof DoubleConstantValueTag) {
        double value=((DoubleConstantValueTag)t).getDoubleValue();
        initStmt=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(sf.makeRef()),DoubleConstant.v(value));
      }
 else       if (t instanceof FloatConstantValueTag) {
        float value=((FloatConstantValueTag)t).getFloatValue();
        initStmt=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(sf.makeRef()),FloatConstant.v(value));
      }
 else       if (t instanceof IntegerConstantValueTag) {
        int value=((IntegerConstantValueTag)t).getIntValue();
        initStmt=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(sf.makeRef()),IntConstant.v(value));
      }
 else       if (t instanceof LongConstantValueTag) {
        long value=((LongConstantValueTag)t).getLongValue();
        initStmt=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(sf.makeRef()),LongConstant.v(value));
      }
 else       if (t instanceof StringConstantValueTag) {
        String value=((StringConstantValueTag)t).getStringValue();
        initStmt=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(sf.makeRef()),StringConstant.v(value));
      }
      if (initStmt != null) {
        if (smInit == null)         smInit=getOrCreateInitializer(sc,alreadyInitialized);
        smInit.getActiveBody().getUnits().addFirst(initStmt);
      }
    }
  }
  if (smInit != null) {
    Chain<Unit> units=smInit.getActiveBody().getUnits();
    if (units.isEmpty() || !(units.getLast() instanceof ReturnVoidStmt))     units.add(Jimple.v().newReturnVoidStmt());
  }
}","public void transformClass(SootClass sc){
  SootMethod smInit=null;
  Set<SootField> alreadyInitialized=new HashSet<SootField>();
  for (  SootField sf : sc.getFields()) {
    if (!sf.isStatic() || !sf.isFinal())     continue;
    if (alreadyInitialized.contains(sf))     continue;
    for (    Tag t : sf.getTags()) {
      Stmt initStmt=null;
      if (t instanceof DoubleConstantValueTag) {
        double value=((DoubleConstantValueTag)t).getDoubleValue();
        initStmt=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(sf.makeRef()),DoubleConstant.v(value));
      }
 else       if (t instanceof FloatConstantValueTag) {
        float value=((FloatConstantValueTag)t).getFloatValue();
        initStmt=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(sf.makeRef()),FloatConstant.v(value));
      }
 else       if (t instanceof IntegerConstantValueTag) {
        int value=((IntegerConstantValueTag)t).getIntValue();
        initStmt=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(sf.makeRef()),IntConstant.v(value));
      }
 else       if (t instanceof LongConstantValueTag) {
        long value=((LongConstantValueTag)t).getLongValue();
        initStmt=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(sf.makeRef()),LongConstant.v(value));
      }
 else       if (t instanceof StringConstantValueTag) {
        String value=((StringConstantValueTag)t).getStringValue();
        initStmt=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(sf.makeRef()),StringConstant.v(value));
      }
      if (initStmt != null) {
        if (smInit == null)         smInit=getOrCreateInitializer(sc,alreadyInitialized);
        if (smInit != null)         smInit.getActiveBody().getUnits().addFirst(initStmt);
      }
    }
  }
  if (smInit != null) {
    Chain<Unit> units=smInit.getActiveBody().getUnits();
    if (units.isEmpty() || !(units.getLast() instanceof ReturnVoidStmt))     units.add(Jimple.v().newReturnVoidStmt());
  }
}"
85227,"private SootMethod getOrCreateInitializer(SootClass sc,Set<SootField> alreadyInitialized){
  SootMethod smInit;
  smInit=sc.getMethodByNameUnsafe(""String_Node_Str"");
  if (smInit == null) {
    smInit=Scene.v().makeSootMethod(""String_Node_Str"",Collections.<Type>emptyList(),VoidType.v());
    smInit.setActiveBody(Jimple.v().newBody(smInit));
    sc.addMethod(smInit);
    smInit.setModifiers(Modifier.PUBLIC | Modifier.STATIC);
  }
 else {
    smInit.retrieveActiveBody();
    for (    Unit u : smInit.getActiveBody().getUnits()) {
      Stmt s=(Stmt)u;
      for (      ValueBox vb : s.getDefBoxes())       if (vb.getValue() instanceof FieldRef)       alreadyInitialized.add(((FieldRef)vb.getValue()).getField());
    }
  }
  return smInit;
}","private SootMethod getOrCreateInitializer(SootClass sc,Set<SootField> alreadyInitialized){
  SootMethod smInit;
  smInit=sc.getMethodByNameUnsafe(""String_Node_Str"");
  if (smInit == null) {
    smInit=Scene.v().makeSootMethod(""String_Node_Str"",Collections.<Type>emptyList(),VoidType.v());
    smInit.setActiveBody(Jimple.v().newBody(smInit));
    sc.addMethod(smInit);
    smInit.setModifiers(Modifier.PUBLIC | Modifier.STATIC);
  }
 else   if (smInit.isPhantom())   return null;
 else {
    smInit.retrieveActiveBody();
    for (    Unit u : smInit.getActiveBody().getUnits()) {
      Stmt s=(Stmt)u;
      for (      ValueBox vb : s.getDefBoxes())       if (vb.getValue() instanceof FieldRef)       alreadyInitialized.add(((FieldRef)vb.getValue()).getField());
    }
  }
  return smInit;
}"
85228,"private void addInitializingValue(SootClass clas,SootField f,Constant con){
  if (con instanceof NullConstant) {
    return;
  }
 else   if (con instanceof IntConstant) {
    if (((IntConstant)con).value == 0)     return;
  }
 else   if (con instanceof LongConstant) {
    if (((LongConstant)con).value == 0)     return;
  }
 else   if (con instanceof StringConstant) {
    if (((StringConstant)con).value == null)     return;
  }
 else   if (con instanceof DoubleConstant) {
    if (((DoubleConstant)con).value == 0)     return;
  }
 else   if (con instanceof FloatConstant) {
    if (((FloatConstant)con).value == 0)     return;
  }
  Body b=null;
  boolean newInit=false;
  if (!clas.declaresMethodByName(""String_Node_Str"")) {
    SootMethod m=Scene.v().makeSootMethod(""String_Node_Str"",Collections.<Type>emptyList(),VoidType.v());
    clas.addMethod(m);
    b=Jimple.v().newBody(m);
    m.setActiveBody(b);
    newInit=true;
  }
 else {
    SootMethod m=clas.getMethodByName(""String_Node_Str"");
    if (!m.hasActiveBody()) {
      b=Jimple.v().newBody(m);
      m.setActiveBody(b);
      newInit=true;
    }
 else {
      b=m.getActiveBody();
    }
  }
  PatchingChain<Unit> units=b.getUnits();
  units.addFirst(Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(f.makeRef()),con));
  if (newInit)   units.addLast(Jimple.v().newReturnVoidStmt());
}","private void addInitializingValue(SootClass clas,SootField f,Constant con){
  if (con instanceof NullConstant) {
    return;
  }
 else   if (con instanceof IntConstant) {
    if (((IntConstant)con).value == 0)     return;
  }
 else   if (con instanceof LongConstant) {
    if (((LongConstant)con).value == 0)     return;
  }
 else   if (con instanceof StringConstant) {
    if (((StringConstant)con).value == null)     return;
  }
 else   if (con instanceof DoubleConstant) {
    if (((DoubleConstant)con).value == 0)     return;
  }
 else   if (con instanceof FloatConstant) {
    if (((FloatConstant)con).value == 0)     return;
  }
  Body b;
  boolean newInit=false;
  if (!clas.declaresMethodByName(SootMethod.staticInitializerName)) {
    SootMethod m=Scene.v().makeSootMethod(SootMethod.staticInitializerName,Collections.<Type>emptyList(),VoidType.v(),Modifier.STATIC);
    clas.addMethod(m);
    b=Jimple.v().newBody(m);
    m.setActiveBody(b);
    newInit=true;
  }
 else {
    SootMethod m=clas.getMethodByName(SootMethod.staticInitializerName);
    if (!m.hasActiveBody()) {
      b=Jimple.v().newBody(m);
      m.setActiveBody(b);
      newInit=true;
    }
 else {
      b=m.getActiveBody();
    }
  }
  PatchingChain<Unit> units=b.getUnits();
  units.addFirst(Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(f.makeRef()),con));
  if (newInit)   units.addLast(Jimple.v().newReturnVoidStmt());
}"
85229,"protected void internalTransform(String phaseName,Map<String,String> options){
  Scene scene=G.v().soot_Scene();
  if (output)   out.println(""String_Node_Str"");
  soot.jbco.util.BodyBuilder.retrieveAllNames();
  Chain<SootClass> appClasses=scene.getApplicationClasses();
  for (  SootClass cl : appClasses) {
    for (    SootMethod m : cl.getMethods()) {
      if (!m.hasActiveBody() || m.getName().indexOf(""String_Node_Str"") >= 0)       continue;
      for (      ValueBox useBox : m.getActiveBody().getUseBoxes()) {
        Value v=useBox.getValue();
        if (v instanceof Constant) {
          Constant c=(Constant)v;
          Type t=c.getType();
          List<Constant> values=typesToValues.get(t);
          if (values == null) {
            values=new ArrayList<Constant>();
            typesToValues.put(t,values);
          }
          boolean found=false;
          Iterator<Constant> vit=values.iterator();
          while (vit.hasNext()) {
            if (vit.next().equals(c)) {
              found=true;
              break;
            }
          }
          if (!found) {
            constants++;
            values.add(c);
          }
        }
      }
    }
  }
  int count=0;
  String name=""String_Node_Str"";
  Object classes[]=appClasses.toArray();
  Iterator<Type> it=typesToValues.keySet().iterator();
  while (it.hasNext()) {
    Type t=it.next();
    if (t instanceof NullType)     continue;
    Iterator<Constant> cit=typesToValues.get(t).iterator();
    while (cit.hasNext()) {
      Constant c=cit.next();
      name+=""String_Node_Str"";
      SootClass rand=null;
      do {
        rand=(SootClass)classes[Rand.getInt(classes.length)];
      }
 while (rand.isInterface());
      SootField newf=Scene.v().makeSootField(FieldRenamer.getNewName(),t,Modifier.STATIC ^ Modifier.PUBLIC);
      rand.addField(newf);
      FieldRenamer.sootFieldsRenamed.add(newf);
      FieldRenamer.addOldAndNewName(name,newf.getName());
      constantsToFields.put(c,newf);
      addInitializingValue(rand,newf,c);
      FieldRenamer.addOldAndNewName(""String_Node_Str"" + count++,newf.getName());
    }
  }
  updatedConstants+=count;
}","protected void internalTransform(String phaseName,Map<String,String> options){
  Scene scene=G.v().soot_Scene();
  if (output)   out.println(""String_Node_Str"");
  soot.jbco.util.BodyBuilder.retrieveAllNames();
  Chain<SootClass> appClasses=scene.getApplicationClasses();
  for (  SootClass cl : appClasses) {
    for (    SootMethod m : cl.getMethods()) {
      if (!m.hasActiveBody() || m.getName().contains(SootMethod.staticInitializerName))       continue;
      for (      ValueBox useBox : m.getActiveBody().getUseBoxes()) {
        Value v=useBox.getValue();
        if (v instanceof Constant) {
          Constant c=(Constant)v;
          Type t=c.getType();
          List<Constant> values=typesToValues.get(t);
          if (values == null) {
            values=new ArrayList<Constant>();
            typesToValues.put(t,values);
          }
          boolean found=false;
          Iterator<Constant> vit=values.iterator();
          while (vit.hasNext()) {
            if (vit.next().equals(c)) {
              found=true;
              break;
            }
          }
          if (!found) {
            constants++;
            values.add(c);
          }
        }
      }
    }
  }
  int count=0;
  String name=""String_Node_Str"";
  Object classes[]=appClasses.toArray();
  Iterator<Type> it=typesToValues.keySet().iterator();
  while (it.hasNext()) {
    Type t=it.next();
    if (t instanceof NullType)     continue;
    Iterator<Constant> cit=typesToValues.get(t).iterator();
    while (cit.hasNext()) {
      Constant c=cit.next();
      name+=""String_Node_Str"";
      SootClass rand=null;
      do {
        rand=(SootClass)classes[Rand.getInt(classes.length)];
      }
 while (rand.isInterface());
      SootField newf=Scene.v().makeSootField(FieldRenamer.getNewName(),t,Modifier.STATIC ^ Modifier.PUBLIC);
      rand.addField(newf);
      FieldRenamer.sootFieldsRenamed.add(newf);
      FieldRenamer.addOldAndNewName(name,newf.getName());
      constantsToFields.put(c,newf);
      addInitializingValue(rand,newf,c);
      FieldRenamer.addOldAndNewName(""String_Node_Str"" + count++,newf.getName());
    }
  }
  updatedConstants+=count;
}"
85230,"protected void setBooleanTo(SootClass c,SootField f,boolean value){
  if (!value && f.getType() instanceof IntegerType && Rand.getInt() % 2 > 0)   return;
  Body b=null;
  boolean newInit=false;
  if (!c.declaresMethodByName(""String_Node_Str"")) {
    SootMethod m=Scene.v().makeSootMethod(""String_Node_Str"",Collections.<Type>emptyList(),VoidType.v());
    c.addMethod(m);
    b=Jimple.v().newBody(m);
    m.setActiveBody(b);
    newInit=true;
  }
 else {
    SootMethod m=c.getMethodByName(""String_Node_Str"");
    b=m.getActiveBody();
  }
  PatchingChain<Unit> units=b.getUnits();
  if (f.getType() instanceof IntegerType) {
    units.addFirst(Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(f.makeRef()),IntConstant.v(value ? 1 : 0)));
  }
 else {
    Local bool=Jimple.v().newLocal(""String_Node_Str"",boolRef);
    b.getLocals().add(bool);
    SootMethod boolInit=boolRef.getSootClass().getMethod(""String_Node_Str"");
    units.addFirst(Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(f.makeRef()),bool));
    units.addFirst(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(bool,boolInit.makeRef(),IntConstant.v(value ? 1 : 0))));
    units.addFirst(Jimple.v().newAssignStmt(bool,Jimple.v().newNewExpr(boolRef)));
  }
  if (newInit)   units.addLast(Jimple.v().newReturnVoidStmt());
}","protected void setBooleanTo(SootClass c,SootField f,boolean value){
  if (!value && f.getType() instanceof IntegerType && Rand.getInt() % 2 > 0)   return;
  Body b;
  boolean newInit=false;
  if (!c.declaresMethodByName(SootMethod.staticInitializerName)) {
    SootMethod m=Scene.v().makeSootMethod(SootMethod.staticInitializerName,Collections.<Type>emptyList(),VoidType.v(),Modifier.STATIC);
    c.addMethod(m);
    b=Jimple.v().newBody(m);
    m.setActiveBody(b);
    newInit=true;
  }
 else {
    SootMethod m=c.getMethodByName(SootMethod.staticInitializerName);
    b=m.getActiveBody();
  }
  PatchingChain<Unit> units=b.getUnits();
  if (f.getType() instanceof IntegerType) {
    units.addFirst(Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(f.makeRef()),IntConstant.v(value ? 1 : 0)));
  }
 else {
    Local bool=Jimple.v().newLocal(""String_Node_Str"",boolRef);
    b.getLocals().add(bool);
    SootMethod boolInit=boolRef.getSootClass().getMethod(""String_Node_Str"");
    units.addFirst(Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(f.makeRef()),bool));
    units.addFirst(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(bool,boolInit.makeRef(),IntConstant.v(value ? 1 : 0))));
    units.addFirst(Jimple.v().newAssignStmt(bool,Jimple.v().newNewExpr(boolRef)));
  }
  if (newInit)   units.addLast(Jimple.v().newReturnVoidStmt());
}"
85231,"protected void internalTransform(String phaseName,Map<String,String> options){
  if (output)   out.println(""String_Node_Str"");
  soot.jbco.util.BodyBuilder.retrieveAllBodies();
  soot.jbco.util.BodyBuilder.retrieveAllNames();
  Scene scene=G.v().soot_Scene();
  scene.releaseActiveHierarchy();
  hierarchy=scene.getActiveHierarchy();
  for (  SootClass c : scene.getApplicationClasses()) {
    Vector<String> fields=new Vector<String>();
    Iterator<SootField> fIt=c.getFields().iterator();
    while (fIt.hasNext()) {
      fields.add(fIt.next().getName());
    }
    final List<SootMethod> methods=new ArrayList<>(c.getMethods());
    for (    SootMethod m : methods) {
      String subSig=m.getSubSignature();
      if (!allowsRename(c,m))       continue;
      boolean rename=true;
      for (      SootClass _c : hierarchy.getSuperclassesOfIncluding(c.getSuperclass())) {
        if (_c.declaresMethod(subSig) && hierarchy.isVisible(c,_c.getMethod(subSig)) && _c.isLibraryClass()) {
          if (output)           out.println(""String_Node_Str"" + _c.getName() + ""String_Node_Str""+ subSig+ ""String_Node_Str""+ c.getName());
          rename=false;
          break;
        }
      }
      if (rename) {
        String newName=oldToNewMethodNames.get(m.getName());
        if (newName == null) {
          if (fields.size() > 0) {
            int rand=Rand.getInt(fields.size());
            newName=fields.remove(rand);
            if (oldToNewMethodNames.containsValue(newName))             newName=getNewName();
          }
 else {
            newName=getNewName();
          }
        }
        oldToNewMethodNames.put(m.getName(),newName);
        if (output)         out.println(""String_Node_Str"" + m.getSignature() + ""String_Node_Str""+ newName);
        m.setName(newName);
      }
    }
  }
  for (  SootClass c : scene.getApplicationClasses()) {
    final List<SootMethod> methods=new ArrayList<>(c.getMethods());
    for (    SootMethod m : methods) {
      if (!m.isConcrete() || m.getDeclaringClass().isLibraryClass())       continue;
      Body aBody=null;
      try {
        aBody=m.getActiveBody();
      }
 catch (      Exception exc) {
        continue;
      }
      Iterator<Unit> uIt=aBody.getUnits().iterator();
      while (uIt.hasNext()) {
        Iterator<ValueBox> ubIt=uIt.next().getUseBoxes().iterator();
        while (ubIt.hasNext()) {
          Value v=ubIt.next().getValue();
          if (!(v instanceof InvokeExpr))           continue;
          InvokeExpr ie=(InvokeExpr)v;
          try {
            ie.getMethod();
            continue;
          }
 catch (          Exception e) {
          }
          SootMethodRef r=ie.getMethodRef();
          String newName=oldToNewMethodNames.get(r.name());
          if (newName == null)           continue;
          r=scene.makeMethodRef(r.declaringClass(),newName,r.parameterTypes(),r.returnType(),r.isStatic());
          ie.setMethodRef(r);
        }
      }
    }
  }
  scene.releaseActiveHierarchy();
  scene.getActiveHierarchy();
  scene.setFastHierarchy(new FastHierarchy());
}","protected void internalTransform(String phaseName,Map<String,String> options){
  if (output)   out.println(""String_Node_Str"");
  BodyBuilder.retrieveAllBodies();
  BodyBuilder.retrieveAllNames();
  Scene scene=G.v().soot_Scene();
  scene.releaseActiveHierarchy();
  hierarchy=scene.getActiveHierarchy();
  for (  SootClass c : scene.getApplicationClasses()) {
    Vector<String> fields=new Vector<String>();
    Iterator<SootField> fIt=c.getFields().iterator();
    while (fIt.hasNext()) {
      fields.add(fIt.next().getName());
    }
    final List<SootMethod> methods=new ArrayList<>(c.getMethods());
    for (    SootMethod m : methods) {
      String subSig=m.getSubSignature();
      if (!allowsRename(c,m))       continue;
      boolean rename=true;
      for (      SootClass _c : hierarchy.getSuperclassesOfIncluding(c.getSuperclass())) {
        if (_c.declaresMethod(subSig) && hierarchy.isVisible(c,_c.getMethod(subSig)) && _c.isLibraryClass()) {
          if (output)           out.println(""String_Node_Str"" + _c.getName() + ""String_Node_Str""+ subSig+ ""String_Node_Str""+ c.getName());
          rename=false;
          break;
        }
      }
      if (rename) {
        String newName=oldToNewMethodNames.get(m.getName());
        if (newName == null) {
          if (fields.size() > 0) {
            int rand=Rand.getInt(fields.size());
            newName=fields.remove(rand);
            if (oldToNewMethodNames.containsValue(newName))             newName=getNewName();
          }
 else {
            newName=getNewName();
          }
        }
        oldToNewMethodNames.put(m.getName(),newName);
        if (output)         out.println(""String_Node_Str"" + m.getSignature() + ""String_Node_Str""+ newName);
        m.setName(newName);
      }
    }
  }
  for (  SootClass c : scene.getApplicationClasses()) {
    final List<SootMethod> methods=new ArrayList<>(c.getMethods());
    for (    SootMethod m : methods) {
      if (!m.isConcrete() || m.getDeclaringClass().isLibraryClass())       continue;
      Body aBody=null;
      try {
        aBody=m.getActiveBody();
      }
 catch (      Exception exc) {
        continue;
      }
      Iterator<Unit> uIt=aBody.getUnits().iterator();
      while (uIt.hasNext()) {
        Iterator<ValueBox> ubIt=uIt.next().getUseBoxes().iterator();
        while (ubIt.hasNext()) {
          Value v=ubIt.next().getValue();
          if (!(v instanceof InvokeExpr))           continue;
          InvokeExpr ie=(InvokeExpr)v;
          SootMethodRef methodRef=ie.getMethodRef();
          if (methodRef.declaringClass().getMethodUnsafe(methodRef.getSubSignature()) != null) {
            continue;
          }
          String newName=oldToNewMethodNames.get(methodRef.name());
          if (newName == null)           continue;
          methodRef=scene.makeMethodRef(methodRef.declaringClass(),newName,methodRef.parameterTypes(),methodRef.returnType(),methodRef.isStatic());
          ie.setMethodRef(methodRef);
        }
      }
    }
  }
  scene.releaseActiveHierarchy();
  scene.getActiveHierarchy();
  scene.setFastHierarchy(new FastHierarchy());
}"
85232,"/** 
 * Transforms the given class, i.e. scans for a <clinit> method and generates new constant value tags for all constant assignments to static final fields.
 * @param sc The class to transform
 * @param removeAssignments True if the assignments inside the <clinit> method shall be removed, otherwise false
 */
public void transformClass(SootClass sc,boolean removeAssignments){
  SootMethod smInit=sc.getMethodByNameUnsafe(""String_Node_Str"");
  if (smInit == null)   return;
  Set<SootField> nonConstantFields=new HashSet<SootField>();
  Map<SootField,ConstantValueTag> newTags=new HashMap<SootField,ConstantValueTag>();
  Set<SootField> removeTagList=new HashSet<SootField>();
  for (Iterator<Unit> itU=smInit.getActiveBody().getUnits().snapshotIterator(); itU.hasNext(); ) {
    Unit u=itU.next();
    if (u instanceof AssignStmt) {
      AssignStmt assign=(AssignStmt)u;
      if (assign.getLeftOp() instanceof StaticFieldRef && assign.getRightOp() instanceof Constant) {
        SootField field=null;
        try {
          field=((StaticFieldRef)assign.getLeftOp()).getField();
          if (field == null || nonConstantFields.contains(field))           continue;
        }
 catch (        ConflictingFieldRefException ex) {
          continue;
        }
        if (field.getDeclaringClass().equals(sc) && field.isStatic() && field.isFinal()) {
          boolean found=false;
          for (          Tag t : field.getTags()) {
            if (t instanceof ConstantValueTag) {
              if (checkConstantValue((ConstantValueTag)t,(Constant)assign.getRightOp())) {
                if (removeAssignments)                 itU.remove();
              }
 else {
                G.v().out.println(""String_Node_Str"" + field + ""String_Node_Str""+ assign.getRightOp()+ ""String_Node_Str""+ t+ ""String_Node_Str"");
                removeTagList.add(field);
              }
              found=true;
              break;
            }
          }
          if (!found) {
            if (!checkConstantValue(newTags.get(field),(Constant)assign.getRightOp())) {
              nonConstantFields.add(field);
              newTags.remove(field);
              removeTagList.add(field);
              continue;
            }
            ConstantValueTag newTag=createConstantTagFromValue((Constant)assign.getRightOp());
            if (newTag != null)             newTags.put(field,newTag);
          }
        }
      }
 else       if (assign.getLeftOp() instanceof StaticFieldRef) {
        try {
          SootField sf=((StaticFieldRef)assign.getLeftOp()).getField();
          if (sf != null)           removeTagList.add(sf);
        }
 catch (        ConflictingFieldRefException ex) {
        }
      }
    }
  }
  for (  Entry<SootField,ConstantValueTag> entry : newTags.entrySet()) {
    SootField field=entry.getKey();
    if (removeTagList.contains(field))     continue;
    field.addTag(entry.getValue());
  }
  if (removeAssignments && !newTags.isEmpty())   for (Iterator<Unit> itU=smInit.getActiveBody().getUnits().snapshotIterator(); itU.hasNext(); ) {
    Unit u=itU.next();
    if (u instanceof AssignStmt) {
      AssignStmt assign=(AssignStmt)u;
      if (assign.getLeftOp() instanceof FieldRef)       try {
        SootField fld=((FieldRef)assign.getLeftOp()).getField();
        if (fld != null && newTags.containsKey(fld))         itU.remove();
      }
 catch (      ConflictingFieldRefException ex) {
      }
    }
  }
  for (  SootField sf : removeTagList) {
    if (removeTagList.contains(sf)) {
      List<Tag> toRemoveTagList=new ArrayList<Tag>();
      for (      Tag t : sf.getTags()) {
        if (t instanceof ConstantValueTag) {
          toRemoveTagList.add(t);
        }
      }
      for (      Tag t : toRemoveTagList) {
        sf.getTags().remove(t);
      }
    }
  }
}","/** 
 * Transforms the given class, i.e. scans for a <clinit> method and generates new constant value tags for all constant assignments to static final fields.
 * @param sc The class to transform
 * @param removeAssignments True if the assignments inside the <clinit> method shall be removed, otherwise false
 */
public void transformClass(SootClass sc,boolean removeAssignments){
  SootMethod smInit=sc.getMethodByNameUnsafe(""String_Node_Str"");
  if (smInit == null || !smInit.isConcrete())   return;
  Set<SootField> nonConstantFields=new HashSet<SootField>();
  Map<SootField,ConstantValueTag> newTags=new HashMap<SootField,ConstantValueTag>();
  Set<SootField> removeTagList=new HashSet<SootField>();
  for (Iterator<Unit> itU=smInit.getActiveBody().getUnits().snapshotIterator(); itU.hasNext(); ) {
    Unit u=itU.next();
    if (u instanceof AssignStmt) {
      AssignStmt assign=(AssignStmt)u;
      if (assign.getLeftOp() instanceof StaticFieldRef && assign.getRightOp() instanceof Constant) {
        SootField field=null;
        try {
          field=((StaticFieldRef)assign.getLeftOp()).getField();
          if (field == null || nonConstantFields.contains(field))           continue;
        }
 catch (        ConflictingFieldRefException ex) {
          continue;
        }
        if (field.getDeclaringClass().equals(sc) && field.isStatic() && field.isFinal()) {
          boolean found=false;
          for (          Tag t : field.getTags()) {
            if (t instanceof ConstantValueTag) {
              if (checkConstantValue((ConstantValueTag)t,(Constant)assign.getRightOp())) {
                if (removeAssignments)                 itU.remove();
              }
 else {
                G.v().out.println(""String_Node_Str"" + field + ""String_Node_Str""+ assign.getRightOp()+ ""String_Node_Str""+ t+ ""String_Node_Str"");
                removeTagList.add(field);
              }
              found=true;
              break;
            }
          }
          if (!found) {
            if (!checkConstantValue(newTags.get(field),(Constant)assign.getRightOp())) {
              nonConstantFields.add(field);
              newTags.remove(field);
              removeTagList.add(field);
              continue;
            }
            ConstantValueTag newTag=createConstantTagFromValue((Constant)assign.getRightOp());
            if (newTag != null)             newTags.put(field,newTag);
          }
        }
      }
 else       if (assign.getLeftOp() instanceof StaticFieldRef) {
        try {
          SootField sf=((StaticFieldRef)assign.getLeftOp()).getField();
          if (sf != null)           removeTagList.add(sf);
        }
 catch (        ConflictingFieldRefException ex) {
        }
      }
    }
  }
  for (  Entry<SootField,ConstantValueTag> entry : newTags.entrySet()) {
    SootField field=entry.getKey();
    if (removeTagList.contains(field))     continue;
    field.addTag(entry.getValue());
  }
  if (removeAssignments && !newTags.isEmpty())   for (Iterator<Unit> itU=smInit.getActiveBody().getUnits().snapshotIterator(); itU.hasNext(); ) {
    Unit u=itU.next();
    if (u instanceof AssignStmt) {
      AssignStmt assign=(AssignStmt)u;
      if (assign.getLeftOp() instanceof FieldRef)       try {
        SootField fld=((FieldRef)assign.getLeftOp()).getField();
        if (fld != null && newTags.containsKey(fld))         itU.remove();
      }
 catch (      ConflictingFieldRefException ex) {
      }
    }
  }
  for (  SootField sf : removeTagList) {
    if (removeTagList.contains(sf)) {
      List<Tag> toRemoveTagList=new ArrayList<Tag>();
      for (      Tag t : sf.getTags()) {
        if (t instanceof ConstantValueTag) {
          toRemoveTagList.add(t);
        }
      }
      for (      Tag t : toRemoveTagList) {
        sf.getTags().remove(t);
      }
    }
  }
}"
85233,"protected void internalTransform(String phaseName,Map<String,String> options){
  if (output)   out.println(""String_Node_Str"");
  soot.jbco.util.BodyBuilder.retrieveAllBodies();
  soot.jbco.util.BodyBuilder.retrieveAllNames();
  Scene scene=G.v().soot_Scene();
  scene.releaseActiveHierarchy();
  hierarchy=scene.getActiveHierarchy();
  for (  SootClass c : scene.getApplicationClasses()) {
    Vector<String> fields=new Vector<String>();
    Iterator<SootField> fIt=c.getFields().iterator();
    while (fIt.hasNext()) {
      fields.add(fIt.next().getName());
    }
    for (    SootMethod m : c.getMethods()) {
      String subSig=m.getSubSignature();
      if (!allowsRename(c,m))       continue;
      boolean rename=true;
      for (      SootClass _c : hierarchy.getSuperclassesOfIncluding(c.getSuperclass())) {
        if (_c.declaresMethod(subSig) && hierarchy.isVisible(c,_c.getMethod(subSig)) && _c.isLibraryClass()) {
          if (output)           out.println(""String_Node_Str"" + _c.getName() + ""String_Node_Str""+ subSig+ ""String_Node_Str""+ c.getName());
          rename=false;
          break;
        }
      }
      if (rename) {
        String newName=oldToNewMethodNames.get(m.getName());
        if (newName == null) {
          if (fields.size() > 0) {
            int rand=Rand.getInt(fields.size());
            newName=fields.remove(rand);
            if (oldToNewMethodNames.containsValue(newName))             newName=getNewName();
          }
 else {
            newName=getNewName();
          }
        }
        oldToNewMethodNames.put(m.getName(),newName);
        if (output)         out.println(""String_Node_Str"" + m.getSignature() + ""String_Node_Str""+ newName);
        m.setName(newName);
      }
    }
  }
  for (  SootClass c : scene.getApplicationClasses()) {
    for (    SootMethod m : c.getMethods()) {
      if (!m.isConcrete() || m.getDeclaringClass().isLibraryClass())       continue;
      Body aBody=null;
      try {
        aBody=m.getActiveBody();
      }
 catch (      Exception exc) {
        continue;
      }
      Iterator<Unit> uIt=aBody.getUnits().iterator();
      while (uIt.hasNext()) {
        Iterator<ValueBox> ubIt=uIt.next().getUseBoxes().iterator();
        while (ubIt.hasNext()) {
          Value v=ubIt.next().getValue();
          if (!(v instanceof InvokeExpr))           continue;
          InvokeExpr ie=(InvokeExpr)v;
          try {
            ie.getMethod();
            continue;
          }
 catch (          Exception e) {
          }
          SootMethodRef r=ie.getMethodRef();
          String newName=oldToNewMethodNames.get(r.name());
          if (newName == null)           continue;
          r=scene.makeMethodRef(r.declaringClass(),newName,r.parameterTypes(),r.returnType(),r.isStatic());
          ie.setMethodRef(r);
        }
      }
    }
  }
  scene.releaseActiveHierarchy();
  scene.getActiveHierarchy();
  scene.setFastHierarchy(new FastHierarchy());
}","protected void internalTransform(String phaseName,Map<String,String> options){
  if (output)   out.println(""String_Node_Str"");
  soot.jbco.util.BodyBuilder.retrieveAllBodies();
  soot.jbco.util.BodyBuilder.retrieveAllNames();
  Scene scene=G.v().soot_Scene();
  scene.releaseActiveHierarchy();
  hierarchy=scene.getActiveHierarchy();
  for (  SootClass c : scene.getApplicationClasses()) {
    Vector<String> fields=new Vector<String>();
    Iterator<SootField> fIt=c.getFields().iterator();
    while (fIt.hasNext()) {
      fields.add(fIt.next().getName());
    }
    final List<SootMethod> methods=new ArrayList<>(c.getMethods());
    for (    SootMethod m : methods) {
      String subSig=m.getSubSignature();
      if (!allowsRename(c,m))       continue;
      boolean rename=true;
      for (      SootClass _c : hierarchy.getSuperclassesOfIncluding(c.getSuperclass())) {
        if (_c.declaresMethod(subSig) && hierarchy.isVisible(c,_c.getMethod(subSig)) && _c.isLibraryClass()) {
          if (output)           out.println(""String_Node_Str"" + _c.getName() + ""String_Node_Str""+ subSig+ ""String_Node_Str""+ c.getName());
          rename=false;
          break;
        }
      }
      if (rename) {
        String newName=oldToNewMethodNames.get(m.getName());
        if (newName == null) {
          if (fields.size() > 0) {
            int rand=Rand.getInt(fields.size());
            newName=fields.remove(rand);
            if (oldToNewMethodNames.containsValue(newName))             newName=getNewName();
          }
 else {
            newName=getNewName();
          }
        }
        oldToNewMethodNames.put(m.getName(),newName);
        if (output)         out.println(""String_Node_Str"" + m.getSignature() + ""String_Node_Str""+ newName);
        m.setName(newName);
      }
    }
  }
  for (  SootClass c : scene.getApplicationClasses()) {
    final List<SootMethod> methods=new ArrayList<>(c.getMethods());
    for (    SootMethod m : methods) {
      if (!m.isConcrete() || m.getDeclaringClass().isLibraryClass())       continue;
      Body aBody=null;
      try {
        aBody=m.getActiveBody();
      }
 catch (      Exception exc) {
        continue;
      }
      Iterator<Unit> uIt=aBody.getUnits().iterator();
      while (uIt.hasNext()) {
        Iterator<ValueBox> ubIt=uIt.next().getUseBoxes().iterator();
        while (ubIt.hasNext()) {
          Value v=ubIt.next().getValue();
          if (!(v instanceof InvokeExpr))           continue;
          InvokeExpr ie=(InvokeExpr)v;
          try {
            ie.getMethod();
            continue;
          }
 catch (          Exception e) {
          }
          SootMethodRef r=ie.getMethodRef();
          String newName=oldToNewMethodNames.get(r.name());
          if (newName == null)           continue;
          r=scene.makeMethodRef(r.declaringClass(),newName,r.parameterTypes(),r.returnType(),r.isStatic());
          ie.setMethodRef(r);
        }
      }
    }
  }
  scene.releaseActiveHierarchy();
  scene.getActiveHierarchy();
  scene.setFastHierarchy(new FastHierarchy());
}"
85234,"/** 
 * @param dexSourceFile Path to a jar, apk, dex, odex, etc. file
 * @return List of dex files derived from source file
 */
public Collection<DexBackedDexFile> getDexFiles(File dexSourceFile){
  return getDexNameToFileMapping(dexSourceFile).values();
}","/** 
 * @param dexSourceFile Path to a jar, apk, dex, odex, etc. file
 * @return List of dex files derived from source file
 */
public Collection<DexBackedDexFile> getDexFiles(File dexSourceFile) throws IOException {
  return getDexNameToFileMapping(dexSourceFile).values();
}"
85235,"private Map<String,DexBackedDexFile> init(File dexSourceFile) throws IOException {
  int api=Scene.v().getAndroidAPIVersion();
  boolean multiple_dex=Options.v().process_multiple_dex();
  MultiDexContainer<? extends DexBackedDexFile> dexContainer=DexFileFactory.loadDexContainer(dexSourceFile,Opcodes.forApi(api));
  int dexFileCount=dexContainer.getDexEntryNames().size();
  if (dexFileCount < 1)   throw new RuntimeException(String.format(""String_Node_Str"",dexSourceFile));
  Map<String,DexBackedDexFile> dexMap=new HashMap<>(dexFileCount);
  ListIterator<String> entryNames=dexContainer.getDexEntryNames().listIterator(dexFileCount);
  while (entryNames.hasPrevious()) {
    String entryName=entryNames.previous();
    DexBackedDexFile entry=dexContainer.getEntry(entryName);
    G.v().out.println(String.format(""String_Node_Str"",entryName,entry.getClasses().size(),dexSourceFile.getName()));
    if (multiple_dex)     dexMap.put(entryName,entry);
 else     if (dexMap.isEmpty() && (entryName.equals(""String_Node_Str"") || !entryNames.hasPrevious())) {
      dexMap=Collections.singletonMap(entryName,entry);
      G.v().out.println(""String_Node_Str"" + entryName + ""String_Node_Str"");
    }
  }
  return Collections.unmodifiableMap(dexMap);
}","private Map<String,DexBackedDexFile> init(File dexSourceFile) throws IOException {
  int api=Scene.v().getAndroidAPIVersion();
  boolean multiple_dex=Options.v().process_multiple_dex();
  MultiDexContainer<? extends DexBackedDexFile> dexContainer=DexFileFactory.loadDexContainer(dexSourceFile,Opcodes.forApi(api));
  List<String> dexEntryNameList=dexContainer.getDexEntryNames();
  int dexFileCount=dexEntryNameList.size();
  if (dexFileCount < 1)   throw new RuntimeException(String.format(""String_Node_Str"",dexSourceFile));
  Map<String,DexBackedDexFile> dexMap=new HashMap<>(dexFileCount);
  ListIterator<String> entryNameIterator=dexEntryNameList.listIterator(dexFileCount);
  while (entryNameIterator.hasPrevious()) {
    String entryName=entryNameIterator.previous();
    DexBackedDexFile entry=dexContainer.getEntry(entryName);
    G.v().out.println(String.format(""String_Node_Str"",entryName,entry.getClasses().size(),dexSourceFile.getName()));
    if (multiple_dex)     dexMap.put(entryName,entry);
 else     if (dexMap.isEmpty() && (entryName.equals(""String_Node_Str"") || !entryNameIterator.hasPrevious())) {
      dexMap=Collections.singletonMap(entryName,entry);
      G.v().out.println(""String_Node_Str"" + entryName + ""String_Node_Str"");
    }
  }
  return Collections.unmodifiableMap(dexMap);
}"
85236,"/** 
 * @param dexSourceFile Path to a jar, apk, dex, odex, etc. file
 * @return List of dex files derived from source file
 */
public Map<String,DexBackedDexFile> getDexNameToFileMapping(File dexSourceFile){
  String key=dexSourceFile.getAbsolutePath();
  Map<String,DexBackedDexFile> dexFiles=dexMap.get(key);
  if (dexFiles == null) {
    try {
      dexFiles=init(dexSourceFile);
      dexMap.put(key,dexFiles);
    }
 catch (    IOException e) {
      throw new CompilationDeathException(""String_Node_Str"",e);
    }
  }
  return dexFiles;
}","/** 
 * @param dexSourceFile Path to a jar, apk, dex, odex, etc. file
 * @return List of dex files derived from source file
 */
public Map<String,DexBackedDexFile> getDexNameToFileMapping(File dexSourceFile) throws IOException {
  String key=dexSourceFile.getCanonicalPath();
  Map<String,DexBackedDexFile> dexFiles=dexMap.get(key);
  if (dexFiles == null) {
    try {
      dexFiles=init(dexSourceFile);
      dexMap.put(key,dexFiles);
    }
 catch (    IOException e) {
      throw new CompilationDeathException(""String_Node_Str"",e);
    }
  }
  return dexFiles;
}"
85237,"public DexBackedDexFile getDexInFile(File dexSourceFile,String fileName){
  DexBackedDexFile dexFile=getDexNameToFileMapping(dexSourceFile).get(fileName);
  if (dexFile == null)   throw new CompilationDeathException(""String_Node_Str"" + fileName + ""String_Node_Str""+ dexSourceFile);
  return dexFile;
}","public DexBackedDexFile getDexInFile(File dexSourceFile,String fileName) throws IOException {
  DexBackedDexFile dexFile=getDexNameToFileMapping(dexSourceFile).get(fileName);
  if (dexFile == null)   throw new CompilationDeathException(""String_Node_Str"" + fileName + ""String_Node_Str""+ dexSourceFile);
  return dexFile;
}"
85238,"/** 
 * Construct a DexlibWrapper from a dex file and stores its classes referenced by their name. No further process is done here.
 */
public DexlibWrapper(File dexSource){
  this.dexFiles=DexFileProvider.v().getDexFiles(dexSource);
}","/** 
 * Construct a DexlibWrapper from a dex file and stores its classes referenced by their name. No further process is done here.
 */
public DexlibWrapper(File dexSource){
  try {
    this.dexFiles=DexFileProvider.v().getDexFiles(dexSource);
  }
 catch (  IOException e) {
    throw new CompilationDeathException(""String_Node_Str"",e);
  }
}"
85239,"public Dependencies makeSootClass(SootClass sc,String className){
  if (Util.isByteCodeClassName(className)) {
    className=Util.dottedClassName(className);
  }
  try {
    for (    String dexEntry : dexContainer.getDexEntryNames()) {
      DexFile dexFile=dexContainer.getEntry(dexEntry);
      ClassDef defItem=classesToDefItems.get(className);
      return dexLoader.makeSootClass(sc,defItem,dexFile);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  throw new RuntimeException(""String_Node_Str"" + className);
}","public Dependencies makeSootClass(SootClass sc,String className){
  if (Util.isByteCodeClassName(className)) {
    className=Util.dottedClassName(className);
  }
  try {
    for (    String dexEntry : dexContainer.getDexEntryNames()) {
      DexFile dexFile=dexContainer.getEntry(dexEntry);
      ClassDef defItem=classesToDefItems.get(className);
      if (dexFile.getClasses().contains(defItem))       return dexLoader.makeSootClass(sc,defItem,dexFile);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  throw new RuntimeException(""String_Node_Str"" + className);
}"
85240,"/** 
 * Constructs a hierarchy from the current scene. 
 */
public Hierarchy(){
  this.sc=Scene.v();
  state=sc.getState();
{
    Chain<SootClass> allClasses=sc.getClasses();
    classToSubclasses=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToSubinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToSuperinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    classToDirSubclasses=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirSubinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirSuperinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirImplementers=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    for (    SootClass c : allClasses) {
      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;
      if (c.isInterface()) {
        interfaceToDirSubinterfaces.put(c,new ArrayList<SootClass>());
        interfaceToDirSuperinterfaces.put(c,new ArrayList<SootClass>());
        interfaceToDirImplementers.put(c,new ArrayList<SootClass>());
      }
 else       classToDirSubclasses.put(c,new ArrayList<SootClass>());
    }
    for (    SootClass c : allClasses) {
      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;
      if (c.hasSuperclass()) {
        if (c.isInterface()) {
          List<SootClass> l2=interfaceToDirSuperinterfaces.get(c);
          for (          SootClass i : c.getInterfaces()) {
            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;
            List<SootClass> l=interfaceToDirSubinterfaces.get(i);
            if (l != null)             l.add(c);
            if (l2 != null)             l2.add(i);
          }
        }
 else {
          List<SootClass> l=classToDirSubclasses.get(c.getSuperclass());
          if (l != null)           l.add(c);
          for (          SootClass i : c.getInterfaces()) {
            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;
            l=interfaceToDirImplementers.get(i);
            if (l != null)             l.add(c);
          }
        }
      }
    }
    for (    SootClass c : allClasses) {
      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;
      if (c.isInterface()) {
        List<SootClass> imp=interfaceToDirImplementers.get(c);
        Set<SootClass> s=new ArraySet<SootClass>();
        for (        SootClass c0 : imp) {
          if (c.resolvingLevel() < SootClass.HIERARCHY)           continue;
          s.addAll(getSubclassesOfIncluding(c0));
        }
        imp.clear();
        imp.addAll(s);
      }
    }
  }
}","/** 
 * Constructs a hierarchy from the current scene. 
 */
public Hierarchy(){
  this.sc=Scene.v();
  state=sc.getState();
{
    Chain<SootClass> allClasses=sc.getClasses();
    classToSubclasses=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToSubinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToSuperinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    classToDirSubclasses=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirSubinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirSuperinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirImplementers=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    initializeHierarchy(allClasses);
  }
}"
85241,"protected void internalTransform(Body body,String phaseName,Map<String,String> options){
  if (this.throwAnalysis == null)   this.throwAnalysis=Scene.v().getDefaultThrowAnalysis();
  if (Options.v().verbose())   G.v().out.println(""String_Node_Str"" + body.getMethod().getName() + ""String_Node_Str"");
  Chain<Trap> trapChain=body.getTraps();
  Chain<Unit> unitChain=body.getUnits();
  if (trapChain.size() > 0) {
    ExceptionalUnitGraph graph=new ExceptionalUnitGraph(body,throwAnalysis);
    Set<Unit> unitsWithMonitor=getUnitsWithMonitor(graph);
    for (Iterator<Trap> trapIt=trapChain.iterator(); trapIt.hasNext(); ) {
      Trap trap=trapIt.next();
      boolean isCatchAll=trap.getException().getName().equals(""String_Node_Str"");
      Unit firstTrappedUnit=trap.getBeginUnit();
      Unit firstTrappedThrower=null;
      Unit firstUntrappedUnit=trap.getEndUnit();
      Unit lastTrappedUnit=unitChain.getPredOf(firstUntrappedUnit);
      Unit lastTrappedThrower=null;
      for (Unit u=firstTrappedUnit; u != null && u != firstUntrappedUnit; u=unitChain.getSuccOf(u)) {
        if (mightThrowTo(graph,u,trap)) {
          firstTrappedThrower=u;
          break;
        }
        if (isCatchAll && unitsWithMonitor.contains(u))         break;
      }
      if (firstTrappedThrower != null) {
        for (Unit u=lastTrappedUnit; u != null; u=unitChain.getPredOf(u)) {
          if (mightThrowTo(graph,u,trap)) {
            lastTrappedThrower=u;
            break;
          }
          if (isCatchAll && unitsWithMonitor.contains(u)) {
            lastTrappedThrower=u;
            break;
          }
        }
      }
      if (firstTrappedThrower == null)       trapIt.remove();
 else {
        if (firstTrappedThrower != null && firstTrappedUnit != firstTrappedThrower) {
          trap.setBeginUnit(firstTrappedThrower);
        }
        if (lastTrappedThrower == null) {
          lastTrappedThrower=firstTrappedUnit;
        }
        if (lastTrappedUnit != lastTrappedThrower) {
          trap.setEndUnit(unitChain.getSuccOf(lastTrappedThrower));
        }
      }
    }
  }
}","protected void internalTransform(Body body,String phaseName,Map<String,String> options){
  if (this.throwAnalysis == null)   this.throwAnalysis=Scene.v().getDefaultThrowAnalysis();
  if (Options.v().verbose())   G.v().out.println(""String_Node_Str"" + body.getMethod().getName() + ""String_Node_Str"");
  Chain<Trap> trapChain=body.getTraps();
  Chain<Unit> unitChain=body.getUnits();
  if (trapChain.size() > 0) {
    ExceptionalUnitGraph graph=new ExceptionalUnitGraph(body,throwAnalysis);
    Set<Unit> unitsWithMonitor=getUnitsWithMonitor(graph);
    for (Iterator<Trap> trapIt=trapChain.iterator(); trapIt.hasNext(); ) {
      Trap trap=trapIt.next();
      boolean isCatchAll=trap.getException().getName().equals(""String_Node_Str"");
      Unit firstTrappedUnit=trap.getBeginUnit();
      Unit firstTrappedThrower=null;
      Unit firstUntrappedUnit=trap.getEndUnit();
      Unit lastTrappedUnit=unitChain.getPredOf(firstUntrappedUnit);
      Unit lastTrappedThrower=null;
      for (Unit u=firstTrappedUnit; u != null && u != firstUntrappedUnit; u=unitChain.getSuccOf(u)) {
        if (mightThrowTo(graph,u,trap)) {
          firstTrappedThrower=u;
          break;
        }
        if (isCatchAll && unitsWithMonitor.contains(u)) {
          if (firstTrappedThrower == null)           firstTrappedThrower=u;
          break;
        }
      }
      if (firstTrappedThrower != null) {
        for (Unit u=lastTrappedUnit; u != null; u=unitChain.getPredOf(u)) {
          if (mightThrowTo(graph,u,trap)) {
            lastTrappedThrower=u;
            break;
          }
          if (isCatchAll && unitsWithMonitor.contains(u)) {
            lastTrappedThrower=u;
            break;
          }
        }
      }
      if (firstTrappedThrower == null)       trapIt.remove();
 else {
        if (firstTrappedThrower != null && firstTrappedUnit != firstTrappedThrower) {
          trap.setBeginUnit(firstTrappedThrower);
        }
        if (lastTrappedThrower == null) {
          lastTrappedThrower=firstTrappedUnit;
        }
        if (lastTrappedUnit != lastTrappedThrower) {
          trap.setEndUnit(unitChain.getSuccOf(lastTrappedThrower));
        }
      }
    }
  }
}"
85242,"/** 
 * Reserves low registers in case we later find an instruction that has short operands. We can then move the real operands into the reserved low ones and use those instead.
 * @param insns
 * @param insnsStmtMap
 * @param parameterInstructionsList 
 */
private void reserveRegisters(List<Insn> insns,Map<Insn,Stmt> insnsStmtMap,List<LocalRegisterAssignmentInformation> parameterInstructionsList){
  int reservedRegs=0;
  while (true) {
    int regsNeeded=getRegsNeeded(reservedRegs,insns,insnsStmtMap);
    int regsToReserve=regsNeeded - reservedRegs;
    if (regsToReserve <= 0) {
      break;
    }
    regAlloc.increaseRegCount(regsToReserve);
    for (    Insn insn : insns) {
      shiftRegs(insn,regsToReserve);
    }
    for (    LocalRegisterAssignmentInformation info : parameterInstructionsList) {
      Register r=info.getRegister();
      r.setNumber(r.getNumber() + regsToReserve);
    }
    reservedRegs+=regsToReserve;
  }
}","/** 
 * Reserves low registers in case we later find an instruction that has short operands. We can then move the real operands into the reserved low ones and use those instead.
 * @param insns
 * @param insnsStmtMap
 * @param parameterInstructionsList
 */
private void reserveRegisters(List<Insn> insns,Map<Insn,Stmt> insnsStmtMap,List<LocalRegisterAssignmentInformation> parameterInstructionsList){
  int reservedRegs=0;
  while (true) {
    int regsNeeded=getRegsNeeded(reservedRegs,insns,insnsStmtMap);
    int regsToReserve=regsNeeded - reservedRegs;
    if (regsToReserve <= 0) {
      break;
    }
    regAlloc.increaseRegCount(regsToReserve);
    for (    Insn insn : insns) {
      shiftRegs(insn,regsToReserve);
    }
    for (    LocalRegisterAssignmentInformation info : parameterInstructionsList) {
      Register r=info.getRegister();
      r.setNumber(r.getNumber() + regsToReserve);
    }
    reservedRegs+=regsToReserve;
  }
}"
85243,"public List<Insn> finishRegs(List<Insn> insns,Map<Insn,Stmt> insnsStmtMap,Map<Insn,LocalRegisterAssignmentInformation> instructionRegisterMap,List<LocalRegisterAssignmentInformation> parameterInstructionsList){
  renumParamRegsToHigh(insns,parameterInstructionsList);
  reserveRegisters(insns,insnsStmtMap,parameterInstructionsList);
  InstructionIterator insnIter=new InstructionIterator(insns,insnsStmtMap,instructionRegisterMap);
  while (insnIter.hasNext()) {
    Insn oldInsn=insnIter.next();
    if (oldInsn.toString().equals(""String_Node_Str""))     System.out.println(""String_Node_Str"");
    if (oldInsn.hasIncompatibleRegs()) {
      Insn fittingInsn=findFittingInsn(oldInsn);
      if (fittingInsn != null) {
        insnIter.set(fittingInsn,oldInsn);
      }
 else {
        fixIncompatRegs(oldInsn,insnIter);
      }
    }
  }
  return insns;
}","public List<Insn> finishRegs(List<Insn> insns,Map<Insn,Stmt> insnsStmtMap,Map<Insn,LocalRegisterAssignmentInformation> instructionRegisterMap,List<LocalRegisterAssignmentInformation> parameterInstructionsList){
  renumParamRegsToHigh(insns,parameterInstructionsList);
  reserveRegisters(insns,insnsStmtMap,parameterInstructionsList);
  InstructionIterator insnIter=new InstructionIterator(insns,insnsStmtMap,instructionRegisterMap);
  while (insnIter.hasNext()) {
    Insn oldInsn=insnIter.next();
    if (oldInsn.hasIncompatibleRegs()) {
      Insn fittingInsn=findFittingInsn(oldInsn);
      if (fittingInsn != null) {
        insnIter.set(fittingInsn,oldInsn);
      }
 else {
        fixIncompatRegs(oldInsn,insnIter);
      }
    }
  }
  return insns;
}"
85244,"/** 
 * Compares the generated test output with Soot's output for the tested class line by line
 * @throws FileNotFoundException if either the file for comparison could not be created or the soot output could not be opened
 */
@Test public void compareOutput() throws FileNotFoundException {
  File compareFile=new File(""String_Node_Str"" + getTargetClass() + ""String_Node_Str"");
  PrintWriter ow=new PrintWriter(compareFile);
  ow.print(comparisonOutput);
  ow.flush();
  ow.close();
  File targetFile=new File(""String_Node_Str"" + getTargetClass() + ""String_Node_Str"");
  Scanner sootOutput=new Scanner(targetFile);
  Scanner compareOutput=new Scanner(comparisonOutput);
  try {
    System.out.println(String.format(""String_Node_Str"",compareFile.getAbsolutePath(),targetFile.getAbsolutePath()));
    int line=1;
    while (compareOutput.hasNextLine()) {
      assertTrue(String.format(""String_Node_Str"",getTargetClass(),line),sootOutput.hasNextLine());
      String compare=compareOutput.nextLine();
      String output=sootOutput.nextLine();
      assertTrue(String.format(""String_Node_Str"",compare.trim(),output.trim(),line,getTargetClass()),compare.equals(output));
      ++line;
    }
    assertFalse(String.format(""String_Node_Str"",getTargetClass()),sootOutput.hasNextLine());
    System.out.println(""String_Node_Str"");
  }
  finally {
    sootOutput.close();
    compareOutput.close();
  }
}","/** 
 * Compares the generated test output with Soot's output for the tested class line by line
 * @throws FileNotFoundException if either the file for comparison could not be created or the soot output could not be opened
 */
@Test public void compareOutput() throws FileNotFoundException {
  File compareFile=new File(""String_Node_Str"" + getTargetClass() + ""String_Node_Str"");
  PrintWriter ow=new PrintWriter(compareFile);
  ow.print(comparisonOutput);
  ow.flush();
  ow.close();
  File targetFile=new File(""String_Node_Str"" + getTargetClass() + ""String_Node_Str"");
  assertTrue(String.format(""String_Node_Str"",targetFile.getAbsolutePath()),targetFile.exists());
  Scanner sootOutput=new Scanner(targetFile);
  Scanner compareOutput=new Scanner(comparisonOutput);
  try {
    System.out.println(String.format(""String_Node_Str"",compareFile.getAbsolutePath(),targetFile.getAbsolutePath()));
    int line=1;
    while (compareOutput.hasNextLine()) {
      assertTrue(String.format(""String_Node_Str"",getTargetClass(),line),sootOutput.hasNextLine());
      String compare=compareOutput.nextLine();
      String output=sootOutput.nextLine();
      assertTrue(String.format(""String_Node_Str"",compare.trim(),output.trim(),line,getTargetClass()),compare.equals(output));
      ++line;
    }
    assertFalse(String.format(""String_Node_Str"",getTargetClass()),sootOutput.hasNextLine());
    System.out.println(""String_Node_Str"");
  }
  finally {
    sootOutput.close();
    compareOutput.close();
  }
}"
85245,"public Type[] jimpleTypesOfFieldOrMethodDescriptor(String descriptor){
  Type[] ret=cache.get(descriptor);
  if (ret != null)   return ret;
  char[] d=descriptor.toCharArray();
  int p=0;
  conversionTypes.clear();
  outer:   while (p < d.length) {
    boolean isArray=false;
    int numDimensions=0;
    Type baseType=null;
    swtch:     while (p < d.length) {
switch (d[p]) {
case '(':
case ')':
        p++;
      continue outer;
case '[':
    isArray=true;
  numDimensions++;
p++;
continue swtch;
case 'B':
baseType=ByteType.v();
p++;
break swtch;
case 'C':
baseType=CharType.v();
p++;
break swtch;
case 'D':
baseType=DoubleType.v();
p++;
break swtch;
case 'F':
baseType=FloatType.v();
p++;
break swtch;
case 'I':
baseType=IntType.v();
p++;
break swtch;
case 'J':
baseType=LongType.v();
p++;
break swtch;
case 'L':
int index=p + 1;
while (index < d.length && d[index] != ';') {
if (d[index] == '/') d[index]='.';
index++;
}
if (index >= d.length) throw new RuntimeException(""String_Node_Str"");
String className=new String(d,p + 1,index - p - 1);
baseType=RefType.v(className);
p=index + 1;
break swtch;
case 'S':
baseType=ShortType.v();
p++;
break swtch;
case 'Z':
baseType=BooleanType.v();
p++;
break swtch;
case 'V':
baseType=VoidType.v();
p++;
break swtch;
default :
throw new RuntimeException(""String_Node_Str"");
}
}
if (baseType == null) continue;
Type t;
if (isArray) t=ArrayType.v(baseType,numDimensions);
 else t=baseType;
conversionTypes.add(t);
}
ret=conversionTypes.toArray(new Type[0]);
cache.put(descriptor,ret);
return ret;
}","public Type[] jimpleTypesOfFieldOrMethodDescriptor(String descriptor){
  Type[] ret=null;
synchronized (cache) {
    ret=cache.get(descriptor);
  }
  if (ret != null)   return ret;
  char[] d=descriptor.toCharArray();
  int p=0;
  List<Type> conversionTypes=new ArrayList<Type>();
  outer:   while (p < d.length) {
    boolean isArray=false;
    int numDimensions=0;
    Type baseType=null;
    swtch:     while (p < d.length) {
switch (d[p]) {
case '(':
case ')':
        p++;
      continue outer;
case '[':
    isArray=true;
  numDimensions++;
p++;
continue swtch;
case 'B':
baseType=ByteType.v();
p++;
break swtch;
case 'C':
baseType=CharType.v();
p++;
break swtch;
case 'D':
baseType=DoubleType.v();
p++;
break swtch;
case 'F':
baseType=FloatType.v();
p++;
break swtch;
case 'I':
baseType=IntType.v();
p++;
break swtch;
case 'J':
baseType=LongType.v();
p++;
break swtch;
case 'L':
int index=p + 1;
while (index < d.length && d[index] != ';') {
if (d[index] == '/') d[index]='.';
index++;
}
if (index >= d.length) throw new RuntimeException(""String_Node_Str"");
String className=new String(d,p + 1,index - p - 1);
baseType=RefType.v(className);
p=index + 1;
break swtch;
case 'S':
baseType=ShortType.v();
p++;
break swtch;
case 'Z':
baseType=BooleanType.v();
p++;
break swtch;
case 'V':
baseType=VoidType.v();
p++;
break swtch;
default :
throw new RuntimeException(""String_Node_Str"");
}
}
if (baseType == null) continue;
Type t;
if (isArray) t=ArrayType.v(baseType,numDimensions);
 else t=baseType;
conversionTypes.add(t);
}
ret=conversionTypes.toArray(new Type[0]);
synchronized (cache) {
cache.put(descriptor,ret);
}
return ret;
}"
85246,"public static String getDexClassName(String dottedClassName){
  if (dottedClassName == null || dottedClassName.isEmpty())   throw new RuntimeException(""String_Node_Str"");
  String slashedName=dottedClassName.replace('.','/');
  if (slashedName.startsWith(""String_Node_Str"") && slashedName.endsWith(""String_Node_Str""))   return slashedName;
  return ""String_Node_Str"" + slashedName + ""String_Node_Str"";
}","public static String getDexClassName(String dottedClassName){
  if (dottedClassName == null || dottedClassName.isEmpty())   throw new RuntimeException(""String_Node_Str"");
  if (isPrimitiveTypeOrArray(dottedClassName))   return dottedClassName;
 else {
    String slashedName=dottedClassName.replace('.','/');
    if (slashedName.startsWith(""String_Node_Str"") && slashedName.endsWith(""String_Node_Str""))     return slashedName;
    return ""String_Node_Str"" + slashedName + ""String_Node_Str"";
  }
}"
85247,"/** 
 * Runs Soot with the arguments needed for running one test
 */
protected void runSoot(){
  G.reset();
  String rtJar=System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
  Main.main(new String[]{""String_Node_Str"",getClassPathFolder() + File.pathSeparator + rtJar,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getRequiredJavaVersion(),getTargetClass()});
}","/** 
 * Runs Soot with the arguments needed for running one test
 */
protected void runSoot(){
  G.reset();
  String rtJar=System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
  String classpath=getClassPathFolder() + File.pathSeparator + rtJar;
  System.out.println(""String_Node_Str"" + classpath);
  Main.main(new String[]{""String_Node_Str"",classpath,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getRequiredJavaVersion(),getTargetClass()});
}"
85248,"protected void internalTransform(Body body,String phaseName,Map<String,String> options){
  if (this.throwAnalysis == null)   this.throwAnalysis=Scene.v().getDefaultThrowAnalysis();
  if (Options.v().verbose())   G.v().out.println(""String_Node_Str"" + body.getMethod().getName() + ""String_Node_Str"");
  Chain<Trap> trapChain=body.getTraps();
  Chain<Unit> unitChain=body.getUnits();
  if (trapChain.size() > 0) {
    ExceptionalUnitGraph graph=new ExceptionalUnitGraph(body,throwAnalysis);
    Set<Unit> unitsWithMonitor=getUnitsWithMonitor(graph);
    for (Iterator<Trap> trapIt=trapChain.iterator(); trapIt.hasNext(); ) {
      Trap trap=trapIt.next();
      boolean isCatchAll=trap.getException().getName().equals(""String_Node_Str"");
      Unit firstTrappedUnit=trap.getBeginUnit();
      Unit firstTrappedThrower=null;
      Unit firstUntrappedUnit=trap.getEndUnit();
      Unit lastTrappedUnit=unitChain.getPredOf(firstUntrappedUnit);
      Unit lastTrappedThrower=null;
      for (Unit u=firstTrappedUnit; u != null && u != firstUntrappedUnit; u=unitChain.getSuccOf(u)) {
        if (mightThrowTo(graph,u,trap)) {
          firstTrappedThrower=u;
          break;
        }
        if (isCatchAll && unitsWithMonitor.contains(u))         break;
      }
      if (firstTrappedThrower != null) {
        for (Unit u=lastTrappedUnit; u != null; u=unitChain.getPredOf(u)) {
          if (mightThrowTo(graph,u,trap)) {
            lastTrappedThrower=u;
            break;
          }
          if (isCatchAll && unitsWithMonitor.contains(u))           break;
        }
      }
      if (firstTrappedThrower == null)       trapIt.remove();
 else {
        if (firstTrappedThrower != null && firstTrappedUnit != firstTrappedThrower) {
          trap.setBeginUnit(firstTrappedThrower);
        }
        if (lastTrappedThrower == null) {
          lastTrappedThrower=firstTrappedUnit;
        }
        if (lastTrappedUnit != lastTrappedThrower) {
          trap.setEndUnit(unitChain.getSuccOf(lastTrappedThrower));
        }
      }
    }
  }
}","protected void internalTransform(Body body,String phaseName,Map<String,String> options){
  if (this.throwAnalysis == null)   this.throwAnalysis=Scene.v().getDefaultThrowAnalysis();
  if (Options.v().verbose())   G.v().out.println(""String_Node_Str"" + body.getMethod().getName() + ""String_Node_Str"");
  Chain<Trap> trapChain=body.getTraps();
  Chain<Unit> unitChain=body.getUnits();
  if (trapChain.size() > 0) {
    ExceptionalUnitGraph graph=new ExceptionalUnitGraph(body,throwAnalysis);
    Set<Unit> unitsWithMonitor=getUnitsWithMonitor(graph);
    for (Iterator<Trap> trapIt=trapChain.iterator(); trapIt.hasNext(); ) {
      Trap trap=trapIt.next();
      boolean isCatchAll=trap.getException().getName().equals(""String_Node_Str"");
      Unit firstTrappedUnit=trap.getBeginUnit();
      Unit firstTrappedThrower=null;
      Unit firstUntrappedUnit=trap.getEndUnit();
      Unit lastTrappedUnit=unitChain.getPredOf(firstUntrappedUnit);
      Unit lastTrappedThrower=null;
      for (Unit u=firstTrappedUnit; u != null && u != firstUntrappedUnit; u=unitChain.getSuccOf(u)) {
        if (mightThrowTo(graph,u,trap)) {
          firstTrappedThrower=u;
          break;
        }
        if (isCatchAll && unitsWithMonitor.contains(u))         break;
      }
      if (firstTrappedThrower != null) {
        for (Unit u=lastTrappedUnit; u != null; u=unitChain.getPredOf(u)) {
          if (mightThrowTo(graph,u,trap)) {
            lastTrappedThrower=u;
            break;
          }
          if (isCatchAll && unitsWithMonitor.contains(u)) {
            lastTrappedThrower=u;
            break;
          }
        }
      }
      if (firstTrappedThrower == null)       trapIt.remove();
 else {
        if (firstTrappedThrower != null && firstTrappedUnit != firstTrappedThrower) {
          trap.setBeginUnit(firstTrappedThrower);
        }
        if (lastTrappedThrower == null) {
          lastTrappedThrower=firstTrappedUnit;
        }
        if (lastTrappedUnit != lastTrappedThrower) {
          trap.setEndUnit(unitChain.getSuccOf(lastTrappedThrower));
        }
      }
    }
  }
}"
85249,"@Override public boolean containsEdge(N from,N to,L label){
  DGEdge<N> edge=new DGEdge<N>(from,to);
  if (edgeToLabels.get(edge) != null && edgeToLabels.get(edge).contains(label)) {
    return true;
  }
  return false;
}","@Override public boolean containsEdge(N from,N to,L label){
  List<L> labels=edgeToLabels.get(new DGEdge<>(from,to));
  return labels != null && labels.contains(label);
}"
85250,"@Override public void removeAllEdges(L label){
  if (!containsAnyEdge(label)) {
    return;
  }
  List<DGEdge<N>> edges=labelToEdges.get(label);
  if (edges == null) {
    throw new RuntimeException(""String_Node_Str"" + label + ""String_Node_Str"");
  }
  for (  DGEdge<N> edge : edges) {
    removeEdge(edge.from(),edge.to(),label);
  }
}","@Override public void removeAllEdges(L label){
  if (!containsAnyEdge(label)) {
    return;
  }
  List<DGEdge<N>> edges=labelToEdges.get(label);
  if (edges == null) {
    throw new RuntimeException(""String_Node_Str"" + label + ""String_Node_Str"");
  }
  for (  DGEdge<N> edge : getCopy(edges)) {
    removeEdge(edge.from(),edge.to(),label);
  }
}"
85251,"@Override public boolean containsAnyEdge(L label){
  if (labelToEdges.get(label) != null && labelToEdges.get(label).isEmpty()) {
    return false;
  }
  return true;
}","@Override public boolean containsAnyEdge(L label){
  List<DGEdge<N>> edges=labelToEdges.get(label);
  return edges != null && !edges.isEmpty();
}"
85252,"public void type(Type t){
  handleIndent();
  String s=t == null ? ""String_Node_Str"" : t.toString();
  if (t instanceof RefType)   s=Scene.v().quotedNameOf(s);
  output.append(s);
}","public void type(Type t){
  handleIndent();
  String s=t == null ? ""String_Node_Str"" : t.toQuotedString();
  output.append(s);
}"
85253,"/** 
 * Returns the RefType with the given className. Returns null if no type with the given name can be found.
 */
public RefType getRefTypeUnsafe(String className){
  RefType refType=nameToClass.get(unescapeName(className));
  return refType;
}","/** 
 * Returns the RefType with the given className. Returns null if no type with the given name can be found.
 */
public RefType getRefTypeUnsafe(String className){
  RefType refType=nameToClass.get(className);
  return refType;
}"
85254,"private String getOriginalStyleDeclaration(){
  String qualifiers=Modifier.toString(modifiers) + ""String_Node_Str"" + type.toString();
  qualifiers=qualifiers.trim();
  if (qualifiers.equals(""String_Node_Str""))   return Scene.v().quotedNameOf(name);
 else   return qualifiers + ""String_Node_Str"" + Scene.v().quotedNameOf(name)+ ""String_Node_Str"";
}","private String getOriginalStyleDeclaration(){
  String qualifiers=Modifier.toString(modifiers) + ""String_Node_Str"" + type.toQuotedString();
  qualifiers=qualifiers.trim();
  if (qualifiers.equals(""String_Node_Str""))   return Scene.v().quotedNameOf(name);
 else   return qualifiers + ""String_Node_Str"" + Scene.v().quotedNameOf(name)+ ""String_Node_Str"";
}"
85255,"public static String getSignature(SootClass cl,String name,Type type){
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"" + Scene.v().quotedNameOf(cl.getName()) + ""String_Node_Str"");
  buffer.append(type + ""String_Node_Str"" + Scene.v().quotedNameOf(name)+ ""String_Node_Str"");
  return buffer.toString().intern();
}","public static String getSignature(SootClass cl,String name,Type type){
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"" + Scene.v().quotedNameOf(cl.getName()) + ""String_Node_Str"");
  buffer.append(type.toQuotedString() + ""String_Node_Str"" + Scene.v().quotedNameOf(name)+ ""String_Node_Str"");
  return buffer.toString().intern();
}"
85256,"/** 
 * Returns the declaration of this method, as used at the top of textual body representations  (before the {}'s containing the code for representation.)
 */
public String getDeclaration(){
  StringBuffer buffer=new StringBuffer();
  StringTokenizer st=new StringTokenizer(Modifier.toString(this.getModifiers()));
  if (st.hasMoreTokens())   buffer.append(st.nextToken());
  while (st.hasMoreTokens())   buffer.append(""String_Node_Str"" + st.nextToken());
  if (buffer.length() != 0)   buffer.append(""String_Node_Str"");
  buffer.append(this.getReturnType() + ""String_Node_Str"");
  buffer.append(Scene.v().quotedNameOf(this.getName()));
  buffer.append(""String_Node_Str"");
  Iterator<Type> typeIt=this.getParameterTypes().iterator();
  while (typeIt.hasNext()) {
    Type t=(Type)typeIt.next();
    buffer.append(t);
    if (typeIt.hasNext())     buffer.append(""String_Node_Str"");
  }
  buffer.append(""String_Node_Str"");
  if (exceptions != null) {
    Iterator<SootClass> exceptionIt=this.getExceptions().iterator();
    if (exceptionIt.hasNext()) {
      buffer.append(""String_Node_Str"" + exceptionIt.next().getName());
      while (exceptionIt.hasNext()) {
        buffer.append(""String_Node_Str"" + exceptionIt.next().getName());
      }
    }
  }
  return buffer.toString().intern();
}","/** 
 * Returns the declaration of this method, as used at the top of textual body representations  (before the {}'s containing the code for representation.)
 */
public String getDeclaration(){
  StringBuffer buffer=new StringBuffer();
  StringTokenizer st=new StringTokenizer(Modifier.toString(this.getModifiers()));
  if (st.hasMoreTokens())   buffer.append(st.nextToken());
  while (st.hasMoreTokens())   buffer.append(""String_Node_Str"" + st.nextToken());
  if (buffer.length() != 0)   buffer.append(""String_Node_Str"");
  buffer.append(this.getReturnType().toQuotedString() + ""String_Node_Str"");
  buffer.append(Scene.v().quotedNameOf(this.getName()));
  buffer.append(""String_Node_Str"");
  Iterator<Type> typeIt=this.getParameterTypes().iterator();
  while (typeIt.hasNext()) {
    Type t=(Type)typeIt.next();
    buffer.append(t.toQuotedString());
    if (typeIt.hasNext())     buffer.append(""String_Node_Str"");
  }
  buffer.append(""String_Node_Str"");
  if (exceptions != null) {
    Iterator<SootClass> exceptionIt=this.getExceptions().iterator();
    if (exceptionIt.hasNext()) {
      buffer.append(""String_Node_Str"" + Scene.v().quotedNameOf(exceptionIt.next().getName()));
      while (exceptionIt.hasNext()) {
        buffer.append(""String_Node_Str"" + Scene.v().quotedNameOf(exceptionIt.next().getName()));
      }
    }
  }
  return buffer.toString().intern();
}"
85257,"private static String getSubSignatureImpl(String name,List<Type> params,Type returnType){
  StringBuilder buffer=new StringBuilder();
  buffer.append(returnType.getEscapedName());
  buffer.append(""String_Node_Str"");
  buffer.append(Scene.v().quotedNameOf(name));
  buffer.append(""String_Node_Str"");
  for (int i=0; i < params.size(); i++) {
    buffer.append(params.get(i).getEscapedName());
    if (i < params.size() - 1)     buffer.append(""String_Node_Str"");
  }
  buffer.append(""String_Node_Str"");
  return buffer.toString().intern();
}","private static String getSubSignatureImpl(String name,List<Type> params,Type returnType){
  StringBuilder buffer=new StringBuilder();
  buffer.append(returnType.toQuotedString());
  buffer.append(""String_Node_Str"");
  buffer.append(Scene.v().quotedNameOf(name));
  buffer.append(""String_Node_Str"");
  for (int i=0; i < params.size(); i++) {
    buffer.append(params.get(i).toQuotedString());
    if (i < params.size() - 1)     buffer.append(""String_Node_Str"");
  }
  buffer.append(""String_Node_Str"");
  return buffer.toString().intern();
}"
85258,"/** 
 * Returns a (possibly not yet resolved) SootClass to be used in references to a class. If/when the class is resolved, it will be resolved into this SootClass.
 */
public SootClass makeClassRef(String className){
  className=Scene.v().unescapeName(className);
  if (Scene.v().containsClass(className))   return Scene.v().getSootClass(className);
  SootClass newClass;
  newClass=new SootClass(className);
  newClass.setResolvingLevel(SootClass.DANGLING);
  Scene.v().addClass(newClass);
  return newClass;
}","/** 
 * Returns a (possibly not yet resolved) SootClass to be used in references to a class. If/when the class is resolved, it will be resolved into this SootClass.
 */
public SootClass makeClassRef(String className){
  if (Scene.v().containsClass(className))   return Scene.v().getSootClass(className);
  SootClass newClass;
  newClass=new SootClass(className);
  newClass.setResolvingLevel(SootClass.DANGLING);
  Scene.v().addClass(newClass);
  return newClass;
}"
85259,"public void caseAFile(AFile node){
  inAFile(node);
{
    Object temp[]=node.getModifier().toArray();
    for (    Object element : temp) {
      ((PModifier)element).apply(this);
    }
  }
  if (node.getFileType() != null) {
    node.getFileType().apply(this);
  }
  if (node.getClassName() != null) {
    node.getClassName().apply(this);
  }
  String className=(String)mProductions.removeLast();
  if (!className.equals(Scene.v().quotedNameOf(mSootClass.getName())))   throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str""+ mSootClass.getName());
  if (node.getExtendsClause() != null) {
    node.getExtendsClause().apply(this);
  }
  if (node.getImplementsClause() != null) {
    node.getImplementsClause().apply(this);
  }
  if (node.getFileBody() != null) {
    node.getFileBody().apply(this);
  }
  outAFile(node);
}","public void caseAFile(AFile node){
  inAFile(node);
{
    Object temp[]=node.getModifier().toArray();
    for (    Object element : temp) {
      ((PModifier)element).apply(this);
    }
  }
  if (node.getFileType() != null) {
    node.getFileType().apply(this);
  }
  if (node.getClassName() != null) {
    node.getClassName().apply(this);
  }
  String className=(String)mProductions.removeLast();
  if (!className.equals(mSootClass.getName()))   throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str""+ mSootClass.getName());
  if (node.getExtendsClause() != null) {
    node.getExtendsClause().apply(this);
  }
  if (node.getImplementsClause() != null) {
    node.getImplementsClause().apply(this);
  }
  if (node.getFileBody() != null) {
    node.getFileBody().apply(this);
  }
  outAFile(node);
}"
85260,"public void outAFullIdentClassName(AFullIdentClassName node){
  String tokenString=node.getFullIdentifier().getText();
  tokenString=StringTools.getUnEscapedStringOf(tokenString);
  mRefTypes.add(tokenString);
}","public void outAFullIdentClassName(AFullIdentClassName node){
  String tokenString=node.getFullIdentifier().getText();
  tokenString=Scene.v().unescapeName(tokenString);
  tokenString=StringTools.getUnEscapedStringOf(tokenString);
  mRefTypes.add(tokenString);
}"
85261,"public void outAFullIdentNonvoidType(AFullIdentNonvoidType node){
  String tokenString=node.getFullIdentifier().getText();
  tokenString=StringTools.getUnEscapedStringOf(tokenString);
  mRefTypes.add(tokenString);
}","public void outAFullIdentNonvoidType(AFullIdentNonvoidType node){
  String tokenString=node.getFullIdentifier().getText();
  tokenString=Scene.v().unescapeName(tokenString);
  tokenString=StringTools.getUnEscapedStringOf(tokenString);
  mRefTypes.add(tokenString);
}"
85262,"public void caseAFile(AFile node){
  inAFile(node);
{
    Object temp[]=node.getModifier().toArray();
    for (    Object element : temp) {
      ((PModifier)element).apply(this);
    }
  }
  if (node.getFileType() != null) {
    node.getFileType().apply(this);
  }
  if (node.getClassName() != null) {
    node.getClassName().apply(this);
  }
  String className=(String)mProductions.removeLast();
  className=Scene.v().unescapeName(className);
  if (mSootClass == null) {
    mSootClass=new SootClass(className);
    mSootClass.setResolvingLevel(SootClass.SIGNATURES);
  }
 else {
    if (!className.equals(mSootClass.getName()))     throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str""+ mSootClass.getName());
  }
  if (node.getExtendsClause() != null) {
    node.getExtendsClause().apply(this);
  }
  if (node.getImplementsClause() != null) {
    node.getImplementsClause().apply(this);
  }
  if (node.getFileBody() != null) {
    node.getFileBody().apply(this);
  }
  outAFile(node);
}","public void caseAFile(AFile node){
  inAFile(node);
{
    Object temp[]=node.getModifier().toArray();
    for (    Object element : temp) {
      ((PModifier)element).apply(this);
    }
  }
  if (node.getFileType() != null) {
    node.getFileType().apply(this);
  }
  if (node.getClassName() != null) {
    node.getClassName().apply(this);
  }
  String className=(String)mProductions.removeLast();
  if (mSootClass == null) {
    mSootClass=new SootClass(className);
    mSootClass.setResolvingLevel(SootClass.SIGNATURES);
  }
 else {
    if (!className.equals(mSootClass.getName()))     throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str""+ mSootClass.getName());
  }
  if (node.getExtendsClause() != null) {
    node.getExtendsClause().apply(this);
  }
  if (node.getImplementsClause() != null) {
    node.getImplementsClause().apply(this);
  }
  if (node.getFileBody() != null) {
    node.getFileBody().apply(this);
  }
  outAFile(node);
}"
85263,"public void defaultCase(Node node){
  if (node instanceof TQuotedName || node instanceof TFullIdentifier || node instanceof TIdentifier|| node instanceof TStringConstant|| node instanceof TIntegerConstant|| node instanceof TFloatConstant|| node instanceof TAtIdentifier) {
    if (debug)     G.v().out.println(""String_Node_Str"" + ((Token)node).getText());
    String tokenString=((Token)node).getText();
    if (node instanceof TStringConstant || node instanceof TQuotedName) {
      tokenString=tokenString.substring(1,tokenString.length() - 1);
    }
    if (node instanceof TIdentifier || node instanceof TFullIdentifier || node instanceof TQuotedName|| node instanceof TStringConstant) {
      try {
        tokenString=StringTools.getUnEscapedStringOf(tokenString);
      }
 catch (      RuntimeException e) {
        G.v().out.println(""String_Node_Str"" + tokenString);
      }
    }
    mProductions.addLast(tokenString);
  }
}","public void defaultCase(Node node){
  if (node instanceof TQuotedName || node instanceof TFullIdentifier || node instanceof TIdentifier|| node instanceof TStringConstant|| node instanceof TIntegerConstant|| node instanceof TFloatConstant|| node instanceof TAtIdentifier) {
    if (debug)     G.v().out.println(""String_Node_Str"" + ((Token)node).getText());
    String tokenString=((Token)node).getText();
    if (node instanceof TStringConstant || node instanceof TQuotedName) {
      tokenString=tokenString.substring(1,tokenString.length() - 1);
    }
 else     if (node instanceof TFullIdentifier) {
      tokenString=Scene.v().unescapeName(tokenString);
    }
    if (node instanceof TIdentifier || node instanceof TFullIdentifier || node instanceof TQuotedName|| node instanceof TStringConstant) {
      try {
        tokenString=StringTools.getUnEscapedStringOf(tokenString);
      }
 catch (      RuntimeException e) {
        G.v().out.println(""String_Node_Str"" + tokenString);
      }
    }
    mProductions.addLast(tokenString);
  }
}"
85264,"private EncodedValue makeConstantItem(SootField sf,Tag t){
  if (!(t instanceof ConstantValueTag))   throw new RuntimeException(""String_Node_Str"");
  if (t instanceof IntegerConstantValueTag) {
    Type sft=sf.getType();
    IntegerConstantValueTag i=(IntegerConstantValueTag)t;
    if (sft instanceof BooleanType) {
      int v=i.getIntValue();
      if (v == 0) {
        return ImmutableBooleanEncodedValue.FALSE_VALUE;
      }
 else       if (v == 1) {
        return ImmutableBooleanEncodedValue.TRUE_VALUE;
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
 else     if (sft instanceof CharType) {
      return new ImmutableCharEncodedValue((char)i.getIntValue());
    }
 else     if (sft instanceof ByteType) {
      return new ImmutableByteEncodedValue((byte)i.getIntValue());
    }
 else     if (sft instanceof IntType) {
      return new ImmutableIntEncodedValue(i.getIntValue());
    }
 else     if (sft instanceof ShortType) {
      return new ImmutableShortEncodedValue((short)i.getIntValue());
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + t + ""String_Node_Str""+ sf);
    }
  }
 else   if (t instanceof LongConstantValueTag) {
    LongConstantValueTag l=(LongConstantValueTag)t;
    return new ImmutableLongEncodedValue(l.getLongValue());
  }
 else   if (t instanceof DoubleConstantValueTag) {
    DoubleConstantValueTag d=(DoubleConstantValueTag)t;
    return new ImmutableDoubleEncodedValue(d.getDoubleValue());
  }
 else   if (t instanceof FloatConstantValueTag) {
    FloatConstantValueTag f=(FloatConstantValueTag)t;
    return new ImmutableFloatEncodedValue(f.getFloatValue());
  }
 else   if (t instanceof StringConstantValueTag) {
    StringConstantValueTag s=(StringConstantValueTag)t;
    return new ImmutableStringEncodedValue(s.getStringValue());
  }
 else   throw new RuntimeException(""String_Node_Str"");
}","private EncodedValue makeConstantItem(SootField sf,Tag t){
  if (!(t instanceof ConstantValueTag))   throw new RuntimeException(""String_Node_Str"");
  if (t instanceof IntegerConstantValueTag) {
    Type sft=sf.getType();
    IntegerConstantValueTag i=(IntegerConstantValueTag)t;
    if (sft instanceof BooleanType) {
      int v=i.getIntValue();
      if (v == 0) {
        return ImmutableBooleanEncodedValue.FALSE_VALUE;
      }
 else       if (v == 1) {
        return ImmutableBooleanEncodedValue.TRUE_VALUE;
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
 else     if (sft instanceof CharType) {
      return new ImmutableCharEncodedValue((char)i.getIntValue());
    }
 else     if (sft instanceof ByteType) {
      return new ImmutableByteEncodedValue((byte)i.getIntValue());
    }
 else     if (sft instanceof IntType) {
      return new ImmutableIntEncodedValue(i.getIntValue());
    }
 else     if (sft instanceof ShortType) {
      return new ImmutableShortEncodedValue((short)i.getIntValue());
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + t + ""String_Node_Str""+ sf);
    }
  }
 else   if (t instanceof LongConstantValueTag) {
    LongConstantValueTag l=(LongConstantValueTag)t;
    return new ImmutableLongEncodedValue(l.getLongValue());
  }
 else   if (t instanceof DoubleConstantValueTag) {
    DoubleConstantValueTag d=(DoubleConstantValueTag)t;
    return new ImmutableDoubleEncodedValue(d.getDoubleValue());
  }
 else   if (t instanceof FloatConstantValueTag) {
    FloatConstantValueTag f=(FloatConstantValueTag)t;
    return new ImmutableFloatEncodedValue(f.getFloatValue());
  }
 else   if (t instanceof StringConstantValueTag) {
    StringConstantValueTag s=(StringConstantValueTag)t;
    if (sf.getType().equals(RefType.v(""String_Node_Str"")))     return new ImmutableStringEncodedValue(s.getStringValue());
 else     return null;
  }
 else   throw new RuntimeException(""String_Node_Str"");
}"
85265,"public void caseAssignStmt(AssignStmt stmt){
  Value lhs=stmt.getLeftOp();
  Value rhs=stmt.getRightOp();
  Type tlhs=null;
  if (lhs instanceof Local)   tlhs=this.tg.get((Local)lhs);
 else   if (lhs instanceof ArrayRef) {
    ArrayRef aref=(ArrayRef)lhs;
    Local base=(Local)aref.getBase();
    ArrayType at=null;
    Type tgType=this.tg.get(base);
    if (tgType instanceof ArrayType)     at=(ArrayType)tgType;
 else {
      if (tgType == Scene.v().getObjectType() && rhs instanceof Local) {
        Type rhsType=this.tg.get((Local)rhs);
        if (rhsType instanceof PrimType) {
          if (defs == null) {
            defs=LocalDefs.Factory.newLocalDefs(jb);
            uses=LocalUses.Factory.newLocalUses(jb,defs);
          }
          for (          Unit defU : defs.getDefsOfAt(base,stmt)) {
            if (defU instanceof AssignStmt) {
              AssignStmt defUas=(AssignStmt)defU;
              if (defUas.getRightOp() instanceof NewArrayExpr) {
                at=(ArrayType)defUas.getRightOp().getType();
                break;
              }
            }
          }
        }
      }
      if (at == null)       at=tgType.makeArrayType();
    }
    tlhs=((ArrayType)at).getElementType();
    this.handleArrayRef(aref,stmt);
    aref.setBase((Local)this.uv.visit(aref.getBase(),at,stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
    stmt.setLeftOp(this.uv.visit(lhs,tlhs,stmt));
  }
 else   if (lhs instanceof FieldRef) {
    tlhs=((FieldRef)lhs).getFieldRef().type();
    if (lhs instanceof InstanceFieldRef)     this.handleInstanceFieldRef((InstanceFieldRef)lhs,stmt);
  }
  lhs=stmt.getLeftOp();
  rhs=stmt.getRightOp();
  if (rhs instanceof Local)   stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
 else   if (rhs instanceof ArrayRef) {
    ArrayRef aref=(ArrayRef)rhs;
    Local base=(Local)aref.getBase();
    ArrayType at;
    Type et=null;
    if (this.tg.get(base) instanceof ArrayType)     at=(ArrayType)this.tg.get(base);
 else {
      Type bt=this.tg.get(base);
      at=bt.makeArrayType();
      if (bt instanceof RefType) {
        RefType rt=(RefType)bt;
        if (rt.getSootClass().getName().equals(""String_Node_Str"") || rt.getSootClass().getName().equals(""String_Node_Str"") || rt.getSootClass().getName().equals(""String_Node_Str"")) {
          if (defs == null) {
            defs=LocalDefs.Factory.newLocalDefs(jb);
            uses=LocalUses.Factory.newLocalUses(jb,defs);
          }
          outer:           for (          UnitValueBoxPair usePair : uses.getUsesOf(stmt)) {
            Stmt useStmt=(Stmt)usePair.getUnit();
            if (useStmt.containsInvokeExpr())             for (int i=0; i < useStmt.getInvokeExpr().getArgCount(); i++)             if (useStmt.getInvokeExpr().getArg(i) == usePair.getValueBox().getValue()) {
              et=useStmt.getInvokeExpr().getMethod().getParameterType(i);
              at=et.makeArrayType();
              break outer;
            }
          }
        }
      }
    }
    Type trhs=((ArrayType)at).getElementType();
    this.handleArrayRef(aref,stmt);
    aref.setBase((Local)this.uv.visit(aref.getBase(),at,stmt));
    stmt.setRightOp(this.uv.visit(rhs,trhs,stmt));
  }
 else   if (rhs instanceof InstanceFieldRef) {
    this.handleInstanceFieldRef((InstanceFieldRef)rhs,stmt);
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof BinopExpr)   this.handleBinopExpr((BinopExpr)rhs,stmt,tlhs);
 else   if (rhs instanceof InvokeExpr) {
    this.handleInvokeExpr((InvokeExpr)rhs,stmt);
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof CastExpr)   stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
 else   if (rhs instanceof InstanceOfExpr) {
    InstanceOfExpr ioe=(InstanceOfExpr)rhs;
    ioe.setOp(this.uv.visit(ioe.getOp(),RefType.v(""String_Node_Str""),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NewArrayExpr) {
    NewArrayExpr nae=(NewArrayExpr)rhs;
    nae.setSize(this.uv.visit(nae.getSize(),IntType.v(),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NewMultiArrayExpr) {
    NewMultiArrayExpr nmae=(NewMultiArrayExpr)rhs;
    for (int i=0; i < nmae.getSizeCount(); i++)     nmae.setSize(i,this.uv.visit(nmae.getSize(i),IntType.v(),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof LengthExpr) {
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NegExpr) {
    ((NegExpr)rhs).setOp(this.uv.visit(((NegExpr)rhs).getOp(),tlhs,stmt));
  }
 else   if (rhs instanceof Constant)   if (!(rhs instanceof NullConstant))   stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
}","public void caseAssignStmt(AssignStmt stmt){
  Value lhs=stmt.getLeftOp();
  Value rhs=stmt.getRightOp();
  Type tlhs=null;
  if (lhs instanceof Local)   tlhs=this.tg.get((Local)lhs);
 else   if (lhs instanceof ArrayRef) {
    ArrayRef aref=(ArrayRef)lhs;
    Local base=(Local)aref.getBase();
    ArrayType at=null;
    Type tgType=this.tg.get(base);
    if (tgType instanceof ArrayType)     at=(ArrayType)tgType;
 else {
      if (tgType == Scene.v().getObjectType() && rhs instanceof Local) {
        Type rhsType=this.tg.get((Local)rhs);
        if (rhsType instanceof PrimType) {
          if (defs == null) {
            defs=LocalDefs.Factory.newLocalDefs(jb);
            uses=LocalUses.Factory.newLocalUses(jb,defs);
          }
          for (          Unit defU : defs.getDefsOfAt(base,stmt)) {
            if (defU instanceof AssignStmt) {
              AssignStmt defUas=(AssignStmt)defU;
              if (defUas.getRightOp() instanceof NewArrayExpr) {
                at=(ArrayType)defUas.getRightOp().getType();
                break;
              }
            }
          }
        }
      }
      if (at == null)       at=tgType.makeArrayType();
    }
    tlhs=((ArrayType)at).getElementType();
    this.handleArrayRef(aref,stmt);
    aref.setBase((Local)this.uv.visit(aref.getBase(),at,stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
    stmt.setLeftOp(this.uv.visit(lhs,tlhs,stmt));
  }
 else   if (lhs instanceof FieldRef) {
    tlhs=((FieldRef)lhs).getFieldRef().type();
    if (lhs instanceof InstanceFieldRef)     this.handleInstanceFieldRef((InstanceFieldRef)lhs,stmt);
  }
  lhs=stmt.getLeftOp();
  rhs=stmt.getRightOp();
  if (rhs instanceof Local)   stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
 else   if (rhs instanceof ArrayRef) {
    ArrayRef aref=(ArrayRef)rhs;
    Local base=(Local)aref.getBase();
    ArrayType at=null;
    Type et=null;
    if (this.tg.get(base) instanceof ArrayType)     at=(ArrayType)this.tg.get(base);
 else {
      Type bt=this.tg.get(base);
      if (bt instanceof RefType) {
        RefType rt=(RefType)bt;
        if (rt.getSootClass().getName().equals(""String_Node_Str"") || rt.getSootClass().getName().equals(""String_Node_Str"") || rt.getSootClass().getName().equals(""String_Node_Str"")) {
          if (defs == null) {
            defs=LocalDefs.Factory.newLocalDefs(jb);
            uses=LocalUses.Factory.newLocalUses(jb,defs);
          }
          outer:           for (          UnitValueBoxPair usePair : uses.getUsesOf(stmt)) {
            Stmt useStmt=(Stmt)usePair.getUnit();
            if (useStmt.containsInvokeExpr()) {
              for (int i=0; i < useStmt.getInvokeExpr().getArgCount(); i++) {
                if (useStmt.getInvokeExpr().getArg(i) == usePair.getValueBox().getValue()) {
                  et=useStmt.getInvokeExpr().getMethod().getParameterType(i);
                  at=et.makeArrayType();
                  break outer;
                }
              }
            }
 else             if (useStmt instanceof IfStmt) {
              IfStmt ifStmt=(IfStmt)useStmt;
              if (ifStmt.getCondition() instanceof EqExpr) {
                EqExpr expr=(EqExpr)ifStmt.getCondition();
                final Value other;
                if (expr.getOp1() == usePair.getValueBox().getValue())                 other=expr.getOp2();
 else                 other=expr.getOp1();
                Type newEt=getTargetType(other);
                if (newEt != null)                 et=newEt;
              }
            }
 else             if (useStmt instanceof AssignStmt) {
              AssignStmt useAssignStmt=(AssignStmt)useStmt;
              if (useAssignStmt.getRightOp() instanceof BinopExpr) {
                BinopExpr binOp=(BinopExpr)useAssignStmt.getRightOp();
                final Value other;
                if (binOp.getOp1() == usePair.getValueBox().getValue())                 other=binOp.getOp2();
 else                 other=binOp.getOp1();
                Type newEt=getTargetType(other);
                if (newEt != null)                 et=newEt;
              }
            }
          }
        }
      }
      if (at == null)       at=et.makeArrayType();
    }
    Type trhs=((ArrayType)at).getElementType();
    this.handleArrayRef(aref,stmt);
    aref.setBase((Local)this.uv.visit(aref.getBase(),at,stmt));
    stmt.setRightOp(this.uv.visit(rhs,trhs,stmt));
  }
 else   if (rhs instanceof InstanceFieldRef) {
    this.handleInstanceFieldRef((InstanceFieldRef)rhs,stmt);
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof BinopExpr)   this.handleBinopExpr((BinopExpr)rhs,stmt,tlhs);
 else   if (rhs instanceof InvokeExpr) {
    this.handleInvokeExpr((InvokeExpr)rhs,stmt);
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof CastExpr)   stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
 else   if (rhs instanceof InstanceOfExpr) {
    InstanceOfExpr ioe=(InstanceOfExpr)rhs;
    ioe.setOp(this.uv.visit(ioe.getOp(),RefType.v(""String_Node_Str""),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NewArrayExpr) {
    NewArrayExpr nae=(NewArrayExpr)rhs;
    nae.setSize(this.uv.visit(nae.getSize(),IntType.v(),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NewMultiArrayExpr) {
    NewMultiArrayExpr nmae=(NewMultiArrayExpr)rhs;
    for (int i=0; i < nmae.getSizeCount(); i++)     nmae.setSize(i,this.uv.visit(nmae.getSize(i),IntType.v(),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof LengthExpr) {
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NegExpr) {
    ((NegExpr)rhs).setOp(this.uv.visit(((NegExpr)rhs).getOp(),tlhs,stmt));
  }
 else   if (rhs instanceof Constant)   if (!(rhs instanceof NullConstant))   stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
}"
85266,"private void buildCalculatingBinaryInsn(final String binaryOperation,Value firstOperand,Value secondOperand,Expr originalExpr){
  constantV.setOrigStmt(origStmt);
  Register firstOpReg=regAlloc.asImmediate(firstOperand,constantV);
  if (destinationReg.getType() instanceof IntType && secondOperand instanceof IntConstant && !binaryOperation.equals(""String_Node_Str"")) {
    int secondOpConstant=((IntConstant)secondOperand).value;
    if (SootToDexUtils.fitsSigned8(secondOpConstant)) {
      stmtV.addInsn(buildLit8BinaryInsn(binaryOperation,firstOpReg,(byte)secondOpConstant),origStmt);
      return;
    }
    if (SootToDexUtils.fitsSigned16(secondOpConstant)) {
      if (!binaryOperation.equals(""String_Node_Str"") && !binaryOperation.equals(""String_Node_Str"") && !binaryOperation.equals(""String_Node_Str"")) {
        stmtV.addInsn(buildLit16BinaryInsn(binaryOperation,firstOpReg,(short)secondOpConstant),origStmt);
        return;
      }
    }
  }
  if (!(secondOperand.getType() instanceof PrimType))   throw new RuntimeException(""String_Node_Str"");
  Register secondOpReg=regAlloc.asImmediate(secondOperand,constantV);
  Register orgDestReg=destinationReg;
  if (isBiggerThan(PrimitiveType.getByName(secondOpReg.getType().toString()),PrimitiveType.getByName(destinationReg.getType().toString()))) {
    destinationReg=regAlloc.asTmpReg(secondOpReg.getType());
  }
  if (destinationReg.getNumber() == firstOpReg.getNumber()) {
    stmtV.addInsn(build2AddrBinaryInsn(binaryOperation,secondOpReg),origStmt);
  }
 else {
    stmtV.addInsn(buildNormalBinaryInsn(binaryOperation,firstOpReg,secondOpReg),origStmt);
  }
  if (orgDestReg != destinationReg) {
    Register tempReg=destinationReg.clone();
    destinationReg=orgDestReg.clone();
    castPrimitive(tempReg,originalExpr,destinationReg.getType());
  }
}","private void buildCalculatingBinaryInsn(final String binaryOperation,Value firstOperand,Value secondOperand,Expr originalExpr){
  constantV.setOrigStmt(origStmt);
  Register firstOpReg=regAlloc.asImmediate(firstOperand,constantV);
  if (destinationReg.getType() instanceof IntType && secondOperand instanceof IntConstant && !binaryOperation.equals(""String_Node_Str"")) {
    int secondOpConstant=((IntConstant)secondOperand).value;
    if (SootToDexUtils.fitsSigned8(secondOpConstant)) {
      stmtV.addInsn(buildLit8BinaryInsn(binaryOperation,firstOpReg,(byte)secondOpConstant),origStmt);
      return;
    }
    if (SootToDexUtils.fitsSigned16(secondOpConstant)) {
      if (!binaryOperation.equals(""String_Node_Str"") && !binaryOperation.equals(""String_Node_Str"") && !binaryOperation.equals(""String_Node_Str"")) {
        stmtV.addInsn(buildLit16BinaryInsn(binaryOperation,firstOpReg,(short)secondOpConstant),origStmt);
        return;
      }
    }
  }
  if (!(secondOperand.getType() instanceof PrimType))   throw new RuntimeException(""String_Node_Str"");
  Register secondOpReg=regAlloc.asImmediate(secondOperand,constantV);
  Register orgDestReg=destinationReg;
  PrimitiveType destRegType=PrimitiveType.getByName(destinationReg.getType().toString());
  if (isBiggerThan(PrimitiveType.getByName(secondOpReg.getType().toString()),destRegType)) {
    destinationReg=regAlloc.asTmpReg(secondOpReg.getType());
  }
 else   if (isBiggerThan(PrimitiveType.getByName(firstOpReg.getType().toString()),destRegType)) {
    destinationReg=regAlloc.asTmpReg(firstOpReg.getType());
  }
  if (destinationReg.getNumber() == firstOpReg.getNumber()) {
    stmtV.addInsn(build2AddrBinaryInsn(binaryOperation,secondOpReg),origStmt);
  }
 else {
    stmtV.addInsn(buildNormalBinaryInsn(binaryOperation,firstOpReg,secondOpReg),origStmt);
  }
  if (orgDestReg != destinationReg) {
    Register tempReg=destinationReg.clone();
    destinationReg=orgDestReg.clone();
    castPrimitive(tempReg,originalExpr,destinationReg.getType());
  }
}"
85267,"public Dependencies makeSootClass(SootClass sc,ClassDef defItem,DexFile dexFile){
  String superClass=defItem.getSuperclass();
  Dependencies deps=new Dependencies();
  String sourceFile=defItem.getSourceFile();
  if (sourceFile != null) {
    sc.addTag(new SourceFileTag(sourceFile));
  }
  if (superClass != null) {
    String superClassName=Util.dottedClassName(superClass);
    SootClass sootSuperClass=SootResolver.v().makeClassRef(superClassName);
    sc.setSuperclass(sootSuperClass);
    deps.typesToHierarchy.add(sootSuperClass.getType());
  }
  int accessFlags=defItem.getAccessFlags();
  sc.setModifiers(accessFlags);
  if (defItem.getInterfaces() != null) {
    for (    String interfaceName : defItem.getInterfaces()) {
      String interfaceClassName=Util.dottedClassName(interfaceName);
      if (sc.implementsInterface(interfaceClassName))       continue;
      SootClass interfaceClass=SootResolver.v().makeClassRef(interfaceClassName);
      interfaceClass.setModifiers(interfaceClass.getModifiers() | Modifier.INTERFACE);
      sc.addInterface(interfaceClass);
      deps.typesToHierarchy.add(interfaceClass.getType());
    }
  }
  if (Options.v().oaat() && sc.resolvingLevel() <= SootClass.HIERARCHY) {
    return deps;
  }
  DexAnnotation da=new DexAnnotation(sc,deps);
  for (  Field sf : defItem.getStaticFields()) {
    if (sc.declaresField(sf.getName(),DexType.toSoot(sf.getType())))     continue;
    SootField sootField=DexField.makeSootField(sf);
    sc.addField(sootField);
    da.handleFieldAnnotation(sootField,sf);
  }
  for (  Field f : defItem.getInstanceFields()) {
    if (sc.declaresField(f.getName(),DexType.toSoot(f.getType())))     continue;
    SootField sootField=DexField.makeSootField(f);
    sc.addField(sootField);
    da.handleFieldAnnotation(sootField,f);
  }
  for (  Method method : defItem.getDirectMethods()) {
    loadMethod(dexFile,method,sc,da);
  }
  for (  Method method : defItem.getVirtualMethods()) {
    loadMethod(dexFile,method,sc,da);
  }
  da.handleClassAnnotation(defItem);
  InnerClassAttribute ica=(InnerClassAttribute)sc.getTag(""String_Node_Str"");
  if (ica != null) {
    Iterator<InnerClassTag> innerTagIt=ica.getSpecs().iterator();
    while (innerTagIt.hasNext()) {
      Tag t=innerTagIt.next();
      if (t instanceof InnerClassTag) {
        InnerClassTag ict=(InnerClassTag)t;
        String inner=ict.getInnerClass().replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (!inner.equals(sc.getName())) {
          innerTagIt.remove();
          continue;
        }
        String outer=DexInnerClassParser.getOuterClassNameFromTag(ict);
        if (outer == null) {
          innerTagIt.remove();
          continue;
        }
        SootClass osc=SootResolver.v().makeClassRef(outer);
        if (osc == sc) {
          if (!sc.hasOuterClass())           continue;
          osc=sc.getOuterClass();
        }
 else         deps.typesToHierarchy.add(osc.getType());
        InnerClassAttribute icat=(InnerClassAttribute)osc.getTag(""String_Node_Str"");
        if (icat == null) {
          icat=new InnerClassAttribute();
          osc.addTag(icat);
        }
        InnerClassTag newt=new InnerClassTag(ict.getInnerClass(),ict.getOuterClass(),ict.getShortName(),ict.getAccessFlags());
        icat.add(newt);
        innerTagIt.remove();
        if (!sc.hasTag(""String_Node_Str"")) {
          if (((InnerClassTag)t).getInnerClass().replaceAll(""String_Node_Str"",""String_Node_Str"").equals(sc.toString())) {
            sc.addTag(t);
          }
        }
      }
    }
    if (ica.getSpecs().isEmpty())     sc.getTags().remove(ica);
  }
  return deps;
}","public Dependencies makeSootClass(SootClass sc,ClassDef defItem,DexFile dexFile){
  String superClass=defItem.getSuperclass();
  Dependencies deps=new Dependencies();
  String sourceFile=defItem.getSourceFile();
  if (sourceFile != null) {
    sc.addTag(new SourceFileTag(sourceFile));
  }
  if (superClass != null) {
    String superClassName=Util.dottedClassName(superClass);
    SootClass sootSuperClass=SootResolver.v().makeClassRef(superClassName);
    sc.setSuperclass(sootSuperClass);
    deps.typesToHierarchy.add(sootSuperClass.getType());
  }
  int accessFlags=defItem.getAccessFlags();
  sc.setModifiers(accessFlags);
  if (defItem.getInterfaces() != null) {
    for (    String interfaceName : defItem.getInterfaces()) {
      String interfaceClassName=Util.dottedClassName(interfaceName);
      if (sc.implementsInterface(interfaceClassName))       continue;
      SootClass interfaceClass=SootResolver.v().makeClassRef(interfaceClassName);
      interfaceClass.setModifiers(interfaceClass.getModifiers() | Modifier.INTERFACE);
      sc.addInterface(interfaceClass);
      deps.typesToHierarchy.add(interfaceClass.getType());
    }
  }
  if (Options.v().oaat() && sc.resolvingLevel() <= SootClass.HIERARCHY) {
    return deps;
  }
  DexAnnotation da=new DexAnnotation(sc,deps);
  for (  Field sf : defItem.getStaticFields()) {
    if (sc.declaresField(sf.getName(),DexType.toSoot(sf.getType())))     continue;
    SootField sootField=DexField.makeSootField(sf);
    sc.addField(sootField);
    da.handleFieldAnnotation(sootField,sf);
  }
  for (  Field f : defItem.getInstanceFields()) {
    if (sc.declaresField(f.getName(),DexType.toSoot(f.getType())))     continue;
    SootField sootField=DexField.makeSootField(f);
    sc.addField(sootField);
    da.handleFieldAnnotation(sootField,f);
  }
  for (  Method method : defItem.getDirectMethods()) {
    loadMethod(dexFile,method,sc,da);
  }
  for (  Method method : defItem.getVirtualMethods()) {
    loadMethod(dexFile,method,sc,da);
  }
  da.handleClassAnnotation(defItem);
  InnerClassAttribute ica=(InnerClassAttribute)sc.getTag(""String_Node_Str"");
  if (ica != null) {
    Iterator<InnerClassTag> innerTagIt=ica.getSpecs().iterator();
    while (innerTagIt.hasNext()) {
      Tag t=innerTagIt.next();
      if (t instanceof InnerClassTag) {
        InnerClassTag ict=(InnerClassTag)t;
        String outer=DexInnerClassParser.getOuterClassNameFromTag(ict);
        if (outer == null) {
          innerTagIt.remove();
          continue;
        }
        if (outer.equals(sc.getName()))         continue;
        String inner=ict.getInnerClass().replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (!inner.equals(sc.getName())) {
          innerTagIt.remove();
          continue;
        }
        SootClass osc=SootResolver.v().makeClassRef(outer);
        if (osc == sc) {
          if (!sc.hasOuterClass())           continue;
          osc=sc.getOuterClass();
        }
 else         deps.typesToHierarchy.add(osc.getType());
        InnerClassAttribute icat=(InnerClassAttribute)osc.getTag(""String_Node_Str"");
        if (icat == null) {
          icat=new InnerClassAttribute();
          osc.addTag(icat);
        }
        InnerClassTag newt=new InnerClassTag(ict.getInnerClass(),ict.getOuterClass(),ict.getShortName(),ict.getAccessFlags());
        icat.add(newt);
        innerTagIt.remove();
        if (!sc.hasTag(""String_Node_Str"")) {
          if (((InnerClassTag)t).getInnerClass().replaceAll(""String_Node_Str"",""String_Node_Str"").equals(sc.toString())) {
            sc.addTag(t);
          }
        }
      }
    }
    if (ica.getSpecs().isEmpty()) {
      sc.getTags().remove(ica);
    }
  }
  return deps;
}"
85268,"/** 
 * Seems that representation of Annotation type in Soot is not  consistent with the normal type representation. Normal type representation would be a.b.c.ClassName Java bytecode representation is La/b/c/ClassName; Soot Annotation type representation (and Jasmin's) is a/b/c/ClassName. This method transforms the Java bytecode representation into the Soot annotation type representation. Ljava/lang/Class<Ljava/lang/Enum<*>;>; becomes java/lang/Class<java/lang/Enum<*>>
 * @param type
 * @param pos
 * @return
 */
public static String toSootICAT(String type){
  String r=""String_Node_Str"";
  String[] split1=type.split(""String_Node_Str"");
  for (  String s : split1) {
    if (s.startsWith(""String_Node_Str""))     s=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (s.startsWith(""String_Node_Str""))     s=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    r+=s;
  }
  return r;
}","/** 
 * Seems that representation of Annotation type in Soot is not  consistent with the normal type representation. Normal type representation would be a.b.c.ClassName Java bytecode representation is La/b/c/ClassName; Soot Annotation type representation (and Jasmin's) is a/b/c/ClassName. This method transforms the Java bytecode representation into the Soot annotation type representation. Ljava/lang/Class<Ljava/lang/Enum<*>;>; becomes java/lang/Class<java/lang/Enum<*>>
 * @param type
 * @param pos
 * @return
 */
public static String toSootICAT(String type){
  type=type.replace(""String_Node_Str"",""String_Node_Str"");
  String r=""String_Node_Str"";
  String[] split1=type.split(""String_Node_Str"");
  for (  String s : split1) {
    if (s.startsWith(""String_Node_Str""))     s=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (s.startsWith(""String_Node_Str""))     s=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    r+=s;
  }
  return r;
}"
85269,"/** 
 * Uses methodSource to retrieve the method body in question; does not set it to be the active body.
 * @param phaseName       Phase name for body loading. 
 */
private Body getBodyFromMethodSource(String phaseName){
  if (ms == null)   throw new RuntimeException(""String_Node_Str"" + this.getSignature());
  return ms.getBody(this,phaseName);
}","/** 
 * Uses methodSource to retrieve the method body in question; does not set it to be the active body.
 * @param phaseName       Phase name for body loading. 
 */
private Body getBodyFromMethodSource(String phaseName){
  MethodSource ms=this.ms;
  if (this.activeBody == null) {
    if (ms == null)     throw new RuntimeException(""String_Node_Str"" + this.getSignature());
    return ms.getBody(this,phaseName);
  }
 else   return this.activeBody;
}"
85270,"private void convertInvokeDynamicInsn(InvokeDynamicInsnNode insn){
  StackFrame frame=getFrame(insn);
  Operand[] out=frame.out();
  Operand opr;
  Type returnType;
  if (out == null) {
    SootMethodRef bsmMethodRef=toSootMethodRef(insn.bsm);
    List<Value> bsmMethodArgs=new ArrayList<Value>(insn.bsmArgs.length);
    for (    Object bsmArg : insn.bsmArgs) {
      bsmMethodArgs.add(toSootValue(bsmArg));
    }
    SootClass bclass=Scene.v().getSootClass(SootClass.INVOKEDYNAMIC_DUMMY_CLASS_NAME);
    Type[] types=Util.v().jimpleTypesOfFieldOrMethodDescriptor(insn.desc);
    List<Type> parameterTypes=new ArrayList<Type>(types.length);
    List<Value> methodArgs=new ArrayList<Value>(types.length);
    Operand[] args=new Operand[types.length - 1];
    ValueBox[] boxes=new ValueBox[args.length];
    int nrArgs=args.length;
    while (nrArgs-- != 0) {
      parameterTypes.add(types[nrArgs]);
      args[nrArgs]=popImmediate(types[nrArgs]);
      methodArgs.add(args[nrArgs].stackOrValue());
    }
    if (methodArgs.size() > 1)     Collections.reverse(methodArgs);
    returnType=types[types.length - 1];
    SootMethodRef methodRef=Scene.v().makeMethodRef(bclass,insn.name,parameterTypes,returnType,true);
    DynamicInvokeExpr indy=Jimple.v().newDynamicInvokeExpr(bsmMethodRef,bsmMethodArgs,methodRef,insn.bsm.getTag(),methodArgs);
    for (int i=0; i < args.length - 1; i++) {
      boxes[i]=indy.getArgBox(i);
      args[i].addBox(boxes[i]);
    }
    opr=new Operand(insn,indy);
    frame.boxes(boxes);
    frame.in(args);
    frame.out(opr);
  }
 else {
    opr=out[0];
    InvokeExpr expr=(InvokeExpr)opr.value;
    List<Type> types=expr.getMethodRef().parameterTypes();
    Operand[] oprs;
    int nrArgs=types.size();
    if (expr.getMethodRef().isStatic())     oprs=nrArgs == 0 ? null : new Operand[nrArgs];
 else     oprs=new Operand[nrArgs + 1];
    if (oprs != null) {
      while (nrArgs-- != 0) {
        oprs[nrArgs]=pop(types.get(types.size() - nrArgs - 1));
      }
      if (!expr.getMethodRef().isStatic())       oprs[oprs.length - 1]=pop();
      frame.mergeIn(oprs);
      nrArgs=types.size();
    }
    returnType=expr.getMethodRef().returnType();
  }
  if (AsmUtil.isDWord(returnType))   pushDual(opr);
 else   if (!(returnType instanceof VoidType))   push(opr);
 else   if (!units.containsKey(insn))   setUnit(insn,Jimple.v().newInvokeStmt(opr.value));
  assignReadOps(null);
}","private void convertInvokeDynamicInsn(InvokeDynamicInsnNode insn){
  StackFrame frame=getFrame(insn);
  Operand[] out=frame.out();
  Operand opr;
  Type returnType;
  if (out == null) {
    SootMethodRef bsmMethodRef=toSootMethodRef(insn.bsm);
    List<Value> bsmMethodArgs=new ArrayList<Value>(insn.bsmArgs.length);
    for (    Object bsmArg : insn.bsmArgs) {
      bsmMethodArgs.add(toSootValue(bsmArg));
    }
    SootClass bclass=Scene.v().getSootClass(SootClass.INVOKEDYNAMIC_DUMMY_CLASS_NAME);
    Type[] types=Util.v().jimpleTypesOfFieldOrMethodDescriptor(insn.desc);
    List<Type> parameterTypes=new ArrayList<Type>(types.length);
    List<Value> methodArgs=new ArrayList<Value>(types.length);
    Operand[] args=new Operand[types.length - 1];
    ValueBox[] boxes=new ValueBox[args.length];
    int nrArgs=args.length;
    while (nrArgs-- != 0) {
      parameterTypes.add(types[nrArgs]);
      Operand curOperand=popImmediate(types[nrArgs]);
      args[args.length - nrArgs - 1]=curOperand;
      methodArgs.add(curOperand.stackOrValue());
    }
    returnType=types[types.length - 1];
    SootMethodRef methodRef=Scene.v().makeMethodRef(bclass,insn.name,parameterTypes,returnType,true);
    DynamicInvokeExpr indy=Jimple.v().newDynamicInvokeExpr(bsmMethodRef,bsmMethodArgs,methodRef,insn.bsm.getTag(),methodArgs);
    for (int i=0; i < args.length - 1; i++) {
      boxes[i]=indy.getArgBox(i);
      args[i].addBox(boxes[i]);
    }
    opr=new Operand(insn,indy);
    frame.boxes(boxes);
    frame.in(args);
    frame.out(opr);
  }
 else {
    opr=out[0];
    InvokeExpr expr=(InvokeExpr)opr.value;
    List<Type> types=expr.getMethodRef().parameterTypes();
    Operand[] oprs;
    int nrArgs=types.size();
    if (expr.getMethodRef().isStatic())     oprs=nrArgs == 0 ? null : new Operand[nrArgs];
 else     oprs=new Operand[nrArgs + 1];
    if (oprs != null) {
      while (nrArgs-- != 0) {
        oprs[nrArgs]=pop(types.get(types.size() - nrArgs - 1));
      }
      if (!expr.getMethodRef().isStatic())       oprs[oprs.length - 1]=pop();
      frame.mergeIn(oprs);
      nrArgs=types.size();
    }
    returnType=expr.getMethodRef().returnType();
  }
  if (AsmUtil.isDWord(returnType))   pushDual(opr);
 else   if (!(returnType instanceof VoidType))   push(opr);
 else   if (!units.containsKey(insn))   setUnit(insn,Jimple.v().newInvokeStmt(opr.value));
  assignReadOps(null);
}"
85271,"@Override public void casePrimitiveCastInst(PrimitiveCastInst i){
  Type from=i.getFromType();
  final Type to=i.getToType();
  from.apply(new TypeSwitch(){
    @Override public void caseBooleanType(    BooleanType t){
      emitIntToTypeCast();
    }
    @Override public void caseByteType(    ByteType t){
      emitIntToTypeCast();
    }
    @Override public void caseCharType(    CharType t){
      emitIntToTypeCast();
    }
    @Override public void caseDoubleType(    DoubleType t){
      if (to.equals(IntType.v())) {
        mv.visitInsn(Opcodes.D2I);
      }
 else       if (to.equals(LongType.v())) {
        mv.visitInsn(Opcodes.D2L);
      }
 else       if (to.equals(FloatType.v())) {
        mv.visitInsn(Opcodes.D2F);
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    @Override public void caseFloatType(    FloatType t){
      if (to.equals(IntType.v())) {
        mv.visitInsn(Opcodes.F2I);
      }
 else       if (to.equals(LongType.v())) {
        mv.visitInsn(Opcodes.F2L);
      }
 else       if (to.equals(DoubleType.v())) {
        mv.visitInsn(Opcodes.F2D);
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    @Override public void caseIntType(    IntType t){
      emitIntToTypeCast();
    }
    @Override public void caseLongType(    LongType t){
      if (to.equals(IntType.v())) {
        mv.visitInsn(Opcodes.L2I);
      }
 else       if (to.equals(FloatType.v())) {
        mv.visitInsn(Opcodes.L2F);
      }
 else       if (to.equals(DoubleType.v())) {
        mv.visitInsn(Opcodes.L2D);
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    @Override public void caseShortType(    ShortType t){
      emitIntToTypeCast();
    }
    @Override public void defaultCase(    Type t){
      throw new RuntimeException(""String_Node_Str"");
    }
    private void emitIntToTypeCast(){
      if (to.equals(ByteType.v())) {
        mv.visitInsn(Opcodes.I2B);
      }
 else       if (to.equals(CharType.v())) {
        mv.visitInsn(Opcodes.I2C);
      }
 else       if (to.equals(ShortType.v())) {
        mv.visitInsn(Opcodes.I2S);
      }
 else       if (to.equals(FloatType.v())) {
        mv.visitInsn(Opcodes.I2F);
      }
 else       if (to.equals(LongType.v())) {
        mv.visitInsn(Opcodes.I2L);
      }
 else       if (to.equals(DoubleType.v())) {
        mv.visitInsn(Opcodes.I2D);
      }
 else       if (to.equals(IntType.v())) {
      }
 else       if (to.equals(BooleanType.v())) {
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
);
}","@Override public void casePrimitiveCastInst(PrimitiveCastInst i){
  Type from=i.getFromType();
  final Type to=i.getToType();
  from.apply(new TypeSwitch(){
    @Override public void caseBooleanType(    BooleanType t){
      emitIntToTypeCast();
    }
    @Override public void caseByteType(    ByteType t){
      emitIntToTypeCast();
    }
    @Override public void caseCharType(    CharType t){
      emitIntToTypeCast();
    }
    @Override public void caseDoubleType(    DoubleType t){
      if (to.equals(IntType.v())) {
        mv.visitInsn(Opcodes.D2I);
      }
 else       if (to.equals(LongType.v())) {
        mv.visitInsn(Opcodes.D2L);
      }
 else       if (to.equals(FloatType.v())) {
        mv.visitInsn(Opcodes.D2F);
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    @Override public void caseFloatType(    FloatType t){
      if (to.equals(IntType.v())) {
        mv.visitInsn(Opcodes.F2I);
      }
 else       if (to.equals(LongType.v())) {
        mv.visitInsn(Opcodes.F2L);
      }
 else       if (to.equals(DoubleType.v())) {
        mv.visitInsn(Opcodes.F2D);
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    @Override public void caseIntType(    IntType t){
      emitIntToTypeCast();
    }
    @Override public void caseLongType(    LongType t){
      if (to.equals(IntType.v())) {
        mv.visitInsn(Opcodes.L2I);
      }
 else       if (to.equals(FloatType.v())) {
        mv.visitInsn(Opcodes.L2F);
      }
 else       if (to.equals(DoubleType.v())) {
        mv.visitInsn(Opcodes.L2D);
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    @Override public void caseShortType(    ShortType t){
      emitIntToTypeCast();
    }
    @Override public void defaultCase(    Type t){
      throw new RuntimeException(""String_Node_Str"" + t);
    }
    private void emitIntToTypeCast(){
      if (to.equals(ByteType.v())) {
        mv.visitInsn(Opcodes.I2B);
      }
 else       if (to.equals(CharType.v())) {
        mv.visitInsn(Opcodes.I2C);
      }
 else       if (to.equals(ShortType.v())) {
        mv.visitInsn(Opcodes.I2S);
      }
 else       if (to.equals(FloatType.v())) {
        mv.visitInsn(Opcodes.I2F);
      }
 else       if (to.equals(LongType.v())) {
        mv.visitInsn(Opcodes.I2L);
      }
 else       if (to.equals(DoubleType.v())) {
        mv.visitInsn(Opcodes.I2D);
      }
 else       if (to.equals(IntType.v())) {
      }
 else       if (to.equals(BooleanType.v())) {
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
);
}"
85272,"/** 
 * Emits the bytecode for a single Baf instruction
 * @param mv The ASM MethodVisitor the bytecode is to be emitted to
 * @param inst The Baf instruction to be converted into bytecode
 */
protected void generateInstruction(final MethodVisitor mv,Inst inst){
  inst.apply(new InstSwitch(){
    @Override public void caseReturnVoidInst(    ReturnVoidInst i){
      mv.visitInsn(Opcodes.RETURN);
    }
    @Override public void caseReturnInst(    ReturnInst i){
      i.getOpType().apply(new TypeSwitch(){
        @Override public void caseArrayType(        ArrayType t){
          mv.visitInsn(Opcodes.ARETURN);
        }
        @Override public void caseBooleanType(        BooleanType t){
          mv.visitInsn(Opcodes.IRETURN);
        }
        @Override public void caseByteType(        ByteType t){
          mv.visitInsn(Opcodes.IRETURN);
        }
        @Override public void caseCharType(        CharType t){
          mv.visitInsn(Opcodes.IRETURN);
        }
        @Override public void caseDoubleType(        DoubleType t){
          mv.visitInsn(Opcodes.DRETURN);
        }
        @Override public void caseFloatType(        FloatType t){
          mv.visitInsn(Opcodes.FRETURN);
        }
        @Override public void caseIntType(        IntType t){
          mv.visitInsn(Opcodes.IRETURN);
        }
        @Override public void caseLongType(        LongType t){
          mv.visitInsn(Opcodes.LRETURN);
        }
        @Override public void caseRefType(        RefType t){
          mv.visitInsn(Opcodes.ARETURN);
        }
        @Override public void caseShortType(        ShortType t){
          mv.visitInsn(Opcodes.IRETURN);
        }
        @Override public void caseNullType(        NullType t){
          mv.visitInsn(Opcodes.ARETURN);
        }
        @Override public void defaultCase(        Type t){
          throw new RuntimeException(""String_Node_Str"" + t.toString());
        }
      }
);
    }
    @Override public void caseNopInst(    NopInst i){
      mv.visitInsn(Opcodes.NOP);
    }
    @Override public void caseJSRInst(    JSRInst i){
      mv.visitJumpInsn(Opcodes.JSR,getBranchTargetLabel(i.getTarget()));
    }
    @Override public void casePushInst(    PushInst i){
      Constant c=i.getConstant();
      if (c instanceof IntConstant) {
        int v=((IntConstant)c).value;
switch (v) {
case -1:
          mv.visitInsn(Opcodes.ICONST_M1);
        break;
case 0:
      mv.visitInsn(Opcodes.ICONST_0);
    break;
case 1:
  mv.visitInsn(Opcodes.ICONST_1);
break;
case 2:
mv.visitInsn(Opcodes.ICONST_2);
break;
case 3:
mv.visitInsn(Opcodes.ICONST_3);
break;
case 4:
mv.visitInsn(Opcodes.ICONST_4);
break;
case 5:
mv.visitInsn(Opcodes.ICONST_5);
break;
default :
if (v >= Byte.MIN_VALUE && v <= Byte.MAX_VALUE) {
mv.visitIntInsn(Opcodes.BIPUSH,v);
}
 else if (v >= Short.MIN_VALUE && v <= Short.MAX_VALUE) {
mv.visitIntInsn(Opcodes.SIPUSH,v);
}
 else {
mv.visitLdcInsn(v);
}
}
}
 else if (c instanceof StringConstant) {
mv.visitLdcInsn(((StringConstant)c).value);
}
 else if (c instanceof ClassConstant) {
mv.visitLdcInsn(org.objectweb.asm.Type.getObjectType(((ClassConstant)c).getValue()));
}
 else if (c instanceof DoubleConstant) {
double v=((DoubleConstant)c).value;
if (new Double(v).equals(0.0)) {
mv.visitInsn(Opcodes.DCONST_0);
}
 else if (v == 1) {
mv.visitInsn(Opcodes.DCONST_1);
}
 else {
mv.visitLdcInsn(v);
}
}
 else if (c instanceof FloatConstant) {
float v=((FloatConstant)c).value;
if (new Float(v).equals(0.0f)) {
mv.visitInsn(Opcodes.FCONST_0);
}
 else if (v == 1) {
mv.visitInsn(Opcodes.FCONST_1);
}
 else if (v == 2) {
mv.visitInsn(Opcodes.FCONST_2);
}
 else {
mv.visitLdcInsn(v);
}
}
 else if (c instanceof LongConstant) {
long v=((LongConstant)c).value;
if (v == 0) {
mv.visitInsn(Opcodes.LCONST_0);
}
 else if (v == 1) {
mv.visitInsn(Opcodes.LCONST_1);
}
 else {
mv.visitLdcInsn(v);
}
}
 else if (c instanceof NullConstant) {
mv.visitInsn(Opcodes.ACONST_NULL);
}
 else if (c instanceof MethodHandle) {
SootMethodRef ref=((MethodHandle)c).getMethodRef();
int tag;
if (ref.isStatic()) {
tag=Opcodes.H_INVOKESTATIC;
}
 else if (ref.declaringClass().isInterface()) {
tag=Opcodes.H_INVOKEINTERFACE;
}
 else {
tag=Opcodes.H_INVOKEVIRTUAL;
}
Handle handle=new Handle(tag,ref.declaringClass().getName(),ref.name(),ref.getSignature(),ref.declaringClass().isInnerClass());
mv.visitLdcInsn(handle);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void casePopInst(PopInst i){
if (i.getWordCount() == 2) {
mv.visitInsn(Opcodes.POP2);
}
 else {
mv.visitInsn(Opcodes.POP);
}
}
@Override public void caseIdentityInst(IdentityInst i){
Value l=i.getLeftOp();
Value r=i.getRightOp();
if (r instanceof CaughtExceptionRef && l instanceof Local) {
mv.visitVarInsn(Opcodes.ASTORE,localToSlot.get(l));
}
}
@Override public void caseStoreInst(StoreInst i){
final int slot=localToSlot.get(i.getLocal());
i.getOpType().apply(new TypeSwitch(){
@Override public void caseArrayType(ArrayType t){
mv.visitVarInsn(Opcodes.ASTORE,slot);
}
@Override public void caseBooleanType(BooleanType t){
mv.visitVarInsn(Opcodes.ISTORE,slot);
}
@Override public void caseByteType(ByteType t){
mv.visitVarInsn(Opcodes.ISTORE,slot);
}
@Override public void caseCharType(CharType t){
mv.visitVarInsn(Opcodes.ISTORE,slot);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitVarInsn(Opcodes.DSTORE,slot);
}
@Override public void caseFloatType(FloatType t){
mv.visitVarInsn(Opcodes.FSTORE,slot);
}
@Override public void caseIntType(IntType t){
mv.visitVarInsn(Opcodes.ISTORE,slot);
}
@Override public void caseLongType(LongType t){
mv.visitVarInsn(Opcodes.LSTORE,slot);
}
@Override public void caseRefType(RefType t){
mv.visitVarInsn(Opcodes.ASTORE,slot);
}
@Override public void caseShortType(ShortType t){
mv.visitVarInsn(Opcodes.ISTORE,slot);
}
@Override public void caseStmtAddressType(StmtAddressType t){
throw new RuntimeException(""String_Node_Str"");
}
@Override public void caseNullType(NullType t){
mv.visitVarInsn(Opcodes.ASTORE,slot);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"" + t);
}
}
);
}
@Override public void caseGotoInst(GotoInst i){
mv.visitJumpInsn(Opcodes.GOTO,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLoadInst(LoadInst i){
final int slot=localToSlot.get(i.getLocal());
i.getOpType().apply(new TypeSwitch(){
@Override public void caseArrayType(ArrayType t){
mv.visitVarInsn(Opcodes.ALOAD,slot);
}
@Override public void caseBooleanType(BooleanType t){
mv.visitVarInsn(Opcodes.ILOAD,slot);
}
@Override public void caseByteType(ByteType t){
mv.visitVarInsn(Opcodes.ILOAD,slot);
}
@Override public void caseCharType(CharType t){
mv.visitVarInsn(Opcodes.ILOAD,slot);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitVarInsn(Opcodes.DLOAD,slot);
}
@Override public void caseFloatType(FloatType t){
mv.visitVarInsn(Opcodes.FLOAD,slot);
}
@Override public void caseIntType(IntType t){
mv.visitVarInsn(Opcodes.ILOAD,slot);
}
@Override public void caseLongType(LongType t){
mv.visitVarInsn(Opcodes.LLOAD,slot);
}
@Override public void caseRefType(RefType t){
mv.visitVarInsn(Opcodes.ALOAD,slot);
}
@Override public void caseShortType(ShortType t){
mv.visitVarInsn(Opcodes.ILOAD,slot);
}
@Override public void caseNullType(NullType t){
mv.visitVarInsn(Opcodes.ALOAD,slot);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"" + t);
}
}
);
}
@Override public void caseArrayWriteInst(ArrayWriteInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseArrayType(ArrayType t){
mv.visitInsn(Opcodes.AASTORE);
}
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.BASTORE);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.BASTORE);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.CASTORE);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DASTORE);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FASTORE);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.IASTORE);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LASTORE);
}
@Override public void caseRefType(RefType t){
mv.visitInsn(Opcodes.AASTORE);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.SASTORE);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"" + t);
}
}
);
}
@Override public void caseArrayReadInst(ArrayReadInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseArrayType(ArrayType t){
mv.visitInsn(Opcodes.AALOAD);
}
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.BALOAD);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.BALOAD);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.CALOAD);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DALOAD);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FALOAD);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.IALOAD);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LALOAD);
}
@Override public void caseRefType(RefType t){
mv.visitInsn(Opcodes.AALOAD);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.SALOAD);
}
@Override public void caseNullType(NullType t){
mv.visitInsn(Opcodes.AALOAD);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"" + t);
}
}
);
}
@Override public void caseIfNullInst(IfNullInst i){
mv.visitJumpInsn(Opcodes.IFNULL,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfNonNullInst(IfNonNullInst i){
mv.visitJumpInsn(Opcodes.IFNONNULL,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfEqInst(IfEqInst i){
mv.visitJumpInsn(Opcodes.IFEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfNeInst(IfNeInst i){
mv.visitJumpInsn(Opcodes.IFNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfGtInst(IfGtInst i){
mv.visitJumpInsn(Opcodes.IFGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfGeInst(IfGeInst i){
mv.visitJumpInsn(Opcodes.IFGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfLtInst(IfLtInst i){
mv.visitJumpInsn(Opcodes.IFLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfLeInst(IfLeInst i){
mv.visitJumpInsn(Opcodes.IFLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfCmpEqInst(final IfCmpEqInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseArrayType(ArrayType t){
mv.visitJumpInsn(Opcodes.IF_ACMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseBooleanType(BooleanType t){
mv.visitJumpInsn(Opcodes.IF_ICMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseByteType(ByteType t){
mv.visitJumpInsn(Opcodes.IF_ICMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseCharType(CharType t){
mv.visitJumpInsn(Opcodes.IF_ICMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DCMPG);
mv.visitJumpInsn(Opcodes.IFEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FCMPG);
mv.visitJumpInsn(Opcodes.IFEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIntType(IntType t){
mv.visitJumpInsn(Opcodes.IF_ICMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LCMP);
mv.visitJumpInsn(Opcodes.IFEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseRefType(RefType t){
mv.visitJumpInsn(Opcodes.IF_ACMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseShortType(ShortType t){
mv.visitJumpInsn(Opcodes.IF_ICMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseNullType(NullType t){
mv.visitJumpInsn(Opcodes.IF_ACMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseIfCmpNeInst(final IfCmpNeInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseArrayType(ArrayType t){
mv.visitJumpInsn(Opcodes.IF_ACMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseBooleanType(BooleanType t){
mv.visitJumpInsn(Opcodes.IF_ICMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseByteType(ByteType t){
mv.visitJumpInsn(Opcodes.IF_ICMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseCharType(CharType t){
mv.visitJumpInsn(Opcodes.IF_ICMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DCMPG);
mv.visitJumpInsn(Opcodes.IFNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FCMPG);
mv.visitJumpInsn(Opcodes.IFNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIntType(IntType t){
mv.visitJumpInsn(Opcodes.IF_ICMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LCMP);
mv.visitJumpInsn(Opcodes.IFNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseRefType(RefType t){
mv.visitJumpInsn(Opcodes.IF_ACMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseShortType(ShortType t){
mv.visitJumpInsn(Opcodes.IF_ICMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseNullType(NullType t){
mv.visitJumpInsn(Opcodes.IF_ACMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseIfCmpGtInst(final IfCmpGtInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseByteType(ByteType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseCharType(CharType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DCMPG);
mv.visitJumpInsn(Opcodes.IFGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FCMPG);
mv.visitJumpInsn(Opcodes.IFGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIntType(IntType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LCMP);
mv.visitJumpInsn(Opcodes.IFGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseShortType(ShortType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseIfCmpGeInst(final IfCmpGeInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseByteType(ByteType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseCharType(CharType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DCMPG);
mv.visitJumpInsn(Opcodes.IFGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FCMPG);
mv.visitJumpInsn(Opcodes.IFGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIntType(IntType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LCMP);
mv.visitJumpInsn(Opcodes.IFGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseShortType(ShortType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseIfCmpLtInst(final IfCmpLtInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseByteType(ByteType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseCharType(CharType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DCMPG);
mv.visitJumpInsn(Opcodes.IFLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FCMPG);
mv.visitJumpInsn(Opcodes.IFLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIntType(IntType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LCMP);
mv.visitJumpInsn(Opcodes.IFLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseShortType(ShortType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseIfCmpLeInst(final IfCmpLeInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseByteType(ByteType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseCharType(CharType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DCMPG);
mv.visitJumpInsn(Opcodes.IFLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FCMPG);
mv.visitJumpInsn(Opcodes.IFLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIntType(IntType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LCMP);
mv.visitJumpInsn(Opcodes.IFLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseShortType(ShortType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseStaticGetInst(StaticGetInst i){
SootFieldRef field=i.getFieldRef();
mv.visitFieldInsn(Opcodes.GETSTATIC,slashify(field.declaringClass().getName()),field.name(),toTypeDesc(field.type()));
}
@Override public void caseStaticPutInst(StaticPutInst i){
SootFieldRef field=i.getFieldRef();
mv.visitFieldInsn(Opcodes.PUTSTATIC,slashify(field.declaringClass().getName()),field.name(),toTypeDesc(field.type()));
}
@Override public void caseFieldGetInst(FieldGetInst i){
SootFieldRef field=i.getFieldRef();
mv.visitFieldInsn(Opcodes.GETFIELD,slashify(field.declaringClass().getName()),field.name(),toTypeDesc(field.type()));
}
@Override public void caseFieldPutInst(FieldPutInst i){
SootFieldRef field=i.getFieldRef();
mv.visitFieldInsn(Opcodes.PUTFIELD,slashify(field.declaringClass().getName()),field.name(),toTypeDesc(field.type()));
}
@Override public void caseInstanceCastInst(InstanceCastInst i){
Type castType=i.getCastType();
if (castType instanceof RefType) {
mv.visitTypeInsn(Opcodes.CHECKCAST,slashify(((RefType)castType).getClassName()));
}
 else if (castType instanceof ArrayType) {
mv.visitTypeInsn(Opcodes.CHECKCAST,toTypeDesc(castType));
}
}
@Override public void caseInstanceOfInst(InstanceOfInst i){
Type checkType=i.getCheckType();
if (checkType instanceof RefType) {
mv.visitTypeInsn(Opcodes.INSTANCEOF,slashify(((RefType)checkType).getClassName()));
}
 else if (checkType instanceof ArrayType) {
mv.visitTypeInsn(Opcodes.INSTANCEOF,toTypeDesc(checkType));
}
}
@Override public void casePrimitiveCastInst(PrimitiveCastInst i){
Type from=i.getFromType();
final Type to=i.getToType();
from.apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
emitIntToTypeCast();
}
@Override public void caseByteType(ByteType t){
emitIntToTypeCast();
}
@Override public void caseCharType(CharType t){
emitIntToTypeCast();
}
@Override public void caseDoubleType(DoubleType t){
if (to.equals(IntType.v())) {
mv.visitInsn(Opcodes.D2I);
}
 else if (to.equals(LongType.v())) {
mv.visitInsn(Opcodes.D2L);
}
 else if (to.equals(FloatType.v())) {
mv.visitInsn(Opcodes.D2F);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void caseFloatType(FloatType t){
if (to.equals(IntType.v())) {
mv.visitInsn(Opcodes.F2I);
}
 else if (to.equals(LongType.v())) {
mv.visitInsn(Opcodes.F2L);
}
 else if (to.equals(DoubleType.v())) {
mv.visitInsn(Opcodes.F2D);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void caseIntType(IntType t){
emitIntToTypeCast();
}
@Override public void caseLongType(LongType t){
if (to.equals(IntType.v())) {
mv.visitInsn(Opcodes.L2I);
}
 else if (to.equals(FloatType.v())) {
mv.visitInsn(Opcodes.L2F);
}
 else if (to.equals(DoubleType.v())) {
mv.visitInsn(Opcodes.L2D);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void caseShortType(ShortType t){
emitIntToTypeCast();
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
private void emitIntToTypeCast(){
if (to.equals(ByteType.v())) {
mv.visitInsn(Opcodes.I2B);
}
 else if (to.equals(CharType.v())) {
mv.visitInsn(Opcodes.I2C);
}
 else if (to.equals(ShortType.v())) {
mv.visitInsn(Opcodes.I2S);
}
 else if (to.equals(FloatType.v())) {
mv.visitInsn(Opcodes.I2F);
}
 else if (to.equals(LongType.v())) {
mv.visitInsn(Opcodes.I2L);
}
 else if (to.equals(DoubleType.v())) {
mv.visitInsn(Opcodes.I2D);
}
 else if (to.equals(IntType.v())) {
}
 else if (to.equals(BooleanType.v())) {
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
}
);
}
@Override public void caseDynamicInvokeInst(DynamicInvokeInst i){
SootMethodRef m=i.getMethodRef();
SootMethodRef bsm=i.getBootstrapMethodRef();
List<Value> args=i.getBootstrapArgs();
final Object[] argsArray=new Object[args.size()];
int index=0;
for (Value v : args) {
final int j=index;
v.apply(new ConstantSwitch(){
@Override public void defaultCase(Object object){
throw new RuntimeException(""String_Node_Str"");
}
@Override public void caseStringConstant(StringConstant v){
argsArray[j]=v.value;
}
@Override public void caseNullConstant(NullConstant v){
throw new RuntimeException(""String_Node_Str"");
}
@Override public void caseMethodHandle(MethodHandle handle){
SootMethodRef methodRef=handle.getMethodRef();
argsArray[j]=new Handle(handle.tag,slashify(methodRef.declaringClass().getName()),methodRef.name(),toTypeDesc(methodRef));
}
@Override public void caseLongConstant(LongConstant v){
argsArray[j]=v.value;
}
@Override public void caseIntConstant(IntConstant v){
argsArray[j]=v.value;
}
@Override public void caseFloatConstant(FloatConstant v){
argsArray[j]=v.value;
}
@Override public void caseDoubleConstant(DoubleConstant v){
argsArray[j]=v.value;
}
@Override public void caseClassConstant(ClassConstant v){
argsArray[j]=org.objectweb.asm.Type.getType(v.getValue());
}
}
);
++index;
}
mv.visitInvokeDynamicInsn(m.name(),toTypeDesc(m),new Handle(i.getHandleTag(),slashify(bsm.declaringClass().getName()),bsm.name(),toTypeDesc(bsm)),argsArray);
}
@Override public void caseStaticInvokeInst(StaticInvokeInst i){
SootMethodRef m=i.getMethodRef();
mv.visitMethodInsn(Opcodes.INVOKESTATIC,slashify(m.declaringClass().getName()),m.name(),toTypeDesc(m),m.declaringClass().isInterface());
}
@Override public void caseVirtualInvokeInst(VirtualInvokeInst i){
SootMethodRef m=i.getMethodRef();
mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,slashify(m.declaringClass().getName()),m.name(),toTypeDesc(m),m.declaringClass().isInterface());
}
@Override public void caseInterfaceInvokeInst(InterfaceInvokeInst i){
SootMethodRef m=i.getMethodRef();
SootClass declaration=m.declaringClass();
boolean isInterface=true;
if (!declaration.isPhantom() && !declaration.isInterface()) {
isInterface=false;
}
mv.visitMethodInsn(Opcodes.INVOKEINTERFACE,slashify(declaration.getName()),m.name(),toTypeDesc(m),isInterface);
}
@Override public void caseSpecialInvokeInst(SpecialInvokeInst i){
SootMethodRef m=i.getMethodRef();
mv.visitMethodInsn(Opcodes.INVOKESPECIAL,slashify(m.declaringClass().getName()),m.name(),toTypeDesc(m),m.declaringClass().isInterface());
}
@Override public void caseThrowInst(ThrowInst i){
mv.visitInsn(Opcodes.ATHROW);
}
@Override public void caseAddInst(AddInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.IADD);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.IADD);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.IADD);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DADD);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FADD);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.IADD);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LADD);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.IADD);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseAndInst(AndInst i){
if (i.getOpType().equals(LongType.v())) {
mv.visitInsn(Opcodes.LAND);
}
 else {
mv.visitInsn(Opcodes.IAND);
}
}
@Override public void caseOrInst(OrInst i){
if (i.getOpType().equals(LongType.v())) {
mv.visitInsn(Opcodes.LOR);
}
 else {
mv.visitInsn(Opcodes.IOR);
}
}
@Override public void caseXorInst(XorInst i){
if (i.getOpType().equals(LongType.v())) {
mv.visitInsn(Opcodes.LXOR);
}
 else {
mv.visitInsn(Opcodes.IXOR);
}
}
@Override public void caseArrayLengthInst(ArrayLengthInst i){
mv.visitInsn(Opcodes.ARRAYLENGTH);
}
@Override public void caseCmpInst(CmpInst i){
mv.visitInsn(Opcodes.LCMP);
}
@Override public void caseCmpgInst(CmpgInst i){
if (i.getOpType().equals(FloatType.v())) {
mv.visitInsn(Opcodes.FCMPG);
}
 else {
mv.visitInsn(Opcodes.DCMPG);
}
}
@Override public void caseCmplInst(CmplInst i){
if (i.getOpType().equals(FloatType.v())) {
mv.visitInsn(Opcodes.FCMPL);
}
 else {
mv.visitInsn(Opcodes.DCMPL);
}
}
@Override public void caseDivInst(DivInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.IDIV);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.IDIV);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.IDIV);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DDIV);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FDIV);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.IDIV);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LDIV);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.IDIV);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseIncInst(IncInst i){
if (i.getUseBoxes().get(0).getValue() != i.getDefBoxes().get(0).getValue()) {
throw new RuntimeException(""String_Node_Str"");
}
if (i.getConstant() instanceof IntConstant) {
mv.visitIincInsn(localToSlot.get(i.getLocal()),((IntConstant)i.getConstant()).value);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void caseMulInst(MulInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.IMUL);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.IMUL);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.IMUL);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DMUL);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FMUL);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.IMUL);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LMUL);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.IMUL);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseRemInst(RemInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.IREM);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.IREM);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.IREM);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DREM);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FREM);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.IREM);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LREM);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.IREM);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseSubInst(SubInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.ISUB);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.ISUB);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.ISUB);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DSUB);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FSUB);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.ISUB);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LSUB);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.ISUB);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseShlInst(ShlInst i){
if (i.getOpType().equals(LongType.v())) {
mv.visitInsn(Opcodes.LSHL);
}
 else {
mv.visitInsn(Opcodes.ISHL);
}
}
@Override public void caseShrInst(ShrInst i){
if (i.getOpType().equals(LongType.v())) {
mv.visitInsn(Opcodes.LSHR);
}
 else {
mv.visitInsn(Opcodes.ISHR);
}
}
@Override public void caseUshrInst(UshrInst i){
if (i.getOpType().equals(LongType.v())) {
mv.visitInsn(Opcodes.LUSHR);
}
 else {
mv.visitInsn(Opcodes.IUSHR);
}
}
@Override public void caseNewInst(NewInst i){
mv.visitTypeInsn(Opcodes.NEW,slashify(i.getBaseType().getClassName()));
}
@Override public void caseNegInst(NegInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.INEG);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.INEG);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.INEG);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DNEG);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FNEG);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.INEG);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LNEG);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.INEG);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseSwapInst(SwapInst i){
mv.visitInsn(Opcodes.SWAP);
}
@Override public void caseDup1Inst(Dup1Inst i){
if (sizeOfType(i.getOp1Type()) == 2) {
mv.visitInsn(Opcodes.DUP2);
}
 else {
mv.visitInsn(Opcodes.DUP);
}
}
@Override public void caseDup2Inst(Dup2Inst i){
Type firstOpType=i.getOp1Type();
Type secondOpType=i.getOp2Type();
if (sizeOfType(firstOpType) == 2) {
mv.visitInsn(Opcodes.DUP2);
if (sizeOfType(secondOpType) == 2) {
mv.visitInsn(Opcodes.DUP2);
}
 else {
mv.visitInsn(Opcodes.DUP);
}
}
 else if (sizeOfType(secondOpType) == 2) {
mv.visitInsn(Opcodes.DUP);
mv.visitInsn(Opcodes.DUP2);
}
 else {
mv.visitInsn(Opcodes.DUP2);
}
}
@Override public void caseDup1_x1Inst(Dup1_x1Inst i){
Type opType=i.getOp1Type();
Type underType=i.getUnder1Type();
if (sizeOfType(opType) == 2) {
if (sizeOfType(underType) == 2) {
mv.visitInsn(Opcodes.DUP2_X2);
}
 else {
mv.visitInsn(Opcodes.DUP2_X1);
}
}
 else {
if (sizeOfType(underType) == 2) {
mv.visitInsn(Opcodes.DUP_X2);
}
 else {
mv.visitInsn(Opcodes.DUP_X1);
}
}
}
@Override public void caseDup1_x2Inst(Dup1_x2Inst i){
int toSkip=sizeOfType(i.getUnder1Type()) + sizeOfType(i.getUnder2Type());
if (sizeOfType(i.getOp1Type()) == 2) {
if (toSkip == 2) {
mv.visitInsn(Opcodes.DUP2_X2);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
 else {
if (toSkip == 2) {
mv.visitInsn(Opcodes.DUP_X2);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
}
@Override public void caseDup2_x1Inst(Dup2_x1Inst i){
int toDup=sizeOfType(i.getOp1Type()) + sizeOfType(i.getOp2Type());
if (toDup == 2) {
if (sizeOfType(i.getUnder1Type()) == 2) {
mv.visitInsn(Opcodes.DUP2_X2);
}
 else {
mv.visitInsn(Opcodes.DUP2_X1);
}
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void caseDup2_x2Inst(Dup2_x2Inst i){
int toDup=sizeOfType(i.getOp1Type()) + sizeOfType(i.getOp2Type());
int toSkip=sizeOfType(i.getUnder1Type()) + sizeOfType(i.getUnder2Type());
if (toDup > 2 || toSkip > 2) {
throw new RuntimeException(""String_Node_Str"");
}
if (toDup == 2 && toSkip == 2) {
mv.visitInsn(Opcodes.DUP2_X2);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void caseNewArrayInst(NewArrayInst i){
Type t=i.getBaseType();
if (t instanceof RefType) {
mv.visitTypeInsn(Opcodes.ANEWARRAY,slashify(((RefType)t).getClassName()));
}
 else if (t instanceof ArrayType) {
mv.visitTypeInsn(Opcodes.ANEWARRAY,toTypeDesc(t));
}
 else {
int type;
if (t.equals(BooleanType.v())) {
type=Opcodes.T_BOOLEAN;
}
 else if (t.equals(CharType.v())) {
type=Opcodes.T_CHAR;
}
 else if (t.equals(FloatType.v())) {
type=Opcodes.T_FLOAT;
}
 else if (t.equals(DoubleType.v())) {
type=Opcodes.T_DOUBLE;
}
 else if (t.equals(ByteType.v())) {
type=Opcodes.T_BYTE;
}
 else if (t.equals(ShortType.v())) {
type=Opcodes.T_SHORT;
}
 else if (t.equals(IntType.v())) {
type=Opcodes.T_INT;
}
 else if (t.equals(LongType.v())) {
type=Opcodes.T_LONG;
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
mv.visitIntInsn(Opcodes.NEWARRAY,type);
}
}
@Override public void caseNewMultiArrayInst(NewMultiArrayInst i){
mv.visitMultiANewArrayInsn(toTypeDesc(i.getBaseType()),i.getDimensionCount());
}
@Override public void caseLookupSwitchInst(LookupSwitchInst i){
List<IntConstant> values=i.getLookupValues();
List<Unit> targets=i.getTargets();
int[] keys=new int[values.size()];
Label[] labels=new Label[values.size()];
for (int j=0; j < values.size(); j++) {
keys[j]=values.get(j).value;
labels[j]=branchTargetLabels.get(targets.get(j));
}
mv.visitLookupSwitchInsn(branchTargetLabels.get(i.getDefaultTarget()),keys,labels);
}
@Override public void caseTableSwitchInst(TableSwitchInst i){
List<Unit> targets=i.getTargets();
Label[] labels=new Label[targets.size()];
for (int j=0; j < targets.size(); j++) {
labels[j]=branchTargetLabels.get(targets.get(j));
}
mv.visitTableSwitchInsn(i.getLowIndex(),i.getHighIndex(),branchTargetLabels.get(i.getDefaultTarget()),labels);
}
@Override public void caseEnterMonitorInst(EnterMonitorInst i){
mv.visitInsn(Opcodes.MONITORENTER);
}
@Override public void caseExitMonitorInst(ExitMonitorInst i){
mv.visitInsn(Opcodes.MONITOREXIT);
}
}
);
}","/** 
 * Emits the bytecode for a single Baf instruction
 * @param mv The ASM MethodVisitor the bytecode is to be emitted to
 * @param inst The Baf instruction to be converted into bytecode
 */
protected void generateInstruction(final MethodVisitor mv,Inst inst){
  inst.apply(new InstSwitch(){
    @Override public void caseReturnVoidInst(    ReturnVoidInst i){
      mv.visitInsn(Opcodes.RETURN);
    }
    @Override public void caseReturnInst(    ReturnInst i){
      i.getOpType().apply(new TypeSwitch(){
        @Override public void caseArrayType(        ArrayType t){
          mv.visitInsn(Opcodes.ARETURN);
        }
        @Override public void caseBooleanType(        BooleanType t){
          mv.visitInsn(Opcodes.IRETURN);
        }
        @Override public void caseByteType(        ByteType t){
          mv.visitInsn(Opcodes.IRETURN);
        }
        @Override public void caseCharType(        CharType t){
          mv.visitInsn(Opcodes.IRETURN);
        }
        @Override public void caseDoubleType(        DoubleType t){
          mv.visitInsn(Opcodes.DRETURN);
        }
        @Override public void caseFloatType(        FloatType t){
          mv.visitInsn(Opcodes.FRETURN);
        }
        @Override public void caseIntType(        IntType t){
          mv.visitInsn(Opcodes.IRETURN);
        }
        @Override public void caseLongType(        LongType t){
          mv.visitInsn(Opcodes.LRETURN);
        }
        @Override public void caseRefType(        RefType t){
          mv.visitInsn(Opcodes.ARETURN);
        }
        @Override public void caseShortType(        ShortType t){
          mv.visitInsn(Opcodes.IRETURN);
        }
        @Override public void caseNullType(        NullType t){
          mv.visitInsn(Opcodes.ARETURN);
        }
        @Override public void defaultCase(        Type t){
          throw new RuntimeException(""String_Node_Str"" + t.toString());
        }
      }
);
    }
    @Override public void caseNopInst(    NopInst i){
      mv.visitInsn(Opcodes.NOP);
    }
    @Override public void caseJSRInst(    JSRInst i){
      mv.visitJumpInsn(Opcodes.JSR,getBranchTargetLabel(i.getTarget()));
    }
    @Override public void casePushInst(    PushInst i){
      Constant c=i.getConstant();
      if (c instanceof IntConstant) {
        int v=((IntConstant)c).value;
switch (v) {
case -1:
          mv.visitInsn(Opcodes.ICONST_M1);
        break;
case 0:
      mv.visitInsn(Opcodes.ICONST_0);
    break;
case 1:
  mv.visitInsn(Opcodes.ICONST_1);
break;
case 2:
mv.visitInsn(Opcodes.ICONST_2);
break;
case 3:
mv.visitInsn(Opcodes.ICONST_3);
break;
case 4:
mv.visitInsn(Opcodes.ICONST_4);
break;
case 5:
mv.visitInsn(Opcodes.ICONST_5);
break;
default :
if (v >= Byte.MIN_VALUE && v <= Byte.MAX_VALUE) {
mv.visitIntInsn(Opcodes.BIPUSH,v);
}
 else if (v >= Short.MIN_VALUE && v <= Short.MAX_VALUE) {
mv.visitIntInsn(Opcodes.SIPUSH,v);
}
 else {
mv.visitLdcInsn(v);
}
}
}
 else if (c instanceof StringConstant) {
mv.visitLdcInsn(((StringConstant)c).value);
}
 else if (c instanceof ClassConstant) {
mv.visitLdcInsn(org.objectweb.asm.Type.getObjectType(((ClassConstant)c).getValue()));
}
 else if (c instanceof DoubleConstant) {
double v=((DoubleConstant)c).value;
if (new Double(v).equals(0.0)) {
mv.visitInsn(Opcodes.DCONST_0);
}
 else if (v == 1) {
mv.visitInsn(Opcodes.DCONST_1);
}
 else {
mv.visitLdcInsn(v);
}
}
 else if (c instanceof FloatConstant) {
float v=((FloatConstant)c).value;
if (new Float(v).equals(0.0f)) {
mv.visitInsn(Opcodes.FCONST_0);
}
 else if (v == 1) {
mv.visitInsn(Opcodes.FCONST_1);
}
 else if (v == 2) {
mv.visitInsn(Opcodes.FCONST_2);
}
 else {
mv.visitLdcInsn(v);
}
}
 else if (c instanceof LongConstant) {
long v=((LongConstant)c).value;
if (v == 0) {
mv.visitInsn(Opcodes.LCONST_0);
}
 else if (v == 1) {
mv.visitInsn(Opcodes.LCONST_1);
}
 else {
mv.visitLdcInsn(v);
}
}
 else if (c instanceof NullConstant) {
mv.visitInsn(Opcodes.ACONST_NULL);
}
 else if (c instanceof MethodHandle) {
SootMethodRef ref=((MethodHandle)c).getMethodRef();
int tag;
if (ref.isStatic()) {
tag=Opcodes.H_INVOKESTATIC;
}
 else if (ref.declaringClass().isInterface()) {
tag=Opcodes.H_INVOKEINTERFACE;
}
 else {
tag=Opcodes.H_INVOKEVIRTUAL;
}
Handle handle=new Handle(tag,ref.declaringClass().getName(),ref.name(),ref.getSignature(),ref.declaringClass().isInnerClass());
mv.visitLdcInsn(handle);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void casePopInst(PopInst i){
if (i.getWordCount() == 2) {
mv.visitInsn(Opcodes.POP2);
}
 else {
mv.visitInsn(Opcodes.POP);
}
}
@Override public void caseIdentityInst(IdentityInst i){
Value l=i.getLeftOp();
Value r=i.getRightOp();
if (r instanceof CaughtExceptionRef && l instanceof Local) {
mv.visitVarInsn(Opcodes.ASTORE,localToSlot.get(l));
}
}
@Override public void caseStoreInst(StoreInst i){
final int slot=localToSlot.get(i.getLocal());
i.getOpType().apply(new TypeSwitch(){
@Override public void caseArrayType(ArrayType t){
mv.visitVarInsn(Opcodes.ASTORE,slot);
}
@Override public void caseBooleanType(BooleanType t){
mv.visitVarInsn(Opcodes.ISTORE,slot);
}
@Override public void caseByteType(ByteType t){
mv.visitVarInsn(Opcodes.ISTORE,slot);
}
@Override public void caseCharType(CharType t){
mv.visitVarInsn(Opcodes.ISTORE,slot);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitVarInsn(Opcodes.DSTORE,slot);
}
@Override public void caseFloatType(FloatType t){
mv.visitVarInsn(Opcodes.FSTORE,slot);
}
@Override public void caseIntType(IntType t){
mv.visitVarInsn(Opcodes.ISTORE,slot);
}
@Override public void caseLongType(LongType t){
mv.visitVarInsn(Opcodes.LSTORE,slot);
}
@Override public void caseRefType(RefType t){
mv.visitVarInsn(Opcodes.ASTORE,slot);
}
@Override public void caseShortType(ShortType t){
mv.visitVarInsn(Opcodes.ISTORE,slot);
}
@Override public void caseStmtAddressType(StmtAddressType t){
throw new RuntimeException(""String_Node_Str"");
}
@Override public void caseNullType(NullType t){
mv.visitVarInsn(Opcodes.ASTORE,slot);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"" + t);
}
}
);
}
@Override public void caseGotoInst(GotoInst i){
mv.visitJumpInsn(Opcodes.GOTO,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLoadInst(LoadInst i){
final int slot=localToSlot.get(i.getLocal());
i.getOpType().apply(new TypeSwitch(){
@Override public void caseArrayType(ArrayType t){
mv.visitVarInsn(Opcodes.ALOAD,slot);
}
@Override public void caseBooleanType(BooleanType t){
mv.visitVarInsn(Opcodes.ILOAD,slot);
}
@Override public void caseByteType(ByteType t){
mv.visitVarInsn(Opcodes.ILOAD,slot);
}
@Override public void caseCharType(CharType t){
mv.visitVarInsn(Opcodes.ILOAD,slot);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitVarInsn(Opcodes.DLOAD,slot);
}
@Override public void caseFloatType(FloatType t){
mv.visitVarInsn(Opcodes.FLOAD,slot);
}
@Override public void caseIntType(IntType t){
mv.visitVarInsn(Opcodes.ILOAD,slot);
}
@Override public void caseLongType(LongType t){
mv.visitVarInsn(Opcodes.LLOAD,slot);
}
@Override public void caseRefType(RefType t){
mv.visitVarInsn(Opcodes.ALOAD,slot);
}
@Override public void caseShortType(ShortType t){
mv.visitVarInsn(Opcodes.ILOAD,slot);
}
@Override public void caseNullType(NullType t){
mv.visitVarInsn(Opcodes.ALOAD,slot);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"" + t);
}
}
);
}
@Override public void caseArrayWriteInst(ArrayWriteInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseArrayType(ArrayType t){
mv.visitInsn(Opcodes.AASTORE);
}
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.BASTORE);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.BASTORE);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.CASTORE);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DASTORE);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FASTORE);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.IASTORE);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LASTORE);
}
@Override public void caseRefType(RefType t){
mv.visitInsn(Opcodes.AASTORE);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.SASTORE);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"" + t);
}
}
);
}
@Override public void caseArrayReadInst(ArrayReadInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseArrayType(ArrayType t){
mv.visitInsn(Opcodes.AALOAD);
}
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.BALOAD);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.BALOAD);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.CALOAD);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DALOAD);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FALOAD);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.IALOAD);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LALOAD);
}
@Override public void caseRefType(RefType t){
mv.visitInsn(Opcodes.AALOAD);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.SALOAD);
}
@Override public void caseNullType(NullType t){
mv.visitInsn(Opcodes.AALOAD);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"" + t);
}
}
);
}
@Override public void caseIfNullInst(IfNullInst i){
mv.visitJumpInsn(Opcodes.IFNULL,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfNonNullInst(IfNonNullInst i){
mv.visitJumpInsn(Opcodes.IFNONNULL,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfEqInst(IfEqInst i){
mv.visitJumpInsn(Opcodes.IFEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfNeInst(IfNeInst i){
mv.visitJumpInsn(Opcodes.IFNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfGtInst(IfGtInst i){
mv.visitJumpInsn(Opcodes.IFGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfGeInst(IfGeInst i){
mv.visitJumpInsn(Opcodes.IFGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfLtInst(IfLtInst i){
mv.visitJumpInsn(Opcodes.IFLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfLeInst(IfLeInst i){
mv.visitJumpInsn(Opcodes.IFLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIfCmpEqInst(final IfCmpEqInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseArrayType(ArrayType t){
mv.visitJumpInsn(Opcodes.IF_ACMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseBooleanType(BooleanType t){
mv.visitJumpInsn(Opcodes.IF_ICMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseByteType(ByteType t){
mv.visitJumpInsn(Opcodes.IF_ICMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseCharType(CharType t){
mv.visitJumpInsn(Opcodes.IF_ICMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DCMPG);
mv.visitJumpInsn(Opcodes.IFEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FCMPG);
mv.visitJumpInsn(Opcodes.IFEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIntType(IntType t){
mv.visitJumpInsn(Opcodes.IF_ICMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LCMP);
mv.visitJumpInsn(Opcodes.IFEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseRefType(RefType t){
mv.visitJumpInsn(Opcodes.IF_ACMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseShortType(ShortType t){
mv.visitJumpInsn(Opcodes.IF_ICMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseNullType(NullType t){
mv.visitJumpInsn(Opcodes.IF_ACMPEQ,getBranchTargetLabel(i.getTarget()));
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseIfCmpNeInst(final IfCmpNeInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseArrayType(ArrayType t){
mv.visitJumpInsn(Opcodes.IF_ACMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseBooleanType(BooleanType t){
mv.visitJumpInsn(Opcodes.IF_ICMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseByteType(ByteType t){
mv.visitJumpInsn(Opcodes.IF_ICMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseCharType(CharType t){
mv.visitJumpInsn(Opcodes.IF_ICMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DCMPG);
mv.visitJumpInsn(Opcodes.IFNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FCMPG);
mv.visitJumpInsn(Opcodes.IFNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIntType(IntType t){
mv.visitJumpInsn(Opcodes.IF_ICMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LCMP);
mv.visitJumpInsn(Opcodes.IFNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseRefType(RefType t){
mv.visitJumpInsn(Opcodes.IF_ACMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseShortType(ShortType t){
mv.visitJumpInsn(Opcodes.IF_ICMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseNullType(NullType t){
mv.visitJumpInsn(Opcodes.IF_ACMPNE,getBranchTargetLabel(i.getTarget()));
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseIfCmpGtInst(final IfCmpGtInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseByteType(ByteType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseCharType(CharType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DCMPG);
mv.visitJumpInsn(Opcodes.IFGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FCMPG);
mv.visitJumpInsn(Opcodes.IFGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIntType(IntType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LCMP);
mv.visitJumpInsn(Opcodes.IFGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseShortType(ShortType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGT,getBranchTargetLabel(i.getTarget()));
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseIfCmpGeInst(final IfCmpGeInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseByteType(ByteType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseCharType(CharType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DCMPG);
mv.visitJumpInsn(Opcodes.IFGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FCMPG);
mv.visitJumpInsn(Opcodes.IFGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIntType(IntType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LCMP);
mv.visitJumpInsn(Opcodes.IFGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseShortType(ShortType t){
mv.visitJumpInsn(Opcodes.IF_ICMPGE,getBranchTargetLabel(i.getTarget()));
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseIfCmpLtInst(final IfCmpLtInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseByteType(ByteType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseCharType(CharType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DCMPG);
mv.visitJumpInsn(Opcodes.IFLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FCMPG);
mv.visitJumpInsn(Opcodes.IFLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIntType(IntType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LCMP);
mv.visitJumpInsn(Opcodes.IFLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseShortType(ShortType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLT,getBranchTargetLabel(i.getTarget()));
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseIfCmpLeInst(final IfCmpLeInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseByteType(ByteType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseCharType(CharType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DCMPG);
mv.visitJumpInsn(Opcodes.IFLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FCMPG);
mv.visitJumpInsn(Opcodes.IFLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseIntType(IntType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LCMP);
mv.visitJumpInsn(Opcodes.IFLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void caseShortType(ShortType t){
mv.visitJumpInsn(Opcodes.IF_ICMPLE,getBranchTargetLabel(i.getTarget()));
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseStaticGetInst(StaticGetInst i){
SootFieldRef field=i.getFieldRef();
mv.visitFieldInsn(Opcodes.GETSTATIC,slashify(field.declaringClass().getName()),field.name(),toTypeDesc(field.type()));
}
@Override public void caseStaticPutInst(StaticPutInst i){
SootFieldRef field=i.getFieldRef();
mv.visitFieldInsn(Opcodes.PUTSTATIC,slashify(field.declaringClass().getName()),field.name(),toTypeDesc(field.type()));
}
@Override public void caseFieldGetInst(FieldGetInst i){
SootFieldRef field=i.getFieldRef();
mv.visitFieldInsn(Opcodes.GETFIELD,slashify(field.declaringClass().getName()),field.name(),toTypeDesc(field.type()));
}
@Override public void caseFieldPutInst(FieldPutInst i){
SootFieldRef field=i.getFieldRef();
mv.visitFieldInsn(Opcodes.PUTFIELD,slashify(field.declaringClass().getName()),field.name(),toTypeDesc(field.type()));
}
@Override public void caseInstanceCastInst(InstanceCastInst i){
Type castType=i.getCastType();
if (castType instanceof RefType) {
mv.visitTypeInsn(Opcodes.CHECKCAST,slashify(((RefType)castType).getClassName()));
}
 else if (castType instanceof ArrayType) {
mv.visitTypeInsn(Opcodes.CHECKCAST,toTypeDesc(castType));
}
}
@Override public void caseInstanceOfInst(InstanceOfInst i){
Type checkType=i.getCheckType();
if (checkType instanceof RefType) {
mv.visitTypeInsn(Opcodes.INSTANCEOF,slashify(((RefType)checkType).getClassName()));
}
 else if (checkType instanceof ArrayType) {
mv.visitTypeInsn(Opcodes.INSTANCEOF,toTypeDesc(checkType));
}
}
@Override public void casePrimitiveCastInst(PrimitiveCastInst i){
Type from=i.getFromType();
final Type to=i.getToType();
from.apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
emitIntToTypeCast();
}
@Override public void caseByteType(ByteType t){
emitIntToTypeCast();
}
@Override public void caseCharType(CharType t){
emitIntToTypeCast();
}
@Override public void caseDoubleType(DoubleType t){
if (to.equals(IntType.v())) {
mv.visitInsn(Opcodes.D2I);
}
 else if (to.equals(LongType.v())) {
mv.visitInsn(Opcodes.D2L);
}
 else if (to.equals(FloatType.v())) {
mv.visitInsn(Opcodes.D2F);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void caseFloatType(FloatType t){
if (to.equals(IntType.v())) {
mv.visitInsn(Opcodes.F2I);
}
 else if (to.equals(LongType.v())) {
mv.visitInsn(Opcodes.F2L);
}
 else if (to.equals(DoubleType.v())) {
mv.visitInsn(Opcodes.F2D);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void caseIntType(IntType t){
emitIntToTypeCast();
}
@Override public void caseLongType(LongType t){
if (to.equals(IntType.v())) {
mv.visitInsn(Opcodes.L2I);
}
 else if (to.equals(FloatType.v())) {
mv.visitInsn(Opcodes.L2F);
}
 else if (to.equals(DoubleType.v())) {
mv.visitInsn(Opcodes.L2D);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void caseShortType(ShortType t){
emitIntToTypeCast();
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"" + t);
}
private void emitIntToTypeCast(){
if (to.equals(ByteType.v())) {
mv.visitInsn(Opcodes.I2B);
}
 else if (to.equals(CharType.v())) {
mv.visitInsn(Opcodes.I2C);
}
 else if (to.equals(ShortType.v())) {
mv.visitInsn(Opcodes.I2S);
}
 else if (to.equals(FloatType.v())) {
mv.visitInsn(Opcodes.I2F);
}
 else if (to.equals(LongType.v())) {
mv.visitInsn(Opcodes.I2L);
}
 else if (to.equals(DoubleType.v())) {
mv.visitInsn(Opcodes.I2D);
}
 else if (to.equals(IntType.v())) {
}
 else if (to.equals(BooleanType.v())) {
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
}
);
}
@Override public void caseDynamicInvokeInst(DynamicInvokeInst i){
SootMethodRef m=i.getMethodRef();
SootMethodRef bsm=i.getBootstrapMethodRef();
List<Value> args=i.getBootstrapArgs();
final Object[] argsArray=new Object[args.size()];
int index=0;
for (Value v : args) {
final int j=index;
v.apply(new ConstantSwitch(){
@Override public void defaultCase(Object object){
throw new RuntimeException(""String_Node_Str"");
}
@Override public void caseStringConstant(StringConstant v){
argsArray[j]=v.value;
}
@Override public void caseNullConstant(NullConstant v){
throw new RuntimeException(""String_Node_Str"");
}
@Override public void caseMethodHandle(MethodHandle handle){
SootMethodRef methodRef=handle.getMethodRef();
argsArray[j]=new Handle(handle.tag,slashify(methodRef.declaringClass().getName()),methodRef.name(),toTypeDesc(methodRef));
}
@Override public void caseLongConstant(LongConstant v){
argsArray[j]=v.value;
}
@Override public void caseIntConstant(IntConstant v){
argsArray[j]=v.value;
}
@Override public void caseFloatConstant(FloatConstant v){
argsArray[j]=v.value;
}
@Override public void caseDoubleConstant(DoubleConstant v){
argsArray[j]=v.value;
}
@Override public void caseClassConstant(ClassConstant v){
argsArray[j]=org.objectweb.asm.Type.getType(v.getValue());
}
}
);
++index;
}
mv.visitInvokeDynamicInsn(m.name(),toTypeDesc(m),new Handle(i.getHandleTag(),slashify(bsm.declaringClass().getName()),bsm.name(),toTypeDesc(bsm)),argsArray);
}
@Override public void caseStaticInvokeInst(StaticInvokeInst i){
SootMethodRef m=i.getMethodRef();
mv.visitMethodInsn(Opcodes.INVOKESTATIC,slashify(m.declaringClass().getName()),m.name(),toTypeDesc(m),m.declaringClass().isInterface());
}
@Override public void caseVirtualInvokeInst(VirtualInvokeInst i){
SootMethodRef m=i.getMethodRef();
mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,slashify(m.declaringClass().getName()),m.name(),toTypeDesc(m),m.declaringClass().isInterface());
}
@Override public void caseInterfaceInvokeInst(InterfaceInvokeInst i){
SootMethodRef m=i.getMethodRef();
SootClass declaration=m.declaringClass();
boolean isInterface=true;
if (!declaration.isPhantom() && !declaration.isInterface()) {
isInterface=false;
}
mv.visitMethodInsn(Opcodes.INVOKEINTERFACE,slashify(declaration.getName()),m.name(),toTypeDesc(m),isInterface);
}
@Override public void caseSpecialInvokeInst(SpecialInvokeInst i){
SootMethodRef m=i.getMethodRef();
mv.visitMethodInsn(Opcodes.INVOKESPECIAL,slashify(m.declaringClass().getName()),m.name(),toTypeDesc(m),m.declaringClass().isInterface());
}
@Override public void caseThrowInst(ThrowInst i){
mv.visitInsn(Opcodes.ATHROW);
}
@Override public void caseAddInst(AddInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.IADD);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.IADD);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.IADD);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DADD);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FADD);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.IADD);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LADD);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.IADD);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseAndInst(AndInst i){
if (i.getOpType().equals(LongType.v())) {
mv.visitInsn(Opcodes.LAND);
}
 else {
mv.visitInsn(Opcodes.IAND);
}
}
@Override public void caseOrInst(OrInst i){
if (i.getOpType().equals(LongType.v())) {
mv.visitInsn(Opcodes.LOR);
}
 else {
mv.visitInsn(Opcodes.IOR);
}
}
@Override public void caseXorInst(XorInst i){
if (i.getOpType().equals(LongType.v())) {
mv.visitInsn(Opcodes.LXOR);
}
 else {
mv.visitInsn(Opcodes.IXOR);
}
}
@Override public void caseArrayLengthInst(ArrayLengthInst i){
mv.visitInsn(Opcodes.ARRAYLENGTH);
}
@Override public void caseCmpInst(CmpInst i){
mv.visitInsn(Opcodes.LCMP);
}
@Override public void caseCmpgInst(CmpgInst i){
if (i.getOpType().equals(FloatType.v())) {
mv.visitInsn(Opcodes.FCMPG);
}
 else {
mv.visitInsn(Opcodes.DCMPG);
}
}
@Override public void caseCmplInst(CmplInst i){
if (i.getOpType().equals(FloatType.v())) {
mv.visitInsn(Opcodes.FCMPL);
}
 else {
mv.visitInsn(Opcodes.DCMPL);
}
}
@Override public void caseDivInst(DivInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.IDIV);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.IDIV);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.IDIV);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DDIV);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FDIV);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.IDIV);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LDIV);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.IDIV);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseIncInst(IncInst i){
if (i.getUseBoxes().get(0).getValue() != i.getDefBoxes().get(0).getValue()) {
throw new RuntimeException(""String_Node_Str"");
}
if (i.getConstant() instanceof IntConstant) {
mv.visitIincInsn(localToSlot.get(i.getLocal()),((IntConstant)i.getConstant()).value);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void caseMulInst(MulInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.IMUL);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.IMUL);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.IMUL);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DMUL);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FMUL);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.IMUL);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LMUL);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.IMUL);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseRemInst(RemInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.IREM);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.IREM);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.IREM);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DREM);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FREM);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.IREM);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LREM);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.IREM);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseSubInst(SubInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.ISUB);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.ISUB);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.ISUB);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DSUB);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FSUB);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.ISUB);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LSUB);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.ISUB);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseShlInst(ShlInst i){
if (i.getOpType().equals(LongType.v())) {
mv.visitInsn(Opcodes.LSHL);
}
 else {
mv.visitInsn(Opcodes.ISHL);
}
}
@Override public void caseShrInst(ShrInst i){
if (i.getOpType().equals(LongType.v())) {
mv.visitInsn(Opcodes.LSHR);
}
 else {
mv.visitInsn(Opcodes.ISHR);
}
}
@Override public void caseUshrInst(UshrInst i){
if (i.getOpType().equals(LongType.v())) {
mv.visitInsn(Opcodes.LUSHR);
}
 else {
mv.visitInsn(Opcodes.IUSHR);
}
}
@Override public void caseNewInst(NewInst i){
mv.visitTypeInsn(Opcodes.NEW,slashify(i.getBaseType().getClassName()));
}
@Override public void caseNegInst(NegInst i){
i.getOpType().apply(new TypeSwitch(){
@Override public void caseBooleanType(BooleanType t){
mv.visitInsn(Opcodes.INEG);
}
@Override public void caseByteType(ByteType t){
mv.visitInsn(Opcodes.INEG);
}
@Override public void caseCharType(CharType t){
mv.visitInsn(Opcodes.INEG);
}
@Override public void caseDoubleType(DoubleType t){
mv.visitInsn(Opcodes.DNEG);
}
@Override public void caseFloatType(FloatType t){
mv.visitInsn(Opcodes.FNEG);
}
@Override public void caseIntType(IntType t){
mv.visitInsn(Opcodes.INEG);
}
@Override public void caseLongType(LongType t){
mv.visitInsn(Opcodes.LNEG);
}
@Override public void caseShortType(ShortType t){
mv.visitInsn(Opcodes.INEG);
}
@Override public void defaultCase(Type t){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
@Override public void caseSwapInst(SwapInst i){
mv.visitInsn(Opcodes.SWAP);
}
@Override public void caseDup1Inst(Dup1Inst i){
if (sizeOfType(i.getOp1Type()) == 2) {
mv.visitInsn(Opcodes.DUP2);
}
 else {
mv.visitInsn(Opcodes.DUP);
}
}
@Override public void caseDup2Inst(Dup2Inst i){
Type firstOpType=i.getOp1Type();
Type secondOpType=i.getOp2Type();
if (sizeOfType(firstOpType) == 2) {
mv.visitInsn(Opcodes.DUP2);
if (sizeOfType(secondOpType) == 2) {
mv.visitInsn(Opcodes.DUP2);
}
 else {
mv.visitInsn(Opcodes.DUP);
}
}
 else if (sizeOfType(secondOpType) == 2) {
mv.visitInsn(Opcodes.DUP);
mv.visitInsn(Opcodes.DUP2);
}
 else {
mv.visitInsn(Opcodes.DUP2);
}
}
@Override public void caseDup1_x1Inst(Dup1_x1Inst i){
Type opType=i.getOp1Type();
Type underType=i.getUnder1Type();
if (sizeOfType(opType) == 2) {
if (sizeOfType(underType) == 2) {
mv.visitInsn(Opcodes.DUP2_X2);
}
 else {
mv.visitInsn(Opcodes.DUP2_X1);
}
}
 else {
if (sizeOfType(underType) == 2) {
mv.visitInsn(Opcodes.DUP_X2);
}
 else {
mv.visitInsn(Opcodes.DUP_X1);
}
}
}
@Override public void caseDup1_x2Inst(Dup1_x2Inst i){
int toSkip=sizeOfType(i.getUnder1Type()) + sizeOfType(i.getUnder2Type());
if (sizeOfType(i.getOp1Type()) == 2) {
if (toSkip == 2) {
mv.visitInsn(Opcodes.DUP2_X2);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
 else {
if (toSkip == 2) {
mv.visitInsn(Opcodes.DUP_X2);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
}
@Override public void caseDup2_x1Inst(Dup2_x1Inst i){
int toDup=sizeOfType(i.getOp1Type()) + sizeOfType(i.getOp2Type());
if (toDup == 2) {
if (sizeOfType(i.getUnder1Type()) == 2) {
mv.visitInsn(Opcodes.DUP2_X2);
}
 else {
mv.visitInsn(Opcodes.DUP2_X1);
}
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void caseDup2_x2Inst(Dup2_x2Inst i){
int toDup=sizeOfType(i.getOp1Type()) + sizeOfType(i.getOp2Type());
int toSkip=sizeOfType(i.getUnder1Type()) + sizeOfType(i.getUnder2Type());
if (toDup > 2 || toSkip > 2) {
throw new RuntimeException(""String_Node_Str"");
}
if (toDup == 2 && toSkip == 2) {
mv.visitInsn(Opcodes.DUP2_X2);
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
}
@Override public void caseNewArrayInst(NewArrayInst i){
Type t=i.getBaseType();
if (t instanceof RefType) {
mv.visitTypeInsn(Opcodes.ANEWARRAY,slashify(((RefType)t).getClassName()));
}
 else if (t instanceof ArrayType) {
mv.visitTypeInsn(Opcodes.ANEWARRAY,toTypeDesc(t));
}
 else {
int type;
if (t.equals(BooleanType.v())) {
type=Opcodes.T_BOOLEAN;
}
 else if (t.equals(CharType.v())) {
type=Opcodes.T_CHAR;
}
 else if (t.equals(FloatType.v())) {
type=Opcodes.T_FLOAT;
}
 else if (t.equals(DoubleType.v())) {
type=Opcodes.T_DOUBLE;
}
 else if (t.equals(ByteType.v())) {
type=Opcodes.T_BYTE;
}
 else if (t.equals(ShortType.v())) {
type=Opcodes.T_SHORT;
}
 else if (t.equals(IntType.v())) {
type=Opcodes.T_INT;
}
 else if (t.equals(LongType.v())) {
type=Opcodes.T_LONG;
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
mv.visitIntInsn(Opcodes.NEWARRAY,type);
}
}
@Override public void caseNewMultiArrayInst(NewMultiArrayInst i){
mv.visitMultiANewArrayInsn(toTypeDesc(i.getBaseType()),i.getDimensionCount());
}
@Override public void caseLookupSwitchInst(LookupSwitchInst i){
List<IntConstant> values=i.getLookupValues();
List<Unit> targets=i.getTargets();
int[] keys=new int[values.size()];
Label[] labels=new Label[values.size()];
for (int j=0; j < values.size(); j++) {
keys[j]=values.get(j).value;
labels[j]=branchTargetLabels.get(targets.get(j));
}
mv.visitLookupSwitchInsn(branchTargetLabels.get(i.getDefaultTarget()),keys,labels);
}
@Override public void caseTableSwitchInst(TableSwitchInst i){
List<Unit> targets=i.getTargets();
Label[] labels=new Label[targets.size()];
for (int j=0; j < targets.size(); j++) {
labels[j]=branchTargetLabels.get(targets.get(j));
}
mv.visitTableSwitchInsn(i.getLowIndex(),i.getHighIndex(),branchTargetLabels.get(i.getDefaultTarget()),labels);
}
@Override public void caseEnterMonitorInst(EnterMonitorInst i){
mv.visitInsn(Opcodes.MONITORENTER);
}
@Override public void caseExitMonitorInst(ExitMonitorInst i){
mv.visitInsn(Opcodes.MONITOREXIT);
}
}
);
}"
85273,"@Override public void caseXorExpr(XorExpr xe){
  Value firstOperand=xe.getOp1();
  Value secondOperand=xe.getOp2();
  constantV.setOrigStmt(origStmt);
  if (secondOperand.equals(IntConstant.v(-1))) {
    Register sourceReg=regAlloc.asImmediate(firstOperand,constantV);
    stmtV.addInsn(new Insn12x(Opcode.NOT_INT,destinationReg,sourceReg),origStmt);
  }
 else   if (secondOperand.equals(LongConstant.v(-1))) {
    Register sourceReg=regAlloc.asImmediate(firstOperand,constantV);
    stmtV.addInsn(new Insn12x(Opcode.NOT_LONG,destinationReg,sourceReg),origStmt);
  }
 else {
    buildCalculatingBinaryInsn(""String_Node_Str"",firstOperand,secondOperand,xe);
  }
}","@Override public void caseXorExpr(XorExpr xe){
  Value firstOperand=xe.getOp1();
  Value secondOperand=xe.getOp2();
  constantV.setOrigStmt(origStmt);
  if (secondOperand.equals(IntConstant.v(-1)) || secondOperand.equals(LongConstant.v(-1))) {
    PrimitiveType destRegType=PrimitiveType.getByName(destinationReg.getType().toString());
    Register orgDestReg=destinationReg;
    if (isBiggerThan(PrimitiveType.getByName(secondOperand.getType().toString()),destRegType)) {
      destinationReg=regAlloc.asTmpReg(IntType.v());
    }
    if (secondOperand.equals(IntConstant.v(-1))) {
      Register sourceReg=regAlloc.asImmediate(firstOperand,constantV);
      stmtV.addInsn(new Insn12x(Opcode.NOT_INT,destinationReg,sourceReg),origStmt);
    }
 else     if (secondOperand.equals(LongConstant.v(-1))) {
      Register sourceReg=regAlloc.asImmediate(firstOperand,constantV);
      stmtV.addInsn(new Insn12x(Opcode.NOT_LONG,destinationReg,sourceReg),origStmt);
    }
    if (orgDestReg != destinationReg) {
      Register tempReg=destinationReg.clone();
      destinationReg=orgDestReg.clone();
      castPrimitive(tempReg,secondOperand,destinationReg.getType());
    }
  }
 else {
    buildCalculatingBinaryInsn(""String_Node_Str"",firstOperand,secondOperand,xe);
  }
}"
85274,"public NumberedString findOrAdd(String s){
  NumberedString numStr=new NumberedString(s);
  NumberedString ret=stringToNumbered.putIfAbsent(s,numStr);
  if (ret == null) {
    add(numStr);
    return numStr;
  }
  return ret;
}","public synchronized NumberedString findOrAdd(String s){
  NumberedString numStr=new NumberedString(s);
  NumberedString ret=stringToNumbered.putIfAbsent(s,numStr);
  if (ret == null) {
    add(numStr);
    return numStr;
  }
  return ret;
}"
85275,"@Override protected void internalTransform(Body b,String phaseName,Map<String,String> options){
  if (!b.getTraps().isEmpty())   return;
  Unit u1=null, u2=null;
  for (Iterator<Unit> uIt=b.getUnits().snapshotIterator(); uIt.hasNext(); ) {
    Unit u=uIt.next();
    if (!(u instanceof AssignStmt) || !((Stmt)u).getBoxesPointingToThis().isEmpty()) {
      u1=null;
      u2=null;
      continue;
    }
    AssignStmt assignStmt=(AssignStmt)u;
    if (assignStmt.getLeftOp() instanceof ArrayRef) {
      if (u1 != null && u2 != null) {
        ArrayRef arrayRef=(ArrayRef)assignStmt.getLeftOp();
        Value u1val=u1.getDefBoxes().get(0).getValue();
        Value u2val=u2.getDefBoxes().get(0).getValue();
        if (arrayRef.getIndex() == u1val)         arrayRef.setIndex(((AssignStmt)u1).getRightOp());
 else         if (arrayRef.getIndex() == u2val)         arrayRef.setIndex(((AssignStmt)u2).getRightOp());
        if (assignStmt.getRightOp() == u1val)         assignStmt.setRightOp(((AssignStmt)u1).getRightOp());
 else         if (assignStmt.getRightOp() == u2val)         assignStmt.setRightOp(((AssignStmt)u2).getRightOp());
        Unit checkU=u;
        boolean foundU1=false, foundU2=false, doneU1=false, doneU2=false;
        while (!(doneU1 && doneU2) && !(foundU1 && foundU2) && checkU != null) {
          for (          ValueBox vb : checkU.getUseBoxes()) {
            if (!doneU1 && vb.getValue() == u1val)             foundU1=true;
            if (!doneU2 && vb.getValue() == u2val)             foundU2=true;
          }
          for (          ValueBox vb : checkU.getDefBoxes()) {
            if (vb.getValue() == u1val)             doneU1=true;
 else             if (vb.getValue() == u2val)             doneU2=true;
          }
          if (checkU.branches()) {
            foundU1=true;
            foundU2=true;
            break;
          }
          checkU=b.getUnits().getSuccOf(checkU);
        }
        if (!foundU1) {
          if (u1val instanceof Local) {
            b.getUnits().remove(u1);
            if (Options.v().verbose()) {
              G.v().out.println(""String_Node_Str"" + b.getMethod().getName() + ""String_Node_Str""+ u1);
            }
          }
        }
        if (!foundU2) {
          if (u2val instanceof Local) {
            b.getUnits().remove(u2);
            if (Options.v().verbose()) {
              G.v().out.println(""String_Node_Str"" + b.getMethod().getName() + ""String_Node_Str""+ u2);
            }
          }
        }
        u1=null;
        u2=null;
      }
 else {
        u1=null;
        u2=null;
        continue;
      }
    }
    if (!(assignStmt.getRightOp() instanceof Constant)) {
      u1=null;
      u2=null;
      continue;
    }
    if (u1 == null) {
      u1=assignStmt;
    }
 else     if (u2 == null) {
      u2=assignStmt;
    }
 else {
      u1=u2;
      u2=assignStmt;
    }
  }
  UnusedLocalEliminator.v().transform(b);
}","@Override protected void internalTransform(Body b,String phaseName,Map<String,String> options){
  if (!b.getTraps().isEmpty())   return;
  Unit u1=null, u2=null;
  for (Iterator<Unit> uIt=b.getUnits().snapshotIterator(); uIt.hasNext(); ) {
    Unit u=uIt.next();
    if (!(u instanceof AssignStmt) || !((Stmt)u).getBoxesPointingToThis().isEmpty()) {
      u1=null;
      u2=null;
      continue;
    }
    AssignStmt assignStmt=(AssignStmt)u;
    if (assignStmt.getLeftOp() instanceof ArrayRef) {
      if (u1 != null && u2 != null && u2.getBoxesPointingToThis().isEmpty() && assignStmt.getBoxesPointingToThis().isEmpty()) {
        ArrayRef arrayRef=(ArrayRef)assignStmt.getLeftOp();
        Value u1val=u1.getDefBoxes().get(0).getValue();
        Value u2val=u2.getDefBoxes().get(0).getValue();
        if (arrayRef.getIndex() == u1val)         arrayRef.setIndex(((AssignStmt)u1).getRightOp());
 else         if (arrayRef.getIndex() == u2val)         arrayRef.setIndex(((AssignStmt)u2).getRightOp());
        if (assignStmt.getRightOp() == u1val)         assignStmt.setRightOp(((AssignStmt)u1).getRightOp());
 else         if (assignStmt.getRightOp() == u2val)         assignStmt.setRightOp(((AssignStmt)u2).getRightOp());
        Unit checkU=u;
        boolean foundU1=false, foundU2=false, doneU1=false, doneU2=false;
        while (!(doneU1 && doneU2) && !(foundU1 && foundU2) && checkU != null) {
          for (          ValueBox vb : checkU.getUseBoxes()) {
            if (!doneU1 && vb.getValue() == u1val)             foundU1=true;
            if (!doneU2 && vb.getValue() == u2val)             foundU2=true;
          }
          for (          ValueBox vb : checkU.getDefBoxes()) {
            if (vb.getValue() == u1val)             doneU1=true;
 else             if (vb.getValue() == u2val)             doneU2=true;
          }
          if (checkU.branches()) {
            foundU1=true;
            foundU2=true;
            break;
          }
          checkU=b.getUnits().getSuccOf(checkU);
        }
        if (!foundU1) {
          if (u1val instanceof Local) {
            b.getUnits().remove(u1);
            if (Options.v().verbose()) {
              G.v().out.println(""String_Node_Str"" + b.getMethod().getName() + ""String_Node_Str""+ u1);
            }
          }
        }
        if (!foundU2) {
          if (u2val instanceof Local) {
            b.getUnits().remove(u2);
            if (Options.v().verbose()) {
              G.v().out.println(""String_Node_Str"" + b.getMethod().getName() + ""String_Node_Str""+ u2);
            }
          }
        }
        u1=null;
        u2=null;
      }
 else {
        u1=null;
        u2=null;
        continue;
      }
    }
    if (!(assignStmt.getRightOp() instanceof Constant)) {
      u1=null;
      u2=null;
      continue;
    }
    if (u1 == null) {
      u1=assignStmt;
    }
 else     if (u2 == null) {
      u2=assignStmt;
      if (u1 != null) {
        Value op1=((AssignStmt)u1).getLeftOp();
        if (op1 == ((AssignStmt)u2).getLeftOp()) {
          u1=u2;
          u2=null;
        }
      }
    }
 else {
      u1=u2;
      u2=assignStmt;
    }
  }
  UnusedLocalEliminator.v().transform(b);
}"
85276,"private void castPrimitive(Register sourceReg,Value source,Type castSootType){
  PrimitiveType castType=PrimitiveType.getByName(castSootType.toString());
  if (castType == PrimitiveType.INT && source.getType() instanceof NullType)   source=IntConstant.v(0);
  PrimitiveType sourceType=PrimitiveType.getByName(source.getType().toString());
  if (castType == PrimitiveType.BOOLEAN) {
    castType=PrimitiveType.INT;
    sourceType=PrimitiveType.INT;
  }
  if (shouldCastFromInt(sourceType,castType)) {
    sourceType=PrimitiveType.INT;
    Opcode opc=getCastOpc(sourceType,castType);
    stmtV.addInsn(new Insn12x(opc,destinationReg,sourceReg),origStmt);
  }
 else   if (isMoveCompatible(sourceType,castType)) {
    if (destinationReg.getNumber() != sourceReg.getNumber()) {
      stmtV.addInsn(StmtVisitor.buildMoveInsn(destinationReg,sourceReg),origStmt);
    }
  }
 else   if (needsCastThroughInt(sourceType,castType)) {
    Opcode castToIntOpc=getCastOpc(sourceType,PrimitiveType.INT);
    Opcode castFromIntOpc=getCastOpc(PrimitiveType.INT,castType);
    Register tmp=regAlloc.asTmpReg(IntType.v());
    stmtV.addInsn(new Insn12x(castToIntOpc,tmp,sourceReg),origStmt);
    stmtV.addInsn(new Insn12x(castFromIntOpc,destinationReg,tmp.clone()),origStmt);
  }
 else {
    Opcode opc=getCastOpc(sourceType,castType);
    stmtV.addInsn(new Insn12x(opc,destinationReg,sourceReg),origStmt);
  }
}","private void castPrimitive(Register sourceReg,Value source,Type castSootType){
  PrimitiveType castType=PrimitiveType.getByName(castSootType.toString());
  if (castType == PrimitiveType.INT && source.getType() instanceof NullType)   source=IntConstant.v(0);
  Type srcType=source.getType();
  if (srcType instanceof RefType)   throw new RuntimeException(""String_Node_Str"" + srcType + ""String_Node_Str"");
  PrimitiveType sourceType=PrimitiveType.getByName(srcType.toString());
  if (castType == PrimitiveType.BOOLEAN) {
    castType=PrimitiveType.INT;
    sourceType=PrimitiveType.INT;
  }
  if (shouldCastFromInt(sourceType,castType)) {
    sourceType=PrimitiveType.INT;
    Opcode opc=getCastOpc(sourceType,castType);
    stmtV.addInsn(new Insn12x(opc,destinationReg,sourceReg),origStmt);
  }
 else   if (isMoveCompatible(sourceType,castType)) {
    if (destinationReg.getNumber() != sourceReg.getNumber()) {
      stmtV.addInsn(StmtVisitor.buildMoveInsn(destinationReg,sourceReg),origStmt);
    }
  }
 else   if (needsCastThroughInt(sourceType,castType)) {
    Opcode castToIntOpc=getCastOpc(sourceType,PrimitiveType.INT);
    Opcode castFromIntOpc=getCastOpc(PrimitiveType.INT,castType);
    Register tmp=regAlloc.asTmpReg(IntType.v());
    stmtV.addInsn(new Insn12x(castToIntOpc,tmp,sourceReg),origStmt);
    stmtV.addInsn(new Insn12x(castFromIntOpc,destinationReg,tmp.clone()),origStmt);
  }
 else {
    Opcode opc=getCastOpc(sourceType,castType);
    stmtV.addInsn(new Insn12x(opc,destinationReg,sourceReg),origStmt);
  }
}"
85277,"public void caseAssignStmt(AssignStmt stmt){
  Value lhs=stmt.getLeftOp();
  Value rhs=stmt.getRightOp();
  Type tlhs=null;
  if (lhs instanceof Local)   tlhs=this.tg.get((Local)lhs);
 else   if (lhs instanceof ArrayRef) {
    ArrayRef aref=(ArrayRef)lhs;
    Local base=(Local)aref.getBase();
    ArrayType at;
    if (this.tg.get(base) instanceof ArrayType)     at=(ArrayType)this.tg.get(base);
 else     at=this.tg.get(base).makeArrayType();
    tlhs=((ArrayType)at).getElementType();
    this.handleArrayRef(aref,stmt);
    aref.setBase((Local)this.uv.visit(aref.getBase(),at,stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
    stmt.setLeftOp(this.uv.visit(lhs,tlhs,stmt));
  }
 else   if (lhs instanceof FieldRef) {
    tlhs=((FieldRef)lhs).getFieldRef().type();
    if (lhs instanceof InstanceFieldRef)     this.handleInstanceFieldRef((InstanceFieldRef)lhs,stmt);
  }
  lhs=stmt.getLeftOp();
  rhs=stmt.getRightOp();
  if (rhs instanceof Local)   stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
 else   if (rhs instanceof ArrayRef) {
    ArrayRef aref=(ArrayRef)rhs;
    Local base=(Local)aref.getBase();
    ArrayType at;
    Type et=null;
    if (this.tg.get(base) instanceof ArrayType)     at=(ArrayType)this.tg.get(base);
 else {
      Type bt=this.tg.get(base);
      at=bt.makeArrayType();
      if (bt instanceof RefType) {
        RefType rt=(RefType)bt;
        if (rt.getSootClass().getName().equals(""String_Node_Str"") || rt.getSootClass().getName().equals(""String_Node_Str"") || rt.getSootClass().getName().equals(""String_Node_Str"")) {
          if (defs == null) {
            defs=LocalDefs.Factory.newLocalDefs(jb);
            uses=LocalUses.Factory.newLocalUses(jb,defs);
          }
          outer:           for (          UnitValueBoxPair usePair : uses.getUsesOf(stmt)) {
            Stmt useStmt=(Stmt)usePair.getUnit();
            if (useStmt.containsInvokeExpr())             for (int i=0; i < useStmt.getInvokeExpr().getArgCount(); i++)             if (useStmt.getInvokeExpr().getArg(i) == usePair.getValueBox().getValue()) {
              et=useStmt.getInvokeExpr().getMethod().getParameterType(i);
              at=et.makeArrayType();
              break outer;
            }
          }
        }
      }
    }
    Type trhs=((ArrayType)at).getElementType();
    this.handleArrayRef(aref,stmt);
    aref.setBase((Local)this.uv.visit(aref.getBase(),at,stmt));
    stmt.setRightOp(this.uv.visit(rhs,trhs,stmt));
  }
 else   if (rhs instanceof InstanceFieldRef) {
    this.handleInstanceFieldRef((InstanceFieldRef)rhs,stmt);
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof BinopExpr)   this.handleBinopExpr((BinopExpr)rhs,stmt,tlhs);
 else   if (rhs instanceof InvokeExpr) {
    this.handleInvokeExpr((InvokeExpr)rhs,stmt);
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof CastExpr)   stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
 else   if (rhs instanceof InstanceOfExpr) {
    InstanceOfExpr ioe=(InstanceOfExpr)rhs;
    ioe.setOp(this.uv.visit(ioe.getOp(),RefType.v(""String_Node_Str""),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NewArrayExpr) {
    NewArrayExpr nae=(NewArrayExpr)rhs;
    nae.setSize(this.uv.visit(nae.getSize(),IntType.v(),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NewMultiArrayExpr) {
    NewMultiArrayExpr nmae=(NewMultiArrayExpr)rhs;
    for (int i=0; i < nmae.getSizeCount(); i++)     nmae.setSize(i,this.uv.visit(nmae.getSize(i),IntType.v(),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof LengthExpr) {
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NegExpr) {
    ((NegExpr)rhs).setOp(this.uv.visit(((NegExpr)rhs).getOp(),tlhs,stmt));
  }
 else   if (rhs instanceof Constant)   if (!(rhs instanceof NullConstant))   stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
}","public void caseAssignStmt(AssignStmt stmt){
  Value lhs=stmt.getLeftOp();
  Value rhs=stmt.getRightOp();
  Type tlhs=null;
  if (lhs instanceof Local)   tlhs=this.tg.get((Local)lhs);
 else   if (lhs instanceof ArrayRef) {
    ArrayRef aref=(ArrayRef)lhs;
    Local base=(Local)aref.getBase();
    ArrayType at=null;
    Type tgType=this.tg.get(base);
    if (tgType instanceof ArrayType)     at=(ArrayType)tgType;
 else {
      if (tgType == Scene.v().getObjectType() && rhs instanceof Local) {
        Type rhsType=this.tg.get((Local)rhs);
        if (rhsType instanceof PrimType) {
          if (defs == null) {
            defs=LocalDefs.Factory.newLocalDefs(jb);
            uses=LocalUses.Factory.newLocalUses(jb,defs);
          }
          for (          Unit defU : defs.getDefsOfAt(base,stmt)) {
            if (defU instanceof AssignStmt) {
              AssignStmt defUas=(AssignStmt)defU;
              if (defUas.getRightOp() instanceof NewArrayExpr) {
                at=(ArrayType)defUas.getRightOp().getType();
                break;
              }
            }
          }
        }
      }
      if (at == null)       at=tgType.makeArrayType();
    }
    tlhs=((ArrayType)at).getElementType();
    this.handleArrayRef(aref,stmt);
    aref.setBase((Local)this.uv.visit(aref.getBase(),at,stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
    stmt.setLeftOp(this.uv.visit(lhs,tlhs,stmt));
  }
 else   if (lhs instanceof FieldRef) {
    tlhs=((FieldRef)lhs).getFieldRef().type();
    if (lhs instanceof InstanceFieldRef)     this.handleInstanceFieldRef((InstanceFieldRef)lhs,stmt);
  }
  lhs=stmt.getLeftOp();
  rhs=stmt.getRightOp();
  if (rhs instanceof Local)   stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
 else   if (rhs instanceof ArrayRef) {
    ArrayRef aref=(ArrayRef)rhs;
    Local base=(Local)aref.getBase();
    ArrayType at;
    Type et=null;
    if (this.tg.get(base) instanceof ArrayType)     at=(ArrayType)this.tg.get(base);
 else {
      Type bt=this.tg.get(base);
      at=bt.makeArrayType();
      if (bt instanceof RefType) {
        RefType rt=(RefType)bt;
        if (rt.getSootClass().getName().equals(""String_Node_Str"") || rt.getSootClass().getName().equals(""String_Node_Str"") || rt.getSootClass().getName().equals(""String_Node_Str"")) {
          if (defs == null) {
            defs=LocalDefs.Factory.newLocalDefs(jb);
            uses=LocalUses.Factory.newLocalUses(jb,defs);
          }
          outer:           for (          UnitValueBoxPair usePair : uses.getUsesOf(stmt)) {
            Stmt useStmt=(Stmt)usePair.getUnit();
            if (useStmt.containsInvokeExpr())             for (int i=0; i < useStmt.getInvokeExpr().getArgCount(); i++)             if (useStmt.getInvokeExpr().getArg(i) == usePair.getValueBox().getValue()) {
              et=useStmt.getInvokeExpr().getMethod().getParameterType(i);
              at=et.makeArrayType();
              break outer;
            }
          }
        }
      }
    }
    Type trhs=((ArrayType)at).getElementType();
    this.handleArrayRef(aref,stmt);
    aref.setBase((Local)this.uv.visit(aref.getBase(),at,stmt));
    stmt.setRightOp(this.uv.visit(rhs,trhs,stmt));
  }
 else   if (rhs instanceof InstanceFieldRef) {
    this.handleInstanceFieldRef((InstanceFieldRef)rhs,stmt);
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof BinopExpr)   this.handleBinopExpr((BinopExpr)rhs,stmt,tlhs);
 else   if (rhs instanceof InvokeExpr) {
    this.handleInvokeExpr((InvokeExpr)rhs,stmt);
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof CastExpr)   stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
 else   if (rhs instanceof InstanceOfExpr) {
    InstanceOfExpr ioe=(InstanceOfExpr)rhs;
    ioe.setOp(this.uv.visit(ioe.getOp(),RefType.v(""String_Node_Str""),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NewArrayExpr) {
    NewArrayExpr nae=(NewArrayExpr)rhs;
    nae.setSize(this.uv.visit(nae.getSize(),IntType.v(),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NewMultiArrayExpr) {
    NewMultiArrayExpr nmae=(NewMultiArrayExpr)rhs;
    for (int i=0; i < nmae.getSizeCount(); i++)     nmae.setSize(i,this.uv.visit(nmae.getSize(i),IntType.v(),stmt));
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof LengthExpr) {
    stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
  }
 else   if (rhs instanceof NegExpr) {
    ((NegExpr)rhs).setOp(this.uv.visit(((NegExpr)rhs).getOp(),tlhs,stmt));
  }
 else   if (rhs instanceof Constant)   if (!(rhs instanceof NullConstant))   stmt.setRightOp(this.uv.visit(rhs,tlhs,stmt));
}"
85278,"/** 
 * Load the set of classes that soot needs, including those specified on the command-line. This is the standard way of initialising the list of classes soot should use.
 */
public void loadNecessaryClasses(){
  loadBasicClasses();
  for (  String name : Options.v().classes()) {
    loadNecessaryClass(name);
  }
  loadDynamicClasses();
  if (Options.v().oaat()) {
    if (Options.v().process_dir().isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    for (    final String path : Options.v().process_dir()) {
      for (      String cl : SourceLocator.v().getClassesUnder(path)) {
        SootClass theClass=loadClassAndSupport(cl);
        theClass.setApplicationClass();
      }
    }
  }
  prepareClasses();
  setDoneResolving();
}","/** 
 * Load the set of classes that soot needs, including those specified on the command-line. This is the standard way of initialising the list of classes soot should use.
 */
public void loadNecessaryClasses(){
  loadBasicClasses();
  for (  String name : Options.v().classes()) {
    loadNecessaryClass(name);
  }
  loadDynamicClasses();
  if (Options.v().oaat()) {
    if (Options.v().process_dir().isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    for (    final String path : Options.v().process_dir()) {
      for (      String cl : SourceLocator.v().getClassesUnder(path)) {
        SootClass theClass=loadClassAndSupport(cl);
        if (!theClass.isPhantom)         theClass.setApplicationClass();
      }
    }
  }
  prepareClasses();
  setDoneResolving();
}"
85279,"private static Collection<AncestryTreeNode> buildAncestryTree(RefType root){
  LinkedList<AncestryTreeNode> leafs=new LinkedList<AncestryTreeNode>();
  leafs.add(new AncestryTreeNode(null,root));
  LinkedList<AncestryTreeNode> r=new LinkedList<AncestryTreeNode>();
  while (!leafs.isEmpty()) {
    AncestryTreeNode node=leafs.remove();
    if (TypeResolver.typesEqual(node.type,RefType.v(""String_Node_Str"")))     r.add(node);
 else {
      SootClass sc=node.type.getSootClass();
      for (Iterator<SootClass> i=sc.getInterfaces().iterator(); i.hasNext(); )       leafs.add(new AncestryTreeNode(node,(i.next()).getType()));
      if ((!sc.isInterface() || sc.getInterfaceCount() == 0) && !sc.isPhantom())       leafs.add(new AncestryTreeNode(node,sc.getSuperclass().getType()));
    }
  }
  return r;
}","private static Collection<AncestryTreeNode> buildAncestryTree(RefType root){
  if (root.getSootClass().isPhantom())   return Collections.emptyList();
  LinkedList<AncestryTreeNode> leafs=new LinkedList<AncestryTreeNode>();
  leafs.add(new AncestryTreeNode(null,root));
  LinkedList<AncestryTreeNode> r=new LinkedList<AncestryTreeNode>();
  final RefType objectType=RefType.v(""String_Node_Str"");
  while (!leafs.isEmpty()) {
    AncestryTreeNode node=leafs.remove();
    if (TypeResolver.typesEqual(node.type,objectType))     r.add(node);
 else {
      SootClass sc=node.type.getSootClass();
      for (      SootClass i : sc.getInterfaces())       leafs.add(new AncestryTreeNode(node,(i).getType()));
      if ((!sc.isInterface() || sc.getInterfaceCount() == 0) && !sc.isPhantom())       leafs.add(new AncestryTreeNode(node,sc.getSuperclass().getType()));
    }
  }
  return r;
}"
85280,"public Dependencies makeSootClass(SootClass sc,ClassDef defItem,DexFile dexFile){
  String superClass=defItem.getSuperclass();
  Dependencies deps=new Dependencies();
  String sourceFile=defItem.getSourceFile();
  if (sourceFile != null) {
    sc.addTag(new SourceFileTag(sourceFile));
  }
  if (superClass != null) {
    String superClassName=Util.dottedClassName(superClass);
    SootClass sootSuperClass=SootResolver.v().makeClassRef(superClassName);
    sc.setSuperclass(sootSuperClass);
    deps.typesToHierarchy.add(sootSuperClass.getType());
  }
  int accessFlags=defItem.getAccessFlags();
  sc.setModifiers(accessFlags);
  if (defItem.getInterfaces() != null) {
    for (    String interfaceName : defItem.getInterfaces()) {
      String interfaceClassName=Util.dottedClassName(interfaceName);
      if (sc.implementsInterface(interfaceClassName))       continue;
      SootClass interfaceClass=SootResolver.v().makeClassRef(interfaceClassName);
      interfaceClass.setModifiers(interfaceClass.getModifiers() | Modifier.INTERFACE);
      sc.addInterface(interfaceClass);
      deps.typesToHierarchy.add(interfaceClass.getType());
    }
  }
  if (Options.v().oaat() && sc.resolvingLevel() <= SootClass.HIERARCHY) {
    return deps;
  }
  DexAnnotation da=new DexAnnotation(sc,deps);
  for (  Field sf : defItem.getStaticFields()) {
    if (sc.declaresField(sf.getName(),DexType.toSoot(sf.getType())))     continue;
    SootField sootField=DexField.makeSootField(sf);
    sc.addField(sootField);
    da.handleFieldAnnotation(sootField,sf);
  }
  for (  Field f : defItem.getInstanceFields()) {
    if (sc.declaresField(f.getName(),DexType.toSoot(f.getType())))     continue;
    SootField sootField=DexField.makeSootField(f);
    sc.addField(sootField);
    da.handleFieldAnnotation(sootField,f);
  }
  for (  Method method : defItem.getDirectMethods()) {
    loadMethod(dexFile,method,sc,da);
  }
  for (  Method method : defItem.getVirtualMethods()) {
    loadMethod(dexFile,method,sc,da);
  }
  da.handleClassAnnotation(defItem);
  InnerClassAttribute ica=(InnerClassAttribute)sc.getTag(""String_Node_Str"");
  if (ica != null) {
    Iterator<InnerClassTag> innerTagIt=ica.getSpecs().iterator();
    while (innerTagIt.hasNext()) {
      Tag t=innerTagIt.next();
      if (t instanceof InnerClassTag) {
        InnerClassTag ict=(InnerClassTag)t;
        String inner=ict.getInnerClass().replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (!inner.equals(sc.getName()))         continue;
        String outer=null;
        if (ict.getOuterClass() == null) {
          outer=ict.getInnerClass().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          outer=ict.getOuterClass().replaceAll(""String_Node_Str"",""String_Node_Str"");
        }
        SootClass osc=SootResolver.v().makeClassRef(outer);
        if (osc == sc) {
          if (!sc.hasOuterClass())           continue;
          osc=sc.getOuterClass();
        }
 else         deps.typesToHierarchy.add(osc.getType());
        InnerClassAttribute icat=(InnerClassAttribute)osc.getTag(""String_Node_Str"");
        if (icat == null) {
          icat=new InnerClassAttribute();
          osc.addTag(icat);
        }
        InnerClassTag newt=new InnerClassTag(ict.getInnerClass(),ict.getOuterClass(),ict.getShortName(),ict.getAccessFlags());
        icat.add(newt);
        innerTagIt.remove();
        if (!sc.hasTag(""String_Node_Str"")) {
          if (((InnerClassTag)t).getInnerClass().replaceAll(""String_Node_Str"",""String_Node_Str"").equals(sc.toString())) {
            sc.addTag(t);
          }
        }
      }
    }
    if (ica.getSpecs().isEmpty())     sc.getTags().remove(ica);
  }
  return deps;
}","public Dependencies makeSootClass(SootClass sc,ClassDef defItem,DexFile dexFile){
  String superClass=defItem.getSuperclass();
  Dependencies deps=new Dependencies();
  String sourceFile=defItem.getSourceFile();
  if (sourceFile != null) {
    sc.addTag(new SourceFileTag(sourceFile));
  }
  if (superClass != null) {
    String superClassName=Util.dottedClassName(superClass);
    SootClass sootSuperClass=SootResolver.v().makeClassRef(superClassName);
    sc.setSuperclass(sootSuperClass);
    deps.typesToHierarchy.add(sootSuperClass.getType());
  }
  int accessFlags=defItem.getAccessFlags();
  sc.setModifiers(accessFlags);
  if (defItem.getInterfaces() != null) {
    for (    String interfaceName : defItem.getInterfaces()) {
      String interfaceClassName=Util.dottedClassName(interfaceName);
      if (sc.implementsInterface(interfaceClassName))       continue;
      SootClass interfaceClass=SootResolver.v().makeClassRef(interfaceClassName);
      interfaceClass.setModifiers(interfaceClass.getModifiers() | Modifier.INTERFACE);
      sc.addInterface(interfaceClass);
      deps.typesToHierarchy.add(interfaceClass.getType());
    }
  }
  if (Options.v().oaat() && sc.resolvingLevel() <= SootClass.HIERARCHY) {
    return deps;
  }
  DexAnnotation da=new DexAnnotation(sc,deps);
  for (  Field sf : defItem.getStaticFields()) {
    if (sc.declaresField(sf.getName(),DexType.toSoot(sf.getType())))     continue;
    SootField sootField=DexField.makeSootField(sf);
    sc.addField(sootField);
    da.handleFieldAnnotation(sootField,sf);
  }
  for (  Field f : defItem.getInstanceFields()) {
    if (sc.declaresField(f.getName(),DexType.toSoot(f.getType())))     continue;
    SootField sootField=DexField.makeSootField(f);
    sc.addField(sootField);
    da.handleFieldAnnotation(sootField,f);
  }
  for (  Method method : defItem.getDirectMethods()) {
    loadMethod(dexFile,method,sc,da);
  }
  for (  Method method : defItem.getVirtualMethods()) {
    loadMethod(dexFile,method,sc,da);
  }
  da.handleClassAnnotation(defItem);
  InnerClassAttribute ica=(InnerClassAttribute)sc.getTag(""String_Node_Str"");
  if (ica != null) {
    Iterator<InnerClassTag> innerTagIt=ica.getSpecs().iterator();
    while (innerTagIt.hasNext()) {
      Tag t=innerTagIt.next();
      if (t instanceof InnerClassTag) {
        InnerClassTag ict=(InnerClassTag)t;
        String inner=ict.getInnerClass().replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (!inner.equals(sc.getName()))         continue;
        String outer=null;
        if (ict.getOuterClass() == null) {
          if (inner.contains(""String_Node_Str"")) {
            outer=inner.substring(0,inner.indexOf(""String_Node_Str""));
          }
 else           if (inner.contains(""String_Node_Str"")) {
            outer=inner.substring(0,inner.lastIndexOf('$'));
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + inner + ""String_Node_Str"");
          }
        }
 else {
          outer=ict.getOuterClass().replaceAll(""String_Node_Str"",""String_Node_Str"");
        }
        SootClass osc=SootResolver.v().makeClassRef(outer);
        if (osc == sc) {
          if (!sc.hasOuterClass())           continue;
          osc=sc.getOuterClass();
        }
 else         deps.typesToHierarchy.add(osc.getType());
        InnerClassAttribute icat=(InnerClassAttribute)osc.getTag(""String_Node_Str"");
        if (icat == null) {
          icat=new InnerClassAttribute();
          osc.addTag(icat);
        }
        InnerClassTag newt=new InnerClassTag(ict.getInnerClass(),ict.getOuterClass(),ict.getShortName(),ict.getAccessFlags());
        icat.add(newt);
        innerTagIt.remove();
        if (!sc.hasTag(""String_Node_Str"")) {
          if (((InnerClassTag)t).getInnerClass().replaceAll(""String_Node_Str"",""String_Node_Str"").equals(sc.toString())) {
            sc.addTag(t);
          }
        }
      }
    }
    if (ica.getSpecs().isEmpty())     sc.getTags().remove(ica);
  }
  return deps;
}"
85281,"private String getOuterClassNameFromTag(InnerClassTag icTag){
  String outerClass;
  if (icTag.getOuterClass() == null) {
    outerClass=icTag.getInnerClass().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    outerClass=icTag.getOuterClass().replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return outerClass;
}","private String getOuterClassNameFromTag(InnerClassTag icTag){
  String outerClass;
  if (icTag.getOuterClass() == null) {
    String inner=icTag.getInnerClass().replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (inner.contains(""String_Node_Str"")) {
      outerClass=inner.substring(0,inner.indexOf(""String_Node_Str""));
    }
 else     if (inner.contains(""String_Node_Str"")) {
      outerClass=inner.substring(0,inner.lastIndexOf('$'));
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + inner + ""String_Node_Str"");
    }
  }
 else {
    outerClass=icTag.getOuterClass().replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return outerClass;
}"
85282,"public Dependencies resolve(SootClass sc){
  if (Options.v().verbose())   G.v().out.println(""String_Node_Str"" + className);
  InputStream classFile=null;
  try {
    classFile=foundFile.inputStream();
    soot.jimple.parser.JimpleAST jimpAST=new soot.jimple.parser.JimpleAST(classFile);
    jimpAST.getSkeleton(sc);
    JimpleMethodSource mtdSrc=new JimpleMethodSource(jimpAST);
    Iterator<SootMethod> mtdIt=sc.methodIterator();
    while (mtdIt.hasNext()) {
      SootMethod sm=mtdIt.next();
      sm.setSource(mtdSrc);
    }
    Dependencies deps=new Dependencies();
    for (    String t : jimpAST.getCstPool()) {
      deps.typesToSignature.add(RefType.v(t));
    }
    return deps;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str"",e);
  }
catch (  ParserException e) {
    throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str"",e);
  }
catch (  LexerException e) {
    throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str"",e);
  }
 finally {
    try {
      if (classFile != null) {
        classFile.close();
        classFile=null;
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
 finally {
      close();
    }
  }
}","public Dependencies resolve(SootClass sc){
  if (Options.v().verbose())   G.v().out.println(""String_Node_Str"" + className);
  InputStream classFile=null;
  try {
    classFile=foundFile.inputStream();
    soot.jimple.parser.JimpleAST jimpAST=new soot.jimple.parser.JimpleAST(classFile);
    jimpAST.getSkeleton(sc);
    JimpleMethodSource mtdSrc=new JimpleMethodSource(jimpAST);
    Iterator<SootMethod> mtdIt=sc.methodIterator();
    while (mtdIt.hasNext()) {
      SootMethod sm=mtdIt.next();
      sm.setSource(mtdSrc);
    }
    String outerClassName=null;
    String className=sc.getName();
    if (!sc.hasOuterClass() && className.contains(""String_Node_Str"")) {
      if (className.contains(""String_Node_Str"")) {
        outerClassName=className.substring(0,className.indexOf(""String_Node_Str""));
      }
 else {
        outerClassName=className.substring(0,className.lastIndexOf('$'));
      }
      sc.setOuterClass(SootResolver.v().makeClassRef(outerClassName));
    }
    Dependencies deps=new Dependencies();
    for (    String t : jimpAST.getCstPool()) {
      deps.typesToSignature.add(RefType.v(t));
    }
    if (outerClassName != null)     deps.typesToSignature.add(RefType.v(outerClassName));
    return deps;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str"",e);
  }
catch (  ParserException e) {
    throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str"",e);
  }
catch (  LexerException e) {
    throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str"",e);
  }
 finally {
    try {
      if (classFile != null) {
        classFile.close();
        classFile=null;
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
 finally {
      close();
    }
  }
}"
85283,"protected Type findArrayType(LocalDefs localDefs,Stmt arrayStmt,int depth,Set<Unit> alreadyVisitedDefs){
  ArrayRef aRef=null;
  if (arrayStmt.containsArrayRef()) {
    aRef=arrayStmt.getArrayRef();
  }
  Local aBase=null;
  if (null == aRef) {
    if (arrayStmt instanceof AssignStmt) {
      AssignStmt stmt=(AssignStmt)arrayStmt;
      aBase=(Local)stmt.getRightOp();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + arrayStmt);
    }
  }
 else {
    aBase=(Local)aRef.getBase();
  }
  List<Unit> defsOfaBaseList=localDefs.getDefsOfAt(aBase,arrayStmt);
  if (defsOfaBaseList == null || defsOfaBaseList.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"" + arrayStmt);
  }
  Type aType=null;
  int nullDefCount=0;
  for (  Unit baseDef : defsOfaBaseList) {
    Debug.printDbg(""String_Node_Str"",baseDef);
    if (alreadyVisitedDefs.contains(baseDef))     continue;
    Set<Unit> newVisitedDefs=new HashSet<Unit>(alreadyVisitedDefs);
    newVisitedDefs.add(baseDef);
    if (baseDef instanceof AssignStmt) {
      AssignStmt stmt=(AssignStmt)baseDef;
      Value r=stmt.getRightOp();
      if (r instanceof FieldRef) {
        Type t=((FieldRef)r).getFieldRef().type();
        if (t instanceof ArrayType) {
          ArrayType at=(ArrayType)t;
          t=at.getArrayElementType();
        }
        Debug.printDbg(""String_Node_Str"",t);
        if (depth == 0) {
          aType=t;
          break;
        }
 else {
          return t;
        }
      }
 else       if (r instanceof ArrayRef) {
        ArrayRef ar=(ArrayRef)r;
        if (ar.getType().equals(""String_Node_Str"") || ar.getType().toString().equals(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"" + stmt);
          Type t=findArrayType(localDefs,stmt,++depth,newVisitedDefs);
          if (t instanceof ArrayType) {
            ArrayType at=(ArrayType)t;
            t=at.getArrayElementType();
          }
          if (depth == 0) {
            aType=t;
            break;
          }
 else {
            return t;
          }
        }
 else {
          Debug.printDbg(""String_Node_Str"",ar.getType().toString());
          ArrayType at=(ArrayType)stmt.getRightOp().getType();
          Type t=at.getArrayElementType();
          if (depth == 0) {
            aType=t;
            break;
          }
 else {
            return t;
          }
        }
      }
 else       if (r instanceof NewArrayExpr) {
        NewArrayExpr expr=(NewArrayExpr)r;
        Type t=expr.getBaseType();
        Debug.printDbg(""String_Node_Str"",t);
        if (depth == 0) {
          aType=t;
          break;
        }
 else {
          return t;
        }
      }
 else       if (r instanceof CastExpr) {
        Type t=(((CastExpr)r).getCastType());
        Debug.printDbg(""String_Node_Str"",t);
        if (t instanceof ArrayType) {
          ArrayType at=(ArrayType)t;
          t=at.getArrayElementType();
        }
        if (depth == 0) {
          aType=t;
          break;
        }
 else {
          return t;
        }
      }
 else       if (r instanceof InvokeExpr) {
        Type t=((InvokeExpr)r).getMethodRef().returnType();
        Debug.printDbg(""String_Node_Str"",t);
        if (t instanceof ArrayType) {
          ArrayType at=(ArrayType)t;
          t=at.getArrayElementType();
        }
        if (depth == 0) {
          aType=t;
          break;
        }
 else {
          return t;
        }
      }
 else       if (r instanceof Local) {
        Debug.printDbg(""String_Node_Str"",stmt);
        Type t=findArrayType(localDefs,stmt,++depth,newVisitedDefs);
        if (depth == 0) {
          aType=t;
        }
 else {
          aType=t;
        }
      }
 else       if (r instanceof Constant) {
        nullDefCount++;
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + stmt);
      }
    }
 else     if (baseDef instanceof IdentityStmt) {
      IdentityStmt stmt=(IdentityStmt)baseDef;
      ArrayType at=(ArrayType)stmt.getRightOp().getType();
      Type t=at.getArrayElementType();
      if (depth == 0) {
        aType=t;
        break;
      }
 else {
        return t;
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + baseDef);
    }
    if (aType != null)     break;
  }
  if (depth == 0 && aType == null) {
    if (nullDefCount == defsOfaBaseList.size()) {
      return NullType.v();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + arrayStmt + ""String_Node_Str"");
    }
  }
 else   return aType;
}","protected Type findArrayType(LocalDefs localDefs,Stmt arrayStmt,int depth,Set<Unit> alreadyVisitedDefs){
  ArrayRef aRef=null;
  if (arrayStmt.containsArrayRef()) {
    aRef=arrayStmt.getArrayRef();
  }
  Local aBase=null;
  if (null == aRef) {
    if (arrayStmt instanceof AssignStmt) {
      AssignStmt stmt=(AssignStmt)arrayStmt;
      aBase=(Local)stmt.getRightOp();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + arrayStmt);
    }
  }
 else {
    aBase=(Local)aRef.getBase();
  }
  List<Unit> defsOfaBaseList=localDefs.getDefsOfAt(aBase,arrayStmt);
  if (defsOfaBaseList == null || defsOfaBaseList.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"" + arrayStmt);
  }
  Type aType=null;
  int nullDefCount=0;
  for (  Unit baseDef : defsOfaBaseList) {
    Debug.printDbg(""String_Node_Str"",baseDef);
    if (alreadyVisitedDefs.contains(baseDef))     continue;
    Set<Unit> newVisitedDefs=new HashSet<Unit>(alreadyVisitedDefs);
    newVisitedDefs.add(baseDef);
    if (baseDef instanceof AssignStmt) {
      AssignStmt stmt=(AssignStmt)baseDef;
      Value r=stmt.getRightOp();
      if (r instanceof FieldRef) {
        Type t=((FieldRef)r).getFieldRef().type();
        if (t instanceof ArrayType) {
          ArrayType at=(ArrayType)t;
          t=at.getArrayElementType();
        }
        Debug.printDbg(""String_Node_Str"",t);
        if (depth == 0) {
          aType=t;
          break;
        }
 else {
          return t;
        }
      }
 else       if (r instanceof ArrayRef) {
        ArrayRef ar=(ArrayRef)r;
        if (ar.getType().toString().equals(""String_Node_Str"") || ar.getType().toString().equals(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"" + stmt);
          Type t=findArrayType(localDefs,stmt,++depth,newVisitedDefs);
          if (t instanceof ArrayType) {
            ArrayType at=(ArrayType)t;
            t=at.getArrayElementType();
          }
          if (depth == 0) {
            aType=t;
            break;
          }
 else {
            return t;
          }
        }
 else {
          Debug.printDbg(""String_Node_Str"",ar.getType().toString());
          ArrayType at=(ArrayType)stmt.getRightOp().getType();
          Type t=at.getArrayElementType();
          if (depth == 0) {
            aType=t;
            break;
          }
 else {
            return t;
          }
        }
      }
 else       if (r instanceof NewArrayExpr) {
        NewArrayExpr expr=(NewArrayExpr)r;
        Type t=expr.getBaseType();
        Debug.printDbg(""String_Node_Str"",t);
        if (depth == 0) {
          aType=t;
          break;
        }
 else {
          return t;
        }
      }
 else       if (r instanceof CastExpr) {
        Type t=(((CastExpr)r).getCastType());
        Debug.printDbg(""String_Node_Str"",t);
        if (t instanceof ArrayType) {
          ArrayType at=(ArrayType)t;
          t=at.getArrayElementType();
        }
        if (depth == 0) {
          aType=t;
          break;
        }
 else {
          return t;
        }
      }
 else       if (r instanceof InvokeExpr) {
        Type t=((InvokeExpr)r).getMethodRef().returnType();
        Debug.printDbg(""String_Node_Str"",t);
        if (t instanceof ArrayType) {
          ArrayType at=(ArrayType)t;
          t=at.getArrayElementType();
        }
        if (depth == 0) {
          aType=t;
          break;
        }
 else {
          return t;
        }
      }
 else       if (r instanceof Local) {
        Debug.printDbg(""String_Node_Str"",stmt);
        Type t=findArrayType(localDefs,stmt,++depth,newVisitedDefs);
        if (depth == 0) {
          aType=t;
        }
 else {
          aType=t;
        }
      }
 else       if (r instanceof Constant) {
        nullDefCount++;
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + stmt);
      }
    }
 else     if (baseDef instanceof IdentityStmt) {
      IdentityStmt stmt=(IdentityStmt)baseDef;
      ArrayType at=(ArrayType)stmt.getRightOp().getType();
      Type t=at.getArrayElementType();
      if (depth == 0) {
        aType=t;
        break;
      }
 else {
        return t;
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + baseDef);
    }
    if (aType != null)     break;
  }
  if (depth == 0 && aType == null) {
    if (nullDefCount == defsOfaBaseList.size()) {
      return NullType.v();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + arrayStmt + ""String_Node_Str"");
    }
  }
 else   return aType;
}"
85284,"private void emitUnits(){
  AbstractInsnNode insn=instructions.getFirst();
  ArrayDeque<LabelNode> labls=new ArrayDeque<LabelNode>();
  while (insn != null) {
    if (insn instanceof LabelNode)     labls.add((LabelNode)insn);
    Unit u=units.get(insn);
    if (u == null) {
      insn=insn.getNext();
      continue;
    }
    emitUnits(u);
    if (insn instanceof LabelNode && u instanceof IdentityStmt && ((IdentityStmt)u).getRightOp() instanceof CaughtExceptionRef) {
      Collection<UnitBox> traps=trapHandlers.get((LabelNode)insn);
      for (      UnitBox ub : traps)       ub.setUnit(u);
    }
    while (!labls.isEmpty()) {
      LabelNode ln=labls.poll();
      Collection<UnitBox> boxes=labels.get(ln);
      if (boxes != null) {
        for (        UnitBox box : boxes) {
          box.setUnit(u instanceof UnitContainer ? ((UnitContainer)u).getFirstUnit() : u);
        }
      }
    }
    insn=insn.getNext();
  }
  if (labls.isEmpty())   return;
  Unit end=Jimple.v().newNopStmt();
  body.getUnits().add(end);
  while (!labls.isEmpty()) {
    LabelNode ln=labls.poll();
    Collection<UnitBox> boxes=labels.get(ln);
    if (boxes != null) {
      for (      UnitBox box : boxes)       box.setUnit(end);
    }
  }
}","private void emitUnits(){
  AbstractInsnNode insn=instructions.getFirst();
  ArrayDeque<LabelNode> labls=new ArrayDeque<LabelNode>();
  while (insn != null) {
    if (insn instanceof LabelNode)     labls.add((LabelNode)insn);
    Unit u=units.get(insn);
    if (u == null) {
      insn=insn.getNext();
      continue;
    }
    emitUnits(u);
{
      IdentityStmt caughtEx=null;
      if (u instanceof IdentityStmt)       caughtEx=(IdentityStmt)u;
 else       if (u instanceof UnitContainer)       caughtEx=getIdentityRefFromContrainer((UnitContainer)u);
      if (insn instanceof LabelNode && caughtEx != null && caughtEx.getRightOp() instanceof CaughtExceptionRef) {
        Collection<UnitBox> traps=trapHandlers.get((LabelNode)insn);
        for (        UnitBox ub : traps)         ub.setUnit(caughtEx);
      }
    }
    while (!labls.isEmpty()) {
      LabelNode ln=labls.poll();
      Collection<UnitBox> boxes=labels.get(ln);
      if (boxes != null) {
        for (        UnitBox box : boxes) {
          box.setUnit(u instanceof UnitContainer ? ((UnitContainer)u).getFirstUnit() : u);
        }
      }
    }
    insn=insn.getNext();
  }
  if (labls.isEmpty())   return;
  Unit end=Jimple.v().newNopStmt();
  body.getUnits().add(end);
  while (!labls.isEmpty()) {
    LabelNode ln=labls.poll();
    Collection<UnitBox> boxes=labels.get(ln);
    if (boxes != null) {
      for (      UnitBox box : boxes)       box.setUnit(end);
    }
  }
}"
85285,"/** 
 * Returns the RefType with the given className. Returns null if no type with the given name can be found.
 */
public RefType getRefTypeUnsafe(String className){
  RefType refType=nameToClass.get(className);
  return refType;
}","/** 
 * Returns the RefType with the given className. Returns null if no type with the given name can be found.
 */
public RefType getRefTypeUnsafe(String className){
  RefType refType=nameToClass.get(unescapeName(className));
  return refType;
}"
85286,"final public BitVector get(Type type){
  if (type == null)   return null;
  while (allocNodeListener.hasNext()) {
    AllocNode n=allocNodeListener.next();
    for (    final Type t : Scene.v().getTypeNumberer()) {
      if (!(t instanceof RefLikeType))       continue;
      if (t instanceof AnySubType)       continue;
      if (isUnresolved(t))       continue;
      if (castNeverFails(n.getType(),t)) {
        BitVector mask=typeMask.get(t);
        if (mask == null) {
          typeMask.put(t,mask=new BitVector());
          for (          final AllocNode an : pag.getAllocNodeNumberer()) {
            if (castNeverFails(an.getType(),t)) {
              mask.set(an.getNumber());
            }
          }
          continue;
        }
        mask.set(n.getNumber());
      }
    }
  }
  BitVector ret=(BitVector)typeMask.get(type);
  if (ret == null && fh != null)   if (type instanceof RefType && ((RefType)type).getSootClass().isPhantom())   return new BitVector();
 else   throw new RuntimeException(""String_Node_Str"" + type);
  return ret;
}","final public BitVector get(Type type){
  if (type == null)   return null;
  while (allocNodeListener.hasNext()) {
    AllocNode n=allocNodeListener.next();
    for (    final Type t : Scene.v().getTypeNumberer()) {
      if (!(t instanceof RefLikeType))       continue;
      if (t instanceof AnySubType)       continue;
      if (isUnresolved(t))       continue;
      if (castNeverFails(n.getType(),t)) {
        BitVector mask=typeMask.get(t);
        if (mask == null) {
          typeMask.put(t,mask=new BitVector());
          for (          final AllocNode an : pag.getAllocNodeNumberer()) {
            if (castNeverFails(an.getType(),t)) {
              mask.set(an.getNumber());
            }
          }
          continue;
        }
        mask.set(n.getNumber());
      }
    }
  }
  BitVector ret=(BitVector)typeMask.get(type);
  if (ret == null && fh != null) {
    SootClass curClass=((RefType)type).getSootClass();
    if (type instanceof RefType && curClass.isPhantom())     return new BitVector();
 else {
      while (curClass.hasSuperclass()) {
        curClass=curClass.getSuperclass();
        if (type instanceof RefType && curClass.isPhantom())         return new BitVector();
      }
      throw new RuntimeException(""String_Node_Str"" + type);
    }
  }
  return ret;
}"
85287,"/** 
 * Constructs a hierarchy from the current scene. 
 */
public FastHierarchy(){
  this.sc=Scene.v();
  for (final Iterator<SootClass> clIt=sc.getClasses().snapshotIterator(); clIt.hasNext(); ) {
    SootClass cl=clIt.next();
    if (cl.resolvingLevel() < SootClass.HIERARCHY)     continue;
    if (!cl.isInterface() && cl.hasSuperclass()) {
      classToSubclasses.put(cl.getSuperclass(),cl);
    }
    for (    final SootClass supercl : cl.getInterfaces()) {
      if (cl.isInterface()) {
        interfaceToSubinterfaces.put(supercl,cl);
      }
 else {
        interfaceToImplementers.put(supercl,cl);
      }
    }
  }
  dfsVisit(0,Scene.v().getSootClass(""String_Node_Str""));
  for (final Iterator<SootClass> phantomClassIt=Scene.v().getPhantomClasses().snapshotIterator(); phantomClassIt.hasNext(); ) {
    SootClass phantomClass=phantomClassIt.next();
    if (!phantomClass.isInterface())     dfsVisit(0,phantomClass);
  }
}","/** 
 * Constructs a hierarchy from the current scene. 
 */
public FastHierarchy(){
  this.sc=Scene.v();
  for (  SootClass cl : sc.getClasses().getElementsUnsorted()) {
    if (cl.resolvingLevel() < SootClass.HIERARCHY)     continue;
    if (!cl.isInterface() && cl.hasSuperclass()) {
      classToSubclasses.put(cl.getSuperclass(),cl);
    }
    for (    final SootClass supercl : cl.getInterfaces()) {
      if (cl.isInterface()) {
        interfaceToSubinterfaces.put(supercl,cl);
      }
 else {
        interfaceToImplementers.put(supercl,cl);
      }
    }
  }
  dfsVisit(0,Scene.v().getSootClass(""String_Node_Str""));
  for (final Iterator<SootClass> phantomClassIt=Scene.v().getPhantomClasses().snapshotIterator(); phantomClassIt.hasNext(); ) {
    SootClass phantomClass=phantomClassIt.next();
    if (!phantomClass.isInterface())     dfsVisit(0,phantomClass);
  }
}"
85288,"/** 
 * Returns the field of this class with the given subsignature. If such a field does not exist, null is returned.
 */
public SootField getFieldUnsafe(String subsignature){
  checkLevel(SIGNATURES);
  for (  SootField field : fields) {
    if (field.getSubSignature().equals(subsignature))     return field;
  }
  return null;
}","/** 
 * Returns the field of this class with the given subsignature. If such a field does not exist, null is returned.
 */
public SootField getFieldUnsafe(String subsignature){
  checkLevel(SIGNATURES);
  for (  SootField field : fields.getElementsUnsorted()) {
    if (field.getSubSignature().equals(subsignature))     return field;
  }
  return null;
}"
85289,"/** 
 * Returns the field of this class with the given name. Throws a RuntimeException if there is more than one field with the given name. Returns null if no field with the given name exists.
 */
public SootField getFieldByNameUnsafe(String name){
  checkLevel(SIGNATURES);
  SootField foundField=null;
  for (  SootField field : fields) {
    if (field.getName().equals(name)) {
      if (foundField == null)       foundField=field;
 else       throw new RuntimeException(""String_Node_Str"" + name);
    }
  }
  return foundField;
}","/** 
 * Returns the field of this class with the given name. Throws a RuntimeException if there is more than one field with the given name. Returns null if no field with the given name exists.
 */
public SootField getFieldByNameUnsafe(String name){
  checkLevel(SIGNATURES);
  SootField foundField=null;
  for (  SootField field : fields.getElementsUnsorted()) {
    if (field.getName().equals(name)) {
      if (foundField == null)       foundField=field;
 else       throw new RuntimeException(""String_Node_Str"" + name);
    }
  }
  return foundField;
}"
85290,"@Override public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean isInterf){
  super.visitMethodInsn(opcode,owner,name,desc,isInterf);
  for (  Type t : AsmUtil.toJimpleDesc(desc)) {
    if (t instanceof RefType)     scb.addDep(t);
  }
  scb.addDep(AsmUtil.toBaseType(owner));
}","@Override public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean isInterf){
  super.visitMethodInsn(opcode,owner,name,desc,isInterf);
  for (  Type t : AsmUtil.toJimpleDesc(desc)) {
    addDeps(t);
  }
  scb.addDep(AsmUtil.toBaseType(owner));
}"
85291,"private void runPacksForOneClassAtATime(){
  if (Options.v().src_prec() == Options.src_prec_class && Options.v().keep_line_number()) {
    LineNumberAdder lineNumAdder=LineNumberAdder.v();
    lineNumAdder.internalTransform(""String_Node_Str"",null);
  }
  setupJAR();
  for (  String path : (Collection<String>)Options.v().process_dir()) {
    for (    String cl : SourceLocator.v().getClassesUnder(path)) {
      SootClass clazz=Scene.v().forceResolve(cl,SootClass.SIGNATURES);
      clazz.setApplicationClass();
    }
    for (    String cl : SourceLocator.v().getClassesUnder(path)) {
      ClassSource source=SourceLocator.v().getClassSource(cl);
      if (source == null)       throw new RuntimeException(""String_Node_Str"");
      SootClass clazz=Scene.v().getSootClass(cl);
      clazz.setResolvingLevel(SootClass.BODIES);
      source.resolve(clazz);
      for (      SootClass sc : Scene.v().getApplicationClasses()) {
        if (Options.v().validate())         sc.validate();
        if (!sc.isPhantom)         ConstantInitializerToTagTransformer.v().transformClass(sc,true);
      }
      runBodyPacks(clazz);
      writeClass(clazz);
      if (!Options.v().no_writeout_body_releasing())       releaseBodies(clazz);
    }
  }
  tearDownJAR();
  handleInnerClasses();
}","private void runPacksForOneClassAtATime(){
  if (Options.v().src_prec() == Options.src_prec_class && Options.v().keep_line_number()) {
    LineNumberAdder lineNumAdder=LineNumberAdder.v();
    lineNumAdder.internalTransform(""String_Node_Str"",null);
  }
  setupJAR();
  for (  String path : (Collection<String>)Options.v().process_dir()) {
    for (    String cl : SourceLocator.v().getClassesUnder(path)) {
      SootClass clazz=Scene.v().forceResolve(cl,SootClass.SIGNATURES);
      clazz.setApplicationClass();
    }
    for (    String cl : SourceLocator.v().getClassesUnder(path)) {
      SootClass clazz=null;
      ClassSource source=SourceLocator.v().getClassSource(cl);
      try {
        if (source == null)         throw new RuntimeException(""String_Node_Str"");
        clazz=Scene.v().getSootClass(cl);
        clazz.setResolvingLevel(SootClass.BODIES);
        source.resolve(clazz);
      }
  finally {
        if (source != null)         source.close();
      }
      for (      SootClass sc : Scene.v().getApplicationClasses()) {
        if (Options.v().validate())         sc.validate();
        if (!sc.isPhantom)         ConstantInitializerToTagTransformer.v().transformClass(sc,true);
      }
      runBodyPacks(clazz);
      writeClass(clazz);
      if (!Options.v().no_writeout_body_releasing())       releaseBodies(clazz);
    }
  }
  tearDownJAR();
  handleInnerClasses();
}"
85292,"/** 
 * Attempts to load the given class and all of the required support classes. Returns the original class if it was loaded, or null otherwise.
 */
public SootClass tryLoadClass(String className,int desiredLevel){
  setPhantomRefs(true);
  if (!getPhantomRefs() && SourceLocator.v().getClassSource(className) == null) {
    setPhantomRefs(false);
    return null;
  }
  SootResolver resolver=SootResolver.v();
  SootClass toReturn=resolver.resolveClass(className,desiredLevel);
  setPhantomRefs(false);
  return toReturn;
}","/** 
 * Attempts to load the given class and all of the required support classes. Returns the original class if it was loaded, or null otherwise.
 */
public SootClass tryLoadClass(String className,int desiredLevel){
  setPhantomRefs(true);
  ClassSource source=SourceLocator.v().getClassSource(className);
  try {
    if (!getPhantomRefs() && source == null) {
      setPhantomRefs(false);
      return null;
    }
  }
  finally {
    if (source != null)     source.close();
  }
  SootResolver resolver=SootResolver.v();
  SootClass toReturn=resolver.resolveClass(className,desiredLevel);
  setPhantomRefs(false);
  return toReturn;
}"
85293,"/** 
 * Hierarchy - we know the hierarchy of the class and that's it requires at least Hierarchy for all supertypes and enclosing types.
 */
private void bringToHierarchy(SootClass sc){
  if (sc.resolvingLevel() >= SootClass.HIERARCHY)   return;
  if (Options.v().debug_resolver())   G.v().out.println(""String_Node_Str"" + sc);
  sc.setResolvingLevel(SootClass.HIERARCHY);
  String className=sc.getName();
  ClassSource is=SourceLocator.v().getClassSource(className);
  boolean modelAsPhantomRef=is == null;
  if (modelAsPhantomRef) {
    if (!Scene.v().allowsPhantomRefs()) {
      String suffix=""String_Node_Str"";
      if (className.equals(""String_Node_Str"")) {
        suffix=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
      }
 else       if (className.equals(""String_Node_Str"")) {
        suffix=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
      }
      throw new SootClassNotFoundException(""String_Node_Str"" + className + ""String_Node_Str""+ suffix);
    }
 else {
      G.v().out.println(""String_Node_Str"" + className + ""String_Node_Str"");
      sc.setPhantomClass();
      classToTypesSignature.put(sc,Collections.<Type>emptyList());
      classToTypesHierarchy.put(sc,Collections.<Type>emptyList());
    }
  }
 else {
    Dependencies dependencies=is.resolve(sc);
    if (!dependencies.typesToSignature.isEmpty())     classToTypesSignature.put(sc,dependencies.typesToSignature);
    if (!dependencies.typesToHierarchy.isEmpty())     classToTypesHierarchy.put(sc,dependencies.typesToHierarchy);
  }
  reResolveHierarchy(sc);
}","/** 
 * Hierarchy - we know the hierarchy of the class and that's it requires at least Hierarchy for all supertypes and enclosing types.
 */
private void bringToHierarchy(SootClass sc){
  if (sc.resolvingLevel() >= SootClass.HIERARCHY)   return;
  if (Options.v().debug_resolver())   G.v().out.println(""String_Node_Str"" + sc);
  sc.setResolvingLevel(SootClass.HIERARCHY);
  String className=sc.getName();
  ClassSource is=SourceLocator.v().getClassSource(className);
  try {
    boolean modelAsPhantomRef=is == null;
    if (modelAsPhantomRef) {
      if (!Scene.v().allowsPhantomRefs()) {
        String suffix=""String_Node_Str"";
        if (className.equals(""String_Node_Str"")) {
          suffix=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
        }
 else         if (className.equals(""String_Node_Str"")) {
          suffix=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
        }
        throw new SootClassNotFoundException(""String_Node_Str"" + className + ""String_Node_Str""+ suffix);
      }
 else {
        G.v().out.println(""String_Node_Str"" + className + ""String_Node_Str"");
        sc.setPhantomClass();
        classToTypesSignature.put(sc,Collections.<Type>emptyList());
        classToTypesHierarchy.put(sc,Collections.<Type>emptyList());
      }
    }
 else {
      Dependencies dependencies=is.resolve(sc);
      if (!dependencies.typesToSignature.isEmpty())       classToTypesSignature.put(sc,dependencies.typesToSignature);
      if (!dependencies.typesToHierarchy.isEmpty())       classToTypesHierarchy.put(sc,dependencies.typesToHierarchy);
    }
  }
  finally {
    if (is != null)     is.close();
  }
  reResolveHierarchy(sc);
}"
85294,"private SootField resolve(StringBuffer trace){
  SootClass cl=declaringClass;
  while (true) {
    if (trace != null)     trace.append(""String_Node_Str"" + cl + ""String_Node_Str""+ cl.getFields()+ ""String_Node_Str"");
    SootField clField=cl.getFieldUnsafe(name,type);
    if (clField != null) {
      return checkStatic(clField);
    }
 else     if (Scene.v().allowsPhantomRefs() && cl.isPhantom()) {
      SootField f=new SootField(name,type,isStatic() ? Modifier.STATIC : 0);
      f.setPhantom(true);
synchronized (cl) {
        clField=cl.getFieldUnsafe(name,type);
        if (clField != null)         return checkStatic(clField);
 else {
          cl.addField(f);
          return f;
        }
      }
    }
 else {
      LinkedList<SootClass> queue=new LinkedList<SootClass>();
      queue.addAll(cl.getInterfaces());
      while (!queue.isEmpty()) {
        SootClass iface=queue.removeFirst();
        if (trace != null)         trace.append(""String_Node_Str"" + iface + ""String_Node_Str""+ iface.getFields()+ ""String_Node_Str"");
        SootField ifaceField=iface.getFieldUnsafe(name,type);
        if (ifaceField != null) {
          return checkStatic(ifaceField);
        }
        queue.addAll(iface.getInterfaces());
      }
      if (cl.hasSuperclass())       cl=cl.getSuperclass();
 else       break;
    }
  }
  if (Options.v().allow_phantom_refs()) {
    SootField sf=new SootField(name,type,isStatic ? Modifier.STATIC : 0);
    sf.setPhantom(true);
synchronized (declaringClass) {
      SootField clField=cl.getFieldUnsafe(name,type);
      if (clField != null)       return checkStatic(clField);
 else {
        declaringClass.addField(sf);
        return sf;
      }
    }
  }
  if (trace == null) {
    FieldResolutionFailedException e=new FieldResolutionFailedException();
    if (Options.v().ignore_resolution_errors())     G.v().out.println(e.getMessage());
 else     throw e;
  }
  return null;
}","private SootField resolve(StringBuffer trace){
  SootClass cl=declaringClass;
  while (true) {
    if (trace != null)     trace.append(""String_Node_Str"" + cl + ""String_Node_Str""+ cl.getFields()+ ""String_Node_Str"");
synchronized (cl) {
      SootField clField=cl.getFieldUnsafe(name,type);
      if (clField != null) {
        return checkStatic(clField);
      }
 else       if (Scene.v().allowsPhantomRefs() && cl.isPhantom()) {
        SootField f=new SootField(name,type,isStatic() ? Modifier.STATIC : 0);
        f.setPhantom(true);
        cl.addField(f);
        return f;
      }
 else {
        LinkedList<SootClass> queue=new LinkedList<SootClass>();
        queue.addAll(cl.getInterfaces());
        while (!queue.isEmpty()) {
          SootClass iface=queue.removeFirst();
          if (trace != null)           trace.append(""String_Node_Str"" + iface + ""String_Node_Str""+ iface.getFields()+ ""String_Node_Str"");
          SootField ifaceField=iface.getFieldUnsafe(name,type);
          if (ifaceField != null) {
            return checkStatic(ifaceField);
          }
          queue.addAll(iface.getInterfaces());
        }
        if (cl.hasSuperclass())         cl=cl.getSuperclass();
 else         break;
      }
    }
  }
  if (Options.v().allow_phantom_refs()) {
    SootField sf=new SootField(name,type,isStatic ? Modifier.STATIC : 0);
    sf.setPhantom(true);
synchronized (declaringClass) {
      SootField clField=cl.getFieldUnsafe(name,type);
      if (clField != null)       return checkStatic(clField);
 else {
        declaringClass.addField(sf);
        return sf;
      }
    }
  }
  if (trace == null) {
    FieldResolutionFailedException e=new FieldResolutionFailedException();
    if (Options.v().ignore_resolution_errors())     G.v().out.println(e.getMessage());
 else     throw e;
  }
  return null;
}"
85295,"/** 
 * Returns a body corresponding to the parsed jimple for m.  If necessary, applies the BodyExtractorWalker to initialize the bodies map. 
 * @param m the method we want to get a body for.
 * @return the actual body for the given method.
 */
public Body getBody(SootMethod m){
  if (methodToParsedBodyMap == null)   stashBodiesForClass(m.getDeclaringClass());
  return methodToParsedBodyMap.get(m);
}","/** 
 * Returns a body corresponding to the parsed jimple for m.  If necessary, applies the BodyExtractorWalker to initialize the bodies map. 
 * @param m the method we want to get a body for.
 * @return the actual body for the given method.
 */
public Body getBody(SootMethod m){
  if (methodToParsedBodyMap == null) {
synchronized (this) {
      if (methodToParsedBodyMap == null)       stashBodiesForClass(m.getDeclaringClass());
    }
  }
  return methodToParsedBodyMap.get(m);
}"
85296,"private void stashBodiesForClass(SootClass sc){
  methodToParsedBodyMap=new HashMap<SootMethod,JimpleBody>();
  Walker w=new BodyExtractorWalker(sc,SootResolver.v(),methodToParsedBodyMap);
  boolean oldPhantomValue=Scene.v().getPhantomRefs();
  Scene.v().setPhantomRefs(true);
  mTree.apply(w);
  Scene.v().setPhantomRefs(oldPhantomValue);
}","private void stashBodiesForClass(SootClass sc){
  HashMap<SootMethod,JimpleBody> methodToBodyMap=new HashMap<SootMethod,JimpleBody>();
  Walker w=new BodyExtractorWalker(sc,SootResolver.v(),methodToBodyMap);
  boolean oldPhantomValue=Scene.v().getPhantomRefs();
  Scene.v().setPhantomRefs(true);
  mTree.apply(w);
  Scene.v().setPhantomRefs(oldPhantomValue);
  methodToParsedBodyMap=methodToBodyMap;
}"
85297,"/** 
 * Fills in the pointer assignment graph returned by setup. 
 */
public void build(){
  QueueReader<Edge> callEdges;
  if (ofcg != null) {
    callEdges=ofcg.callGraph().listener();
    ofcg.build();
    reachables=ofcg.reachableMethods();
    reachables.update();
  }
 else {
    callEdges=cgb.getCallGraph().listener();
    cgb.build();
    reachables=cgb.reachables();
  }
  for (  final SootClass c : Scene.v().getClasses()) {
    handleClass(c);
  }
  while (callEdges.hasNext()) {
    Edge e=callEdges.next();
    if (e.getTgt().method().getDeclaringClass().isConcrete()) {
      MethodPAG.v(pag,e.tgt()).addToPAG(null);
      pag.addCallTarget(e);
    }
  }
  if (pag.getOpts().verbose()) {
    G.v().out.println(""String_Node_Str"" + totalMethods);
    G.v().out.println(""String_Node_Str"" + analyzedMethods);
    G.v().out.println(""String_Node_Str"" + classes);
  }
}","/** 
 * Fills in the pointer assignment graph returned by setup. 
 */
public void build(){
  QueueReader<Edge> callEdges;
  if (ofcg != null) {
    callEdges=ofcg.callGraph().listener();
    ofcg.build();
    reachables=ofcg.reachableMethods();
    reachables.update();
  }
 else {
    callEdges=cgb.getCallGraph().listener();
    cgb.build();
    reachables=cgb.reachables();
  }
  for (  final SootClass c : Scene.v().getClasses()) {
    handleClass(c);
  }
  while (callEdges.hasNext()) {
    Edge e=callEdges.next();
    if (e.getTgt().method().getDeclaringClass().isConcrete()) {
      if (e.tgt().isConcrete() || e.tgt().isNative())       MethodPAG.v(pag,e.tgt()).addToPAG(null);
      pag.addCallTarget(e);
    }
  }
  if (pag.getOpts().verbose()) {
    G.v().out.println(""String_Node_Str"" + totalMethods);
    G.v().out.println(""String_Node_Str"" + analyzedMethods);
    G.v().out.println(""String_Node_Str"" + classes);
  }
}"
85298,"private void toInstructions(Collection<Unit> units,StmtVisitor stmtV){
  for (  Unit u : units) {
    stmtV.beginNewStmt((Stmt)u);
    u.apply(stmtV);
  }
  stmtV.finalizeInstructions();
}","private void toInstructions(Collection<Unit> units,StmtVisitor stmtV){
  Set<ClassConstant> monitorConsts=new HashSet<ClassConstant>();
  for (  Unit u : units) {
    if (u instanceof MonitorStmt) {
      MonitorStmt monitorStmt=(MonitorStmt)u;
      if (monitorStmt.getOp() instanceof ClassConstant) {
        monitorConsts.add((ClassConstant)monitorStmt.getOp());
      }
    }
  }
  boolean monitorAllocsMade=false;
  for (  Unit u : units) {
    if (!monitorAllocsMade && !monitorConsts.isEmpty() && !(u instanceof IdentityStmt)) {
      stmtV.preAllocateMonitorConsts(monitorConsts);
      monitorAllocsMade=true;
    }
    stmtV.beginNewStmt((Stmt)u);
    u.apply(stmtV);
  }
  stmtV.finalizeInstructions();
}"
85299,"private Insn buildMonitorInsn(MonitorStmt stmt,Opcode opc){
  Value lockValue=stmt.getOp();
  constantV.setOrigStmt(stmt);
  Register lockReg=null;
  if (lockValue instanceof Constant && opc == Opcode.MONITOR_EXIT)   if ((lockReg=monitorRegs.get(lockValue)) != null)   lockReg=lockReg.clone();
  if (lockReg == null) {
    lockReg=regAlloc.asImmediate(lockValue,constantV);
    regAlloc.lockRegister(lockReg);
    if (lockValue instanceof Constant) {
      monitorRegs.put((Constant)lockValue,lockReg);
      regAlloc.lockRegister(lockReg);
    }
  }
  return new Insn11x(opc,lockReg);
}","private Insn buildMonitorInsn(MonitorStmt stmt,Opcode opc){
  Value lockValue=stmt.getOp();
  constantV.setOrigStmt(stmt);
  Register lockReg=null;
  if (lockValue instanceof Constant)   if ((lockReg=monitorRegs.get(lockValue)) != null)   lockReg=lockReg.clone();
  if (lockReg == null) {
    lockReg=regAlloc.asImmediate(lockValue,constantV);
    regAlloc.lockRegister(lockReg);
    if (lockValue instanceof Constant) {
      monitorRegs.put((Constant)lockValue,lockReg);
      regAlloc.lockRegister(lockReg);
    }
  }
  return new Insn11x(opc,lockReg);
}"
85300,"private void emitUnits(){
  AbstractInsnNode insn=instructions.getFirst();
  ArrayDeque<LabelNode> labls=new ArrayDeque<LabelNode>();
  while (insn != null) {
    if (insn instanceof LabelNode)     labls.add((LabelNode)insn);
    Unit u=units.get(insn);
    if (u == null) {
      insn=insn.getNext();
      continue;
    }
    emitUnits(u);
    if (insn instanceof LabelNode && u instanceof IdentityStmt && ((IdentityStmt)u).getRightOp() instanceof CaughtExceptionRef) {
      Collection<UnitBox> traps=trapHandlers.get((LabelNode)insn);
      for (      UnitBox ub : traps)       ub.setUnit(u);
    }
    while (!labls.isEmpty()) {
      LabelNode ln=labls.poll();
      Collection<UnitBox> boxes=labels.get(ln);
      if (boxes != null) {
        for (        UnitBox box : boxes) {
          Unit uu=u;
          while (uu instanceof UnitContainer)           uu=((UnitContainer)uu).units[0];
          box.setUnit(uu);
        }
      }
    }
    insn=insn.getNext();
  }
  if (labls.isEmpty())   return;
  Unit end=Jimple.v().newNopStmt();
  body.getUnits().add(end);
  while (!labls.isEmpty()) {
    LabelNode ln=labls.poll();
    Collection<UnitBox> boxes=labels.get(ln);
    if (boxes != null) {
      for (      UnitBox box : boxes)       box.setUnit(end);
    }
  }
}","private void emitUnits(){
  AbstractInsnNode insn=instructions.getFirst();
  ArrayDeque<LabelNode> labls=new ArrayDeque<LabelNode>();
  while (insn != null) {
    if (insn instanceof LabelNode)     labls.add((LabelNode)insn);
    Unit u=units.get(insn);
    if (u == null) {
      insn=insn.getNext();
      continue;
    }
    emitUnits(u);
    if (insn instanceof LabelNode && u instanceof IdentityStmt && ((IdentityStmt)u).getRightOp() instanceof CaughtExceptionRef) {
      Collection<UnitBox> traps=trapHandlers.get((LabelNode)insn);
      for (      UnitBox ub : traps)       ub.setUnit(u);
    }
    while (!labls.isEmpty()) {
      LabelNode ln=labls.poll();
      Collection<UnitBox> boxes=labels.get(ln);
      if (boxes != null) {
        for (        UnitBox box : boxes) {
          box.setUnit(u instanceof UnitContainer ? ((UnitContainer)u).getFirstUnit() : u);
        }
      }
    }
    insn=insn.getNext();
  }
  if (labls.isEmpty())   return;
  Unit end=Jimple.v().newNopStmt();
  body.getUnits().add(end);
  while (!labls.isEmpty()) {
    LabelNode ln=labls.poll();
    Collection<UnitBox> boxes=labels.get(ln);
    if (boxes != null) {
      for (      UnitBox box : boxes)       box.setUnit(end);
    }
  }
}"
85301,"private ArrayList<AnnotationElem> handleAnnotationElement(AnnotationElement ae,List<? extends EncodedValue> evList){
  ArrayList<AnnotationElem> aelemList=new ArrayList<AnnotationElem>();
  for (  EncodedValue ev : evList) {
    int type=ev.getValueType();
    AnnotationElem elem=null;
    Debug.printDbg(""String_Node_Str"",type);
switch (type) {
case 0x00:
{
        ByteEncodedValue v=(ByteEncodedValue)ev;
        elem=new AnnotationIntElem(v.getValue(),'B',ae.getName());
        break;
      }
case 0x02:
{
      ShortEncodedValue v=(ShortEncodedValue)ev;
      elem=new AnnotationIntElem(v.getValue(),'S',ae.getName());
      break;
    }
case 0x03:
{
    CharEncodedValue v=(CharEncodedValue)ev;
    elem=new AnnotationIntElem(v.getValue(),'C',ae.getName());
    break;
  }
case 0x04:
{
  IntEncodedValue v=(IntEncodedValue)ev;
  elem=new AnnotationIntElem(v.getValue(),'I',ae.getName());
  break;
}
case 0x06:
{
LongEncodedValue v=(LongEncodedValue)ev;
elem=new AnnotationLongElem(v.getValue(),'J',ae.getName());
break;
}
case 0x10:
{
FloatEncodedValue v=(FloatEncodedValue)ev;
elem=new AnnotationFloatElem(v.getValue(),'F',ae.getName());
break;
}
case 0x11:
{
DoubleEncodedValue v=(DoubleEncodedValue)ev;
elem=new AnnotationDoubleElem(v.getValue(),'D',ae.getName());
break;
}
case 0x17:
{
StringEncodedValue v=(StringEncodedValue)ev;
elem=new AnnotationStringElem(v.getValue(),'s',ae.getName());
Debug.printDbg(""String_Node_Str"",v.getValue());
break;
}
case 0x18:
{
TypeEncodedValue v=(TypeEncodedValue)ev;
elem=new AnnotationClassElem(DexType.toSootAT(v.getValue()),'c',ae.getName());
break;
}
case 0x19:
{
FieldEncodedValue v=(FieldEncodedValue)ev;
FieldReference fr=v.getValue();
String fieldSig=""String_Node_Str"";
fieldSig+=DexType.toSootAT(fr.getDefiningClass()) + ""String_Node_Str"";
fieldSig+=DexType.toSootAT(fr.getType()) + ""String_Node_Str"";
fieldSig+=fr.getName();
Debug.printDbg(""String_Node_Str"",fieldSig);
elem=new AnnotationStringElem(fieldSig,'f',ae.getName());
break;
}
case 0x1a:
{
MethodEncodedValue v=(MethodEncodedValue)ev;
MethodReference mr=v.getValue();
String className=DexType.toSootICAT(mr.getDefiningClass());
String returnType=DexType.toSootAT(mr.getReturnType());
String methodName=mr.getName();
String parameters=""String_Node_Str"";
for (CharSequence p : mr.getParameterTypes()) {
parameters+=DexType.toSootAT(p.toString());
}
String mSig=className + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ parameters+ ""String_Node_Str""+ returnType;
elem=new AnnotationStringElem(mSig,'M',ae.getName());
break;
}
case 0x1b:
{
EnumEncodedValue v=(EnumEncodedValue)ev;
FieldReference fr=v.getValue();
elem=new AnnotationEnumElem(DexType.toSootAT(fr.getType()).toString(),fr.getName(),'e',ae.getName());
break;
}
case 0x1c:
{
ArrayEncodedValue v=(ArrayEncodedValue)ev;
ArrayList<AnnotationElem> l=handleAnnotationElement(ae,v.getValue());
if (l != null) elem=new AnnotationArrayElem(l,'[',ae.getName());
break;
}
case 0x1d:
{
AnnotationEncodedValue v=(AnnotationEncodedValue)ev;
AnnotationTag t=new AnnotationTag(DexType.toSootAT(v.getType()).toString());
for (AnnotationElement newElem : v.getElements()) {
List<EncodedValue> l=new ArrayList<EncodedValue>();
l.add(newElem.getValue());
List<AnnotationElem> aList=handleAnnotationElement(newElem,l);
if (aList != null) for (AnnotationElem e : aList) t.addElem(e);
}
elem=new AnnotationAnnotationElem(t,'@',ae.getName());
break;
}
case 0x1e:
{
elem=new AnnotationStringElem(null,'N',ae.getName());
break;
}
case 0x1f:
{
BooleanEncodedValue v=(BooleanEncodedValue)ev;
elem=new AnnotationBooleanElem(v.getValue(),'Z',ae.getName());
break;
}
default :
{
throw new RuntimeException(""String_Node_Str"" + Integer.toHexString(type));
}
}
if (elem != null) aelemList.add(elem);
}
return aelemList;
}","private ArrayList<AnnotationElem> handleAnnotationElement(AnnotationElement ae,List<? extends EncodedValue> evList){
  ArrayList<AnnotationElem> aelemList=new ArrayList<AnnotationElem>();
  for (  EncodedValue ev : evList) {
    int type=ev.getValueType();
    AnnotationElem elem=null;
    Debug.printDbg(""String_Node_Str"",type);
switch (type) {
case 0x00:
{
        ByteEncodedValue v=(ByteEncodedValue)ev;
        elem=new AnnotationIntElem(v.getValue(),'B',ae.getName());
        break;
      }
case 0x02:
{
      ShortEncodedValue v=(ShortEncodedValue)ev;
      elem=new AnnotationIntElem(v.getValue(),'S',ae.getName());
      break;
    }
case 0x03:
{
    CharEncodedValue v=(CharEncodedValue)ev;
    elem=new AnnotationIntElem(v.getValue(),'C',ae.getName());
    break;
  }
case 0x04:
{
  IntEncodedValue v=(IntEncodedValue)ev;
  elem=new AnnotationIntElem(v.getValue(),'I',ae.getName());
  break;
}
case 0x06:
{
LongEncodedValue v=(LongEncodedValue)ev;
elem=new AnnotationLongElem(v.getValue(),'J',ae.getName());
break;
}
case 0x10:
{
FloatEncodedValue v=(FloatEncodedValue)ev;
elem=new AnnotationFloatElem(v.getValue(),'F',ae.getName());
break;
}
case 0x11:
{
DoubleEncodedValue v=(DoubleEncodedValue)ev;
elem=new AnnotationDoubleElem(v.getValue(),'D',ae.getName());
break;
}
case 0x17:
{
StringEncodedValue v=(StringEncodedValue)ev;
elem=new AnnotationStringElem(v.getValue(),'s',ae.getName());
Debug.printDbg(""String_Node_Str"",v.getValue());
break;
}
case 0x18:
{
TypeEncodedValue v=(TypeEncodedValue)ev;
elem=new AnnotationClassElem(v.getValue(),'c',ae.getName());
break;
}
case 0x19:
{
FieldEncodedValue v=(FieldEncodedValue)ev;
FieldReference fr=v.getValue();
String fieldSig=""String_Node_Str"";
fieldSig+=DexType.toSootAT(fr.getDefiningClass()) + ""String_Node_Str"";
fieldSig+=DexType.toSootAT(fr.getType()) + ""String_Node_Str"";
fieldSig+=fr.getName();
Debug.printDbg(""String_Node_Str"",fieldSig);
elem=new AnnotationStringElem(fieldSig,'f',ae.getName());
break;
}
case 0x1a:
{
MethodEncodedValue v=(MethodEncodedValue)ev;
MethodReference mr=v.getValue();
String className=DexType.toSootICAT(mr.getDefiningClass());
String returnType=DexType.toSootAT(mr.getReturnType());
String methodName=mr.getName();
String parameters=""String_Node_Str"";
for (CharSequence p : mr.getParameterTypes()) {
parameters+=DexType.toSootAT(p.toString());
}
String mSig=className + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ parameters+ ""String_Node_Str""+ returnType;
elem=new AnnotationStringElem(mSig,'M',ae.getName());
break;
}
case 0x1b:
{
EnumEncodedValue v=(EnumEncodedValue)ev;
FieldReference fr=v.getValue();
elem=new AnnotationEnumElem(DexType.toSootAT(fr.getType()).toString(),fr.getName(),'e',ae.getName());
break;
}
case 0x1c:
{
ArrayEncodedValue v=(ArrayEncodedValue)ev;
ArrayList<AnnotationElem> l=handleAnnotationElement(ae,v.getValue());
if (l != null) elem=new AnnotationArrayElem(l,'[',ae.getName());
break;
}
case 0x1d:
{
AnnotationEncodedValue v=(AnnotationEncodedValue)ev;
AnnotationTag t=new AnnotationTag(DexType.toSootAT(v.getType()).toString());
for (AnnotationElement newElem : v.getElements()) {
List<EncodedValue> l=new ArrayList<EncodedValue>();
l.add(newElem.getValue());
List<AnnotationElem> aList=handleAnnotationElement(newElem,l);
if (aList != null) for (AnnotationElem e : aList) t.addElem(e);
}
elem=new AnnotationAnnotationElem(t,'@',ae.getName());
break;
}
case 0x1e:
{
elem=new AnnotationStringElem(null,'N',ae.getName());
break;
}
case 0x1f:
{
BooleanEncodedValue v=(BooleanEncodedValue)ev;
elem=new AnnotationBooleanElem(v.getValue(),'Z',ae.getName());
break;
}
default :
{
throw new RuntimeException(""String_Node_Str"" + Integer.toHexString(type));
}
}
if (elem != null) aelemList.add(elem);
}
return aelemList;
}"
85302,"/** 
 * Encodes Annotations Elements from Jimple to Dexlib
 * @param elem Jimple Element
 * @return Dexlib encoded element
 */
private EncodedValue buildEncodedValueForAnnotation(AnnotationElem elem){
switch (elem.getKind()) {
case 'Z':
{
      if (elem instanceof AnnotationIntElem) {
        AnnotationIntElem e=(AnnotationIntElem)elem;
        if (e.getValue() == 0) {
          return ImmutableBooleanEncodedValue.FALSE_VALUE;
        }
 else         if (e.getValue() == 1) {
          return ImmutableBooleanEncodedValue.TRUE_VALUE;
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else       if (elem instanceof AnnotationBooleanElem) {
        AnnotationBooleanElem e=(AnnotationBooleanElem)elem;
        if (e.getValue())         return ImmutableBooleanEncodedValue.TRUE_VALUE;
 else         return ImmutableBooleanEncodedValue.FALSE_VALUE;
      }
 else       throw new RuntimeException(""String_Node_Str"");
    }
case 'S':
{
    AnnotationIntElem e=(AnnotationIntElem)elem;
    return new ImmutableShortEncodedValue((short)e.getValue());
  }
case 'B':
{
  AnnotationIntElem e=(AnnotationIntElem)elem;
  return new ImmutableByteEncodedValue((byte)e.getValue());
}
case 'C':
{
AnnotationIntElem e=(AnnotationIntElem)elem;
return new ImmutableCharEncodedValue((char)e.getValue());
}
case 'I':
{
AnnotationIntElem e=(AnnotationIntElem)elem;
return new ImmutableIntEncodedValue(e.getValue());
}
case 'J':
{
AnnotationLongElem e=(AnnotationLongElem)elem;
return new ImmutableLongEncodedValue(e.getValue());
}
case 'F':
{
AnnotationFloatElem e=(AnnotationFloatElem)elem;
return new ImmutableFloatEncodedValue(e.getValue());
}
case 'D':
{
AnnotationDoubleElem e=(AnnotationDoubleElem)elem;
return new ImmutableDoubleEncodedValue(e.getValue());
}
case 's':
{
AnnotationStringElem e=(AnnotationStringElem)elem;
return new ImmutableStringEncodedValue(e.getValue());
}
case 'e':
{
AnnotationEnumElem e=(AnnotationEnumElem)elem;
String classT=SootToDexUtils.getDexClassName(e.getTypeName());
String fieldT=classT;
FieldReference fref=dexFile.internFieldReference(new ImmutableFieldReference(classT,e.getConstantName(),fieldT));
return new ImmutableEnumEncodedValue(fref);
}
case 'c':
{
AnnotationClassElem e=(AnnotationClassElem)elem;
return new ImmutableTypeEncodedValue(SootToDexUtils.getDexClassName(e.getDesc()));
}
case '[':
{
AnnotationArrayElem e=(AnnotationArrayElem)elem;
List<EncodedValue> values=new ArrayList<EncodedValue>();
for (int i=0; i < e.getNumValues(); i++) {
EncodedValue val=buildEncodedValueForAnnotation(e.getValueAt(i));
values.add(val);
}
return new ImmutableArrayEncodedValue(values);
}
case '@':
{
AnnotationAnnotationElem e=(AnnotationAnnotationElem)elem;
Set<String> alreadyWritten=new HashSet<String>();
List<AnnotationElement> elements=null;
if (!e.getValue().getElems().isEmpty()) {
elements=new ArrayList<AnnotationElement>();
for (AnnotationElem ae : e.getValue().getElems()) {
if (!alreadyWritten.add(ae.getName())) throw new RuntimeException(""String_Node_Str"" + ae.getName());
AnnotationElement element=new ImmutableAnnotationElement(ae.getName(),buildEncodedValueForAnnotation(ae));
elements.add(element);
}
}
return new ImmutableAnnotationEncodedValue(SootToDexUtils.getDexClassName(e.getValue().getType()),elements);
}
case 'f':
{
AnnotationStringElem e=(AnnotationStringElem)elem;
String fSig=e.getValue();
String[] sp=fSig.split(""String_Node_Str"");
String classString=SootToDexUtils.getDexClassName(sp[0].split(""String_Node_Str"")[0]);
if (classString.isEmpty()) throw new RuntimeException(""String_Node_Str"");
String typeString=sp[1];
if (typeString.isEmpty()) throw new RuntimeException(""String_Node_Str"");
String fieldName=sp[2];
FieldReference fref=dexFile.internFieldReference(new ImmutableFieldReference(classString,fieldName,typeString));
return new ImmutableFieldEncodedValue(fref);
}
case 'M':
{
AnnotationStringElem e=(AnnotationStringElem)elem;
String[] sp=e.getValue().split(""String_Node_Str"");
String classString=SootToDexUtils.getDexClassName(sp[0].split(""String_Node_Str"")[0]);
if (classString.isEmpty()) throw new RuntimeException(""String_Node_Str"");
String returnType=sp[1];
String[] sp2=sp[2].split(""String_Node_Str"");
String methodNameString=sp2[0];
String parameters=sp2[1].replaceAll(""String_Node_Str"",""String_Node_Str"");
List<String> paramTypeList=null;
if (!parameters.isEmpty()) {
paramTypeList=new ArrayList<String>();
if (parameters.length() > 0) for (String p : parameters.split(""String_Node_Str"")) {
paramTypeList.add(p);
}
}
MethodReference mref=dexFile.internMethodReference(new ImmutableMethodReference(classString,methodNameString,paramTypeList,returnType));
return new ImmutableMethodEncodedValue(mref);
}
case 'N':
{
return ImmutableNullEncodedValue.INSTANCE;
}
default :
throw new RuntimeException(""String_Node_Str"" + elem.getKind());
}
}","/** 
 * Encodes Annotations Elements from Jimple to Dexlib
 * @param elem Jimple Element
 * @return Dexlib encoded element
 */
private EncodedValue buildEncodedValueForAnnotation(AnnotationElem elem){
switch (elem.getKind()) {
case 'Z':
{
      if (elem instanceof AnnotationIntElem) {
        AnnotationIntElem e=(AnnotationIntElem)elem;
        if (e.getValue() == 0) {
          return ImmutableBooleanEncodedValue.FALSE_VALUE;
        }
 else         if (e.getValue() == 1) {
          return ImmutableBooleanEncodedValue.TRUE_VALUE;
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else       if (elem instanceof AnnotationBooleanElem) {
        AnnotationBooleanElem e=(AnnotationBooleanElem)elem;
        if (e.getValue())         return ImmutableBooleanEncodedValue.TRUE_VALUE;
 else         return ImmutableBooleanEncodedValue.FALSE_VALUE;
      }
 else       throw new RuntimeException(""String_Node_Str"");
    }
case 'S':
{
    AnnotationIntElem e=(AnnotationIntElem)elem;
    return new ImmutableShortEncodedValue((short)e.getValue());
  }
case 'B':
{
  AnnotationIntElem e=(AnnotationIntElem)elem;
  return new ImmutableByteEncodedValue((byte)e.getValue());
}
case 'C':
{
AnnotationIntElem e=(AnnotationIntElem)elem;
return new ImmutableCharEncodedValue((char)e.getValue());
}
case 'I':
{
AnnotationIntElem e=(AnnotationIntElem)elem;
return new ImmutableIntEncodedValue(e.getValue());
}
case 'J':
{
AnnotationLongElem e=(AnnotationLongElem)elem;
return new ImmutableLongEncodedValue(e.getValue());
}
case 'F':
{
AnnotationFloatElem e=(AnnotationFloatElem)elem;
return new ImmutableFloatEncodedValue(e.getValue());
}
case 'D':
{
AnnotationDoubleElem e=(AnnotationDoubleElem)elem;
return new ImmutableDoubleEncodedValue(e.getValue());
}
case 's':
{
AnnotationStringElem e=(AnnotationStringElem)elem;
return new ImmutableStringEncodedValue(e.getValue());
}
case 'e':
{
AnnotationEnumElem e=(AnnotationEnumElem)elem;
String classT=SootToDexUtils.getDexClassName(e.getTypeName());
String fieldT=classT;
FieldReference fref=dexFile.internFieldReference(new ImmutableFieldReference(classT,e.getConstantName(),fieldT));
return new ImmutableEnumEncodedValue(fref);
}
case 'c':
{
AnnotationClassElem e=(AnnotationClassElem)elem;
return new ImmutableTypeEncodedValue(e.getDesc());
}
case '[':
{
AnnotationArrayElem e=(AnnotationArrayElem)elem;
List<EncodedValue> values=new ArrayList<EncodedValue>();
for (int i=0; i < e.getNumValues(); i++) {
EncodedValue val=buildEncodedValueForAnnotation(e.getValueAt(i));
values.add(val);
}
return new ImmutableArrayEncodedValue(values);
}
case '@':
{
AnnotationAnnotationElem e=(AnnotationAnnotationElem)elem;
Set<String> alreadyWritten=new HashSet<String>();
List<AnnotationElement> elements=null;
if (!e.getValue().getElems().isEmpty()) {
elements=new ArrayList<AnnotationElement>();
for (AnnotationElem ae : e.getValue().getElems()) {
if (!alreadyWritten.add(ae.getName())) throw new RuntimeException(""String_Node_Str"" + ae.getName());
AnnotationElement element=new ImmutableAnnotationElement(ae.getName(),buildEncodedValueForAnnotation(ae));
elements.add(element);
}
}
return new ImmutableAnnotationEncodedValue(SootToDexUtils.getDexClassName(e.getValue().getType()),elements);
}
case 'f':
{
AnnotationStringElem e=(AnnotationStringElem)elem;
String fSig=e.getValue();
String[] sp=fSig.split(""String_Node_Str"");
String classString=SootToDexUtils.getDexClassName(sp[0].split(""String_Node_Str"")[0]);
if (classString.isEmpty()) throw new RuntimeException(""String_Node_Str"");
String typeString=sp[1];
if (typeString.isEmpty()) throw new RuntimeException(""String_Node_Str"");
String fieldName=sp[2];
FieldReference fref=dexFile.internFieldReference(new ImmutableFieldReference(classString,fieldName,typeString));
return new ImmutableFieldEncodedValue(fref);
}
case 'M':
{
AnnotationStringElem e=(AnnotationStringElem)elem;
String[] sp=e.getValue().split(""String_Node_Str"");
String classString=SootToDexUtils.getDexClassName(sp[0].split(""String_Node_Str"")[0]);
if (classString.isEmpty()) throw new RuntimeException(""String_Node_Str"");
String returnType=sp[1];
String[] sp2=sp[2].split(""String_Node_Str"");
String methodNameString=sp2[0];
String parameters=sp2[1].replaceAll(""String_Node_Str"",""String_Node_Str"");
List<String> paramTypeList=null;
if (!parameters.isEmpty()) {
paramTypeList=new ArrayList<String>();
if (parameters.length() > 0) for (String p : parameters.split(""String_Node_Str"")) {
paramTypeList.add(p);
}
}
MethodReference mref=dexFile.internMethodReference(new ImmutableMethodReference(classString,methodNameString,paramTypeList,returnType));
return new ImmutableMethodEncodedValue(mref);
}
case 'N':
{
return ImmutableNullEncodedValue.INSTANCE;
}
default :
throw new RuntimeException(""String_Node_Str"" + elem.getKind());
}
}"
85303,"/** 
 * Get the index of the enclosing function of the specified node.
 */
public int getMethodIDFromPtr(IVarAbstraction pn){
  SootMethod sm=null;
  int ret=Constants.SUPER_MAIN;
  Node node=pn.getWrappedNode();
  if (node instanceof AllocNode) {
    sm=((AllocNode)node).getMethod();
  }
 else   if (node instanceof LocalVarNode) {
    sm=((LocalVarNode)node).getMethod();
  }
 else   if (node instanceof AllocDotField) {
    sm=((AllocDotField)node).getBase().getMethod();
  }
  if (sm != null && func2int.containsKey(sm)) {
    int id=func2int.get(sm);
    if (vis_cg[id] == 0)     ret=Constants.UNKNOWN_FUNCTION;
    if (ret == -1)     System.out.println();
  }
  return ret;
}","/** 
 * Get the index of the enclosing function of the specified node.
 */
public int getMethodIDFromPtr(IVarAbstraction pn){
  SootMethod sm=null;
  int ret=Constants.SUPER_MAIN;
  Node node=pn.getWrappedNode();
  if (node instanceof AllocNode) {
    sm=((AllocNode)node).getMethod();
  }
 else   if (node instanceof LocalVarNode) {
    sm=((LocalVarNode)node).getMethod();
  }
 else   if (node instanceof AllocDotField) {
    sm=((AllocDotField)node).getBase().getMethod();
  }
  if (sm != null && func2int.containsKey(sm)) {
    int id=func2int.get(sm);
    if (vis_cg[id] == 0)     ret=Constants.UNKNOWN_FUNCTION;
 else     ret=id;
  }
  return ret;
}"
85304,"/** 
 * Read in the program facts generated by SPARK. We also construct our own call graph and pointer variables.
 */
private void preprocess(){
  int id;
  int s, t;
  n_func=Scene.v().getReachableMethods().size() + 1;
  call_graph=new CgEdge[n_func];
  n_calls=0;
  n_reach_spark_user_methods=0;
  id=1;
  QueueReader<MethodOrMethodContext> smList=Scene.v().getReachableMethods().listener();
  CallGraph soot_callgraph=Scene.v().getCallGraph();
  while (smList.hasNext()) {
    final SootMethod func=(SootMethod)smList.next();
    func2int.put(func,id);
    int2func.put(id,func);
    if (soot_callgraph.isEntryMethod(func) || func.isEntryMethod()) {
      CgEdge p=new CgEdge(Constants.SUPER_MAIN,id,null,call_graph[Constants.SUPER_MAIN]);
      call_graph[Constants.SUPER_MAIN]=p;
      n_calls++;
    }
    if (!func.isJavaLibraryMethod())     ++n_reach_spark_user_methods;
    id++;
  }
  QueueReader<Edge> edgeList=Scene.v().getCallGraph().listener();
  while (edgeList.hasNext()) {
    Edge edge=edgeList.next();
    if (edge.isClinit()) {
      continue;
    }
    SootMethod src_func=edge.src();
    SootMethod tgt_func=edge.tgt();
    s=func2int.get(src_func);
    t=func2int.get(tgt_func);
    CgEdge p=new CgEdge(s,t,edge,call_graph[s]);
    call_graph[s]=p;
    edgeMapping.put(edge,p);
    Stmt callsite=edge.srcStmt();
    if (edge.isThreadRunCall() || edge.kind().isExecutor() || edge.kind().isAsyncTask()) {
      thread_run_callsites.add(callsite);
    }
 else     if (edge.isInstance() && !edge.isSpecial()) {
      InstanceInvokeExpr expr=(InstanceInvokeExpr)callsite.getInvokeExpr();
      p.base_var=findLocalVarNode(expr.getBase());
      if (SootInfo.countCallEdgesForCallsite(callsite,true) > 1 && p.base_var != null) {
        multiCallsites.add(callsite);
      }
    }
    ++n_calls;
  }
  for (Iterator<VarNode> it=getVarNodeNumberer().iterator(); it.hasNext(); ) {
    VarNode vn=it.next();
    IVarAbstraction pn=makeInternalNode(vn);
    pointers.add(pn);
  }
  for (Iterator<AllocDotField> it=getAllocDotFieldNodeNumberer().iterator(); it.hasNext(); ) {
    AllocDotField adf=it.next();
    SparkField field=adf.getField();
    if (field instanceof SootField) {
      Type decType=((SootField)field).getDeclaringClass().getType();
      Type baseType=adf.getBase().getType();
      if (!castNeverFails(baseType,decType))       continue;
    }
    IVarAbstraction pn=makeInternalNode(adf);
    pointers.add(pn);
  }
  for (Iterator<AllocNode> it=getAllocNodeNumberer().iterator(); it.hasNext(); ) {
    AllocNode obj=it.next();
    IVarAbstraction pn=makeInternalNode(obj);
    allocations.add(pn);
  }
  for (  Object object : allocSources()) {
    IVarAbstraction obj=makeInternalNode((AllocNode)object);
    Node[] succs=allocLookup((AllocNode)object);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      IVarAbstraction p=makeInternalNode(element0);
      cons.expr.setPair(obj,p);
      cons.type=Constants.NEW_CONS;
      constraints.add(cons);
    }
  }
  Pair<Node,Node> intercall=new Pair<Node,Node>();
  for (  Object object : simpleSources()) {
    IVarAbstraction p=makeInternalNode((VarNode)object);
    Node[] succs=simpleLookup((VarNode)object);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      IVarAbstraction q=makeInternalNode(element0);
      cons.expr.setPair(p,q);
      cons.type=Constants.ASSIGN_CONS;
      intercall.setPair((VarNode)object,element0);
      cons.interCallEdges=lookupEdgesForAssignment(intercall);
      constraints.add(cons);
    }
  }
  intercall=null;
  assign2edges.clear();
  for (  Object object : loadSources()) {
    FieldRefNode frn=(FieldRefNode)object;
    IVarAbstraction p=makeInternalNode(frn.getBase());
    Node[] succs=loadLookup(frn);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      IVarAbstraction q=makeInternalNode(element0);
      cons.f=frn.getField();
      cons.expr.setPair(p,q);
      cons.type=Constants.LOAD_CONS;
      constraints.add(cons);
    }
  }
  for (  Object object : storeSources()) {
    IVarAbstraction p=makeInternalNode((VarNode)object);
    Node[] succs=storeLookup((VarNode)object);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      FieldRefNode frn=(FieldRefNode)element0;
      IVarAbstraction q=makeInternalNode(frn.getBase());
      cons.f=frn.getField();
      cons.expr.setPair(p,q);
      cons.type=Constants.STORE_CONS;
      constraints.add(cons);
    }
  }
  n_init_constraints=constraints.size();
  low_cg=new int[n_func];
  vis_cg=new int[n_func];
  rep_cg=new int[n_func];
  indeg_cg=new int[n_func];
  scc_size=new int[n_func];
  block_num=new int[n_func];
  context_size=new long[n_func];
  max_context_size_block=new long[n_func];
}","/** 
 * Read in the program facts generated by SPARK. We also construct our own call graph and pointer variables.
 */
private void preprocess(){
  int id;
  int s, t;
  n_func=Scene.v().getReachableMethods().size() + 1;
  call_graph=new CgEdge[n_func];
  n_calls=0;
  n_reach_spark_user_methods=0;
  id=1;
  QueueReader<MethodOrMethodContext> smList=Scene.v().getReachableMethods().listener();
  CallGraph soot_callgraph=Scene.v().getCallGraph();
  while (smList.hasNext()) {
    final SootMethod func=(SootMethod)smList.next();
    func2int.put(func,id);
    int2func.put(id,func);
    if (soot_callgraph.isEntryMethod(func) || func.isEntryMethod()) {
      CgEdge p=new CgEdge(Constants.SUPER_MAIN,id,null,call_graph[Constants.SUPER_MAIN]);
      call_graph[Constants.SUPER_MAIN]=p;
      n_calls++;
    }
    if (!func.isJavaLibraryMethod())     ++n_reach_spark_user_methods;
    id++;
  }
  QueueReader<Edge> edgeList=Scene.v().getCallGraph().listener();
  while (edgeList.hasNext()) {
    Edge edge=edgeList.next();
    if (edge.isClinit()) {
      continue;
    }
    SootMethod src_func=edge.src();
    SootMethod tgt_func=edge.tgt();
    s=func2int.get(src_func);
    t=func2int.get(tgt_func);
    CgEdge p=new CgEdge(s,t,edge,call_graph[s]);
    call_graph[s]=p;
    edgeMapping.put(edge,p);
    Stmt callsite=edge.srcStmt();
    if (edge.isThreadRunCall() || edge.kind().isExecutor() || edge.kind().isAsyncTask()) {
      thread_run_callsites.add(callsite);
    }
 else     if (edge.isInstance() && !edge.isSpecial()) {
      InstanceInvokeExpr expr=(InstanceInvokeExpr)callsite.getInvokeExpr();
      if (expr.getMethodRef().getSignature().contains(""String_Node_Str"")) {
        thread_run_callsites.add(callsite);
      }
 else {
        p.base_var=findLocalVarNode(expr.getBase());
        if (SootInfo.countCallEdgesForCallsite(callsite,true) > 1 && p.base_var != null) {
          multiCallsites.add(callsite);
        }
      }
    }
    ++n_calls;
  }
  for (Iterator<VarNode> it=getVarNodeNumberer().iterator(); it.hasNext(); ) {
    VarNode vn=it.next();
    IVarAbstraction pn=makeInternalNode(vn);
    pointers.add(pn);
  }
  for (Iterator<AllocDotField> it=getAllocDotFieldNodeNumberer().iterator(); it.hasNext(); ) {
    AllocDotField adf=it.next();
    SparkField field=adf.getField();
    if (field instanceof SootField) {
      Type decType=((SootField)field).getDeclaringClass().getType();
      Type baseType=adf.getBase().getType();
      if (!castNeverFails(baseType,decType))       continue;
    }
    IVarAbstraction pn=makeInternalNode(adf);
    pointers.add(pn);
  }
  for (Iterator<AllocNode> it=getAllocNodeNumberer().iterator(); it.hasNext(); ) {
    AllocNode obj=it.next();
    IVarAbstraction pn=makeInternalNode(obj);
    allocations.add(pn);
  }
  for (  Object object : allocSources()) {
    IVarAbstraction obj=makeInternalNode((AllocNode)object);
    Node[] succs=allocLookup((AllocNode)object);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      IVarAbstraction p=makeInternalNode(element0);
      cons.expr.setPair(obj,p);
      cons.type=Constants.NEW_CONS;
      constraints.add(cons);
    }
  }
  Pair<Node,Node> intercall=new Pair<Node,Node>();
  for (  Object object : simpleSources()) {
    IVarAbstraction p=makeInternalNode((VarNode)object);
    Node[] succs=simpleLookup((VarNode)object);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      IVarAbstraction q=makeInternalNode(element0);
      cons.expr.setPair(p,q);
      cons.type=Constants.ASSIGN_CONS;
      intercall.setPair((VarNode)object,element0);
      cons.interCallEdges=lookupEdgesForAssignment(intercall);
      constraints.add(cons);
    }
  }
  intercall=null;
  assign2edges.clear();
  for (  Object object : loadSources()) {
    FieldRefNode frn=(FieldRefNode)object;
    IVarAbstraction p=makeInternalNode(frn.getBase());
    Node[] succs=loadLookup(frn);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      IVarAbstraction q=makeInternalNode(element0);
      cons.f=frn.getField();
      cons.expr.setPair(p,q);
      cons.type=Constants.LOAD_CONS;
      constraints.add(cons);
    }
  }
  for (  Object object : storeSources()) {
    IVarAbstraction p=makeInternalNode((VarNode)object);
    Node[] succs=storeLookup((VarNode)object);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      FieldRefNode frn=(FieldRefNode)element0;
      IVarAbstraction q=makeInternalNode(frn.getBase());
      cons.f=frn.getField();
      cons.expr.setPair(p,q);
      cons.type=Constants.STORE_CONS;
      constraints.add(cons);
    }
  }
  n_init_constraints=constraints.size();
  low_cg=new int[n_func];
  vis_cg=new int[n_func];
  rep_cg=new int[n_func];
  indeg_cg=new int[n_func];
  scc_size=new int[n_func];
  block_num=new int[n_func];
  context_size=new long[n_func];
  max_context_size_block=new long[n_func];
}"
85305,"/** 
 * Returns the RefType with the given class name or primitive type.  
 * @throws RuntimeException if the Type for this name cannot be found.Use  {@link #getRefTypeUnsafe(String)} to check if type is an registered RefType.
 */
public Type getType(String arg){
  String type=arg.replaceAll(""String_Node_Str"",""String_Node_Str"");
  int arrayCount=arg.contains(""String_Node_Str"") ? arg.replaceAll(""String_Node_Str"",""String_Node_Str"").length() / 2 : 0;
  Type result=getRefTypeUnsafe(type);
  if (result == null) {
switch (type) {
case ""String_Node_Str"":
      result=LongType.v();
    break;
case ""String_Node_Str"":
  result=ShortType.v();
break;
case ""String_Node_Str"":
result=DoubleType.v();
break;
case ""String_Node_Str"":
result=IntType.v();
break;
case ""String_Node_Str"":
result=FloatType.v();
break;
case ""String_Node_Str"":
result=ByteType.v();
break;
case ""String_Node_Str"":
result=CharType.v();
break;
case ""String_Node_Str"":
result=VoidType.v();
break;
case ""String_Node_Str"":
result=BooleanType.v();
break;
default :
throw new RuntimeException(""String_Node_Str"" + type + ""String_Node_Str"");
}
}
if (arrayCount != 0) {
result=ArrayType.v(result,arrayCount);
}
return result;
}","/** 
 * Returns the RefType with the given class name or primitive type.  
 * @throws RuntimeException if the Type for this name cannot be found.Use  {@link #getRefTypeUnsafe(String)} to check if type is an registered RefType.
 */
public Type getType(String arg){
  String type=arg.replaceAll(""String_Node_Str"",""String_Node_Str"");
  int arrayCount=arg.contains(""String_Node_Str"") ? arg.replaceAll(""String_Node_Str"",""String_Node_Str"").length() / 2 : 0;
  Type result=getRefTypeUnsafe(type);
  if (result == null) {
    if (type.equals(""String_Node_Str""))     result=LongType.v();
 else     if (type.equals(""String_Node_Str""))     result=ShortType.v();
 else     if (type.equals(""String_Node_Str""))     result=DoubleType.v();
 else     if (type.equals(""String_Node_Str""))     result=IntType.v();
 else     if (type.equals(""String_Node_Str""))     result=FloatType.v();
 else     if (type.equals(""String_Node_Str""))     result=ByteType.v();
 else     if (type.equals(""String_Node_Str""))     result=CharType.v();
 else     if (type.equals(""String_Node_Str""))     result=VoidType.v();
 else     if (type.equals(""String_Node_Str""))     result=BooleanType.v();
 else     throw new RuntimeException(""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (arrayCount != 0) {
    result=ArrayType.v(result,arrayCount);
  }
  return result;
}"
85306,"/** 
 * <p> Returns a <code>ThrowableSet</code> representing the set of exceptions included in <code>include</code> minus the set of exceptions included in <code>exclude</code>. Creates a new <code>ThrowableSet</code> only if there was not already one whose contents correspond to <code>include</code> - <code>exclude</code>. </p>
 * @param include A set of  {@link RefLikeType} objects representingexception types included in the result; may be <code>null</code> if there are no included types.
 * @param exclude A set of  {@link AnySubType} objects representing exceptiontypes excluded from the result; may be <code>null</code> if there are no excluded types.
 * @return a <code>ThrowableSet</code> representing the set ofexceptions corresponding to <code>include</code> - <code>exclude</code>.
 */
private ThrowableSet registerSetIfNew(Set<RefLikeType> include,Set<AnySubType> exclude){
  if (INSTRUMENTING) {
    registrationCalls++;
  }
  ThrowableSet result=new ThrowableSet(include,exclude);
  Reference<ThrowableSet> ref=registry.get(result);
  if (null != ref) {
    ThrowableSet old=ref.get();
    if (null != old)     return old;
  }
  registry.put(result,new WeakReference<ThrowableSet>(result));
  return result;
}","/** 
 * <p> Returns a <code>ThrowableSet</code> representing the set of exceptions included in <code>include</code> minus the set of exceptions included in <code>exclude</code>. Creates a new <code>ThrowableSet</code> only if there was not already one whose contents correspond to <code>include</code> - <code>exclude</code>. </p>
 * @param include A set of  {@link RefLikeType} objects representingexception types included in the result; may be <code>null</code> if there are no included types.
 * @param exclude A set of  {@link AnySubType} objects representing exceptiontypes excluded from the result; may be <code>null</code> if there are no excluded types.
 * @return a <code>ThrowableSet</code> representing the set ofexceptions corresponding to <code>include</code> - <code>exclude</code>.
 */
private ThrowableSet registerSetIfNew(Set<RefLikeType> include,Set<AnySubType> exclude){
  if (INSTRUMENTING) {
    registrationCalls++;
  }
  ThrowableSet result=new ThrowableSet(include,exclude);
  ThrowableSet ref=registry.get(result);
  if (null != ref) {
    return ref;
  }
  registry.put(result,result);
  return result;
}"
85307,"private void emitUnits(){
  AbstractInsnNode insn=instructions.getFirst();
  ArrayDeque<LabelNode> labls=new ArrayDeque<LabelNode>();
  while (insn != null) {
    if (insn instanceof LabelNode)     labls.add((LabelNode)insn);
    Unit u=units.get(insn);
    if (u == null) {
      insn=insn.getNext();
      continue;
    }
    emitUnits(u);
    if (insn instanceof LabelNode && u instanceof IdentityStmt && ((IdentityStmt)u).getRightOp() instanceof CaughtExceptionRef) {
      Collection<UnitBox> traps=trapHandlers.get((LabelNode)insn);
      for (      UnitBox ub : traps)       ub.setUnit(u);
    }
    while (!labls.isEmpty()) {
      LabelNode ln=labls.poll();
      Collection<UnitBox> boxes=labels.get(ln);
      if (boxes != null) {
        for (        UnitBox box : boxes) {
          Unit uu=u;
          while (uu instanceof UnitContainer)           uu=((UnitContainer)u).units[0];
          box.setUnit(uu);
        }
      }
    }
    insn=insn.getNext();
  }
  if (labls.isEmpty())   return;
  Unit end=Jimple.v().newNopStmt();
  body.getUnits().add(end);
  while (!labls.isEmpty()) {
    LabelNode ln=labls.poll();
    Collection<UnitBox> boxes=labels.get(ln);
    if (boxes != null) {
      for (      UnitBox box : boxes)       box.setUnit(end);
    }
  }
}","private void emitUnits(){
  AbstractInsnNode insn=instructions.getFirst();
  ArrayDeque<LabelNode> labls=new ArrayDeque<LabelNode>();
  while (insn != null) {
    if (insn instanceof LabelNode)     labls.add((LabelNode)insn);
    Unit u=units.get(insn);
    if (u == null) {
      insn=insn.getNext();
      continue;
    }
    emitUnits(u);
    if (insn instanceof LabelNode && u instanceof IdentityStmt && ((IdentityStmt)u).getRightOp() instanceof CaughtExceptionRef) {
      Collection<UnitBox> traps=trapHandlers.get((LabelNode)insn);
      for (      UnitBox ub : traps)       ub.setUnit(u);
    }
    while (!labls.isEmpty()) {
      LabelNode ln=labls.poll();
      Collection<UnitBox> boxes=labels.get(ln);
      if (boxes != null) {
        for (        UnitBox box : boxes) {
          Unit uu=u;
          while (uu instanceof UnitContainer)           uu=((UnitContainer)uu).units[0];
          box.setUnit(uu);
        }
      }
    }
    insn=insn.getNext();
  }
  if (labls.isEmpty())   return;
  Unit end=Jimple.v().newNopStmt();
  body.getUnits().add(end);
  while (!labls.isEmpty()) {
    LabelNode ln=labls.poll();
    Collection<UnitBox> boxes=labels.get(ln);
    if (boxes != null) {
      for (      UnitBox box : boxes)       box.setUnit(end);
    }
  }
}"
85308,"public void resolve(Type t,Type declaredType,Type sigType,NumberedString subSig,SootMethod container,ChunkedQueue<SootMethod> targets){
  if (declaredType instanceof ArrayType)   declaredType=RefType.v(""String_Node_Str"");
  if (sigType instanceof ArrayType)   sigType=RefType.v(""String_Node_Str"");
  if (t instanceof ArrayType)   t=RefType.v(""String_Node_Str"");
  FastHierarchy fastHierachy=Scene.v().getOrMakeFastHierarchy();
  if (declaredType != null && !fastHierachy.canStoreType(t,declaredType)) {
    return;
  }
  if (sigType != null && !fastHierachy.canStoreType(t,sigType)) {
    return;
  }
  if (t instanceof RefType) {
    SootMethod target=resolveNonSpecial((RefType)t,subSig);
    if (target != null)     targets.add(target);
  }
 else   if (t instanceof AnySubType) {
    RefType base=((AnySubType)t).getBase();
    if (options.library() == CGOptions.library_name_resolution && base.getSootClass().isInterface()) {
      assert(declaredType instanceof RefType);
      Pair<Type,NumberedString> pair=new Pair<Type,NumberedString>(base,subSig);
      List<Type> types=baseToPossibleSubTypes.get(pair);
      if (types != null) {
        for (        Type st : types) {
          if (!fastHierachy.canStoreType(st,declaredType)) {
            resolve(st,st,sigType,subSig,container,targets);
          }
 else {
            resolve(st,declaredType,sigType,subSig,container,targets);
          }
        }
        return;
      }
      baseToPossibleSubTypes.put(pair,types=new ArrayList<Type>());
      types.add(base);
      String[] split=subSig.getString().replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      Type declaredReturnType=Scene.v().getType(split[0]);
      String declaredName=split[1];
      List<Type> declaredParamTypes=new ArrayList<Type>();
      if (split.length == 3) {
        for (        String type : split[2].split(""String_Node_Str"")) {
          declaredParamTypes.add(Scene.v().getType(type));
        }
      }
      Chain<SootClass> classes=Scene.v().getClasses();
      for (      SootClass sc : classes) {
        for (        SootMethod sm : sc.getMethods()) {
          if (sm.isConcrete() || sm.isNative()) {
            if (!sm.getName().equals(declaredName))             continue;
            if (!fastHierachy.canStoreType(sm.getReturnType(),declaredReturnType))             continue;
            List<Type> paramTypes=sm.getParameterTypes();
            if (declaredParamTypes.size() != paramTypes.size())             continue;
            boolean check=true;
            for (int i=0; i < paramTypes.size(); i++) {
              if (!fastHierachy.canStoreType(paramTypes.get(i),declaredParamTypes.get(i))) {
                check=false;
                break;
              }
            }
            if (check) {
              Type st=sc.getType();
              if (!fastHierachy.canStoreType(st,declaredType)) {
                if (!sc.isFinal()) {
                  resolve(st,st,sigType,subSig,container,targets);
                  types.add(st);
                }
              }
 else {
                resolve(st,declaredType,sigType,subSig,container,targets);
                types.add(st);
              }
            }
          }
        }
      }
    }
 else {
      List<Type> subTypes=baseToSubTypes.get(base);
      if (subTypes != null) {
        for (Iterator<Type> stIt=subTypes.iterator(); stIt.hasNext(); ) {
          final Type st=stIt.next();
          resolve(st,declaredType,sigType,subSig,container,targets);
        }
        return;
      }
      baseToSubTypes.put(base,subTypes=new ArrayList<Type>());
      subTypes.add(base);
      LinkedList<SootClass> worklist=new LinkedList<SootClass>();
      HashSet<SootClass> workset=new HashSet<SootClass>();
      FastHierarchy fh=fastHierachy;
      SootClass cl=base.getSootClass();
      if (workset.add(cl))       worklist.add(cl);
      while (!worklist.isEmpty()) {
        cl=worklist.removeFirst();
        if (cl.isInterface()) {
          for (Iterator<SootClass> cIt=fh.getAllImplementersOfInterface(cl).iterator(); cIt.hasNext(); ) {
            final SootClass c=cIt.next();
            if (workset.add(c))             worklist.add(c);
          }
        }
 else {
          if (cl.isConcrete()) {
            resolve(cl.getType(),declaredType,sigType,subSig,container,targets);
            subTypes.add(cl.getType());
          }
          for (Iterator<SootClass> cIt=fh.getSubclassesOf(cl).iterator(); cIt.hasNext(); ) {
            final SootClass c=cIt.next();
            if (workset.add(c))             worklist.add(c);
          }
        }
      }
    }
  }
 else   if (t instanceof NullType) {
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + t);
  }
}","public void resolve(Type t,Type declaredType,Type sigType,NumberedString subSig,SootMethod container,ChunkedQueue<SootMethod> targets){
  if (declaredType instanceof ArrayType)   declaredType=RefType.v(""String_Node_Str"");
  if (sigType instanceof ArrayType)   sigType=RefType.v(""String_Node_Str"");
  if (t instanceof ArrayType)   t=RefType.v(""String_Node_Str"");
  FastHierarchy fastHierachy=Scene.v().getOrMakeFastHierarchy();
  if (declaredType != null && !fastHierachy.canStoreType(t,declaredType)) {
    return;
  }
  if (sigType != null && !fastHierachy.canStoreType(t,sigType)) {
    return;
  }
  if (t instanceof RefType) {
    SootMethod target=resolveNonSpecial((RefType)t,subSig);
    if (target != null)     targets.add(target);
  }
 else   if (t instanceof AnySubType) {
    RefType base=((AnySubType)t).getBase();
    if (options.library() == CGOptions.library_name_resolution && base.getSootClass().isInterface()) {
      assert(declaredType instanceof RefType);
      Pair<Type,NumberedString> pair=new Pair<Type,NumberedString>(base,subSig);
      List<Pair<Type,NumberedString>> types=baseToPossibleSubTypes.get(pair);
      if (types != null) {
        for (        Pair<Type,NumberedString> tuple : types) {
          Type st=tuple.getO1();
          if (!fastHierachy.canStoreType(st,declaredType)) {
            resolve(st,st,sigType,subSig,container,targets);
          }
 else {
            resolve(st,declaredType,sigType,subSig,container,targets);
          }
        }
        return;
      }
      baseToPossibleSubTypes.put(pair,types=new ArrayList<Pair<Type,NumberedString>>());
      String[] split=subSig.getString().replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      Type declaredReturnType=Scene.v().getType(split[0]);
      String declaredName=split[1];
      List<Type> declaredParamTypes=new ArrayList<Type>();
      if (split.length == 3) {
        for (        String type : split[2].split(""String_Node_Str"")) {
          declaredParamTypes.add(Scene.v().getType(type));
        }
      }
      Chain<SootClass> classes=Scene.v().getClasses();
      for (      SootClass sc : classes) {
        for (        SootMethod sm : sc.getMethods()) {
          if (sm.isConcrete() || sm.isNative()) {
            if (!sm.getName().equals(declaredName))             continue;
            if (!fastHierachy.canStoreType(sm.getReturnType(),declaredReturnType))             continue;
            List<Type> paramTypes=sm.getParameterTypes();
            if (declaredParamTypes.size() != paramTypes.size())             continue;
            boolean check=true;
            for (int i=0; i < paramTypes.size(); i++) {
              if (!fastHierachy.canStoreType(declaredParamTypes.get(i),paramTypes.get(i))) {
                check=false;
                break;
              }
            }
            if (check) {
              Type st=sc.getType();
              if (!fastHierachy.canStoreType(st,declaredType)) {
                if (!sc.isFinal()) {
                  resolve(st,st,sigType,sm.getNumberedSubSignature(),container,targets);
                  types.add(new Pair<Type,NumberedString>(st,sm.getNumberedSubSignature()));
                }
              }
 else {
                resolve(st,declaredType,sigType,subSig,container,targets);
                types.add(new Pair<Type,NumberedString>(st,subSig));
              }
            }
          }
        }
      }
    }
 else {
      List<Type> subTypes=baseToSubTypes.get(base);
      if (subTypes != null) {
        for (Iterator<Type> stIt=subTypes.iterator(); stIt.hasNext(); ) {
          final Type st=stIt.next();
          resolve(st,declaredType,sigType,subSig,container,targets);
        }
        return;
      }
      baseToSubTypes.put(base,subTypes=new ArrayList<Type>());
      subTypes.add(base);
      LinkedList<SootClass> worklist=new LinkedList<SootClass>();
      HashSet<SootClass> workset=new HashSet<SootClass>();
      FastHierarchy fh=fastHierachy;
      SootClass cl=base.getSootClass();
      if (workset.add(cl))       worklist.add(cl);
      while (!worklist.isEmpty()) {
        cl=worklist.removeFirst();
        if (cl.isInterface()) {
          for (Iterator<SootClass> cIt=fh.getAllImplementersOfInterface(cl).iterator(); cIt.hasNext(); ) {
            final SootClass c=cIt.next();
            if (workset.add(c))             worklist.add(c);
          }
        }
 else {
          if (cl.isConcrete()) {
            resolve(cl.getType(),declaredType,sigType,subSig,container,targets);
            subTypes.add(cl.getType());
          }
          for (Iterator<SootClass> cIt=fh.getSubclassesOf(cl).iterator(); cIt.hasNext(); ) {
            final SootClass c=cIt.next();
            if (workset.add(c))             worklist.add(c);
          }
        }
      }
    }
  }
 else   if (t instanceof NullType) {
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + t);
  }
}"
85309,"/** 
 * Returns a list of superinterfaces of c, excluding itself. 
 */
public List<SootClass> getSuperinterfacesOf(SootClass c){
  c.checkLevel(SootClass.HIERARCHY);
  if (!c.isInterface())   throw new RuntimeException(""String_Node_Str"");
  checkState();
  if (interfaceToSuperinterfaces.get(c) != null)   return interfaceToSuperinterfaces.get(c);
  List<SootClass> l=new ArrayList<SootClass>();
  for (  SootClass si : interfaceToDirSuperinterfaces.get(c)) {
    l.addAll(getSuperinterfacesOfIncluding(si));
  }
  interfaceToSuperinterfaces.put(c,Collections.unmodifiableList(l));
  return Collections.unmodifiableList(l);
}","/** 
 * Returns a list of superinterfaces of c, excluding itself. 
 */
public List<SootClass> getSuperinterfacesOf(SootClass c){
  c.checkLevel(SootClass.HIERARCHY);
  if (!c.isInterface())   throw new RuntimeException(""String_Node_Str"");
  checkState();
  List<SootClass> cached=interfaceToSuperinterfaces.get(c);
  if (cached != null)   return cached;
  List<SootClass> l=new ArrayList<SootClass>();
  for (  SootClass si : interfaceToDirSuperinterfaces.get(c)) {
    l.addAll(getSuperinterfacesOfIncluding(si));
  }
  interfaceToSuperinterfaces.put(c,Collections.unmodifiableList(l));
  return Collections.unmodifiableList(l);
}"
85310,"public void setMainClassFromOptions(){
  if (mainClass != null)   return;
  if (Options.v().main_class() != null && Options.v().main_class().length() > 0) {
    setMainClass(getSootClass(Options.v().main_class()));
  }
 else {
    for (Iterator<String> classIter=Options.v().classes().iterator(); classIter.hasNext(); ) {
      SootClass c=getSootClass(classIter.next());
      if (c.declaresMethod(""String_Node_Str"",Collections.<Type>singletonList(ArrayType.v(RefType.v(""String_Node_Str""),1)),VoidType.v())) {
        G.v().out.println(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
        setMainClass(c);
        return;
      }
    }
    for (Iterator<SootClass> classIter=getApplicationClasses().iterator(); classIter.hasNext(); ) {
      SootClass c=(SootClass)classIter.next();
      if (c.declaresMethod(""String_Node_Str"",Collections.<Type>singletonList(ArrayType.v(RefType.v(""String_Node_Str""),1)),VoidType.v())) {
        G.v().out.println(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
        setMainClass(c);
        return;
      }
    }
  }
}","public void setMainClassFromOptions(){
  if (mainClass != null)   return;
  if (Options.v().main_class() != null && Options.v().main_class().length() > 0) {
    setMainClass(getSootClass(Options.v().main_class()));
  }
 else {
    for (Iterator<String> classIter=Options.v().classes().iterator(); classIter.hasNext(); ) {
      SootClass c=getSootClass(classIter.next());
      if (c.declaresMethod(""String_Node_Str"",Collections.<Type>singletonList(ArrayType.v(RefType.v(""String_Node_Str""),1)),VoidType.v())) {
        G.v().out.println(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
        setMainClass(c);
        return;
      }
    }
    for (Iterator<SootClass> classIter=getApplicationClasses().iterator(); classIter.hasNext(); ) {
      SootClass c=classIter.next();
      if (c.declaresMethod(""String_Node_Str"",Collections.<Type>singletonList(ArrayType.v(RefType.v(""String_Node_Str""),1)),VoidType.v())) {
        G.v().out.println(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
        setMainClass(c);
        return;
      }
    }
  }
}"
85311,"/** 
 * Returns the list of SootClasses that have been resolved at least to  the level specified. 
 */
public List<SootClass> getClasses(int desiredLevel){
  List<SootClass> ret=new ArrayList<SootClass>();
  for (Iterator<SootClass> clIt=getClasses().iterator(); clIt.hasNext(); ) {
    final SootClass cl=(SootClass)clIt.next();
    if (cl.resolvingLevel() >= desiredLevel)     ret.add(cl);
  }
  return ret;
}","/** 
 * Returns the list of SootClasses that have been resolved at least to  the level specified. 
 */
public List<SootClass> getClasses(int desiredLevel){
  List<SootClass> ret=new ArrayList<SootClass>();
  for (Iterator<SootClass> clIt=getClasses().iterator(); clIt.hasNext(); ) {
    final SootClass cl=clIt.next();
    if (cl.resolvingLevel() >= desiredLevel)     ret.add(cl);
  }
  return ret;
}"
85312,"public void loadDynamicClasses(){
  dynamicClasses=new ArrayList<SootClass>();
  HashSet<String> dynClasses=new HashSet<String>();
  dynClasses.addAll(Options.v().dynamic_class());
  for (Iterator<String> pathIt=Options.v().dynamic_dir().iterator(); pathIt.hasNext(); ) {
    final String path=(String)pathIt.next();
    dynClasses.addAll(SourceLocator.v().getClassesUnder(path));
  }
  for (Iterator<String> pkgIt=Options.v().dynamic_package().iterator(); pkgIt.hasNext(); ) {
    final String pkg=(String)pkgIt.next();
    dynClasses.addAll(SourceLocator.v().classesInDynamicPackage(pkg));
  }
  for (  String className : dynClasses) {
    dynamicClasses.add(loadClassAndSupport(className));
  }
  for (Iterator<SootClass> iterator=dynamicClasses.iterator(); iterator.hasNext(); ) {
    SootClass c=iterator.next();
    if (!c.isConcrete()) {
      if (Options.v().verbose()) {
        G.v().out.println(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
      iterator.remove();
    }
  }
}","public void loadDynamicClasses(){
  dynamicClasses=new ArrayList<SootClass>();
  HashSet<String> dynClasses=new HashSet<String>();
  dynClasses.addAll(Options.v().dynamic_class());
  for (Iterator<String> pathIt=Options.v().dynamic_dir().iterator(); pathIt.hasNext(); ) {
    final String path=pathIt.next();
    dynClasses.addAll(SourceLocator.v().getClassesUnder(path));
  }
  for (Iterator<String> pkgIt=Options.v().dynamic_package().iterator(); pkgIt.hasNext(); ) {
    final String pkg=pkgIt.next();
    dynClasses.addAll(SourceLocator.v().classesInDynamicPackage(pkg));
  }
  for (  String className : dynClasses) {
    dynamicClasses.add(loadClassAndSupport(className));
  }
  for (Iterator<SootClass> iterator=dynamicClasses.iterator(); iterator.hasNext(); ) {
    SootClass c=iterator.next();
    if (!c.isConcrete()) {
      if (Options.v().verbose()) {
        G.v().out.println(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
      iterator.remove();
    }
  }
}"
85313,"public void resolve(Type t,Type declaredType,Type sigType,NumberedString subSig,SootMethod container,ChunkedQueue<SootMethod> targets){
  if (declaredType instanceof ArrayType)   declaredType=RefType.v(""String_Node_Str"");
  if (sigType instanceof ArrayType)   sigType=RefType.v(""String_Node_Str"");
  if (t instanceof ArrayType)   t=RefType.v(""String_Node_Str"");
  if (declaredType != null && !Scene.v().getOrMakeFastHierarchy().canStoreType(t,declaredType)) {
    return;
  }
  if (sigType != null && !Scene.v().getOrMakeFastHierarchy().canStoreType(t,sigType)) {
    return;
  }
  if (t instanceof RefType) {
    SootMethod target=resolveNonSpecial((RefType)t,subSig);
    if (target != null)     targets.add(target);
  }
 else   if (t instanceof AnySubType) {
    if (options.library() == CGOptions.library_name_resolution) {
      RefType base=((AnySubType)t).getBase();
      Pair<Type,NumberedString> pair=new Pair<Type,NumberedString>(base,subSig);
      List<Type> types=baseToPossibleSubTypes.get(pair);
      if (types != null) {
        for (        Type st : types) {
          if (!Scene.v().getOrMakeFastHierarchy().canStoreType(st,declaredType)) {
            resolve(st,st,sigType,subSig,container,targets);
          }
 else {
            resolve(st,declaredType,sigType,subSig,container,targets);
          }
        }
        return;
      }
      baseToPossibleSubTypes.put(pair,types=new ArrayList<Type>());
      types.add(base);
      Chain<SootClass> classes=Scene.v().getClasses();
      for (      SootClass sc : classes) {
        for (        SootMethod sm : sc.getMethods()) {
          if ((sm.isConcrete() || sm.isNative()) && sm.getSubSignature().equals(subSig.getString())) {
            Type st=sc.getType();
            if (!Scene.v().getOrMakeFastHierarchy().canStoreType(st,declaredType)) {
              resolve(st,st,sigType,subSig,container,targets);
            }
 else {
              resolve(st,declaredType,sigType,subSig,container,targets);
            }
            types.add(st);
          }
        }
      }
    }
 else {
      RefType base=((AnySubType)t).getBase();
      List<Type> subTypes=baseToSubTypes.get(base);
      if (subTypes != null) {
        for (Iterator<Type> stIt=subTypes.iterator(); stIt.hasNext(); ) {
          final Type st=stIt.next();
          resolve(st,declaredType,sigType,subSig,container,targets);
        }
        return;
      }
      baseToSubTypes.put(base,subTypes=new ArrayList<Type>());
      subTypes.add(base);
      LinkedList<SootClass> worklist=new LinkedList<SootClass>();
      HashSet<SootClass> workset=new HashSet<SootClass>();
      FastHierarchy fh=Scene.v().getOrMakeFastHierarchy();
      SootClass cl=base.getSootClass();
      if (workset.add(cl))       worklist.add(cl);
      while (!worklist.isEmpty()) {
        cl=worklist.removeFirst();
        if (cl.isInterface()) {
          for (Iterator<SootClass> cIt=fh.getAllImplementersOfInterface(cl).iterator(); cIt.hasNext(); ) {
            final SootClass c=cIt.next();
            if (workset.add(c))             worklist.add(c);
          }
        }
 else {
          if (cl.isConcrete()) {
            resolve(cl.getType(),declaredType,sigType,subSig,container,targets);
            subTypes.add(cl.getType());
          }
          for (Iterator<SootClass> cIt=fh.getSubclassesOf(cl).iterator(); cIt.hasNext(); ) {
            final SootClass c=cIt.next();
            if (workset.add(c))             worklist.add(c);
          }
        }
      }
    }
  }
 else   if (t instanceof NullType) {
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + t);
  }
}","public void resolve(Type t,Type declaredType,Type sigType,NumberedString subSig,SootMethod container,ChunkedQueue<SootMethod> targets){
  if (declaredType instanceof ArrayType)   declaredType=RefType.v(""String_Node_Str"");
  if (sigType instanceof ArrayType)   sigType=RefType.v(""String_Node_Str"");
  if (t instanceof ArrayType)   t=RefType.v(""String_Node_Str"");
  FastHierarchy fastHierachy=Scene.v().getOrMakeFastHierarchy();
  if (declaredType != null && !fastHierachy.canStoreType(t,declaredType)) {
    return;
  }
  if (sigType != null && !fastHierachy.canStoreType(t,sigType)) {
    return;
  }
  if (t instanceof RefType) {
    SootMethod target=resolveNonSpecial((RefType)t,subSig);
    if (target != null)     targets.add(target);
  }
 else   if (t instanceof AnySubType) {
    if (options.library() == CGOptions.library_name_resolution) {
      assert(declaredType instanceof RefType);
      RefType base=((AnySubType)t).getBase();
      Pair<Type,NumberedString> pair=new Pair<Type,NumberedString>(base,subSig);
      List<Type> types=baseToPossibleSubTypes.get(pair);
      if (types != null) {
        for (        Type st : types) {
          if (!fastHierachy.canStoreType(st,declaredType)) {
            resolve(st,st,sigType,subSig,container,targets);
          }
 else {
            resolve(st,declaredType,sigType,subSig,container,targets);
          }
        }
        return;
      }
      baseToPossibleSubTypes.put(pair,types=new ArrayList<Type>());
      types.add(base);
      String[] split=subSig.getString().replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      Type declaredReturnType=Scene.v().getType(split[0]);
      String declaredName=split[1];
      List<Type> declaredParamTypes=new ArrayList<Type>();
      if (split.length == 3) {
        for (        String type : split[2].split(""String_Node_Str"")) {
          declaredParamTypes.add(Scene.v().getType(type));
        }
      }
      Chain<SootClass> classes=Scene.v().getClasses();
      for (      SootClass sc : classes) {
        for (        SootMethod sm : sc.getMethods()) {
          if (sm.isConcrete() || sm.isNative()) {
            if (!sm.getName().equals(declaredName))             continue;
            if (!fastHierachy.canStoreType(sm.getReturnType(),declaredReturnType))             continue;
            List<Type> paramTypes=sm.getParameterTypes();
            if (declaredParamTypes.size() != paramTypes.size())             continue;
            boolean check=true;
            for (int i=0; i < paramTypes.size(); i++) {
              if (!fastHierachy.canStoreType(paramTypes.get(i),declaredParamTypes.get(i))) {
                check=false;
                break;
              }
            }
            if (check) {
              Type st=sc.getType();
              if (!fastHierachy.canStoreType(st,declaredType)) {
                resolve(st,st,sigType,subSig,container,targets);
              }
 else {
                resolve(st,declaredType,sigType,subSig,container,targets);
              }
              types.add(st);
            }
          }
        }
      }
    }
 else {
      RefType base=((AnySubType)t).getBase();
      List<Type> subTypes=baseToSubTypes.get(base);
      if (subTypes != null) {
        for (Iterator<Type> stIt=subTypes.iterator(); stIt.hasNext(); ) {
          final Type st=stIt.next();
          resolve(st,declaredType,sigType,subSig,container,targets);
        }
        return;
      }
      baseToSubTypes.put(base,subTypes=new ArrayList<Type>());
      subTypes.add(base);
      LinkedList<SootClass> worklist=new LinkedList<SootClass>();
      HashSet<SootClass> workset=new HashSet<SootClass>();
      FastHierarchy fh=fastHierachy;
      SootClass cl=base.getSootClass();
      if (workset.add(cl))       worklist.add(cl);
      while (!worklist.isEmpty()) {
        cl=worklist.removeFirst();
        if (cl.isInterface()) {
          for (Iterator<SootClass> cIt=fh.getAllImplementersOfInterface(cl).iterator(); cIt.hasNext(); ) {
            final SootClass c=cIt.next();
            if (workset.add(c))             worklist.add(c);
          }
        }
 else {
          if (cl.isConcrete()) {
            resolve(cl.getType(),declaredType,sigType,subSig,container,targets);
            subTypes.add(cl.getType());
          }
          for (Iterator<SootClass> cIt=fh.getSubclassesOf(cl).iterator(); cIt.hasNext(); ) {
            final SootClass c=cIt.next();
            if (workset.add(c))             worklist.add(c);
          }
        }
      }
    }
  }
 else   if (t instanceof NullType) {
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + t);
  }
}"
85314,"private void setupJAR(){
  if (Options.v().output_jar()) {
    String outFileName=SourceLocator.v().getOutputDir();
    try {
      jarFile=new JarOutputStream(new FileOutputStream(outFileName));
    }
 catch (    IOException e) {
      throw new CompilationDeathException(""String_Node_Str"" + outFileName);
    }
  }
 else {
    jarFile=null;
  }
}","private void setupJAR(){
  if (Options.v().output_jar()) {
    String outFileName=SourceLocator.v().getOutputJarName();
    try {
      jarFile=new JarOutputStream(new FileOutputStream(outFileName));
    }
 catch (    IOException e) {
      throw new CompilationDeathException(""String_Node_Str"" + outFileName);
    }
  }
 else {
    jarFile=null;
  }
}"
85315,"public String getOutputDir(){
  String ret=Options.v().output_dir();
  if (ret.length() == 0) {
    ret=""String_Node_Str"";
    if (Options.v().output_jar()) {
      ret+=File.separatorChar + ""String_Node_Str"";
    }
  }
  File dir=new File(ret);
  if (!dir.exists()) {
    try {
      if (!Options.v().output_jar()) {
        dir.mkdirs();
      }
 else {
        dir.getParentFile().mkdirs();
      }
    }
 catch (    SecurityException se) {
      G.v().out.println(""String_Node_Str"" + ret);
      throw new CompilationDeathException(CompilationDeathException.COMPILATION_ABORTED);
    }
  }
  return ret;
}","/** 
 * Returns the output directory given by   {@link Options} or a default if notset. Also ensures that all directories in the path exist.
 * @return the output directory from {@link Options} or a default if not set
 */
public String getOutputDir(){
  File dir;
  if (Options.v().output_dir().length() == 0) {
    dir=new File(""String_Node_Str"");
  }
 else {
    dir=new File(Options.v().output_dir());
    if (dir.getPath().endsWith(""String_Node_Str"")) {
      dir=dir.getParentFile();
      if (dir == null) {
        dir=new File(""String_Node_Str"");
      }
    }
  }
  ensureDirectoryExists(dir);
  return dir.getPath();
}"
85316,"private String getDavaFilenameFor(SootClass c,StringBuffer b){
  b.append(""String_Node_Str"");
  b.append(File.separatorChar);
{
    String classPath=b.toString() + ""String_Node_Str"";
    File dir=new File(classPath);
    if (!dir.exists())     try {
      dir.mkdirs();
    }
 catch (    SecurityException se) {
      G.v().out.println(""String_Node_Str"" + classPath);
      throw new CompilationDeathException(CompilationDeathException.COMPILATION_ABORTED);
    }
  }
  b.append(""String_Node_Str"");
  b.append(File.separatorChar);
  String fixedPackageName=c.getJavaPackageName();
  if (fixedPackageName.equals(""String_Node_Str"") == false) {
    b.append(fixedPackageName.replace('.',File.separatorChar));
    b.append(File.separatorChar);
  }
{
    String path=b.toString();
    File dir=new File(path);
    if (!dir.exists())     try {
      dir.mkdirs();
    }
 catch (    SecurityException se) {
      G.v().out.println(""String_Node_Str"" + path);
      throw new CompilationDeathException(CompilationDeathException.COMPILATION_ABORTED);
    }
  }
  b.append(c.getShortJavaStyleName());
  b.append(""String_Node_Str"");
  return b.toString();
}","private String getDavaFilenameFor(SootClass c,StringBuffer b){
  b.append(""String_Node_Str"");
  b.append(File.separatorChar);
  ensureDirectoryExists(new File(b.toString() + ""String_Node_Str""));
  b.append(""String_Node_Str"");
  b.append(File.separatorChar);
  String fixedPackageName=c.getJavaPackageName();
  if (!fixedPackageName.equals(""String_Node_Str"")) {
    b.append(fixedPackageName.replace('.',File.separatorChar));
    b.append(File.separatorChar);
  }
  ensureDirectoryExists(new File(b.toString()));
  b.append(c.getShortJavaStyleName());
  b.append(""String_Node_Str"");
  return b.toString();
}"
85317,"public void resolve(Type t,Type declaredType,Type sigType,NumberedString subSig,SootMethod container,ChunkedQueue<SootMethod> targets){
  if (declaredType instanceof ArrayType)   declaredType=RefType.v(""String_Node_Str"");
  if (sigType instanceof ArrayType)   sigType=RefType.v(""String_Node_Str"");
  if (t instanceof ArrayType)   t=RefType.v(""String_Node_Str"");
  if (declaredType != null && !Scene.v().getOrMakeFastHierarchy().canStoreType(t,declaredType)) {
    return;
  }
  if (sigType != null && !Scene.v().getOrMakeFastHierarchy().canStoreType(t,sigType)) {
    return;
  }
  if (t instanceof RefType) {
    SootMethod target=resolveNonSpecial((RefType)t,subSig);
    if (target != null)     targets.add(target);
  }
 else   if (t instanceof AnySubType) {
    if (options.library() == CGOptions.library_name_resolution) {
      RefType base=((AnySubType)t).getBase();
      Pair<Type,NumberedString> pair=new Pair<Type,NumberedString>(base,subSig);
      List<Type> types=baseToPossibleSubTypes.get(pair);
      if (types != null) {
        for (        Type st : types) {
          if (!Scene.v().getOrMakeFastHierarchy().canStoreType(st,declaredType)) {
            resolve(st,st,sigType,subSig,container,targets);
          }
 else {
            resolve(st,declaredType,sigType,subSig,container,targets);
          }
        }
        return;
      }
      baseToPossibleSubTypes.put(pair,types=new ArrayList<Type>());
      types.add(base);
      Chain<SootClass> classes=Scene.v().getClasses();
      for (      SootClass sc : classes) {
        for (        SootMethod sm : sc.getMethods()) {
          if (sm.isConcrete() && sm.getSubSignature().equals(subSig.getString())) {
            Type st=sc.getType();
            if (!Scene.v().getOrMakeFastHierarchy().canStoreType(st,declaredType)) {
              resolve(st,st,sigType,subSig,container,targets);
            }
 else {
              resolve(st,declaredType,sigType,subSig,container,targets);
            }
            types.add(st);
          }
        }
      }
    }
 else {
      RefType base=((AnySubType)t).getBase();
      List<Type> subTypes=baseToSubTypes.get(base);
      if (subTypes != null) {
        for (Iterator<Type> stIt=subTypes.iterator(); stIt.hasNext(); ) {
          final Type st=stIt.next();
          resolve(st,declaredType,sigType,subSig,container,targets);
        }
        return;
      }
      baseToSubTypes.put(base,subTypes=new ArrayList<Type>());
      subTypes.add(base);
      LinkedList<SootClass> worklist=new LinkedList<SootClass>();
      HashSet<SootClass> workset=new HashSet<SootClass>();
      FastHierarchy fh=Scene.v().getOrMakeFastHierarchy();
      SootClass cl=base.getSootClass();
      if (workset.add(cl))       worklist.add(cl);
      while (!worklist.isEmpty()) {
        cl=worklist.removeFirst();
        if (cl.isInterface()) {
          for (Iterator<SootClass> cIt=fh.getAllImplementersOfInterface(cl).iterator(); cIt.hasNext(); ) {
            final SootClass c=cIt.next();
            if (workset.add(c))             worklist.add(c);
          }
        }
 else {
          if (cl.isConcrete()) {
            resolve(cl.getType(),declaredType,sigType,subSig,container,targets);
            subTypes.add(cl.getType());
          }
          for (Iterator<SootClass> cIt=fh.getSubclassesOf(cl).iterator(); cIt.hasNext(); ) {
            final SootClass c=cIt.next();
            if (workset.add(c))             worklist.add(c);
          }
        }
      }
    }
  }
 else   if (t instanceof NullType) {
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + t);
  }
}","public void resolve(Type t,Type declaredType,Type sigType,NumberedString subSig,SootMethod container,ChunkedQueue<SootMethod> targets){
  if (declaredType instanceof ArrayType)   declaredType=RefType.v(""String_Node_Str"");
  if (sigType instanceof ArrayType)   sigType=RefType.v(""String_Node_Str"");
  if (t instanceof ArrayType)   t=RefType.v(""String_Node_Str"");
  if (declaredType != null && !Scene.v().getOrMakeFastHierarchy().canStoreType(t,declaredType)) {
    return;
  }
  if (sigType != null && !Scene.v().getOrMakeFastHierarchy().canStoreType(t,sigType)) {
    return;
  }
  if (t instanceof RefType) {
    SootMethod target=resolveNonSpecial((RefType)t,subSig);
    if (target != null)     targets.add(target);
  }
 else   if (t instanceof AnySubType) {
    if (options.library() == CGOptions.library_name_resolution) {
      RefType base=((AnySubType)t).getBase();
      Pair<Type,NumberedString> pair=new Pair<Type,NumberedString>(base,subSig);
      List<Type> types=baseToPossibleSubTypes.get(pair);
      if (types != null) {
        for (        Type st : types) {
          if (!Scene.v().getOrMakeFastHierarchy().canStoreType(st,declaredType)) {
            resolve(st,st,sigType,subSig,container,targets);
          }
 else {
            resolve(st,declaredType,sigType,subSig,container,targets);
          }
        }
        return;
      }
      baseToPossibleSubTypes.put(pair,types=new ArrayList<Type>());
      types.add(base);
      Chain<SootClass> classes=Scene.v().getClasses();
      for (      SootClass sc : classes) {
        for (        SootMethod sm : sc.getMethods()) {
          if ((sm.isConcrete() || sm.isNative()) && sm.getSubSignature().equals(subSig.getString())) {
            Type st=sc.getType();
            if (!Scene.v().getOrMakeFastHierarchy().canStoreType(st,declaredType)) {
              resolve(st,st,sigType,subSig,container,targets);
            }
 else {
              resolve(st,declaredType,sigType,subSig,container,targets);
            }
            types.add(st);
          }
        }
      }
    }
 else {
      RefType base=((AnySubType)t).getBase();
      List<Type> subTypes=baseToSubTypes.get(base);
      if (subTypes != null) {
        for (Iterator<Type> stIt=subTypes.iterator(); stIt.hasNext(); ) {
          final Type st=stIt.next();
          resolve(st,declaredType,sigType,subSig,container,targets);
        }
        return;
      }
      baseToSubTypes.put(base,subTypes=new ArrayList<Type>());
      subTypes.add(base);
      LinkedList<SootClass> worklist=new LinkedList<SootClass>();
      HashSet<SootClass> workset=new HashSet<SootClass>();
      FastHierarchy fh=Scene.v().getOrMakeFastHierarchy();
      SootClass cl=base.getSootClass();
      if (workset.add(cl))       worklist.add(cl);
      while (!worklist.isEmpty()) {
        cl=worklist.removeFirst();
        if (cl.isInterface()) {
          for (Iterator<SootClass> cIt=fh.getAllImplementersOfInterface(cl).iterator(); cIt.hasNext(); ) {
            final SootClass c=cIt.next();
            if (workset.add(c))             worklist.add(c);
          }
        }
 else {
          if (cl.isConcrete()) {
            resolve(cl.getType(),declaredType,sigType,subSig,container,targets);
            subTypes.add(cl.getType());
          }
          for (Iterator<SootClass> cIt=fh.getSubclassesOf(cl).iterator(); cIt.hasNext(); ) {
            final SootClass c=cIt.next();
            if (workset.add(c))             worklist.add(c);
          }
        }
      }
    }
  }
 else   if (t instanceof NullType) {
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + t);
  }
}"
85318,"/** 
 * Returns a list of superinterfaces of c, excluding itself. 
 */
public List<SootClass> getSuperinterfacesOf(SootClass c){
  c.checkLevel(SootClass.HIERARCHY);
  if (!c.isInterface())   throw new RuntimeException(""String_Node_Str"");
  checkState();
  if (interfaceToSuperinterfaces.get(c) != null)   return interfaceToSuperinterfaces.get(c);
  List<SootClass> l=new ArrayList<SootClass>();
  ListIterator<SootClass> it=interfaceToDirSuperinterfaces.get(c).listIterator();
  while (it.hasNext()) {
    l.addAll(getSuperinterfacesOfIncluding(it.next()));
  }
  interfaceToSuperinterfaces.put(c,Collections.unmodifiableList(l));
  return Collections.unmodifiableList(l);
}","/** 
 * Returns a list of superinterfaces of c, excluding itself. 
 */
public List<SootClass> getSuperinterfacesOf(SootClass c){
  c.checkLevel(SootClass.HIERARCHY);
  if (!c.isInterface())   throw new RuntimeException(""String_Node_Str"");
  checkState();
  if (interfaceToSuperinterfaces.get(c) != null)   return interfaceToSuperinterfaces.get(c);
  List<SootClass> l=new ArrayList<SootClass>();
  for (  SootClass si : interfaceToDirSuperinterfaces.get(c)) {
    l.addAll(getSuperinterfacesOfIncluding(si));
  }
  interfaceToSuperinterfaces.put(c,Collections.unmodifiableList(l));
  return Collections.unmodifiableList(l);
}"
85319,"/** 
 * Returns a list of subinterfaces of c, excluding itself. 
 */
public List<SootClass> getSubinterfacesOf(SootClass c){
  c.checkLevel(SootClass.HIERARCHY);
  if (!c.isInterface())   throw new RuntimeException(""String_Node_Str"");
  checkState();
  if (interfaceToSubinterfaces.get(c) != null)   return interfaceToSubinterfaces.get(c);
  List<SootClass> l=new ArrayList<SootClass>();
  ListIterator<SootClass> it=interfaceToDirSubinterfaces.get(c).listIterator();
  while (it.hasNext()) {
    l.addAll(getSubinterfacesOfIncluding(it.next()));
  }
  interfaceToSubinterfaces.put(c,Collections.unmodifiableList(l));
  return Collections.unmodifiableList(l);
}","/** 
 * Returns a list of subinterfaces of c, excluding itself. 
 */
public List<SootClass> getSubinterfacesOf(SootClass c){
  c.checkLevel(SootClass.HIERARCHY);
  if (!c.isInterface())   throw new RuntimeException(""String_Node_Str"");
  checkState();
  if (interfaceToSubinterfaces.get(c) != null)   return interfaceToSubinterfaces.get(c);
  List<SootClass> l=new ArrayList<SootClass>();
  for (  SootClass si : interfaceToDirSubinterfaces.get(c)) {
    l.addAll(getSubinterfacesOfIncluding(si));
  }
  interfaceToSubinterfaces.put(c,Collections.unmodifiableList(l));
  return Collections.unmodifiableList(l);
}"
85320,"/** 
 * Constructs a hierarchy from the current scene. 
 */
public Hierarchy(){
  this.sc=Scene.v();
  state=sc.getState();
{
    Chain<SootClass> allClasses=sc.getClasses();
    classToSubclasses=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToSubinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToSuperinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    classToDirSubclasses=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirSubinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirSuperinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirImplementers=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    Iterator<SootClass> classesIt=allClasses.iterator();
    while (classesIt.hasNext()) {
      SootClass c=classesIt.next();
      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;
      if (c.isInterface()) {
        interfaceToDirSubinterfaces.put(c,new ArrayList<SootClass>());
        interfaceToDirSuperinterfaces.put(c,new ArrayList<SootClass>());
        interfaceToDirImplementers.put(c,new ArrayList<SootClass>());
      }
 else       classToDirSubclasses.put(c,new ArrayList<SootClass>());
    }
    classesIt=allClasses.iterator();
    while (classesIt.hasNext()) {
      SootClass c=classesIt.next();
      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;
      List<SootClass> l2=interfaceToDirSuperinterfaces.get(c);
      if (c.hasSuperclass()) {
        if (c.isInterface()) {
          for (          SootClass i : c.getInterfaces()) {
            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;
            List<SootClass> l=interfaceToDirSubinterfaces.get(i);
            if (l != null)             l.add(c);
            if (l2 != null)             l2.add(i);
          }
        }
 else {
          List<SootClass> l=classToDirSubclasses.get(c.getSuperclass());
          l.add(c);
          Iterator<SootClass> subIt=c.getInterfaces().iterator();
          while (subIt.hasNext()) {
            SootClass i=subIt.next();
            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;
            l=interfaceToDirImplementers.get(i);
            if (l != null)             l.add(c);
          }
        }
      }
    }
{
      classesIt=allClasses.iterator();
      while (classesIt.hasNext()) {
        SootClass c=classesIt.next();
        if (c.resolvingLevel() < SootClass.HIERARCHY)         continue;
        if (c.isInterface()) {
          List<SootClass> imp=interfaceToDirImplementers.get(c);
          Set<SootClass> s=new ArraySet<SootClass>();
          Iterator<SootClass> impIt=imp.iterator();
          while (impIt.hasNext()) {
            SootClass c0=impIt.next();
            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;
            s.addAll(getSubclassesOfIncluding(c0));
          }
          imp.clear();
          imp.addAll(s);
        }
      }
    }
    classesIt=allClasses.iterator();
    while (classesIt.hasNext()) {
      SootClass c=classesIt.next();
      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;
      if (c.isInterface()) {
        interfaceToDirSubinterfaces.put(c,Collections.unmodifiableList(interfaceToDirSubinterfaces.get(c)));
        interfaceToDirSuperinterfaces.put(c,Collections.unmodifiableList(interfaceToDirSuperinterfaces.get(c)));
        interfaceToDirImplementers.put(c,Collections.unmodifiableList(interfaceToDirImplementers.get(c)));
      }
 else       classToDirSubclasses.put(c,Collections.unmodifiableList(classToDirSubclasses.get(c)));
    }
  }
}","/** 
 * Constructs a hierarchy from the current scene. 
 */
public Hierarchy(){
  this.sc=Scene.v();
  state=sc.getState();
{
    Chain<SootClass> allClasses=sc.getClasses();
    classToSubclasses=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToSubinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToSuperinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    classToDirSubclasses=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirSubinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirSuperinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirImplementers=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    for (    SootClass c : allClasses) {
      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;
      if (c.isInterface()) {
        interfaceToDirSubinterfaces.put(c,new ArrayList<SootClass>());
        interfaceToDirSuperinterfaces.put(c,new ArrayList<SootClass>());
        interfaceToDirImplementers.put(c,new ArrayList<SootClass>());
      }
 else       classToDirSubclasses.put(c,new ArrayList<SootClass>());
    }
    for (    SootClass c : allClasses) {
      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;
      if (c.hasSuperclass()) {
        if (c.isInterface()) {
          List<SootClass> l2=interfaceToDirSuperinterfaces.get(c);
          for (          SootClass i : c.getInterfaces()) {
            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;
            List<SootClass> l=interfaceToDirSubinterfaces.get(i);
            if (l != null)             l.add(c);
            if (l2 != null)             l2.add(i);
          }
        }
 else {
          List<SootClass> l=classToDirSubclasses.get(c.getSuperclass());
          if (l != null)           l.add(c);
          for (          SootClass i : c.getInterfaces()) {
            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;
            l=interfaceToDirImplementers.get(i);
            if (l != null)             l.add(c);
          }
        }
      }
    }
    for (    SootClass c : allClasses) {
      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;
      if (c.isInterface()) {
        List<SootClass> imp=interfaceToDirImplementers.get(c);
        Set<SootClass> s=new ArraySet<SootClass>();
        for (        SootClass c0 : imp) {
          if (c.resolvingLevel() < SootClass.HIERARCHY)           continue;
          s.addAll(getSubclassesOfIncluding(c0));
        }
        imp.clear();
        imp.addAll(s);
      }
    }
    for (    SootClass c : allClasses) {
      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;
      if (c.isInterface()) {
        interfaceToDirSubinterfaces.put(c,Collections.unmodifiableList(interfaceToDirSubinterfaces.get(c)));
        interfaceToDirSuperinterfaces.put(c,Collections.unmodifiableList(interfaceToDirSuperinterfaces.get(c)));
        interfaceToDirImplementers.put(c,Collections.unmodifiableList(interfaceToDirImplementers.get(c)));
      }
 else       classToDirSubclasses.put(c,Collections.unmodifiableList(classToDirSubclasses.get(c)));
    }
  }
}"
85321,"@Override public void initFlowGraph(GeomPointsTo ptAnalyzer){
  int k;
  int n_legal_cons;
  int nf1, nf2;
  int code;
  IVarAbstraction my_lhs, my_rhs;
  n_legal_cons=0;
  for (  PlainConstraint cons : ptAnalyzer.constraints) {
    if (!cons.isActive)     continue;
    my_lhs=cons.getLHS().getRepresentative();
    my_rhs=cons.getRHS().getRepresentative();
    nf1=ptAnalyzer.getMappedMethodID(my_lhs);
    nf2=ptAnalyzer.getMappedMethodID(my_rhs);
    code=((nf1 == Constants.SUPER_MAIN ? 1 : 0) << 1) | (nf2 == Constants.SUPER_MAIN ? 1 : 0);
switch (cons.type) {
case Constants.NEW_CONS:
      if (code == 0) {
        my_rhs.add_points_to_3((AllocNode)my_lhs.getWrappedNode(),1,1,ptAnalyzer.context_size[nf1]);
      }
 else {
        my_rhs.add_points_to_4((AllocNode)my_lhs.getWrappedNode(),1,1,ptAnalyzer.context_size[nf2],ptAnalyzer.context_size[nf1]);
      }
    ptAnalyzer.getWorklist().push(my_rhs);
  break;
case Constants.ASSIGN_CONS:
if (cons.interCallEdges != null) {
  for (Iterator<Edge> it=cons.interCallEdges.iterator(); it.hasNext(); ) {
    Edge sEdge=it.next();
    CgEdge q=ptAnalyzer.getInternalEdgeFromSootEdge(sEdge);
    if (q.is_obsoleted == true) {
      continue;
    }
    if (nf2 == q.t) {
      if (nf1 == Constants.SUPER_MAIN) {
        my_lhs.add_simple_constraint_4(my_rhs,1,q.map_offset,1,ptAnalyzer.max_context_size_block[q.s]);
      }
 else {
        if (q.s == q.t) {
          my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf1]);
        }
 else {
          for (k=0; k < ptAnalyzer.block_num[nf1]; ++k) {
            my_lhs.add_simple_constraint_3(my_rhs,k * ptAnalyzer.max_context_size_block[nf1] + 1,q.map_offset,ptAnalyzer.max_context_size_block[nf1]);
          }
        }
      }
    }
 else {
      if (q.s == q.t) {
        my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf2]);
      }
 else {
        for (k=0; k < ptAnalyzer.block_num[nf2]; ++k) {
          my_lhs.add_simple_constraint_3(my_rhs,q.map_offset,k * ptAnalyzer.max_context_size_block[nf2] + 1,ptAnalyzer.max_context_size_block[nf2]);
        }
      }
    }
  }
}
 else {
  if (code == 0) {
    my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf1]);
  }
 else {
    my_lhs.add_simple_constraint_4(my_rhs,1,1,ptAnalyzer.context_size[nf1],ptAnalyzer.context_size[nf2]);
  }
}
break;
case Constants.LOAD_CONS:
cons.code=full_convertor[code];
cons.otherSide=my_rhs;
my_lhs.put_complex_constraint(cons);
break;
case Constants.STORE_CONS:
cons.code=full_convertor[code];
cons.otherSide=my_lhs;
my_rhs.put_complex_constraint(cons);
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
++n_legal_cons;
}
ptAnalyzer.ps.printf(""String_Node_Str"",n_legal_cons,((double)n_legal_cons / ptAnalyzer.n_init_constraints) * 100);
}","@Override public void initFlowGraph(GeomPointsTo ptAnalyzer){
  int k;
  int n_legal_cons;
  int nf1, nf2;
  int code;
  IVarAbstraction my_lhs, my_rhs;
  n_legal_cons=0;
  for (  PlainConstraint cons : ptAnalyzer.constraints) {
    if (!cons.isActive)     continue;
    my_lhs=cons.getLHS().getRepresentative();
    my_rhs=cons.getRHS().getRepresentative();
    nf1=ptAnalyzer.getMethodIDFromPtr(my_lhs);
    nf2=ptAnalyzer.getMethodIDFromPtr(my_rhs);
    code=((nf1 == Constants.SUPER_MAIN ? 1 : 0) << 1) | (nf2 == Constants.SUPER_MAIN ? 1 : 0);
switch (cons.type) {
case Constants.NEW_CONS:
      if (code == 0) {
        my_rhs.add_points_to_3((AllocNode)my_lhs.getWrappedNode(),1,1,ptAnalyzer.context_size[nf1]);
      }
 else {
        my_rhs.add_points_to_4((AllocNode)my_lhs.getWrappedNode(),1,1,ptAnalyzer.context_size[nf2],ptAnalyzer.context_size[nf1]);
      }
    ptAnalyzer.getWorklist().push(my_rhs);
  break;
case Constants.ASSIGN_CONS:
if (cons.interCallEdges != null) {
  for (Iterator<Edge> it=cons.interCallEdges.iterator(); it.hasNext(); ) {
    Edge sEdge=it.next();
    CgEdge q=ptAnalyzer.getInternalEdgeFromSootEdge(sEdge);
    if (q.is_obsoleted == true) {
      continue;
    }
    if (nf2 == q.t) {
      if (nf1 == Constants.SUPER_MAIN) {
        my_lhs.add_simple_constraint_4(my_rhs,1,q.map_offset,1,ptAnalyzer.max_context_size_block[q.s]);
      }
 else {
        if (q.s == q.t) {
          my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf1]);
        }
 else {
          for (k=0; k < ptAnalyzer.block_num[nf1]; ++k) {
            my_lhs.add_simple_constraint_3(my_rhs,k * ptAnalyzer.max_context_size_block[nf1] + 1,q.map_offset,ptAnalyzer.max_context_size_block[nf1]);
          }
        }
      }
    }
 else {
      if (q.s == q.t) {
        my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf2]);
      }
 else {
        for (k=0; k < ptAnalyzer.block_num[nf2]; ++k) {
          my_lhs.add_simple_constraint_3(my_rhs,q.map_offset,k * ptAnalyzer.max_context_size_block[nf2] + 1,ptAnalyzer.max_context_size_block[nf2]);
        }
      }
    }
  }
}
 else {
  if (code == 0) {
    my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf1]);
  }
 else {
    my_lhs.add_simple_constraint_4(my_rhs,1,1,ptAnalyzer.context_size[nf1],ptAnalyzer.context_size[nf2]);
  }
}
break;
case Constants.LOAD_CONS:
cons.code=full_convertor[code];
cons.otherSide=my_rhs;
my_lhs.put_complex_constraint(cons);
break;
case Constants.STORE_CONS:
cons.code=full_convertor[code];
cons.otherSide=my_lhs;
my_rhs.put_complex_constraint(cons);
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
++n_legal_cons;
}
ptAnalyzer.ps.printf(""String_Node_Str"",n_legal_cons,((double)n_legal_cons / ptAnalyzer.n_init_constraints) * 100);
}"
85322,"/** 
 * 1. Update the call graph; 2. Eliminate the pointers, objects, and constraints related to the unreachable code.
 */
private void finalizeInternalData(){
  markReachableMethods();
  for (Iterator<IVarAbstraction> it=allocations.iterator(); it.hasNext(); ) {
    IVarAbstraction po=it.next();
    AllocNode obj=(AllocNode)po.getWrappedNode();
    SootMethod sm=obj.getMethod();
    if (sm != null && func2int.containsKey(sm) == false)     it.remove();
  }
  final Vector<AllocNode> removeSet=new Vector<AllocNode>();
  for (Iterator<IVarAbstraction> it=pointers.iterator(); it.hasNext(); ) {
    IVarAbstraction pn=it.next();
    Node vn=pn.getWrappedNode();
    SootMethod sm=null;
    if (vn instanceof LocalVarNode) {
      sm=((LocalVarNode)vn).getMethod();
    }
 else     if (vn instanceof AllocDotField) {
      sm=((AllocDotField)vn).getBase().getMethod();
    }
    if (sm != null) {
      if (func2int.containsKey(sm) == false) {
        pn.deleteAll();
        vn.discardP2Set();
        it.remove();
        continue;
      }
    }
    if (pn.getRepresentative() != pn)     continue;
    removeSet.clear();
    if (pn.hasPTResult()) {
      Set<AllocNode> objSet=pn.get_all_points_to_objects();
      for (Iterator<AllocNode> oit=objSet.iterator(); oit.hasNext(); ) {
        AllocNode obj=oit.next();
        IVarAbstraction po=consG.get(obj);
        if (!po.reachable() || pn.isDeadObject(obj)) {
          removeSet.add(obj);
        }
      }
      for (      AllocNode obj : removeSet)       pn.remove_points_to(obj);
      pn.drop_duplicates();
    }
 else {
      PointsToSetInternal pts=vn.getP2Set();
      pts.forall(new P2SetVisitor(){
        @Override public void visit(        Node n){
          IVarAbstraction pan=findInternalNode(n);
          if (pan.reachable())           removeSet.add((AllocNode)n);
        }
      }
);
      pts=vn.makeP2Set();
      for (      AllocNode an : removeSet)       pts.add(an);
    }
  }
  for (Iterator<PlainConstraint> cIt=constraints.iterator(); cIt.hasNext(); ) {
    PlainConstraint cons=cIt.next();
    IVarAbstraction lhs=cons.getLHS();
    IVarAbstraction rhs=cons.getRHS();
    if (!lhs.reachable() || !rhs.reachable() || getMappedMethodID(lhs) == Constants.UNKNOWN_FUNCTION || getMappedMethodID(rhs) == Constants.UNKNOWN_FUNCTION) {
      cIt.remove();
    }
  }
  pointers.reassign();
  allocations.reassign();
  constraints.reassign();
}","/** 
 * 1. Update the call graph; 2. Eliminate the pointers, objects, and constraints related to the unreachable code.
 */
private void finalizeInternalData(){
  markReachableMethods();
  for (Iterator<IVarAbstraction> it=allocations.iterator(); it.hasNext(); ) {
    IVarAbstraction po=it.next();
    AllocNode obj=(AllocNode)po.getWrappedNode();
    SootMethod sm=obj.getMethod();
    if (sm != null && func2int.containsKey(sm) == false)     it.remove();
  }
  final Vector<AllocNode> removeSet=new Vector<AllocNode>();
  for (Iterator<IVarAbstraction> it=pointers.iterator(); it.hasNext(); ) {
    IVarAbstraction pn=it.next();
    Node vn=pn.getWrappedNode();
    SootMethod sm=null;
    if (vn instanceof LocalVarNode) {
      sm=((LocalVarNode)vn).getMethod();
    }
 else     if (vn instanceof AllocDotField) {
      sm=((AllocDotField)vn).getBase().getMethod();
    }
    if (sm != null) {
      if (func2int.containsKey(sm) == false) {
        pn.deleteAll();
        vn.discardP2Set();
        it.remove();
        continue;
      }
    }
    if (pn.getRepresentative() != pn)     continue;
    removeSet.clear();
    if (pn.hasPTResult()) {
      Set<AllocNode> objSet=pn.get_all_points_to_objects();
      for (Iterator<AllocNode> oit=objSet.iterator(); oit.hasNext(); ) {
        AllocNode obj=oit.next();
        IVarAbstraction po=consG.get(obj);
        if (!po.reachable() || pn.isDeadObject(obj)) {
          removeSet.add(obj);
        }
      }
      for (      AllocNode obj : removeSet)       pn.remove_points_to(obj);
      pn.drop_duplicates();
    }
 else {
      PointsToSetInternal pts=vn.getP2Set();
      pts.forall(new P2SetVisitor(){
        @Override public void visit(        Node n){
          IVarAbstraction pan=findInternalNode(n);
          if (pan.reachable())           removeSet.add((AllocNode)n);
        }
      }
);
      pts=vn.makeP2Set();
      for (      AllocNode an : removeSet)       pts.add(an);
    }
  }
  for (Iterator<PlainConstraint> cIt=constraints.iterator(); cIt.hasNext(); ) {
    PlainConstraint cons=cIt.next();
    IVarAbstraction lhs=cons.getLHS();
    IVarAbstraction rhs=cons.getRHS();
    if (!lhs.reachable() || !rhs.reachable() || getMethodIDFromPtr(lhs) == Constants.UNKNOWN_FUNCTION || getMethodIDFromPtr(rhs) == Constants.UNKNOWN_FUNCTION) {
      cIt.remove();
    }
  }
  pointers.reassign();
  allocations.reassign();
  constraints.reassign();
}"
85323,"/** 
 * Read in the program facts generated by SPARK. We also construct our own call graph and pointer variables. Return: a set of base pointers for all virtual callsites (including calls in lib)
 */
private void preprocess(){
  int id;
  int s, t;
  n_func=Scene.v().getReachableMethods().size() + 1;
  call_graph=new CgEdge[n_func];
  n_calls=0;
  n_reach_spark_user_methods=0;
  id=1;
  QueueReader<MethodOrMethodContext> smList=Scene.v().getReachableMethods().listener();
  while (smList.hasNext()) {
    final SootMethod func=(SootMethod)smList.next();
    func2int.put(func,id);
    int2func.put(id,func);
    if (Scene.v().getCallGraph().isEntryMethod(func) || func.isEntryMethod()) {
      CgEdge p=new CgEdge(Constants.SUPER_MAIN,id,null,call_graph[Constants.SUPER_MAIN]);
      call_graph[Constants.SUPER_MAIN]=p;
      n_calls++;
    }
    if (!func.isJavaLibraryMethod())     ++n_reach_spark_user_methods;
    id++;
  }
  QueueReader<Edge> edgeList=Scene.v().getCallGraph().listener();
  while (edgeList.hasNext()) {
    Edge edge=edgeList.next();
    if (edge.isClinit()) {
      continue;
    }
    SootMethod src_func=edge.src();
    SootMethod tgt_func=edge.tgt();
    s=func2int.get(src_func);
    t=func2int.get(tgt_func);
    CgEdge p=new CgEdge(s,t,edge,call_graph[s]);
    call_graph[s]=p;
    edgeMapping.put(edge,p);
    Stmt callsite=edge.srcStmt();
    if (edge.isThreadRunCall() || edge.kind().isExecutor() || edge.kind().isAsyncTask()) {
      thread_run_callsites.add(callsite);
    }
 else     if (edge.isInstance() && !edge.isSpecial()) {
      InstanceInvokeExpr expr=(InstanceInvokeExpr)callsite.getInvokeExpr();
      p.base_var=findLocalVarNode(expr.getBase());
      if (SootInfo.countCallEdgesForCallsite(callsite,true) > 1 && p.base_var != null) {
        multiCallsites.add(callsite);
      }
    }
    ++n_calls;
  }
  for (Iterator<VarNode> it=getVarNodeNumberer().iterator(); it.hasNext(); ) {
    VarNode vn=it.next();
    IVarAbstraction pn=makeInternalNode(vn);
    pointers.add(pn);
  }
  for (Iterator<AllocDotField> it=getAllocDotFieldNodeNumberer().iterator(); it.hasNext(); ) {
    AllocDotField adf=it.next();
    SparkField field=adf.getField();
    if (field instanceof SootField) {
      Type decType=((SootField)field).getDeclaringClass().getType();
      Type baseType=adf.getBase().getType();
      if (!castNeverFails(baseType,decType))       continue;
    }
    IVarAbstraction pn=makeInternalNode(adf);
    pointers.add(pn);
  }
  for (Iterator<AllocNode> it=getAllocNodeNumberer().iterator(); it.hasNext(); ) {
    AllocNode obj=it.next();
    IVarAbstraction pn=makeInternalNode(obj);
    allocations.add(pn);
  }
  for (  Object object : allocSources()) {
    IVarAbstraction obj=makeInternalNode((AllocNode)object);
    Node[] succs=allocLookup((AllocNode)object);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      IVarAbstraction p=makeInternalNode(element0);
      cons.expr.setPair(obj,p);
      cons.type=Constants.NEW_CONS;
      constraints.add(cons);
    }
  }
  Pair<Node,Node> intercall=new Pair<Node,Node>();
  for (  Object object : simpleSources()) {
    IVarAbstraction p=makeInternalNode((VarNode)object);
    Node[] succs=simpleLookup((VarNode)object);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      IVarAbstraction q=makeInternalNode(element0);
      cons.expr.setPair(p,q);
      cons.type=Constants.ASSIGN_CONS;
      intercall.setPair((VarNode)object,element0);
      cons.interCallEdges=lookupEdgesForAssignment(intercall);
      constraints.add(cons);
    }
  }
  intercall=null;
  assign2edges.clear();
  for (  Object object : loadSources()) {
    FieldRefNode frn=(FieldRefNode)object;
    IVarAbstraction p=makeInternalNode(frn.getBase());
    Node[] succs=loadLookup(frn);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      IVarAbstraction q=makeInternalNode(element0);
      cons.f=frn.getField();
      cons.expr.setPair(p,q);
      cons.type=Constants.LOAD_CONS;
      constraints.add(cons);
    }
  }
  for (  Object object : storeSources()) {
    IVarAbstraction p=makeInternalNode((VarNode)object);
    Node[] succs=storeLookup((VarNode)object);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      FieldRefNode frn=(FieldRefNode)element0;
      IVarAbstraction q=makeInternalNode(frn.getBase());
      cons.f=frn.getField();
      cons.expr.setPair(p,q);
      cons.type=Constants.STORE_CONS;
      constraints.add(cons);
    }
  }
  n_init_constraints=constraints.size();
  low_cg=new int[n_func];
  vis_cg=new int[n_func];
  rep_cg=new int[n_func];
  indeg_cg=new int[n_func];
  scc_size=new int[n_func];
  block_num=new int[n_func];
  context_size=new long[n_func];
  max_context_size_block=new long[n_func];
}","/** 
 * Read in the program facts generated by SPARK. We also construct our own call graph and pointer variables.
 */
private void preprocess(){
  int id;
  int s, t;
  n_func=Scene.v().getReachableMethods().size() + 1;
  call_graph=new CgEdge[n_func];
  n_calls=0;
  n_reach_spark_user_methods=0;
  id=1;
  QueueReader<MethodOrMethodContext> smList=Scene.v().getReachableMethods().listener();
  CallGraph soot_callgraph=Scene.v().getCallGraph();
  while (smList.hasNext()) {
    final SootMethod func=(SootMethod)smList.next();
    func2int.put(func,id);
    int2func.put(id,func);
    if (soot_callgraph.isEntryMethod(func) || func.isEntryMethod()) {
      CgEdge p=new CgEdge(Constants.SUPER_MAIN,id,null,call_graph[Constants.SUPER_MAIN]);
      call_graph[Constants.SUPER_MAIN]=p;
      n_calls++;
    }
    if (!func.isJavaLibraryMethod())     ++n_reach_spark_user_methods;
    id++;
  }
  QueueReader<Edge> edgeList=Scene.v().getCallGraph().listener();
  while (edgeList.hasNext()) {
    Edge edge=edgeList.next();
    if (edge.isClinit()) {
      continue;
    }
    SootMethod src_func=edge.src();
    SootMethod tgt_func=edge.tgt();
    s=func2int.get(src_func);
    t=func2int.get(tgt_func);
    CgEdge p=new CgEdge(s,t,edge,call_graph[s]);
    call_graph[s]=p;
    edgeMapping.put(edge,p);
    Stmt callsite=edge.srcStmt();
    if (edge.isThreadRunCall() || edge.kind().isExecutor() || edge.kind().isAsyncTask()) {
      thread_run_callsites.add(callsite);
    }
 else     if (edge.isInstance() && !edge.isSpecial()) {
      InstanceInvokeExpr expr=(InstanceInvokeExpr)callsite.getInvokeExpr();
      p.base_var=findLocalVarNode(expr.getBase());
      if (SootInfo.countCallEdgesForCallsite(callsite,true) > 1 && p.base_var != null) {
        multiCallsites.add(callsite);
      }
    }
    ++n_calls;
  }
  for (Iterator<VarNode> it=getVarNodeNumberer().iterator(); it.hasNext(); ) {
    VarNode vn=it.next();
    IVarAbstraction pn=makeInternalNode(vn);
    pointers.add(pn);
  }
  for (Iterator<AllocDotField> it=getAllocDotFieldNodeNumberer().iterator(); it.hasNext(); ) {
    AllocDotField adf=it.next();
    SparkField field=adf.getField();
    if (field instanceof SootField) {
      Type decType=((SootField)field).getDeclaringClass().getType();
      Type baseType=adf.getBase().getType();
      if (!castNeverFails(baseType,decType))       continue;
    }
    IVarAbstraction pn=makeInternalNode(adf);
    pointers.add(pn);
  }
  for (Iterator<AllocNode> it=getAllocNodeNumberer().iterator(); it.hasNext(); ) {
    AllocNode obj=it.next();
    IVarAbstraction pn=makeInternalNode(obj);
    allocations.add(pn);
  }
  for (  Object object : allocSources()) {
    IVarAbstraction obj=makeInternalNode((AllocNode)object);
    Node[] succs=allocLookup((AllocNode)object);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      IVarAbstraction p=makeInternalNode(element0);
      cons.expr.setPair(obj,p);
      cons.type=Constants.NEW_CONS;
      constraints.add(cons);
    }
  }
  Pair<Node,Node> intercall=new Pair<Node,Node>();
  for (  Object object : simpleSources()) {
    IVarAbstraction p=makeInternalNode((VarNode)object);
    Node[] succs=simpleLookup((VarNode)object);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      IVarAbstraction q=makeInternalNode(element0);
      cons.expr.setPair(p,q);
      cons.type=Constants.ASSIGN_CONS;
      intercall.setPair((VarNode)object,element0);
      cons.interCallEdges=lookupEdgesForAssignment(intercall);
      constraints.add(cons);
    }
  }
  intercall=null;
  assign2edges.clear();
  for (  Object object : loadSources()) {
    FieldRefNode frn=(FieldRefNode)object;
    IVarAbstraction p=makeInternalNode(frn.getBase());
    Node[] succs=loadLookup(frn);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      IVarAbstraction q=makeInternalNode(element0);
      cons.f=frn.getField();
      cons.expr.setPair(p,q);
      cons.type=Constants.LOAD_CONS;
      constraints.add(cons);
    }
  }
  for (  Object object : storeSources()) {
    IVarAbstraction p=makeInternalNode((VarNode)object);
    Node[] succs=storeLookup((VarNode)object);
    for (    Node element0 : succs) {
      PlainConstraint cons=new PlainConstraint();
      FieldRefNode frn=(FieldRefNode)element0;
      IVarAbstraction q=makeInternalNode(frn.getBase());
      cons.f=frn.getField();
      cons.expr.setPair(p,q);
      cons.type=Constants.STORE_CONS;
      constraints.add(cons);
    }
  }
  n_init_constraints=constraints.size();
  low_cg=new int[n_func];
  vis_cg=new int[n_func];
  rep_cg=new int[n_func];
  indeg_cg=new int[n_func];
  scc_size=new int[n_func];
  block_num=new int[n_func];
  context_size=new long[n_func];
  max_context_size_block=new long[n_func];
}"
85324,"/** 
 * The starting point of the geometric points-to analysis engine. This function computes the whole program points-to information.
 */
public void solve(){
  long solve_time=0, prepare_time=0;
  long mem;
  int rounds;
  int n_obs;
  G.v().out.flush();
  preprocess();
  mergeLocalVariables();
  worklist.initialize(pointers.size());
  offlineProcessor=new OfflineProcessor(this);
  IFigureManager.cleanCache();
  int evalLevel=opts.geom_eval();
  GeomEvaluator ge=new GeomEvaluator(this,ps);
  if (evalLevel == Constants.eval_basicInfo)   ge.profileSparkBasicMetrics();
  Date begin=new Date();
  for (rounds=0, n_obs=1000; rounds < Parameters.cg_refine_times && n_obs > 0; ++rounds) {
    ps.println(""String_Node_Str"" + ""String_Node_Str"" + rounds + ""String_Node_Str"");
    encodeContexts();
    Date prepare_begin=new Date();
    offlineProcessor.init();
    offlineProcessor.defaultFeedPtsRoutines();
    offlineProcessor.runOptimizations();
    Date prepare_end=new Date();
    prepare_time+=prepare_end.getTime() - prepare_begin.getTime();
    if (rounds == 0) {
      if (evalLevel <= Constants.eval_basicInfo) {
        offlineProcessor.releaseSparkMem();
      }
    }
    prepareNextRun();
    nodeGenerator.initFlowGraph(this);
    solveConstraints();
    n_obs=updateCallGraph();
    finalizeInternalData();
  }
  if (rounds < Parameters.cg_refine_times)   ps.printf(""String_Node_Str"");
  Date end=new Date();
  solve_time+=end.getTime() - begin.getTime();
  mem=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
  ps.println();
  ps.printf(""String_Node_Str"",(double)prepare_time / 1000);
  ps.printf(""String_Node_Str"",(double)solve_time / 1000);
  ps.printf(""String_Node_Str"",(double)(mem) / 1024 / 1024);
  if (evalLevel != Constants.eval_nothing) {
    ge.profileGeomBasicMetrics(evalLevel > Constants.eval_basicInfo);
    if (evalLevel > Constants.eval_basicInfo) {
      ge.checkCallGraph();
      ge.checkCastsSafety();
      ge.checkAliasAnalysis();
    }
  }
  finalizeSootData();
  releaseUselessResources();
  hasExecuted=true;
}","/** 
 * The starting point of the geometric points-to analysis engine. This function computes the whole program points-to information.
 */
public void solve(){
  long solve_time=0, prepare_time=0;
  long mem;
  int rounds;
  int n_obs;
  G.v().out.flush();
  preprocess();
  mergeLocalVariables();
  worklist.initialize(pointers.size());
  offlineProcessor=new OfflineProcessor(this);
  IFigureManager.cleanCache();
  int evalLevel=opts.geom_eval();
  GeomEvaluator ge=new GeomEvaluator(this,ps);
  if (evalLevel == Constants.eval_basicInfo)   ge.profileSparkBasicMetrics();
  Date begin=new Date();
  for (rounds=0, n_obs=1000; rounds < Parameters.cg_refine_times && n_obs > 0; ++rounds) {
    ps.println(""String_Node_Str"" + ""String_Node_Str"" + rounds + ""String_Node_Str"");
    encodeContexts(rounds == 0);
    Date prepare_begin=new Date();
    offlineProcessor.init();
    offlineProcessor.defaultFeedPtsRoutines();
    offlineProcessor.runOptimizations();
    Date prepare_end=new Date();
    prepare_time+=prepare_end.getTime() - prepare_begin.getTime();
    if (rounds == 0) {
      if (evalLevel <= Constants.eval_basicInfo) {
        offlineProcessor.releaseSparkMem();
      }
    }
    prepareNextRun();
    nodeGenerator.initFlowGraph(this);
    solveConstraints();
    n_obs=updateCallGraph();
    finalizeInternalData();
  }
  if (rounds < Parameters.cg_refine_times)   ps.printf(""String_Node_Str"");
  Date end=new Date();
  solve_time+=end.getTime() - begin.getTime();
  mem=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
  ps.println();
  ps.printf(""String_Node_Str"",(double)prepare_time / 1000);
  ps.printf(""String_Node_Str"",(double)solve_time / 1000);
  ps.printf(""String_Node_Str"",(double)(mem) / 1024 / 1024);
  if (evalLevel != Constants.eval_nothing) {
    ge.profileGeomBasicMetrics(evalLevel > Constants.eval_basicInfo);
    if (evalLevel > Constants.eval_basicInfo) {
      ge.checkCallGraph();
      ge.checkCastsSafety();
      ge.checkAliasAnalysis();
    }
  }
  finalizeSootData();
  releaseUselessResources();
  hasExecuted=true;
}"
85325,"/** 
 * Build a call graph, merge the SCCs and name the contexts.
 */
private void encodeContexts(){
  int i, j;
  int n_reachable=0, n_scc_reachable=0;
  int n_full=0;
  long max_contexts=Long.MIN_VALUE;
  CgEdge p;
  Random rGen=new Random();
  pre_cnt=1;
  max_scc_size=1;
  for (i=0; i < n_func; ++i) {
    vis_cg[i]=0;
    indeg_cg[i]=0;
    max_context_size_block[i]=0;
  }
  queue_cg.clear();
  callGraphDFS(Constants.SUPER_MAIN);
  for (i=0; i < n_func; ++i) {
    if (vis_cg[i] == 0)     continue;
    p=call_graph[i];
    while (p != null) {
      if (rep_cg[i] == rep_cg[p.t]) {
        p.scc_edge=true;
      }
 else {
        p.scc_edge=false;
        ++indeg_cg[rep_cg[p.t]];
      }
      p=p.next;
    }
    ++n_reachable;
    if (rep_cg[i] == i)     ++n_scc_reachable;
  }
  for (i=0; i < n_func; ++i)   if (vis_cg[i] != 0 && rep_cg[i] != i) {
    p=call_graph[i];
    while (p.next != null)     p=p.next;
    p.next=call_graph[rep_cg[i]];
    call_graph[rep_cg[i]]=call_graph[i];
  }
  max_context_size_block[Constants.SUPER_MAIN]=1;
  queue_cg.addLast(Constants.SUPER_MAIN);
  while (!queue_cg.isEmpty()) {
    i=queue_cg.getFirst();
    queue_cg.removeFirst();
    p=call_graph[i];
    while (p != null) {
      if (p.scc_edge == false) {
        j=rep_cg[p.t];
        if (Constants.MAX_CONTEXTS - max_context_size_block[i] < max_context_size_block[j]) {
          long start=rGen.nextLong();
          if (start < 0)           start=-start;
          if (start > Constants.MAX_CONTEXTS - max_context_size_block[i]) {
            start=Constants.MAX_CONTEXTS - max_context_size_block[i];
            max_context_size_block[j]=Constants.MAX_CONTEXTS;
          }
 else {
            if (max_context_size_block[j] < start + max_context_size_block[i])             max_context_size_block[j]=start + max_context_size_block[i];
          }
          p.map_offset=start + 1;
        }
 else {
          p.map_offset=max_context_size_block[j] + 1;
          max_context_size_block[j]+=max_context_size_block[i];
        }
        if (--indeg_cg[j] == 0)         queue_cg.addLast(j);
      }
 else {
        p.map_offset=1;
      }
      p=p.next;
    }
    if (max_context_size_block[i] > max_contexts)     max_contexts=max_context_size_block[i];
  }
  for (i=n_func - 1; i > -1; --i) {
    if (vis_cg[i] == 0)     continue;
    if (rep_cg[i] != i) {
      max_context_size_block[i]=max_context_size_block[rep_cg[i]];
      p=call_graph[i];
      while (p.next.s == i)       p=p.next;
      call_graph[rep_cg[i]]=p.next;
      p.next=null;
    }
    if (max_context_size_block[i] == Constants.MAX_CONTEXTS)     ++n_full;
    context_size[i]=max_context_size_block[i];
    block_num[i]=1;
  }
  if (getOpts().geom_blocking()) {
    for (i=0; i < n_func; ++i) {
      if (vis_cg[i] == 0)       continue;
      p=call_graph[i];
      while (p != null) {
        j=p.t;
        if (j != i && p.scc_edge == true) {
          if (context_size[j] <= Constants.MAX_CONTEXTS - max_context_size_block[i]) {
            p.map_offset=context_size[j] + 1;
            context_size[j]+=max_context_size_block[i];
            ++block_num[j];
          }
 else {
            int iBlock=0;
            if (block_num[j] > 1)             iBlock=rGen.nextInt(block_num[j] - 1) + 1;
            p.map_offset=iBlock * max_context_size_block[j] + 1;
          }
        }
        p=p.next;
      }
    }
  }
  ps.printf(""String_Node_Str"",n_reachable - 1,n_scc_reachable - 1,n_full);
  ps.printf(""String_Node_Str"",max_scc_size);
  ps.printf(""String_Node_Str"",(double)max_contexts);
}","/** 
 * Build a call graph, merge the SCCs and name the contexts. Also permit clients to decide whether to connect the disjoint parts in the call graph or not. 
 */
private void encodeContexts(boolean connectMissedEntries){
  int i, j;
  int n_reachable=0, n_scc_reachable=0;
  int n_full=0;
  long max_contexts=Long.MIN_VALUE;
  Random rGen=new Random();
  pre_cnt=1;
  max_scc_size=1;
  for (i=0; i < n_func; ++i) {
    vis_cg[i]=0;
    indeg_cg[i]=0;
    max_context_size_block[i]=0;
  }
  queue_cg.clear();
  callGraphDFS(Constants.SUPER_MAIN);
  if (connectMissedEntries) {
    for (i=Constants.SUPER_MAIN + 1; i < n_func; ++i)     if (vis_cg[i] == 0)     callGraphDFS(i);
  }
  for (i=0; i < n_func; ++i) {
    if (vis_cg[i] == 0)     continue;
    CgEdge p=call_graph[i];
    while (p != null) {
      if (rep_cg[i] == rep_cg[p.t]) {
        p.scc_edge=true;
      }
 else {
        p.scc_edge=false;
        ++indeg_cg[rep_cg[p.t]];
      }
      p=p.next;
    }
    ++n_reachable;
    if (rep_cg[i] == i)     ++n_scc_reachable;
  }
  if (connectMissedEntries) {
    for (i=Constants.SUPER_MAIN + 1; i < n_func; ++i) {
      int rep_node=rep_cg[i];
      if (indeg_cg[rep_node] == 0) {
        CgEdge p=new CgEdge(Constants.SUPER_MAIN,i,null,call_graph[Constants.SUPER_MAIN]);
        call_graph[Constants.SUPER_MAIN]=p;
        n_calls++;
      }
    }
  }
  for (i=0; i < n_func; ++i)   if (vis_cg[i] != 0 && rep_cg[i] != i) {
    CgEdge p=call_graph[i];
    while (p.next != null)     p=p.next;
    p.next=call_graph[rep_cg[i]];
    call_graph[rep_cg[i]]=call_graph[i];
  }
  max_context_size_block[Constants.SUPER_MAIN]=1;
  queue_cg.addLast(Constants.SUPER_MAIN);
  while (!queue_cg.isEmpty()) {
    i=queue_cg.getFirst();
    queue_cg.removeFirst();
    CgEdge p=call_graph[i];
    while (p != null) {
      if (p.scc_edge == false) {
        j=rep_cg[p.t];
        if (Constants.MAX_CONTEXTS - max_context_size_block[i] < max_context_size_block[j]) {
          long start=rGen.nextLong();
          if (start < 0)           start=-start;
          if (start > Constants.MAX_CONTEXTS - max_context_size_block[i]) {
            start=Constants.MAX_CONTEXTS - max_context_size_block[i];
            max_context_size_block[j]=Constants.MAX_CONTEXTS;
          }
 else {
            if (max_context_size_block[j] < start + max_context_size_block[i])             max_context_size_block[j]=start + max_context_size_block[i];
          }
          p.map_offset=start + 1;
        }
 else {
          p.map_offset=max_context_size_block[j] + 1;
          max_context_size_block[j]+=max_context_size_block[i];
        }
        if (--indeg_cg[j] == 0)         queue_cg.addLast(j);
      }
 else {
        p.map_offset=1;
      }
      p=p.next;
    }
    if (max_context_size_block[i] > max_contexts)     max_contexts=max_context_size_block[i];
  }
  for (i=n_func - 1; i > -1; --i) {
    if (vis_cg[i] == 0)     continue;
    if (rep_cg[i] != i) {
      max_context_size_block[i]=max_context_size_block[rep_cg[i]];
      CgEdge p=call_graph[i];
      while (p.next.s == i)       p=p.next;
      call_graph[rep_cg[i]]=p.next;
      p.next=null;
    }
    if (max_context_size_block[i] == Constants.MAX_CONTEXTS)     ++n_full;
    context_size[i]=max_context_size_block[i];
    block_num[i]=1;
  }
  if (getOpts().geom_blocking()) {
    for (i=0; i < n_func; ++i) {
      if (vis_cg[i] == 0)       continue;
      CgEdge p=call_graph[i];
      while (p != null) {
        j=p.t;
        if (j != i && p.scc_edge == true) {
          if (context_size[j] <= Constants.MAX_CONTEXTS - max_context_size_block[i]) {
            p.map_offset=context_size[j] + 1;
            context_size[j]+=max_context_size_block[i];
            ++block_num[j];
          }
 else {
            int iBlock=0;
            if (block_num[j] > 1)             iBlock=rGen.nextInt(block_num[j] - 1) + 1;
            p.map_offset=iBlock * max_context_size_block[j] + 1;
          }
        }
        p=p.next;
      }
    }
  }
  ps.printf(""String_Node_Str"",n_reachable - 1,n_scc_reachable - 1,n_full);
  ps.printf(""String_Node_Str"",max_scc_size);
  ps.printf(""String_Node_Str"",(double)max_contexts);
}"
85326,"/** 
 * All the pointers that we need their points-to information are marked.
 * @param virtualBaseSet
 */
protected void setAllUserCodeVariablesUseful(){
  for (int i=0; i < n_var; ++i) {
    IVarAbstraction pn=int2var.get(i);
    if (pn != pn.getRepresentative())     continue;
    Node node=pn.getWrappedNode();
    int sm_id=geomPTA.getMappedMethodID(pn);
    if (!geomPTA.isReachableMethod(sm_id))     continue;
    if (node instanceof VarNode) {
      boolean defined_in_lib=false;
      if (node instanceof LocalVarNode) {
        defined_in_lib=((LocalVarNode)node).getMethod().isJavaLibraryMethod();
      }
 else       if (node instanceof GlobalVarNode) {
        SootClass sc=((GlobalVarNode)node).getDeclaringClass();
        if (sc != null)         defined_in_lib=sc.isJavaLibraryClass();
      }
      if (!defined_in_lib && !geomPTA.isExceptionPointer(node)) {
        pn.willUpdate=true;
      }
    }
  }
}","/** 
 * All the pointers that we need their points-to information are marked.
 * @param virtualBaseSet
 */
protected void setAllUserCodeVariablesUseful(){
  for (int i=0; i < n_var; ++i) {
    IVarAbstraction pn=int2var.get(i);
    if (pn != pn.getRepresentative())     continue;
    Node node=pn.getWrappedNode();
    int sm_id=geomPTA.getMethodIDFromPtr(pn);
    if (!geomPTA.isReachableMethod(sm_id))     continue;
    if (node instanceof VarNode) {
      boolean defined_in_lib=false;
      if (node instanceof LocalVarNode) {
        defined_in_lib=((LocalVarNode)node).getMethod().isJavaLibraryMethod();
      }
 else       if (node instanceof GlobalVarNode) {
        SootClass sc=((GlobalVarNode)node).getDeclaringClass();
        if (sc != null)         defined_in_lib=sc.isJavaLibraryClass();
      }
      if (!defined_in_lib && !geomPTA.isExceptionPointer(node)) {
        pn.willUpdate=true;
      }
    }
  }
}"
85327,"@Override public void initFlowGraph(GeomPointsTo ptAnalyzer){
  int k;
  int n_legal_cons;
  int nf1, nf2;
  int code;
  IVarAbstraction my_lhs, my_rhs;
  n_legal_cons=0;
  for (  PlainConstraint cons : ptAnalyzer.constraints) {
    if (!cons.isActive)     continue;
    my_lhs=cons.getLHS().getRepresentative();
    my_rhs=cons.getRHS().getRepresentative();
    nf1=ptAnalyzer.getMappedMethodID(my_lhs);
    nf2=ptAnalyzer.getMappedMethodID(my_rhs);
    code=((nf1 == Constants.SUPER_MAIN ? 1 : 0) << 1) | (nf2 == Constants.SUPER_MAIN ? 1 : 0);
switch (cons.type) {
case Constants.NEW_CONS:
      my_rhs.add_points_to_3((AllocNode)my_lhs.getWrappedNode(),(code & 1) == 1 ? 0 : 1,(code >> 1) == 1 ? 0 : 1,(code & 1) == 1 ? ptAnalyzer.context_size[nf1] : ptAnalyzer.context_size[nf2]);
    ptAnalyzer.getWorklist().push(my_rhs);
  break;
case Constants.ASSIGN_CONS:
if (cons.interCallEdges != null) {
  for (Iterator<Edge> it=cons.interCallEdges.iterator(); it.hasNext(); ) {
    Edge sEdge=it.next();
    CgEdge q=ptAnalyzer.getInternalEdgeFromSootEdge(sEdge);
    if (q.is_obsoleted == true) {
      continue;
    }
    if (nf2 == q.t) {
      if (nf1 == Constants.SUPER_MAIN) {
        my_lhs.add_simple_constraint_3(my_rhs,0,q.map_offset,ptAnalyzer.max_context_size_block[q.s]);
      }
 else {
        if (q.s == q.t) {
          my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf1]);
        }
 else {
          for (k=0; k < ptAnalyzer.block_num[nf1]; ++k) {
            my_lhs.add_simple_constraint_3(my_rhs,k * ptAnalyzer.max_context_size_block[nf1] + 1,q.map_offset,ptAnalyzer.max_context_size_block[nf1]);
          }
        }
      }
    }
 else {
      if (q.s == q.t) {
        my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf2]);
      }
 else {
        for (k=0; k < ptAnalyzer.block_num[nf2]; ++k) {
          my_lhs.add_simple_constraint_3(my_rhs,q.map_offset,k * ptAnalyzer.max_context_size_block[nf2] + 1,ptAnalyzer.max_context_size_block[nf2]);
        }
      }
    }
  }
}
 else {
  my_lhs.add_simple_constraint_3(my_rhs,nf1 == Constants.SUPER_MAIN ? 0 : 1,nf2 == Constants.SUPER_MAIN ? 0 : 1,nf1 == Constants.SUPER_MAIN ? ptAnalyzer.context_size[nf2] : ptAnalyzer.context_size[nf1]);
}
break;
case Constants.LOAD_CONS:
cons.code=full_convertor[code];
cons.otherSide=my_rhs;
my_lhs.put_complex_constraint(cons);
break;
case Constants.STORE_CONS:
cons.code=full_convertor[code];
cons.otherSide=my_lhs;
my_rhs.put_complex_constraint(cons);
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
++n_legal_cons;
}
ptAnalyzer.ps.printf(""String_Node_Str"",n_legal_cons,((double)n_legal_cons / ptAnalyzer.n_init_constraints) * 100);
}","@Override public void initFlowGraph(GeomPointsTo ptAnalyzer){
  int k;
  int n_legal_cons;
  int nf1, nf2;
  int code;
  IVarAbstraction my_lhs, my_rhs;
  n_legal_cons=0;
  for (  PlainConstraint cons : ptAnalyzer.constraints) {
    if (!cons.isActive)     continue;
    my_lhs=cons.getLHS().getRepresentative();
    my_rhs=cons.getRHS().getRepresentative();
    nf1=ptAnalyzer.getMethodIDFromPtr(my_lhs);
    nf2=ptAnalyzer.getMethodIDFromPtr(my_rhs);
    code=((nf1 == Constants.SUPER_MAIN ? 1 : 0) << 1) | (nf2 == Constants.SUPER_MAIN ? 1 : 0);
switch (cons.type) {
case Constants.NEW_CONS:
      my_rhs.add_points_to_3((AllocNode)my_lhs.getWrappedNode(),(code & 1) == 1 ? 0 : 1,(code >> 1) == 1 ? 0 : 1,(code & 1) == 1 ? ptAnalyzer.context_size[nf1] : ptAnalyzer.context_size[nf2]);
    ptAnalyzer.getWorklist().push(my_rhs);
  break;
case Constants.ASSIGN_CONS:
if (cons.interCallEdges != null) {
  for (Iterator<Edge> it=cons.interCallEdges.iterator(); it.hasNext(); ) {
    Edge sEdge=it.next();
    CgEdge q=ptAnalyzer.getInternalEdgeFromSootEdge(sEdge);
    if (q.is_obsoleted == true) {
      continue;
    }
    if (nf2 == q.t) {
      if (nf1 == Constants.SUPER_MAIN) {
        my_lhs.add_simple_constraint_3(my_rhs,0,q.map_offset,ptAnalyzer.max_context_size_block[q.s]);
      }
 else {
        if (q.s == q.t) {
          my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf1]);
        }
 else {
          for (k=0; k < ptAnalyzer.block_num[nf1]; ++k) {
            my_lhs.add_simple_constraint_3(my_rhs,k * ptAnalyzer.max_context_size_block[nf1] + 1,q.map_offset,ptAnalyzer.max_context_size_block[nf1]);
          }
        }
      }
    }
 else {
      if (q.s == q.t) {
        my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf2]);
      }
 else {
        for (k=0; k < ptAnalyzer.block_num[nf2]; ++k) {
          my_lhs.add_simple_constraint_3(my_rhs,q.map_offset,k * ptAnalyzer.max_context_size_block[nf2] + 1,ptAnalyzer.max_context_size_block[nf2]);
        }
      }
    }
  }
}
 else {
  my_lhs.add_simple_constraint_3(my_rhs,nf1 == Constants.SUPER_MAIN ? 0 : 1,nf2 == Constants.SUPER_MAIN ? 0 : 1,nf1 == Constants.SUPER_MAIN ? ptAnalyzer.context_size[nf2] : ptAnalyzer.context_size[nf1]);
}
break;
case Constants.LOAD_CONS:
cons.code=full_convertor[code];
cons.otherSide=my_rhs;
my_lhs.put_complex_constraint(cons);
break;
case Constants.STORE_CONS:
cons.code=full_convertor[code];
cons.otherSide=my_lhs;
my_rhs.put_complex_constraint(cons);
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
++n_legal_cons;
}
ptAnalyzer.ps.printf(""String_Node_Str"",n_legal_cons,((double)n_legal_cons / ptAnalyzer.n_init_constraints) * 100);
}"
85328,"@Override public void initFlowGraph(GeomPointsTo ptAnalyzer){
  int k;
  int n_legal_cons;
  int nf1, nf2;
  int code;
  CgEdge q;
  IVarAbstraction my_lhs, my_rhs;
  n_legal_cons=0;
  for (  PlainConstraint cons : ptAnalyzer.constraints) {
    if (!cons.isActive)     continue;
    my_lhs=cons.getLHS().getRepresentative();
    my_rhs=cons.getRHS().getRepresentative();
    nf1=ptAnalyzer.getMappedMethodID(my_lhs);
    nf2=ptAnalyzer.getMappedMethodID(my_rhs);
    code=((nf1 == Constants.SUPER_MAIN ? 1 : 0) << 1) | (nf2 == Constants.SUPER_MAIN ? 1 : 0);
switch (cons.type) {
case Constants.NEW_CONS:
      my_rhs.add_points_to_3((AllocNode)my_lhs.getWrappedNode(),nf2 == Constants.SUPER_MAIN ? 0 : 1,nf1 == Constants.SUPER_MAIN ? 0 : 1,nf2 == Constants.SUPER_MAIN ? ptAnalyzer.context_size[nf1] : ptAnalyzer.context_size[nf2]);
    ptAnalyzer.getWorklist().push(my_rhs);
  break;
case Constants.ASSIGN_CONS:
if (cons.interCallEdges != null) {
  for (Iterator<Edge> it=cons.interCallEdges.iterator(); it.hasNext(); ) {
    Edge sEdge=it.next();
    q=ptAnalyzer.getInternalEdgeFromSootEdge(sEdge);
    if (q.is_obsoleted == true) {
      continue;
    }
    if (nf2 == q.t) {
      if (nf1 == Constants.SUPER_MAIN) {
        my_lhs.add_simple_constraint_3(my_rhs,0,q.map_offset,ptAnalyzer.max_context_size_block[q.s]);
      }
 else {
        if (q.s == q.t) {
          my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf1]);
        }
 else {
          for (k=0; k < ptAnalyzer.block_num[nf1]; ++k) {
            my_lhs.add_simple_constraint_3(my_rhs,k * ptAnalyzer.max_context_size_block[nf1] + 1,q.map_offset,ptAnalyzer.max_context_size_block[nf1]);
          }
        }
      }
    }
 else {
      if (q.s == q.t) {
        my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf2]);
      }
 else {
        for (k=0; k < ptAnalyzer.block_num[nf2]; ++k) {
          my_lhs.add_simple_constraint_3(my_rhs,q.map_offset,k * ptAnalyzer.max_context_size_block[nf2] + 1,ptAnalyzer.max_context_size_block[nf2]);
        }
      }
    }
  }
}
 else {
  my_lhs.add_simple_constraint_3(my_rhs,nf1 == Constants.SUPER_MAIN ? 0 : 1,nf2 == Constants.SUPER_MAIN ? 0 : 1,nf1 == Constants.SUPER_MAIN ? ptAnalyzer.context_size[nf2] : ptAnalyzer.context_size[nf1]);
}
break;
case Constants.LOAD_CONS:
cons.code=full_convertor[code];
cons.otherSide=my_rhs;
my_lhs.put_complex_constraint(cons);
break;
case Constants.STORE_CONS:
cons.code=full_convertor[code];
cons.otherSide=my_lhs;
my_rhs.put_complex_constraint(cons);
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
++n_legal_cons;
}
ptAnalyzer.ps.printf(""String_Node_Str"",n_legal_cons,((double)n_legal_cons / ptAnalyzer.n_init_constraints) * 100);
}","@Override public void initFlowGraph(GeomPointsTo ptAnalyzer){
  int k;
  int n_legal_cons;
  int nf1, nf2;
  int code;
  CgEdge q;
  IVarAbstraction my_lhs, my_rhs;
  n_legal_cons=0;
  for (  PlainConstraint cons : ptAnalyzer.constraints) {
    if (!cons.isActive)     continue;
    my_lhs=cons.getLHS().getRepresentative();
    my_rhs=cons.getRHS().getRepresentative();
    nf1=ptAnalyzer.getMethodIDFromPtr(my_lhs);
    nf2=ptAnalyzer.getMethodIDFromPtr(my_rhs);
    code=((nf1 == Constants.SUPER_MAIN ? 1 : 0) << 1) | (nf2 == Constants.SUPER_MAIN ? 1 : 0);
switch (cons.type) {
case Constants.NEW_CONS:
      my_rhs.add_points_to_3((AllocNode)my_lhs.getWrappedNode(),nf2 == Constants.SUPER_MAIN ? 0 : 1,nf1 == Constants.SUPER_MAIN ? 0 : 1,nf2 == Constants.SUPER_MAIN ? ptAnalyzer.context_size[nf1] : ptAnalyzer.context_size[nf2]);
    ptAnalyzer.getWorklist().push(my_rhs);
  break;
case Constants.ASSIGN_CONS:
if (cons.interCallEdges != null) {
  for (Iterator<Edge> it=cons.interCallEdges.iterator(); it.hasNext(); ) {
    Edge sEdge=it.next();
    q=ptAnalyzer.getInternalEdgeFromSootEdge(sEdge);
    if (q.is_obsoleted == true) {
      continue;
    }
    if (nf2 == q.t) {
      if (nf1 == Constants.SUPER_MAIN) {
        my_lhs.add_simple_constraint_3(my_rhs,0,q.map_offset,ptAnalyzer.max_context_size_block[q.s]);
      }
 else {
        if (q.s == q.t) {
          my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf1]);
        }
 else {
          for (k=0; k < ptAnalyzer.block_num[nf1]; ++k) {
            my_lhs.add_simple_constraint_3(my_rhs,k * ptAnalyzer.max_context_size_block[nf1] + 1,q.map_offset,ptAnalyzer.max_context_size_block[nf1]);
          }
        }
      }
    }
 else {
      if (q.s == q.t) {
        my_lhs.add_simple_constraint_3(my_rhs,1,1,ptAnalyzer.context_size[nf2]);
      }
 else {
        for (k=0; k < ptAnalyzer.block_num[nf2]; ++k) {
          my_lhs.add_simple_constraint_3(my_rhs,q.map_offset,k * ptAnalyzer.max_context_size_block[nf2] + 1,ptAnalyzer.max_context_size_block[nf2]);
        }
      }
    }
  }
}
 else {
  my_lhs.add_simple_constraint_3(my_rhs,nf1 == Constants.SUPER_MAIN ? 0 : 1,nf2 == Constants.SUPER_MAIN ? 0 : 1,nf1 == Constants.SUPER_MAIN ? ptAnalyzer.context_size[nf2] : ptAnalyzer.context_size[nf1]);
}
break;
case Constants.LOAD_CONS:
cons.code=full_convertor[code];
cons.otherSide=my_rhs;
my_lhs.put_complex_constraint(cons);
break;
case Constants.STORE_CONS:
cons.code=full_convertor[code];
cons.otherSide=my_lhs;
my_rhs.put_complex_constraint(cons);
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
++n_legal_cons;
}
ptAnalyzer.ps.printf(""String_Node_Str"",n_legal_cons,((double)n_legal_cons / ptAnalyzer.n_init_constraints) * 100);
}"
85329,"/** 
 * Finds or creates the GlobalVarNode for the variable value, of type type. 
 */
public GlobalVarNode makeGlobalVarNode(Object value,Type type){
  if (opts.rta()) {
    value=null;
    type=RefType.v(""String_Node_Str"");
  }
  GlobalVarNode ret=valToGlobalVarNode.get(value);
  if (ret == null) {
    valToGlobalVarNode.put(value,ret=new GlobalVarNode(this,value,type));
    if (opts.library() != SparkOptions.library_disabled && type instanceof RefType) {
      RefType rt=(RefType)type;
      if (value instanceof SootField) {
        SootField sf=(SootField)value;
        if (sf.isPublic() || sf.isProtected())         if (opts.library() == SparkOptions.library_any_subtype) {
          Node alloc=makeAllocNode(value,AnySubType.v(rt),null);
          addEdge(alloc,ret);
        }
 else         if (opts.library() == SparkOptions.library_name_resolution) {
          Node alloc=makeAllocNode(value,AnySubType.v(rt),null);
          addEdge(alloc,ret);
        }
      }
    }
    addNodeTag(ret,null);
  }
 else   if (!(ret.getType().equals(type))) {
    throw new RuntimeException(""String_Node_Str"" + value + ""String_Node_Str""+ type+ ""String_Node_Str""+ ret.getType());
  }
  return ret;
}","/** 
 * Finds or creates the GlobalVarNode for the variable value, of type type. 
 */
public GlobalVarNode makeGlobalVarNode(Object value,Type type){
  if (opts.rta()) {
    value=null;
    type=RefType.v(""String_Node_Str"");
  }
  GlobalVarNode ret=valToGlobalVarNode.get(value);
  if (ret == null) {
    valToGlobalVarNode.put(value,ret=new GlobalVarNode(this,value,type));
    if (opts.library() != SparkOptions.library_disabled && type instanceof RefType) {
      RefType rt=(RefType)type;
      if (value instanceof SootField) {
        SootField sf=(SootField)value;
        if (sf.isPublic() || sf.isProtected())         if (opts.library() == SparkOptions.library_any_subtype) {
          Node alloc=makeAllocNode(value,AnySubType.v(rt),null);
          addEdge(alloc,ret);
        }
 else         if (opts.library() == SparkOptions.library_name_resolution) {
          Node alloc=makeAllocNode(value,AnyPossibleSubType.v(rt),null);
          addEdge(alloc,ret);
        }
      }
    }
    addNodeTag(ret,null);
  }
 else   if (!(ret.getType().equals(type))) {
    throw new RuntimeException(""String_Node_Str"" + value + ""String_Node_Str""+ type+ ""String_Node_Str""+ ret.getType());
  }
  return ret;
}"
85330,"private void processCmdLine(String[] args){
  if (!Options.v().parse(args))   throw new CompilationDeathException(CompilationDeathException.COMPILATION_ABORTED,""String_Node_Str"");
  if (PackManager.v().onlyStandardPacks()) {
    for (    Pack pack : PackManager.v().allPacks()) {
      Options.v().warnForeignPhase(pack.getPhaseName());
      for (Iterator<Transform> trIt=pack.iterator(); trIt.hasNext(); ) {
        final Transform tr=trIt.next();
        Options.v().warnForeignPhase(tr.getPhaseName());
      }
    }
  }
  Options.v().warnNonexistentPhase();
  if (Options.v().help()) {
    G.v().out.println(Options.v().getUsage());
    throw new CompilationDeathException(CompilationDeathException.COMPILATION_SUCCEEDED);
  }
  if (Options.v().phase_list()) {
    G.v().out.println(Options.v().getPhaseList());
    throw new CompilationDeathException(CompilationDeathException.COMPILATION_SUCCEEDED);
  }
  if (!Options.v().phase_help().isEmpty()) {
    for (Iterator<String> phaseIt=Options.v().phase_help().iterator(); phaseIt.hasNext(); ) {
      final String phase=phaseIt.next();
      G.v().out.println(Options.v().getPhaseHelp(phase));
    }
    throw new CompilationDeathException(CompilationDeathException.COMPILATION_SUCCEEDED);
  }
  if ((!Options.v().unfriendly_mode() && args.length == 0) || Options.v().version()) {
    printVersion();
    throw new CompilationDeathException(CompilationDeathException.COMPILATION_SUCCEEDED);
  }
  if (Options.v().on_the_fly()) {
    Options.v().set_whole_program(true);
    PhaseOptions.v().setPhaseOption(""String_Node_Str"",""String_Node_Str"");
  }
  postCmdLineCheck();
}","private void processCmdLine(String[] args){
  if (!Options.v().parse(args))   throw new OptionsParseException(""String_Node_Str"");
  if (PackManager.v().onlyStandardPacks()) {
    for (    Pack pack : PackManager.v().allPacks()) {
      Options.v().warnForeignPhase(pack.getPhaseName());
      for (Iterator<Transform> trIt=pack.iterator(); trIt.hasNext(); ) {
        final Transform tr=trIt.next();
        Options.v().warnForeignPhase(tr.getPhaseName());
      }
    }
  }
  Options.v().warnNonexistentPhase();
  if (Options.v().help()) {
    G.v().out.println(Options.v().getUsage());
    throw new CompilationDeathException(CompilationDeathException.COMPILATION_SUCCEEDED);
  }
  if (Options.v().phase_list()) {
    G.v().out.println(Options.v().getPhaseList());
    throw new CompilationDeathException(CompilationDeathException.COMPILATION_SUCCEEDED);
  }
  if (!Options.v().phase_help().isEmpty()) {
    for (Iterator<String> phaseIt=Options.v().phase_help().iterator(); phaseIt.hasNext(); ) {
      final String phase=phaseIt.next();
      G.v().out.println(Options.v().getPhaseHelp(phase));
    }
    throw new CompilationDeathException(CompilationDeathException.COMPILATION_SUCCEEDED);
  }
  if ((!Options.v().unfriendly_mode() && args.length == 0) || Options.v().version()) {
    printVersion();
    throw new CompilationDeathException(CompilationDeathException.COMPILATION_SUCCEEDED);
  }
  if (Options.v().on_the_fly()) {
    Options.v().set_whole_program(true);
    PhaseOptions.v().setPhaseOption(""String_Node_Str"",""String_Node_Str"");
  }
  postCmdLineCheck();
}"
85331,"/** 
 * Entry point for cmd line invocation of soot.
 */
public static void main(String[] args){
  try {
    Main.v().run(args);
  }
 catch (  StackOverflowError e) {
    G.v().out.println(""String_Node_Str"");
    G.v().out.println(""String_Node_Str"");
    G.v().out.println(""String_Node_Str"");
    throw e;
  }
catch (  OutOfMemoryError e) {
    G.v().out.println(""String_Node_Str"");
    G.v().out.println(""String_Node_Str"");
    G.v().out.println(""String_Node_Str"");
    throw e;
  }
catch (  RuntimeException e) {
    e.printStackTrace();
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    e.printStackTrace(new PrintStream(bos));
    String stackStraceString=bos.toString();
    try {
      final String TRACKER_URL=""String_Node_Str"";
      String commandLineArgs=Joiner.on(""String_Node_Str"").join(args);
      String body=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + versionString + ""String_Node_Str""+ ""String_Node_Str""+ commandLineArgs+ ""String_Node_Str""+ Runtime.getRuntime().maxMemory() / (1024 * 1024) + ""String_Node_Str"" + stackStraceString;
      String title=e.getClass().getName() + ""String_Node_Str"";
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"" + TRACKER_URL + ""String_Node_Str""+ URLEncoder.encode(title,""String_Node_Str"")+ ""String_Node_Str""+ URLEncoder.encode(body,""String_Node_Str"")+ ""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      System.err.println(sb.toString());
    }
 catch (    UnsupportedEncodingException e1) {
    }
  }
}","/** 
 * Entry point for cmd line invocation of soot.
 */
public static void main(String[] args){
  try {
    Main.v().run(args);
  }
 catch (  OptionsParseException e) {
  }
catch (  StackOverflowError e) {
    G.v().out.println(""String_Node_Str"");
    G.v().out.println(""String_Node_Str"");
    G.v().out.println(""String_Node_Str"");
    throw e;
  }
catch (  OutOfMemoryError e) {
    G.v().out.println(""String_Node_Str"");
    G.v().out.println(""String_Node_Str"");
    G.v().out.println(""String_Node_Str"");
    throw e;
  }
catch (  RuntimeException e) {
    e.printStackTrace();
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    e.printStackTrace(new PrintStream(bos));
    String stackStraceString=bos.toString();
    try {
      final String TRACKER_URL=""String_Node_Str"";
      String commandLineArgs=Joiner.on(""String_Node_Str"").join(args);
      String body=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + versionString + ""String_Node_Str""+ ""String_Node_Str""+ commandLineArgs+ ""String_Node_Str""+ Runtime.getRuntime().maxMemory() / (1024 * 1024) + ""String_Node_Str"" + stackStraceString;
      String title=e.getClass().getName() + ""String_Node_Str"";
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"" + TRACKER_URL + ""String_Node_Str""+ URLEncoder.encode(title,""String_Node_Str"")+ ""String_Node_Str""+ URLEncoder.encode(body,""String_Node_Str"")+ ""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      System.err.println(sb.toString());
    }
 catch (    UnsupportedEncodingException e1) {
    }
  }
}"
85332,"/** 
 * Return the jimple equivalent of this body.
 * @param m the SootMethod that contains this body
 */
public Body jimplify(Body b,SootMethod m){
  jBody=(JimpleBody)b;
  localGenerator=new LocalGenerator(jBody);
  deferredInstructions=new ArrayList<DeferableInstruction>();
  instructionsToRetype=new HashSet<RetypeableInstruction>();
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    Debug.printDbg(IDalvikTyper.DEBUG,""String_Node_Str"");
    DalvikTyper.v().clear();
  }
  Debug.printDbg(""String_Node_Str"",methodSignature);
  List<Local> paramLocals=new LinkedList<Local>();
  if (!isStatic) {
    int thisRegister=numRegisters - numParameterRegisters - 1;
    Local thisLocal=Jimple.v().newLocal(""String_Node_Str"" + thisRegister,UnknownType.v());
    jBody.getLocals().add(thisLocal);
    registerLocals[thisRegister]=thisLocal;
    JIdentityStmt idStmt=(JIdentityStmt)Jimple.v().newIdentityStmt(thisLocal,Jimple.v().newThisRef(declaringClassType));
    add(idStmt);
    paramLocals.add(thisLocal);
    if (IDalvikTyper.ENABLE_DVKTYPER) {
      Debug.printDbg(IDalvikTyper.DEBUG,""String_Node_Str"",idStmt);
      DalvikTyper.v().setType(idStmt.leftBox,jBody.getMethod().getDeclaringClass().getType(),false);
    }
  }
{
    int i=0;
    int parameterRegister=numRegisters - numParameterRegisters;
    for (    Type t : parameterTypes) {
      Local gen=Jimple.v().newLocal(""String_Node_Str"" + parameterRegister,UnknownType.v());
      jBody.getLocals().add(gen);
      Debug.printDbg(""String_Node_Str"",parameterRegister);
      registerLocals[parameterRegister]=gen;
      JIdentityStmt idStmt=(JIdentityStmt)Jimple.v().newIdentityStmt(gen,Jimple.v().newParameterRef(t,i++));
      add(idStmt);
      paramLocals.add(gen);
      if (IDalvikTyper.ENABLE_DVKTYPER) {
        Debug.printDbg(IDalvikTyper.DEBUG,""String_Node_Str"" + idStmt);
        DalvikTyper.v().setType(idStmt.leftBox,t,false);
      }
      if (t instanceof LongType || t instanceof DoubleType) {
        parameterRegister++;
        Local g=Jimple.v().newLocal(""String_Node_Str"" + parameterRegister,UnknownType.v());
        jBody.getLocals().add(g);
        registerLocals[parameterRegister]=g;
      }
      parameterRegister++;
    }
  }
  for (int i=0; i < (numRegisters - numParameterRegisters - (isStatic ? 0 : 1)); i++) {
    Debug.printDbg(""String_Node_Str"",i);
    registerLocals[i]=Jimple.v().newLocal(""String_Node_Str"" + i,UnknownType.v());
    jBody.getLocals().add(registerLocals[i]);
  }
  storeResultLocal=Jimple.v().newLocal(""String_Node_Str"",UnknownType.v());
  jBody.getLocals().add(storeResultLocal);
  final boolean isOdex=dexFile instanceof DexBackedDexFile ? ((DexBackedDexFile)dexFile).isOdexFile() : false;
  int prevLineNumber=-1;
  for (  DexlibAbstractInstruction instruction : instructions) {
    if (isOdex && instruction instanceof OdexInstruction)     ((OdexInstruction)instruction).deOdex(dexFile);
    if (dangling != null) {
      dangling.finalize(this,instruction);
      dangling=null;
    }
    instruction.jimplify(this);
    if (instruction.getLineNumber() > 0)     prevLineNumber=instruction.getLineNumber();
 else {
      instruction.setLineNumber(prevLineNumber);
    }
  }
  for (  DeferableInstruction instruction : deferredInstructions) {
    instruction.deferredJimplify(this);
  }
  if (tries != null)   addTraps();
  instructions=null;
  instructionAtAddress.clear();
  deferredInstructions=null;
  dangling=null;
  tries=null;
  Debug.printDbg(""String_Node_Str"",jBody);
  Debug.printDbg(""String_Node_Str"");
  Debug.printDbg(""String_Node_Str"",(Body)jBody);
  getLocalSplitter().transform(jBody);
  getUnreachableCodeEliminator().transform(jBody);
  DeadAssignmentEliminator.v().transform(jBody);
  UnusedLocalEliminator.v().transform(jBody);
  DexReturnInliner.v().transform(jBody);
  Debug.printDbg(""String_Node_Str"");
  Debug.printDbg(""String_Node_Str"",(Body)jBody);
  for (  RetypeableInstruction i : instructionsToRetype)   i.retype(jBody);
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    Debug.printDbg(""String_Node_Str"");
    DalvikTyper.v().assignType(jBody);
    Debug.printDbg(""String_Node_Str"");
    jBody.validateUses();
    jBody.validateValueBoxes();
    Validate.validateArrays(jBody);
    Debug.printDbg(""String_Node_Str"");
  }
 else {
    DexNumTransformer.v().transform(jBody);
    DexReturnValuePropagator.v().transform(jBody);
    getCopyPopagator().transform(jBody);
    DexNullThrowTransformer.v().transform(jBody);
    DexNullTransformer.v().transform(jBody);
    DexIfTransformer.v().transform(jBody);
    DeadAssignmentEliminator.v().transform(jBody);
    UnusedLocalEliminator.v().transform(jBody);
    DexNullArrayRefTransformer.v().transform(jBody);
    Debug.printDbg(""String_Node_Str"");
  }
  Debug.printDbg(""String_Node_Str"",(Body)jBody);
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    for (    Local l : jBody.getLocals()) {
      l.setType(UnknownType.v());
    }
  }
  TypeAssigner.v().transform(jBody);
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    for (    Unit u : jBody.getUnits()) {
      if (u instanceof IfStmt) {
        ConditionExpr expr=(ConditionExpr)((IfStmt)u).getCondition();
        if (((expr instanceof EqExpr) || (expr instanceof NeExpr))) {
          Value op1=expr.getOp1();
          Value op2=expr.getOp2();
          if (op1 instanceof Constant && op2 instanceof Local) {
            Local l=(Local)op2;
            Type ltype=l.getType();
            if (ltype instanceof PrimType)             continue;
            if (!(op1 instanceof IntConstant))             continue;
            IntConstant icst=(IntConstant)op1;
            int val=icst.value;
            if (val != 0)             continue;
            expr.setOp1(NullConstant.v());
          }
 else           if (op1 instanceof Local && op2 instanceof Constant) {
            Local l=(Local)op1;
            Type ltype=l.getType();
            if (ltype instanceof PrimType)             continue;
            if (!(op2 instanceof IntConstant))             continue;
            IntConstant icst=(IntConstant)op2;
            int val=icst.value;
            if (val != 0)             continue;
            expr.setOp2(NullConstant.v());
          }
 else           if (op1 instanceof Local && op2 instanceof Local) {
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + u);
          }
        }
      }
    }
    List<ValueBox> uses=jBody.getUseBoxes();
    List<ValueBox> toNullConstantify=new ArrayList<ValueBox>();
    List<Local> toRemove=new ArrayList<Local>();
    for (    Local l : jBody.getLocals()) {
      if (l.getType() instanceof NullType) {
        toRemove.add(l);
        for (        ValueBox vb : uses) {
          Value v=vb.getValue();
          if (v == l)           toNullConstantify.add(vb);
        }
      }
    }
    for (    ValueBox vb : toNullConstantify) {
      System.out.println(""String_Node_Str"" + vb + ""String_Node_Str"");
      vb.setValue(NullConstant.v());
    }
    for (    Local l : toRemove) {
      System.out.println(""String_Node_Str"" + l);
      l.setType(RefType.v(""String_Node_Str""));
    }
  }
  LocalPacker.v().transform(jBody);
  UnusedLocalEliminator.v().transform(jBody);
  LocalNameStandardizer.v().transform(jBody);
  Debug.printDbg(""String_Node_Str"");
  Debug.printDbg(""String_Node_Str"",(Body)jBody);
  TrapTightener.v().transform(jBody);
  TrapMinimizer.v().transform(jBody);
  Aggregator.v().transform(jBody);
  ConditionalBranchFolder.v().transform(jBody);
  UnreachableCodeEliminator.v().transform(jBody);
  DeadAssignmentEliminator.v().transform(jBody);
  UnusedLocalEliminator.v().transform(jBody);
  NopEliminator.v().transform(jBody);
  if (m.toString().equals(""String_Node_Str""))   System.out.println(""String_Node_Str"");
  for (  Unit u : jBody.getUnits()) {
    if (u instanceof AssignStmt) {
      AssignStmt ass=(AssignStmt)u;
      if (ass.getRightOp() instanceof CastExpr) {
        CastExpr c=(CastExpr)ass.getRightOp();
        if (c.getType() instanceof NullType) {
          Debug.printDbg(""String_Node_Str"",u);
          ass.setRightOp(NullConstant.v());
        }
      }
    }
    if (u instanceof DefinitionStmt) {
      DefinitionStmt def=(DefinitionStmt)u;
      if (def.getLeftOp() instanceof Local && def.getRightOp() instanceof CaughtExceptionRef) {
        Type t=def.getLeftOp().getType();
        if (t instanceof RefType) {
          RefType rt=(RefType)t;
          if (rt.getSootClass().isPhantom() && !rt.getSootClass().hasSuperclass() && !rt.getSootClass().getName().equals(""String_Node_Str""))           rt.getSootClass().setSuperclass(Scene.v().getSootClass(""String_Node_Str""));
        }
      }
    }
  }
  Debug.printDbg(""String_Node_Str"");
  Debug.printDbg(""String_Node_Str"",(Body)jBody);
  for (  Local l : jBody.getLocals()) {
    Type t=l.getType();
    if (t instanceof NullType) {
      Debug.printDbg(""String_Node_Str"",l);
      l.setType(RefType.v(""String_Node_Str""));
    }
  }
  return jBody;
}","/** 
 * Return the jimple equivalent of this body.
 * @param m the SootMethod that contains this body
 */
public Body jimplify(Body b,SootMethod m){
  jBody=(JimpleBody)b;
  localGenerator=new LocalGenerator(jBody);
  deferredInstructions=new ArrayList<DeferableInstruction>();
  instructionsToRetype=new HashSet<RetypeableInstruction>();
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    Debug.printDbg(IDalvikTyper.DEBUG,""String_Node_Str"");
    DalvikTyper.v().clear();
  }
  Debug.printDbg(""String_Node_Str"",methodSignature);
  List<Local> paramLocals=new LinkedList<Local>();
  if (!isStatic) {
    int thisRegister=numRegisters - numParameterRegisters - 1;
    Local thisLocal=Jimple.v().newLocal(""String_Node_Str"" + thisRegister,UnknownType.v());
    jBody.getLocals().add(thisLocal);
    registerLocals[thisRegister]=thisLocal;
    JIdentityStmt idStmt=(JIdentityStmt)Jimple.v().newIdentityStmt(thisLocal,Jimple.v().newThisRef(declaringClassType));
    add(idStmt);
    paramLocals.add(thisLocal);
    if (IDalvikTyper.ENABLE_DVKTYPER) {
      Debug.printDbg(IDalvikTyper.DEBUG,""String_Node_Str"",idStmt);
      DalvikTyper.v().setType(idStmt.leftBox,jBody.getMethod().getDeclaringClass().getType(),false);
    }
  }
{
    int i=0;
    int parameterRegister=numRegisters - numParameterRegisters;
    for (    Type t : parameterTypes) {
      Local gen=Jimple.v().newLocal(""String_Node_Str"" + parameterRegister,UnknownType.v());
      jBody.getLocals().add(gen);
      Debug.printDbg(""String_Node_Str"",parameterRegister);
      registerLocals[parameterRegister]=gen;
      JIdentityStmt idStmt=(JIdentityStmt)Jimple.v().newIdentityStmt(gen,Jimple.v().newParameterRef(t,i++));
      add(idStmt);
      paramLocals.add(gen);
      if (IDalvikTyper.ENABLE_DVKTYPER) {
        Debug.printDbg(IDalvikTyper.DEBUG,""String_Node_Str"" + idStmt);
        DalvikTyper.v().setType(idStmt.leftBox,t,false);
      }
      if (t instanceof LongType || t instanceof DoubleType) {
        parameterRegister++;
        Local g=Jimple.v().newLocal(""String_Node_Str"" + parameterRegister,UnknownType.v());
        jBody.getLocals().add(g);
        registerLocals[parameterRegister]=g;
      }
      parameterRegister++;
    }
  }
  for (int i=0; i < (numRegisters - numParameterRegisters - (isStatic ? 0 : 1)); i++) {
    Debug.printDbg(""String_Node_Str"",i);
    registerLocals[i]=Jimple.v().newLocal(""String_Node_Str"" + i,UnknownType.v());
    jBody.getLocals().add(registerLocals[i]);
  }
  storeResultLocal=Jimple.v().newLocal(""String_Node_Str"",UnknownType.v());
  jBody.getLocals().add(storeResultLocal);
  final boolean isOdex=dexFile instanceof DexBackedDexFile ? ((DexBackedDexFile)dexFile).isOdexFile() : false;
  int prevLineNumber=-1;
  for (  DexlibAbstractInstruction instruction : instructions) {
    if (isOdex && instruction instanceof OdexInstruction)     ((OdexInstruction)instruction).deOdex(dexFile);
    if (dangling != null) {
      dangling.finalize(this,instruction);
      dangling=null;
    }
    instruction.jimplify(this);
    if (instruction.getLineNumber() > 0)     prevLineNumber=instruction.getLineNumber();
 else {
      instruction.setLineNumber(prevLineNumber);
    }
  }
  for (  DeferableInstruction instruction : deferredInstructions) {
    instruction.deferredJimplify(this);
  }
  if (tries != null)   addTraps();
  instructions=null;
  instructionAtAddress.clear();
  deferredInstructions=null;
  dangling=null;
  tries=null;
  Debug.printDbg(""String_Node_Str"",jBody);
  Debug.printDbg(""String_Node_Str"");
  Debug.printDbg(""String_Node_Str"",(Body)jBody);
  getLocalSplitter().transform(jBody);
  getUnreachableCodeEliminator().transform(jBody);
  DeadAssignmentEliminator.v().transform(jBody);
  UnusedLocalEliminator.v().transform(jBody);
  DexReturnInliner.v().transform(jBody);
  Debug.printDbg(""String_Node_Str"");
  Debug.printDbg(""String_Node_Str"",(Body)jBody);
  for (  RetypeableInstruction i : instructionsToRetype)   i.retype(jBody);
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    Debug.printDbg(""String_Node_Str"");
    DalvikTyper.v().assignType(jBody);
    Debug.printDbg(""String_Node_Str"");
    jBody.validateUses();
    jBody.validateValueBoxes();
    Validate.validateArrays(jBody);
    Debug.printDbg(""String_Node_Str"");
  }
 else {
    DexNumTransformer.v().transform(jBody);
    DexReturnValuePropagator.v().transform(jBody);
    getCopyPopagator().transform(jBody);
    DexNullThrowTransformer.v().transform(jBody);
    DexNullTransformer.v().transform(jBody);
    DexIfTransformer.v().transform(jBody);
    DeadAssignmentEliminator.v().transform(jBody);
    UnusedLocalEliminator.v().transform(jBody);
    DexNullArrayRefTransformer.v().transform(jBody);
    Debug.printDbg(""String_Node_Str"");
  }
  Debug.printDbg(""String_Node_Str"",(Body)jBody);
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    for (    Local l : jBody.getLocals()) {
      l.setType(UnknownType.v());
    }
  }
  TypeAssigner.v().transform(jBody);
  if (IDalvikTyper.ENABLE_DVKTYPER) {
    for (    Unit u : jBody.getUnits()) {
      if (u instanceof IfStmt) {
        ConditionExpr expr=(ConditionExpr)((IfStmt)u).getCondition();
        if (((expr instanceof EqExpr) || (expr instanceof NeExpr))) {
          Value op1=expr.getOp1();
          Value op2=expr.getOp2();
          if (op1 instanceof Constant && op2 instanceof Local) {
            Local l=(Local)op2;
            Type ltype=l.getType();
            if (ltype instanceof PrimType)             continue;
            if (!(op1 instanceof IntConstant))             continue;
            IntConstant icst=(IntConstant)op1;
            int val=icst.value;
            if (val != 0)             continue;
            expr.setOp1(NullConstant.v());
          }
 else           if (op1 instanceof Local && op2 instanceof Constant) {
            Local l=(Local)op1;
            Type ltype=l.getType();
            if (ltype instanceof PrimType)             continue;
            if (!(op2 instanceof IntConstant))             continue;
            IntConstant icst=(IntConstant)op2;
            int val=icst.value;
            if (val != 0)             continue;
            expr.setOp2(NullConstant.v());
          }
 else           if (op1 instanceof Local && op2 instanceof Local) {
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + u);
          }
        }
      }
    }
    List<ValueBox> uses=jBody.getUseBoxes();
    List<ValueBox> toNullConstantify=new ArrayList<ValueBox>();
    List<Local> toRemove=new ArrayList<Local>();
    for (    Local l : jBody.getLocals()) {
      if (l.getType() instanceof NullType) {
        toRemove.add(l);
        for (        ValueBox vb : uses) {
          Value v=vb.getValue();
          if (v == l)           toNullConstantify.add(vb);
        }
      }
    }
    for (    ValueBox vb : toNullConstantify) {
      System.out.println(""String_Node_Str"" + vb + ""String_Node_Str"");
      vb.setValue(NullConstant.v());
    }
    for (    Local l : toRemove) {
      System.out.println(""String_Node_Str"" + l);
      l.setType(RefType.v(""String_Node_Str""));
    }
  }
  LocalPacker.v().transform(jBody);
  UnusedLocalEliminator.v().transform(jBody);
  LocalNameStandardizer.v().transform(jBody);
  Debug.printDbg(""String_Node_Str"");
  Debug.printDbg(""String_Node_Str"",(Body)jBody);
  TrapTightener.v().transform(jBody);
  TrapMinimizer.v().transform(jBody);
  Aggregator.v().transform(jBody);
  ConditionalBranchFolder.v().transform(jBody);
  ConstantCastEliminator.v().transform(jBody);
  UnreachableCodeEliminator.v().transform(jBody);
  DeadAssignmentEliminator.v().transform(jBody);
  UnusedLocalEliminator.v().transform(jBody);
  NopEliminator.v().transform(jBody);
  if (m.toString().equals(""String_Node_Str""))   System.out.println(""String_Node_Str"");
  for (  Unit u : jBody.getUnits()) {
    if (u instanceof AssignStmt) {
      AssignStmt ass=(AssignStmt)u;
      if (ass.getRightOp() instanceof CastExpr) {
        CastExpr c=(CastExpr)ass.getRightOp();
        if (c.getType() instanceof NullType) {
          Debug.printDbg(""String_Node_Str"",u);
          ass.setRightOp(NullConstant.v());
        }
      }
    }
    if (u instanceof DefinitionStmt) {
      DefinitionStmt def=(DefinitionStmt)u;
      if (def.getLeftOp() instanceof Local && def.getRightOp() instanceof CaughtExceptionRef) {
        Type t=def.getLeftOp().getType();
        if (t instanceof RefType) {
          RefType rt=(RefType)t;
          if (rt.getSootClass().isPhantom() && !rt.getSootClass().hasSuperclass() && !rt.getSootClass().getName().equals(""String_Node_Str""))           rt.getSootClass().setSuperclass(Scene.v().getSootClass(""String_Node_Str""));
        }
      }
    }
  }
  Debug.printDbg(""String_Node_Str"");
  Debug.printDbg(""String_Node_Str"",(Body)jBody);
  for (  Local l : jBody.getLocals()) {
    Type t=l.getType();
    if (t instanceof NullType) {
      Debug.printDbg(""String_Node_Str"",l);
      l.setType(RefType.v(""String_Node_Str""));
    }
  }
  return jBody;
}"
85333,"public static Collection<Type> lcas_(Type a,Type b){
  if (TypeResolver.typesEqual(a,b))   return Collections.<Type>singletonList(a);
 else   if (a instanceof BottomType)   return Collections.<Type>singletonList(b);
 else   if (b instanceof BottomType)   return Collections.<Type>singletonList(a);
 else   if (a instanceof IntegerType && b instanceof IntegerType)   return Collections.<Type>singletonList(IntType.v());
 else   if (a instanceof PrimType || b instanceof PrimType)   return Collections.<Type>emptyList();
 else   if (a instanceof NullType)   return Collections.<Type>singletonList(b);
 else   if (b instanceof NullType)   return Collections.<Type>singletonList(a);
 else   if (a instanceof ArrayType && b instanceof ArrayType) {
    Type eta=((ArrayType)a).getElementType(), etb=((ArrayType)b).getElementType();
    Collection<Type> ts;
    if (eta instanceof PrimType || etb instanceof PrimType)     ts=Collections.<Type>emptyList();
 else     ts=lcas_(eta,etb);
    LinkedList<Type> r=new LinkedList<Type>();
    if (ts.isEmpty()) {
      r.add(RefType.v(""String_Node_Str""));
      r.add(RefType.v(""String_Node_Str""));
      r.add(RefType.v(""String_Node_Str""));
    }
 else     for (    Type t : ts)     r.add(t.makeArrayType());
    return r;
  }
 else   if (a instanceof ArrayType || b instanceof ArrayType) {
    Type rt;
    if (a instanceof ArrayType)     rt=b;
 else     rt=a;
    LinkedList<Type> r=new LinkedList<Type>();
    if (!TypeResolver.typesEqual(RefType.v(""String_Node_Str""),rt)) {
      if (ancestor_(RefType.v(""String_Node_Str""),rt))       r.add(RefType.v(""String_Node_Str""));
      if (ancestor_(RefType.v(""String_Node_Str""),rt))       r.add(RefType.v(""String_Node_Str""));
    }
    if (r.isEmpty())     r.add(RefType.v(""String_Node_Str""));
    return r;
  }
 else {
    Collection<AncestryTreeNode> treea=buildAncestryTree((RefType)a), treeb=buildAncestryTree((RefType)b);
    LinkedList<Type> r=new LinkedList<Type>();
    for (    AncestryTreeNode nodea : treea)     for (    AncestryTreeNode nodeb : treeb) {
      RefType t=leastCommonNode(nodea,nodeb);
      boolean least=true;
      for (ListIterator<Type> i=r.listIterator(); i.hasNext(); ) {
        Type t_=i.next();
        if (ancestor_(t,t_)) {
          least=false;
          break;
        }
        if (ancestor_(t_,t))         i.remove();
      }
      if (least)       r.add(t);
    }
    if (r.isEmpty())     r.add(RefType.v(""String_Node_Str""));
    return r;
  }
}","public static Collection<Type> lcas_(Type a,Type b){
  if (TypeResolver.typesEqual(a,b))   return Collections.<Type>singletonList(a);
 else   if (a instanceof BottomType)   return Collections.<Type>singletonList(b);
 else   if (b instanceof BottomType)   return Collections.<Type>singletonList(a);
 else   if (a instanceof IntegerType && b instanceof IntegerType)   return Collections.<Type>singletonList(IntType.v());
 else   if (a instanceof IntegerType && b instanceof FloatType)   return Collections.<Type>singletonList(FloatType.v());
 else   if (b instanceof IntegerType && a instanceof FloatType)   return Collections.<Type>singletonList(FloatType.v());
 else   if (a instanceof PrimType || b instanceof PrimType)   return Collections.<Type>emptyList();
 else   if (a instanceof NullType)   return Collections.<Type>singletonList(b);
 else   if (b instanceof NullType)   return Collections.<Type>singletonList(a);
 else   if (a instanceof ArrayType && b instanceof ArrayType) {
    Type eta=((ArrayType)a).getElementType(), etb=((ArrayType)b).getElementType();
    Collection<Type> ts;
    if (eta instanceof PrimType || etb instanceof PrimType)     ts=Collections.<Type>emptyList();
 else     ts=lcas_(eta,etb);
    LinkedList<Type> r=new LinkedList<Type>();
    if (ts.isEmpty()) {
      r.add(RefType.v(""String_Node_Str""));
      r.add(RefType.v(""String_Node_Str""));
      r.add(RefType.v(""String_Node_Str""));
    }
 else     for (    Type t : ts)     r.add(t.makeArrayType());
    return r;
  }
 else   if (a instanceof ArrayType || b instanceof ArrayType) {
    Type rt;
    if (a instanceof ArrayType)     rt=b;
 else     rt=a;
    LinkedList<Type> r=new LinkedList<Type>();
    if (!TypeResolver.typesEqual(RefType.v(""String_Node_Str""),rt)) {
      if (ancestor_(RefType.v(""String_Node_Str""),rt))       r.add(RefType.v(""String_Node_Str""));
      if (ancestor_(RefType.v(""String_Node_Str""),rt))       r.add(RefType.v(""String_Node_Str""));
    }
    if (r.isEmpty())     r.add(RefType.v(""String_Node_Str""));
    return r;
  }
 else {
    Collection<AncestryTreeNode> treea=buildAncestryTree((RefType)a), treeb=buildAncestryTree((RefType)b);
    LinkedList<Type> r=new LinkedList<Type>();
    for (    AncestryTreeNode nodea : treea)     for (    AncestryTreeNode nodeb : treeb) {
      RefType t=leastCommonNode(nodea,nodeb);
      boolean least=true;
      for (ListIterator<Type> i=r.listIterator(); i.hasNext(); ) {
        Type t_=i.next();
        if (ancestor_(t,t_)) {
          least=false;
          break;
        }
        if (ancestor_(t_,t))         i.remove();
      }
      if (least)       r.add(t);
    }
    if (r.isEmpty())     r.add(RefType.v(""String_Node_Str""));
    return r;
  }
}"
85334,"private Insn build2AddrBinaryInsn(String binaryOperation,Register secondOpReg){
  String localTypeString=destinationReg.getTypeString();
  localTypeString=fixIntTypeString(localTypeString);
  Opcode opc=Opcode.valueOf(binaryOperation + ""String_Node_Str"" + localTypeString.toUpperCase()+ ""String_Node_Str"");
  return new Insn12x(opc,destinationReg,secondOpReg);
}","private Insn build2AddrBinaryInsn(final String binaryOperation,Register secondOpReg){
  String localTypeString=destinationReg.getTypeString();
  localTypeString=fixIntTypeString(localTypeString);
  Opcode opc=Opcode.valueOf(binaryOperation + ""String_Node_Str"" + localTypeString.toUpperCase()+ ""String_Node_Str"");
  return new Insn12x(opc,destinationReg,secondOpReg);
}"
85335,"private Insn buildCalculatingBinaryInsn(String binaryOperation,Value firstOperand,Value secondOperand){
  constantV.setOrigStmt(origStmt);
  Register firstOpReg=regAlloc.asImmediate(firstOperand,constantV);
  if (destinationReg.getType() instanceof IntType && secondOperand instanceof IntConstant && !binaryOperation.equals(""String_Node_Str"")) {
    int secondOpConstant=((IntConstant)secondOperand).value;
    if (SootToDexUtils.fitsSigned8(secondOpConstant)) {
      return buildLit8BinaryInsn(binaryOperation,firstOpReg,(byte)secondOpConstant);
    }
    if (SootToDexUtils.fitsSigned16(secondOpConstant)) {
      if (!binaryOperation.equals(""String_Node_Str"") && !binaryOperation.equals(""String_Node_Str"") && !binaryOperation.equals(""String_Node_Str"")) {
        return buildLit16BinaryInsn(binaryOperation,firstOpReg,(short)secondOpConstant);
      }
    }
  }
  Register secondOpReg=regAlloc.asImmediate(secondOperand,constantV);
  if (destinationReg.getNumber() == firstOpReg.getNumber()) {
    return build2AddrBinaryInsn(binaryOperation,secondOpReg);
  }
  return buildNormalBinaryInsn(binaryOperation,firstOpReg,secondOpReg);
}","private Insn buildCalculatingBinaryInsn(final String binaryOperation,Value firstOperand,Value secondOperand){
  constantV.setOrigStmt(origStmt);
  Register firstOpReg=regAlloc.asImmediate(firstOperand,constantV);
  if (destinationReg.getType() instanceof IntType && secondOperand instanceof IntConstant && !binaryOperation.equals(""String_Node_Str"")) {
    int secondOpConstant=((IntConstant)secondOperand).value;
    if (SootToDexUtils.fitsSigned8(secondOpConstant)) {
      return buildLit8BinaryInsn(binaryOperation,firstOpReg,(byte)secondOpConstant);
    }
    if (SootToDexUtils.fitsSigned16(secondOpConstant)) {
      if (!binaryOperation.equals(""String_Node_Str"") && !binaryOperation.equals(""String_Node_Str"") && !binaryOperation.equals(""String_Node_Str"")) {
        return buildLit16BinaryInsn(binaryOperation,firstOpReg,(short)secondOpConstant);
      }
    }
  }
  if (!(secondOperand.getType() instanceof PrimType))   throw new RuntimeException(""String_Node_Str"");
  Register secondOpReg=regAlloc.asImmediate(secondOperand,constantV);
  if (destinationReg.getNumber() == firstOpReg.getNumber()) {
    return build2AddrBinaryInsn(binaryOperation,secondOpReg);
  }
  return buildNormalBinaryInsn(binaryOperation,firstOpReg,secondOpReg);
}"
85336,"private FullObjectSet(RefType declaredType){
  AnySubType type=AnySubType.v(declaredType);
  types=Collections.singleton(type);
}","private FullObjectSet(RefType declaredType){
  Type type=AnySubType.v(declaredType);
  types=Collections.singleton(type);
}"
85337,"/** 
 * Set of all possible run-time types of objects in the set. 
 */
public Set<Type> possibleTypes(){
  return types;
}","/** 
 * Set of all possible run-time types of objects in the set. 
 */
@Override public Set<Type> possibleTypes(){
  return types;
}"
85338,"public AnySubType type(){
  return (AnySubType)types.iterator().next();
}","public Type type(){
  return types.iterator().next();
}"
85339,"/** 
 * Creates an intermediate jump instruction between the original jump instruction and its target
 * @param targetInsPos The jump target index
 * @param jumpInsPos The position of the jump instruction
 * @param stmtV The statement visitor used for constructing the instructions
 * @param instructions The list of Dalvik instructions
 * @param labelAssigner The label assigner to be used for creating new labels
 */
private void insertIntermediateJump(int targetInsPos,int jumpInsPos,StmtVisitor stmtV,List<BuilderInstruction> instructions,LabelAssigner labelAssigner){
  BuilderInstruction originalJumpInstruction=instructions.get(jumpInsPos);
  Insn originalJumpInsn=stmtV.getInsnForInstruction(originalJumpInstruction);
  if (originalJumpInsn == null)   return;
  if (!(originalJumpInsn instanceof InsnWithOffset))   throw new RuntimeException(""String_Node_Str"");
  InsnWithOffset offsetInsn=(InsnWithOffset)originalJumpInsn;
  int distance=Math.max(targetInsPos,jumpInsPos) - Math.min(targetInsPos,jumpInsPos);
  if (distance == 0)   return;
  int newJumpIdx=Math.min(targetInsPos,jumpInsPos) + (distance / 2);
  int sign=(int)Math.signum(targetInsPos - jumpInsPos);
  if (distance > offsetInsn.getMaxJumpOffset())   newJumpIdx=jumpInsPos + sign;
  while (stmtV.getStmtForInstruction(instructions.get(newJumpIdx)) == null) {
    newJumpIdx+=sign;
    if (newJumpIdx < 0 || newJumpIdx >= instructions.size())     throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  NopStmt nop=Jimple.v().newNopStmt();
  Insn30t newJump=new Insn30t(Opcode.GOTO_32);
  newJump.setTarget(stmtV.getStmtForInstruction(instructions.get(targetInsPos)));
  BuilderInstruction newJumpInstruction=newJump.getRealInsn(labelAssigner);
  instructions.add(newJumpIdx,newJumpInstruction);
  stmtV.fakeNewInsn(nop,newJump,newJumpInstruction);
  if (newJumpIdx < jumpInsPos)   jumpInsPos++;
  if (newJumpIdx < targetInsPos)   targetInsPos++;
  offsetInsn.setTarget(nop);
  BuilderInstruction replacementJumpInstruction=offsetInsn.getRealInsn(labelAssigner);
  instructions.add(jumpInsPos,replacementJumpInstruction);
  instructions.remove(originalJumpInstruction);
  stmtV.fakeNewInsn(stmtV.getStmtForInstruction(originalJumpInstruction),originalJumpInsn,replacementJumpInstruction);
  Stmt afterNewJump=stmtV.getStmtForInstruction(instructions.get(newJumpIdx + 1));
  Insn10t jumpAround=new Insn10t(Opcode.GOTO);
  jumpAround.setTarget(afterNewJump);
  BuilderInstruction jumpAroundInstruction=jumpAround.getRealInsn(labelAssigner);
  instructions.add(newJumpIdx,jumpAroundInstruction);
}","/** 
 * Creates an intermediate jump instruction between the original jump instruction and its target
 * @param targetInsPos The jump target index
 * @param jumpInsPos The position of the jump instruction
 * @param stmtV The statement visitor used for constructing the instructions
 * @param instructions The list of Dalvik instructions
 * @param labelAssigner The label assigner to be used for creating new labels
 */
private void insertIntermediateJump(int targetInsPos,int jumpInsPos,StmtVisitor stmtV,List<BuilderInstruction> instructions,LabelAssigner labelAssigner){
}"
85340,"private void fixLongJumps(List<BuilderInstruction> instructions,LabelAssigner labelAssigner,StmtVisitor stmtV){
  boolean hasChanged=true;
  l0:   while (hasChanged) {
    hasChanged=false;
    Map<Label,Integer> labelToInsOffset=new HashMap<Label,Integer>();
    for (int i=0; i < instructions.size(); i++) {
      BuilderInstruction bi=instructions.get(i);
      Stmt origStmt=stmtV.getStmtForInstruction(bi);
      if (origStmt != null) {
        Label lbl=labelAssigner.getLabelUnsafe(origStmt);
        if (lbl != null) {
          labelToInsOffset.put(lbl,i);
        }
      }
    }
    for (int j=0; j < instructions.size(); j++) {
      BuilderInstruction bj=instructions.get(j);
      if (bj instanceof BuilderOffsetInstruction) {
        BuilderOffsetInstruction boj=(BuilderOffsetInstruction)bj;
        Label targetLbl=boj.getTarget();
        Integer offset=labelToInsOffset.get(targetLbl);
        if (offset == null)         continue;
        Insn jumpInsn=stmtV.getInsnForInstruction(boj);
        if (jumpInsn instanceof InsnWithOffset) {
          InsnWithOffset offsetInsn=(InsnWithOffset)jumpInsn;
          int distance=getDistanceBetween(instructions,j,offset);
          if (Math.abs(distance) > offsetInsn.getMaxJumpOffset()) {
            insertIntermediateJump(offset,j,stmtV,instructions,labelAssigner);
            hasChanged=true;
            continue l0;
          }
        }
      }
    }
  }
}","/** 
 * Fixes long jumps that exceed the maximum distance for the respective jump type
 * @param instructions The list of generated dalvik instructions
 * @param labelAssigner The label assigner that maps statements to labels
 * @param stmtV The statement visitor used to produce the dalvik instructions
 */
private void fixLongJumps(List<BuilderInstruction> instructions,LabelAssigner labelAssigner,StmtVisitor stmtV){
  boolean hasChanged;
  l0:   do {
    hasChanged=false;
    Map<Label,Integer> labelToInsOffset=new HashMap<Label,Integer>();
    for (int i=0; i < instructions.size(); i++) {
      BuilderInstruction bi=instructions.get(i);
      Stmt origStmt=stmtV.getStmtForInstruction(bi);
      if (origStmt != null) {
        Label lbl=labelAssigner.getLabelUnsafe(origStmt);
        if (lbl != null) {
          labelToInsOffset.put(lbl,i);
        }
      }
    }
    for (int j=0; j < instructions.size(); j++) {
      BuilderInstruction bj=instructions.get(j);
      if (bj instanceof BuilderOffsetInstruction) {
        BuilderOffsetInstruction boj=(BuilderOffsetInstruction)bj;
        Label targetLbl=boj.getTarget();
        Integer offset=labelToInsOffset.get(targetLbl);
        if (offset == null)         continue;
        Insn jumpInsn=stmtV.getInsnForInstruction(boj);
        if (jumpInsn instanceof InsnWithOffset) {
          InsnWithOffset offsetInsn=(InsnWithOffset)jumpInsn;
          int distance=getDistanceBetween(instructions,j,offset);
          if (Math.abs(distance) > offsetInsn.getMaxJumpOffset()) {
            insertIntermediateJump(offset,j,stmtV,instructions,labelAssigner);
            hasChanged=true;
            continue l0;
          }
        }
      }
    }
  }
 while (hasChanged);
}"
85341,"private void outputDava(){
  Chain<SootClass> appClasses=Scene.v().getApplicationClasses();
  String pathForBuild=null;
  ArrayList<String> decompiledClasses=new ArrayList<String>();
  Iterator<SootClass> classIt=appClasses.iterator();
  while (classIt.hasNext()) {
    SootClass s=(SootClass)classIt.next();
    OutputStream streamOut=null;
    PrintWriter writerOut=null;
    String fileName=SourceLocator.v().getFileNameFor(s,Options.v().output_format());
    decompiledClasses.add(fileName.substring(fileName.lastIndexOf('/') + 1));
    if (pathForBuild == null) {
      pathForBuild=fileName.substring(0,fileName.lastIndexOf('/') + 1);
    }
    if (Options.v().gzip())     fileName=fileName + ""String_Node_Str"";
    try {
      if (jarFile != null) {
        JarEntry entry=new JarEntry(fileName.replaceAll(""String_Node_Str"",""String_Node_Str""));
        jarFile.putNextEntry(entry);
        streamOut=jarFile;
      }
 else {
        streamOut=new FileOutputStream(fileName);
      }
      if (Options.v().gzip())       streamOut=new GZIPOutputStream(streamOut);
      writerOut=new PrintWriter(new OutputStreamWriter(streamOut));
    }
 catch (    IOException e) {
      throw new CompilationDeathException(""String_Node_Str"" + fileName,e);
    }
    G.v().out.print(""String_Node_Str"" + fileName + ""String_Node_Str"");
    G.v().out.flush();
    DavaPrinter.v().printTo(s,writerOut);
    G.v().out.println();
    G.v().out.flush();
{
      try {
        writerOut.flush();
        if (jarFile == null)         streamOut.close();
      }
 catch (      IOException e) {
        throw new CompilationDeathException(""String_Node_Str"" + fileName);
      }
    }
  }
  G.v().out.println();
  if (pathForBuild != null) {
    if (pathForBuild.endsWith(""String_Node_Str""))     pathForBuild=pathForBuild.substring(0,pathForBuild.length() - 4);
    String fileName=pathForBuild + ""String_Node_Str"";
    try {
      OutputStream streamOut=new FileOutputStream(fileName);
      PrintWriter writerOut=new PrintWriter(new OutputStreamWriter(streamOut));
      DavaBuildFile.generate(writerOut,decompiledClasses);
      writerOut.flush();
      streamOut.close();
    }
 catch (    IOException e) {
      throw new CompilationDeathException(""String_Node_Str"" + fileName,e);
    }
  }
}","private void outputDava(){
  Chain<SootClass> appClasses=Scene.v().getApplicationClasses();
  String pathForBuild=null;
  ArrayList<String> decompiledClasses=new ArrayList<String>();
  Iterator<SootClass> classIt=appClasses.iterator();
  while (classIt.hasNext()) {
    SootClass s=(SootClass)classIt.next();
    OutputStream streamOut=null;
    PrintWriter writerOut=null;
    String fileName=SourceLocator.v().getFileNameFor(s,Options.v().output_format());
    decompiledClasses.add(fileName.substring(fileName.lastIndexOf('/') + 1));
    if (pathForBuild == null) {
      pathForBuild=fileName.substring(0,fileName.lastIndexOf('/') + 1);
    }
    if (Options.v().gzip())     fileName=fileName + ""String_Node_Str"";
    try {
      if (jarFile != null) {
        JarEntry entry=new JarEntry(fileName.replace('\\','/'));
        jarFile.putNextEntry(entry);
        streamOut=jarFile;
      }
 else {
        streamOut=new FileOutputStream(fileName);
      }
      if (Options.v().gzip())       streamOut=new GZIPOutputStream(streamOut);
      writerOut=new PrintWriter(new OutputStreamWriter(streamOut));
    }
 catch (    IOException e) {
      throw new CompilationDeathException(""String_Node_Str"" + fileName,e);
    }
    G.v().out.print(""String_Node_Str"" + fileName + ""String_Node_Str"");
    G.v().out.flush();
    DavaPrinter.v().printTo(s,writerOut);
    G.v().out.println();
    G.v().out.flush();
{
      try {
        writerOut.flush();
        if (jarFile == null)         streamOut.close();
      }
 catch (      IOException e) {
        throw new CompilationDeathException(""String_Node_Str"" + fileName);
      }
    }
  }
  G.v().out.println();
  if (pathForBuild != null) {
    if (pathForBuild.endsWith(""String_Node_Str""))     pathForBuild=pathForBuild.substring(0,pathForBuild.length() - 4);
    String fileName=pathForBuild + ""String_Node_Str"";
    try {
      OutputStream streamOut=new FileOutputStream(fileName);
      PrintWriter writerOut=new PrintWriter(new OutputStreamWriter(streamOut));
      DavaBuildFile.generate(writerOut,decompiledClasses);
      writerOut.flush();
      streamOut.close();
    }
 catch (    IOException e) {
      throw new CompilationDeathException(""String_Node_Str"" + fileName,e);
    }
  }
}"
85342,"public List<T> toList(){
  int i=bits.nextSetBit(0);
  if (i == -1)   return Collections.emptyList();
  List<T> elements=new LinkedList<T>();
  for (i=bits.nextSetBit(i + 1); i >= 0; i=bits.nextSetBit(i + 1)) {
    int endOfRun=bits.nextClearBit(i + 1);
    do {
      elements.add(map.getObject(i++));
    }
 while (i < endOfRun);
  }
  return elements;
}","public List<T> toList(){
  int i=bits.nextSetBit(0);
  if (i == -1)   return Collections.emptyList();
  List<T> elements=new LinkedList<T>();
  for (; i >= 0; i=bits.nextSetBit(i + 1)) {
    int endOfRun=bits.nextClearBit(i + 1);
    do {
      elements.add(map.getObject(i++));
    }
 while (i < endOfRun);
  }
  return elements;
}"
85343,"public int size(){
  return bits.size();
}","public int size(){
  return bits.cardinality();
}"
85344,"public void clear(){
  bits=new int[bits.length];
}","public void clear(){
  bits.clear();
}"
85345,"/** 
 * This method returns true iff key ""name"" is in options  and maps to ""true"". 
 */
public static boolean getBoolean(Map<String,String> options,String name){
  return options.containsKey(name) && options.get(name).equals(""String_Node_Str"");
}","/** 
 * If key ""name"" is in options, this method returns true iff it maps to ""true"". If the key ""name"" is not in options, the given default value is returned.
 */
public static boolean getBoolean(Map<String,String> options,String name,boolean defaultValue){
  if (!options.containsKey(name))   return defaultValue;
  return options.get(name).equals(""String_Node_Str"");
}"
85346,"protected void internalTransform(Body body,String phaseName,Map<String,String> options){
  if (this.throwAnalysis == null)   this.throwAnalysis=Scene.v().getDefaultThrowAnalysis();
  if (Options.v().verbose()) {
    G.v().out.println(""String_Node_Str"" + body.getMethod().getName() + ""String_Node_Str"");
  }
  if (this.throwAnalysis == null)   this.throwAnalysis=PhaseOptions.getBoolean(options,""String_Node_Str"") ? Scene.v().getDefaultThrowAnalysis() : PedanticThrowAnalysis.v();
  ExceptionalUnitGraph graph=new ExceptionalUnitGraph(body,throwAnalysis,false);
  Chain<Unit> units=body.getUnits();
  int numPruned=units.size();
  Set<Unit> reachable=units.isEmpty() ? Collections.<Unit>emptySet() : reachable(units.getFirst(),graph);
  for (Iterator<Trap> it=body.getTraps().iterator(); it.hasNext(); ) {
    Trap trap=it.next();
    if ((trap.getBeginUnit() == trap.getEndUnit()) || !reachable.contains(trap.getHandlerUnit())) {
      it.remove();
    }
    if (trap.getEndUnit() == body.getUnits().getLast()) {
      reachable.add(trap.getEndUnit());
    }
  }
  units.retainAll(reachable);
  numPruned-=units.size();
  if (Options.v().verbose()) {
    G.v().out.println(""String_Node_Str"" + body.getMethod().getName() + ""String_Node_Str""+ numPruned+ ""String_Node_Str"");
  }
}","protected void internalTransform(Body body,String phaseName,Map<String,String> options){
  if (Options.v().verbose()) {
    G.v().out.println(""String_Node_Str"" + body.getMethod().getName() + ""String_Node_Str"");
  }
  if (this.throwAnalysis == null)   this.throwAnalysis=PhaseOptions.getBoolean(options,""String_Node_Str"",true) ? Scene.v().getDefaultThrowAnalysis() : PedanticThrowAnalysis.v();
  ExceptionalUnitGraph graph=new ExceptionalUnitGraph(body,throwAnalysis,false);
  Chain<Unit> units=body.getUnits();
  int numPruned=units.size();
  Set<Unit> reachable=units.isEmpty() ? Collections.<Unit>emptySet() : reachable(units.getFirst(),graph);
  for (Iterator<Trap> it=body.getTraps().iterator(); it.hasNext(); ) {
    Trap trap=it.next();
    if ((trap.getBeginUnit() == trap.getEndUnit()) || !reachable.contains(trap.getHandlerUnit())) {
      it.remove();
    }
  }
  for (  Trap t : body.getTraps())   if (t.getEndUnit() == body.getUnits().getLast())   reachable.add(t.getEndUnit());
  units.retainAll(reachable);
  numPruned-=units.size();
  if (Options.v().verbose()) {
    G.v().out.println(""String_Node_Str"" + body.getMethod().getName() + ""String_Node_Str""+ numPruned+ ""String_Node_Str"");
  }
}"
85347,"@Override public Iterator<T> iterator(){
  return new Iterator<T>(){
    int lastIdx=0;
    @Override public boolean hasNext(){
      return lastIdx < numElements - 1;
    }
    @Override public T next(){
      return elements[lastIdx++];
    }
    @Override public void remove(){
      DavaFlowSet.this.remove(lastIdx);
      lastIdx--;
    }
  }
;
}","@Override public Iterator<T> iterator(){
  return new Iterator<T>(){
    int lastIdx=0;
    @Override public boolean hasNext(){
      return lastIdx < numElements;
    }
    @Override public T next(){
      return elements[lastIdx++];
    }
    @Override public void remove(){
      DavaFlowSet.this.remove(lastIdx);
      lastIdx--;
    }
  }
;
}"
85348,"@Override public boolean hasNext(){
  return lastIdx < numElements - 1;
}","@Override public boolean hasNext(){
  return lastIdx < numElements;
}"
85349,"@Override public boolean hasNext(){
  return lastIdx < numElements - 1;
}","@Override public boolean hasNext(){
  return lastIdx < numElements;
}"
85350,"@Override public Iterator<T> iterator(){
  return new Iterator<T>(){
    int lastIdx=0;
    @Override public boolean hasNext(){
      return lastIdx < numElements - 1;
    }
    @Override public T next(){
      return elements[lastIdx++];
    }
    @Override public void remove(){
      ArraySparseSet.this.remove(lastIdx);
      lastIdx--;
    }
  }
;
}","@Override public Iterator<T> iterator(){
  return new Iterator<T>(){
    int lastIdx=0;
    @Override public boolean hasNext(){
      return lastIdx < numElements;
    }
    @Override public T next(){
      return elements[lastIdx++];
    }
    @Override public void remove(){
      ArraySparseSet.this.remove(lastIdx);
      lastIdx--;
    }
  }
;
}"
85351,"public boolean isFieldLocal(EquivalentValue fieldRef){
  List ret=new ArrayList();
  for (int i=0; i < nodes.size(); i++) {
    if (fieldRef.equals(nodes.get(i)))     return isNodeLocal.get(i).booleanValue();
  }
  return false;
}","public boolean isFieldLocal(EquivalentValue fieldRef){
  for (int i=0; i < nodes.size(); i++) {
    if (fieldRef.equals(nodes.get(i)))     return isNodeLocal.get(i).booleanValue();
  }
  return false;
}"
85352,"public boolean containsField(EquivalentValue fieldRef){
  List ret=new ArrayList();
  for (int i=0; i < nodes.size(); i++) {
    if (fieldRef.equals(nodes.get(i)))     return true;
  }
  return false;
}","public boolean containsField(EquivalentValue fieldRef){
  for (int i=0; i < nodes.size(); i++) {
    if (fieldRef.equals(nodes.get(i)))     return true;
  }
  return false;
}"
85353,"public void setFieldLocal(EquivalentValue fieldRef){
  List ret=new ArrayList();
  for (int i=0; i < nodes.size(); i++) {
    if (fieldRef.equals(nodes.get(i))) {
      isNodeLocal.remove(i);
      isNodeLocal.add(i,Boolean.TRUE);
      return;
    }
  }
  nodes.add(fieldRef);
  isNodeLocal.add(Boolean.TRUE);
}","public void setFieldLocal(EquivalentValue fieldRef){
  for (int i=0; i < nodes.size(); i++) {
    if (fieldRef.equals(nodes.get(i))) {
      isNodeLocal.remove(i);
      isNodeLocal.add(i,Boolean.TRUE);
      return;
    }
  }
  nodes.add(fieldRef);
  isNodeLocal.add(Boolean.TRUE);
}"
85354,"public void setFieldShared(EquivalentValue fieldRef){
  List ret=new ArrayList();
  for (int i=0; i < nodes.size(); i++) {
    if (fieldRef.equals(nodes.get(i))) {
      isNodeLocal.remove(i);
      isNodeLocal.add(i,Boolean.FALSE);
      return;
    }
  }
  nodes.add(fieldRef);
  isNodeLocal.add(Boolean.FALSE);
}","public void setFieldShared(EquivalentValue fieldRef){
  for (int i=0; i < nodes.size(); i++) {
    if (fieldRef.equals(nodes.get(i))) {
      isNodeLocal.remove(i);
      isNodeLocal.add(i,Boolean.FALSE);
      return;
    }
  }
  nodes.add(fieldRef);
  isNodeLocal.add(Boolean.FALSE);
}"
85355,"public CallLocalityContext(List<Object> nodes){
  this.nodes=new ArrayList<Object>();
  this.nodes.addAll(nodes);
  isNodeLocal=new ArrayList<Boolean>(nodes.size());
  for (int i=0; i < nodes.size(); i++) {
    isNodeLocal.add(i,Boolean.FALSE);
  }
}","public CallLocalityContext(List<EquivalentValue> nodes){
  this.nodes=new ArrayList<EquivalentValue>();
  this.nodes.addAll(nodes);
  isNodeLocal=new ArrayList<Boolean>(nodes.size());
  for (int i=0; i < nodes.size(); i++) {
    isNodeLocal.add(i,Boolean.FALSE);
  }
}"
85356,"public SmartMethodInfoFlowAnalysis getMethodInfoFlowAnalysis(SootMethod method){
  if (!methodToInfoFlowAnalysis.containsKey(method)) {
    methodCount++;
    if (!methodToInfoFlowSummary.containsKey(method)) {
      HashMutableDirectedGraph dataFlowGraph=simpleConservativeInfoFlowAnalysis(method);
      methodToInfoFlowSummary.put(method,dataFlowGraph);
    }
    if (method.isConcrete()) {
      Body b=method.retrieveActiveBody();
      UnitGraph g=new ExceptionalUnitGraph(b);
      SmartMethodInfoFlowAnalysis smdfa=new SmartMethodInfoFlowAnalysis(g,dfa);
      methodToInfoFlowAnalysis.put(method,smdfa);
      methodToInfoFlowSummary.remove(method);
      methodToInfoFlowSummary.put(method,smdfa.getMethodInfoFlowSummary());
      return smdfa;
    }
  }
  return methodToInfoFlowAnalysis.get(method);
}","public SmartMethodInfoFlowAnalysis getMethodInfoFlowAnalysis(SootMethod method){
  if (!methodToInfoFlowAnalysis.containsKey(method)) {
    methodCount++;
    if (!methodToInfoFlowSummary.containsKey(method)) {
      HashMutableDirectedGraph<EquivalentValue> dataFlowGraph=simpleConservativeInfoFlowAnalysis(method);
      methodToInfoFlowSummary.put(method,dataFlowGraph);
    }
    if (method.isConcrete()) {
      Body b=method.retrieveActiveBody();
      UnitGraph g=new ExceptionalUnitGraph(b);
      SmartMethodInfoFlowAnalysis smdfa=new SmartMethodInfoFlowAnalysis(g,dfa);
      methodToInfoFlowAnalysis.put(method,smdfa);
      methodToInfoFlowSummary.remove(method);
      methodToInfoFlowSummary.put(method,smdfa.getMethodInfoFlowSummary());
      return smdfa;
    }
  }
  return methodToInfoFlowAnalysis.get(method);
}"
85357,"/** 
 * Does not require any fixed point calculation 
 */
private HashMutableDirectedGraph simpleConservativeInfoFlowAnalysis(SootMethod sm){
  if (!sm.isConcrete())   return triviallyConservativeInfoFlowAnalysis(sm);
  Body b=sm.retrieveActiveBody();
  UnitGraph g=new ExceptionalUnitGraph(b);
  HashSet<EquivalentValue> fieldsStaticsParamsAccessed=new HashSet<EquivalentValue>();
  Iterator stmtIt=g.iterator();
  while (stmtIt.hasNext()) {
    Stmt s=(Stmt)stmtIt.next();
    if (s instanceof IdentityStmt) {
      IdentityStmt is=(IdentityStmt)s;
      IdentityRef ir=(IdentityRef)is.getRightOp();
      if (ir instanceof ParameterRef) {
        ParameterRef pr=(ParameterRef)ir;
        fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForParameterRef(sm,pr.getIndex()));
      }
    }
    if (s.containsFieldRef()) {
      FieldRef ref=s.getFieldRef();
      if (ref instanceof StaticFieldRef) {
        StaticFieldRef sfr=(StaticFieldRef)ref;
        fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForFieldRef(sm,sfr.getField()));
      }
 else       if (ref instanceof InstanceFieldRef) {
        InstanceFieldRef ifr=(InstanceFieldRef)ref;
        Value base=ifr.getBase();
        if (base instanceof Local) {
          if (dfa.includesInnerFields() || ((!sm.isStatic()) && base.equivTo(b.getThisLocal())))           fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForFieldRef(sm,ifr.getField()));
        }
      }
    }
  }
  HashMutableDirectedGraph<EquivalentValue> dataFlowGraph=new MemoryEfficientGraph<EquivalentValue>();
  Iterator<EquivalentValue> accessedIt1=fieldsStaticsParamsAccessed.iterator();
  while (accessedIt1.hasNext()) {
    EquivalentValue o=accessedIt1.next();
    dataFlowGraph.addNode(o);
  }
  for (int i=0; i < sm.getParameterCount(); i++) {
    EquivalentValue parameterRefEqVal=InfoFlowAnalysis.getNodeForParameterRef(sm,i);
    if (!dataFlowGraph.containsNode(parameterRefEqVal))     dataFlowGraph.addNode(parameterRefEqVal);
  }
  for (Iterator it=sm.getDeclaringClass().getFields().iterator(); it.hasNext(); ) {
    SootField sf=(SootField)it.next();
    if (sf.isStatic() || !sm.isStatic()) {
      EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,sf);
      if (!dataFlowGraph.containsNode(fieldRefEqVal))       dataFlowGraph.addNode(fieldRefEqVal);
    }
  }
  SootClass superclass=sm.getDeclaringClass();
  if (superclass.hasSuperclass())   superclass=sm.getDeclaringClass().getSuperclass();
  while (superclass.hasSuperclass()) {
    Iterator scFieldsIt=superclass.getFields().iterator();
    while (scFieldsIt.hasNext()) {
      SootField scField=(SootField)scFieldsIt.next();
      if (scField.isStatic() || !sm.isStatic()) {
        EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,scField);
        if (!dataFlowGraph.containsNode(fieldRefEqVal))         dataFlowGraph.addNode(fieldRefEqVal);
      }
    }
    superclass=superclass.getSuperclass();
  }
  ParameterRef returnValueRef=null;
  if (sm.getReturnType() != VoidType.v()) {
    returnValueRef=new ParameterRef(sm.getReturnType(),-1);
    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForReturnRef(sm));
  }
  if (!sm.isStatic()) {
    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForThisRef(sm));
    fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForThisRef(sm));
  }
  accessedIt1=fieldsStaticsParamsAccessed.iterator();
  while (accessedIt1.hasNext()) {
    EquivalentValue r=accessedIt1.next();
    Ref rRef=(Ref)r.getValue();
    if (!(rRef.getType() instanceof RefLikeType) && !dfa.includesPrimitiveInfoFlow())     continue;
    Iterator<EquivalentValue> accessedIt2=fieldsStaticsParamsAccessed.iterator();
    while (accessedIt2.hasNext()) {
      EquivalentValue s=accessedIt2.next();
      Ref sRef=(Ref)s.getValue();
      if (rRef instanceof ThisRef && sRef instanceof InstanceFieldRef)       ;
 else       if (sRef instanceof ThisRef && rRef instanceof InstanceFieldRef)       ;
 else       if (sRef instanceof ParameterRef && dfa.includesInnerFields())       ;
 else       if (sRef.getType() instanceof RefLikeType)       dataFlowGraph.addEdge(r,s);
    }
    if (returnValueRef != null && (returnValueRef.getType() instanceof RefLikeType || dfa.includesPrimitiveInfoFlow()))     dataFlowGraph.addEdge(r,InfoFlowAnalysis.getNodeForReturnRef(sm));
  }
  return dataFlowGraph;
}","/** 
 * Does not require any fixed point calculation 
 */
private HashMutableDirectedGraph<EquivalentValue> simpleConservativeInfoFlowAnalysis(SootMethod sm){
  if (!sm.isConcrete())   return triviallyConservativeInfoFlowAnalysis(sm);
  Body b=sm.retrieveActiveBody();
  UnitGraph g=new ExceptionalUnitGraph(b);
  HashSet<EquivalentValue> fieldsStaticsParamsAccessed=new HashSet<EquivalentValue>();
  for (  Unit u : g) {
    Stmt s=(Stmt)u;
    if (s instanceof IdentityStmt) {
      IdentityStmt is=(IdentityStmt)s;
      IdentityRef ir=(IdentityRef)is.getRightOp();
      if (ir instanceof ParameterRef) {
        ParameterRef pr=(ParameterRef)ir;
        fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForParameterRef(sm,pr.getIndex()));
      }
    }
    if (s.containsFieldRef()) {
      FieldRef ref=s.getFieldRef();
      if (ref instanceof StaticFieldRef) {
        StaticFieldRef sfr=(StaticFieldRef)ref;
        fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForFieldRef(sm,sfr.getField()));
      }
 else       if (ref instanceof InstanceFieldRef) {
        InstanceFieldRef ifr=(InstanceFieldRef)ref;
        Value base=ifr.getBase();
        if (base instanceof Local) {
          if (dfa.includesInnerFields() || ((!sm.isStatic()) && base.equivTo(b.getThisLocal())))           fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForFieldRef(sm,ifr.getField()));
        }
      }
    }
  }
  HashMutableDirectedGraph<EquivalentValue> dataFlowGraph=new MemoryEfficientGraph<EquivalentValue>();
  Iterator<EquivalentValue> accessedIt1=fieldsStaticsParamsAccessed.iterator();
  while (accessedIt1.hasNext()) {
    EquivalentValue o=accessedIt1.next();
    dataFlowGraph.addNode(o);
  }
  for (int i=0; i < sm.getParameterCount(); i++) {
    EquivalentValue parameterRefEqVal=InfoFlowAnalysis.getNodeForParameterRef(sm,i);
    if (!dataFlowGraph.containsNode(parameterRefEqVal))     dataFlowGraph.addNode(parameterRefEqVal);
  }
  for (  SootField sf : sm.getDeclaringClass().getFields()) {
    if (sf.isStatic() || !sm.isStatic()) {
      EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,sf);
      if (!dataFlowGraph.containsNode(fieldRefEqVal))       dataFlowGraph.addNode(fieldRefEqVal);
    }
  }
  SootClass superclass=sm.getDeclaringClass();
  if (superclass.hasSuperclass())   superclass=sm.getDeclaringClass().getSuperclass();
  while (superclass.hasSuperclass()) {
    for (    SootField scField : superclass.getFields()) {
      if (scField.isStatic() || !sm.isStatic()) {
        EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,scField);
        if (!dataFlowGraph.containsNode(fieldRefEqVal))         dataFlowGraph.addNode(fieldRefEqVal);
      }
    }
    superclass=superclass.getSuperclass();
  }
  ParameterRef returnValueRef=null;
  if (sm.getReturnType() != VoidType.v()) {
    returnValueRef=new ParameterRef(sm.getReturnType(),-1);
    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForReturnRef(sm));
  }
  if (!sm.isStatic()) {
    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForThisRef(sm));
    fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForThisRef(sm));
  }
  accessedIt1=fieldsStaticsParamsAccessed.iterator();
  while (accessedIt1.hasNext()) {
    EquivalentValue r=accessedIt1.next();
    Ref rRef=(Ref)r.getValue();
    if (!(rRef.getType() instanceof RefLikeType) && !dfa.includesPrimitiveInfoFlow())     continue;
    Iterator<EquivalentValue> accessedIt2=fieldsStaticsParamsAccessed.iterator();
    while (accessedIt2.hasNext()) {
      EquivalentValue s=accessedIt2.next();
      Ref sRef=(Ref)s.getValue();
      if (rRef instanceof ThisRef && sRef instanceof InstanceFieldRef)       ;
 else       if (sRef instanceof ThisRef && rRef instanceof InstanceFieldRef)       ;
 else       if (sRef instanceof ParameterRef && dfa.includesInnerFields())       ;
 else       if (sRef.getType() instanceof RefLikeType)       dataFlowGraph.addEdge(r,s);
    }
    if (returnValueRef != null && (returnValueRef.getType() instanceof RefLikeType || dfa.includesPrimitiveInfoFlow()))     dataFlowGraph.addEdge(r,InfoFlowAnalysis.getNodeForReturnRef(sm));
  }
  return dataFlowGraph;
}"
85358,"public ClassInfoFlowAnalysis(SootClass sootClass,InfoFlowAnalysis dfa){
  this.sootClass=sootClass;
  this.dfa=dfa;
  methodToInfoFlowAnalysis=new HashMap<SootMethod,SmartMethodInfoFlowAnalysis>();
  methodToInfoFlowSummary=new HashMap<SootMethod,HashMutableDirectedGraph>();
}","public ClassInfoFlowAnalysis(SootClass sootClass,InfoFlowAnalysis dfa){
  this.sootClass=sootClass;
  this.dfa=dfa;
  methodToInfoFlowAnalysis=new HashMap<SootMethod,SmartMethodInfoFlowAnalysis>();
  methodToInfoFlowSummary=new HashMap<SootMethod,HashMutableDirectedGraph<EquivalentValue>>();
}"
85359,"public HashMutableDirectedGraph getMethodInfoFlowSummary(SootMethod method,boolean doFullAnalysis){
  if (!methodToInfoFlowSummary.containsKey(method)) {
    methodCount++;
    HashMutableDirectedGraph dataFlowGraph=simpleConservativeInfoFlowAnalysis(method);
    methodToInfoFlowSummary.put(method,dataFlowGraph);
    if (method.isConcrete() && doFullAnalysis) {
      Body b=method.retrieveActiveBody();
      UnitGraph g=new ExceptionalUnitGraph(b);
      SmartMethodInfoFlowAnalysis smdfa=new SmartMethodInfoFlowAnalysis(g,dfa);
      methodToInfoFlowAnalysis.put(method,smdfa);
      methodToInfoFlowSummary.remove(method);
      methodToInfoFlowSummary.put(method,smdfa.getMethodInfoFlowSummary());
    }
  }
  return methodToInfoFlowSummary.get(method);
}","public HashMutableDirectedGraph<EquivalentValue> getMethodInfoFlowSummary(SootMethod method,boolean doFullAnalysis){
  if (!methodToInfoFlowSummary.containsKey(method)) {
    methodCount++;
    HashMutableDirectedGraph<EquivalentValue> dataFlowGraph=simpleConservativeInfoFlowAnalysis(method);
    methodToInfoFlowSummary.put(method,dataFlowGraph);
    if (method.isConcrete() && doFullAnalysis) {
      Body b=method.retrieveActiveBody();
      UnitGraph g=new ExceptionalUnitGraph(b);
      SmartMethodInfoFlowAnalysis smdfa=new SmartMethodInfoFlowAnalysis(g,dfa);
      methodToInfoFlowAnalysis.put(method,smdfa);
      methodToInfoFlowSummary.remove(method);
      methodToInfoFlowSummary.put(method,smdfa.getMethodInfoFlowSummary());
    }
  }
  return methodToInfoFlowSummary.get(method);
}"
85360,"/** 
 * Does not require the method to have a body 
 */
public HashMutableDirectedGraph triviallyConservativeInfoFlowAnalysis(SootMethod sm){
  HashSet<EquivalentValue> fieldsStaticsParamsAccessed=new HashSet<EquivalentValue>();
  for (int i=0; i < sm.getParameterCount(); i++) {
    EquivalentValue parameterRefEqVal=InfoFlowAnalysis.getNodeForParameterRef(sm,i);
    fieldsStaticsParamsAccessed.add(parameterRefEqVal);
  }
  for (Iterator<SootField> it=sm.getDeclaringClass().getFields().iterator(); it.hasNext(); ) {
    SootField sf=it.next();
    if (sf.isStatic() || !sm.isStatic()) {
      EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,sf);
      fieldsStaticsParamsAccessed.add(fieldRefEqVal);
    }
  }
  SootClass superclass=sm.getDeclaringClass();
  if (superclass.hasSuperclass())   superclass=sm.getDeclaringClass().getSuperclass();
  while (superclass.hasSuperclass()) {
    Iterator<SootField> scFieldsIt=superclass.getFields().iterator();
    while (scFieldsIt.hasNext()) {
      SootField scField=scFieldsIt.next();
      if (scField.isStatic() || !sm.isStatic()) {
        EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,scField);
        fieldsStaticsParamsAccessed.add(fieldRefEqVal);
      }
    }
    superclass=superclass.getSuperclass();
  }
  HashMutableDirectedGraph<EquivalentValue> dataFlowGraph=new MemoryEfficientGraph<EquivalentValue>();
  Iterator<EquivalentValue> accessedIt1=fieldsStaticsParamsAccessed.iterator();
  while (accessedIt1.hasNext()) {
    EquivalentValue o=accessedIt1.next();
    dataFlowGraph.addNode(o);
  }
  ParameterRef returnValueRef=null;
  if (sm.getReturnType() != VoidType.v()) {
    returnValueRef=new ParameterRef(sm.getReturnType(),-1);
    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForReturnRef(sm));
  }
  ThisRef thisRef=null;
  if (!sm.isStatic()) {
    thisRef=new ThisRef(sootClass.getType());
    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForThisRef(sm));
    fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForThisRef(sm));
  }
  accessedIt1=fieldsStaticsParamsAccessed.iterator();
  while (accessedIt1.hasNext()) {
    EquivalentValue r=accessedIt1.next();
    Ref rRef=(Ref)r.getValue();
    if (!(rRef.getType() instanceof RefLikeType) && !dfa.includesPrimitiveInfoFlow())     continue;
    Iterator<EquivalentValue> accessedIt2=fieldsStaticsParamsAccessed.iterator();
    while (accessedIt2.hasNext()) {
      EquivalentValue s=accessedIt2.next();
      Ref sRef=(Ref)s.getValue();
      if (rRef instanceof ThisRef && sRef instanceof InstanceFieldRef)       ;
 else       if (sRef instanceof ThisRef && rRef instanceof InstanceFieldRef)       ;
 else       if (sRef.getType() instanceof RefLikeType)       dataFlowGraph.addEdge(r,s);
    }
    if (returnValueRef != null && (returnValueRef.getType() instanceof RefLikeType || dfa.includesPrimitiveInfoFlow()))     dataFlowGraph.addEdge(r,InfoFlowAnalysis.getNodeForReturnRef(sm));
  }
  return dataFlowGraph;
}","/** 
 * Does not require the method to have a body 
 */
public HashMutableDirectedGraph<EquivalentValue> triviallyConservativeInfoFlowAnalysis(SootMethod sm){
  HashSet<EquivalentValue> fieldsStaticsParamsAccessed=new HashSet<EquivalentValue>();
  for (int i=0; i < sm.getParameterCount(); i++) {
    EquivalentValue parameterRefEqVal=InfoFlowAnalysis.getNodeForParameterRef(sm,i);
    fieldsStaticsParamsAccessed.add(parameterRefEqVal);
  }
  for (Iterator<SootField> it=sm.getDeclaringClass().getFields().iterator(); it.hasNext(); ) {
    SootField sf=it.next();
    if (sf.isStatic() || !sm.isStatic()) {
      EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,sf);
      fieldsStaticsParamsAccessed.add(fieldRefEqVal);
    }
  }
  SootClass superclass=sm.getDeclaringClass();
  if (superclass.hasSuperclass())   superclass=sm.getDeclaringClass().getSuperclass();
  while (superclass.hasSuperclass()) {
    Iterator<SootField> scFieldsIt=superclass.getFields().iterator();
    while (scFieldsIt.hasNext()) {
      SootField scField=scFieldsIt.next();
      if (scField.isStatic() || !sm.isStatic()) {
        EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,scField);
        fieldsStaticsParamsAccessed.add(fieldRefEqVal);
      }
    }
    superclass=superclass.getSuperclass();
  }
  HashMutableDirectedGraph<EquivalentValue> dataFlowGraph=new MemoryEfficientGraph<EquivalentValue>();
  Iterator<EquivalentValue> accessedIt1=fieldsStaticsParamsAccessed.iterator();
  while (accessedIt1.hasNext()) {
    EquivalentValue o=accessedIt1.next();
    dataFlowGraph.addNode(o);
  }
  ParameterRef returnValueRef=null;
  if (sm.getReturnType() != VoidType.v()) {
    returnValueRef=new ParameterRef(sm.getReturnType(),-1);
    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForReturnRef(sm));
  }
  if (!sm.isStatic()) {
    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForThisRef(sm));
    fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForThisRef(sm));
  }
  accessedIt1=fieldsStaticsParamsAccessed.iterator();
  while (accessedIt1.hasNext()) {
    EquivalentValue r=accessedIt1.next();
    Ref rRef=(Ref)r.getValue();
    if (!(rRef.getType() instanceof RefLikeType) && !dfa.includesPrimitiveInfoFlow())     continue;
    Iterator<EquivalentValue> accessedIt2=fieldsStaticsParamsAccessed.iterator();
    while (accessedIt2.hasNext()) {
      EquivalentValue s=accessedIt2.next();
      Ref sRef=(Ref)s.getValue();
      if (rRef instanceof ThisRef && sRef instanceof InstanceFieldRef)       ;
 else       if (sRef instanceof ThisRef && rRef instanceof InstanceFieldRef)       ;
 else       if (sRef.getType() instanceof RefLikeType)       dataFlowGraph.addEdge(r,s);
    }
    if (returnValueRef != null && (returnValueRef.getType() instanceof RefLikeType || dfa.includesPrimitiveInfoFlow()))     dataFlowGraph.addEdge(r,InfoFlowAnalysis.getNodeForReturnRef(sm));
  }
  return dataFlowGraph;
}"
85361,"public static List<SootField> getAllFields(SootClass sc){
  List<SootField> allFields=new ArrayList<SootField>();
  Iterator fieldsIt=sc.getFields().iterator();
  while (fieldsIt.hasNext()) {
    SootField field=(SootField)fieldsIt.next();
    allFields.add(field);
  }
  SootClass superclass=sc;
  if (superclass.hasSuperclass())   superclass=superclass.getSuperclass();
  while (superclass.hasSuperclass()) {
    Iterator scFieldsIt=superclass.getFields().iterator();
    while (scFieldsIt.hasNext()) {
      SootField scField=(SootField)scFieldsIt.next();
      allFields.add(scField);
    }
    superclass=superclass.getSuperclass();
  }
  return allFields;
}","public static List<SootField> getAllFields(SootClass sc){
  List<SootField> allFields=new ArrayList<SootField>();
  for (  SootField field : sc.getFields()) {
    allFields.add(field);
  }
  SootClass superclass=sc;
  if (superclass.hasSuperclass())   superclass=superclass.getSuperclass();
  while (superclass.hasSuperclass()) {
    for (    SootField scField : superclass.getFields()) {
      allFields.add(scField);
    }
    superclass=superclass.getSuperclass();
  }
  return allFields;
}"
85362,"protected HashMutableDirectedGraph getInvokeInfoFlowSummary(InvokeExpr ie,Stmt is,SootMethod context){
  HashMutableDirectedGraph ret=null;
  SootMethodRef methodRef=ie.getMethodRef();
  String subSig=methodRef.resolve().getSubSignature();
  CallGraph cg=Scene.v().getCallGraph();
  for (Iterator<Edge> edges=cg.edgesOutOf(is); edges.hasNext(); ) {
    Edge e=edges.next();
    SootMethod target=e.getTgt().method();
    if (target.getSubSignature().equals(subSig)) {
      HashMutableDirectedGraph ifs=getMethodInfoFlowSummary(target,context.getDeclaringClass().isApplicationClass());
      if (ret == null)       ret=ifs;
 else {
        for (        Object node : ifs.getNodes()) {
          if (!ret.containsNode(node))           ret.addNode(node);
          for (          Object succ : ifs.getSuccsOf(node))           ret.addEdge(node,succ);
        }
      }
    }
  }
  return ret;
}","protected HashMutableDirectedGraph<EquivalentValue> getInvokeInfoFlowSummary(InvokeExpr ie,Stmt is,SootMethod context){
  HashMutableDirectedGraph<EquivalentValue> ret=null;
  SootMethodRef methodRef=ie.getMethodRef();
  String subSig=methodRef.resolve().getSubSignature();
  CallGraph cg=Scene.v().getCallGraph();
  for (Iterator<Edge> edges=cg.edgesOutOf(is); edges.hasNext(); ) {
    Edge e=edges.next();
    SootMethod target=e.getTgt().method();
    if (target.getSubSignature().equals(subSig)) {
      HashMutableDirectedGraph<EquivalentValue> ifs=getMethodInfoFlowSummary(target,context.getDeclaringClass().isApplicationClass());
      if (ret == null)       ret=ifs;
 else {
        for (        EquivalentValue node : ifs.getNodes()) {
          if (!ret.containsNode(node))           ret.addNode(node);
          for (          EquivalentValue succ : ifs.getSuccsOf(node))           ret.addEdge(node,succ);
        }
      }
    }
  }
  return ret;
}"
85363,"public HashMutableDirectedGraph getMethodInfoFlowSummary(SootMethod sm,boolean doFullAnalysis){
  ClassInfoFlowAnalysis cdfa=getClassInfoFlowAnalysis(sm.getDeclaringClass());
  return cdfa.getMethodInfoFlowSummary(sm,doFullAnalysis);
}","public HashMutableDirectedGraph<EquivalentValue> getMethodInfoFlowSummary(SootMethod sm,boolean doFullAnalysis){
  ClassInfoFlowAnalysis cdfa=getClassInfoFlowAnalysis(sm.getDeclaringClass());
  return cdfa.getMethodInfoFlowSummary(sm,doFullAnalysis);
}"
85364,"public static void printGraphToDotFile(String filename,DirectedGraph graph,String graphname,boolean onePage){
  nodecount=0;
  Hashtable nodeindex=new Hashtable(graph.size());
  DotGraph canvas=new DotGraph(filename);
  if (!onePage) {
    canvas.setPageSize(8.5,11.0);
  }
  canvas.setNodeShape(DotGraphConstants.NODE_SHAPE_BOX);
  canvas.setGraphLabel(graphname);
  Iterator nodesIt=graph.iterator();
  while (nodesIt.hasNext()) {
    Object node=nodesIt.next();
    canvas.drawNode(getNodeName(node));
    canvas.getNode(getNodeName(node)).setLabel(getNodeLabel(node));
    Iterator succsIt=graph.getSuccsOf(node).iterator();
    while (succsIt.hasNext()) {
      Object s=succsIt.next();
      canvas.drawNode(getNodeName(s));
      canvas.getNode(getNodeName(s)).setLabel(getNodeLabel(s));
      canvas.drawEdge(getNodeName(node),getNodeName(s));
    }
  }
  canvas.plot(filename + ""String_Node_Str"");
}","public static void printGraphToDotFile(String filename,DirectedGraph<EquivalentValue> graph,String graphname,boolean onePage){
  nodecount=0;
  DotGraph canvas=new DotGraph(filename);
  if (!onePage) {
    canvas.setPageSize(8.5,11.0);
  }
  canvas.setNodeShape(DotGraphConstants.NODE_SHAPE_BOX);
  canvas.setGraphLabel(graphname);
  for (  EquivalentValue node : graph) {
    canvas.drawNode(getNodeName(node));
    canvas.getNode(getNodeName(node)).setLabel(getNodeLabel(node));
    for (    EquivalentValue s : graph.getSuccsOf(node)) {
      canvas.drawNode(getNodeName(s));
      canvas.getNode(getNodeName(s)).setLabel(getNodeLabel(s));
      canvas.drawEdge(getNodeName(node),getNodeName(s));
    }
  }
  canvas.plot(filename + ""String_Node_Str"");
}"
85365,"public static void printInfoFlowSummary(DirectedGraph g){
  Iterator nodeIt=g.iterator();
  if (!nodeIt.hasNext())   G.v().out.println(""String_Node_Str"" + ""String_Node_Str"");
  while (nodeIt.hasNext()) {
    Object node=nodeIt.next();
    List sources=g.getPredsOf(node);
    Iterator sourcesIt=sources.iterator();
    if (!sourcesIt.hasNext())     continue;
    G.v().out.print(""String_Node_Str"");
    int sourcesnamelength=0;
    int lastnamelength=0;
    while (sourcesIt.hasNext()) {
      Value v=((EquivalentValue)sourcesIt.next()).getValue();
      if (v instanceof FieldRef) {
        FieldRef fr=(FieldRef)v;
        String name=fr.getFieldRef().name();
        lastnamelength=name.length();
        if (lastnamelength > sourcesnamelength)         sourcesnamelength=lastnamelength;
        G.v().out.print(name);
      }
 else       if (v instanceof ParameterRef) {
        ParameterRef pr=(ParameterRef)v;
        lastnamelength=11;
        if (lastnamelength > sourcesnamelength)         sourcesnamelength=lastnamelength;
        G.v().out.print(""String_Node_Str"" + pr.getIndex());
      }
 else {
        String name=v.toString();
        lastnamelength=name.length();
        if (lastnamelength > sourcesnamelength)         sourcesnamelength=lastnamelength;
        G.v().out.print(name);
      }
      if (sourcesIt.hasNext())       G.v().out.print(""String_Node_Str"");
    }
    for (int i=0; i < sourcesnamelength - lastnamelength; i++)     G.v().out.print(""String_Node_Str"");
    G.v().out.println(""String_Node_Str"" + node.toString());
  }
}","public static void printInfoFlowSummary(DirectedGraph<EquivalentValue> g){
  if (g.size() > 0)   G.v().out.println(""String_Node_Str"" + ""String_Node_Str"");
  for (  EquivalentValue node : g) {
    List<EquivalentValue> sources=g.getPredsOf(node);
    if (sources.isEmpty())     continue;
    G.v().out.print(""String_Node_Str"");
    int sourcesnamelength=0;
    int lastnamelength=0;
    int idx=0;
    for (    EquivalentValue t : sources) {
      Value v=t.getValue();
      if (v instanceof FieldRef) {
        FieldRef fr=(FieldRef)v;
        String name=fr.getFieldRef().name();
        lastnamelength=name.length();
        if (lastnamelength > sourcesnamelength)         sourcesnamelength=lastnamelength;
        G.v().out.print(name);
      }
 else       if (v instanceof ParameterRef) {
        ParameterRef pr=(ParameterRef)v;
        lastnamelength=11;
        if (lastnamelength > sourcesnamelength)         sourcesnamelength=lastnamelength;
        G.v().out.print(""String_Node_Str"" + pr.getIndex());
      }
 else {
        String name=v.toString();
        lastnamelength=name.length();
        if (lastnamelength > sourcesnamelength)         sourcesnamelength=lastnamelength;
        G.v().out.print(name);
      }
      if ((idx++) < sources.size())       G.v().out.print(""String_Node_Str"");
    }
    for (int i=0; i < sourcesnamelength - lastnamelength; i++)     G.v().out.print(""String_Node_Str"");
    G.v().out.println(""String_Node_Str"" + node.toString());
  }
}"
85366,"protected MutableDirectedGraph getInvokeAbbreviatedInfoFlowGraph(InvokeExpr ie,SootMethod context){
  SootMethodRef methodRef=ie.getMethodRef();
  return getMethodInfoFlowAnalysis(methodRef.resolve()).getMethodAbbreviatedInfoFlowGraph();
}","protected MutableDirectedGraph<EquivalentValue> getInvokeAbbreviatedInfoFlowGraph(InvokeExpr ie,SootMethod context){
  SootMethodRef methodRef=ie.getMethodRef();
  return getMethodInfoFlowAnalysis(methodRef.resolve()).getMethodAbbreviatedInfoFlowGraph();
}"
85367,"@Override protected void internalTransform(Body b,String phaseName,Map<String,String> options){
  if (b.getTraps().size() == 0)   return;
  ExceptionalUnitGraph eug=new ExceptionalUnitGraph(b,DalvikThrowAnalysis.v(),Options.v().omit_excepting_unit_edges());
  Map<Trap,List<Trap>> replaceTrapBy=new HashMap<Trap,List<Trap>>();
  boolean updateTrap=false;
  for (  Trap tr : b.getTraps()) {
    List<Trap> newTraps=new ArrayList<Trap>();
    Unit firstTrapStmt=tr.getBeginUnit();
    boolean goesToHandler=false;
    updateTrap=false;
    for (Unit u=tr.getBeginUnit(); u != tr.getEndUnit(); u=b.getUnits().getSuccOf(u)) {
      if (goesToHandler) {
        goesToHandler=false;
      }
 else {
        firstTrapStmt=u;
      }
      for (      Unit d : eug.getExceptionalSuccsOf(u)) {
        if (d == tr.getHandlerUnit()) {
          goesToHandler=true;
          break;
        }
      }
      if (!goesToHandler) {
        updateTrap=true;
        if (firstTrapStmt == u)         continue;
        Trap t=Jimple.v().newTrap(tr.getException(),firstTrapStmt,u,tr.getHandlerUnit());
        newTraps.add(t);
      }
 else {
        if (b.getUnits().getSuccOf(u) == tr.getEndUnit() && updateTrap) {
          Trap t=Jimple.v().newTrap(tr.getException(),firstTrapStmt,tr.getEndUnit(),tr.getHandlerUnit());
          newTraps.add(t);
        }
      }
    }
    if (updateTrap) {
      replaceTrapBy.put(tr,newTraps);
    }
  }
  for (  Trap k : replaceTrapBy.keySet()) {
    b.getTraps().insertAfter(replaceTrapBy.get(k),k);
    b.getTraps().remove(k);
  }
}","@Override protected void internalTransform(Body b,String phaseName,Map<String,String> options){
  if (b.getTraps().size() == 0)   return;
  ExceptionalUnitGraph eug=new ExceptionalUnitGraph(b,DalvikThrowAnalysis.v(),Options.v().omit_excepting_unit_edges());
  Set<Unit> unitsWithMonitor=getUnitsWithMonitor(eug);
  Map<Trap,List<Trap>> replaceTrapBy=new HashMap<Trap,List<Trap>>(b.getTraps().size());
  boolean updateTrap=false;
  for (  Trap tr : b.getTraps()) {
    List<Trap> newTraps=new ArrayList<Trap>();
    Unit firstTrapStmt=tr.getBeginUnit();
    boolean goesToHandler=false;
    updateTrap=false;
    for (Unit u=tr.getBeginUnit(); u != tr.getEndUnit(); u=b.getUnits().getSuccOf(u)) {
      if (goesToHandler) {
        goesToHandler=false;
      }
 else {
        firstTrapStmt=u;
      }
      if (tr.getException().getName().equals(""String_Node_Str"") && unitsWithMonitor.contains(u))       goesToHandler=true;
      if (!goesToHandler)       for (      Unit d : eug.getExceptionalSuccsOf(u)) {
        if (d == tr.getHandlerUnit()) {
          goesToHandler=true;
          break;
        }
      }
      if (!goesToHandler) {
        updateTrap=true;
        if (firstTrapStmt == u)         continue;
        Trap t=Jimple.v().newTrap(tr.getException(),firstTrapStmt,u,tr.getHandlerUnit());
        newTraps.add(t);
      }
 else {
        if (b.getUnits().getSuccOf(u) == tr.getEndUnit() && updateTrap) {
          Trap t=Jimple.v().newTrap(tr.getException(),firstTrapStmt,tr.getEndUnit(),tr.getHandlerUnit());
          newTraps.add(t);
        }
      }
    }
    if (updateTrap) {
      replaceTrapBy.put(tr,newTraps);
    }
  }
  for (  Trap k : replaceTrapBy.keySet()) {
    b.getTraps().insertAfter(replaceTrapBy.get(k),k);
    b.getTraps().remove(k);
  }
}"
85368,"protected void internalTransform(Body body,String phaseName,Map<String,String> options){
  if (this.throwAnalysis == null)   this.throwAnalysis=Scene.v().getDefaultThrowAnalysis();
  if (Options.v().verbose())   G.v().out.println(""String_Node_Str"" + body.getMethod().getName() + ""String_Node_Str"");
  Chain<Trap> trapChain=body.getTraps();
  Chain<Unit> unitChain=body.getUnits();
  if (trapChain.size() > 0) {
    ExceptionalUnitGraph graph=new ExceptionalUnitGraph(body,throwAnalysis,Options.v().omit_excepting_unit_edges());
    for (Iterator<Trap> trapIt=trapChain.iterator(); trapIt.hasNext(); ) {
      Trap trap=trapIt.next();
      Unit firstTrappedUnit=trap.getBeginUnit();
      Unit firstTrappedThrower=null;
      Unit firstUntrappedUnit=trap.getEndUnit();
      Unit lastTrappedUnit=unitChain.getPredOf(firstUntrappedUnit);
      Unit lastTrappedThrower=null;
      for (Unit u=firstTrappedUnit; u != null && u != firstUntrappedUnit; u=unitChain.getSuccOf(u)) {
        if (mightThrowTo(graph,u,trap)) {
          firstTrappedThrower=u;
          break;
        }
      }
      if (firstTrappedThrower != null) {
        for (Unit u=lastTrappedUnit; u != null; u=unitChain.getPredOf(u)) {
          if (mightThrowTo(graph,u,trap)) {
            lastTrappedThrower=u;
            break;
          }
        }
      }
      if (firstTrappedThrower == null)       trapIt.remove();
 else {
        if (firstTrappedThrower != null && firstTrappedUnit != firstTrappedThrower) {
          trap.setBeginUnit(firstTrappedThrower);
        }
        if (lastTrappedThrower == null) {
          lastTrappedThrower=firstTrappedUnit;
        }
        if (lastTrappedUnit != lastTrappedThrower) {
          trap.setEndUnit(unitChain.getSuccOf(lastTrappedThrower));
        }
      }
    }
  }
}","protected void internalTransform(Body body,String phaseName,Map<String,String> options){
  if (this.throwAnalysis == null)   this.throwAnalysis=Scene.v().getDefaultThrowAnalysis();
  if (Options.v().verbose())   G.v().out.println(""String_Node_Str"" + body.getMethod().getName() + ""String_Node_Str"");
  Chain<Trap> trapChain=body.getTraps();
  Chain<Unit> unitChain=body.getUnits();
  if (trapChain.size() > 0) {
    ExceptionalUnitGraph graph=new ExceptionalUnitGraph(body,throwAnalysis,Options.v().omit_excepting_unit_edges());
    Set<Unit> unitsWithMonitor=getUnitsWithMonitor(graph);
    for (Iterator<Trap> trapIt=trapChain.iterator(); trapIt.hasNext(); ) {
      Trap trap=trapIt.next();
      boolean isCatchAll=trap.getException().getName().equals(""String_Node_Str"");
      Unit firstTrappedUnit=trap.getBeginUnit();
      Unit firstTrappedThrower=null;
      Unit firstUntrappedUnit=trap.getEndUnit();
      Unit lastTrappedUnit=unitChain.getPredOf(firstUntrappedUnit);
      Unit lastTrappedThrower=null;
      for (Unit u=firstTrappedUnit; u != null && u != firstUntrappedUnit; u=unitChain.getSuccOf(u)) {
        if (mightThrowTo(graph,u,trap)) {
          firstTrappedThrower=u;
          break;
        }
        if (isCatchAll && unitsWithMonitor.contains(u))         break;
      }
      if (firstTrappedThrower != null) {
        for (Unit u=lastTrappedUnit; u != null; u=unitChain.getPredOf(u)) {
          if (mightThrowTo(graph,u,trap)) {
            lastTrappedThrower=u;
            break;
          }
          if (isCatchAll && unitsWithMonitor.contains(u))           break;
        }
      }
      if (firstTrappedThrower == null)       trapIt.remove();
 else {
        if (firstTrappedThrower != null && firstTrappedUnit != firstTrappedThrower) {
          trap.setBeginUnit(firstTrappedThrower);
        }
        if (lastTrappedThrower == null) {
          lastTrappedThrower=firstTrappedUnit;
        }
        if (lastTrappedUnit != lastTrappedThrower) {
          trap.setEndUnit(unitChain.getSuccOf(lastTrappedThrower));
        }
      }
    }
  }
}"
85369,"/** 
 * Converts Class annotations from Dexlib to Jimple.
 * @param h
 * @param classDef
 */
void handleClassAnnotation(ClassDef classDef){
  Set<? extends Annotation> aSet=classDef.getAnnotations();
  if (aSet == null || aSet.isEmpty())   return;
  List<Tag> tags=handleAnnotation(aSet,classDef.getType());
  if (tags == null)   return;
  InnerClassAttribute ica=null;
  for (  Tag t : tags)   if (t != null) {
    if (t instanceof InnerClassTag) {
      if (ica == null) {
        ica=(InnerClassAttribute)clazz.getTag(""String_Node_Str"");
        if (ica == null) {
          ica=new InnerClassAttribute();
          clazz.addTag(ica);
        }
      }
      ica.add((InnerClassTag)t);
    }
 else     if (t instanceof VisibilityAnnotationTag) {
      VisibilityAnnotationTag vt=(VisibilityAnnotationTag)t;
      for (      AnnotationTag a : vt.getAnnotations()) {
        if (a.getType().equals(""String_Node_Str"")) {
          for (          AnnotationElem ae : a.getElems()) {
            if (ae instanceof AnnotationAnnotationElem) {
              AnnotationAnnotationElem aae=(AnnotationAnnotationElem)ae;
              AnnotationTag at=(AnnotationTag)aae.getValue();
              Map<String,AnnotationElem> defaults=new HashMap<String,AnnotationElem>();
              for (              AnnotationElem aelem : at.getElems()) {
                defaults.put(aelem.getName(),aelem);
              }
              for (              SootMethod sm : clazz.getMethods()) {
                String methodName=sm.getName();
                if (defaults.containsKey(methodName)) {
                  AnnotationElem e=defaults.get(methodName);
                  e.setName(""String_Node_Str"");
                  AnnotationDefaultTag d=new AnnotationDefaultTag(e);
                  sm.addTag(d);
                }
              }
            }
          }
        }
      }
      if (!(vt.getVisibility() == AnnotationConstants.RUNTIME_INVISIBLE))       clazz.addTag(vt);
    }
 else {
      clazz.addTag(t);
    }
    Debug.printDbg(""String_Node_Str"",t,""String_Node_Str"",t.getClass());
  }
}","/** 
 * Converts Class annotations from Dexlib to Jimple.
 * @param h
 * @param classDef
 */
void handleClassAnnotation(ClassDef classDef){
  Set<? extends Annotation> aSet=classDef.getAnnotations();
  if (aSet == null || aSet.isEmpty())   return;
  List<Tag> tags=handleAnnotation(aSet,classDef.getType());
  if (tags == null)   return;
  InnerClassAttribute ica=null;
  for (  Tag t : tags)   if (t != null) {
    if (t instanceof InnerClassTag) {
      if (ica == null) {
        ica=(InnerClassAttribute)clazz.getTag(""String_Node_Str"");
        if (ica == null) {
          ica=new InnerClassAttribute();
          clazz.addTag(ica);
        }
      }
      ica.add((InnerClassTag)t);
    }
 else     if (t instanceof VisibilityAnnotationTag) {
      VisibilityAnnotationTag vt=(VisibilityAnnotationTag)t;
      for (      AnnotationTag a : vt.getAnnotations()) {
        if (a.getType().equals(""String_Node_Str"")) {
          for (          AnnotationElem ae : a.getElems()) {
            if (ae instanceof AnnotationAnnotationElem) {
              AnnotationAnnotationElem aae=(AnnotationAnnotationElem)ae;
              AnnotationTag at=aae.getValue();
              Map<String,AnnotationElem> defaults=new HashMap<String,AnnotationElem>();
              for (              AnnotationElem aelem : at.getElems()) {
                defaults.put(aelem.getName(),aelem);
              }
              for (              SootMethod sm : clazz.getMethods()) {
                String methodName=sm.getName();
                if (defaults.containsKey(methodName)) {
                  AnnotationElem e=defaults.get(methodName);
                  Type annotationType=getSootType(e);
                  boolean isCorrectType=false;
                  if (annotationType == null)                   isCorrectType=true;
 else {
                    if (annotationType.equals(sm.getReturnType()))                     isCorrectType=true;
                  }
                  if (annotationType.equals(ARRAY_TYPE)) {
                    if (sm.getReturnType() instanceof ArrayType)                     isCorrectType=true;
                  }
                  if (isCorrectType && sm.getParameterCount() == 0) {
                    e.setName(""String_Node_Str"");
                    AnnotationDefaultTag d=new AnnotationDefaultTag(e);
                    sm.addTag(d);
                    defaults.remove(sm.getName());
                  }
                }
              }
              for (              Entry<String,AnnotationElem> leftOverEntry : defaults.entrySet()) {
                SootMethod found=clazz.getMethodByNameUnsafe(leftOverEntry.getKey());
                AnnotationElem element=leftOverEntry.getValue();
                if (found != null) {
                  element.setName(""String_Node_Str"");
                  AnnotationDefaultTag d=new AnnotationDefaultTag(element);
                  found.addTag(d);
                }
              }
            }
          }
        }
      }
      if (!(vt.getVisibility() == AnnotationConstants.RUNTIME_INVISIBLE))       clazz.addTag(vt);
    }
 else {
      clazz.addTag(t);
    }
    Debug.printDbg(""String_Node_Str"",t,""String_Node_Str"",t.getClass());
  }
}"
85370,"private Set<Annotation> buildClassAnnotations(SootClass c){
  Set<String> skipList=new HashSet<String>();
  Set<Annotation> annotations=buildCommonAnnotations(c,skipList);
  if (c.hasTag(""String_Node_Str"")) {
    EnclosingMethodTag eMethTag=(EnclosingMethodTag)c.getTag(""String_Node_Str"");
    Annotation enclosingMethodItem=buildEnclosingMethodTag(eMethTag,skipList);
    if (enclosingMethodItem != null)     annotations.add(enclosingMethodItem);
  }
 else   if (c.hasOuterClass()) {
    if (skipList.add(""String_Node_Str"")) {
      ImmutableAnnotationElement enclosingElement=new ImmutableAnnotationElement(""String_Node_Str"",new ImmutableTypeEncodedValue(SootToDexUtils.getDexClassName(c.getOuterClass().getName())));
      annotations.add(new ImmutableAnnotation(AnnotationVisibility.SYSTEM,""String_Node_Str"",Collections.singleton(enclosingElement)));
    }
  }
  if (c.hasOuterClass()) {
    InnerClassAttribute icTag=(InnerClassAttribute)c.getOuterClass().getTag(""String_Node_Str"");
    if (icTag != null) {
      List<Annotation> innerClassItem=buildInnerClassAttribute(c,icTag,skipList);
      if (innerClassItem != null)       annotations.addAll(innerClassItem);
    }
  }
  InnerClassAttribute icTag=(InnerClassAttribute)c.getTag(""String_Node_Str"");
  if (icTag != null) {
    List<Annotation> memberClassesItem=buildMemberClassesAttribute(c,icTag,skipList);
    if (memberClassesItem != null)     annotations.addAll(memberClassesItem);
  }
  for (  Tag t : c.getTags()) {
    if (t.getName().equals(""String_Node_Str"")) {
      List<ImmutableAnnotation> visibilityItems=buildVisibilityAnnotationTag((VisibilityAnnotationTag)t,skipList);
      annotations.addAll(visibilityItems);
    }
  }
  return annotations;
}","private Set<Annotation> buildClassAnnotations(SootClass c){
  Set<String> skipList=new HashSet<String>();
  Set<Annotation> annotations=buildCommonAnnotations(c,skipList);
  if (c.hasTag(""String_Node_Str"")) {
    EnclosingMethodTag eMethTag=(EnclosingMethodTag)c.getTag(""String_Node_Str"");
    Annotation enclosingMethodItem=buildEnclosingMethodTag(eMethTag,skipList);
    if (enclosingMethodItem != null)     annotations.add(enclosingMethodItem);
  }
 else   if (c.hasOuterClass()) {
    if (skipList.add(""String_Node_Str"")) {
      ImmutableAnnotationElement enclosingElement=new ImmutableAnnotationElement(""String_Node_Str"",new ImmutableTypeEncodedValue(SootToDexUtils.getDexClassName(c.getOuterClass().getName())));
      annotations.add(new ImmutableAnnotation(AnnotationVisibility.SYSTEM,""String_Node_Str"",Collections.singleton(enclosingElement)));
    }
  }
  if (c.hasOuterClass()) {
    InnerClassAttribute icTag=(InnerClassAttribute)c.getOuterClass().getTag(""String_Node_Str"");
    if (icTag != null) {
      List<Annotation> innerClassItem=buildInnerClassAttribute(c,icTag,skipList);
      if (innerClassItem != null)       annotations.addAll(innerClassItem);
    }
  }
  InnerClassAttribute icTag=(InnerClassAttribute)c.getTag(""String_Node_Str"");
  if (icTag != null) {
    List<Annotation> memberClassesItem=buildMemberClassesAttribute(c,icTag,skipList);
    if (memberClassesItem != null)     annotations.addAll(memberClassesItem);
  }
  for (  Tag t : c.getTags()) {
    if (t.getName().equals(""String_Node_Str"")) {
      List<ImmutableAnnotation> visibilityItems=buildVisibilityAnnotationTag((VisibilityAnnotationTag)t,skipList);
      annotations.addAll(visibilityItems);
    }
  }
  List<AnnotationElem> defaults=new ArrayList<AnnotationElem>();
  for (  SootMethod method : c.getMethods()) {
    AnnotationDefaultTag tag=(AnnotationDefaultTag)method.getTag(""String_Node_Str"");
    if (tag != null) {
      tag.getDefaultVal().setName(method.getName());
      defaults.add(tag.getDefaultVal());
    }
  }
  if (defaults.size() > 0) {
    VisibilityAnnotationTag defaultAnnotationTag=new VisibilityAnnotationTag(AnnotationConstants.RUNTIME_INVISIBLE);
    AnnotationTag a=new AnnotationTag(""String_Node_Str"");
    defaultAnnotationTag.addAnnotation(a);
    AnnotationTag at=new AnnotationTag(SootToDexUtils.getDexClassName(c.getName()));
    AnnotationAnnotationElem ae=new AnnotationAnnotationElem(at,'@',""String_Node_Str"");
    a.addElem(ae);
    for (    AnnotationElem aelem : defaults)     at.addElem(aelem);
    List<ImmutableAnnotation> visibilityItems=buildVisibilityAnnotationTag(defaultAnnotationTag,skipList);
    annotations.addAll(visibilityItems);
  }
  return annotations;
}"
85371,"public void initialize(){
  try {
    int api=1;
    this.dexFile=DexFileFactory.loadDexFile(inputDexFile,api);
  }
 catch (  Exception e) {
    throw new RuntimeException(e.toString());
  }
  if (dexFile instanceof DexBackedDexFile) {
    DexBackedDexFile dbdf=(DexBackedDexFile)dexFile;
    for (int i=0; i < dbdf.getTypeCount(); i++) {
      String t=dbdf.getType(i++);
      Type st=DexType.toSoot(t);
      if (st instanceof ArrayType) {
        st=((ArrayType)st).baseType;
      }
      Debug.printDbg(""String_Node_Str"",t,""String_Node_Str"",st);
      String sootTypeName=st.toString();
      if (!Scene.v().containsClass(sootTypeName)) {
        if (st instanceof PrimType || st instanceof VoidType || systemAnnotationNames.contains(sootTypeName)) {
          continue;
        }
        SootResolver.v().makeClassRef(sootTypeName);
      }
      SootResolver.v().resolveClass(sootTypeName,SootClass.SIGNATURES);
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + dexFile.getClass());
  }
}","public void initialize(){
  try {
    int api=1;
    this.dexFile=DexFileFactory.loadDexFile(inputDexFile,api);
  }
 catch (  Exception e) {
    throw new RuntimeException(e.toString());
  }
  if (dexFile instanceof DexBackedDexFile) {
    DexBackedDexFile dbdf=(DexBackedDexFile)dexFile;
    for (int i=0; i < dbdf.getTypeCount(); i++) {
      String t=dbdf.getType(i);
      Type st=DexType.toSoot(t);
      if (st instanceof ArrayType) {
        st=((ArrayType)st).baseType;
      }
      Debug.printDbg(""String_Node_Str"",t,""String_Node_Str"",st);
      String sootTypeName=st.toString();
      if (!Scene.v().containsClass(sootTypeName)) {
        if (st instanceof PrimType || st instanceof VoidType || systemAnnotationNames.contains(sootTypeName)) {
          continue;
        }
        SootResolver.v().makeClassRef(sootTypeName);
      }
      SootResolver.v().resolveClass(sootTypeName,SootClass.SIGNATURES);
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + dexFile.getClass());
  }
}"
85372,"/** 
 * Insert a runtime exception before unit u of body b. Useful to analyze broken code (which make reference to inexisting class for instance) exceptionType: e.g., ""java.lang.RuntimeException""
 */
public static void addExceptionAfterUnit(Body b,String exceptionType,Unit u,String m){
  Local l=Jimple.v().newLocal(""String_Node_Str"",RefType.v(exceptionType));
  b.getLocals().add(l);
  List<Unit> newUnits=new ArrayList<Unit>();
  Unit u1=Jimple.v().newAssignStmt(l,Jimple.v().newNewExpr(RefType.v(exceptionType)));
  Unit u2=Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(l,Scene.v().getMethod(""String_Node_Str"" + exceptionType + ""String_Node_Str"").makeRef(),StringConstant.v(m)));
  Unit u3=Jimple.v().newThrowStmt(l);
  newUnits.add(u1);
  newUnits.add(u2);
  newUnits.add(u3);
  b.getUnits().insertBefore(newUnits,u);
}","/** 
 * Insert a runtime exception before unit u of body b. Useful to analyze broken code (which make reference to inexisting class for instance) exceptionType: e.g., ""java.lang.RuntimeException""
 */
public static void addExceptionAfterUnit(Body b,String exceptionType,Unit u,String m){
  LocalCreation lc=new LocalCreation(b.getLocals());
  Local l=lc.newLocal(RefType.v(exceptionType));
  List<Unit> newUnits=new ArrayList<Unit>();
  Unit u1=Jimple.v().newAssignStmt(l,Jimple.v().newNewExpr(RefType.v(exceptionType)));
  Unit u2=Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(l,Scene.v().makeMethodRef(Scene.v().getSootClass(exceptionType),""String_Node_Str"",Collections.singletonList((Type)RefType.v(""String_Node_Str"")),VoidType.v(),false),StringConstant.v(m)));
  Unit u3=Jimple.v().newThrowStmt(l);
  newUnits.add(u1);
  newUnits.add(u2);
  newUnits.add(u3);
  b.getUnits().insertBefore(newUnits,u);
}"
85373,"private void addTrapBoundary(Unit unit,Trap t,Map<Unit,List<Trap>> unitToTrapBoundaries){
  List<Trap> boundary=unitToTrapBoundaries.get(t.getBeginUnit());
  if (boundary == null) {
    boundary=new ArrayList<Trap>();
    unitToTrapBoundaries.put(unit,boundary);
  }
  boundary.add(t);
}","private void addTrapBoundary(Unit unit,Trap t,Map<Unit,List<Trap>> unitToTrapBoundaries){
  List<Trap> boundary=unitToTrapBoundaries.get(unit);
  if (boundary == null) {
    boundary=new ArrayList<Trap>();
    unitToTrapBoundaries.put(unit,boundary);
  }
  boundary.add(t);
}"
85374,"/** 
 * @see org.appfuse.mojo.HibernateExporterMojo#configureExporter(org.hibernate.tool.hbm2x.Exporter)
 */
protected Exporter configureExporter(Exporter exp) throws MojoExecutionException {
  System.setProperty(""String_Node_Str"",pojoName);
  getProject().addCompileSourceRoot(new File(getComponent().getOutputDirectory()).getPath());
  AppFuseExporter exporter=(AppFuseExporter)super.configureExporter(exp);
  exporter.getProperties().setProperty(""String_Node_Str"",getComponentProperty(""String_Node_Str"",""String_Node_Str""));
  exporter.getProperties().setProperty(""String_Node_Str"",getComponentProperty(""String_Node_Str"",""String_Node_Str""));
  if (generateCoreOnly) {
    exporter.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (generateWebOnly) {
    exporter.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  String rootPackage=(fullPath != null) ? fullPath : getProject().getGroupId();
  exporter.getProperties().setProperty(""String_Node_Str"",rootPackage);
  exporter.getProperties().setProperty(""String_Node_Str"",getProject().getProperties().getProperty(""String_Node_Str""));
  String webFramework=(getProject().getProperties().containsKey(""String_Node_Str"")) ? getProject().getProperties().getProperty(""String_Node_Str"") : ""String_Node_Str"";
  exporter.getProperties().setProperty(""String_Node_Str"",webFramework);
  exporter.getProperties().setProperty(""String_Node_Str"",getProject().getPackaging());
  exporter.getProperties().setProperty(""String_Node_Str"",String.valueOf(genericCore));
  if (templateDirectory != null) {
    exporter.getProperties().setProperty(""String_Node_Str"",templateDirectory);
  }
  if (isFullSource())   exporter.getProperties().setProperty(""String_Node_Str"",rootPackage);
 else {
    exporter.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  boolean hasSecurity=false;
  if (getProject().getPackaging().equals(""String_Node_Str"")) {
    Collection<File> sourceFiles=FileUtils.listFiles(getProject().getBasedir(),new String[]{""String_Node_Str""},true);
    for (    File file : sourceFiles) {
      if (file.getPath().contains(""String_Node_Str"")) {
        hasSecurity=true;
        break;
      }
    }
  }
  exporter.getProperties().setProperty(""String_Node_Str"",String.valueOf(hasSecurity));
  if (webFramework.equals(""String_Node_Str"")) {
    boolean useHome=true;
    Collection<File> sourceFiles=FileUtils.listFiles(getProject().getBasedir(),new String[]{""String_Node_Str""},true);
    for (    File file : sourceFiles) {
      if (file.getPath().contains(""String_Node_Str"")) {
        useHome=false;
        break;
      }
    }
    exporter.getProperties().setProperty(""String_Node_Str"",String.valueOf(useHome));
  }
  return exporter;
}","/** 
 * @see org.appfuse.mojo.HibernateExporterMojo#configureExporter(org.hibernate.tool.hbm2x.Exporter)
 */
protected Exporter configureExporter(Exporter exp) throws MojoExecutionException {
  System.setProperty(""String_Node_Str"",pojoName);
  getProject().addCompileSourceRoot(new File(getComponent().getOutputDirectory()).getPath());
  AppFuseExporter exporter=(AppFuseExporter)super.configureExporter(exp);
  exporter.getProperties().setProperty(""String_Node_Str"",getComponentProperty(""String_Node_Str"",""String_Node_Str""));
  exporter.getProperties().setProperty(""String_Node_Str"",getComponentProperty(""String_Node_Str"",""String_Node_Str""));
  if (generateCoreOnly) {
    exporter.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (generateWebOnly) {
    exporter.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  String rootPackage=(fullPath != null) ? fullPath : getProject().getGroupId();
  exporter.getProperties().setProperty(""String_Node_Str"",rootPackage);
  exporter.getProperties().setProperty(""String_Node_Str"",getProject().getProperties().getProperty(""String_Node_Str""));
  String webFramework=(getProject().getProperties().containsKey(""String_Node_Str"")) ? getProject().getProperties().getProperty(""String_Node_Str"") : ""String_Node_Str"";
  exporter.getProperties().setProperty(""String_Node_Str"",webFramework);
  exporter.getProperties().setProperty(""String_Node_Str"",getProject().getPackaging());
  exporter.getProperties().setProperty(""String_Node_Str"",String.valueOf(genericCore));
  if (templateDirectory != null) {
    exporter.getProperties().setProperty(""String_Node_Str"",templateDirectory);
  }
  if (isFullSource())   exporter.getProperties().setProperty(""String_Node_Str"",rootPackage);
 else {
    exporter.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  boolean hasSecurity=false;
  if (getProject().getPackaging().equals(""String_Node_Str"")) {
    Collection<File> sourceFiles=FileUtils.listFiles(getProject().getBasedir(),new String[]{""String_Node_Str""},true);
    for (    File file : sourceFiles) {
      if (file.getPath().contains(""String_Node_Str"")) {
        hasSecurity=true;
        break;
      }
    }
  }
  boolean isAppFuse=(getProject().getParent().getArtifactId().contains(""String_Node_Str"") || getProject().getParent().getParent().getGroupId().contains(""String_Node_Str""));
  exporter.getProperties().setProperty(""String_Node_Str"",String.valueOf(isAppFuse));
  exporter.getProperties().setProperty(""String_Node_Str"",String.valueOf(hasSecurity));
  if (webFramework.equals(""String_Node_Str"")) {
    boolean useHome=true;
    Collection<File> sourceFiles=FileUtils.listFiles(getProject().getBasedir(),new String[]{""String_Node_Str""},true);
    for (    File file : sourceFiles) {
      if (file.getPath().contains(""String_Node_Str"")) {
        useHome=false;
        break;
      }
    }
    exporter.getProperties().setProperty(""String_Node_Str"",String.valueOf(useHome));
  }
  return exporter;
}"
85375,"private void generateWeb(){
  String packaging=getProperties().getProperty(""String_Node_Str"");
  boolean webProject=packaging != null && packaging.equalsIgnoreCase(""String_Node_Str"");
  if (!webProject)   return;
  String webFramework=getProperties().getProperty(""String_Node_Str"");
  Resource jwebUnitTemplate=new ClassPathResource(""String_Node_Str"" + webFramework + ""String_Node_Str"");
  if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"") || webFramework.equalsIgnoreCase(""String_Node_Str"") || webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    if (!webFramework.equalsIgnoreCase(""String_Node_Str"")) {
      configureExporter(""String_Node_Str"",""String_Node_Str"").start();
      configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    }
 else {
      configureExporter(""String_Node_Str"",""String_Node_Str"").start();
      configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    }
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    GenericExporter exporter=configureExporter(""String_Node_Str"",""String_Node_Str"");
    exporter.getProperties().put(""String_Node_Str"",jwebUnitTemplate.exists() ? ""String_Node_Str"" : ""String_Node_Str"");
    exporter.start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else {
    log.warn(""String_Node_Str"" + webFramework + ""String_Node_Str"");
    log.warn(""String_Node_Str"");
  }
  if (!webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
      configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    }
 else {
      configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    }
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
  configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  if (!webFramework.equals(""String_Node_Str"") && !webFramework.equalsIgnoreCase(""String_Node_Str"") && !webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"" + webFramework + ""String_Node_Str"",""String_Node_Str"").start();
  }
  if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    webFramework=""String_Node_Str"";
    jwebUnitTemplate=new ClassPathResource(""String_Node_Str"" + webFramework + ""String_Node_Str"");
  }
  if (jwebUnitTemplate.exists()) {
    configureExporter(""String_Node_Str"" + webFramework + ""String_Node_Str"",""String_Node_Str"").start();
  }
}","private void generateWeb(){
  String packaging=getProperties().getProperty(""String_Node_Str"");
  boolean isAppFuse=Boolean.valueOf(getProperties().getProperty(""String_Node_Str""));
  boolean webProject=packaging != null && packaging.equalsIgnoreCase(""String_Node_Str"");
  if (!webProject)   return;
  String webFramework=getProperties().getProperty(""String_Node_Str"");
  Resource jwebUnitTemplate=new ClassPathResource(""String_Node_Str"" + webFramework + ""String_Node_Str"");
  if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"") || webFramework.equalsIgnoreCase(""String_Node_Str"") || webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    if (!webFramework.equalsIgnoreCase(""String_Node_Str"")) {
      configureExporter(""String_Node_Str"",""String_Node_Str"").start();
      configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    }
 else {
      configureExporter(""String_Node_Str"",""String_Node_Str"").start();
      configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    }
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    GenericExporter exporter=configureExporter(""String_Node_Str"",""String_Node_Str"");
    exporter.getProperties().put(""String_Node_Str"",isAppFuse ? ""String_Node_Str"" : ""String_Node_Str"");
    exporter.start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else {
    log.warn(""String_Node_Str"" + webFramework + ""String_Node_Str"");
    log.warn(""String_Node_Str"");
  }
  if (!webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
      configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    }
 else {
      configureExporter(""String_Node_Str"",""String_Node_Str"").start();
    }
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
 else {
    configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  }
  configureExporter(""String_Node_Str"",""String_Node_Str"").start();
  if (!webFramework.equals(""String_Node_Str"") && !webFramework.equalsIgnoreCase(""String_Node_Str"") && !webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    configureExporter(""String_Node_Str"" + webFramework + ""String_Node_Str"",""String_Node_Str"").start();
  }
  if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    webFramework=""String_Node_Str"";
    jwebUnitTemplate=new ClassPathResource(""String_Node_Str"" + webFramework + ""String_Node_Str"");
  }
  if (jwebUnitTemplate.exists()) {
    configureExporter(""String_Node_Str"" + webFramework + ""String_Node_Str"",""String_Node_Str"").start();
  }
}"
85376,"private boolean isAppFuse(){
  return (project.getParent().getArtifactId().contains(""String_Node_Str""));
}","private boolean isAppFuse(){
  return (project.getParent().getArtifactId().contains(""String_Node_Str"") || project.getParent().getParent().getGroupId().contains(""String_Node_Str""));
}"
85377,"public void execute(){
  antProject=AntUtils.createProject();
  boolean hasDbUnit=projectContainsPluginArtifact(""String_Node_Str"");
  if (hasDbUnit) {
    log(""String_Node_Str"");
    installSampleData();
  }
  if (project.getPackaging().equals(""String_Node_Str"") || (project.getPackaging().equals(""String_Node_Str"") && project.getParentArtifact().getGroupId().contains(""String_Node_Str""))) {
    copyGeneratedObjects(this.sourceDirectory,this.destinationDirectory,""String_Node_Str"");
    copyGeneratedObjects(this.sourceDirectory,this.destinationDirectory,""String_Node_Str"");
    copyGeneratedObjects(this.sourceDirectory,this.destinationDirectory,""String_Node_Str"");
    if (genericCore) {
      log(""String_Node_Str"");
      installGenericBeanDefinitions();
    }
    installiBATISFiles();
  }
  if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    copyGeneratedObjects(this.sourceDirectory,this.destinationDirectory,""String_Node_Str"");
    String webFramework=project.getProperties().getProperty(""String_Node_Str"");
    String pagesPath=(isAppFuse()) ? ""String_Node_Str"" : ""String_Node_Str"";
    if (""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installJSFNavigationAndBeans();
      installJSFViews();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installStrutsActionDefinitions();
      copyGeneratedObjects(sourceDirectory + ""String_Node_Str"",destinationDirectory + ""String_Node_Str"",""String_Node_Str"");
      copyGeneratedObjects(sourceDirectory + ""String_Node_Str"",destinationDirectory + ""String_Node_Str"",""String_Node_Str"");
      installStrutsViews(pagesPath);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(webFramework) || ""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installSpringValidation();
      installSpringViews(pagesPath);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installSpringFreemarkerViews(pagesPath);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installStripesViews();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installTapestryViews();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installWicketViews();
    }
    log(""String_Node_Str"");
    installInternationalizationKeys(webFramework);
    if (!""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installMenu();
    }
    log(""String_Node_Str"");
    installUITests(webFramework);
  }
}","public void execute(){
  antProject=AntUtils.createProject();
  boolean hasDbUnit=projectContainsPluginArtifact(""String_Node_Str"");
  if (hasDbUnit) {
    log(""String_Node_Str"");
    installSampleData();
  }
  if (project.getPackaging().equals(""String_Node_Str"") || (project.getPackaging().equals(""String_Node_Str"") && project.getParentArtifact().getGroupId().contains(""String_Node_Str""))) {
    copyGeneratedObjects(this.sourceDirectory,this.destinationDirectory,""String_Node_Str"");
    copyGeneratedObjects(this.sourceDirectory,this.destinationDirectory,""String_Node_Str"");
    copyGeneratedObjects(this.sourceDirectory,this.destinationDirectory,""String_Node_Str"");
    if (genericCore) {
      log(""String_Node_Str"");
      installGenericBeanDefinitions();
    }
    installiBATISFiles();
  }
  if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    copyGeneratedObjects(this.sourceDirectory,this.destinationDirectory,""String_Node_Str"");
    String webFramework=project.getProperties().getProperty(""String_Node_Str"");
    String pagesPath=isAppFuse() ? ""String_Node_Str"" : ""String_Node_Str"";
    if (""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installJSFNavigationAndBeans();
      installJSFViews();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installStrutsActionDefinitions();
      copyGeneratedObjects(sourceDirectory + ""String_Node_Str"",destinationDirectory + ""String_Node_Str"",""String_Node_Str"");
      copyGeneratedObjects(sourceDirectory + ""String_Node_Str"",destinationDirectory + ""String_Node_Str"",""String_Node_Str"");
      installStrutsViews(pagesPath);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(webFramework) || ""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installSpringValidation();
      installSpringViews(pagesPath);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installSpringFreemarkerViews(pagesPath);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installStripesViews();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installTapestryViews();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installWicketViews();
    }
    log(""String_Node_Str"");
    installInternationalizationKeys(webFramework);
    if (!""String_Node_Str"".equalsIgnoreCase(webFramework)) {
      log(""String_Node_Str"");
      installMenu();
    }
    log(""String_Node_Str"");
    installUITests(webFramework);
  }
}"
85378,"/** 
 * {@inheritDoc}
 */
@Override public String generateRecoveryToken(final User user){
  if (user != null) {
    final String tokenSource=getTokenSource(user);
    final String expirationTimeStamp=expirationTimeFormat.format(getExpirationTime());
    return expirationTimeStamp + passwordEncoder.encode(expirationTimeStamp + tokenSource);
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
@Override public String generateRecoveryToken(final User user){
  if (user != null) {
    final String tokenSource=getTokenSource(user);
    final String expirationTimeStamp=expirationTimeFormat.format(getExpirationTime());
    return expirationTimeStamp + passwordTokenEncoder.encode(expirationTimeStamp + tokenSource);
  }
  return null;
}"
85379,"/** 
 * {@inheritDoc}
 */
@Override public boolean isRecoveryTokenValid(final User user,final String token){
  if (user != null && token != null) {
    final String expirationTimeStamp=getTimestamp(token);
    final String tokenWithoutTimestamp=getTokenWithoutTimestamp(token);
    final String tokenSource=expirationTimeStamp + getTokenSource(user);
    final Date expirationTime=parseTimestamp(expirationTimeStamp);
    return expirationTime != null && expirationTime.after(new Date()) && passwordEncoder.matches(tokenWithoutTimestamp,tokenSource);
  }
  return false;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean isRecoveryTokenValid(final User user,final String token){
  if (user != null && token != null) {
    final String expirationTimeStamp=getTimestamp(token);
    final String tokenWithoutTimestamp=getTokenWithoutTimestamp(token);
    final String tokenSource=expirationTimeStamp + getTokenSource(user);
    final Date expirationTime=parseTimestamp(expirationTimeStamp);
    return expirationTime != null && expirationTime.after(new Date()) && passwordTokenEncoder.matches(tokenSource,tokenWithoutTimestamp);
  }
  return false;
}"
85380,"/** 
 * Velocity template name to inform users their password was updated (default passwordUpdated.vm).
 * @param passwordUpdatedTemplate the Velocity template to use (relative to classpath)
 * @see MailEngine#sendMessage(SimpleMailMessage,String,Map)
 */
public void setPasswordUpdatedTemplate(final String passwordUpdatedTemplate){
  this.passwordUpdatedTemplate=passwordUpdatedTemplate;
}","/** 
 * Velocity template name to inform users their password was updated (default passwordUpdated.vm).
 * @param passwordUpdatedTemplate the Velocity template to use (relative to classpath)
 * @see org.appfuse.service.MailEngine#sendMessage(org.springframework.mail.SimpleMailMessage,String,java.util.Map)
 */
public void setPasswordUpdatedTemplate(final String passwordUpdatedTemplate){
  this.passwordUpdatedTemplate=passwordUpdatedTemplate;
}"
85381,"/** 
 * {@inheritDoc}
 */
@Override public User updatePassword(final String username,final String currentPassword,final String recoveryToken,final String newPassword,final String applicationUrl) throws UserExistsException {
  User user=getUserByUsername(username);
  if (isRecoveryTokenValid(user,recoveryToken)) {
    log.debug(""String_Node_Str"" + username);
    user.setPassword(newPassword);
    user=saveUser(user);
    passwordTokenManager.invalidateRecoveryToken(user,recoveryToken);
    sendUserEmail(user,passwordUpdatedTemplate,applicationUrl);
    return user;
  }
 else   if (StringUtils.isNotBlank(currentPassword)) {
    if (passwordEncoder.matches(user.getPassword(),currentPassword)) {
      log.debug(""String_Node_Str"" + username);
      user.setPassword(newPassword);
      user=saveUser(user);
      return user;
    }
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
@Override public User updatePassword(final String username,final String currentPassword,final String recoveryToken,final String newPassword,final String applicationUrl) throws UserExistsException {
  User user=getUserByUsername(username);
  if (isRecoveryTokenValid(user,recoveryToken)) {
    log.debug(""String_Node_Str"" + username);
    user.setPassword(newPassword);
    user=saveUser(user);
    passwordTokenManager.invalidateRecoveryToken(user,recoveryToken);
    sendUserEmail(user,passwordUpdatedTemplate,applicationUrl);
    return user;
  }
 else   if (StringUtils.isNotBlank(currentPassword)) {
    if (passwordEncoder.matches(currentPassword,user.getPassword())) {
      log.debug(""String_Node_Str"" + username);
      user.setPassword(newPassword);
      user=saveUser(user);
      return user;
    }
  }
  return null;
}"
85382,"/** 
 * {@inheritDoc}
 * @param username the login name of the human
 * @return User the populated user object
 * @throws UsernameNotFoundException thrown when username not found
 */
@Override public User getUserByUsername(final String username) throws UsernameNotFoundException {
  return (User)userDao.loadUserByUsername(username);
}","/** 
 * {@inheritDoc}
 * @param username the login name of the human
 * @return User the populated user object
 * @throws org.springframework.security.core.userdetails.UsernameNotFoundException thrown when username not found
 */
@Override public User getUserByUsername(final String username) throws UsernameNotFoundException {
  return (User)userDao.loadUserByUsername(username);
}"
85383,"/** 
 * Velocity template name to send users a password recovery mail (default passwordRecovery.vm).
 * @param passwordRecoveryTemplate the Velocity template to use (relative to classpath)
 * @see MailEngine#sendMessage(SimpleMailMessage,String,Map)
 */
public void setPasswordRecoveryTemplate(final String passwordRecoveryTemplate){
  this.passwordRecoveryTemplate=passwordRecoveryTemplate;
}","/** 
 * Velocity template name to send users a password recovery mail (default passwordRecovery.vm).
 * @param passwordRecoveryTemplate the Velocity template to use (relative to classpath)
 * @see org.appfuse.service.MailEngine#sendMessage(org.springframework.mail.SimpleMailMessage,String,java.util.Map)
 */
public void setPasswordRecoveryTemplate(final String passwordRecoveryTemplate){
  this.passwordRecoveryTemplate=passwordRecoveryTemplate;
}"
85384,"@Autowired public void setPasswordEncoder(final PasswordEncoder passwordEncoder){
  this.passwordEncoder=passwordEncoder;
}","@Autowired public void setPasswordEncoder(@Qualifier(""String_Node_Str"") final PasswordEncoder passwordEncoder){
  this.passwordEncoder=passwordEncoder;
}"
85385,@NotNull @Size(max=150) String getConfirmPassword();,String getConfirmPassword();
85386,@NotNull @Size(max=150) String getPasswordHint();,String getPasswordHint();
85387,@NotNull @Size(max=150) String getUsername();,String getUsername();
85388,@NotNull @Size(max=150) String getPhoneNumber();,String getPhoneNumber();
85389,@NotNull @Size(max=150) String getWebsite();,String getWebsite();
85390,@NotNull @Size(max=150) String getLastName();,String getLastName();
85391,@NotNull @Size(max=150) String getPassword();,String getPassword();
85392,@NotNull @Size(max=150) String getEmail();,String getEmail();
85393,@NotNull @Size(max=150) String getFirstName();,String getFirstName();
85394,"public String save() throws IOException {
  setUserRoles(getRequest().getParameterValues(""String_Node_Str""));
  for (int i=0; (userRoles != null) && (i < userRoles.length); i++) {
    String roleName=userRoles[i];
    user.addRole(roleManager.getRole(roleName));
  }
  Integer originalVersion=user.getVersion();
  String userAgent=getRequest().getHeader(""String_Node_Str"");
  if (userAgent != null && userAgent.contains(""String_Node_Str"") && user.getVersion() == 0) {
    log.debug(""String_Node_Str"");
    user.setId(null);
    user.setVersion(null);
  }
  try {
    user=userManager.saveUser(user);
  }
 catch (  AccessDeniedException ade) {
    log.warn(ade.getMessage());
    getResponse().sendError(HttpServletResponse.SC_FORBIDDEN);
    return null;
  }
catch (  UserExistsException e) {
    addError(""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()});
    user.setVersion(originalVersion);
    return ""String_Node_Str"";
  }
  if (!""String_Node_Str"".equals(getParameter(""String_Node_Str""))) {
    addMessage(""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    if (""String_Node_Str"".equals(getParameter(""String_Node_Str""))) {
      addMessage(""String_Node_Str"",user.getFullName());
      try {
        sendUserMessage(user,getText(""String_Node_Str"",user.getFullName()),RequestUtil.getAppURL(getRequest()));
      }
 catch (      MailException me) {
        addError(me.getCause().getLocalizedMessage());
      }
      return ""String_Node_Str"";
    }
 else {
      addMessage(""String_Node_Str"",user.getFullName());
      return ""String_Node_Str"";
    }
  }
}","public String save() throws IOException {
  setUserRoles(getRequest().getParameterValues(""String_Node_Str""));
  for (int i=0; (userRoles != null) && (i < userRoles.length); i++) {
    String roleName=userRoles[i];
    user.addRole(roleManager.getRole(roleName));
  }
  if (user.getId() != null && user.getId() == 0 || user.getVersion() != null && user.getVersion() == 0) {
    user.setId(null);
    user.setVersion(null);
  }
  Integer originalVersion=user.getVersion();
  try {
    user=userManager.saveUser(user);
  }
 catch (  AccessDeniedException ade) {
    log.warn(ade.getMessage());
    getResponse().sendError(HttpServletResponse.SC_FORBIDDEN);
    return null;
  }
catch (  UserExistsException e) {
    addError(""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()});
    user.setVersion(originalVersion);
    return ""String_Node_Str"";
  }
  if (!""String_Node_Str"".equals(getParameter(""String_Node_Str""))) {
    addMessage(""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    if (""String_Node_Str"".equals(getParameter(""String_Node_Str""))) {
      addMessage(""String_Node_Str"",user.getFullName());
      try {
        sendUserMessage(user,getText(""String_Node_Str"",user.getFullName()),RequestUtil.getAppURL(getRequest()));
      }
 catch (      MailException me) {
        addError(me.getCause().getLocalizedMessage());
      }
      return ""String_Node_Str"";
    }
 else {
      addMessage(""String_Node_Str"",user.getFullName());
      return ""String_Node_Str"";
    }
  }
}"
85395,"public void execute() throws MojoExecutionException, MojoFailureException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String appfuseVersion=project.getProperties().getProperty(""String_Node_Str"");
  if ((appfuseVersion != null) && !appfuseVersion.endsWith(""String_Node_Str"") && tag.equals(""String_Node_Str"")) {
    tag=""String_Node_Str"" + appfuseVersion.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    if (tag.contains(""String_Node_Str"")) {
      tag=tag.replace(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (tag.contains(""String_Node_Str"")) {
      tag=tag.replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  String daoFramework=project.getProperties().getProperty(""String_Node_Str"");
  if (daoFramework == null) {
    log(""String_Node_Str"");
  }
  String webFramework=project.getProperties().getProperty(""String_Node_Str"");
  boolean modular=(project.getPackaging().equals(""String_Node_Str"") && !project.hasParent());
  if (project.getPackaging().equals(""String_Node_Str"") || (project.getPackaging().equals(""String_Node_Str"") && !project.hasParent())) {
    log(""String_Node_Str"");
    String coreSource=project.getBuild().getSourceDirectory();
    export(""String_Node_Str"",(modular) ? coreSource : destinationDirectory);
    File orig=new File((modular ? coreSource : destinationDirectory) + ""String_Node_Str"");
    File dest=new File((modular ? coreSource : destinationDirectory) + ""String_Node_Str"");
    if (webFramework != null && !webFramework.isEmpty()) {
      renameFile(orig,dest);
    }
    log(""String_Node_Str"" + daoFramework + ""String_Node_Str"");
    export(""String_Node_Str"" + daoFramework + ""String_Node_Str"",(modular) ? coreSource : destinationDirectory);
    log(""String_Node_Str"");
    export(""String_Node_Str"",(modular) ? coreSource : destinationDirectory);
    moveFiles((modular) ? coreSource + ""String_Node_Str"" : destinationDirectory + ""String_Node_Str"",(modular) ? coreSource + ""String_Node_Str"" : destinationDirectory + ""String_Node_Str"",""String_Node_Str"");
    deleteFile(""String_Node_Str"");
    deleteFile(""String_Node_Str"");
    deleteFile(""String_Node_Str"");
    if (""String_Node_Str"".equalsIgnoreCase(daoFramework)) {
      deleteFile(""String_Node_Str"");
    }
    if (webFramework != null && !webFramework.isEmpty()) {
      deleteFile(orig.getPath());
      renameFile(dest,orig);
    }
  }
  boolean isWebServicesProject=false;
  for (  Object pluginArtifact : project.getPluginArtifacts()) {
    if (((Artifact)pluginArtifact).getArtifactId().contains(""String_Node_Str"")) {
      isWebServicesProject=true;
      break;
    }
  }
  if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    if (webFramework == null && !isWebServicesProject) {
      getLog().error(""String_Node_Str"" + ""String_Node_Str"");
      throw new MojoExecutionException(""String_Node_Str"");
    }
    if (project.hasParent()) {
      deleteFile(""String_Node_Str"");
      deleteFile(""String_Node_Str"");
      deleteFile(""String_Node_Str"");
      deleteFile(""String_Node_Str"");
    }
 else     if (!isAppFuse()) {
      deleteFile(""String_Node_Str"");
    }
  }
  log(""String_Node_Str"");
  List dependencies=project.getOriginalModel().getDependencies();
  List<Dependency> newDependencies=new ArrayList<Dependency>();
  for (  Object dependency : dependencies) {
    Dependency dep=(Dependency)dependency;
    if (!dep.getGroupId().equals(APPFUSE_GROUP_ID)) {
      newDependencies.add(dep);
    }
  }
  if (!project.getPackaging().equals(""String_Node_Str"") && !project.hasParent()) {
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework,""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    if (!isWebServicesProject && project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addWebDependencies(appfuseVersion,newDependencies,webFramework);
    }
    createFullSourcePom(newDependencies);
  }
 else {
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      createFullSourcePom(newDependencies);
    }
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies.clear();
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework,""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      createFullSourcePom(newDependencies);
    }
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies.clear();
      newDependencies=addWebDependencies(appfuseVersion,newDependencies,webFramework);
      createFullSourcePom(newDependencies);
    }
  }
}","public void execute() throws MojoExecutionException, MojoFailureException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String appfuseVersion=project.getProperties().getProperty(""String_Node_Str"");
  if ((appfuseVersion != null) && !appfuseVersion.endsWith(""String_Node_Str"") && tag.equals(""String_Node_Str"")) {
    tag=""String_Node_Str"" + appfuseVersion.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    if (tag.contains(""String_Node_Str"")) {
      tag=tag.replace(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (tag.contains(""String_Node_Str"")) {
      tag=tag.replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  String daoFramework=project.getProperties().getProperty(""String_Node_Str"");
  if (daoFramework == null) {
    log(""String_Node_Str"");
  }
  String webFramework=project.getProperties().getProperty(""String_Node_Str"");
  boolean modular=(project.getPackaging().equals(""String_Node_Str"") && !project.hasParent());
  if (project.getPackaging().equals(""String_Node_Str"") || (project.getPackaging().equals(""String_Node_Str"") && !project.hasParent())) {
    log(""String_Node_Str"");
    String coreSource=project.getBuild().getSourceDirectory();
    export(""String_Node_Str"",(modular) ? coreSource : destinationDirectory);
    File orig=new File((modular ? coreSource : destinationDirectory) + ""String_Node_Str"");
    File dest=new File((modular ? coreSource : destinationDirectory) + ""String_Node_Str"");
    if (webFramework != null && !webFramework.isEmpty()) {
      renameFile(orig,dest);
    }
    log(""String_Node_Str"" + daoFramework + ""String_Node_Str"");
    export(""String_Node_Str"" + daoFramework + ""String_Node_Str"",(modular) ? coreSource : destinationDirectory);
    log(""String_Node_Str"");
    export(""String_Node_Str"",(modular) ? coreSource : destinationDirectory);
    moveFiles((modular) ? coreSource + ""String_Node_Str"" : destinationDirectory + ""String_Node_Str"",(modular) ? coreSource + ""String_Node_Str"" : destinationDirectory + ""String_Node_Str"",""String_Node_Str"");
    deleteFile(""String_Node_Str"");
    deleteFile(""String_Node_Str"");
    deleteFile(""String_Node_Str"");
    if (""String_Node_Str"".equalsIgnoreCase(daoFramework)) {
      deleteFile(""String_Node_Str"");
    }
    if (webFramework != null && !webFramework.isEmpty()) {
      deleteFile(orig.getPath());
      renameFile(dest,orig);
    }
  }
  boolean isWebServicesProject=false;
  for (  Object pluginArtifact : project.getPluginArtifacts()) {
    if (((Artifact)pluginArtifact).getArtifactId().contains(""String_Node_Str"")) {
      isWebServicesProject=true;
      break;
    }
  }
  if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    if (webFramework == null && !isWebServicesProject) {
      getLog().error(""String_Node_Str"" + ""String_Node_Str"");
      throw new MojoExecutionException(""String_Node_Str"");
    }
    if (project.hasParent()) {
      deleteFile(""String_Node_Str"");
      deleteFile(""String_Node_Str"");
      deleteFile(""String_Node_Str"");
      deleteFile(""String_Node_Str"");
    }
 else     if (!isAppFuse()) {
      deleteFile(""String_Node_Str"");
    }
  }
  log(""String_Node_Str"");
  List dependencies=project.getOriginalModel().getDependencies();
  List<Dependency> newDependencies=new ArrayList<Dependency>();
  for (  Object dependency : dependencies) {
    Dependency dep=(Dependency)dependency;
    if (!dep.getGroupId().equals(APPFUSE_GROUP_ID)) {
      newDependencies.add(dep);
    }
  }
  if (!project.getPackaging().equals(""String_Node_Str"") && !project.hasParent()) {
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework,""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    if (!isWebServicesProject && project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addWebDependencies(appfuseVersion,newDependencies,webFramework);
    }
    createFullSourcePom(newDependencies);
  }
 else {
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      createFullSourcePom(newDependencies);
    }
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies.clear();
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework,""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      createFullSourcePom(newDependencies);
    }
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies.clear();
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      newDependencies=addWebDependencies(appfuseVersion,newDependencies,webFramework);
      createFullSourcePom(newDependencies);
    }
  }
}"
85396,"private List<Dependency> addWebDependencies(String appfuseVersion,List<Dependency> newDependencies,String webFramework){
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Double appfuseVersionAsDouble=new Double(appfuseVersion.substring(0,appfuseVersion.lastIndexOf(""String_Node_Str"")));
  getLog().debug(""String_Node_Str"" + appfuseVersionAsDouble);
  if (isAppFuse() && appfuseVersionAsDouble < 2.1) {
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  if (isAppFuse() && project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,webFramework,""String_Node_Str"" + webFramework,webFramework);
  }
  return newDependencies;
}","private List<Dependency> addWebDependencies(String appfuseVersion,List<Dependency> newDependencies,String webFramework){
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Double appfuseVersionAsDouble=new Double(appfuseVersion.substring(0,appfuseVersion.lastIndexOf(""String_Node_Str"")));
  if (StringUtils.countMatches(""String_Node_Str"",appfuseVersion) == 1) {
    appfuseVersionAsDouble=new Double(appfuseVersion);
  }
 else   if (appfuseVersion.contains(""String_Node_Str"")) {
    appfuseVersionAsDouble=new Double(appfuseVersion.substring(0,appfuseVersion.indexOf(""String_Node_Str"")));
  }
  getLog().debug(""String_Node_Str"" + appfuseVersionAsDouble);
  if (isAppFuse() && appfuseVersionAsDouble < 2.1) {
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  if (isAppFuse() && project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,webFramework,""String_Node_Str"" + webFramework,""String_Node_Str"");
  }
  return newDependencies;
}"
85397,"/** 
 * Gets all records that match a search term. ""*"" will get them all.
 * @param searchTerm the term to search for
 * @return the mathing records
 * @throws SearchException
 */
List<T> search(String searchTerm) throws SearchException ;","/** 
 * Gets all records that match a search term. ""*"" will get them all.
 * @param searchTerm the term to search for
 * @return the matching records
 * @throws SearchException
 */
List<T> search(String searchTerm) throws SearchException ;"
85398,"private WebMarkupContainer createAccountSettingsGroup(User user){
  final WebMarkupContainer accountSettingsGroup=new WebMarkupContainer(""String_Node_Str"");
  accountSettingsGroup.setVisible(getAccountSettingsGroupVisibility());
  accountSettingsGroup.add(new CheckBox(""String_Node_Str""));
  accountSettingsGroup.add(new CheckBox(""String_Node_Str""));
  accountSettingsGroup.add(new CheckBox(""String_Node_Str""));
  accountSettingsGroup.add(new CheckBox(""String_Node_Str""));
  accountSettingsGroup.add(createRolesCheckGroup(user));
  return accountSettingsGroup;
}","private WebMarkupContainer createAccountSettingsGroup(IModel<Set<Role>> rolesModel){
  final WebMarkupContainer accountSettingsGroup=new WebMarkupContainer(""String_Node_Str"");
  accountSettingsGroup.setVisible(getAccountSettingsGroupVisibility());
  accountSettingsGroup.add(new CheckBox(""String_Node_Str""));
  accountSettingsGroup.add(new CheckBox(""String_Node_Str""));
  accountSettingsGroup.add(new CheckBox(""String_Node_Str""));
  accountSettingsGroup.add(new CheckBox(""String_Node_Str""));
  accountSettingsGroup.add(createRolesCheckGroup(rolesModel));
  return accountSettingsGroup;
}"
85399,"private WebMarkupContainer createDisplayRolesGroup(User user){
  WebMarkupContainer displayRolesGroup=new WebMarkupContainer(""String_Node_Str"");
  displayRolesGroup.setVisible(getDisplayRolesGroupVisibility());
  displayRolesGroup.add(createRolesRepeater(user));
  return displayRolesGroup;
}","private WebMarkupContainer createDisplayRolesGroup(IModel<Set<Role>> rolesModel){
  WebMarkupContainer displayRolesGroup=new WebMarkupContainer(""String_Node_Str"");
  displayRolesGroup.setVisible(getDisplayRolesGroupVisibility());
  displayRolesGroup.add(createRolesRepeater(rolesModel));
  return displayRolesGroup;
}"
85400,"private CheckGroup<Role> createRolesCheckGroup(User user){
  CheckGroup<Role> rolesCheckGroup=new CheckGroup<Role>(""String_Node_Str"",user.getRoles());
  ListView<Role> roles=new ListView<Role>(""String_Node_Str"",allAvailableRoles){
    @Override protected void populateItem(    ListItem<Role> roleListItem){
      roleListItem.add(new Check<Role>(""String_Node_Str"",roleListItem.getModel()));
      roleListItem.add(new Label(""String_Node_Str"",roleListItem.getModel()));
    }
  }
.setReuseItems(true);
  rolesCheckGroup.add(roles);
  return rolesCheckGroup;
}","private CheckGroup<Role> createRolesCheckGroup(IModel<Set<Role>> rolesModel){
  CheckGroup<Role> rolesCheckGroup=new CheckGroup<Role>(""String_Node_Str"",rolesModel);
  ListView<Role> roles=new ListView<Role>(""String_Node_Str"",allAvailableRoles){
    @Override protected void populateItem(    ListItem<Role> roleListItem){
      roleListItem.add(new Check<Role>(""String_Node_Str"",roleListItem.getModel()));
      roleListItem.add(new Label(""String_Node_Str"",roleListItem.getModel()));
    }
  }
.setReuseItems(true);
  rolesCheckGroup.add(roles);
  return rolesCheckGroup;
}"
85401,"private RepeatingView createRolesRepeater(User user){
  RepeatingView rolesRepeater=new RepeatingView(""String_Node_Str"");
  for (  Role role : user.getRoles()) {
    WebMarkupContainer roleItem=new WebMarkupContainer(rolesRepeater.newChildId());
    rolesRepeater.add(roleItem);
    roleItem.add(new Label(""String_Node_Str"",role.toString()));
  }
  return rolesRepeater;
}","private RepeatingView createRolesRepeater(IModel<Set<Role>> rolesModel){
  RepeatingView rolesRepeater=new RepeatingView(""String_Node_Str"");
  Set<Role> roles=rolesModel.getObject();
  for (  Role role : roles) {
    WebMarkupContainer roleItem=new WebMarkupContainer(rolesRepeater.newChildId());
    rolesRepeater.add(roleItem);
    roleItem.add(new Label(""String_Node_Str"",role.toString()));
  }
  return rolesRepeater;
}"
85402,"public void execute() throws MojoExecutionException, MojoFailureException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String appfuseVersion=project.getProperties().getProperty(""String_Node_Str"");
  if ((appfuseVersion != null) && !appfuseVersion.endsWith(""String_Node_Str"") && tag.equals(""String_Node_Str"")) {
    tag=""String_Node_Str"" + appfuseVersion.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    if (tag.contains(""String_Node_Str"")) {
      tag=tag.replace(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (tag.contains(""String_Node_Str"")) {
      tag=tag.replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  String daoFramework=project.getProperties().getProperty(""String_Node_Str"");
  if (daoFramework == null) {
    log(""String_Node_Str"");
  }
  String webFramework=project.getProperties().getProperty(""String_Node_Str"");
  boolean modular=(project.getPackaging().equals(""String_Node_Str"") && !project.hasParent());
  if (project.getPackaging().equals(""String_Node_Str"") || (project.getPackaging().equals(""String_Node_Str"") && !project.hasParent())) {
    log(""String_Node_Str"");
    export(""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    log(""String_Node_Str"" + daoFramework + ""String_Node_Str"");
    export(""String_Node_Str"" + daoFramework + ""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    log(""String_Node_Str"");
    export(""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    moveFiles((modular) ? ""String_Node_Str"" : destinationDirectory + ""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory + ""String_Node_Str"",""String_Node_Str"");
    deleteFile(""String_Node_Str"");
    deleteFile(""String_Node_Str"");
    deleteFile(""String_Node_Str"");
    if (""String_Node_Str"".equalsIgnoreCase(daoFramework)) {
      deleteFile(""String_Node_Str"");
    }
  }
  if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    if (webFramework == null) {
      getLog().error(""String_Node_Str"" + ""String_Node_Str"");
      throw new MojoExecutionException(""String_Node_Str"");
    }
    if (project.hasParent()) {
      deleteFile(""String_Node_Str"");
      deleteFile(""String_Node_Str"");
      deleteFile(""String_Node_Str"");
      deleteFile(""String_Node_Str"");
    }
 else     if (!isAppFuse()) {
      deleteFile(""String_Node_Str"");
    }
  }
  log(""String_Node_Str"");
  List dependencies=project.getOriginalModel().getDependencies();
  List<Dependency> newDependencies=new ArrayList<Dependency>();
  for (  Object dependency : dependencies) {
    Dependency dep=(Dependency)dependency;
    if (!dep.getGroupId().equals(APPFUSE_GROUP_ID)) {
      newDependencies.add(dep);
    }
  }
  if (!project.getPackaging().equals(""String_Node_Str"") && !project.hasParent()) {
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework);
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addWebDependencies(appfuseVersion,newDependencies);
    }
    createFullSourcePom(newDependencies);
  }
 else {
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      createFullSourcePom(newDependencies);
    }
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies.clear();
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework);
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      createFullSourcePom(newDependencies);
    }
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addWebDependencies(appfuseVersion,newDependencies);
      newDependencies.clear();
      createFullSourcePom(newDependencies);
    }
  }
}","public void execute() throws MojoExecutionException, MojoFailureException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String appfuseVersion=project.getProperties().getProperty(""String_Node_Str"");
  if ((appfuseVersion != null) && !appfuseVersion.endsWith(""String_Node_Str"") && tag.equals(""String_Node_Str"")) {
    tag=""String_Node_Str"" + appfuseVersion.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    if (tag.contains(""String_Node_Str"")) {
      tag=tag.replace(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (tag.contains(""String_Node_Str"")) {
      tag=tag.replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  String daoFramework=project.getProperties().getProperty(""String_Node_Str"");
  if (daoFramework == null) {
    log(""String_Node_Str"");
  }
  String webFramework=project.getProperties().getProperty(""String_Node_Str"");
  boolean modular=(project.getPackaging().equals(""String_Node_Str"") && !project.hasParent());
  if (project.getPackaging().equals(""String_Node_Str"") || (project.getPackaging().equals(""String_Node_Str"") && !project.hasParent())) {
    log(""String_Node_Str"");
    export(""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    log(""String_Node_Str"" + daoFramework + ""String_Node_Str"");
    export(""String_Node_Str"" + daoFramework + ""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    log(""String_Node_Str"");
    export(""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    moveFiles((modular) ? ""String_Node_Str"" : destinationDirectory + ""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory + ""String_Node_Str"",""String_Node_Str"");
    deleteFile(""String_Node_Str"");
    deleteFile(""String_Node_Str"");
    deleteFile(""String_Node_Str"");
    if (""String_Node_Str"".equalsIgnoreCase(daoFramework)) {
      deleteFile(""String_Node_Str"");
    }
  }
  boolean isWebServicesProject=false;
  for (  Object pluginArtifact : project.getPluginArtifacts()) {
    if (((Artifact)pluginArtifact).getArtifactId().contains(""String_Node_Str"")) {
      isWebServicesProject=true;
      break;
    }
  }
  if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    if (webFramework == null && !isWebServicesProject) {
      getLog().error(""String_Node_Str"" + ""String_Node_Str"");
      throw new MojoExecutionException(""String_Node_Str"");
    }
    if (project.hasParent()) {
      deleteFile(""String_Node_Str"");
      deleteFile(""String_Node_Str"");
      deleteFile(""String_Node_Str"");
      deleteFile(""String_Node_Str"");
    }
 else     if (!isAppFuse()) {
      deleteFile(""String_Node_Str"");
    }
  }
  log(""String_Node_Str"");
  List dependencies=project.getOriginalModel().getDependencies();
  List<Dependency> newDependencies=new ArrayList<Dependency>();
  for (  Object dependency : dependencies) {
    Dependency dep=(Dependency)dependency;
    if (!dep.getGroupId().equals(APPFUSE_GROUP_ID)) {
      newDependencies.add(dep);
    }
  }
  if (!project.getPackaging().equals(""String_Node_Str"") && !project.hasParent()) {
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework);
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
    if (!isWebServicesProject && project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addWebDependencies(appfuseVersion,newDependencies);
    }
    createFullSourcePom(newDependencies);
  }
 else {
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      createFullSourcePom(newDependencies);
    }
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies.clear();
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework);
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      createFullSourcePom(newDependencies);
    }
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addWebDependencies(appfuseVersion,newDependencies);
      newDependencies.clear();
      createFullSourcePom(newDependencies);
    }
  }
}"
85403,"private void createFullSourcePom(List<Dependency> newDependencies) throws MojoFailureException {
  Set<String> projectProperties=new TreeSet<String>();
  for (  Dependency dep : newDependencies) {
    if (dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().contains(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"")|| dep.getArtifactId().equals(""String_Node_Str"")) {
      dep.setOptional(true);
      dep.setScope(null);
    }
    String version=dep.getVersion();
    if (version.startsWith(""String_Node_Str"")) {
      version=version.substring(2);
    }
    if (version.endsWith(""String_Node_Str"")) {
      version=version.substring(0,version.length() - 1);
    }
    projectProperties.add(version);
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Dependency core=new Dependency();
    core.setGroupId(""String_Node_Str"");
    core.setArtifactId(""String_Node_Str"");
    core.setVersion(""String_Node_Str"");
    newDependencies.add(core);
    if (project.getProperties().getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      Dependency jsp21=new Dependency();
      jsp21.setGroupId(""String_Node_Str"");
      jsp21.setArtifactId(""String_Node_Str"");
      jsp21.setVersion(""String_Node_Str"");
      jsp21.setScope(""String_Node_Str"");
      newDependencies.add(jsp21);
      project.getOriginalModel().getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
    }
  }
  Collections.sort(newDependencies,new BeanComparator(""String_Node_Str""));
  project.getOriginalModel().setDependencies(newDependencies);
  Properties currentProperties=project.getOriginalModel().getProperties();
  Set<String> currentKeys=new LinkedHashSet<String>();
  for (  Object key : currentProperties.keySet()) {
    currentKeys.add((String)key);
  }
  StringBuffer sortedProperties=new StringBuffer();
  Properties appfuseProperties=getAppFuseProperties();
  Map<String,String> propertiesForPom=new LinkedHashMap<String,String>();
  for (  String key : projectProperties) {
    if (!currentKeys.contains(key)) {
      String value=appfuseProperties.getProperty(key);
      if (value == null) {
        continue;
      }
      if (""String_Node_Str"".equals(project.getProperties().getProperty(""String_Node_Str"")) && key.equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
      if (value.contains(""String_Node_Str"")) {
        value=""String_Node_Str"" + value + ""String_Node_Str"";
      }
      sortedProperties.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(key).append(""String_Node_Str"" + ""String_Node_Str"");
      propertiesForPom.put(key,value);
    }
  }
  if (project.getPackaging().equals(""String_Node_Str"") || project.hasParent()) {
    Map<String,String> properties=new LinkedHashMap<String,String>();
    if (propertiesContextHolder.get() != null) {
      properties=(LinkedHashMap)propertiesContextHolder.get();
    }
    for (    String key : propertiesForPom.keySet()) {
      if (!properties.containsKey(key)) {
        properties.put(key,propertiesForPom.get(key));
      }
    }
    propertiesContextHolder.set(properties);
  }
  StringWriter writer=new StringWriter();
  try {
    project.writeOriginalModel(writer);
    File pom=new File(""String_Node_Str"");
    if (pom.exists()) {
      pom.delete();
    }
    FileWriter fw=new FileWriter(pom);
    fw.write(writer.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  String pomXml=writer.toString();
  int startTag=pomXml.indexOf(""String_Node_Str"");
  String dependencyXml=pomXml.substring(startTag,pomXml.indexOf(""String_Node_Str"",startTag));
  dependencyXml=dependencyXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  dependencyXml=""String_Node_Str"" + dependencyXml;
  try {
    String packaging=project.getPackaging();
    String pathToPom=""String_Node_Str"";
    if (project.hasParent()) {
      if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
 else       if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
    }
    String originalPom=FileUtils.readFileToString(new File(pathToPom));
    originalPom=originalPom.replace(""String_Node_Str"",""String_Node_Str"");
    startTag=originalPom.indexOf(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(originalPom.substring(0,startTag));
    sb.append(dependencyXml);
    sb.append(originalPom.substring(originalPom.indexOf(""String_Node_Str"",startTag)));
    String adjustedPom=sb.toString();
    if (!project.getPackaging().equals(""String_Node_Str"") && !project.hasParent()) {
      adjustedPom=addPropertiesToPom(adjustedPom,sortedProperties);
    }
    adjustedPom=adjustLineEndingsForOS(adjustedPom);
    FileUtils.writeStringToFile(new File(pathToPom),adjustedPom);
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  boolean renamePackages=true;
  if (System.getProperty(""String_Node_Str"") != null) {
    renamePackages=Boolean.valueOf(System.getProperty(""String_Node_Str""));
  }
  if (renamePackages && !project.getPackaging().equals(""String_Node_Str"")) {
    log(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str"");
    RenamePackages renamePackagesTool=new RenamePackages(project.getGroupId());
    if (project.hasParent()) {
      if (project.getPackaging().equals(""String_Node_Str"")) {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
 else {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
    }
    renamePackagesTool.execute();
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Map properties=propertiesContextHolder.get();
    Set<String> propertiesToAdd=new TreeSet<String>(properties.keySet());
    StringBuffer calculatedProperties=new StringBuffer();
    for (    String key : propertiesToAdd) {
      Set<Object> keysInProject=project.getParent().getOriginalModel().getProperties().keySet();
      if (!keysInProject.contains(key)) {
        String value=getAppFuseProperties().getProperty(key);
        if (value.contains(""String_Node_Str"")) {
          value=""String_Node_Str"" + value + ""String_Node_Str"";
        }
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(key);
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(value);
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(key);
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(""String_Node_Str"");
      }
    }
    try {
      String originalPom=FileUtils.readFileToString(new File(""String_Node_Str""));
      originalPom=originalPom.replace(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"");
      originalPom=originalPom.replace(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      String pomWithProperties=addPropertiesToPom(originalPom,calculatedProperties);
      FileUtils.writeStringToFile(new File(""String_Node_Str""),pomWithProperties);
    }
 catch (    IOException ex) {
      getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
      throw new MojoFailureException(ex.getMessage());
    }
  }
  File pom=new File(""String_Node_Str"");
  if (pom.exists()) {
    pom.delete();
  }
}","private void createFullSourcePom(List<Dependency> newDependencies) throws MojoFailureException {
  Set<String> projectProperties=new TreeSet<String>();
  for (  Dependency dep : newDependencies) {
    if (dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().contains(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"")|| dep.getArtifactId().equals(""String_Node_Str"")) {
      dep.setOptional(true);
      dep.setScope(null);
    }
    String version=dep.getVersion();
    if (version.startsWith(""String_Node_Str"")) {
      version=version.substring(2);
    }
    if (version.endsWith(""String_Node_Str"")) {
      version=version.substring(0,version.length() - 1);
    }
    projectProperties.add(version);
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Dependency core=new Dependency();
    core.setGroupId(""String_Node_Str"");
    core.setArtifactId(""String_Node_Str"");
    core.setVersion(""String_Node_Str"");
    newDependencies.add(core);
    if (project.getProperties().getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      Dependency jsp21=new Dependency();
      jsp21.setGroupId(""String_Node_Str"");
      jsp21.setArtifactId(""String_Node_Str"");
      jsp21.setVersion(""String_Node_Str"");
      jsp21.setScope(""String_Node_Str"");
      newDependencies.add(jsp21);
      project.getOriginalModel().getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
    }
  }
  Collections.sort(newDependencies,new BeanComparator(""String_Node_Str""));
  project.getOriginalModel().setDependencies(newDependencies);
  Properties currentProperties=project.getOriginalModel().getProperties();
  Set<String> currentKeys=new LinkedHashSet<String>();
  for (  Object key : currentProperties.keySet()) {
    currentKeys.add((String)key);
  }
  StringBuffer sortedProperties=new StringBuffer();
  Properties appfuseProperties=getAppFuseProperties();
  Map<String,String> propertiesForPom=new LinkedHashMap<String,String>();
  for (  String key : projectProperties) {
    if (!currentKeys.contains(key)) {
      String value=appfuseProperties.getProperty(key);
      if (value == null) {
        continue;
      }
      if (""String_Node_Str"".equals(project.getProperties().getProperty(""String_Node_Str"")) && key.equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
      if (value.contains(""String_Node_Str"")) {
        value=""String_Node_Str"" + value + ""String_Node_Str"";
      }
      sortedProperties.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(key).append(""String_Node_Str"" + ""String_Node_Str"");
      propertiesForPom.put(key,value);
    }
  }
  if (project.getPackaging().equals(""String_Node_Str"") || project.hasParent()) {
    Map<String,String> properties=new LinkedHashMap<String,String>();
    if (propertiesContextHolder.get() != null) {
      properties=(LinkedHashMap)propertiesContextHolder.get();
    }
    for (    String key : propertiesForPom.keySet()) {
      if (!properties.containsKey(key)) {
        properties.put(key,propertiesForPom.get(key));
      }
    }
    propertiesContextHolder.set(properties);
  }
  StringWriter writer=new StringWriter();
  try {
    project.writeOriginalModel(writer);
    File pom=new File(""String_Node_Str"");
    if (pom.exists()) {
      pom.delete();
    }
    FileWriter fw=new FileWriter(pom);
    fw.write(writer.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  String pomXml=writer.toString();
  int startTag=pomXml.indexOf(""String_Node_Str"");
  String dependencyXml=pomXml.substring(startTag,pomXml.indexOf(""String_Node_Str"",startTag));
  dependencyXml=dependencyXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  dependencyXml=""String_Node_Str"" + dependencyXml;
  try {
    String packaging=project.getPackaging();
    String pathToPom=""String_Node_Str"";
    if (project.hasParent()) {
      if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
 else       if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
    }
    String originalPom=FileUtils.readFileToString(new File(pathToPom),""String_Node_Str"");
    originalPom=originalPom.replace(""String_Node_Str"",""String_Node_Str"");
    startTag=originalPom.indexOf(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(originalPom.substring(0,startTag));
    sb.append(dependencyXml);
    sb.append(originalPom.substring(originalPom.indexOf(""String_Node_Str"",startTag)));
    String adjustedPom=sb.toString();
    if (!project.getPackaging().equals(""String_Node_Str"") && !project.hasParent()) {
      adjustedPom=addPropertiesToPom(adjustedPom,sortedProperties);
    }
    adjustedPom=adjustLineEndingsForOS(adjustedPom);
    FileUtils.writeStringToFile(new File(pathToPom),adjustedPom,""String_Node_Str"");
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  boolean renamePackages=true;
  if (System.getProperty(""String_Node_Str"") != null) {
    renamePackages=Boolean.valueOf(System.getProperty(""String_Node_Str""));
  }
  if (renamePackages && !project.getPackaging().equals(""String_Node_Str"")) {
    log(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str"");
    RenamePackages renamePackagesTool=new RenamePackages(project.getGroupId());
    if (project.hasParent()) {
      if (project.getPackaging().equals(""String_Node_Str"")) {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
 else {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
    }
    renamePackagesTool.execute();
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Map properties=propertiesContextHolder.get();
    Set<String> propertiesToAdd=new TreeSet<String>(properties.keySet());
    StringBuffer calculatedProperties=new StringBuffer();
    for (    String key : propertiesToAdd) {
      Set<Object> keysInProject=project.getParent().getOriginalModel().getProperties().keySet();
      if (!keysInProject.contains(key)) {
        String value=getAppFuseProperties().getProperty(key);
        if (value.contains(""String_Node_Str"")) {
          value=""String_Node_Str"" + value + ""String_Node_Str"";
        }
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(key);
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(value);
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(key);
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(""String_Node_Str"");
      }
    }
    try {
      String originalPom=FileUtils.readFileToString(new File(""String_Node_Str""),""String_Node_Str"");
      originalPom=originalPom.replaceAll(""String_Node_Str"",""String_Node_Str"");
      originalPom=originalPom.replaceAll(""String_Node_Str"",""String_Node_Str"");
      originalPom=originalPom.replaceAll(""String_Node_Str"",""String_Node_Str"");
      originalPom=originalPom.replace(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      String pomWithProperties=addPropertiesToPom(originalPom,calculatedProperties);
      FileUtils.writeStringToFile(new File(""String_Node_Str""),pomWithProperties,""String_Node_Str"");
    }
 catch (    IOException ex) {
      getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
      throw new MojoFailureException(ex.getMessage());
    }
  }
  File pom=new File(""String_Node_Str"");
  if (pom.exists()) {
    pom.delete();
  }
}"
85404,"private static String addPropertiesToPom(String existingPomXmlAsString,StringBuffer sortedProperties){
  String adjustedPom=existingPomXmlAsString;
  if (adjustedPom.contains(""String_Node_Str"")) {
    adjustedPom=adjustedPom.replace(""String_Node_Str"",""String_Node_Str"");
  }
  adjustedPom=adjustedPom.replace(""String_Node_Str"",LINE_SEP + ""String_Node_Str"" + sortedProperties+ ""String_Node_Str"");
  adjustedPom=adjustedPom.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return adjustLineEndingsForOS(adjustedPom);
}","private static String addPropertiesToPom(String existingPomXmlAsString,StringBuffer sortedProperties){
  String adjustedPom=existingPomXmlAsString;
  adjustedPom=adjustedPom.replace(""String_Node_Str"",LINE_SEP + ""String_Node_Str"" + sortedProperties+ ""String_Node_Str"");
  adjustedPom=adjustedPom.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return adjustLineEndingsForOS(adjustedPom);
}"
85405,"public int compareTo(Object o){
  return (equals(o) ? 0 : -1);
}","/** 
 * {@inheritDoc}
 */
public int compareTo(Object o){
  return (equals(o) ? 0 : -1);
}"
85406,"/** 
 * @see org.springframework.security.GrantedAuthority#getAuthority()
 * @return the name property (getAuthority required by Acegi's GrantedAuthority interface)
 */
@Transient public String getAuthority(){
  return getName();
}","/** 
 * @return the name property (getAuthority required by Acegi's GrantedAuthority interface)
 * @see org.springframework.security.GrantedAuthority#getAuthority()
 */
@Transient public String getAuthority(){
  return getName();
}"
85407,"/** 
 * @see org.springframework.security.userdetails.UserDetails#getAuthorities()
 * @return GrantedAuthority[] an array of roles.
 */
@Transient public GrantedAuthority[] getAuthorities(){
  return roles.toArray(new GrantedAuthority[0]);
}","/** 
 * @return GrantedAuthority[] an array of roles.
 * @see org.springframework.security.userdetails.UserDetails#getAuthorities()
 */
@Transient public GrantedAuthority[] getAuthorities(){
  return roles.toArray(new GrantedAuthority[0]);
}"
85408,"private MavenProject createProjectFromPom(File pom){
  MavenEmbedder maven=new MavenEmbedder();
  maven.setOffline(true);
  maven.setClassLoader(Thread.currentThread().getContextClassLoader());
  maven.setLogger(new MavenEmbedderConsoleLogger());
  MavenProject p=null;
  try {
    maven.start();
    p=maven.readProjectWithDependencies(pom);
    maven.stop();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return p;
}","private MavenProject createProjectFromPom(File pom){
  MavenEmbedder maven=new MavenEmbedder();
  maven.setOffline(true);
  maven.setClassLoader(Thread.currentThread().getContextClassLoader());
  maven.setLogger(new MavenEmbedderConsoleLogger());
  MavenProject p=null;
  try {
    maven.setAlignWithUserInstallation(true);
    maven.start();
    p=maven.readProjectWithDependencies(pom);
    maven.stop();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return p;
}"
85409,"public String add(){
  user=new User();
  user.addRole(new Role(Constants.USER_ROLE));
  return ""String_Node_Str"";
}","public String add(){
  user=new User();
  user.setEnabled(true);
  user.addRole(new Role(Constants.USER_ROLE));
  return ""String_Node_Str"";
}"
85410,"public String save() throws IOException {
  setUserRoles(getRequest().getParameterValues(""String_Node_Str""));
  for (int i=0; (userRoles != null) && (i < userRoles.length); i++) {
    String roleName=userRoles[i];
    user.addRole(roleManager.getRole(roleName));
  }
  Integer originalVersion=user.getVersion();
  try {
    user=userManager.saveUser(user);
  }
 catch (  AccessDeniedException ade) {
    log.warn(ade.getMessage());
    getResponse().sendError(HttpServletResponse.SC_FORBIDDEN);
    return null;
  }
catch (  UserExistsException e) {
    addError(""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()});
    user.setVersion(originalVersion);
    return ""String_Node_Str"";
  }
  if (!""String_Node_Str"".equals(getParameter(""String_Node_Str""))) {
    addMessage(""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    if (""String_Node_Str"".equals(getParameter(""String_Node_Str""))) {
      addMessage(""String_Node_Str"",user.getFullName());
      try {
        sendUserMessage(user,getText(""String_Node_Str"",user.getFullName()),RequestUtil.getAppURL(getRequest()));
      }
 catch (      MailException me) {
        addError(me.getCause().getLocalizedMessage());
      }
      return ""String_Node_Str"";
    }
 else {
      addMessage(""String_Node_Str"",user.getFullName());
      return ""String_Node_Str"";
    }
  }
}","public String save() throws IOException {
  setUserRoles(getRequest().getParameterValues(""String_Node_Str""));
  for (int i=0; (userRoles != null) && (i < userRoles.length); i++) {
    String roleName=userRoles[i];
    user.addRole(roleManager.getRole(roleName));
  }
  Integer originalVersion=user.getVersion();
  if (user.getVersion() == 0) {
    user.setVersion(null);
  }
  try {
    user=userManager.saveUser(user);
  }
 catch (  AccessDeniedException ade) {
    log.warn(ade.getMessage());
    getResponse().sendError(HttpServletResponse.SC_FORBIDDEN);
    return null;
  }
catch (  UserExistsException e) {
    addError(""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()});
    user.setVersion(originalVersion);
    return ""String_Node_Str"";
  }
  if (!""String_Node_Str"".equals(getParameter(""String_Node_Str""))) {
    addMessage(""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    if (""String_Node_Str"".equals(getParameter(""String_Node_Str""))) {
      addMessage(""String_Node_Str"",user.getFullName());
      try {
        sendUserMessage(user,getText(""String_Node_Str"",user.getFullName()),RequestUtil.getAppURL(getRequest()));
      }
 catch (      MailException me) {
        addError(me.getCause().getLocalizedMessage());
      }
      return ""String_Node_Str"";
    }
 else {
      addMessage(""String_Node_Str"",user.getFullName());
      return ""String_Node_Str"";
    }
  }
}"
85411,"@Override public void execute() throws MojoExecutionException, MojoFailureException {
  getComponentProperties().put(""String_Node_Str"",""String_Node_Str"");
  getComponentProperties().put(""String_Node_Str"",(sourceDirectory != null) ? sourceDirectory : ""String_Node_Str"");
  File revengFile=new File(""String_Node_Str"");
  if (revengFile.exists() && getComponentProperty(""String_Node_Str"") == null) {
    getComponentProperties().put(""String_Node_Str"",""String_Node_Str"");
  }
  if (getComponentProperty(""String_Node_Str"") == null) {
    getComponentProperties().put(""String_Node_Str"",""String_Node_Str"");
  }
  File existingConfig=new File(getComponentProperty(""String_Node_Str""));
  if (!existingConfig.exists()) {
    InputStream in=this.getClass().getResourceAsStream(""String_Node_Str"");
    StringBuffer configFile=new StringBuffer();
    try {
      InputStreamReader isr=new InputStreamReader(in);
      BufferedReader reader=new BufferedReader(isr);
      String line;
      while ((line=reader.readLine()) != null) {
        configFile.append(line).append(""String_Node_Str"");
      }
      reader.close();
      getLog().info(""String_Node_Str"" + existingConfig.getPath());
      FileUtils.writeStringToFile(existingConfig,configFile.toString());
    }
 catch (    IOException io) {
      throw new MojoFailureException(io.getMessage());
    }
  }
  if (getComponentProperty(""String_Node_Str"") == null) {
    getComponentProperties().put(""String_Node_Str"",getProject().getGroupId() + ""String_Node_Str"");
  }
  if (getComponentProperty(""String_Node_Str"") == null) {
    File jdbcProperties=new File(""String_Node_Str"");
    if (!jdbcProperties.exists()) {
      jdbcProperties=new File(""String_Node_Str"");
    }
    if (jdbcProperties.exists()) {
      if (getComponentProperty(""String_Node_Str"") == null) {
        getComponentProperties().put(""String_Node_Str"",jdbcProperties.getPath());
        getLog().debug(""String_Node_Str"" + jdbcProperties.getPath() + ""String_Node_Str"");
      }
    }
 else {
      throw new MojoFailureException(""String_Node_Str"");
    }
  }
  super.doExecute();
  if (System.getProperty(""String_Node_Str"") != null) {
    disableInstallation=Boolean.valueOf(System.getProperty(""String_Node_Str""));
  }
  if (!disableInstallation) {
    try {
      String packageName=getComponentProperties().get(""String_Node_Str"").toString();
      String packageAsDir=packageName.replaceAll(""String_Node_Str"",""String_Node_Str"");
      File dir=new File(sourceDirectory + ""String_Node_Str"" + packageAsDir);
      if (dir.exists()) {
        Iterator filesIterator=FileUtils.iterateFiles(dir,new String[]{""String_Node_Str""},false);
        while (filesIterator.hasNext()) {
          File f=(File)filesIterator.next();
          getLog().info(""String_Node_Str"" + f.getName() + ""String_Node_Str"");
          FileUtils.copyFileToDirectory(f,new File(destinationDirectory + ""String_Node_Str"" + dir));
        }
      }
 else {
        throw new MojoFailureException(""String_Node_Str"");
      }
    }
 catch (    IOException io) {
      throw new MojoFailureException(io.getMessage());
    }
  }
}","@Override public void execute() throws MojoExecutionException, MojoFailureException {
  getComponentProperties().put(""String_Node_Str"",""String_Node_Str"");
  getComponentProperties().put(""String_Node_Str"",(sourceDirectory != null) ? sourceDirectory : ""String_Node_Str"");
  File revengFile=new File(""String_Node_Str"");
  if (revengFile.exists() && getComponentProperty(""String_Node_Str"") == null) {
    getComponentProperties().put(""String_Node_Str"",""String_Node_Str"");
  }
  if (getComponentProperty(""String_Node_Str"") == null) {
    getComponentProperties().put(""String_Node_Str"",""String_Node_Str"");
  }
  File existingConfig=new File(getComponentProperty(""String_Node_Str""));
  if (!existingConfig.exists()) {
    InputStream in=this.getClass().getResourceAsStream(""String_Node_Str"");
    StringBuffer configFile=new StringBuffer();
    try {
      InputStreamReader isr=new InputStreamReader(in);
      BufferedReader reader=new BufferedReader(isr);
      String line;
      while ((line=reader.readLine()) != null) {
        configFile.append(line).append(""String_Node_Str"");
      }
      reader.close();
      getLog().info(""String_Node_Str"" + existingConfig.getPath());
      FileUtils.writeStringToFile(existingConfig,configFile.toString());
    }
 catch (    IOException io) {
      throw new MojoFailureException(io.getMessage());
    }
  }
  if (getComponentProperty(""String_Node_Str"") == null) {
    getComponentProperties().put(""String_Node_Str"",getProject().getGroupId() + ""String_Node_Str"");
  }
  if (getComponentProperty(""String_Node_Str"") == null) {
    File jdbcProperties=new File(""String_Node_Str"");
    if (!jdbcProperties.exists()) {
      jdbcProperties=new File(""String_Node_Str"");
    }
    if (jdbcProperties.exists()) {
      if (getComponentProperty(""String_Node_Str"") == null) {
        getComponentProperties().put(""String_Node_Str"",jdbcProperties.getPath());
        getLog().debug(""String_Node_Str"" + jdbcProperties.getPath() + ""String_Node_Str"");
      }
    }
 else {
      throw new MojoFailureException(""String_Node_Str"");
    }
  }
  super.doExecute();
  if (System.getProperty(""String_Node_Str"") != null) {
    disableInstallation=Boolean.valueOf(System.getProperty(""String_Node_Str""));
  }
  if (!disableInstallation) {
    try {
      String packageName=getComponentProperties().get(""String_Node_Str"").toString();
      String packageAsDir=packageName.replaceAll(""String_Node_Str"",""String_Node_Str"");
      File dir=new File(sourceDirectory + ""String_Node_Str"" + packageAsDir);
      if (dir.exists()) {
        Iterator filesIterator=FileUtils.iterateFiles(dir,new String[]{""String_Node_Str""},false);
        while (filesIterator.hasNext()) {
          File f=(File)filesIterator.next();
          getLog().info(""String_Node_Str"" + f.getName() + ""String_Node_Str"");
          FileUtils.copyFileToDirectory(f,new File(destinationDirectory + ""String_Node_Str"" + packageAsDir));
        }
      }
 else {
        throw new MojoFailureException(""String_Node_Str"");
      }
    }
 catch (    IOException io) {
      throw new MojoFailureException(io.getMessage());
    }
  }
}"
85412,"public String fromFile(String fileName) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(fileName));
  StringBuffer fileContents=new StringBuffer();
  String str;
  while ((str=in.readLine()) != null) {
    fileContents.append(str);
    fileContents.append(""String_Node_Str"");
  }
  in.close();
  return fileContents.toString();
}","public String fromFile(String fileName) throws IOException {
  return FileUtils.readFileToString(new File(fileName),""String_Node_Str"");
}"
85413,"private void refactorNonPackageFiles(){
  try {
    String[] extensions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    Iterator filesInMain=org.apache.commons.io.FileUtils.iterateFiles(new File(this.workBaseDir),extensions,true);
    while (filesInMain.hasNext()) {
      File f=(File)filesInMain.next();
      changePackageNamesInFile(f.getAbsolutePath(),RenamePackages.SAVE_FILE);
    }
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"" + ioex.getMessage());
  }
}","private void refactorNonPackageFiles(){
  try {
    String[] extensions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    Iterator filesInMain=FileUtils.iterateFiles(new File(this.workBaseDir),extensions,true);
    while (filesInMain.hasNext()) {
      File f=(File)filesInMain.next();
      changePackageNamesInFile(f.getAbsolutePath(),RenamePackages.SAVE_FILE);
    }
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"" + ioex.getMessage());
  }
}"
85414,"public void toFile(String fileName,String contents) throws IOException {
  if (debug) {
    log.debug(""String_Node_Str"" + fileName + ""String_Node_Str"");
  }
  BufferedOutputStream bout=new BufferedOutputStream(new DataOutputStream(new FileOutputStream(fileName)));
  bout.write(contents.getBytes());
  bout.flush();
  bout.close();
}","public void toFile(String fileName,String contents) throws IOException {
  if (debug) {
    log.debug(""String_Node_Str"" + fileName + ""String_Node_Str"");
  }
  FileUtils.writeStringToFile(new File(fileName),contents,""String_Node_Str"");
}"
85415,"private void createFullSourcePom(List<Dependency> newDependencies) throws MojoFailureException {
  Set<String> projectProperties=new TreeSet<String>();
  for (  Dependency dep : newDependencies) {
    if (dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"")|| dep.getArtifactId().equals(""String_Node_Str"")) {
      dep.setOptional(true);
      dep.setScope(null);
    }
    String version=dep.getVersion();
    if (version.startsWith(""String_Node_Str"")) {
      version=version.substring(2);
    }
    if (version.endsWith(""String_Node_Str"")) {
      version=version.substring(0,version.length() - 1);
    }
    projectProperties.add(version);
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Dependency core=new Dependency();
    core.setGroupId(""String_Node_Str"");
    core.setArtifactId(""String_Node_Str"");
    core.setVersion(""String_Node_Str"");
    newDependencies.add(core);
    if (project.getProperties().getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      Dependency jsp21=new Dependency();
      jsp21.setGroupId(""String_Node_Str"");
      jsp21.setArtifactId(""String_Node_Str"");
      jsp21.setVersion(""String_Node_Str"");
      jsp21.setScope(""String_Node_Str"");
      newDependencies.add(jsp21);
      project.getOriginalModel().getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
    }
  }
  Collections.sort(newDependencies,new BeanComparator(""String_Node_Str""));
  project.getOriginalModel().setDependencies(newDependencies);
  Properties currentProperties=project.getOriginalModel().getProperties();
  Set<String> currentKeys=new LinkedHashSet<String>();
  for (  Object key : currentProperties.keySet()) {
    currentKeys.add((String)key);
  }
  StringBuffer sortedProperties=new StringBuffer();
  Properties appfuseProperties=getAppFuseProperties();
  Map<String,String> propertiesForPom=new LinkedHashMap<String,String>();
  for (  String key : projectProperties) {
    if (!currentKeys.contains(key)) {
      String value=appfuseProperties.getProperty(key);
      if (value.contains(""String_Node_Str"")) {
        value=""String_Node_Str"" + value + ""String_Node_Str"";
      }
      sortedProperties.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(key).append(""String_Node_Str"" + ""String_Node_Str"");
      propertiesForPom.put(key,value);
    }
  }
  if (project.getPackaging().equals(""String_Node_Str"") || project.hasParent()) {
    Map<String,String> properties=new LinkedHashMap<String,String>();
    if (propertiesContextHolder.get() != null) {
      properties=(LinkedHashMap)propertiesContextHolder.get();
    }
    for (    String key : propertiesForPom.keySet()) {
      if (!properties.containsKey(key)) {
        properties.put(key,propertiesForPom.get(key));
      }
    }
    propertiesContextHolder.set(properties);
  }
  StringWriter writer=new StringWriter();
  try {
    project.writeOriginalModel(writer);
    File pom=new File(""String_Node_Str"");
    if (pom.exists()) {
      pom.delete();
    }
    FileWriter fw=new FileWriter(pom);
    fw.write(writer.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  String pomXml=writer.toString();
  int startTag=pomXml.indexOf(""String_Node_Str"");
  String dependencyXml=pomXml.substring(startTag,pomXml.indexOf(""String_Node_Str"",startTag));
  dependencyXml=dependencyXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  dependencyXml=""String_Node_Str"" + dependencyXml;
  try {
    String packaging=project.getPackaging();
    String pathToPom=""String_Node_Str"";
    if (project.hasParent()) {
      if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
 else       if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
    }
    String originalPom=FileUtils.readFileToString(new File(pathToPom));
    startTag=originalPom.indexOf(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(originalPom.substring(0,startTag));
    sb.append(dependencyXml);
    sb.append(originalPom.substring(originalPom.indexOf(""String_Node_Str"",startTag)));
    String adjustedPom=sb.toString();
    if (!project.getPackaging().equals(""String_Node_Str"") && !project.hasParent()) {
      adjustedPom=addPropertiesToPom(adjustedPom,sortedProperties);
    }
    adjustedPom=adjustLineEndingsForOS(adjustedPom);
    FileUtils.writeStringToFile(new File(pathToPom),adjustedPom);
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  boolean renamePackages=true;
  if (System.getProperty(""String_Node_Str"") != null) {
    renamePackages=Boolean.valueOf(System.getProperty(""String_Node_Str""));
  }
  if (renamePackages && !project.getPackaging().equals(""String_Node_Str"")) {
    log(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str"");
    RenamePackages renamePackagesTool=new RenamePackages(project.getGroupId());
    if (project.hasParent()) {
      if (project.getPackaging().equals(""String_Node_Str"")) {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
 else {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
    }
    renamePackagesTool.execute();
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Map properties=propertiesContextHolder.get();
    Set<String> propertiesToAdd=new TreeSet<String>(properties.keySet());
    StringBuffer calculatedProperties=new StringBuffer();
    for (    String key : propertiesToAdd) {
      Set<Object> keysInProject=project.getParent().getOriginalModel().getProperties().keySet();
      if (!keysInProject.contains(key)) {
        String value=getAppFuseProperties().getProperty(key);
        if (value.contains(""String_Node_Str"")) {
          value=""String_Node_Str"" + value + ""String_Node_Str"";
        }
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(key);
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(value);
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(key);
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(""String_Node_Str"");
      }
    }
    try {
      String originalPom=FileUtils.readFileToString(new File(""String_Node_Str""));
      String pomWithProperties=addPropertiesToPom(originalPom,calculatedProperties);
      FileUtils.writeStringToFile(new File(""String_Node_Str""),pomWithProperties);
    }
 catch (    IOException ex) {
      getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
      throw new MojoFailureException(ex.getMessage());
    }
  }
  File pom=new File(""String_Node_Str"");
  if (pom.exists()) {
    pom.delete();
  }
}","private void createFullSourcePom(List<Dependency> newDependencies) throws MojoFailureException {
  Set<String> projectProperties=new TreeSet<String>();
  for (  Dependency dep : newDependencies) {
    if (dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"")|| dep.getArtifactId().equals(""String_Node_Str"")) {
      dep.setOptional(true);
      dep.setScope(null);
    }
    String version=dep.getVersion();
    if (version.startsWith(""String_Node_Str"")) {
      version=version.substring(2);
    }
    if (version.endsWith(""String_Node_Str"")) {
      version=version.substring(0,version.length() - 1);
    }
    projectProperties.add(version);
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Dependency core=new Dependency();
    core.setGroupId(""String_Node_Str"");
    core.setArtifactId(""String_Node_Str"");
    core.setVersion(""String_Node_Str"");
    newDependencies.add(core);
    if (project.getProperties().getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      Dependency jsp21=new Dependency();
      jsp21.setGroupId(""String_Node_Str"");
      jsp21.setArtifactId(""String_Node_Str"");
      jsp21.setVersion(""String_Node_Str"");
      jsp21.setScope(""String_Node_Str"");
      newDependencies.add(jsp21);
      project.getOriginalModel().getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
    }
  }
  Collections.sort(newDependencies,new BeanComparator(""String_Node_Str""));
  project.getOriginalModel().setDependencies(newDependencies);
  Properties currentProperties=project.getOriginalModel().getProperties();
  Set<String> currentKeys=new LinkedHashSet<String>();
  for (  Object key : currentProperties.keySet()) {
    currentKeys.add((String)key);
  }
  StringBuffer sortedProperties=new StringBuffer();
  Properties appfuseProperties=getAppFuseProperties();
  Map<String,String> propertiesForPom=new LinkedHashMap<String,String>();
  for (  String key : projectProperties) {
    if (!currentKeys.contains(key)) {
      String value=appfuseProperties.getProperty(key);
      if (value == null) {
        continue;
      }
      if (value.contains(""String_Node_Str"")) {
        value=""String_Node_Str"" + value + ""String_Node_Str"";
      }
      sortedProperties.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(key).append(""String_Node_Str"" + ""String_Node_Str"");
      propertiesForPom.put(key,value);
    }
  }
  if (project.getPackaging().equals(""String_Node_Str"") || project.hasParent()) {
    Map<String,String> properties=new LinkedHashMap<String,String>();
    if (propertiesContextHolder.get() != null) {
      properties=(LinkedHashMap)propertiesContextHolder.get();
    }
    for (    String key : propertiesForPom.keySet()) {
      if (!properties.containsKey(key)) {
        properties.put(key,propertiesForPom.get(key));
      }
    }
    propertiesContextHolder.set(properties);
  }
  StringWriter writer=new StringWriter();
  try {
    project.writeOriginalModel(writer);
    File pom=new File(""String_Node_Str"");
    if (pom.exists()) {
      pom.delete();
    }
    FileWriter fw=new FileWriter(pom);
    fw.write(writer.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  String pomXml=writer.toString();
  int startTag=pomXml.indexOf(""String_Node_Str"");
  String dependencyXml=pomXml.substring(startTag,pomXml.indexOf(""String_Node_Str"",startTag));
  dependencyXml=dependencyXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  dependencyXml=""String_Node_Str"" + dependencyXml;
  try {
    String packaging=project.getPackaging();
    String pathToPom=""String_Node_Str"";
    if (project.hasParent()) {
      if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
 else       if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
    }
    String originalPom=FileUtils.readFileToString(new File(pathToPom));
    startTag=originalPom.indexOf(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(originalPom.substring(0,startTag));
    sb.append(dependencyXml);
    sb.append(originalPom.substring(originalPom.indexOf(""String_Node_Str"",startTag)));
    String adjustedPom=sb.toString();
    if (!project.getPackaging().equals(""String_Node_Str"") && !project.hasParent()) {
      adjustedPom=addPropertiesToPom(adjustedPom,sortedProperties);
    }
    adjustedPom=adjustLineEndingsForOS(adjustedPom);
    FileUtils.writeStringToFile(new File(pathToPom),adjustedPom);
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  boolean renamePackages=true;
  if (System.getProperty(""String_Node_Str"") != null) {
    renamePackages=Boolean.valueOf(System.getProperty(""String_Node_Str""));
  }
  if (renamePackages && !project.getPackaging().equals(""String_Node_Str"")) {
    log(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str"");
    RenamePackages renamePackagesTool=new RenamePackages(project.getGroupId());
    if (project.hasParent()) {
      if (project.getPackaging().equals(""String_Node_Str"")) {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
 else {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
    }
    renamePackagesTool.execute();
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Map properties=propertiesContextHolder.get();
    Set<String> propertiesToAdd=new TreeSet<String>(properties.keySet());
    StringBuffer calculatedProperties=new StringBuffer();
    for (    String key : propertiesToAdd) {
      Set<Object> keysInProject=project.getParent().getOriginalModel().getProperties().keySet();
      if (!keysInProject.contains(key)) {
        String value=getAppFuseProperties().getProperty(key);
        if (value.contains(""String_Node_Str"")) {
          value=""String_Node_Str"" + value + ""String_Node_Str"";
        }
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(key);
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(value);
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(key);
        calculatedProperties.append(""String_Node_Str"");
        calculatedProperties.append(""String_Node_Str"");
      }
    }
    try {
      String originalPom=FileUtils.readFileToString(new File(""String_Node_Str""));
      String pomWithProperties=addPropertiesToPom(originalPom,calculatedProperties);
      FileUtils.writeStringToFile(new File(""String_Node_Str""),pomWithProperties);
    }
 catch (    IOException ex) {
      getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
      throw new MojoFailureException(ex.getMessage());
    }
  }
  File pom=new File(""String_Node_Str"");
  if (pom.exists()) {
    pom.delete();
  }
}"
85416,"public void execute() throws MojoExecutionException, MojoFailureException {
  String appfuseVersion=project.getProperties().getProperty(""String_Node_Str"");
  if ((appfuseVersion != null) && !appfuseVersion.endsWith(""String_Node_Str"") && tag.equals(""String_Node_Str"")) {
    tag=""String_Node_Str"" + appfuseVersion.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  }
  String daoFramework=project.getProperties().getProperty(""String_Node_Str"");
  if (daoFramework == null) {
    log(""String_Node_Str"");
  }
  String webFramework=project.getProperties().getProperty(""String_Node_Str"");
  boolean modular=(project.getPackaging().equals(""String_Node_Str"") && !project.hasParent());
  if (project.getPackaging().equals(""String_Node_Str"") || (project.getPackaging().equals(""String_Node_Str"") && !project.hasParent())) {
    log(""String_Node_Str"");
    export(""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    export(""String_Node_Str"" + daoFramework + ""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    if (""String_Node_Str"".equalsIgnoreCase(daoFramework)) {
      String filePath;
      if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"") && project.hasParent()) {
        filePath=""String_Node_Str"";
      }
 else {
        filePath=""String_Node_Str"";
      }
      File duplicateFile=new File(getFilePath(filePath));
      if (duplicateFile.exists()) {
        try {
          FileUtils.forceDeleteOnExit(duplicateFile);
        }
 catch (        IOException io) {
          getLog().error(""String_Node_Str"" + filePath + ""String_Node_Str"");
        }
      }
    }
 else     if (!""String_Node_Str"".equalsIgnoreCase(daoFramework)) {
      String filePath;
      if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"") && !project.hasParent()) {
        filePath=""String_Node_Str"";
      }
 else {
        filePath=""String_Node_Str"";
      }
      File duplicateFile=new File(getFilePath(filePath));
      if (duplicateFile.exists()) {
        log(""String_Node_Str"" + filePath + ""String_Node_Str"");
        try {
          FileUtils.forceDeleteOnExit(duplicateFile);
        }
 catch (        IOException io) {
          getLog().error(""String_Node_Str"" + filePath + ""String_Node_Str"");
        }
      }
    }
    log(""String_Node_Str"");
    export(""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
  }
  if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    if (webFramework == null) {
      getLog().error(""String_Node_Str"" + ""String_Node_Str"");
      throw new MojoExecutionException(""String_Node_Str"");
    }
    log(""String_Node_Str"");
    export(""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    log(""String_Node_Str"" + webFramework + ""String_Node_Str"");
    export(""String_Node_Str"" + webFramework + ""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    if (project.hasParent()) {
      try {
        FileUtils.copyFileToDirectory(new File(""String_Node_Str""),new File(""String_Node_Str""));
      }
 catch (      IOException io) {
        getLog().error(""String_Node_Str"");
      }
    }
  }
  log(""String_Node_Str"");
  if (project.getPackaging().equals(""String_Node_Str"")) {
    removeWarpathPlugin(new File(""String_Node_Str""));
  }
 else   if (project.getPackaging().equals(""String_Node_Str"")) {
    removeWarpathPlugin(new File(""String_Node_Str""));
  }
  List dependencies=project.getOriginalModel().getDependencies();
  List<Dependency> newDependencies=new ArrayList<Dependency>();
  for (  Object dependency : dependencies) {
    Dependency dep=(Dependency)dependency;
    if (!dep.getGroupId().equals(APPFUSE_GROUP_ID)) {
      newDependencies.add(dep);
    }
  }
  if (!project.getPackaging().equals(""String_Node_Str"") && !project.hasParent()) {
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework);
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,webFramework,""String_Node_Str"" + webFramework,true);
    }
    createFullSourcePom(newDependencies);
  }
 else {
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      createFullSourcePom(newDependencies);
    }
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies.clear();
      newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework);
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      createFullSourcePom(newDependencies);
    }
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies.clear();
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,webFramework,""String_Node_Str"" + webFramework,true);
      createFullSourcePom(newDependencies);
    }
  }
}","public void execute() throws MojoExecutionException, MojoFailureException {
  String appfuseVersion=project.getProperties().getProperty(""String_Node_Str"");
  if ((appfuseVersion != null) && !appfuseVersion.endsWith(""String_Node_Str"") && tag.equals(""String_Node_Str"")) {
    tag=""String_Node_Str"" + appfuseVersion.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  }
  String daoFramework=project.getProperties().getProperty(""String_Node_Str"");
  if (daoFramework == null) {
    log(""String_Node_Str"");
  }
  String webFramework=project.getProperties().getProperty(""String_Node_Str"");
  boolean modular=(project.getPackaging().equals(""String_Node_Str"") && !project.hasParent());
  if (project.getPackaging().equals(""String_Node_Str"") || (project.getPackaging().equals(""String_Node_Str"") && !project.hasParent())) {
    log(""String_Node_Str"");
    export(""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    export(""String_Node_Str"" + daoFramework + ""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    if (""String_Node_Str"".equalsIgnoreCase(daoFramework)) {
      String filePath;
      if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"") && project.hasParent()) {
        filePath=""String_Node_Str"";
      }
 else {
        filePath=""String_Node_Str"";
      }
      File duplicateFile=new File(getFilePath(filePath));
      if (duplicateFile.exists()) {
        try {
          FileUtils.forceDeleteOnExit(duplicateFile);
        }
 catch (        IOException io) {
          getLog().error(""String_Node_Str"" + filePath + ""String_Node_Str"");
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(daoFramework)) {
      String filePath;
      if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"") && !project.hasParent()) {
        filePath=""String_Node_Str"";
      }
 else {
        filePath=""String_Node_Str"";
      }
      File duplicateFile=new File(getFilePath(filePath));
      if (duplicateFile.exists()) {
        log(""String_Node_Str"" + filePath + ""String_Node_Str"");
        try {
          FileUtils.forceDeleteOnExit(duplicateFile);
        }
 catch (        IOException io) {
          getLog().error(""String_Node_Str"" + filePath + ""String_Node_Str"");
        }
      }
    }
    log(""String_Node_Str"");
    export(""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
  }
  if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    if (webFramework == null) {
      getLog().error(""String_Node_Str"" + ""String_Node_Str"");
      throw new MojoExecutionException(""String_Node_Str"");
    }
    log(""String_Node_Str"");
    export(""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    log(""String_Node_Str"" + webFramework + ""String_Node_Str"");
    export(""String_Node_Str"" + webFramework + ""String_Node_Str"",(modular) ? ""String_Node_Str"" : destinationDirectory);
    if (project.hasParent()) {
      try {
        FileUtils.copyFileToDirectory(new File(""String_Node_Str""),new File(""String_Node_Str""));
      }
 catch (      IOException io) {
        getLog().error(""String_Node_Str"");
      }
    }
  }
  log(""String_Node_Str"");
  if (project.getPackaging().equals(""String_Node_Str"")) {
    removeWarpathPlugin(new File(""String_Node_Str""));
  }
 else   if (project.getPackaging().equals(""String_Node_Str"")) {
    removeWarpathPlugin(new File(""String_Node_Str""));
  }
  List dependencies=project.getOriginalModel().getDependencies();
  List<Dependency> newDependencies=new ArrayList<Dependency>();
  for (  Object dependency : dependencies) {
    Dependency dep=(Dependency)dependency;
    if (!dep.getGroupId().equals(APPFUSE_GROUP_ID)) {
      newDependencies.add(dep);
    }
  }
  if (!project.getPackaging().equals(""String_Node_Str"") && !project.hasParent()) {
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
    newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework);
    newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,webFramework,""String_Node_Str"" + webFramework,true);
    }
    createFullSourcePom(newDependencies);
  }
 else {
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      createFullSourcePom(newDependencies);
    }
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies.clear();
      newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework);
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      createFullSourcePom(newDependencies);
    }
    if (project.getPackaging().equals(""String_Node_Str"")) {
      newDependencies.clear();
      newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
      newDependencies=addModuleDependencies(newDependencies,webFramework,""String_Node_Str"" + webFramework,true);
      createFullSourcePom(newDependencies);
    }
  }
}"
85417,"private void createFullSourcePom(List<Dependency> newDependencies) throws MojoFailureException {
  Set<String> projectProperties=new TreeSet<String>();
  for (  Dependency dep : newDependencies) {
    if (dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"")|| dep.getArtifactId().equals(""String_Node_Str"")) {
      dep.setOptional(true);
      dep.setScope(null);
    }
    String version=dep.getVersion();
    if (version.startsWith(""String_Node_Str"")) {
      version=version.substring(2);
    }
    if (version.endsWith(""String_Node_Str"")) {
      version=version.substring(0,version.length() - 1);
    }
    projectProperties.add(version);
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Dependency core=new Dependency();
    core.setGroupId(""String_Node_Str"");
    core.setArtifactId(""String_Node_Str"");
    core.setVersion(""String_Node_Str"");
    newDependencies.add(core);
    if (project.getProperties().getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      Dependency jsp21=new Dependency();
      jsp21.setGroupId(""String_Node_Str"");
      jsp21.setArtifactId(""String_Node_Str"");
      jsp21.setVersion(""String_Node_Str"");
      jsp21.setScope(""String_Node_Str"");
      newDependencies.add(jsp21);
    }
  }
  Collections.sort(newDependencies,new BeanComparator(""String_Node_Str""));
  project.getOriginalModel().setDependencies(newDependencies);
  Properties currentProperties=project.getOriginalModel().getProperties();
  Set<String> currentKeys=new LinkedHashSet<String>();
  for (  Object key : currentProperties.keySet()) {
    currentKeys.add((String)key);
  }
  StringBuffer sortedProperties=new StringBuffer();
  Properties appfuseProperties=getAppFuseProperties();
  Map propertiesForPom=new LinkedHashMap();
  for (  String key : projectProperties) {
    if (!currentKeys.contains(key)) {
      String value=appfuseProperties.getProperty(key);
      if (value.contains(""String_Node_Str"")) {
        value=""String_Node_Str"" + value + ""String_Node_Str"";
      }
      sortedProperties.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(key).append(""String_Node_Str"" + ""String_Node_Str"");
      propertiesForPom.put(key,value);
    }
  }
  if (project.getPackaging().equals(""String_Node_Str"") || project.hasParent()) {
    Map properties=new LinkedHashMap();
    if (propertiesContextHolder.get() != null) {
      properties=(LinkedHashMap)propertiesContextHolder.get();
    }
    properties.putAll(propertiesForPom);
    propertiesContextHolder.set(properties);
  }
  StringWriter writer=new StringWriter();
  try {
    project.writeOriginalModel(writer);
    File pom=new File(""String_Node_Str"");
    if (pom.exists()) {
      pom.delete();
    }
    FileWriter fw=new FileWriter(pom);
    fw.write(writer.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  String pomXml=writer.toString();
  int startTag=pomXml.indexOf(""String_Node_Str"");
  String dependencyXml=pomXml.substring(startTag,pomXml.indexOf(""String_Node_Str"",startTag));
  dependencyXml=dependencyXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  dependencyXml=""String_Node_Str"" + dependencyXml;
  try {
    String packaging=project.getPackaging();
    String pathToPom=""String_Node_Str"";
    if (project.hasParent()) {
      if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
 else       if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
    }
    String originalPom=FileUtils.readFileToString(new File(pathToPom));
    startTag=originalPom.indexOf(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(originalPom.substring(0,startTag));
    sb.append(dependencyXml);
    sb.append(originalPom.substring(originalPom.indexOf(""String_Node_Str"",startTag)));
    if (!project.hasParent() && sb.lastIndexOf(""String_Node_Str"") > -1) {
      String pomWithProperties=sb.substring(0,sb.lastIndexOf(""String_Node_Str""));
      pomWithProperties+=""String_Node_Str"" + sortedProperties + ""String_Node_Str"";
      pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String os=System.getProperty(""String_Node_Str"");
      if (os.startsWith(""String_Node_Str"") || os.startsWith(""String_Node_Str"")) {
        pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      FileUtils.writeStringToFile(new File(pathToPom),pomWithProperties);
    }
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  boolean renamePackages=true;
  if (System.getProperty(""String_Node_Str"") != null) {
    renamePackages=Boolean.valueOf(System.getProperty(""String_Node_Str""));
  }
  if (renamePackages && !project.getPackaging().equals(""String_Node_Str"")) {
    log(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str"");
    RenamePackages renamePackagesTool=new RenamePackages(project.getGroupId());
    if (project.hasParent()) {
      if (project.getPackaging().equals(""String_Node_Str"")) {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
 else {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
    }
    renamePackagesTool.execute();
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Map properties=(Map)propertiesContextHolder.get();
    Set<String> propertiesToAdd=new TreeSet<String>(properties.keySet());
    for (    String key : propertiesToAdd) {
      Set keysInProject=project.getParent().getOriginalModel().getProperties().keySet();
      if (!keysInProject.contains(key)) {
        String value=getAppFuseProperties().getProperty(key);
        if (value.contains(""String_Node_Str"")) {
          value=""String_Node_Str"" + value + ""String_Node_Str"";
        }
        sortedProperties.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(key).append(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    try {
      String originalPom=FileUtils.readFileToString(new File(""String_Node_Str""));
      String pomWithProperties=originalPom.replace(""String_Node_Str"",""String_Node_Str"" + sortedProperties + ""String_Node_Str"");
      pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String os=System.getProperty(""String_Node_Str"");
      if (os.startsWith(""String_Node_Str"") || os.startsWith(""String_Node_Str"")) {
        pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      FileUtils.writeStringToFile(new File(""String_Node_Str""),pomWithProperties);
    }
 catch (    IOException ex) {
      getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
      throw new MojoFailureException(ex.getMessage());
    }
  }
  File pom=new File(""String_Node_Str"");
  if (pom.exists()) {
    pom.delete();
  }
}","private void createFullSourcePom(List<Dependency> newDependencies) throws MojoFailureException {
  Set<String> projectProperties=new TreeSet<String>();
  for (  Dependency dep : newDependencies) {
    if (dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"")|| dep.getArtifactId().equals(""String_Node_Str"")) {
      dep.setOptional(true);
      dep.setScope(null);
    }
    String version=dep.getVersion();
    if (version.startsWith(""String_Node_Str"")) {
      version=version.substring(2);
    }
    if (version.endsWith(""String_Node_Str"")) {
      version=version.substring(0,version.length() - 1);
    }
    projectProperties.add(version);
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Dependency core=new Dependency();
    core.setGroupId(""String_Node_Str"");
    core.setArtifactId(""String_Node_Str"");
    core.setVersion(""String_Node_Str"");
    newDependencies.add(core);
    if (project.getProperties().getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      Dependency jsp21=new Dependency();
      jsp21.setGroupId(""String_Node_Str"");
      jsp21.setArtifactId(""String_Node_Str"");
      jsp21.setVersion(""String_Node_Str"");
      jsp21.setScope(""String_Node_Str"");
      newDependencies.add(jsp21);
      project.getOriginalModel().getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
    }
  }
  Collections.sort(newDependencies,new BeanComparator(""String_Node_Str""));
  project.getOriginalModel().setDependencies(newDependencies);
  Properties currentProperties=project.getOriginalModel().getProperties();
  Set<String> currentKeys=new LinkedHashSet<String>();
  for (  Object key : currentProperties.keySet()) {
    currentKeys.add((String)key);
  }
  StringBuffer sortedProperties=new StringBuffer();
  Properties appfuseProperties=getAppFuseProperties();
  Map<String,String> propertiesForPom=new LinkedHashMap<String,String>();
  for (  String key : projectProperties) {
    if (!currentKeys.contains(key)) {
      String value=appfuseProperties.getProperty(key);
      if (value.contains(""String_Node_Str"")) {
        value=""String_Node_Str"" + value + ""String_Node_Str"";
      }
      sortedProperties.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(key).append(""String_Node_Str"" + ""String_Node_Str"");
      propertiesForPom.put(key,value);
    }
  }
  if (project.getPackaging().equals(""String_Node_Str"") || project.hasParent()) {
    Map<String,String> properties=new LinkedHashMap<String,String>();
    if (propertiesContextHolder.get() != null) {
      properties=(LinkedHashMap)propertiesContextHolder.get();
    }
    for (    String key : propertiesForPom.keySet()) {
      if (!properties.containsKey(key)) {
        properties.put(key,propertiesForPom.get(key));
      }
    }
    propertiesContextHolder.set(properties);
  }
  StringWriter writer=new StringWriter();
  try {
    project.writeOriginalModel(writer);
    File pom=new File(""String_Node_Str"");
    if (pom.exists()) {
      pom.delete();
    }
    FileWriter fw=new FileWriter(pom);
    fw.write(writer.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  String pomXml=writer.toString();
  int startTag=pomXml.indexOf(""String_Node_Str"");
  String dependencyXml=pomXml.substring(startTag,pomXml.indexOf(""String_Node_Str"",startTag));
  dependencyXml=dependencyXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  dependencyXml=""String_Node_Str"" + dependencyXml;
  try {
    String packaging=project.getPackaging();
    String pathToPom=""String_Node_Str"";
    if (project.hasParent()) {
      if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
 else       if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
    }
    String originalPom=FileUtils.readFileToString(new File(pathToPom));
    startTag=originalPom.indexOf(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(originalPom.substring(0,startTag));
    sb.append(dependencyXml);
    sb.append(originalPom.substring(originalPom.indexOf(""String_Node_Str"",startTag)));
    String adjustedPom=sb.toString();
    if (!project.getPackaging().equals(""String_Node_Str"") && !project.hasParent() && adjustedPom.lastIndexOf(""String_Node_Str"") > -1) {
      adjustedPom=sb.substring(0,sb.lastIndexOf(""String_Node_Str""));
      adjustedPom+=""String_Node_Str"" + sortedProperties + ""String_Node_Str"";
      adjustedPom=adjustedPom.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    String os=System.getProperty(""String_Node_Str"");
    if (os.startsWith(""String_Node_Str"") || os.startsWith(""String_Node_Str"")) {
      adjustedPom=adjustedPom.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    FileUtils.writeStringToFile(new File(pathToPom),adjustedPom);
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  boolean renamePackages=true;
  if (System.getProperty(""String_Node_Str"") != null) {
    renamePackages=Boolean.valueOf(System.getProperty(""String_Node_Str""));
  }
  if (renamePackages && !project.getPackaging().equals(""String_Node_Str"")) {
    log(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str"");
    RenamePackages renamePackagesTool=new RenamePackages(project.getGroupId());
    if (project.hasParent()) {
      if (project.getPackaging().equals(""String_Node_Str"")) {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
 else {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
    }
    renamePackagesTool.execute();
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Map properties=propertiesContextHolder.get();
    Set<String> propertiesToAdd=new TreeSet<String>(properties.keySet());
    StringBuffer calculatedProperties=new StringBuffer();
    for (    String key : propertiesToAdd) {
      Set<Object> keysInProject=project.getParent().getOriginalModel().getProperties().keySet();
      if (!keysInProject.contains(key)) {
        String value=getAppFuseProperties().getProperty(key);
        if (value.contains(""String_Node_Str"")) {
          value=""String_Node_Str"" + value + ""String_Node_Str"";
        }
        calculatedProperties.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(key).append(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    try {
      String originalPom=FileUtils.readFileToString(new File(""String_Node_Str""));
      String pomWithProperties=originalPom.replace(""String_Node_Str"",""String_Node_Str"" + calculatedProperties + ""String_Node_Str"");
      pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String os=System.getProperty(""String_Node_Str"");
      if (os.startsWith(""String_Node_Str"") || os.startsWith(""String_Node_Str"")) {
        pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      FileUtils.writeStringToFile(new File(""String_Node_Str""),pomWithProperties);
    }
 catch (    IOException ex) {
      getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
      throw new MojoFailureException(ex.getMessage());
    }
  }
  File pom=new File(""String_Node_Str"");
  if (pom.exists()) {
    pom.delete();
  }
}"
85418,"private List<Dependency> addModuleDependencies(List<Dependency> dependencies,String moduleName,String moduleLocation,boolean removeWarpath){
  log(""String_Node_Str"" + moduleName + ""String_Node_Str"");
  URL pomLocation=null;
  File newDir=new File(""String_Node_Str"",""String_Node_Str"" + moduleName);
  if (!newDir.exists()) {
    newDir.mkdirs();
  }
  File pom=new File(""String_Node_Str"" + moduleName + ""String_Node_Str"");
  try {
    pomLocation=new URL(trunk + tag + moduleLocation+ ""String_Node_Str"");
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  Get get=(Get)AntUtils.createProject().createTask(""String_Node_Str"");
  get.setSrc(pomLocation);
  get.setDest(pom);
  get.setUsername(""String_Node_Str"");
  get.setPassword(""String_Node_Str"");
  get.execute();
  if (removeWarpath) {
    removeWarpathPlugin(pom);
  }
  MavenProject p=createProjectFromPom(pom);
  List moduleDependencies=p.getOriginalModel().getDependencies();
  if (moduleName.equalsIgnoreCase(""String_Node_Str"")) {
    appfuseProperties=p.getOriginalModel().getProperties();
  }
  Set<String> artifactIds=new LinkedHashSet<String>();
  for (  Dependency dep : dependencies) {
    artifactIds.add(dep.getArtifactId());
  }
  for (  Object moduleDependency : moduleDependencies) {
    Dependency dep=(Dependency)moduleDependency;
    if (!artifactIds.contains(dep.getArtifactId()) && !dep.getArtifactId().contains(""String_Node_Str"")) {
      dependencies.add(dep);
    }
  }
  return dependencies;
}","private List<Dependency> addModuleDependencies(List<Dependency> dependencies,String moduleName,String moduleLocation,boolean removeWarpath){
  log(""String_Node_Str"" + moduleName + ""String_Node_Str"");
  URL pomLocation=null;
  File newDir=new File(""String_Node_Str"",""String_Node_Str"" + moduleName);
  if (!newDir.exists()) {
    newDir.mkdirs();
  }
  File pom=new File(""String_Node_Str"" + moduleName + ""String_Node_Str"");
  try {
    pomLocation=new URL(trunk + tag + moduleLocation+ ""String_Node_Str"");
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  Get get=(Get)AntUtils.createProject().createTask(""String_Node_Str"");
  get.setSrc(pomLocation);
  get.setDest(pom);
  get.setUsername(""String_Node_Str"");
  get.setPassword(""String_Node_Str"");
  get.execute();
  if (removeWarpath) {
    removeWarpathPlugin(pom);
  }
  MavenProject p=createProjectFromPom(pom);
  List moduleDependencies=p.getOriginalModel().getDependencies();
  if (moduleName.equalsIgnoreCase(""String_Node_Str"")) {
    appfuseProperties=p.getOriginalModel().getProperties();
  }
  Set<String> artifactIds=new LinkedHashSet<String>();
  for (  Dependency dep : dependencies) {
    artifactIds.add(dep.getArtifactId());
  }
  for (  Object moduleDependency : moduleDependencies) {
    Dependency dep=(Dependency)moduleDependency;
    if (dep.getGroupId().equals(""String_Node_Str"") && dep.getArtifactId().equals(""String_Node_Str"") && project.getProperties().getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      continue;
    }
    if (!artifactIds.contains(dep.getArtifactId()) && !dep.getArtifactId().contains(""String_Node_Str"")) {
      dependencies.add(dep);
    }
  }
  return dependencies;
}"
85419,"private void createFullSourcePom(List<Dependency> newDependencies) throws MojoFailureException {
  Set<String> projectProperties=new TreeSet<String>();
  for (  Dependency dep : newDependencies) {
    if (dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"")|| dep.getArtifactId().equals(""String_Node_Str"")) {
      dep.setOptional(true);
      dep.setScope(null);
    }
    String version=dep.getVersion();
    if (version.startsWith(""String_Node_Str"")) {
      version=version.substring(2);
    }
    if (version.endsWith(""String_Node_Str"")) {
      version=version.substring(0,version.length() - 1);
    }
    projectProperties.add(version);
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Dependency core=new Dependency();
    core.setGroupId(""String_Node_Str"");
    core.setArtifactId(""String_Node_Str"");
    core.setVersion(""String_Node_Str"");
    newDependencies.add(core);
    if (project.getProperties().getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      Dependency jsp21=new Dependency();
      jsp21.setGroupId(""String_Node_Str"");
      jsp21.setArtifactId(""String_Node_Str"");
      jsp21.setVersion(""String_Node_Str"");
      jsp21.setScope(""String_Node_Str"");
      newDependencies.add(jsp21);
    }
  }
  Collections.sort(newDependencies,new BeanComparator(""String_Node_Str""));
  project.getOriginalModel().setDependencies(newDependencies);
  Properties currentProperties=project.getOriginalModel().getProperties();
  Set<String> currentKeys=new LinkedHashSet<String>();
  for (  Object key : currentProperties.keySet()) {
    currentKeys.add((String)key);
  }
  StringBuffer sortedProperties=new StringBuffer();
  Properties appfuseProperties=getAppFuseProperties();
  Map propertiesForPom=new LinkedHashMap();
  for (  String key : projectProperties) {
    if (!currentKeys.contains(key)) {
      String value=appfuseProperties.getProperty(key);
      if (value.contains(""String_Node_Str"")) {
        value=""String_Node_Str"" + value + ""String_Node_Str"";
      }
      sortedProperties.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(key).append(""String_Node_Str"" + ""String_Node_Str"");
      propertiesForPom.put(key,value);
    }
  }
  if (project.getPackaging().equals(""String_Node_Str"") || project.hasParent()) {
    Map properties=new LinkedHashMap();
    if (propertiesContextHolder.get() != null) {
      properties=(LinkedHashMap)propertiesContextHolder.get();
    }
    properties.putAll(propertiesForPom);
    propertiesContextHolder.set(properties);
  }
  StringWriter writer=new StringWriter();
  try {
    project.writeOriginalModel(writer);
    File pom=new File(""String_Node_Str"");
    if (pom.exists()) {
      pom.delete();
    }
    FileWriter fw=new FileWriter(pom);
    fw.write(writer.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  String pomXml=writer.toString();
  int startTag=pomXml.indexOf(""String_Node_Str"");
  String dependencyXml=pomXml.substring(startTag,pomXml.indexOf(""String_Node_Str"",startTag));
  dependencyXml=dependencyXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  dependencyXml=""String_Node_Str"" + dependencyXml;
  try {
    String packaging=project.getPackaging();
    String pathToPom=""String_Node_Str"";
    if (project.hasParent()) {
      if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
 else       if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
    }
    String originalPom=FileUtils.readFileToString(new File(pathToPom));
    startTag=originalPom.indexOf(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(originalPom.substring(0,startTag));
    sb.append(dependencyXml);
    sb.append(originalPom.substring(originalPom.indexOf(""String_Node_Str"",startTag)));
    String pomWithProperties=sb.toString().replace(""String_Node_Str"",""String_Node_Str"" + sortedProperties + ""String_Node_Str"");
    pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
    String os=System.getProperty(""String_Node_Str"");
    if (os.startsWith(""String_Node_Str"") || os.startsWith(""String_Node_Str"")) {
      pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    FileUtils.writeStringToFile(new File(pathToPom),pomWithProperties);
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  boolean renamePackages=true;
  if (System.getProperty(""String_Node_Str"") != null) {
    renamePackages=Boolean.valueOf(System.getProperty(""String_Node_Str""));
  }
  if (renamePackages && !project.getPackaging().equals(""String_Node_Str"")) {
    log(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str"");
    RenamePackages renamePackagesTool=new RenamePackages(project.getGroupId());
    if (project.hasParent()) {
      if (project.getPackaging().equals(""String_Node_Str"")) {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
 else {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
    }
    renamePackagesTool.execute();
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Map properties=(Map)propertiesContextHolder.get();
    Set<String> propertiesToAdd=new TreeSet<String>(properties.keySet());
    for (    String key : propertiesToAdd) {
      Set keysInProject=project.getParent().getOriginalModel().getProperties().keySet();
      if (!keysInProject.contains(key)) {
        String value=getAppFuseProperties().getProperty(key);
        if (value.contains(""String_Node_Str"")) {
          value=""String_Node_Str"" + value + ""String_Node_Str"";
        }
        sortedProperties.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(key).append(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    try {
      String originalPom=FileUtils.readFileToString(new File(""String_Node_Str""));
      String pomWithProperties=originalPom.replace(""String_Node_Str"",""String_Node_Str"" + sortedProperties + ""String_Node_Str"");
      pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String os=System.getProperty(""String_Node_Str"");
      if (os.startsWith(""String_Node_Str"") || os.startsWith(""String_Node_Str"")) {
        pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      FileUtils.writeStringToFile(new File(""String_Node_Str""),pomWithProperties);
    }
 catch (    IOException ex) {
      getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
      throw new MojoFailureException(ex.getMessage());
    }
  }
  File pom=new File(""String_Node_Str"");
  if (pom.exists()) {
    pom.delete();
  }
}","private void createFullSourcePom(List<Dependency> newDependencies) throws MojoFailureException {
  Set<String> projectProperties=new TreeSet<String>();
  for (  Dependency dep : newDependencies) {
    if (dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"")|| dep.getArtifactId().equals(""String_Node_Str"")) {
      dep.setOptional(true);
      dep.setScope(null);
    }
    String version=dep.getVersion();
    if (version.startsWith(""String_Node_Str"")) {
      version=version.substring(2);
    }
    if (version.endsWith(""String_Node_Str"")) {
      version=version.substring(0,version.length() - 1);
    }
    projectProperties.add(version);
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Dependency core=new Dependency();
    core.setGroupId(""String_Node_Str"");
    core.setArtifactId(""String_Node_Str"");
    core.setVersion(""String_Node_Str"");
    newDependencies.add(core);
    if (project.getProperties().getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      Dependency jsp21=new Dependency();
      jsp21.setGroupId(""String_Node_Str"");
      jsp21.setArtifactId(""String_Node_Str"");
      jsp21.setVersion(""String_Node_Str"");
      jsp21.setScope(""String_Node_Str"");
      newDependencies.add(jsp21);
    }
  }
  Collections.sort(newDependencies,new BeanComparator(""String_Node_Str""));
  project.getOriginalModel().setDependencies(newDependencies);
  Properties currentProperties=project.getOriginalModel().getProperties();
  Set<String> currentKeys=new LinkedHashSet<String>();
  for (  Object key : currentProperties.keySet()) {
    currentKeys.add((String)key);
  }
  StringBuffer sortedProperties=new StringBuffer();
  Properties appfuseProperties=getAppFuseProperties();
  Map propertiesForPom=new LinkedHashMap();
  for (  String key : projectProperties) {
    if (!currentKeys.contains(key)) {
      String value=appfuseProperties.getProperty(key);
      if (value.contains(""String_Node_Str"")) {
        value=""String_Node_Str"" + value + ""String_Node_Str"";
      }
      sortedProperties.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(key).append(""String_Node_Str"" + ""String_Node_Str"");
      propertiesForPom.put(key,value);
    }
  }
  if (project.getPackaging().equals(""String_Node_Str"") || project.hasParent()) {
    Map properties=new LinkedHashMap();
    if (propertiesContextHolder.get() != null) {
      properties=(LinkedHashMap)propertiesContextHolder.get();
    }
    properties.putAll(propertiesForPom);
    propertiesContextHolder.set(properties);
  }
  StringWriter writer=new StringWriter();
  try {
    project.writeOriginalModel(writer);
    File pom=new File(""String_Node_Str"");
    if (pom.exists()) {
      pom.delete();
    }
    FileWriter fw=new FileWriter(pom);
    fw.write(writer.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  String pomXml=writer.toString();
  int startTag=pomXml.indexOf(""String_Node_Str"");
  String dependencyXml=pomXml.substring(startTag,pomXml.indexOf(""String_Node_Str"",startTag));
  dependencyXml=dependencyXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  dependencyXml=""String_Node_Str"" + dependencyXml;
  try {
    String packaging=project.getPackaging();
    String pathToPom=""String_Node_Str"";
    if (project.hasParent()) {
      if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
 else       if (packaging.equals(""String_Node_Str"")) {
        pathToPom=""String_Node_Str"" + pathToPom;
      }
    }
    String originalPom=FileUtils.readFileToString(new File(pathToPom));
    startTag=originalPom.indexOf(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(originalPom.substring(0,startTag));
    sb.append(dependencyXml);
    sb.append(originalPom.substring(originalPom.indexOf(""String_Node_Str"",startTag)));
    if (sb.lastIndexOf(""String_Node_Str"") > -1) {
      String pomWithProperties=sb.substring(0,sb.lastIndexOf(""String_Node_Str""));
      pomWithProperties+=""String_Node_Str"" + sortedProperties + ""String_Node_Str"";
      pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String os=System.getProperty(""String_Node_Str"");
      if (os.startsWith(""String_Node_Str"") || os.startsWith(""String_Node_Str"")) {
        pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      FileUtils.writeStringToFile(new File(pathToPom),pomWithProperties);
    }
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  boolean renamePackages=true;
  if (System.getProperty(""String_Node_Str"") != null) {
    renamePackages=Boolean.valueOf(System.getProperty(""String_Node_Str""));
  }
  if (renamePackages && !project.getPackaging().equals(""String_Node_Str"")) {
    log(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str"");
    RenamePackages renamePackagesTool=new RenamePackages(project.getGroupId());
    if (project.hasParent()) {
      if (project.getPackaging().equals(""String_Node_Str"")) {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
 else {
        renamePackagesTool.setBaseDir(""String_Node_Str"");
      }
    }
    renamePackagesTool.execute();
  }
  if (project.getPackaging().equals(""String_Node_Str"") && project.hasParent()) {
    Map properties=(Map)propertiesContextHolder.get();
    Set<String> propertiesToAdd=new TreeSet<String>(properties.keySet());
    for (    String key : propertiesToAdd) {
      Set keysInProject=project.getParent().getOriginalModel().getProperties().keySet();
      if (!keysInProject.contains(key)) {
        String value=getAppFuseProperties().getProperty(key);
        if (value.contains(""String_Node_Str"")) {
          value=""String_Node_Str"" + value + ""String_Node_Str"";
        }
        sortedProperties.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(key).append(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    try {
      String originalPom=FileUtils.readFileToString(new File(""String_Node_Str""));
      String pomWithProperties=originalPom.replace(""String_Node_Str"",""String_Node_Str"" + sortedProperties + ""String_Node_Str"");
      pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String os=System.getProperty(""String_Node_Str"");
      if (os.startsWith(""String_Node_Str"") || os.startsWith(""String_Node_Str"")) {
        pomWithProperties=pomWithProperties.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      FileUtils.writeStringToFile(new File(""String_Node_Str""),pomWithProperties);
    }
 catch (    IOException ex) {
      getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
      throw new MojoFailureException(ex.getMessage());
    }
  }
  File pom=new File(""String_Node_Str"");
  if (pom.exists()) {
    pom.delete();
  }
}"
85420,"public String upload() throws IOException {
  HttpServletRequest request=getRequest();
  String uploadDir=getServletContext().getRealPath(""String_Node_Str"") + ""String_Node_Str"" + request.getRemoteUser()+ ""String_Node_Str"";
  File dirPath=new File(uploadDir);
  if (!dirPath.exists()) {
    dirPath.mkdirs();
  }
  InputStream stream=file.getInputStream();
  OutputStream bos=new FileOutputStream(uploadDir + file.getName());
  int bytesRead=0;
  byte[] buffer=new byte[8192];
  while ((bytesRead=stream.read(buffer,0,8192)) != -1) {
    bos.write(buffer,0,bytesRead);
  }
  bos.close();
  stream.close();
  request.setAttribute(""String_Node_Str"",name);
  request.setAttribute(""String_Node_Str"",file.getName());
  request.setAttribute(""String_Node_Str"",file.getContentType());
  request.setAttribute(""String_Node_Str"",file.getSize() + ""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",dirPath.getAbsolutePath() + Constants.FILE_SEP + file.getName());
  String link=request.getContextPath() + ""String_Node_Str"" + ""String_Node_Str""+ request.getRemoteUser()+ ""String_Node_Str"";
  request.setAttribute(""String_Node_Str"",link + file.getName());
  return ""String_Node_Str"";
}","public String upload() throws IOException {
  HttpServletRequest request=getRequest();
  String uploadDir=getServletContext().getRealPath(""String_Node_Str"") + ""String_Node_Str"" + request.getRemoteUser()+ ""String_Node_Str"";
  File dirPath=new File(uploadDir);
  if (!dirPath.exists()) {
    dirPath.mkdirs();
  }
  InputStream stream=file.getInputStream();
  String filename=file.getName();
  if (filename.indexOf(""String_Node_Str"") != -1) {
    int slash=filename.lastIndexOf(""String_Node_Str"");
    if (slash != -1) {
      filename=filename.substring(slash + 1);
    }
    int slash2=filename.lastIndexOf(""String_Node_Str"");
    if (slash2 != -1) {
      filename=filename.substring(slash2 + 1);
    }
    int slash3=filename.lastIndexOf(""String_Node_Str"");
    if (slash3 != -1) {
      filename=filename.substring(slash3 + 1);
    }
  }
  OutputStream bos=new FileOutputStream(uploadDir + filename);
  int bytesRead;
  byte[] buffer=new byte[8192];
  while ((bytesRead=stream.read(buffer,0,8192)) != -1) {
    bos.write(buffer,0,bytesRead);
  }
  bos.close();
  stream.close();
  request.setAttribute(""String_Node_Str"",name);
  request.setAttribute(""String_Node_Str"",filename);
  request.setAttribute(""String_Node_Str"",file.getContentType());
  request.setAttribute(""String_Node_Str"",file.getSize() + ""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",dirPath.getAbsolutePath() + Constants.FILE_SEP + filename);
  String link=request.getContextPath() + ""String_Node_Str"" + ""String_Node_Str""+ request.getRemoteUser()+ ""String_Node_Str"";
  request.setAttribute(""String_Node_Str"",link + filename);
  return ""String_Node_Str"";
}"
85421,"public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  FileUpload fileUpload=(FileUpload)command;
  if (fileUpload.getFile().length == 0) {
    Object[] args=new Object[]{getText(""String_Node_Str"",request.getLocale())};
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"",args,""String_Node_Str"");
    return showForm(request,response,errors);
  }
  MultipartHttpServletRequest multipartRequest=(MultipartHttpServletRequest)request;
  CommonsMultipartFile file=(CommonsMultipartFile)multipartRequest.getFile(""String_Node_Str"");
  String uploadDir=getServletContext().getRealPath(""String_Node_Str"") + ""String_Node_Str"" + request.getRemoteUser()+ ""String_Node_Str"";
  File dirPath=new File(uploadDir);
  if (!dirPath.exists()) {
    dirPath.mkdirs();
  }
  InputStream stream=file.getInputStream();
  OutputStream bos=new FileOutputStream(uploadDir + file.getOriginalFilename());
  int bytesRead=0;
  byte[] buffer=new byte[8192];
  while ((bytesRead=stream.read(buffer,0,8192)) != -1) {
    bos.write(buffer,0,bytesRead);
  }
  bos.close();
  stream.close();
  request.setAttribute(""String_Node_Str"",fileUpload.getName());
  request.setAttribute(""String_Node_Str"",file.getOriginalFilename());
  request.setAttribute(""String_Node_Str"",file.getContentType());
  request.setAttribute(""String_Node_Str"",file.getSize() + ""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",dirPath.getAbsolutePath() + Constants.FILE_SEP + file.getOriginalFilename());
  String link=request.getContextPath() + ""String_Node_Str"" + ""String_Node_Str""+ request.getRemoteUser()+ ""String_Node_Str"";
  request.setAttribute(""String_Node_Str"",link + file.getOriginalFilename());
  return new ModelAndView(getSuccessView());
}","public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  FileUpload fileUpload=(FileUpload)command;
  if (fileUpload.getFile().length == 0) {
    Object[] args=new Object[]{getText(""String_Node_Str"",request.getLocale())};
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"",args,""String_Node_Str"");
    return showForm(request,response,errors);
  }
  MultipartHttpServletRequest multipartRequest=(MultipartHttpServletRequest)request;
  CommonsMultipartFile file=(CommonsMultipartFile)multipartRequest.getFile(""String_Node_Str"");
  String uploadDir=getServletContext().getRealPath(""String_Node_Str"") + ""String_Node_Str"" + request.getRemoteUser()+ ""String_Node_Str"";
  File dirPath=new File(uploadDir);
  if (!dirPath.exists()) {
    dirPath.mkdirs();
  }
  InputStream stream=file.getInputStream();
  OutputStream bos=new FileOutputStream(uploadDir + file.getOriginalFilename());
  int bytesRead;
  byte[] buffer=new byte[8192];
  while ((bytesRead=stream.read(buffer,0,8192)) != -1) {
    bos.write(buffer,0,bytesRead);
  }
  bos.close();
  stream.close();
  request.setAttribute(""String_Node_Str"",fileUpload.getName());
  request.setAttribute(""String_Node_Str"",file.getOriginalFilename());
  request.setAttribute(""String_Node_Str"",file.getContentType());
  request.setAttribute(""String_Node_Str"",file.getSize() + ""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",dirPath.getAbsolutePath() + Constants.FILE_SEP + file.getOriginalFilename());
  String link=request.getContextPath() + ""String_Node_Str"" + ""String_Node_Str""+ request.getRemoteUser()+ ""String_Node_Str"";
  request.setAttribute(""String_Node_Str"",link + file.getOriginalFilename());
  return new ModelAndView(getSuccessView());
}"
85422,"public void validate(){
  if (getRequest().getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    if (""String_Node_Str"".equals(fileFileName) || file == null) {
      super.addFieldError(""String_Node_Str"",getText(""String_Node_Str"",new String[]{getText(""String_Node_Str"")}));
    }
 else     if (file.length() > 2097152) {
      addActionError(getText(""String_Node_Str""));
    }
  }
}","public void validate(){
  if (getRequest().getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    getFieldErrors().clear();
    if (""String_Node_Str"".equals(fileFileName) || file == null) {
      super.addFieldError(""String_Node_Str"",getText(""String_Node_Str"",new String[]{getText(""String_Node_Str"")}));
    }
 else     if (file.length() > 2097152) {
      addActionError(getText(""String_Node_Str""));
    }
  }
}"
85423,"public Object convertFromString(Map ctx,String[] value,Class arg2){
  if (value[0] == null || value[0].trim().equals(""String_Node_Str"")) {
    return null;
  }
  try {
    DateUtil.convertStringToDate(value[0]);
  }
 catch (  ParseException pe) {
    pe.printStackTrace();
    throw new TypeConversionException(pe.getMessage());
  }
  return null;
}","public Object convertFromString(Map ctx,String[] value,Class arg2){
  if (value[0] == null || value[0].trim().equals(""String_Node_Str"")) {
    return null;
  }
  try {
    return DateUtil.convertStringToDate(value[0]);
  }
 catch (  ParseException pe) {
    pe.printStackTrace();
    throw new TypeConversionException(pe.getMessage());
  }
}"
85424,"private Properties getAppFuseProperties(){
  log(""String_Node_Str"");
  URL pomLocation=null;
  File newDir=new File(""String_Node_Str"",""String_Node_Str"");
  if (!newDir.exists()) {
    newDir.mkdirs();
  }
  File pom=new File(""String_Node_Str"");
  try {
    pomLocation=new URL(trunk + tag + ""String_Node_Str"");
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  Get get=(Get)AntUtils.createProject().createTask(""String_Node_Str"");
  get.setSrc(pomLocation);
  get.setDest(pom);
  get.setUsername(""String_Node_Str"");
  get.setPassword(""String_Node_Str"");
  get.execute();
  MavenEmbedder maven=new MavenEmbedder();
  maven.setOffline(true);
  maven.setClassLoader(Thread.currentThread().getContextClassLoader());
  maven.setLogger(new MavenEmbedderConsoleLogger());
  MavenProject p=null;
  try {
    maven.start();
    p=maven.readProjectWithDependencies(pom);
    maven.stop();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  Properties props=p.getOriginalModel().getProperties();
  Properties projectProperties=project.getOriginalModel().getProperties();
  Properties newProperties=new Properties();
  List<String> webDependencies=new ArrayList<String>();
  webDependencies.addAll(JSF_PROPERTIES);
  webDependencies.addAll(SPRING_PROPERTIES);
  webDependencies.addAll(STRUTS_PROPERTIES);
  webDependencies.addAll(TAPESTRY_PROPERTIES);
  for (  Object o : props.keySet()) {
    String key=(String)o;
    if (!projectProperties.containsKey(key)) {
      newProperties.put(key,props.getProperty(key));
    }
  }
  for (  String key : webDependencies) {
    newProperties.remove(key + ""String_Node_Str"");
  }
  newProperties.remove(""String_Node_Str"");
  newProperties.remove(""String_Node_Str"");
  newProperties.remove(""String_Node_Str"");
  if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    for (    String key : JSF_PROPERTIES) {
      key+=""String_Node_Str"";
      newProperties.put(key,props.getProperty(key));
    }
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    for (    String key : SPRING_PROPERTIES) {
      key+=""String_Node_Str"";
      newProperties.put(key,props.getProperty(key));
    }
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    for (    String key : STRUTS_PROPERTIES) {
      key+=""String_Node_Str"";
      newProperties.put(key,props.getProperty(key));
    }
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    for (    String key : TAPESTRY_PROPERTIES) {
      key+=""String_Node_Str"";
      newProperties.put(key,props.getProperty(key));
    }
  }
  newProperties.put(getDaoFramework() + ""String_Node_Str"",props.getProperty(getDaoFramework() + ""String_Node_Str""));
  return newProperties;
}","private Properties getAppFuseProperties(){
  log(""String_Node_Str"");
  URL pomLocation=null;
  File newDir=new File(""String_Node_Str"",""String_Node_Str"");
  if (!newDir.exists()) {
    newDir.mkdirs();
  }
  File pom=new File(""String_Node_Str"");
  try {
    pomLocation=new URL(trunk + tag + ""String_Node_Str"");
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  Get get=(Get)AntUtils.createProject().createTask(""String_Node_Str"");
  get.setSrc(pomLocation);
  get.setDest(pom);
  get.setUsername(""String_Node_Str"");
  get.setPassword(""String_Node_Str"");
  get.execute();
  MavenEmbedder maven=new MavenEmbedder();
  maven.setOffline(true);
  maven.setClassLoader(Thread.currentThread().getContextClassLoader());
  maven.setLogger(new MavenEmbedderConsoleLogger());
  MavenProject p=null;
  try {
    maven.start();
    p=maven.readProjectWithDependencies(pom);
    maven.stop();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  Properties props=p.getOriginalModel().getProperties();
  Properties projectProperties=project.getOriginalModel().getProperties();
  Properties newProperties=new Properties();
  List<String> webDependencies=new ArrayList<String>();
  webDependencies.addAll(JSF_PROPERTIES);
  webDependencies.addAll(SPRING_PROPERTIES);
  webDependencies.addAll(STRUTS_PROPERTIES);
  webDependencies.addAll(TAPESTRY_PROPERTIES);
  for (  Object o : props.keySet()) {
    String key=(String)o;
    if (!projectProperties.containsKey(key)) {
      newProperties.put(key,props.getProperty(key));
    }
  }
  for (  String key : webDependencies) {
    newProperties.remove(key + ""String_Node_Str"");
  }
  newProperties.remove(""String_Node_Str"");
  newProperties.remove(""String_Node_Str"");
  newProperties.remove(""String_Node_Str"");
  if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    for (    String key : JSF_PROPERTIES) {
      key+=""String_Node_Str"";
      newProperties.put(key,props.getProperty(key));
    }
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    for (    String key : SPRING_PROPERTIES) {
      key+=""String_Node_Str"";
      newProperties.put(key,props.getProperty(key));
    }
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    for (    String key : STRUTS_PROPERTIES) {
      key+=""String_Node_Str"";
      newProperties.put(key,props.getProperty(key));
    }
  }
 else   if (webFramework.equalsIgnoreCase(""String_Node_Str"")) {
    for (    String key : TAPESTRY_PROPERTIES) {
      key+=""String_Node_Str"";
      newProperties.put(key,props.getProperty(key));
    }
  }
  newProperties.put(getDaoFramework() + ""String_Node_Str"",props.getProperty(getDaoFramework() + ""String_Node_Str""));
  if (daoFramework.equalsIgnoreCase(""String_Node_Str"")) {
    newProperties.put(""String_Node_Str"",props.getProperty(""String_Node_Str""));
  }
  return newProperties;
}"
85425,"public void execute() throws MojoExecutionException, MojoFailureException {
  if (!project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    String errorMsg=""String_Node_Str"";
    throw new MojoFailureException(errorMsg);
  }
  String appfuseVersion=project.getProperties().getProperty(""String_Node_Str"");
  if (appfuseVersion != null && !appfuseVersion.endsWith(""String_Node_Str"") && tag.equals(""String_Node_Str"")) {
    tag=""String_Node_Str"" + appfuseVersion.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  }
  daoFramework=project.getProperties().getProperty(""String_Node_Str"");
  webFramework=project.getProperties().getProperty(""String_Node_Str"");
  if (project.getPackaging().equals(""String_Node_Str"") || (project.getPackaging().equals(""String_Node_Str"") && project.getParent() == null)) {
    log(""String_Node_Str"");
    export(""String_Node_Str"");
    export(""String_Node_Str"" + daoFramework + ""String_Node_Str"");
    log(""String_Node_Str"");
    export(""String_Node_Str"");
  }
  if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    log(""String_Node_Str"");
    export(""String_Node_Str"");
    log(""String_Node_Str"" + webFramework + ""String_Node_Str"");
    export(""String_Node_Str"" + webFramework + ""String_Node_Str"");
  }
  log(""String_Node_Str"");
  removeWarpathPlugin(new File(""String_Node_Str""));
  List dependencies=project.getOriginalModel().getDependencies();
  List<Dependency> newDependencies=new ArrayList<Dependency>();
  for (  Object dependency : dependencies) {
    Dependency dep=(Dependency)dependency;
    if (!dep.getGroupId().equals(APPFUSE_GROUP_ID)) {
      newDependencies.add(dep);
    }
  }
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
  newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework);
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
  newDependencies=addModuleDependencies(newDependencies,webFramework,""String_Node_Str"" + webFramework,true);
  for (  Dependency dep : newDependencies) {
    if (dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"")) {
      dep.setOptional(true);
      dep.setScope(null);
    }
  }
  Collections.sort(newDependencies,new BeanComparator(""String_Node_Str""));
  project.getOriginalModel().setDependencies(newDependencies);
  project.getOriginalModel().setProperties(getAppFuseProperties());
  StringWriter writer=new StringWriter();
  try {
    project.writeOriginalModel(writer);
    File pom=new File(""String_Node_Str"");
    if (pom.exists()) {
      pom.delete();
    }
    FileWriter fw=new FileWriter(pom);
    fw.write(writer.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  String pomXml=writer.toString();
  int startTag=pomXml.indexOf(""String_Node_Str"");
  String dependencyXml=pomXml.substring(startTag,pomXml.indexOf(""String_Node_Str"",startTag));
  dependencyXml=dependencyXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  dependencyXml=""String_Node_Str"" + dependencyXml;
  try {
    String originalPom=FileUtils.readFileToString(new File(""String_Node_Str""));
    startTag=originalPom.indexOf(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(originalPom.substring(0,startTag));
    sb.append(dependencyXml);
    sb.append(originalPom.substring(originalPom.indexOf(""String_Node_Str"",startTag)));
    startTag=pomXml.indexOf(""String_Node_Str"");
    String propertiesXml=pomXml.substring(startTag + 16,pomXml.lastIndexOf(""String_Node_Str""));
    propertiesXml=propertiesXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
    propertiesXml=""String_Node_Str"" + project.getProperties().getProperty(""String_Node_Str"") + ""String_Node_Str""+ propertiesXml;
    propertiesXml=""String_Node_Str"" + propertiesXml;
    String pomWithProperties=sb.toString().replaceFirst(""String_Node_Str"",propertiesXml);
    FileUtils.writeStringToFile(new File(""String_Node_Str""),pomWithProperties);
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  File pom=new File(""String_Node_Str"");
  if (pom.exists()) {
    pom.delete();
  }
}","public void execute() throws MojoExecutionException, MojoFailureException {
  if (!project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    String errorMsg=""String_Node_Str"";
    throw new MojoFailureException(errorMsg);
  }
  String appfuseVersion=project.getProperties().getProperty(""String_Node_Str"");
  if (appfuseVersion != null && !appfuseVersion.endsWith(""String_Node_Str"") && tag.equals(""String_Node_Str"")) {
    tag=""String_Node_Str"" + appfuseVersion.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  }
  daoFramework=project.getProperties().getProperty(""String_Node_Str"");
  webFramework=project.getProperties().getProperty(""String_Node_Str"");
  if (project.getPackaging().equals(""String_Node_Str"") || (project.getPackaging().equals(""String_Node_Str"") && project.getParent() == null)) {
    log(""String_Node_Str"");
    export(""String_Node_Str"");
    export(""String_Node_Str"" + daoFramework + ""String_Node_Str"");
    if (daoFramework.equalsIgnoreCase(""String_Node_Str"")) {
      File duplicateFile=new File(getFilePath(""String_Node_Str""));
      if (duplicateFile.exists()) {
        log(""String_Node_Str"");
        try {
          FileUtils.forceDeleteOnExit(duplicateFile);
        }
 catch (        IOException io) {
          getLog().error(""String_Node_Str"");
        }
      }
    }
 else     if (daoFramework.equalsIgnoreCase(""String_Node_Str"")) {
      File duplicateFile=new File(getFilePath(""String_Node_Str""));
      if (duplicateFile.exists()) {
        log(""String_Node_Str"");
        try {
          FileUtils.forceDeleteOnExit(duplicateFile);
        }
 catch (        IOException io) {
          getLog().error(""String_Node_Str"");
        }
      }
    }
    log(""String_Node_Str"");
    export(""String_Node_Str"");
  }
  if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    log(""String_Node_Str"");
    export(""String_Node_Str"");
    log(""String_Node_Str"" + webFramework + ""String_Node_Str"");
    export(""String_Node_Str"" + webFramework + ""String_Node_Str"");
  }
  log(""String_Node_Str"");
  removeWarpathPlugin(new File(""String_Node_Str""));
  List dependencies=project.getOriginalModel().getDependencies();
  List<Dependency> newDependencies=new ArrayList<Dependency>();
  for (  Object dependency : dependencies) {
    Dependency dep=(Dependency)dependency;
    if (!dep.getGroupId().equals(APPFUSE_GROUP_ID)) {
      newDependencies.add(dep);
    }
  }
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
  newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework);
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
  newDependencies=addModuleDependencies(newDependencies,webFramework,""String_Node_Str"" + webFramework,true);
  for (  Dependency dep : newDependencies) {
    if (dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"")) {
      dep.setOptional(true);
      dep.setScope(null);
    }
  }
  Collections.sort(newDependencies,new BeanComparator(""String_Node_Str""));
  project.getOriginalModel().setDependencies(newDependencies);
  project.getOriginalModel().setProperties(getAppFuseProperties());
  StringWriter writer=new StringWriter();
  try {
    project.writeOriginalModel(writer);
    File pom=new File(""String_Node_Str"");
    if (pom.exists()) {
      pom.delete();
    }
    FileWriter fw=new FileWriter(pom);
    fw.write(writer.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  String pomXml=writer.toString();
  int startTag=pomXml.indexOf(""String_Node_Str"");
  String dependencyXml=pomXml.substring(startTag,pomXml.indexOf(""String_Node_Str"",startTag));
  dependencyXml=dependencyXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  dependencyXml=""String_Node_Str"" + dependencyXml;
  try {
    String originalPom=FileUtils.readFileToString(new File(""String_Node_Str""));
    startTag=originalPom.indexOf(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(originalPom.substring(0,startTag));
    sb.append(dependencyXml);
    sb.append(originalPom.substring(originalPom.indexOf(""String_Node_Str"",startTag)));
    startTag=pomXml.indexOf(""String_Node_Str"");
    String propertiesXml=pomXml.substring(startTag + 16,pomXml.lastIndexOf(""String_Node_Str""));
    propertiesXml=propertiesXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
    propertiesXml=""String_Node_Str"" + project.getProperties().getProperty(""String_Node_Str"") + ""String_Node_Str""+ propertiesXml;
    propertiesXml=""String_Node_Str"" + propertiesXml;
    String pomWithProperties=sb.toString().replaceFirst(""String_Node_Str"",propertiesXml);
    FileUtils.writeStringToFile(new File(""String_Node_Str""),pomWithProperties);
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  File pom=new File(""String_Node_Str"");
  if (pom.exists()) {
    pom.delete();
  }
}"
85426,"private String getDaoFramework(){
  String fw=project.getProperties().getProperty(""String_Node_Str"");
  if (fw.equalsIgnoreCase(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else {
    return fw;
  }
}","private String getDaoFramework(){
  if (daoFramework.equalsIgnoreCase(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else {
    return daoFramework;
  }
}"
85427,"public void execute() throws MojoExecutionException, MojoFailureException {
  if (!project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    String errorMsg=""String_Node_Str"";
    throw new MojoFailureException(errorMsg);
  }
  String appfuseVersion=project.getProperties().getProperty(""String_Node_Str"");
  if (appfuseVersion != null && !appfuseVersion.endsWith(""String_Node_Str"") && tag.equals(""String_Node_Str"")) {
    tag=""String_Node_Str"" + appfuseVersion.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  daoFramework=project.getProperties().getProperty(""String_Node_Str"");
  webFramework=project.getProperties().getProperty(""String_Node_Str"");
  if (project.getPackaging().equals(""String_Node_Str"") || (project.getPackaging().equals(""String_Node_Str"") && project.getParent() == null)) {
    log(""String_Node_Str"");
    export(""String_Node_Str"");
    export(""String_Node_Str"" + getDaoFramework() + ""String_Node_Str"");
    log(""String_Node_Str"");
    export(""String_Node_Str"");
  }
  if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    log(""String_Node_Str"");
    export(""String_Node_Str"");
    log(""String_Node_Str"" + webFramework + ""String_Node_Str"");
    export(""String_Node_Str"" + webFramework + ""String_Node_Str"");
  }
  log(""String_Node_Str"");
  removeWarpathPlugin(new File(""String_Node_Str""));
  List dependencies=project.getOriginalModel().getDependencies();
  List<Dependency> newDependencies=new ArrayList<Dependency>();
  for (  Object dependency : dependencies) {
    Dependency dep=(Dependency)dependency;
    if (!dep.getGroupId().equals(APPFUSE_GROUP_ID)) {
      newDependencies.add(dep);
    }
  }
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
  newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework);
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
  newDependencies=addModuleDependencies(newDependencies,webFramework,""String_Node_Str"" + webFramework,true);
  for (  Dependency dep : newDependencies) {
    if (dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"")) {
      dep.setOptional(true);
      dep.setScope(null);
    }
  }
  Collections.sort(newDependencies,new BeanComparator(""String_Node_Str""));
  project.getOriginalModel().setDependencies(newDependencies);
  project.getOriginalModel().setProperties(getAppFuseProperties());
  StringWriter writer=new StringWriter();
  try {
    project.writeOriginalModel(writer);
    File pom=new File(""String_Node_Str"");
    if (pom.exists()) {
      pom.delete();
    }
    FileWriter fw=new FileWriter(pom);
    fw.write(writer.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  String pomXml=writer.toString();
  int startTag=pomXml.indexOf(""String_Node_Str"");
  String dependencyXml=pomXml.substring(startTag,pomXml.indexOf(""String_Node_Str"",startTag));
  dependencyXml=dependencyXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  dependencyXml=""String_Node_Str"" + dependencyXml;
  try {
    String originalPom=FileUtils.readFileToString(new File(""String_Node_Str""));
    startTag=originalPom.indexOf(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(originalPom.substring(0,startTag));
    sb.append(dependencyXml);
    sb.append(originalPom.substring(originalPom.indexOf(""String_Node_Str"",startTag)));
    startTag=pomXml.indexOf(""String_Node_Str"");
    String propertiesXml=pomXml.substring(startTag + 16,pomXml.lastIndexOf(""String_Node_Str""));
    propertiesXml=propertiesXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
    propertiesXml=""String_Node_Str"" + project.getProperties().getProperty(""String_Node_Str"") + ""String_Node_Str""+ propertiesXml;
    propertiesXml=""String_Node_Str"" + propertiesXml;
    String pomWithProperties=sb.toString().replaceFirst(""String_Node_Str"",propertiesXml);
    FileUtils.writeStringToFile(new File(""String_Node_Str""),pomWithProperties);
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  File pom=new File(""String_Node_Str"");
  if (pom.exists()) {
    pom.delete();
  }
}","public void execute() throws MojoExecutionException, MojoFailureException {
  if (!project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    String errorMsg=""String_Node_Str"";
    throw new MojoFailureException(errorMsg);
  }
  String appfuseVersion=project.getProperties().getProperty(""String_Node_Str"");
  if (appfuseVersion != null && !appfuseVersion.endsWith(""String_Node_Str"") && tag.equals(""String_Node_Str"")) {
    tag=""String_Node_Str"" + appfuseVersion.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  daoFramework=project.getProperties().getProperty(""String_Node_Str"");
  webFramework=project.getProperties().getProperty(""String_Node_Str"");
  if (project.getPackaging().equals(""String_Node_Str"") || (project.getPackaging().equals(""String_Node_Str"") && project.getParent() == null)) {
    log(""String_Node_Str"");
    export(""String_Node_Str"");
    export(""String_Node_Str"" + daoFramework + ""String_Node_Str"");
    log(""String_Node_Str"");
    export(""String_Node_Str"");
  }
  if (project.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
    log(""String_Node_Str"");
    export(""String_Node_Str"");
    log(""String_Node_Str"" + webFramework + ""String_Node_Str"");
    export(""String_Node_Str"" + webFramework + ""String_Node_Str"");
  }
  log(""String_Node_Str"");
  removeWarpathPlugin(new File(""String_Node_Str""));
  List dependencies=project.getOriginalModel().getDependencies();
  List<Dependency> newDependencies=new ArrayList<Dependency>();
  for (  Object dependency : dependencies) {
    Dependency dep=(Dependency)dependency;
    if (!dep.getGroupId().equals(APPFUSE_GROUP_ID)) {
      newDependencies.add(dep);
    }
  }
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
  newDependencies=addModuleDependencies(newDependencies,daoFramework,""String_Node_Str"" + daoFramework);
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
  newDependencies=addModuleDependencies(newDependencies,""String_Node_Str"",""String_Node_Str"");
  newDependencies=addModuleDependencies(newDependencies,webFramework,""String_Node_Str"" + webFramework,true);
  for (  Dependency dep : newDependencies) {
    if (dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"") || dep.getArtifactId().equals(""String_Node_Str"")) {
      dep.setOptional(true);
      dep.setScope(null);
    }
  }
  Collections.sort(newDependencies,new BeanComparator(""String_Node_Str""));
  project.getOriginalModel().setDependencies(newDependencies);
  project.getOriginalModel().setProperties(getAppFuseProperties());
  StringWriter writer=new StringWriter();
  try {
    project.writeOriginalModel(writer);
    File pom=new File(""String_Node_Str"");
    if (pom.exists()) {
      pom.delete();
    }
    FileWriter fw=new FileWriter(pom);
    fw.write(writer.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  String pomXml=writer.toString();
  int startTag=pomXml.indexOf(""String_Node_Str"");
  String dependencyXml=pomXml.substring(startTag,pomXml.indexOf(""String_Node_Str"",startTag));
  dependencyXml=dependencyXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  dependencyXml=""String_Node_Str"" + dependencyXml;
  try {
    String originalPom=FileUtils.readFileToString(new File(""String_Node_Str""));
    startTag=originalPom.indexOf(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(originalPom.substring(0,startTag));
    sb.append(dependencyXml);
    sb.append(originalPom.substring(originalPom.indexOf(""String_Node_Str"",startTag)));
    startTag=pomXml.indexOf(""String_Node_Str"");
    String propertiesXml=pomXml.substring(startTag + 16,pomXml.lastIndexOf(""String_Node_Str""));
    propertiesXml=propertiesXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
    propertiesXml=""String_Node_Str"" + project.getProperties().getProperty(""String_Node_Str"") + ""String_Node_Str""+ propertiesXml;
    propertiesXml=""String_Node_Str"" + propertiesXml;
    String pomWithProperties=sb.toString().replaceFirst(""String_Node_Str"",propertiesXml);
    FileUtils.writeStringToFile(new File(""String_Node_Str""),pomWithProperties);
  }
 catch (  IOException ex) {
    getLog().error(""String_Node_Str"" + ex.getMessage(),ex);
    throw new MojoFailureException(ex.getMessage());
  }
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  File pom=new File(""String_Node_Str"");
  if (pom.exists()) {
    pom.delete();
  }
}"
85428,"protected void addError(IValidationDelegate delegate,String componentId,String message,ValidationConstraint constraint){
  IFormComponent component=(IFormComponent)getComponent(componentId);
  delegate.setFormComponent(component);
  delegate.record(message,constraint);
}","protected void addError(String componentId,String message,ValidationConstraint constraint){
  IFormComponent component=(IFormComponent)getComponent(componentId);
  delegate.setFormComponent(component);
  delegate.record(message,constraint);
}"
85429,"public void save(IRequestCycle cycle) throws IOException {
  log.debug(""String_Node_Str"");
  IValidationDelegate delegate=getDelegate();
  if (!StringUtils.equals(getUser().getPassword(),getUser().getConfirmPassword())) {
    addError(delegate,""String_Node_Str"",getText(""String_Node_Str"",new Object[]{getText(""String_Node_Str""),getText(""String_Node_Str"")}),ValidationConstraint.CONSISTENCY);
  }
  if (delegate.getHasErrors()) {
    return;
  }
  User user=getUser();
  Boolean encrypt=(Boolean)getConfiguration().get(Constants.ENCRYPT_PASSWORD);
  if (encrypt != null && encrypt) {
    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
    if (algorithm == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      algorithm=""String_Node_Str"";
    }
    user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
  }
  user.setEnabled(true);
  user.addRole(getRoleManager().getRole(Constants.USER_ROLE));
  try {
    getUserManager().saveUser(user);
  }
 catch (  UserExistsException e) {
    log.warn(e.getMessage());
    addError(delegate,""String_Node_Str"",getMessages().format(""String_Node_Str"",user.getUsername(),user.getEmail()),ValidationConstraint.CONSISTENCY);
    user.setPassword(user.getConfirmPassword());
    return;
  }
  getSession().setAttribute(Constants.REGISTERED,Boolean.TRUE);
  Authentication auth=new UsernamePasswordAuthenticationToken(user.getUsername(),user.getConfirmPassword());
  try {
    ApplicationContext ctx=WebApplicationContextUtils.getWebApplicationContext(getSession().getServletContext());
    if (ctx != null) {
      ProviderManager authenticationManager=(ProviderManager)ctx.getBean(""String_Node_Str"");
      SecurityContextHolder.getContext().setAuthentication(authenticationManager.doAuthentication(auth));
    }
  }
 catch (  NoSuchBeanDefinitionException n) {
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  }
  SimpleMailMessage message=getMailMessage();
  message.setTo(user.getFullName() + ""String_Node_Str"" + user.getEmail()+ ""String_Node_Str"");
  StringBuffer msg=new StringBuffer();
  msg.append(getText(""String_Node_Str""));
  msg.append(""String_Node_Str"" + getText(""String_Node_Str""));
  msg.append(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  msg.append(getText(""String_Node_Str"") + ""String_Node_Str"");
  msg.append(user.getPassword());
  msg.append(""String_Node_Str"" + RequestUtil.getAppURL(getRequest()));
  message.setText(msg.toString());
  message.setSubject(getText(""String_Node_Str""));
  getMailEngine().send(message);
  getSession().setAttribute(""String_Node_Str"",getText(""String_Node_Str""));
  getResponse().sendRedirect(getRequest().getContextPath());
}","public void save(IRequestCycle cycle) throws IOException {
  log.debug(""String_Node_Str"");
  IValidationDelegate delegate=getDelegate();
  if (!StringUtils.equals(getUser().getPassword(),getUser().getConfirmPassword())) {
    addError(""String_Node_Str"",getText(""String_Node_Str"",new Object[]{getText(""String_Node_Str""),getText(""String_Node_Str"")}),ValidationConstraint.CONSISTENCY);
  }
  if (delegate.getHasErrors()) {
    return;
  }
  User user=getUser();
  Boolean encrypt=(Boolean)getConfiguration().get(Constants.ENCRYPT_PASSWORD);
  if (encrypt != null && encrypt) {
    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
    if (algorithm == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      algorithm=""String_Node_Str"";
    }
    user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
  }
  user.setEnabled(true);
  user.addRole(getRoleManager().getRole(Constants.USER_ROLE));
  try {
    getUserManager().saveUser(user);
  }
 catch (  UserExistsException e) {
    log.warn(e.getMessage());
    addError(""String_Node_Str"",getMessages().format(""String_Node_Str"",user.getUsername(),user.getEmail()),ValidationConstraint.CONSISTENCY);
    user.setPassword(user.getConfirmPassword());
    return;
  }
  getSession().setAttribute(Constants.REGISTERED,Boolean.TRUE);
  Authentication auth=new UsernamePasswordAuthenticationToken(user.getUsername(),user.getConfirmPassword());
  try {
    ApplicationContext ctx=WebApplicationContextUtils.getWebApplicationContext(getSession().getServletContext());
    if (ctx != null) {
      ProviderManager authenticationManager=(ProviderManager)ctx.getBean(""String_Node_Str"");
      SecurityContextHolder.getContext().setAuthentication(authenticationManager.doAuthentication(auth));
    }
  }
 catch (  NoSuchBeanDefinitionException n) {
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  }
  SimpleMailMessage message=getMailMessage();
  message.setTo(user.getFullName() + ""String_Node_Str"" + user.getEmail()+ ""String_Node_Str"");
  StringBuffer msg=new StringBuffer();
  msg.append(getText(""String_Node_Str""));
  msg.append(""String_Node_Str"" + getText(""String_Node_Str""));
  msg.append(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  msg.append(getText(""String_Node_Str"") + ""String_Node_Str"");
  msg.append(user.getPassword());
  msg.append(""String_Node_Str"" + RequestUtil.getAppURL(getRequest()));
  message.setText(msg.toString());
  message.setSubject(getText(""String_Node_Str""));
  getMailEngine().send(message);
  getSession().setAttribute(""String_Node_Str"",getText(""String_Node_Str""));
  getResponse().sendRedirect(getRequest().getContextPath());
}"
85430,"public ILink save(IRequestCycle cycle) throws UserExistsException {
  log.debug(""String_Node_Str"");
  HttpServletRequest request=getRequest();
  IValidationDelegate delegate=getDelegate();
  if (!StringUtils.equals(getUser().getPassword(),getUser().getConfirmPassword())) {
    addError(delegate,""String_Node_Str"",getMessages().format(""String_Node_Str"",getText(""String_Node_Str""),getText(""String_Node_Str"")),ValidationConstraint.CONSISTENCY);
  }
  if (delegate.getHasErrors()) {
    return null;
  }
  String password=getUser().getPassword();
  String originalPassword=getRequest().getParameter(""String_Node_Str"");
  Boolean encrypt=(Boolean)getConfiguration().get(Constants.ENCRYPT_PASSWORD);
  boolean doEncrypt=(encrypt != null) && encrypt.booleanValue();
  if (doEncrypt && (StringUtils.equals(getRequest().getParameter(""String_Node_Str""),""String_Node_Str"") || !StringUtils.equals(""String_Node_Str"" + password,originalPassword)) || (""String_Node_Str"".equals(request.getParameter((""String_Node_Str""))))) {
    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
    if (algorithm == null) {
      log.debug(""String_Node_Str"");
      algorithm=""String_Node_Str"";
    }
    getUser().setPassword(StringUtil.encodePassword(password,algorithm));
  }
  boolean fromList=StringUtils.equals(getFrom(),""String_Node_Str"");
  String[] userRoles;
  if (fromList) {
    userRoles=getRequest().getParameterValues(""String_Node_Str"");
  }
 else {
    userRoles=getRequest().getParameterValues(""String_Node_Str"");
  }
  User user=getUser();
  UserManager userManager=getUserManager();
  user.getRoles().clear();
  for (int i=0; (userRoles != null) && (i < userRoles.length); i++) {
    String roleName=userRoles[i];
    user.addRole(getRoleManager().getRole(roleName));
  }
  Integer originalVersion=user.getVersion();
  try {
    userManager.saveUser(user);
  }
 catch (  UserExistsException e) {
    log.warn(e.getMessage());
    addError(delegate,""String_Node_Str"",getMessages().format(""String_Node_Str"",user.getUsername(),user.getEmail()),ValidationConstraint.CONSISTENCY);
    getUser().setPassword(user.getConfirmPassword());
    getUser().setVersion(originalVersion);
    return null;
  }
  if (!fromList && user.getUsername().equals(getRequest().getRemoteUser())) {
    MainMenu nextPage=(MainMenu)cycle.getPage(""String_Node_Str"");
    nextPage.setMessage(getText(""String_Node_Str"",user.getFullName()));
    return getEngineService().getLink(false,nextPage.getPageName());
  }
 else {
    if (""String_Node_Str"".equals(request.getParameter((""String_Node_Str"")))) {
      sendNewUserEmail(request,user);
      UserList nextPage=(UserList)cycle.getPage(""String_Node_Str"");
      nextPage.setMessage(getText(""String_Node_Str"",user.getFullName()));
      return getEngineService().getLink(false,nextPage.getPageName());
    }
 else {
      setMessage(getText(""String_Node_Str"",user.getFullName()));
      return null;
    }
  }
}","public ILink save(IRequestCycle cycle) throws UserExistsException {
  log.debug(""String_Node_Str"");
  HttpServletRequest request=getRequest();
  IValidationDelegate delegate=getDelegate();
  if (!StringUtils.equals(getUser().getPassword(),getUser().getConfirmPassword())) {
    addError(""String_Node_Str"",getMessages().format(""String_Node_Str"",getText(""String_Node_Str""),getText(""String_Node_Str"")),ValidationConstraint.CONSISTENCY);
  }
  if (delegate.getHasErrors()) {
    return null;
  }
  String password=getUser().getPassword();
  String originalPassword=getRequest().getParameter(""String_Node_Str"");
  Boolean encrypt=(Boolean)getConfiguration().get(Constants.ENCRYPT_PASSWORD);
  boolean doEncrypt=(encrypt != null) && encrypt;
  if (doEncrypt && (StringUtils.equals(getRequest().getParameter(""String_Node_Str""),""String_Node_Str"") || !StringUtils.equals(""String_Node_Str"" + password,originalPassword)) || (""String_Node_Str"".equals(request.getParameter((""String_Node_Str""))))) {
    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
    if (algorithm == null) {
      log.debug(""String_Node_Str"");
      algorithm=""String_Node_Str"";
    }
    getUser().setPassword(StringUtil.encodePassword(password,algorithm));
  }
  boolean fromList=StringUtils.equals(getFrom(),""String_Node_Str"");
  String[] userRoles;
  if (fromList) {
    userRoles=getRequest().getParameterValues(""String_Node_Str"");
  }
 else {
    userRoles=getRequest().getParameterValues(""String_Node_Str"");
  }
  User user=getUser();
  UserManager userManager=getUserManager();
  user.getRoles().clear();
  for (int i=0; (userRoles != null) && (i < userRoles.length); i++) {
    String roleName=userRoles[i];
    user.addRole(getRoleManager().getRole(roleName));
  }
  Integer originalVersion=user.getVersion();
  try {
    userManager.saveUser(user);
  }
 catch (  UserExistsException e) {
    log.warn(e.getMessage());
    addError(""String_Node_Str"",getMessages().format(""String_Node_Str"",user.getUsername(),user.getEmail()),ValidationConstraint.CONSISTENCY);
    getUser().setPassword(user.getConfirmPassword());
    getUser().setVersion(originalVersion);
    return null;
  }
  if (!fromList && user.getUsername().equals(getRequest().getRemoteUser())) {
    MainMenu nextPage=(MainMenu)cycle.getPage(""String_Node_Str"");
    nextPage.setMessage(getText(""String_Node_Str"",user.getFullName()));
    return getEngineService().getLink(false,nextPage.getPageName());
  }
 else {
    if (""String_Node_Str"".equals(request.getParameter((""String_Node_Str"")))) {
      sendNewUserEmail(request,user);
      UserList nextPage=(UserList)cycle.getPage(""String_Node_Str"");
      nextPage.setMessage(getText(""String_Node_Str"",user.getFullName()));
      return getEngineService().getLink(false,nextPage.getPageName());
    }
 else {
      setMessage(getText(""String_Node_Str"",user.getFullName()));
      return null;
    }
  }
}"
85431,"protected Object formBackingObject(HttpServletRequest request) throws Exception {
  if (!isFormSubmission(request)) {
    String username=request.getParameter(""String_Node_Str"");
    log.debug(""String_Node_Str"");
    AuthenticationTrustResolver resolver=new AuthenticationTrustResolverImpl();
    SecurityContext ctx=SecurityContextHolder.getContext();
    if (ctx.getAuthentication() != null) {
      Authentication auth=ctx.getAuthentication();
      if (resolver.isRememberMe(auth)) {
        request.getSession().setAttribute(""String_Node_Str"",""String_Node_Str"");
        saveMessage(request,getText(""String_Node_Str"",request.getLocale()));
      }
    }
    User user=null;
    if (request.getRequestURI().indexOf(""String_Node_Str"") > -1) {
      user=getUserManager().getUserByUsername(request.getRemoteUser());
    }
 else     if (!StringUtils.isBlank(username) && !""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
      user=getUserManager().getUserByUsername(username);
    }
 else {
      user=new User();
      user.addRole(new Role(Constants.USER_ROLE));
    }
    user.setConfirmPassword(user.getPassword());
    return user;
  }
  return super.formBackingObject(request);
}","protected Object formBackingObject(HttpServletRequest request) throws Exception {
  if (!isFormSubmission(request)) {
    String username=request.getParameter(""String_Node_Str"");
    log.debug(""String_Node_Str"");
    AuthenticationTrustResolver resolver=new AuthenticationTrustResolverImpl();
    SecurityContext ctx=SecurityContextHolder.getContext();
    if (ctx.getAuthentication() != null) {
      Authentication auth=ctx.getAuthentication();
      if (resolver.isRememberMe(auth)) {
        request.getSession().setAttribute(""String_Node_Str"",""String_Node_Str"");
        saveMessage(request,getText(""String_Node_Str"",request.getLocale()));
      }
    }
    User user;
    if (request.getRequestURI().indexOf(""String_Node_Str"") > -1) {
      user=getUserManager().getUserByUsername(request.getRemoteUser());
    }
 else     if (!StringUtils.isBlank(username) && !""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
      user=getUserManager().getUserByUsername(username);
    }
 else {
      user=new User();
      user.addRole(new Role(Constants.USER_ROLE));
    }
    user.setConfirmPassword(user.getPassword());
    return user;
  }
 else   if (request.getParameter(""String_Node_Str"") != null && !""String_Node_Str"".equals(request.getParameter(""String_Node_Str"")) && request.getParameter(""String_Node_Str"") == null) {
    return getUserManager().getUser(request.getParameter(""String_Node_Str""));
  }
  return super.formBackingObject(request);
}"
85432,"public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  User user=(User)command;
  Locale locale=request.getLocale();
  if (request.getParameter(""String_Node_Str"") != null) {
    getUserManager().removeUser(user.getId().toString());
    saveMessage(request,getText(""String_Node_Str"",user.getFullName(),locale));
    return new ModelAndView(getSuccessView());
  }
 else {
    Boolean encrypt=(Boolean)getConfiguration().get(Constants.ENCRYPT_PASSWORD);
    if (StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"") && (encrypt != null && encrypt.booleanValue())) {
      String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
      if (algorithm == null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"");
        }
        algorithm=""String_Node_Str"";
      }
      user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
    }
    String[] userRoles=request.getParameterValues(""String_Node_Str"");
    if (userRoles != null) {
      user.getRoles().clear();
      for (int i=0; i < userRoles.length; i++) {
        String roleName=userRoles[i];
        user.addRole(roleManager.getRole(roleName));
      }
    }
    Integer originalVersion=user.getVersion();
    try {
      getUserManager().saveUser(user);
    }
 catch (    UserExistsException e) {
      log.warn(e.getMessage());
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()},""String_Node_Str"");
      user.setPassword(user.getConfirmPassword());
      user.setVersion(originalVersion);
      return showForm(request,response,errors);
    }
    if (!StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
      saveMessage(request,getText(""String_Node_Str"",user.getFullName(),locale));
      return new ModelAndView(new RedirectView(""String_Node_Str""));
    }
 else {
      if (StringUtils.isBlank(request.getParameter(""String_Node_Str""))) {
        saveMessage(request,getText(""String_Node_Str"",user.getFullName(),locale));
        message.setSubject(getText(""String_Node_Str"",locale));
        sendUserMessage(user,getText(""String_Node_Str"",user.getFullName(),locale),RequestUtil.getAppURL(request));
        return showNewForm(request,response);
      }
 else {
        saveMessage(request,getText(""String_Node_Str"",user.getFullName(),locale));
      }
    }
  }
  return showForm(request,response,errors);
}","public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  User user=(User)command;
  Locale locale=request.getLocale();
  if (request.getParameter(""String_Node_Str"") != null) {
    getUserManager().removeUser(user.getId().toString());
    saveMessage(request,getText(""String_Node_Str"",user.getFullName(),locale));
    return new ModelAndView(getSuccessView());
  }
 else {
    Boolean encrypt=(Boolean)getConfiguration().get(Constants.ENCRYPT_PASSWORD);
    if (StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"") && (encrypt != null && encrypt)) {
      String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
      if (algorithm == null) {
        log.debug(""String_Node_Str"");
        algorithm=""String_Node_Str"";
      }
      user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
    }
    if (request.isUserInRole(Constants.ADMIN_ROLE)) {
      String[] userRoles=request.getParameterValues(""String_Node_Str"");
      if (userRoles != null) {
        user.getRoles().clear();
        for (        String roleName : userRoles) {
          user.addRole(roleManager.getRole(roleName));
        }
      }
    }
    Integer originalVersion=user.getVersion();
    try {
      getUserManager().saveUser(user);
    }
 catch (    UserExistsException e) {
      log.warn(e.getMessage());
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()},""String_Node_Str"");
      user.setPassword(user.getConfirmPassword());
      user.setVersion(originalVersion);
      return showForm(request,response,errors);
    }
    if (!StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
      saveMessage(request,getText(""String_Node_Str"",user.getFullName(),locale));
      return new ModelAndView(new RedirectView(""String_Node_Str""));
    }
 else {
      if (StringUtils.isBlank(request.getParameter(""String_Node_Str""))) {
        saveMessage(request,getText(""String_Node_Str"",user.getFullName(),locale));
        message.setSubject(getText(""String_Node_Str"",locale));
        sendUserMessage(user,getText(""String_Node_Str"",user.getFullName(),locale),RequestUtil.getAppURL(request));
        return showNewForm(request,response);
      }
 else {
        saveMessage(request,getText(""String_Node_Str"",user.getFullName(),locale));
      }
    }
  }
  return showForm(request,response,errors);
}"
85433,"public List getUsers(){
  return userManager.getUsers(null);
}","public List getUsers(){
  List users=userManager.getUsers(null);
  Comparator comparator=new BeanComparator(sortColumn);
  if (!ascending) {
    comparator=new ReverseComparator(comparator);
  }
  Collections.sort(users,comparator);
  return users;
}"
85434,"public void objectToRequestParameters(Object o,MockHttpServletRequest request,String prefix) throws Exception {
  Class clazz=o.getClass();
  Field[] fields=getDeclaredFields(clazz);
  AccessibleObject.setAccessible(fields,true);
  for (int i=0; i < fields.length; i++) {
    Object field=(fields[i].get(o));
    if (field != null) {
      if (field instanceof BaseObject) {
        objectToRequestParameters(field,request,fields[i].getName());
      }
 else       if (!(field instanceof List) && !(field instanceof Set)) {
        String paramName=fields[i].getName();
        if (prefix != null) {
          paramName=prefix + ""String_Node_Str"" + paramName;
        }
        String paramValue=String.valueOf(fields[i].get(o));
        if (field instanceof java.util.Date) {
          paramValue=DateUtil.convertDateToString((Date)fields[i].get(o));
          if (""String_Node_Str"".equals(paramValue))           paramValue=""String_Node_Str"";
        }
        request.addParameter(paramName,paramValue);
      }
    }
  }
}","public void objectToRequestParameters(Object o,MockHttpServletRequest request,String prefix) throws Exception {
  Class clazz=o.getClass();
  Field[] fields=getDeclaredFields(clazz);
  AccessibleObject.setAccessible(fields,true);
  for (int i=0; i < fields.length; i++) {
    Object field=(fields[i].get(o));
    if (field != null) {
      if (field instanceof BaseObject) {
        if (prefix != null) {
          objectToRequestParameters(field,request,prefix + ""String_Node_Str"" + fields[i].getName());
        }
 else {
          objectToRequestParameters(field,request,fields[i].getName());
        }
      }
 else       if (!(field instanceof List) && !(field instanceof Set)) {
        String paramName=fields[i].getName();
        if (prefix != null) {
          paramName=prefix + ""String_Node_Str"" + paramName;
        }
        String paramValue=String.valueOf(fields[i].get(o));
        if (field instanceof java.util.Date) {
          paramValue=DateUtil.convertDateToString((Date)fields[i].get(o));
          if (""String_Node_Str"".equals(paramValue))           paramValue=""String_Node_Str"";
        }
        request.addParameter(paramName,paramValue);
      }
    }
  }
}"
85435,"private void addUserRoles(final User user){
  if (user.getRoles() != null) {
    for (Iterator it=user.getRoles().iterator(); it.hasNext(); ) {
      Role role=(Role)it.next();
      Map newRole=new HashMap();
      newRole.put(""String_Node_Str"",user.getId());
      newRole.put(""String_Node_Str"",role.getId());
      List userRoles=getSqlMapClientTemplate().queryForList(""String_Node_Str"",user.getUsername());
      if (userRoles.isEmpty()) {
        getSqlMapClientTemplate().update(""String_Node_Str"",newRole);
      }
    }
  }
}","private void addUserRoles(final User user){
  if (user.getRoles() != null) {
    for (Iterator it=user.getRoles().iterator(); it.hasNext(); ) {
      Role role=(Role)it.next();
      Map newRole=new HashMap();
      newRole.put(""String_Node_Str"",user.getId());
      newRole.put(""String_Node_Str"",role.getId());
      List userRoles=getSqlMapClientTemplate().queryForList(""String_Node_Str"",user.getId());
      if (userRoles.isEmpty()) {
        getSqlMapClientTemplate().update(""String_Node_Str"",newRole);
      }
    }
  }
}"
85436,"public void testAddExistingUser() throws Exception {
  logger.debug(""String_Node_Str"");
  User user=manager.getUser(""String_Node_Str"");
  User user2=new User();
  BeanUtils.copyProperties(user,user2);
  user2.setId(null);
  user2.setVersion(null);
  try {
    manager.saveUser(user2);
    fail(""String_Node_Str"");
  }
 catch (  UserExistsException uee) {
    assertNotNull(uee);
  }
}","public void testAddExistingUser() throws Exception {
  logger.debug(""String_Node_Str"");
  User user=manager.getUser(""String_Node_Str"");
  User user2=new User();
  BeanUtils.copyProperties(user,user2);
  user2.setId(null);
  user2.setVersion(null);
  user2.setRoles(null);
  try {
    manager.saveUser(user2);
    fail(""String_Node_Str"");
  }
 catch (  UserExistsException uee) {
    assertNotNull(uee);
  }
}"
85437,"public void testAddExistingUser() throws Exception {
  logger.debug(""String_Node_Str"");
  User user=manager.getUser(""String_Node_Str"");
  user.setUsername(""String_Node_Str"");
  user.setEmail(""String_Node_Str"");
  user.setRoles(null);
  user.setVersion(null);
  manager.saveUser(user);
  user.setId(null);
  try {
    manager.saveUser(user);
    fail(""String_Node_Str"");
  }
 catch (  UserExistsException uee) {
    assertNotNull(uee);
  }
}","public void testAddExistingUser() throws Exception {
  logger.debug(""String_Node_Str"");
  User user=manager.getUser(""String_Node_Str"");
  user.setUsername(""String_Node_Str"");
  user.setEmail(""String_Node_Str"");
  user.setRoles(null);
  user.setVersion(null);
  manager.saveUser(user);
  User user2=new User();
  BeanUtils.copyProperties(user,user2);
  user2.setId(null);
  try {
    manager.saveUser(user2);
    fail(""String_Node_Str"");
  }
 catch (  UserExistsException uee) {
    assertNotNull(uee);
  }
}"
85438,"public void testAddExistingUser() throws Exception {
  logger.debug(""String_Node_Str"");
  User user=manager.getUser(""String_Node_Str"");
  user.setUsername(""String_Node_Str"");
  user.setEmail(""String_Node_Str"");
  user.setRoles(null);
  user.setVersion(null);
  manager.saveUser(user);
  User user2=new User();
  BeanUtils.copyProperties(user,user2);
  user2.setId(null);
  try {
    manager.saveUser(user2);
    fail(""String_Node_Str"");
  }
 catch (  UserExistsException uee) {
    assertNotNull(uee);
  }
}","public void testAddExistingUser() throws Exception {
  logger.debug(""String_Node_Str"");
  User user=manager.getUser(""String_Node_Str"");
  User user2=new User();
  BeanUtils.copyProperties(user,user2);
  user2.setId(null);
  user2.setVersion(null);
  try {
    manager.saveUser(user2);
    fail(""String_Node_Str"");
  }
 catch (  UserExistsException uee) {
    assertNotNull(uee);
  }
}"
85439,"public void objectToRequestParameters(Object o,MockHttpServletRequest request,String prefix) throws Exception {
  Class clazz=o.getClass();
  Field[] fields=getDeclaredFields(clazz);
  AccessibleObject.setAccessible(fields,true);
  for (int i=0; i < fields.length; i++) {
    Object field=(fields[i].get(o));
    if (field instanceof BaseObject) {
      objectToRequestParameters(field,request,fields[i].getName());
    }
 else     if (!(field instanceof List) && !(field instanceof Set)) {
      String paramName=fields[i].getName();
      if (prefix != null) {
        paramName=prefix + ""String_Node_Str"" + paramName;
      }
      String paramValue=String.valueOf(fields[i].get(o));
      if (field instanceof java.util.Date) {
        paramValue=DateUtil.convertDateToString((Date)fields[i].get(o));
        if (""String_Node_Str"".equals(paramValue))         paramValue=""String_Node_Str"";
      }
      request.addParameter(paramName,paramValue);
    }
  }
}","public void objectToRequestParameters(Object o,MockHttpServletRequest request,String prefix) throws Exception {
  Class clazz=o.getClass();
  Field[] fields=getDeclaredFields(clazz);
  AccessibleObject.setAccessible(fields,true);
  for (int i=0; i < fields.length; i++) {
    Object field=(fields[i].get(o));
    if (field != null) {
      if (field instanceof BaseObject) {
        objectToRequestParameters(field,request,fields[i].getName());
      }
 else       if (!(field instanceof List) && !(field instanceof Set)) {
        String paramName=fields[i].getName();
        if (prefix != null) {
          paramName=prefix + ""String_Node_Str"" + paramName;
        }
        String paramValue=String.valueOf(fields[i].get(o));
        if (field instanceof java.util.Date) {
          paramValue=DateUtil.convertDateToString((Date)fields[i].get(o));
          if (""String_Node_Str"".equals(paramValue))           paramValue=""String_Node_Str"";
        }
        request.addParameter(paramName,paramValue);
      }
    }
  }
}"
85440,"public ActionForward save(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ActionMessages errors=form.validate(mapping,request);
  if (!errors.isEmpty()) {
    saveErrors(request,errors);
    return mapping.findForward(""String_Node_Str"");
  }
  ActionMessages messages=new ActionMessages();
  HttpSession session=request.getSession();
  UserForm userForm=(UserForm)form;
  User user=new User();
  BeanUtils.copyProperties(user,userForm);
  Boolean encrypt=(Boolean)getConfiguration().get(Constants.ENCRYPT_PASSWORD);
  if (StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"") && (encrypt != null && encrypt.booleanValue())) {
    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
    if (algorithm == null) {
      log.debug(""String_Node_Str"");
      algorithm=""String_Node_Str"";
    }
    user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
  }
  UserManager mgr=(UserManager)getBean(""String_Node_Str"");
  RoleManager roleMgr=(RoleManager)getBean(""String_Node_Str"");
  String[] userRoles=request.getParameterValues(""String_Node_Str"");
  for (int i=0; userRoles != null && i < userRoles.length; i++) {
    String roleName=userRoles[i];
    user.addRole(roleMgr.getRole(roleName));
  }
  try {
    mgr.saveUser(user);
  }
 catch (  UserExistsException e) {
    log.warn(e.getMessage());
    errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername(),userForm.getEmail()));
    saveErrors(request,errors);
    return mapping.findForward(""String_Node_Str"");
  }
  BeanUtils.copyProperties(userForm,convert(user));
  userForm.setConfirmPassword(userForm.getPassword());
  updateFormBean(mapping,request,userForm);
  if (!StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
    session.setAttribute(Constants.USER_KEY,user);
    messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str""));
    saveMessages(request.getSession(),messages);
    return mapping.findForward(""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
      messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",user.getFullName()));
      saveMessages(request.getSession(),messages);
      sendNewUserEmail(request,userForm);
      return mapping.findForward(""String_Node_Str"");
    }
 else {
      messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",user.getFullName()));
      saveMessages(request,messages);
      return mapping.findForward(""String_Node_Str"");
    }
  }
}","public ActionForward save(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ActionMessages errors=form.validate(mapping,request);
  if (!errors.isEmpty()) {
    saveErrors(request,errors);
    return mapping.findForward(""String_Node_Str"");
  }
  ActionMessages messages=new ActionMessages();
  HttpSession session=request.getSession();
  UserForm userForm=(UserForm)form;
  User user=new User();
  BeanUtils.copyProperties(user,userForm);
  Boolean encrypt=(Boolean)getConfiguration().get(Constants.ENCRYPT_PASSWORD);
  if (StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"") && (encrypt != null && encrypt.booleanValue())) {
    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
    if (algorithm == null) {
      log.debug(""String_Node_Str"");
      algorithm=""String_Node_Str"";
    }
    user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
  }
  UserManager mgr=(UserManager)getBean(""String_Node_Str"");
  RoleManager roleMgr=(RoleManager)getBean(""String_Node_Str"");
  String[] userRoles=request.getParameterValues(""String_Node_Str"");
  for (int i=0; userRoles != null && i < userRoles.length; i++) {
    String roleName=userRoles[i];
    user.addRole(roleMgr.getRole(roleName));
  }
  try {
    mgr.saveUser(user);
  }
 catch (  UserExistsException e) {
    log.warn(e.getMessage());
    errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername(),userForm.getEmail()));
    saveErrors(request,errors);
    BeanUtils.copyProperties(userForm,convert(user));
    userForm.setConfirmPassword(userForm.getPassword());
    updateFormBean(mapping,request,userForm);
    return mapping.findForward(""String_Node_Str"");
  }
  BeanUtils.copyProperties(userForm,convert(user));
  userForm.setConfirmPassword(userForm.getPassword());
  updateFormBean(mapping,request,userForm);
  if (!StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
    session.setAttribute(Constants.USER_KEY,user);
    messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str""));
    saveMessages(request.getSession(),messages);
    return mapping.findForward(""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
      messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",user.getFullName()));
      saveMessages(request.getSession(),messages);
      sendNewUserEmail(request,userForm);
      return mapping.findForward(""String_Node_Str"");
    }
 else {
      messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",user.getFullName()));
      saveMessages(request,messages);
      return mapping.findForward(""String_Node_Str"");
    }
  }
}"
85441,"/** 
 * @see javax.servlet.ServletRequestWrapper#getLocales()
 */
public Enumeration getLocales(){
  if (null != preferredLocale) {
    return setLocales();
  }
 else {
    return super.getLocales();
  }
}","/** 
 * @see javax.servlet.ServletRequestWrapper#getLocales()
 */
public Enumeration getLocales(){
  if (null != preferredLocale) {
    List l=Collections.list(super.getLocales());
    if (l.contains(preferredLocale)) {
      l.remove(preferredLocale);
    }
    l.add(0,preferredLocale);
    return Collections.enumeration(l);
  }
 else {
    return super.getLocales();
  }
}"
85442,"public String execute(){
}","public String execute(){
  if (username == null || ""String_Node_Str"".equals(username)) {
    log.warn(""String_Node_Str"");
    addError(""String_Node_Str"",getText(""String_Node_Str""));
    return null;
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  try {
    User user=userManager.getUser(username);
    StringBuffer msg=new StringBuffer();
    msg.append(""String_Node_Str"" + user.getPasswordHint());
    msg.append(""String_Node_Str"" + RequestUtil.getAppURL(getRequest()));
    message.setTo(user.getEmail());
    String subject='[' + getText(""String_Node_Str"") + ""String_Node_Str""+ getText(""String_Node_Str"");
    message.setSubject(subject);
    message.setText(msg.toString());
    mailEngine.send(message);
    addMessage(""String_Node_Str"",new Object[]{username,user.getEmail()});
  }
 catch (  Exception e) {
    e.printStackTrace();
    addError(""String_Node_Str"",username);
  }
  return ""String_Node_Str"";
}"
85443,"public void save(IRequestCycle cycle) throws UserExistsException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  IValidationDelegate delegate=getValidationDelegate();
  if (!StringUtils.equals(getUser().getPassword(),getUser().getConfirmPassword())) {
    addError(delegate,""String_Node_Str"",format(""String_Node_Str"",getMessage(""String_Node_Str""),getMessage(""String_Node_Str"")),ValidationConstraint.CONSISTENCY);
  }
  if (delegate.getHasErrors()) {
    return;
  }
  String password=getUser().getPassword();
  String originalPassword=getRequest().getParameter(""String_Node_Str"");
  Boolean encrypt=(Boolean)getConfiguration().get(Constants.ENCRYPT_PASSWORD);
  boolean doEncrypt=(encrypt != null) ? encrypt.booleanValue() : false;
  if (doEncrypt && (StringUtils.equals(getRequest().getParameter(""String_Node_Str""),""String_Node_Str"") || !StringUtils.equals(""String_Node_Str"" + password,originalPassword))) {
    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
    if (algorithm == null) {
      log.debug(""String_Node_Str"");
      algorithm=""String_Node_Str"";
    }
    getUser().setPassword(StringUtil.encodePassword(password,algorithm));
  }
  boolean fromList=StringUtils.equals(getRequest().getParameter(""String_Node_Str""),""String_Node_Str"");
  String[] userRoles=null;
  if (fromList) {
    userRoles=getRequest().getParameterValues(""String_Node_Str"");
  }
 else {
    userRoles=getRequest().getParameterValues(""String_Node_Str"");
  }
  User user=getUser();
  UserManager userManager=getUserManager();
  user.getRoles().clear();
  for (int i=0; (userRoles != null) && (i < userRoles.length); i++) {
    String roleName=userRoles[i];
    user.addRole(getRoleManager().getRole(roleName));
  }
  try {
    userManager.saveUser(user);
  }
 catch (  UserExistsException e) {
    log.warn(e.getMessage());
    addError(delegate,""String_Node_Str"",format(""String_Node_Str"",user.getUsername(),user.getEmail()),ValidationConstraint.CONSISTENCY);
    return;
  }
  HttpSession session=getSession();
  HttpServletRequest request=getRequest();
  if (!fromList && user.getUsername().equals(getRequest().getRemoteUser())) {
    session.setAttribute(Constants.USER_KEY,user);
    MainMenu nextPage=(MainMenu)cycle.getPage(""String_Node_Str"");
    nextPage.setMessage(format(""String_Node_Str"",user.getFullName()));
    cycle.activate(nextPage);
  }
 else {
    if (""String_Node_Str"".equals(request.getParameter((""String_Node_Str"")))) {
      sendNewUserEmail(request,user);
      UserList nextPage=(UserList)cycle.getPage(""String_Node_Str"");
      nextPage.setMessage(format(""String_Node_Str"",user.getFullName()));
      cycle.activate(nextPage);
    }
 else {
      setMessage(format(""String_Node_Str"",user.getFullName()));
      cycle.activate(""String_Node_Str"");
    }
  }
}","public void save(IRequestCycle cycle) throws UserExistsException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  HttpServletRequest request=getRequest();
  IValidationDelegate delegate=getValidationDelegate();
  if (!StringUtils.equals(getUser().getPassword(),getUser().getConfirmPassword())) {
    addError(delegate,""String_Node_Str"",format(""String_Node_Str"",getMessage(""String_Node_Str""),getMessage(""String_Node_Str"")),ValidationConstraint.CONSISTENCY);
  }
  if (delegate.getHasErrors()) {
    return;
  }
  String password=getUser().getPassword();
  String originalPassword=getRequest().getParameter(""String_Node_Str"");
  Boolean encrypt=(Boolean)getConfiguration().get(Constants.ENCRYPT_PASSWORD);
  boolean doEncrypt=(encrypt != null) ? encrypt.booleanValue() : false;
  if (doEncrypt && (StringUtils.equals(getRequest().getParameter(""String_Node_Str""),""String_Node_Str"") || !StringUtils.equals(""String_Node_Str"" + password,originalPassword)) || (""String_Node_Str"".equals(request.getParameter((""String_Node_Str""))))) {
    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
    if (algorithm == null) {
      log.debug(""String_Node_Str"");
      algorithm=""String_Node_Str"";
    }
    getUser().setPassword(StringUtil.encodePassword(password,algorithm));
  }
  boolean fromList=StringUtils.equals(getRequest().getParameter(""String_Node_Str""),""String_Node_Str"");
  String[] userRoles=null;
  if (fromList) {
    userRoles=getRequest().getParameterValues(""String_Node_Str"");
  }
 else {
    userRoles=getRequest().getParameterValues(""String_Node_Str"");
  }
  User user=getUser();
  UserManager userManager=getUserManager();
  user.getRoles().clear();
  for (int i=0; (userRoles != null) && (i < userRoles.length); i++) {
    String roleName=userRoles[i];
    user.addRole(getRoleManager().getRole(roleName));
  }
  try {
    userManager.saveUser(user);
  }
 catch (  UserExistsException e) {
    log.warn(e.getMessage());
    addError(delegate,""String_Node_Str"",format(""String_Node_Str"",user.getUsername(),user.getEmail()),ValidationConstraint.CONSISTENCY);
    getUser().setPassword(user.getConfirmPassword());
    getUser().setVersion(null);
    return;
  }
  HttpSession session=getSession();
  if (!fromList && user.getUsername().equals(getRequest().getRemoteUser())) {
    session.setAttribute(Constants.USER_KEY,user);
    MainMenu nextPage=(MainMenu)cycle.getPage(""String_Node_Str"");
    nextPage.setMessage(format(""String_Node_Str"",user.getFullName()));
    cycle.activate(nextPage);
  }
 else {
    if (""String_Node_Str"".equals(request.getParameter((""String_Node_Str"")))) {
      sendNewUserEmail(request,user);
      UserList nextPage=(UserList)cycle.getPage(""String_Node_Str"");
      nextPage.setMessage(format(""String_Node_Str"",user.getFullName()));
      cycle.activate(nextPage);
    }
 else {
      setMessage(format(""String_Node_Str"",user.getFullName()));
      cycle.activate(""String_Node_Str"");
    }
  }
}"
85444,"private int getHibernateLength() throws XDocletException {
  Properties props=new Properties();
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  int length=0;
  if (super.hasTag(props,FOR_METHOD)) {
    String tagVal=super.getTagValue(props,FOR_METHOD);
    System.out.println(""String_Node_Str"" + tagVal);
    length=Integer.valueOf(tagVal).intValue();
  }
  return length;
}","private int getHibernateLength() throws XDocletException {
  Properties props=new Properties();
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  int length=0;
  if (super.hasTag(props,FOR_METHOD)) {
    String tagVal=super.getTagValue(props,FOR_METHOD);
    length=Integer.valueOf(tagVal).intValue();
  }
  return length;
}"
85445,"/** 
 * Generates a random value for a field. Return ""0"" for boolean type. used to generate random values for sample-data.xml
 * @return a random value
 * @throws XDocletException
 */
public String randomValueForDbUnit() throws XDocletException {
  Properties pros=new Properties();
  pros.put(""String_Node_Str"",""String_Node_Str"");
  String mtype=super.methodType(pros);
  StringBuffer result=new StringBuffer();
  if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append((int)((Math.random() * Integer.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append((float)((Math.random() * Float.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append((long)((Math.random() * Long.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append((double)((Math.random() * Double.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append((short)((Math.random() * Short.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append((byte)((Math.random() * Byte.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(getDate(new Date()));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(new Timestamp(new Date().getTime()).toString());
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(super.propertyName())) {
    result.append(super.propertyName() + (int)((Math.random() * Integer.MAX_VALUE)) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    String stringWithQuotes=generateStringValue();
    result.append(stringWithQuotes.substring(1,stringWithQuotes.length() - 1));
  }
 else {
    throw new XDocletException(""String_Node_Str"" + mtype);
  }
  return result.toString();
}","/** 
 * Generates a random value for a field. Return ""0"" for boolean type. used to generate random values for sample-data.xml
 * @return a random value
 * @throws XDocletException
 */
public String randomValueForDbUnit() throws XDocletException {
  Properties pros=new Properties();
  pros.put(""String_Node_Str"",""String_Node_Str"");
  String mtype=super.methodType(pros);
  StringBuffer result=new StringBuffer();
  if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append((int)((Math.random() * Integer.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append((float)((Math.random() * Float.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append((long)((Math.random() * Long.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append((double)((Math.random() * Double.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append((short)((Math.random() * Short.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append((byte)((Math.random() * Byte.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype) || ""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(getDate(new Date()));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(new Timestamp(new Date().getTime()).toString());
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(super.propertyName())) {
    result.append(super.propertyName() + (int)((Math.random() * Integer.MAX_VALUE)) + ""String_Node_Str"");
  }
 else {
    String stringWithQuotes=generateStringValue();
    result.append(stringWithQuotes.substring(1,stringWithQuotes.length() - 1));
  }
  return result.toString();
}"
85446,"/** 
 * Generates a random value for a field. Return ""true"" for boolean type. Returned values are used in junit tests to create new values of the appropriate type for testing.
 * @return a random value
 * @throws XDocletException
 */
public String randomValueForSetter() throws XDocletException {
  Properties pros=new Properties();
  pros.put(""String_Node_Str"",""String_Node_Str"");
  String mtype=super.methodType(pros);
  StringBuffer result=new StringBuffer();
  if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (int)((Math.random() * Integer.MAX_VALUE)) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (int)((Math.random() * Integer.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (float)((Math.random() * Float.MAX_VALUE)) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (float)((Math.random() * Float.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (long)((Math.random() * Integer.MAX_VALUE)) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append((long)((Math.random() * Integer.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (double)((Math.random() * Double.MAX_VALUE)) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append((double)((Math.random() * Double.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (short)((Math.random() * Short.MAX_VALUE)) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (short)((Math.random() * Short.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (byte)((Math.random() * Byte.MAX_VALUE)) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (byte)((Math.random() * Byte.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + getDate(new Date()) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + new Timestamp(new Date().getTime()).toString() + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(super.propertyName())) {
    result.append(""String_Node_Str"" + super.propertyName() + (int)((Math.random() * Integer.MAX_VALUE))+ ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(generateStringValue());
  }
 else {
    throw new XDocletException(""String_Node_Str"" + mtype);
  }
  return result.toString();
}","/** 
 * Generates a random value for a field. Return ""true"" for boolean type. Returned values are used in junit tests to create new values of the appropriate type for testing.
 * @return a random value
 * @throws XDocletException
 */
public String randomValueForSetter() throws XDocletException {
  Properties pros=new Properties();
  pros.put(""String_Node_Str"",""String_Node_Str"");
  String mtype=super.methodType(pros);
  StringBuffer result=new StringBuffer();
  if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (int)((Math.random() * Integer.MAX_VALUE)) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (int)((Math.random() * Integer.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (float)((Math.random() * Float.MAX_VALUE)) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (float)((Math.random() * Float.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (long)((Math.random() * Integer.MAX_VALUE)) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append((long)((Math.random() * Integer.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (double)((Math.random() * Double.MAX_VALUE)) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append((double)((Math.random() * Double.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (short)((Math.random() * Short.MAX_VALUE)) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (short)((Math.random() * Short.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (byte)((Math.random() * Byte.MAX_VALUE)) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + (byte)((Math.random() * Byte.MAX_VALUE)));
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + getDate(new Date()) + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(mtype)) {
    result.append(""String_Node_Str"" + new Timestamp(new Date().getTime()).toString() + ""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(super.propertyName())) {
    result.append(""String_Node_Str"" + super.propertyName() + (int)((Math.random() * Integer.MAX_VALUE))+ ""String_Node_Str"");
  }
 else {
    result.append(generateStringValue());
  }
  return result.toString();
}"
85447,"public int hashCode(){
  int result;
  result=(firstName != null ? firstName.hashCode() : 0);
  result=29 * result + (lastName != null ? lastName.hashCode() : 0);
  return result;
}","public int hashCode(){
  int result;
  result=(firstName != null ? firstName.hashCode() : 0);
  result=29 * result + (lastName != null ? lastName.hashCode() : 0);
  result=29 * result + (birthDate != null ? birthDate.hashCode() : 0);
  return result;
}"
85448,"public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof Person))   return false;
  final Person person=(Person)o;
  if (firstName != null ? !firstName.equals(person.firstName) : person.firstName != null)   return false;
  if (lastName != null ? !lastName.equals(person.lastName) : person.lastName != null)   return false;
  return true;
}","public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof Person))   return false;
  final Person person=(Person)o;
  if (firstName != null ? !firstName.equals(person.firstName) : person.firstName != null)   return false;
  if (lastName != null ? !lastName.equals(person.lastName) : person.lastName != null)   return false;
  if (birthDate != null ? !birthDate.equals(person.birthDate) : person.birthDate != null)   return false;
  return true;
}"
85449,"public String toString(){
  return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE).append(""String_Node_Str"",this.lastName).append(""String_Node_Str"",this.personId).append(""String_Node_Str"",this.firstName).toString();
}","public String toString(){
  return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE).append(""String_Node_Str"",this.lastName).append(""String_Node_Str"",this.personId).append(""String_Node_Str"",this.firstName).append(""String_Node_Str"",this.birthDate).toString();
}"
85450,"public void objectToRequestParameters(Object o,MockHttpServletRequest request,String prefix) throws Exception {
  Class clazz=o.getClass();
  Field[] fields=getDeclaredFields(clazz);
  AccessibleObject.setAccessible(fields,true);
  for (int i=0; i < fields.length; i++) {
    Object field=(fields[i].get(o));
    if (field instanceof BaseObject) {
      objectToRequestParameters(field,request,fields[i].getName());
    }
 else     if (!(field instanceof List) && !(field instanceof Set)) {
      String paramName=fields[i].getName();
      if (prefix != null) {
        paramName=prefix + ""String_Node_Str"" + paramName;
      }
      request.addParameter(paramName,String.valueOf(fields[i].get(o)));
    }
  }
}","public void objectToRequestParameters(Object o,MockHttpServletRequest request,String prefix) throws Exception {
  Class clazz=o.getClass();
  Field[] fields=getDeclaredFields(clazz);
  AccessibleObject.setAccessible(fields,true);
  for (int i=0; i < fields.length; i++) {
    Object field=(fields[i].get(o));
    if (field instanceof BaseObject) {
      objectToRequestParameters(field,request,fields[i].getName());
    }
 else     if (!(field instanceof List) && !(field instanceof Set)) {
      String paramName=fields[i].getName();
      if (prefix != null) {
        paramName=prefix + ""String_Node_Str"" + paramName;
      }
      String paramValue=String.valueOf(fields[i].get(o));
      if (field instanceof java.util.Date) {
        paramValue=DateUtil.convertDateToString((Date)fields[i].get(o));
      }
      request.addParameter(paramName,paramValue);
    }
  }
}"
85451,"public int hashCode(){
  return new HashCodeBuilder(1923026325,-1034774675).append(this.firstName).append(this.personId).append(this.lastName).toHashCode();
}","public int hashCode(){
  int result;
  result=(firstName != null ? firstName.hashCode() : 0);
  result=29 * result + (lastName != null ? lastName.hashCode() : 0);
  return result;
}"
85452,"public boolean equals(Object object){
  if (!(object instanceof Person)) {
    return false;
  }
  Person rhs=(Person)object;
  return new EqualsBuilder().append(this.firstName,rhs.firstName).append(this.personId,rhs.personId).append(this.lastName,rhs.lastName).isEquals();
}","public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof Person))   return false;
  final Person person=(Person)o;
  if (firstName != null ? !firstName.equals(person.firstName) : person.firstName != null)   return false;
  if (lastName != null ? !lastName.equals(person.lastName) : person.lastName != null)   return false;
  return true;
}"
85453,"public int hashCode(){
  return new HashCodeBuilder(1923026325,-1034774675).append(this.firstName).append(this.personId).append(this.lastName).toHashCode();
}","public int hashCode(){
  int result;
  result=(firstName != null ? firstName.hashCode() : 0);
  result=29 * result + (lastName != null ? lastName.hashCode() : 0);
  return result;
}"
85454,"public boolean equals(Object object){
  if (!(object instanceof Person)) {
    return false;
  }
  Person rhs=(Person)object;
  return new EqualsBuilder().append(this.firstName,rhs.firstName).append(this.personId,rhs.personId).append(this.lastName,rhs.lastName).isEquals();
}","public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof Person))   return false;
  final Person person=(Person)o;
  if (firstName != null ? !firstName.equals(person.firstName) : person.firstName != null)   return false;
  if (lastName != null ? !lastName.equals(person.lastName) : person.lastName != null)   return false;
  return true;
}"
85455,"public int hashCode(){
  return new HashCodeBuilder(1923026325,-1034774675).append(this.firstName).append(this.personId).append(this.lastName).toHashCode();
}","public int hashCode(){
  int result;
  result=(firstName != null ? firstName.hashCode() : 0);
  result=29 * result + (lastName != null ? lastName.hashCode() : 0);
  return result;
}"
85456,"public boolean equals(Object object){
  if (!(object instanceof Person)) {
    return false;
  }
  Person rhs=(Person)object;
  return new EqualsBuilder().append(this.firstName,rhs.firstName).append(this.personId,rhs.personId).append(this.lastName,rhs.lastName).isEquals();
}","public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof Person))   return false;
  final Person person=(Person)o;
  if (firstName != null ? !firstName.equals(person.firstName) : person.firstName != null)   return false;
  if (lastName != null ? !lastName.equals(person.lastName) : person.lastName != null)   return false;
  return true;
}"
85457,"public int hashCode(){
  return new HashCodeBuilder(1923026325,-1034774675).append(this.firstName).append(this.id).append(this.lastName).toHashCode();
}","public int hashCode(){
  int result;
  result=(firstName != null ? firstName.hashCode() : 0);
  result=29 * result + (lastName != null ? lastName.hashCode() : 0);
  return result;
}"
85458,"public boolean equals(Object object){
  if (!(object instanceof Person)) {
    return false;
  }
  Person rhs=(Person)object;
  return new EqualsBuilder().append(this.firstName,rhs.firstName).append(this.id,rhs.id).append(this.lastName,rhs.lastName).isEquals();
}","public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof Person))   return false;
  final Person person=(Person)o;
  if (firstName != null ? !firstName.equals(person.firstName) : person.firstName != null)   return false;
  if (lastName != null ? !lastName.equals(person.lastName) : person.lastName != null)   return false;
  return true;
}"
85459,"/** 
 * Return default datePattern (MM/dd/yyyy)
 * @return a string representing the date pattern on the UI
 */
public static String getDatePattern(){
  if (defaultDatePattern == null) {
    Locale locale=LocaleContextHolder.getLocale();
    defaultDatePattern=ResourceBundle.getBundle(Constants.BUNDLE_KEY).getString(""String_Node_Str"");
  }
  return defaultDatePattern;
}","/** 
 * Return default datePattern (MM/dd/yyyy)
 * @return a string representing the date pattern on the UI
 */
public static synchronized String getDatePattern(){
  Locale locale=LocaleContextHolder.getLocale();
  try {
    defaultDatePattern=ResourceBundle.getBundle(Constants.BUNDLE_KEY,locale).getString(""String_Node_Str"");
  }
 catch (  MissingResourceException mse) {
    defaultDatePattern=""String_Node_Str"";
  }
  return defaultDatePattern;
}"
85460,"/** 
 * This method converts a String to a date using the datePattern
 * @param strDate the date to convert (in format MM/dd/yyyy)
 * @return a date object
 * @throws ParseException
 */
public static Date convertStringToDate(String strDate) throws ParseException {
  Date aDate=null;
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + datePattern);
    }
    aDate=convertStringToDate(datePattern,strDate);
  }
 catch (  ParseException pe) {
    log.error(""String_Node_Str"" + strDate + ""String_Node_Str"");
    pe.printStackTrace();
    throw new ParseException(pe.getMessage(),pe.getErrorOffset());
  }
  return aDate;
}","/** 
 * This method converts a String to a date using the datePattern
 * @param strDate the date to convert (in format MM/dd/yyyy)
 * @return a date object
 * @throws ParseException
 */
public static Date convertStringToDate(String strDate) throws ParseException {
  Date aDate=null;
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + getDatePattern());
    }
    aDate=convertStringToDate(getDatePattern(),strDate);
  }
 catch (  ParseException pe) {
    log.error(""String_Node_Str"" + strDate + ""String_Node_Str"");
    pe.printStackTrace();
    throw new ParseException(pe.getMessage(),pe.getErrorOffset());
  }
  return aDate;
}"
85461,"/** 
 * Return default datePattern (MM/dd/yyyy)
 * @return a string representing the date pattern on the UI
 */
public static String getDatePattern(){
  return datePattern;
}","/** 
 * Return default datePattern (MM/dd/yyyy)
 * @return a string representing the date pattern on the UI
 */
public static String getDatePattern(){
  if (defaultDatePattern == null) {
    Locale locale=LocaleContextHolder.getLocale();
    defaultDatePattern=ResourceBundle.getBundle(Constants.BUNDLE_KEY).getString(""String_Node_Str"");
  }
  return defaultDatePattern;
}"
85462,"/** 
 * This method attempts to convert an Oracle-formatted date in the form dd-MMM-yyyy to mm/dd/yyyy.
 * @param aDate date from database as a string
 * @return formatted string for the ui
 */
public static final String getDate(Date aDate){
  SimpleDateFormat df=null;
  String returnValue=""String_Node_Str"";
  if (aDate != null) {
    df=new SimpleDateFormat(datePattern);
    returnValue=df.format(aDate);
  }
  return (returnValue);
}","/** 
 * This method attempts to convert an Oracle-formatted date in the form dd-MMM-yyyy to mm/dd/yyyy.
 * @param aDate date from database as a string
 * @return formatted string for the ui
 */
public static final String getDate(Date aDate){
  SimpleDateFormat df=null;
  String returnValue=""String_Node_Str"";
  if (aDate != null) {
    df=new SimpleDateFormat(getDatePattern());
    returnValue=df.format(aDate);
  }
  return (returnValue);
}"
85463,"/** 
 * This method generates a string representation of a date based on the System Property 'dateFormat' in the format you specify on input
 * @param aDate A date to convert
 * @return a string representation of the date
 */
public static final String convertDateToString(Date aDate){
  return getDateTime(datePattern,aDate);
}","/** 
 * This method generates a string representation of a date based on the System Property 'dateFormat' in the format you specify on input
 * @param aDate A date to convert
 * @return a string representation of the date
 */
public static final String convertDateToString(Date aDate){
  return getDateTime(getDatePattern(),aDate);
}"
85464,"/** 
 * This method returns the current date in the format: MM/dd/yyyy
 * @return the current date
 * @throws ParseException
 */
public static Calendar getToday() throws ParseException {
  Date today=new Date();
  SimpleDateFormat df=new SimpleDateFormat(datePattern);
  String todayAsString=df.format(today);
  Calendar cal=new GregorianCalendar();
  cal.setTime(convertStringToDate(todayAsString));
  return cal;
}","/** 
 * This method returns the current date in the format: MM/dd/yyyy
 * @return the current date
 * @throws ParseException
 */
public static Calendar getToday() throws ParseException {
  Date today=new Date();
  SimpleDateFormat df=new SimpleDateFormat(getDatePattern());
  String todayAsString=df.format(today);
  Calendar cal=new GregorianCalendar();
  cal.setTime(convertStringToDate(todayAsString));
  return cal;
}"
85465,"public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)resp;
  HttpSession session=request.getSession(true);
  String redirectString=SslUtil.getRedirectString(request,config.getServletContext(),secure.booleanValue());
  if (redirectString != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + redirectString + ""String_Node_Str"");
    }
    response.sendRedirect(response.encodeRedirectURL(redirectString));
    return;
  }
  User user=(User)session.getAttribute(Constants.USER_KEY);
  ServletContext context=config.getServletContext();
  String username=request.getRemoteUser();
  if ((username != null) && (user == null)) {
    ApplicationContext ctx=WebApplicationContextUtils.getRequiredWebApplicationContext(context);
    UserManager mgr=(UserManager)ctx.getBean(""String_Node_Str"");
    user=mgr.getUser(username);
    session.setAttribute(Constants.USER_KEY,user);
    if (session.getAttribute(Constants.LOGIN_COOKIE) != null) {
      session.removeAttribute(Constants.LOGIN_COOKIE);
      String loginCookie=mgr.createLoginCookie(username);
      RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,loginCookie,request.getContextPath());
    }
  }
  chain.doFilter(request,response);
}","public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)resp;
  HttpSession session=request.getSession(true);
  LocaleContextHolder.setLocale(request.getLocale());
  String redirectString=SslUtil.getRedirectString(request,config.getServletContext(),secure.booleanValue());
  if (redirectString != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + redirectString + ""String_Node_Str"");
    }
    response.sendRedirect(response.encodeRedirectURL(redirectString));
    return;
  }
  User user=(User)session.getAttribute(Constants.USER_KEY);
  ServletContext context=config.getServletContext();
  String username=request.getRemoteUser();
  if ((username != null) && (user == null)) {
    ApplicationContext ctx=WebApplicationContextUtils.getRequiredWebApplicationContext(context);
    UserManager mgr=(UserManager)ctx.getBean(""String_Node_Str"");
    user=mgr.getUser(username);
    session.setAttribute(Constants.USER_KEY,user);
    if (session.getAttribute(Constants.LOGIN_COOKIE) != null) {
      session.removeAttribute(Constants.LOGIN_COOKIE);
      String loginCookie=mgr.createLoginCookie(username);
      RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,loginCookie,request.getContextPath());
    }
  }
  chain.doFilter(request,response);
}"
85466,"/** 
 * This method inspects a POJO or Form and figures out its pojo/form equivalent.
 * @param o the object to inspect
 * @return the Class of the persistable object
 * @throws ClassNotFoundException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public static Object getOpposingObject(Object o) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
  String name=o.getClass().getName();
  if (o instanceof BaseObject) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    name=StringUtils.replace(name,""String_Node_Str"",""String_Node_Str"");
    name+=""String_Node_Str"";
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    name=StringUtils.replace(name,""String_Node_Str"",""String_Node_Str"");
    name=name.substring(0,name.lastIndexOf(""String_Node_Str""));
  }
  Class obj=Class.forName(name);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + obj.getName());
  }
  return obj.newInstance();
}","/** 
 * This method inspects a POJO or Form and figures out its pojo/form equivalent.
 * @param o the object to inspect
 * @return the Class of the persistable object
 * @throws ClassNotFoundException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public static Object getOpposingObject(Object o) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
  String name=o.getClass().getName();
  if (o instanceof BaseObject) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    name=StringUtils.replace(name,""String_Node_Str"",""String_Node_Str"");
    if (AopUtils.isCglibProxy(o)) {
      name=name.substring(0,name.indexOf(""String_Node_Str""));
    }
    name+=""String_Node_Str"";
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    name=StringUtils.replace(name,""String_Node_Str"",""String_Node_Str"");
    name=name.substring(0,name.lastIndexOf(""String_Node_Str""));
  }
  Class obj=Class.forName(name);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + obj.getName());
  }
  return obj.newInstance();
}"
85467,"public void pageBeginRender(PageEvent event){
  if ((getUser() == null) && !event.getRequestCycle().isRewinding()) {
    setUser(new User());
    getUser().addRole(new Role(Constants.USER_ROLE));
  }
 else   if (event.getRequestCycle().isRewinding()) {
    setUser(new User());
    getUser().addRole(new Role(Constants.USER_ROLE));
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  if (getSession().getAttribute(""String_Node_Str"") != null) {
    setMessage(getMessage(""String_Node_Str""));
  }
}","public void pageBeginRender(PageEvent event){
  if ((getUser() == null) && !event.getRequestCycle().isRewinding()) {
    setUser(new User());
    setFrom(""String_Node_Str"");
    getUser().addRole(new Role(Constants.USER_ROLE));
  }
 else   if (event.getRequestCycle().isRewinding()) {
    setUser(new User());
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  if (getSession().getAttribute(""String_Node_Str"") != null) {
    setMessage(getMessage(""String_Node_Str""));
  }
}"
85468,"public void edit(IRequestCycle cycle){
  UserForm nextPage=(UserForm)cycle.getPage(""String_Node_Str"");
  Object[] parameters=cycle.getServiceParameters();
  String username=(String)parameters[0];
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + username);
  }
  User user=getUserManager().getUser(username);
  nextPage.setUser(user);
  cycle.activate(nextPage);
}","public void edit(IRequestCycle cycle){
  UserForm nextPage=(UserForm)cycle.getPage(""String_Node_Str"");
  Object[] parameters=cycle.getServiceParameters();
  String username=(String)parameters[0];
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + username);
  }
  User user=getUserManager().getUser(username);
  user.setConfirmPassword(user.getPassword());
  nextPage.setUser(user);
  nextPage.setFrom(""String_Node_Str"");
  cycle.activate(nextPage);
}"
85469,"/** 
 * Convenience method for getting a i18n key's value with arguments.
 * @param msgKey
 * @param args
 * @return
 */
public String getText(String msgKey,Object[] args){
  return getMessageSourceAccessor().getMessage(msgKey,args);
}","/** 
 * Convenience method for getting a i18n key's value with arguments.
 * @param msgKey
 * @param args
 * @param locale the current locale
 * @return
 */
public String getText(String msgKey,Object[] args,Locale locale){
  return getMessageSourceAccessor().getMessage(msgKey,args,locale);
}"
85470,"public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  FileUpload fileUpload=(FileUpload)command;
  if (fileUpload.getFile().length == 0) {
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{getText(""String_Node_Str"")},""String_Node_Str"");
    return showForm(request,response,errors);
  }
  MultipartHttpServletRequest multipartRequest=(MultipartHttpServletRequest)request;
  CommonsMultipartFile file=(CommonsMultipartFile)multipartRequest.getFile(""String_Node_Str"");
  String uploadDir=getServletContext().getRealPath(""String_Node_Str"") + ""String_Node_Str"" + request.getRemoteUser()+ ""String_Node_Str"";
  File dirPath=new File(uploadDir);
  if (!dirPath.exists()) {
    dirPath.mkdirs();
  }
  InputStream stream=file.getInputStream();
  OutputStream bos=new FileOutputStream(uploadDir + file.getOriginalFilename());
  int bytesRead=0;
  byte[] buffer=new byte[8192];
  while ((bytesRead=stream.read(buffer,0,8192)) != -1) {
    bos.write(buffer,0,bytesRead);
  }
  bos.close();
  stream.close();
  request.setAttribute(""String_Node_Str"",fileUpload.getName());
  request.setAttribute(""String_Node_Str"",file.getOriginalFilename());
  request.setAttribute(""String_Node_Str"",file.getContentType());
  request.setAttribute(""String_Node_Str"",file.getSize() + ""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",dirPath.getAbsolutePath() + Constants.FILE_SEP + file.getOriginalFilename());
  String link=request.getContextPath() + ""String_Node_Str"" + ""String_Node_Str""+ request.getRemoteUser()+ ""String_Node_Str"";
  request.setAttribute(""String_Node_Str"",link + file.getOriginalFilename());
  return new ModelAndView(getSuccessView());
}","public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  FileUpload fileUpload=(FileUpload)command;
  if (fileUpload.getFile().length == 0) {
    Object[] args=new Object[]{getText(""String_Node_Str"",request.getLocale())};
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"",args,""String_Node_Str"");
    return showForm(request,response,errors);
  }
  MultipartHttpServletRequest multipartRequest=(MultipartHttpServletRequest)request;
  CommonsMultipartFile file=(CommonsMultipartFile)multipartRequest.getFile(""String_Node_Str"");
  String uploadDir=getServletContext().getRealPath(""String_Node_Str"") + ""String_Node_Str"" + request.getRemoteUser()+ ""String_Node_Str"";
  File dirPath=new File(uploadDir);
  if (!dirPath.exists()) {
    dirPath.mkdirs();
  }
  InputStream stream=file.getInputStream();
  OutputStream bos=new FileOutputStream(uploadDir + file.getOriginalFilename());
  int bytesRead=0;
  byte[] buffer=new byte[8192];
  while ((bytesRead=stream.read(buffer,0,8192)) != -1) {
    bos.write(buffer,0,bytesRead);
  }
  bos.close();
  stream.close();
  request.setAttribute(""String_Node_Str"",fileUpload.getName());
  request.setAttribute(""String_Node_Str"",file.getOriginalFilename());
  request.setAttribute(""String_Node_Str"",file.getContentType());
  request.setAttribute(""String_Node_Str"",file.getSize() + ""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",dirPath.getAbsolutePath() + Constants.FILE_SEP + file.getOriginalFilename());
  String link=request.getContextPath() + ""String_Node_Str"" + ""String_Node_Str""+ request.getRemoteUser()+ ""String_Node_Str"";
  request.setAttribute(""String_Node_Str"",link + file.getOriginalFilename());
  return new ModelAndView(getSuccessView());
}"
85471,"public ModelAndView handleRequest(HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  String username=request.getParameter(""String_Node_Str"");
  MessageSourceAccessor text=new MessageSourceAccessor(messageSource);
  if (username == null) {
    log.warn(""String_Node_Str"");
    request.setAttribute(""String_Node_Str"",text.getMessage(""String_Node_Str"",new Object[]{text.getMessage(""String_Node_Str"")}));
    return new ModelAndView(""String_Node_Str"");
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  try {
    User user=(User)mgr.getUser(username);
    StringBuffer msg=new StringBuffer();
    msg.append(""String_Node_Str"" + user.getPasswordHint());
    msg.append(""String_Node_Str"" + RequestUtil.getAppURL(request));
    message.setTo(user.getEmail());
    String subject=text.getMessage(""String_Node_Str"") + text.getMessage(""String_Node_Str"");
    message.setSubject(subject);
    message.setText(msg.toString());
    mailEngine.send(message);
    saveMessage(request,text.getMessage(""String_Node_Str"",new Object[]{username,user.getEmail()}));
  }
 catch (  Exception e) {
    saveError(request,text.getMessage(""String_Node_Str"",new Object[]{username}));
  }
  return new ModelAndView(new RedirectView(request.getContextPath()));
}","public ModelAndView handleRequest(HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  String username=request.getParameter(""String_Node_Str"");
  MessageSourceAccessor text=new MessageSourceAccessor(messageSource,request.getLocale());
  if (username == null) {
    log.warn(""String_Node_Str"");
    request.setAttribute(""String_Node_Str"",text.getMessage(""String_Node_Str"",new Object[]{text.getMessage(""String_Node_Str"")}));
    return new ModelAndView(""String_Node_Str"");
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  try {
    User user=(User)mgr.getUser(username);
    StringBuffer msg=new StringBuffer();
    msg.append(""String_Node_Str"" + user.getPasswordHint());
    msg.append(""String_Node_Str"" + RequestUtil.getAppURL(request));
    message.setTo(user.getEmail());
    String subject=text.getMessage(""String_Node_Str"") + text.getMessage(""String_Node_Str"");
    message.setSubject(subject);
    message.setText(msg.toString());
    mailEngine.send(message);
    saveMessage(request,text.getMessage(""String_Node_Str"",new Object[]{username,user.getEmail()}));
  }
 catch (  Exception e) {
    saveError(request,text.getMessage(""String_Node_Str"",new Object[]{username}));
  }
  return new ModelAndView(new RedirectView(request.getContextPath()));
}"
85472,"public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  User user=(User)command;
  String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
  if (algorithm == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    algorithm=""String_Node_Str"";
  }
  user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
  user.addRole(roleManager.getRole(Constants.USER_ROLE));
  try {
    mgr.saveUser(user);
  }
 catch (  UserExistsException e) {
    log.warn(e.getMessage());
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()},""String_Node_Str"");
    user.setPassword(user.getConfirmPassword());
    return showForm(request,response,errors);
  }
  String loginCookie=mgr.createLoginCookie(user.getUsername());
  RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,loginCookie,request.getContextPath());
  saveMessage(request,getText(""String_Node_Str"",user.getUsername()));
  request.getSession().setAttribute(Constants.REGISTERED,Boolean.TRUE);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  }
  message.setSubject(getText(""String_Node_Str""));
  sendUserMessage(user,getText(""String_Node_Str""),RequestUtil.getAppURL(request));
  return new ModelAndView(new RedirectView(getSuccessView()));
}","public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  User user=(User)command;
  Locale locale=request.getLocale();
  String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
  if (algorithm == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    algorithm=""String_Node_Str"";
  }
  user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
  user.addRole(roleManager.getRole(Constants.USER_ROLE));
  try {
    mgr.saveUser(user);
  }
 catch (  UserExistsException e) {
    log.warn(e.getMessage());
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()},""String_Node_Str"");
    user.setPassword(user.getConfirmPassword());
    return showForm(request,response,errors);
  }
  String loginCookie=mgr.createLoginCookie(user.getUsername());
  RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,loginCookie,request.getContextPath());
  saveMessage(request,getText(""String_Node_Str"",user.getUsername(),locale));
  request.getSession().setAttribute(Constants.REGISTERED,Boolean.TRUE);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  }
  message.setSubject(getText(""String_Node_Str"",locale));
  sendUserMessage(user,getText(""String_Node_Str"",locale),RequestUtil.getAppURL(request));
  return new ModelAndView(new RedirectView(getSuccessView()));
}"
85473,"protected Object formBackingObject(HttpServletRequest request) throws Exception {
  String username=request.getParameter(""String_Node_Str"");
  if (request.getSession().getAttribute(""String_Node_Str"") != null) {
    saveMessage(request,getText(""String_Node_Str""));
  }
  User user=null;
  if (request.getRequestURI().indexOf(""String_Node_Str"") > -1) {
    user=mgr.getUser(getUser(request).getUsername());
  }
 else   if (!StringUtils.isBlank(username) && !""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
    user=mgr.getUser(username);
  }
 else {
    user=new User();
    user.addRole(new Role(Constants.USER_ROLE));
  }
  user.setConfirmPassword(user.getPassword());
  return user;
}","protected Object formBackingObject(HttpServletRequest request) throws Exception {
  String username=request.getParameter(""String_Node_Str"");
  if (request.getSession().getAttribute(""String_Node_Str"") != null) {
    saveMessage(request,getText(""String_Node_Str"",request.getLocale()));
  }
  User user=null;
  if (request.getRequestURI().indexOf(""String_Node_Str"") > -1) {
    user=mgr.getUser(getUser(request).getUsername());
  }
 else   if (!StringUtils.isBlank(username) && !""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
    user=mgr.getUser(username);
  }
 else {
    user=new User();
    user.addRole(new Role(Constants.USER_ROLE));
  }
  user.setConfirmPassword(user.getPassword());
  return user;
}"
85474,"public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  User user=(User)command;
  if (request.getParameter(""String_Node_Str"") != null) {
    mgr.removeUser(user.getUsername());
    saveMessage(request,getText(""String_Node_Str"",user.getFullName()));
    return new ModelAndView(new RedirectView(""String_Node_Str""));
  }
 else {
    if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
      String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
      if (algorithm == null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"");
        }
        algorithm=""String_Node_Str"";
      }
      user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
    }
    String[] userRoles=request.getParameterValues(""String_Node_Str"");
    if (userRoles != null) {
      user.getRoles().clear();
      for (int i=0; i < userRoles.length; i++) {
        String roleName=userRoles[i];
        user.addRole(roleManager.getRole(roleName));
      }
    }
    try {
      mgr.saveUser(user);
    }
 catch (    UserExistsException e) {
      log.warn(e.getMessage());
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()},""String_Node_Str"");
      user.setPassword(user.getConfirmPassword());
      return showForm(request,response,errors);
    }
    if (!StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
      HttpSession session=request.getSession();
      session.setAttribute(Constants.USER_KEY,user);
      if ((RequestUtil.getCookie(request,Constants.LOGIN_COOKIE) != null) && (session.getAttribute(""String_Node_Str"") == null)) {
        mgr.removeLoginCookies(user.getUsername());
        String autoLogin=mgr.createLoginCookie(user.getUsername());
        RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,autoLogin,request.getContextPath());
      }
      saveMessage(request,getText(""String_Node_Str"",user.getFullName()));
      return new ModelAndView(new RedirectView(""String_Node_Str""));
    }
 else {
      if (StringUtils.isBlank(request.getParameter(""String_Node_Str""))) {
        saveMessage(request,getText(""String_Node_Str"",user.getFullName()));
        message.setSubject(getText(""String_Node_Str""));
        sendUserMessage(user,getText(""String_Node_Str"",user.getFullName()),RequestUtil.getAppURL(request));
        return showNewForm(request,response);
      }
 else {
        saveMessage(request,getText(""String_Node_Str"",user.getFullName()));
      }
    }
  }
  return showForm(request,response,errors);
}","public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  User user=(User)command;
  Locale locale=request.getLocale();
  if (request.getParameter(""String_Node_Str"") != null) {
    mgr.removeUser(user.getUsername());
    saveMessage(request,getText(""String_Node_Str"",user.getFullName(),locale));
    return new ModelAndView(new RedirectView(""String_Node_Str""));
  }
 else {
    if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
      String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
      if (algorithm == null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"");
        }
        algorithm=""String_Node_Str"";
      }
      user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
    }
    String[] userRoles=request.getParameterValues(""String_Node_Str"");
    if (userRoles != null) {
      user.getRoles().clear();
      for (int i=0; i < userRoles.length; i++) {
        String roleName=userRoles[i];
        user.addRole(roleManager.getRole(roleName));
      }
    }
    try {
      mgr.saveUser(user);
    }
 catch (    UserExistsException e) {
      log.warn(e.getMessage());
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()},""String_Node_Str"");
      user.setPassword(user.getConfirmPassword());
      return showForm(request,response,errors);
    }
    if (!StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
      HttpSession session=request.getSession();
      session.setAttribute(Constants.USER_KEY,user);
      if ((RequestUtil.getCookie(request,Constants.LOGIN_COOKIE) != null) && (session.getAttribute(""String_Node_Str"") == null)) {
        mgr.removeLoginCookies(user.getUsername());
        String autoLogin=mgr.createLoginCookie(user.getUsername());
        RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,autoLogin,request.getContextPath());
      }
      saveMessage(request,getText(""String_Node_Str"",user.getFullName(),locale));
      return new ModelAndView(new RedirectView(""String_Node_Str""));
    }
 else {
      if (StringUtils.isBlank(request.getParameter(""String_Node_Str""))) {
        saveMessage(request,getText(""String_Node_Str"",user.getFullName(),locale));
        message.setSubject(getText(""String_Node_Str"",locale));
        sendUserMessage(user,getText(""String_Node_Str"",user.getFullName(),locale),RequestUtil.getAppURL(request));
        return showNewForm(request,response);
      }
 else {
        saveMessage(request,getText(""String_Node_Str"",user.getFullName(),locale));
      }
    }
  }
  return showForm(request,response,errors);
}"
85475,"public ActionForward save(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ActionMessages errors=new ActionMessages();
  ActionMessages messages=new ActionMessages();
  HttpSession session=request.getSession();
  UserForm userForm=(UserForm)form;
  String password=userForm.getPassword();
  User user=new User();
  BeanUtils.copyProperties(user,userForm);
  if (StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
    if (algorithm == null) {
      log.debug(""String_Node_Str"");
      algorithm=""String_Node_Str"";
    }
    user.setPassword(StringUtil.encodePassword(password,algorithm));
  }
  UserManager mgr=(UserManager)getBean(""String_Node_Str"");
  RoleManager roleMgr=(RoleManager)getBean(""String_Node_Str"");
  String[] userRoles=request.getParameterValues(""String_Node_Str"");
  for (int i=0; userRoles != null && i < userRoles.length; i++) {
    String roleName=userRoles[i];
    user.addRole(roleMgr.getRole(roleName));
  }
  try {
    mgr.saveUser(user);
  }
 catch (  UserExistsException e) {
    log.warn(e.getMessage());
    errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername(),userForm.getEmail()));
    saveErrors(request,errors);
    return mapping.findForward(""String_Node_Str"");
  }
  BeanUtils.copyProperties(userForm,convert(user));
  userForm.setConfirmPassword(userForm.getPassword());
  updateFormBean(mapping,request,userForm);
  if (!StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
    session.setAttribute(Constants.USER_KEY,user);
    if ((RequestUtil.getCookie(request,Constants.LOGIN_COOKIE) != null) && (session.getAttribute(""String_Node_Str"") == null)) {
      mgr.removeLoginCookies(userForm.getUsername());
      String autoLogin=mgr.createLoginCookie(userForm.getUsername());
      RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,autoLogin,request.getContextPath());
    }
    messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str""));
    saveMessages(request.getSession(),messages);
    return mapping.findForward(""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
      messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getFullName()));
      session.setAttribute(Globals.MESSAGE_KEY,messages);
      sendNewUserEmail(request,userForm);
      return mapping.findForward(""String_Node_Str"");
    }
 else {
      messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getFullName()));
      saveMessages(request,messages);
      return mapping.findForward(""String_Node_Str"");
    }
  }
}","public ActionForward save(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ActionMessages errors=new ActionMessages();
  ActionMessages messages=new ActionMessages();
  HttpSession session=request.getSession();
  UserForm userForm=(UserForm)form;
  String password=userForm.getPassword();
  User user=new User();
  BeanUtils.copyProperties(user,userForm);
  if (StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
    if (algorithm == null) {
      log.debug(""String_Node_Str"");
      algorithm=""String_Node_Str"";
    }
    user.setPassword(StringUtil.encodePassword(password,algorithm));
  }
  UserManager mgr=(UserManager)getBean(""String_Node_Str"");
  RoleManager roleMgr=(RoleManager)getBean(""String_Node_Str"");
  String[] userRoles=request.getParameterValues(""String_Node_Str"");
  for (int i=0; userRoles != null && i < userRoles.length; i++) {
    String roleName=userRoles[i];
    user.addRole(roleMgr.getRole(roleName));
  }
  try {
    mgr.saveUser(user);
  }
 catch (  UserExistsException e) {
    log.warn(e.getMessage());
    errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername(),userForm.getEmail()));
    saveErrors(request,errors);
    return mapping.findForward(""String_Node_Str"");
  }
  BeanUtils.copyProperties(userForm,convert(user));
  userForm.setConfirmPassword(userForm.getPassword());
  updateFormBean(mapping,request,userForm);
  if (!StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
    session.setAttribute(Constants.USER_KEY,user);
    if ((RequestUtil.getCookie(request,Constants.LOGIN_COOKIE) != null) && (session.getAttribute(""String_Node_Str"") == null)) {
      mgr.removeLoginCookies(userForm.getUsername());
      String autoLogin=mgr.createLoginCookie(userForm.getUsername());
      RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,autoLogin,request.getContextPath());
    }
    messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str""));
    saveMessages(request.getSession(),messages);
    return mapping.findForward(""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
      messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",user.getFullName()));
      saveMessages(request.getSession(),messages);
      sendNewUserEmail(request,userForm);
      return mapping.findForward(""String_Node_Str"");
    }
 else {
      messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",user.getFullName()));
      saveMessages(request,messages);
      return mapping.findForward(""String_Node_Str"");
    }
  }
}"
85476,"public ActionForward delete(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ActionMessages messages=new ActionMessages();
  UserForm userForm=(UserForm)form;
  UserManager mgr=(UserManager)getBean(""String_Node_Str"");
  mgr.removeUser(userForm.getUsername());
  messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getFullName()));
  saveMessages(request,messages);
  return mapping.findForward(""String_Node_Str"");
}","public ActionForward delete(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ActionMessages messages=new ActionMessages();
  UserForm userForm=(UserForm)form;
  UserManager mgr=(UserManager)getBean(""String_Node_Str"");
  mgr.removeUser(userForm.getUsername());
  messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getFirstName() + ' ' + userForm.getLastName()));
  saveMessages(request,messages);
  return mapping.findForward(""String_Node_Str"");
}"
85477,"public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  MessageResources resources=getResources(request);
  ActionMessages errors=new ActionMessages();
  String username=request.getParameter(""String_Node_Str"");
  if (username == null) {
    log.warn(""String_Node_Str"");
    errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",resources.getMessage(""String_Node_Str"")));
    saveErrors(request,errors);
    return mapping.findForward(""String_Node_Str"");
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ActionMessages messages=new ActionMessages();
  try {
    UserManager userMgr=(UserManager)getBean(""String_Node_Str"");
    User user=userMgr.getUser(username);
    StringBuffer msg=new StringBuffer();
    msg.append(""String_Node_Str"" + user.getPasswordHint());
    msg.append(""String_Node_Str"" + RequestUtil.getAppURL(request));
    SimpleMailMessage message=(SimpleMailMessage)getBean(""String_Node_Str"");
    message.setTo(user.getEmail());
    String subject=resources.getMessage(""String_Node_Str"") + resources.getMessage(""String_Node_Str"");
    message.setSubject(subject);
    message.setText(msg.toString());
    MailEngine mailEngine=(MailEngine)getBean(""String_Node_Str"");
    mailEngine.send(message);
    messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",username,user.getEmail()));
    saveMessages(request,messages);
  }
 catch (  Exception e) {
    e.printStackTrace();
    errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",username));
    saveErrors(request,errors);
  }
  return mapping.findForward(""String_Node_Str"");
}","public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  MessageResources resources=getResources(request);
  ActionMessages errors=new ActionMessages();
  String username=request.getParameter(""String_Node_Str"");
  if (username == null) {
    log.warn(""String_Node_Str"");
    errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",resources.getMessage(""String_Node_Str"")));
    saveErrors(request,errors);
    return mapping.findForward(""String_Node_Str"");
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ActionMessages messages=new ActionMessages();
  try {
    UserManager userMgr=(UserManager)getBean(""String_Node_Str"");
    User user=userMgr.getUser(username);
    StringBuffer msg=new StringBuffer();
    msg.append(""String_Node_Str"" + user.getPasswordHint());
    msg.append(""String_Node_Str"" + RequestUtil.getAppURL(request));
    SimpleMailMessage message=(SimpleMailMessage)getBean(""String_Node_Str"");
    message.setTo(user.getEmail());
    String subject=resources.getMessage(""String_Node_Str"") + resources.getMessage(""String_Node_Str"");
    message.setSubject(subject);
    message.setText(msg.toString());
    MailEngine mailEngine=(MailEngine)getBean(""String_Node_Str"");
    mailEngine.send(message);
    messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",username,user.getEmail()));
    saveMessages(request.getSession(),messages);
  }
 catch (  Exception e) {
    e.printStackTrace();
    errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",username));
    saveErrors(request,errors);
  }
  return mapping.findForward(""String_Node_Str"");
}"
85478,"/** 
 * Returns the email.  This is an optional field for specifying a different e-mail than the username.
 * @return String
 * @hibernate.property column=""email"" not-null=""false"" unique=""true""
 */
public String getEmail(){
  return email;
}","/** 
 * Returns the email.  This is an optional field for specifying a different e-mail than the username.
 * @return String
 * @hibernate.property 
 * @hibernate.column name=""email"" not-null=""true"" unique=""true""
 */
public String getEmail(){
  return email;
}"
85479,"/** 
 * Returns the email.  This is an optional field for specifying a different e-mail than the username.
 * @return String
 * @hibernate.property column=""email"" not-null=""false"" unique=""true""
 */
public String getEmail(){
  return email;
}","/** 
 * Returns the email.  This is an optional field for specifying a different e-mail than the username.
 * @return String
 * @hibernate.property 
 * @hibernate.column name=""email"" not-null=""true"" unique=""true""
 */
public String getEmail(){
  return email;
}"
85480,"/** 
 * Returns the email.  This is an optional field for specifying a different e-mail than the username.
 * @return String
 * @struts.validator type=""required""
 * @struts.validator type=""email""
 * @hibernate.property column=""email"" not-null=""false"" unique=""true""
 */
public String getEmail(){
  return email;
}","/** 
 * Returns the email.  This is an optional field for specifying a different e-mail than the username.
 * @return String
 * @struts.validator type=""required""
 * @struts.validator type=""email""
 * @hibernate.property 
 * @hibernate.column name=""email"" not-null=""true"" unique=""true""
 */
public String getEmail(){
  return email;
}"
85481,"public int doStartTag() throws JspException {
  try {
    this.requestContext=new RequestContext((HttpServletRequest)this.pageContext.getRequest());
  }
 catch (  RuntimeException ex) {
    throw ex;
  }
catch (  Exception ex) {
    pageContext.getServletContext().log(""String_Node_Str"",ex);
  }
  boolean requiredField=false;
  boolean validationError=false;
  ValidatorResources resources=getValidatorResources();
  Locale locale=pageContext.getRequest().getLocale();
  if (locale == null) {
    locale=Locale.getDefault();
  }
  String formName=key.substring(0,key.indexOf('.'));
  String fieldName=key.substring(formName.length() + 1);
  if (resources != null) {
    Form form=resources.getForm(locale,formName);
    if (form != null) {
      Field field=form.getField(fieldName);
      if (field != null) {
        if (field.isDependency(""String_Node_Str"")) {
          requiredField=true;
        }
      }
    }
  }
  Errors errors=requestContext.getErrors(formName,false);
  List fes=null;
  String errorMsg=null;
  if (errors != null) {
    fes=errors.getFieldErrors(fieldName);
    errorMsg=getErrorMessages(fes);
  }
  String message=null;
  try {
    message=getMessageSource().getMessage(key,null,locale);
  }
 catch (  NoSuchMessageException nsm) {
    message=""String_Node_Str"" + key + ""String_Node_Str"";
  }
  String cssClass=null;
  if (styleClass != null) {
    cssClass=styleClass;
  }
 else   if (requiredField) {
    cssClass=""String_Node_Str"";
  }
  String cssErrorClass=(errorClass != null) ? errorClass : ""String_Node_Str"";
  StringBuffer label=new StringBuffer();
  if ((message == null) || ""String_Node_Str"".equals(message.trim())) {
    label.append(""String_Node_Str"");
  }
 else {
    label.append(""String_Node_Str"" + fieldName + ""String_Node_Str"");
    if (validationError) {
      label.append(""String_Node_Str"" + cssErrorClass + ""String_Node_Str"");
    }
 else     if (cssClass != null) {
      label.append(""String_Node_Str"" + cssClass + ""String_Node_Str"");
    }
    label.append(""String_Node_Str"" + ((requiredField) ? ""String_Node_Str"" : ""String_Node_Str"") + message);
    label.append(((colon) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    if (fes != null && fes.size() > 0) {
      if (helpTip) {
        label.append(""String_Node_Str"");
        label.append(errorMsg + ""String_Node_Str"");
        label.append(""String_Node_Str"");
        label.append(errorMsg + ""String_Node_Str"");
        label.append(""String_Node_Str"");
      }
      label.append(""String_Node_Str"");
      label.append(getMessageSource().getMessage(""String_Node_Str"",null,locale));
      label.append(""String_Node_Str"");
      String context=((HttpServletRequest)pageContext.getRequest()).getContextPath();
      label.append(""String_Node_Str"" + context);
      label.append(getMessageSource().getMessage(""String_Node_Str"",null,locale));
      label.append(""String_Node_Str"");
      if (helpTip) {
        label.append(""String_Node_Str"");
      }
    }
  }
  try {
    writeMessage(label.toString());
  }
 catch (  IOException io) {
    io.printStackTrace();
    throw new JspException(""String_Node_Str"" + io.getMessage());
  }
  return (SKIP_BODY);
}","public int doStartTag() throws JspException {
  try {
    this.requestContext=new RequestContext((HttpServletRequest)this.pageContext.getRequest());
  }
 catch (  RuntimeException ex) {
    throw ex;
  }
catch (  Exception ex) {
    pageContext.getServletContext().log(""String_Node_Str"",ex);
  }
  boolean requiredField=false;
  boolean validationError=false;
  ValidatorResources resources=getValidatorResources();
  Locale locale=pageContext.getRequest().getLocale();
  if (locale == null) {
    locale=Locale.getDefault();
  }
  String formName=key.substring(0,key.indexOf('.'));
  String fieldName=key.substring(formName.length() + 1);
  if (resources != null) {
    Form form=resources.getForm(locale,formName);
    if (form != null) {
      Field field=form.getField(fieldName);
      if (field != null) {
        if (field.isDependency(""String_Node_Str"")) {
          requiredField=true;
        }
      }
    }
  }
  Errors errors=requestContext.getErrors(formName,false);
  List fes=null;
  String errorMsg=null;
  if (errors != null) {
    fes=errors.getFieldErrors(fieldName);
    errorMsg=getErrorMessages(fes);
  }
  String message=null;
  try {
    message=getMessageSource().getMessage(key,null,locale);
  }
 catch (  NoSuchMessageException nsm) {
    message=""String_Node_Str"" + key + ""String_Node_Str"";
  }
  String cssClass=null;
  if (styleClass != null) {
    cssClass=styleClass;
  }
 else   if (requiredField) {
    cssClass=""String_Node_Str"";
  }
  String cssErrorClass=(errorClass != null) ? errorClass : ""String_Node_Str"";
  StringBuffer label=new StringBuffer();
  if ((message == null) || ""String_Node_Str"".equals(message.trim())) {
    label.append(""String_Node_Str"");
  }
 else {
    label.append(""String_Node_Str"" + fieldName + ""String_Node_Str"");
    if (validationError) {
      label.append(""String_Node_Str"" + cssErrorClass + ""String_Node_Str"");
    }
 else     if (cssClass != null) {
      label.append(""String_Node_Str"" + cssClass + ""String_Node_Str"");
    }
    label.append(""String_Node_Str"" + ((requiredField) ? ""String_Node_Str"" : ""String_Node_Str"") + message);
    String marker=(locale.equals(Locale.FRENCH)) ? ""String_Node_Str"" : ""String_Node_Str"";
    label.append(((colon) ? marker : ""String_Node_Str"") + ""String_Node_Str"");
    if (fes != null && fes.size() > 0) {
      if (helpTip) {
        label.append(""String_Node_Str"");
        label.append(errorMsg + ""String_Node_Str"");
        label.append(""String_Node_Str"");
        label.append(errorMsg + ""String_Node_Str"");
        label.append(""String_Node_Str"");
      }
      label.append(""String_Node_Str"");
      label.append(getMessageSource().getMessage(""String_Node_Str"",null,locale));
      label.append(""String_Node_Str"");
      String context=((HttpServletRequest)pageContext.getRequest()).getContextPath();
      label.append(""String_Node_Str"" + context);
      label.append(getMessageSource().getMessage(""String_Node_Str"",null,locale));
      label.append(""String_Node_Str"");
      if (helpTip) {
        label.append(""String_Node_Str"");
      }
    }
  }
  try {
    writeMessage(label.toString());
  }
 catch (  IOException io) {
    io.printStackTrace();
    throw new JspException(""String_Node_Str"" + io.getMessage());
  }
  return (SKIP_BODY);
}"
85482,"public int doStartTag() throws JspException {
  boolean requiredField=false;
  boolean validationError=false;
  TagUtils tagUtils=TagUtils.getInstance();
  ValidatorResources resources=(ValidatorResources)pageContext.getServletContext().getAttribute(ValidatorPlugIn.VALIDATOR_KEY);
  Locale locale=(Locale)pageContext.findAttribute(Globals.LOCALE_KEY);
  if (locale == null) {
    locale=Locale.getDefault();
  }
  FormTag formTag=(FormTag)pageContext.getAttribute(Constants.FORM_KEY,PageContext.REQUEST_SCOPE);
  String formName=formTag.getBeanName();
  String fieldName=key.substring(formName.length() + 1);
  if (resources != null) {
    Form form=resources.getForm(locale,formName);
    if (form != null) {
      Field field=form.getField(fieldName);
      if (field != null) {
        if (field.isDependency(""String_Node_Str"")) {
          requiredField=true;
        }
      }
    }
  }
  ActionMessages errors=tagUtils.getActionMessages(pageContext,Globals.ERROR_KEY);
  StringBuffer valMessage=new StringBuffer();
  if (errors != null) {
    Iterator valIterator=errors.get(fieldName);
    while (valIterator.hasNext()) {
      validationError=true;
      ActionMessage error=(ActionMessage)valIterator.next();
      valMessage.append(tagUtils.message(pageContext,Globals.MESSAGES_KEY,locale.getDisplayName(),error.getKey(),error.getValues()));
    }
  }
  String message=tagUtils.message(pageContext,Globals.MESSAGES_KEY,locale.getDisplayName(),key);
  StringBuffer valError=new StringBuffer();
  if (message == null) {
    message=""String_Node_Str"" + key + ""String_Node_Str"";
  }
 else   if (validationError) {
    valError.append(valMessage);
  }
  String cssClass=null;
  if (styleClass != null) {
    cssClass=styleClass;
  }
 else   if (requiredField) {
    cssClass=""String_Node_Str"";
  }
  String cssErrorClass=(errorClass != null) ? errorClass : ""String_Node_Str"";
  StringBuffer label=new StringBuffer();
  if ((message == null) || ""String_Node_Str"".equals(message.trim())) {
    label.append(""String_Node_Str"");
  }
 else {
    label.append(""String_Node_Str"" + fieldName + ""String_Node_Str"");
    if (validationError) {
      label.append(""String_Node_Str"" + cssErrorClass + ""String_Node_Str"");
    }
 else     if (cssClass != null) {
      label.append(""String_Node_Str"" + cssClass + ""String_Node_Str"");
    }
    label.append(""String_Node_Str"" + ((requiredField) ? ""String_Node_Str"" : ""String_Node_Str"") + message);
    label.append(((colon) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    if (valError.length() > 0) {
      String error=valError.toString();
      if (helpTip) {
        String htmlFriendly=StringUtils.replace(error,""String_Node_Str"",""String_Node_Str"");
        htmlFriendly=StringUtils.replace(htmlFriendly,""String_Node_Str"",""String_Node_Str"");
        label.append(""String_Node_Str"");
        label.append(htmlFriendly + ""String_Node_Str"");
        label.append(""String_Node_Str"");
        label.append(htmlFriendly + ""String_Node_Str"");
        label.append(""String_Node_Str"");
      }
      label.append(""String_Node_Str"");
      label.append(tagUtils.message(pageContext,Globals.MESSAGES_KEY,locale.getDisplayName(),""String_Node_Str""));
      label.append(""String_Node_Str"");
      String context=((HttpServletRequest)pageContext.getRequest()).getContextPath();
      label.append(""String_Node_Str"" + context);
      label.append(tagUtils.message(pageContext,Globals.MESSAGES_KEY,locale.getDisplayName(),""String_Node_Str""));
      label.append(""String_Node_Str"");
      if (helpTip) {
        label.append(""String_Node_Str"");
      }
    }
  }
  tagUtils.write(pageContext,label.toString());
  return (SKIP_BODY);
}","public int doStartTag() throws JspException {
  boolean requiredField=false;
  boolean validationError=false;
  TagUtils tagUtils=TagUtils.getInstance();
  ValidatorResources resources=(ValidatorResources)pageContext.getServletContext().getAttribute(ValidatorPlugIn.VALIDATOR_KEY);
  Locale locale=(Locale)pageContext.findAttribute(Globals.LOCALE_KEY);
  if (locale == null) {
    locale=Locale.getDefault();
  }
  FormTag formTag=(FormTag)pageContext.getAttribute(Constants.FORM_KEY,PageContext.REQUEST_SCOPE);
  String formName=formTag.getBeanName();
  String fieldName=key.substring(formName.length() + 1);
  if (resources != null) {
    Form form=resources.getForm(locale,formName);
    if (form != null) {
      Field field=form.getField(fieldName);
      if (field != null) {
        if (field.isDependency(""String_Node_Str"")) {
          requiredField=true;
        }
      }
    }
  }
  ActionMessages errors=tagUtils.getActionMessages(pageContext,Globals.ERROR_KEY);
  StringBuffer valMessage=new StringBuffer();
  if (errors != null) {
    Iterator valIterator=errors.get(fieldName);
    while (valIterator.hasNext()) {
      validationError=true;
      ActionMessage error=(ActionMessage)valIterator.next();
      valMessage.append(tagUtils.message(pageContext,Globals.MESSAGES_KEY,locale.getDisplayName(),error.getKey(),error.getValues()));
    }
  }
  String message=tagUtils.message(pageContext,Globals.MESSAGES_KEY,locale.getDisplayName(),key);
  StringBuffer valError=new StringBuffer();
  if (message == null) {
    message=""String_Node_Str"" + key + ""String_Node_Str"";
  }
 else   if (validationError) {
    valError.append(valMessage);
  }
  String cssClass=null;
  if (styleClass != null) {
    cssClass=styleClass;
  }
 else   if (requiredField) {
    cssClass=""String_Node_Str"";
  }
  String cssErrorClass=(errorClass != null) ? errorClass : ""String_Node_Str"";
  StringBuffer label=new StringBuffer();
  if ((message == null) || ""String_Node_Str"".equals(message.trim())) {
    label.append(""String_Node_Str"");
  }
 else {
    label.append(""String_Node_Str"" + fieldName + ""String_Node_Str"");
    if (validationError) {
      label.append(""String_Node_Str"" + cssErrorClass + ""String_Node_Str"");
    }
 else     if (cssClass != null) {
      label.append(""String_Node_Str"" + cssClass + ""String_Node_Str"");
    }
    label.append(""String_Node_Str"" + ((requiredField) ? ""String_Node_Str"" : ""String_Node_Str"") + message);
    String marker=(locale.equals(Locale.FRENCH)) ? ""String_Node_Str"" : ""String_Node_Str"";
    label.append(((colon) ? marker : ""String_Node_Str"") + ""String_Node_Str"");
    if (valError.length() > 0) {
      String error=valError.toString();
      if (helpTip) {
        String htmlFriendly=StringUtils.replace(error,""String_Node_Str"",""String_Node_Str"");
        htmlFriendly=StringUtils.replace(htmlFriendly,""String_Node_Str"",""String_Node_Str"");
        label.append(""String_Node_Str"");
        label.append(htmlFriendly + ""String_Node_Str"");
        label.append(""String_Node_Str"");
        label.append(htmlFriendly + ""String_Node_Str"");
        label.append(""String_Node_Str"");
      }
      label.append(""String_Node_Str"");
      label.append(tagUtils.message(pageContext,Globals.MESSAGES_KEY,locale.getDisplayName(),""String_Node_Str""));
      label.append(""String_Node_Str"");
      String context=((HttpServletRequest)pageContext.getRequest()).getContextPath();
      label.append(""String_Node_Str"" + context);
      label.append(tagUtils.message(pageContext,Globals.MESSAGES_KEY,locale.getDisplayName(),""String_Node_Str""));
      label.append(""String_Node_Str"");
      if (helpTip) {
        label.append(""String_Node_Str"");
      }
    }
  }
  tagUtils.write(pageContext,label.toString());
  return (SKIP_BODY);
}"
85483,"public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    return mapping.findForward(""String_Node_Str"");
  }
 else   if (isCancelled(request)) {
    return new ActionForward(""String_Node_Str"");
  }
 else {
    ActionMessages errors=form.validate(mapping,request);
    if (!errors.isEmpty()) {
      saveErrors(request,errors);
      return mapping.findForward(""String_Node_Str"");
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ActionMessages errors=new ActionMessages();
  UserForm userForm=(UserForm)form;
  User user=(User)convert(form);
  String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
  user.addRole(Constants.USER_ROLE);
  try {
    if (algorithm == null) {
      log.debug(""String_Node_Str"");
      algorithm=""String_Node_Str"";
    }
    user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
    UserManager mgr=(UserManager)getBean(""String_Node_Str"");
    user=mgr.saveUser(user);
    String loginCookie=mgr.createLoginCookie(user.getUsername());
    RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,loginCookie,request.getContextPath());
  }
 catch (  Exception e) {
    if ((e.getMessage() != null) && (e.getMessage().indexOf(""String_Node_Str"") != -1)) {
      log.warn(""String_Node_Str"" + e.getMessage());
      errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername(),userForm.getEmail()));
      saveErrors(request,errors);
      return mapping.getInputForward();
    }
    e.printStackTrace();
    errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str""));
    while (e != null) {
      String msg=e.getMessage();
      if ((msg.indexOf(""String_Node_Str"") != -1) || (msg.indexOf(""String_Node_Str"") != -1)) {
        log.warn(""String_Node_Str"" + e.getMessage());
        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername(),userForm.getEmail()));
        break;
      }
      errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",e.getMessage()));
      e=(Exception)e.getCause();
    }
    saveErrors(request,errors);
    return mapping.getInputForward();
  }
  ActionMessages messages=new ActionMessages();
  MessageResources resources=getResources(request);
  messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername()));
  HttpSession session=request.getSession();
  session.setAttribute(Globals.MESSAGE_KEY,messages);
  session.setAttribute(Constants.REGISTERED,Boolean.TRUE);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userForm.getUsername() + ""String_Node_Str"");
  }
  StringBuffer msg=new StringBuffer();
  msg.append(resources.getMessage(""String_Node_Str""));
  msg.append(""String_Node_Str"" + resources.getMessage(""String_Node_Str""));
  msg.append(""String_Node_Str"" + userForm.getUsername() + ""String_Node_Str"");
  msg.append(resources.getMessage(""String_Node_Str"") + ""String_Node_Str"");
  msg.append(userForm.getPassword());
  msg.append(""String_Node_Str"" + RequestUtils.serverURL(request) + request.getContextPath());
  String subject=resources.getMessage(""String_Node_Str"");
  try {
    MailSender.sendTextMessage(Constants.DEFAULT_FROM,userForm.getEmail(),null,subject,msg.toString());
  }
 catch (  MessagingException me) {
    log.warn(""String_Node_Str"");
  }
  return mapping.findForward(""String_Node_Str"");
}","public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (request.getMethod().equals(""String_Node_Str"") && request.getParameter(""String_Node_Str"") == null) {
    return mapping.findForward(""String_Node_Str"");
  }
 else   if (isCancelled(request)) {
    return new ActionForward(""String_Node_Str"");
  }
 else {
    ActionMessages errors=form.validate(mapping,request);
    if (!errors.isEmpty()) {
      saveErrors(request,errors);
      return mapping.findForward(""String_Node_Str"");
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ActionMessages errors=new ActionMessages();
  UserForm userForm=(UserForm)form;
  User user=(User)convert(form);
  String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
  user.addRole(Constants.USER_ROLE);
  try {
    if (algorithm == null) {
      log.debug(""String_Node_Str"");
      algorithm=""String_Node_Str"";
    }
    user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
    UserManager mgr=(UserManager)getBean(""String_Node_Str"");
    user=mgr.saveUser(user);
    String loginCookie=mgr.createLoginCookie(user.getUsername());
    RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,loginCookie,request.getContextPath());
  }
 catch (  Exception e) {
    if ((e.getMessage() != null) && (e.getMessage().indexOf(""String_Node_Str"") != -1)) {
      log.warn(""String_Node_Str"" + e.getMessage());
      errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername(),userForm.getEmail()));
      saveErrors(request,errors);
      return mapping.getInputForward();
    }
    e.printStackTrace();
    errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str""));
    while (e != null) {
      String msg=e.getMessage();
      if ((msg.indexOf(""String_Node_Str"") != -1) || (msg.indexOf(""String_Node_Str"") != -1)) {
        log.warn(""String_Node_Str"" + e.getMessage());
        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername(),userForm.getEmail()));
        break;
      }
      errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",e.getMessage()));
      e=(Exception)e.getCause();
    }
    saveErrors(request,errors);
    return mapping.getInputForward();
  }
  ActionMessages messages=new ActionMessages();
  MessageResources resources=getResources(request);
  messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername()));
  HttpSession session=request.getSession();
  session.setAttribute(Globals.MESSAGE_KEY,messages);
  session.setAttribute(Constants.REGISTERED,Boolean.TRUE);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userForm.getUsername() + ""String_Node_Str"");
  }
  StringBuffer msg=new StringBuffer();
  msg.append(resources.getMessage(""String_Node_Str""));
  msg.append(""String_Node_Str"" + resources.getMessage(""String_Node_Str""));
  msg.append(""String_Node_Str"" + userForm.getUsername() + ""String_Node_Str"");
  msg.append(resources.getMessage(""String_Node_Str"") + ""String_Node_Str"");
  msg.append(userForm.getPassword());
  msg.append(""String_Node_Str"" + RequestUtils.serverURL(request) + request.getContextPath());
  String subject=resources.getMessage(""String_Node_Str"");
  try {
    MailSender.sendTextMessage(Constants.DEFAULT_FROM,userForm.getEmail(),null,subject,msg.toString());
  }
 catch (  MessagingException me) {
    log.warn(""String_Node_Str"");
  }
  return mapping.findForward(""String_Node_Str"");
}"
85484,"public void saveMessage(HttpServletRequest request,Object msg){
  List messages=(List)request.getSession().getAttribute(""String_Node_Str"");
  if (messages == null) {
    messages=new ArrayList();
  }
  messages.add(msg);
  request.getSession().setAttribute(""String_Node_Str"",messages);
}","public void saveMessage(HttpServletRequest request,String msg){
  List messages=(List)request.getSession().getAttribute(""String_Node_Str"");
  if (messages == null) {
    messages=new ArrayList();
  }
  messages.add(msg);
  request.getSession().setAttribute(""String_Node_Str"",messages);
}"
85485,"/** 
 * Extract the error messages from the given ObjectError list.
 */
private String getErrorMessages(List fes) throws NoSuchMessageException, JspException {
  StringBuffer message=new StringBuffer();
  for (int i=0; i < fes.size(); i++) {
    ObjectError error=(ObjectError)fes.get(i);
    message.append(this.requestContext.getMessage(error,true));
  }
  return message.toString();
}","/** 
 * Extract the error messages from the given ObjectError list.
 */
private String getErrorMessages(List fes) throws NoSuchMessageException {
  StringBuffer message=new StringBuffer();
  for (int i=0; i < fes.size(); i++) {
    ObjectError error=(ObjectError)fes.get(i);
    message.append(this.requestContext.getMessage(error,true));
  }
  return message.toString();
}"
85486,"/** 
 * Convenience method used by tests to populate an object from a ResourceBundle
 * @param obj an initialized object
 * @param rb a resource bundle
 * @return a populated object
 */
public static Object populateObject(Object obj,ResourceBundle rb){
  try {
    if (obj == null) {
      obj=obj.getClass().newInstance();
    }
    Map map=convertBundleToMap(rb);
    BeanUtils.copyProperties(obj,map);
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(""String_Node_Str"" + e.getMessage());
  }
  return obj;
}","/** 
 * Convenience method used by tests to populate an object from a ResourceBundle
 * @param obj an initialized object
 * @param rb a resource bundle
 * @return a populated object
 */
public static Object populateObject(Object obj,ResourceBundle rb){
  try {
    Map map=convertBundleToMap(rb);
    BeanUtils.copyProperties(obj,map);
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(""String_Node_Str"" + e.getMessage());
  }
  return obj;
}"
85487,"/** 
 * Encode a string using Base64 encoding. Used when storing passwords as cookies. This is weak encoding in that anyone can use the decodeString routine to reverse the encoding.
 * @param str
 * @return String
 */
public static String encodeString(String str){
  sun.misc.BASE64Encoder encoder=new sun.misc.BASE64Encoder();
  return new String(encoder.encodeBuffer(str.getBytes())).trim();
}","/** 
 * Encode a string using Base64 encoding. Used when storing passwords as cookies. This is weak encoding in that anyone can use the decodeString routine to reverse the encoding.
 * @param str
 * @return String
 */
public static String encodeString(String str){
  sun.misc.BASE64Encoder encoder=new sun.misc.BASE64Encoder();
  return encoder.encodeBuffer(str.getBytes()).trim();
}"
85488,"public int hashCode(Object o){
  return HashCodeBuilder.reflectionHashCode(this);
}","public int hashCode(){
  return HashCodeBuilder.reflectionHashCode(this);
}"
85489,"public void contextDestroyed(ServletContextEvent sce){
  users=null;
  counter=0;
}","public void contextDestroyed(ServletContextEvent event){
}"
85490,"protected void setUp() throws Exception {
  dao=(LookupDAO)ctx.getBean(""String_Node_Str"");
}","protected void setUp() throws Exception {
  super.setUp();
  dao=(LookupDAO)ctx.getBean(""String_Node_Str"");
}"
85491,"public void testGetUserInvalid() throws Exception {
  try {
    user=dao.getUser(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  DAOException d) {
    if (log.isDebugEnabled()) {
      log.debug(d);
    }
    assertTrue(d != null);
  }
}","public void testGetUserInvalid() throws Exception {
  try {
    user=dao.getUser(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  DAOException d) {
    if (log.isDebugEnabled()) {
      log.debug(d);
    }
    assertNotNull(d);
  }
}"
85492,"protected void setUp() throws Exception {
  dao=(UserDAO)ctx.getBean(""String_Node_Str"");
}","protected void setUp() throws Exception {
  super.setUp();
  dao=(UserDAO)ctx.getBean(""String_Node_Str"");
}"
85493,"public void testRemoveUser() throws Exception {
  dao.removeUser(""String_Node_Str"");
  try {
    user=dao.getUser(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  DAOException d) {
    if (log.isDebugEnabled()) {
      log.debug(d);
    }
    assertTrue(d != null);
  }
}","public void testRemoveUser() throws Exception {
  dao.removeUser(""String_Node_Str"");
  try {
    user=dao.getUser(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  DAOException d) {
    if (log.isDebugEnabled()) {
      log.debug(d);
    }
    assertNotNull(d);
  }
}"
85494,"protected void tearDown(){
  dao=null;
}","protected void tearDown() throws Exception {
  super.tearDown();
  dao=null;
}"
85495,"protected void setUp() throws Exception {
  mgr=(LookupManager)ctx.getBean(""String_Node_Str"");
}","protected void setUp() throws Exception {
  super.setUp();
  mgr=(LookupManager)ctx.getBean(""String_Node_Str"");
}"
85496,"protected void setUp() throws Exception {
  mgr=(UserManager)ctx.getBean(""String_Node_Str"");
}","protected void setUp() throws Exception {
  super.setUp();
  mgr=(UserManager)ctx.getBean(""String_Node_Str"");
}"
85497,"public void testAddAndRemoveUser() throws Exception {
  user=new User();
  user=(User)populate(user);
  user.addRole(Constants.USER_ROLE);
  user=mgr.saveUser(user);
  assertTrue(user.getUsername().equals(""String_Node_Str""));
  assertTrue(user.getRoles().size() == 1);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  mgr.removeUser(user.getUsername());
  try {
    user=mgr.getUser(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(e);
    }
    assertTrue(e != null);
  }
}","public void testAddAndRemoveUser() throws Exception {
  user=new User();
  user=(User)populate(user);
  user.addRole(Constants.USER_ROLE);
  user=mgr.saveUser(user);
  assertTrue(user.getUsername().equals(""String_Node_Str""));
  assertTrue(user.getRoles().size() == 1);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  mgr.removeUser(user.getUsername());
  try {
    user=mgr.getUser(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(e);
    }
    assertNotNull(e);
  }
}"
85498,"public void tearDown(){
  ctx=null;
}","public void tearDown() throws Exception {
  super.tearDown();
  ctx=null;
}"
85499,"/** 
 * load resources and setup values
 * @throws Exception an exception
 */
protected void setUp() throws Exception {
  messages=ResourceBundle.getBundle(""String_Node_Str"");
  testParams=ResourceBundle.getBundle(this.getClass().getName());
  conversation=new WebConversation();
}","/** 
 * load resources and setup values
 * @throws Exception an exception
 */
protected void setUp() throws Exception {
  super.setUp();
  messages=ResourceBundle.getBundle(""String_Node_Str"");
  testParams=ResourceBundle.getBundle(this.getClass().getName());
  conversation=new WebConversation();
}"
85500,"protected void setUp() throws Exception {
  listener=new StartupListener();
  context=config.getServletContext();
}","protected void setUp() throws Exception {
  super.setUp();
  listener=new StartupListener();
  context=config.getServletContext();
}"
85501,"protected void tearDown() throws Exception {
  listener=null;
}","protected void tearDown() throws Exception {
  super.tearDown();
  listener=null;
}"
85502,"public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  User user=(User)command;
  String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
  if (algorithm == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    algorithm=""String_Node_Str"";
  }
  user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
  user.addRole(Constants.USER_ROLE);
  try {
    mgr.saveUser(user);
  }
 catch (  Exception e) {
    if ((e.getMessage() != null) && (e.getMessage().indexOf(""String_Node_Str"") != -1)) {
      log.warn(""String_Node_Str"" + e.getMessage());
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()},""String_Node_Str"");
      user.setPassword(user.getConfirmPassword());
      return showForm(request,response,errors);
    }
  }
  String loginCookie=mgr.createLoginCookie(user.getUsername());
  RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,loginCookie,request.getContextPath());
  String message=getMessageSourceAccessor().getMessage(""String_Node_Str"",new Object[]{user.getUsername()});
  saveMessage(request,message);
  request.getSession().setAttribute(Constants.REGISTERED,Boolean.TRUE);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  }
  StringBuffer msg=new StringBuffer();
  msg.append(getMessageSourceAccessor().getMessage(""String_Node_Str""));
  msg.append(""String_Node_Str"" + getMessageSourceAccessor().getMessage(""String_Node_Str""));
  msg.append(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  msg.append(getMessageSourceAccessor().getMessage(""String_Node_Str"") + ""String_Node_Str"");
  msg.append(user.getPassword());
  msg.append(""String_Node_Str"" + RequestUtil.getAppURL(request) + request.getContextPath());
  String subject=getMessageSourceAccessor().getMessage(""String_Node_Str"");
  try {
    MailSender.sendTextMessage(Constants.DEFAULT_FROM,user.getEmail(),null,subject,msg.toString());
  }
 catch (  MessagingException me) {
    log.warn(""String_Node_Str"");
  }
  return new ModelAndView(new RedirectView(getSuccessView()));
}","public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  User user=(User)command;
  String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
  if (algorithm == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    algorithm=""String_Node_Str"";
  }
  user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
  user.addRole(Constants.USER_ROLE);
  try {
    mgr.saveUser(user);
  }
 catch (  Exception e) {
    if ((e.getMessage() != null) && (e.getMessage().indexOf(""String_Node_Str"") != -1)) {
      log.warn(""String_Node_Str"" + e.getMessage());
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()},""String_Node_Str"");
      user.setPassword(user.getConfirmPassword());
      return showForm(request,response,errors);
    }
  }
  String loginCookie=mgr.createLoginCookie(user.getUsername());
  RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,loginCookie,request.getContextPath());
  String message=getMessageSourceAccessor().getMessage(""String_Node_Str"",new Object[]{user.getUsername()});
  saveMessage(request,message);
  request.getSession().setAttribute(Constants.REGISTERED,Boolean.TRUE);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  }
  StringBuffer msg=new StringBuffer();
  msg.append(getMessageSourceAccessor().getMessage(""String_Node_Str""));
  msg.append(""String_Node_Str"" + getMessageSourceAccessor().getMessage(""String_Node_Str""));
  msg.append(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  msg.append(getMessageSourceAccessor().getMessage(""String_Node_Str"") + ""String_Node_Str"");
  msg.append(user.getConfirmPassword());
  msg.append(""String_Node_Str"" + RequestUtil.getAppURL(request) + request.getContextPath());
  String subject=getMessageSourceAccessor().getMessage(""String_Node_Str"");
  try {
    MailSender.sendTextMessage(Constants.DEFAULT_FROM,user.getEmail(),null,subject,msg.toString());
  }
 catch (  MessagingException me) {
    log.warn(""String_Node_Str"");
  }
  return new ModelAndView(new RedirectView(getSuccessView()));
}"
85503,"public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  User user=(User)command;
  if (request.getParameter(""String_Node_Str"") != null) {
    mgr.removeUser(user.getUsername());
    String message=getMessageSourceAccessor().getMessage(""String_Node_Str"",new Object[]{user.getUsername()});
    saveMessage(request,message);
    return new ModelAndView(new RedirectView(""String_Node_Str""));
  }
 else {
    if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
      String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
      if (algorithm == null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"");
        }
        algorithm=""String_Node_Str"";
      }
      user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
    }
    try {
      mgr.saveUser(user);
    }
 catch (    Exception e) {
      if ((e.getMessage() != null) && (e.getMessage().indexOf(""String_Node_Str"") != -1)) {
        log.warn(""String_Node_Str"" + e.getMessage());
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()},""String_Node_Str"");
        user.setPassword(user.getConfirmPassword());
        return showForm(request,response,errors);
      }
    }
    String message=null;
    if (!StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
      HttpSession session=request.getSession();
      session.setAttribute(Constants.USER_KEY,user);
      if ((RequestUtil.getCookie(request,Constants.LOGIN_COOKIE) != null) && (session.getAttribute(""String_Node_Str"") == null)) {
        mgr.removeLoginCookies(user.getUsername());
        String autoLogin=mgr.createLoginCookie(user.getUsername());
        RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,autoLogin,request.getContextPath());
      }
      message=getMessageSourceAccessor().getMessage(""String_Node_Str"",new Object[]{user.getFullName()});
      saveMessage(request,message);
      return new ModelAndView(new RedirectView(""String_Node_Str""));
    }
 else {
      String msg=null;
      if (StringUtils.isEmpty(request.getParameter(""String_Node_Str""))) {
        message=getMessageSourceAccessor().getMessage(""String_Node_Str"",new Object[]{user.getFullName()});
        saveMessage(request,message);
        sendNewUserEmail(user);
        return showNewForm(request,response);
      }
 else {
        message=getMessageSourceAccessor().getMessage(""String_Node_Str"",new Object[]{user.getFullName()});
        saveMessage(request,message);
      }
    }
  }
  return showForm(request,response,errors);
}","public ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  User user=(User)command;
  if (request.getParameter(""String_Node_Str"") != null) {
    mgr.removeUser(user.getUsername());
    String message=getMessageSourceAccessor().getMessage(""String_Node_Str"",new Object[]{user.getUsername()});
    saveMessage(request,message);
    return new ModelAndView(new RedirectView(""String_Node_Str""));
  }
 else {
    if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
      String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
      if (algorithm == null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"");
        }
        algorithm=""String_Node_Str"";
      }
      user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));
    }
    try {
      mgr.saveUser(user);
    }
 catch (    Exception e) {
      if ((e.getMessage() != null) && (e.getMessage().indexOf(""String_Node_Str"") != -1)) {
        log.warn(""String_Node_Str"" + e.getMessage());
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{user.getUsername(),user.getEmail()},""String_Node_Str"");
        user.setPassword(user.getConfirmPassword());
        return showForm(request,response,errors);
      }
    }
    String message=null;
    if (!StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
      HttpSession session=request.getSession();
      session.setAttribute(Constants.USER_KEY,user);
      if ((RequestUtil.getCookie(request,Constants.LOGIN_COOKIE) != null) && (session.getAttribute(""String_Node_Str"") == null)) {
        mgr.removeLoginCookies(user.getUsername());
        String autoLogin=mgr.createLoginCookie(user.getUsername());
        RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,autoLogin,request.getContextPath());
      }
      message=getMessageSourceAccessor().getMessage(""String_Node_Str"",new Object[]{user.getFullName()});
      saveMessage(request,message);
      return new ModelAndView(new RedirectView(""String_Node_Str""));
    }
 else {
      String msg=null;
      if (StringUtils.isEmpty(request.getParameter(""String_Node_Str""))) {
        message=getMessageSourceAccessor().getMessage(""String_Node_Str"",new Object[]{user.getFullName()});
        saveMessage(request,message);
        sendNewUserEmail(user,request);
        return showNewForm(request,response);
      }
 else {
        message=getMessageSourceAccessor().getMessage(""String_Node_Str"",new Object[]{user.getFullName()});
        saveMessage(request,message);
      }
    }
  }
  return showForm(request,response,errors);
}"
85504,"private void sendNewUserEmail(User user) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  }
  String fullName=user.getFirstName() + ""String_Node_Str"" + user.getLastName();
  StringBuffer msg=new StringBuffer();
  msg.append(getMessageSourceAccessor().getMessage(""String_Node_Str"",fullName));
  msg.append(""String_Node_Str"" + getMessageSourceAccessor().getMessage(""String_Node_Str""));
  msg.append(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  msg.append(getMessageSourceAccessor().getMessage(""String_Node_Str"") + ""String_Node_Str"");
  msg.append(user.getPassword());
  msg.append(""String_Node_Str"" + RequestUtil.getAppURL(request) + request.getContextPath());
  String subject=getMessageSourceAccessor().getMessage(""String_Node_Str"");
  try {
    MailSender.sendTextMessage(Constants.DEFAULT_FROM,user.getEmail(),null,subject,msg.toString());
  }
 catch (  MessagingException me) {
    log.warn(""String_Node_Str"");
  }
}","private void sendNewUserEmail(User user,HttpServletRequest request) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  }
  String fullName=user.getFirstName() + ""String_Node_Str"" + user.getLastName();
  StringBuffer msg=new StringBuffer();
  msg.append(getMessageSourceAccessor().getMessage(""String_Node_Str"",fullName));
  msg.append(""String_Node_Str"" + getMessageSourceAccessor().getMessage(""String_Node_Str""));
  msg.append(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  msg.append(getMessageSourceAccessor().getMessage(""String_Node_Str"") + ""String_Node_Str"");
  msg.append(user.getPassword());
  msg.append(""String_Node_Str"" + RequestUtil.getAppURL(request) + request.getContextPath());
  String subject=getMessageSourceAccessor().getMessage(""String_Node_Str"");
  try {
    MailSender.sendTextMessage(Constants.DEFAULT_FROM,user.getEmail(),null,subject,msg.toString());
  }
 catch (  MessagingException me) {
    log.warn(""String_Node_Str"");
  }
}"
85505,"private void sendNewUserEmail(User user,HttpServletRequest request) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  }
  String fullName=user.getFirstName() + ""String_Node_Str"" + user.getLastName();
  StringBuffer msg=new StringBuffer();
  msg.append(getMessageSourceAccessor().getMessage(""String_Node_Str"",fullName));
  msg.append(""String_Node_Str"" + getMessageSourceAccessor().getMessage(""String_Node_Str""));
  msg.append(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  msg.append(getMessageSourceAccessor().getMessage(""String_Node_Str"") + ""String_Node_Str"");
  msg.append(user.getPassword());
  msg.append(""String_Node_Str"" + RequestUtil.getAppURL(request) + request.getContextPath());
  String subject=getMessageSourceAccessor().getMessage(""String_Node_Str"");
  try {
    MailSender.sendTextMessage(Constants.DEFAULT_FROM,user.getEmail(),null,subject,msg.toString());
  }
 catch (  MessagingException me) {
    log.warn(""String_Node_Str"");
  }
}","private void sendNewUserEmail(User user,HttpServletRequest request) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  }
  String fullName=user.getFirstName() + ""String_Node_Str"" + user.getLastName();
  StringBuffer msg=new StringBuffer();
  msg.append(getMessageSourceAccessor().getMessage(""String_Node_Str"",fullName));
  msg.append(""String_Node_Str"" + getMessageSourceAccessor().getMessage(""String_Node_Str""));
  msg.append(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
  msg.append(getMessageSourceAccessor().getMessage(""String_Node_Str"") + ""String_Node_Str"");
  msg.append(user.getConfirmPassword());
  msg.append(""String_Node_Str"" + RequestUtil.getAppURL(request) + request.getContextPath());
  String subject=getMessageSourceAccessor().getMessage(""String_Node_Str"");
  try {
    MailSender.sendTextMessage(Constants.DEFAULT_FROM,user.getEmail(),null,subject,msg.toString());
  }
 catch (  MessagingException me) {
    log.warn(""String_Node_Str"");
  }
}"
85506,"public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)resp;
  Cookie c=RequestUtil.getCookie(request,Constants.LOGIN_COOKIE);
  WebApplicationContext context=(WebApplicationContext)config.getServletContext().getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
  UserManager mgr=(UserManager)context.getBean(""String_Node_Str"");
  if (request.getRequestURL().indexOf(""String_Node_Str"") != -1) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + request.getRemoteUser() + ""String_Node_Str"");
    }
    mgr.removeLoginCookies(request.getRemoteUser());
    RequestUtil.deleteCookie(response,c,request.getContextPath());
    request.getSession().invalidate();
  }
 else   if (c != null && enabled) {
    try {
      String loginCookie=mgr.checkLoginCookie(c.getValue());
      if (loginCookie != null) {
        RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,loginCookie,request.getContextPath());
        loginCookie=StringUtil.decodeString(loginCookie);
        String[] value=StringUtils.split(loginCookie,'|');
        User user=(User)mgr.getUser(value[0]);
        String route=""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getPassword();
        request.setAttribute(""String_Node_Str"",""String_Node_Str"");
        request.getSession(true).setAttribute(""String_Node_Str"",""String_Node_Str"");
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
        }
        RequestDispatcher dispatcher=request.getRequestDispatcher(route);
        dispatcher.forward(request,response);
        return;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      log.warn(e.getMessage());
    }
  }
  chain.doFilter(req,resp);
}","public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)resp;
  Cookie c=RequestUtil.getCookie(request,Constants.LOGIN_COOKIE);
  WebApplicationContext context=(WebApplicationContext)config.getServletContext().getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
  UserManager mgr=(UserManager)context.getBean(""String_Node_Str"");
  if (request.getRequestURL().indexOf(""String_Node_Str"") != -1) {
    if (request.getRemoteUser() != null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + request.getRemoteUser() + ""String_Node_Str"");
      }
      mgr.removeLoginCookies(request.getRemoteUser());
      RequestUtil.deleteCookie(response,c,request.getContextPath());
      request.getSession().invalidate();
    }
  }
 else   if (c != null && enabled) {
    try {
      String loginCookie=mgr.checkLoginCookie(c.getValue());
      if (loginCookie != null) {
        RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,loginCookie,request.getContextPath());
        loginCookie=StringUtil.decodeString(loginCookie);
        String[] value=StringUtils.split(loginCookie,'|');
        User user=(User)mgr.getUser(value[0]);
        String route=""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getPassword();
        request.setAttribute(""String_Node_Str"",""String_Node_Str"");
        request.getSession(true).setAttribute(""String_Node_Str"",""String_Node_Str"");
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
        }
        RequestDispatcher dispatcher=request.getRequestDispatcher(route);
        dispatcher.forward(request,response);
        return;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      log.warn(e.getMessage());
    }
  }
  chain.doFilter(req,resp);
}"
85507,"/** 
 * Validates that two fields match.
 * @param bean
 * @param va
 * @param field
 * @param errors
 * @param request
 * @return boolean
 */
public static boolean validateTwoFields(Object bean,ValidatorAction va,Field field,ActionErrors errors,HttpServletRequest request){
  String value=ValidatorUtils.getValueAsString(bean,field.getProperty());
  String sProperty2=field.getVarValue(""String_Node_Str"");
  String value2=ValidatorUtils.getValueAsString(bean,sProperty2);
  if (!GenericValidator.isBlankOrNull(value)) {
    try {
      if (!value.equals(value2)) {
        errors.add(field.getKey(),Resources.getActionMessage(request,va,field));
        return false;
      }
    }
 catch (    Exception e) {
      errors.add(field.getKey(),Resources.getActionMessage(request,va,field));
      return false;
    }
  }
  return true;
}","/** 
 * Validates that two fields match.
 * @param bean
 * @param va
 * @param field
 * @param errors
 * @param request
 * @return boolean
 */
public static boolean validateTwoFields(Object bean,ValidatorAction va,Field field,ActionMessages errors,HttpServletRequest request){
  String value=ValidatorUtils.getValueAsString(bean,field.getProperty());
  String sProperty2=field.getVarValue(""String_Node_Str"");
  String value2=ValidatorUtils.getValueAsString(bean,sProperty2);
  if (!GenericValidator.isBlankOrNull(value)) {
    try {
      if (!value.equals(value2)) {
        errors.add(field.getKey(),Resources.getActionMessage(request,va,field));
        return false;
      }
    }
 catch (    Exception e) {
      errors.add(field.getKey(),Resources.getActionMessage(request,va,field));
      return false;
    }
  }
  return true;
}"
85508,"public ActionForward save(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ActionMessages errors=new ActionMessages();
  ActionMessages messages=new ActionMessages();
  HttpSession session=request.getSession();
  UserFormEx userForm=(UserFormEx)form;
  String password=userForm.getPassword();
  User user=new User();
  BeanUtils.copyProperties(user,userForm);
  if (StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
    if (algorithm == null) {
      log.debug(""String_Node_Str"");
      algorithm=""String_Node_Str"";
    }
    user.setPassword(StringUtil.encodePassword(password,algorithm));
  }
  UserManager mgr=(UserManager)getBean(""String_Node_Str"");
  try {
    user=(User)mgr.saveUser(user);
    setupRoles(user,request);
  }
 catch (  Exception e) {
    if ((e.getMessage() != null) && (e.getMessage().indexOf(""String_Node_Str"") != -1)) {
      log.warn(""String_Node_Str"" + e.getMessage());
      errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername(),userForm.getEmail()));
      saveErrors(request,errors);
      return mapping.findForward(""String_Node_Str"");
    }
    e.printStackTrace();
    errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str""));
    while (e != null) {
      errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",e.getMessage()));
      e=(Exception)e.getCause();
    }
    saveErrors(request,errors);
    return mapping.findForward(""String_Node_Str"");
  }
  if (!StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
    session.setAttribute(Constants.USER_KEY,userForm);
    if ((RequestUtil.getCookie(request,Constants.LOGIN_COOKIE) != null) && (session.getAttribute(""String_Node_Str"") == null)) {
      mgr.removeLoginCookies(userForm.getUsername());
      String autoLogin=mgr.createLoginCookie(userForm.getUsername());
      RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,autoLogin,request.getContextPath());
    }
    messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str""));
    saveMessages(request,messages);
    return mapping.findForward(""String_Node_Str"");
  }
 else {
    if (StringUtils.isEmpty(userForm.getId())) {
      messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername()));
      session.setAttribute(Globals.MESSAGE_KEY,messages);
      sendNewUserEmail(request,userForm);
      return mapping.findForward(""String_Node_Str"");
    }
 else {
      messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername()));
      saveMessages(request,messages);
      return mapping.findForward(""String_Node_Str"");
    }
  }
}","public ActionForward save(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ActionMessages errors=new ActionMessages();
  ActionMessages messages=new ActionMessages();
  HttpSession session=request.getSession();
  UserFormEx userForm=(UserFormEx)form;
  String password=userForm.getPassword();
  User user=new User();
  BeanUtils.copyProperties(user,userForm);
  if (StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);
    if (algorithm == null) {
      log.debug(""String_Node_Str"");
      algorithm=""String_Node_Str"";
    }
    user.setPassword(StringUtil.encodePassword(password,algorithm));
  }
  UserManager mgr=(UserManager)getBean(""String_Node_Str"");
  try {
    user=(User)mgr.saveUser(user);
    setupRoles(user,request);
  }
 catch (  Exception e) {
    if ((e.getMessage() != null) && (e.getMessage().indexOf(""String_Node_Str"") != -1)) {
      log.warn(""String_Node_Str"" + e.getMessage());
      errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername(),userForm.getEmail()));
      saveErrors(request,errors);
      return mapping.findForward(""String_Node_Str"");
    }
    e.printStackTrace();
    errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str""));
    while (e != null) {
      errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",e.getMessage()));
      e=(Exception)e.getCause();
    }
    saveErrors(request,errors);
    return mapping.findForward(""String_Node_Str"");
  }
  if (!StringUtils.equals(request.getParameter(""String_Node_Str""),""String_Node_Str"")) {
    session.setAttribute(Constants.USER_KEY,user);
    if ((RequestUtil.getCookie(request,Constants.LOGIN_COOKIE) != null) && (session.getAttribute(""String_Node_Str"") == null)) {
      mgr.removeLoginCookies(userForm.getUsername());
      String autoLogin=mgr.createLoginCookie(userForm.getUsername());
      RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,autoLogin,request.getContextPath());
    }
    messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str""));
    saveMessages(request,messages);
    return mapping.findForward(""String_Node_Str"");
  }
 else {
    if (StringUtils.isEmpty(userForm.getId())) {
      messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername()));
      session.setAttribute(Globals.MESSAGE_KEY,messages);
      sendNewUserEmail(request,userForm);
      return mapping.findForward(""String_Node_Str"");
    }
 else {
      messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(""String_Node_Str"",userForm.getUsername()));
      saveMessages(request,messages);
      return mapping.findForward(""String_Node_Str"");
    }
  }
}"
85509,"public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws IOException, ServletException {
  if (enabled) {
    HttpServletRequest request=(HttpServletRequest)req;
    HttpServletResponse response=(HttpServletResponse)resp;
    Cookie c=RequestUtil.getCookie(request,Constants.LOGIN_COOKIE);
    WebApplicationContext context=(WebApplicationContext)config.getServletContext().getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
    UserManager mgr=(UserManager)context.getBean(""String_Node_Str"");
    if (request.getRequestURL().indexOf(""String_Node_Str"") != -1) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + request.getRemoteUser() + ""String_Node_Str"");
      }
      mgr.removeLoginCookies(request.getRemoteUser());
      RequestUtil.deleteCookie(response,c,request.getContextPath());
      request.getSession().invalidate();
    }
 else     if (c != null) {
      try {
        String loginCookie=mgr.checkLoginCookie(c.getValue());
        if (loginCookie != null) {
          RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,loginCookie,request.getContextPath());
          loginCookie=StringUtil.decodeString(loginCookie);
          String[] value=StringUtils.split(loginCookie,'|');
          UserForm user=(UserForm)mgr.getUser(value[0]);
          String route=""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getPassword();
          request.setAttribute(""String_Node_Str"",""String_Node_Str"");
          request.getSession(true).setAttribute(""String_Node_Str"",""String_Node_Str"");
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
          }
          RequestDispatcher dispatcher=request.getRequestDispatcher(route);
          dispatcher.forward(request,response);
          return;
        }
      }
 catch (      Exception e) {
        log.warn(e.getMessage());
      }
    }
  }
  chain.doFilter(req,resp);
}","public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)resp;
  Cookie c=RequestUtil.getCookie(request,Constants.LOGIN_COOKIE);
  WebApplicationContext context=(WebApplicationContext)config.getServletContext().getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
  UserManager mgr=(UserManager)context.getBean(""String_Node_Str"");
  if (request.getRequestURL().indexOf(""String_Node_Str"") != -1) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + request.getRemoteUser() + ""String_Node_Str"");
    }
    mgr.removeLoginCookies(request.getRemoteUser());
    RequestUtil.deleteCookie(response,c,request.getContextPath());
    request.getSession().invalidate();
  }
 else   if (c != null && enabled) {
    try {
      String loginCookie=mgr.checkLoginCookie(c.getValue());
      if (loginCookie != null) {
        RequestUtil.setCookie(response,Constants.LOGIN_COOKIE,loginCookie,request.getContextPath());
        loginCookie=StringUtil.decodeString(loginCookie);
        String[] value=StringUtils.split(loginCookie,'|');
        UserForm user=(UserForm)mgr.getUser(value[0]);
        String route=""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getPassword();
        request.setAttribute(""String_Node_Str"",""String_Node_Str"");
        request.getSession(true).setAttribute(""String_Node_Str"",""String_Node_Str"");
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + user.getUsername() + ""String_Node_Str"");
        }
        RequestDispatcher dispatcher=request.getRequestDispatcher(route);
        dispatcher.forward(request,response);
        return;
      }
    }
 catch (    Exception e) {
      log.warn(e.getMessage());
    }
  }
  chain.doFilter(req,resp);
}"
85510,"public boolean validate(CreditCard creditCard){
  Character lastDigit=creditCard.getNumber().charAt(creditCard.getNumber().length() - 1);
  if (Integer.parseInt(lastDigit.toString()) % 2 != 0) {
    return true;
  }
 else {
    return false;
  }
}","public boolean validate(CreditCard creditCard){
  Character lastDigit=creditCard.getNumber().charAt(creditCard.getNumber().length() - 1);
  if (Integer.parseInt(lastDigit.toString()) % 2 == 0) {
    return true;
  }
 else {
    return false;
  }
}"
85511,"public boolean validate(CreditCard09 creditCard){
  Character lastDigit=creditCard.getNumber().charAt(creditCard.getNumber().length() - 1);
  if (Integer.parseInt(lastDigit.toString()) % 2 != 0) {
    return true;
  }
 else {
    return false;
  }
}","public boolean validate(CreditCard09 creditCard){
  Character lastDigit=creditCard.getNumber().charAt(creditCard.getNumber().length() - 1);
  if (Integer.parseInt(lastDigit.toString()) % 2 == 0) {
    return true;
  }
 else {
    return false;
  }
}"
85512,"@WebResult(name=""String_Node_Str"") public boolean validate(CreditCard12 creditCard){
  Character lastDigit=creditCard.getNumber().charAt(creditCard.getNumber().length() - 1);
  if (Integer.parseInt(lastDigit.toString()) % 2 != 0) {
    return true;
  }
 else {
    return false;
  }
}","@WebResult(name=""String_Node_Str"") public boolean validate(CreditCard12 creditCard){
  Character lastDigit=creditCard.getNumber().charAt(creditCard.getNumber().length() - 1);
  if (Integer.parseInt(lastDigit.toString()) % 2 == 0) {
    return true;
  }
 else {
    return false;
  }
}"
85513,"public boolean validate(@WebParam(name=""String_Node_Str"",mode=IN) CreditCard13 creditCard){
  Character lastDigit=creditCard.getNumber().charAt(creditCard.getNumber().length() - 1);
  if (Integer.parseInt(lastDigit.toString()) % 2 != 0) {
    return true;
  }
 else {
    return false;
  }
}","public boolean validate(@WebParam(name=""String_Node_Str"",mode=IN) CreditCard13 creditCard){
  Character lastDigit=creditCard.getNumber().charAt(creditCard.getNumber().length() - 1);
  if (Integer.parseInt(lastDigit.toString()) % 2 == 0) {
    return true;
  }
 else {
    return false;
  }
}"
85514,"public boolean validate(CreditCard15 creditCard){
  Character lastDigit=creditCard.getNumber().charAt(creditCard.getNumber().length() - 1);
  if (Integer.parseInt(lastDigit.toString()) % 2 != 0) {
    return true;
  }
 else {
    return false;
  }
}","public boolean validate(CreditCard15 creditCard){
  Character lastDigit=creditCard.getNumber().charAt(creditCard.getNumber().length() - 1);
  if (Integer.parseInt(lastDigit.toString()) % 2 == 0) {
    return true;
  }
 else {
    return false;
  }
}"
85515,"@Test public void shouldCheckCreditCardValidity() throws MalformedURLException {
  Endpoint endpoint=Endpoint.publish(""String_Node_Str"",new CardValidator());
  assertTrue(endpoint.isPublished());
  assertEquals(""String_Node_Str"",endpoint.getBinding().getBindingID());
  URL wsdlDocumentLocation=new URL(""String_Node_Str"");
  String namespaceURI=""String_Node_Str"";
  String servicePart=""String_Node_Str"";
  String portName=""String_Node_Str"";
  QName serviceQN=new QName(namespaceURI,servicePart);
  QName portQN=new QName(namespaceURI,portName);
  Service service=Service.create(wsdlDocumentLocation,serviceQN);
  Validator cardValidator=service.getPort(portQN,Validator.class);
  CreditCard creditCard=new CreditCard(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  endpoint.stop();
  assertFalse(endpoint.isPublished());
}","@Test public void shouldCheckCreditCardValidity() throws MalformedURLException {
  Endpoint endpoint=Endpoint.publish(""String_Node_Str"",new CardValidator());
  assertTrue(endpoint.isPublished());
  assertEquals(""String_Node_Str"",endpoint.getBinding().getBindingID());
  URL wsdlDocumentLocation=new URL(""String_Node_Str"");
  String namespaceURI=""String_Node_Str"";
  String servicePart=""String_Node_Str"";
  String portName=""String_Node_Str"";
  QName serviceQN=new QName(namespaceURI,servicePart);
  QName portQN=new QName(namespaceURI,portName);
  Service service=Service.create(wsdlDocumentLocation,serviceQN);
  Validator cardValidator=service.getPort(portQN,Validator.class);
  CreditCard creditCard=new CreditCard(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  endpoint.stop();
  assertFalse(endpoint.isPublished());
}"
85516,"@Test public void shouldCheckCreditCardValidity(){
  CreditCard creditCard=new CreditCard(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator cardValidator=new CardValidator();
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
}","@Test public void shouldCheckCreditCardValidity(){
  CreditCard creditCard=new CreditCard(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator cardValidator=new CardValidator();
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
}"
85517,"@Test public void shouldCheckCreditCardValidity(){
  CreditCard10 creditCard=new CreditCard10(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator10 cardValidator=new CardValidator10();
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
}","@Test public void shouldCheckCreditCardValidity(){
  CreditCard10 creditCard=new CreditCard10(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator10 cardValidator=new CardValidator10();
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
}"
85518,"@Test public void shouldCheckCreditCardValidity(){
  CreditCard10 creditCard=new CreditCard10(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator10 cardValidator=new CardValidator10();
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
}","@Test public void shouldCheckCreditCardValidity(){
  CreditCard10 creditCard=new CreditCard10(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator10 cardValidator=new CardValidator10();
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
}"
85519,"@Test public void shouldCheckCreditCardValidity(){
  CreditCard12 creditCard=new CreditCard12(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator12 cardValidator=new CardValidator12();
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
}","@Test public void shouldCheckCreditCardValidity(){
  CreditCard12 creditCard=new CreditCard12(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator12 cardValidator=new CardValidator12();
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
}"
85520,"@Test public void shouldCheckCreditCardValidity(){
  CreditCard13 creditCard=new CreditCard13(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator13 cardValidator=new CardValidator13();
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
}","@Test public void shouldCheckCreditCardValidity(){
  CreditCard13 creditCard=new CreditCard13(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator13 cardValidator=new CardValidator13();
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
}"
85521,"@Test public void shouldCheckCreditCardValidity(){
  CreditCard15 creditCard=new CreditCard15(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator15 cardValidator=new CardValidator15();
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
}","@Test public void shouldCheckCreditCardValidity(){
  CreditCard15 creditCard=new CreditCard15(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator15 cardValidator=new CardValidator15();
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
}"
85522,"@Test public void shouldCheckCreditCardValidity(){
  CreditCard17 creditCard=new CreditCard17(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator17 cardValidator=new CardValidator17();
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
}","@Test public void shouldCheckCreditCardValidity(){
  CreditCard17 creditCard=new CreditCard17(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator17 cardValidator=new CardValidator17();
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
}"
85523,"@Test(expected=CardValidatorRTException22.class) public void shouldThrowACardValidatorRTException(){
  CreditCard22 creditCard=new CreditCard22(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator22 cardValidator=new CardValidator22();
  assertFalse(""String_Node_Str"",cardValidator.validateWithRTException(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  cardValidator.validateWithRTException(creditCard);
}","@Test(expected=CardValidatorRTException22.class) public void shouldThrowACardValidatorRTException(){
  CreditCard22 creditCard=new CreditCard22(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator22 cardValidator=new CardValidator22();
  assertTrue(""String_Node_Str"",cardValidator.validateWithRTException(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  cardValidator.validateWithRTException(creditCard);
}"
85524,"@Test(expected=CardValidatorSOAPFaultException22.class) public void shouldThrowACardValidatorSOAPFaultException22() throws SOAPException {
  CreditCard22 creditCard=new CreditCard22(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator22 cardValidator=new CardValidator22();
  assertFalse(""String_Node_Str"",cardValidator.validateWithSOAPFaultException(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  cardValidator.validateWithSOAPFaultException(creditCard);
}","@Test(expected=CardValidatorSOAPFaultException22.class) public void shouldThrowACardValidatorSOAPFaultException22() throws SOAPException {
  CreditCard22 creditCard=new CreditCard22(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator22 cardValidator=new CardValidator22();
  assertTrue(""String_Node_Str"",cardValidator.validateWithSOAPFaultException(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  cardValidator.validateWithSOAPFaultException(creditCard);
}"
85525,"@Test(expected=CardValidatorException22.class) public void shouldThrowACardValidatorException() throws Exception {
  CreditCard22 creditCard=new CreditCard22(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator22 cardValidator=new CardValidator22();
  assertFalse(""String_Node_Str"",cardValidator.validateWithException(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  cardValidator.validateWithException(creditCard);
}","@Test(expected=CardValidatorException22.class) public void shouldThrowACardValidatorException() throws Exception {
  CreditCard22 creditCard=new CreditCard22(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator22 cardValidator=new CardValidator22();
  assertTrue(""String_Node_Str"",cardValidator.validateWithException(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  cardValidator.validateWithException(creditCard);
}"
85526,"@Test public void shouldCheckCreditCardValidity(){
  CreditCard22 creditCard=new CreditCard22(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator22 cardValidator=new CardValidator22();
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
}","@Test public void shouldCheckCreditCardValidity(){
  CreditCard22 creditCard=new CreditCard22(""String_Node_Str"",""String_Node_Str"",1234,""String_Node_Str"");
  CardValidator22 cardValidator=new CardValidator22();
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertTrue(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
  creditCard.setNumber(""String_Node_Str"");
  assertFalse(""String_Node_Str"",cardValidator.validate(creditCard));
}"
85527,"public Distribution(Distribution distribution){
  digest=new QuantileDigest(distribution.digest);
  total=new DecayCounter(distribution.total.getAlpha());
  total.merge(distribution.total);
}","public Distribution(Distribution distribution){
synchronized (distribution) {
    digest=new QuantileDigest(distribution.digest);
  }
  total=new DecayCounter(distribution.total.getAlpha());
  total.merge(distribution.total);
}"
85528,"@BeforeMethod public void abstractSetup() throws Exception {
  servlet=new EchoServlet();
  int port;
  try (ServerSocket socket=new ServerSocket()){
    socket.bind(new InetSocketAddress(0));
    port=socket.getLocalPort();
  }
   baseURI=new URI(scheme,null,host,port,null,null,null);
  Server server=new Server();
  HttpConfiguration httpConfiguration=new HttpConfiguration();
  httpConfiguration.setSendServerVersion(false);
  httpConfiguration.setSendXPoweredBy(false);
  ServerConnector connector;
  if (keystore != null) {
    httpConfiguration.addCustomizer(new SecureRequestCustomizer());
    SslContextFactory sslContextFactory=new SslContextFactory(keystore);
    sslContextFactory.setKeyStorePassword(""String_Node_Str"");
    SslConnectionFactory sslConnectionFactory=new SslConnectionFactory(sslContextFactory,""String_Node_Str"");
    connector=new ServerConnector(server,sslConnectionFactory,new HttpConnectionFactory(httpConfiguration));
  }
 else {
    connector=new ServerConnector(server,new HttpConnectionFactory(httpConfiguration));
  }
  connector.setIdleTimeout(30000);
  connector.setName(scheme);
  connector.setPort(port);
  server.addConnector(connector);
  ServletHolder servletHolder=new ServletHolder(servlet);
  ServletContextHandler context=new ServletContextHandler(ServletContextHandler.NO_SESSIONS);
  context.addServlet(servletHolder,""String_Node_Str"");
  HandlerCollection handlers=new HandlerCollection();
  handlers.addHandler(context);
  server.setHandler(handlers);
  this.server=server;
  server.start();
}","@BeforeMethod public void abstractSetup() throws Exception {
  servlet=new EchoServlet();
  Server server=new Server();
  HttpConfiguration httpConfiguration=new HttpConfiguration();
  httpConfiguration.setSendServerVersion(false);
  httpConfiguration.setSendXPoweredBy(false);
  ServerConnector connector;
  if (keystore != null) {
    httpConfiguration.addCustomizer(new SecureRequestCustomizer());
    SslContextFactory sslContextFactory=new SslContextFactory(keystore);
    sslContextFactory.setKeyStorePassword(""String_Node_Str"");
    SslConnectionFactory sslConnectionFactory=new SslConnectionFactory(sslContextFactory,""String_Node_Str"");
    connector=new ServerConnector(server,sslConnectionFactory,new HttpConnectionFactory(httpConfiguration));
  }
 else {
    connector=new ServerConnector(server,new HttpConnectionFactory(httpConfiguration));
  }
  connector.setIdleTimeout(30000);
  connector.setName(scheme);
  server.addConnector(connector);
  ServletHolder servletHolder=new ServletHolder(servlet);
  ServletContextHandler context=new ServletContextHandler(ServletContextHandler.NO_SESSIONS);
  context.addServlet(servletHolder,""String_Node_Str"");
  HandlerCollection handlers=new HandlerCollection();
  handlers.addHandler(context);
  server.setHandler(handlers);
  this.server=server;
  server.start();
  baseURI=new URI(scheme,null,host,connector.getLocalPort(),null,null,null);
}"
85529,"public DenseHll(Slice serialized){
  BasicSliceInput input=serialized.getInput();
  byte formatTag=input.readByte();
  checkArgument(formatTag == Format.DENSE_V1.getTag() || formatTag == Format.DENSE_V2.getTag(),""String_Node_Str"");
  indexBitLength=input.readByte();
  validatePrefixLength(indexBitLength);
  int numberOfBuckets=numberOfBuckets(indexBitLength);
  baseline=input.readByte();
  deltas=new byte[numberOfBuckets / 2];
  input.readBytes(deltas);
  if (formatTag == Format.DENSE_V1.getTag()) {
    int bucket=input.readShort();
    byte value=input.readByte();
    if (bucket >= 0) {
      checkArgument(bucket <= numberOfBuckets,""String_Node_Str"");
      overflows=1;
      overflowBuckets=new int[]{bucket};
      overflowValues=new byte[]{value};
    }
 else {
      overflows=0;
      overflowBuckets=new int[0];
      overflowValues=new byte[0];
    }
  }
 else   if (formatTag == Format.DENSE_V2.getTag()) {
    overflows=input.readUnsignedShort();
    checkArgument(overflows <= numberOfBuckets,""String_Node_Str"");
    overflowBuckets=new int[overflows];
    overflowValues=new byte[overflows];
    for (int i=0; i < overflows; i++) {
      overflowBuckets[i]=input.readUnsignedShort();
      checkArgument(overflowBuckets[i] <= numberOfBuckets,""String_Node_Str"");
    }
    for (int i=0; i < overflows; i++) {
      overflowValues[i]=input.readByte();
      checkArgument(overflowValues[i] > 0,""String_Node_Str"");
    }
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",formatTag));
  }
  baselineCount=0;
  for (int i=0; i < numberOfBuckets; i++) {
    if (getDelta(i) == 0) {
      baselineCount++;
    }
  }
  checkArgument(!input.isReadable(),""String_Node_Str"");
}","public DenseHll(Slice serialized){
  BasicSliceInput input=serialized.getInput();
  byte formatTag=input.readByte();
  checkArgument(formatTag == Format.DENSE_V1.getTag() || formatTag == Format.DENSE_V2.getTag(),""String_Node_Str"");
  indexBitLength=input.readByte();
  validatePrefixLength(indexBitLength);
  int numberOfBuckets=numberOfBuckets(indexBitLength);
  baseline=input.readByte();
  deltas=new byte[numberOfBuckets / 2];
  input.readBytes(deltas);
  if (formatTag == Format.DENSE_V1.getTag()) {
    int bucket=input.readShort();
    byte value=input.readByte();
    if (bucket >= 0 && value > 0) {
      checkArgument(bucket <= numberOfBuckets,""String_Node_Str"");
      overflows=1;
      overflowBuckets=new int[]{bucket};
      overflowValues=new byte[]{value};
    }
 else {
      overflows=0;
      overflowBuckets=new int[0];
      overflowValues=new byte[0];
    }
  }
 else   if (formatTag == Format.DENSE_V2.getTag()) {
    overflows=input.readUnsignedShort();
    checkArgument(overflows <= numberOfBuckets,""String_Node_Str"");
    overflowBuckets=new int[overflows];
    overflowValues=new byte[overflows];
    for (int i=0; i < overflows; i++) {
      overflowBuckets[i]=input.readUnsignedShort();
      checkArgument(overflowBuckets[i] <= numberOfBuckets,""String_Node_Str"");
    }
    for (int i=0; i < overflows; i++) {
      overflowValues[i]=input.readByte();
      checkArgument(overflowValues[i] > 0,""String_Node_Str"");
    }
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",formatTag));
  }
  baselineCount=0;
  for (int i=0; i < numberOfBuckets; i++) {
    if (getDelta(i) == 0) {
      baselineCount++;
    }
  }
  checkArgument(!input.isReadable(),""String_Node_Str"");
}"
85530,"@Override public void verify(){
  int zeroDeltas=0;
  for (int i=0; i < numberOfBuckets(indexBitLength); i++) {
    if (getDelta(i) == 0) {
      zeroDeltas++;
    }
  }
  checkState(zeroDeltas == baselineCount,""String_Node_Str"",baselineCount,zeroDeltas);
  Set<Integer> overflows=new HashSet<>();
  for (int i=0; i < this.overflows; i++) {
    int bucket=overflowBuckets[i];
    overflows.add(bucket);
    checkState(getDelta(bucket) == MAX_DELTA,""String_Node_Str"",bucket,getDelta(bucket),MAX_DELTA);
  }
  checkState(overflows.size() == this.overflows,""String_Node_Str"",Ints.asList(Arrays.copyOf(overflowBuckets,this.overflows)));
}","@Override public void verify(){
  int zeroDeltas=0;
  for (int i=0; i < numberOfBuckets(indexBitLength); i++) {
    if (getDelta(i) == 0) {
      zeroDeltas++;
    }
  }
  checkState(zeroDeltas == baselineCount,""String_Node_Str"",baselineCount,zeroDeltas);
  Set<Integer> overflows=new HashSet<>();
  for (int i=0; i < this.overflows; i++) {
    int bucket=overflowBuckets[i];
    overflows.add(bucket);
    checkState(overflowValues[i] > 0,""String_Node_Str"",i,bucket);
    checkState(getDelta(bucket) == MAX_DELTA,""String_Node_Str"",bucket,getDelta(bucket),MAX_DELTA);
  }
  checkState(overflows.size() == this.overflows,""String_Node_Str"",Ints.asList(Arrays.copyOf(overflowBuckets,this.overflows)));
}"
85531,"@Test public void testDeserializeDenseV1NoOverflows() throws Exception {
  int indexBitLength=4;
  int numberOfBuckets=numberOfBuckets(indexBitLength);
  Slice serialized=new DynamicSliceOutput(1).appendByte(Format.DENSE_V1.getTag()).appendByte(indexBitLength).appendByte(10).appendBytes(new byte[numberOfBuckets / 2]).appendByte(0xFF).appendByte(0xFF).appendByte(0).slice();
  DenseHll deserialized=new DenseHll(serialized);
  for (int i=0; i < numberOfBuckets; i++) {
    assertEquals(deserialized.getValue(i),10);
  }
}","@Test public void testDeserializeDenseV1NoOverflows() throws Exception {
  int indexBitLength=4;
  int numberOfBuckets=numberOfBuckets(indexBitLength);
  Slice serialized=new DynamicSliceOutput(1).appendByte(Format.DENSE_V1.getTag()).appendByte(indexBitLength).appendByte(10).appendBytes(new byte[numberOfBuckets / 2]).appendByte(0xFF).appendByte(0xFF).appendByte(0).slice();
  DenseHll deserialized=new DenseHll(serialized);
  for (int i=0; i < numberOfBuckets; i++) {
    assertEquals(deserialized.getValue(i),10);
  }
  deserialized.verify();
}"
85532,"@Test public void testDeserializeDenseV1Overflow() throws Exception {
  int indexBitLength=4;
  int numberOfBuckets=numberOfBuckets(indexBitLength);
  Slice serialized=new DynamicSliceOutput(1).appendByte(Format.DENSE_V1.getTag()).appendByte(indexBitLength).appendByte(2).appendBytes(new byte[]{0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00}).appendByte(0x01).appendByte(0x00).appendByte(3).slice();
  DenseHll deserialized=new DenseHll(serialized);
  for (int i=0; i < numberOfBuckets; i++) {
    if (i == 1) {
      assertEquals(deserialized.getValue(i),20);
    }
 else {
      assertEquals(deserialized.getValue(i),2);
    }
  }
}","@Test public void testDeserializeDenseV1Overflow() throws Exception {
  int indexBitLength=4;
  int numberOfBuckets=numberOfBuckets(indexBitLength);
  Slice serialized=new DynamicSliceOutput(1).appendByte(Format.DENSE_V1.getTag()).appendByte(indexBitLength).appendByte(2).appendBytes(new byte[]{0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00}).appendByte(0x01).appendByte(0x00).appendByte(3).slice();
  DenseHll deserialized=new DenseHll(serialized);
  for (int i=0; i < numberOfBuckets; i++) {
    if (i == 1) {
      assertEquals(deserialized.getValue(i),20);
    }
 else {
      assertEquals(deserialized.getValue(i),2);
    }
  }
  deserialized.verify();
}"
85533,"/** 
 * This setting can help solve the SQL injection problem. By default, text and number literals are allowed in SQL statements. However, this enables SQL injection if the application dynamically builds SQL statements. SQL injection is not possible if user data is set using parameters ('?'). <p/> NONE means literals of any kind are not allowed, only parameters and constants are allowed. NUMBERS mean only numerical and boolean literals are allowed. ALL means all literals are allowed (default).
 */
public AllowLiterals getAllowLiterals(){
  return allowLiterals;
}","/** 
 * This setting can help solve the SQL injection problem. By default, text and number literals are allowed in SQL statements. However, this enables SQL injection if the application dynamically builds SQL statements. SQL injection is not possible if user data is set using parameters ('?'). <p> NONE means literals of any kind are not allowed, only parameters and constants are allowed. NUMBERS mean only numerical and boolean literals are allowed. ALL means all literals are allowed (default).
 */
public AllowLiterals getAllowLiterals(){
  return allowLiterals;
}"
85534,"/** 
 * Sets the compression algorithm for BLOB and CLOB data. Compression is usually slower, but needs less disk space. LZF is faster but uses more space. </p> Allowed values are ""NO"", ""LZF"" and ""DEFLATE""
 */
public CompressLob getCompressLob(){
  return compressLob;
}","/** 
 * Sets the compression algorithm for BLOB and CLOB data. Compression is usually slower, but needs less disk space. LZF is faster but uses more space. <p> Allowed values are ""NO"", ""LZF"" and ""DEFLATE""
 */
public CompressLob getCompressLob(){
  return compressLob;
}"
85535,"/** 
 * Verify adjustment of connection count limits. </p> 1) Test initial limit </p> 2) Test limit increase </p> 3) Test decrease below current checkout </p> 4) Verify handling of illegal values
 */
@Test public void testMaxConnections() throws Exception {
  ManagedDataSource dataSource=new MockManagedDataSource(1,new Duration(1,MILLISECONDS));
  assertEquals(dataSource.getMaxConnections(),1);
  Queue<Connection> connections=new LinkedList<Connection>();
  connections.add(dataSource.getConnection());
  assertEquals(dataSource.getConnectionsActive(),1);
  try {
    dataSource.getConnection();
    fail(""String_Node_Str"");
  }
 catch (  SQLException expected) {
  }
  assertEquals(dataSource.getConnectionsActive(),1);
  dataSource.setMaxConnections(3);
  assertEquals(dataSource.getMaxConnections(),3);
  connections.add(dataSource.getConnection());
  connections.add(dataSource.getConnection());
  try {
    dataSource.getConnection();
    fail(""String_Node_Str"");
  }
 catch (  SQLException expected) {
  }
  assertEquals(dataSource.getConnectionsActive(),3);
  dataSource.setMaxConnections(2);
  assertEquals(dataSource.getMaxConnections(),2);
  assertEquals(dataSource.getConnectionsActive(),3);
  try {
    dataSource.getConnection();
    fail(""String_Node_Str"");
  }
 catch (  SQLException expected) {
  }
  assertEquals(dataSource.getConnectionsActive(),3);
  connections.remove().close();
  assertEquals(dataSource.getConnectionsActive(),2);
  try {
    dataSource.getConnection();
    fail(""String_Node_Str"");
  }
 catch (  SQLException expected) {
  }
  assertEquals(dataSource.getConnectionsActive(),2);
  connections.remove().close();
  connections.add(dataSource.getConnection());
  assertEquals(dataSource.getConnectionsActive(),2);
  try {
    dataSource.setMaxConnectionWaitMillis(null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException e) {
  }
  assertEquals(dataSource.getMaxConnections(),2);
  try {
    dataSource.setMaxConnectionWaitMillis(new Duration(0,MILLISECONDS));
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
  }
  assertEquals(dataSource.getMaxConnections(),2);
  for (  Connection connection : connections) {
    connection.close();
  }
  assertEquals(dataSource.getConnectionsActive(),0);
}","/** 
 * Verify adjustment of connection count limits. <ol> <li>Test initial limit</li> <li>Test limit increase</li> <li>Test decrease below current checkout</li> <li>Verify handling of illegal values</li> </ol>
 */
@Test public void testMaxConnections() throws Exception {
  ManagedDataSource dataSource=new MockManagedDataSource(1,new Duration(1,MILLISECONDS));
  assertEquals(dataSource.getMaxConnections(),1);
  Queue<Connection> connections=new LinkedList<Connection>();
  connections.add(dataSource.getConnection());
  assertEquals(dataSource.getConnectionsActive(),1);
  try {
    dataSource.getConnection();
    fail(""String_Node_Str"");
  }
 catch (  SQLException expected) {
  }
  assertEquals(dataSource.getConnectionsActive(),1);
  dataSource.setMaxConnections(3);
  assertEquals(dataSource.getMaxConnections(),3);
  connections.add(dataSource.getConnection());
  connections.add(dataSource.getConnection());
  try {
    dataSource.getConnection();
    fail(""String_Node_Str"");
  }
 catch (  SQLException expected) {
  }
  assertEquals(dataSource.getConnectionsActive(),3);
  dataSource.setMaxConnections(2);
  assertEquals(dataSource.getMaxConnections(),2);
  assertEquals(dataSource.getConnectionsActive(),3);
  try {
    dataSource.getConnection();
    fail(""String_Node_Str"");
  }
 catch (  SQLException expected) {
  }
  assertEquals(dataSource.getConnectionsActive(),3);
  connections.remove().close();
  assertEquals(dataSource.getConnectionsActive(),2);
  try {
    dataSource.getConnection();
    fail(""String_Node_Str"");
  }
 catch (  SQLException expected) {
  }
  assertEquals(dataSource.getConnectionsActive(),2);
  connections.remove().close();
  connections.add(dataSource.getConnection());
  assertEquals(dataSource.getConnectionsActive(),2);
  try {
    dataSource.setMaxConnectionWaitMillis(null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException e) {
  }
  assertEquals(dataSource.getMaxConnections(),2);
  try {
    dataSource.setMaxConnectionWaitMillis(new Duration(0,MILLISECONDS));
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
  }
  assertEquals(dataSource.getMaxConnections(),2);
  for (  Connection connection : connections) {
    connection.close();
  }
  assertEquals(dataSource.getConnectionsActive(),0);
}"
85536,"/** 
 * Sets up default logging: <p/> - INFO level - Log entries are written to stderr
 */
public static synchronized Logging initialize(){
  if (instance == null) {
    instance=new Logging();
  }
  return instance;
}","/** 
 * Sets up default logging: <p> - INFO level - Log entries are written to stderr
 * @return the logging system singleton
 */
public static synchronized Logging initialize(){
  if (instance == null) {
    instance=new Logging();
  }
  return instance;
}"
85537,"/** 
 * Logs a message at WARN level. <br/> Usage example: <pre> logger.warn(""something bad happened when connecting to %s:%d"", host, port); </pre> If the format string is invalid or the arguments are insufficient, an error will be logged and execution will continue.
 * @param format a format string compatible with String.format()
 * @param args arguments for the format string
 */
public void warn(String format,Object... args){
  warn(null,format,args);
}","/** 
 * Logs a message at WARN level. <p> Usage example: <pre> logger.warn(""something bad happened when connecting to %s:%d"", host, port); </pre> If the format string is invalid or the arguments are insufficient, an error will be logged and execution will continue.
 * @param format a format string compatible with String.format()
 * @param args arguments for the format string
 */
public void warn(String format,Object... args){
  warn(null,format,args);
}"
85538,"/** 
 * Logs a message at DEBUG level. <br/> Usage example: <pre> logger.debug(e, ""value is %s (%d ms)"", value, time); </pre> If the format string is invalid or the arguments are insufficient, an error will be logged and execution will continue.
 * @param exception an exception associated with the debug message being logged
 * @param format a format string compatible with String.format()
 * @param args arguments for the format string
 */
public void debug(Throwable exception,String format,Object... args){
  if (logger.isLoggable(FINE)) {
    String message;
    try {
      message=format(format,args);
    }
 catch (    IllegalFormatException e) {
      logger.log(SEVERE,illegalFormatMessageFor(""String_Node_Str"",format,args),e);
      message=rawMessageFor(format,args);
    }
    logger.log(FINE,message,exception);
  }
}","/** 
 * Logs a message at DEBUG level. <p> Usage example: <pre> logger.debug(e, ""value is %s (%d ms)"", value, time); </pre> If the format string is invalid or the arguments are insufficient, an error will be logged and execution will continue.
 * @param exception an exception associated with the debug message being logged
 * @param format a format string compatible with String.format()
 * @param args arguments for the format string
 */
public void debug(Throwable exception,String format,Object... args){
  if (logger.isLoggable(FINE)) {
    String message;
    try {
      message=format(format,args);
    }
 catch (    IllegalFormatException e) {
      logger.log(SEVERE,illegalFormatMessageFor(""String_Node_Str"",format,args),e);
      message=rawMessageFor(format,args);
    }
    logger.log(FINE,message,exception);
  }
}"
85539,"/** 
 * Logs a message at ERROR level. <br/> Usage example: <pre> logger.error(""something really bad happened when connecting to %s:%d"", host, port); </pre> If the format string is invalid or the arguments are insufficient, an error will be logged and execution will continue.
 * @param format a format string compatible with String.format()
 * @param args arguments for the format string
 */
public void error(String format,Object... args){
  error(null,format,args);
}","/** 
 * Logs a message at ERROR level. <p> Usage example: <pre> logger.error(""something really bad happened when connecting to %s:%d"", host, port); </pre> If the format string is invalid or the arguments are insufficient, an error will be logged and execution will continue.
 * @param format a format string compatible with String.format()
 * @param args arguments for the format string
 */
public void error(String format,Object... args){
  error(null,format,args);
}"
85540,"/** 
 * Logs a message at INFO level. <br/> Usage example: <pre> logger.info(""value is %s (%d ms)"", value, time); </pre> If the format string is invalid or the arguments are insufficient, an error will be logged and execution will continue.
 * @param format a format string compatible with String.format()
 * @param args arguments for the format string
 */
public void info(String format,Object... args){
  if (logger.isLoggable(INFO)) {
    String message;
    try {
      message=format(format,args);
    }
 catch (    IllegalFormatException e) {
      logger.log(SEVERE,illegalFormatMessageFor(""String_Node_Str"",format,args),e);
      message=rawMessageFor(format,args);
    }
    logger.info(message);
  }
}","/** 
 * Logs a message at INFO level. <p> Usage example: <pre> logger.info(""value is %s (%d ms)"", value, time); </pre> If the format string is invalid or the arguments are insufficient, an error will be logged and execution will continue.
 * @param format a format string compatible with String.format()
 * @param args arguments for the format string
 */
public void info(String format,Object... args){
  if (logger.isLoggable(INFO)) {
    String message;
    try {
      message=format(format,args);
    }
 catch (    IllegalFormatException e) {
      logger.log(SEVERE,illegalFormatMessageFor(""String_Node_Str"",format,args),e);
      message=rawMessageFor(format,args);
    }
    logger.info(message);
  }
}"
85541,"/** 
 * The address to use when contacting this server from an external network.  If possible, ip address should be globally routable.  The address is returned as a string because the name may not be resolvable from the local machine. <p/> If this is not set, the internal ip is used.
 */
@Managed public String getExternalAddress(){
  return externalAddress;
}","/** 
 * The address to use when contacting this server from an external network.  If possible, ip address should be globally routable.  The address is returned as a string because the name may not be resolvable from the local machine. <p> If this is not set, the internal ip is used.
 */
@Managed public String getExternalAddress(){
  return externalAddress;
}"
85542,"/** 
 * Adds a value to this digest. The value must be >= 0
 */
public void add(long value,long count){
  checkArgument(count > 0,""String_Node_Str"");
  long nowInSeconds=TimeUnit.NANOSECONDS.toSeconds(ticker.read());
  int maxExpectedNodeCount=3 * calculateCompressionFactor();
  if (nowInSeconds - landmarkInSeconds >= RESCALE_THRESHOLD_SECONDS) {
    rescale(nowInSeconds);
    compress();
  }
 else   if (nonZeroNodeCount > MAX_SIZE_FACTOR * maxExpectedNodeCount && compressAutomatically) {
    compress();
  }
  double weight=weight(TimeUnit.NANOSECONDS.toSeconds(ticker.read())) * count;
  max=Math.max(max,value);
  min=Math.min(min,value);
  insert(longToBits(value),weight);
}","/** 
 * Adds a value to this digest. The value must be   {@code >= 0}
 */
public void add(long value,long count){
  checkArgument(count > 0,""String_Node_Str"");
  long nowInSeconds=TimeUnit.NANOSECONDS.toSeconds(ticker.read());
  int maxExpectedNodeCount=3 * calculateCompressionFactor();
  if (nowInSeconds - landmarkInSeconds >= RESCALE_THRESHOLD_SECONDS) {
    rescale(nowInSeconds);
    compress();
  }
 else   if (nonZeroNodeCount > MAX_SIZE_FACTOR * maxExpectedNodeCount && compressAutomatically) {
    compress();
  }
  double weight=weight(TimeUnit.NANOSECONDS.toSeconds(ticker.read())) * count;
  max=Math.max(max,value);
  min=Math.min(min,value);
  insert(longToBits(value),weight);
}"
85543,"@Override public long cardinality(){
  int totalBuckets=numberOfBuckets(Short.SIZE);
  int zeroBuckets=totalBuckets - numberOfEntries;
  return Math.round(linearCounting(zeroBuckets,totalBuckets));
}","@Override public long cardinality(){
  int totalBuckets=numberOfBuckets(EXTENDED_PREFIX_BITS);
  int zeroBuckets=totalBuckets - numberOfEntries;
  return Math.round(linearCounting(zeroBuckets,totalBuckets));
}"
85544,"public static AsyncResponseHandler bindAsyncResponse(AsyncResponse asyncResponse,ListenableFuture<?> futureResponse,Executor httpResponseExecutor){
  Futures.addCallback(futureResponse,toFutureCallback(asyncResponse),httpResponseExecutor);
  return new AsyncResponseHandler(asyncResponse,futureResponse);
}","public static AsyncResponseHandler bindAsyncResponse(AsyncResponse asyncResponse,ListenableFuture<?> futureResponse,Executor httpResponseExecutor){
  FutureCallback<Object> callback=toFutureCallback(asyncResponse);
  Futures.addCallback(futureResponse,callback,httpResponseExecutor);
  return new AsyncResponseHandler(asyncResponse,futureResponse);
}"
85545,"private void responseSocks4(DataOutputStream sourceOutput,int status,int port,int address) throws IOException {
  sourceOutput.write(0);
  sourceOutput.write(status);
  sourceOutput.writeShort(port);
  sourceOutput.writeInt(address);
}","private void responseSocks4(DataOutputStream output,int status,int port,int address) throws IOException {
  ByteArrayDataOutput sourceOutput=ByteStreams.newDataOutput();
  sourceOutput.write(0);
  sourceOutput.write(status);
  sourceOutput.writeShort(port);
  sourceOutput.writeInt(address);
  output.write(sourceOutput.toByteArray());
}"
85546,"@VisibleForTesting static HostAndPort getRunningAgentAddress(Integer registryPort,Integer serverPort){
  try {
    JMXConnectorServer jmxServer=getField(Agent.class,JMXConnectorServer.class,""String_Node_Str"");
    RemoteObject registry=getField(ConnectorBootstrap.class,RemoteObject.class,""String_Node_Str"");
    if (jmxServer != null && registry != null) {
      int actualRegistryPort=((UnicastRef)registry.getRef()).getLiveRef().getPort();
      checkState(actualRegistryPort > 0,""String_Node_Str"",actualRegistryPort);
      if (registryPort != null && registryPort != 0) {
        checkArgument(actualRegistryPort == registryPort,""String_Node_Str"",actualRegistryPort,registryPort);
      }
      if (serverPort != null && serverPort != 0) {
        int actualServerPort=jmxServer.getAddress().getPort();
        checkArgument(actualServerPort == serverPort,""String_Node_Str"",actualServerPort,serverPort);
      }
      return HostAndPort.fromParts(jmxServer.getAddress().getHost(),actualRegistryPort);
    }
  }
 catch (  Exception e) {
    log.warn(e,""String_Node_Str"");
  }
  return null;
}","@VisibleForTesting static HostAndPort getRunningAgentAddress(Integer registryPort,Integer serverPort){
  JMXConnectorServer jmxServer;
  RemoteObject registry;
  int actualRegistryPort;
  try {
    jmxServer=getField(Agent.class,JMXConnectorServer.class,""String_Node_Str"");
    registry=getField(ConnectorBootstrap.class,RemoteObject.class,""String_Node_Str"");
    if (jmxServer == null || registry == null) {
      log.warn(""String_Node_Str"");
      return null;
    }
    actualRegistryPort=((UnicastRef)registry.getRef()).getLiveRef().getPort();
  }
 catch (  Exception e) {
    log.warn(e,""String_Node_Str"");
    return null;
  }
  checkState(actualRegistryPort > 0,""String_Node_Str"",actualRegistryPort);
  if (registryPort != null && registryPort != 0) {
    checkArgument(actualRegistryPort == registryPort,""String_Node_Str"",actualRegistryPort,registryPort);
  }
  if (serverPort != null && serverPort != 0) {
    int actualServerPort=jmxServer.getAddress().getPort();
    checkArgument(actualServerPort == serverPort,""String_Node_Str"",actualServerPort,serverPort);
  }
  return HostAndPort.fromParts(jmxServer.getAddress().getHost(),actualRegistryPort);
}"
85547,"private Node merge(Node node,Node other){
  if (node == null) {
    return copyRecursive(other);
  }
 else   if (other == null) {
    return node;
  }
 else   if (node.level > other.level) {
    long branch=other.bits & node.getBranchMask();
    if (branch == 0) {
      node.left=merge(node.left,other);
    }
 else {
      node.right=merge(node.right,other);
    }
    return node;
  }
 else   if (node.level < other.level) {
    Node result=createNode(other.bits,other.level,other.weightedCount);
    long branch=node.bits & other.getBranchMask();
    if (branch == 0) {
      result.left=merge(node,other.left);
      result.right=copyRecursive(other.right);
    }
 else {
      result.left=copyRecursive(other.left);
      result.right=merge(node,other.right);
    }
    return result;
  }
 else   if (node.level < MAX_BITS && (node.bits >>> node.level) != (other.bits >>> other.level)) {
    return makeSiblings(node,copyRecursive(other));
  }
  double oldWeight=node.weightedCount;
  weightedCount+=other.weightedCount;
  node.weightedCount=node.weightedCount + other.weightedCount;
  node.left=merge(node.left,other.left);
  node.right=merge(node.right,other.right);
  if (oldWeight < ZERO_WEIGHT_THRESHOLD && node.weightedCount >= ZERO_WEIGHT_THRESHOLD) {
    nonZeroNodeCount++;
  }
  return node;
}","private Node merge(Node node,Node other){
  if (node == null) {
    return copyRecursive(other);
  }
 else   if (other == null) {
    return node;
  }
 else   if (!inSameSubtree(node.bits,other.bits,Math.max(node.level,other.level))) {
    return makeSiblings(node,copyRecursive(other));
  }
 else   if (node.level > other.level) {
    long branch=other.bits & node.getBranchMask();
    if (branch == 0) {
      node.left=merge(node.left,other);
    }
 else {
      node.right=merge(node.right,other);
    }
    return node;
  }
 else   if (node.level < other.level) {
    Node result=createNode(other.bits,other.level,other.weightedCount);
    long branch=node.bits & other.getBranchMask();
    if (branch == 0) {
      result.left=merge(node,other.left);
      result.right=copyRecursive(other.right);
    }
 else {
      result.left=copyRecursive(other.left);
      result.right=merge(node,other.right);
    }
    return result;
  }
  double oldWeight=node.weightedCount;
  weightedCount+=other.weightedCount;
  node.weightedCount=node.weightedCount + other.weightedCount;
  node.left=merge(node.left,other.left);
  node.right=merge(node.right,other.right);
  if (oldWeight < ZERO_WEIGHT_THRESHOLD && node.weightedCount >= ZERO_WEIGHT_THRESHOLD) {
    nonZeroNodeCount++;
  }
  return node;
}"
85548,"private void insert(long bits,double weight){
  long lastBranch=0;
  Node parent=null;
  Node current=root;
  while (true) {
    if (current == null) {
      setChild(parent,lastBranch,createLeaf(bits,weight));
      return;
    }
 else     if (current.level != MAX_BITS && (bits >>> current.level) != (current.bits >>> current.level)) {
      setChild(parent,lastBranch,makeSiblings(current,createLeaf(bits,weight)));
      return;
    }
 else     if (current.level == 0 && current.bits == bits) {
      double oldWeight=current.weightedCount;
      current.weightedCount+=weight;
      if (current.weightedCount >= ZERO_WEIGHT_THRESHOLD && oldWeight < ZERO_WEIGHT_THRESHOLD) {
        ++nonZeroNodeCount;
      }
      weightedCount+=weight;
      return;
    }
    long branch=bits & current.getBranchMask();
    parent=current;
    lastBranch=branch;
    if (branch == 0) {
      current=current.left;
    }
 else {
      current=current.right;
    }
  }
}","private void insert(long bits,double weight){
  long lastBranch=0;
  Node parent=null;
  Node current=root;
  while (true) {
    if (current == null) {
      setChild(parent,lastBranch,createLeaf(bits,weight));
      return;
    }
 else     if (!inSameSubtree(bits,current.bits,current.level)) {
      setChild(parent,lastBranch,makeSiblings(current,createLeaf(bits,weight)));
      return;
    }
 else     if (current.level == 0 && current.bits == bits) {
      double oldWeight=current.weightedCount;
      current.weightedCount+=weight;
      if (current.weightedCount >= ZERO_WEIGHT_THRESHOLD && oldWeight < ZERO_WEIGHT_THRESHOLD) {
        ++nonZeroNodeCount;
      }
      weightedCount+=weight;
      return;
    }
    long branch=bits & current.getBranchMask();
    parent=current;
    lastBranch=branch;
    if (branch == 0) {
      current=current.left;
    }
 else {
      current=current.right;
    }
  }
}"
85549,"/** 
 * Parses a media type from its string representation.
 * @throws IllegalArgumentException if the input is not parsable
 */
public static MediaType parse(String input){
  checkNotNull(input);
  Tokenizer tokenizer=new Tokenizer(input);
  try {
    String type=tokenizer.consumeToken(TOKEN_MATCHER);
    tokenizer.consumeCharacter('/');
    String subtype=tokenizer.consumeToken(TOKEN_MATCHER);
    ImmutableListMultimap.Builder<String,String> parameters=ImmutableListMultimap.builder();
    while (tokenizer.hasMore()) {
      tokenizer.consumeCharacter(';');
      tokenizer.consumeToken(LINEAR_WHITE_SPACE);
      String attribute=tokenizer.consumeToken(TOKEN_MATCHER);
      tokenizer.consumeCharacter('=');
      final String value;
      if ('""' == tokenizer.previewChar()) {
        tokenizer.consumeCharacter('""');
        StringBuilder valueBuilder=new StringBuilder();
        while ('""' != tokenizer.previewChar()) {
          if ('\\' == tokenizer.previewChar()) {
            tokenizer.consumeCharacter('\\');
            valueBuilder.append(tokenizer.consumeCharacter(ASCII));
          }
 else {
            valueBuilder.append(tokenizer.consumeToken(QUOTED_TEXT_MATCHER));
          }
        }
        value=valueBuilder.toString();
        tokenizer.consumeCharacter('""');
      }
 else {
        value=tokenizer.consumeToken(TOKEN_MATCHER);
      }
      parameters.put(attribute,value);
    }
    return create(type,subtype,parameters.build());
  }
 catch (  IllegalStateException e) {
    throw new IllegalArgumentException(e);
  }
}","/** 
 * Parses a media type from its string representation.
 * @throws IllegalArgumentException if the input is not parsable
 */
public static MediaType parse(String input){
  checkNotNull(input);
  Tokenizer tokenizer=new Tokenizer(input);
  try {
    String type=tokenizer.consumeToken(TOKEN_MATCHER);
    tokenizer.consumeCharacter('/');
    String subtype=tokenizer.consumeToken(TOKEN_MATCHER);
    ImmutableListMultimap.Builder<String,String> parameters=ImmutableListMultimap.builder();
    while (tokenizer.hasMore()) {
      tokenizer.consumeCharacter(';');
      tokenizer.consumeOptionalToken(LINEAR_WHITE_SPACE);
      if (!tokenizer.hasMore()) {
        break;
      }
      String attribute=tokenizer.consumeToken(TOKEN_MATCHER);
      tokenizer.consumeCharacter('=');
      final String value;
      if ('""' == tokenizer.previewChar()) {
        tokenizer.consumeCharacter('""');
        StringBuilder valueBuilder=new StringBuilder();
        while ('""' != tokenizer.previewChar()) {
          if ('\\' == tokenizer.previewChar()) {
            tokenizer.consumeCharacter('\\');
            valueBuilder.append(tokenizer.consumeCharacter(ASCII));
          }
 else {
            valueBuilder.append(tokenizer.consumeToken(QUOTED_TEXT_MATCHER));
          }
        }
        value=valueBuilder.toString();
        tokenizer.consumeCharacter('""');
      }
 else {
        value=tokenizer.consumeToken(TOKEN_MATCHER);
      }
      parameters.put(attribute,value);
    }
    return create(type,subtype,parameters.build());
  }
 catch (  IllegalStateException e) {
    throw new IllegalArgumentException(e);
  }
}"
85550,"@Test public void test(){
  Assert.assertTrue(MediaType.parse(""String_Node_Str"").is(MediaType.JSON_UTF_8.withoutParameters()));
  Assert.assertTrue(MediaType.parse(""String_Node_Str"").is(MediaType.JSON_UTF_8.withoutParameters()));
}","@Test public void test(){
  Assert.assertTrue(MediaType.parse(""String_Node_Str"").is(JSON_UTF_8));
  Assert.assertTrue(MediaType.parse(""String_Node_Str"").is(JSON_UTF_8.withoutParameters()));
  Assert.assertTrue(MediaType.parse(""String_Node_Str"").is(JSON_UTF_8.withoutParameters()));
  Assert.assertTrue(MediaType.parse(""String_Node_Str"").is(HTML_UTF_8));
  Assert.assertTrue(MediaType.parse(""String_Node_Str"").is(HTML_UTF_8.withoutParameters()));
  Assert.assertTrue(MediaType.parse(""String_Node_Str"").is(HTML_UTF_8.withoutParameters()));
}"
85551,"@Inject public RackServlet(RackServletConfig config) throws IOException {
  Preconditions.checkNotNull(config);
  File rackScriptFile=new File(config.getRackConfigPath());
  Preconditions.checkArgument(rackScriptFile.exists(),""String_Node_Str"" + config.getRackConfigPath() + ""String_Node_Str""+ rackScriptFile.getAbsolutePath()+ ""String_Node_Str"");
  runtime=JavaEmbedUtils.initialize(ImmutableList.of(rackScriptFile.getParentFile().getCanonicalPath()),createRuntimeConfig());
  InputStream stream=Resources.getResource(""String_Node_Str"").openStream();
  try {
    runtime.loadFile(""String_Node_Str"",stream,false);
  }
  finally {
    stream.close();
  }
  IRubyObject builder=runtime.evalScriptlet(""String_Node_Str"");
  rackApplication=adapter.callMethod(builder,""String_Node_Str"",new IRubyObject[]{javaToRuby(runtime,rackScriptFile.getCanonicalPath())});
}","@Inject public RackServlet(RackServletConfig config) throws IOException {
  Preconditions.checkNotNull(config);
  File rackScriptFile=new File(config.getRackConfigPath());
  Preconditions.checkArgument(rackScriptFile.canRead(),""String_Node_Str"" + config.getRackConfigPath() + ""String_Node_Str""+ rackScriptFile.getAbsolutePath()+ ""String_Node_Str"");
  runtime=JavaEmbedUtils.initialize(ImmutableList.of(rackScriptFile.getParentFile().getCanonicalPath()),createRuntimeConfig());
  InputStream stream=Resources.getResource(""String_Node_Str"").openStream();
  try {
    runtime.loadFile(""String_Node_Str"",stream,false);
  }
  finally {
    stream.close();
  }
  IRubyObject builder=runtime.evalScriptlet(""String_Node_Str"");
  rackApplication=adapter.callMethod(builder,""String_Node_Str"",new IRubyObject[]{javaToRuby(runtime,rackScriptFile.getCanonicalPath())});
}"
85552,"@Test public void testSimpleRequestWithLogging() throws IOException, ServletException {
  String expectedMessage=""String_Node_Str"";
  OutputStream stream=new ByteArrayOutputStream();
  ch.qos.logback.classic.Logger rackLogger=(ch.qos.logback.classic.Logger)LoggerFactory.getLogger(""String_Node_Str"");
  LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();
  PatternLayoutEncoder encoder=new PatternLayoutEncoder();
  encoder.setPattern(""String_Node_Str"");
  encoder.setContext(context);
  encoder.start();
  OutputStreamAppender<ILoggingEvent> streamAppender=new OutputStreamAppender<ILoggingEvent>();
  streamAppender.setContext(context);
  streamAppender.setEncoder(encoder);
  streamAppender.setOutputStream(stream);
  streamAppender.start();
  rackLogger.addAppender(streamAppender);
  assertEquals(performRequest(""String_Node_Str"" + expectedMessage,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),expectedMessage);
  streamAppender.stop();
  Assertions.assertContains(stream.toString(),""String_Node_Str"" + expectedMessage);
}","@Test public void testSimpleRequestWithLogging() throws IOException, ServletException {
  String expectedMessage=""String_Node_Str"";
  OutputStream stream=new ByteArrayOutputStream();
  ch.qos.logback.classic.Logger rackLogger=(ch.qos.logback.classic.Logger)LoggerFactory.getLogger(""String_Node_Str"");
  rackLogger.setLevel(Level.ALL);
  LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();
  PatternLayoutEncoder encoder=new PatternLayoutEncoder();
  encoder.setPattern(""String_Node_Str"");
  encoder.setContext(context);
  encoder.start();
  OutputStreamAppender<ILoggingEvent> streamAppender=new OutputStreamAppender<ILoggingEvent>();
  streamAppender.setContext(context);
  streamAppender.setEncoder(encoder);
  streamAppender.setOutputStream(stream);
  streamAppender.start();
  rackLogger.addAppender(streamAppender);
  assertEquals(performRequest(""String_Node_Str"" + expectedMessage,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),expectedMessage);
  streamAppender.stop();
  Assertions.assertContains(stream.toString(),""String_Node_Str"" + expectedMessage);
}"
85553,"public HttpServer(HttpServerInfo httpServerInfo,NodeInfo nodeInfo,HttpServerConfig config,Servlet theServlet,Map<String,String> parameters,MBeanServer mbeanServer,LoginService loginService) throws IOException {
  Preconditions.checkNotNull(httpServerInfo,""String_Node_Str"");
  Preconditions.checkNotNull(nodeInfo,""String_Node_Str"");
  Preconditions.checkNotNull(config,""String_Node_Str"");
  Preconditions.checkNotNull(theServlet,""String_Node_Str"");
  Server server=new Server();
  if (mbeanServer != null) {
    MBeanContainer mbeanContainer=new MBeanContainer(mbeanServer){
      @Override public void doStart(){
      }
    }
;
    server.getContainer().addEventListener(mbeanContainer);
  }
  SelectChannelConnector httpConnector;
  if (config.isHttpEnabled()) {
    httpConnector=new SelectChannelConnector();
    httpConnector.setPort(httpServerInfo.getHttpUri().getPort());
    httpConnector.setMaxIdleTime((int)config.getNetworkMaxIdleTime().convertTo(TimeUnit.MILLISECONDS));
    httpConnector.setStatsOn(true);
    httpConnector.setHost(nodeInfo.getBindIp().getHostAddress());
    server.addConnector(httpConnector);
  }
  SslSelectChannelConnector httpsConnector;
  if (config.isHttpsEnabled()) {
    httpsConnector=new SslSelectChannelConnector();
    httpsConnector.setPort(httpServerInfo.getHttpsUri().getPort());
    httpsConnector.setStatsOn(true);
    httpsConnector.setKeystore(config.getKeystorePath());
    httpsConnector.setPassword(config.getKeystorePassword());
    httpsConnector.setMaxIdleTime((int)config.getNetworkMaxIdleTime().convertTo(TimeUnit.MILLISECONDS));
    httpsConnector.setHost(nodeInfo.getBindIp().getHostAddress());
    server.addConnector(httpsConnector);
  }
  QueuedThreadPool threadPool=new QueuedThreadPool(config.getMaxThreads());
  threadPool.setMinThreads(config.getMinThreads());
  threadPool.setMaxIdleTimeMs((int)config.getThreadMaxIdleTime().convertTo(TimeUnit.MILLISECONDS));
  server.setThreadPool(threadPool);
  HandlerCollection handlers=new HandlerCollection();
  handlers.addHandler(createServletContext(theServlet,parameters,loginService));
  RequestLogHandler logHandler=createLogHandler(config);
  if (logHandler != null) {
    handlers.addHandler(logHandler);
  }
  StatisticsHandler statsHandler=new StatisticsHandler();
  statsHandler.setHandler(handlers);
  server.setHandler(statsHandler);
  this.server=server;
}","public HttpServer(HttpServerInfo httpServerInfo,NodeInfo nodeInfo,HttpServerConfig config,Servlet theServlet,Map<String,String> parameters,MBeanServer mbeanServer,LoginService loginService) throws IOException {
  Preconditions.checkNotNull(httpServerInfo,""String_Node_Str"");
  Preconditions.checkNotNull(nodeInfo,""String_Node_Str"");
  Preconditions.checkNotNull(config,""String_Node_Str"");
  Preconditions.checkNotNull(theServlet,""String_Node_Str"");
  Server server=new Server();
  if (mbeanServer != null) {
    MBeanContainer mbeanContainer=new MBeanContainer(mbeanServer){
      @Override public void doStart(){
      }
    }
;
    server.getContainer().addEventListener(mbeanContainer);
  }
  SelectChannelConnector httpConnector;
  if (config.isHttpEnabled()) {
    httpConnector=new SelectChannelConnector();
    httpConnector.setPort(httpServerInfo.getHttpUri().getPort());
    httpConnector.setMaxIdleTime((int)config.getNetworkMaxIdleTime().convertTo(TimeUnit.MILLISECONDS));
    httpConnector.setStatsOn(true);
    httpConnector.setHost(nodeInfo.getBindIp().getHostAddress());
    server.addConnector(httpConnector);
  }
  SslSelectChannelConnector httpsConnector;
  if (config.isHttpsEnabled()) {
    httpsConnector=new SslSelectChannelConnector();
    httpsConnector.setPort(httpServerInfo.getHttpsUri().getPort());
    httpsConnector.setStatsOn(true);
    httpsConnector.setKeystore(config.getKeystorePath());
    httpsConnector.setPassword(config.getKeystorePassword());
    httpsConnector.setMaxIdleTime((int)config.getNetworkMaxIdleTime().convertTo(TimeUnit.MILLISECONDS));
    httpsConnector.setHost(nodeInfo.getBindIp().getHostAddress());
    httpsConnector.setAllowRenegotiate(true);
    server.addConnector(httpsConnector);
  }
  QueuedThreadPool threadPool=new QueuedThreadPool(config.getMaxThreads());
  threadPool.setMinThreads(config.getMinThreads());
  threadPool.setMaxIdleTimeMs((int)config.getThreadMaxIdleTime().convertTo(TimeUnit.MILLISECONDS));
  server.setThreadPool(threadPool);
  HandlerCollection handlers=new HandlerCollection();
  handlers.addHandler(createServletContext(theServlet,parameters,loginService));
  RequestLogHandler logHandler=createLogHandler(config);
  if (logHandler != null) {
    handlers.addHandler(logHandler);
  }
  StatisticsHandler statsHandler=new StatisticsHandler();
  statsHandler.setHandler(handlers);
  server.setHandler(statsHandler);
  this.server=server;
}"
85554,"@Override public void startRPCServer(){
  if (!isRunning) {
    log.info(""String_Node_Str"");
    startServer();
    isRunning=true;
  }
}","@Override public void startRPCServer(){
synchronized (this) {
    if (!isRunning) {
      log.info(""String_Node_Str"");
      server=new ThriftServer(listenAddr,listenPort);
      server.start();
      isRunning=true;
    }
  }
}"
85555,"@Override public boolean isRPCServerRunning(){
  return isRunning;
}","@Override public boolean isRPCServerRunning(){
synchronized (this) {
    return isRunning;
  }
}"
85556,"@Override public void stopRPCServer(){
  if (isRunning) {
    log.info(""String_Node_Str"");
    stopServer();
    isRunning=false;
  }
}","@Override public void stopRPCServer(){
synchronized (this) {
    if (isRunning) {
      log.info(""String_Node_Str"");
      server.stopServer();
      try {
        server.join();
      }
 catch (      InterruptedException e) {
        log.error(e,""String_Node_Str"");
        Thread.currentThread().interrupt();
      }
      isRunning=false;
    }
  }
}"
85557,"private EventTypeMetadata(Class<T> eventClass){
  Preconditions.checkNotNull(eventClass,""String_Node_Str"");
  this.eventClass=eventClass;
  String typeName=eventClass.getSimpleName();
  if (!eventClass.isAnnotationPresent(EventType.class)) {
    addError(""String_Node_Str"",eventClass.getName(),EventType.class.getSimpleName());
  }
 else {
    EventType typeAnnotation=eventClass.getAnnotation(EventType.class);
    if (!typeAnnotation.value().isEmpty()) {
      typeName=typeAnnotation.value();
    }
  }
  this.typeName=typeName;
  List<EventFieldMetadata> uuidFields=newArrayList();
  List<EventFieldMetadata> timestampFields=newArrayList();
  List<EventFieldMetadata> hostFields=newArrayList();
  Map<String,EventFieldMetadata> fields=newTreeMap();
  for (  Method method : findAnnotatedMethods(eventClass,EventField.class)) {
    if (method.getParameterTypes().length != 0) {
      addError(""String_Node_Str"",EventField.class.getSimpleName(),method.toGenericString());
      continue;
    }
    EventDataType eventDataType=EventDataType.byType.get(method.getReturnType());
    if (eventDataType == null) {
      addError(""String_Node_Str"",EventField.class.getSimpleName(),method.toGenericString(),method.getReturnType());
      continue;
    }
    EventField eventField=method.getAnnotation(EventField.class);
    String fieldName=eventField.value();
    if (fieldName.isEmpty()) {
      String methodName=method.getName();
      if (methodName.length() > 3 && methodName.startsWith(""String_Node_Str"")) {
        fieldName=methodName.substring(3);
      }
 else       if (methodName.length() > 2 && methodName.startsWith(""String_Node_Str"")) {
        fieldName=methodName.substring(2);
      }
 else {
        fieldName=methodName;
      }
    }
    if (fields.containsKey(fieldName)) {
      addError(""String_Node_Str"",eventClass.getName(),EventField.class.getSimpleName(),fieldName);
      continue;
    }
    EventFieldMetadata eventFieldMetadata=new EventFieldMetadata(fieldName,method,EventDataType.byType.get(method.getReturnType()));
switch (eventField.fieldMapping()) {
case HOST:
      hostFields.add(eventFieldMetadata);
    break;
case TIMESTAMP:
  timestampFields.add(eventFieldMetadata);
break;
case UUID:
uuidFields.add(eventFieldMetadata);
break;
default :
fields.put(fieldName,eventFieldMetadata);
break;
}
}
for (Class<?> clazz=eventClass; (clazz != null) && !clazz.equals(Object.class); clazz=clazz.getSuperclass()) {
for (Method method : clazz.getDeclaredMethods()) {
if (method.isAnnotationPresent(EventField.class)) {
if (!Modifier.isPublic(method.getModifiers())) {
addError(""String_Node_Str"",EventField.class.getSimpleName(),method.toGenericString());
}
if (Modifier.isStatic(method.getModifiers())) {
addError(""String_Node_Str"",EventField.class.getSimpleName(),method.toGenericString());
}
}
}
}
if (!uuidFields.isEmpty() && uuidFields.size() > 1) {
addError(""String_Node_Str"",eventClass.getName(),EventField.class.getSimpleName(),EventField.EventFieldMapping.UUID);
}
this.uuidField=Iterables.getFirst(uuidFields,null);
if (!timestampFields.isEmpty() && timestampFields.size() > 1) {
addError(""String_Node_Str"",eventClass.getName(),EventField.class.getSimpleName(),EventField.EventFieldMapping.TIMESTAMP);
}
this.timestampField=Iterables.getFirst(timestampFields,null);
if (!hostFields.isEmpty() && hostFields.size() > 1) {
addError(""String_Node_Str"",eventClass.getName(),EventField.class.getSimpleName(),EventField.EventFieldMapping.HOST);
}
this.hostField=Iterables.getFirst(hostFields,null);
this.fields=ImmutableMap.copyOf(fields);
if (getErrors().isEmpty() && this.fields.isEmpty()) {
addError(""String_Node_Str"",eventClass.getName(),EventField.class.getSimpleName());
}
}","private EventTypeMetadata(Class<T> eventClass){
  Preconditions.checkNotNull(eventClass,""String_Node_Str"");
  this.eventClass=eventClass;
  String typeName=eventClass.getSimpleName();
  if (!eventClass.isAnnotationPresent(EventType.class)) {
    addError(""String_Node_Str"",eventClass.getName(),EventType.class.getSimpleName());
  }
 else {
    EventType typeAnnotation=eventClass.getAnnotation(EventType.class);
    if (!typeAnnotation.value().isEmpty()) {
      typeName=typeAnnotation.value();
    }
  }
  this.typeName=typeName;
  List<EventFieldMetadata> uuidFields=newArrayList();
  List<EventFieldMetadata> timestampFields=newArrayList();
  List<EventFieldMetadata> hostFields=newArrayList();
  Map<String,EventFieldMetadata> fields=newTreeMap();
  for (  Method method : findAnnotatedMethods(eventClass,EventField.class)) {
    if (method.getParameterTypes().length != 0) {
      addError(""String_Node_Str"",EventField.class.getSimpleName(),method.toGenericString());
      continue;
    }
    EventDataType eventDataType=EventDataType.byType.get(method.getReturnType());
    if (eventDataType == null) {
      addError(""String_Node_Str"",EventField.class.getSimpleName(),method.toGenericString(),method.getReturnType());
      continue;
    }
    EventField eventField=method.getAnnotation(EventField.class);
    String fieldName=eventField.value();
    if (fieldName.isEmpty()) {
      String methodName=method.getName();
      if (methodName.length() > 3 && methodName.startsWith(""String_Node_Str"")) {
        fieldName=methodName.substring(3);
      }
 else       if (methodName.length() > 2 && methodName.startsWith(""String_Node_Str"")) {
        fieldName=methodName.substring(2);
      }
 else {
        fieldName=methodName;
      }
    }
    if (fields.containsKey(fieldName)) {
      addError(""String_Node_Str"",eventClass.getName(),EventField.class.getSimpleName(),fieldName);
      continue;
    }
    EventFieldMetadata eventFieldMetadata=new EventFieldMetadata(fieldName,method,EventDataType.byType.get(method.getReturnType()));
switch (eventField.fieldMapping()) {
case HOST:
      hostFields.add(eventFieldMetadata);
    break;
case TIMESTAMP:
  timestampFields.add(eventFieldMetadata);
break;
case UUID:
uuidFields.add(eventFieldMetadata);
break;
case DATA:
fields.put(fieldName,eventFieldMetadata);
break;
default :
throw new AssertionError(""String_Node_Str"" + eventField.fieldMapping());
}
}
for (Class<?> clazz=eventClass; (clazz != null) && !clazz.equals(Object.class); clazz=clazz.getSuperclass()) {
for (Method method : clazz.getDeclaredMethods()) {
if (method.isAnnotationPresent(EventField.class)) {
if (!Modifier.isPublic(method.getModifiers())) {
addError(""String_Node_Str"",EventField.class.getSimpleName(),method.toGenericString());
}
if (Modifier.isStatic(method.getModifiers())) {
addError(""String_Node_Str"",EventField.class.getSimpleName(),method.toGenericString());
}
}
}
}
if (!uuidFields.isEmpty() && uuidFields.size() > 1) {
addError(""String_Node_Str"",eventClass.getName(),EventField.class.getSimpleName(),EventField.EventFieldMapping.UUID);
}
this.uuidField=Iterables.getFirst(uuidFields,null);
if (!timestampFields.isEmpty() && timestampFields.size() > 1) {
addError(""String_Node_Str"",eventClass.getName(),EventField.class.getSimpleName(),EventField.EventFieldMapping.TIMESTAMP);
}
this.timestampField=Iterables.getFirst(timestampFields,null);
if (!hostFields.isEmpty() && hostFields.size() > 1) {
addError(""String_Node_Str"",eventClass.getName(),EventField.class.getSimpleName(),EventField.EventFieldMapping.HOST);
}
this.hostField=Iterables.getFirst(hostFields,null);
this.fields=ImmutableMap.copyOf(fields);
if (getErrors().isEmpty() && this.fields.isEmpty()) {
addError(""String_Node_Str"",eventClass.getName(),EventField.class.getSimpleName());
}
}"
85558,"/** 
 * Find methods that are tagged with a given annotation somewhere in the hierarchy
 * @param configClass the class to analyze
 * @return a map that associates a concrete method to the actual method tagged(which may belong to a different class in class hierarchy)
 */
private static Collection<Method> findAnnotatedMethods(Class<?> configClass,Class<? extends java.lang.annotation.Annotation> annotation){
  List<Method> result=new ArrayList<Method>();
  for (  Method method : configClass.getMethods()) {
    if (method.isSynthetic() || method.isBridge() || Modifier.isStatic(method.getModifiers())) {
      continue;
    }
    Method managedMethod=findAnnotatedMethod(configClass,annotation,method.getName(),method.getParameterTypes());
    if (managedMethod != null) {
      result.add(managedMethod);
    }
  }
  return result;
}","/** 
 * Find methods that are tagged with a given annotation somewhere in the hierarchy
 * @param configClass the class to analyze
 * @param annotation the annotation to find
 * @return a map that associates a concrete method to the actual method tagged(which may belong to a different class in class hierarchy)
 */
private static Collection<Method> findAnnotatedMethods(Class<?> configClass,Class<? extends java.lang.annotation.Annotation> annotation){
  List<Method> result=new ArrayList<Method>();
  for (  Method method : configClass.getMethods()) {
    if (method.isSynthetic() || method.isBridge() || Modifier.isStatic(method.getModifiers())) {
      continue;
    }
    Method managedMethod=findAnnotatedMethod(configClass,annotation,method.getName(),method.getParameterTypes());
    if (managedMethod != null) {
      result.add(managedMethod);
    }
  }
  return result;
}"
85559,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  EventTypeMetadata<?> that=(EventTypeMetadata<?>)o;
  if (eventClass != null ? !eventClass.equals(that.eventClass) : that.eventClass != null) {
    return false;
  }
  return true;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  EventTypeMetadata<?> that=(EventTypeMetadata<?>)o;
  if (eventClass != null ? !eventClass.equals(that.eventClass) : that.eventClass != null) {
    return false;
  }
  return true;
}"
85560,"@Override public void run(){
  try {
    if (currentJob.compareAndSet(jobId,jobId + 1)) {
      Duration duration=future.checkedGet();
      scheduleAnnouncement(duration);
    }
  }
 catch (  DiscoveryException e) {
    if (Throwables.getRootCause(e) instanceof ConnectException) {
      log.debug(e,""String_Node_Str"");
    }
 else {
      log.error(e);
    }
  }
 finally {
    isDone.set(null);
  }
}","@Override public void run(){
  if (currentJob.compareAndSet(jobId,jobId + 1)) {
    Duration duration=DEFAULT_DELAY;
    try {
      duration=future.checkedGet();
    }
 catch (    DiscoveryException e) {
      if (Throwables.getRootCause(e) instanceof ConnectException) {
        log.debug(e,""String_Node_Str"");
      }
 else {
        log.error(e);
      }
    }
 finally {
      scheduleAnnouncement(duration);
      isDone.set(null);
    }
  }
}"
85561,"private CheckedFuture<Void,DiscoveryException> announce(){
  final long jobId=currentJob.get();
  final CheckedFuture<Duration,DiscoveryException> future=client.announce(ImmutableSet.copyOf(announcements.values()));
  final SettableFuture<Void> isDone=SettableFuture.create();
  future.addListener(new Runnable(){
    @Override public void run(){
      try {
        if (currentJob.compareAndSet(jobId,jobId + 1)) {
          Duration duration=future.checkedGet();
          scheduleAnnouncement(duration);
        }
      }
 catch (      DiscoveryException e) {
        if (Throwables.getRootCause(e) instanceof ConnectException) {
          log.debug(e,""String_Node_Str"");
        }
 else {
          log.error(e);
        }
      }
 finally {
        isDone.set(null);
      }
    }
  }
,executor);
  return toDiscoveryFuture(""String_Node_Str"",isDone);
}","private CheckedFuture<Void,DiscoveryException> announce(){
  final long jobId=currentJob.get();
  final CheckedFuture<Duration,DiscoveryException> future=client.announce(ImmutableSet.copyOf(announcements.values()));
  final SettableFuture<Void> isDone=SettableFuture.create();
  future.addListener(new Runnable(){
    @Override public void run(){
      if (currentJob.compareAndSet(jobId,jobId + 1)) {
        Duration duration=DEFAULT_DELAY;
        try {
          duration=future.checkedGet();
        }
 catch (        DiscoveryException e) {
          if (Throwables.getRootCause(e) instanceof ConnectException) {
            log.debug(e,""String_Node_Str"");
          }
 else {
            log.error(e);
          }
        }
 finally {
          scheduleAnnouncement(duration);
          isDone.set(null);
        }
      }
    }
  }
,executor);
  return toDiscoveryFuture(""String_Node_Str"",isDone);
}"
85562,"@Override public CheckedFuture<Duration,DiscoveryException> announce(Set<ServiceAnnouncement> services){
  Preconditions.checkNotNull(services,""String_Node_Str"");
  ListenableFuture<Duration> durationFuture;
  try {
    Announcement announcement=new Announcement(nodeInfo.getEnvironment(),nodeInfo.getNodeId(),nodeInfo.getPool(),nodeInfo.getLocation(),services);
    String json=announcementCodec.toJson(announcement);
    ListenableFuture<Response> future=toGuavaListenableFuture(client.preparePut(discoveryServiceURI + ""String_Node_Str"" + nodeInfo.getNodeId()).setHeader(""String_Node_Str"",MediaType.APPLICATION_JSON).setBody(json).execute());
    durationFuture=Futures.transform(future,new Function<Response,Duration>(){
      @Override public Duration apply(      Response response){
        Duration maxAge=extractMaxAge(response);
        int statusCode=response.getStatusCode();
        if (OK.getStatusCode() != statusCode && CREATED.getStatusCode() != statusCode && NO_CONTENT.getStatusCode() != statusCode) {
          throw new DiscoveryException(String.format(""String_Node_Str"",statusCode));
        }
        return maxAge;
      }
    }
);
  }
 catch (  Exception e) {
    durationFuture=Futures.immediateFailedFuture(e);
  }
  return toDiscoveryFuture(""String_Node_Str"",durationFuture);
}","@Override public CheckedFuture<Duration,DiscoveryException> announce(Set<ServiceAnnouncement> services){
  Preconditions.checkNotNull(services,""String_Node_Str"");
  ListenableFuture<Duration> durationFuture;
  try {
    Announcement announcement=new Announcement(nodeInfo.getEnvironment(),nodeInfo.getNodeId(),nodeInfo.getPool(),nodeInfo.getLocation(),services);
    String json=announcementCodec.toJson(announcement);
    ListenableFuture<Response> future=toGuavaListenableFuture(client.preparePut(discoveryServiceURI + ""String_Node_Str"" + nodeInfo.getNodeId()).setHeader(""String_Node_Str"",MediaType.APPLICATION_JSON).setBody(json).execute());
    durationFuture=Futures.transform(future,new Function<Response,Duration>(){
      @Override public Duration apply(      Response response){
        Duration maxAge=extractMaxAge(response);
        int statusCode=response.getStatusCode();
        if (!isSuccess(statusCode)) {
          throw new DiscoveryException(String.format(""String_Node_Str"",statusCode));
        }
        return maxAge;
      }
    }
);
  }
 catch (  Exception e) {
    durationFuture=Futures.immediateFailedFuture(e);
  }
  return toDiscoveryFuture(""String_Node_Str"",durationFuture);
}"
85563,"public <T>void bindGenericEventClient(Class<T> boundType,List<Class<? extends T>> eventTypes){
  Preconditions.checkNotNull(boundType,""String_Node_Str"");
  Preconditions.checkNotNull(eventTypes,""String_Node_Str"");
  Binder sourcedBinder=binder.withSource(getCaller());
  ImmutableList.Builder<EventTypeMetadata<? extends T>> builder=ImmutableList.builder();
  for (  Class<? extends T> eventType : eventTypes) {
    EventTypeMetadata<? extends T> eventTypeMetadata=getEventTypeMetadata(eventType);
    builder.add(eventTypeMetadata);
    for (    String error : eventTypeMetadata.getErrors()) {
      sourcedBinder.addError(error);
    }
  }
  EventClientProvider<T> eventClientProvider=new EventClientProvider<T>(builder.build());
  Key<EventClient<T>> key=(Key<EventClient<T>>)Key.get(newParameterizedType(EventClient.class,boundType));
  sourcedBinder.bind(key).toProvider(eventClientProvider);
}","public <T>void bindGenericEventClient(Class<T> boundType,List<Class<? extends T>> eventTypes){
  Preconditions.checkNotNull(boundType,""String_Node_Str"");
  Preconditions.checkNotNull(eventTypes,""String_Node_Str"");
  Binder sourcedBinder=binder.withSource(getCaller());
  ImmutableList.Builder<EventTypeMetadata<?>> builder=ImmutableList.builder();
  for (  Class<?> eventType : eventTypes) {
    EventTypeMetadata<?> eventTypeMetadata=getEventTypeMetadata(eventType);
    builder.add(eventTypeMetadata);
    for (    String error : eventTypeMetadata.getErrors()) {
      sourcedBinder.addError(error);
    }
  }
  EventClientProvider eventClientProvider=new EventClientProvider(builder.build());
  Key<EventClient> key=(Key<EventClient>)Key.get(newParameterizedType(EventClient.class,boundType));
  sourcedBinder.bind(key).toProvider(eventClientProvider);
}"
85564,<T>EventClient<T> createEventClient(List<EventTypeMetadata<? extends T>> types);,EventClient createEventClient(List<EventTypeMetadata<?>> types);
85565,"public EventClientProvider(List<EventTypeMetadata<? extends T>> eventTypes){
  Preconditions.checkNotNull(eventTypes,""String_Node_Str"");
  this.types=eventTypes;
}","public EventClientProvider(List<EventTypeMetadata<?>> eventTypes){
  Preconditions.checkNotNull(eventTypes,""String_Node_Str"");
  this.types=eventTypes;
}"
85566,"@Override public EventClient<T> get(){
  Preconditions.checkNotNull(eventClientFactory,""String_Node_Str"");
  return eventClientFactory.createEventClient(types);
}","@Override public EventClient get(){
  Preconditions.checkNotNull(eventClientFactory,""String_Node_Str"");
  return eventClientFactory.createEventClient(types);
}"
85567,"@Override public <T>HttpEventClient<T> createEventClient(List<EventTypeMetadata<? extends T>> eventTypes){
  Preconditions.checkNotNull(eventTypes,""String_Node_Str"");
  return new HttpEventClient<T>(httpEventClientConfig,objectMapperProvider.get(),client,eventTypes);
}","@Override public HttpEventClient createEventClient(List<EventTypeMetadata<?>> eventTypes){
  Preconditions.checkNotNull(eventTypes,""String_Node_Str"");
  return new HttpEventClient(httpEventClientConfig,objectMapperProvider.get(),client,eventTypes);
}"
85568,"@Override public <T>InMemoryEventClient<T> createEventClient(List<EventTypeMetadata<? extends T>> eventTypes){
  Preconditions.checkNotNull(eventTypes,""String_Node_Str"");
  return new InMemoryEventClient<T>();
}","@Override public InMemoryEventClient createEventClient(List<EventTypeMetadata<?>> eventTypes){
  Preconditions.checkNotNull(eventTypes,""String_Node_Str"");
  return new InMemoryEventClient();
}"
85569,"@Override public <T>NullEventClient<T> createEventClient(List<EventTypeMetadata<? extends T>> eventTypes){
  Preconditions.checkNotNull(eventTypes,""String_Node_Str"");
  return new NullEventClient<T>();
}","@Override public NullEventClient createEventClient(List<EventTypeMetadata<?>> eventTypes){
  Preconditions.checkNotNull(eventTypes,""String_Node_Str"");
  return new NullEventClient();
}"
85570,"private static void closeQuietly(Connection connection){
  try {
    if (connection != null)     connection.close();
  }
 catch (  SQLException ignored) {
  }
}","private static void closeQuietly(Connection connection){
  try {
    if (connection != null) {
      connection.close();
    }
  }
 catch (  Throwable ignored) {
  }
}"
85571,"private ConfigRecord(String propertyName,String defaultValue,String currentValue,String description){
  this.propertyName=propertyName;
  this.defaultValue=defaultValue;
  this.currentValue=currentValue;
  this.description=description;
}","private ConfigRecord(String propertyName,String defaultValue,String currentValue,String description){
  if (propertyName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (defaultValue == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (currentValue == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (description == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.propertyName=propertyName;
  this.defaultValue=defaultValue;
  this.currentValue=currentValue;
  this.description=description;
}"
85572,"private String getValue(Method getter,Object instance,String defaultValue){
  if (getter == null) {
    return defaultValue;
  }
  try {
    Object value=getter.invoke(instance);
    if (value == null) {
      return ""String_Node_Str"";
    }
    return value.toString();
  }
 catch (  Throwable e) {
    return ""String_Node_Str"";
  }
}","private String getValue(Method getter,Object instance,String defaultValue){
  if (getter == null || instance == null) {
    return defaultValue;
  }
  try {
    Object value=getter.invoke(instance);
    if (value == null) {
      return ""String_Node_Str"";
    }
    return value.toString();
  }
 catch (  Throwable e) {
    return ""String_Node_Str"";
  }
}"
85573,"private void addConfig(ConfigurationProvider<?> configurationProvider,ImmutableSortedSet.Builder<ConfigRecord> builder) throws InvocationTargetException, IllegalAccessException {
  ConfigurationMetadata<?> metadata=ConfigurationMetadata.getValidConfigurationMetadata(configurationProvider.getConfigClass());
  Object instance=configurationProvider.get();
  Object defaults=configurationProvider.getDefaults();
  String prefix=configurationProvider.getPrefix();
  prefix=prefix == null ? ""String_Node_Str"" : (prefix + ""String_Node_Str"");
  for (  AttributeMetadata attribute : metadata.getAttributes().values()) {
    String propertyName=prefix + attribute.getPropertyName();
    Method getter=attribute.getGetter();
    String defaultValue=getValue(getter,defaults,""String_Node_Str"");
    String currentValue=getValue(getter,instance,""String_Node_Str"");
    String description=null;
    builder.add(new ConfigRecord(propertyName,defaultValue,currentValue,description));
  }
}","private void addConfig(ConfigurationProvider<?> configurationProvider,ImmutableSortedSet.Builder<ConfigRecord> builder) throws InvocationTargetException, IllegalAccessException {
  ConfigurationMetadata<?> metadata=configurationProvider.getConfigurationMetadata();
  Object instance=configurationProvider.get();
  Object defaults=null;
  if (!configurationProvider.isLegacy()) {
    defaults=configurationProvider.getDefaults();
  }
  String prefix=configurationProvider.getPrefix();
  prefix=prefix == null ? ""String_Node_Str"" : (prefix + ""String_Node_Str"");
  for (  AttributeMetadata attribute : metadata.getAttributes().values()) {
    String propertyName=prefix + attribute.getPropertyName();
    Method getter=attribute.getGetter();
    String defaultValue;
    if (!configurationProvider.isLegacy()) {
      defaultValue=getValue(getter,defaults,""String_Node_Str"");
    }
 else {
      Default annotation=getter.getAnnotation(Default.class);
      if (annotation != null) {
        defaultValue=annotation.value();
      }
 else {
        defaultValue=""String_Node_Str"";
      }
    }
    String currentValue=getValue(getter,instance,""String_Node_Str"");
    String description=attribute.getDescription();
    if (description == null)     description=""String_Node_Str"";
    builder.add(new ConfigRecord(propertyName,defaultValue,currentValue,description));
  }
}"
85574,"private AttributeMetadata buildAttributeMetadata(Class<?> configClass,Config config,Method configMethod){
  if (config.value() == null || config.value().isEmpty()) {
    errors.add(""String_Node_Str"",configMethod.toGenericString());
    return null;
  }
  String description=null;
  if (configMethod.isAnnotationPresent(ConfigDescription.class)) {
    description=configMethod.getAnnotation(ConfigDescription.class).value();
  }
  String attributeName=configMethod.getName();
  if (attributeName.startsWith(""String_Node_Str"")) {
    attributeName=attributeName.substring(3);
    if (configMethod.getParameterTypes().length != 1) {
      errors.add(""String_Node_Str"",configMethod.toGenericString());
    }
    Method getter=null;
    try {
      getter=configClass.getMethod(""String_Node_Str"" + attributeName);
    }
 catch (    Exception ignored) {
    }
    return new AttributeMetadata(configClass,attributeName,description,config.value(),getter,configMethod);
  }
 else   if (attributeName.startsWith(""String_Node_Str"")) {
    attributeName=attributeName.substring(3);
    if (configMethod.getParameterTypes().length != 0) {
      errors.add(""String_Node_Str"",configMethod.toGenericString());
    }
    if (configMethod.getReturnType() == Void.TYPE) {
      errors.add(""String_Node_Str"",configMethod.toGenericString());
    }
    Method setter=findSetter(configClass,configMethod,attributeName);
    if (setter == null) {
      return null;
    }
    return new AttributeMetadata(configClass,attributeName,description,config.value(),configMethod,setter);
  }
 else   if (attributeName.startsWith(""String_Node_Str"")) {
    attributeName=attributeName.substring(2);
    if (configMethod.getParameterTypes().length != 0) {
      errors.add(""String_Node_Str"",configMethod.toGenericString());
    }
    if (!configMethod.getReturnType().equals(boolean.class) && !configMethod.getReturnType().equals(Boolean.class)) {
      errors.add(""String_Node_Str"",configMethod.toGenericString());
    }
    Method setter=findSetter(configClass,configMethod,attributeName);
    if (setter == null) {
      return null;
    }
    return new AttributeMetadata(configClass,attributeName,description,config.value(),configMethod,setter);
  }
 else {
    errors.add(""String_Node_Str"",configMethod.toGenericString());
    return null;
  }
}","private AttributeMetadata buildAttributeMetadata(Class<?> configClass,Config config,Method configMethod,boolean legacy){
  if (config.value() == null || config.value().isEmpty()) {
    errors.add(""String_Node_Str"",configMethod.toGenericString());
    return null;
  }
  String description=null;
  if (configMethod.isAnnotationPresent(ConfigDescription.class)) {
    description=configMethod.getAnnotation(ConfigDescription.class).value();
  }
  String attributeName=configMethod.getName();
  if (attributeName.startsWith(""String_Node_Str"")) {
    attributeName=attributeName.substring(3);
    if (configMethod.getParameterTypes().length != 1) {
      errors.add(""String_Node_Str"",configMethod.toGenericString());
    }
    Method getter=null;
    try {
      getter=configClass.getMethod(""String_Node_Str"" + attributeName);
    }
 catch (    Exception ignored) {
    }
    return new AttributeMetadata(configClass,attributeName,description,config.value(),getter,configMethod);
  }
 else   if (attributeName.startsWith(""String_Node_Str"")) {
    attributeName=attributeName.substring(3);
    if (configMethod.getParameterTypes().length != 0) {
      errors.add(""String_Node_Str"",configMethod.toGenericString());
    }
    if (configMethod.getReturnType() == Void.TYPE) {
      errors.add(""String_Node_Str"",configMethod.toGenericString());
    }
    Method setter=null;
    if (!legacy) {
      setter=findSetter(configClass,configMethod,attributeName);
      if (setter == null) {
        return null;
      }
    }
    return new AttributeMetadata(configClass,attributeName,description,config.value(),configMethod,setter);
  }
 else   if (attributeName.startsWith(""String_Node_Str"")) {
    attributeName=attributeName.substring(2);
    if (configMethod.getParameterTypes().length != 0) {
      errors.add(""String_Node_Str"",configMethod.toGenericString());
    }
    if (!configMethod.getReturnType().equals(boolean.class) && !configMethod.getReturnType().equals(Boolean.class)) {
      errors.add(""String_Node_Str"",configMethod.toGenericString());
    }
    Method setter=findSetter(configClass,configMethod,attributeName);
    if (setter == null) {
      return null;
    }
    return new AttributeMetadata(configClass,attributeName,description,config.value(),configMethod,setter);
  }
 else {
    errors.add(""String_Node_Str"",configMethod.toGenericString());
    return null;
  }
}"
85575,"private ConfigurationMetadata(Class<T> configClass){
  if (configClass == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.configClass=configClass;
  if (Modifier.isAbstract(configClass.getModifiers())) {
    errors.add(""String_Node_Str"",configClass.getName());
  }
  if (!Modifier.isPublic(configClass.getModifiers())) {
    errors.add(""String_Node_Str"",configClass.getName());
  }
  Constructor<T> constructor=null;
  try {
    constructor=configClass.getDeclaredConstructor();
    if (!Modifier.isPublic(constructor.getModifiers())) {
      errors.add(""String_Node_Str"",constructor.toGenericString());
    }
  }
 catch (  Exception e) {
    errors.add(""String_Node_Str"",configClass.getName());
  }
  this.constructor=constructor;
  Map<String,AttributeMetadata> attributes=Maps.newTreeMap();
  for (  Method configMethod : findConfigMethods(configClass)) {
    Config config=configMethod.getAnnotation(Config.class);
    AttributeMetadata attribute=buildAttributeMetadata(configClass,config,configMethod);
    if (attribute != null) {
      if (attributes.containsKey(attribute.getName())) {
        errors.add(""String_Node_Str"",configClass.getName(),attribute.getName());
      }
      attributes.put(attribute.getName(),attribute);
    }
  }
  this.attributes=ImmutableSortedMap.copyOf(attributes);
  for (Class<?> clazz=configClass; !clazz.equals(Object.class); clazz=clazz.getSuperclass()) {
    for (    Method method : clazz.getDeclaredMethods()) {
      if (method.isAnnotationPresent(Config.class)) {
        if (!Modifier.isPublic(method.getModifiers())) {
          errors.add(""String_Node_Str"",method.toGenericString());
        }
        if (Modifier.isStatic(method.getModifiers())) {
          errors.add(""String_Node_Str"",method.toGenericString());
        }
      }
    }
  }
  if (errors.getErrors().isEmpty() && this.attributes.isEmpty()) {
    errors.add(""String_Node_Str"",configClass.getName());
  }
}","private ConfigurationMetadata(Class<T> configClass,boolean legacy){
  if (configClass == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.configClass=configClass;
  if (!legacy && Modifier.isAbstract(configClass.getModifiers())) {
    errors.add(""String_Node_Str"",configClass.getName());
  }
  if (!Modifier.isPublic(configClass.getModifiers())) {
    errors.add(""String_Node_Str"",configClass.getName());
  }
  Constructor<T> constructor=null;
  try {
    constructor=configClass.getDeclaredConstructor();
    if (!Modifier.isPublic(constructor.getModifiers())) {
      errors.add(""String_Node_Str"",constructor.toGenericString());
    }
  }
 catch (  Exception e) {
    errors.add(""String_Node_Str"",configClass.getName());
  }
  this.constructor=constructor;
  Map<String,AttributeMetadata> attributes=Maps.newTreeMap();
  for (  Method configMethod : findConfigMethods(configClass)) {
    Config config=configMethod.getAnnotation(Config.class);
    AttributeMetadata attribute=buildAttributeMetadata(configClass,config,configMethod,legacy);
    if (attribute != null) {
      if (attributes.containsKey(attribute.getName())) {
        errors.add(""String_Node_Str"",configClass.getName(),attribute.getName());
      }
      attributes.put(attribute.getName(),attribute);
    }
  }
  this.attributes=ImmutableSortedMap.copyOf(attributes);
  for (Class<?> clazz=configClass; !clazz.equals(Object.class); clazz=clazz.getSuperclass()) {
    for (    Method method : clazz.getDeclaredMethods()) {
      if (method.isAnnotationPresent(Config.class)) {
        if (!Modifier.isPublic(method.getModifiers())) {
          errors.add(""String_Node_Str"",method.toGenericString());
        }
        if (Modifier.isStatic(method.getModifiers())) {
          errors.add(""String_Node_Str"",method.toGenericString());
        }
      }
    }
  }
  if (errors.getErrors().isEmpty() && this.attributes.isEmpty()) {
    errors.add(""String_Node_Str"",configClass.getName());
  }
}"
85576,"public static <T>ConfigurationMetadata<T> getConfigurationMetadata(Class<T> configClass){
  ConfigurationMetadata<T> metadata=new ConfigurationMetadata<T>(configClass);
  return metadata;
}","public static <T>ConfigurationMetadata<T> getConfigurationMetadata(Class<T> configClass){
  ConfigurationMetadata<T> metadata=new ConfigurationMetadata<T>(configClass,false);
  return metadata;
}"
85577,"public ConfigurationProvider(Class<T> configClass,String prefix,Map<String,String> properties){
  this.configClass=configClass;
  this.prefix=prefix;
  if (properties != null) {
    configurationFactory=new ConfigurationFactory(properties);
  }
}","public ConfigurationProvider(Class<T> configClass,String prefix,Map<String,String> properties){
  if (configClass == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.configClass=configClass;
  this.prefix=prefix;
  if (properties != null) {
    configurationFactory=new ConfigurationFactory(properties);
  }
}"
85578,"private void procesMethod(Method method,Class<? extends Annotation> annotationClass,Set<String> usedSet){
  if (method.isAnnotationPresent(annotationClass)) {
    if (!usedSet.contains(method.getName())) {
      if (method.getParameterTypes().length != 0) {
        throw new UnsupportedOperationException(String.format(""String_Node_Str"",method.getDeclaringClass().getName() + ""String_Node_Str"" + method.getName()+ ""String_Node_Str""));
      }
      usedSet.add(method.getName());
      methodMap.put(PostConstruct.class,method);
    }
  }
}","private void procesMethod(Method method,Class<? extends Annotation> annotationClass,Set<String> usedSet){
  if (method.isAnnotationPresent(annotationClass)) {
    if (!usedSet.contains(method.getName())) {
      if (method.getParameterTypes().length != 0) {
        throw new UnsupportedOperationException(String.format(""String_Node_Str"",method.getDeclaringClass().getName() + ""String_Node_Str"" + method.getName()+ ""String_Node_Str""));
      }
      usedSet.add(method.getName());
      methodMap.put(annotationClass,method);
    }
  }
}"
85579,"@Test public void testSubClassAnnotated() throws Exception {
  Module module=new Module(){
    @Override public void configure(    Binder binder){
      binder.bind(SimpleBase.class).to(SimpleBaseImpl.class).in(Scopes.SINGLETON);
    }
  }
;
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new LifeCycleModule(),module);
  LifeCycleManager lifeCycleManager=injector.getInstance(LifeCycleManager.class);
  lifeCycleManager.start();
  lifeCycleManager.stop();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
}","@Test public void testSubClassAnnotated() throws Exception {
  Module module=new Module(){
    @Override public void configure(    Binder binder){
      binder.bind(SimpleBase.class).to(SimpleBaseImpl.class).in(Scopes.SINGLETON);
    }
  }
;
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new LifeCycleModule(),module);
  LifeCycleManager lifeCycleManager=injector.getInstance(LifeCycleManager.class);
  lifeCycleManager.start();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str""));
  lifeCycleManager.stop();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
}"
85580,"@Test public void testExecuted() throws Exception {
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new LifeCycleModule());
  ExecutedInstance instance=injector.getInstance(ExecutedInstance.class);
  LifeCycleManager lifeCycleManager=injector.getInstance(LifeCycleManager.class);
  lifeCycleManager.start();
  instance.waitForStart();
  lifeCycleManager.stop();
  instance.waitForEnd();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
}","@Test public void testExecuted() throws Exception {
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new LifeCycleModule());
  ExecutedInstance instance=injector.getInstance(ExecutedInstance.class);
  LifeCycleManager lifeCycleManager=injector.getInstance(LifeCycleManager.class);
  lifeCycleManager.start();
  instance.waitForStart();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str""));
  lifeCycleManager.stop();
  instance.waitForEnd();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
}"
85581,"@Test public void testNoPreDestroy() throws Exception {
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new LifeCycleModule(),new Module(){
    @Override public void configure(    Binder binder){
      binder.bind(PostConstructOnly.class).in(Scopes.SINGLETON);
      binder.bind(PreDestroyOnly.class).in(Scopes.SINGLETON);
    }
  }
);
  injector.getInstance(PostConstructOnly.class);
  LifeCycleManager lifeCycleManager=injector.getInstance(LifeCycleManager.class);
  lifeCycleManager.start();
  lifeCycleManager.stop();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
}","@Test public void testNoPreDestroy() throws Exception {
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new LifeCycleModule(),new Module(){
    @Override public void configure(    Binder binder){
      binder.bind(PostConstructOnly.class).in(Scopes.SINGLETON);
      binder.bind(PreDestroyOnly.class).in(Scopes.SINGLETON);
    }
  }
);
  injector.getInstance(PostConstructOnly.class);
  LifeCycleManager lifeCycleManager=injector.getInstance(LifeCycleManager.class);
  lifeCycleManager.start();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str""));
  lifeCycleManager.stop();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
}"
85582,"@Test public void testPrivateModule() throws Exception {
  Module module=new Module(){
    @Override public void configure(    Binder binder){
      final PrivateModule privateModule=new PrivateModule(){
        @Override protected void configure(){
          binder().bind(SimpleBase.class).to(SimpleBaseImpl.class).in(Scopes.SINGLETON);
          binder().expose(SimpleBase.class);
        }
      }
;
      binder.install(privateModule);
    }
  }
;
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new LifeCycleModule(),module);
  LifeCycleManager lifeCycleManager=injector.getInstance(LifeCycleManager.class);
  lifeCycleManager.start();
  lifeCycleManager.stop();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
}","@Test public void testPrivateModule() throws Exception {
  Module module=new Module(){
    @Override public void configure(    Binder binder){
      final PrivateModule privateModule=new PrivateModule(){
        @Override protected void configure(){
          binder().bind(SimpleBase.class).to(SimpleBaseImpl.class).in(Scopes.SINGLETON);
          binder().expose(SimpleBase.class);
        }
      }
;
      binder.install(privateModule);
    }
  }
;
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new LifeCycleModule(),module);
  LifeCycleManager lifeCycleManager=injector.getInstance(LifeCycleManager.class);
  lifeCycleManager.start();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str""));
  lifeCycleManager.stop();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
}"
85583,"@Test public void testDeepDependency() throws Exception {
  Module module=new Module(){
    @Override public void configure(    Binder binder){
      binder.bind(AnotherInstance.class).in(Scopes.SINGLETON);
    }
  }
;
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new LifeCycleModule(),module);
  injector.getInstance(AnotherInstance.class);
  LifeCycleManager lifeCycleManager=injector.getInstance(LifeCycleManager.class);
  lifeCycleManager.start();
  lifeCycleManager.stop();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
}","@Test public void testDeepDependency() throws Exception {
  Module module=new Module(){
    @Override public void configure(    Binder binder){
      binder.bind(AnotherInstance.class).in(Scopes.SINGLETON);
    }
  }
;
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new LifeCycleModule(),module);
  injector.getInstance(AnotherInstance.class);
  LifeCycleManager lifeCycleManager=injector.getInstance(LifeCycleManager.class);
  lifeCycleManager.start();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str""));
  lifeCycleManager.stop();
  Assert.assertEquals(stateLog,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
}"
85584,"@Test public void should_ReturnExpectedRecordedResponse_FromAnotherValidUrl() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.GET,requestUrl);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final HttpResponse response=request.execute();
  final HttpHeaders headers=response.getHeaders();
  assertThat(headers.getContentType().contains(""String_Node_Str"")).isTrue();
  String responseContent=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(responseContent).contains(""String_Node_Str"");
}","@Test public void should_ReturnExpectedRecordedResponse_FromAnotherValidUrl() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.GET,requestUrl);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final HttpResponse response=request.execute();
  final HttpHeaders headers=response.getHeaders();
  assertThat(headers.getContentType().contains(HEADER_APPLICATION_XML)).isTrue();
  String responseContent=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(responseContent).contains(""String_Node_Str"");
}"
85585,"@Test public void should_UpdateProduct_WhenPutRequestMadeOverSsl() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_SSL_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.PUT,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  final String contentTypeHeader=response.getContentType();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(""String_Node_Str"").isEqualTo(response.parseAsString().trim());
  assertThat(contentTypeHeader).contains(Common.HEADER_APPLICATION_JSON);
}","@Test public void should_UpdateProduct_WhenPutRequestMadeOverSsl() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_SSL_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.PUT,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  final String contentTypeHeader=response.getContentType();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(""String_Node_Str"").isEqualTo(response.parseAsString().trim());
  assertThat(contentTypeHeader).contains(HEADER_APPLICATION_JSON);
}"
85586,"@Test public void should_FindPostContentsEqual_WhenJsonContentOrderIrrelevant() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final URL jsonContentUrl=StubsPortalTest.class.getResource(""String_Node_Str"");
  assertThat(jsonContentUrl).isNotNull();
  final String content=StringUtils.inputStreamToString(jsonContentUrl.openStream());
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(response.parseAsString().trim()).isEqualTo(""String_Node_Str"");
}","@Test public void should_FindPostContentsEqual_WhenJsonContentOrderIrrelevant() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final URL jsonContentUrl=StubsPortalTest.class.getResource(""String_Node_Str"");
  assertThat(jsonContentUrl).isNotNull();
  final String content=StringUtils.inputStreamToString(jsonContentUrl.openStream());
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(response.parseAsString().trim()).isEqualTo(""String_Node_Str"");
}"
85587,"@Test public void should_UpdateProduct_WhenPutRequestMadeWithWrongPost() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.PUT,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  final String responseContentAsString=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND_404);
  assertThat(responseContentAsString).contains(""String_Node_Str"");
}","@Test public void should_UpdateProduct_WhenPutRequestMadeWithWrongPost() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.PUT,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  final String responseContentAsString=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND_404);
  assertThat(responseContentAsString).contains(""String_Node_Str"");
}"
85588,"@SuppressWarnings(""String_Node_Str"") @Test public void should_ReturnExpectedResourceIdHeader_WhenSuccessfulRequestMade() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.GET,requestUrl);
  final HttpResponse response=request.execute();
  final HttpHeaders headers=response.getHeaders();
  assertThat(headers.getContentType().contains(Common.HEADER_APPLICATION_JSON)).isTrue();
  assertThat(headers.containsKey(StubResponse.STUBBY_RESOURCE_ID_HEADER)).isTrue();
  final List<String> headerValues=(List<String>)headers.get(StubResponse.STUBBY_RESOURCE_ID_HEADER);
  assertThat(headerValues.get(0)).isEqualTo(""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") @Test public void should_ReturnExpectedResourceIdHeader_WhenSuccessfulRequestMade() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.GET,requestUrl);
  final HttpResponse response=request.execute();
  final HttpHeaders headers=response.getHeaders();
  assertThat(headers.getContentType().contains(HEADER_APPLICATION_JSON)).isTrue();
  assertThat(headers.containsKey(StubResponse.STUBBY_RESOURCE_ID_HEADER)).isTrue();
  final List<String> headerValues=(List<String>)headers.get(StubResponse.STUBBY_RESOURCE_ID_HEADER);
  assertThat(headerValues.get(0)).isEqualTo(""String_Node_Str"");
}"
85589,"@Test public void should_ReturnAllProducts_WhenGetRequestMade() throws Exception {
  final URL jsonContentUrl=StubsPortalTest.class.getResource(""String_Node_Str"");
  assertThat(jsonContentUrl).isNotNull();
  final String expectedContent=StringUtils.inputStreamToString(jsonContentUrl.openStream());
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpResponse response=HttpUtils.constructHttpRequest(HttpMethods.GET,requestUrl).execute();
  final String contentTypeHeader=response.getContentType();
  final String responseContent=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(expectedContent).isEqualTo(responseContent);
  assertThat(contentTypeHeader).contains(Common.HEADER_APPLICATION_JSON);
}","@Test public void should_ReturnAllProducts_WhenGetRequestMade() throws Exception {
  final URL jsonContentUrl=StubsPortalTest.class.getResource(""String_Node_Str"");
  assertThat(jsonContentUrl).isNotNull();
  final String expectedContent=StringUtils.inputStreamToString(jsonContentUrl.openStream());
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpResponse response=HttpUtils.constructHttpRequest(HttpMethods.GET,requestUrl).execute();
  final String contentTypeHeader=response.getContentType();
  final String responseContent=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(expectedContent).isEqualTo(responseContent);
  assertThat(contentTypeHeader).contains(HEADER_APPLICATION_JSON);
}"
85590,"@Test public void should_UpdateProduct_WhenPutRequestMadeWithWrongPostOverSsl() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_SSL_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.PUT,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  final String responseContentAsString=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND_404);
  assertThat(responseContentAsString).contains(""String_Node_Str"");
}","@Test public void should_UpdateProduct_WhenPutRequestMadeWithWrongPostOverSsl() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_SSL_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.PUT,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  final String responseContentAsString=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND_404);
  assertThat(responseContentAsString).contains(""String_Node_Str"");
}"
85591,"@Test public void should_FindPostContentsEqual_WhenXmlContentOrderIrrelevant() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final URL jsonContentUrl=StubsPortalTest.class.getResource(""String_Node_Str"");
  assertThat(jsonContentUrl).isNotNull();
  final String content=StringUtils.inputStreamToString(jsonContentUrl.openStream());
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(Common.HEADER_APPLICATION_XML);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(response.parseAsString().trim()).isEqualTo(""String_Node_Str"");
}","@Test public void should_FindPostContentsEqual_WhenXmlContentOrderIrrelevant() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final URL jsonContentUrl=StubsPortalTest.class.getResource(""String_Node_Str"");
  assertThat(jsonContentUrl).isNotNull();
  final String content=StringUtils.inputStreamToString(jsonContentUrl.openStream());
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(HEADER_APPLICATION_XML);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(response.parseAsString().trim()).isEqualTo(""String_Node_Str"");
}"
85592,"@Test public void should_CreateNewProduct_WhenPostRequestMade() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  final String contentTypeHeader=response.getContentType();
  final String responseContentAsString=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED_201);
  assertThat(""String_Node_Str"").isEqualTo(responseContentAsString);
  assertThat(contentTypeHeader).contains(Common.HEADER_APPLICATION_JSON);
}","@Test public void should_CreateNewProduct_WhenPostRequestMade() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  final String contentTypeHeader=response.getContentType();
  final String responseContentAsString=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED_201);
  assertThat(""String_Node_Str"").isEqualTo(responseContentAsString);
  assertThat(contentTypeHeader).contains(HEADER_APPLICATION_JSON);
}"
85593,"@Test public void should_MakeSuccessfulRequest_WhenJsonRegexMatchesPostJson() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final HttpResponse response=request.execute();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(response.parseAsString().trim()).isEqualTo(""String_Node_Str"");
}","@Test public void should_MakeSuccessfulRequest_WhenJsonRegexMatchesPostJson() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final HttpResponse response=request.execute();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(response.parseAsString().trim()).isEqualTo(""String_Node_Str"");
}"
85594,"@Test public void should_ReturnExpectedRecordedResponse_OnSubsequentCallToValidUrl() throws Exception {
  ANSITerminal.muteConsole(false);
  final ByteArrayOutputStream consoleCaptor=new ByteArrayOutputStream();
  final boolean NO_AUTO_FLUSH=false;
  final PrintStream oldPrintStream=System.out;
  System.setOut(new PrintStream(consoleCaptor,NO_AUTO_FLUSH,StringUtils.UTF_8));
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.GET,requestUrl);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final int LIMIT=5;
  for (int idx=1; idx <= LIMIT; idx++) {
    final HttpResponse actualResponse=request.execute();
    final String actualConsoleOutput=consoleCaptor.toString(StringUtils.UTF_8).trim();
    String firstCallResponseContent=actualResponse.parseAsString().trim();
    assertThat(firstCallResponseContent).contains(""String_Node_Str"");
    assertThat(actualConsoleOutput).containsOnlyOnce(""String_Node_Str"");
    if (idx == LIMIT) {
      System.setOut(oldPrintStream);
      System.out.println(actualConsoleOutput);
    }
  }
}","@Test public void should_ReturnExpectedRecordedResponse_OnSubsequentCallToValidUrl() throws Exception {
  ANSITerminal.muteConsole(false);
  final ByteArrayOutputStream consoleCaptor=new ByteArrayOutputStream();
  final boolean NO_AUTO_FLUSH=false;
  final PrintStream oldPrintStream=System.out;
  System.setOut(new PrintStream(consoleCaptor,NO_AUTO_FLUSH,StringUtils.UTF_8));
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.GET,requestUrl);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final int LIMIT=5;
  for (int idx=1; idx <= LIMIT; idx++) {
    final HttpResponse actualResponse=request.execute();
    final String actualConsoleOutput=consoleCaptor.toString(StringUtils.UTF_8).trim();
    String firstCallResponseContent=actualResponse.parseAsString().trim();
    assertThat(firstCallResponseContent).contains(""String_Node_Str"");
    assertThat(actualConsoleOutput).containsOnlyOnce(""String_Node_Str"");
    if (idx == LIMIT) {
      System.setOut(oldPrintStream);
      System.out.println(actualConsoleOutput);
    }
  }
}"
85595,"@Test public void should_FindPostContentsNotEqual_WhenJsonParseExceptionThrown() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  assertThat(request.execute().getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND_404);
}","@Test public void should_FindPostContentsNotEqual_WhenJsonParseExceptionThrown() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  assertThat(request.execute().getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND_404);
}"
85596,"@Test public void should_MakeSuccessfulRequest_WhenStubbedValidJsonMatchesComplexValidJsonPost() throws Exception {
  final URL dataPostUrl=StubsPortalTest.class.getResource(""String_Node_Str"");
  final String content=StringUtils.inputStreamToString(dataPostUrl.openStream());
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final HttpResponse response=request.execute();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(response.parseAsString().trim()).isEqualTo(""String_Node_Str"");
}","@Test public void should_MakeSuccessfulRequest_WhenStubbedValidJsonMatchesComplexValidJsonPost() throws Exception {
  final URL dataPostUrl=StubsPortalTest.class.getResource(""String_Node_Str"");
  final String content=StringUtils.inputStreamToString(dataPostUrl.openStream());
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final HttpResponse response=request.execute();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(response.parseAsString().trim()).isEqualTo(""String_Node_Str"");
}"
85597,"@Test public void should_NotReturnExpectedRecordedResponse_FromValidUrl_WhenQueryValueNotCorrect() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.GET,requestUrl);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final HttpResponse response=request.execute();
  final HttpHeaders headers=response.getHeaders();
  assertThat(headers.getContentType().contains(""String_Node_Str"")).isTrue();
  String responseContent=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(responseContent).contains(""String_Node_Str"");
}","@Test public void should_NotReturnExpectedRecordedResponse_FromValidUrl_WhenQueryValueNotCorrect() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.GET,requestUrl);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final HttpResponse response=request.execute();
  final HttpHeaders headers=response.getHeaders();
  assertThat(headers.getContentType().contains(HEADER_APPLICATION_XML)).isTrue();
  String responseContent=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(responseContent).contains(""String_Node_Str"");
  assertThat(responseContent).contains(""String_Node_Str"");
  assertThat(responseContent).contains(""String_Node_Str"");
}"
85598,"@Test public void should_UpdateProduct_WhenPutRequestMade() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.PUT,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  final String contentTypeHeader=response.getContentType();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(""String_Node_Str"").isEqualTo(response.parseAsString().trim());
  assertThat(contentTypeHeader).contains(Common.HEADER_APPLICATION_JSON);
}","@Test public void should_UpdateProduct_WhenPutRequestMade() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.PUT,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  final String contentTypeHeader=response.getContentType();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(""String_Node_Str"").isEqualTo(response.parseAsString().trim());
  assertThat(contentTypeHeader).contains(HEADER_APPLICATION_JSON);
}"
85599,"@Test public void should_CreateNewProduct_WhenPostRequestMadeOverSsl() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_SSL_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  final String contentTypeHeader=response.getContentType();
  final String responseContentAsString=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED_201);
  assertThat(""String_Node_Str"").isEqualTo(responseContentAsString);
  assertThat(contentTypeHeader).contains(Common.HEADER_APPLICATION_JSON);
}","@Test public void should_CreateNewProduct_WhenPostRequestMadeOverSsl() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_SSL_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(httpHeaders);
  final HttpResponse response=request.execute();
  final String contentTypeHeader=response.getContentType();
  final String responseContentAsString=response.parseAsString().trim();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED_201);
  assertThat(""String_Node_Str"").isEqualTo(responseContentAsString);
  assertThat(contentTypeHeader).contains(HEADER_APPLICATION_JSON);
}"
85600,"@Test public void should_MakeSuccessfulRequest_WhenJsonRegexMatchesComplexJsonPost() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final HttpResponse response=request.execute();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(response.parseAsString().trim()).isEqualTo(""String_Node_Str"");
}","@Test public void should_MakeSuccessfulRequest_WhenJsonRegexMatchesComplexJsonPost() throws Exception {
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final String content=""String_Node_Str"";
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final HttpResponse response=request.execute();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(response.parseAsString().trim()).isEqualTo(""String_Node_Str"");
}"
85601,"@Test public void should_ReturnAllProducts_WhenGetRequestMadeOverSsl() throws Exception {
  final URL jsonContentUrl=StubsPortalTest.class.getResource(""String_Node_Str"");
  assertThat(jsonContentUrl).isNotNull();
  final String expectedContent=StringUtils.inputStreamToString(jsonContentUrl.openStream());
  final String requestUrl=String.format(""String_Node_Str"",STUBS_SSL_URL,""String_Node_Str"");
  final HttpResponse response=HttpUtils.constructHttpRequest(HttpMethods.GET,requestUrl).execute();
  final String contentTypeHeader=response.getContentType();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(expectedContent).isEqualTo(response.parseAsString().trim());
  assertThat(contentTypeHeader).contains(Common.HEADER_APPLICATION_JSON);
}","@Test public void should_ReturnAllProducts_WhenGetRequestMadeOverSsl() throws Exception {
  final URL jsonContentUrl=StubsPortalTest.class.getResource(""String_Node_Str"");
  assertThat(jsonContentUrl).isNotNull();
  final String expectedContent=StringUtils.inputStreamToString(jsonContentUrl.openStream());
  final String requestUrl=String.format(""String_Node_Str"",STUBS_SSL_URL,""String_Node_Str"");
  final HttpResponse response=HttpUtils.constructHttpRequest(HttpMethods.GET,requestUrl).execute();
  final String contentTypeHeader=response.getContentType();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(expectedContent).isEqualTo(response.parseAsString().trim());
  assertThat(contentTypeHeader).contains(HEADER_APPLICATION_JSON);
}"
85602,"@Test public void should_MakeSuccessfulRequest_WhenStubbedJsonRegexMatchesComplexValidJsonPost() throws Exception {
  final URL dataPostUrl=StubsPortalTest.class.getResource(""String_Node_Str"");
  final String content=StringUtils.inputStreamToString(dataPostUrl.openStream());
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(Common.HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final HttpResponse response=request.execute();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(response.parseAsString().trim()).isEqualTo(""String_Node_Str"");
}","@Test public void should_MakeSuccessfulRequest_WhenStubbedJsonRegexMatchesComplexValidJsonPost() throws Exception {
  final URL dataPostUrl=StubsPortalTest.class.getResource(""String_Node_Str"");
  final String content=StringUtils.inputStreamToString(dataPostUrl.openStream());
  final String requestUrl=String.format(""String_Node_Str"",STUBS_URL,""String_Node_Str"");
  final HttpRequest request=HttpUtils.constructHttpRequest(HttpMethods.POST,requestUrl,content);
  final HttpHeaders requestHeaders=new HttpHeaders();
  requestHeaders.setContentType(HEADER_APPLICATION_JSON);
  request.setHeaders(requestHeaders);
  final HttpResponse response=request.execute();
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK_200);
  assertThat(response.parseAsString().trim()).isEqualTo(""String_Node_Str"");
}"
85603,"public StubRequest build(){
  final StubRequest stubRequest=new StubRequest(url,post,file,methods,headers,query);
  this.url=null;
  this.methods=new ArrayList<String>();
  this.post=null;
  this.file=null;
  this.headers=new HashMap<String,String>();
  this.query=new LinkedHashMap<String,String>();
  return stubRequest;
}","public StubRequest build(){
  final StubRequest stubRequest=new StubRequest(url,post,file,methods,headers,query);
  this.url=null;
  this.methods=new ArrayList<>();
  this.post=null;
  this.file=null;
  this.headers=new LinkedHashMap<>();
  this.query=new LinkedHashMap<>();
  return stubRequest;
}"
85604,"@Test public void shouldMatchExpectedToStringOutput_WhenActualRequestHasNullHeaderValue() throws Exception {
  final StubRequest actualRequest=BUILDER.withUrl(""String_Node_Str"").withMethodGet().withMethodPost().withMethodPut().withPost(null).withQuery(""String_Node_Str"",""String_Node_Str"").withQuery(""String_Node_Str"",""String_Node_Str"").withHeaders(""String_Node_Str"",null).withHeaders(""String_Node_Str"",""String_Node_Str"").withHeaders(""String_Node_Str"",""String_Node_Str"").build();
  final String expectedToStringOutput=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertThat(actualRequest.toString()).isEqualTo(expectedToStringOutput);
}","@Test public void shouldMatchExpectedToStringOutput_WhenActualRequestHasNullHeaderValue() throws Exception {
  final StubRequest actualRequest=BUILDER.withUrl(""String_Node_Str"").withMethodGet().withMethodPost().withMethodPut().withPost(null).withQuery(""String_Node_Str"",""String_Node_Str"").withQuery(""String_Node_Str"",""String_Node_Str"").withHeaders(""String_Node_Str"",""String_Node_Str"").withHeaders(""String_Node_Str"",""String_Node_Str"").withHeaders(""String_Node_Str"",null).build();
  final String expectedToStringOutput=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertThat(actualRequest.toString()).isEqualTo(expectedToStringOutput);
}"
85605,"public StubRequestBuilder withMethodPost(){
  this.methods.add(HttpMethods.POST);
  return this;
}","public StubRequestBuilder withMethodPost(){
  this.methods.add(HttpMethod.POST.name());
  return this;
}"
85606,"public StubRequestBuilder withMethodGet(){
  this.methods.add(HttpMethods.GET);
  return this;
}","public StubRequestBuilder withMethodGet(){
  this.methods.add(HttpMethod.GET.name());
  return this;
}"
85607,"public StubRequestBuilder withMethodPut(){
  this.methods.add(HttpMethods.PUT);
  return this;
}","public StubRequestBuilder withMethodPut(){
  this.methods.add(HttpMethod.PUT.name());
  return this;
}"
85608,"public StubRequestBuilder withMethodHead(){
  this.methods.add(HttpMethods.HEAD);
  return this;
}","public StubRequestBuilder withMethodHead(){
  this.methods.add(HttpMethod.HEAD.name());
  return this;
}"
85609,"public Request withMethodPost(){
  return appendTemporaryMethodPlaceholderStoreMethod(HttpMethods.POST);
}","public Request withMethodPost(){
  return appendTemporaryMethodPlaceholderStoreMethod(HttpMethod.POST.name());
}"
85610,"public Request withMethodGet(){
  return appendTemporaryMethodPlaceholderStoreMethod(HttpMethods.GET);
}","public Request withMethodGet(){
  return appendTemporaryMethodPlaceholderStoreMethod(HttpMethod.GET.name());
}"
85611,"public Request withMethodPut(){
  return appendTemporaryMethodPlaceholderStoreMethod(HttpMethods.PUT);
}","public Request withMethodPut(){
  return appendTemporaryMethodPlaceholderStoreMethod(HttpMethod.PUT.name());
}"
85612,"public Request withMethodHead(){
  return appendTemporaryMethodPlaceholderStoreMethod(HttpMethods.HEAD);
}","public Request withMethodHead(){
  return appendTemporaryMethodPlaceholderStoreMethod(HttpMethod.HEAD.name());
}"
85613,"@Test public void constructQueryString_ShouldConstructQueryString_WhenParamMapGiven() throws Exception {
  final Map<String,String> expectedParams=new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
;
  final String actualQueryString=CollectionUtils.constructQueryString(expectedParams);
  final String expectedQueryString=""String_Node_Str"";
  assertThat(expectedQueryString).isEqualTo(actualQueryString);
}","@Test public void constructQueryString_ShouldConstructQueryString_WhenParamMapGiven() throws Exception {
  final Map<String,String> expectedParams=new LinkedHashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
;
  final String actualQueryString=CollectionUtils.constructQueryString(expectedParams);
  final String expectedQueryString=""String_Node_Str"";
  assertThat(expectedQueryString).isEqualTo(actualQueryString);
}"
85614,"public static Map<String,String> getProperties(final Object object) throws IllegalAccessException, InvocationTargetException {
  final Map<String,String> properties=new HashMap<String,String>();
  for (  final Field field : object.getClass().getDeclaredFields()) {
    AccessController.doPrivileged(new PrivilegedAction<Boolean>(){
      public Boolean run(){
        field.setAccessible(true);
        return true;
      }
    }
);
    if (skipableProperties.contains(field.getName())) {
      continue;
    }
    final Object fieldObject=ReflectionUtils.getPropertyValue(object,field.getName());
    final String value=StringUtils.isObjectSet(fieldObject) ? fieldObject.toString() : ""String_Node_Str"";
    properties.put(StringUtils.toLower(field.getName()),value);
  }
  return properties;
}","public static Map<String,String> getProperties(final Object object) throws IllegalAccessException, InvocationTargetException, UnsupportedEncodingException {
  final Map<String,String> properties=new HashMap<String,String>();
  for (  final Field field : object.getClass().getDeclaredFields()) {
    AccessController.doPrivileged(new PrivilegedAction<Boolean>(){
      public Boolean run(){
        field.setAccessible(true);
        return true;
      }
    }
);
    if (skipableProperties.contains(field.getName())) {
      continue;
    }
    final Object fieldObject=ReflectionUtils.getPropertyValue(object,field.getName());
    final String value=determineObjectStringValue(fieldObject);
    properties.put(StringUtils.toLower(field.getName()),value);
  }
  return properties;
}"
85615,"public int getErrorCode(){
  return errorCode;
}","public Integer getErrorCode(){
  return errorCode;
}"
85616,"public TransmissionException(String response,int errorCode){
  super(response + ""String_Node_Str"" + errorCode+ ""String_Node_Str"");
  this.errorResponse=response;
  this.errorCode=errorCode;
}","public TransmissionException(String response,Integer errorCode){
  super(String.format(""String_Node_Str"",response,errorCode));
  this.errorResponse=response;
  this.errorCode=errorCode;
}"
85617,"private String transmit(String soapAction,String data){
  HttpPost post=generatePost(soapAction,data);
  try {
    HttpResponse response=client.execute(post);
    return handleResponse(response);
  }
 catch (  IOException ex) {
    throw new SoapClientException(ex);
  }
catch (  SoapClientException ex) {
    throw ex;
  }
catch (  RuntimeException ex) {
    post.abort();
    throw new SoapClientException(ex);
  }
}","private String transmit(String soapAction,String data){
  HttpPost post=generatePost(soapAction,data);
  return executePost(post);
}"
85618,"@Test(timeout=5000,expected=TransmissionException.class) public void connectTimeout(){
  try {
    SoapClient client=SoapClient.builder().endpointUri(""String_Node_Str"").connectTimeoutInMillis(1000).build();
    client.post(""String_Node_Str"");
  }
 catch (  TransmissionException ex) {
    assertTrue(ex.getCause() instanceof SocketTimeoutException);
    throw ex;
  }
}","@Test(timeout=5000) public void connectTimeout(){
  exception.expect(TransmissionException.class);
  exception.expectMessage(""String_Node_Str"");
  SoapClient client=SoapClient.builder().endpointUri(""String_Node_Str"").connectTimeoutInMillis(1000).build();
  client.post(""String_Node_Str"");
}"
85619,"private Statement statement(final Statement base,final Description description){
  return new Statement(){
    @Override public void evaluate() throws Throwable {
      Server server=description.getAnnotation(Server.class);
      if (server != null) {
        Class<?> testClass=description.getTestClass();
        ServerProcessor processor=new ServerProcessor(server,testClass);
        processor.initServer();
        try {
          base.evaluate();
          return;
        }
  finally {
          processor.stopServer();
        }
      }
    }
  }
;
}","private Statement statement(final Statement base,final Description description){
  return new Statement(){
    @Override public void evaluate() throws Throwable {
      Server server=description.getAnnotation(Server.class);
      ServerProcessor processor=null;
      if (server != null) {
        Class<?> testClass=description.getTestClass();
        processor=new ServerProcessor(server,testClass);
        processor.initServer();
      }
      try {
        base.evaluate();
      }
  finally {
        if (processor != null) {
          processor.stopServer();
        }
      }
    }
  }
;
}"
85620,"@Override public void evaluate() throws Throwable {
  Server server=description.getAnnotation(Server.class);
  if (server != null) {
    Class<?> testClass=description.getTestClass();
    ServerProcessor processor=new ServerProcessor(server,testClass);
    processor.initServer();
    try {
      base.evaluate();
      return;
    }
  finally {
      processor.stopServer();
    }
  }
}","@Override public void evaluate() throws Throwable {
  Server server=description.getAnnotation(Server.class);
  ServerProcessor processor=null;
  if (server != null) {
    Class<?> testClass=description.getTestClass();
    processor=new ServerProcessor(server,testClass);
    processor.initServer();
  }
  try {
    base.evaluate();
  }
  finally {
    if (processor != null) {
      processor.stopServer();
    }
  }
}"
85621,"public void invoke(MessageContext messageContext,Object endpoint) throws Exception {
  ContextPayloadEndpoint payloadEndpoint=(ContextPayloadEndpoint)endpoint;
  Source requestSource=messageContext.getRequest().getPayloadSource();
  Source responseSource=payloadEndpoint.invoke(requestSource,messageContext);
  GenericSoapMessage message=new GenericSoapMessage(responseSource);
  messageContext.setResponse(message);
}","public void invoke(MessageContext messageContext,Object endpoint){
  ContextPayloadEndpoint payloadEndpoint=(ContextPayloadEndpoint)endpoint;
  Source requestSource=messageContext.getRequest().getPayloadSource();
  Source responseSource=payloadEndpoint.invoke(requestSource,messageContext);
  GenericSoapMessage message=new GenericSoapMessage(responseSource);
  messageContext.setResponse(message);
}"
85622,"/** 
 * Invokes the endpoint with the given request payload, and possibly returns a response.
 * @param request the payload of the request message, may be <code>null</code>
 * @param messageContext
 * @return the payload of the response message, may be <code>null</code> to indicate no response
 * @throws Exception if an exception occurs
 */
Source invoke(Source request,MessageContext messageContext) throws Exception ;","/** 
 * Invokes the endpoint with the given request payload, and possibly returns a response.
 * @param request the payload of the request message, may be <code>null</code>
 * @param messageContext
 * @return the payload of the response message, may be <code>null</code> to indicate no response
 * @throws Exception if an exception occurs
 */
Source invoke(Source request,MessageContext messageContext);"
85623,"@Override protected Element invokeInternal(Element requestElement,Document responseDocument) throws Exception {
  throw new SoapServerException(""String_Node_Str"");
}","@Override protected Element invokeInternal(Element requestElement,Document responseDocument){
  throw new SoapServerException(""String_Node_Str"");
}"
85624,"@Override public Source invoke(Source request,MessageContext messageContext) throws Exception {
  RequestResponder requestResponder=getRequestResponderBySessionRequestContextPath();
  if (noResponderForRequestFound(requestResponder)) {
    handleNoResponderFault(request);
  }
  SoapMessage msg=(SoapMessage)messageContext.getRequest();
  Source response=requestResponder.respond(msg);
  return response;
}","@Override public Source invoke(Source request,MessageContext messageContext){
  RequestResponder requestResponder=getRequestResponderBySessionRequestContextPath();
  if (noResponderForRequestFound(requestResponder)) {
    handleNoResponderFault();
  }
  SoapMessage msg=(SoapMessage)messageContext.getRequest();
  Source response=requestResponder.respond(msg);
  return response;
}"
85625,"private Source handleNoResponderFault(Source request){
  String msg=String.format(""String_Node_Str"",getRequestContextPath());
  throw new SoapServerException(msg);
}","private Source handleNoResponderFault(){
  String msg=String.format(""String_Node_Str"",getRequestContextPath());
  throw new SoapServerException(msg);
}"
85626,"@Override public void afterPropertiesSet() throws Exception {
  log.info(""String_Node_Str"");
}","@Override public void afterPropertiesSet(){
  log.info(""String_Node_Str"");
}"
85627,"@Override protected Object getEndpointInternal(MessageContext messageContext) throws Exception {
  return genericEndpoint;
}","@Override protected Object getEndpointInternal(MessageContext messageContext){
  return genericEndpoint;
}"
85628,"public void afterPropertiesSet() throws Exception {
  configureFactory(soap11,SoapVersion.SOAP_11);
  configureFactory(soap12,SoapVersion.SOAP_12);
}","public void afterPropertiesSet(){
  configureFactory(soap11,SoapVersion.SOAP_11);
  configureFactory(soap12,SoapVersion.SOAP_12);
}"
85629,"@Override public Source respond(OperationWrapper invokedOperation,SoapMessage message){
  try {
    String response=builder.buildSoapMessageFromOutput(invokedOperation,context);
    Source responseSource=XmlUtils.xmlStringToSource(response);
    return responseSource;
  }
 catch (  Exception e) {
    throw new SoapServerException(e);
  }
}","@Override public Source respond(OperationWrapper invokedOperation,SoapMessage message){
  try {
    String response=builder.buildSoapMessageFromOutput(invokedOperation,context);
    return XmlUtils.xmlStringToSource(response);
  }
 catch (  Exception e) {
    throw new SoapServerException(e);
  }
}"
85630,"private String performTransmission(String data) throws IOException {
  Writer outputWriter=null;
  try {
    outputStream=connection.getOutputStream();
    outputWriter=new OutputStreamWriter(outputStream,Charset.forName(""String_Node_Str""));
    outputWriter.write(data);
    outputWriter.flush();
    inputStream=connection.getInputStream();
    StringBuilder response=new StringBuilder();
    int inputChar;
    while ((inputChar=inputStream.read()) != -1) {
      response.append((char)inputChar);
    }
    return response.toString();
  }
  finally {
    if (outputWriter != null)     IOUtils.closeQuietly(outputWriter);
  }
}","private String performTransmission(String data) throws IOException {
  Writer outputWriter=null;
  try {
    outputStream=connection.getOutputStream();
    outputWriter=new OutputStreamWriter(outputStream,Charset.forName(""String_Node_Str""));
    outputWriter.write(data);
    outputWriter.flush();
    inputStream=connection.getInputStream();
    StringBuilder response=new StringBuilder();
    int inputChar;
    while ((inputChar=inputStream.read()) != -1) {
      response.append((char)inputChar);
    }
    return response.toString();
  }
  finally {
    if (outputWriter != null) {
      IOUtils.closeQuietly(outputWriter);
    }
  }
}"
85631,"private void cleanupResources(){
  if (inputStream != null)   IOUtils.closeQuietly(inputStream);
  if (outputStream != null)   IOUtils.closeQuietly(outputStream);
}","private void cleanupResources(){
  if (inputStream != null) {
    IOUtils.closeQuietly(inputStream);
  }
  if (outputStream != null) {
    IOUtils.closeQuietly(outputStream);
  }
}"
85632,"private void configureTls(){
  if (tlsEnabled == false)   return;
  try {
    TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
    trustManagerFactory.init(keyStore);
    X509TrustManager defaultTrustManager=(X509TrustManager)trustManagerFactory.getTrustManagers()[0];
    context=SSLContext.getInstance(sslContext);
    context.init(null,new TrustManager[]{defaultTrustManager},null);
    sslSocketFactory=context.getSocketFactory();
    ((HttpsURLConnection)connection).setSSLSocketFactory(sslSocketFactory);
    if (strictHostVerification == false) {
      ((HttpsURLConnection)connection).setHostnameVerifier(new SoapHostnameVerifier());
    }
  }
 catch (  GeneralSecurityException e) {
    throw new SoapClientException(""String_Node_Str"",e);
  }
}","private void configureTls(){
  if (tlsEnabled == false) {
    return;
  }
  try {
    TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
    trustManagerFactory.init(keyStore);
    X509TrustManager defaultTrustManager=(X509TrustManager)trustManagerFactory.getTrustManagers()[0];
    context=SSLContext.getInstance(sslContext);
    context.init(null,new TrustManager[]{defaultTrustManager},null);
    sslSocketFactory=context.getSocketFactory();
    ((HttpsURLConnection)connection).setSSLSocketFactory(sslSocketFactory);
    if (strictHostVerification == false) {
      ((HttpsURLConnection)connection).setHostnameVerifier(new SoapHostnameVerifier());
    }
  }
 catch (  GeneralSecurityException e) {
    throw new SoapClientException(""String_Node_Str"",e);
  }
}"
85633,"private String encodeBasicCredentials(String user,String password){
  checkNotNull(user);
  checkNotNull(password);
  String basicAuthCredentials=user + ""String_Node_Str"" + password;
  return new BASE64Encoder().encode(basicAuthCredentials.getBytes());
}","private String encodeBasicCredentials(String user,String password){
  checkNotNull(user);
  checkNotNull(password);
  String basicAuthCredentials=user + ""String_Node_Str"" + password;
  return new BASE64Encoder().encode(basicAuthCredentials.getBytes(Charset.forName(""String_Node_Str"")));
}"
85634,"private String performTransmission(String data) throws IOException {
  Writer outputWriter=null;
  try {
    outputStream=connection.getOutputStream();
    outputWriter=new OutputStreamWriter(outputStream);
    outputWriter.write(data);
    outputWriter.flush();
    inputStream=connection.getInputStream();
    StringBuilder response=new StringBuilder();
    int inputChar;
    while ((inputChar=inputStream.read()) != -1) {
      response.append((char)inputChar);
    }
    return response.toString();
  }
  finally {
    if (outputWriter != null)     IOUtils.closeQuietly(outputWriter);
  }
}","private String performTransmission(String data) throws IOException {
  Writer outputWriter=null;
  try {
    outputStream=connection.getOutputStream();
    outputWriter=new OutputStreamWriter(outputStream,Charset.forName(""String_Node_Str""));
    outputWriter.write(data);
    outputWriter.flush();
    inputStream=connection.getInputStream();
    StringBuilder response=new StringBuilder();
    int inputChar;
    while ((inputChar=inputStream.read()) != -1) {
      response.append((char)inputChar);
    }
    return response.toString();
  }
  finally {
    if (outputWriter != null)     IOUtils.closeQuietly(outputWriter);
  }
}"
85635,"@Override public void writeTo(OutputStream outputStream) throws IOException {
  Writer writer=new OutputStreamWriter(outputStream);
  String message=XmlUtils.sourceToXmlString(source);
  writer.write(message);
  writer.flush();
  writer.close();
}","@Override public void writeTo(OutputStream outputStream) throws IOException {
  Writer writer=new OutputStreamWriter(outputStream,Charset.forName(""String_Node_Str""));
  String message=XmlUtils.sourceToXmlString(source);
  writer.write(message);
  writer.flush();
  writer.close();
}"
85636,"public SoapServerBuilder keyStoreUrl(URL value){
  server.keyStorePath=value.toString();
  return this;
}","@Deprecated public SoapServerBuilder keyStoreUrl(URL value){
  server.keyStorePath=value.toString();
  return this;
}"
85637,"@Deprecated public SoapServerBuilder keyStoreUrl(URL value){
  server.keyStorePath=value.toString();
  return this;
}","public SoapServerBuilder keyStoreUrl(URL value){
  try {
    server.keyStorePath=value.toURI().getPath();
    return this;
  }
 catch (  URISyntaxException e) {
    throw new SoapServerException(e);
  }
}"
85638,"private static String formatArgument(String argument){
  String argumentWithoutWhiteSpaces=argument.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return argumentWithoutWhiteSpaces;
}","private static String formatArgument(String argument){
  String argumentWithoutWhiteSpaces=argument.trim();
  return argumentWithoutWhiteSpaces;
}"
85639,"private void validateAndInitKeystore(){
  if (keyStorePath != null) {
    try {
      InputStream in=new FileInputStream(keyStorePath);
      KeyStore ks=KeyStore.getInstance(keyStoreType);
      ks.load(in,keyStorePassword);
      in.close();
      client.keyStore=ks;
    }
 catch (    FileNotFoundException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
catch (    CertificateException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
catch (    NoSuchAlgorithmException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
catch (    KeyStoreException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
catch (    IOException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
  }
}","private void validateAndInitKeystore(){
  if (keyStoreUrl != null) {
    try {
      InputStream in=keyStoreUrl.openStream();
      KeyStore ks=KeyStore.getInstance(keyStoreType);
      ks.load(in,keyStorePassword);
      in.close();
      client.keyStore=ks;
    }
 catch (    FileNotFoundException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
catch (    CertificateException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
catch (    NoSuchAlgorithmException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
catch (    KeyStoreException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
catch (    IOException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
  }
}"
85640,"public Builder keyStoreUrl(URL value){
  checkNotNull(value);
  keyStorePath=value.getPath();
  return this;
}","public Builder keyStoreUrl(URL value){
  checkNotNull(value);
  keyStoreUrl=value;
  return this;
}"
85641,"public SoapServerBuilder keyStoreUrl(URL value){
  server.keyStorePath=value.getPath();
  return this;
}","public SoapServerBuilder keyStoreUrl(URL value){
  server.keyStorePath=value.toString();
  return this;
}"
85642,"private void validateAndInitKeystore(){
  if (keyStorePath != null) {
    checkNotNull(keyStorePassword);
    try {
      InputStream in=new FileInputStream(keyStorePath);
      KeyStore ks=KeyStore.getInstance(keyStoreType);
      ks.load(in,keyStorePassword.toCharArray());
      in.close();
      client.keyStore=ks;
    }
 catch (    FileNotFoundException e) {
      throw new SoapBuilderException(e);
    }
catch (    CertificateException e) {
      throw new SoapBuilderException(e);
    }
catch (    NoSuchAlgorithmException e) {
      throw new SoapBuilderException(e);
    }
catch (    KeyStoreException e) {
      throw new SoapBuilderException(e);
    }
catch (    IOException e) {
      throw new SoapBuilderException(e);
    }
  }
}","private void validateAndInitKeystore(){
  if (keyStorePath != null) {
    checkNotNull(keyStorePassword);
    try {
      InputStream in=new FileInputStream(keyStorePath);
      KeyStore ks=KeyStore.getInstance(keyStoreType);
      ks.load(in,keyStorePassword.toCharArray());
      in.close();
      client.keyStore=ks;
    }
 catch (    FileNotFoundException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
catch (    CertificateException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
catch (    NoSuchAlgorithmException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
catch (    KeyStoreException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
catch (    IOException e) {
      throw new SoapClientException(""String_Node_Str"",e);
    }
  }
}"
85643,"public String post(String soapAction,String requestEnvelope){
  log.debug(String.format(""String_Node_Str"",serverUrl.toString(),soapAction,requestEnvelope));
  try {
    openConnection();
    configureTls();
    configureConnection();
    decorateConnectionWithSoap(soapAction,requestEnvelope);
    String response=transmit(requestEnvelope);
    log.debug(""String_Node_Str"" + requestEnvelope);
    return response;
  }
 catch (  IOException ex) {
    throw new SoapTransmissionException(ex);
  }
}","public String post(String soapAction,String requestEnvelope){
  log.debug(String.format(""String_Node_Str"",serverUrl.toString(),soapAction,requestEnvelope));
  openConnection();
  configureTls();
  configureConnection();
  decorateConnectionWithSoap(soapAction,requestEnvelope);
  String response=transmit(requestEnvelope);
  log.debug(""String_Node_Str"" + requestEnvelope);
  return response;
}"
85644,"private void openConnection() throws IOException {
  if (proxy != null) {
    connection=(HttpURLConnection)serverUrl.openConnection(proxy);
  }
 else {
    connection=(HttpURLConnection)serverUrl.openConnection();
  }
}","private void openConnection(){
  try {
    if (proxy != null) {
      connection=(HttpURLConnection)serverUrl.openConnection(proxy);
    }
 else {
      connection=(HttpURLConnection)serverUrl.openConnection();
    }
  }
 catch (  IOException e) {
    throw new SoapClientException(""String_Node_Str"",e);
  }
}"
85645,"private void configureConnection() throws ProtocolException {
  connection.setDoOutput(true);
  connection.setDoInput(true);
  connection.setRequestMethod(POST);
  connection.setConnectTimeout(connectTimeoutInMillis);
  connection.setReadTimeout(readTimeoutInMillis);
  if (basicAuthEncoded != null) {
    connection.setRequestProperty(PROP_AUTH,PROP_BASIC_AUTH + ""String_Node_Str"" + basicAuthEncoded);
  }
  if (proxyAuthEncoded != null) {
    connection.setRequestProperty(PROP_PROXY_AUTH,PROP_BASIC_AUTH + ""String_Node_Str"" + basicAuthEncoded);
  }
}","private void configureConnection(){
  try {
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.setRequestMethod(POST);
    connection.setConnectTimeout(connectTimeoutInMillis);
    connection.setReadTimeout(readTimeoutInMillis);
    if (basicAuthEncoded != null) {
      connection.setRequestProperty(PROP_AUTH,PROP_BASIC_AUTH + ""String_Node_Str"" + basicAuthEncoded);
    }
    if (proxyAuthEncoded != null) {
      connection.setRequestProperty(PROP_PROXY_AUTH,PROP_BASIC_AUTH + ""String_Node_Str"" + basicAuthEncoded);
    }
  }
 catch (  ProtocolException e) {
    throw new SoapClientException(""String_Node_Str"",e);
  }
}"
85646,"public Builder url(String url){
  checkNotNull(url);
  try {
    client.serverUrl=new URL(url);
    client.tlsEnabled=client.serverUrl.getProtocol().equalsIgnoreCase(""String_Node_Str"");
    return this;
  }
 catch (  MalformedURLException ex) {
    throw new SoapBuilderException(ex);
  }
}","public Builder url(String url){
  checkNotNull(url);
  try {
    client.serverUrl=new URL(url);
    client.tlsEnabled=client.serverUrl.getProtocol().equalsIgnoreCase(""String_Node_Str"");
    return this;
  }
 catch (  MalformedURLException ex) {
    throw new SoapClientException(String.format(""String_Node_Str"",url),ex);
  }
}"
85647,"private void decorateConnectionWithSoap(String soapAction,String requestEnvelope) throws ProtocolException {
  if (requestEnvelope.contains(SOAP_1_1_NAMESPACE)) {
    if (soapAction != null) {
      connection.setRequestProperty(PROP_SOAP_ACTION_11,soapAction);
    }
    connection.setRequestProperty(PROP_CONTENT_TYPE,MIMETYPE_TEXT_XML);
  }
 else   if (requestEnvelope.contains(SOAP_1_2_NAMESPACE)) {
    connection.setRequestProperty(PROP_CONTENT_TYPE,MIMETYPE_APPLICATION_XML);
    if (soapAction != null) {
      String prop=connection.getRequestProperty(PROP_CONTENT_TYPE);
      connection.setRequestProperty(PROP_CONTENT_TYPE,prop + PROP_DELIMITER + PROP_SOAP_ACTION_12+ ""String_Node_Str""+ soapAction+ ""String_Node_Str"");
    }
  }
  connection.setRequestProperty(PROP_CONTENT_LENGTH,Integer.toString(requestEnvelope.length()));
}","private void decorateConnectionWithSoap(String soapAction,String requestEnvelope){
  if (requestEnvelope.contains(SOAP_1_1_NAMESPACE)) {
    if (soapAction != null) {
      connection.setRequestProperty(PROP_SOAP_ACTION_11,soapAction);
    }
    connection.setRequestProperty(PROP_CONTENT_TYPE,MIMETYPE_TEXT_XML);
  }
 else   if (requestEnvelope.contains(SOAP_1_2_NAMESPACE)) {
    connection.setRequestProperty(PROP_CONTENT_TYPE,MIMETYPE_APPLICATION_XML);
    if (soapAction != null) {
      String prop=connection.getRequestProperty(PROP_CONTENT_TYPE);
      connection.setRequestProperty(PROP_CONTENT_TYPE,prop + PROP_DELIMITER + PROP_SOAP_ACTION_12+ ""String_Node_Str""+ soapAction+ ""String_Node_Str"");
    }
  }
  connection.setRequestProperty(PROP_CONTENT_LENGTH,Integer.toString(requestEnvelope.length()));
}"
85648,"private void configureTls(){
  if (tlsEnabled == false)   return;
  try {
    TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
    trustManagerFactory.init(keyStore);
    X509TrustManager defaultTrustManager=(X509TrustManager)trustManagerFactory.getTrustManagers()[0];
    context=SSLContext.getInstance(sslContext);
    context.init(null,new TrustManager[]{defaultTrustManager},null);
    sslSocketFactory=context.getSocketFactory();
    ((HttpsURLConnection)connection).setSSLSocketFactory(sslSocketFactory);
    if (strictHostVerification == false) {
      ((HttpsURLConnection)connection).setHostnameVerifier(new SoapHostnameVerifier());
    }
  }
 catch (  NoSuchAlgorithmException e) {
    throw new SoapBuilderException(e);
  }
catch (  KeyManagementException e) {
    throw new SoapBuilderException(e);
  }
catch (  KeyStoreException e) {
    throw new SoapBuilderException(e);
  }
}","private void configureTls(){
  if (tlsEnabled == false)   return;
  try {
    TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
    trustManagerFactory.init(keyStore);
    X509TrustManager defaultTrustManager=(X509TrustManager)trustManagerFactory.getTrustManagers()[0];
    context=SSLContext.getInstance(sslContext);
    context.init(null,new TrustManager[]{defaultTrustManager},null);
    sslSocketFactory=context.getSocketFactory();
    ((HttpsURLConnection)connection).setSSLSocketFactory(sslSocketFactory);
    if (strictHostVerification == false) {
      ((HttpsURLConnection)connection).setHostnameVerifier(new SoapHostnameVerifier());
    }
  }
 catch (  NoSuchAlgorithmException e) {
    throw new SoapClientException(""String_Node_Str"",e);
  }
catch (  KeyManagementException e) {
    throw new SoapClientException(""String_Node_Str"",e);
  }
catch (  KeyStoreException e) {
    throw new SoapClientException(""String_Node_Str"",e);
  }
}"
85649,"public SoapTransmissionException(String response,int errorCode,Throwable cause){
  super(response + ""String_Node_Str"" + cause.getMessage(),cause);
  this.errorResponse=response;
  this.errorCode=errorCode;
}","public SoapTransmissionException(String response,int errorCode,Throwable cause){
  super(response + ""String_Node_Str"" + errorCode+ ""String_Node_Str""+ cause.getMessage(),cause);
  this.errorResponse=response;
  this.errorCode=errorCode;
}"
85650,"@Override public void onAnimationEnd(Animation animation){
  removeAllViews();
  PopoverView.this.superview.removeView(PopoverView.this);
  isAnimating=false;
  if (delegate != null)   delegate.popoverViewDidDismiss(PopoverView.this);
}","@Override public void onAnimationEnd(Animation animation){
  popoverView.removeAllViews();
  removeAllViews();
  PopoverView.this.superview.removeView(PopoverView.this);
  isAnimating=false;
  if (delegate != null)   delegate.popoverViewDidDismiss(PopoverView.this);
}"
85651,"/** 
 * Dismiss the current shown popover
 * @param animated Whether it should be dismissed animated or not
 */
public void dissmissPopover(boolean animated){
  if (delegate != null)   delegate.popoverViewWillDismiss(PopoverView.this);
  if (!animated) {
    removeAllViews();
    superview.removeView(this);
    if (delegate != null)     delegate.popoverViewDidDismiss(PopoverView.this);
  }
 else {
    if (!isAnimating) {
      AlphaAnimation animation=new AlphaAnimation(1.0f,0.0f);
      animation.setDuration(fadeAnimationTime);
      animation.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationStart(        Animation animation){
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationEnd(        Animation animation){
          removeAllViews();
          PopoverView.this.superview.removeView(PopoverView.this);
          isAnimating=false;
          if (delegate != null)           delegate.popoverViewDidDismiss(PopoverView.this);
        }
      }
);
      isAnimating=true;
      startAnimation(animation);
    }
  }
}","/** 
 * Dismiss the current shown popover
 * @param animated Whether it should be dismissed animated or not
 */
public void dissmissPopover(boolean animated){
  if (delegate != null)   delegate.popoverViewWillDismiss(PopoverView.this);
  if (!animated) {
    popoverView.removeAllViews();
    removeAllViews();
    superview.removeView(this);
    if (delegate != null)     delegate.popoverViewDidDismiss(PopoverView.this);
  }
 else {
    if (!isAnimating) {
      AlphaAnimation animation=new AlphaAnimation(1.0f,0.0f);
      animation.setDuration(fadeAnimationTime);
      animation.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationStart(        Animation animation){
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationEnd(        Animation animation){
          popoverView.removeAllViews();
          removeAllViews();
          PopoverView.this.superview.removeView(PopoverView.this);
          isAnimating=false;
          if (delegate != null)           delegate.popoverViewDidDismiss(PopoverView.this);
        }
      }
);
      isAnimating=true;
      startAnimation(animation);
    }
  }
}"
85652,"private B registerOutputChannelIfCan(MessageChannel outputChannel){
  if (!(outputChannel instanceof FixedSubscriberChannelPrototype)) {
    this.integrationComponents.add(outputChannel);
    if (this.currentComponent != null) {
      String channelName=null;
      if (outputChannel instanceof MessageChannelReference) {
        channelName=((MessageChannelReference)outputChannel).getName();
      }
      if (this.currentComponent instanceof AbstractReplyProducingMessageHandler) {
        AbstractReplyProducingMessageHandler messageProducer=(AbstractReplyProducingMessageHandler)this.currentComponent;
        if (channelName != null) {
          messageProducer.setOutputChannelName(channelName);
        }
 else {
          messageProducer.setOutputChannel(outputChannel);
        }
      }
 else       if (this.currentComponent instanceof SourcePollingChannelAdapterSpec) {
        SourcePollingChannelAdapterFactoryBean pollingChannelAdapterFactoryBean=((SourcePollingChannelAdapterSpec)this.currentComponent).get().getT1();
        if (channelName != null) {
          pollingChannelAdapterFactoryBean.setOutputChannelName(channelName);
        }
 else {
          pollingChannelAdapterFactoryBean.setOutputChannel(outputChannel);
        }
      }
 else       if (this.currentComponent instanceof AbstractCorrelatingMessageHandler) {
        AbstractCorrelatingMessageHandler messageProducer=(AbstractCorrelatingMessageHandler)this.currentComponent;
        if (channelName != null) {
          messageProducer.setOutputChannelName(channelName);
        }
 else {
          messageProducer.setOutputChannel(outputChannel);
        }
      }
 else       if (this.currentComponent instanceof AbstractMessageRouter) {
        AbstractMessageRouter router=(AbstractMessageRouter)this.currentComponent;
        if (channelName != null) {
          router.setDefaultOutputChannelName(channelName);
        }
 else {
          router.setDefaultOutputChannel(outputChannel);
        }
      }
 else {
        throw new BeanCreationException(""String_Node_Str"" + this.currentComponent + ""String_Node_Str""+ ""String_Node_Str"");
      }
      this.currentComponent=null;
    }
  }
  return _this();
}","private B registerOutputChannelIfCan(MessageChannel outputChannel){
  if (!(outputChannel instanceof FixedSubscriberChannelPrototype)) {
    this.integrationComponents.add(outputChannel);
    if (this.currentComponent != null) {
      String channelName=null;
      if (outputChannel instanceof MessageChannelReference) {
        channelName=((MessageChannelReference)outputChannel).getName();
      }
      Object currentComponent=this.currentComponent;
      if (AopUtils.isAopProxy(currentComponent)) {
        currentComponent=extractProxyTarget(currentComponent);
      }
      if (currentComponent instanceof AbstractReplyProducingMessageHandler) {
        AbstractReplyProducingMessageHandler messageProducer=(AbstractReplyProducingMessageHandler)currentComponent;
        if (channelName != null) {
          messageProducer.setOutputChannelName(channelName);
        }
 else {
          messageProducer.setOutputChannel(outputChannel);
        }
      }
 else       if (currentComponent instanceof SourcePollingChannelAdapterSpec) {
        SourcePollingChannelAdapterFactoryBean pollingChannelAdapterFactoryBean=((SourcePollingChannelAdapterSpec)currentComponent).get().getT1();
        if (channelName != null) {
          pollingChannelAdapterFactoryBean.setOutputChannelName(channelName);
        }
 else {
          pollingChannelAdapterFactoryBean.setOutputChannel(outputChannel);
        }
      }
 else       if (currentComponent instanceof AbstractCorrelatingMessageHandler) {
        AbstractCorrelatingMessageHandler messageProducer=(AbstractCorrelatingMessageHandler)currentComponent;
        if (channelName != null) {
          messageProducer.setOutputChannelName(channelName);
        }
 else {
          messageProducer.setOutputChannel(outputChannel);
        }
      }
 else       if (this.currentComponent instanceof AbstractMessageRouter) {
        AbstractMessageRouter router=(AbstractMessageRouter)this.currentComponent;
        if (channelName != null) {
          router.setDefaultOutputChannelName(channelName);
        }
 else {
          router.setDefaultOutputChannel(outputChannel);
        }
      }
 else {
        throw new BeanCreationException(""String_Node_Str"" + currentComponent + ""String_Node_Str""+ ""String_Node_Str"");
      }
      this.currentComponent=null;
    }
  }
  return _this();
}"
85653,"@Bean public IntegrationFlow ftpMGetFlow(){
  return IntegrationFlows.from(""String_Node_Str"").handle(Ftp.outboundGateway(this.ftpSessionFactory,AbstractRemoteFileOutboundGateway.Command.MGET,""String_Node_Str"").options(AbstractRemoteFileOutboundGateway.Option.RECURSIVE).regexFileNameFilter(""String_Node_Str"").localDirectoryExpression(""String_Node_Str"").localFilenameGeneratorExpression(""String_Node_Str"")).channel(remoteFileOutputChannel()).get();
}","@Bean public IntegrationFlow ftpMGetFlow(){
  return IntegrationFlows.from(""String_Node_Str"").handle(ftpOutboundGateway()).channel(remoteFileOutputChannel()).get();
}"
85654,"@SuppressWarnings(""String_Node_Str"") public Map<String,List<KafkaStream<byte[],byte[]>>> getConsumerMapWithMessageStreams(){
  if (consumerMetadata.getValueDecoder() != null) {
    return getConsumerConnector().createMessageStreams(consumerMetadata.getTopicStreamMap(),consumerMetadata.getValueDecoder(),consumerMetadata.getValueDecoder());
  }
  return getConsumerConnector().createMessageStreams(consumerMetadata.getTopicStreamMap());
}","@SuppressWarnings(""String_Node_Str"") public Map<String,List<KafkaStream<byte[],byte[]>>> getConsumerMapWithMessageStreams(){
  if (consumerMetadata.getValueDecoder() != null && consumerMetadata.getKeyDecoder() != null) {
    return getConsumerConnector().createMessageStreams(consumerMetadata.getTopicStreamMap(),consumerMetadata.getKeyDecoder(),consumerMetadata.getValueDecoder());
  }
  return getConsumerConnector().createMessageStreams(consumerMetadata.getTopicStreamMap());
}"
85655,"/** 
 * Create the instance of the   {@link XQueryExecutor}
 * @param element
 * @return
 */
public static final AbstractBeanDefinition getXQueryExecutor(Element element){
  BeanDefinitionBuilder builder=BeanDefinitionBuilder.genericBeanDefinition(XQueryExecutor.class);
  IntegrationNamespaceUtils.setReferenceIfAttributeDefined(builder,element,""String_Node_Str"");
  IntegrationNamespaceUtils.setReferenceIfAttributeDefined(builder,element,""String_Node_Str"",""String_Node_Str"");
  IntegrationNamespaceUtils.setValueIfAttributeDefined(builder,element,""String_Node_Str"");
  NodeList list=element.getElementsByTagNameNS(element.getNamespaceURI(),""String_Node_Str"");
  Attr xQueryAttribute=element.getAttributeNode(""String_Node_Str"");
  Attr xQueryResource=element.getAttributeNode(""String_Node_Str"");
  Assert.isTrue(!(xQueryAttribute != null && xQueryResource != null),""String_Node_Str"");
  Assert.isTrue(!(xQueryAttribute != null && list != null && list.getLength() > 0),""String_Node_Str"" + ""String_Node_Str"");
  Assert.isTrue(!(xQueryResource != null && list != null && list.getLength() > 0),""String_Node_Str"" + ""String_Node_Str"");
  Assert.isTrue(xQueryResource != null || xQueryAttribute != null || (list != null && list.getLength() > 0),""String_Node_Str"");
  if (xQueryResource != null) {
    String textContent=xQueryResource.getTextContent();
    Assert.isTrue(StringUtils.hasText(textContent),""String_Node_Str"");
    Resource resource;
    if (textContent.startsWith(ResourceUtils.CLASSPATH_URL_PREFIX)) {
      resource=new ClassPathResource(textContent.substring(ResourceUtils.CLASSPATH_URL_PREFIX.length()));
    }
 else     if (textContent.startsWith(ResourceUtils.FILE_URL_PREFIX)) {
      resource=new FileSystemResource(textContent.substring(ResourceUtils.FILE_URL_PREFIX.length()));
    }
 else {
      resource=new ClassPathResource(textContent);
    }
    builder.addPropertyValue(""String_Node_Str"",resource);
  }
 else {
    String textContent;
    if (xQueryAttribute == null) {
      Assert.isTrue(list != null && list.getLength() == 1,""String_Node_Str"");
      textContent=list.item(0).getTextContent();
    }
 else {
      textContent=xQueryAttribute.getTextContent();
    }
    if (StringUtils.hasText(textContent)) {
      builder.addPropertyValue(""String_Node_Str"",textContent.trim());
    }
  }
  NodeList parameters=element.getElementsByTagNameNS(element.getNamespaceURI(),""String_Node_Str"");
  if (parameters != null && parameters.getLength() > 0) {
    ManagedList<AbstractBeanDefinition> params=new ManagedList<AbstractBeanDefinition>();
    for (int i=0; i < parameters.getLength(); i++) {
      Node node=parameters.item(i);
      NamedNodeMap attrs=node.getAttributes();
      Assert.isTrue(attrs.getLength() > 1,""String_Node_Str"");
      Attr nameAttr=(Attr)attrs.getNamedItem(""String_Node_Str"");
      BeanDefinitionBuilder paramBuilder=BeanDefinitionBuilder.genericBeanDefinition(XQueryParameter.class);
      paramBuilder.addConstructorArgValue(nameAttr.getTextContent());
      Attr attr;
      if (attrs.getNamedItem(""String_Node_Str"") != null) {
        attr=(Attr)attrs.getNamedItem(""String_Node_Str"");
        paramBuilder.addPropertyValue(""String_Node_Str"",attr.getTextContent());
      }
 else       if (attrs.getNamedItem(""String_Node_Str"") != null) {
        attr=(Attr)attrs.getNamedItem(""String_Node_Str"");
        paramBuilder.addPropertyReference(""String_Node_Str"",attr.getTextContent());
      }
 else       if (attrs.getNamedItem(""String_Node_Str"") != null) {
        attr=(Attr)attrs.getNamedItem(""String_Node_Str"");
        paramBuilder.addPropertyValue(""String_Node_Str"",attr.getTextContent());
      }
      params.add(paramBuilder.getBeanDefinition());
    }
    builder.addPropertyValue(""String_Node_Str"",params);
  }
  return builder.getBeanDefinition();
}","/** 
 * Create the instance of the   {@link XQueryExecutor}
 * @param element
 * @return
 */
public static final AbstractBeanDefinition getXQueryExecutor(Element element){
  BeanDefinitionBuilder builder=BeanDefinitionBuilder.genericBeanDefinition(XQueryExecutor.class);
  IntegrationNamespaceUtils.setReferenceIfAttributeDefined(builder,element,""String_Node_Str"");
  IntegrationNamespaceUtils.setReferenceIfAttributeDefined(builder,element,""String_Node_Str"",""String_Node_Str"");
  IntegrationNamespaceUtils.setValueIfAttributeDefined(builder,element,""String_Node_Str"");
  setXQueryInBuilder(element,builder);
  setXQueryParameters(element,builder);
  return builder.getBeanDefinition();
}"
85656,"@Override protected void parseTransformer(Element element,ParserContext parserContext,BeanDefinitionBuilder builder){
  AbstractBeanDefinition executor=XQueryParserUtils.getXQueryExecutor(element);
  builder.addPropertyValue(""String_Node_Str"",executor);
  String resultType=element.getAttribute(""String_Node_Str"");
  boolean hasResultType=StringUtils.hasText(resultType);
  String xqueryResultMapper=element.getAttribute(""String_Node_Str"");
  boolean hasResultMapper=StringUtils.hasText(xqueryResultMapper);
  Assert.isTrue(!(hasResultType && hasResultMapper),""String_Node_Str"");
  if (hasResultType) {
    Class<?> type=null;
    if (""String_Node_Str"".equalsIgnoreCase(resultType)) {
      type=String.class;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(resultType)) {
      type=Boolean.class;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(resultType)) {
      type=Number.class;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(resultType)) {
      type=Node.class;
    }
 else {
      try {
        type=Class.forName(resultType);
      }
 catch (      ClassNotFoundException e) {
        new IllegalArgumentException(""String_Node_Str"" + resultType + ""String_Node_Str""+ ""String_Node_Str"",e);
      }
    }
    builder.addPropertyValue(""String_Node_Str"",type);
  }
 else   if (hasResultMapper) {
    builder.addPropertyReference(""String_Node_Str"",xqueryResultMapper);
  }
}","@Override protected void parseTransformer(Element element,ParserContext parserContext,BeanDefinitionBuilder builder){
  AbstractBeanDefinition executor=XQueryParserUtils.getXQueryExecutor(element);
  builder.addPropertyValue(""String_Node_Str"",executor);
  String resultType=element.getAttribute(""String_Node_Str"");
  boolean hasResultType=StringUtils.hasText(resultType);
  String xqueryResultMapper=element.getAttribute(""String_Node_Str"");
  boolean hasResultMapper=StringUtils.hasText(xqueryResultMapper);
  Assert.isTrue(!(hasResultType && hasResultMapper),""String_Node_Str"");
  if (hasResultType) {
    Class<?> type=null;
    if (""String_Node_Str"".equalsIgnoreCase(resultType)) {
      type=String.class;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(resultType)) {
      type=Boolean.class;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(resultType)) {
      type=Number.class;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(resultType)) {
      type=Node.class;
    }
 else {
      try {
        type=Class.forName(resultType);
      }
 catch (      ClassNotFoundException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + resultType + ""String_Node_Str""+ ""String_Node_Str"",e);
      }
    }
    builder.addPropertyValue(""String_Node_Str"",type);
  }
 else   if (hasResultMapper) {
    builder.addPropertyReference(""String_Node_Str"",xqueryResultMapper);
  }
}"
85657,"/** 
 * The method that finds an implementation in the classpath for some well known providers. This will kick into action only if an   {@link XQDataSource} is notexplicitly provided by the user by invoking  {@link XQueryExecutor#setXQDataSource(XQDataSource)}The method currently looks for Saxon's implementation only
 * @return the instantiated {@link XQDataSource}
 */
private XQDataSource discoverXQDataSource(){
  Object xqDataSource=null;
  try {
    if (ClassUtils.isPresent(SAXON_XQ_DATASOURCE_CLASS,classLoader)) {
      xqDataSource=Class.forName(SAXON_XQ_DATASOURCE_CLASS).newInstance();
    }
  }
 catch (  Exception e) {
    throw new MessagingException(""String_Node_Str"" + ""String_Node_Str"",e);
  }
  Assert.notNull(xqDataSource,""String_Node_Str"");
  logger.info(""String_Node_Str"" + xqDataSource.getClass() + ""String_Node_Str"");
  return (XQDataSource)xqDataSource;
}","/** 
 * The method that finds an implementation in the classpath for some well known providers. This will kick into action only if an   {@link XQDataSource} is notexplicitly provided by the user by invoking  {@link XQueryExecutor#setXQDataSource(XQDataSource)}The method currently looks for Saxon's implementation only
 * @return the instantiated {@link XQDataSource}
 */
private XQDataSource discoverXQDataSource(){
  Object dataSource=null;
  try {
    if (ClassUtils.isPresent(SAXON_XQ_DATASOURCE_CLASS,classLoader)) {
      dataSource=Class.forName(SAXON_XQ_DATASOURCE_CLASS).newInstance();
    }
  }
 catch (  Exception e) {
    throw new MessagingException(""String_Node_Str"" + ""String_Node_Str"",e);
  }
  Assert.notNull(dataSource,""String_Node_Str"");
  logger.info(""String_Node_Str"" + dataSource.getClass() + ""String_Node_Str"");
  return (XQDataSource)dataSource;
}"
85658,"/** 
 * Convenience method that would be used to set the parameters in the parameter map. Any non conflicting parameters would be retained
 * @param params
 */
public void setXQueryParameters(List<XQueryParameter> params){
  if (params != null && params.size() > 0) {
    if (xQueryParameterMap == null)     xQueryParameterMap=new HashMap<String,XQueryParameter>();
    for (    XQueryParameter param : params) {
      xQueryParameterMap.put(param.getParameterName(),param);
    }
  }
}","/** 
 * Convenience method that would be used to set the parameters in the parameter map. Any non conflicting parameters would be retained
 * @param params
 */
public void setXQueryParameters(List<XQueryParameter> params){
  if (params != null && params.size() > 0) {
    if (xQueryParameterMap == null) {
      xQueryParameterMap=new HashMap<String,XQueryParameter>();
    }
    for (    XQueryParameter param : params) {
      xQueryParameterMap.put(param.getParameterName(),param);
    }
  }
}"
85659,"/** 
 * Helper method that will be used to convert a String value to Number
 * @param value
 * @param strValue
 * @return
 */
private Number convertStringToNumber(String strValue){
  Number value=null;
  try {
    if (StringUtils.hasText(strValue)) {
      if (strValue.indexOf(""String_Node_Str"") > 0) {
        value=Double.valueOf(strValue);
      }
 else {
        value=Long.valueOf(strValue);
      }
    }
  }
 catch (  NumberFormatException ne) {
    value=null;
  }
  return value;
}","/** 
 * Helper method that will be used to convert a String value to Number
 * @param value
 * @param strValue
 * @return
 */
private Number convertStringToNumber(String strValue){
  Number value=null;
  try {
    if (StringUtils.hasText(strValue)) {
      if (strValue.indexOf('.') > 0) {
        value=Double.valueOf(strValue);
      }
 else {
        value=Long.valueOf(strValue);
      }
    }
  }
 catch (  NumberFormatException ne) {
    value=null;
  }
  return value;
}"
85660,"/** 
 * Transforms the given   {@link Node} to a String
 * @param n
 * @return
 * @throws TransformerConfigurationException
 * @throws TransformerFactoryConfigurationError
 * @throws TransformerException
 */
protected String transformNodeToString(Node n) throws TransformerConfigurationException, TransformerFactoryConfigurationError, TransformerException {
  String value;
  StringWriter writer=new StringWriter();
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  if (formatOutput)   transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
  transformer.transform(new DOMSource(n),new StreamResult(writer));
  value=writer.toString();
  return value;
}","/** 
 * Transforms the given   {@link Node} to a String
 * @param n
 * @return
 * @throws TransformerConfigurationException
 * @throws TransformerFactoryConfigurationError
 * @throws TransformerException
 */
protected String transformNodeToString(Node n) throws TransformerException {
  String value;
  StringWriter writer=new StringWriter();
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  if (formatOutput) {
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
  }
  transformer.transform(new DOMSource(n),new StreamResult(writer));
  value=writer.toString();
  return value;
}"
85661,"public List<Boolean> mapResults(XQResultSequence result){
  List<Boolean> results=new ArrayList<Boolean>();
  try {
    while (result.next()) {
      XQItemType type=result.getItemType();
      Boolean value=convertToBoolean(type,result);
      if (value == null) {
        if (isNodeType(type)) {
          Node n=result.getNode();
          value=Boolean.valueOf(transformNodeToString(n));
        }
      }
      results.add(value);
    }
  }
 catch (  Exception e) {
    throw new MessagingException(""String_Node_Str"",e);
  }
  return results;
}","public List<Boolean> mapResults(XQResultSequence result){
  List<Boolean> results=new ArrayList<Boolean>();
  try {
    while (result.next()) {
      XQItemType type=result.getItemType();
      Boolean value=convertToBoolean(type,result);
      if (value == null && isNodeType(type)) {
        Node n=result.getNode();
        value=Boolean.valueOf(transformNodeToString(n));
      }
      results.add(value);
    }
  }
 catch (  Exception e) {
    throw new MessagingException(""String_Node_Str"",e);
  }
  return results;
}"
85662,"public List<Number> mapResults(XQResultSequence result){
  List<Number> results=new ArrayList<Number>();
  try {
    while (result.next()) {
      XQItemType type=result.getItemType();
      Number value=convertToNumber(type,result);
      if (value == null) {
        if (isNodeType(type)) {
          Node n=result.getNode();
          String strValue=transformNodeToString(n);
          if (StringUtils.hasText(strValue)) {
            if (strValue.indexOf(""String_Node_Str"") > 0) {
              value=Double.valueOf(strValue);
            }
 else {
              value=Long.valueOf(strValue);
            }
          }
        }
      }
      results.add(value);
    }
  }
 catch (  Exception e) {
    throw new MessagingException(""String_Node_Str"",e);
  }
  return results;
}","public List<Number> mapResults(XQResultSequence result){
  List<Number> results=new ArrayList<Number>();
  try {
    while (result.next()) {
      XQItemType type=result.getItemType();
      Number value=convertToNumber(type,result);
      if (value == null && isNodeType(type)) {
        Node n=result.getNode();
        String strValue=transformNodeToString(n);
        if (StringUtils.hasText(strValue)) {
          if (strValue.indexOf('.') > 0) {
            value=Double.valueOf(strValue);
          }
 else {
            value=Long.valueOf(strValue);
          }
        }
      }
      results.add(value);
    }
  }
 catch (  Exception e) {
    throw new MessagingException(""String_Node_Str"",e);
  }
  return results;
}"
85663,"/** 
 * Sets the expression that would be evaluated to get the parameter value
 * @param expression
 */
public void setExpression(String expression){
  Assert.isTrue(parameterValue == null,""String_Node_Str"" + ""String_Node_Str"");
  Assert.isTrue(!StringUtils.hasText(this.expression),""String_Node_Str"");
  Assert.hasText(expression,""String_Node_Str"");
  this.expression=expression;
  isValueSet=false;
  SpelExpressionParser parser=new SpelExpressionParser();
  Expression expr=parser.parseExpression(expression);
  messageProcessor=new ExpressionEvaluatingMessageProcessor<Object>(expr);
}","/** 
 * Sets the expression that would be evaluated to get the parameter value
 * @param expression
 */
public final void setExpression(String expression){
  Assert.isTrue(parameterValue == null,""String_Node_Str"" + ""String_Node_Str"");
  Assert.isTrue(!StringUtils.hasText(this.expression),""String_Node_Str"");
  Assert.hasText(expression,""String_Node_Str"");
  this.expression=expression;
  isValueSet=false;
  SpelExpressionParser parser=new SpelExpressionParser();
  Expression expr=parser.parseExpression(expression);
  messageProcessor=new ExpressionEvaluatingMessageProcessor<Object>(expr);
}"
85664,"/** 
 * Reads the XQuery string from the resource file specified
 * @param resource the {@link Resource} instance of the file that contains the XQuerycurrently only classpath and file resources are supported
 * @return the XQuery string from the resource specified
 */
public static String readXQueryFromResource(Resource resource){
  Assert.notNull(resource,""String_Node_Str"");
  Assert.isTrue(resource.exists(),""String_Node_Str"");
  Assert.isTrue(resource.isReadable(),""String_Node_Str"");
  try {
    URL url=resource.getURL();
    InputStream inStream=url.openStream();
    BufferedReader reader=new BufferedReader(new InputStreamReader(inStream));
    String line=reader.readLine();
    StringBuilder builder=new StringBuilder();
    while (line != null) {
      builder.append(line).append(""String_Node_Str"");
      line=reader.readLine();
    }
    String xQuery=builder.toString();
    reader.close();
    return xQuery;
  }
 catch (  IOException e) {
    throw new MessagingException(""String_Node_Str"",e);
  }
}","/** 
 * Reads the XQuery string from the resource file specified
 * @param resource the {@link Resource} instance of the file that contains the XQuerycurrently only classpath and file resources are supported
 * @return the XQuery string from the resource specified
 */
public static String readXQueryFromResource(Resource resource){
  Assert.notNull(resource,""String_Node_Str"");
  Assert.isTrue(resource.exists(),""String_Node_Str"");
  Assert.isTrue(resource.isReadable(),""String_Node_Str"");
  BufferedReader reader=null;
  try {
    URL url=resource.getURL();
    InputStream inStream=url.openStream();
    reader=new BufferedReader(new InputStreamReader(inStream));
    String line=reader.readLine();
    StringBuilder builder=new StringBuilder();
    while (line != null) {
      builder.append(line).append(""String_Node_Str"");
      line=reader.readLine();
    }
    String xQuery=builder.toString();
    reader.close();
    return xQuery;
  }
 catch (  IOException e) {
    throw new MessagingException(""String_Node_Str"",e);
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
  }
}"
85665,"@SuppressWarnings(""String_Node_Str"") @Override protected Object doTransform(Message<?> message) throws Exception {
  Object transformed;
  List<Object> queryResult;
  if (resultType != null) {
    queryResult=(List<Object>)executor.execute(message,resultType);
  }
 else {
    queryResult=executor.execute(message,resultMapper);
  }
  if (queryResult != null && queryResult.size() == 1) {
    transformed=queryResult.get(0);
  }
 else {
    transformed=queryResult;
  }
  return transformed;
}","@SuppressWarnings(""String_Node_Str"") @Override protected Object doTransform(Message<?> message){
  Object transformed;
  List<Object> queryResult;
  if (resultType != null) {
    queryResult=(List<Object>)executor.execute(message,resultType);
  }
 else {
    queryResult=executor.execute(message,resultMapper);
  }
  if (queryResult != null && queryResult.size() == 1) {
    transformed=queryResult.get(0);
  }
 else {
    transformed=queryResult;
  }
  return transformed;
}"
85666,"private void notifyClose(){
  for (  FanViewListener l : observers) {
    l.onFanViewClose();
  }
}","private void notifyClose(){
  if (observers != null) {
    for (    FanViewListener l : observers) {
      l.onFanViewClose();
    }
  }
}"
85667,"private void notifyOpen(){
  for (  FanViewListener l : observers) {
    l.onFanViewOpen();
  }
}","private void notifyOpen(){
  if (observers != null) {
    for (    FanViewListener l : observers) {
      l.onFanViewOpen();
    }
  }
}"
85668,"public boolean isOpen(){
  return mFanView.getVisibility() == VISIBLE;
}","public boolean isOpen(){
  return mFanView.getVisibility() == VISIBLE && !isClosing;
}"
85669,"public void showMenu(){
  if (mFanView.getVisibility() == GONE) {
    mFanView.setVisibility(VISIBLE);
    mTintView.setVisibility(VISIBLE);
    openAnimation=new FanAnimation(0,px,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,-20,getResources().getDisplayMetrics()),0,animDur);
    openAnimation.setFillAfter(true);
    if (fade) {
      alphaAnimation=new AlphaAnimation(0.8f,0.0f);
      alphaAnimation.setDuration((int)0.75 * animDur);
      alphaAnimation.setFillAfter(true);
      mTintView.startAnimation(alphaAnimation);
    }
 else {
      mTintView.setVisibility(GONE);
    }
    mMainView.startAnimation(openAnimation);
  }
 else {
    closeAnimation=new FanAnimation(px,0,0,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,-20,getResources().getDisplayMetrics()),animDur);
    closeAnimation.setFillAfter(true);
    closeAnimation.setAnimationListener(new AnimationListener(){
      public void onAnimationStart(      Animation animation){
      }
      public void onAnimationRepeat(      Animation animation){
      }
      public void onAnimationEnd(      Animation animation){
        mFanView.setVisibility(GONE);
        mTintView.setVisibility(GONE);
      }
    }
);
    if (fade) {
      alphaAnimation=new AlphaAnimation(0.0f,0.8f);
      alphaAnimation.setDuration(750);
      alphaAnimation.setFillAfter(true);
      mTintView.startAnimation(alphaAnimation);
    }
 else {
      mTintView.setVisibility(GONE);
    }
    mMainView.startAnimation(closeAnimation);
  }
}","public void showMenu(){
  if (mFanView.getVisibility() == GONE || isClosing) {
    mFanView.setVisibility(VISIBLE);
    mTintView.setVisibility(VISIBLE);
    openAnimation=new FanAnimation(0,px,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,-20,getResources().getDisplayMetrics()),0,animDur);
    openAnimation.setFillAfter(true);
    if (fade) {
      alphaAnimation=new AlphaAnimation(0.8f,0.0f);
      alphaAnimation.setDuration((int)0.75 * animDur);
      alphaAnimation.setFillAfter(true);
      mTintView.startAnimation(alphaAnimation);
    }
 else {
      mTintView.setVisibility(GONE);
    }
    mMainView.startAnimation(openAnimation);
    isClosing=false;
  }
 else   if (!isClosing && isOpen()) {
    closeAnimation=new FanAnimation(px,0,0,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,-20,getResources().getDisplayMetrics()),animDur);
    closeAnimation.setFillAfter(true);
    closeAnimation.setAnimationListener(new AnimationListener(){
      public void onAnimationStart(      Animation animation){
      }
      public void onAnimationRepeat(      Animation animation){
      }
      public void onAnimationEnd(      Animation animation){
        mFanView.setVisibility(GONE);
        mTintView.setVisibility(GONE);
        isClosing=false;
      }
    }
);
    if (fade) {
      alphaAnimation=new AlphaAnimation(0.0f,0.8f);
      alphaAnimation.setDuration(750);
      alphaAnimation.setFillAfter(true);
      mTintView.startAnimation(alphaAnimation);
    }
 else {
      mTintView.setVisibility(GONE);
    }
    mMainView.startAnimation(closeAnimation);
    isClosing=true;
  }
}"
85670,"public void onAnimationEnd(Animation animation){
  mFanView.setVisibility(GONE);
  mTintView.setVisibility(GONE);
}","public void onAnimationEnd(Animation animation){
  mFanView.setVisibility(GONE);
  mTintView.setVisibility(GONE);
  isClosing=false;
}"
85671,public Field[] getFields();,public List<Field> getFields();
85672,"public Select get(){
  return new Select(view,Select.SelectMethod.DISTINCT,fields);
}","public Select get(){
  return new Select(view,Select.SelectMethod.DISTINCT,fields.toArray(new Field[fields.size()]));
}"
85673,"public Field[] getFields(){
  return new Field[]{PATH,ALBUM_ART_PATH};
}","public List<Field> getFields(){
  return Arrays.asList(new Field[]{PATH,ALBUM_ART_PATH});
}"
85674,"public Field[] getFields(){
  return new Field[]{TITLE};
}","public List<Field> getFields(){
  return Arrays.asList(new Field[]{TITLE});
}"
85675,"public static <T>T[] concatWith(T[] arrays,T... elements){
  return concat(arrays,elements);
}","public static <T>List<T> concatWith(List<T> arrays,T... elements){
  return concat(arrays,Arrays.asList(elements));
}"
85676,"@SuppressWarnings({""String_Node_Str""}) public static <T>T[] concat(T[]... arrays){
  int resultLength=0;
  for (  T[] array : arrays) {
    resultLength+=array.length;
  }
  T[] result=(T[])new Object[resultLength];
  int pos=0;
  for (  T[] array : arrays) {
    System.arraycopy(array,0,result,pos,array.length);
    pos+=array.length;
  }
  return result;
}","@SuppressWarnings({""String_Node_Str""}) public static <T>List<T> concat(List<T>... lists){
  List<T> result=new ArrayList<T>();
  for (  List<T> list : lists) {
    result.addAll(list);
  }
  return result;
}"
85677,"public void add(final T object){
  if (allowsDuplicates || !objects.contains(object)) {
    activity.runOnUiThread(new Runnable(){
      public void run(){
        objects.add(object);
        Collections.sort(objects,new FormattedInstanceComparator(formatter));
        notifyDataSetChanged();
      }
    }
);
  }
}","public void add(final T object){
  if (allowsDuplicates || !objects.contains(object)) {
    activity.runOnUiThread(new Runnable(){
      public void run(){
        if (allowsDuplicates || !objects.contains(object)) {
          objects.add(object);
          Collections.sort(objects,new FormattedInstanceComparator(formatter));
          notifyDataSetChanged();
        }
      }
    }
);
  }
}"
85678,"private void resetLastTrack(){
  String lastTrack=tp.playlist.preferences.get(Keys.LAST_TRACK_PLAYED);
  Track restoredTrack=null;
  if (!Shorty.isVoid(lastTrack)) {
    restoredTrack=tp.playlist.getTrack(lastTrack);
  }
  if (restoredTrack == null) {
    tp.player.change(tp.playlist.getNext(playOrderStrategy,null));
  }
 else {
    tp.player.change(restoredTrack);
    tp.player.goToMillis(tp.playlist.preferences.get(Keys.EXIT_PLAY_TIME));
  }
}","private void resetLastTrack(){
  String lastTrack=tp.playlist.preferences.get(Keys.LAST_TRACK_PLAYED);
  Track restoredTrack=null;
  if (!Shorty.isVoid(lastTrack)) {
    restoredTrack=tp.playlist.getTrack(lastTrack);
  }
  if (restoredTrack == null) {
    tp.player.change(tp.playlist.getNext(playOrderStrategy,null));
  }
 else {
    tp.player.change(restoredTrack);
    if (tp.playlist.preferences.get(Keys.EXIT_PLAY_TIME) != null) {
      tp.player.goToMillis(tp.playlist.preferences.get(Keys.EXIT_PLAY_TIME));
    }
 else {
      tp.player.goToMillis(0);
    }
  }
}"
85679,"private void resetLastTrack(){
  String lastTrack=tp.playlist.preferences.get(Keys.LAST_TRACK_PLAYED);
  Track restoredTrack=null;
  if (!Shorty.isVoid(lastTrack)) {
    restoredTrack=tp.playlist.getTrack(lastTrack);
  }
  if (restoredTrack == null) {
    tp.player.change(tp.playlist.getNext(playOrderStrategy,null));
  }
 else {
    tp.player.change(restoredTrack);
    tp.player.goToMillis(tp.playlist.preferences.get(Keys.EXIT_PLAY_TIME));
  }
}","private void resetLastTrack(){
  String lastTrack=tp.playlist.preferences.get(Keys.LAST_TRACK_PLAYED);
  Track restoredTrack=null;
  if (!Shorty.isVoid(lastTrack)) {
    restoredTrack=tp.playlist.getTrack(lastTrack);
  }
  if (restoredTrack == null) {
    tp.player.change(tp.playlist.getNext(playOrderStrategy,null));
  }
 else {
    tp.player.change(restoredTrack);
    if (tp.playlist.preferences.get(Keys.EXIT_PLAY_TIME) != null) {
      tp.player.goToMillis(tp.playlist.preferences.get(Keys.EXIT_PLAY_TIME));
    }
 else {
      tp.player.goToMillis(0);
    }
  }
}"
85680,"@Override protected void onListItemClick(ListView l,View v,int position,long id){
  Track trackSelected=fileChooser.choose((String)l.getItemAtPosition(position));
  if (trackSelected != null) {
    tp.player.play(trackSelected);
    SwitchToNowPlayingSlide();
  }
}","@Override protected void onListItemClick(ListView l,View v,int position,long id){
  Track trackSelected=fileChooser.choose((Instance)l.getItemAtPosition(position));
  if (trackSelected != null) {
    tp.player.play(trackSelected);
    SwitchToNowPlayingSlide();
  }
}"
85681,"public String getName(){
  return name;
}","public String getName(){
  return Shorty.isVoid(id) ? EMPTY_REPLACMENT : id;
}"
85682,"@Override public int hashCode(){
  return name.hashCode();
}","@Override public int hashCode(){
  return id.hashCode();
}"
85683,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Album album=(Album)o;
  return name.equals(album.name);
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Album album=(Album)o;
  return id.equals(album.id);
}"
85684,"public Album(String name){
  this.name=Shorty.isVoid(name) ? EMPTY_REPLACMENT : name;
}","public Album(String id){
  this.id=id;
}"
85685,"public Artist(String name){
  this.name=Shorty.isVoid(name) ? EMPTY_REPLACMENT : name;
}","public Artist(String id){
  this.id=id;
}"
85686,"public String getName(){
  return name;
}","public String getName(){
  return Shorty.isVoid(id) ? EMPTY_REPLACMENT : id;
}"
85687,"@Override public int hashCode(){
  return name.hashCode();
}","@Override public int hashCode(){
  return id.hashCode();
}"
85688,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Artist artist=(Artist)o;
  return name.equals(artist.name);
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Artist artist=(Artist)o;
  return id.equals(artist.id);
}"
85689,"public List<String> getArtistList(Filter filter){
  return getList(filter,Tables.TRACKS.ARTIST);
}","public List<Artist> getArtistList(Filter filter){
  return getList(filter,Tables.TRACKS.ARTIST,new ArtistCreator());
}"
85690,"private <I,T>List<String> getList(Filter filter,FieldPersistable<I,T> field){
  return OperationExecutor.execute(this,new QuerySqlite<List<String>>(filter,new FieldOrder<I,T>(field,SortOrder.ASC),new MappingDistinct<String>(Tables.TRACKS,field,new CreatorForListSqlite<String>(new StringCreator(""String_Node_Str"")))));
}","private <I,T,Z>List<I> getList(Filter filter,FieldPersistable<Z,T> field,Creator<I,Cursor> creator){
  return OperationExecutor.execute(this,new QuerySqlite<List<I>>(filter,new FieldOrder<Z,T>(field,SortOrder.ASC),new MappingDistinct<I>(Tables.TRACKS,field,new CreatorForListSqlite<I>(creator))));
}"
85691,"public List<String> getTrackList(Filter filter){
  return getList(filter,Tables.TRACKS.TITLE);
}","public List<TrackDigest> getTrackList(Filter filter){
  return getList(filter,Tables.TRACKS.TITLE,new Creator<TrackDigest,Cursor>(){
    public TrackDigest create(    Cursor source){
      return new TrackDigest(source.getString(source.getColumnIndex(Tables.TRACKS.TITLE.getName())));
    }
  }
);
}"
85692,"public List<String> getGenreList(Filter filter){
  return getList(filter,Tables.TRACKS.GENRE);
}","public List<Genre> getGenreList(Filter filter){
  return getList(filter,Tables.TRACKS.GENRE,new GenreCreator());
}"
85693,"public List<String> getAlbumList(Filter filter){
  return getList(filter,Tables.TRACKS.ALBUM);
}","public List<Album> getAlbumList(Filter filter){
  return getList(filter,Tables.TRACKS.ALBUM,new AlbumCreator());
}"
85694,"public ContentValues create(Track track){
  final ContentValues values=new ContentValues();
  values.put(Tables.TRACKS.TITLE.getName(),track.GetTitle());
  values.put(Tables.TRACKS.NUMBER.getName(),track.GetNumber());
  values.put(Tables.TRACKS.ARTIST.getName(),track.GetArtist().getName());
  values.put(Tables.TRACKS.ALBUM.getName(),track.GetAlbum().getName());
  values.put(Tables.TRACKS.GENRE.getName(),track.GetGenre().getId());
  values.put(Tables.TRACKS.LENGTH.getName(),track.GetLength());
  values.put(Tables.TRACKS.SRC.getName(),track.GetSrc());
  values.put(Tables.TRACKS.ROOTSRC.getName(),track.GetRootSrc());
  values.put(Tables.TRACKS.ALBUMART.getName(),track.albumArt());
  return values;
}","public ContentValues create(Track track){
  final ContentValues values=new ContentValues();
  values.put(Tables.TRACKS.TITLE.getName(),track.GetTitle());
  values.put(Tables.TRACKS.NUMBER.getName(),track.GetNumber());
  values.put(Tables.TRACKS.ARTIST.getName(),track.GetArtist().getId());
  values.put(Tables.TRACKS.ALBUM.getName(),track.GetAlbum().getId());
  values.put(Tables.TRACKS.GENRE.getName(),track.GetGenre().getId());
  values.put(Tables.TRACKS.LENGTH.getName(),track.GetLength());
  values.put(Tables.TRACKS.SRC.getName(),track.GetSrc());
  values.put(Tables.TRACKS.ROOTSRC.getName(),track.GetRootSrc());
  values.put(Tables.TRACKS.ALBUMART.getName(),track.albumArt());
  return values;
}"
85695,"private void SetupApplication(){
  tp=(TurtlePlayer)getApplication();
  tp.db=new TurtleDatabase(tp.getApplicationContext());
  tp.playlist=new Playlist(tp.getApplicationContext(),tp.db);
  fileChooser=new FileChooser(FileChooser.Mode.Track,tp.db,this);
  standartPlayOrderStrategy=new PlayOrderSorted(tp.db,tp.playlist);
  shufflePlayOrderStrategy=new PlayOrderRandom(tp.db,tp.playlist);
  playOrderStrategy=tp.playlist.preferences.get(Keys.SHUFFLE) ? shufflePlayOrderStrategy : standartPlayOrderStrategy;
}","private void SetupApplication(){
  tp=(TurtlePlayer)getApplication();
  tp.db=new TurtleDatabase(tp.getApplicationContext());
  tp.playlist=new Playlist(tp.getApplicationContext(),tp.db);
  fileChooser=new FileChooser(FileChooser.Mode.Track,tp.db,this);
  standartPlayOrderStrategy=new PlayOrderSorted(tp.db,tp.playlist);
  shufflePlayOrderStrategy=new PlayOrderRandom(tp.db,tp.playlist);
  playOrderStrategy=tp.playlist.preferences.get(Keys.SHUFFLE) ? shufflePlayOrderStrategy : standartPlayOrderStrategy;
  this.registerReceiver(new BroadcastsHandler(),new IntentFilter(Intent.ACTION_HEADSET_PLUG));
}"
85696,"public Select get(){
  Select select=new Select(table);
  select.setOrderClause(new OrderClausePartRandom());
  return select;
}","public Select get(){
  Select select=new Select(table);
  select.setOrderClause(new OrderClauseRandom());
  return select;
}"
85697,"public static String getSeparatedList(String separator,String... values){
  String result=""String_Node_Str"";
  for (  String value : values) {
    result+=value + separator;
  }
  return removeLast(result,separator);
}","public static String getSeparatedList(String separator,SqlFragment... fragments){
  String result=""String_Node_Str"";
  for (  SqlFragment fragment : fragments) {
    result+=fragment.toSql() + separator;
  }
  return removeLast(result,separator);
}"
85698,"public String toSql(){
  return ""String_Node_Str"" + field.getName() + order.toSql()+ ""String_Node_Str"";
}","public String toSql(){
  return ""String_Node_Str"" + field.getName() + ""String_Node_Str""+ order.toSql()+ ""String_Node_Str"";
}"
85699,"public <I>I read(Select query,Database.DbReadOp<I,Cursor> readOp){
  SQLiteDatabase db=turtleDatabaseImpl.getReadableDatabase();
  try {
    String[] params=new String[query.getParams().size()];
    int i=0;
    for (    Object param : query.getParams()) {
      params[i++]=param.toString();
    }
    return readOp.read(db.rawQuery(query.toSql(),params));
  }
  finally {
    db.close();
  }
}","public <I>I read(Select query,Database.DbReadOp<I,Cursor> readOp){
  SQLiteDatabase db=turtleDatabaseImpl.getReadableDatabase();
  try {
    String[] params=new String[query.getParams().size()];
    int i=0;
    for (    Object param : query.getParams()) {
      params[i++]=param.toString();
    }
    Cursor cursor=db.rawQuery(query.toSql(),params);
    cursor.moveToFirst();
    return readOp.read(cursor);
  }
  finally {
    db.close();
  }
}"
85700,"private void SetupButtonListeners(){
  list.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        SwitchToPlaylistSlide();
      }
    }
  }
);
  logo.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      SwitchToNowPlayingSlide();
    }
  }
);
  settings.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      SwitchToSettingsSlide();
    }
  }
);
  backButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        Play(tp.playlist.PreviousTrack());
      }
    }
  }
);
  playButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        if (tp.isInitialised == true) {
          if (tp.isPaused == true) {
            UnPause();
          }
 else {
            Pause();
          }
        }
 else {
          Play(tp.playlist.GetTrack(0));
        }
      }
    }
  }
);
  nextButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        Track t=tp.playlist.NextTrack();
        if (t != null) {
          Play(t);
        }
      }
    }
  }
);
  shuffleButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      tp.playlist.preferences.SetShuffle(!tp.playlist.preferences.GetShuffle());
    }
  }
);
  shuffleCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      tp.playlist.preferences.SetShuffle(isChecked);
    }
  }
);
  repeatButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      tp.playlist.preferences.SetRepeat(!tp.playlist.preferences.GetRepeat());
    }
  }
);
  repeatCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      tp.playlist.preferences.SetRepeat(isChecked);
    }
  }
);
  trackButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        tp.playlist.SortByTitle();
        RefreshList(tp.playlist.GetList());
        ResetFooterButtons();
        trackButton.setImageDrawable(getResources().getDrawable(R.drawable.track48_active));
      }
    }
  }
);
  artistButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        tp.playlist.SortByArtist();
        RefreshList(tp.playlist.GetList());
        ResetFooterButtons();
        artistButton.setImageDrawable(getResources().getDrawable(R.drawable.artist48_active));
      }
    }
  }
);
  albumButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        tp.playlist.SortByAlbum();
        RefreshList(tp.playlist.GetList());
        ResetFooterButtons();
        albumButton.setImageDrawable(getResources().getDrawable(R.drawable.album48_active));
      }
    }
  }
);
  rescan.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      rescan();
    }
  }
);
  chooseMediaDir.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent dirChooserIntent=new Intent(DIR_CHOOSER_ACTION);
      dirChooserIntent.putExtra(DirChooserConstants.ACTIVITY_PARAM_KEY_DIR_CHOOSER_INITIAL_DIR,tp.playlist.preferences.GetMediaPath().toString());
      startActivityForResult(dirChooserIntent,DIR_CHOOSER_REQUEST);
    }
  }
);
}","private void SetupButtonListeners(){
  list.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        SwitchToPlaylistSlide();
      }
 else {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  logo.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      SwitchToNowPlayingSlide();
    }
  }
);
  settings.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      SwitchToSettingsSlide();
    }
  }
);
  backButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        Play(tp.playlist.PreviousTrack());
      }
 else {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  playButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        if (tp.isInitialised == true) {
          if (tp.isPaused == true) {
            UnPause();
          }
 else {
            Pause();
          }
        }
 else {
          Play(tp.playlist.GetTrack(0));
        }
      }
 else {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  nextButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        Track t=tp.playlist.NextTrack();
        if (t != null) {
          Play(t);
        }
      }
    }
  }
);
  shuffleButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      tp.playlist.preferences.SetShuffle(!tp.playlist.preferences.GetShuffle());
    }
  }
);
  shuffleCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      tp.playlist.preferences.SetShuffle(isChecked);
    }
  }
);
  repeatButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      tp.playlist.preferences.SetRepeat(!tp.playlist.preferences.GetRepeat());
    }
  }
);
  repeatCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      tp.playlist.preferences.SetRepeat(isChecked);
    }
  }
);
  trackButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        tp.playlist.SortByTitle();
        RefreshList(tp.playlist.GetList());
        ResetFooterButtons();
        trackButton.setImageDrawable(getResources().getDrawable(R.drawable.track48_active));
      }
    }
  }
);
  artistButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        tp.playlist.SortByArtist();
        RefreshList(tp.playlist.GetList());
        ResetFooterButtons();
        artistButton.setImageDrawable(getResources().getDrawable(R.drawable.artist48_active));
      }
    }
  }
);
  albumButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        tp.playlist.SortByAlbum();
        RefreshList(tp.playlist.GetList());
        ResetFooterButtons();
        albumButton.setImageDrawable(getResources().getDrawable(R.drawable.album48_active));
      }
    }
  }
);
  rescan.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      rescan();
    }
  }
);
  chooseMediaDir.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent dirChooserIntent=new Intent(DIR_CHOOSER_ACTION);
      dirChooserIntent.putExtra(DirChooserConstants.ACTIVITY_PARAM_KEY_DIR_CHOOSER_INITIAL_DIR,tp.playlist.preferences.GetMediaPath().toString());
      startActivityForResult(dirChooserIntent,DIR_CHOOSER_REQUEST);
    }
  }
);
}"
85701,"private void SetupObservers(){
  tp.playlist.addObserver(new Playlist.PlaylistObserverAdapter(){
    @Override public void endUpdatePlaylist(){
      RefreshList(tp.playlist.GetList());
    }
  }
);
  tp.playlist.addObserver(new Playlist.PlaylistObserverAdapter(){
    @Override public void startUpdatePlaylist(){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          rescanProgressBar.setVisibility(View.VISIBLE);
          rescanProgressBar.setIndeterminate(true);
          rescan.setVisibility(View.INVISIBLE);
        }
      }
);
    }
    @Override public void startRescan(    File mediaPath){
      final int[] numberOfTracks=new int[]{0};
      try {
        Process p=Runtime.getRuntime().exec(new String[]{""String_Node_Str"",""String_Node_Str"",mediaPath.toString()});
        BufferedReader br=new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line=""String_Node_Str"";
        while (line != null) {
          line=br.readLine();
          if (line != null && tp.playlist.isMP3.accept(null,line)) {
            numberOfTracks[0]=numberOfTracks[0] + 1;
          }
        }
      }
 catch (      IOException e) {
      }
      runOnUiThread(new Runnable(){
        @Override public void run(){
          rescanProgressBar.setIndeterminate(false);
          rescanProgressBar.setProgress(0);
          rescanProgressBar.setMax(numberOfTracks[0]);
        }
      }
);
    }
    @Override public void trackAdded(    Track track){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          rescanProgressBar.setProgress(rescanProgressBar.getProgress() + 1);
        }
      }
);
    }
    @Override public void endRescan(){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          rescanProgressBar.setIndeterminate(true);
        }
      }
);
    }
    @Override public void endUpdatePlaylist(){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          rescanProgressBar.setVisibility(View.GONE);
          rescan.setVisibility(View.VISIBLE);
          if (!tp.playlist.IsEmpty()) {
            SwitchToPlaylistSlide();
          }
 else {
            Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
          }
        }
      }
);
    }
  }
);
  tp.playlist.preferences.addObserver(new PreferencesObserver(){
    @Override public void changed(    Key key){
      if (key.equals(Keys.REPEAT)) {
        runOnUiThread(new Runnable(){
          @Override public void run(){
            boolean repeat=tp.playlist.preferences.GetRepeat();
            Toast.makeText(Player.this,repeat ? ""String_Node_Str"" : ""String_Node_Str"",Toast.LENGTH_SHORT).show();
            repeatButton.setImageDrawable(getResources().getDrawable(repeat ? R.drawable.repeat48_active : R.drawable.repeat48));
            repeatCheckBox.setChecked(repeat);
          }
        }
);
      }
 else       if (key.equals(Keys.SHUFFLE)) {
        runOnUiThread(new Runnable(){
          @Override public void run(){
            boolean shuffle=tp.playlist.preferences.GetShuffle();
            Toast.makeText(Player.this,shuffle ? ""String_Node_Str"" : ""String_Node_Str"",Toast.LENGTH_SHORT).show();
            shuffleButton.setImageDrawable(getResources().getDrawable(shuffle ? R.drawable.shuffle48_active : R.drawable.shuffle48));
            shuffleCheckBox.setChecked(shuffle);
          }
        }
);
      }
    }
  }
);
}","private void SetupObservers(){
  tp.playlist.addObserver(new Playlist.PlaylistObserverAdapter(){
    @Override public void endUpdatePlaylist(){
      RefreshList(tp.playlist.GetList());
    }
  }
);
  tp.playlist.addObserver(new Playlist.PlaylistObserverAdapter(){
    @Override public void startUpdatePlaylist(){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          rescanProgressBar.setVisibility(View.VISIBLE);
          rescanProgressBar.setIndeterminate(true);
          rescan.setVisibility(View.INVISIBLE);
        }
      }
);
    }
    @Override public void startRescan(    File mediaPath){
      final int[] numberOfTracks=new int[]{0};
      try {
        Process p=Runtime.getRuntime().exec(new String[]{""String_Node_Str"",""String_Node_Str"",mediaPath.toString()});
        BufferedReader br=new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line=""String_Node_Str"";
        while (line != null) {
          line=br.readLine();
          if (line != null && tp.playlist.isMP3.accept(null,line)) {
            numberOfTracks[0]=numberOfTracks[0] + 1;
          }
        }
      }
 catch (      IOException e) {
      }
      runOnUiThread(new Runnable(){
        @Override public void run(){
          rescanProgressBar.setIndeterminate(false);
          rescanProgressBar.setProgress(0);
          rescanProgressBar.setMax(numberOfTracks[0]);
        }
      }
);
    }
    @Override public void trackAdded(    Track track){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          rescanProgressBar.setProgress(rescanProgressBar.getProgress() + 1);
        }
      }
);
    }
    @Override public void endRescan(){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          rescanProgressBar.setIndeterminate(true);
        }
      }
);
    }
    @Override public void endUpdatePlaylist(){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          rescanProgressBar.setVisibility(View.GONE);
          rescan.setVisibility(View.VISIBLE);
          if (!tp.playlist.IsEmpty()) {
            ResetFooterButtons();
            trackButton.setImageDrawable(getResources().getDrawable(R.drawable.track48_active));
            SwitchToPlaylistSlide();
          }
 else {
            Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
          }
        }
      }
);
    }
  }
);
  tp.playlist.preferences.addObserver(new PreferencesObserver(){
    @Override public void changed(    Key key){
      if (key.equals(Keys.REPEAT)) {
        runOnUiThread(new Runnable(){
          @Override public void run(){
            boolean repeat=tp.playlist.preferences.GetRepeat();
            Toast.makeText(Player.this,repeat ? ""String_Node_Str"" : ""String_Node_Str"",Toast.LENGTH_SHORT).show();
            repeatButton.setImageDrawable(getResources().getDrawable(repeat ? R.drawable.repeat48_active : R.drawable.repeat48));
            repeatCheckBox.setChecked(repeat);
          }
        }
);
      }
 else       if (key.equals(Keys.SHUFFLE)) {
        runOnUiThread(new Runnable(){
          @Override public void run(){
            boolean shuffle=tp.playlist.preferences.GetShuffle();
            Toast.makeText(Player.this,shuffle ? ""String_Node_Str"" : ""String_Node_Str"",Toast.LENGTH_SHORT).show();
            shuffleButton.setImageDrawable(getResources().getDrawable(shuffle ? R.drawable.shuffle48_active : R.drawable.shuffle48));
            shuffleCheckBox.setChecked(shuffle);
          }
        }
);
      }
    }
  }
);
}"
85702,"private void UpdateScreenInfo(Track t){
  TextView title=(TextView)findViewById(R.id.trackTitle);
  TextView artist=(TextView)findViewById(R.id.trackArtist);
  title.setVisibility(View.VISIBLE);
  artist.setVisibility(View.VISIBLE);
  duration.setVisibility(View.VISIBLE);
  title.setText(t.GetTitle());
  artist.setText(t.GetArtist());
  if (tp.isInitialised) {
    duration.setText(ConvertToMinutes(tp.mp.getCurrentPosition()) + ""String_Node_Str"" + ConvertToMinutes(tp.mp.getDuration()));
  }
 else {
    duration.setText(""String_Node_Str"");
  }
  ImageView iv=(ImageView)findViewById(R.id.albumArt);
  if (t.HasAlbumArt() && t.GetRootSrc() != null) {
    String location=t.GetRootSrc() + ""String_Node_Str"";
    Bitmap bmp=BitmapFactory.decodeFile(location);
    iv.setImageBitmap(bmp);
  }
 else {
    iv.setImageDrawable(getResources().getDrawable(R.drawable.blank_album_art));
  }
}","private void UpdateScreenInfo(Track t){
  TextView title=(TextView)findViewById(R.id.trackTitle);
  TextView artist=(TextView)findViewById(R.id.trackArtist);
  title.setVisibility(View.VISIBLE);
  artist.setVisibility(View.VISIBLE);
  duration.setVisibility(View.VISIBLE);
  if (tp.isInitialised) {
    title.setText(t.GetTitle());
    artist.setText(t.GetArtist());
    duration.setText(ConvertToMinutes(tp.mp.getCurrentPosition()) + ""String_Node_Str"" + ConvertToMinutes(tp.mp.getDuration()));
  }
 else {
    title.setText(""String_Node_Str"");
    artist.setText(""String_Node_Str"");
    duration.setText(""String_Node_Str"");
  }
  ImageView iv=(ImageView)findViewById(R.id.albumArt);
  if (t.HasAlbumArt() && t.GetRootSrc() != null) {
    String location=t.GetRootSrc() + ""String_Node_Str"";
    Bitmap bmp=BitmapFactory.decodeFile(location);
    iv.setImageBitmap(bmp);
  }
 else {
    iv.setImageDrawable(getResources().getDrawable(R.drawable.blank_album_art));
  }
}"
85703,"@Override public void endUpdatePlaylist(){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      rescanProgressBar.setVisibility(View.GONE);
      rescan.setVisibility(View.VISIBLE);
      if (!tp.playlist.IsEmpty()) {
        SwitchToPlaylistSlide();
      }
 else {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
  }
);
}","@Override public void endUpdatePlaylist(){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      rescanProgressBar.setVisibility(View.GONE);
      rescan.setVisibility(View.VISIBLE);
      if (!tp.playlist.IsEmpty()) {
        ResetFooterButtons();
        trackButton.setImageDrawable(getResources().getDrawable(R.drawable.track48_active));
        SwitchToPlaylistSlide();
      }
 else {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
  }
);
}"
85704,"/** 
 * Async rescan, returns immediately, use  {@link turtle.player.Playlist.PlaylistObserver} to receive changes
 */
protected void rescan(){
  Stop();
  tp.playlist.DatabaseClear();
  tp.playlist.UpdateList();
}","/** 
 * Async rescan, returns immediately, use  {@link turtle.player.Playlist.PlaylistObserver} to receive changes
 */
protected void rescan(){
  if (tp.isInitialised) {
    Stop();
  }
  tp.playlist.DatabaseClear();
  tp.playlist.UpdateList();
}"
85705,"private void SetupButtonListeners(){
  list.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        SwitchToPlaylistSlide();
      }
    }
  }
);
  logo.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      SwitchToNowPlayingSlide();
    }
  }
);
  settings.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      SwitchToSettingsSlide();
    }
  }
);
  backButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        Play(tp.playlist.getPrevious());
      }
    }
  }
);
  playButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        if (tp.isInitialised == true) {
          if (tp.isPaused == true) {
            UnPause();
          }
 else {
            Pause();
          }
        }
 else {
          Play(tp.playlist.getNext());
        }
      }
    }
  }
);
  nextButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        Track t=tp.playlist.getNext();
        if (t != null) {
          Play(t);
        }
      }
    }
  }
);
  shuffleButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      tp.playlist.preferences.SetShuffle(!tp.playlist.preferences.GetShuffle());
    }
  }
);
  shuffleCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      tp.playlist.preferences.SetShuffle(isChecked);
    }
  }
);
  repeatButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      tp.playlist.preferences.SetRepeat(!tp.playlist.preferences.GetRepeat());
    }
  }
);
  repeatCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      tp.playlist.preferences.SetRepeat(isChecked);
    }
  }
);
  rescan.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      rescan();
    }
  }
);
  chooseMediaDir.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent dirChooserIntent=new Intent(DIR_CHOOSER_ACTION);
      dirChooserIntent.putExtra(DirChooserConstants.ACTIVITY_PARAM_KEY_DIR_CHOOSER_INITIAL_DIR,tp.playlist.preferences.GetMediaPath().toString());
      startActivityForResult(dirChooserIntent,DIR_CHOOSER_REQUEST);
    }
  }
);
}","private void SetupButtonListeners(){
  list.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        SwitchToPlaylistSlide();
      }
 else {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  logo.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      SwitchToNowPlayingSlide();
    }
  }
);
  settings.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      SwitchToSettingsSlide();
    }
  }
);
  backButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        Play(tp.playlist.getPrevious());
      }
 else {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  playButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        if (tp.isInitialised == true) {
          if (tp.isPaused == true) {
            UnPause();
          }
 else {
            Pause();
          }
        }
 else {
          Play(tp.playlist.getNext());
        }
      }
 else {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  nextButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!tp.playlist.IsEmpty()) {
        Track t=tp.playlist.getNext();
        if (t != null) {
          Play(t);
        }
      }
    }
  }
);
  shuffleButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      tp.playlist.preferences.SetShuffle(!tp.playlist.preferences.GetShuffle());
    }
  }
);
  shuffleCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      tp.playlist.preferences.SetShuffle(isChecked);
    }
  }
);
  repeatButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      tp.playlist.preferences.SetRepeat(!tp.playlist.preferences.GetRepeat());
    }
  }
);
  repeatCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      tp.playlist.preferences.SetRepeat(isChecked);
    }
  }
);
  rescan.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      rescan();
    }
  }
);
  chooseMediaDir.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent dirChooserIntent=new Intent(DIR_CHOOSER_ACTION);
      dirChooserIntent.putExtra(DirChooserConstants.ACTIVITY_PARAM_KEY_DIR_CHOOSER_INITIAL_DIR,tp.playlist.preferences.GetMediaPath().toString());
      startActivityForResult(dirChooserIntent,DIR_CHOOSER_REQUEST);
    }
  }
);
}"
85706,"private void UpdateScreenInfo(Track t){
  TextView title=(TextView)findViewById(R.id.trackTitle);
  TextView artist=(TextView)findViewById(R.id.trackArtist);
  title.setVisibility(View.VISIBLE);
  artist.setVisibility(View.VISIBLE);
  duration.setVisibility(View.VISIBLE);
  title.setText(t.accept(InstanceFormatter.SHORT));
  artist.setText(t.GetAlbum().accept(InstanceFormatter.SHORT));
  if (tp.isInitialised) {
    duration.setText(ConvertToMinutes(tp.mp.getCurrentPosition()) + ""String_Node_Str"" + ConvertToMinutes(tp.mp.getDuration()));
  }
 else {
    duration.setText(""String_Node_Str"");
  }
  ImageView iv=(ImageView)findViewById(R.id.albumArt);
  if (t.HasAlbumArt() && t.GetRootSrc() != null) {
    String location=t.GetRootSrc() + ""String_Node_Str"";
    Bitmap bmp=BitmapFactory.decodeFile(location);
    iv.setImageBitmap(bmp);
  }
 else {
    iv.setImageDrawable(getResources().getDrawable(R.drawable.blank_album_art));
  }
}","private void UpdateScreenInfo(Track t){
  TextView title=(TextView)findViewById(R.id.trackTitle);
  TextView artist=(TextView)findViewById(R.id.trackArtist);
  title.setVisibility(View.VISIBLE);
  artist.setVisibility(View.VISIBLE);
  duration.setVisibility(View.VISIBLE);
  title.setText(t.accept(InstanceFormatter.SHORT));
  artist.setText(t.GetAlbum().accept(InstanceFormatter.SHORT));
  if (tp.isInitialised) {
    duration.setText(ConvertToMinutes(tp.mp.getCurrentPosition()) + ""String_Node_Str"" + ConvertToMinutes(tp.mp.getDuration()));
  }
 else {
    title.setText(""String_Node_Str"");
    artist.setText(""String_Node_Str"");
    duration.setText(""String_Node_Str"");
  }
  ImageView iv=(ImageView)findViewById(R.id.albumArt);
  if (t.HasAlbumArt() && t.GetRootSrc() != null) {
    String location=t.GetRootSrc() + ""String_Node_Str"";
    Bitmap bmp=BitmapFactory.decodeFile(location);
    iv.setImageBitmap(bmp);
  }
 else {
    iv.setImageDrawable(getResources().getDrawable(R.drawable.blank_album_art));
  }
}"
85707,"/** 
 * Async rescan, returns immediately, use   {@link turtle.player.playlist.Playlist.PlaylistObserver} to receive changes
 */
protected void rescan(){
  Stop();
  tp.playlist.DatabaseClear();
  tp.playlist.UpdateList();
}","/** 
 * Async rescan, returns immediately, use   {@link turtle.player.playlist.Playlist.PlaylistObserver} to receive changes
 */
protected void rescan(){
  if (tp.isInitialised) {
    Stop();
  }
  tp.playlist.DatabaseClear();
  tp.playlist.UpdateList();
}"
85708,"/** 
 * @param rootNode
 * @param depth number of parent allready visited
 */
private void CheckDir(File rootNode,int depth){
  boolean folderHasAlbumArt=false;
  try {
    if (rootNode.list(hasAlbumArt).length > 0) {
      folderHasAlbumArt=true;
    }
    for (    String mp3 : rootNode.list(FileFilters.PLAYABLE_FILES_FILTER)) {
      Log.v(preferences.GetTag(),""String_Node_Str"" + rootNode + ""String_Node_Str""+ mp3);
      metaDataReader.setDataSource(rootNode + ""String_Node_Str"" + mp3);
      String title=metaDataReader.extractMetadata(MediaMetadataRetriever.METADATA_KEY_TITLE);
      String preFormat=metaDataReader.extractMetadata(MediaMetadataRetriever.METADATA_KEY_CD_TRACK_NUMBER);
      String postFormat=""String_Node_Str"";
      String item;
      boolean passed=false;
      if (preFormat != null && preFormat != ""String_Node_Str"") {
        for (int i=0; i < preFormat.length(); i++) {
          item=preFormat.substring(i,i + 1);
          if (item != ""String_Node_Str"" && passed != true) {
            postFormat=postFormat + item;
          }
 else {
            passed=true;
          }
        }
        try {
          number=Integer.parseInt(postFormat);
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        number=0;
      }
      double length=Double.parseDouble(metaDataReader.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
      String artist=metaDataReader.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ARTIST);
      String album=metaDataReader.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ALBUM);
      if (title == null) {
        title=""String_Node_Str"";
      }
      if (artist == null) {
        artist=""String_Node_Str"";
      }
      if (album == null) {
        album=""String_Node_Str"";
      }
      Track t=new Track(title,number,new Artist(artist),new Album(album),length,rootNode + ""String_Node_Str"" + mp3,rootNode + ""String_Node_Str"",folderHasAlbumArt);
      this.AddTrack(t);
    }
    for (    File dir : rootNode.listFiles(isDIR)) {
      if (depth < MAX_DIR_SCAN_DEPTH) {
        CheckDir(dir,depth + 1);
      }
    }
  }
 catch (  NullPointerException e) {
    Log.v(preferences.GetTag(),e.getMessage());
  }
}","/** 
 * @param rootNode
 * @param depth number of parent allready visited
 */
private void CheckDir(File rootNode,int depth){
  boolean folderHasAlbumArt=false;
  try {
    if (rootNode.list(hasAlbumArt).length > 0) {
      folderHasAlbumArt=true;
    }
    for (    String mp3 : rootNode.list(FileFilters.PLAYABLE_FILES_FILTER)) {
      Log.v(preferences.GetTag(),""String_Node_Str"" + rootNode + ""String_Node_Str""+ mp3);
      metaDataReader.setDataSource(rootNode + ""String_Node_Str"" + mp3);
      String title=metaDataReader.extractMetadata(MediaMetadataRetriever.METADATA_KEY_TITLE);
      String preFormat=metaDataReader.extractMetadata(MediaMetadataRetriever.METADATA_KEY_CD_TRACK_NUMBER);
      String postFormat=""String_Node_Str"";
      String item;
      boolean passed=false;
      if (preFormat != null && preFormat != ""String_Node_Str"") {
        for (int i=0; i < preFormat.length(); i++) {
          item=preFormat.substring(i,i + 1);
          if (item != ""String_Node_Str"" && passed != true) {
            postFormat=postFormat + item;
          }
 else {
            passed=true;
          }
        }
        try {
          number=Integer.parseInt(postFormat);
        }
 catch (        NumberFormatException e) {
          Log.v(preferences.GetTag(),e.getMessage());
        }
      }
 else {
        number=0;
      }
      double length=Double.parseDouble(metaDataReader.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
      String artist=metaDataReader.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ARTIST);
      String album=metaDataReader.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ALBUM);
      if (title == null) {
        title=""String_Node_Str"";
      }
      if (artist == null) {
        artist=""String_Node_Str"";
      }
      if (album == null) {
        album=""String_Node_Str"";
      }
      Track t=new Track(title,number,new Artist(artist),new Album(album),length,rootNode + ""String_Node_Str"" + mp3,rootNode + ""String_Node_Str"",folderHasAlbumArt);
      this.AddTrack(t);
    }
    for (    File dir : rootNode.listFiles(isDIR)) {
      if (depth < MAX_DIR_SCAN_DEPTH) {
        CheckDir(dir,depth + 1);
      }
    }
  }
 catch (  NullPointerException e) {
    Log.v(preferences.GetTag(),e.getMessage());
  }
}"
85709,"public synchronized String getOrg(long ipnum){
  int seek_org;
  int record_pointer;
  int str_length=0;
  byte[] buf=new byte[MAX_ORG_RECORD_LENGTH];
  String org_buf;
  try {
    seek_org=seekCountry(ipnum);
    if (seek_org == databaseSegments[0]) {
      return null;
    }
    record_pointer=seek_org + (2 * recordLength - 1) * databaseSegments[0];
    if ((dboptions & GEOIP_MEMORY_CACHE) == 1) {
      System.arraycopy(dbbuffer,record_pointer,buf,0,Math.min(dbbuffer.length - record_pointer,MAX_ORG_RECORD_LENGTH));
    }
 else {
      file.seek(record_pointer);
      file.readFully(buf);
    }
    while (buf[str_length] != '\0') {
      str_length++;
    }
    org_buf=new String(buf,0,str_length,""String_Node_Str"");
    return org_buf;
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    return null;
  }
}","public synchronized String getOrg(long ipnum){
  int seek_org;
  int record_pointer;
  int str_length=0;
  byte[] buf=new byte[MAX_ORG_RECORD_LENGTH];
  String org_buf;
  try {
    seek_org=seekCountry(ipnum);
    if (seek_org == databaseSegments[0]) {
      return null;
    }
    record_pointer=seek_org + (2 * recordLength - 1) * databaseSegments[0];
    if ((dboptions & GEOIP_MEMORY_CACHE) == 1) {
      System.arraycopy(dbbuffer,record_pointer,buf,0,Math.min(dbbuffer.length - record_pointer,MAX_ORG_RECORD_LENGTH));
    }
 else {
      file.seek(record_pointer);
      try {
        file.readFully(buf);
      }
 catch (      IOException e) {
      }
    }
    while (buf[str_length] != '\0') {
      str_length++;
    }
    org_buf=new String(buf,0,str_length,""String_Node_Str"");
    return org_buf;
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    return null;
  }
}"
85710,"/** 
 * Reads meta-data from the database file.
 * @throws java.io.IOException if an error occurs reading from the database file.
 */
private void init() throws IOException {
  int i, j;
  byte[] delim=new byte[3];
  byte[] buf=new byte[SEGMENT_RECORD_LENGTH];
  if (file == null) {
    for (i=0; i < 233; i++) {
      hashmapcountryCodetoindex.put(countryCode[i],new Integer(i));
      hashmapcountryNametoindex.put(countryName[i],new Integer(i));
    }
    return;
  }
  file.seek(file.length() - 3);
  for (i=0; i < STRUCTURE_INFO_MAX_SIZE; i++) {
    file.read(delim);
    if (delim[0] == -1 && delim[1] == -1 && delim[2] == -1) {
      databaseType=file.readByte();
      if (databaseType >= 106) {
        databaseType-=105;
      }
      if (databaseType == DatabaseInfo.REGION_EDITION_REV0) {
        databaseSegments=new int[1];
        databaseSegments[0]=STATE_BEGIN_REV0;
        recordLength=STANDARD_RECORD_LENGTH;
      }
 else       if (databaseType == DatabaseInfo.REGION_EDITION_REV1) {
        databaseSegments=new int[1];
        databaseSegments[0]=STATE_BEGIN_REV1;
        recordLength=STANDARD_RECORD_LENGTH;
      }
 else       if (databaseType == DatabaseInfo.CITY_EDITION_REV0 || databaseType == DatabaseInfo.CITY_EDITION_REV1 || databaseType == DatabaseInfo.ORG_EDITION || databaseType == DatabaseInfo.ISP_EDITION || databaseType == DatabaseInfo.ASNUM_EDITION) {
        databaseSegments=new int[1];
        databaseSegments[0]=0;
        if (databaseType == DatabaseInfo.CITY_EDITION_REV0 || databaseType == DatabaseInfo.CITY_EDITION_REV1) {
          recordLength=STANDARD_RECORD_LENGTH;
        }
 else {
          recordLength=ORG_RECORD_LENGTH;
        }
        file.read(buf);
        for (j=0; j < SEGMENT_RECORD_LENGTH; j++) {
          databaseSegments[0]+=(unsignedByteToInt(buf[j]) << (j * 8));
        }
      }
      break;
    }
 else {
      file.seek(file.getFilePointer() - 4);
    }
  }
  if ((databaseType == DatabaseInfo.COUNTRY_EDITION) | (databaseType == DatabaseInfo.PROXY_EDITION) | (databaseType == DatabaseInfo.NETSPEED_EDITION)) {
    databaseSegments=new int[1];
    databaseSegments[0]=COUNTRY_BEGIN;
    recordLength=STANDARD_RECORD_LENGTH;
  }
  if ((dboptions & GEOIP_MEMORY_CACHE) == 1) {
    int l=(int)file.length();
    dbbuffer=new byte[l];
    file.seek(0);
    file.read(dbbuffer,0,l);
    databaseInfo=this.getDatabaseInfo();
    file.close();
  }
  if ((dboptions & GEOIP_INDEX_CACHE) != 0) {
    int l=databaseSegments[0] * recordLength * 2;
    System.out.println(""String_Node_Str"" + l);
    index_cache=new byte[l];
    if (index_cache != null) {
      file.seek(0);
      file.read(index_cache,0,l);
    }
  }
 else {
    index_cache=null;
  }
}","/** 
 * Reads meta-data from the database file.
 * @throws java.io.IOException if an error occurs reading from the database file.
 */
private void init() throws IOException {
  int i, j;
  byte[] delim=new byte[3];
  byte[] buf=new byte[SEGMENT_RECORD_LENGTH];
  if (file == null) {
    for (i=0; i < 233; i++) {
      hashmapcountryCodetoindex.put(countryCode[i],new Integer(i));
      hashmapcountryNametoindex.put(countryName[i],new Integer(i));
    }
    return;
  }
  if ((dboptions & GEOIP_CHECK_CACHE) != 0) {
    mtime=databaseFile.lastModified();
  }
  file.seek(file.length() - 3);
  for (i=0; i < STRUCTURE_INFO_MAX_SIZE; i++) {
    file.read(delim);
    if (delim[0] == -1 && delim[1] == -1 && delim[2] == -1) {
      databaseType=file.readByte();
      if (databaseType >= 106) {
        databaseType-=105;
      }
      if (databaseType == DatabaseInfo.REGION_EDITION_REV0) {
        databaseSegments=new int[1];
        databaseSegments[0]=STATE_BEGIN_REV0;
        recordLength=STANDARD_RECORD_LENGTH;
      }
 else       if (databaseType == DatabaseInfo.REGION_EDITION_REV1) {
        databaseSegments=new int[1];
        databaseSegments[0]=STATE_BEGIN_REV1;
        recordLength=STANDARD_RECORD_LENGTH;
      }
 else       if (databaseType == DatabaseInfo.CITY_EDITION_REV0 || databaseType == DatabaseInfo.CITY_EDITION_REV1 || databaseType == DatabaseInfo.ORG_EDITION || databaseType == DatabaseInfo.ISP_EDITION || databaseType == DatabaseInfo.ASNUM_EDITION) {
        databaseSegments=new int[1];
        databaseSegments[0]=0;
        if (databaseType == DatabaseInfo.CITY_EDITION_REV0 || databaseType == DatabaseInfo.CITY_EDITION_REV1) {
          recordLength=STANDARD_RECORD_LENGTH;
        }
 else {
          recordLength=ORG_RECORD_LENGTH;
        }
        file.read(buf);
        for (j=0; j < SEGMENT_RECORD_LENGTH; j++) {
          databaseSegments[0]+=(unsignedByteToInt(buf[j]) << (j * 8));
        }
      }
      break;
    }
 else {
      file.seek(file.getFilePointer() - 4);
    }
  }
  if ((databaseType == DatabaseInfo.COUNTRY_EDITION) | (databaseType == DatabaseInfo.PROXY_EDITION) | (databaseType == DatabaseInfo.NETSPEED_EDITION)) {
    databaseSegments=new int[1];
    databaseSegments[0]=COUNTRY_BEGIN;
    recordLength=STANDARD_RECORD_LENGTH;
  }
  if ((dboptions & GEOIP_MEMORY_CACHE) == 1) {
    int l=(int)file.length();
    dbbuffer=new byte[l];
    file.seek(0);
    file.read(dbbuffer,0,l);
    databaseInfo=this.getDatabaseInfo();
    file.close();
  }
  if ((dboptions & GEOIP_INDEX_CACHE) != 0) {
    int l=databaseSegments[0] * recordLength * 2;
    index_cache=new byte[l];
    if (index_cache != null) {
      file.seek(0);
      file.read(index_cache,0,l);
    }
  }
 else {
    index_cache=null;
  }
}"
85711,"synchronized void _check_mtime(){
  try {
    if ((dboptions & GEOIP_CHECK_CACHE) != 0) {
      long t=databaseFile.lastModified();
      if (t != mtime) {
        System.out.println(""String_Node_Str"");
        file.close();
        file=new RandomAccessFile(databaseFile,""String_Node_Str"");
        mtime=t;
        if ((dboptions & GEOIP_MEMORY_CACHE) != 0) {
          int l=(int)file.length();
          dbbuffer=new byte[l];
          file.seek(0);
          file.read(dbbuffer,0,l);
        }
        if ((dboptions & GEOIP_INDEX_CACHE) != 0) {
          int l=databaseSegments[0] * recordLength * 2;
          index_cache=new byte[l];
          if (index_cache != null) {
            file.seek(0);
            file.read(index_cache,0,l);
          }
        }
      }
    }
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
  }
}","synchronized void _check_mtime(){
  try {
    if ((dboptions & GEOIP_CHECK_CACHE) != 0) {
      long t=databaseFile.lastModified();
      if (t != mtime) {
        file.close();
        file=new RandomAccessFile(databaseFile,""String_Node_Str"");
        init();
      }
    }
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
  }
}"
85712,"/** 
 * Create a new lookup service using the specified database file.
 * @param databaseFile the database file.
 * @param options database flags to use when opening the databaseGEOIP_STANDARD read database from disk GEOIP_MEMORY_CACHE cache the database in RAM and read it from RAM
 * @throws java.io.IOException if an error occured creating the lookup servicefrom the database file.
 */
public LookupService(File databaseFile,int options) throws IOException {
  this.databaseFile=databaseFile;
  this.file=new RandomAccessFile(databaseFile,""String_Node_Str"");
  dboptions=options;
  init();
  if ((dboptions & GEOIP_CHECK_CACHE) != 0) {
    mtime=databaseFile.lastModified();
  }
}","/** 
 * Create a new lookup service using the specified database file.
 * @param databaseFile the database file.
 * @param options database flags to use when opening the databaseGEOIP_STANDARD read database from disk GEOIP_MEMORY_CACHE cache the database in RAM and read it from RAM
 * @throws java.io.IOException if an error occured creating the lookup servicefrom the database file.
 */
public LookupService(File databaseFile,int options) throws IOException {
  this.databaseFile=databaseFile;
  this.file=new RandomAccessFile(databaseFile,""String_Node_Str"");
  dboptions=options;
  init();
}"
85713,"protected String toHex(double color){
  String prefix=""String_Node_Str"";
  if (color < 16)   prefix=""String_Node_Str"";
  return prefix + Integer.toHexString((int)Math.round(color));
}","protected String toHex(double color){
  String prefix=""String_Node_Str"";
  int roundedColor=(int)Math.round(color);
  if (roundedColor < 16)   prefix=""String_Node_Str"";
  return prefix + Integer.toHexString(roundedColor);
}"
85714,"public boolean hasAlpha(){
  return true;
}","@Override public boolean hasAlpha(){
  return true;
}"
85715,"private StyleSheet buildImportedAst(Import node,LessSource source,String content){
  if (astCache.containsKey(source)) {
    return astCache.get(source).clone();
  }
  StyleSheet importedAst=parseContent(node,content,source);
  astCache.put(source,importedAst.clone());
  if (node.hasMediums()) {
    HiddenTokenAwareTree underlyingStructure=node.getUnderlyingStructure();
    StyleSheet result=new StyleSheet(underlyingStructure);
    Media media=new Media(underlyingStructure);
    result.addMember(media);
    media.setParent(result);
    media.setMediums(node.getMediums());
    GeneralBody mediaBody=new GeneralBody(underlyingStructure,importedAst.getMembers());
    media.setBody(mediaBody);
    media.configureParentToAllChilds();
    mediaBody.configureParentToAllChilds();
    return result;
  }
  return importedAst;
}","private StyleSheet buildImportedAst(Import node,LessSource source,String content){
  StyleSheet importedAst=getImportedAst(node,source,content);
  if (node.hasMediums()) {
    HiddenTokenAwareTree underlyingStructure=node.getUnderlyingStructure();
    StyleSheet result=new StyleSheet(underlyingStructure);
    Media media=new Media(underlyingStructure);
    result.addMember(media);
    media.setParent(result);
    media.setMediums(node.getMediums());
    GeneralBody mediaBody=new GeneralBody(underlyingStructure,importedAst.getMembers());
    media.setBody(mediaBody);
    media.configureParentToAllChilds();
    mediaBody.configureParentToAllChilds();
    return result;
  }
  return importedAst;
}"
85716,"private boolean ifNotDefaultGuardValue(List<GuardValue> guards){
  for (  GuardValue guardValue : guards) {
switch (guardValue) {
case USE:
case USE_IF_NOT_DEFAULT:
      return true;
case DO_NOT_USE:
case USE_IF_DEFAULT:
    return false;
}
}
return false;
}","private boolean ifNotDefaultGuardValue(List<GuardValue> guards){
  for (  GuardValue guardValue : guards) {
switch (guardValue) {
case USE:
case USE_IF_NOT_DEFAULT:
      break;
case DO_NOT_USE:
case USE_IF_DEFAULT:
    return false;
}
}
return true;
}"
85717,"private boolean ifDefaultGuardValue(List<GuardValue> guards){
  for (  GuardValue guardValue : guards) {
switch (guardValue) {
case USE:
case USE_IF_DEFAULT:
      return true;
case DO_NOT_USE:
case USE_IF_NOT_DEFAULT:
    return false;
}
}
return false;
}","private boolean ifDefaultGuardValue(List<GuardValue> guards){
  for (  GuardValue guardValue : guards) {
switch (guardValue) {
case USE:
case USE_IF_DEFAULT:
      break;
case DO_NOT_USE:
case USE_IF_NOT_DEFAULT:
    return false;
}
}
return true;
}"
85718,"public ScopeView joinIfIndependentAndPreserveContent(IScope callerScope,IScope bodyScope){
  DebugUtils u=new DebugUtils();
  boolean isLocalImport=isLocallyDefined(callerScope,bodyScope);
  u.scopeTest(callerScope,""String_Node_Str"");
  u.scopeTest(bodyScope,""String_Node_Str"");
  ScopeView result=null;
  if (isLocalImport) {
    result=ScopeFactory.createSaveableView(bodyScope);
  }
 else {
    result=ScopeFactory.createJoinedScopesView(callerScope,bodyScope);
  }
  result.saveLocalDataForTheWholeWayUp();
  return result;
}","public ScopeView joinIfIndependentAndPreserveContent(IScope callerScope,IScope bodyScope){
  ScopeView result=joinIfIndependent(callerScope,bodyScope);
  result.saveLocalDataForTheWholeWayUp();
  return result;
}"
85719,"public List<BodyCompilationData> chooseMixinsToBeUsed(List<BodyCompilationData> compiledMixins,final MixinReference reference){
  int normalMixinsCnt=ArraysUtils.count(compiledMixins,GuardValue.USE.filter());
  int ifNotCnt=ArraysUtils.count(compiledMixins,GuardValue.USE_IF_NOT_DEFAULT.filter());
  int ifDefaultCnt=ArraysUtils.count(compiledMixins,GuardValue.USE_IF_DEFAULT.filter());
  if (normalMixinsCnt + ifNotCnt + ifDefaultCnt != compiledMixins.size())   throw new BugHappened(""String_Node_Str"",reference);
  if (normalMixinsCnt > 0) {
    return keepOnly(compiledMixins,GuardValue.USE,GuardValue.USE_IF_NOT_DEFAULT);
  }
  if (ifDefaultCnt + ifNotCnt > 1) {
    List<BodyCompilationData> errorSet=keepOnly(compiledMixins,GuardValue.USE_IF_DEFAULT,GuardValue.USE_IF_NOT_DEFAULT);
    problemsHandler.ambiguousDefaultSet(reference,extractOriginalMixins(errorSet));
    return Collections.emptyList();
  }
  return keepOnly(compiledMixins,GuardValue.USE_IF_DEFAULT);
}","public List<BodyCompilationData> chooseMixinsToBeUsed(List<BodyCompilationData> compiledMixins,final MixinReference reference){
  int normalMixinsCnt=ArraysUtils.count(compiledMixins,GuardValue.USE.filter());
  int ifNotCnt=ArraysUtils.count(compiledMixins,GuardValue.USE_IF_NOT_DEFAULT.filter());
  int ifDefaultCnt=ArraysUtils.count(compiledMixins,GuardValue.USE_IF_DEFAULT.filter());
  int doNotUse=ArraysUtils.count(compiledMixins,GuardValue.DO_NOT_USE.filter());
  if (normalMixinsCnt + ifNotCnt + ifDefaultCnt+ doNotUse != compiledMixins.size())   throw new BugHappened(""String_Node_Str"",reference);
  if (normalMixinsCnt > 0) {
    return keepOnly(compiledMixins,GuardValue.USE,GuardValue.USE_IF_NOT_DEFAULT);
  }
  if (ifDefaultCnt + ifNotCnt > 1) {
    List<BodyCompilationData> errorSet=keepOnly(compiledMixins,GuardValue.USE_IF_DEFAULT,GuardValue.USE_IF_NOT_DEFAULT);
    problemsHandler.ambiguousDefaultSet(reference,extractOriginalMixins(errorSet));
    return Collections.emptyList();
  }
  return keepOnly(compiledMixins,GuardValue.USE_IF_DEFAULT);
}"
85720,"@Override public void run(){
  IScope mixinArguments=data.getMixinArguments();
  ScopeView mixinWorkingScope=data.getMixinWorkingScope();
  mixinWorkingScope.getParent().add(mixinArguments);
  mixinWorkingScope.saveLocalDataForTheWholeWayUp();
  data.setMixinWorkingScope(mixinWorkingScope);
  easilyMoveable(callerScope,compiledMixins,fullMixin,data);
}","@Override public void run(){
  BodyOwner<?> mixin=data.getCompiledBodyOwner();
  IScope mixinArguments=data.getMixinArguments();
  mixinWorkingScope.getParent().add(mixinArguments);
  mixinWorkingScope.saveLocalDataForTheWholeWayUp();
  data.setMixinWorkingScope(mixinWorkingScope);
  GuardValue guardValue2=data.getGuardValue();
  IScope mixinWorkingScope2=data.getMixinWorkingScope();
  if (guardValue2 != GuardValue.DO_NOT_USE) {
    BodyCompilationData compiled=resolveCalledBody(callerScope,mixin,mixinWorkingScope2,ReturnMode.MIXINS_AND_VARIABLES);
    data.setReplacement(compiled.getReplacement());
    data.setReturnValues(compiled.getReturnValues());
  }
}"
85721,"public GeneralBody buildMixinReferenceReplacement(final MixinReference reference,final IScope callerScope,List<FoundMixin> mixins){
  GeneralBody result=new GeneralBody(reference.getUnderlyingStructure());
  if (mixins.isEmpty())   return result;
  final List<BodyCompilationData> compiledMixins=new ArrayList<BodyCompilationData>();
  for (  final FoundMixin fullMixin : mixins) {
    final ReusableStructure mixin=fullMixin.getMixin();
    final IScope mixinScope=fullMixin.getScope();
    final BodyCompilationData data=new BodyCompilationData(fullMixin.getMixin(),null);
    final ScopeView callerScopeCopy=ScopeFactory.createSaveableView(callerScope);
    callerScopeCopy.saveLocalDataForTheWholeWayUp();
    InScopeSnapshotRunner.runInLocalDataSnapshot(mixinScope.getParent(),new ITask(){
      @Override public void run(){
        IScope mixinArguments=buildMixinsArguments(reference,callerScope,fullMixin);
        data.setMixinArguments(mixinArguments);
        mixinScope.getParent().add(mixinArguments);
        ScopeView mixinWorkingScope=scopeManipulation.joinIfIndependent(callerScope,mixinScope);
        data.setMixinWorkingScope(mixinWorkingScope);
        MixinsGuardsValidator guardsValidator=new MixinsGuardsValidator(mixinWorkingScope,problemsHandler,configuration);
        GuardValue guardValue=guardsValidator.evaluateGuards(mixin);
        LinkedList<GuardValue> namespacesGuards=fullMixin.getGuardsOnPath();
        namespacesGuards.add(guardValue);
        guardValue=guardsValidator.andGuards(namespacesGuards);
        data.setGuardValue(guardValue);
      }
    }
);
    InScopeSnapshotRunner.runInLocalDataSnapshot(mixinScope.getParent(),new ITask(){
      @Override public void run(){
        IScope mixinArguments=data.getMixinArguments();
        ScopeView mixinWorkingScope=data.getMixinWorkingScope();
        mixinWorkingScope.getParent().add(mixinArguments);
        mixinWorkingScope.saveLocalDataForTheWholeWayUp();
        data.setMixinWorkingScope(mixinWorkingScope);
        easilyMoveable(callerScope,compiledMixins,fullMixin,data);
      }
    }
);
  }
  List<BodyCompilationData> mixinsToBeUsed=defaultGuardHelper.chooseMixinsToBeUsed(compiledMixins,reference);
  for (  BodyCompilationData data : mixinsToBeUsed) {
    result.addMembers(data.getReplacement());
    callerScope.addToDataPlaceholder(data.getReturnValues());
  }
  callerScope.closeDataPlaceholder();
  resolveImportance(reference,result);
  shiftComments(reference,result);
  return result;
}","public GeneralBody buildMixinReferenceReplacement(final MixinReference reference,final IScope callerScope,List<FoundMixin> mixins){
  GeneralBody result=new GeneralBody(reference.getUnderlyingStructure());
  if (mixins.isEmpty())   return result;
  final List<BodyCompilationData> compiledMixins=new ArrayList<BodyCompilationData>();
  for (  final FoundMixin fullMixin : mixins) {
    final ReusableStructure mixin=fullMixin.getMixin();
    final IScope mixinScope=fullMixin.getScope();
    final BodyCompilationData data=new BodyCompilationData(mixin,mixinScope,null);
    InScopeSnapshotRunner.runInLocalDataSnapshot(mixinScope.getParent(),new ITask(){
      @Override public void run(){
        IScope mixinArguments=buildMixinsArguments(reference,callerScope,fullMixin);
        data.setMixinArguments(mixinArguments);
        mixinScope.getParent().add(mixinArguments);
        ScopeView mixinWorkingScope=scopeManipulation.joinIfIndependent(callerScope,mixinScope);
        data.setMixinWorkingScope(mixinWorkingScope);
        MixinsGuardsValidator guardsValidator=new MixinsGuardsValidator(mixinWorkingScope,problemsHandler,configuration);
        GuardValue guardValue=guardsValidator.evaluateGuards(mixin);
        LinkedList<GuardValue> namespacesGuards=fullMixin.getGuardsOnPath();
        namespacesGuards.add(guardValue);
        guardValue=guardsValidator.andGuards(namespacesGuards);
        data.setGuardValue(guardValue);
        compiledMixins.add(data);
      }
    }
);
  }
  List<BodyCompilationData> mixinsToBeUsed=defaultGuardHelper.chooseMixinsToBeUsed(compiledMixins,reference);
  for (  final BodyCompilationData data : mixinsToBeUsed) {
    final ScopeView mixinWorkingScope=data.getMixinWorkingScope();
    InScopeSnapshotRunner.runInLocalDataSnapshot(data.getOriginalBodyOwnerScope().getParent(),new ITask(){
      @Override public void run(){
        BodyOwner<?> mixin=data.getCompiledBodyOwner();
        IScope mixinArguments=data.getMixinArguments();
        mixinWorkingScope.getParent().add(mixinArguments);
        mixinWorkingScope.saveLocalDataForTheWholeWayUp();
        data.setMixinWorkingScope(mixinWorkingScope);
        GuardValue guardValue2=data.getGuardValue();
        IScope mixinWorkingScope2=data.getMixinWorkingScope();
        if (guardValue2 != GuardValue.DO_NOT_USE) {
          BodyCompilationData compiled=resolveCalledBody(callerScope,mixin,mixinWorkingScope2,ReturnMode.MIXINS_AND_VARIABLES);
          data.setReplacement(compiled.getReplacement());
          data.setReturnValues(compiled.getReturnValues());
        }
      }
    }
);
  }
  for (  BodyCompilationData data : mixinsToBeUsed) {
    result.addMembers(data.getReplacement());
    callerScope.addToDataPlaceholder(data.getReturnValues());
  }
  callerScope.closeDataPlaceholder();
  resolveImportance(reference,result);
  shiftComments(reference,result);
  return result;
}"
85722,"private BodyCompilationData resolveCalledBody(final IScope callerScope,final BodyOwner<?> bodyOwner,final IScope bodyWorkingScope,final ReturnMode returnMode){
  final ExpressionEvaluator expressionEvaluator=new ExpressionEvaluator(bodyWorkingScope,problemsHandler,configuration);
  final IScope referencedMixinScope=bodyWorkingScope;
  return InScopeSnapshotRunner.runInLocalDataSnapshot(referencedMixinScope,new IFunction<BodyCompilationData>(){
    @Override public BodyCompilationData run(){
      List<ASTCssNode> replacement=compileBody(bodyOwner.getBody(),referencedMixinScope);
      IScope returnValues=ScopeFactory.createDummyScope();
      if (returnMode == ReturnMode.MIXINS_AND_VARIABLES) {
        DebugUtils u=new DebugUtils();
        u.scopeTest(callerScope,""String_Node_Str"");
        u.scopeTest(referencedMixinScope,""String_Node_Str"");
        returnValues.addFilteredVariables(new ImportedScopeFilter(expressionEvaluator,callerScope),referencedMixinScope);
      }
      List<FullMixinDefinition> unmodifiedMixinsToImport=referencedMixinScope.getAllMixins();
      List<FullMixinDefinition> allMixinsToImport=scopeManipulation.mixinsToImport(callerScope,referencedMixinScope,unmodifiedMixinsToImport);
      returnValues.addAllMixins(allMixinsToImport);
      for (      FullMixinDefinition fullMixinDefinition : allMixinsToImport) {
        if (fullMixinDefinition.getMixin().getNames().get(0).asString().equals(""String_Node_Str"")) {
          watchedScopeInstance=fullMixinDefinition.getScope();
        }
      }
      return new BodyCompilationData(bodyOwner,replacement,returnValues);
    }
  }
);
}","private BodyCompilationData resolveCalledBody(final IScope callerScope,final BodyOwner<?> bodyOwner,final IScope bodyWorkingScope,final ReturnMode returnMode){
  final ExpressionEvaluator expressionEvaluator=new ExpressionEvaluator(bodyWorkingScope,problemsHandler,configuration);
  final IScope referencedMixinScope=bodyWorkingScope;
  return InScopeSnapshotRunner.runInLocalDataSnapshot(referencedMixinScope,new IFunction<BodyCompilationData>(){
    @Override public BodyCompilationData run(){
      List<ASTCssNode> replacement=compileBody(bodyOwner.getBody(),referencedMixinScope);
      IScope returnValues=ScopeFactory.createDummyScope();
      if (returnMode == ReturnMode.MIXINS_AND_VARIABLES) {
        returnValues.addFilteredVariables(new ImportedScopeFilter(expressionEvaluator,callerScope),referencedMixinScope);
      }
      List<FullMixinDefinition> unmodifiedMixinsToImport=referencedMixinScope.getAllMixins();
      List<FullMixinDefinition> allMixinsToImport=scopeManipulation.mixinsToImport(callerScope,referencedMixinScope,unmodifiedMixinsToImport);
      returnValues.addAllMixins(allMixinsToImport);
      return new BodyCompilationData(bodyOwner,null,replacement,returnValues);
    }
  }
);
}"
85723,"public void scopeTest(IScope scope,Object id){
  try {
    System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ scope);
    Expression value=scope.getValue(""String_Node_Str"");
    if (value == null)     System.out.println(""String_Node_Str"" + value + ""String_Node_Str"");
 else     System.out.println(""String_Node_Str"" + value);
  }
 catch (  Throwable th) {
    th.printStackTrace();
  }
}","/** 
 * Variable name should contain @ too e.g. ""@width""
 */
public void scopeTest(IScope scope,Object id,String variableName){
  try {
    System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ scope);
    Expression value=scope.getValue(""String_Node_Str"");
    String text=variableName + ""String_Node_Str"" + value;
    if (value == null) {
      text+=""String_Node_Str"";
    }
    System.out.println(text);
  }
 catch (  Throwable th) {
    th.printStackTrace();
  }
}"
85724,"public ASTCssNode importEncountered(Import node,LessSource source){
  String filename=conversionUtils.extractFilename(node.getUrlExpression(),problemsHandler,configuration);
  if (filename == null) {
    problemsHandler.errorWrongImport(node.getUrlExpression());
    return null;
  }
  String urlParams=""String_Node_Str"";
  int paramsIndx=filename.lastIndexOf(""String_Node_Str"");
  if (paramsIndx != -1) {
    urlParams=filename.substring(paramsIndx);
    filename=filename.substring(0,paramsIndx);
  }
  if (!node.isInline() && treatAsCss(node,filename))   return null;
  filename=addLessSuffixIfNeeded(filename,urlParams);
  LessSource importedSource;
  try {
    importedSource=source.relativeSource(filename);
  }
 catch (  FileNotFound ex) {
    problemsHandler.errorFileNotFound(node,filename);
    return null;
  }
catch (  CannotReadFile e) {
    problemsHandler.errorFileCanNotBeRead(node,filename);
    return null;
  }
catch (  StringSourceException ex) {
    problemsHandler.warnLessImportNoBaseDirectory(node.getUrlExpression());
    return null;
  }
  if (isImportOnce(node) && alreadyVisited(importedSource)) {
    astManipulator.removeFromBody(node);
    return null;
  }
  importedSources.add(importedSource);
  String importedContent;
  try {
    importedContent=importedSource.getContent();
  }
 catch (  FileNotFound e) {
    problemsHandler.errorFileNotFound(node,filename);
    return null;
  }
catch (  CannotReadFile e) {
    problemsHandler.errorFileCanNotBeRead(node,filename);
    return null;
  }
  if (node.isInline()) {
    HiddenTokenAwareTree underlyingStructure=node.getUnderlyingStructure();
    StyleSheet result=new StyleSheet(underlyingStructure);
    InlineContent content=new InlineContent(underlyingStructure,importedContent);
    result.addMember(content);
    result.configureParentToAllChilds();
    astManipulator.replaceInBody(node,content);
    return result;
  }
  StyleSheet importedAst=buildImportedAst(node,importedSource,importedContent);
  if (node.isReferenceOnly() || node.isSilent()) {
    astManipulator.setTreeSilentness(importedAst,true);
  }
  astManipulator.replaceInBody(node,importedAst.getChilds());
  return importedAst;
}","public ASTCssNode importEncountered(Import node,LessSource source){
  String filename=conversionUtils.extractFilename(node.getUrlExpression(),problemsHandler,configuration);
  if (filename == null) {
    problemsHandler.errorWrongImport(node.getUrlExpression());
    return null;
  }
  String urlParams=""String_Node_Str"";
  int paramsIndx=filename.lastIndexOf(""String_Node_Str"");
  if (paramsIndx != -1) {
    urlParams=filename.substring(paramsIndx);
    filename=filename.substring(0,paramsIndx);
  }
  if (!node.isInline() && treatAsCss(node,filename))   return null;
  filename=addLessSuffixIfNeeded(filename,urlParams);
  LessSource importedSource;
  try {
    importedSource=source.relativeSource(filename);
  }
 catch (  FileNotFound ex) {
    problemsHandler.errorFileNotFound(node,filename);
    return null;
  }
catch (  CannotReadFile e) {
    problemsHandler.errorFileCanNotBeRead(node,filename);
    return null;
  }
catch (  StringSourceException ex) {
    problemsHandler.warnLessImportNoBaseDirectory(node.getUrlExpression());
    return null;
  }
  if (isImportOnce(node) && alreadyVisited(importedSource)) {
    astManipulator.removeFromBody(node);
    return null;
  }
  String importedContent;
  try {
    importedContent=importedSource.getContent();
    importedSources.add(importedSource);
  }
 catch (  FileNotFound e) {
    problemsHandler.errorFileNotFound(node,filename);
    return null;
  }
catch (  CannotReadFile e) {
    problemsHandler.errorFileCanNotBeRead(node,filename);
    return null;
  }
  if (node.isInline()) {
    HiddenTokenAwareTree underlyingStructure=node.getUnderlyingStructure();
    StyleSheet result=new StyleSheet(underlyingStructure);
    InlineContent content=new InlineContent(underlyingStructure,importedContent);
    result.addMember(content);
    result.configureParentToAllChilds();
    astManipulator.replaceInBody(node,content);
    return result;
  }
  StyleSheet importedAst=buildImportedAst(node,importedSource,importedContent);
  if (node.isReferenceOnly() || node.isSilent()) {
    astManipulator.setTreeSilentness(importedAst,true);
  }
  astManipulator.replaceInBody(node,importedAst.getChilds());
  return importedAst;
}"
85725,"private CompilationResult createCompilationResult(ASTCssNode cssStyleSheet,LessSource lessSource,Configuration options){
  LessSource cssDestination=options == null ? null : options.getCssResultLocation();
  if (cssDestination == null) {
    String guessedCssName=URIUtils.changeSuffix(lessSource.getName(),Constants.CSS_SUFFIX);
    URI guessedURI=URIUtils.changeSuffix(lessSource.getURI(),Constants.CSS_SUFFIX);
    cssDestination=new LessSource.StringSource(""String_Node_Str"",guessedCssName,guessedURI);
  }
  CssPrinter builder=new CssPrinter(lessSource,cssDestination,options);
  builder.append(cssStyleSheet);
  String css=builder.toCss();
  String sourceMap=builder.toSourceMap();
  CompilationResult compilationResult=new CompilationResult(css,sourceMap,problemsHandler.getWarnings());
  return compilationResult;
}","private CompilationResult createCompilationResult(ASTCssNode cssStyleSheet,LessSource lessSource,Configuration options){
  LessSource cssDestination=options == null ? null : options.getCssResultLocation();
  if (cssDestination == null) {
    String guessedCssName=URIUtils.changeSuffix(lessSource.getName(),Constants.CSS_SUFFIX);
    URI guessedURI=URIUtils.changeSuffix(lessSource.getURI(),Constants.CSS_SUFFIX);
    cssDestination=new LessSource.StringSource(""String_Node_Str"",guessedCssName,guessedURI);
  }
  CssPrinter builder=new CssPrinter(lessSource,cssDestination,options);
  builder.append(cssStyleSheet);
  StringBuilder css=builder.toCss();
  String sourceMap=builder.toSourceMap();
  handleSourceMapLink(cssStyleSheet,css,options,lessSource,sourceMap);
  CompilationResult compilationResult=new CompilationResult(css.toString(),sourceMap,problemsHandler.getWarnings());
  return compilationResult;
}"
85726,"public ASTCssNode compileToCss(StyleSheet less,LessSource source,Configuration options){
  resolveImportsAndReferences(less,source);
  evaluateExpressions(less);
  freeNestedRulesetsAndMedia(less);
  solveExtends(less);
  finalMediaMergingAndBubbling(less);
  removeUselessLessElements(less);
  mergeMergingProperties(less);
  sortTopLevelElements(less);
  removeUselessCharsets(less);
  handleSourceMapLink(less,options,source);
  validateFinalCss(less);
  return less;
}","public ASTCssNode compileToCss(StyleSheet less,LessSource source,Configuration options){
  resolveImportsAndReferences(less,source);
  evaluateExpressions(less);
  freeNestedRulesetsAndMedia(less);
  solveExtends(less);
  finalMediaMergingAndBubbling(less);
  removeUselessLessElements(less);
  mergeMergingProperties(less);
  sortTopLevelElements(less);
  removeUselessCharsets(less);
  validateFinalCss(less);
  return less;
}"
85727,"public String toCss(){
  return cssOnly.toString();
}","public StringBuilder toCss(){
  return cssOnly.toStringBuilder();
}"
85728,"private Iterable<CssPrinter> collectUniqueBodyMembersStrings(Body body){
  LastOfKindSet<String,CssPrinter> declarationsStrings=new LastOfKindSet<String,CssPrinter>();
  for (  ASTCssNode declaration : body.getMembers()) {
    CssPrinter miniPrinter=new CssPrinter(this);
    miniPrinter.append(declaration);
    miniPrinter.cssOnly.ensureNewLine();
    declarationsStrings.add(miniPrinter.toCss(),miniPrinter);
  }
  return declarationsStrings;
}","private Iterable<CssPrinter> collectUniqueBodyMembersStrings(Body body){
  LastOfKindSet<String,CssPrinter> declarationsStrings=new LastOfKindSet<String,CssPrinter>();
  for (  ASTCssNode declaration : body.getMembers()) {
    CssPrinter miniPrinter=new CssPrinter(this);
    miniPrinter.append(declaration);
    miniPrinter.cssOnly.ensureNewLine();
    declarationsStrings.add(miniPrinter.toCss().toString(),miniPrinter);
  }
  return declarationsStrings;
}"
85729,"public static String relativizeSourceURIs(LessSource from,LessSource to){
  if (to == null)   return ""String_Node_Str"";
  URI toURI=to.getURI();
  if (toURI == null)   return to.getName() == null ? ""String_Node_Str"" : to.getName();
  String toURIAsString=toURI.toString();
  if (from == null)   return toURIAsString;
  URI fromURI=from.getURI();
  if (fromURI == null)   return toURIAsString;
  String fromURIAsString=fromURI.toString();
  return getRelativePath(fromURIAsString,toURIAsString,URIUtils.URI_FILE_SEPARATOR);
}","public static String relativizeSourceURIs(LessSource from,LessSource to){
  if (to == null)   return null;
  URI toURI=to.getURI();
  if (toURI == null)   return to.getName();
  String toURIAsString=toURI.toString();
  if (from == null)   return toURIAsString;
  URI fromURI=from.getURI();
  if (fromURI == null)   return toURIAsString;
  String fromURIAsString=fromURI.toString();
  return getRelativePath(fromURIAsString,toURIAsString,URIUtils.URI_FILE_SEPARATOR);
}"
85730,"private String[] getJavaStringArray(JSONArray array) throws JSONException {
  int len=array.length();
  String[] result=new String[len];
  for (int i=0; i < len; i++) {
    result[i]=array.getString(i);
  }
  return result;
}","private String[] getJavaStringArray(JSONArray array) throws JSONException {
  int len=array.length();
  String[] result=new String[len];
  for (int i=0; i < len; i++) {
    result[i]=array.isNull(i) ? null : array.getString(i);
  }
  return result;
}"
85731,"/** 
 * Escapes the given string for JSON.
 */
private static String escapeString(String value){
  return Util.escapeString(value);
}","/** 
 * Escapes the given string for JSON.
 */
private static String escapeString(String value){
  return SourceMapUtil.escapeString(value);
}"
85732,"private String expectedCss(){
  try {
    return IOUtils.toString(new FileReader(cssOutput));
  }
 catch (  Throwable ex) {
    throw new RuntimeException(ex.getMessage(),ex);
  }
}","protected String expectedCss(){
  return readFile(cssOutput);
}"
85733,"@Test public final void compileAndCompare(){
  try {
    CompilationResult actual=compile(lessFile,cssOutput);
    assertCorrectCssAnsWarnings(actual);
    assertSourceMapValid(actual);
  }
 catch (  Less4jException ex) {
    printErrors(ex);
    assertCorrectErrors(ex);
  }
catch (  Throwable ex) {
    if (ex instanceof ComparisonFailure) {
      ComparisonFailure fail=(ComparisonFailure)ex;
      throw fail;
    }
    if (ex instanceof AssertionError) {
      AssertionError fail=(AssertionError)ex;
      throw fail;
    }
    throw new RuntimeException(ex.getMessage(),ex);
  }
}","@Test public void compileAndCompare(){
  try {
    CompilationResult actual=compile(lessFile,cssOutput);
    assertCorrectCssAndWarnings(actual);
    assertSourceMapValid(actual);
  }
 catch (  Less4jException ex) {
    printErrors(ex);
    assertCorrectErrors(ex);
  }
}"
85734,"@Override protected CompilationResult compile(File lessFile,File cssOutput) throws Less4jException {
  CompilationResult result=supercompile(lessFile,cssOutput);
  if (printTo != null) {
    try {
      FileUtils.writeStringToFile(new File(printTo),result.getCss());
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(result.getCss());
  return result;
}","@Override protected CompilationResult compile(File lessFile,File cssOutput) throws Less4jException {
  CompilationResult result=super.compile(lessFile,cssOutput);
  if (printTo != null) {
    try {
      FileUtils.writeStringToFile(new File(printTo),result.getCss());
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(result.getCss());
  return result;
}"
85735,"@Override public String toScript(Expression value,LessProblems problemsHandler){
  InStringCssPrinter builder=new InStringCssPrinter();
  builder.append(value);
  String replacement=builder.toString();
  return replacement;
}","@Override public String toScript(Expression value,LessProblems problemsHandler){
  InStringCssPrinter builder=new InStringCssPrinter();
  builder.append(value);
  if (!builder.getUnprintableNodes().isEmpty())   return null;
  String replacement=builder.toString();
  return replacement;
}"
85736,"private String format(String value,List<Expression> parameters,HiddenTokenAwareTree technicalUnderlying){
  StringFormatter formatter=new StringFormatter();
  return formatter.replaceIn(value,parameters.iterator(),technicalUnderlying);
}","private String format(String value,List<Expression> parameters,ProblemsHandler problemsHandler,HiddenTokenAwareTree technicalUnderlying){
  StringFormatter formatter=new StringFormatter(problemsHandler);
  return formatter.replaceIn(value,parameters.iterator(),technicalUnderlying);
}"
85737,"private Expression evaluate(CssString format,List<Expression> parameters,HiddenTokenAwareTree technicalUnderlying){
  String newValue=format(format.getValue(),parameters,technicalUnderlying);
  return new CssString(format.getUnderlyingStructure(),newValue,""String_Node_Str"");
}","private Expression evaluate(CssString format,List<Expression> parameters,ProblemsHandler problemsHandler,HiddenTokenAwareTree technicalUnderlying){
  String newValue=format(format.getValue(),parameters,problemsHandler,technicalUnderlying);
  return new CssString(format.getUnderlyingStructure(),newValue,""String_Node_Str"");
}"
85738,"@Override protected String replacementValue(IScopeAwareExpressionsEvaluator expressionEvaluator,HiddenTokenAwareTree technicalUnderlying,MatchRange matchRange){
  Expression value=expressionEvaluator.evaluateIfPresent(new Variable(technicalUnderlying,matchRange.getName()));
  if (value == null) {
    return matchRange.getFullMatch();
  }
  return embeddedScriptEvaluator.toScript(value,problemsHandler);
}","@Override protected String replacementValue(IScopeAwareExpressionsEvaluator expressionEvaluator,HiddenTokenAwareTree technicalUnderlying,MatchRange matchRange){
  Expression value=expressionEvaluator.evaluateIfPresent(new Variable(technicalUnderlying,matchRange.getName()));
  if (value == null) {
    return matchRange.getFullMatch();
  }
  String result=embeddedScriptEvaluator.toScript(value,problemsHandler);
  if (result == null) {
    problemsHandler.stringInterpolationNotSupported(technicalUnderlying,value);
    result=CssPrinter.ERROR;
  }
  return result;
}"
85739,"@Override public void addError(ASTCssNode errorNode,String description){
  collector.addError(new CompilationError(errorNode,description));
}","public void addError(HiddenTokenAwareTree errorNode,String description){
  collector.addError(new CompilationError(new FaultyExpression(errorNode),description));
}"
85740,"public boolean switchOnType(ASTCssNode node){
switch (node.getType()) {
case RULE_SET:
    return appendRuleset((RuleSet)node);
case CSS_CLASS:
  return appendCssClass((CssClass)node);
case PSEUDO_CLASS:
return appendPseudoClass((PseudoClass)node);
case PSEUDO_ELEMENT:
return appendPseudoElement((PseudoElement)node);
case NTH:
return appendNth((Nth)node);
case SELECTOR:
return appendSelector((Selector)node);
case SIMPLE_SELECTOR:
return appendSimpleSelector((SimpleSelector)node);
case SELECTOR_OPERATOR:
return appendSelectorOperator((SelectorOperator)node);
case SELECTOR_COMBINATOR:
return appendSelectorCombinator((SelectorCombinator)node);
case SELECTOR_ATTRIBUTE:
return appendSelectorAttribute((SelectorAttribute)node);
case ID_SELECTOR:
return appendIdSelector((IdSelector)node);
case CHARSET_DECLARATION:
return appendCharsetDeclaration((CharsetDeclaration)node);
case FONT_FACE:
return appendFontFace((FontFace)node);
case NAMED_EXPRESSION:
return appendNamedExpression((NamedExpression)node);
case BINARY_EXPRESSION:
return appendComposedExpression((BinaryExpression)node);
case BINARY_EXPRESSION_OPERATOR:
return appendBinaryExpressionOperator((BinaryExpressionOperator)node);
case LIST_EXPRESSION:
return appendListExpression((ListExpression)node);
case LIST_EXPRESSION_OPERATOR:
return appendListExpressionOperator((ListExpressionOperator)node);
case STRING_EXPRESSION:
return appendCssString((CssString)node);
case EMPTY_EXPRESSION:
return appendEmptyExpression((EmptyExpression)node);
case NUMBER:
return appendNumberExpression((NumberExpression)node);
case IDENTIFIER_EXPRESSION:
return appendIdentifierExpression((IdentifierExpression)node);
case UNICODE_RANGE_EXPRESSION:
return appendUnicodeRangeExpression((UnicodeRangeExpression)node);
case COLOR_EXPRESSION:
return appendColorExpression((ColorExpression)node);
case FUNCTION:
return appendFunctionExpression((FunctionExpression)node);
case DECLARATION:
return appendDeclaration((Declaration)node);
case MEDIA:
return appendMedia((Media)node);
case MEDIA_QUERY:
return appendMediaQuery((MediaQuery)node);
case MEDIUM:
return appendMedium((Medium)node);
case MEDIUM_MODIFIER:
return appendMediumModifier((MediumModifier)node);
case MEDIUM_TYPE:
return appendMediumType((MediumType)node);
case FIXED_MEDIA_EXPRESSION:
return appendMediaExpression((FixedMediaExpression)node);
case INTERPOLATED_MEDIA_EXPRESSION:
return appendInterpolatedMediaExpression((InterpolatedMediaExpression)node);
case MEDIUM_EX_FEATURE:
return appendMediaExpressionFeature((MediaExpressionFeature)node);
case STYLE_SHEET:
return appendStyleSheet((StyleSheet)node);
case FAULTY_EXPRESSION:
return appendFaultyExpression((FaultyExpression)node);
case FAULTY_NODE:
return appendFaultyNode((FaultyNode)node);
case ESCAPED_VALUE:
return appendEscapedValue((EscapedValue)node);
case EMBEDDED_SCRIPT:
return appendEmbeddedScript((EmbeddedScript)node);
case KEYFRAMES:
return appendKeyframes((Keyframes)node);
case KEYFRAMES_NAME:
return appendKeyframesName((KeyframesName)node);
case UNKNOWN_AT_RULE:
return appendUnknownAtRule((UnknownAtRule)node);
case DOCUMENT:
return appendDocument((Document)node);
case VIEWPORT:
return appendViewport((Viewport)node);
case GENERAL_BODY:
return appendBodyOptimizeDuplicates((GeneralBody)node);
case PAGE:
return appendPage((Page)node);
case PAGE_MARGIN_BOX:
return appendPageMarginBox((PageMarginBox)node);
case NAME:
return appendName((Name)node);
case IMPORT:
return appendImport((Import)node);
case ANONYMOUS:
return appendAnonymous((AnonymousExpression)node);
case SYNTAX_ONLY_ELEMENT:
return appendSyntaxOnlyElement((SyntaxOnlyElement)node);
case SUPPORTS:
return appendSupports((Supports)node);
case SUPPORTS_QUERY:
return appendSupportsQuery((SupportsQuery)node);
case SUPPORTS_CONDITION_NEGATION:
return appendSupportsConditionNegation((SupportsConditionNegation)node);
case SUPPORTS_CONDITION_PARENTHESES:
return appendSupportsConditionParentheses((SupportsConditionInParentheses)node);
case SUPPORTS_CONDITION_LOGICAL:
return appendSupportsConditionLogical((SupportsLogicalCondition)node);
case SUPPORTS_LOGICAL_OPERATOR:
return appendSupportsLogicalOperator((SupportsLogicalOperator)node);
case INLINE_CONTENT:
return appendInlineContent((InlineContent)node);
case ESCAPED_SELECTOR:
case PARENTHESES_EXPRESSION:
case SIGNED_EXPRESSION:
case VARIABLE:
case DETACHED_RULESET:
case DETACHED_RULESET_REFERENCE:
case INDIRECT_VARIABLE:
case VARIABLE_DECLARATION:
throw new NotACssException(node);
default :
throw new IllegalStateException(""String_Node_Str"" + node.getType() + ""String_Node_Str""+ node.getSourceLine()+ ""String_Node_Str""+ node.getSourceColumn());
}
}","public boolean switchOnType(ASTCssNode node){
switch (node.getType()) {
case RULE_SET:
    return appendRuleset((RuleSet)node);
case CSS_CLASS:
  return appendCssClass((CssClass)node);
case PSEUDO_CLASS:
return appendPseudoClass((PseudoClass)node);
case PSEUDO_ELEMENT:
return appendPseudoElement((PseudoElement)node);
case NTH:
return appendNth((Nth)node);
case SELECTOR:
return appendSelector((Selector)node);
case SIMPLE_SELECTOR:
return appendSimpleSelector((SimpleSelector)node);
case SELECTOR_OPERATOR:
return appendSelectorOperator((SelectorOperator)node);
case SELECTOR_COMBINATOR:
return appendSelectorCombinator((SelectorCombinator)node);
case SELECTOR_ATTRIBUTE:
return appendSelectorAttribute((SelectorAttribute)node);
case ID_SELECTOR:
return appendIdSelector((IdSelector)node);
case CHARSET_DECLARATION:
return appendCharsetDeclaration((CharsetDeclaration)node);
case FONT_FACE:
return appendFontFace((FontFace)node);
case NAMED_EXPRESSION:
return appendNamedExpression((NamedExpression)node);
case BINARY_EXPRESSION:
return appendComposedExpression((BinaryExpression)node);
case BINARY_EXPRESSION_OPERATOR:
return appendBinaryExpressionOperator((BinaryExpressionOperator)node);
case LIST_EXPRESSION:
return appendListExpression((ListExpression)node);
case LIST_EXPRESSION_OPERATOR:
return appendListExpressionOperator((ListExpressionOperator)node);
case STRING_EXPRESSION:
return appendCssString((CssString)node);
case EMPTY_EXPRESSION:
return appendEmptyExpression((EmptyExpression)node);
case NUMBER:
return appendNumberExpression((NumberExpression)node);
case IDENTIFIER_EXPRESSION:
return appendIdentifierExpression((IdentifierExpression)node);
case UNICODE_RANGE_EXPRESSION:
return appendUnicodeRangeExpression((UnicodeRangeExpression)node);
case COLOR_EXPRESSION:
return appendColorExpression((ColorExpression)node);
case FUNCTION:
return appendFunctionExpression((FunctionExpression)node);
case DECLARATION:
return appendDeclaration((Declaration)node);
case MEDIA:
return appendMedia((Media)node);
case MEDIA_QUERY:
return appendMediaQuery((MediaQuery)node);
case MEDIUM:
return appendMedium((Medium)node);
case MEDIUM_MODIFIER:
return appendMediumModifier((MediumModifier)node);
case MEDIUM_TYPE:
return appendMediumType((MediumType)node);
case FIXED_MEDIA_EXPRESSION:
return appendMediaExpression((FixedMediaExpression)node);
case INTERPOLATED_MEDIA_EXPRESSION:
return appendInterpolatedMediaExpression((InterpolatedMediaExpression)node);
case MEDIUM_EX_FEATURE:
return appendMediaExpressionFeature((MediaExpressionFeature)node);
case STYLE_SHEET:
return appendStyleSheet((StyleSheet)node);
case FAULTY_EXPRESSION:
return appendFaultyExpression((FaultyExpression)node);
case FAULTY_NODE:
return appendFaultyNode((FaultyNode)node);
case ESCAPED_VALUE:
return appendEscapedValue((EscapedValue)node);
case EMBEDDED_SCRIPT:
return appendEmbeddedScript((EmbeddedScript)node);
case KEYFRAMES:
return appendKeyframes((Keyframes)node);
case KEYFRAMES_NAME:
return appendKeyframesName((KeyframesName)node);
case UNKNOWN_AT_RULE:
return appendUnknownAtRule((UnknownAtRule)node);
case DOCUMENT:
return appendDocument((Document)node);
case VIEWPORT:
return appendViewport((Viewport)node);
case GENERAL_BODY:
return appendBodyOptimizeDuplicates((GeneralBody)node);
case PAGE:
return appendPage((Page)node);
case PAGE_MARGIN_BOX:
return appendPageMarginBox((PageMarginBox)node);
case NAME:
return appendName((Name)node);
case IMPORT:
return appendImport((Import)node);
case ANONYMOUS:
return appendAnonymous((AnonymousExpression)node);
case SYNTAX_ONLY_ELEMENT:
return appendSyntaxOnlyElement((SyntaxOnlyElement)node);
case SUPPORTS:
return appendSupports((Supports)node);
case SUPPORTS_QUERY:
return appendSupportsQuery((SupportsQuery)node);
case SUPPORTS_CONDITION_NEGATION:
return appendSupportsConditionNegation((SupportsConditionNegation)node);
case SUPPORTS_CONDITION_PARENTHESES:
return appendSupportsConditionParentheses((SupportsConditionInParentheses)node);
case SUPPORTS_CONDITION_LOGICAL:
return appendSupportsConditionLogical((SupportsLogicalCondition)node);
case SUPPORTS_LOGICAL_OPERATOR:
return appendSupportsLogicalOperator((SupportsLogicalOperator)node);
case INLINE_CONTENT:
return appendInlineContent((InlineContent)node);
case DETACHED_RULESET:
return appendDetachedRuleset((DetachedRuleset)node);
case ESCAPED_SELECTOR:
case PARENTHESES_EXPRESSION:
case SIGNED_EXPRESSION:
case VARIABLE:
case DETACHED_RULESET_REFERENCE:
case INDIRECT_VARIABLE:
case VARIABLE_DECLARATION:
throw new NotACssException(node);
default :
throw new IllegalStateException(""String_Node_Str"" + node.getType() + ""String_Node_Str""+ node.getSourceLine()+ ""String_Node_Str""+ node.getSourceColumn());
}
}"
85741,"private void evaluateExpressions(ASTCssNode node){
  ASTManipulator manipulator=new ASTManipulator();
  IScopeAwareExpressionsEvaluator expressionEvaluator=new IScopeAwareExpressionsEvaluator(problemsHandler,configuration);
  if (node instanceof Expression) {
    Expression value=expressionEvaluator.evaluate((Expression)node);
    manipulator.replace(node,value);
  }
 else {
    List<? extends ASTCssNode> childs=node.getChilds();
    for (    ASTCssNode kid : childs) {
switch (kid.getType()) {
case FIXED_MEDIA_EXPRESSION:
        evaluateInMediaExpressions((FixedMediaExpression)kid);
      break;
case DECLARATION:
    evaluateInDeclaration((Declaration)kid);
  break;
default :
evaluateExpressions(kid);
break;
}
}
}
}","private void evaluateExpressions(ASTCssNode node){
  ASTManipulator manipulator=new ASTManipulator();
  ExpressionsEvaluator expressionEvaluator=new ExpressionsEvaluator(problemsHandler,configuration);
  if (node instanceof Expression) {
    Expression value=expressionEvaluator.evaluate((Expression)node);
    manipulator.replace(node,value);
  }
 else {
    List<? extends ASTCssNode> childs=node.getChilds();
    for (    ASTCssNode kid : childs) {
switch (kid.getType()) {
case FIXED_MEDIA_EXPRESSION:
        evaluateInMediaExpressions((FixedMediaExpression)kid);
      break;
case DECLARATION:
    evaluateInDeclaration((Declaration)kid);
  break;
default :
evaluateExpressions(kid);
break;
}
}
}
}"
85742,"public String extractFilename(Expression urlInput,ProblemsHandler problemsHandler,Configuration configuration){
  IScopeAwareExpressionsEvaluator expressionEvaluator=new IScopeAwareExpressionsEvaluator(problemsHandler,configuration);
  Expression urlExpression=expressionEvaluator.evaluate(urlInput);
  if (urlExpression.getType() != ASTCssNodeType.FUNCTION)   return toJavaFileSeparator(contentToString(urlExpression));
  FunctionExpression function=(FunctionExpression)urlExpression;
  if (!""String_Node_Str"".equals(function.getName().toLowerCase()))   return null;
  return toJavaFileSeparator(contentToString(expressionEvaluator.evaluate(function.getParameter())));
}","public String extractFilename(Expression urlInput,ProblemsHandler problemsHandler,Configuration configuration){
  ExpressionsEvaluator expressionEvaluator=new ExpressionsEvaluator(problemsHandler,configuration);
  Expression urlExpression=expressionEvaluator.evaluate(urlInput);
  if (urlExpression.getType() != ASTCssNodeType.FUNCTION)   return toJavaFileSeparator(contentToString(urlExpression));
  FunctionExpression function=(FunctionExpression)urlExpression;
  if (!""String_Node_Str"".equals(function.getName().toLowerCase()))   return null;
  return toJavaFileSeparator(contentToString(expressionEvaluator.evaluate(function.getParameter())));
}"
85743,"@Override protected String replacementValue(IScopeAwareExpressionsEvaluator expressionEvaluator,HiddenTokenAwareTree technicalUnderlying,MatchRange matchRange){
  Expression value=expressionEvaluator.evaluateIfPresent(new Variable(technicalUnderlying,matchRange.getName()));
  if (value == null) {
    return matchRange.getFullMatch();
  }
  String result=embeddedScriptEvaluator.toScript(value,problemsHandler);
  if (result == null) {
    problemsHandler.stringInterpolationNotSupported(technicalUnderlying,value);
    result=CssPrinter.ERROR;
  }
  return result;
}","@Override protected String replacementValue(ExpressionsEvaluator expressionEvaluator,HiddenTokenAwareTree technicalUnderlying,MatchRange matchRange){
  Expression value=expressionEvaluator.evaluateIfPresent(new Variable(technicalUnderlying,matchRange.getName()));
  if (value == null) {
    return matchRange.getFullMatch();
  }
  String result=embeddedScriptEvaluator.toScript(value,problemsHandler);
  if (result == null) {
    problemsHandler.stringInterpolationNotSupported(technicalUnderlying,value);
    result=CssPrinter.ERROR;
  }
  return result;
}"
85744,"public ArgumentsBuilder(MixinReference reference,ReusableStructure pureMixin,IScopeAwareExpressionsEvaluator referenceEvaluator,ProblemsHandler problemsHandler){
  super();
  this.referenceEvaluator=referenceEvaluator;
  this.problemsHandler=problemsHandler;
  this.positionalParameters=reference.getPositionalParameters().iterator();
  this.reference=reference;
  argumentsScope=ScopeFactory.createDummyScope(reference,""String_Node_Str"" + reference + ""String_Node_Str"");
  mixin=pureMixin;
}","public ArgumentsBuilder(MixinReference reference,ReusableStructure pureMixin,ExpressionsEvaluator referenceEvaluator,ProblemsHandler problemsHandler){
  super();
  this.referenceEvaluator=referenceEvaluator;
  this.problemsHandler=problemsHandler;
  this.positionalParameters=reference.getPositionalParameters().iterator();
  this.reference=reference;
  argumentsScope=ScopeFactory.createDummyScope(reference,""String_Node_Str"" + reference + ""String_Node_Str"");
  mixin=pureMixin;
}"
85745,"public MixinsReferenceMatcher(IScope scope,ProblemsHandler problemsHandler,Configuration configuration){
  evaluator=new IScopeAwareExpressionsEvaluator(scope,problemsHandler,configuration);
}","public MixinsReferenceMatcher(IScope scope,ProblemsHandler problemsHandler,Configuration configuration){
  evaluator=new ExpressionsEvaluator(scope,problemsHandler,configuration);
}"
85746,"public ImportedScopeFilter(IScopeAwareExpressionsEvaluator expressionEvaluator,IScope importTargetScope){
  super();
  this.expressionEvaluator=expressionEvaluator;
  this.importTargetScope=importTargetScope;
}","public ImportedScopeFilter(ExpressionsEvaluator expressionEvaluator,IScope importTargetScope){
  super();
  this.expressionEvaluator=expressionEvaluator;
  this.importTargetScope=importTargetScope;
}"
85747,"private BodyCompilationResult resolveReferencedBody(final IScope callerScope,final BodyOwner<?> mixin,final IScope mixinWorkingScope){
  final IScopeAwareExpressionsEvaluator expressionEvaluator=new IScopeAwareExpressionsEvaluator(mixinWorkingScope,problemsHandler,configuration);
  final IScope referencedMixinScope=mixinWorkingScope;
  return InScopeSnapshotRunner.runInOriginalDataSnapshot(referencedMixinScope,new IFunction<BodyCompilationResult>(){
    @Override public BodyCompilationResult run(){
      List<ASTCssNode> replacement=compileBody(mixin.getBody(),referencedMixinScope);
      IScope returnValues=ScopeFactory.createDummyScope();
      returnValues.addFilteredVariables(new ImportedScopeFilter(expressionEvaluator,callerScope),referencedMixinScope);
      List<FullMixinDefinition> unmodifiedMixinsToImport=referencedMixinScope.getAllMixins();
      List<FullMixinDefinition> allMixinsToImport=mixinsToImport(callerScope,referencedMixinScope,unmodifiedMixinsToImport);
      returnValues.addAllMixins(allMixinsToImport);
      return new BodyCompilationResult((ASTCssNode)mixin,replacement,returnValues);
    }
  }
);
}","private BodyCompilationResult resolveReferencedBody(final IScope callerScope,final BodyOwner<?> mixin,final IScope mixinWorkingScope){
  final ExpressionsEvaluator expressionEvaluator=new ExpressionsEvaluator(mixinWorkingScope,problemsHandler,configuration);
  final IScope referencedMixinScope=mixinWorkingScope;
  return InScopeSnapshotRunner.runInOriginalDataSnapshot(referencedMixinScope,new IFunction<BodyCompilationResult>(){
    @Override public BodyCompilationResult run(){
      List<ASTCssNode> replacement=compileBody(mixin.getBody(),referencedMixinScope);
      IScope returnValues=ScopeFactory.createDummyScope();
      returnValues.addFilteredVariables(new ImportedScopeFilter(expressionEvaluator,callerScope),referencedMixinScope);
      List<FullMixinDefinition> unmodifiedMixinsToImport=referencedMixinScope.getAllMixins();
      List<FullMixinDefinition> allMixinsToImport=mixinsToImport(callerScope,referencedMixinScope,unmodifiedMixinsToImport);
      returnValues.addAllMixins(allMixinsToImport);
      return new BodyCompilationResult((ASTCssNode)mixin,replacement,returnValues);
    }
  }
);
}"
85748,"@Deprecated private BodyCompilationResult resolveMixinReference(final IScope callerScope,final FullMixinDefinition referencedMixin,final IScope mixinWorkingScope){
  final IScopeAwareExpressionsEvaluator expressionEvaluator=new IScopeAwareExpressionsEvaluator(mixinWorkingScope,problemsHandler,configuration);
  final ReusableStructure mixin=referencedMixin.getMixin();
  final IScope referencedMixinScope=mixinWorkingScope;
  return InScopeSnapshotRunner.runInOriginalDataSnapshot(referencedMixinScope,new IFunction<BodyCompilationResult>(){
    @Override public BodyCompilationResult run(){
      List<ASTCssNode> replacement=compileBody(mixin.getBody(),referencedMixinScope);
      IScope returnValues=expressionEvaluator.evaluateValues(referencedMixinScope);
      List<FullMixinDefinition> unmodifiedMixinsToImport=referencedMixinScope.getAllMixins();
      List<FullMixinDefinition> allMixinsToImport=mixinsToImport(callerScope,referencedMixinScope,unmodifiedMixinsToImport);
      returnValues.addAllMixins(allMixinsToImport);
      return new BodyCompilationResult(mixin,replacement,returnValues);
    }
  }
);
}","@Deprecated private BodyCompilationResult resolveMixinReference(final IScope callerScope,final FullMixinDefinition referencedMixin,final IScope mixinWorkingScope){
  final ExpressionsEvaluator expressionEvaluator=new ExpressionsEvaluator(mixinWorkingScope,problemsHandler,configuration);
  final ReusableStructure mixin=referencedMixin.getMixin();
  final IScope referencedMixinScope=mixinWorkingScope;
  return InScopeSnapshotRunner.runInOriginalDataSnapshot(referencedMixinScope,new IFunction<BodyCompilationResult>(){
    @Override public BodyCompilationResult run(){
      List<ASTCssNode> replacement=compileBody(mixin.getBody(),referencedMixinScope);
      IScope returnValues=expressionEvaluator.evaluateValues(referencedMixinScope);
      List<FullMixinDefinition> unmodifiedMixinsToImport=referencedMixinScope.getAllMixins();
      List<FullMixinDefinition> allMixinsToImport=mixinsToImport(callerScope,referencedMixinScope,unmodifiedMixinsToImport);
      returnValues.addAllMixins(allMixinsToImport);
      return new BodyCompilationResult(mixin,replacement,returnValues);
    }
  }
);
}"
85749,"private IScope buildMixinsArguments(MixinReference reference,IScope referenceScope,FullMixinDefinition mixin){
  ArgumentsBuilder builder=new ArgumentsBuilder(reference,mixin.getMixin(),new IScopeAwareExpressionsEvaluator(referenceScope,problemsHandler,configuration),problemsHandler);
  return builder.build();
}","private IScope buildMixinsArguments(MixinReference reference,IScope referenceScope,FullMixinDefinition mixin){
  ArgumentsBuilder builder=new ArgumentsBuilder(reference,mixin.getMixin(),new ExpressionsEvaluator(referenceScope,problemsHandler,configuration),problemsHandler);
  return builder.build();
}"
85750,"private boolean solveIfVariableReference(ASTCssNode node,IScope scope){
  IScopeAwareExpressionsEvaluator expressionEvaluator=new IScopeAwareExpressionsEvaluator(scope,problemsHandler,configuration);
switch (node.getType()) {
case VARIABLE:
{
      Expression replacement=expressionEvaluator.evaluate((Variable)node);
      manipulator.replaceAndSynchronizeSilentness(node,replacement);
      return true;
    }
case INDIRECT_VARIABLE:
{
    Expression replacement=expressionEvaluator.evaluate((IndirectVariable)node);
    manipulator.replaceAndSynchronizeSilentness(node,replacement);
    return true;
  }
case STRING_EXPRESSION:
{
  Expression replacement=expressionEvaluator.evaluate((CssString)node);
  manipulator.replaceAndSynchronizeSilentness(node,replacement);
  return true;
}
case ESCAPED_VALUE:
{
Expression replacement=expressionEvaluator.evaluate((EscapedValue)node);
manipulator.replaceAndSynchronizeSilentness(node,replacement);
return true;
}
case EMBEDDED_SCRIPT:
{
Expression replacement=expressionEvaluator.evaluate((EmbeddedScript)node);
manipulator.replaceAndSynchronizeSilentness(node,replacement);
return true;
}
case ESCAPED_SELECTOR:
{
SimpleSelector replacement=interpolateEscapedSelector((EscapedSelector)node,expressionEvaluator);
manipulator.replaceAndSynchronizeSilentness(node,replacement);
return true;
}
case FIXED_NAME_PART:
{
FixedNamePart part=(FixedNamePart)node;
FixedNamePart replacement=interpolateFixedNamePart(part,expressionEvaluator);
manipulator.replaceMemberAndSynchronizeSilentness(part,replacement);
return true;
}
case VARIABLE_NAME_PART:
{
VariableNamePart part=(VariableNamePart)node;
Expression value=expressionEvaluator.evaluate(part.getVariable());
FixedNamePart fixedName=toFixedName(value,node.getUnderlyingStructure(),part);
FixedNamePart replacement=interpolateFixedNamePart(fixedName,expressionEvaluator);
manipulator.replaceMemberAndSynchronizeSilentness(part,replacement);
return true;
}
default :
}
return false;
}","private boolean solveIfVariableReference(ASTCssNode node,IScope scope){
  ExpressionsEvaluator expressionEvaluator=new ExpressionsEvaluator(scope,problemsHandler,configuration);
switch (node.getType()) {
case VARIABLE:
{
      Expression replacement=expressionEvaluator.evaluate((Variable)node);
      manipulator.replaceAndSynchronizeSilentness(node,replacement);
      return true;
    }
case INDIRECT_VARIABLE:
{
    Expression replacement=expressionEvaluator.evaluate((IndirectVariable)node);
    manipulator.replaceAndSynchronizeSilentness(node,replacement);
    return true;
  }
case STRING_EXPRESSION:
{
  Expression replacement=expressionEvaluator.evaluate((CssString)node);
  manipulator.replaceAndSynchronizeSilentness(node,replacement);
  return true;
}
case ESCAPED_VALUE:
{
Expression replacement=expressionEvaluator.evaluate((EscapedValue)node);
manipulator.replaceAndSynchronizeSilentness(node,replacement);
return true;
}
case EMBEDDED_SCRIPT:
{
Expression replacement=expressionEvaluator.evaluate((EmbeddedScript)node);
manipulator.replaceAndSynchronizeSilentness(node,replacement);
return true;
}
case ESCAPED_SELECTOR:
{
SimpleSelector replacement=interpolateEscapedSelector((EscapedSelector)node,expressionEvaluator);
manipulator.replaceAndSynchronizeSilentness(node,replacement);
return true;
}
case FIXED_NAME_PART:
{
FixedNamePart part=(FixedNamePart)node;
FixedNamePart replacement=interpolateFixedNamePart(part,expressionEvaluator);
manipulator.replaceMemberAndSynchronizeSilentness(part,replacement);
return true;
}
case VARIABLE_NAME_PART:
{
VariableNamePart part=(VariableNamePart)node;
Expression value=expressionEvaluator.evaluate(part.getVariable());
FixedNamePart fixedName=toFixedName(value,node.getUnderlyingStructure(),part);
FixedNamePart replacement=interpolateFixedNamePart(fixedName,expressionEvaluator);
manipulator.replaceMemberAndSynchronizeSilentness(part,replacement);
return true;
}
default :
}
return false;
}"
85751,"private Map<ASTCssNode,GeneralBody> solveCalls(List<ASTCssNode> childs,IScope referenceScope){
  Map<ASTCssNode,GeneralBody> solvedMixinReferences=new HashMap<ASTCssNode,GeneralBody>();
  for (  ASTCssNode kid : childs) {
    if (isMixinReference(kid)) {
      MixinReference reference=(MixinReference)kid;
      List<FullMixinDefinition> foundMixins=findReferencedMixins(reference,referenceScope);
      GeneralBody replacement=mixinsSolver.buildMixinReferenceReplacement(reference,referenceScope,foundMixins);
      AstLogic.validateLessBodyCompatibility(reference,replacement.getMembers(),problemsHandler);
      solvedMixinReferences.put(reference,replacement);
    }
 else     if (isDetachedRulesetReference(kid)) {
      DetachedRulesetReference detachedRulesetReference=(DetachedRulesetReference)kid;
      Expression fullNodeDefinition=referenceScope.getValue(detachedRulesetReference.getVariable());
      if (fullNodeDefinition == null) {
        handleUnavailableDetachedRulesetReference(detachedRulesetReference,solvedMixinReferences);
      }
 else {
        IScopeAwareExpressionsEvaluator expressionEvaluator=new IScopeAwareExpressionsEvaluator(referenceScope,problemsHandler,configuration);
        Expression evaluatedDetachedRuleset=expressionEvaluator.evaluate(fullNodeDefinition);
        fullNodeDefinition=evaluatedDetachedRuleset;
        if (evaluatedDetachedRuleset.getType() != ASTCssNodeType.DETACHED_RULESET) {
          handleWrongDetachedRulesetReference(detachedRulesetReference,evaluatedDetachedRuleset,solvedMixinReferences);
        }
 else {
          DetachedRuleset detachedRuleset=(DetachedRuleset)evaluatedDetachedRuleset;
          IScope scope=detachedRuleset.getScope();
          GeneralBody replacement=mixinsSolver.buildDetachedRulesetReplacement(detachedRulesetReference,referenceScope,detachedRuleset,scope);
          AstLogic.validateLessBodyCompatibility(kid,replacement.getMembers(),problemsHandler);
          solvedMixinReferences.put(kid,replacement);
        }
      }
    }
  }
  return solvedMixinReferences;
}","private Map<ASTCssNode,GeneralBody> solveCalls(List<ASTCssNode> childs,IScope referenceScope){
  Map<ASTCssNode,GeneralBody> solvedMixinReferences=new HashMap<ASTCssNode,GeneralBody>();
  for (  ASTCssNode kid : childs) {
    if (isMixinReference(kid)) {
      MixinReference reference=(MixinReference)kid;
      List<FullMixinDefinition> foundMixins=findReferencedMixins(reference,referenceScope);
      GeneralBody replacement=mixinsSolver.buildMixinReferenceReplacement(reference,referenceScope,foundMixins);
      AstLogic.validateLessBodyCompatibility(reference,replacement.getMembers(),problemsHandler);
      solvedMixinReferences.put(reference,replacement);
    }
 else     if (isDetachedRulesetReference(kid)) {
      DetachedRulesetReference detachedRulesetReference=(DetachedRulesetReference)kid;
      Expression fullNodeDefinition=referenceScope.getValue(detachedRulesetReference.getVariable());
      if (fullNodeDefinition == null) {
        handleUnavailableDetachedRulesetReference(detachedRulesetReference,solvedMixinReferences);
      }
 else {
        ExpressionsEvaluator expressionEvaluator=new ExpressionsEvaluator(referenceScope,problemsHandler,configuration);
        Expression evaluatedDetachedRuleset=expressionEvaluator.evaluate(fullNodeDefinition);
        fullNodeDefinition=evaluatedDetachedRuleset;
        if (evaluatedDetachedRuleset.getType() != ASTCssNodeType.DETACHED_RULESET) {
          handleWrongDetachedRulesetReference(detachedRulesetReference,evaluatedDetachedRuleset,solvedMixinReferences);
        }
 else {
          DetachedRuleset detachedRuleset=(DetachedRuleset)evaluatedDetachedRuleset;
          IScope scope=detachedRuleset.getScope();
          GeneralBody replacement=mixinsSolver.buildDetachedRulesetReplacement(detachedRulesetReference,referenceScope,detachedRuleset,scope);
          AstLogic.validateLessBodyCompatibility(kid,replacement.getMembers(),problemsHandler);
          solvedMixinReferences.put(kid,replacement);
        }
      }
    }
  }
  return solvedMixinReferences;
}"
85752,"private FixedNamePart interpolateFixedNamePart(FixedNamePart input,IScopeAwareExpressionsEvaluator expressionEvaluator){
  String value=stringInterpolator.replaceIn(input.getName(),expressionEvaluator,input.getUnderlyingStructure());
  return new FixedNamePart(input.getUnderlyingStructure(),value);
}","private FixedNamePart interpolateFixedNamePart(FixedNamePart input,ExpressionsEvaluator expressionEvaluator){
  String value=stringInterpolator.replaceIn(input.getName(),expressionEvaluator,input.getUnderlyingStructure());
  return new FixedNamePart(input.getUnderlyingStructure(),value);
}"
85753,"private void solveNonCalligReferences(List<ASTCssNode> childs,IteratedScope iteratedScope){
  IScopeAwareExpressionsEvaluator cssGuardsValidator=new IScopeAwareExpressionsEvaluator(iteratedScope.getScope(),problemsHandler,configuration);
  for (  ASTCssNode kid : childs) {
    if (isMixinReference(kid) || isDetachedRulesetReference(kid))     continue;
    if (isRuleset(kid)) {
      RuleSet ruleSet=(RuleSet)kid;
      if (cssGuardsValidator.guardsSatisfied(ruleSet)) {
        ruleSet.removeGuards();
      }
 else {
        manipulator.removeFromClosestBody(ruleSet);
        iteratedScope.getNextChild();
        continue;
      }
    }
    if (AstLogic.isQuotelessUrlFunction(kid)) {
      continue;
    }
    if (AstLogic.hasOwnScope(kid)) {
      IteratedScope scope=iteratedScope.getNextChild();
      doSolveReferences(kid,scope);
    }
 else {
      boolean finishedNode=solveIfVariableReference(kid,iteratedScope.getScope());
      if (!finishedNode)       unsafeDoSolveReferences(kid,iteratedScope);
    }
  }
}","private void solveNonCalligReferences(List<ASTCssNode> childs,IteratedScope iteratedScope){
  ExpressionsEvaluator cssGuardsValidator=new ExpressionsEvaluator(iteratedScope.getScope(),problemsHandler,configuration);
  for (  ASTCssNode kid : childs) {
    if (isMixinReference(kid) || isDetachedRulesetReference(kid))     continue;
    if (isRuleset(kid)) {
      RuleSet ruleSet=(RuleSet)kid;
      if (cssGuardsValidator.guardsSatisfied(ruleSet)) {
        ruleSet.removeGuards();
      }
 else {
        manipulator.removeFromClosestBody(ruleSet);
        iteratedScope.getNextChild();
        continue;
      }
    }
    if (AstLogic.isQuotelessUrlFunction(kid)) {
      continue;
    }
    if (AstLogic.hasOwnScope(kid)) {
      IteratedScope scope=iteratedScope.getNextChild();
      doSolveReferences(kid,scope);
    }
 else {
      boolean finishedNode=solveIfVariableReference(kid,iteratedScope.getScope());
      if (!finishedNode)       unsafeDoSolveReferences(kid,iteratedScope);
    }
  }
}"
85754,"private SimpleSelector interpolateEscapedSelector(EscapedSelector input,IScopeAwareExpressionsEvaluator expressionEvaluator){
  HiddenTokenAwareTree underlying=input.getUnderlyingStructure();
  String value=stringInterpolator.replaceIn(input.getValue(),expressionEvaluator,input.getUnderlyingStructure());
  InterpolableName interpolableName=new InterpolableName(underlying,new FixedNamePart(underlying,value));
  return new SimpleSelector(input.getUnderlyingStructure(),input.getLeadingCombinator(),interpolableName,false);
}","private SimpleSelector interpolateEscapedSelector(EscapedSelector input,ExpressionsEvaluator expressionEvaluator){
  HiddenTokenAwareTree underlying=input.getUnderlyingStructure();
  String value=stringInterpolator.replaceIn(input.getValue(),expressionEvaluator,input.getUnderlyingStructure());
  InterpolableName interpolableName=new InterpolableName(underlying,new FixedNamePart(underlying,value));
  return new SimpleSelector(input.getUnderlyingStructure(),input.getLeadingCombinator(),interpolableName,false);
}"
85755,"private void resolveImportsAndReferences(StyleSheet less,LessSource source){
  ExperimentalImportsSolver importsSolver=new ExperimentalImportsSolver(problemsHandler);
  InitialScopeExtractor scopeBuilder=new InitialScopeExtractor();
  IScope scope=scopeBuilder.extractScope(less);
  List<PlaceholderScope> importsPlaceholders=scopeBuilder.getImportsPlaceholders();
  solveNestedImports(source,importsSolver,importsPlaceholders);
  ReferencesSolver referencesSolver=new ReferencesSolver(problemsHandler);
  referencesSolver.solveReferences(less,scope);
}","private void resolveImportsAndReferences(StyleSheet less,LessSource source){
  SimpleImportsSolver importsSolver=new SimpleImportsSolver(problemsHandler);
  InitialScopeExtractor scopeBuilder=new InitialScopeExtractor();
  IScope scope=scopeBuilder.extractScope(less);
  List<PlaceholderScope> importsPlaceholders=scopeBuilder.getImportsPlaceholders();
  solveNestedImports(importsSolver,importsPlaceholders);
  ReferencesSolver referencesSolver=new ReferencesSolver(problemsHandler);
  referencesSolver.solveReferences(less,scope);
}"
85756,"private void solveNestedImports(LessSource source,ExperimentalImportsSolver importsSolver,List<PlaceholderScope> importsPlaceholders){
  for (  PlaceholderScope placeholder : importsPlaceholders) {
    ASTCssNode importedAst=importsSolver.importEncountered((Import)placeholder.getOwner(),source);
    if (importedAst != null) {
      InitialScopeExtractor importedAstScopeBuilder=new InitialScopeExtractor();
      IScope addThisIntoScopeTree=importedAstScopeBuilder.extractScope(importedAst);
      placeholder.replaceSelf(addThisIntoScopeTree);
      solveNestedImports(source,importsSolver,importedAstScopeBuilder.getImportsPlaceholders());
    }
 else {
      placeholder.removeSelf();
    }
  }
}","private void solveNestedImports(SimpleImportsSolver importsSolver,List<PlaceholderScope> importsPlaceholders){
  for (  PlaceholderScope placeholder : importsPlaceholders) {
    ASTCssNode importedAst=importsSolver.importEncountered((Import)placeholder.getOwner(),placeholder.getOwner().getSource());
    if (importedAst != null) {
      InitialScopeExtractor importedAstScopeBuilder=new InitialScopeExtractor();
      IScope addThisIntoScopeTree=importedAstScopeBuilder.extractScope(importedAst);
      placeholder.replaceSelf(addThisIntoScopeTree);
      List<PlaceholderScope> ip=importedAstScopeBuilder.getImportsPlaceholders();
      solveNestedImports(importsSolver,ip);
    }
 else {
      placeholder.removeSelf();
    }
  }
}"
85757,"private void importEncountered(Import node,LessSource source){
  String filename=conversionUtils.extractFilename(node.getUrlExpression(),problemsHandler);
  if (filename == null) {
    problemsHandler.errorWrongImport(node.getUrlExpression());
    return;
  }
  String urlParams=""String_Node_Str"";
  int paramsIndx=filename.lastIndexOf(""String_Node_Str"");
  if (paramsIndx != -1) {
    urlParams=filename.substring(paramsIndx);
    filename=filename.substring(0,paramsIndx);
  }
  if (isCssFile(filename))   return;
  filename=addLessSuffixIfNeeded(filename,urlParams);
  LessSource importedSource;
  try {
    importedSource=source.relativeSource(filename);
  }
 catch (  FileNotFound ex) {
    problemsHandler.errorFileNotFound(node,filename);
    return;
  }
catch (  CannotReadFile e) {
    problemsHandler.errorFileCanNotBeRead(node,filename);
    return;
  }
catch (  StringSourceException ex) {
    problemsHandler.warnLessImportNoBaseDirectory(node.getUrlExpression());
    return;
  }
  if (isImportOnce(node) && alreadyVisited(importedSource)) {
    astManipulator.removeFromBody(node);
    return;
  }
  importedSources.add(importedSource);
  String importedContent;
  try {
    importedContent=importedSource.getContent();
  }
 catch (  FileNotFound e) {
    problemsHandler.errorFileNotFound(node,filename);
    return;
  }
catch (  CannotReadFile e) {
    problemsHandler.errorFileCanNotBeRead(node,filename);
    return;
  }
  StyleSheet importedAst=parseContent(node,importedContent,importedSource);
  solveImports(importedAst,importedSource);
  if (node.hasMediums()) {
    HiddenTokenAwareTree underlyingStructure=node.getUnderlyingStructure();
    Media media=new Media(underlyingStructure);
    media.setMediums(node.getMediums());
    media.setBody(new GeneralBody(underlyingStructure,importedAst.getMembers()));
    media.configureParentToAllChilds();
    astManipulator.replaceInBody(node,media);
  }
 else {
    astManipulator.replaceInBody(node,importedAst.getChilds());
  }
}","public ASTCssNode importEncountered(Import node,LessSource source){
  String filename=conversionUtils.extractFilename(node.getUrlExpression(),problemsHandler);
  if (filename == null) {
    problemsHandler.errorWrongImport(node.getUrlExpression());
    return null;
  }
  String urlParams=""String_Node_Str"";
  int paramsIndx=filename.lastIndexOf(""String_Node_Str"");
  if (paramsIndx != -1) {
    urlParams=filename.substring(paramsIndx);
    filename=filename.substring(0,paramsIndx);
  }
  if (isCssFile(filename))   return null;
  filename=addLessSuffixIfNeeded(filename,urlParams);
  LessSource importedSource;
  try {
    importedSource=source.relativeSource(filename);
  }
 catch (  FileNotFound ex) {
    problemsHandler.errorFileNotFound(node,filename);
    return null;
  }
catch (  CannotReadFile e) {
    problemsHandler.errorFileCanNotBeRead(node,filename);
    return null;
  }
catch (  StringSourceException ex) {
    problemsHandler.warnLessImportNoBaseDirectory(node.getUrlExpression());
    return null;
  }
  if (isImportOnce(node) && alreadyVisited(importedSource)) {
    astManipulator.removeFromBody(node);
    return null;
  }
  importedSources.add(importedSource);
  String importedContent;
  try {
    importedContent=importedSource.getContent();
  }
 catch (  FileNotFound e) {
    problemsHandler.errorFileNotFound(node,filename);
    return null;
  }
catch (  CannotReadFile e) {
    problemsHandler.errorFileCanNotBeRead(node,filename);
    return null;
  }
  StyleSheet importedAst=parseContent(node,importedContent,importedSource);
  if (node.hasMediums()) {
    HiddenTokenAwareTree underlyingStructure=node.getUnderlyingStructure();
    StyleSheet result=new StyleSheet(underlyingStructure);
    Media media=new Media(underlyingStructure);
    result.addMember(media);
    media.setParent(result);
    media.setMediums(node.getMediums());
    GeneralBody mediaBody=new GeneralBody(underlyingStructure,importedAst.getMembers());
    media.setBody(mediaBody);
    media.configureParentToAllChilds();
    mediaBody.configureParentToAllChilds();
    astManipulator.replaceInBody(node,media);
    return result;
  }
 else {
    astManipulator.replaceInBody(node,importedAst.getChilds());
  }
  return importedAst;
}"
85758,"public void extendName(String extension){
  if (isStar) {
    isStar=false;
  }
  getElementName().extendName(extension);
}","public void extendName(String extension){
  if (isStar) {
    isStar=false;
  }
  if (hasElement()) {
    getElementName().extendName(extension);
  }
 else {
    setElementName(new InterpolableName(getUnderlyingStructure(),new FixedNamePart(getUnderlyingStructure(),extension)));
  }
}"
85759,"@Parameters(name=""String_Node_Str"") public static Collection<Object[]> allTestsParameters(){
  return createTestFileUtils().loadTestFiles(extendAllMatch1,extendAllMatch2,extendAllMultiple);
}","@Parameters(name=""String_Node_Str"") public static Collection<Object[]> allTestsParameters(){
  return createTestFileUtils().loadTestFiles(misc,extendAllMatch1,extendAllMatch2,extendAllMultiple);
}"
85760,"public StringSource(String content,String name){
  this.content=content;
  this.name=name;
}","public StringSource(String content,String name,URI uri){
  this.content=content;
  this.name=name;
  this.uri=uri;
}"
85761,"@Override public URI getURI(){
  return null;
}","@Override public URI getURI(){
  return uri;
}"
85762,"private void runAsMultimode(List<String> files,String outputDirectory,boolean generateSourceMap,boolean printPartial){
  if (!FileSystemUtils.ensureDirectory(outputDirectory,print))   return;
  for (  String filename : files) {
    File inputFile=new File(filename);
    String cssFilename=toOutputFilename(outputDirectory,filename,Constants.CSS_SUFFIX);
    String mapFilename=generateSourceMap ? toOutputFilename(outputDirectory,filename,Constants.SOURCE_MAP_SUFFIX) : null;
    try {
      CompilationResult content=compile(inputFile,toFile(cssFilename),generateSourceMap);
      print.printToFiles(content,filename,inputFile,cssFilename,mapFilename);
    }
 catch (    Less4jException ex) {
      CompilationResult partialResult=ex.getPartialResult();
      if (printPartial) {
        print.printToFiles(partialResult,filename,inputFile,cssFilename,mapFilename);
        print.reportErrors(ex,filename,inputFile);
      }
 else {
        print.reportErrorsAndWarnings(ex,filename,inputFile);
      }
      print.reportCouldNotCompileTheFile(filename);
    }
  }
}","private void runAsMultimode(List<String> files,String outputDirectory,boolean generateSourceMap,boolean printPartial){
  if (!FileSystemUtils.ensureDirectory(outputDirectory,print))   return;
  for (  String filename : files) {
    File inputFile=new File(filename);
    String cssFilename=toOutputFilename(outputDirectory,filename,Constants.CSS_SUFFIX);
    String mapFilename=generateSourceMap ? toOutputFilename(outputDirectory,filename,Constants.FULL_SOURCE_MAP_SUFFIX) : null;
    try {
      CompilationResult content=compile(inputFile,toFile(cssFilename),generateSourceMap);
      print.printToFiles(content,filename,inputFile,cssFilename,mapFilename);
    }
 catch (    Less4jException ex) {
      CompilationResult partialResult=ex.getPartialResult();
      if (printPartial) {
        print.printToFiles(partialResult,filename,inputFile,cssFilename,mapFilename);
        print.reportErrors(ex,filename,inputFile);
      }
 else {
        print.reportErrorsAndWarnings(ex,filename,inputFile);
      }
      print.reportCouldNotCompileTheFile(filename);
    }
  }
}"
85763,"private String singleModeMapFilename(String cssFileName,boolean generateSourceMap){
  return !generateSourceMap || cssFileName == null ? null : FileSystemUtils.changeSuffix(cssFileName,Constants.SOURCE_MAP_SUFFIX);
}","private String singleModeMapFilename(String cssFileName,boolean generateSourceMap){
  return !generateSourceMap || cssFileName == null ? null : FileSystemUtils.addSuffix(cssFileName,Constants.SOURCE_MAP_SUFFIX);
}"
85764,"private CompilationResult createCompilationResult(ASTCssNode cssStyleSheet,LessSource lessSource,Configuration options){
  LessSource cssDestination=options == null ? null : options.getCssResultLocation();
  CssPrinter builder=new CssPrinter(lessSource,cssDestination);
  builder.append(cssStyleSheet);
  String css=builder.toCss();
  String sourceMap=builder.toSourceMap();
  CompilationResult compilationResult=new CompilationResult(css,sourceMap,problemsHandler.getWarnings());
  return compilationResult;
}","private CompilationResult createCompilationResult(ASTCssNode cssStyleSheet,LessSource lessSource,Configuration options){
  LessSource cssDestination=options == null ? null : options.getCssResultLocation();
  if (cssDestination == null) {
    String guessedCssName=FileSystemUtils.changeSuffix(lessSource.getName(),Constants.CSS_SUFFIX);
    URI guessedURI=FileSystemUtils.changeSuffix(lessSource.getURI(),Constants.CSS_SUFFIX);
    cssDestination=new LessSource.StringSource(""String_Node_Str"",guessedCssName,guessedURI);
  }
  CssPrinter builder=new CssPrinter(lessSource,cssDestination);
  builder.append(cssStyleSheet);
  String css=builder.toCss();
  String sourceMap=builder.toSourceMap();
  CompilationResult compilationResult=new CompilationResult(css,sourceMap,problemsHandler.getWarnings());
  return compilationResult;
}"
85765,"public ASTCssNode compileToCss(StyleSheet less,LessSource source,Configuration options){
  resolveImports(less,source);
  resolveReferences(less);
  evaluateExpressions(less);
  bubbleAndMergeMedia(less);
  freeNestedRuleSets(less);
  removeUselessLessElements(less);
  sortTopLevelElements(less);
  removeUselessCharsets(less);
  handleSourceMapLink(less,options);
  validateFinalCss(less);
  return less;
}","public ASTCssNode compileToCss(StyleSheet less,LessSource source,Configuration options){
  resolveImports(less,source);
  resolveReferences(less);
  evaluateExpressions(less);
  bubbleAndMergeMedia(less);
  freeNestedRuleSets(less);
  removeUselessLessElements(less);
  sortTopLevelElements(less);
  removeUselessCharsets(less);
  handleSourceMapLink(less,options,source);
  validateFinalCss(less);
  return less;
}"
85766,"private void handleSourceMapLink(StyleSheet less,Configuration options){
  if (!options.shouldLinkSourceMap())   return;
  List<Comment> comments=less.getTrailingComments();
  if (!comments.isEmpty())   ArraysUtils.last(comments).setHasNewLine(true);
  String cssResultLocation=getCssResultLocationName(options);
  String url=FileSystemUtils.changeSuffix(cssResultLocation,Constants.SOURCE_MAP_SUFFIX);
  String commentTest=""String_Node_Str"" + url + ""String_Node_Str"";
  Comment linkComment=new Comment(less.getUnderlyingStructure(),commentTest,true);
  comments.add(linkComment);
}","private void handleSourceMapLink(StyleSheet less,Configuration options,LessSource source){
  String cssResultLocation=getCssResultLocationName(options,source);
  if (!options.shouldLinkSourceMap() || cssResultLocation == null)   return;
  List<Comment> comments=less.getTrailingComments();
  if (!comments.isEmpty())   ArraysUtils.last(comments).setHasNewLine(true);
  String url=FileSystemUtils.addSuffix(cssResultLocation,Constants.SOURCE_MAP_SUFFIX);
  String commentTest=""String_Node_Str"" + url + ""String_Node_Str"";
  Comment linkComment=new Comment(less.getUnderlyingStructure(),commentTest,true);
  comments.add(linkComment);
}"
85767,"private String getCssResultLocationName(Configuration options){
  LessSource location=options.getCssResultLocation();
  return location == null ? null : location.getName();
}","private String getCssResultLocationName(Configuration options,LessSource source){
  LessSource location=options.getCssResultLocation();
  String name=location == null ? null : location.getName();
  if (name == null)   name=FileSystemUtils.changeSuffix(source.getName(),Constants.CSS_SUFFIX);
  return name;
}"
85768,"public String toSourceMap(){
  String name=URIUtils.relativizeSourceURIs(lessSource,cssDestination);
  try {
    StringBuilder sb=new StringBuilder();
    generator.appendTo(sb,name);
    return sb.toString();
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}","public String toSourceMap(){
  String name=cssDestination.getName() == null ? ""String_Node_Str"" : cssDestination.getName();
  try {
    StringBuilder sb=new StringBuilder();
    generator.appendTo(sb,name);
    return sb.toString();
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}"
85769,"public SourceMapBuilder(ExtendedStringBuilder cssBuilder,LessSource lessSource,LessSource cssDestination){
  this.cssBuilder=cssBuilder;
  this.lessSource=lessSource;
  this.cssDestination=cssDestination;
  generator=SourceMapGeneratorFactory.getInstance(SourceMapFormat.V3);
}","public SourceMapBuilder(ExtendedStringBuilder cssBuilder,LessSource cssDestination){
  this.cssBuilder=cssBuilder;
  this.cssDestination=cssDestination;
  generator=SourceMapGeneratorFactory.getInstance(SourceMapFormat.V3);
}"
85770,"public CssPrinter(CssPrinter configureFromPrinter){
  this.lessSource=configureFromPrinter.lessSource;
  this.cssDestination=configureFromPrinter.cssDestination;
  this.cssOnly=new ExtendedStringBuilder(configureFromPrinter.cssOnly);
  this.cssAndSM=new SourceMapBuilder(cssOnly,lessSource,cssDestination);
}","public CssPrinter(CssPrinter configureFromPrinter){
  this.lessSource=configureFromPrinter.lessSource;
  this.cssDestination=configureFromPrinter.cssDestination;
  this.cssOnly=new ExtendedStringBuilder(configureFromPrinter.cssOnly);
  this.cssAndSM=new SourceMapBuilder(cssOnly,cssDestination);
}"
85771,"public static void main(String[] args) throws Less4jException {
  File inputLessFile=createFile(""String_Node_Str"",""String_Node_Str"");
  LessCompiler compiler=new ThreadUnsafeLessCompiler();
  CompilationResult compilationResult=compiler.compile(inputLessFile);
  System.out.println(compilationResult.getCss());
  for (  Problem warning : compilationResult.getWarnings()) {
    System.err.println(format(warning));
  }
  deleteFile(inputLessFile);
}","public static void main(String[] args) throws Less4jException {
  basicFileExample();
  customCssLocationExample1();
  customCssLocationExample2();
  guessedCssLocationExample1();
  guessedCssLocationExample2();
}"
85772,"@Test public void oneInputFile(){
  String lessFile=inputDir + ""String_Node_Str"";
  String cssFile=inputDir + ""String_Node_Str"";
  String mapFile=inputDir + ""String_Node_Str"";
  fileUtils.removeFile(cssFile);
  CommandLine.main(new String[]{""String_Node_Str"",lessFile});
  fileUtils.assertFileContent(cssFile,correctCss(""String_Node_Str""));
  fileUtils.assertFileNotExists(mapFile);
  assertNoErrors();
}","@Test public void oneInputFile(){
  String lessFile=inputDir + ""String_Node_Str"";
  String cssFile=inputDir + ""String_Node_Str"";
  String mapFile=inputDir + ""String_Node_Str"";
  fileUtils.removeFiles(cssFile,mapFile);
  CommandLine.main(new String[]{""String_Node_Str"",lessFile});
  fileUtils.assertFileContent(cssFile,correctCss(""String_Node_Str""));
  fileUtils.assertFileNotExists(mapFile);
  assertNoErrors();
}"
85773,"private void runAsMultimode(List<String> files,String outputDirectory,boolean generateSourceMap,boolean printPartial){
  if (!FileSystemUtils.ensureDirectory(outputDirectory,print))   return;
  for (  String filename : files) {
    File inputFile=new File(filename);
    String cssFilename=toOutputFilename(outputDirectory,filename,CSS_SUFFIX);
    String mapFilename=generateSourceMap ? toOutputFilename(outputDirectory,filename,SOURCE_MAP_SUFFIX) : null;
    try {
      CompilationResult content=compile(inputFile,toFile(cssFilename),generateSourceMap);
      print.printToFiles(content,filename,inputFile,cssFilename,mapFilename);
    }
 catch (    Less4jException ex) {
      CompilationResult partialResult=ex.getPartialResult();
      if (printPartial) {
        print.printToFiles(partialResult,filename,inputFile,cssFilename,mapFilename);
        print.reportErrors(ex,filename,inputFile);
      }
 else {
        print.reportErrorsAndWarnings(ex,filename,inputFile);
      }
      print.reportCouldNotCompileTheFile(filename);
    }
  }
}","private void runAsMultimode(List<String> files,String outputDirectory,boolean generateSourceMap,boolean printPartial){
  if (!FileSystemUtils.ensureDirectory(outputDirectory,print))   return;
  for (  String filename : files) {
    File inputFile=new File(filename);
    String cssFilename=toOutputFilename(outputDirectory,filename,Constants.CSS_SUFFIX);
    String mapFilename=generateSourceMap ? toOutputFilename(outputDirectory,filename,Constants.SOURCE_MAP_SUFFIX) : null;
    try {
      CompilationResult content=compile(inputFile,toFile(cssFilename),generateSourceMap);
      print.printToFiles(content,filename,inputFile,cssFilename,mapFilename);
    }
 catch (    Less4jException ex) {
      CompilationResult partialResult=ex.getPartialResult();
      if (printPartial) {
        print.printToFiles(partialResult,filename,inputFile,cssFilename,mapFilename);
        print.reportErrors(ex,filename,inputFile);
      }
 else {
        print.reportErrorsAndWarnings(ex,filename,inputFile);
      }
      print.reportCouldNotCompileTheFile(filename);
    }
  }
}"
85774,"private String singleModeMapFilename(String cssFileName,boolean generateSourceMap){
  return !generateSourceMap || cssFileName == null ? null : FileSystemUtils.changeSuffix(cssFileName,SOURCE_MAP_SUFFIX);
}","private String singleModeMapFilename(String cssFileName,boolean generateSourceMap){
  return !generateSourceMap || cssFileName == null ? null : FileSystemUtils.changeSuffix(cssFileName,Constants.SOURCE_MAP_SUFFIX);
}"
85775,"public static String changeSuffix(String filename,String dottedSuffix){
  int lastIndexOf=filename.lastIndexOf('.');
  if (lastIndexOf == -1)   return filename + dottedSuffix;
  return filename.substring(0,lastIndexOf) + dottedSuffix;
}","public static FileSource changeSuffix(FileSource source,String dottedSuffix){
  if (source == null)   return null;
  return new LessSource.FileSource(changeSuffix(source.getInputFile(),dottedSuffix));
}"
85776,"private CompilationResult doCompile(LessSource source,Configuration options) throws Less4jException {
  ANTLRParser.ParseResult result;
  try {
    result=parser.parseStyleSheet(source.getContent(),source);
  }
 catch (  FileNotFound ex) {
    throw new Less4jException(new GeneralProblem(""String_Node_Str"" + source + ""String_Node_Str""),new CompilationResult(null));
  }
catch (  CannotReadFile ex) {
    throw new Less4jException(new GeneralProblem(""String_Node_Str"" + source + ""String_Node_Str""),new CompilationResult(null));
  }
  if (result.hasErrors()) {
    CompilationResult compilationResult=new CompilationResult(""String_Node_Str"");
    throw new Less4jException(result.getErrors(),compilationResult);
  }
  StyleSheet lessStyleSheet=astBuilder.parse(result.getTree());
  ASTCssNode cssStyleSheet=compiler.compileToCss(lessStyleSheet,source);
  CompilationResult compilationResult=createCompilationResult(cssStyleSheet,source,options);
  return compilationResult;
}","private CompilationResult doCompile(LessSource source,Configuration options) throws Less4jException {
  if (options == null)   options=new Configuration();
  ANTLRParser.ParseResult result;
  try {
    result=parser.parseStyleSheet(source.getContent(),source);
  }
 catch (  FileNotFound ex) {
    throw new Less4jException(new GeneralProblem(""String_Node_Str"" + source + ""String_Node_Str""),new CompilationResult(null));
  }
catch (  CannotReadFile ex) {
    throw new Less4jException(new GeneralProblem(""String_Node_Str"" + source + ""String_Node_Str""),new CompilationResult(null));
  }
  if (result.hasErrors()) {
    CompilationResult compilationResult=new CompilationResult(""String_Node_Str"");
    throw new Less4jException(result.getErrors(),compilationResult);
  }
  StyleSheet lessStyleSheet=astBuilder.parse(result.getTree());
  ASTCssNode cssStyleSheet=compiler.compileToCss(lessStyleSheet,source,options);
  CompilationResult compilationResult=createCompilationResult(cssStyleSheet,source,options);
  return compilationResult;
}"
85777,"public ASTCssNode compileToCss(StyleSheet less,LessSource source){
  resolveImports(less,source);
  resolveReferences(less);
  evaluateExpressions(less);
  bubbleAndMergeMedia(less);
  freeNestedRuleSets(less);
  removeUselessLessElements(less);
  sortTopLevelElements(less);
  removeUselessCharsets(less);
  validateFinalCss(less);
  return less;
}","public ASTCssNode compileToCss(StyleSheet less,LessSource source,Configuration options){
  resolveImports(less,source);
  resolveReferences(less);
  evaluateExpressions(less);
  bubbleAndMergeMedia(less);
  freeNestedRuleSets(less);
  removeUselessLessElements(less);
  sortTopLevelElements(less);
  removeUselessCharsets(less);
  handleSourceMapLink(less,options);
  validateFinalCss(less);
  return less;
}"
85778,"private void handleIndentation(){
  if (onNewLine()) {
    onNewLine=false;
    for (int i=0; i < indentationLevel; i++) {
      builder.append(INDENTATION);
    }
  }
}","public void handleIndentation(){
  if (onNewLine()) {
    onNewLine=false;
    for (int i=0; i < indentationLevel; i++) {
      builder.append(INDENTATION);
    }
  }
}"
85779,"private void addNewLines(String string){
  line=line + string.split(Constants.NEW_LINE).length - 1;
}","private void addNewLines(String string){
  int addedLines=string.split(Constants.NEW_LINE).length - 1;
  if (string.endsWith(Constants.NEW_LINE))   addedLines++;
  line=line + addedLines;
}"
85780,"public int getColumn(){
  return builder.length() - builder.lastIndexOf(Constants.NEW_LINE);
}","public int getColumn(){
  int lastNewLine=builder.lastIndexOf(Constants.NEW_LINE);
  return builder.length() - (lastNewLine + 1);
}"
85781,"private void declarationsAreImportant(GeneralBody result){
  for (  ASTCssNode kid : result.getMembers()) {
    if (kid instanceof Declaration) {
      Declaration declaration=(Declaration)kid;
      declaration.setImportant(true);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void declarationsAreImportant(Body result){
  for (  ASTCssNode kid : result.getMembers()) {
    if (kid instanceof Declaration) {
      Declaration declaration=(Declaration)kid;
      declaration.setImportant(true);
    }
 else     if (kid instanceof BodyOwner<?>) {
      BodyOwner owner=(BodyOwner)kid;
      declarationsAreImportant(owner.getBody());
    }
  }
}"
85782,"public Set<ASTCssNodeType> getSupportedMembers(ASTCssNodeType bodyType,ASTCssNodeType ownerType){
switch (bodyType) {
case STYLE_SHEET:
    Set<ASTCssNodeType> result=allNodeTypes();
  result.remove(ASTCssNodeType.DECLARATION);
result.remove(ASTCssNodeType.PAGE_MARGIN_BOX);
return result;
}
if (ownerType == null) return allNodeTypes();
switch (ownerType) {
case VIEWPORT:
return createSet(ASTCssNodeType.DECLARATION);
case RULE_SET:
return createSet(ASTCssNodeType.DECLARATION);
case PAGE:
return createSet(ASTCssNodeType.DECLARATION,ASTCssNodeType.PAGE_MARGIN_BOX);
case PAGE_MARGIN_BOX:
return createSet(ASTCssNodeType.DECLARATION);
case MEDIA:
return createSet(ASTCssNodeType.RULE_SET);
case KEYFRAMES:
return createSet(ASTCssNodeType.RULE_SET);
default :
return allNodeTypes();
}
}","public Set<ASTCssNodeType> getSupportedMembers(ASTCssNodeType bodyType,ASTCssNodeType ownerType){
switch (bodyType) {
case STYLE_SHEET:
    Set<ASTCssNodeType> result=allNodeTypes();
  result.remove(ASTCssNodeType.DECLARATION);
result.remove(ASTCssNodeType.PAGE_MARGIN_BOX);
return result;
}
if (ownerType == null) return allNodeTypes();
switch (ownerType) {
case VIEWPORT:
return createSet(ASTCssNodeType.DECLARATION);
case RULE_SET:
return createSet(ASTCssNodeType.DECLARATION);
case PAGE:
return createSet(ASTCssNodeType.DECLARATION,ASTCssNodeType.PAGE_MARGIN_BOX);
case PAGE_MARGIN_BOX:
return createSet(ASTCssNodeType.DECLARATION);
case MEDIA:
return createSet(ASTCssNodeType.RULE_SET,ASTCssNodeType.PAGE);
case KEYFRAMES:
return createSet(ASTCssNodeType.RULE_SET);
default :
return allNodeTypes();
}
}"
85783,"private Expression buildFromColorHash(HiddenTokenAwareTree token,HiddenTokenAwareTree first){
  String text=first.getText();
  ColorExpression parsedColor=ConversionUtils.parseColor(token,text);
  if (parsedColor == null) {
    FaultyExpression faultyExpression=new FaultyExpression(token);
    problemsHandler.notAColor(faultyExpression,text);
  }
  return parsedColor;
}","private Expression buildFromColorHash(HiddenTokenAwareTree token,HiddenTokenAwareTree first){
  String text=first.getText();
  ColorExpression parsedColor=ConversionUtils.parseColor(token,text);
  if (parsedColor == null) {
    FaultyExpression faultyExpression=new FaultyExpression(token);
    problemsHandler.notAColor(faultyExpression,text);
    return faultyExpression;
  }
  return parsedColor;
}"
85784,"private void splitByComma(List<Expression> result,Expression expression){
  if (expression.getType() == ASTCssNodeType.COMPOSED_EXPRESSION) {
    ComposedExpression composed=(ComposedExpression)expression;
    result.addAll(composed.splitByComma());
  }
 else {
    result.add(expression);
  }
}","private List<Expression> splitByComma(Expression expression){
  if (expression.getType() == ASTCssNodeType.COMPOSED_EXPRESSION) {
    ComposedExpression composed=(ComposedExpression)expression;
    return composed.splitByComma();
  }
 else {
    return Arrays.asList(expression);
  }
}"
85785,"@Override public List<? extends ASTCssNode> getChilds(){
  List<ASTCssNode> result=ArraysUtils.asNonNullList((ASTCssNode)selector);
  result.addAll(positionalParameters);
  return result;
}","@Override public List<? extends ASTCssNode> getChilds(){
  List<ASTCssNode> result=ArraysUtils.asNonNullList((ASTCssNode)selector);
  result.addAll(positionalParameters);
  result.addAll(namedParameters.values());
  return result;
}"
85786,"private void doSolveReferences(ASTCssNode node,IteratedScope scope){
  ExpressionEvaluator expressionEvaluator=new ExpressionEvaluator(scope.getScope(),problemsHandler);
switch (node.getType()) {
case VARIABLE:
{
      Expression replacement=expressionEvaluator.evaluate((Variable)node);
      manipulator.replace(node,replacement);
      break;
    }
case INDIRECT_VARIABLE:
{
    Expression replacement=expressionEvaluator.evaluate((IndirectVariable)node);
    manipulator.replace(node,replacement);
    break;
  }
case MIXIN_REFERENCE:
{
  MixinReference mixinReference=(MixinReference)node;
  RuleSetsBody replacement=resolveMixinReference(mixinReference,scope.getScope());
  manipulator.replaceInBody(mixinReference,replacement.getChilds());
  break;
}
case NAMESPACE_REFERENCE:
{
NamespaceReference namespaceReference=(NamespaceReference)node;
RuleSetsBody replacement=resolveNamespaceReference(namespaceReference,scope.getScope());
manipulator.replaceInBody(namespaceReference,replacement.getChilds());
break;
}
case STRING_EXPRESSION:
{
CssString replacement=replaceInString((CssString)node,expressionEvaluator);
manipulator.replace(node,replacement);
break;
}
case ESCAPED_SELECTOR:
{
EscapedSelector replacement=interpolateEscapedSelector((EscapedSelector)node,expressionEvaluator);
manipulator.replace(node,replacement);
break;
}
case ESCAPED_VALUE:
{
EscapedValue replacement=interpolateEscapedValue((EscapedValue)node,expressionEvaluator);
manipulator.replace(node,replacement);
break;
}
case FIXED_NAME_PART:
{
FixedNamePart part=(FixedNamePart)node;
FixedNamePart replacement=interpolateFixedNamePart(part,expressionEvaluator);
part.getParent().replaceMember(part,replacement);
break;
}
case VARIABLE_NAME_PART:
{
VariableNamePart part=(VariableNamePart)node;
Expression value=expressionEvaluator.evaluate(part.getVariable());
FixedNamePart fixedName=toFixedName(value,node.getUnderlyingStructure());
part.getParent().replaceMember(part,interpolateFixedNamePart(fixedName,expressionEvaluator));
break;
}
}
if (node.getType() != ASTCssNodeType.NAMESPACE_REFERENCE && node.getType() != ASTCssNodeType.VARIABLE_NAME_PART) {
List<ASTCssNode> childs=new ArrayList<ASTCssNode>(node.getChilds());
for (ASTCssNode kid : childs) {
if (AstLogic.hasOwnScope(kid)) {
doSolveReferences(kid,new IteratedScope(scope.getNextChild()));
}
 else {
doSolveReferences(kid,scope);
}
}
}
}","private void doSolveReferences(ASTCssNode node,IteratedScope scope){
  ExpressionEvaluator expressionEvaluator=new ExpressionEvaluator(scope.getScope(),problemsHandler);
switch (node.getType()) {
case VARIABLE:
{
      Expression replacement=expressionEvaluator.evaluate((Variable)node);
      manipulator.replace(node,replacement);
      break;
    }
case INDIRECT_VARIABLE:
{
    Expression replacement=expressionEvaluator.evaluate((IndirectVariable)node);
    manipulator.replace(node,replacement);
    break;
  }
case STRING_EXPRESSION:
{
  Expression replacement=expressionEvaluator.evaluate((CssString)node);
  manipulator.replace(node,replacement);
  break;
}
case ESCAPED_VALUE:
{
Expression replacement=expressionEvaluator.evaluate((EscapedValue)node);
manipulator.replace(node,replacement);
break;
}
case MIXIN_REFERENCE:
{
MixinReference mixinReference=(MixinReference)node;
RuleSetsBody replacement=resolveMixinReference(mixinReference,scope.getScope());
manipulator.replaceInBody(mixinReference,replacement.getChilds());
break;
}
case NAMESPACE_REFERENCE:
{
NamespaceReference namespaceReference=(NamespaceReference)node;
RuleSetsBody replacement=resolveNamespaceReference(namespaceReference,scope.getScope());
manipulator.replaceInBody(namespaceReference,replacement.getChilds());
break;
}
case ESCAPED_SELECTOR:
{
EscapedSelector replacement=interpolateEscapedSelector((EscapedSelector)node,expressionEvaluator);
manipulator.replace(node,replacement);
break;
}
case FIXED_NAME_PART:
{
FixedNamePart part=(FixedNamePart)node;
FixedNamePart replacement=interpolateFixedNamePart(part,expressionEvaluator);
part.getParent().replaceMember(part,replacement);
break;
}
case VARIABLE_NAME_PART:
{
VariableNamePart part=(VariableNamePart)node;
Expression value=expressionEvaluator.evaluate(part.getVariable());
FixedNamePart fixedName=toFixedName(value,node.getUnderlyingStructure());
part.getParent().replaceMember(part,interpolateFixedNamePart(fixedName,expressionEvaluator));
break;
}
}
if (node.getType() != ASTCssNodeType.NAMESPACE_REFERENCE && node.getType() != ASTCssNodeType.VARIABLE_NAME_PART) {
List<ASTCssNode> childs=new ArrayList<ASTCssNode>(node.getChilds());
for (ASTCssNode kid : childs) {
if (AstLogic.hasOwnScope(kid)) {
doSolveReferences(kid,new IteratedScope(scope.getNextChild()));
}
 else {
doSolveReferences(kid,scope);
}
}
}
}"
85787,"private void convertComments(ASTCssNode node){
  inheritCommentsFromToken(node);
  for (  ASTCssNode kid : node.getChilds()) {
    if (kid == null)     System.out.println(node);
    convertComments(kid);
  }
}","private void convertComments(ASTCssNode node){
  inheritCommentsFromToken(node);
  for (  ASTCssNode kid : node.getChilds()) {
    convertComments(kid);
  }
}"
85788,"public ReusableStructure(HiddenTokenAwareTree token,ElementSubsequent className){
  this(token);
  selectors=Arrays.asList(className);
}","public ReusableStructure(HiddenTokenAwareTree token,List<ElementSubsequent> selectors){
  this(token);
  this.selectors=selectors;
}"
85789,"public boolean usableAsReusableStructure(){
  return hasSingleClassSelector() || hasSingleIdSelector();
}","public boolean usableAsReusableStructure(){
  for (  Selector selector : selectors) {
    if (isReusableSelector(selector))     return true;
  }
  return false;
}"
85790,"/** 
 * Behavior of this method is undefined if it is not mixin.
 * @return 
 */
public ReusableStructure convertToReusableStructure(){
  if (!usableAsReusableStructure())   throw new BugHappened(""String_Node_Str"",this);
  SimpleSelector head=(SimpleSelector)selectors.get(0).getHead();
  ElementSubsequent className=(ElementSubsequent)head.getSubsequent().get(0);
  ReusableStructure reusable=new ReusableStructure(getUnderlyingStructure(),className.clone());
  reusable.setBody(getBody().clone());
  reusable.configureParentToAllChilds();
  return reusable;
}","/** 
 * Behavior of this method is undefined if it is not mixin.
 * @return 
 */
public ReusableStructure convertToReusableStructure(){
  if (!usableAsReusableStructure())   throw new BugHappened(""String_Node_Str"",this);
  List<ElementSubsequent> reusableSelectors=new ArrayList<ElementSubsequent>();
  for (  Selector selector : selectors)   if (isReusableSelector(selector)) {
    SimpleSelector head=(SimpleSelector)selector.getHead();
    ElementSubsequent className=(ElementSubsequent)head.getSubsequent().get(0);
    reusableSelectors.add(className.clone());
  }
  ReusableStructure reusable=new ReusableStructure(getUnderlyingStructure(),reusableSelectors);
  reusable.setBody(getBody().clone());
  reusable.configureParentToAllChilds();
  return reusable;
}"
85791,"private Expression subtract(Expression first,double red1,double green1,double blue1,double red2,double green2,double blue2,HiddenTokenAwareTree parentToken){
  if (first.getType() == ASTCssNodeType.NUMBER) {
    problemsHandler.substractOrDiveColorFromNumber(first);
    return new FaultyExpression(first);
  }
  return createResultColor(parentToken,round(red1 - red2),round(green1 - green2),round(blue1 - blue2));
}","private Expression subtract(Expression first,double red1,double green1,double blue1,double red2,double green2,double blue2,HiddenTokenAwareTree parentToken){
  if (first.getType() == ASTCssNodeType.NUMBER) {
    problemsHandler.subtractOrDiveColorFromNumber(first);
    return new FaultyExpression(first);
  }
  return createResultColor(parentToken,round(red1 - red2),round(green1 - green2),round(blue1 - blue2));
}"
85792,"private Expression divide(Expression first,double red1,double green1,double blue1,double red2,double green2,double blue2,HiddenTokenAwareTree parentToken){
  if (first.getType() == ASTCssNodeType.NUMBER) {
    problemsHandler.substractOrDiveColorFromNumber(first);
    return new FaultyExpression(first);
  }
  return createResultColor(parentToken,round(red1 / red2),round(green1 / green2),round(blue1 / blue2));
}","private Expression divide(Expression first,double red1,double green1,double blue1,double red2,double green2,double blue2,HiddenTokenAwareTree parentToken){
  if (first.getType() == ASTCssNodeType.NUMBER) {
    problemsHandler.subtractOrDiveColorFromNumber(first);
    return new FaultyExpression(first);
  }
  return createResultColor(parentToken,round(red1 / red2),round(green1 / green2),round(blue1 / blue2));
}"
85793,"private void evaluateExpressions(ASTCssNode node){
  ASTManipulator manipulator=new ASTManipulator();
  ExpressionEvaluator expressionEvaluator=new ExpressionEvaluator(null);
  if (node instanceof Expression) {
    Expression value=expressionEvaluator.evaluate((Expression)node);
    manipulator.replace(node,value);
  }
 else {
    List<? extends ASTCssNode> childs=node.getChilds();
    for (    ASTCssNode kid : childs) {
switch (kid.getType()) {
case MEDIA_EXPRESSION:
        evaluateInMediaExpressions((MediaExpression)kid);
      break;
case DECLARATION:
    evaluateInDeclaration((Declaration)kid);
  break;
default :
evaluateExpressions(kid);
break;
}
}
}
}","private void evaluateExpressions(ASTCssNode node){
  ASTManipulator manipulator=new ASTManipulator();
  ExpressionEvaluator expressionEvaluator=new ExpressionEvaluator();
  if (node instanceof Expression) {
    Expression value=expressionEvaluator.evaluate((Expression)node);
    manipulator.replace(node,value);
  }
 else {
    List<? extends ASTCssNode> childs=node.getChilds();
    for (    ASTCssNode kid : childs) {
switch (kid.getType()) {
case MEDIA_EXPRESSION:
        evaluateInMediaExpressions((MediaExpression)kid);
      break;
case DECLARATION:
    evaluateInDeclaration((Declaration)kid);
  break;
default :
evaluateExpressions(kid);
break;
}
}
}
}"
85794,"public ExpressionEvaluator(Scope scope){
  super();
  this.scope=scope;
}","public ExpressionEvaluator(Scope scope){
  super();
  this.scope=scope == null ? new NullScope() : scope;
}"
85795,"private Scope buildScope(ASTCssNode node){
  boolean hasOwnScope=AstLogic.hasOwnScope(node);
  if (hasOwnScope)   increaseScope(node);
  String representedNamespace=representedNamedScope(node);
  if (representedNamespace != null) {
    nextChildScopeName=representedNamespace;
  }
  List<? extends ASTCssNode> childs=new ArrayList<ASTCssNode>(node.getChilds());
  for (  ASTCssNode kid : childs) {
    buildScope(kid);
    if (kid.getType() == ASTCssNodeType.VARIABLE_DECLARATION) {
      currentScope.registerVariable((VariableDeclaration)kid);
    }
 else     if (kid.getType() == ASTCssNodeType.PURE_MIXIN) {
      PureMixin mixin=(PureMixin)kid;
      Scope bodyScope=currentScope.getChildOwnerOf(mixin.getBody());
      currentScope.registerMixin(mixin,bodyScope);
    }
 else     if (kid.getType() == ASTCssNodeType.RULE_SET) {
      RuleSet ruleSet=(RuleSet)kid;
      if (ruleSet.isMixin()) {
        Scope bodyScope=currentScope.getChildOwnerOf(ruleSet.getBody());
        currentScope.registerMixin(ruleSet.convertToMixin(),bodyScope);
      }
    }
  }
  Scope result=currentScope;
  if (hasOwnScope)   decreaseScope();
  return result;
}","private Scope buildScope(ASTCssNode node){
  boolean hasOwnScope=AstLogic.hasOwnScope(node);
  if (hasOwnScope)   increaseScope(node);
  String representedNamespace=representedNamedScope(node);
  if (representedNamespace != null) {
    nextChildScopeName=representedNamespace;
  }
  List<? extends ASTCssNode> childs=new ArrayList<ASTCssNode>(node.getChilds());
  for (  ASTCssNode kid : childs) {
    buildScope(kid);
    if (kid.getType() == ASTCssNodeType.VARIABLE_DECLARATION) {
      currentScope.registerVariable((VariableDeclaration)kid);
      manipulator.removeFromBody(kid);
    }
 else     if (kid.getType() == ASTCssNodeType.PURE_MIXIN) {
      PureMixin mixin=(PureMixin)kid;
      Scope bodyScope=currentScope.getChildOwnerOf(mixin.getBody());
      currentScope.registerMixin(mixin,bodyScope);
      bodyScope.removedFromTree();
      manipulator.removeFromBody(kid);
    }
 else     if (kid.getType() == ASTCssNodeType.RULE_SET) {
      RuleSet ruleSet=(RuleSet)kid;
      if (ruleSet.isMixin()) {
        Scope bodyScope=currentScope.getChildOwnerOf(ruleSet.getBody());
        currentScope.registerMixin(ruleSet.convertToMixin(),bodyScope);
      }
    }
 else     if (kid.getType() == ASTCssNodeType.PURE_NAMESPACE) {
      PureNamespace namespace=(PureNamespace)kid;
      Scope bodyScope=currentScope.getChildOwnerOf(namespace.getBody());
      bodyScope.removedFromTree();
      manipulator.removeFromBody(kid);
    }
  }
  Scope result=currentScope;
  if (hasOwnScope)   decreaseScope();
  return result;
}"
85796,"public Scope extractScope(ASTCssNode node){
  Scope result=buildScope(node);
  removeUsedNodes(node,result);
  return result;
}","public Scope extractScope(ASTCssNode node){
  Scope result=buildScope(node);
  return result;
}"
85797,"/** 
 * Behavior of this method is undefined if it is not mixin.
 * @return 
 */
public PureMixin convertToMixin(){
  CssClass className=(CssClass)selectors.get(0).getHead().getSubsequent().get(0);
  PureMixin pureMixin=new PureMixin(getUnderlyingStructure(),className.clone());
  pureMixin.setBody(getBody().clone());
  pureMixin.getBody().setParent(pureMixin);
  pureMixin.getSelector().setParent(pureMixin);
  return pureMixin;
}","/** 
 * Behavior of this method is undefined if it is not mixin.
 * @return 
 */
public PureMixin convertToMixin(){
  CssClass className=(CssClass)selectors.get(0).getHead().getSubsequent().get(0);
  PureMixin pureMixin=new PureMixin(getUnderlyingStructure(),className.clone());
  pureMixin.setBody(getBody().clone());
  pureMixin.configureParentToAllChilds();
  return pureMixin;
}"
85798,"public boolean isMixin(){
  if (selectors == null || selectors.size() != 1)   return false;
  SimpleSelector selector=selectors.get(0).getHead();
  return selector.isSingleClassSelector();
}","public boolean isMixin(){
  if (selectors == null || selectors.size() != 1)   return false;
  Selector first=selectors.get(0);
  if (first.isCombined())   return false;
  SimpleSelector selector=first.getHead();
  return selector.isSingleClassSelector();
}"
85799,"public void addDeclaration(AbstractVariableDeclaration node,Expression replacementValue){
  variablesScope.peek().put(node.getVariable().getName(),replacementValue);
}","public void addDeclaration(Map<String,Expression> variablesState,ArgumentDeclaration node,Expression replacementValue){
  variablesState.put(node.getVariable().getName(),replacementValue);
}"
85800,"public boolean isInPureMixin(){
  return mixinsStack.isEmpty();
}","public boolean isInPureMixin(){
  return !mixinsStack.isEmpty();
}"
85801,"public boolean isTurnedOn(){
  return activeEngine == calculatingEngine;
}","private boolean isTurnedOn(){
  return activeEngine == calculatingEngine;
}"
85802,"public void turnOnEvaluation(){
  activeEngine=calculatingEngine;
}","public boolean turnOnEvaluation(){
  boolean previousState=isTurnedOn();
  activeEngine=calculatingEngine;
  return previousState;
}"
85803,"private void initializeMixinVariableScope(MixinReference reference,MixinWithScope mixin){
  activeScope.enterMixinVariableScope(mixin.getVariablesUponDefinition());
  int length=mixin.getMixin().getParameters().size();
  for (int i=0; i < length; i++) {
    ASTCssNode parameter=mixin.getMixin().getParameters().get(i);
    if (parameter.getType() == ASTCssNodeType.ARGUMENT_DECLARATION) {
      ArgumentDeclaration declaration=(ArgumentDeclaration)parameter;
      if (reference.hasParameter(i)) {
        activeScope.addDeclaration(declaration,reference.getParameter(i));
      }
 else {
        if (declaration.getValue() == null)         CompileException.throwUndefinedMixinParameterValue(mixin.getMixin(),declaration,reference);
        activeScope.addDeclaration(declaration);
      }
    }
  }
}","private void initializeMixinVariableScope(MixinReference reference,MixinWithScope mixin){
  Map<String,Expression> variableState=mixin.getVariablesUponDefinition();
  int length=mixin.getMixin().getParameters().size();
  for (int i=0; i < length; i++) {
    ASTCssNode parameter=mixin.getMixin().getParameters().get(i);
    if (parameter.getType() == ASTCssNodeType.ARGUMENT_DECLARATION) {
      ArgumentDeclaration declaration=(ArgumentDeclaration)parameter;
      if (reference.hasParameter(i)) {
        Expression value=expressionEvaluator.evaluate(reference.getParameter(i));
        activeScope.addDeclaration(variableState,declaration,value);
      }
 else {
        if (declaration.getValue() == null)         CompileException.throwUndefinedMixinParameterValue(mixin.getMixin(),declaration,reference);
        activeScope.addDeclaration(variableState,declaration);
      }
    }
  }
  activeScope.enterMixinVariableScope(variableState);
}"
85804,"private RuleSetsBody solveVariablesAndMixinsInMixin(PureMixin mixin){
  boolean evaluatorOn=expressionEvaluator.isTurnedOn();
  expressionEvaluator.turnOnEvaluation();
  if (!expressionEvaluator.evaluate(mixin.getGuards())) {
    List<ASTCssNode> emptyList=Collections.emptyList();
    return new RuleSetsBody(mixin.getUnderlyingStructure(),emptyList);
  }
  RuleSetsBody body=mixin.getBody().clone();
  solveVariablesAndMixins(body);
  if (!evaluatorOn)   expressionEvaluator.turnOffEvaluation();
  return body;
}","private RuleSetsBody solveVariablesAndMixinsInMixin(PureMixin mixin){
  if (!expressionEvaluator.evaluate(mixin.getGuards())) {
    List<ASTCssNode> emptyList=Collections.emptyList();
    return new RuleSetsBody(mixin.getUnderlyingStructure(),emptyList);
  }
  RuleSetsBody body=mixin.getBody().clone();
  solveVariablesAndMixins(body);
  return body;
}"
85805,"private RuleSetsBody resolveMixinReference(MixinReference reference){
  List<MixinWithScope> matchingMixins=activeScope.getAllMatchingMixins(reference);
  RuleSetsBody result=new RuleSetsBody(reference.getUnderlyingStructure());
  for (  MixinWithScope mixin : matchingMixins) {
    initializeMixinVariableScope(reference,mixin);
    RuleSetsBody body=solveVariablesAndMixinsInMixin(mixin.getMixin());
    result.addMembers(body.getChilds());
    activeScope.leaveMixinVariableScope();
  }
  if (reference.isImportant()) {
    declarationsAreImportant(result);
  }
  return result;
}","private RuleSetsBody resolveMixinReference(MixinReference reference){
  List<MixinWithScope> matchingMixins=activeScope.getAllMatchingMixins(reference);
  RuleSetsBody result=new RuleSetsBody(reference.getUnderlyingStructure());
  for (  MixinWithScope mixin : matchingMixins) {
    boolean evaluatorOn=expressionEvaluator.turnOnEvaluation();
    initializeMixinVariableScope(reference,mixin);
    RuleSetsBody body=solveVariablesAndMixinsInMixin(mixin.getMixin());
    result.addMembers(body.getChilds());
    activeScope.leaveMixinVariableScope();
    if (!evaluatorOn)     expressionEvaluator.turnOffEvaluation();
  }
  if (reference.isImportant()) {
    declarationsAreImportant(result);
  }
  return result;
}"
85806,"private ParseResult parse(String input,InputType inputType){
  try {
    List<AntlrException> errors=new ArrayList<AntlrException>();
    LessLexer lexer=createLexer(input,errors);
    CollectorTokenSource tokenSource=new CollectorTokenSource(lexer,KEEP_HIDDEN_TOKENS);
    LessParser parser=createParser(tokenSource,errors);
    ParserRuleReturnScope returnScope=inputType.parseTree(parser);
    HiddenTokenAwareTree ast=(HiddenTokenAwareTree)returnScope.getTree();
    merge(ast,tokenSource.getCollectedTokens());
    DebugPrint.print(ast);
    return new ParseResultImpl(ast,new ArrayList<AntlrException>(errors));
  }
 catch (  RecognitionException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","private ParseResult parse(String input,InputType inputType){
  try {
    List<AntlrException> errors=new ArrayList<AntlrException>();
    LessLexer lexer=createLexer(input,errors);
    CollectorTokenSource tokenSource=new CollectorTokenSource(lexer,KEEP_HIDDEN_TOKENS);
    LessParser parser=createParser(tokenSource,errors);
    ParserRuleReturnScope returnScope=inputType.parseTree(parser);
    HiddenTokenAwareTree ast=(HiddenTokenAwareTree)returnScope.getTree();
    merge(ast,tokenSource.getCollectedTokens());
    return new ParseResultImpl(ast,new ArrayList<AntlrException>(errors));
  }
 catch (  RecognitionException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}"
85807,"@Parameters() public static Collection<Object[]> allTestsParameters(){
  return (new TestFileUtils()).loadTestFiles(standardCases,lessjsIncompatible);
}","@Parameters() public static Collection<Object[]> allTestsParameters(){
  return (new TestFileUtils()).loadTestFiles(standardCases,lessjsIncompatible,lessjsTests);
}"
85808,"/** 
 * Returns the flag that, if <code>true</code>, causes the whiskers to be drawn using the series outline paint.
 * @return A boolean.
 * @since 1.0.14
 */
public boolean getUseOutlinePaintForWhiskers(){
  return this.useOutlinePaintForWhiskers;
}","/** 
 * Returns the flag that, if   {@code true}, causes the whiskers to be drawn using the series outline paint.
 * @return A boolean.
 * @since 1.0.14
 */
public boolean getUseOutlinePaintForWhiskers(){
  return this.useOutlinePaintForWhiskers;
}"
85809,"/** 
 * Sets the flag that, if <code>true</code>, causes the whiskers to be drawn using the series outline paint, and sends a  {@link RendererChangeEvent} to all registered listeners.
 * @param flag  the new flag value.
 * @since 1.0.14
 */
public void setUseOutlinePaintForWhiskers(boolean flag){
  if (this.useOutlinePaintForWhiskers == flag) {
    return;
  }
  this.useOutlinePaintForWhiskers=flag;
  fireChangeEvent();
}","/** 
 * Sets the flag that, if   {@code true}, causes the whiskers to be drawn using the series outline paint, and sends a  {@link RendererChangeEvent} to all registered listeners.
 * @param flag  the new flag value.
 * @since 1.0.14
 */
public void setUseOutlinePaintForWhiskers(boolean flag){
  if (this.useOutlinePaintForWhiskers == flag) {
    return;
  }
  this.useOutlinePaintForWhiskers=flag;
  fireChangeEvent();
}"
85810,"/** 
 * Draws the visual representation of a single data item when the plot has a horizontal orientation.
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the area within which the plot is being drawn.
 * @param plot  the plot (can be used to obtain standard colorinformation etc).
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the dataset (must be an instance of{@link BoxAndWhiskerCategoryDataset}).
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 */
public void drawHorizontalItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column){
  BoxAndWhiskerCategoryDataset bawDataset=(BoxAndWhiskerCategoryDataset)dataset;
  double categoryEnd=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());
  double categoryStart=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());
  double categoryWidth=Math.abs(categoryEnd - categoryStart);
  double yy=categoryStart;
  int seriesCount=getRowCount();
  int categoryCount=getColumnCount();
  if (seriesCount > 1) {
    double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));
    double usedWidth=(state.getBarWidth() * seriesCount) + (seriesGap * (seriesCount - 1));
    double offset=(categoryWidth - usedWidth) / 2;
    yy=yy + offset + (row * (state.getBarWidth() + seriesGap));
  }
 else {
    double offset=(categoryWidth - state.getBarWidth()) / 2;
    yy=yy + offset;
  }
  g2.setPaint(getItemPaint(row,column));
  Stroke s=getItemStroke(row,column);
  g2.setStroke(s);
  RectangleEdge location=plot.getRangeAxisEdge();
  Number xQ1=bawDataset.getQ1Value(row,column);
  Number xQ3=bawDataset.getQ3Value(row,column);
  Number xMax=bawDataset.getMaxRegularValue(row,column);
  Number xMin=bawDataset.getMinRegularValue(row,column);
  Shape box=null;
  if (xQ1 != null && xQ3 != null && xMax != null && xMin != null) {
    double xxQ1=rangeAxis.valueToJava2D(xQ1.doubleValue(),dataArea,location);
    double xxQ3=rangeAxis.valueToJava2D(xQ3.doubleValue(),dataArea,location);
    double xxMax=rangeAxis.valueToJava2D(xMax.doubleValue(),dataArea,location);
    double xxMin=rangeAxis.valueToJava2D(xMin.doubleValue(),dataArea,location);
    double yymid=yy + state.getBarWidth() / 2.0;
    double halfW=(state.getBarWidth() / 2.0) * this.whiskerWidth;
    box=new Rectangle2D.Double(Math.min(xxQ1,xxQ3),yy,Math.abs(xxQ1 - xxQ3),state.getBarWidth());
    if (this.fillBox) {
      g2.fill(box);
    }
    Paint outlinePaint=getItemOutlinePaint(row,column);
    if (this.useOutlinePaintForWhiskers) {
      g2.setPaint(outlinePaint);
    }
    g2.draw(new Line2D.Double(xxMax,yymid,xxQ3,yymid));
    g2.draw(new Line2D.Double(xxMax,yymid - halfW,xxMax,yymid + halfW));
    g2.draw(new Line2D.Double(xxMin,yymid,xxQ1,yymid));
    g2.draw(new Line2D.Double(xxMin,yymid - halfW,xxMin,yy + halfW));
    g2.setStroke(getItemOutlineStroke(row,column));
    g2.setPaint(outlinePaint);
    g2.draw(box);
  }
  g2.setPaint(this.artifactPaint);
  double aRadius;
  if (this.meanVisible) {
    Number xMean=bawDataset.getMeanValue(row,column);
    if (xMean != null) {
      double xxMean=rangeAxis.valueToJava2D(xMean.doubleValue(),dataArea,location);
      aRadius=state.getBarWidth() / 4;
      if ((xxMean > (dataArea.getMinX() - aRadius)) && (xxMean < (dataArea.getMaxX() + aRadius))) {
        Ellipse2D.Double avgEllipse=new Ellipse2D.Double(xxMean - aRadius,yy + aRadius,aRadius * 2,aRadius * 2);
        g2.fill(avgEllipse);
        g2.draw(avgEllipse);
      }
    }
  }
  if (this.medianVisible) {
    Number xMedian=bawDataset.getMedianValue(row,column);
    if (xMedian != null) {
      double xxMedian=rangeAxis.valueToJava2D(xMedian.doubleValue(),dataArea,location);
      g2.draw(new Line2D.Double(xxMedian,yy,xxMedian,yy + state.getBarWidth()));
    }
  }
  if (state.getInfo() != null && box != null) {
    EntityCollection entities=state.getEntityCollection();
    if (entities != null) {
      addItemEntity(entities,dataset,row,column,box);
    }
  }
}","/** 
 * Draws the visual representation of a single data item when the plot has a horizontal orientation.
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the area within which the plot is being drawn.
 * @param plot  the plot (can be used to obtain standard colorinformation etc).
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the dataset (must be an instance of{@link BoxAndWhiskerCategoryDataset}).
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 */
public void drawHorizontalItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column){
  BoxAndWhiskerCategoryDataset bawDataset=(BoxAndWhiskerCategoryDataset)dataset;
  double categoryEnd=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());
  double categoryStart=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());
  double categoryWidth=Math.abs(categoryEnd - categoryStart);
  double yy=categoryStart;
  int seriesCount=getRowCount();
  int categoryCount=getColumnCount();
  if (seriesCount > 1) {
    double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));
    double usedWidth=(state.getBarWidth() * seriesCount) + (seriesGap * (seriesCount - 1));
    double offset=(categoryWidth - usedWidth) / 2;
    yy=yy + offset + (row * (state.getBarWidth() + seriesGap));
  }
 else {
    double offset=(categoryWidth - state.getBarWidth()) / 2;
    yy=yy + offset;
  }
  g2.setPaint(getItemPaint(row,column));
  Stroke s=getItemStroke(row,column);
  g2.setStroke(s);
  RectangleEdge location=plot.getRangeAxisEdge();
  Number xQ1=bawDataset.getQ1Value(row,column);
  Number xQ3=bawDataset.getQ3Value(row,column);
  Number xMax=bawDataset.getMaxRegularValue(row,column);
  Number xMin=bawDataset.getMinRegularValue(row,column);
  Shape box=null;
  if (xQ1 != null && xQ3 != null && xMax != null && xMin != null) {
    double xxQ1=rangeAxis.valueToJava2D(xQ1.doubleValue(),dataArea,location);
    double xxQ3=rangeAxis.valueToJava2D(xQ3.doubleValue(),dataArea,location);
    double xxMax=rangeAxis.valueToJava2D(xMax.doubleValue(),dataArea,location);
    double xxMin=rangeAxis.valueToJava2D(xMin.doubleValue(),dataArea,location);
    double yymid=yy + state.getBarWidth() / 2.0;
    double halfW=(state.getBarWidth() / 2.0) * this.whiskerWidth;
    box=new Rectangle2D.Double(Math.min(xxQ1,xxQ3),yy,Math.abs(xxQ1 - xxQ3),state.getBarWidth());
    if (this.fillBox) {
      g2.fill(box);
    }
    Paint outlinePaint=getItemOutlinePaint(row,column);
    if (this.useOutlinePaintForWhiskers) {
      g2.setPaint(outlinePaint);
    }
    g2.draw(new Line2D.Double(xxMax,yymid,xxQ3,yymid));
    g2.draw(new Line2D.Double(xxMax,yymid - halfW,xxMax,yymid + halfW));
    g2.draw(new Line2D.Double(xxMin,yymid,xxQ1,yymid));
    g2.draw(new Line2D.Double(xxMin,yymid - halfW,xxMin,yymid + halfW));
    g2.setStroke(getItemOutlineStroke(row,column));
    g2.setPaint(outlinePaint);
    g2.draw(box);
  }
  g2.setPaint(this.artifactPaint);
  double aRadius;
  if (this.meanVisible) {
    Number xMean=bawDataset.getMeanValue(row,column);
    if (xMean != null) {
      double xxMean=rangeAxis.valueToJava2D(xMean.doubleValue(),dataArea,location);
      aRadius=state.getBarWidth() / 4;
      if ((xxMean > (dataArea.getMinX() - aRadius)) && (xxMean < (dataArea.getMaxX() + aRadius))) {
        Ellipse2D.Double avgEllipse=new Ellipse2D.Double(xxMean - aRadius,yy + aRadius,aRadius * 2,aRadius * 2);
        g2.fill(avgEllipse);
        g2.draw(avgEllipse);
      }
    }
  }
  if (this.medianVisible) {
    Number xMedian=bawDataset.getMedianValue(row,column);
    if (xMedian != null) {
      double xxMedian=rangeAxis.valueToJava2D(xMedian.doubleValue(),dataArea,location);
      g2.draw(new Line2D.Double(xxMedian,yy,xxMedian,yy + state.getBarWidth()));
    }
  }
  if (state.getInfo() != null && box != null) {
    EntityCollection entities=state.getEntityCollection();
    if (entities != null) {
      addItemEntity(entities,dataset,row,column,box);
    }
  }
}"
85811,"/** 
 * Returns the paint used to color the median and average markers.
 * @return The paint used to draw the median and average markers (never<code>null</code>).
 * @see #setArtifactPaint(Paint)
 */
public Paint getArtifactPaint(){
  return this.artifactPaint;
}","/** 
 * Returns the paint used to color the median and average markers.
 * @return The paint used to draw the median and average markers (never{@code null}).
 * @see #setArtifactPaint(Paint)
 */
public Paint getArtifactPaint(){
  return this.artifactPaint;
}"
85812,"/** 
 * Returns a legend item for a series.
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 * @return The legend item (possibly <code>null</code>).
 */
@Override public LegendItem getLegendItem(int datasetIndex,int series){
  CategoryPlot cp=getPlot();
  if (cp == null) {
    return null;
  }
  if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {
    return null;
  }
  CategoryDataset dataset=cp.getDataset(datasetIndex);
  String label=getLegendItemLabelGenerator().generateLabel(dataset,series);
  String description=label;
  String toolTipText=null;
  if (getLegendItemToolTipGenerator() != null) {
    toolTipText=getLegendItemToolTipGenerator().generateLabel(dataset,series);
  }
  String urlText=null;
  if (getLegendItemURLGenerator() != null) {
    urlText=getLegendItemURLGenerator().generateLabel(dataset,series);
  }
  Shape shape=lookupLegendShape(series);
  Paint paint=lookupSeriesPaint(series);
  Paint outlinePaint=lookupSeriesOutlinePaint(series);
  Stroke outlineStroke=lookupSeriesOutlineStroke(series);
  LegendItem result=new LegendItem(label,description,toolTipText,urlText,shape,paint,outlineStroke,outlinePaint);
  result.setLabelFont(lookupLegendTextFont(series));
  Paint labelPaint=lookupLegendTextPaint(series);
  if (labelPaint != null) {
    result.setLabelPaint(labelPaint);
  }
  result.setDataset(dataset);
  result.setDatasetIndex(datasetIndex);
  result.setSeriesKey(dataset.getRowKey(series));
  result.setSeriesIndex(series);
  return result;
}","/** 
 * Returns a legend item for a series.
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 * @return The legend item (possibly {@code null}).
 */
@Override public LegendItem getLegendItem(int datasetIndex,int series){
  CategoryPlot cp=getPlot();
  if (cp == null) {
    return null;
  }
  if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {
    return null;
  }
  CategoryDataset dataset=cp.getDataset(datasetIndex);
  String label=getLegendItemLabelGenerator().generateLabel(dataset,series);
  String description=label;
  String toolTipText=null;
  if (getLegendItemToolTipGenerator() != null) {
    toolTipText=getLegendItemToolTipGenerator().generateLabel(dataset,series);
  }
  String urlText=null;
  if (getLegendItemURLGenerator() != null) {
    urlText=getLegendItemURLGenerator().generateLabel(dataset,series);
  }
  Shape shape=lookupLegendShape(series);
  Paint paint=lookupSeriesPaint(series);
  Paint outlinePaint=lookupSeriesOutlinePaint(series);
  Stroke outlineStroke=lookupSeriesOutlineStroke(series);
  LegendItem result=new LegendItem(label,description,toolTipText,urlText,shape,paint,outlineStroke,outlinePaint);
  result.setLabelFont(lookupLegendTextFont(series));
  Paint labelPaint=lookupLegendTextPaint(series);
  if (labelPaint != null) {
    result.setLabelPaint(labelPaint);
  }
  result.setDataset(dataset);
  result.setDatasetIndex(datasetIndex);
  result.setSeriesKey(dataset.getRowKey(series));
  result.setSeriesIndex(series);
  return result;
}"
85813,"/** 
 * Sets the paint used to color the median and average markers and sends a   {@link RendererChangeEvent} to all registered listeners.
 * @param paint  the paint (<code>null</code> not permitted).
 * @see #getArtifactPaint()
 */
public void setArtifactPaint(Paint paint){
  if (paint == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.artifactPaint=paint;
  fireChangeEvent();
}","/** 
 * Sets the paint used to color the median and average markers and sends a   {@link RendererChangeEvent} to all registered listeners.
 * @param paint  the paint ({@code null} not permitted).
 * @see #getArtifactPaint()
 */
public void setArtifactPaint(Paint paint){
  ParamChecks.nullNotPermitted(paint,""String_Node_Str"");
  this.artifactPaint=paint;
  fireChangeEvent();
}"
85814,"/** 
 * Tests this renderer for equality with an arbitrary object.
 * @param obj  the object (<code>null</code> permitted).
 * @return <code>true</code> or <code>false</code>.
 */
@Override public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof BoxAndWhiskerRenderer)) {
    return false;
  }
  BoxAndWhiskerRenderer that=(BoxAndWhiskerRenderer)obj;
  if (this.fillBox != that.fillBox) {
    return false;
  }
  if (this.itemMargin != that.itemMargin) {
    return false;
  }
  if (this.maximumBarWidth != that.maximumBarWidth) {
    return false;
  }
  if (this.meanVisible != that.meanVisible) {
    return false;
  }
  if (this.medianVisible != that.medianVisible) {
    return false;
  }
  if (this.useOutlinePaintForWhiskers != that.useOutlinePaintForWhiskers) {
    return false;
  }
  if (this.whiskerWidth != that.whiskerWidth) {
    return false;
  }
  if (!PaintUtils.equal(this.artifactPaint,that.artifactPaint)) {
    return false;
  }
  return super.equals(obj);
}","/** 
 * Tests this renderer for equality with an arbitrary object.
 * @param obj  the object ({@code null} permitted).
 * @return {@code true} or {@code false}.
 */
@Override public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof BoxAndWhiskerRenderer)) {
    return false;
  }
  BoxAndWhiskerRenderer that=(BoxAndWhiskerRenderer)obj;
  if (this.fillBox != that.fillBox) {
    return false;
  }
  if (this.itemMargin != that.itemMargin) {
    return false;
  }
  if (this.maximumBarWidth != that.maximumBarWidth) {
    return false;
  }
  if (this.meanVisible != that.meanVisible) {
    return false;
  }
  if (this.medianVisible != that.medianVisible) {
    return false;
  }
  if (this.useOutlinePaintForWhiskers != that.useOutlinePaintForWhiskers) {
    return false;
  }
  if (this.whiskerWidth != that.whiskerWidth) {
    return false;
  }
  if (!PaintUtils.equal(this.artifactPaint,that.artifactPaint)) {
    return false;
  }
  return super.equals(obj);
}"
85815,"/** 
 * Returns the range of y-values in the specified dataset for the data items belonging to the visible series and with x-values in the given range.
 * @param dataset  the dataset ({@code null} not permitted).
 * @param visibleSeriesKeys  the visible series keys ({@code null} notpermitted).
 * @param xRange  the x-range ({@code null} not permitted).
 * @param includeInterval  a flag that determines whether or not they-interval for the dataset is included (this only applies if the dataset is an instance of IntervalXYDataset).
 * @return The y-range (possibly {@code null}).
 * @since 1.0.13
 */
public static Range iterateToFindRangeBounds(XYDataset dataset,List<Comparable> visibleSeriesKeys,Range xRange,boolean includeInterval){
  ParamChecks.nullNotPermitted(dataset,""String_Node_Str"");
  ParamChecks.nullNotPermitted(visibleSeriesKeys,""String_Node_Str"");
  ParamChecks.nullNotPermitted(xRange,""String_Node_Str"");
  double minimum=Double.POSITIVE_INFINITY;
  double maximum=Double.NEGATIVE_INFINITY;
  if (includeInterval && dataset instanceof OHLCDataset) {
    OHLCDataset ohlc=(OHLCDataset)dataset;
    for (    Comparable seriesKey : visibleSeriesKeys) {
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double x=ohlc.getXValue(series,item);
        if (xRange.contains(x)) {
          double lvalue=ohlc.getLowValue(series,item);
          double uvalue=ohlc.getHighValue(series,item);
          if (!Double.isNaN(lvalue)) {
            minimum=Math.min(minimum,lvalue);
          }
          if (!Double.isNaN(uvalue)) {
            maximum=Math.max(maximum,uvalue);
          }
        }
      }
    }
  }
 else   if (includeInterval && dataset instanceof BoxAndWhiskerXYDataset) {
    BoxAndWhiskerXYDataset bx=(BoxAndWhiskerXYDataset)dataset;
    for (    Comparable seriesKey : visibleSeriesKeys) {
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double x=bx.getXValue(series,item);
        if (xRange.contains(x)) {
          Number lvalue=bx.getMinRegularValue(series,item);
          Number uvalue=bx.getMaxRegularValue(series,item);
          if (lvalue != null) {
            minimum=Math.min(minimum,lvalue.doubleValue());
          }
          if (uvalue != null) {
            maximum=Math.max(maximum,uvalue.doubleValue());
          }
        }
      }
    }
  }
 else   if (includeInterval && dataset instanceof IntervalXYDataset) {
    IntervalXYDataset ixyd=(IntervalXYDataset)dataset;
    for (    Comparable seriesKey : visibleSeriesKeys) {
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double x=ixyd.getXValue(series,item);
        if (xRange.contains(x)) {
          double lvalue=ixyd.getStartYValue(series,item);
          double uvalue=ixyd.getEndYValue(series,item);
          if (!Double.isNaN(lvalue)) {
            minimum=Math.min(minimum,lvalue);
          }
          if (!Double.isNaN(uvalue)) {
            maximum=Math.max(maximum,uvalue);
          }
        }
      }
    }
  }
 else {
    for (    Comparable seriesKey : visibleSeriesKeys) {
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double x=dataset.getXValue(series,item);
        double y=dataset.getYValue(series,item);
        if (xRange.contains(x)) {
          if (!Double.isNaN(y)) {
            minimum=Math.min(minimum,y);
            maximum=Math.max(maximum,y);
          }
        }
      }
    }
  }
  if (minimum == Double.POSITIVE_INFINITY) {
    return null;
  }
 else {
    return new Range(minimum,maximum);
  }
}","/** 
 * Returns the range of y-values in the specified dataset for the data items belonging to the visible series and with x-values in the given range.
 * @param dataset  the dataset ({@code null} not permitted).
 * @param visibleSeriesKeys  the visible series keys ({@code null} notpermitted).
 * @param xRange  the x-range ({@code null} not permitted).
 * @param includeInterval  a flag that determines whether or not they-interval for the dataset is included (this only applies if the dataset is an instance of IntervalXYDataset).
 * @return The y-range (possibly {@code null}).
 * @since 1.0.13
 */
public static Range iterateToFindRangeBounds(XYDataset dataset,List<Comparable> visibleSeriesKeys,Range xRange,boolean includeInterval){
  ParamChecks.nullNotPermitted(dataset,""String_Node_Str"");
  ParamChecks.nullNotPermitted(visibleSeriesKeys,""String_Node_Str"");
  ParamChecks.nullNotPermitted(xRange,""String_Node_Str"");
  double minimum=Double.POSITIVE_INFINITY;
  double maximum=Double.NEGATIVE_INFINITY;
  if (includeInterval && dataset instanceof OHLCDataset) {
    OHLCDataset ohlc=(OHLCDataset)dataset;
    for (    Comparable seriesKey : visibleSeriesKeys) {
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double x=ohlc.getXValue(series,item);
        if (xRange.contains(x)) {
          double lvalue=ohlc.getLowValue(series,item);
          double uvalue=ohlc.getHighValue(series,item);
          if (!Double.isNaN(lvalue)) {
            minimum=Math.min(minimum,lvalue);
          }
          if (!Double.isNaN(uvalue)) {
            maximum=Math.max(maximum,uvalue);
          }
        }
      }
    }
  }
 else   if (includeInterval && dataset instanceof BoxAndWhiskerXYDataset) {
    BoxAndWhiskerXYDataset bx=(BoxAndWhiskerXYDataset)dataset;
    for (    Comparable seriesKey : visibleSeriesKeys) {
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double x=bx.getXValue(series,item);
        if (xRange.contains(x)) {
          Number lvalue=bx.getMinRegularValue(series,item);
          Number uvalue=bx.getMaxRegularValue(series,item);
          if (lvalue != null) {
            minimum=Math.min(minimum,lvalue.doubleValue());
          }
          if (uvalue != null) {
            maximum=Math.max(maximum,uvalue.doubleValue());
          }
        }
      }
    }
  }
 else   if (includeInterval && dataset instanceof IntervalXYDataset) {
    IntervalXYDataset ixyd=(IntervalXYDataset)dataset;
    for (    Comparable seriesKey : visibleSeriesKeys) {
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double x=ixyd.getXValue(series,item);
        if (xRange.contains(x)) {
          double yvalue=ixyd.getYValue(series,item);
          double lvalue=ixyd.getStartYValue(series,item);
          double uvalue=ixyd.getEndYValue(series,item);
          if (!Double.isNaN(yvalue)) {
            minimum=Math.min(minimum,yvalue);
            maximum=Math.max(maximum,yvalue);
          }
          if (!Double.isNaN(lvalue)) {
            minimum=Math.min(minimum,lvalue);
          }
          if (!Double.isNaN(uvalue)) {
            maximum=Math.max(maximum,uvalue);
          }
        }
      }
    }
  }
 else {
    for (    Comparable seriesKey : visibleSeriesKeys) {
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double x=dataset.getXValue(series,item);
        double y=dataset.getYValue(series,item);
        if (xRange.contains(x)) {
          if (!Double.isNaN(y)) {
            minimum=Math.min(minimum,y);
            maximum=Math.max(maximum,y);
          }
        }
      }
    }
  }
  if (minimum == Double.POSITIVE_INFINITY) {
    return null;
  }
 else {
    return new Range(minimum,maximum);
  }
}"
85816,"/** 
 * Returns the range of x-values in the specified dataset for the data items belonging to the visible series.
 * @param dataset  the dataset ({@code null} not permitted).
 * @param visibleSeriesKeys  the visible series keys ({@code null} notpermitted).
 * @param includeInterval  a flag that determines whether or not they-interval for the dataset is included (this only applies if the dataset is an instance of IntervalXYDataset).
 * @return The x-range (possibly {@code null}).
 * @since 1.0.13
 */
public static Range iterateToFindDomainBounds(XYDataset dataset,List<Comparable> visibleSeriesKeys,boolean includeInterval){
  ParamChecks.nullNotPermitted(dataset,""String_Node_Str"");
  ParamChecks.nullNotPermitted(visibleSeriesKeys,""String_Node_Str"");
  double minimum=Double.POSITIVE_INFINITY;
  double maximum=Double.NEGATIVE_INFINITY;
  if (includeInterval && dataset instanceof IntervalXYDataset) {
    IntervalXYDataset ixyd=(IntervalXYDataset)dataset;
    for (    Comparable seriesKey : visibleSeriesKeys) {
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double lvalue=ixyd.getStartXValue(series,item);
        double uvalue=ixyd.getEndXValue(series,item);
        if (!Double.isNaN(lvalue)) {
          minimum=Math.min(minimum,lvalue);
        }
        if (!Double.isNaN(uvalue)) {
          maximum=Math.max(maximum,uvalue);
        }
      }
    }
  }
 else {
    for (    Comparable seriesKey : visibleSeriesKeys) {
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double x=dataset.getXValue(series,item);
        if (!Double.isNaN(x)) {
          minimum=Math.min(minimum,x);
          maximum=Math.max(maximum,x);
        }
      }
    }
  }
  if (minimum == Double.POSITIVE_INFINITY) {
    return null;
  }
 else {
    return new Range(minimum,maximum);
  }
}","/** 
 * Returns the range of x-values in the specified dataset for the data items belonging to the visible series.
 * @param dataset  the dataset ({@code null} not permitted).
 * @param visibleSeriesKeys  the visible series keys ({@code null} notpermitted).
 * @param includeInterval  a flag that determines whether or not they-interval for the dataset is included (this only applies if the dataset is an instance of IntervalXYDataset).
 * @return The x-range (possibly {@code null}).
 * @since 1.0.13
 */
public static Range iterateToFindDomainBounds(XYDataset dataset,List<Comparable> visibleSeriesKeys,boolean includeInterval){
  ParamChecks.nullNotPermitted(dataset,""String_Node_Str"");
  ParamChecks.nullNotPermitted(visibleSeriesKeys,""String_Node_Str"");
  double minimum=Double.POSITIVE_INFINITY;
  double maximum=Double.NEGATIVE_INFINITY;
  if (includeInterval && dataset instanceof IntervalXYDataset) {
    IntervalXYDataset ixyd=(IntervalXYDataset)dataset;
    for (    Comparable seriesKey : visibleSeriesKeys) {
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double xvalue=ixyd.getXValue(series,item);
        double lvalue=ixyd.getStartXValue(series,item);
        double uvalue=ixyd.getEndXValue(series,item);
        if (!Double.isNaN(xvalue)) {
          minimum=Math.min(minimum,xvalue);
          maximum=Math.max(maximum,xvalue);
        }
        if (!Double.isNaN(lvalue)) {
          minimum=Math.min(minimum,lvalue);
        }
        if (!Double.isNaN(uvalue)) {
          maximum=Math.max(maximum,uvalue);
        }
      }
    }
  }
 else {
    for (    Comparable seriesKey : visibleSeriesKeys) {
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double x=dataset.getXValue(series,item);
        if (!Double.isNaN(x)) {
          minimum=Math.min(minimum,x);
          maximum=Math.max(maximum,x);
        }
      }
    }
  }
  if (minimum == Double.POSITIVE_INFINITY) {
    return null;
  }
 else {
    return new Range(minimum,maximum);
  }
}"
85817,"/** 
 * Finds the range of y-values that fall within the specified range of x-values (where the x-values are interpreted as milliseconds since the epoch and converted to time periods using the specified timezone).
 * @param xRange  the subset of x-values to use ({@code null} notpermitted).
 * @param xAnchor  the anchor point for the x-values ({@code null}not permitted).
 * @param zone  the time zone ({@code null} not permitted).
 * @return The range of y-values.
 * @since 1.0.18
 */
public Range findValueRange(Range xRange,TimePeriodAnchor xAnchor,TimeZone zone){
  ParamChecks.nullNotPermitted(xRange,""String_Node_Str"");
  ParamChecks.nullNotPermitted(xAnchor,""String_Node_Str"");
  ParamChecks.nullNotPermitted(zone,""String_Node_Str"");
  if (this.data.isEmpty()) {
    return null;
  }
  Calendar calendar=Calendar.getInstance(zone);
  double lowY=Double.POSITIVE_INFINITY;
  double highY=Double.NEGATIVE_INFINITY;
  for (  TimeSeriesDataItem item : this.data) {
    long millis=item.getPeriod().getMillisecond(xAnchor,calendar);
    if (xRange.contains(millis)) {
      Number n=item.getValue();
      if (n != null) {
        double v=n.doubleValue();
        lowY=Math.min(lowY,v);
        highY=Math.max(highY,v);
      }
    }
  }
  if (Double.isInfinite(lowY) && Double.isInfinite(highY)) {
    if (lowY < highY) {
      return new Range(lowY,highY);
    }
 else {
      return new Range(Double.NaN,Double.NaN);
    }
  }
  return new Range(lowY,highY);
}","/** 
 * Finds the range of y-values that fall within the specified range of x-values (where the x-values are interpreted as milliseconds since the epoch and converted to time periods using the specified timezone).
 * @param xRange  the subset of x-values to use ({@code null} notpermitted).
 * @param xAnchor  the anchor point for the x-values ({@code null}not permitted).
 * @param zone  the time zone ({@code null} not permitted).
 * @return The range of y-values.
 * @since 1.0.18
 */
public Range findValueRange(Range xRange,TimePeriodAnchor xAnchor,TimeZone zone){
  ParamChecks.nullNotPermitted(xRange,""String_Node_Str"");
  ParamChecks.nullNotPermitted(xAnchor,""String_Node_Str"");
  ParamChecks.nullNotPermitted(zone,""String_Node_Str"");
  if (this.data.isEmpty()) {
    return null;
  }
  Calendar calendar=Calendar.getInstance(zone);
  double lowY=Double.POSITIVE_INFINITY;
  double highY=Double.NEGATIVE_INFINITY;
  for (  TimeSeriesDataItem item : this.data) {
    long millis=item.getPeriod().getMillisecond(xAnchor,calendar);
    if (xRange.contains(millis)) {
      Number n=item.getValue();
      if (n != null) {
        double v=n.doubleValue();
        lowY=minIgnoreNaN(lowY,v);
        highY=maxIgnoreNaN(highY,v);
      }
    }
  }
  if (Double.isInfinite(lowY) && Double.isInfinite(highY)) {
    if (lowY < highY) {
      return new Range(lowY,highY);
    }
 else {
      return new Range(Double.NaN,Double.NaN);
    }
  }
  return new Range(lowY,highY);
}"
85818,"/** 
 * Sets the size (width or height, depending on the orientation of the plot) for the domain axis of each subplot.
 * @param space  the space (<code>null</code> permitted).
 */
protected void setFixedRangeAxisSpaceForSubplots(AxisSpace space){
  for (  XYPlot subplot : this.subplots) {
    subplot.setFixedRangeAxisSpace(space,false);
  }
}","/** 
 * Sets the size (width or height, depending on the orientation of the plot) for the domain axis of each subplot.
 * @param space  the space ({@code null} permitted).
 */
protected void setFixedRangeAxisSpaceForSubplots(AxisSpace space){
  for (  XYPlot subplot : this.subplots) {
    subplot.setFixedRangeAxisSpace(space,false);
  }
}"
85819,"/** 
 * Handles a 'click' on the plot by updating the anchor values.
 * @param x  x-coordinate, where the click occured.
 * @param y  y-coordinate, where the click occured.
 * @param info  object containing information about the plot dimensions.
 */
@Override public void handleClick(int x,int y,PlotRenderingInfo info){
  Rectangle2D dataArea=info.getDataArea();
  if (dataArea.contains(x,y)) {
    for (int i=0; i < this.subplots.size(); i++) {
      XYPlot subplot=this.subplots.get(i);
      PlotRenderingInfo subplotInfo=info.getSubplotInfo(i);
      subplot.handleClick(x,y,subplotInfo);
    }
  }
}","/** 
 * Handles a 'click' on the plot by updating the anchor values.
 * @param x  x-coordinate, where the click occurred.
 * @param y  y-coordinate, where the click occurred.
 * @param info  object containing information about the plot dimensions.
 */
@Override public void handleClick(int x,int y,PlotRenderingInfo info){
  Rectangle2D dataArea=info.getDataArea();
  if (dataArea.contains(x,y)) {
    for (int i=0; i < this.subplots.size(); i++) {
      XYPlot subplot=this.subplots.get(i);
      PlotRenderingInfo subplotInfo=info.getSubplotInfo(i);
      subplot.handleClick(x,y,subplotInfo);
    }
  }
}"
85820,"/** 
 * Returns a range representing the extent of the data values in this plot (obtained from the subplots) that will be rendered against the specified axis.  NOTE: This method is intended for internal JFreeChart use, and is public only so that code in the axis classes can call it.  Since only the domain axis is shared between subplots, the JFreeChart code will only call this method for the domain values (although this is not checked/enforced).
 * @param axis  the axis.
 * @return The range (possibly <code>null</code>).
 */
@Override public Range getDataRange(ValueAxis axis){
  Range result=null;
  if (this.subplots != null) {
    for (    XYPlot subplot : this.subplots) {
      result=Range.combine(result,subplot.getDataRange(axis));
    }
  }
  return result;
}","/** 
 * Returns a range representing the extent of the data values in this plot (obtained from the subplots) that will be rendered against the specified axis.  NOTE: This method is intended for internal JFreeChart use, and is public only so that code in the axis classes can call it.  Since only the domain axis is shared between subplots, the JFreeChart code will only call this method for the domain values (although this is not checked/enforced).
 * @param axis  the axis.
 * @return The range (possibly <code>null</code>).
 */
@Override public Range getDataRange(ValueAxis axis){
  if (this.subplots == null) {
    return null;
  }
  Range result=null;
  for (  XYPlot subplot : this.subplots) {
    result=Range.combine(result,subplot.getDataRange(axis));
  }
  return result;
}"
85821,"/** 
 * Returns the list of subplots.  The returned list may be empty, but is never <code>null</code>.
 * @return An unmodifiable list of subplots.
 */
public List<XYPlot> getSubplots(){
  if (this.subplots != null) {
    return Collections.unmodifiableList(this.subplots);
  }
 else {
    return Collections.EMPTY_LIST;
  }
}","/** 
 * Returns the list of subplots.  The returned list may be empty, but is never   {@code null}.
 * @return An unmodifiable list of subplots.
 */
public List<XYPlot> getSubplots(){
  return Collections.unmodifiableList(this.subplots);
}"
85822,"/** 
 * Calculates the positions of the tick labels for the axis, storing the results in the tick label list (ready for drawing).
 * @param g2  the graphics device.
 * @param dataArea  the area in which the plot should be drawn.
 * @param edge  the location of the axis.
 * @return The ticks.
 */
@Override protected List<ValueTick> refreshTicksVertical(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){
  List<ValueTick> ticks=new java.util.ArrayList<ValueTick>();
  Font tickLabelFont=getTickLabelFont();
  g2.setFont(tickLabelFont);
  double size=getTickUnit().getSize();
  int count=calculateVisibleTickCount();
  double lowestTickValue=calculateLowestVisibleTickValue();
  double previousDrawnTickLabelPos=0.0;
  double previousDrawnTickLabelLength=0.0;
  if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {
    for (int i=0; i < count; i++) {
      double currentTickValue=lowestTickValue + (i * size);
      double yy=valueToJava2D(currentTickValue,dataArea,edge);
      String tickLabel;
      NumberFormat formatter=getNumberFormatOverride();
      if (formatter != null) {
        tickLabel=formatter.format(currentTickValue);
      }
 else {
        tickLabel=valueToString(currentTickValue);
      }
      Rectangle2D bounds=TextUtilities.getTextBounds(tickLabel,g2,g2.getFontMetrics());
      double tickLabelLength=isVerticalTickLabels() ? bounds.getWidth() : bounds.getHeight();
      boolean tickLabelsOverlapping=false;
      if (i > 0) {
        double avgTickLabelLength=(previousDrawnTickLabelLength + tickLabelLength) / 2.0;
        if (Math.abs(yy - previousDrawnTickLabelPos) < avgTickLabelLength) {
          tickLabelsOverlapping=true;
        }
      }
      if (tickLabelsOverlapping) {
        tickLabel=""String_Node_Str"";
      }
 else {
        previousDrawnTickLabelPos=yy;
        previousDrawnTickLabelLength=tickLabelLength;
      }
      TextAnchor anchor=null;
      TextAnchor rotationAnchor=null;
      double angle=0.0;
      if (isVerticalTickLabels()) {
        anchor=TextAnchor.BOTTOM_CENTER;
        rotationAnchor=TextAnchor.BOTTOM_CENTER;
        if (edge == RectangleEdge.LEFT) {
          angle=-Math.PI / 2.0;
        }
 else {
          angle=Math.PI / 2.0;
        }
      }
 else {
        if (edge == RectangleEdge.LEFT) {
          anchor=TextAnchor.CENTER_RIGHT;
          rotationAnchor=TextAnchor.CENTER_RIGHT;
        }
 else {
          anchor=TextAnchor.CENTER_LEFT;
          rotationAnchor=TextAnchor.CENTER_LEFT;
        }
      }
      ticks.add(new NumberTick(currentTickValue,tickLabel,anchor,rotationAnchor,angle));
    }
  }
  return ticks;
}","/** 
 * Calculates the positions of the tick labels for the axis, storing the results in the tick label list (ready for drawing).
 * @param g2  the graphics device.
 * @param dataArea  the area in which the plot should be drawn.
 * @param edge  the location of the axis.
 * @return The ticks.
 */
@Override protected List<ValueTick> refreshTicksVertical(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){
  List<ValueTick> ticks=new java.util.ArrayList<ValueTick>();
  Font tickLabelFont=getTickLabelFont();
  g2.setFont(tickLabelFont);
  double size=getTickUnit().getSize();
  int count=calculateVisibleTickCount();
  double lowestTickValue=calculateLowestVisibleTickValue();
  double previousDrawnTickLabelPos=0.0;
  double previousDrawnTickLabelLength=0.0;
  if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {
    for (int i=0; i < count; i++) {
      double currentTickValue=lowestTickValue + (i * size);
      double yy=valueToJava2D(currentTickValue,dataArea,edge);
      String tickLabel;
      NumberFormat formatter=getNumberFormatOverride();
      if (formatter != null) {
        tickLabel=formatter.format(currentTickValue);
      }
 else {
        tickLabel=valueToString(currentTickValue);
      }
      Rectangle2D bounds=TextUtilities.getTextBounds(tickLabel,g2,g2.getFontMetrics());
      double tickLabelLength=isVerticalTickLabels() ? bounds.getWidth() : bounds.getHeight();
      boolean tickLabelsOverlapping=false;
      if (i > 0) {
        double avgTickLabelLength=(previousDrawnTickLabelLength + tickLabelLength) / 2.0;
        if (Math.abs(yy - previousDrawnTickLabelPos) < avgTickLabelLength) {
          tickLabelsOverlapping=true;
        }
      }
      if (tickLabelsOverlapping) {
        tickLabel=""String_Node_Str"";
      }
 else {
        previousDrawnTickLabelPos=yy;
        previousDrawnTickLabelLength=tickLabelLength;
      }
      TextAnchor anchor;
      TextAnchor rotationAnchor;
      double angle=0.0;
      if (isVerticalTickLabels()) {
        anchor=TextAnchor.BOTTOM_CENTER;
        rotationAnchor=TextAnchor.BOTTOM_CENTER;
        if (edge == RectangleEdge.LEFT) {
          angle=-Math.PI / 2.0;
        }
 else {
          angle=Math.PI / 2.0;
        }
      }
 else {
        if (edge == RectangleEdge.LEFT) {
          anchor=TextAnchor.CENTER_RIGHT;
          rotationAnchor=TextAnchor.CENTER_RIGHT;
        }
 else {
          anchor=TextAnchor.CENTER_LEFT;
          rotationAnchor=TextAnchor.CENTER_LEFT;
        }
      }
      ticks.add(new NumberTick(currentTickValue,tickLabel,anchor,rotationAnchor,angle));
    }
  }
  return ticks;
}"
85823,"/** 
 * Draws the axis on a Java 2D graphics device (such as the screen or a printer).
 * @param g2  the graphics device (<code>null</code> not permitted).
 * @param cursor  the cursor location.
 * @param plotArea  the area within which the plot and axes should be drawn(<code>null</code> not permitted).
 * @param dataArea  the area within which the data should be drawn(<code>null</code> not permitted).
 * @param edge  the axis location (<code>null</code> not permitted).
 * @param plotState  collects information about the plot(<code>null</code> permitted).
 * @return The axis state (never <code>null</code>).
 */
@Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){
  AxisState info=new AxisState(cursor);
  if (isVisible()) {
    info=super.draw(g2,cursor,plotArea,dataArea,edge,plotState);
  }
  if (this.gridBandsVisible) {
    drawGridBands(g2,plotArea,dataArea,edge,info.getTicks());
  }
  return info;
}","/** 
 * Draws the axis on a Java 2D graphics device (such as the screen or a printer).
 * @param g2  the graphics device (<code>null</code> not permitted).
 * @param cursor  the cursor location.
 * @param plotArea  the area within which the plot and axes should be drawn(<code>null</code> not permitted).
 * @param dataArea  the area within which the data should be drawn(<code>null</code> not permitted).
 * @param edge  the axis location (<code>null</code> not permitted).
 * @param plotState  collects information about the plot(<code>null</code> permitted).
 * @return The axis state (never <code>null</code>).
 */
@Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){
  AxisState info=new AxisState(cursor);
  if (isVisible()) {
    info=super.draw(g2,cursor,plotArea,dataArea,edge,plotState);
  }
  if (this.gridBandsVisible) {
    drawGridBands(g2,dataArea,edge,info.getTicks());
  }
  return info;
}"
85824,"/** 
 * Sets the visibility of the grid bands and notifies registered listeners that the axis has been modified.
 * @param flag  the new setting.
 * @see #isGridBandsVisible()
 */
public void setGridBandsVisible(boolean flag){
  if (this.gridBandsVisible != flag) {
    this.gridBandsVisible=flag;
    fireChangeEvent();
  }
}","/** 
 * Sets the visibility of the grid bands and notifies registered listeners that the axis has been modified.
 * @param flag  the new setting.
 * @see #isGridBandsVisible()
 */
public void setGridBandsVisible(boolean flag){
  this.gridBandsVisible=flag;
  fireChangeEvent();
}"
85825,"/** 
 * Draws the grid bands.  Alternate bands are colored using <CODE>gridBandPaint</CODE> (<CODE>DEFAULT_GRID_BAND_PAINT</CODE> by default).
 * @param g2  the graphics device.
 * @param plotArea  the area within which the chart should be drawn.
 * @param dataArea  the area within which the plot should be drawn (asubset of the drawArea).
 * @param edge  the axis location.
 * @param ticks  the ticks.
 */
protected void drawGridBands(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,List<ValueTick> ticks){
  Shape savedClip=g2.getClip();
  g2.clip(dataArea);
  if (RectangleEdge.isTopOrBottom(edge)) {
    drawGridBandsHorizontal(g2,plotArea,dataArea,true,ticks);
  }
 else   if (RectangleEdge.isLeftOrRight(edge)) {
    drawGridBandsVertical(g2,plotArea,dataArea,true,ticks);
  }
  g2.setClip(savedClip);
}","/** 
 * Draws the grid bands.  Alternate bands are colored using <CODE>gridBandPaint</CODE> (<CODE>DEFAULT_GRID_BAND_PAINT</CODE> by default).
 * @param g2  the graphics target (<code>null</code> not permitted).
 * @param dataArea  the data area to which the axes are aligned (<code>null</code> not permitted).
 * @param edge  the edge to which the axis is aligned (<code>null</code> notpermitted).
 * @param ticks  the ticks (<code>null</code> not permitted).
 */
protected void drawGridBands(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge,List<ValueTick> ticks){
  Shape savedClip=g2.getClip();
  g2.clip(dataArea);
  if (RectangleEdge.isTopOrBottom(edge)) {
    drawGridBandsHorizontal(g2,dataArea,true,ticks);
  }
 else   if (RectangleEdge.isLeftOrRight(edge)) {
    drawGridBandsVertical(g2,dataArea,true,ticks);
  }
  g2.setClip(savedClip);
}"
85826,"/** 
 * Draws the grid bands for the axis when it is at the top or bottom of the plot.
 * @param g2  the graphics device.
 * @param drawArea  the area within which the chart should be drawn.
 * @param plotArea  the area within which the plot should be drawn (asubset of the drawArea).
 * @param firstGridBandIsDark  True: the first grid band takes thecolor of <CODE>gridBandPaint</CODE>. False: the second grid band takes the color of <CODE>gridBandPaint</CODE>.
 * @param ticks  a list of ticks.
 */
protected void drawGridBandsVertical(Graphics2D g2,Rectangle2D drawArea,Rectangle2D plotArea,boolean firstGridBandIsDark,List<ValueTick> ticks){
  boolean currentGridBandIsDark=firstGridBandIsDark;
  double xx=plotArea.getX();
  double yy1, yy2;
  double outlineStrokeWidth;
  Stroke outlineStroke=getPlot().getOutlineStroke();
  if (outlineStroke != null && outlineStroke instanceof BasicStroke) {
    outlineStrokeWidth=((BasicStroke)outlineStroke).getLineWidth();
  }
 else {
    outlineStrokeWidth=1d;
  }
  for (  ValueTick tick : ticks) {
    yy1=valueToJava2D(tick.getValue() + 0.5d,plotArea,RectangleEdge.LEFT);
    yy2=valueToJava2D(tick.getValue() - 0.5d,plotArea,RectangleEdge.LEFT);
    if (currentGridBandIsDark) {
      g2.setPaint(this.gridBandPaint);
    }
 else {
      g2.setPaint(this.gridBandAlternatePaint);
    }
    Rectangle2D band=new Rectangle2D.Double(xx + outlineStrokeWidth,yy1,plotArea.getMaxX() - xx - outlineStrokeWidth,yy2 - yy1);
    g2.fill(band);
    currentGridBandIsDark=!currentGridBandIsDark;
  }
  g2.setPaintMode();
}","/** 
 * Draws the grid bands for an axis that is aligned to the left or right of the data area (that is, a vertical axis).
 * @param g2  the graphics target (<code>null</code> not permitted).
 * @param dataArea  the area for the data (to which the axes are aligned,<code>null</code> not permitted).
 * @param firstGridBandIsDark  True: the first grid band takes thecolor of <CODE>gridBandPaint</CODE>. False: the second grid band takes the color of <CODE>gridBandPaint</CODE>.
 * @param ticks  a list of ticks (<code>null</code> not permitted).
 */
protected void drawGridBandsVertical(Graphics2D g2,Rectangle2D dataArea,boolean firstGridBandIsDark,List<ValueTick> ticks){
  boolean currentGridBandIsDark=firstGridBandIsDark;
  double xx=dataArea.getX();
  double yy1, yy2;
  double outlineStrokeWidth=1.0;
  Stroke outlineStroke=getPlot().getOutlineStroke();
  if (outlineStroke != null && outlineStroke instanceof BasicStroke) {
    outlineStrokeWidth=((BasicStroke)outlineStroke).getLineWidth();
  }
  for (  ValueTick tick : ticks) {
    yy1=valueToJava2D(tick.getValue() + 0.5d,dataArea,RectangleEdge.LEFT);
    yy2=valueToJava2D(tick.getValue() - 0.5d,dataArea,RectangleEdge.LEFT);
    if (currentGridBandIsDark) {
      g2.setPaint(this.gridBandPaint);
    }
 else {
      g2.setPaint(this.gridBandAlternatePaint);
    }
    Rectangle2D band=new Rectangle2D.Double(xx + outlineStrokeWidth,Math.min(yy1,yy2),dataArea.getMaxX() - xx - outlineStrokeWidth,Math.abs(yy2 - yy1));
    g2.fill(band);
    currentGridBandIsDark=!currentGridBandIsDark;
  }
}"
85827,"/** 
 * Draws the grid bands for the axis when it is at the top or bottom of the plot.
 * @param g2  the graphics device.
 * @param plotArea  the area within which the chart should be drawn.
 * @param dataArea  the area within which the plot should be drawn(a subset of the drawArea).
 * @param firstGridBandIsDark  True: the first grid band takes thecolor of <CODE>gridBandPaint</CODE>. False: the second grid band takes the color of <CODE>gridBandPaint</CODE>.
 * @param ticks  the ticks.
 */
protected void drawGridBandsHorizontal(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,boolean firstGridBandIsDark,List<ValueTick> ticks){
  boolean currentGridBandIsDark=firstGridBandIsDark;
  double yy=dataArea.getY();
  double xx1, xx2;
  double outlineStrokeWidth;
  if (getPlot().getOutlineStroke() != null) {
    outlineStrokeWidth=((BasicStroke)getPlot().getOutlineStroke()).getLineWidth();
  }
 else {
    outlineStrokeWidth=1d;
  }
  for (  ValueTick tick : ticks) {
    xx1=valueToJava2D(tick.getValue() - 0.5d,dataArea,RectangleEdge.BOTTOM);
    xx2=valueToJava2D(tick.getValue() + 0.5d,dataArea,RectangleEdge.BOTTOM);
    if (currentGridBandIsDark) {
      g2.setPaint(this.gridBandPaint);
    }
 else {
      g2.setPaint(this.gridBandAlternatePaint);
    }
    Rectangle2D band=new Rectangle2D.Double(xx1,yy + outlineStrokeWidth,xx2 - xx1,dataArea.getMaxY() - yy - outlineStrokeWidth);
    g2.fill(band);
    currentGridBandIsDark=!currentGridBandIsDark;
  }
  g2.setPaintMode();
}","/** 
 * Draws the grid bands for the axis when it is at the top or bottom of the plot.
 * @param g2  the graphics target (<code>null</code> not permitted).
 * @param dataArea  the area for the data (to which the axes are aligned,<code>null</code> not permitted).
 * @param firstGridBandIsDark  True: the first grid band takes thecolor of <CODE>gridBandPaint</CODE>. False: the second grid band takes the color of <CODE>gridBandPaint</CODE>.
 * @param ticks  a list of ticks (<code>null</code> not permitted).
 */
protected void drawGridBandsHorizontal(Graphics2D g2,Rectangle2D dataArea,boolean firstGridBandIsDark,List<ValueTick> ticks){
  boolean currentGridBandIsDark=firstGridBandIsDark;
  double yy=dataArea.getY();
  double xx1, xx2;
  double outlineStrokeWidth=1.0;
  Stroke outlineStroke=getPlot().getOutlineStroke();
  if (outlineStroke != null && outlineStroke instanceof BasicStroke) {
    outlineStrokeWidth=((BasicStroke)outlineStroke).getLineWidth();
  }
  for (  ValueTick tick : ticks) {
    xx1=valueToJava2D(tick.getValue() - 0.5d,dataArea,RectangleEdge.BOTTOM);
    xx2=valueToJava2D(tick.getValue() + 0.5d,dataArea,RectangleEdge.BOTTOM);
    if (currentGridBandIsDark) {
      g2.setPaint(this.gridBandPaint);
    }
 else {
      g2.setPaint(this.gridBandAlternatePaint);
    }
    Rectangle2D band=new Rectangle2D.Double(Math.min(xx1,xx2),yy + outlineStrokeWidth,Math.abs(xx2 - xx1),dataArea.getMaxY() - yy - outlineStrokeWidth);
    g2.fill(band);
    currentGridBandIsDark=!currentGridBandIsDark;
  }
}"
85828,"/** 
 * Fills a band between two values on the axis.  This can be used to color bands between the grid lines.
 * @param g2  the graphics device.
 * @param plot  the plot.
 * @param axis  the domain axis.
 * @param dataArea  the data area.
 * @param start  the start value.
 * @param end  the end value.
 */
@Override public void fillDomainGridBand(Graphics2D g2,XYPlot plot,ValueAxis axis,Rectangle2D dataArea,double start,double end){
  double x1=axis.valueToJava2D(start,dataArea,plot.getDomainAxisEdge());
  double x2=axis.valueToJava2D(end,dataArea,plot.getDomainAxisEdge());
  Rectangle2D band;
  if (plot.getOrientation() == PlotOrientation.VERTICAL) {
    band=new Rectangle2D.Double(Math.min(x1,x2),dataArea.getMinY(),Math.abs(x2 - x1),dataArea.getWidth());
  }
 else {
    band=new Rectangle2D.Double(dataArea.getMinX(),Math.min(x1,x2),dataArea.getWidth(),Math.abs(x2 - x1));
  }
  Paint paint=plot.getDomainTickBandPaint();
  if (paint != null) {
    g2.setPaint(paint);
    g2.fill(band);
  }
}","/** 
 * Fills a band between two values on the axis.  This can be used to color bands between the grid lines.
 * @param g2  the graphics device.
 * @param plot  the plot.
 * @param axis  the domain axis.
 * @param dataArea  the data area.
 * @param start  the start value.
 * @param end  the end value.
 */
@Override public void fillDomainGridBand(Graphics2D g2,XYPlot plot,ValueAxis axis,Rectangle2D dataArea,double start,double end){
  double x1=axis.valueToJava2D(start,dataArea,plot.getDomainAxisEdge());
  double x2=axis.valueToJava2D(end,dataArea,plot.getDomainAxisEdge());
  Rectangle2D band;
  if (plot.getOrientation() == PlotOrientation.VERTICAL) {
    band=new Rectangle2D.Double(Math.min(x1,x2),dataArea.getMinY(),Math.abs(x2 - x1),dataArea.getHeight());
  }
 else {
    band=new Rectangle2D.Double(dataArea.getMinX(),Math.min(x1,x2),dataArea.getWidth(),Math.abs(x2 - x1));
  }
  Paint paint=plot.getDomainTickBandPaint();
  if (paint != null) {
    g2.setPaint(paint);
    g2.fill(band);
  }
}"
85829,"/** 
 * Initialises the renderer and returns a state object that should be passed to all subsequent calls to the drawItem() method. <P> This method will be called before the first item is rendered, giving the renderer an opportunity to initialise any state information it wants to maintain.  The renderer can do nothing if it chooses.
 * @param g2  the graphics device.
 * @param dataArea  the area inside the axes.
 * @param plot  the plot.
 * @param data  the data.
 * @param info  an optional info collection object to return data back tothe caller.
 * @return The renderer state (never <code>null</code>).
 */
@Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){
  XYItemRendererState state=new XYItemRendererState(info);
  return state;
}","/** 
 * Initialises the renderer and returns a state object that should be passed to all subsequent calls to the drawItem() method. <P> This method will be called before the first item is rendered, giving the renderer an opportunity to initialise any state information it wants to maintain.  The renderer can do nothing if it chooses.
 * @param g2  the graphics device.
 * @param dataArea  the area inside the axes.
 * @param plot  the plot.
 * @param data  the data.
 * @param info  an optional info collection object to return data back tothe caller.
 * @return The renderer state (never <code>null</code>).
 */
@Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){
  return new XYItemRendererState(info);
}"
85830,"/** 
 * Draws a vertical line on the chart to represent a 'range marker'.
 * @param g2  the graphics device.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param marker  the marker line.
 * @param dataArea  the axis data area.
 */
@Override public void drawDomainMarker(Graphics2D g2,XYPlot plot,ValueAxis domainAxis,Marker marker,Rectangle2D dataArea){
  if (marker instanceof ValueMarker) {
    ValueMarker vm=(ValueMarker)marker;
    double value=vm.getValue();
    Range range=domainAxis.getRange();
    if (!range.contains(value)) {
      return;
    }
    double v=domainAxis.valueToJava2D(value,dataArea,plot.getDomainAxisEdge());
    PlotOrientation orientation=plot.getOrientation();
    Line2D line=null;
    if (orientation == PlotOrientation.HORIZONTAL) {
      line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());
    }
    final Composite originalComposite=g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));
    g2.setPaint(marker.getPaint());
    g2.setStroke(marker.getStroke());
    g2.draw(line);
    String label=marker.getLabel();
    RectangleAnchor anchor=marker.getLabelAnchor();
    if (label != null) {
      Font labelFont=marker.getLabelFont();
      g2.setFont(labelFont);
      g2.setPaint(marker.getLabelPaint());
      Point2D coordinates=calculateDomainMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);
      TextUtilities.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());
    }
    g2.setComposite(originalComposite);
  }
 else   if (marker instanceof IntervalMarker) {
    IntervalMarker im=(IntervalMarker)marker;
    double start=im.getStartValue();
    double end=im.getEndValue();
    Range range=domainAxis.getRange();
    if (!(range.intersects(start,end))) {
      return;
    }
    double start2d=domainAxis.valueToJava2D(start,dataArea,plot.getDomainAxisEdge());
    double end2d=domainAxis.valueToJava2D(end,dataArea,plot.getDomainAxisEdge());
    double low=Math.min(start2d,end2d);
    double high=Math.max(start2d,end2d);
    PlotOrientation orientation=plot.getOrientation();
    Rectangle2D rect=null;
    if (orientation == PlotOrientation.HORIZONTAL) {
      low=Math.max(low,dataArea.getMinY());
      high=Math.min(high,dataArea.getMaxY());
      rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low);
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      low=Math.max(low,dataArea.getMinX());
      high=Math.min(high,dataArea.getMaxX());
      rect=new Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight());
    }
    final Composite originalComposite=g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));
    Paint p=marker.getPaint();
    if (p instanceof GradientPaint) {
      GradientPaint gp=(GradientPaint)p;
      GradientPaintTransformer t=im.getGradientPaintTransformer();
      if (t != null) {
        gp=t.transform(gp,rect);
      }
      g2.setPaint(gp);
    }
 else {
      g2.setPaint(p);
    }
    g2.fill(rect);
    if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
      if (orientation == PlotOrientation.VERTICAL) {
        Line2D line=new Line2D.Double();
        double y0=dataArea.getMinY();
        double y1=dataArea.getMaxY();
        g2.setPaint(im.getOutlinePaint());
        g2.setStroke(im.getOutlineStroke());
        if (range.contains(start)) {
          line.setLine(start2d,y0,start2d,y1);
          g2.draw(line);
        }
        if (range.contains(end)) {
          line.setLine(end2d,y0,end2d,y1);
          g2.draw(line);
        }
      }
 else {
        Line2D line=new Line2D.Double();
        double x0=dataArea.getMinX();
        double x1=dataArea.getMaxX();
        g2.setPaint(im.getOutlinePaint());
        g2.setStroke(im.getOutlineStroke());
        if (range.contains(start)) {
          line.setLine(x0,start2d,x1,start2d);
          g2.draw(line);
        }
        if (range.contains(end)) {
          line.setLine(x0,end2d,x1,end2d);
          g2.draw(line);
        }
      }
    }
    String label=marker.getLabel();
    RectangleAnchor anchor=marker.getLabelAnchor();
    if (label != null) {
      Font labelFont=marker.getLabelFont();
      g2.setFont(labelFont);
      g2.setPaint(marker.getLabelPaint());
      Point2D coordinates=calculateDomainMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);
      TextUtilities.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());
    }
    g2.setComposite(originalComposite);
  }
}","/** 
 * Draws a vertical line on the chart to represent a 'range marker'.
 * @param g2  the graphics device.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param marker  the marker line.
 * @param dataArea  the axis data area.
 */
@Override public void drawDomainMarker(Graphics2D g2,XYPlot plot,ValueAxis domainAxis,Marker marker,Rectangle2D dataArea){
  if (marker instanceof ValueMarker) {
    ValueMarker vm=(ValueMarker)marker;
    double value=vm.getValue();
    Range range=domainAxis.getRange();
    if (!range.contains(value)) {
      return;
    }
    double v=domainAxis.valueToJava2D(value,dataArea,plot.getDomainAxisEdge());
    PlotOrientation orientation=plot.getOrientation();
    Line2D line=null;
    if (orientation == PlotOrientation.HORIZONTAL) {
      line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());
    }
 else {
      throw new IllegalStateException();
    }
    final Composite originalComposite=g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));
    g2.setPaint(marker.getPaint());
    g2.setStroke(marker.getStroke());
    g2.draw(line);
    String label=marker.getLabel();
    RectangleAnchor anchor=marker.getLabelAnchor();
    if (label != null) {
      Font labelFont=marker.getLabelFont();
      g2.setFont(labelFont);
      g2.setPaint(marker.getLabelPaint());
      Point2D coordinates=calculateDomainMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);
      TextUtilities.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());
    }
    g2.setComposite(originalComposite);
  }
 else   if (marker instanceof IntervalMarker) {
    IntervalMarker im=(IntervalMarker)marker;
    double start=im.getStartValue();
    double end=im.getEndValue();
    Range range=domainAxis.getRange();
    if (!(range.intersects(start,end))) {
      return;
    }
    double start2d=domainAxis.valueToJava2D(start,dataArea,plot.getDomainAxisEdge());
    double end2d=domainAxis.valueToJava2D(end,dataArea,plot.getDomainAxisEdge());
    double low=Math.min(start2d,end2d);
    double high=Math.max(start2d,end2d);
    PlotOrientation orientation=plot.getOrientation();
    Rectangle2D rect=null;
    if (orientation == PlotOrientation.HORIZONTAL) {
      low=Math.max(low,dataArea.getMinY());
      high=Math.min(high,dataArea.getMaxY());
      rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low);
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      low=Math.max(low,dataArea.getMinX());
      high=Math.min(high,dataArea.getMaxX());
      rect=new Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight());
    }
    final Composite originalComposite=g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));
    Paint p=marker.getPaint();
    if (p instanceof GradientPaint) {
      GradientPaint gp=(GradientPaint)p;
      GradientPaintTransformer t=im.getGradientPaintTransformer();
      if (t != null) {
        gp=t.transform(gp,rect);
      }
      g2.setPaint(gp);
    }
 else {
      g2.setPaint(p);
    }
    g2.fill(rect);
    if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
      if (orientation == PlotOrientation.VERTICAL) {
        Line2D line=new Line2D.Double();
        double y0=dataArea.getMinY();
        double y1=dataArea.getMaxY();
        g2.setPaint(im.getOutlinePaint());
        g2.setStroke(im.getOutlineStroke());
        if (range.contains(start)) {
          line.setLine(start2d,y0,start2d,y1);
          g2.draw(line);
        }
        if (range.contains(end)) {
          line.setLine(end2d,y0,end2d,y1);
          g2.draw(line);
        }
      }
 else {
        Line2D line=new Line2D.Double();
        double x0=dataArea.getMinX();
        double x1=dataArea.getMaxX();
        g2.setPaint(im.getOutlinePaint());
        g2.setStroke(im.getOutlineStroke());
        if (range.contains(start)) {
          line.setLine(x0,start2d,x1,start2d);
          g2.draw(line);
        }
        if (range.contains(end)) {
          line.setLine(x0,end2d,x1,end2d);
          g2.draw(line);
        }
      }
    }
    String label=marker.getLabel();
    RectangleAnchor anchor=marker.getLabelAnchor();
    if (label != null) {
      Font labelFont=marker.getLabelFont();
      g2.setFont(labelFont);
      g2.setPaint(marker.getLabelPaint());
      Point2D coordinates=calculateDomainMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);
      TextUtilities.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());
    }
    g2.setComposite(originalComposite);
  }
}"
85831,"/** 
 * Adds a block to the arrangement manager at the specified edge.
 * @param block  the block (<code>null</code> permitted).
 * @param key  the edge (an instance of {@link RectangleEdge}) or <code>null</code> for the center block.
 */
@Override public void add(Block block,Object key){
  if (key == null) {
    this.centerBlock=block;
  }
 else {
    RectangleEdge edge=(RectangleEdge)key;
    if (edge == RectangleEdge.TOP) {
      this.topBlock=block;
    }
 else     if (edge == RectangleEdge.BOTTOM) {
      this.bottomBlock=block;
    }
 else     if (edge == RectangleEdge.LEFT) {
      this.leftBlock=block;
    }
 else     if (edge == RectangleEdge.RIGHT) {
      this.rightBlock=block;
    }
  }
}","/** 
 * Adds a block to the arrangement manager at the specified edge. If the key is not an instance of   {@link RectangleEdge} the block willbe added in the center.
 * @param block  the block (<code>null</code> permitted).
 * @param key  the edge (an instance of {@link RectangleEdge}) or <code>null</code> for the center block.
 */
@Override public void add(Block block,Object key){
  if (!(key instanceof RectangleEdge)) {
    this.centerBlock=block;
  }
 else {
    RectangleEdge edge=(RectangleEdge)key;
    if (edge == RectangleEdge.TOP) {
      this.topBlock=block;
    }
 else     if (edge == RectangleEdge.BOTTOM) {
      this.bottomBlock=block;
    }
 else     if (edge == RectangleEdge.LEFT) {
      this.leftBlock=block;
    }
 else     if (edge == RectangleEdge.RIGHT) {
      this.rightBlock=block;
    }
  }
}"
85832,"/** 
 * Sets the paint that will be used to draw bars having negative values, and sends a   {@link RendererChangeEvent} to all registered listeners.
 * @param paint  the paint (<code>null</code> not permitted).
 */
public void setNegativeBarPaint(Paint paint){
  if (paint == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.negativeBarPaint=paint;
  fireChangeEvent();
}","/** 
 * Sets the paint that will be used to draw bars having negative values, and sends a   {@link RendererChangeEvent} to all registered listeners.
 * @param paint  the paint (<code>null</code> not permitted).
 */
public void setNegativeBarPaint(Paint paint){
  ParamChecks.nullNotPermitted(paint,""String_Node_Str"");
  this.negativeBarPaint=paint;
  fireChangeEvent();
}"
85833,"/** 
 * Draws the bar for a single (series, category) data item.
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the data area.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the dataset.
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param pass  the pass index.
 */
@Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){
  double previous=state.getSeriesRunningTotal();
  if (column == dataset.getColumnCount() - 1) {
    previous=0.0;
  }
  double current=0.0;
  Number n=dataset.getValue(row,column);
  if (n != null) {
    current=previous + n.doubleValue();
  }
  state.setSeriesRunningTotal(current);
  int categoryCount=getColumnCount();
  PlotOrientation orientation=plot.getOrientation();
  double rectX=0.0;
  double rectY=0.0;
  RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();
  double j2dy0=rangeAxis.valueToJava2D(previous,dataArea,rangeAxisLocation);
  double j2dy1=rangeAxis.valueToJava2D(current,dataArea,rangeAxisLocation);
  double valDiff=current - previous;
  if (j2dy1 < j2dy0) {
    double temp=j2dy1;
    j2dy1=j2dy0;
    j2dy0=temp;
  }
  double rectWidth=state.getBarWidth();
  double rectHeight=Math.max(getMinimumBarLength(),Math.abs(j2dy1 - j2dy0));
  Comparable seriesKey=dataset.getRowKey(row);
  Comparable categoryKey=dataset.getColumnKey(column);
  if (orientation == PlotOrientation.HORIZONTAL) {
    rectY=domainAxis.getCategorySeriesMiddle(categoryKey,seriesKey,dataset,getItemMargin(),dataArea,RectangleEdge.LEFT);
    rectX=j2dy0;
    rectHeight=state.getBarWidth();
    rectY=rectY - rectHeight / 2.0;
    rectWidth=Math.max(getMinimumBarLength(),Math.abs(j2dy1 - j2dy0));
  }
 else   if (orientation == PlotOrientation.VERTICAL) {
    rectX=domainAxis.getCategorySeriesMiddle(categoryKey,seriesKey,dataset,getItemMargin(),dataArea,RectangleEdge.TOP);
    rectX=rectX - rectWidth / 2.0;
    rectY=j2dy0;
  }
  Rectangle2D bar=new Rectangle2D.Double(rectX,rectY,rectWidth,rectHeight);
  Paint seriesPaint;
  if (column == 0) {
    seriesPaint=getFirstBarPaint();
  }
 else   if (column == categoryCount - 1) {
    seriesPaint=getLastBarPaint();
  }
 else {
    if (valDiff < 0.0) {
      seriesPaint=getNegativeBarPaint();
    }
 else     if (valDiff > 0.0) {
      seriesPaint=getPositiveBarPaint();
    }
 else {
      seriesPaint=getLastBarPaint();
    }
  }
  if (getGradientPaintTransformer() != null && seriesPaint instanceof GradientPaint) {
    GradientPaint gp=(GradientPaint)seriesPaint;
    seriesPaint=getGradientPaintTransformer().transform(gp,bar);
  }
  g2.setPaint(seriesPaint);
  g2.fill(bar);
  if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
    Stroke stroke=getItemOutlineStroke(row,column);
    Paint paint=getItemOutlinePaint(row,column);
    if (stroke != null && paint != null) {
      g2.setStroke(stroke);
      g2.setPaint(paint);
      g2.draw(bar);
    }
  }
  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);
  if (generator != null && isItemLabelVisible(row,column)) {
    drawItemLabel(g2,dataset,row,column,plot,generator,bar,(valDiff < 0.0));
  }
  EntityCollection entities=state.getEntityCollection();
  if (entities != null) {
    addItemEntity(entities,dataset,row,column,bar);
  }
}","/** 
 * Draws the bar for a single (series, category) data item.
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the data area.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the dataset.
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param pass  the pass index.
 */
@Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){
  double previous=state.getSeriesRunningTotal();
  if (column == dataset.getColumnCount() - 1) {
    previous=0.0;
  }
  double current=0.0;
  Number n=dataset.getValue(row,column);
  if (n != null) {
    current=previous + n.doubleValue();
  }
  state.setSeriesRunningTotal(current);
  int categoryCount=getColumnCount();
  PlotOrientation orientation=plot.getOrientation();
  double rectX=0.0;
  double rectY=0.0;
  RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();
  double j2dy0=rangeAxis.valueToJava2D(previous,dataArea,rangeAxisLocation);
  double j2dy1=rangeAxis.valueToJava2D(current,dataArea,rangeAxisLocation);
  double valDiff=current - previous;
  if (j2dy1 < j2dy0) {
    double temp=j2dy1;
    j2dy1=j2dy0;
    j2dy0=temp;
  }
  double rectWidth=state.getBarWidth();
  double rectHeight=Math.max(getMinimumBarLength(),Math.abs(j2dy1 - j2dy0));
  Comparable seriesKey=dataset.getRowKey(row);
  Comparable categoryKey=dataset.getColumnKey(column);
  if (orientation == PlotOrientation.HORIZONTAL) {
    rectY=domainAxis.getCategorySeriesMiddle(categoryKey,seriesKey,dataset,getItemMargin(),dataArea,RectangleEdge.LEFT);
    rectX=j2dy0;
    rectHeight=state.getBarWidth();
    rectY=rectY - rectHeight / 2.0;
    rectWidth=Math.max(getMinimumBarLength(),Math.abs(j2dy1 - j2dy0));
  }
 else   if (orientation == PlotOrientation.VERTICAL) {
    rectX=domainAxis.getCategorySeriesMiddle(categoryKey,seriesKey,dataset,getItemMargin(),dataArea,RectangleEdge.TOP);
    rectX=rectX - rectWidth / 2.0;
    rectY=j2dy0;
  }
  Rectangle2D bar=new Rectangle2D.Double(rectX,rectY,rectWidth,rectHeight);
  Paint seriesPaint;
  if (column == 0) {
    seriesPaint=getFirstBarPaint();
  }
 else   if (column == categoryCount - 1) {
    seriesPaint=getLastBarPaint();
  }
 else {
    if (valDiff >= 0.0) {
      seriesPaint=getPositiveBarPaint();
    }
 else {
      seriesPaint=getNegativeBarPaint();
    }
  }
  if (getGradientPaintTransformer() != null && seriesPaint instanceof GradientPaint) {
    GradientPaint gp=(GradientPaint)seriesPaint;
    seriesPaint=getGradientPaintTransformer().transform(gp,bar);
  }
  g2.setPaint(seriesPaint);
  g2.fill(bar);
  if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
    Stroke stroke=getItemOutlineStroke(row,column);
    Paint paint=getItemOutlinePaint(row,column);
    if (stroke != null && paint != null) {
      g2.setStroke(stroke);
      g2.setPaint(paint);
      g2.draw(bar);
    }
  }
  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);
  if (generator != null && isItemLabelVisible(row,column)) {
    drawItemLabel(g2,dataset,row,column,plot,generator,bar,(valDiff < 0.0));
  }
  EntityCollection entities=state.getEntityCollection();
  if (entities != null) {
    addItemEntity(entities,dataset,row,column,bar);
  }
}"
85834,"/** 
 * Sets the paint that will be used to draw bars having positive values.
 * @param paint  the paint (<code>null</code> not permitted).
 */
public void setPositiveBarPaint(Paint paint){
  if (paint == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.positiveBarPaint=paint;
  fireChangeEvent();
}","/** 
 * Sets the paint that will be used to draw bars having positive values.
 * @param paint  the paint (<code>null</code> not permitted).
 */
public void setPositiveBarPaint(Paint paint){
  ParamChecks.nullNotPermitted(paint,""String_Node_Str"");
  this.positiveBarPaint=paint;
  fireChangeEvent();
}"
85835,"/** 
 * Constructs a new waterfall renderer.
 * @param firstBarPaint  the color of the first bar (<code>null</code> notpermitted).
 * @param positiveBarPaint  the color for bars with positive values(<code>null</code> not permitted).
 * @param negativeBarPaint  the color for bars with negative values(<code>null</code> not permitted).
 * @param lastBarPaint  the color of the last bar (<code>null</code> notpermitted).
 */
public WaterfallBarRenderer(Paint firstBarPaint,Paint positiveBarPaint,Paint negativeBarPaint,Paint lastBarPaint){
  super();
  if (firstBarPaint == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (positiveBarPaint == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (negativeBarPaint == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (lastBarPaint == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.firstBarPaint=firstBarPaint;
  this.lastBarPaint=lastBarPaint;
  this.positiveBarPaint=positiveBarPaint;
  this.negativeBarPaint=negativeBarPaint;
  setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL));
  setMinimumBarLength(1.0);
}","/** 
 * Constructs a new waterfall renderer.
 * @param firstBarPaint  the color of the first bar (<code>null</code> notpermitted).
 * @param positiveBarPaint  the color for bars with positive values(<code>null</code> not permitted).
 * @param negativeBarPaint  the color for bars with negative values(<code>null</code> not permitted).
 * @param lastBarPaint  the color of the last bar (<code>null</code> notpermitted).
 */
public WaterfallBarRenderer(Paint firstBarPaint,Paint positiveBarPaint,Paint negativeBarPaint,Paint lastBarPaint){
  super();
  ParamChecks.nullNotPermitted(firstBarPaint,""String_Node_Str"");
  ParamChecks.nullNotPermitted(positiveBarPaint,""String_Node_Str"");
  ParamChecks.nullNotPermitted(negativeBarPaint,""String_Node_Str"");
  ParamChecks.nullNotPermitted(lastBarPaint,""String_Node_Str"");
  this.firstBarPaint=firstBarPaint;
  this.lastBarPaint=lastBarPaint;
  this.positiveBarPaint=positiveBarPaint;
  this.negativeBarPaint=negativeBarPaint;
  setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL));
  setMinimumBarLength(1.0);
}"
85836,"/** 
 * Sets the paint that will be used to draw the first bar and sends a  {@link RendererChangeEvent} to all registered listeners.
 * @param paint  the paint (<code>null</code> not permitted).
 */
public void setFirstBarPaint(Paint paint){
  if (paint == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.firstBarPaint=paint;
  fireChangeEvent();
}","/** 
 * Sets the paint that will be used to draw the first bar and sends a  {@link RendererChangeEvent} to all registered listeners.
 * @param paint  the paint (<code>null</code> not permitted).
 */
public void setFirstBarPaint(Paint paint){
  ParamChecks.nullNotPermitted(paint,""String_Node_Str"");
  this.firstBarPaint=paint;
  fireChangeEvent();
}"
85837,"/** 
 * Sets the paint that will be used to draw the last bar and sends a  {@link RendererChangeEvent} to all registered listeners.
 * @param paint  the paint (<code>null</code> not permitted).
 */
public void setLastBarPaint(Paint paint){
  if (paint == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.lastBarPaint=paint;
  fireChangeEvent();
}","/** 
 * Sets the paint that will be used to draw the last bar and sends a  {@link RendererChangeEvent} to all registered listeners.
 * @param paint  the paint (<code>null</code> not permitted).
 */
public void setLastBarPaint(Paint paint){
  ParamChecks.nullNotPermitted(paint,""String_Node_Str"");
  this.lastBarPaint=paint;
  fireChangeEvent();
}"
85838,"/** 
 * Set the composite which will be used for filling polygons and sends a  {@link RendererChangeEvent} to all registered listeners.
 * @param composite  the composite to use (<code>null</code> notpermitted).
 * @since 1.0.14
 */
public void setFillComposite(Composite composite){
  if (composite == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.fillComposite=composite;
  fireChangeEvent();
}","/** 
 * Sets the composite which will be used for filling polygons and sends a  {@link RendererChangeEvent} to all registered listeners.
 * @param composite  the composite to use (<code>null</code> notpermitted).
 * @since 1.0.14
 */
public void setFillComposite(Composite composite){
  ParamChecks.nullNotPermitted(composite,""String_Node_Str"");
  this.fillComposite=composite;
  fireChangeEvent();
}"
85839,"/** 
 * @since 1.0.14
 */
@Override public XYToolTipGenerator getBaseToolTipGenerator(){
  return this.baseToolTipGenerator;
}","/** 
 * Returns the default tool tip generator.
 * @return The default tool tip generator (possibly <code>null</code>).
 * @since 1.0.14
 */
@Override public XYToolTipGenerator getBaseToolTipGenerator(){
  return this.baseToolTipGenerator;
}"
85840,"/** 
 * @since 1.0.14
 */
@Override public void setBaseToolTipGenerator(XYToolTipGenerator generator){
  this.baseToolTipGenerator=generator;
  fireChangeEvent();
}","/** 
 * Sets the default tool tip generator and sends a   {@link RendererChangeEvent} to all registered listeners.
 * @param generator  the generator (<code>null</code> permitted).
 * @since 1.0.14
 */
@Override public void setBaseToolTipGenerator(XYToolTipGenerator generator){
  this.baseToolTipGenerator=generator;
  fireChangeEvent();
}"
85841,"/** 
 * Sets the shape used as a line in each legend item and sends a  {@link RendererChangeEvent} to all registered listeners.
 * @param line  the line (<code>null</code> not permitted).
 * @see #getLegendLine()
 */
public void setLegendLine(Shape line){
  if (line == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.legendLine=line;
  fireChangeEvent();
}","/** 
 * Sets the shape used as a line in each legend item and sends a  {@link RendererChangeEvent} to all registered listeners.
 * @param line  the line (<code>null</code> not permitted).
 * @see #getLegendLine()
 */
public void setLegendLine(Shape line){
  ParamChecks.nullNotPermitted(line,""String_Node_Str"");
  this.legendLine=line;
  fireChangeEvent();
}"
85842,"/** 
 * @since 1.0.14
 */
@Override public void setSeriesToolTipGenerator(int series,XYToolTipGenerator generator){
  this.toolTipGeneratorList.set(series,generator);
  fireChangeEvent();
}","/** 
 * Sets the tooltip generator for the specified series.
 * @param series  the series index.
 * @param generator  the tool tip generator (<code>null</code> permitted).
 * @since 1.0.14
 */
@Override public void setSeriesToolTipGenerator(int series,XYToolTipGenerator generator){
  this.toolTipGeneratorList.set(series,generator);
  fireChangeEvent();
}"
85843,"/** 
 * @since 1.0.14
 */
@Override public void setURLGenerator(XYURLGenerator urlGenerator){
  this.urlGenerator=urlGenerator;
  fireChangeEvent();
}","/** 
 * Sets the URL generator.
 * @param urlGenerator  the generator (<code>null</code> permitted)
 * @since 1.0.14
 */
@Override public void setURLGenerator(XYURLGenerator urlGenerator){
  this.urlGenerator=urlGenerator;
  fireChangeEvent();
}"
85844,"/** 
 * @since 1.0.14
 */
@Override public XYURLGenerator getURLGenerator(){
  return this.urlGenerator;
}","/** 
 * Returns the URL generator.
 * @return The URL generator (possibly <code>null</code>).
 * @since 1.0.14
 */
@Override public XYURLGenerator getURLGenerator(){
  return this.urlGenerator;
}"
85845,"/** 
 * @since 1.0.14
 */
@Override public XYToolTipGenerator getToolTipGenerator(int series,int item){
  XYToolTipGenerator generator=this.toolTipGeneratorList.get(series);
  if (generator == null) {
    generator=this.baseToolTipGenerator;
  }
  return generator;
}","/** 
 * Returns the tooltip generator for the specified series and item.
 * @param series  the series index.
 * @param item  the item index.
 * @return The tooltip generator (possibly <code>null</code>).
 * @since 1.0.14
 */
@Override public XYToolTipGenerator getToolTipGenerator(int series,int item){
  XYToolTipGenerator generator=this.toolTipGeneratorList.get(series);
  if (generator == null) {
    generator=this.baseToolTipGenerator;
  }
  return generator;
}"
85846,"/** 
 * Draw the radial gridlines - the rings.
 * @param g2  the drawing surface.
 * @param plot  the plot.
 * @param radialAxis  the radial axis.
 * @param ticks  the ticks.
 * @param dataArea  the data area.
 */
@Override public void drawRadialGridLines(Graphics2D g2,PolarPlot plot,ValueAxis radialAxis,List<ValueTick> ticks,Rectangle2D dataArea){
  g2.setFont(radialAxis.getTickLabelFont());
  g2.setPaint(plot.getRadiusGridlinePaint());
  g2.setStroke(plot.getRadiusGridlineStroke());
  double axisMin=radialAxis.getLowerBound();
  Point center=plot.translateToJava2D(axisMin,axisMin,radialAxis,dataArea);
  for (  ValueTick tick : ticks) {
    double angleDegrees=plot.isCounterClockwise() ? plot.getAngleOffset() : -plot.getAngleOffset();
    Point p=plot.translateToJava2D(angleDegrees,((NumberTick)tick).getNumber().doubleValue(),radialAxis,dataArea);
    int r=p.x - center.x;
    int upperLeftX=center.x - r;
    int upperLeftY=center.y - r;
    int d=2 * r;
    Ellipse2D ring=new Ellipse2D.Double(upperLeftX,upperLeftY,d,d);
    g2.setPaint(plot.getRadiusGridlinePaint());
    g2.draw(ring);
  }
}","/** 
 * Draw the radial gridlines - the rings.
 * @param g2  the drawing surface (<code>null</code> not permitted).
 * @param plot  the plot (<code>null</code> not permitted).
 * @param radialAxis  the radial axis (<code>null</code> not permitted).
 * @param ticks  the ticks (<code>null</code> not permitted).
 * @param dataArea  the data area.
 */
@Override public void drawRadialGridLines(Graphics2D g2,PolarPlot plot,ValueAxis radialAxis,List<ValueTick> ticks,Rectangle2D dataArea){
  ParamChecks.nullNotPermitted(radialAxis,""String_Node_Str"");
  g2.setFont(radialAxis.getTickLabelFont());
  g2.setPaint(plot.getRadiusGridlinePaint());
  g2.setStroke(plot.getRadiusGridlineStroke());
  double centerValue;
  if (radialAxis.isInverted()) {
    centerValue=radialAxis.getUpperBound();
  }
 else {
    centerValue=radialAxis.getLowerBound();
  }
  Point center=plot.translateToJava2D(0,centerValue,radialAxis,dataArea);
  for (  ValueTick tick : ticks) {
    double angleDegrees=plot.isCounterClockwise() ? plot.getAngleOffset() : -plot.getAngleOffset();
    Point p=plot.translateToJava2D(angleDegrees,((NumberTick)tick).getNumber().doubleValue(),radialAxis,dataArea);
    int r=p.x - center.x;
    int upperLeftX=center.x - r;
    int upperLeftY=center.y - r;
    int d=2 * r;
    Ellipse2D ring=new Ellipse2D.Double(upperLeftX,upperLeftY,d,d);
    g2.setPaint(plot.getRadiusGridlinePaint());
    g2.draw(ring);
  }
}"
85847,"/** 
 * Plots the data for a given series.
 * @param g2  the drawing surface.
 * @param dataArea  the data area.
 * @param info  collects plot rendering info.
 * @param plot  the plot.
 * @param dataset  the dataset.
 * @param seriesIndex  the series index.
 */
@Override public void drawSeries(Graphics2D g2,Rectangle2D dataArea,PlotRenderingInfo info,PolarPlot plot,XYDataset dataset,int seriesIndex){
  GeneralPath poly=null;
  ValueAxis axis=plot.getAxisForDataset(plot.indexOf(dataset));
  final int numPoints=dataset.getItemCount(seriesIndex);
  for (int i=0; i < numPoints; i++) {
    double theta=dataset.getXValue(seriesIndex,i);
    double radius=dataset.getYValue(seriesIndex,i);
    Point p=plot.translateToJava2D(theta,radius,axis,dataArea);
    if (poly == null) {
      poly=new GeneralPath();
      poly.moveTo(p.x,p.y);
    }
 else {
      poly.lineTo(p.x,p.y);
    }
  }
  if (getConnectFirstAndLastPoint()) {
    poly.closePath();
  }
  g2.setPaint(lookupSeriesPaint(seriesIndex));
  g2.setStroke(lookupSeriesStroke(seriesIndex));
  if (isSeriesFilled(seriesIndex)) {
    Composite savedComposite=g2.getComposite();
    g2.setComposite(this.fillComposite);
    g2.fill(poly);
    g2.setComposite(savedComposite);
    if (this.drawOutlineWhenFilled) {
      g2.setPaint(lookupSeriesOutlinePaint(seriesIndex));
      g2.draw(poly);
    }
  }
 else {
    g2.draw(poly);
  }
  if (this.shapesVisible) {
    EntityCollection entities=null;
    if (info != null) {
      entities=info.getOwner().getEntityCollection();
    }
    PathIterator pi=poly.getPathIterator(null);
    int i=0;
    while (!pi.isDone()) {
      final float[] coords=new float[6];
      final int segType=pi.currentSegment(coords);
      pi.next();
      if (segType != PathIterator.SEG_LINETO && segType != PathIterator.SEG_MOVETO) {
        continue;
      }
      final int x=Math.round(coords[0]);
      final int y=Math.round(coords[1]);
      final Shape shape=ShapeUtilities.createTranslatedShape(getItemShape(seriesIndex,i++),x,y);
      Paint paint;
      if (useFillPaint) {
        paint=lookupSeriesFillPaint(seriesIndex);
      }
 else {
        paint=lookupSeriesPaint(seriesIndex);
      }
      g2.setPaint(paint);
      g2.fill(shape);
      if (isSeriesFilled(seriesIndex) && this.drawOutlineWhenFilled) {
        g2.setPaint(lookupSeriesOutlinePaint(seriesIndex));
        g2.setStroke(lookupSeriesOutlineStroke(seriesIndex));
        g2.draw(shape);
      }
      if (entities != null && AbstractXYItemRenderer.isPointInRect(dataArea,x,y)) {
        addEntity(entities,shape,dataset,seriesIndex,i - 1,x,y);
      }
    }
  }
}","/** 
 * Plots the data for a given series.
 * @param g2  the drawing surface.
 * @param dataArea  the data area.
 * @param info  collects plot rendering info.
 * @param plot  the plot.
 * @param dataset  the dataset.
 * @param seriesIndex  the series index.
 */
@Override public void drawSeries(Graphics2D g2,Rectangle2D dataArea,PlotRenderingInfo info,PolarPlot plot,XYDataset dataset,int seriesIndex){
  final int numPoints=dataset.getItemCount(seriesIndex);
  if (numPoints == 0) {
    return;
  }
  GeneralPath poly=null;
  ValueAxis axis=plot.getAxisForDataset(plot.indexOf(dataset));
  for (int i=0; i < numPoints; i++) {
    double theta=dataset.getXValue(seriesIndex,i);
    double radius=dataset.getYValue(seriesIndex,i);
    Point p=plot.translateToJava2D(theta,radius,axis,dataArea);
    if (poly == null) {
      poly=new GeneralPath();
      poly.moveTo(p.x,p.y);
    }
 else {
      poly.lineTo(p.x,p.y);
    }
  }
  if (getConnectFirstAndLastPoint()) {
    poly.closePath();
  }
  g2.setPaint(lookupSeriesPaint(seriesIndex));
  g2.setStroke(lookupSeriesStroke(seriesIndex));
  if (isSeriesFilled(seriesIndex)) {
    Composite savedComposite=g2.getComposite();
    g2.setComposite(this.fillComposite);
    g2.fill(poly);
    g2.setComposite(savedComposite);
    if (this.drawOutlineWhenFilled) {
      g2.setPaint(lookupSeriesOutlinePaint(seriesIndex));
      g2.draw(poly);
    }
  }
 else {
    g2.draw(poly);
  }
  if (this.shapesVisible) {
    EntityCollection entities=null;
    if (info != null) {
      entities=info.getOwner().getEntityCollection();
    }
    PathIterator pi=poly.getPathIterator(null);
    int i=0;
    while (!pi.isDone()) {
      final float[] coords=new float[6];
      final int segType=pi.currentSegment(coords);
      pi.next();
      if (segType != PathIterator.SEG_LINETO && segType != PathIterator.SEG_MOVETO) {
        continue;
      }
      final int x=Math.round(coords[0]);
      final int y=Math.round(coords[1]);
      final Shape shape=ShapeUtilities.createTranslatedShape(getItemShape(seriesIndex,i++),x,y);
      Paint paint;
      if (useFillPaint) {
        paint=lookupSeriesFillPaint(seriesIndex);
      }
 else {
        paint=lookupSeriesPaint(seriesIndex);
      }
      g2.setPaint(paint);
      g2.fill(shape);
      if (isSeriesFilled(seriesIndex) && this.drawOutlineWhenFilled) {
        g2.setPaint(lookupSeriesOutlinePaint(seriesIndex));
        g2.setStroke(lookupSeriesOutlineStroke(seriesIndex));
        g2.draw(shape);
      }
      if (entities != null && AbstractXYItemRenderer.isPointInRect(dataArea,x,y)) {
        addEntity(entities,shape,dataset,seriesIndex,i - 1,x,y);
      }
    }
  }
}"
85848,"/** 
 * @since 1.0.14
 */
@Override public XYToolTipGenerator getSeriesToolTipGenerator(int series){
  return this.toolTipGeneratorList.get(series);
}","/** 
 * Returns the tool tip generator for the specified series.
 * @return The tooltip generator (possibly <code>null</code>).
 * @since 1.0.14
 */
@Override public XYToolTipGenerator getSeriesToolTipGenerator(int series){
  return this.toolTipGeneratorList.get(series);
}"
85849,"/** 
 * Draw the angular gridlines - the spokes.
 * @param g2  the drawing surface.
 * @param plot  the plot.
 * @param ticks  the ticks.
 * @param dataArea  the data area.
 */
@Override public void drawAngularGridLines(Graphics2D g2,PolarPlot plot,List<ValueTick> ticks,Rectangle2D dataArea){
  g2.setFont(plot.getAngleLabelFont());
  g2.setStroke(plot.getAngleGridlineStroke());
  g2.setPaint(plot.getAngleGridlinePaint());
  double axisMin=plot.getAxis().getLowerBound();
  double maxRadius=plot.getAxis().getUpperBound();
  Point center=plot.translateToJava2D(axisMin,axisMin,plot.getAxis(),dataArea);
  for (  ValueTick tick : ticks) {
    double tickVal=tick.getValue();
    Point p=plot.translateToJava2D(tickVal,maxRadius,plot.getAxis(),dataArea);
    g2.setPaint(plot.getAngleGridlinePaint());
    g2.drawLine(center.x,center.y,p.x,p.y);
    if (plot.isAngleLabelsVisible()) {
      int x=p.x;
      int y=p.y;
      g2.setPaint(plot.getAngleLabelPaint());
      TextUtilities.drawAlignedString(tick.getText(),g2,x,y,tick.getTextAnchor());
    }
  }
}","/** 
 * Draw the angular gridlines - the spokes.
 * @param g2  the drawing surface.
 * @param plot  the plot (<code>null</code> not permitted).
 * @param ticks  the ticks (<code>null</code> not permitted).
 * @param dataArea  the data area.
 */
@Override public void drawAngularGridLines(Graphics2D g2,PolarPlot plot,List<ValueTick> ticks,Rectangle2D dataArea){
  g2.setFont(plot.getAngleLabelFont());
  g2.setStroke(plot.getAngleGridlineStroke());
  g2.setPaint(plot.getAngleGridlinePaint());
  ValueAxis axis=plot.getAxis();
  double centerValue, outerValue;
  if (axis.isInverted()) {
    outerValue=axis.getLowerBound();
    centerValue=axis.getUpperBound();
  }
 else {
    outerValue=axis.getUpperBound();
    centerValue=axis.getLowerBound();
  }
  Point center=plot.translateToJava2D(0,centerValue,axis,dataArea);
  for (  ValueTick tick : ticks) {
    double tickVal=tick.getValue();
    Point p=plot.translateToJava2D(tickVal,outerValue,plot.getAxis(),dataArea);
    g2.setPaint(plot.getAngleGridlinePaint());
    g2.drawLine(center.x,center.y,p.x,p.y);
    if (plot.isAngleLabelsVisible()) {
      int x=p.x;
      int y=p.y;
      g2.setPaint(plot.getAngleLabelPaint());
      TextUtilities.drawAlignedString(tick.getText(),g2,x,y,tick.getTextAnchor());
    }
  }
}"
85850,"/** 
 * Creates a new axis.
 * @param label  the axis label (<code>null</code> permitted).
 * @param first  the first time period in the axis range(<code>null</code> not permitted).
 * @param last  the last time period in the axis range(<code>null</code> not permitted).
 * @param timeZone  the time zone (<code>null</code> not permitted).
 * @param locale  the locale (<code>null</code> not permitted).
 * @since 1.0.13
 */
public PeriodAxis(String label,RegularTimePeriod first,RegularTimePeriod last,TimeZone timeZone,Locale locale){
  super(label,null);
  ParamChecks.nullNotPermitted(timeZone,""String_Node_Str"");
  ParamChecks.nullNotPermitted(locale,""String_Node_Str"");
  this.first=first;
  this.last=last;
  this.timeZone=timeZone;
  this.locale=locale;
  this.calendar=Calendar.getInstance(timeZone,locale);
  this.first.peg(this.calendar);
  this.last.peg(this.calendar);
  this.autoRangeTimePeriodClass=first.getClass();
  this.majorTickTimePeriodClass=first.getClass();
  this.minorTickMarksVisible=false;
  this.minorTickTimePeriodClass=RegularTimePeriod.downsize(this.majorTickTimePeriodClass);
  setAutoRange(true);
  this.labelInfo=new PeriodAxisLabelInfo[2];
  this.labelInfo[0]=new PeriodAxisLabelInfo(Month.class,new SimpleDateFormat(""String_Node_Str"",locale));
  this.labelInfo[1]=new PeriodAxisLabelInfo(Year.class,new SimpleDateFormat(""String_Node_Str"",locale));
}","/** 
 * Creates a new axis.
 * @param label  the axis label (<code>null</code> permitted).
 * @param first  the first time period in the axis range(<code>null</code> not permitted).
 * @param last  the last time period in the axis range(<code>null</code> not permitted).
 * @param timeZone  the time zone (<code>null</code> not permitted).
 * @param locale  the locale (<code>null</code> not permitted).
 * @since 1.0.13
 */
public PeriodAxis(String label,RegularTimePeriod first,RegularTimePeriod last,TimeZone timeZone,Locale locale){
  super(label,null);
  ParamChecks.nullNotPermitted(timeZone,""String_Node_Str"");
  ParamChecks.nullNotPermitted(locale,""String_Node_Str"");
  this.first=first;
  this.last=last;
  this.timeZone=timeZone;
  this.locale=locale;
  this.calendar=Calendar.getInstance(timeZone,locale);
  this.first.peg(this.calendar);
  this.last.peg(this.calendar);
  this.autoRangeTimePeriodClass=first.getClass();
  this.majorTickTimePeriodClass=first.getClass();
  this.minorTickMarksVisible=false;
  this.minorTickTimePeriodClass=RegularTimePeriod.downsize(this.majorTickTimePeriodClass);
  setAutoRange(true);
  this.labelInfo=new PeriodAxisLabelInfo[2];
  SimpleDateFormat df0=new SimpleDateFormat(""String_Node_Str"",locale);
  df0.setTimeZone(timeZone);
  this.labelInfo[0]=new PeriodAxisLabelInfo(Month.class,df0);
  SimpleDateFormat df1=new SimpleDateFormat(""String_Node_Str"",locale);
  df1.setTimeZone(timeZone);
  this.labelInfo[1]=new PeriodAxisLabelInfo(Year.class,df1);
}"
85851,"/** 
 * Draws the tick labels for one ""band"" of time periods.
 * @param band  the band index (zero-based).
 * @param g2  the graphics device.
 * @param state  the axis state.
 * @param dataArea  the data area.
 * @param edge  the edge where the axis is located.
 * @return The updated axis state.
 */
protected AxisState drawTickLabels(int band,Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){
  double delta1=0.0;
  FontMetrics fm=g2.getFontMetrics(this.labelInfo[band].getLabelFont());
  if (edge == RectangleEdge.BOTTOM) {
    delta1=this.labelInfo[band].getPadding().calculateTopOutset(fm.getHeight());
  }
 else   if (edge == RectangleEdge.TOP) {
    delta1=this.labelInfo[band].getPadding().calculateBottomOutset(fm.getHeight());
  }
  state.moveCursor(delta1,edge);
  long axisMin=this.first.getFirstMillisecond();
  long axisMax=this.last.getLastMillisecond();
  g2.setFont(this.labelInfo[band].getLabelFont());
  g2.setPaint(this.labelInfo[band].getLabelPaint());
  RegularTimePeriod p1=this.labelInfo[band].createInstance(new Date(axisMin),this.timeZone,this.locale);
  RegularTimePeriod p2=this.labelInfo[band].createInstance(new Date(axisMax),this.timeZone,this.locale);
  DateFormat df=this.labelInfo[band].getDateFormat();
  String label1=df.format(new Date(p1.getMiddleMillisecond()));
  String label2=df.format(new Date(p2.getMiddleMillisecond()));
  Rectangle2D b1=TextUtilities.getTextBounds(label1,g2,g2.getFontMetrics());
  Rectangle2D b2=TextUtilities.getTextBounds(label2,g2,g2.getFontMetrics());
  double w=Math.max(b1.getWidth(),b2.getWidth());
  long ww=Math.round(java2DToValue(dataArea.getX() + w + 5.0,dataArea,edge));
  if (isInverted()) {
    ww=axisMax - ww;
  }
 else {
    ww=ww - axisMin;
  }
  long length=p1.getLastMillisecond() - p1.getFirstMillisecond();
  int periods=(int)(ww / length) + 1;
  RegularTimePeriod p=this.labelInfo[band].createInstance(new Date(axisMin),this.timeZone,this.locale);
  Rectangle2D b=null;
  long lastXX=0L;
  float y=(float)(state.getCursor());
  TextAnchor anchor=TextAnchor.TOP_CENTER;
  float yDelta=(float)b1.getHeight();
  if (edge == RectangleEdge.TOP) {
    anchor=TextAnchor.BOTTOM_CENTER;
    yDelta=-yDelta;
  }
  while (p.getFirstMillisecond() <= axisMax) {
    float x=(float)valueToJava2D(p.getMiddleMillisecond(),dataArea,edge);
    String label=df.format(new Date(p.getMiddleMillisecond()));
    long first=p.getFirstMillisecond();
    long last=p.getLastMillisecond();
    if (last > axisMax) {
      Rectangle2D bb=TextUtilities.getTextBounds(label,g2,g2.getFontMetrics());
      if ((x + bb.getWidth() / 2) > dataArea.getMaxX()) {
        float xstart=(float)valueToJava2D(Math.max(first,axisMin),dataArea,edge);
        if (bb.getWidth() < (dataArea.getMaxX() - xstart)) {
          x=((float)dataArea.getMaxX() + xstart) / 2.0f;
        }
 else {
          label=null;
        }
      }
    }
    if (first < axisMin) {
      Rectangle2D bb=TextUtilities.getTextBounds(label,g2,g2.getFontMetrics());
      if ((x - bb.getWidth() / 2) < dataArea.getX()) {
        float xlast=(float)valueToJava2D(Math.min(last,axisMax),dataArea,edge);
        if (bb.getWidth() < (xlast - dataArea.getX())) {
          x=(xlast + (float)dataArea.getX()) / 2.0f;
        }
 else {
          label=null;
        }
      }
    }
    if (label != null) {
      g2.setPaint(this.labelInfo[band].getLabelPaint());
      b=TextUtilities.drawAlignedString(label,g2,x,y,anchor);
    }
    if (lastXX > 0L) {
      if (this.labelInfo[band].getDrawDividers()) {
        long nextXX=p.getFirstMillisecond();
        long mid=(lastXX + nextXX) / 2;
        float mid2d=(float)valueToJava2D(mid,dataArea,edge);
        g2.setStroke(this.labelInfo[band].getDividerStroke());
        g2.setPaint(this.labelInfo[band].getDividerPaint());
        g2.draw(new Line2D.Float(mid2d,y,mid2d,y + yDelta));
      }
    }
    lastXX=last;
    for (int i=0; i < periods; i++) {
      p=p.next();
    }
    p.peg(this.calendar);
  }
  double used=0.0;
  if (b != null) {
    used=b.getHeight();
    if (edge == RectangleEdge.BOTTOM) {
      used+=this.labelInfo[band].getPadding().calculateBottomOutset(fm.getHeight());
    }
 else     if (edge == RectangleEdge.TOP) {
      used+=this.labelInfo[band].getPadding().calculateTopOutset(fm.getHeight());
    }
  }
  state.moveCursor(used,edge);
  return state;
}","/** 
 * Draws the tick labels for one ""band"" of time periods.
 * @param band  the band index (zero-based).
 * @param g2  the graphics device.
 * @param state  the axis state.
 * @param dataArea  the data area.
 * @param edge  the edge where the axis is located.
 * @return The updated axis state.
 */
protected AxisState drawTickLabels(int band,Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){
  double delta1=0.0;
  FontMetrics fm=g2.getFontMetrics(this.labelInfo[band].getLabelFont());
  if (edge == RectangleEdge.BOTTOM) {
    delta1=this.labelInfo[band].getPadding().calculateTopOutset(fm.getHeight());
  }
 else   if (edge == RectangleEdge.TOP) {
    delta1=this.labelInfo[band].getPadding().calculateBottomOutset(fm.getHeight());
  }
  state.moveCursor(delta1,edge);
  long axisMin=this.first.getFirstMillisecond();
  long axisMax=this.last.getLastMillisecond();
  g2.setFont(this.labelInfo[band].getLabelFont());
  g2.setPaint(this.labelInfo[band].getLabelPaint());
  RegularTimePeriod p1=this.labelInfo[band].createInstance(new Date(axisMin),this.timeZone,this.locale);
  RegularTimePeriod p2=this.labelInfo[band].createInstance(new Date(axisMax),this.timeZone,this.locale);
  DateFormat df=this.labelInfo[band].getDateFormat();
  df.setTimeZone(this.timeZone);
  String label1=df.format(new Date(p1.getMiddleMillisecond()));
  String label2=df.format(new Date(p2.getMiddleMillisecond()));
  Rectangle2D b1=TextUtilities.getTextBounds(label1,g2,g2.getFontMetrics());
  Rectangle2D b2=TextUtilities.getTextBounds(label2,g2,g2.getFontMetrics());
  double w=Math.max(b1.getWidth(),b2.getWidth());
  long ww=Math.round(java2DToValue(dataArea.getX() + w + 5.0,dataArea,edge));
  if (isInverted()) {
    ww=axisMax - ww;
  }
 else {
    ww=ww - axisMin;
  }
  long length=p1.getLastMillisecond() - p1.getFirstMillisecond();
  int periods=(int)(ww / length) + 1;
  RegularTimePeriod p=this.labelInfo[band].createInstance(new Date(axisMin),this.timeZone,this.locale);
  Rectangle2D b=null;
  long lastXX=0L;
  float y=(float)(state.getCursor());
  TextAnchor anchor=TextAnchor.TOP_CENTER;
  float yDelta=(float)b1.getHeight();
  if (edge == RectangleEdge.TOP) {
    anchor=TextAnchor.BOTTOM_CENTER;
    yDelta=-yDelta;
  }
  while (p.getFirstMillisecond() <= axisMax) {
    float x=(float)valueToJava2D(p.getMiddleMillisecond(),dataArea,edge);
    String label=df.format(new Date(p.getMiddleMillisecond()));
    long first=p.getFirstMillisecond();
    long last=p.getLastMillisecond();
    if (last > axisMax) {
      Rectangle2D bb=TextUtilities.getTextBounds(label,g2,g2.getFontMetrics());
      if ((x + bb.getWidth() / 2) > dataArea.getMaxX()) {
        float xstart=(float)valueToJava2D(Math.max(first,axisMin),dataArea,edge);
        if (bb.getWidth() < (dataArea.getMaxX() - xstart)) {
          x=((float)dataArea.getMaxX() + xstart) / 2.0f;
        }
 else {
          label=null;
        }
      }
    }
    if (first < axisMin) {
      Rectangle2D bb=TextUtilities.getTextBounds(label,g2,g2.getFontMetrics());
      if ((x - bb.getWidth() / 2) < dataArea.getX()) {
        float xlast=(float)valueToJava2D(Math.min(last,axisMax),dataArea,edge);
        if (bb.getWidth() < (xlast - dataArea.getX())) {
          x=(xlast + (float)dataArea.getX()) / 2.0f;
        }
 else {
          label=null;
        }
      }
    }
    if (label != null) {
      g2.setPaint(this.labelInfo[band].getLabelPaint());
      b=TextUtilities.drawAlignedString(label,g2,x,y,anchor);
    }
    if (lastXX > 0L) {
      if (this.labelInfo[band].getDrawDividers()) {
        long nextXX=p.getFirstMillisecond();
        long mid=(lastXX + nextXX) / 2;
        float mid2d=(float)valueToJava2D(mid,dataArea,edge);
        g2.setStroke(this.labelInfo[band].getDividerStroke());
        g2.setPaint(this.labelInfo[band].getDividerPaint());
        g2.draw(new Line2D.Float(mid2d,y,mid2d,y + yDelta));
      }
    }
    lastXX=last;
    for (int i=0; i < periods; i++) {
      p=p.next();
    }
    p.peg(this.calendar);
  }
  double used=0.0;
  if (b != null) {
    used=b.getHeight();
    if (edge == RectangleEdge.BOTTOM) {
      used+=this.labelInfo[band].getPadding().calculateBottomOutset(fm.getHeight());
    }
 else     if (edge == RectangleEdge.TOP) {
      used+=this.labelInfo[band].getPadding().calculateTopOutset(fm.getHeight());
    }
  }
  state.moveCursor(used,edge);
  return state;
}"
85852,"/** 
 * Draws a single data item.
 * @param g2  the graphics device (<code>null</code> not permitted).
 * @param section  the section index.
 * @param dataArea  the data plot area.
 * @param state  state information for one chart.
 * @param currentPass  the current pass index.
 */
protected void drawItem(Graphics2D g2,int section,Rectangle2D dataArea,PiePlotState state,int currentPass){
  Number n=this.dataset.getValue(section);
  if (n == null) {
    return;
  }
  double value=n.doubleValue();
  double angle1=0.0;
  double angle2=0.0;
  if (this.direction == Rotation.CLOCKWISE) {
    angle1=state.getLatestAngle();
    angle2=angle1 - value / state.getTotal() * 360.0;
  }
 else   if (this.direction == Rotation.ANTICLOCKWISE) {
    angle1=state.getLatestAngle();
    angle2=angle1 + value / state.getTotal() * 360.0;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  double angle=(angle2 - angle1);
  if (Math.abs(angle) > getMinimumArcAngleToDraw()) {
    double ep=0.0;
    double mep=getMaximumExplodePercent();
    if (mep > 0.0) {
      ep=getExplodePercent(section) / mep;
    }
    Rectangle2D arcBounds=getArcBounds(state.getPieArea(),state.getExplodedPieArea(),angle1,angle,ep);
    Arc2D.Double arc=new Arc2D.Double(arcBounds,angle1,angle,Arc2D.PIE);
    if (currentPass == 0) {
      if (this.shadowPaint != null && this.shadowGenerator == null) {
        Shape shadowArc=ShapeUtilities.createTranslatedShape(arc,(float)this.shadowXOffset,(float)this.shadowYOffset);
        g2.setPaint(this.shadowPaint);
        g2.fill(shadowArc);
      }
    }
 else     if (currentPass == 1) {
      Comparable key=getSectionKey(section);
      Paint paint=lookupSectionPaint(key,state);
      g2.setPaint(paint);
      g2.fill(arc);
      Paint outlinePaint=lookupSectionOutlinePaint(key);
      Stroke outlineStroke=lookupSectionOutlineStroke(key);
      if (this.sectionOutlinesVisible) {
        g2.setPaint(outlinePaint);
        g2.setStroke(outlineStroke);
        g2.draw(arc);
      }
      if (state.getInfo() != null) {
        EntityCollection entities=state.getEntityCollection();
        if (entities != null) {
          String tip=null;
          if (this.toolTipGenerator != null) {
            tip=this.toolTipGenerator.generateToolTip(this.dataset,key);
          }
          String url=null;
          if (this.urlGenerator != null) {
            url=this.urlGenerator.generateURL(this.dataset,key,this.pieIndex);
          }
          PieSectionEntity entity=new PieSectionEntity(arc,this.dataset,this.pieIndex,section,key,tip,url);
          entities.add(entity);
        }
      }
    }
  }
  state.setLatestAngle(angle2);
}","/** 
 * Draws a single data item.
 * @param g2  the graphics device (<code>null</code> not permitted).
 * @param section  the section index.
 * @param dataArea  the data plot area.
 * @param state  state information for one chart.
 * @param currentPass  the current pass index.
 */
protected void drawItem(Graphics2D g2,int section,Rectangle2D dataArea,PiePlotState state,int currentPass){
  Number n=this.dataset.getValue(section);
  if (n == null) {
    return;
  }
  double value=n.doubleValue();
  double angle1=0.0;
  double angle2=0.0;
  if (this.direction == Rotation.CLOCKWISE) {
    angle1=state.getLatestAngle();
    angle2=angle1 - value / state.getTotal() * 360.0;
  }
 else   if (this.direction == Rotation.ANTICLOCKWISE) {
    angle1=state.getLatestAngle();
    angle2=angle1 + value / state.getTotal() * 360.0;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  double angle=(angle2 - angle1);
  if (Math.abs(angle) > getMinimumArcAngleToDraw()) {
    double ep=0.0;
    double mep=getMaximumExplodePercent();
    if (mep > 0.0) {
      ep=getExplodePercent(this.getSectionKey(section)) / mep;
    }
    Rectangle2D arcBounds=getArcBounds(state.getPieArea(),state.getExplodedPieArea(),angle1,angle,ep);
    Arc2D.Double arc=new Arc2D.Double(arcBounds,angle1,angle,Arc2D.PIE);
    if (currentPass == 0) {
      if (this.shadowPaint != null && this.shadowGenerator == null) {
        Shape shadowArc=ShapeUtilities.createTranslatedShape(arc,(float)this.shadowXOffset,(float)this.shadowYOffset);
        g2.setPaint(this.shadowPaint);
        g2.fill(shadowArc);
      }
    }
 else     if (currentPass == 1) {
      Comparable key=getSectionKey(section);
      Paint paint=lookupSectionPaint(key,state);
      g2.setPaint(paint);
      g2.fill(arc);
      Paint outlinePaint=lookupSectionOutlinePaint(key);
      Stroke outlineStroke=lookupSectionOutlineStroke(key);
      if (this.sectionOutlinesVisible) {
        g2.setPaint(outlinePaint);
        g2.setStroke(outlineStroke);
        g2.draw(arc);
      }
      if (state.getInfo() != null) {
        EntityCollection entities=state.getEntityCollection();
        if (entities != null) {
          String tip=null;
          if (this.toolTipGenerator != null) {
            tip=this.toolTipGenerator.generateToolTip(this.dataset,key);
          }
          String url=null;
          if (this.urlGenerator != null) {
            url=this.urlGenerator.generateURL(this.dataset,key,this.pieIndex);
          }
          PieSectionEntity entity=new PieSectionEntity(arc,this.dataset,this.pieIndex,section,key,tip,url);
          entities.add(entity);
        }
      }
    }
  }
  state.setLatestAngle(angle2);
}"
85853,"/** 
 * Draws the item (first pass). This method draws the lines connecting the items. Instead of drawing separate lines, a GeneralPath is constructed and drawn at the end of the series painting.
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param plot  the plot (can be used to obtain standard color informationetc).
 * @param dataset  the dataset.
 * @param pass  the pass.
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataArea  the area within which the data is being drawn.
 */
@Override protected void drawPrimaryLineAsPath(XYItemRendererState state,Graphics2D g2,XYPlot plot,XYDataset dataset,int pass,int series,int item,ValueAxis domainAxis,ValueAxis rangeAxis,Rectangle2D dataArea){
  RectangleEdge xAxisLocation=plot.getDomainAxisEdge();
  RectangleEdge yAxisLocation=plot.getRangeAxisEdge();
  double x1=dataset.getXValue(series,item);
  double y1=dataset.getYValue(series,item);
  double transX1=domainAxis.valueToJava2D(x1,dataArea,xAxisLocation);
  double transY1=rangeAxis.valueToJava2D(y1,dataArea,yAxisLocation);
  if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) {
    ControlPoint p=new ControlPoint(plot.getOrientation() == PlotOrientation.HORIZONTAL ? (float)transY1 : (float)transX1,plot.getOrientation() == PlotOrientation.HORIZONTAL ? (float)transX1 : (float)transY1);
    if (!this.points.contains(p)) {
      this.points.add(p);
    }
  }
  if (item == dataset.getItemCount(series) - 1) {
    State s=(State)state;
    if (this.points.size() > 1) {
      ControlPoint cp0=(ControlPoint)this.points.get(0);
      s.seriesPath.moveTo(cp0.x,cp0.y);
      if (this.points.size() == 2) {
        ControlPoint cp1=(ControlPoint)this.points.get(1);
        s.seriesPath.lineTo(cp1.x,cp1.y);
      }
 else {
        int np=this.points.size();
        float[] d=new float[np];
        float[] x=new float[np];
        float y;
        float t;
        float oldy=0;
        float oldt=0;
        float[] a=new float[np];
        float t1;
        float t2;
        float[] h=new float[np];
        for (int i=0; i < np; i++) {
          ControlPoint cpi=(ControlPoint)this.points.get(i);
          x[i]=cpi.x;
          d[i]=cpi.y;
        }
        for (int i=1; i <= np - 1; i++) {
          h[i]=x[i] - x[i - 1];
        }
        float[] sub=new float[np - 1];
        float[] diag=new float[np - 1];
        float[] sup=new float[np - 1];
        for (int i=1; i <= np - 2; i++) {
          diag[i]=(h[i] + h[i + 1]) / 3;
          sup[i]=h[i + 1] / 6;
          sub[i]=h[i] / 6;
          a[i]=(d[i + 1] - d[i]) / h[i + 1] - (d[i] - d[i - 1]) / h[i];
        }
        solveTridiag(sub,diag,sup,a,np - 2);
        oldt=x[0];
        oldy=d[0];
        s.seriesPath.moveTo(oldt,oldy);
        for (int i=1; i <= np - 1; i++) {
          for (int j=1; j <= this.precision; j++) {
            t1=(h[i] * j) / this.precision;
            t2=h[i] - t1;
            y=((-a[i - 1] / 6 * (t2 + h[i]) * t1 + d[i - 1]) * t2 + (-a[i] / 6 * (t1 + h[i]) * t2 + d[i]) * t1) / h[i];
            t=x[i - 1] + t1;
            s.seriesPath.lineTo(t,y);
          }
        }
      }
      drawFirstPassShape(g2,pass,series,item,s.seriesPath);
    }
    this.points=new Vector();
  }
}","/** 
 * Draws the item (first pass). This method draws the lines connecting the items. Instead of drawing separate lines, a GeneralPath is constructed and drawn at the end of the series painting.
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param plot  the plot (can be used to obtain standard color informationetc).
 * @param dataset  the dataset.
 * @param pass  the pass.
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataArea  the area within which the data is being drawn.
 */
@Override protected void drawPrimaryLineAsPath(XYItemRendererState state,Graphics2D g2,XYPlot plot,XYDataset dataset,int pass,int series,int item,ValueAxis domainAxis,ValueAxis rangeAxis,Rectangle2D dataArea){
  RectangleEdge xAxisLocation=plot.getDomainAxisEdge();
  RectangleEdge yAxisLocation=plot.getRangeAxisEdge();
  double x1=dataset.getXValue(series,item);
  double y1=dataset.getYValue(series,item);
  double transX1=domainAxis.valueToJava2D(x1,dataArea,xAxisLocation);
  double transY1=rangeAxis.valueToJava2D(y1,dataArea,yAxisLocation);
  if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) {
    ControlPoint p=new ControlPoint(plot.getOrientation() == PlotOrientation.HORIZONTAL ? (float)transY1 : (float)transX1,plot.getOrientation() == PlotOrientation.HORIZONTAL ? (float)transX1 : (float)transY1);
    if (!this.points.contains(p)) {
      this.points.add(p);
    }
  }
  if (item == dataset.getItemCount(series) - 1) {
    State s=(State)state;
    if (this.points.size() > 1) {
      ControlPoint cp0=this.points.get(0);
      s.seriesPath.moveTo(cp0.x,cp0.y);
      if (this.points.size() == 2) {
        ControlPoint cp1=this.points.get(1);
        s.seriesPath.lineTo(cp1.x,cp1.y);
      }
 else {
        int np=this.points.size();
        float[] d=new float[np];
        float[] x=new float[np];
        float y;
        float t;
        float oldy=0;
        float oldt=0;
        float[] a=new float[np];
        float t1;
        float t2;
        float[] h=new float[np];
        for (int i=0; i < np; i++) {
          ControlPoint cpi=this.points.get(i);
          x[i]=cpi.x;
          d[i]=cpi.y;
        }
        for (int i=1; i <= np - 1; i++) {
          h[i]=x[i] - x[i - 1];
        }
        float[] sub=new float[np - 1];
        float[] diag=new float[np - 1];
        float[] sup=new float[np - 1];
        for (int i=1; i <= np - 2; i++) {
          diag[i]=(h[i] + h[i + 1]) / 3;
          sup[i]=h[i + 1] / 6;
          sub[i]=h[i] / 6;
          a[i]=(d[i + 1] - d[i]) / h[i + 1] - (d[i] - d[i - 1]) / h[i];
        }
        solveTridiag(sub,diag,sup,a,np - 2);
        oldt=x[0];
        oldy=d[0];
        s.seriesPath.moveTo(oldt,oldy);
        for (int i=1; i <= np - 1; i++) {
          for (int j=1; j <= this.precision; j++) {
            t1=(h[i] * j) / this.precision;
            t2=h[i] - t1;
            y=((-a[i - 1] / 6 * (t2 + h[i]) * t1 + d[i - 1]) * t2 + (-a[i] / 6 * (t1 + h[i]) * t2 + d[i]) * t1) / h[i];
            t=x[i - 1] + t1;
            s.seriesPath.lineTo(t,y);
          }
        }
      }
      drawFirstPassShape(g2,pass,series,item,s.seriesPath);
    }
    this.points=new ArrayList<ControlPoint>();
  }
}"
85854,"/** 
 * Initialises the renderer. <P> This method will be called before the first item is rendered, giving the renderer an opportunity to initialise any state information it wants to maintain.  The renderer can do nothing if it chooses.
 * @param g2  the graphics device.
 * @param dataArea  the area inside the axes.
 * @param plot  the plot.
 * @param data  the data.
 * @param info  an optional info collection object to return data back tothe caller.
 * @return The renderer state.
 */
@Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){
  State state=(State)super.initialise(g2,dataArea,plot,data,info);
  state.setProcessVisibleItemsOnly(false);
  this.points=new Vector();
  setDrawSeriesLineAsPath(true);
  return state;
}","/** 
 * Initialises the renderer. <P> This method will be called before the first item is rendered, giving the renderer an opportunity to initialise any state information it wants to maintain.  The renderer can do nothing if it chooses.
 * @param g2  the graphics device.
 * @param dataArea  the area inside the axes.
 * @param plot  the plot.
 * @param data  the data.
 * @param info  an optional info collection object to return data back tothe caller.
 * @return The renderer state.
 */
@Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){
  State state=(State)super.initialise(g2,dataArea,plot,data,info);
  state.setProcessVisibleItemsOnly(false);
  this.points=new ArrayList<ControlPoint>();
  setDrawSeriesLineAsPath(true);
  return state;
}"
85855,"/** 
 * Some general checks for the lookup table.
 */
public void testGeneral(){
  LookupPaintScale s=new LookupPaintScale(0.0,100.0,Color.BLACK);
  assertEquals(Color.BLACK,s.getPaint(-1.0));
  assertEquals(Color.BLACK,s.getPaint(0.0));
  assertEquals(Color.BLACK,s.getPaint(50.0));
  assertEquals(Color.BLACK,s.getPaint(100.0));
  assertEquals(Color.BLACK,s.getPaint(101.0));
  s.add(new Double(50.0),Color.BLUE);
  assertEquals(Color.BLACK,s.getPaint(-1.0));
  assertEquals(Color.BLACK,s.getPaint(0.0));
  assertEquals(Color.BLUE,s.getPaint(50.0));
  assertEquals(Color.BLUE,s.getPaint(100.0));
  assertEquals(Color.BLACK,s.getPaint(101.0));
  s.add(new Double(50.0),Color.RED);
  assertEquals(Color.BLACK,s.getPaint(-1.0));
  assertEquals(Color.BLACK,s.getPaint(0.0));
  assertEquals(Color.RED,s.getPaint(50.0));
  assertEquals(Color.RED,s.getPaint(100.0));
  assertEquals(Color.BLACK,s.getPaint(101.0));
  s.add(new Double(25.0),Color.green);
  assertEquals(Color.BLACK,s.getPaint(-1.0));
  assertEquals(Color.BLACK,s.getPaint(0.0));
  assertEquals(Color.green,s.getPaint(25.0));
  assertEquals(Color.RED,s.getPaint(50.0));
  assertEquals(Color.RED,s.getPaint(100.0));
  assertEquals(Color.BLACK,s.getPaint(101.0));
  s.add(new Double(75.0),Color.yellow);
  assertEquals(Color.BLACK,s.getPaint(-1.0));
  assertEquals(Color.BLACK,s.getPaint(0.0));
  assertEquals(Color.green,s.getPaint(25.0));
  assertEquals(Color.RED,s.getPaint(50.0));
  assertEquals(Color.yellow,s.getPaint(75.0));
  assertEquals(Color.yellow,s.getPaint(100.0));
  assertEquals(Color.BLACK,s.getPaint(101.0));
}","/** 
 * Some general checks for the lookup table.
 */
public void testGeneral(){
  LookupPaintScale s=new LookupPaintScale(0.0,100.0,Color.BLACK);
  assertEquals(Color.BLACK,s.getPaint(-1.0));
  assertEquals(Color.BLACK,s.getPaint(0.0));
  assertEquals(Color.BLACK,s.getPaint(50.0));
  assertEquals(Color.BLACK,s.getPaint(100.0));
  assertEquals(Color.BLACK,s.getPaint(101.0));
  s.add(50.0,Color.BLUE);
  assertEquals(Color.BLACK,s.getPaint(-1.0));
  assertEquals(Color.BLACK,s.getPaint(0.0));
  assertEquals(Color.BLUE,s.getPaint(50.0));
  assertEquals(Color.BLUE,s.getPaint(100.0));
  assertEquals(Color.BLACK,s.getPaint(101.0));
  s.add(50.0,Color.RED);
  assertEquals(Color.BLACK,s.getPaint(-1.0));
  assertEquals(Color.BLACK,s.getPaint(0.0));
  assertEquals(Color.RED,s.getPaint(50.0));
  assertEquals(Color.RED,s.getPaint(100.0));
  assertEquals(Color.BLACK,s.getPaint(101.0));
  s.add(25.0,Color.green);
  assertEquals(Color.BLACK,s.getPaint(-1.0));
  assertEquals(Color.BLACK,s.getPaint(0.0));
  assertEquals(Color.green,s.getPaint(25.0));
  assertEquals(Color.RED,s.getPaint(50.0));
  assertEquals(Color.RED,s.getPaint(100.0));
  assertEquals(Color.BLACK,s.getPaint(101.0));
  s.add(75.0,Color.yellow);
  assertEquals(Color.BLACK,s.getPaint(-1.0));
  assertEquals(Color.BLACK,s.getPaint(0.0));
  assertEquals(Color.green,s.getPaint(25.0));
  assertEquals(Color.RED,s.getPaint(50.0));
  assertEquals(Color.yellow,s.getPaint(75.0));
  assertEquals(Color.yellow,s.getPaint(100.0));
  assertEquals(Color.BLACK,s.getPaint(101.0));
}"
85856,"/** 
 * Serialize an instance, restore it, and check for equality.
 */
public void testSerialization(){
  LookupPaintScale g1=new LookupPaintScale();
  LookupPaintScale g2=null;
  try {
    ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    ObjectOutput out=new ObjectOutputStream(buffer);
    out.writeObject(g1);
    out.close();
    ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
    g2=(LookupPaintScale)in.readObject();
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  assertEquals(g1,g2);
  g1=new LookupPaintScale(1.0,2.0,new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.yellow));
  g1.add(new Double(1.5),new GradientPaint(1.1f,2.2f,Color.RED,3.3f,4.4f,Color.BLUE));
  g2=null;
  try {
    ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    ObjectOutput out=new ObjectOutputStream(buffer);
    out.writeObject(g1);
    out.close();
    ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
    g2=(LookupPaintScale)in.readObject();
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  assertEquals(g1,g2);
}","/** 
 * Serialize an instance, restore it, and check for equality.
 */
public void testSerialization(){
  LookupPaintScale g1=new LookupPaintScale();
  LookupPaintScale g2=null;
  try {
    ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    ObjectOutput out=new ObjectOutputStream(buffer);
    out.writeObject(g1);
    out.close();
    ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
    g2=(LookupPaintScale)in.readObject();
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  assertEquals(g1,g2);
  g1=new LookupPaintScale(1.0,2.0,new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.yellow));
  g1.add(1.5,new GradientPaint(1.1f,2.2f,Color.RED,3.3f,4.4f,Color.BLUE));
  g2=null;
  try {
    ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    ObjectOutput out=new ObjectOutputStream(buffer);
    out.writeObject(g1);
    out.close();
    ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
    g2=(LookupPaintScale)in.readObject();
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  assertEquals(g1,g2);
}"
85857,"/** 
 * A test for the equals() method.
 */
public void testEquals(){
  LookupPaintScale g1=new LookupPaintScale();
  LookupPaintScale g2=new LookupPaintScale();
  assertTrue(g1.equals(g2));
  assertTrue(g2.equals(g1));
  g1=new LookupPaintScale(1.0,2.0,Color.RED);
  assertFalse(g1.equals(g2));
  g2=new LookupPaintScale(1.0,2.0,Color.RED);
  assertTrue(g1.equals(g2));
  g1.add(new Double(1.5),new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
  assertFalse(g1.equals(g2));
  g2.add(new Double(1.5),new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
  assertTrue(g1.equals(g2));
}","/** 
 * A test for the equals() method.
 */
public void testEquals(){
  LookupPaintScale g1=new LookupPaintScale();
  LookupPaintScale g2=new LookupPaintScale();
  assertTrue(g1.equals(g2));
  assertTrue(g2.equals(g1));
  g1=new LookupPaintScale(1.0,2.0,Color.RED);
  assertFalse(g1.equals(g2));
  g2=new LookupPaintScale(1.0,2.0,Color.RED);
  assertTrue(g1.equals(g2));
  g1.add(1.5,new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
  assertFalse(g1.equals(g2));
  g2.add(1.5,new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
  assertTrue(g1.equals(g2));
}"
85858,"private boolean lineEquals(Line2D line,double x1,double y1,double x2,double y2){
  boolean result=true;
  double epsilon=0.0000000001;
  if (Math.abs(line.getX1() - x1) > epsilon)   result=false;
  if (Math.abs(line.getY1() - y1) > epsilon)   result=false;
  if (Math.abs(line.getX2() - x2) > epsilon)   result=false;
  if (Math.abs(line.getY2() - y2) > epsilon)   result=false;
  if (result == false) {
    System.out.println(line.getX1() + ""String_Node_Str"" + line.getY1()+ ""String_Node_Str""+ line.getX2()+ ""String_Node_Str""+ line.getY2());
  }
  return result;
}","private boolean lineEquals(Line2D line,double x1,double y1,double x2,double y2){
  boolean result=true;
  double epsilon=0.0000000001;
  if (Math.abs(line.getX1() - x1) > epsilon) {
    result=false;
  }
  if (Math.abs(line.getY1() - y1) > epsilon) {
    result=false;
  }
  if (Math.abs(line.getX2() - x2) > epsilon) {
    result=false;
  }
  if (Math.abs(line.getY2() - y2) > epsilon) {
    result=false;
  }
  if (result == false) {
    System.out.println(line.getX1() + ""String_Node_Str"" + line.getY1()+ ""String_Node_Str""+ line.getX2()+ ""String_Node_Str""+ line.getY2());
  }
  return result;
}"
85859,"/** 
 * Init method.
 * @throws ServletException never.
 */
@Override public void init() throws ServletException {
  return;
}","/** 
 * Init method.
 * @throws ServletException never.
 */
@Override public void init() throws ServletException {
}"
85860,"/** 
 * Service method.
 * @param request  the request.
 * @param response  the response.
 * @throws ServletException ??.
 * @throws IOException ??.
 */
@Override public void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  HttpSession session=request.getSession();
  String filename=request.getParameter(""String_Node_Str"");
  if (filename == null) {
    throw new ServletException(""String_Node_Str"");
  }
  filename=ServletUtilities.searchReplace(filename,""String_Node_Str"",""String_Node_Str"");
  File file=new File(System.getProperty(""String_Node_Str""),filename);
  if (!file.exists()) {
    throw new ServletException(""String_Node_Str"" + filename + ""String_Node_Str"");
  }
  boolean isChartInUserList=false;
  ChartDeleter chartDeleter=(ChartDeleter)session.getAttribute(""String_Node_Str"");
  if (chartDeleter != null) {
    isChartInUserList=chartDeleter.isChartAvailable(filename);
  }
  boolean isChartPublic=false;
  if (filename.length() >= 6) {
    if (filename.substring(0,6).equals(""String_Node_Str"")) {
      isChartPublic=true;
    }
  }
  boolean isOneTimeChart=false;
  if (filename.startsWith(ServletUtilities.getTempOneTimeFilePrefix())) {
    isOneTimeChart=true;
  }
  if (isChartInUserList || isChartPublic || isOneTimeChart) {
    ServletUtilities.sendTempFile(file,response);
    if (isOneTimeChart) {
      file.delete();
    }
  }
 else {
    throw new ServletException(""String_Node_Str"");
  }
  return;
}","/** 
 * Service method.
 * @param request  the request.
 * @param response  the response.
 * @throws ServletException ??.
 * @throws IOException ??.
 */
@Override public void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  HttpSession session=request.getSession();
  String filename=request.getParameter(""String_Node_Str"");
  if (filename == null) {
    throw new ServletException(""String_Node_Str"");
  }
  filename=ServletUtilities.searchReplace(filename,""String_Node_Str"",""String_Node_Str"");
  File file=new File(System.getProperty(""String_Node_Str""),filename);
  if (!file.exists()) {
    throw new ServletException(""String_Node_Str"" + filename + ""String_Node_Str"");
  }
  boolean isChartInUserList=false;
  ChartDeleter chartDeleter=(ChartDeleter)session.getAttribute(""String_Node_Str"");
  if (chartDeleter != null) {
    isChartInUserList=chartDeleter.isChartAvailable(filename);
  }
  boolean isChartPublic=false;
  if (filename.length() >= 6) {
    if (filename.substring(0,6).equals(""String_Node_Str"")) {
      isChartPublic=true;
    }
  }
  boolean isOneTimeChart=false;
  if (filename.startsWith(ServletUtilities.getTempOneTimeFilePrefix())) {
    isOneTimeChart=true;
  }
  if (isChartInUserList || isChartPublic || isOneTimeChart) {
    ServletUtilities.sendTempFile(file,response);
    if (isOneTimeChart) {
      file.delete();
    }
  }
 else {
    throw new ServletException(""String_Node_Str"");
  }
}"
85861,"/** 
 * Binary streams the specified file to the HTTP response in 1KB chunks.
 * @param file  the file to be streamed.
 * @param response  the HTTP response object.
 * @param mimeType  the mime type of the file, null allowed.
 * @throws IOException if there is an I/O problem.
 */
public static void sendTempFile(File file,HttpServletResponse response,String mimeType) throws IOException {
  if (file.exists()) {
    BufferedInputStream bis=new BufferedInputStream(new FileInputStream(file));
    if (mimeType != null) {
      response.setHeader(""String_Node_Str"",mimeType);
    }
    response.setHeader(""String_Node_Str"",String.valueOf(file.length()));
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
    sdf.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
    response.setHeader(""String_Node_Str"",sdf.format(new Date(file.lastModified())));
    BufferedOutputStream bos=new BufferedOutputStream(response.getOutputStream());
    byte[] input=new byte[1024];
    boolean eof=false;
    while (!eof) {
      int length=bis.read(input);
      if (length == -1) {
        eof=true;
      }
 else {
        bos.write(input,0,length);
      }
    }
    bos.flush();
    bis.close();
    bos.close();
  }
 else {
    throw new FileNotFoundException(file.getAbsolutePath());
  }
  return;
}","/** 
 * Binary streams the specified file to the HTTP response in 1KB chunks.
 * @param file  the file to be streamed.
 * @param response  the HTTP response object.
 * @param mimeType  the mime type of the file, null allowed.
 * @throws IOException if there is an I/O problem.
 */
public static void sendTempFile(File file,HttpServletResponse response,String mimeType) throws IOException {
  if (file.exists()) {
    BufferedInputStream bis=new BufferedInputStream(new FileInputStream(file));
    if (mimeType != null) {
      response.setHeader(""String_Node_Str"",mimeType);
    }
    response.setHeader(""String_Node_Str"",String.valueOf(file.length()));
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
    sdf.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
    response.setHeader(""String_Node_Str"",sdf.format(new Date(file.lastModified())));
    BufferedOutputStream bos=new BufferedOutputStream(response.getOutputStream());
    byte[] input=new byte[1024];
    boolean eof=false;
    while (!eof) {
      int length=bis.read(input);
      if (length == -1) {
        eof=true;
      }
 else {
        bos.write(input,0,length);
      }
    }
    bos.flush();
    bis.close();
    bos.close();
  }
 else {
    throw new FileNotFoundException(file.getAbsolutePath());
  }
}"
85862,"/** 
 * Draws the visual representation of a single data item.
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the area within which the plot is being drawn.
 * @param info  collects info about the drawing.
 * @param plot  the plot (can be used to obtain standard colorinformation etc).
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the dataset.
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 * @param crosshairState  crosshair information for the plot(<code>null</code> permitted).
 * @param pass  the pass index.
 */
@Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){
  boolean horiz;
  PlotOrientation orientation=plot.getOrientation();
  if (orientation == PlotOrientation.HORIZONTAL) {
    horiz=true;
  }
 else   if (orientation == PlotOrientation.VERTICAL) {
    horiz=false;
  }
 else {
    return;
  }
  EntityCollection entities=null;
  if (info != null) {
    entities=info.getOwner().getEntityCollection();
  }
  OHLCDataset highLowData=(OHLCDataset)dataset;
  double x=highLowData.getXValue(series,item);
  double yHigh=highLowData.getHighValue(series,item);
  double yLow=highLowData.getLowValue(series,item);
  double yOpen=highLowData.getOpenValue(series,item);
  double yClose=highLowData.getCloseValue(series,item);
  RectangleEdge domainEdge=plot.getDomainAxisEdge();
  double xx=domainAxis.valueToJava2D(x,dataArea,domainEdge);
  RectangleEdge edge=plot.getRangeAxisEdge();
  double yyHigh=rangeAxis.valueToJava2D(yHigh,dataArea,edge);
  double yyLow=rangeAxis.valueToJava2D(yLow,dataArea,edge);
  double yyOpen=rangeAxis.valueToJava2D(yOpen,dataArea,edge);
  double yyClose=rangeAxis.valueToJava2D(yClose,dataArea,edge);
  double volumeWidth;
  double stickWidth;
  if (this.candleWidth > 0) {
    volumeWidth=this.candleWidth;
    stickWidth=this.candleWidth;
  }
 else {
    double xxWidth=0;
    int itemCount;
switch (this.autoWidthMethod) {
case WIDTHMETHOD_AVERAGE:
      itemCount=highLowData.getItemCount(series);
    if (horiz) {
      xxWidth=dataArea.getHeight() / itemCount;
    }
 else {
      xxWidth=dataArea.getWidth() / itemCount;
    }
  break;
case WIDTHMETHOD_SMALLEST:
itemCount=highLowData.getItemCount(series);
double lastPos=-1;
xxWidth=dataArea.getWidth();
for (int i=0; i < itemCount; i++) {
double pos=domainAxis.valueToJava2D(highLowData.getXValue(series,i),dataArea,domainEdge);
if (lastPos != -1) {
xxWidth=Math.min(xxWidth,Math.abs(pos - lastPos));
}
lastPos=pos;
}
break;
case WIDTHMETHOD_INTERVALDATA:
IntervalXYDataset intervalXYData=(IntervalXYDataset)dataset;
double startPos=domainAxis.valueToJava2D(intervalXYData.getStartXValue(series,item),dataArea,plot.getDomainAxisEdge());
double endPos=domainAxis.valueToJava2D(intervalXYData.getEndXValue(series,item),dataArea,plot.getDomainAxisEdge());
xxWidth=Math.abs(endPos - startPos);
break;
}
xxWidth-=2 * this.autoWidthGap;
xxWidth*=this.autoWidthFactor;
xxWidth=Math.min(xxWidth,this.maxCandleWidth);
volumeWidth=Math.max(Math.min(1,this.maxCandleWidth),xxWidth);
stickWidth=Math.max(Math.min(3,this.maxCandleWidth),xxWidth);
}
Paint p=getItemPaint(series,item);
Paint outlinePaint=null;
if (this.useOutlinePaint) {
outlinePaint=getItemOutlinePaint(series,item);
}
Stroke s=getItemStroke(series,item);
g2.setStroke(s);
if (this.drawVolume) {
int volume=(int)highLowData.getVolumeValue(series,item);
double volumeHeight=volume / this.maxVolume;
double min, max;
if (horiz) {
min=dataArea.getMinX();
max=dataArea.getMaxX();
}
 else {
min=dataArea.getMinY();
max=dataArea.getMaxY();
}
double zzVolume=volumeHeight * (max - min);
g2.setPaint(getVolumePaint());
Composite originalComposite=g2.getComposite();
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3f));
if (horiz) {
g2.fill(new Rectangle2D.Double(min,xx - volumeWidth / 2,zzVolume,volumeWidth));
}
 else {
g2.fill(new Rectangle2D.Double(xx - volumeWidth / 2,max - zzVolume,volumeWidth,zzVolume));
}
g2.setComposite(originalComposite);
}
if (this.useOutlinePaint) {
g2.setPaint(outlinePaint);
}
 else {
g2.setPaint(p);
}
double yyMaxOpenClose=Math.max(yyOpen,yyClose);
double yyMinOpenClose=Math.min(yyOpen,yyClose);
double maxOpenClose=Math.max(yOpen,yClose);
double minOpenClose=Math.min(yOpen,yClose);
if (yHigh > maxOpenClose) {
if (horiz) {
g2.draw(new Line2D.Double(yyHigh,xx,yyMaxOpenClose,xx));
}
 else {
g2.draw(new Line2D.Double(xx,yyHigh,xx,yyMaxOpenClose));
}
}
if (yLow < minOpenClose) {
if (horiz) {
g2.draw(new Line2D.Double(yyLow,xx,yyMinOpenClose,xx));
}
 else {
g2.draw(new Line2D.Double(xx,yyLow,xx,yyMinOpenClose));
}
}
Rectangle2D body=null;
Rectangle2D hotspot=null;
double length=Math.abs(yyHigh - yyLow);
double base=Math.min(yyHigh,yyLow);
if (horiz) {
body=new Rectangle2D.Double(yyMinOpenClose,xx - stickWidth / 2,yyMaxOpenClose - yyMinOpenClose,stickWidth);
hotspot=new Rectangle2D.Double(base,xx - stickWidth / 2,length,stickWidth);
}
 else {
body=new Rectangle2D.Double(xx - stickWidth / 2,yyMinOpenClose,stickWidth,yyMaxOpenClose - yyMinOpenClose);
hotspot=new Rectangle2D.Double(xx - stickWidth / 2,base,stickWidth,length);
}
if (yClose > yOpen) {
if (this.upPaint != null) {
g2.setPaint(this.upPaint);
}
 else {
g2.setPaint(p);
}
g2.fill(body);
}
 else {
if (this.downPaint != null) {
g2.setPaint(this.downPaint);
}
 else {
g2.setPaint(p);
}
g2.fill(body);
}
if (this.useOutlinePaint) {
g2.setPaint(outlinePaint);
}
 else {
g2.setPaint(p);
}
g2.draw(body);
if (entities != null) {
addEntity(entities,hotspot,dataset,series,item,0.0,0.0);
}
}","/** 
 * Draws the visual representation of a single data item.
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the area within which the plot is being drawn.
 * @param info  collects info about the drawing.
 * @param plot  the plot (can be used to obtain standard colorinformation etc).
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the dataset.
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 * @param crosshairState  crosshair information for the plot(<code>null</code> permitted).
 * @param pass  the pass index.
 */
@Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){
  boolean horiz;
  PlotOrientation orientation=plot.getOrientation();
  if (orientation == PlotOrientation.HORIZONTAL) {
    horiz=true;
  }
 else   if (orientation == PlotOrientation.VERTICAL) {
    horiz=false;
  }
 else {
    return;
  }
  EntityCollection entities=null;
  if (info != null) {
    entities=info.getOwner().getEntityCollection();
  }
  OHLCDataset highLowData=(OHLCDataset)dataset;
  double x=highLowData.getXValue(series,item);
  double yHigh=highLowData.getHighValue(series,item);
  double yLow=highLowData.getLowValue(series,item);
  double yOpen=highLowData.getOpenValue(series,item);
  double yClose=highLowData.getCloseValue(series,item);
  RectangleEdge domainEdge=plot.getDomainAxisEdge();
  double xx=domainAxis.valueToJava2D(x,dataArea,domainEdge);
  RectangleEdge edge=plot.getRangeAxisEdge();
  double yyHigh=rangeAxis.valueToJava2D(yHigh,dataArea,edge);
  double yyLow=rangeAxis.valueToJava2D(yLow,dataArea,edge);
  double yyOpen=rangeAxis.valueToJava2D(yOpen,dataArea,edge);
  double yyClose=rangeAxis.valueToJava2D(yClose,dataArea,edge);
  double volumeWidth;
  double stickWidth;
  if (this.candleWidth > 0) {
    volumeWidth=this.candleWidth;
    stickWidth=this.candleWidth;
  }
 else {
    double xxWidth=0;
    int itemCount;
switch (this.autoWidthMethod) {
case WIDTHMETHOD_AVERAGE:
      itemCount=highLowData.getItemCount(series);
    if (horiz) {
      xxWidth=dataArea.getHeight() / itemCount;
    }
 else {
      xxWidth=dataArea.getWidth() / itemCount;
    }
  break;
case WIDTHMETHOD_SMALLEST:
itemCount=highLowData.getItemCount(series);
double lastPos=-1;
xxWidth=dataArea.getWidth();
for (int i=0; i < itemCount; i++) {
double pos=domainAxis.valueToJava2D(highLowData.getXValue(series,i),dataArea,domainEdge);
if (lastPos != -1) {
xxWidth=Math.min(xxWidth,Math.abs(pos - lastPos));
}
lastPos=pos;
}
break;
case WIDTHMETHOD_INTERVALDATA:
IntervalXYDataset intervalXYData=(IntervalXYDataset)dataset;
double startPos=domainAxis.valueToJava2D(intervalXYData.getStartXValue(series,item),dataArea,plot.getDomainAxisEdge());
double endPos=domainAxis.valueToJava2D(intervalXYData.getEndXValue(series,item),dataArea,plot.getDomainAxisEdge());
xxWidth=Math.abs(endPos - startPos);
break;
}
xxWidth-=2 * this.autoWidthGap;
xxWidth*=this.autoWidthFactor;
xxWidth=Math.min(xxWidth,this.maxCandleWidth);
volumeWidth=Math.max(Math.min(1,this.maxCandleWidth),xxWidth);
stickWidth=Math.max(Math.min(3,this.maxCandleWidth),xxWidth);
}
Paint p=getItemPaint(series,item);
Paint outlinePaint=null;
if (this.useOutlinePaint) {
outlinePaint=getItemOutlinePaint(series,item);
}
Stroke s=getItemStroke(series,item);
g2.setStroke(s);
if (this.drawVolume) {
int volume=(int)highLowData.getVolumeValue(series,item);
double volumeHeight=volume / this.maxVolume;
double min, max;
if (horiz) {
min=dataArea.getMinX();
max=dataArea.getMaxX();
}
 else {
min=dataArea.getMinY();
max=dataArea.getMaxY();
}
double zzVolume=volumeHeight * (max - min);
g2.setPaint(getVolumePaint());
Composite originalComposite=g2.getComposite();
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3f));
if (horiz) {
g2.fill(new Rectangle2D.Double(min,xx - volumeWidth / 2,zzVolume,volumeWidth));
}
 else {
g2.fill(new Rectangle2D.Double(xx - volumeWidth / 2,max - zzVolume,volumeWidth,zzVolume));
}
g2.setComposite(originalComposite);
}
if (this.useOutlinePaint) {
g2.setPaint(outlinePaint);
}
 else {
g2.setPaint(p);
}
double yyMaxOpenClose=Math.max(yyOpen,yyClose);
double yyMinOpenClose=Math.min(yyOpen,yyClose);
double maxOpenClose=Math.max(yOpen,yClose);
double minOpenClose=Math.min(yOpen,yClose);
if (yHigh > maxOpenClose) {
if (horiz) {
g2.draw(new Line2D.Double(yyHigh,xx,yyMaxOpenClose,xx));
}
 else {
g2.draw(new Line2D.Double(xx,yyHigh,xx,yyMaxOpenClose));
}
}
if (yLow < minOpenClose) {
if (horiz) {
g2.draw(new Line2D.Double(yyLow,xx,yyMinOpenClose,xx));
}
 else {
g2.draw(new Line2D.Double(xx,yyLow,xx,yyMinOpenClose));
}
}
Rectangle2D body;
Rectangle2D hotspot;
double length=Math.abs(yyHigh - yyLow);
double base=Math.min(yyHigh,yyLow);
if (horiz) {
body=new Rectangle2D.Double(yyMinOpenClose,xx - stickWidth / 2,yyMaxOpenClose - yyMinOpenClose,stickWidth);
hotspot=new Rectangle2D.Double(base,xx - stickWidth / 2,length,stickWidth);
}
 else {
body=new Rectangle2D.Double(xx - stickWidth / 2,yyMinOpenClose,stickWidth,yyMaxOpenClose - yyMinOpenClose);
hotspot=new Rectangle2D.Double(xx - stickWidth / 2,base,stickWidth,length);
}
if (yClose > yOpen) {
if (this.upPaint != null) {
g2.setPaint(this.upPaint);
}
 else {
g2.setPaint(p);
}
g2.fill(body);
}
 else {
if (this.downPaint != null) {
g2.setPaint(this.downPaint);
}
 else {
g2.setPaint(p);
}
g2.fill(body);
}
if (this.useOutlinePaint) {
g2.setPaint(outlinePaint);
}
 else {
g2.setPaint(p);
}
g2.draw(body);
if (entities != null) {
addEntity(entities,hotspot,dataset,series,item,0.0,0.0);
}
}"
85863,"/** 
 * Returns a collection of legend items for the pie chart.
 * @return The legend items (never <code>null</code>).
 */
@Override public LegendItemCollection getLegendItems(){
  LegendItemCollection result=new LegendItemCollection();
  if (this.dataset == null) {
    return result;
  }
  List keys=this.dataset.getKeys();
  int section=0;
  Shape shape=getLegendItemShape();
  Iterator iterator=keys.iterator();
  while (iterator.hasNext()) {
    Comparable key=(Comparable)iterator.next();
    Number n=this.dataset.getValue(key);
    boolean include;
    if (n == null) {
      include=!this.ignoreNullValues;
    }
 else {
      double v=n.doubleValue();
      if (v == 0.0) {
        include=!this.ignoreZeroValues;
      }
 else {
        include=v > 0.0;
      }
    }
    if (include) {
      String label=this.legendLabelGenerator.generateSectionLabel(this.dataset,key);
      if (label != null) {
        String description=label;
        String toolTipText=null;
        if (this.legendLabelToolTipGenerator != null) {
          toolTipText=this.legendLabelToolTipGenerator.generateSectionLabel(this.dataset,key);
        }
        String urlText=null;
        if (this.legendLabelURLGenerator != null) {
          urlText=this.legendLabelURLGenerator.generateURL(this.dataset,key,this.pieIndex);
        }
        Paint paint=lookupSectionPaint(key);
        Paint outlinePaint=lookupSectionOutlinePaint(key);
        Stroke outlineStroke=lookupSectionOutlineStroke(key);
        LegendItem item=new LegendItem(label,description,toolTipText,urlText,true,shape,true,paint,true,outlinePaint,outlineStroke,false,new Line2D.Float(),new BasicStroke(),Color.BLACK);
        item.setDataset(getDataset());
        item.setSeriesIndex(this.dataset.getIndex(key));
        item.setSeriesKey(key);
        result.add(item);
      }
      section++;
    }
 else {
      section++;
    }
  }
  return result;
}","/** 
 * Returns a collection of legend items for the pie chart.
 * @return The legend items (never <code>null</code>).
 */
@Override public LegendItemCollection getLegendItems(){
  LegendItemCollection result=new LegendItemCollection();
  if (this.dataset == null) {
    return result;
  }
  List<Comparable> keys=this.dataset.getKeys();
  int section=0;
  Shape shape=getLegendItemShape();
  for (  Comparable key : keys) {
    Number n=this.dataset.getValue(key);
    boolean include;
    if (n == null) {
      include=!this.ignoreNullValues;
    }
 else {
      double v=n.doubleValue();
      if (v == 0.0) {
        include=!this.ignoreZeroValues;
      }
 else {
        include=v > 0.0;
      }
    }
    if (include) {
      String label=this.legendLabelGenerator.generateSectionLabel(this.dataset,key);
      if (label != null) {
        String description=label;
        String toolTipText=null;
        if (this.legendLabelToolTipGenerator != null) {
          toolTipText=this.legendLabelToolTipGenerator.generateSectionLabel(this.dataset,key);
        }
        String urlText=null;
        if (this.legendLabelURLGenerator != null) {
          urlText=this.legendLabelURLGenerator.generateURL(this.dataset,key,this.pieIndex);
        }
        Paint paint=lookupSectionPaint(key);
        Paint outlinePaint=lookupSectionOutlinePaint(key);
        Stroke outlineStroke=lookupSectionOutlineStroke(key);
        LegendItem item=new LegendItem(label,description,toolTipText,urlText,true,shape,true,paint,true,outlinePaint,outlineStroke,false,new Line2D.Float(),new BasicStroke(),Color.BLACK);
        item.setDataset(getDataset());
        item.setSeriesIndex(this.dataset.getIndex(key));
        item.setSeriesKey(key);
        result.add(item);
      }
      section++;
    }
 else {
      section++;
    }
  }
  return result;
}"
85864,"/** 
 * Draws the pie.
 * @param g2  the graphics device.
 * @param plotArea  the plot area.
 * @param info  chart rendering info.
 */
protected void drawPie(Graphics2D g2,Rectangle2D plotArea,PlotRenderingInfo info){
  PiePlotState state=initialise(g2,plotArea,this,null,info);
  double labelReserve=0.0;
  if (this.labelGenerator != null && !this.simpleLabels) {
    labelReserve=this.labelGap + this.maximumLabelWidth;
  }
  double gapHorizontal=plotArea.getWidth() * (this.interiorGap + labelReserve) * 2.0;
  double gapVertical=plotArea.getHeight() * this.interiorGap * 2.0;
  if (DEBUG_DRAW_INTERIOR) {
    double hGap=plotArea.getWidth() * this.interiorGap;
    double vGap=plotArea.getHeight() * this.interiorGap;
    double igx1=plotArea.getX() + hGap;
    double igx2=plotArea.getMaxX() - hGap;
    double igy1=plotArea.getY() + vGap;
    double igy2=plotArea.getMaxY() - vGap;
    g2.setPaint(Color.GRAY);
    g2.draw(new Rectangle2D.Double(igx1,igy1,igx2 - igx1,igy2 - igy1));
  }
  double linkX=plotArea.getX() + gapHorizontal / 2;
  double linkY=plotArea.getY() + gapVertical / 2;
  double linkW=plotArea.getWidth() - gapHorizontal;
  double linkH=plotArea.getHeight() - gapVertical;
  if (this.circular) {
    double min=Math.min(linkW,linkH) / 2;
    linkX=(linkX + linkX + linkW) / 2 - min;
    linkY=(linkY + linkY + linkH) / 2 - min;
    linkW=2 * min;
    linkH=2 * min;
  }
  Rectangle2D linkArea=new Rectangle2D.Double(linkX,linkY,linkW,linkH);
  state.setLinkArea(linkArea);
  if (DEBUG_DRAW_LINK_AREA) {
    g2.setPaint(Color.BLUE);
    g2.draw(linkArea);
    g2.setPaint(Color.YELLOW);
    g2.draw(new Ellipse2D.Double(linkArea.getX(),linkArea.getY(),linkArea.getWidth(),linkArea.getHeight()));
  }
  double lm=0.0;
  if (!this.simpleLabels) {
    lm=this.labelLinkMargin;
  }
  double hh=linkArea.getWidth() * lm * 2.0;
  double vv=linkArea.getHeight() * lm * 2.0;
  Rectangle2D explodeArea=new Rectangle2D.Double(linkX + hh / 2.0,linkY + vv / 2.0,linkW - hh,linkH - vv);
  state.setExplodedPieArea(explodeArea);
  double maximumExplodePercent=getMaximumExplodePercent();
  double percent=maximumExplodePercent / (1.0 + maximumExplodePercent);
  double h1=explodeArea.getWidth() * percent;
  double v1=explodeArea.getHeight() * percent;
  Rectangle2D pieArea=new Rectangle2D.Double(explodeArea.getX() + h1 / 2.0,explodeArea.getY() + v1 / 2.0,explodeArea.getWidth() - h1,explodeArea.getHeight() - v1);
  if (DEBUG_DRAW_PIE_AREA) {
    g2.setPaint(Color.GREEN);
    g2.draw(pieArea);
  }
  state.setPieArea(pieArea);
  state.setPieCenterX(pieArea.getCenterX());
  state.setPieCenterY(pieArea.getCenterY());
  state.setPieWRadius(pieArea.getWidth() / 2.0);
  state.setPieHRadius(pieArea.getHeight() / 2.0);
  if ((this.dataset != null) && (this.dataset.getKeys().size() > 0)) {
    List keys=this.dataset.getKeys();
    double totalValue=DatasetUtilities.calculatePieDatasetTotal(this.dataset);
    int passesRequired=state.getPassesRequired();
    for (int pass=0; pass < passesRequired; pass++) {
      double runningTotal=0.0;
      for (int section=0; section < keys.size(); section++) {
        Number n=this.dataset.getValue(section);
        if (n != null) {
          double value=n.doubleValue();
          if (value > 0.0) {
            runningTotal+=value;
            drawItem(g2,section,explodeArea,state,pass);
          }
        }
      }
    }
    if (this.simpleLabels) {
      drawSimpleLabels(g2,keys,totalValue,plotArea,linkArea,state);
    }
 else {
      drawLabels(g2,keys,totalValue,plotArea,linkArea,state);
    }
  }
 else {
    drawNoDataMessage(g2,plotArea);
  }
}","/** 
 * Draws the pie.
 * @param g2  the graphics device.
 * @param plotArea  the plot area.
 * @param info  chart rendering info.
 */
protected void drawPie(Graphics2D g2,Rectangle2D plotArea,PlotRenderingInfo info){
  PiePlotState state=initialise(g2,plotArea,this,null,info);
  double labelReserve=0.0;
  if (this.labelGenerator != null && !this.simpleLabels) {
    labelReserve=this.labelGap + this.maximumLabelWidth;
  }
  double gapHorizontal=plotArea.getWidth() * (this.interiorGap + labelReserve) * 2.0;
  double gapVertical=plotArea.getHeight() * this.interiorGap * 2.0;
  if (DEBUG_DRAW_INTERIOR) {
    double hGap=plotArea.getWidth() * this.interiorGap;
    double vGap=plotArea.getHeight() * this.interiorGap;
    double igx1=plotArea.getX() + hGap;
    double igx2=plotArea.getMaxX() - hGap;
    double igy1=plotArea.getY() + vGap;
    double igy2=plotArea.getMaxY() - vGap;
    g2.setPaint(Color.GRAY);
    g2.draw(new Rectangle2D.Double(igx1,igy1,igx2 - igx1,igy2 - igy1));
  }
  double linkX=plotArea.getX() + gapHorizontal / 2;
  double linkY=plotArea.getY() + gapVertical / 2;
  double linkW=plotArea.getWidth() - gapHorizontal;
  double linkH=plotArea.getHeight() - gapVertical;
  if (this.circular) {
    double min=Math.min(linkW,linkH) / 2;
    linkX=(linkX + linkX + linkW) / 2 - min;
    linkY=(linkY + linkY + linkH) / 2 - min;
    linkW=2 * min;
    linkH=2 * min;
  }
  Rectangle2D linkArea=new Rectangle2D.Double(linkX,linkY,linkW,linkH);
  state.setLinkArea(linkArea);
  if (DEBUG_DRAW_LINK_AREA) {
    g2.setPaint(Color.BLUE);
    g2.draw(linkArea);
    g2.setPaint(Color.YELLOW);
    g2.draw(new Ellipse2D.Double(linkArea.getX(),linkArea.getY(),linkArea.getWidth(),linkArea.getHeight()));
  }
  double lm=0.0;
  if (!this.simpleLabels) {
    lm=this.labelLinkMargin;
  }
  double hh=linkArea.getWidth() * lm * 2.0;
  double vv=linkArea.getHeight() * lm * 2.0;
  Rectangle2D explodeArea=new Rectangle2D.Double(linkX + hh / 2.0,linkY + vv / 2.0,linkW - hh,linkH - vv);
  state.setExplodedPieArea(explodeArea);
  double maximumExplodePercent=getMaximumExplodePercent();
  double percent=maximumExplodePercent / (1.0 + maximumExplodePercent);
  double h1=explodeArea.getWidth() * percent;
  double v1=explodeArea.getHeight() * percent;
  Rectangle2D pieArea=new Rectangle2D.Double(explodeArea.getX() + h1 / 2.0,explodeArea.getY() + v1 / 2.0,explodeArea.getWidth() - h1,explodeArea.getHeight() - v1);
  if (DEBUG_DRAW_PIE_AREA) {
    g2.setPaint(Color.GREEN);
    g2.draw(pieArea);
  }
  state.setPieArea(pieArea);
  state.setPieCenterX(pieArea.getCenterX());
  state.setPieCenterY(pieArea.getCenterY());
  state.setPieWRadius(pieArea.getWidth() / 2.0);
  state.setPieHRadius(pieArea.getHeight() / 2.0);
  if ((this.dataset != null) && (this.dataset.getKeys().size() > 0)) {
    List<Comparable> keys=this.dataset.getKeys();
    double totalValue=DatasetUtilities.calculatePieDatasetTotal(this.dataset);
    int passesRequired=state.getPassesRequired();
    for (int pass=0; pass < passesRequired; pass++) {
      double runningTotal=0.0;
      for (int section=0; section < keys.size(); section++) {
        Number n=this.dataset.getValue(section);
        if (n != null) {
          double value=n.doubleValue();
          if (value > 0.0) {
            runningTotal+=value;
            drawItem(g2,section,explodeArea,state,pass);
          }
        }
      }
    }
    if (this.simpleLabels) {
      drawSimpleLabels(g2,keys,totalValue,plotArea,linkArea,state);
    }
 else {
      drawLabels(g2,keys,totalValue,plotArea,linkArea,state);
    }
  }
 else {
    drawNoDataMessage(g2,plotArea);
  }
}"
85865,"/** 
 * Draws the labels for the pie sections.
 * @param g2  the graphics device.
 * @param keys  the keys.
 * @param totalValue  the total value.
 * @param plotArea  the plot area.
 * @param linkArea  the link area.
 * @param state  the state.
 */
protected void drawLabels(Graphics2D g2,List keys,double totalValue,Rectangle2D plotArea,Rectangle2D linkArea,PiePlotState state){
  Composite originalComposite=g2.getComposite();
  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f));
  DefaultKeyedValues leftKeys=new DefaultKeyedValues();
  DefaultKeyedValues rightKeys=new DefaultKeyedValues();
  double runningTotal=0.0;
  Iterator iterator=keys.iterator();
  while (iterator.hasNext()) {
    Comparable key=(Comparable)iterator.next();
    boolean include;
    double v=0.0;
    Number n=this.dataset.getValue(key);
    if (n == null) {
      include=!this.ignoreNullValues;
    }
 else {
      v=n.doubleValue();
      include=this.ignoreZeroValues ? v > 0.0 : v >= 0.0;
    }
    if (include) {
      runningTotal=runningTotal + v;
      double mid=this.startAngle + (this.direction.getFactor() * ((runningTotal - v / 2.0) * 360) / totalValue);
      if (Math.cos(Math.toRadians(mid)) < 0.0) {
        leftKeys.addValue(key,new Double(mid));
      }
 else {
        rightKeys.addValue(key,new Double(mid));
      }
    }
  }
  g2.setFont(getLabelFont());
  double marginX=plotArea.getX() + this.interiorGap * plotArea.getWidth();
  double gap=plotArea.getWidth() * this.labelGap;
  double ww=linkArea.getX() - gap - marginX;
  float labelWidth=(float)this.labelPadding.trimWidth(ww);
  if (this.labelGenerator != null) {
    drawLeftLabels(leftKeys,g2,plotArea,linkArea,labelWidth,state);
    drawRightLabels(rightKeys,g2,plotArea,linkArea,labelWidth,state);
  }
  g2.setComposite(originalComposite);
}","/** 
 * Draws the labels for the pie sections.
 * @param g2  the graphics device.
 * @param keys  the keys.
 * @param totalValue  the total value.
 * @param plotArea  the plot area.
 * @param linkArea  the link area.
 * @param state  the state.
 */
protected void drawLabels(Graphics2D g2,List<Comparable> keys,double totalValue,Rectangle2D plotArea,Rectangle2D linkArea,PiePlotState state){
  Composite originalComposite=g2.getComposite();
  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f));
  DefaultKeyedValues leftKeys=new DefaultKeyedValues();
  DefaultKeyedValues rightKeys=new DefaultKeyedValues();
  double runningTotal=0.0;
  for (  Comparable key : keys) {
    boolean include;
    double v=0.0;
    Number n=this.dataset.getValue(key);
    if (n == null) {
      include=!this.ignoreNullValues;
    }
 else {
      v=n.doubleValue();
      include=this.ignoreZeroValues ? v > 0.0 : v >= 0.0;
    }
    if (include) {
      runningTotal=runningTotal + v;
      double mid=this.startAngle + (this.direction.getFactor() * ((runningTotal - v / 2.0) * 360) / totalValue);
      if (Math.cos(Math.toRadians(mid)) < 0.0) {
        leftKeys.addValue(key,new Double(mid));
      }
 else {
        rightKeys.addValue(key,new Double(mid));
      }
    }
  }
  g2.setFont(getLabelFont());
  double marginX=plotArea.getX() + this.interiorGap * plotArea.getWidth();
  double gap=plotArea.getWidth() * this.labelGap;
  double ww=linkArea.getX() - gap - marginX;
  float labelWidth=(float)this.labelPadding.trimWidth(ww);
  if (this.labelGenerator != null) {
    drawLeftLabels(leftKeys,g2,plotArea,linkArea,labelWidth,state);
    drawRightLabels(rightKeys,g2,plotArea,linkArea,labelWidth,state);
  }
  g2.setComposite(originalComposite);
}"
85866,"/** 
 * Draws the pie section labels in the simple form.
 * @param g2  the graphics device.
 * @param keys  the section keys.
 * @param totalValue  the total value for all sections in the pie.
 * @param plotArea  the plot area.
 * @param pieArea  the area containing the pie.
 * @param state  the plot state.
 * @since 1.0.7
 */
protected void drawSimpleLabels(Graphics2D g2,List keys,double totalValue,Rectangle2D plotArea,Rectangle2D pieArea,PiePlotState state){
  Composite originalComposite=g2.getComposite();
  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f));
  Rectangle2D labelsArea=this.simpleLabelOffset.createInsetRectangle(pieArea);
  double runningTotal=0.0;
  Iterator iterator=keys.iterator();
  while (iterator.hasNext()) {
    Comparable key=(Comparable)iterator.next();
    boolean include;
    double v=0.0;
    Number n=getDataset().getValue(key);
    if (n == null) {
      include=!getIgnoreNullValues();
    }
 else {
      v=n.doubleValue();
      include=getIgnoreZeroValues() ? v > 0.0 : v >= 0.0;
    }
    if (include) {
      runningTotal=runningTotal + v;
      double mid=getStartAngle() + (getDirection().getFactor() * ((runningTotal - v / 2.0) * 360) / totalValue);
      Arc2D arc=new Arc2D.Double(labelsArea,getStartAngle(),mid - getStartAngle(),Arc2D.OPEN);
      int x=(int)arc.getEndPoint().getX();
      int y=(int)arc.getEndPoint().getY();
      PieSectionLabelGenerator myLabelGenerator=getLabelGenerator();
      if (myLabelGenerator == null) {
        continue;
      }
      String label=myLabelGenerator.generateSectionLabel(this.dataset,key);
      if (label == null) {
        continue;
      }
      g2.setFont(this.labelFont);
      FontMetrics fm=g2.getFontMetrics();
      Rectangle2D bounds=TextUtilities.getTextBounds(label,g2,fm);
      Rectangle2D out=this.labelPadding.createOutsetRectangle(bounds);
      Shape bg=ShapeUtilities.createTranslatedShape(out,x - bounds.getCenterX(),y - bounds.getCenterY());
      if (this.labelShadowPaint != null && this.shadowGenerator == null) {
        Shape shadow=ShapeUtilities.createTranslatedShape(bg,this.shadowXOffset,this.shadowYOffset);
        g2.setPaint(this.labelShadowPaint);
        g2.fill(shadow);
      }
      if (this.labelBackgroundPaint != null) {
        g2.setPaint(this.labelBackgroundPaint);
        g2.fill(bg);
      }
      if (this.labelOutlinePaint != null && this.labelOutlineStroke != null) {
        g2.setPaint(this.labelOutlinePaint);
        g2.setStroke(this.labelOutlineStroke);
        g2.draw(bg);
      }
      g2.setPaint(this.labelPaint);
      g2.setFont(this.labelFont);
      TextUtilities.drawAlignedString(label,g2,x,y,TextAnchor.CENTER);
    }
  }
  g2.setComposite(originalComposite);
}","/** 
 * Draws the pie section labels in the simple form.
 * @param g2  the graphics device.
 * @param keys  the section keys.
 * @param totalValue  the total value for all sections in the pie.
 * @param plotArea  the plot area.
 * @param pieArea  the area containing the pie.
 * @param state  the plot state.
 * @since 1.0.7
 */
protected void drawSimpleLabels(Graphics2D g2,List<Comparable> keys,double totalValue,Rectangle2D plotArea,Rectangle2D pieArea,PiePlotState state){
  Composite originalComposite=g2.getComposite();
  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f));
  Rectangle2D labelsArea=this.simpleLabelOffset.createInsetRectangle(pieArea);
  double runningTotal=0.0;
  for (  Comparable key : keys) {
    boolean include;
    double v=0.0;
    Number n=getDataset().getValue(key);
    if (n == null) {
      include=!getIgnoreNullValues();
    }
 else {
      v=n.doubleValue();
      include=getIgnoreZeroValues() ? v > 0.0 : v >= 0.0;
    }
    if (include) {
      runningTotal=runningTotal + v;
      double mid=getStartAngle() + (getDirection().getFactor() * ((runningTotal - v / 2.0) * 360) / totalValue);
      Arc2D arc=new Arc2D.Double(labelsArea,getStartAngle(),mid - getStartAngle(),Arc2D.OPEN);
      int x=(int)arc.getEndPoint().getX();
      int y=(int)arc.getEndPoint().getY();
      PieSectionLabelGenerator myLabelGenerator=getLabelGenerator();
      if (myLabelGenerator == null) {
        continue;
      }
      String label=myLabelGenerator.generateSectionLabel(this.dataset,key);
      if (label == null) {
        continue;
      }
      g2.setFont(this.labelFont);
      FontMetrics fm=g2.getFontMetrics();
      Rectangle2D bounds=TextUtilities.getTextBounds(label,g2,fm);
      Rectangle2D out=this.labelPadding.createOutsetRectangle(bounds);
      Shape bg=ShapeUtilities.createTranslatedShape(out,x - bounds.getCenterX(),y - bounds.getCenterY());
      if (this.labelShadowPaint != null && this.shadowGenerator == null) {
        Shape shadow=ShapeUtilities.createTranslatedShape(bg,this.shadowXOffset,this.shadowYOffset);
        g2.setPaint(this.labelShadowPaint);
        g2.fill(shadow);
      }
      if (this.labelBackgroundPaint != null) {
        g2.setPaint(this.labelBackgroundPaint);
        g2.fill(bg);
      }
      if (this.labelOutlinePaint != null && this.labelOutlineStroke != null) {
        g2.setPaint(this.labelOutlinePaint);
        g2.setStroke(this.labelOutlineStroke);
        g2.draw(bg);
      }
      g2.setPaint(this.labelPaint);
      g2.setFont(this.labelFont);
      TextUtilities.drawAlignedString(label,g2,x,y,TextAnchor.CENTER);
    }
  }
  g2.setComposite(originalComposite);
}"
85867,"/** 
 * Draws the plot on a Java 2D graphics device (such as the screen or a printer).  This method is called by the  {@link org.jfree.chart.JFreeChart} class, you don't normally needto call it yourself.
 * @param g2  the graphics device.
 * @param plotArea  the area within which the plot should be drawn.
 * @param anchor  the anchor point.
 * @param parentState  the state from the parent plot, if there is one.
 * @param info  collects info about the drawing(<code>null</code> permitted).
 */
@Override public void draw(Graphics2D g2,Rectangle2D plotArea,Point2D anchor,PlotState parentState,PlotRenderingInfo info){
  RectangleInsets insets=getInsets();
  insets.trim(plotArea);
  Rectangle2D originalPlotArea=(Rectangle2D)plotArea.clone();
  if (info != null) {
    info.setPlotArea(plotArea);
    info.setDataArea(plotArea);
  }
  drawBackground(g2,plotArea);
  Shape savedClip=g2.getClip();
  g2.clip(plotArea);
  Graphics2D savedG2=g2;
  BufferedImage dataImage=null;
  if (getShadowGenerator() != null) {
    dataImage=new BufferedImage((int)plotArea.getWidth(),(int)plotArea.getHeight(),BufferedImage.TYPE_INT_ARGB);
    g2=dataImage.createGraphics();
    g2.translate(-plotArea.getX(),-plotArea.getY());
    g2.setRenderingHints(savedG2.getRenderingHints());
    originalPlotArea=(Rectangle2D)plotArea.clone();
  }
  double gapPercent=getInteriorGap();
  double labelPercent=0.0;
  if (getLabelGenerator() != null) {
    labelPercent=getLabelGap() + getMaximumLabelWidth();
  }
  double gapHorizontal=plotArea.getWidth() * (gapPercent + labelPercent) * 2.0;
  double gapVertical=plotArea.getHeight() * gapPercent * 2.0;
  if (DEBUG_DRAW_INTERIOR) {
    double hGap=plotArea.getWidth() * getInteriorGap();
    double vGap=plotArea.getHeight() * getInteriorGap();
    double igx1=plotArea.getX() + hGap;
    double igx2=plotArea.getMaxX() - hGap;
    double igy1=plotArea.getY() + vGap;
    double igy2=plotArea.getMaxY() - vGap;
    g2.setPaint(Color.LIGHT_GRAY);
    g2.draw(new Rectangle2D.Double(igx1,igy1,igx2 - igx1,igy2 - igy1));
  }
  double linkX=plotArea.getX() + gapHorizontal / 2;
  double linkY=plotArea.getY() + gapVertical / 2;
  double linkW=plotArea.getWidth() - gapHorizontal;
  double linkH=plotArea.getHeight() - gapVertical;
  if (isCircular()) {
    double min=Math.min(linkW,linkH) / 2;
    linkX=(linkX + linkX + linkW) / 2 - min;
    linkY=(linkY + linkY + linkH) / 2 - min;
    linkW=2 * min;
    linkH=2 * min;
  }
  PiePlotState state=initialise(g2,plotArea,this,null,info);
  Rectangle2D linkAreaXX=new Rectangle2D.Double(linkX,linkY,linkW,linkH * (1 - this.depthFactor));
  state.setLinkArea(linkAreaXX);
  if (DEBUG_DRAW_LINK_AREA) {
    g2.setPaint(Color.BLUE);
    g2.draw(linkAreaXX);
    g2.setPaint(Color.YELLOW);
    g2.draw(new Ellipse2D.Double(linkAreaXX.getX(),linkAreaXX.getY(),linkAreaXX.getWidth(),linkAreaXX.getHeight()));
  }
  double hh=linkW * getLabelLinkMargin();
  double vv=linkH * getLabelLinkMargin();
  Rectangle2D explodeArea=new Rectangle2D.Double(linkX + hh / 2.0,linkY + vv / 2.0,linkW - hh,linkH - vv);
  state.setExplodedPieArea(explodeArea);
  double maximumExplodePercent=getMaximumExplodePercent();
  double percent=maximumExplodePercent / (1.0 + maximumExplodePercent);
  double h1=explodeArea.getWidth() * percent;
  double v1=explodeArea.getHeight() * percent;
  Rectangle2D pieArea=new Rectangle2D.Double(explodeArea.getX() + h1 / 2.0,explodeArea.getY() + v1 / 2.0,explodeArea.getWidth() - h1,explodeArea.getHeight() - v1);
  int depth=(int)(pieArea.getHeight() * this.depthFactor);
  Rectangle2D linkArea=new Rectangle2D.Double(linkX,linkY,linkW,linkH - depth);
  state.setLinkArea(linkArea);
  state.setPieArea(pieArea);
  state.setPieCenterX(pieArea.getCenterX());
  state.setPieCenterY(pieArea.getCenterY() - depth / 2.0);
  state.setPieWRadius(pieArea.getWidth() / 2.0);
  state.setPieHRadius((pieArea.getHeight() - depth) / 2.0);
  PieDataset dataset=getDataset();
  if (DatasetUtilities.isEmptyOrNull(getDataset())) {
    drawNoDataMessage(g2,plotArea);
    g2.setClip(savedClip);
    drawOutline(g2,plotArea);
    return;
  }
  if (dataset.getKeys().size() > plotArea.getWidth()) {
    String text=localizationResources.getString(""String_Node_Str"");
    Font sfont=new Font(""String_Node_Str"",Font.BOLD,10);
    g2.setFont(sfont);
    FontMetrics fm=g2.getFontMetrics(sfont);
    int stringWidth=fm.stringWidth(text);
    g2.drawString(text,(int)(plotArea.getX() + (plotArea.getWidth() - stringWidth) / 2),(int)(plotArea.getY() + (plotArea.getHeight() / 2)));
    return;
  }
  if (isCircular()) {
    double min=Math.min(plotArea.getWidth(),plotArea.getHeight()) / 2;
    plotArea=new Rectangle2D.Double(plotArea.getCenterX() - min,plotArea.getCenterY() - min,2 * min,2 * min);
  }
  List sectionKeys=dataset.getKeys();
  if (sectionKeys.size() == 0) {
    return;
  }
  double arcX=pieArea.getX();
  double arcY=pieArea.getY();
  Composite originalComposite=g2.getComposite();
  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
  double totalValue=DatasetUtilities.calculatePieDatasetTotal(dataset);
  double runningTotal=0;
  if (depth < 0) {
    return;
  }
  ArrayList arcList=new ArrayList();
  Arc2D.Double arc;
  Paint paint;
  Paint outlinePaint;
  Stroke outlineStroke;
  Iterator iterator=sectionKeys.iterator();
  while (iterator.hasNext()) {
    Comparable currentKey=(Comparable)iterator.next();
    Number dataValue=dataset.getValue(currentKey);
    if (dataValue == null) {
      arcList.add(null);
      continue;
    }
    double value=dataValue.doubleValue();
    if (value <= 0) {
      arcList.add(null);
      continue;
    }
    double startAngle=getStartAngle();
    double direction=getDirection().getFactor();
    double angle1=startAngle + (direction * (runningTotal * 360)) / totalValue;
    double angle2=startAngle + (direction * (runningTotal + value) * 360) / totalValue;
    if (Math.abs(angle2 - angle1) > getMinimumArcAngleToDraw()) {
      arcList.add(new Arc2D.Double(arcX,arcY + depth,pieArea.getWidth(),pieArea.getHeight() - depth,angle1,angle2 - angle1,Arc2D.PIE));
    }
 else {
      arcList.add(null);
    }
    runningTotal+=value;
  }
  Shape oldClip=g2.getClip();
  Ellipse2D top=new Ellipse2D.Double(pieArea.getX(),pieArea.getY(),pieArea.getWidth(),pieArea.getHeight() - depth);
  Ellipse2D bottom=new Ellipse2D.Double(pieArea.getX(),pieArea.getY() + depth,pieArea.getWidth(),pieArea.getHeight() - depth);
  Rectangle2D lower=new Rectangle2D.Double(top.getX(),top.getCenterY(),pieArea.getWidth(),bottom.getMaxY() - top.getCenterY());
  Rectangle2D upper=new Rectangle2D.Double(pieArea.getX(),top.getY(),pieArea.getWidth(),bottom.getCenterY() - top.getY());
  Area a=new Area(top);
  a.add(new Area(lower));
  Area b=new Area(bottom);
  b.add(new Area(upper));
  Area pie=new Area(a);
  pie.intersect(b);
  Area front=new Area(pie);
  front.subtract(new Area(top));
  Area back=new Area(pie);
  back.subtract(new Area(bottom));
  int[] xs;
  int[] ys;
  int categoryCount=arcList.size();
  for (int categoryIndex=0; categoryIndex < categoryCount; categoryIndex++) {
    arc=(Arc2D.Double)arcList.get(categoryIndex);
    if (arc == null) {
      continue;
    }
    Comparable key=getSectionKey(categoryIndex);
    paint=lookupSectionPaint(key);
    outlinePaint=lookupSectionOutlinePaint(key);
    outlineStroke=lookupSectionOutlineStroke(key);
    g2.setPaint(paint);
    g2.fill(arc);
    g2.setPaint(outlinePaint);
    g2.setStroke(outlineStroke);
    g2.draw(arc);
    g2.setPaint(paint);
    Point2D p1=arc.getStartPoint();
    xs=new int[]{(int)arc.getCenterX(),(int)arc.getCenterX(),(int)p1.getX(),(int)p1.getX()};
    ys=new int[]{(int)arc.getCenterY(),(int)arc.getCenterY() - depth,(int)p1.getY() - depth,(int)p1.getY()};
    Polygon polygon=new Polygon(xs,ys,4);
    g2.setPaint(java.awt.Color.LIGHT_GRAY);
    g2.fill(polygon);
    g2.setPaint(outlinePaint);
    g2.setStroke(outlineStroke);
    g2.draw(polygon);
    g2.setPaint(paint);
  }
  g2.setPaint(Color.GRAY);
  g2.fill(back);
  g2.fill(front);
  int cat=0;
  iterator=arcList.iterator();
  while (iterator.hasNext()) {
    Arc2D segment=(Arc2D)iterator.next();
    if (segment != null) {
      Comparable key=getSectionKey(cat);
      paint=lookupSectionPaint(key);
      outlinePaint=lookupSectionOutlinePaint(key);
      outlineStroke=lookupSectionOutlineStroke(key);
      drawSide(g2,pieArea,segment,front,back,paint,outlinePaint,outlineStroke,false,true);
    }
    cat++;
  }
  cat=0;
  iterator=arcList.iterator();
  while (iterator.hasNext()) {
    Arc2D segment=(Arc2D)iterator.next();
    if (segment != null) {
      Comparable key=getSectionKey(cat);
      paint=lookupSectionPaint(key);
      outlinePaint=lookupSectionOutlinePaint(key);
      outlineStroke=lookupSectionOutlineStroke(key);
      drawSide(g2,pieArea,segment,front,back,paint,outlinePaint,outlineStroke,true,false);
    }
    cat++;
  }
  g2.setClip(oldClip);
  Arc2D upperArc;
  for (int sectionIndex=0; sectionIndex < categoryCount; sectionIndex++) {
    arc=(Arc2D.Double)arcList.get(sectionIndex);
    if (arc == null) {
      continue;
    }
    upperArc=new Arc2D.Double(arcX,arcY,pieArea.getWidth(),pieArea.getHeight() - depth,arc.getAngleStart(),arc.getAngleExtent(),Arc2D.PIE);
    Comparable currentKey=(Comparable)sectionKeys.get(sectionIndex);
    paint=lookupSectionPaint(currentKey,true);
    outlinePaint=lookupSectionOutlinePaint(currentKey);
    outlineStroke=lookupSectionOutlineStroke(currentKey);
    g2.setPaint(paint);
    g2.fill(upperArc);
    g2.setStroke(outlineStroke);
    g2.setPaint(outlinePaint);
    g2.draw(upperArc);
    if (info != null) {
      EntityCollection entities=info.getOwner().getEntityCollection();
      if (entities != null) {
        String tip=null;
        PieToolTipGenerator tipster=getToolTipGenerator();
        if (tipster != null) {
          tip=tipster.generateToolTip(dataset,currentKey);
        }
        String url=null;
        if (getURLGenerator() != null) {
          url=getURLGenerator().generateURL(dataset,currentKey,getPieIndex());
        }
        PieSectionEntity entity=new PieSectionEntity(upperArc,dataset,getPieIndex(),sectionIndex,currentKey,tip,url);
        entities.add(entity);
      }
    }
  }
  List keys=dataset.getKeys();
  Rectangle2D adjustedPlotArea=new Rectangle2D.Double(originalPlotArea.getX(),originalPlotArea.getY(),originalPlotArea.getWidth(),originalPlotArea.getHeight() - depth);
  if (getSimpleLabels()) {
    drawSimpleLabels(g2,keys,totalValue,adjustedPlotArea,linkArea,state);
  }
 else {
    drawLabels(g2,keys,totalValue,adjustedPlotArea,linkArea,state);
  }
  if (getShadowGenerator() != null) {
    BufferedImage shadowImage=getShadowGenerator().createDropShadow(dataImage);
    g2=savedG2;
    g2.drawImage(shadowImage,(int)plotArea.getX() + getShadowGenerator().calculateOffsetX(),(int)plotArea.getY() + getShadowGenerator().calculateOffsetY(),null);
    g2.drawImage(dataImage,(int)plotArea.getX(),(int)plotArea.getY(),null);
  }
  g2.setClip(savedClip);
  g2.setComposite(originalComposite);
  drawOutline(g2,originalPlotArea);
}","/** 
 * Draws the plot on a Java 2D graphics device (such as the screen or a printer).  This method is called by the  {@link org.jfree.chart.JFreeChart} class, you don't normally needto call it yourself.
 * @param g2  the graphics device.
 * @param plotArea  the area within which the plot should be drawn.
 * @param anchor  the anchor point.
 * @param parentState  the state from the parent plot, if there is one.
 * @param info  collects info about the drawing(<code>null</code> permitted).
 */
@Override public void draw(Graphics2D g2,Rectangle2D plotArea,Point2D anchor,PlotState parentState,PlotRenderingInfo info){
  RectangleInsets insets=getInsets();
  insets.trim(plotArea);
  Rectangle2D originalPlotArea=(Rectangle2D)plotArea.clone();
  if (info != null) {
    info.setPlotArea(plotArea);
    info.setDataArea(plotArea);
  }
  drawBackground(g2,plotArea);
  Shape savedClip=g2.getClip();
  g2.clip(plotArea);
  Graphics2D savedG2=g2;
  BufferedImage dataImage=null;
  if (getShadowGenerator() != null) {
    dataImage=new BufferedImage((int)plotArea.getWidth(),(int)plotArea.getHeight(),BufferedImage.TYPE_INT_ARGB);
    g2=dataImage.createGraphics();
    g2.translate(-plotArea.getX(),-plotArea.getY());
    g2.setRenderingHints(savedG2.getRenderingHints());
    originalPlotArea=(Rectangle2D)plotArea.clone();
  }
  double gapPercent=getInteriorGap();
  double labelPercent=0.0;
  if (getLabelGenerator() != null) {
    labelPercent=getLabelGap() + getMaximumLabelWidth();
  }
  double gapHorizontal=plotArea.getWidth() * (gapPercent + labelPercent) * 2.0;
  double gapVertical=plotArea.getHeight() * gapPercent * 2.0;
  if (DEBUG_DRAW_INTERIOR) {
    double hGap=plotArea.getWidth() * getInteriorGap();
    double vGap=plotArea.getHeight() * getInteriorGap();
    double igx1=plotArea.getX() + hGap;
    double igx2=plotArea.getMaxX() - hGap;
    double igy1=plotArea.getY() + vGap;
    double igy2=plotArea.getMaxY() - vGap;
    g2.setPaint(Color.LIGHT_GRAY);
    g2.draw(new Rectangle2D.Double(igx1,igy1,igx2 - igx1,igy2 - igy1));
  }
  double linkX=plotArea.getX() + gapHorizontal / 2;
  double linkY=plotArea.getY() + gapVertical / 2;
  double linkW=plotArea.getWidth() - gapHorizontal;
  double linkH=plotArea.getHeight() - gapVertical;
  if (isCircular()) {
    double min=Math.min(linkW,linkH) / 2;
    linkX=(linkX + linkX + linkW) / 2 - min;
    linkY=(linkY + linkY + linkH) / 2 - min;
    linkW=2 * min;
    linkH=2 * min;
  }
  PiePlotState state=initialise(g2,plotArea,this,null,info);
  Rectangle2D linkAreaXX=new Rectangle2D.Double(linkX,linkY,linkW,linkH * (1 - this.depthFactor));
  state.setLinkArea(linkAreaXX);
  if (DEBUG_DRAW_LINK_AREA) {
    g2.setPaint(Color.BLUE);
    g2.draw(linkAreaXX);
    g2.setPaint(Color.YELLOW);
    g2.draw(new Ellipse2D.Double(linkAreaXX.getX(),linkAreaXX.getY(),linkAreaXX.getWidth(),linkAreaXX.getHeight()));
  }
  double hh=linkW * getLabelLinkMargin();
  double vv=linkH * getLabelLinkMargin();
  Rectangle2D explodeArea=new Rectangle2D.Double(linkX + hh / 2.0,linkY + vv / 2.0,linkW - hh,linkH - vv);
  state.setExplodedPieArea(explodeArea);
  double maximumExplodePercent=getMaximumExplodePercent();
  double percent=maximumExplodePercent / (1.0 + maximumExplodePercent);
  double h1=explodeArea.getWidth() * percent;
  double v1=explodeArea.getHeight() * percent;
  Rectangle2D pieArea=new Rectangle2D.Double(explodeArea.getX() + h1 / 2.0,explodeArea.getY() + v1 / 2.0,explodeArea.getWidth() - h1,explodeArea.getHeight() - v1);
  int depth=(int)(pieArea.getHeight() * this.depthFactor);
  Rectangle2D linkArea=new Rectangle2D.Double(linkX,linkY,linkW,linkH - depth);
  state.setLinkArea(linkArea);
  state.setPieArea(pieArea);
  state.setPieCenterX(pieArea.getCenterX());
  state.setPieCenterY(pieArea.getCenterY() - depth / 2.0);
  state.setPieWRadius(pieArea.getWidth() / 2.0);
  state.setPieHRadius((pieArea.getHeight() - depth) / 2.0);
  PieDataset dataset=getDataset();
  if (DatasetUtilities.isEmptyOrNull(getDataset())) {
    drawNoDataMessage(g2,plotArea);
    g2.setClip(savedClip);
    drawOutline(g2,plotArea);
    return;
  }
  if (dataset.getKeys().size() > plotArea.getWidth()) {
    String text=localizationResources.getString(""String_Node_Str"");
    Font sfont=new Font(""String_Node_Str"",Font.BOLD,10);
    g2.setFont(sfont);
    FontMetrics fm=g2.getFontMetrics(sfont);
    int stringWidth=fm.stringWidth(text);
    g2.drawString(text,(int)(plotArea.getX() + (plotArea.getWidth() - stringWidth) / 2),(int)(plotArea.getY() + (plotArea.getHeight() / 2)));
    return;
  }
  if (isCircular()) {
    double min=Math.min(plotArea.getWidth(),plotArea.getHeight()) / 2;
    plotArea=new Rectangle2D.Double(plotArea.getCenterX() - min,plotArea.getCenterY() - min,2 * min,2 * min);
  }
  List<Comparable> sectionKeys=dataset.getKeys();
  if (sectionKeys.isEmpty()) {
    return;
  }
  double arcX=pieArea.getX();
  double arcY=pieArea.getY();
  Composite originalComposite=g2.getComposite();
  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
  double totalValue=DatasetUtilities.calculatePieDatasetTotal(dataset);
  double runningTotal=0;
  if (depth < 0) {
    return;
  }
  ArrayList arcList=new ArrayList();
  Arc2D.Double arc;
  Paint paint;
  Paint outlinePaint;
  Stroke outlineStroke;
  for (  Comparable currentKey : sectionKeys) {
    Number dataValue=dataset.getValue(currentKey);
    if (dataValue == null) {
      arcList.add(null);
      continue;
    }
    double value=dataValue.doubleValue();
    if (value <= 0) {
      arcList.add(null);
      continue;
    }
    double startAngle=getStartAngle();
    double direction=getDirection().getFactor();
    double angle1=startAngle + (direction * (runningTotal * 360)) / totalValue;
    double angle2=startAngle + (direction * (runningTotal + value) * 360) / totalValue;
    if (Math.abs(angle2 - angle1) > getMinimumArcAngleToDraw()) {
      arcList.add(new Arc2D.Double(arcX,arcY + depth,pieArea.getWidth(),pieArea.getHeight() - depth,angle1,angle2 - angle1,Arc2D.PIE));
    }
 else {
      arcList.add(null);
    }
    runningTotal+=value;
  }
  Shape oldClip=g2.getClip();
  Ellipse2D top=new Ellipse2D.Double(pieArea.getX(),pieArea.getY(),pieArea.getWidth(),pieArea.getHeight() - depth);
  Ellipse2D bottom=new Ellipse2D.Double(pieArea.getX(),pieArea.getY() + depth,pieArea.getWidth(),pieArea.getHeight() - depth);
  Rectangle2D lower=new Rectangle2D.Double(top.getX(),top.getCenterY(),pieArea.getWidth(),bottom.getMaxY() - top.getCenterY());
  Rectangle2D upper=new Rectangle2D.Double(pieArea.getX(),top.getY(),pieArea.getWidth(),bottom.getCenterY() - top.getY());
  Area a=new Area(top);
  a.add(new Area(lower));
  Area b=new Area(bottom);
  b.add(new Area(upper));
  Area pie=new Area(a);
  pie.intersect(b);
  Area front=new Area(pie);
  front.subtract(new Area(top));
  Area back=new Area(pie);
  back.subtract(new Area(bottom));
  int[] xs;
  int[] ys;
  int categoryCount=arcList.size();
  for (int categoryIndex=0; categoryIndex < categoryCount; categoryIndex++) {
    arc=(Arc2D.Double)arcList.get(categoryIndex);
    if (arc == null) {
      continue;
    }
    Comparable key=getSectionKey(categoryIndex);
    paint=lookupSectionPaint(key);
    outlinePaint=lookupSectionOutlinePaint(key);
    outlineStroke=lookupSectionOutlineStroke(key);
    g2.setPaint(paint);
    g2.fill(arc);
    g2.setPaint(outlinePaint);
    g2.setStroke(outlineStroke);
    g2.draw(arc);
    g2.setPaint(paint);
    Point2D p1=arc.getStartPoint();
    xs=new int[]{(int)arc.getCenterX(),(int)arc.getCenterX(),(int)p1.getX(),(int)p1.getX()};
    ys=new int[]{(int)arc.getCenterY(),(int)arc.getCenterY() - depth,(int)p1.getY() - depth,(int)p1.getY()};
    Polygon polygon=new Polygon(xs,ys,4);
    g2.setPaint(java.awt.Color.LIGHT_GRAY);
    g2.fill(polygon);
    g2.setPaint(outlinePaint);
    g2.setStroke(outlineStroke);
    g2.draw(polygon);
    g2.setPaint(paint);
  }
  g2.setPaint(Color.GRAY);
  g2.fill(back);
  g2.fill(front);
  int cat=0;
  Iterator iterator=arcList.iterator();
  while (iterator.hasNext()) {
    Arc2D segment=(Arc2D)iterator.next();
    if (segment != null) {
      Comparable key=getSectionKey(cat);
      paint=lookupSectionPaint(key);
      outlinePaint=lookupSectionOutlinePaint(key);
      outlineStroke=lookupSectionOutlineStroke(key);
      drawSide(g2,pieArea,segment,front,back,paint,outlinePaint,outlineStroke,false,true);
    }
    cat++;
  }
  cat=0;
  iterator=arcList.iterator();
  while (iterator.hasNext()) {
    Arc2D segment=(Arc2D)iterator.next();
    if (segment != null) {
      Comparable key=getSectionKey(cat);
      paint=lookupSectionPaint(key);
      outlinePaint=lookupSectionOutlinePaint(key);
      outlineStroke=lookupSectionOutlineStroke(key);
      drawSide(g2,pieArea,segment,front,back,paint,outlinePaint,outlineStroke,true,false);
    }
    cat++;
  }
  g2.setClip(oldClip);
  Arc2D upperArc;
  for (int sectionIndex=0; sectionIndex < categoryCount; sectionIndex++) {
    arc=(Arc2D.Double)arcList.get(sectionIndex);
    if (arc == null) {
      continue;
    }
    upperArc=new Arc2D.Double(arcX,arcY,pieArea.getWidth(),pieArea.getHeight() - depth,arc.getAngleStart(),arc.getAngleExtent(),Arc2D.PIE);
    Comparable currentKey=sectionKeys.get(sectionIndex);
    paint=lookupSectionPaint(currentKey,true);
    outlinePaint=lookupSectionOutlinePaint(currentKey);
    outlineStroke=lookupSectionOutlineStroke(currentKey);
    g2.setPaint(paint);
    g2.fill(upperArc);
    g2.setStroke(outlineStroke);
    g2.setPaint(outlinePaint);
    g2.draw(upperArc);
    if (info != null) {
      EntityCollection entities=info.getOwner().getEntityCollection();
      if (entities != null) {
        String tip=null;
        PieToolTipGenerator tipster=getToolTipGenerator();
        if (tipster != null) {
          tip=tipster.generateToolTip(dataset,currentKey);
        }
        String url=null;
        if (getURLGenerator() != null) {
          url=getURLGenerator().generateURL(dataset,currentKey,getPieIndex());
        }
        PieSectionEntity entity=new PieSectionEntity(upperArc,dataset,getPieIndex(),sectionIndex,currentKey,tip,url);
        entities.add(entity);
      }
    }
  }
  List<Comparable> keys=dataset.getKeys();
  Rectangle2D adjustedPlotArea=new Rectangle2D.Double(originalPlotArea.getX(),originalPlotArea.getY(),originalPlotArea.getWidth(),originalPlotArea.getHeight() - depth);
  if (getSimpleLabels()) {
    drawSimpleLabels(g2,keys,totalValue,adjustedPlotArea,linkArea,state);
  }
 else {
    drawLabels(g2,keys,totalValue,adjustedPlotArea,linkArea,state);
  }
  if (getShadowGenerator() != null) {
    BufferedImage shadowImage=getShadowGenerator().createDropShadow(dataImage);
    g2=savedG2;
    g2.drawImage(shadowImage,(int)plotArea.getX() + getShadowGenerator().calculateOffsetX(),(int)plotArea.getY() + getShadowGenerator().calculateOffsetY(),null);
    g2.drawImage(dataImage,(int)plotArea.getX(),(int)plotArea.getY(),null);
  }
  g2.setClip(savedClip);
  g2.setComposite(originalComposite);
  drawOutline(g2,originalPlotArea);
}"
85868,"/** 
 * Returns the edge for a range axis.
 * @param index  the axis index.
 * @return The edge.
 */
public RectangleEdge getRangeAxisEdge(int index){
  AxisLocation location=getRangeAxisLocation(index);
  RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
  if (result == null) {
    result=RectangleEdge.opposite(getRangeAxisEdge(0));
  }
  return result;
}","/** 
 * Returns the edge for a range axis.
 * @param index  the axis index.
 * @return The edge.
 */
public RectangleEdge getRangeAxisEdge(int index){
  AxisLocation location=getRangeAxisLocation(index);
  return Plot.resolveRangeAxisLocation(location,this.orientation);
}"
85869,"/** 
 * Sets the flag that enables or disables panning of the plot along the range axes.
 * @param pannable  the new flag value.
 * @see #isRangePannable() 
 * @since 1.0.13
 */
public void setRangePannable(boolean pannable){
  this.rangePannable=pannable;
}","/** 
 * Sets the flag that enables or disables panning of the plot along the range axes.
 * @param pannable  the new flag value.
 * @see #isRangePannable()
 * @since 1.0.13
 */
public void setRangePannable(boolean pannable){
  this.rangePannable=pannable;
}"
85870,"/** 
 * Returns the edge for a range axis.
 * @param index  the axis index.
 * @return The edge.
 * @see #getRangeAxisLocation(int)
 * @see #getOrientation()
 */
public RectangleEdge getRangeAxisEdge(int index){
  AxisLocation location=getRangeAxisLocation(index);
  RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
  if (result == null) {
    result=RectangleEdge.opposite(getRangeAxisEdge());
  }
  return result;
}","/** 
 * Returns the edge for a range axis.
 * @param index  the axis index.
 * @return The edge.
 * @see #getRangeAxisLocation(int)
 * @see #getOrientation()
 */
public RectangleEdge getRangeAxisEdge(int index){
  AxisLocation location=getRangeAxisLocation(index);
  return Plot.resolveRangeAxisLocation(location,this.orientation);
}"
85871,"/** 
 * Returns the edge for a domain axis.
 * @param index  the axis index.
 * @return The edge.
 * @see #getRangeAxisEdge(int)
 */
public RectangleEdge getDomainAxisEdge(int index){
  AxisLocation location=getDomainAxisLocation(index);
  RectangleEdge result=Plot.resolveDomainAxisLocation(location,this.orientation);
  if (result == null) {
    result=RectangleEdge.opposite(getDomainAxisEdge());
  }
  return result;
}","/** 
 * Returns the edge for a domain axis.
 * @param index  the axis index.
 * @return The edge.
 * @see #getRangeAxisEdge(int)
 */
public RectangleEdge getDomainAxisEdge(int index){
  AxisLocation location=getDomainAxisLocation(index);
  return Plot.resolveDomainAxisLocation(location,this.orientation);
}"
85872,"/** 
 * Returns the domain axis for a dataset.
 * @param index  the dataset index.
 * @return The axis.
 */
public ValueAxis getDomainAxisForDataset(int index){
  int upper=Math.max(getDatasetCount(),getRendererCount());
  if (index < 0 || index >= upper) {
    throw new IllegalArgumentException(""String_Node_Str"" + index + ""String_Node_Str"");
  }
  ValueAxis valueAxis=null;
  List axisIndices=(List)this.datasetToDomainAxesMap.get(new Integer(index));
  if (axisIndices != null) {
    Integer axisIndex=(Integer)axisIndices.get(0);
    valueAxis=getDomainAxis(axisIndex.intValue());
  }
 else {
    valueAxis=getDomainAxis(0);
  }
  return valueAxis;
}","/** 
 * Returns the domain axis for a dataset.
 * @param index  the dataset index.
 * @return The axis.
 */
public ValueAxis getDomainAxisForDataset(int index){
  int upper=Math.max(getDatasetCount(),getRendererCount());
  if (index < 0 || index >= upper) {
    throw new IllegalArgumentException(""String_Node_Str"" + index + ""String_Node_Str"");
  }
  ValueAxis valueAxis;
  List axisIndices=(List)this.datasetToDomainAxesMap.get(new Integer(index));
  if (axisIndices != null) {
    Integer axisIndex=(Integer)axisIndices.get(0);
    valueAxis=getDomainAxis(axisIndex.intValue());
  }
 else {
    valueAxis=getDomainAxis(0);
  }
  return valueAxis;
}"
85873,"/** 
 * Draws a range crosshair.
 * @param g2  the graphics target.
 * @param dataArea  the data area.
 * @param orientation  the plot orientation.
 * @param value  the crosshair value.
 * @param axis  the axis against which the value is measured.
 * @param stroke  the stroke used to draw the crosshair line.
 * @param paint  the paint used to draw the crosshair line.
 * @since 1.0.4
 */
protected void drawRangeCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,double value,ValueAxis axis,Stroke stroke,Paint paint){
  if (axis.getRange().contains(value)) {
    Line2D line=null;
    if (orientation == PlotOrientation.HORIZONTAL) {
      double xx=axis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);
      line=new Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());
    }
 else {
      double yy=axis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);
      line=new Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);
    }
    g2.setStroke(stroke);
    g2.setPaint(paint);
    g2.draw(line);
  }
}","/** 
 * Draws a range crosshair.
 * @param g2  the graphics target.
 * @param dataArea  the data area.
 * @param orientation  the plot orientation.
 * @param value  the crosshair value.
 * @param axis  the axis against which the value is measured.
 * @param stroke  the stroke used to draw the crosshair line.
 * @param paint  the paint used to draw the crosshair line.
 * @since 1.0.4
 */
protected void drawRangeCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,double value,ValueAxis axis,Stroke stroke,Paint paint){
  if (axis.getRange().contains(value)) {
    Line2D line;
    if (orientation == PlotOrientation.HORIZONTAL) {
      double xx=axis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);
      line=new Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());
    }
 else {
      double yy=axis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);
      line=new Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);
    }
    g2.setStroke(stroke);
    g2.setPaint(paint);
    g2.draw(line);
  }
}"
85874,"/** 
 * Draws the gridlines for the plot's primary range axis, if they are visible.
 * @param g2  the graphics device.
 * @param area  the data area.
 * @param ticks  the ticks.
 * @see #drawDomainGridlines(Graphics2D,Rectangle2D,List)
 */
protected void drawRangeGridlines(Graphics2D g2,Rectangle2D area,List ticks){
  if (getRenderer() == null) {
    return;
  }
  if (isRangeGridlinesVisible() || isRangeMinorGridlinesVisible()) {
    Stroke gridStroke=null;
    Paint gridPaint=null;
    ValueAxis axis=getRangeAxis();
    if (axis != null) {
      Iterator iterator=ticks.iterator();
      boolean paintLine=false;
      while (iterator.hasNext()) {
        paintLine=false;
        ValueTick tick=(ValueTick)iterator.next();
        if ((tick.getTickType() == TickType.MINOR) && isRangeMinorGridlinesVisible()) {
          gridStroke=getRangeMinorGridlineStroke();
          gridPaint=getRangeMinorGridlinePaint();
          paintLine=true;
        }
 else         if ((tick.getTickType() == TickType.MAJOR) && isRangeGridlinesVisible()) {
          gridStroke=getRangeGridlineStroke();
          gridPaint=getRangeGridlinePaint();
          paintLine=true;
        }
        if ((tick.getValue() != 0.0 || !isRangeZeroBaselineVisible()) && paintLine) {
          getRenderer().drawRangeGridline(g2,this,getRangeAxis(),area,tick.getValue(),gridPaint,gridStroke);
        }
      }
    }
  }
}","/** 
 * Draws the gridlines for the plot's primary range axis, if they are visible.
 * @param g2  the graphics device.
 * @param area  the data area.
 * @param ticks  the ticks.
 * @see #drawDomainGridlines(Graphics2D,Rectangle2D,List)
 */
protected void drawRangeGridlines(Graphics2D g2,Rectangle2D area,List ticks){
  if (getRenderer() == null) {
    return;
  }
  if (isRangeGridlinesVisible() || isRangeMinorGridlinesVisible()) {
    Stroke gridStroke=null;
    Paint gridPaint=null;
    ValueAxis axis=getRangeAxis();
    if (axis != null) {
      Iterator iterator=ticks.iterator();
      boolean paintLine;
      while (iterator.hasNext()) {
        paintLine=false;
        ValueTick tick=(ValueTick)iterator.next();
        if ((tick.getTickType() == TickType.MINOR) && isRangeMinorGridlinesVisible()) {
          gridStroke=getRangeMinorGridlineStroke();
          gridPaint=getRangeMinorGridlinePaint();
          paintLine=true;
        }
 else         if ((tick.getTickType() == TickType.MAJOR) && isRangeGridlinesVisible()) {
          gridStroke=getRangeGridlineStroke();
          gridPaint=getRangeGridlinePaint();
          paintLine=true;
        }
        if ((tick.getValue() != 0.0 || !isRangeZeroBaselineVisible()) && paintLine) {
          getRenderer().drawRangeGridline(g2,this,getRangeAxis(),area,tick.getValue(),gridPaint,gridStroke);
        }
      }
    }
  }
}"
85875,"/** 
 * Draws a domain crosshair.
 * @param g2  the graphics target.
 * @param dataArea  the data area.
 * @param orientation  the plot orientation.
 * @param value  the crosshair value.
 * @param axis  the axis against which the value is measured.
 * @param stroke  the stroke used to draw the crosshair line.
 * @param paint  the paint used to draw the crosshair line.
 * @since 1.0.4
 */
protected void drawDomainCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,double value,ValueAxis axis,Stroke stroke,Paint paint){
  if (axis.getRange().contains(value)) {
    Line2D line=null;
    if (orientation == PlotOrientation.VERTICAL) {
      double xx=axis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);
      line=new Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());
    }
 else {
      double yy=axis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);
      line=new Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);
    }
    g2.setStroke(stroke);
    g2.setPaint(paint);
    g2.draw(line);
  }
}","/** 
 * Draws a domain crosshair.
 * @param g2  the graphics target.
 * @param dataArea  the data area.
 * @param orientation  the plot orientation.
 * @param value  the crosshair value.
 * @param axis  the axis against which the value is measured.
 * @param stroke  the stroke used to draw the crosshair line.
 * @param paint  the paint used to draw the crosshair line.
 * @since 1.0.4
 */
protected void drawDomainCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,double value,ValueAxis axis,Stroke stroke,Paint paint){
  if (axis.getRange().contains(value)) {
    Line2D line;
    if (orientation == PlotOrientation.VERTICAL) {
      double xx=axis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);
      line=new Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());
    }
 else {
      double yy=axis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);
      line=new Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);
    }
    g2.setStroke(stroke);
    g2.setPaint(paint);
    g2.draw(line);
  }
}"
85876,"/** 
 * Returns the paint for the minor grid lines (if any) plotted against the  range axis.
 * @return The paint (never <code>null</code>).
 * @see #setRangeMinorGridlinePaint(Paint)
 * @since 1.0.12
 */
public Paint getRangeMinorGridlinePaint(){
  return this.rangeMinorGridlinePaint;
}","/** 
 * Returns the paint for the minor grid lines (if any) plotted against the range axis.
 * @return The paint (never <code>null</code>).
 * @see #setRangeMinorGridlinePaint(Paint)
 * @since 1.0.12
 */
public Paint getRangeMinorGridlinePaint(){
  return this.rangeMinorGridlinePaint;
}"
85877,"/** 
 * Confirm that cloning works.
 */
public void testCloning(){
  LookupPaintScale g1=new LookupPaintScale();
  LookupPaintScale g2=null;
  try {
    g2=(LookupPaintScale)g1.clone();
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  assertTrue(g1 != g2);
  assertTrue(g1.getClass() == g2.getClass());
  assertTrue(g1.equals(g2));
  g1.add(new Double(0.5),Color.RED);
  assertFalse(g1.equals(g2));
  g2.add(new Double(0.5),Color.RED);
  assertTrue(g1.equals(g2));
  g1=new LookupPaintScale(1.0,2.0,new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.green));
  g1.add(new Double(1.5),new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
  g2=null;
  try {
    g2=(LookupPaintScale)g1.clone();
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  assertTrue(g1 != g2);
  assertTrue(g1.getClass() == g2.getClass());
  assertTrue(g1.equals(g2));
}","/** 
 * Confirm that cloning works.
 */
public void testCloning(){
  LookupPaintScale g1=new LookupPaintScale();
  LookupPaintScale g2=null;
  try {
    g2=(LookupPaintScale)g1.clone();
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  assertTrue(g1 != g2);
  assertTrue(g1.getClass() == g2.getClass());
  assertTrue(g1.equals(g2));
  g1.add(0.5,Color.RED);
  assertFalse(g1.equals(g2));
  g2.add(0.5,Color.RED);
  assertTrue(g1.equals(g2));
  g1=new LookupPaintScale(1.0,2.0,new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.green));
  g1.add(1.5,new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
  g2=null;
  try {
    g2=(LookupPaintScale)g1.clone();
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  assertTrue(g1 != g2);
  assertTrue(g1.getClass() == g2.getClass());
  assertTrue(g1.equals(g2));
}"
85878,"/** 
 * Sets the alpha transparency that should be used when drawing the marker, and sends a   {@link MarkerChangeEvent} to all registeredlisteners.  The alpha transparency is a value in the range 0.0f (completely transparent) to 1.0f (completely opaque).
 * @param alpha  the alpha transparency (must be in the range 0.0f to1.0f).
 * @throws IllegalArgumentException if <code>alpha</code> is not in thespecified range.
 * @see #getAlpha()
 */
public void setAlpha(float alpha){
  if (alpha < 0.0f || alpha > 1.0f)   throw new IllegalArgumentException(""String_Node_Str"");
  this.alpha=alpha;
  notifyListeners(new MarkerChangeEvent(this));
}","/** 
 * Sets the alpha transparency that should be used when drawing the marker, and sends a   {@link MarkerChangeEvent} to all registeredlisteners.  The alpha transparency is a value in the range 0.0f (completely transparent) to 1.0f (completely opaque).
 * @param alpha  the alpha transparency (must be in the range 0.0f to1.0f).
 * @throws IllegalArgumentException if <code>alpha</code> is not in thespecified range.
 * @see #getAlpha()
 */
public void setAlpha(float alpha){
  if (alpha < 0.0f || alpha > 1.0f) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.alpha=alpha;
  notifyListeners(new MarkerChangeEvent(this));
}"
85879,"/** 
 * Constructs a new marker.
 * @param paint  the paint (<code>null</code> not permitted).
 * @param stroke  the stroke (<code>null</code> not permitted).
 * @param outlinePaint  the outline paint (<code>null</code> permitted).
 * @param outlineStroke  the outline stroke (<code>null</code> permitted).
 * @param alpha  the alpha transparency (must be in the range 0.0f to1.0f).
 * @throws IllegalArgumentException if <code>paint</code> or<code>stroke</code> is <code>null</code>, or <code>alpha</code> is not in the specified range.
 */
protected Marker(Paint paint,Stroke stroke,Paint outlinePaint,Stroke outlineStroke,float alpha){
  if (paint == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (stroke == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (alpha < 0.0f || alpha > 1.0f)   throw new IllegalArgumentException(""String_Node_Str"");
  this.paint=paint;
  this.stroke=stroke;
  this.outlinePaint=outlinePaint;
  this.outlineStroke=outlineStroke;
  this.alpha=alpha;
  this.labelFont=new Font(""String_Node_Str"",Font.PLAIN,9);
  this.labelPaint=Color.BLACK;
  this.labelAnchor=RectangleAnchor.TOP_LEFT;
  this.labelOffset=new RectangleInsets(3.0,3.0,3.0,3.0);
  this.labelOffsetType=LengthAdjustmentType.CONTRACT;
  this.labelTextAnchor=TextAnchor.CENTER;
  this.listenerList=new EventListenerList();
}","/** 
 * Constructs a new marker.
 * @param paint  the paint (<code>null</code> not permitted).
 * @param stroke  the stroke (<code>null</code> not permitted).
 * @param outlinePaint  the outline paint (<code>null</code> permitted).
 * @param outlineStroke  the outline stroke (<code>null</code> permitted).
 * @param alpha  the alpha transparency (must be in the range 0.0f to1.0f).
 * @throws IllegalArgumentException if <code>paint</code> or<code>stroke</code> is <code>null</code>, or <code>alpha</code> is not in the specified range.
 */
protected Marker(Paint paint,Stroke stroke,Paint outlinePaint,Stroke outlineStroke,float alpha){
  if (paint == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (stroke == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (alpha < 0.0f || alpha > 1.0f) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.paint=paint;
  this.stroke=stroke;
  this.outlinePaint=outlinePaint;
  this.outlineStroke=outlineStroke;
  this.alpha=alpha;
  this.labelFont=new Font(""String_Node_Str"",Font.PLAIN,9);
  this.labelPaint=Color.BLACK;
  this.labelAnchor=RectangleAnchor.TOP_LEFT;
  this.labelOffset=new RectangleInsets(3.0,3.0,3.0,3.0);
  this.labelOffsetType=LengthAdjustmentType.CONTRACT;
  this.labelTextAnchor=TextAnchor.CENTER;
  this.listenerList=new EventListenerList();
}"
85880,"/** 
 * Sets the alpha transparency used when drawing the background image.
 * @param alpha  the alpha transparency (in the range 0.0f to 1.0f, where0.0f is fully transparent, and 1.0f is fully opaque).
 * @throws IllegalArgumentException if <code>alpha</code> is not withinthe specified range.
 * @see #getBackgroundImageAlpha()
 */
public void setBackgroundImageAlpha(float alpha){
  if (alpha < 0.0f || alpha > 1.0f)   throw new IllegalArgumentException(""String_Node_Str"");
  if (this.backgroundImageAlpha != alpha) {
    this.backgroundImageAlpha=alpha;
    fireChangeEvent();
  }
}","/** 
 * Sets the alpha transparency used when drawing the background image.
 * @param alpha  the alpha transparency (in the range 0.0f to 1.0f, where0.0f is fully transparent, and 1.0f is fully opaque).
 * @throws IllegalArgumentException if <code>alpha</code> is not withinthe specified range.
 * @see #getBackgroundImageAlpha()
 */
public void setBackgroundImageAlpha(float alpha){
  if (alpha < 0.0f || alpha > 1.0f) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (this.backgroundImageAlpha != alpha) {
    this.backgroundImageAlpha=alpha;
    fireChangeEvent();
  }
}"
85881,"/** 
 * Translates a (theta, radius) pair into Java2D coordinates.  If <code>radius</code> is less than the lower bound of the axis, then this method returns the centre point.
 * @param angleDegrees  the angle in degrees.
 * @param radius  the radius.
 * @param dataArea  the data area.
 * @return A point in Java2D space.
 * @since 1.0.14
 */
public Point translateToJava2D(double angleDegrees,double radius,ValueAxis axis,Rectangle2D dataArea){
  if (counterClockwise)   angleDegrees=-angleDegrees;
  double radians=Math.toRadians(angleDegrees + this.angleOffset);
  double minx=dataArea.getMinX() + this.margin;
  double maxx=dataArea.getMaxX() - this.margin;
  double miny=dataArea.getMinY() + this.margin;
  double maxy=dataArea.getMaxY() - this.margin;
  double halfWidth=(maxx - minx) / 2.0;
  double halfHeight=(maxy - miny) / 2.0;
  double midX=minx + halfWidth;
  double midY=miny + halfHeight;
  double l=Math.min(halfWidth,halfHeight);
  Rectangle2D quadrant=new Rectangle2D.Double(midX,midY,l,l);
  double axisMin=axis.getLowerBound();
  double adjustedRadius=Math.max(radius,axisMin);
  double length=axis.valueToJava2D(adjustedRadius,quadrant,RectangleEdge.BOTTOM) - midX;
  float x=(float)(midX + Math.cos(radians) * length);
  float y=(float)(midY + Math.sin(radians) * length);
  int ix=Math.round(x);
  int iy=Math.round(y);
  Point p=new Point(ix,iy);
  return p;
}","/** 
 * Translates a (theta, radius) pair into Java2D coordinates.  If <code>radius</code> is less than the lower bound of the axis, then this method returns the centre point.
 * @param angleDegrees  the angle in degrees.
 * @param radius  the radius.
 * @param dataArea  the data area.
 * @return A point in Java2D space.
 * @since 1.0.14
 */
public Point translateToJava2D(double angleDegrees,double radius,ValueAxis axis,Rectangle2D dataArea){
  if (counterClockwise) {
    angleDegrees=-angleDegrees;
  }
  double radians=Math.toRadians(angleDegrees + this.angleOffset);
  double minx=dataArea.getMinX() + this.margin;
  double maxx=dataArea.getMaxX() - this.margin;
  double miny=dataArea.getMinY() + this.margin;
  double maxy=dataArea.getMaxY() - this.margin;
  double halfWidth=(maxx - minx) / 2.0;
  double halfHeight=(maxy - miny) / 2.0;
  double midX=minx + halfWidth;
  double midY=miny + halfHeight;
  double l=Math.min(halfWidth,halfHeight);
  Rectangle2D quadrant=new Rectangle2D.Double(midX,midY,l,l);
  double axisMin=axis.getLowerBound();
  double adjustedRadius=Math.max(radius,axisMin);
  double length=axis.valueToJava2D(adjustedRadius,quadrant,RectangleEdge.BOTTOM) - midX;
  float x=(float)(midX + Math.cos(radians) * length);
  float y=(float)(midY + Math.sin(radians) * length);
  int ix=Math.round(x);
  int iy=Math.round(y);
  Point p=new Point(ix,iy);
  return p;
}"
85882,"/** 
 * Draws the plot on a Java 2D graphics device (such as the screen or a printer).
 * @param g2  the graphics device.
 * @param area  the area within which the plot should be drawn.
 * @param anchor  the anchor point (<code>null</code> permitted).
 * @param parentState  the state from the parent plot, if there is one.
 * @param info  collects info about the drawing.
 */
@Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){
  RectangleInsets insets=getInsets();
  insets.trim(area);
  if (info != null) {
    info.setPlotArea(area);
    info.setDataArea(area);
  }
  drawBackground(g2,area);
  drawOutline(g2,area);
  Shape savedClip=g2.getClip();
  g2.clip(area);
  Composite originalComposite=g2.getComposite();
  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
  if (!DatasetUtilities.isEmptyOrNull(this.dataset)) {
    int seriesCount=0, catCount=0;
    if (this.dataExtractOrder == TableOrder.BY_ROW) {
      seriesCount=this.dataset.getRowCount();
      catCount=this.dataset.getColumnCount();
    }
 else {
      seriesCount=this.dataset.getColumnCount();
      catCount=this.dataset.getRowCount();
    }
    if (this.maxValue == DEFAULT_MAX_VALUE)     calculateMaxValue(seriesCount,catCount);
    double gapHorizontal=area.getWidth() * getInteriorGap();
    double gapVertical=area.getHeight() * getInteriorGap();
    double X=area.getX() + gapHorizontal / 2;
    double Y=area.getY() + gapVertical / 2;
    double W=area.getWidth() - gapHorizontal;
    double H=area.getHeight() - gapVertical;
    double headW=area.getWidth() * this.headPercent;
    double headH=area.getHeight() * this.headPercent;
    double min=Math.min(W,H) / 2;
    X=(X + X + W) / 2 - min;
    Y=(Y + Y + H) / 2 - min;
    W=2 * min;
    H=2 * min;
    Point2D centre=new Point2D.Double(X + W / 2,Y + H / 2);
    Rectangle2D radarArea=new Rectangle2D.Double(X,Y,W,H);
    for (int cat=0; cat < catCount; cat++) {
      double angle=getStartAngle() + (getDirection().getFactor() * cat * 360 / catCount);
      Point2D endPoint=getWebPoint(radarArea,angle,1);
      Line2D line=new Line2D.Double(centre,endPoint);
      g2.setPaint(this.axisLinePaint);
      g2.setStroke(this.axisLineStroke);
      g2.draw(line);
      drawLabel(g2,radarArea,0.0,cat,angle,360.0 / catCount);
    }
    for (int series=0; series < seriesCount; series++) {
      drawRadarPoly(g2,radarArea,centre,info,series,catCount,headH,headW);
    }
  }
 else {
    drawNoDataMessage(g2,area);
  }
  g2.setClip(savedClip);
  g2.setComposite(originalComposite);
  drawOutline(g2,area);
}","/** 
 * Draws the plot on a Java 2D graphics device (such as the screen or a printer).
 * @param g2  the graphics device.
 * @param area  the area within which the plot should be drawn.
 * @param anchor  the anchor point (<code>null</code> permitted).
 * @param parentState  the state from the parent plot, if there is one.
 * @param info  collects info about the drawing.
 */
@Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){
  RectangleInsets insets=getInsets();
  insets.trim(area);
  if (info != null) {
    info.setPlotArea(area);
    info.setDataArea(area);
  }
  drawBackground(g2,area);
  drawOutline(g2,area);
  Shape savedClip=g2.getClip();
  g2.clip(area);
  Composite originalComposite=g2.getComposite();
  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
  if (!DatasetUtilities.isEmptyOrNull(this.dataset)) {
    int seriesCount=0, catCount=0;
    if (this.dataExtractOrder == TableOrder.BY_ROW) {
      seriesCount=this.dataset.getRowCount();
      catCount=this.dataset.getColumnCount();
    }
 else {
      seriesCount=this.dataset.getColumnCount();
      catCount=this.dataset.getRowCount();
    }
    if (this.maxValue == DEFAULT_MAX_VALUE) {
      calculateMaxValue(seriesCount,catCount);
    }
    double gapHorizontal=area.getWidth() * getInteriorGap();
    double gapVertical=area.getHeight() * getInteriorGap();
    double X=area.getX() + gapHorizontal / 2;
    double Y=area.getY() + gapVertical / 2;
    double W=area.getWidth() - gapHorizontal;
    double H=area.getHeight() - gapVertical;
    double headW=area.getWidth() * this.headPercent;
    double headH=area.getHeight() * this.headPercent;
    double min=Math.min(W,H) / 2;
    X=(X + X + W) / 2 - min;
    Y=(Y + Y + H) / 2 - min;
    W=2 * min;
    H=2 * min;
    Point2D centre=new Point2D.Double(X + W / 2,Y + H / 2);
    Rectangle2D radarArea=new Rectangle2D.Double(X,Y,W,H);
    for (int cat=0; cat < catCount; cat++) {
      double angle=getStartAngle() + (getDirection().getFactor() * cat * 360 / catCount);
      Point2D endPoint=getWebPoint(radarArea,angle,1);
      Line2D line=new Line2D.Double(centre,endPoint);
      g2.setPaint(this.axisLinePaint);
      g2.setStroke(this.axisLineStroke);
      g2.draw(line);
      drawLabel(g2,radarArea,0.0,cat,angle,360.0 / catCount);
    }
    for (int series=0; series < seriesCount; series++) {
      drawRadarPoly(g2,radarArea,centre,info,series,catCount,headH,headW);
    }
  }
 else {
    drawNoDataMessage(g2,area);
  }
  g2.setClip(savedClip);
  g2.setComposite(originalComposite);
  drawOutline(g2,area);
}"
85883,"/** 
 * Binding this object to the session has no additional effects.
 * @param event  the session bind event.
 */
@Override public void valueBound(HttpSessionBindingEvent event){
  return;
}","/** 
 * Binding this object to the session has no additional effects.
 * @param event  the session bind event.
 */
@Override public void valueBound(HttpSessionBindingEvent event){
}"
85884,"/** 
 * When this object is unbound from the session (including upon session expiry) the files that have been added to the ArrayList are iterated and deleted.
 * @param event  the session unbind event.
 */
@Override public void valueUnbound(HttpSessionBindingEvent event){
  Iterator iter=this.chartNames.listIterator();
  while (iter.hasNext()) {
    String filename=(String)iter.next();
    File file=new File(System.getProperty(""String_Node_Str""),filename);
    if (file.exists()) {
      file.delete();
    }
  }
  return;
}","/** 
 * When this object is unbound from the session (including upon session expiry) the files that have been added to the ArrayList are iterated and deleted.
 * @param event  the session unbind event.
 */
@Override public void valueUnbound(HttpSessionBindingEvent event){
  File tempDir=new File(System.getProperty(""String_Node_Str""));
  for (  String filename : this.chartNames) {
    File file=new File(tempDir,filename);
    if (file.exists()) {
      file.delete();
    }
  }
}"
85885,"/** 
 * Returns a string that is equivalent to the input string, but with special characters converted to HTML escape sequences.
 * @param input  the string to escape (<code>null</code> not permitted).
 * @return A string with characters escaped.
 * @since 1.0.9
 */
public static String htmlEscape(String input){
  if (input == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuffer result=new StringBuffer();
  int length=input.length();
  for (int i=0; i < length; i++) {
    char c=input.charAt(i);
    if (c == '&') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '\""') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '<') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '>') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '\'') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '\\') {
      result.append(""String_Node_Str"");
    }
 else {
      result.append(c);
    }
  }
  return result.toString();
}","/** 
 * Returns a string that is equivalent to the input string, but with special characters converted to HTML escape sequences.
 * @param input  the string to escape (<code>null</code> not permitted).
 * @return A string with characters escaped.
 * @since 1.0.9
 */
public static String htmlEscape(String input){
  if (input == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuilder result=new StringBuilder();
  int length=input.length();
  for (int i=0; i < length; i++) {
    char c=input.charAt(i);
    if (c == '&') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '\""') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '<') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '>') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '\'') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '\\') {
      result.append(""String_Node_Str"");
    }
 else {
      result.append(c);
    }
  }
  return result.toString();
}"
85886,"/** 
 * Creates an image map element that complies with the XHTML 1.0 specification.
 * @param name  the map name (<code>null</code> not permitted).
 * @param info  the chart rendering info (<code>null</code> not permitted).
 * @param toolTipTagFragmentGenerator  a generator for the HTML fragmentthat will contain the tooltip text (<code>null</code> not permitted if <code>info</code> contains tooltip information).
 * @param urlTagFragmentGenerator  a generator for the HTML fragment thatwill contain the URL reference (<code>null</code> not permitted if <code>info</code> contains URLs).
 * @return The map tag.
 */
public static String getImageMap(String name,ChartRenderingInfo info,ToolTipTagFragmentGenerator toolTipTagFragmentGenerator,URLTagFragmentGenerator urlTagFragmentGenerator){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"" + htmlEscape(name) + ""String_Node_Str""+ htmlEscape(name)+ ""String_Node_Str"");
  sb.append(StringUtils.getLineSeparator());
  EntityCollection entities=info.getEntityCollection();
  if (entities != null) {
    int count=entities.getEntityCount();
    for (int i=count - 1; i >= 0; i--) {
      ChartEntity entity=entities.getEntity(i);
      if (entity.getToolTipText() != null || entity.getURLText() != null) {
        String area=entity.getImageMapAreaTag(toolTipTagFragmentGenerator,urlTagFragmentGenerator);
        if (area.length() > 0) {
          sb.append(area);
          sb.append(StringUtils.getLineSeparator());
        }
      }
    }
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","/** 
 * Creates an image map element that complies with the XHTML 1.0 specification.
 * @param name  the map name (<code>null</code> not permitted).
 * @param info  the chart rendering info (<code>null</code> not permitted).
 * @param toolTipTagFragmentGenerator  a generator for the HTML fragmentthat will contain the tooltip text (<code>null</code> not permitted if <code>info</code> contains tooltip information).
 * @param urlTagFragmentGenerator  a generator for the HTML fragment thatwill contain the URL reference (<code>null</code> not permitted if <code>info</code> contains URLs).
 * @return The map tag.
 */
public static String getImageMap(String name,ChartRenderingInfo info,ToolTipTagFragmentGenerator toolTipTagFragmentGenerator,URLTagFragmentGenerator urlTagFragmentGenerator){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + htmlEscape(name) + ""String_Node_Str""+ htmlEscape(name)+ ""String_Node_Str"");
  sb.append(StringUtils.getLineSeparator());
  EntityCollection entities=info.getEntityCollection();
  if (entities != null) {
    int count=entities.getEntityCount();
    for (int i=count - 1; i >= 0; i--) {
      ChartEntity entity=entities.getEntity(i);
      if (entity.getToolTipText() != null || entity.getURLText() != null) {
        String area=entity.getImageMapAreaTag(toolTipTagFragmentGenerator,urlTagFragmentGenerator);
        if (area.length() > 0) {
          sb.append(area);
          sb.append(StringUtils.getLineSeparator());
        }
      }
    }
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
85887,"/** 
 * Returns a string that is equivalent to the input string, but with special characters converted to JavaScript escape sequences.
 * @param input  the string to escape (<code>null</code> not permitted).
 * @return A string with characters escaped.
 * @since 1.0.13
 */
public static String javascriptEscape(String input){
  if (input == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuffer result=new StringBuffer();
  int length=input.length();
  for (int i=0; i < length; i++) {
    char c=input.charAt(i);
    if (c == '\""') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '\'') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '\\') {
      result.append(""String_Node_Str"");
    }
 else {
      result.append(c);
    }
  }
  return result.toString();
}","/** 
 * Returns a string that is equivalent to the input string, but with special characters converted to JavaScript escape sequences.
 * @param input  the string to escape (<code>null</code> not permitted).
 * @return A string with characters escaped.
 * @since 1.0.13
 */
public static String javascriptEscape(String input){
  if (input == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuilder result=new StringBuilder();
  int length=input.length();
  for (int i=0; i < length; i++) {
    char c=input.charAt(i);
    if (c == '\""') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '\'') {
      result.append(""String_Node_Str"");
    }
 else     if (c == '\\') {
      result.append(""String_Node_Str"");
    }
 else {
      result.append(c);
    }
  }
  return result.toString();
}"
85888,"/** 
 * Generates a label for the specified series.  This label will be used for the chart legend.
 * @param dataset  the dataset (<code>null</code> not permitted).
 * @param series  the series.
 * @return A series label.
 */
@Override public String generateLabel(XYDataset dataset,int series){
  if (dataset == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuffer label=new StringBuffer();
  label.append(MessageFormat.format(this.formatPattern,createItemArray(dataset,series)));
  Integer key=new Integer(series);
  List extraLabels=(List)this.seriesLabelLists.get(key);
  if (extraLabels != null) {
    Object[] temp=new Object[1];
    for (int i=0; i < extraLabels.size(); i++) {
      temp[0]=extraLabels.get(i);
      String labelAddition=MessageFormat.format(this.additionalFormatPattern,temp);
      label.append(labelAddition);
    }
  }
  return label.toString();
}","/** 
 * Generates a label for the specified series.  This label will be used for the chart legend.
 * @param dataset  the dataset (<code>null</code> not permitted).
 * @param series  the series.
 * @return A series label.
 */
@Override public String generateLabel(XYDataset dataset,int series){
  if (dataset == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuilder label=new StringBuilder();
  label.append(MessageFormat.format(this.formatPattern,createItemArray(dataset,series)));
  Integer key=new Integer(series);
  List extraLabels=(List)this.seriesLabelLists.get(key);
  if (extraLabels != null) {
    Object[] temp=new Object[1];
    for (int i=0; i < extraLabels.size(); i++) {
      temp[0]=extraLabels.get(i);
      String labelAddition=MessageFormat.format(this.additionalFormatPattern,temp);
      label.append(labelAddition);
    }
  }
  return label.toString();
}"
85889,"/** 
 * Returns a string representation of the chart entity, useful for debugging.
 * @return A string.
 */
@Override public String toString(){
  StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(getToolTipText());
  return buf.toString();
}","/** 
 * Returns a string representation of the chart entity, useful for debugging.
 * @return A string.
 */
@Override public String toString(){
  StringBuilder buf=new StringBuilder(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(getToolTipText());
  return buf.toString();
}"
85890,"/** 
 * Returns a string representation of this entity.  This is primarily useful for debugging.
 * @return A string representation of this entity.
 */
@Override public String toString(){
  StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(this.key);
  buf.append(""String_Node_Str"" + getToolTipText());
  buf.append(""String_Node_Str"" + getURLText());
  return buf.toString();
}","/** 
 * Returns a string representation of this entity.  This is primarily useful for debugging.
 * @return A string representation of this entity.
 */
@Override public String toString(){
  StringBuilder buf=new StringBuilder(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(this.key);
  buf.append(""String_Node_Str"").append(getToolTipText());
  buf.append(""String_Node_Str"").append(getURLText());
  return buf.toString();
}"
85891,"/** 
 * Returns a string containing the coordinates for a given shape.  This string is intended for use in an image map.
 * @param shape  the shape (<code>null</code> not permitted).
 * @return The coordinates for a given shape as string.
 */
private String getPolyCoords(Shape shape){
  if (shape == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuffer result=new StringBuffer();
  boolean first=true;
  float[] coords=new float[6];
  PathIterator pi=shape.getPathIterator(null,1.0);
  while (!pi.isDone()) {
    pi.currentSegment(coords);
    if (first) {
      first=false;
      result.append((int)coords[0]);
      result.append(""String_Node_Str"").append((int)coords[1]);
    }
 else {
      result.append(""String_Node_Str"");
      result.append((int)coords[0]);
      result.append(""String_Node_Str"");
      result.append((int)coords[1]);
    }
    pi.next();
  }
  return result.toString();
}","/** 
 * Returns a string containing the coordinates for a given shape.  This string is intended for use in an image map.
 * @param shape  the shape (<code>null</code> not permitted).
 * @return The coordinates for a given shape as string.
 */
private String getPolyCoords(Shape shape){
  if (shape == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuilder result=new StringBuilder();
  boolean first=true;
  float[] coords=new float[6];
  PathIterator pi=shape.getPathIterator(null,1.0);
  while (!pi.isDone()) {
    pi.currentSegment(coords);
    if (first) {
      first=false;
      result.append((int)coords[0]);
      result.append(""String_Node_Str"").append((int)coords[1]);
    }
 else {
      result.append(""String_Node_Str"");
      result.append((int)coords[0]);
      result.append(""String_Node_Str"");
      result.append((int)coords[1]);
    }
    pi.next();
  }
  return result.toString();
}"
85892,"/** 
 * Returns a string representation of the chart entity, useful for debugging.
 * @return A string.
 */
@Override public String toString(){
  StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(this.toolTipText);
  return buf.toString();
}","/** 
 * Returns a string representation of the chart entity, useful for debugging.
 * @return A string.
 */
@Override public String toString(){
  StringBuilder buf=new StringBuilder(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(this.toolTipText);
  return buf.toString();
}"
85893,"/** 
 * Returns an HTML image map tag for this entity.  The returned fragment should be <code>XHTML 1.0</code> compliant.
 * @param toolTipTagFragmentGenerator  a generator for the HTML fragmentthat will contain the tooltip text (<code>null</code> not permitted if this entity contains tooltip information).
 * @param urlTagFragmentGenerator  a generator for the HTML fragment thatwill contain the URL reference (<code>null</code> not permitted if this entity has a URL).
 * @return The HTML tag.
 */
public String getImageMapAreaTag(ToolTipTagFragmentGenerator toolTipTagFragmentGenerator,URLTagFragmentGenerator urlTagFragmentGenerator){
  StringBuffer tag=new StringBuffer();
  boolean hasURL=(this.urlText == null ? false : !this.urlText.equals(""String_Node_Str""));
  boolean hasToolTip=(this.toolTipText == null ? false : !this.toolTipText.equals(""String_Node_Str""));
  if (hasURL || hasToolTip) {
    tag.append(""String_Node_Str"" + getShapeType() + ""String_Node_Str""+ ""String_Node_Str""+ getShapeCoords()+ ""String_Node_Str"");
    if (hasToolTip) {
      tag.append(toolTipTagFragmentGenerator.generateToolTipFragment(this.toolTipText));
    }
    if (hasURL) {
      tag.append(urlTagFragmentGenerator.generateURLFragment(this.urlText));
    }
 else {
      tag.append(""String_Node_Str"");
    }
    if (!hasToolTip) {
      tag.append(""String_Node_Str"");
    }
    tag.append(""String_Node_Str"");
  }
  return tag.toString();
}","/** 
 * Returns an HTML image map tag for this entity.  The returned fragment should be <code>XHTML 1.0</code> compliant.
 * @param toolTipTagFragmentGenerator  a generator for the HTML fragmentthat will contain the tooltip text (<code>null</code> not permitted if this entity contains tooltip information).
 * @param urlTagFragmentGenerator  a generator for the HTML fragment thatwill contain the URL reference (<code>null</code> not permitted if this entity has a URL).
 * @return The HTML tag.
 */
public String getImageMapAreaTag(ToolTipTagFragmentGenerator toolTipTagFragmentGenerator,URLTagFragmentGenerator urlTagFragmentGenerator){
  StringBuilder tag=new StringBuilder();
  boolean hasURL=(this.urlText == null ? false : !this.urlText.equals(""String_Node_Str""));
  boolean hasToolTip=(this.toolTipText == null ? false : !this.toolTipText.equals(""String_Node_Str""));
  if (hasURL || hasToolTip) {
    tag.append(""String_Node_Str"" + getShapeType() + ""String_Node_Str""+ ""String_Node_Str""+ getShapeCoords()+ ""String_Node_Str"");
    if (hasToolTip) {
      tag.append(toolTipTagFragmentGenerator.generateToolTipFragment(this.toolTipText));
    }
    if (hasURL) {
      tag.append(urlTagFragmentGenerator.generateURLFragment(this.urlText));
    }
 else {
      tag.append(""String_Node_Str"");
    }
    if (!hasToolTip) {
      tag.append(""String_Node_Str"");
    }
    tag.append(""String_Node_Str"");
  }
  return tag.toString();
}"
85894,"/** 
 * Returns a string representation of the chart entity, useful for debugging.
 * @return A string.
 */
@Override public String toString(){
  StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(getToolTipText());
  return buf.toString();
}","/** 
 * Returns a string representation of the chart entity, useful for debugging.
 * @return A string.
 */
@Override public String toString(){
  StringBuilder buf=new StringBuilder(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(getToolTipText());
  return buf.toString();
}"
85895,"/** 
 * Returns a string representation of the plot entity, useful for debugging.
 * @return A string.
 */
@Override public String toString(){
  StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(getToolTipText());
  return buf.toString();
}","/** 
 * Returns a string representation of the plot entity, useful for debugging.
 * @return A string.
 */
@Override public String toString(){
  StringBuilder buf=new StringBuilder(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(getToolTipText());
  return buf.toString();
}"
85896,"/** 
 * Returns a string representation of the chart entity, useful for debugging.
 * @return A string.
 */
@Override public String toString(){
  StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(getToolTipText());
  return buf.toString();
}","/** 
 * Returns a string representation of the chart entity, useful for debugging.
 * @return A string.
 */
@Override public String toString(){
  StringBuilder buf=new StringBuilder(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(getToolTipText());
  return buf.toString();
}"
85897,"/** 
 * Creates a new comparator.
 * @param type  the type (<code>BY_KEY</code> or <code>BY_VALUE</code>,<code>null</code> not permitted).
 * @param order  the order (<code>null</code> not permitted).
 */
public KeyedValueComparator(KeyedValueComparatorType type,SortOrder order){
  if (order == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.type=type;
  this.order=order;
}","/** 
 * Creates a new comparator.
 * @param type  the type (<code>BY_KEY</code> or <code>BY_VALUE</code>,<code>null</code> not permitted).
 * @param order  the order (<code>null</code> not permitted).
 */
public KeyedValueComparator(KeyedValueComparatorType type,SortOrder order){
  ParamChecks.nullNotPermitted(type,""String_Node_Str"");
  ParamChecks.nullNotPermitted(order,""String_Node_Str"");
  this.type=type;
  this.order=order;
}"
85898,"/** 
 * Sets up default encoders (uses Sun PNG Encoder if JDK 1.4+ and the SunPNGEncoderAdapter class is available).
 */
private static void init(){
  encoders=new Hashtable();
  encoders.put(""String_Node_Str"",""String_Node_Str"");
  try {
    Class.forName(""String_Node_Str"");
    Class.forName(""String_Node_Str"");
    encoders.put(""String_Node_Str"",""String_Node_Str"");
    encoders.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    encoders.put(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Sets up default encoders (uses Sun PNG Encoder if JDK 1.4+ and the SunPNGEncoderAdapter class is available).
 */
private static void init(){
  encoders=new HashMap<String,String>();
  encoders.put(""String_Node_Str"",""String_Node_Str"");
  encoders.put(""String_Node_Str"",""String_Node_Str"");
}"
85899,"/** 
 * Returns a string containing a description of the object for debugging purposes.
 * @return A string.
 */
@Override public String toString(){
  StringBuffer result=new StringBuffer();
  for (int i=0; i < this.labels.size(); i++) {
    result.append(getPieLabelRecord(i).toString()).append(""String_Node_Str"");
  }
  return result.toString();
}","/** 
 * Returns a string containing a description of the object for debugging purposes.
 * @return A string.
 */
@Override public String toString(){
  StringBuilder result=new StringBuilder();
  for (int i=0; i < this.labels.size(); i++) {
    result.append(getPieLabelRecord(i).toString()).append(""String_Node_Str"");
  }
  return result.toString();
}"
85900,"/** 
 * Returns the space required to draw the axis.
 * @param g2  the graphics device.
 * @param plot  the plot that the axis belongs to.
 * @param plotArea  the area within which the plot should be drawn.
 * @param edge  the axis location.
 * @param space  the space already reserved (for other axes).
 * @return The space required to draw the axis (including pre-reservedspace).
 */
@Override public AxisSpace reserveSpace(Graphics2D g2,Plot plot,Rectangle2D plotArea,RectangleEdge edge,AxisSpace space){
  if (space == null) {
    space=new AxisSpace();
  }
  if (!isVisible()) {
    return space;
  }
  double dimension=getFixedDimension();
  if (dimension > 0.0) {
    space.ensureAtLeast(dimension,edge);
  }
  double tickLabelHeight=0.0;
  double tickLabelWidth=0.0;
  if (isTickLabelsVisible()) {
    g2.setFont(getTickLabelFont());
    List ticks=refreshTicks(g2,new AxisState(),plotArea,edge);
    if (RectangleEdge.isTopOrBottom(edge)) {
      tickLabelHeight=findMaximumTickLabelHeight(ticks,g2,plotArea,isVerticalTickLabels());
    }
 else     if (RectangleEdge.isLeftOrRight(edge)) {
      tickLabelWidth=findMaximumTickLabelWidth(ticks,g2,plotArea,isVerticalTickLabels());
    }
  }
  Rectangle2D labelEnclosure=getLabelEnclosure(g2,edge);
  double labelHeight=0.0;
  double labelWidth=0.0;
  if (RectangleEdge.isTopOrBottom(edge)) {
    labelHeight=labelEnclosure.getHeight();
    space.add(labelHeight + tickLabelHeight,edge);
  }
 else   if (RectangleEdge.isLeftOrRight(edge)) {
    labelWidth=labelEnclosure.getWidth();
    space.add(labelWidth + tickLabelWidth,edge);
  }
  return space;
}","/** 
 * Returns the space required to draw the axis.
 * @param g2  the graphics device.
 * @param plot  the plot that the axis belongs to.
 * @param plotArea  the area within which the plot should be drawn.
 * @param edge  the axis location.
 * @param space  the space already reserved (for other axes).
 * @return The space required to draw the axis (including pre-reservedspace).
 */
@Override public AxisSpace reserveSpace(Graphics2D g2,Plot plot,Rectangle2D plotArea,RectangleEdge edge,AxisSpace space){
  if (space == null) {
    space=new AxisSpace();
  }
  if (!isVisible()) {
    return space;
  }
  double dimension=getFixedDimension();
  if (dimension > 0.0) {
    space.add(dimension,edge);
    return space;
  }
  double tickLabelHeight=0.0;
  double tickLabelWidth=0.0;
  if (isTickLabelsVisible()) {
    g2.setFont(getTickLabelFont());
    List ticks=refreshTicks(g2,new AxisState(),plotArea,edge);
    if (RectangleEdge.isTopOrBottom(edge)) {
      tickLabelHeight=findMaximumTickLabelHeight(ticks,g2,plotArea,isVerticalTickLabels());
    }
 else     if (RectangleEdge.isLeftOrRight(edge)) {
      tickLabelWidth=findMaximumTickLabelWidth(ticks,g2,plotArea,isVerticalTickLabels());
    }
  }
  Rectangle2D labelEnclosure=getLabelEnclosure(g2,edge);
  double labelHeight;
  double labelWidth;
  if (RectangleEdge.isTopOrBottom(edge)) {
    labelHeight=labelEnclosure.getHeight();
    space.add(labelHeight + tickLabelHeight,edge);
  }
 else   if (RectangleEdge.isLeftOrRight(edge)) {
    labelWidth=labelEnclosure.getWidth();
    space.add(labelWidth + tickLabelWidth,edge);
  }
  return space;
}"
85901,"/** 
 * Creates a new series with the specified key and description.
 * @param key  the series key (<code>null</code> NOT permitted).
 * @param description  the series description (<code>null</code> permitted).
 */
protected Series(Comparable key,String description){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.key=key;
  this.description=description;
  this.listeners=new EventListenerList();
  this.propertyChangeSupport=new PropertyChangeSupport(this);
  this.vetoableChangeSupport=new VetoableChangeSupport(this);
  this.notify=true;
}","/** 
 * Creates a new series with the specified key and description.
 * @param key  the series key (<code>null</code> NOT permitted).
 * @param description  the series description (<code>null</code> permitted).
 */
protected Series(Comparable key,String description){
  ParamChecks.nullNotPermitted(key,""String_Node_Str"");
  this.key=key;
  this.description=description;
  this.listeners=new EventListenerList();
  this.propertyChangeSupport=new PropertyChangeSupport(this);
  this.vetoableChangeSupport=new VetoableChangeSupport(this);
  this.notify=true;
}"
85902,"/** 
 * Sets the key for the series and sends a <code>VetoableChangeEvent</code> (with the property name ""Key"") to all registered listeners.  For  backwards compatibility, this method also fires a regular  <code>PropertyChangeEvent</code>.
 * @param key  the key (<code>null</code> not permitted).
 * @see #getKey()
 */
public void setKey(Comparable key){
  ParamChecks.nullNotPermitted(key,""String_Node_Str"");
  Comparable old=this.key;
  try {
    this.vetoableChangeSupport.fireVetoableChange(""String_Node_Str"",old,key);
    this.key=key;
    this.propertyChangeSupport.firePropertyChange(""String_Node_Str"",old,key);
  }
 catch (  PropertyVetoException e) {
    throw new IllegalArgumentException(e.getMessage());
  }
}","/** 
 * Sets the key for the series and sends a <code>VetoableChangeEvent</code> (with the property name ""Key"") to all registered listeners.  If the change is vetoed by a listener, this method will throw an  IllegalArgumentException.
 * @param key  the key (<code>null</code> not permitted).
 * @see #getKey()
 */
public void setKey(Comparable key){
  ParamChecks.nullNotPermitted(key,""String_Node_Str"");
  Comparable old=this.key;
  try {
    this.vetoableChangeSupport.fireVetoableChange(""String_Node_Str"",old,key);
    this.key=key;
  }
 catch (  PropertyVetoException e) {
    throw new IllegalArgumentException(e);
  }
}"
85903,"/** 
 * Removes all the series from the collection and sends a  {@link DatasetChangeEvent} to all registered listeners.
 */
public void removeAllSeries(){
  for (int i=0; i < this.data.size(); i++) {
    XYSeries series=(XYSeries)this.data.get(i);
    series.removeChangeListener(this);
    series.removeVetoableChangeListener(this);
  }
  this.data.clear();
  fireDatasetChanged();
}","/** 
 * Removes all the series from the collection and sends a  {@link DatasetChangeEvent} to all registered listeners.
 */
public void removeAllSeries(){
  for (  XYSeries series : this.data) {
    series.removeChangeListener(this);
    series.removeVetoableChangeListener(this);
  }
  this.data.clear();
  fireDatasetChanged();
}"
85904,"/** 
 * Removes a series from the collection and sends a  {@link DatasetChangeEvent} to all registered listeners.
 * @param series  the series (<code>null</code> not permitted).
 */
public void removeSeries(XYSeries series){
  if (series == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (this.data.contains(series)) {
    series.removeChangeListener(this);
    series.removeVetoableChangeListener(this);
    this.data.remove(series);
    fireDatasetChanged();
  }
}","/** 
 * Removes a series from the collection and sends a  {@link DatasetChangeEvent} to all registered listeners.
 * @param series  the series (<code>null</code> not permitted).
 */
public void removeSeries(XYSeries series){
  ParamChecks.nullNotPermitted(series,""String_Node_Str"");
  if (this.data.contains(series)) {
    series.removeChangeListener(this);
    series.removeVetoableChangeListener(this);
    this.data.remove(series);
    fireDatasetChanged();
  }
}"
85905,"/** 
 * Returns the index of the specified series, or -1 if that series is not present in the dataset.
 * @param series  the series (<code>null</code> not permitted).
 * @return The series index.
 * @since 1.0.6
 */
public int indexOf(XYSeries series){
  if (series == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return this.data.indexOf(series);
}","/** 
 * Returns the index of the specified series, or -1 if that series is not present in the dataset.
 * @param series  the series (<code>null</code> not permitted).
 * @return The series index.
 * @since 1.0.6
 */
public int indexOf(XYSeries series){
  ParamChecks.nullNotPermitted(series,""String_Node_Str"");
  return this.data.indexOf(series);
}"
85906,"/** 
 * Returns the x-value for the specified series and item.
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @return The value.
 */
@Override public Number getX(int series,int item){
  XYSeries s=(XYSeries)this.data.get(series);
  return s.getX(item);
}","/** 
 * Returns the x-value for the specified series and item.
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @return The value.
 */
@Override public Number getX(int series,int item){
  XYSeries s=this.data.get(series);
  return s.getX(item);
}"
85907,"/** 
 * Returns the y-value for the specified series and item.
 * @param series  the series (zero-based index).
 * @param index  the index of the item of interest (zero-based).
 * @return The value (possibly <code>null</code>).
 */
@Override public Number getY(int series,int index){
  XYSeries s=(XYSeries)this.data.get(series);
  return s.getY(index);
}","/** 
 * Returns the y-value for the specified series and item.
 * @param series  the series (zero-based index).
 * @param index  the index of the item of interest (zero-based).
 * @return The value (possibly <code>null</code>).
 */
@Override public Number getY(int series,int index){
  XYSeries s=this.data.get(series);
  return s.getY(index);
}"
85908,"/** 
 * Returns a series from the collection.
 * @param key  the key (<code>null</code> not permitted).
 * @return The series with the specified key.
 * @throws UnknownKeyException if <code>key</code> is not found in thecollection.
 * @since 1.0.9
 */
public XYSeries getSeries(Comparable key){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Iterator iterator=this.data.iterator();
  while (iterator.hasNext()) {
    XYSeries series=(XYSeries)iterator.next();
    if (key.equals(series.getKey())) {
      return series;
    }
  }
  throw new UnknownKeyException(""String_Node_Str"" + key);
}","/** 
 * Returns a series from the collection.
 * @param key  the key (<code>null</code> not permitted).
 * @return The series with the specified key.
 * @throws UnknownKeyException if <code>key</code> is not found in thecollection.
 * @since 1.0.9
 */
public XYSeries getSeries(Comparable key){
  ParamChecks.nullNotPermitted(key,""String_Node_Str"");
  for (  XYSeries series : this.data) {
    if (key.equals(series.getKey())) {
      return series;
    }
  }
  throw new UnknownKeyException(""String_Node_Str"" + key);
}"
85909,"/** 
 * Constructs a dataset and populates it with a single series.
 * @param series  the series (<code>null</code> ignored).
 */
public XYSeriesCollection(XYSeries series){
  this.data=new java.util.ArrayList();
  this.intervalDelegate=new IntervalXYDelegate(this,false);
  addChangeListener(this.intervalDelegate);
  if (series != null) {
    this.data.add(series);
    series.addChangeListener(this);
    series.addVetoableChangeListener(this);
  }
}","/** 
 * Constructs a dataset and populates it with a single series.
 * @param series  the series (<code>null</code> ignored).
 */
public XYSeriesCollection(XYSeries series){
  this.data=new java.util.ArrayList<XYSeries>();
  this.intervalDelegate=new IntervalXYDelegate(this,false);
  addChangeListener(this.intervalDelegate);
  if (series != null) {
    this.data.add(series);
    series.addChangeListener(this);
    series.addVetoableChangeListener(this);
  }
}"
85910,"/** 
 * Receives notification that the key for one of the series in the  collection has changed, and vetos it if the key is already present in  the collection.
 * @param e  the event.
 * @since 1.0.14
 */
@Override public void vetoableChange(PropertyChangeEvent e) throws PropertyVetoException {
  if (!""String_Node_Str"".equals(e.getPropertyName())) {
    return;
  }
  Series s=(Series)e.getSource();
  if (getSeries(s.getKey()) == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Comparable key=(Comparable)e.getNewValue();
  if (this.getSeries(key) != null) {
    throw new PropertyVetoException(""String_Node_Str"",e);
  }
}","/** 
 * Receives notification that the key for one of the series in the  collection has changed, and vetos it if the key is already present in  the collection.
 * @param e  the event.
 * @since 1.0.14
 */
@Override public void vetoableChange(PropertyChangeEvent e) throws PropertyVetoException {
  if (!""String_Node_Str"".equals(e.getPropertyName())) {
    return;
  }
  Series s=(Series)e.getSource();
  if (getSeriesIndex(s.getKey()) == -1) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Comparable key=(Comparable)e.getNewValue();
  if (getSeriesIndex(key) >= 0) {
    throw new PropertyVetoException(""String_Node_Str"",e);
  }
}"
85911,"@Override @RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) public TaskWrapper[] getAssignedTasksForGivenUser(String workspaceId,String userLogin) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, WorkspaceNotEnabledException {
  User user=userManager.checkWorkspaceReadAccess(workspaceId);
  TaskDAO taskDAO=new TaskDAO(new Locale(user.getLanguage()),em);
  Task[] assignedTasks=taskDAO.findAssignedTasks(workspaceId,userLogin);
  List<TaskWrapper> taskWrappers=new ArrayList<>();
  for (  Task task : assignedTasks) {
    TaskWrapper taskWrapper=wrapTask(task,workspaceId);
    if (taskWrapper != null) {
      taskWrappers.add(taskWrapper);
    }
  }
  return taskWrappers.toArray(new TaskWrapper[taskWrappers.size()]);
}","@Override @RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) public TaskWrapper[] getAssignedTasksForGivenUser(String workspaceId,String userLogin) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, WorkspaceNotEnabledException {
  User user=userManager.checkWorkspaceReadAccess(workspaceId);
  TaskDAO taskDAO=new TaskDAO(new Locale(user.getLanguage()),em);
  Task[] assignedTasks=taskDAO.findAssignedTasks(workspaceId,userLogin);
  List<TaskWrapper> taskWrappers=Stream.of(assignedTasks).map(task -> wrapTask(task,workspaceId)).filter(taskWrapper -> taskWrapper != null).collect(Collectors.toList());
  return taskWrappers.toArray(new TaskWrapper[taskWrappers.size()]);
}"
85912,"@Override @RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) public TaskWrapper[] getInProgressTasksForGivenUser(String workspaceId,String userLogin) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, WorkspaceNotEnabledException {
  User user=userManager.checkWorkspaceReadAccess(workspaceId);
  TaskDAO taskDAO=new TaskDAO(new Locale(user.getLanguage()),em);
  Task[] inProgressTasks=taskDAO.findInProgressTasks(workspaceId,userLogin);
  List<TaskWrapper> taskWrappers=new ArrayList<>();
  for (  Task task : inProgressTasks) {
    TaskWrapper taskWrapper=wrapTask(task,workspaceId);
    if (taskWrapper != null) {
      taskWrappers.add(taskWrapper);
    }
  }
  return taskWrappers.toArray(new TaskWrapper[taskWrappers.size()]);
}","@Override @RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) public TaskWrapper[] getInProgressTasksForGivenUser(String workspaceId,String userLogin) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, WorkspaceNotEnabledException {
  User user=userManager.checkWorkspaceReadAccess(workspaceId);
  TaskDAO taskDAO=new TaskDAO(new Locale(user.getLanguage()),em);
  Task[] inProgressTasks=taskDAO.findInProgressTasks(workspaceId,userLogin);
  List<TaskWrapper> taskWrappers=Stream.of(inProgressTasks).map(task -> wrapTask(task,workspaceId)).filter(taskWrapper -> taskWrapper != null).collect(Collectors.toList());
  return taskWrappers.toArray(new TaskWrapper[taskWrappers.size()]);
}"
85913,"public List<String> runQuery(ProductInstanceIteration productInstanceIteration,Query query){
  cq.select(pdm);
  List<PathDataMaster> pathDataMasterList=productInstanceIteration.getPathDataMasterList();
  Set<Integer> pathIds=pathDataMasterList.stream().map(PathDataMaster::getId).collect(Collectors.toSet());
  Predicate pathFilter=cb.and(pdm.get(""String_Node_Str"").in(pathIds),cb.equal(pdi.get(""String_Node_Str""),pdm));
  Predicate rulesPredicate=getPredicate(query.getPathDataQueryRule());
  cq.where(cb.and(pathFilter,rulesPredicate));
  TypedQuery<PathDataMaster> tp=em.createQuery(cq);
  Set<String> pathList=tp.getResultList().stream().map(PathDataMaster::getPath).collect(Collectors.toSet());
  return new ArrayList<>(pathList);
}","public List<String> runQuery(ProductInstanceIteration productInstanceIteration,Query query){
  cq.select(pdm);
  List<PathDataMaster> pathDataMasterList=productInstanceIteration.getPathDataMasterList();
  if (pathDataMasterList.isEmpty()) {
    return new ArrayList<>();
  }
  Set<Integer> pathIds=pathDataMasterList.stream().map(PathDataMaster::getId).collect(Collectors.toSet());
  Predicate pathFilter=cb.and(pdm.get(""String_Node_Str"").in(pathIds),cb.equal(pdi.get(""String_Node_Str""),pdm));
  Predicate rulesPredicate=getPredicate(query.getPathDataQueryRule());
  cq.where(cb.and(pathFilter,rulesPredicate));
  TypedQuery<PathDataMaster> tp=em.createQuery(cq);
  Set<String> pathList=tp.getResultList().stream().map(PathDataMaster::getPath).collect(Collectors.toSet());
  return new ArrayList<>(pathList);
}"
85914,"private void sendMessage(String login,String name,String subject,String content) throws MessagingException {
  try {
    InternetAddress emailAddress=new InternetAddress(login,name);
    Message message=new MimeMessage(mailSession);
    message.addRecipient(Message.RecipientType.TO,emailAddress);
    message.setSubject(subject);
    message.setSentDate(new Date());
    message.setContent(content,""String_Node_Str"");
    message.setFrom();
    Transport.send(message);
  }
 catch (  UnsupportedEncodingException e) {
    logUnsupportedEncodingException(e);
  }
}","private void sendMessage(String email,String name,String subject,String content) throws MessagingException {
  try {
    InternetAddress emailAddress=new InternetAddress(email,name);
    Message message=new MimeMessage(mailSession);
    message.addRecipient(Message.RecipientType.TO,emailAddress);
    message.setSubject(subject);
    message.setSentDate(new Date());
    message.setContent(content,""String_Node_Str"");
    message.setFrom();
    Transport.send(message);
  }
 catch (  UnsupportedEncodingException e) {
    logUnsupportedEncodingException(e);
  }
}"
85915,"public Organization getOrganizationOfCurrentUser() throws AccountNotFoundException {
  Account account=accountManager.getMyAccount();
  return organizationManager.getOrganizationOfAccount(account.getLogin());
}","private Organization getOrganizationOfCurrentUser() throws AccountNotFoundException {
  Account account=accountManager.getMyAccount();
  return organizationManager.getOrganizationOfAccount(account.getLogin());
}"
85916,"@GET @Path(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",response=Response.class) @Produces(MediaType.APPLICATION_JSON) public List<Account> getMembers() throws AccountNotFoundException, OrganizationNotFoundException, AccessRightException {
  Organization organization=this.getOrganizationOfCurrentUser();
  return organization.getMembers();
}","@GET @Path(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",response=AccountDTO.class,responseContainer=""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public AccountDTO[] getMembers() throws AccountNotFoundException, OrganizationNotFoundException, AccessRightException {
  Organization organization=this.getOrganizationOfCurrentUser();
  List<Account> accounts=organization.getMembers();
  AccountDTO[] dtos=new AccountDTO[accounts.size()];
  for (int i=0; i < accounts.size(); i++) {
    dtos[i]=mapper.map(accounts.get(i),AccountDTO.class);
  }
  return dtos;
}"
85917,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public DocumentRevision[] createDocumentRevision(DocumentRevisionKey pOriginalDocRPK,String pTitle,String pDescription,String pWorkflowModelId,ACLUserEntry[] pACLUserEntries,ACLUserGroupEntry[] pACLUserGroupEntries,Map<String,Collection<String>> userRoleMapping,Map<String,Collection<String>> groupRoleMapping) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, NotAllowedException, DocumentRevisionAlreadyExistsException, CreationException, WorkflowModelNotFoundException, RoleNotFoundException, DocumentRevisionNotFoundException, FileAlreadyExistsException, UserGroupNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pOriginalDocRPK.getDocumentMaster().getWorkspace());
  Locale locale=new Locale(user.getLanguage());
  DocumentRevisionDAO docRDAO=new DocumentRevisionDAO(locale,em);
  DocumentRevision originalDocR=docRDAO.loadDocR(pOriginalDocRPK);
  DocumentMaster docM=originalDocR.getDocumentMaster();
  Folder folder=originalDocR.getLocation();
  checkFolderWritingRight(user,folder);
  if (originalDocR.isCheckedOut()) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  if (originalDocR.getNumberOfIterations() == 0) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  DocumentRevision docR=docM.createNextRevision(user);
  DocumentIteration lastDoc=originalDocR.getLastIteration();
  DocumentIteration firstIte=docR.createNextIteration(user);
  if (lastDoc != null) {
    BinaryResourceDAO binDAO=new BinaryResourceDAO(locale,em);
    for (    BinaryResource sourceFile : lastDoc.getAttachedFiles()) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      Date lastModified=sourceFile.getLastModified();
      String fullName=docR.getWorkspaceId() + ""String_Node_Str"" + docR.getId()+ ""String_Node_Str""+ docR.getVersion()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstIte.addFile(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    Set<DocumentLink> links=new HashSet<>();
    for (    DocumentLink link : lastDoc.getLinkedDocuments()) {
      DocumentLink newLink=link.clone();
      links.add(newLink);
    }
    firstIte.setLinkedDocuments(links);
    List<InstanceAttribute> attrs=new ArrayList<>();
    for (    InstanceAttribute attr : lastDoc.getInstanceAttributes()) {
      InstanceAttribute clonedAttribute=attr.clone();
      attrs.add(clonedAttribute);
    }
    firstIte.setInstanceAttributes(attrs);
  }
  if (pWorkflowModelId != null) {
    UserDAO userDAO=new UserDAO(locale,em);
    UserGroupDAO groupDAO=new UserGroupDAO(locale,em);
    RoleDAO roleDAO=new RoleDAO(locale,em);
    Map<Role,Collection<User>> roleUserMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : userRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> userLogins=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(pOriginalDocRPK.getDocumentMaster().getWorkspace(),roleName));
      Set<User> users=new HashSet<>();
      roleUserMap.put(role,users);
      for (      String login : userLogins) {
        User u=userDAO.loadUser(new UserKey(pOriginalDocRPK.getDocumentMaster().getWorkspace(),login));
        users.add(u);
      }
    }
    Map<Role,Collection<UserGroup>> roleGroupMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : groupRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> groupIds=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(pOriginalDocRPK.getDocumentMaster().getWorkspace(),roleName));
      Set<UserGroup> groups=new HashSet<>();
      roleGroupMap.put(role,groups);
      for (      String groupId : groupIds) {
        UserGroup g=groupDAO.loadUserGroup(new UserGroupKey(pOriginalDocRPK.getDocumentMaster().getWorkspace(),groupId));
        groups.add(g);
      }
    }
    WorkflowModel workflowModel=new WorkflowModelDAO(locale,em).loadWorkflowModel(new WorkflowModelKey(user.getWorkspaceId(),pWorkflowModelId));
    Workflow workflow=workflowModel.createWorkflow(roleUserMap,roleGroupMap);
    docR.setWorkflow(workflow);
    for (    Task task : workflow.getTasks()) {
      if (!task.hasPotentialWorker()) {
        throw new NotAllowedException(locale,""String_Node_Str"");
      }
    }
    Collection<Task> runningTasks=workflow.getRunningTasks();
    for (    Task runningTask : runningTasks) {
      runningTask.start();
    }
    em.flush();
    mailer.sendApproval(runningTasks,docR);
  }
  docR.setTitle(pTitle);
  docR.setDescription(pDescription);
  Map<String,String> userEntries=new HashMap<>();
  Map<String,String> groupEntries=new HashMap<>();
  if (pACLUserEntries != null) {
    for (    ACLUserEntry entry : pACLUserEntries) {
      userEntries.put(entry.getPrincipalLogin(),entry.getPermission().name());
    }
  }
  if (pACLUserGroupEntries != null) {
    for (    ACLUserGroupEntry entry : pACLUserGroupEntries) {
      groupEntries.put(entry.getPrincipal().getId(),entry.getPermission().name());
    }
  }
  if (!userEntries.isEmpty() || !groupEntries.isEmpty()) {
    ACLFactory aclFactory=new ACLFactory(em);
    ACL acl=aclFactory.createACL(docR.getWorkspaceId(),userEntries,groupEntries);
    docR.setACL(acl);
  }
  Date now=new Date();
  docR.setCreationDate(now);
  docR.setLocation(folder);
  docR.setCheckOutUser(user);
  docR.setCheckOutDate(now);
  firstIte.setCreationDate(now);
  firstIte.setModificationDate(now);
  docRDAO.createDocR(docR);
  return new DocumentRevision[]{originalDocR,docR};
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public DocumentRevision[] createDocumentRevision(DocumentRevisionKey pOriginalDocRPK,String pTitle,String pDescription,String pWorkflowModelId,ACLUserEntry[] pACLUserEntries,ACLUserGroupEntry[] pACLUserGroupEntries,Map<String,Collection<String>> userRoleMapping,Map<String,Collection<String>> groupRoleMapping) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, NotAllowedException, DocumentRevisionAlreadyExistsException, CreationException, WorkflowModelNotFoundException, RoleNotFoundException, DocumentRevisionNotFoundException, FileAlreadyExistsException, UserGroupNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pOriginalDocRPK.getDocumentMaster().getWorkspace());
  Locale locale=new Locale(user.getLanguage());
  DocumentRevisionDAO docRDAO=new DocumentRevisionDAO(locale,em);
  DocumentRevision originalDocR=docRDAO.loadDocR(pOriginalDocRPK);
  DocumentMaster docM=originalDocR.getDocumentMaster();
  Folder folder=originalDocR.getLocation();
  checkFolderWritingRight(user,folder);
  if (originalDocR.isCheckedOut()) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  if (originalDocR.getNumberOfIterations() == 0) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  DocumentRevision docR=docM.createNextRevision(user);
  DocumentIteration lastDoc=originalDocR.getLastIteration();
  DocumentIteration firstIte=docR.createNextIteration(user);
  if (lastDoc != null) {
    BinaryResourceDAO binDAO=new BinaryResourceDAO(locale,em);
    for (    BinaryResource sourceFile : lastDoc.getAttachedFiles()) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      Date lastModified=sourceFile.getLastModified();
      String fullName=docR.getWorkspaceId() + ""String_Node_Str"" + docR.getId()+ ""String_Node_Str""+ docR.getVersion()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstIte.addFile(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    Set<DocumentLink> links=new HashSet<>();
    for (    DocumentLink link : lastDoc.getLinkedDocuments()) {
      DocumentLink newLink=link.clone();
      links.add(newLink);
    }
    firstIte.setLinkedDocuments(links);
    List<InstanceAttribute> attrs=new ArrayList<>();
    for (    InstanceAttribute attr : lastDoc.getInstanceAttributes()) {
      InstanceAttribute clonedAttribute=attr.clone();
      attrs.add(clonedAttribute);
    }
    firstIte.setInstanceAttributes(attrs);
  }
  Collection<Task> runningTasks=null;
  if (pWorkflowModelId != null) {
    UserDAO userDAO=new UserDAO(locale,em);
    UserGroupDAO groupDAO=new UserGroupDAO(locale,em);
    RoleDAO roleDAO=new RoleDAO(locale,em);
    Map<Role,Collection<User>> roleUserMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : userRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> userLogins=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(pOriginalDocRPK.getDocumentMaster().getWorkspace(),roleName));
      Set<User> users=new HashSet<>();
      roleUserMap.put(role,users);
      for (      String login : userLogins) {
        User u=userDAO.loadUser(new UserKey(pOriginalDocRPK.getDocumentMaster().getWorkspace(),login));
        users.add(u);
      }
    }
    Map<Role,Collection<UserGroup>> roleGroupMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : groupRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> groupIds=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(pOriginalDocRPK.getDocumentMaster().getWorkspace(),roleName));
      Set<UserGroup> groups=new HashSet<>();
      roleGroupMap.put(role,groups);
      for (      String groupId : groupIds) {
        UserGroup g=groupDAO.loadUserGroup(new UserGroupKey(pOriginalDocRPK.getDocumentMaster().getWorkspace(),groupId));
        groups.add(g);
      }
    }
    WorkflowModel workflowModel=new WorkflowModelDAO(locale,em).loadWorkflowModel(new WorkflowModelKey(user.getWorkspaceId(),pWorkflowModelId));
    Workflow workflow=workflowModel.createWorkflow(roleUserMap,roleGroupMap);
    docR.setWorkflow(workflow);
    for (    Task task : workflow.getTasks()) {
      if (!task.hasPotentialWorker()) {
        throw new NotAllowedException(locale,""String_Node_Str"");
      }
    }
    runningTasks=workflow.getRunningTasks();
    for (    Task runningTask : runningTasks) {
      runningTask.start();
    }
  }
  docR.setTitle(pTitle);
  docR.setDescription(pDescription);
  Map<String,String> userEntries=new HashMap<>();
  Map<String,String> groupEntries=new HashMap<>();
  if (pACLUserEntries != null) {
    for (    ACLUserEntry entry : pACLUserEntries) {
      userEntries.put(entry.getPrincipalLogin(),entry.getPermission().name());
    }
  }
  if (pACLUserGroupEntries != null) {
    for (    ACLUserGroupEntry entry : pACLUserGroupEntries) {
      groupEntries.put(entry.getPrincipal().getId(),entry.getPermission().name());
    }
  }
  if (!userEntries.isEmpty() || !groupEntries.isEmpty()) {
    ACLFactory aclFactory=new ACLFactory(em);
    ACL acl=aclFactory.createACL(docR.getWorkspaceId(),userEntries,groupEntries);
    docR.setACL(acl);
  }
  Date now=new Date();
  docR.setCreationDate(now);
  docR.setLocation(folder);
  docR.setCheckOutUser(user);
  docR.setCheckOutDate(now);
  firstIte.setCreationDate(now);
  firstIte.setModificationDate(now);
  docRDAO.createDocR(docR);
  if (runningTasks != null) {
    mailer.sendApproval(runningTasks,docR);
  }
  return new DocumentRevision[]{originalDocR,docR};
}"
85918,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public DocumentRevision createDocumentMaster(String pParentFolder,String pDocMId,String pTitle,String pDescription,String pDocMTemplateId,String pWorkflowModelId,ACLUserEntry[] pACLUserEntries,ACLUserGroupEntry[] pACLUserGroupEntries,Map<String,Collection<String>> userRoleMapping,Map<String,Collection<String>> groupRoleMapping) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, NotAllowedException, FolderNotFoundException, DocumentMasterTemplateNotFoundException, FileAlreadyExistsException, CreationException, DocumentRevisionAlreadyExistsException, RoleNotFoundException, WorkflowModelNotFoundException, DocumentMasterAlreadyExistsException, UserGroupNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(Folder.parseWorkspaceId(pParentFolder));
  Locale locale=new Locale(user.getLanguage());
  checkNameValidity(pDocMId,locale);
  Folder folder=new FolderDAO(locale,em).loadFolder(pParentFolder);
  checkFolderWritingRight(user,folder);
  DocumentMaster docM;
  DocumentRevision docR;
  DocumentIteration newDoc;
  DocumentMasterDAO docMDAO=new DocumentMasterDAO(locale,em);
  if (pDocMTemplateId == null) {
    docM=new DocumentMaster(user.getWorkspace(),pDocMId,user);
    docM.setType(""String_Node_Str"");
    docMDAO.createDocM(docM);
    docR=docM.createNextRevision(user);
    newDoc=docR.createNextIteration(user);
  }
 else {
    DocumentMasterTemplate template=new DocumentMasterTemplateDAO(locale,em).loadDocMTemplate(new DocumentMasterTemplateKey(user.getWorkspaceId(),pDocMTemplateId));
    if (!Tools.validateMask(template.getMask(),pDocMId)) {
      throw new NotAllowedException(locale,""String_Node_Str"");
    }
    docM=new DocumentMaster(user.getWorkspace(),pDocMId,user);
    docM.setType(template.getDocumentType());
    docM.setAttributesLocked(template.isAttributesLocked());
    docMDAO.createDocM(docM);
    docR=docM.createNextRevision(user);
    newDoc=docR.createNextIteration(user);
    List<InstanceAttribute> attrs=new ArrayList<>();
    for (    InstanceAttributeTemplate attrTemplate : template.getAttributeTemplates()) {
      InstanceAttribute attr=attrTemplate.createInstanceAttribute();
      attrs.add(attr);
    }
    newDoc.setInstanceAttributes(attrs);
    BinaryResourceDAO binDAO=new BinaryResourceDAO(locale,em);
    for (    BinaryResource sourceFile : template.getAttachedFiles()) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      Date lastModified=sourceFile.getLastModified();
      String fullName=docM.getWorkspaceId() + ""String_Node_Str"" + docM.getId()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      newDoc.addFile(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
  }
  if (pWorkflowModelId != null) {
    UserDAO userDAO=new UserDAO(locale,em);
    UserGroupDAO groupDAO=new UserGroupDAO(locale,em);
    RoleDAO roleDAO=new RoleDAO(locale,em);
    Map<Role,Collection<User>> roleUserMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : userRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> userLogins=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(Folder.parseWorkspaceId(pParentFolder),roleName));
      Set<User> users=new HashSet<>();
      roleUserMap.put(role,users);
      for (      String login : userLogins) {
        User u=userDAO.loadUser(new UserKey(Folder.parseWorkspaceId(pParentFolder),login));
        users.add(u);
      }
    }
    Map<Role,Collection<UserGroup>> roleGroupMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : groupRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> groupIds=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(Folder.parseWorkspaceId(pParentFolder),roleName));
      Set<UserGroup> groups=new HashSet<>();
      roleGroupMap.put(role,groups);
      for (      String groupId : groupIds) {
        UserGroup g=groupDAO.loadUserGroup(new UserGroupKey(Folder.parseWorkspaceId(pParentFolder),groupId));
        groups.add(g);
      }
    }
    WorkflowModel workflowModel=new WorkflowModelDAO(locale,em).loadWorkflowModel(new WorkflowModelKey(user.getWorkspaceId(),pWorkflowModelId));
    Workflow workflow=workflowModel.createWorkflow(roleUserMap,roleGroupMap);
    docR.setWorkflow(workflow);
    for (    Task task : workflow.getTasks()) {
      if (!task.hasPotentialWorker()) {
        throw new NotAllowedException(locale,""String_Node_Str"");
      }
    }
    Collection<Task> runningTasks=workflow.getRunningTasks();
    for (    Task runningTask : runningTasks) {
      runningTask.start();
    }
    em.flush();
    mailer.sendApproval(runningTasks,docR);
  }
  docR.setTitle(pTitle);
  docR.setDescription(pDescription);
  if ((pACLUserEntries != null && pACLUserEntries.length > 0) || (pACLUserGroupEntries != null && pACLUserGroupEntries.length > 0)) {
    ACL acl=new ACL();
    if (pACLUserEntries != null) {
      for (      ACLUserEntry entry : pACLUserEntries) {
        acl.addEntry(em.getReference(User.class,new UserKey(user.getWorkspaceId(),entry.getPrincipalLogin())),entry.getPermission());
      }
    }
    if (pACLUserGroupEntries != null) {
      for (      ACLUserGroupEntry entry : pACLUserGroupEntries) {
        acl.addEntry(em.getReference(UserGroup.class,new UserGroupKey(user.getWorkspaceId(),entry.getPrincipalId())),entry.getPermission());
      }
    }
    docR.setACL(acl);
  }
  Date now=new Date();
  docM.setCreationDate(now);
  docR.setCreationDate(now);
  docR.setLocation(folder);
  docR.setCheckOutUser(user);
  docR.setCheckOutDate(now);
  newDoc.setCreationDate(now);
  new DocumentRevisionDAO(locale,em).createDocR(docR);
  return docR;
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public DocumentRevision createDocumentMaster(String pParentFolder,String pDocMId,String pTitle,String pDescription,String pDocMTemplateId,String pWorkflowModelId,ACLUserEntry[] pACLUserEntries,ACLUserGroupEntry[] pACLUserGroupEntries,Map<String,Collection<String>> userRoleMapping,Map<String,Collection<String>> groupRoleMapping) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, NotAllowedException, FolderNotFoundException, DocumentMasterTemplateNotFoundException, FileAlreadyExistsException, CreationException, DocumentRevisionAlreadyExistsException, RoleNotFoundException, WorkflowModelNotFoundException, DocumentMasterAlreadyExistsException, UserGroupNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(Folder.parseWorkspaceId(pParentFolder));
  Locale locale=new Locale(user.getLanguage());
  checkNameValidity(pDocMId,locale);
  Folder folder=new FolderDAO(locale,em).loadFolder(pParentFolder);
  checkFolderWritingRight(user,folder);
  DocumentMaster docM;
  DocumentRevision docR;
  DocumentIteration newDoc;
  DocumentMasterDAO docMDAO=new DocumentMasterDAO(locale,em);
  if (pDocMTemplateId == null) {
    docM=new DocumentMaster(user.getWorkspace(),pDocMId,user);
    docM.setType(""String_Node_Str"");
    docMDAO.createDocM(docM);
    docR=docM.createNextRevision(user);
    newDoc=docR.createNextIteration(user);
  }
 else {
    DocumentMasterTemplate template=new DocumentMasterTemplateDAO(locale,em).loadDocMTemplate(new DocumentMasterTemplateKey(user.getWorkspaceId(),pDocMTemplateId));
    if (!Tools.validateMask(template.getMask(),pDocMId)) {
      throw new NotAllowedException(locale,""String_Node_Str"");
    }
    docM=new DocumentMaster(user.getWorkspace(),pDocMId,user);
    docM.setType(template.getDocumentType());
    docM.setAttributesLocked(template.isAttributesLocked());
    docMDAO.createDocM(docM);
    docR=docM.createNextRevision(user);
    newDoc=docR.createNextIteration(user);
    List<InstanceAttribute> attrs=new ArrayList<>();
    for (    InstanceAttributeTemplate attrTemplate : template.getAttributeTemplates()) {
      InstanceAttribute attr=attrTemplate.createInstanceAttribute();
      attrs.add(attr);
    }
    newDoc.setInstanceAttributes(attrs);
    BinaryResourceDAO binDAO=new BinaryResourceDAO(locale,em);
    for (    BinaryResource sourceFile : template.getAttachedFiles()) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      Date lastModified=sourceFile.getLastModified();
      String fullName=docM.getWorkspaceId() + ""String_Node_Str"" + docM.getId()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      newDoc.addFile(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
  }
  Collection<Task> runningTasks=null;
  if (pWorkflowModelId != null) {
    UserDAO userDAO=new UserDAO(locale,em);
    UserGroupDAO groupDAO=new UserGroupDAO(locale,em);
    RoleDAO roleDAO=new RoleDAO(locale,em);
    Map<Role,Collection<User>> roleUserMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : userRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> userLogins=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(Folder.parseWorkspaceId(pParentFolder),roleName));
      Set<User> users=new HashSet<>();
      roleUserMap.put(role,users);
      for (      String login : userLogins) {
        User u=userDAO.loadUser(new UserKey(Folder.parseWorkspaceId(pParentFolder),login));
        users.add(u);
      }
    }
    Map<Role,Collection<UserGroup>> roleGroupMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : groupRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> groupIds=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(Folder.parseWorkspaceId(pParentFolder),roleName));
      Set<UserGroup> groups=new HashSet<>();
      roleGroupMap.put(role,groups);
      for (      String groupId : groupIds) {
        UserGroup g=groupDAO.loadUserGroup(new UserGroupKey(Folder.parseWorkspaceId(pParentFolder),groupId));
        groups.add(g);
      }
    }
    WorkflowModel workflowModel=new WorkflowModelDAO(locale,em).loadWorkflowModel(new WorkflowModelKey(user.getWorkspaceId(),pWorkflowModelId));
    Workflow workflow=workflowModel.createWorkflow(roleUserMap,roleGroupMap);
    docR.setWorkflow(workflow);
    for (    Task task : workflow.getTasks()) {
      if (!task.hasPotentialWorker()) {
        throw new NotAllowedException(locale,""String_Node_Str"");
      }
    }
    runningTasks=workflow.getRunningTasks();
    for (    Task runningTask : runningTasks) {
      runningTask.start();
    }
  }
  docR.setTitle(pTitle);
  docR.setDescription(pDescription);
  if ((pACLUserEntries != null && pACLUserEntries.length > 0) || (pACLUserGroupEntries != null && pACLUserGroupEntries.length > 0)) {
    ACL acl=new ACL();
    if (pACLUserEntries != null) {
      for (      ACLUserEntry entry : pACLUserEntries) {
        acl.addEntry(em.getReference(User.class,new UserKey(user.getWorkspaceId(),entry.getPrincipalLogin())),entry.getPermission());
      }
    }
    if (pACLUserGroupEntries != null) {
      for (      ACLUserGroupEntry entry : pACLUserGroupEntries) {
        acl.addEntry(em.getReference(UserGroup.class,new UserGroupKey(user.getWorkspaceId(),entry.getPrincipalId())),entry.getPermission());
      }
    }
    docR.setACL(acl);
  }
  Date now=new Date();
  docM.setCreationDate(now);
  docR.setCreationDate(now);
  docR.setLocation(folder);
  docR.setCheckOutUser(user);
  docR.setCheckOutDate(now);
  newDoc.setCreationDate(now);
  new DocumentRevisionDAO(locale,em).createDocR(docR);
  if (runningTasks != null) {
    mailer.sendApproval(runningTasks,docR);
  }
  return docR;
}"
85919,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public PartRevision createPartRevision(PartRevisionKey revisionKey,String pDescription,String pWorkflowModelId,ACLUserEntry[] pACLUserEntries,ACLUserGroupEntry[] pACLUserGroupEntries,Map<String,Collection<String>> userRoleMapping,Map<String,Collection<String>> groupRoleMapping) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, PartRevisionNotFoundException, NotAllowedException, FileAlreadyExistsException, CreationException, RoleNotFoundException, WorkflowModelNotFoundException, PartRevisionAlreadyExistsException, UserGroupNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(revisionKey.getPartMaster().getWorkspace());
  Locale locale=new Locale(user.getLanguage());
  PartRevisionDAO partRevisionDAO=new PartRevisionDAO(locale,em);
  PartRevision originalPartR=partRevisionDAO.loadPartR(revisionKey);
  if (originalPartR.isCheckedOut()) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  if (originalPartR.getNumberOfIterations() == 0) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  PartRevision partR=originalPartR.getPartMaster().createNextRevision(user);
  PartIteration lastPartI=originalPartR.getLastIteration();
  PartIteration firstPartI=partR.createNextIteration(user);
  if (lastPartI != null) {
    BinaryResourceDAO binDAO=new BinaryResourceDAO(locale,em);
    for (    BinaryResource sourceFile : lastPartI.getAttachedFiles()) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      Date lastModified=sourceFile.getLastModified();
      String fullName=partR.getWorkspaceId() + ""String_Node_Str"" + partR.getPartNumber()+ ""String_Node_Str""+ partR.getVersion()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstPartI.addAttachedFile(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    List<PartUsageLink> newComponents=new LinkedList<>();
    List<PartUsageLink> oldComponents=lastPartI.getComponents();
    for (    PartUsageLink usage : lastPartI.getComponents()) {
      PartUsageLink newUsage=usage.clone();
      em.persist(newUsage);
      newComponents.add(newUsage);
    }
    firstPartI.setComponents(newComponents);
    em.flush();
    PathToPathLinkDAO pathToPathLinkDAO=new PathToPathLinkDAO(locale,em);
    pathToPathLinkDAO.cloneAndUpgradePathToPathLinks(oldComponents,newComponents);
    for (    Geometry sourceFile : lastPartI.getGeometries()) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      int quality=sourceFile.getQuality();
      Date lastModified=sourceFile.getLastModified();
      String fullName=partR.getWorkspaceId() + ""String_Node_Str"" + partR.getPartNumber()+ ""String_Node_Str""+ partR.getVersion()+ ""String_Node_Str""+ fileName;
      Geometry targetFile=new Geometry(quality,fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstPartI.addGeometry(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    BinaryResource nativeCADFile=lastPartI.getNativeCADFile();
    if (nativeCADFile != null) {
      String fileName=nativeCADFile.getName();
      long length=nativeCADFile.getContentLength();
      Date lastModified=nativeCADFile.getLastModified();
      String fullName=partR.getWorkspaceId() + ""String_Node_Str"" + partR.getPartNumber()+ ""String_Node_Str""+ partR.getVersion()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstPartI.setNativeCADFile(targetFile);
      try {
        dataManager.copyData(nativeCADFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    Set<DocumentLink> links=new HashSet<>();
    for (    DocumentLink link : lastPartI.getLinkedDocuments()) {
      DocumentLink newLink=link.clone();
      links.add(newLink);
    }
    firstPartI.setLinkedDocuments(links);
    List<InstanceAttribute> attrs=new ArrayList<>();
    for (    InstanceAttribute attr : lastPartI.getInstanceAttributes()) {
      InstanceAttribute clonedAttribute=attr.clone();
      attrs.add(clonedAttribute);
    }
    firstPartI.setInstanceAttributes(attrs);
  }
  if (pWorkflowModelId != null) {
    UserDAO userDAO=new UserDAO(locale,em);
    UserGroupDAO groupDAO=new UserGroupDAO(locale,em);
    RoleDAO roleDAO=new RoleDAO(locale,em);
    Map<Role,Collection<User>> roleUserMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : userRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> userLogins=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(originalPartR.getWorkspaceId(),roleName));
      Set<User> users=new HashSet<>();
      roleUserMap.put(role,users);
      for (      String login : userLogins) {
        User u=userDAO.loadUser(new UserKey(originalPartR.getWorkspaceId(),login));
        users.add(u);
      }
    }
    Map<Role,Collection<UserGroup>> roleGroupMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : groupRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> groupIds=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(originalPartR.getWorkspaceId(),roleName));
      Set<UserGroup> groups=new HashSet<>();
      roleGroupMap.put(role,groups);
      for (      String groupId : groupIds) {
        UserGroup g=groupDAO.loadUserGroup(new UserGroupKey(originalPartR.getWorkspaceId(),groupId));
        groups.add(g);
      }
    }
    WorkflowModel workflowModel=new WorkflowModelDAO(locale,em).loadWorkflowModel(new WorkflowModelKey(user.getWorkspaceId(),pWorkflowModelId));
    Workflow workflow=workflowModel.createWorkflow(roleUserMap,roleGroupMap);
    partR.setWorkflow(workflow);
    for (    Task task : workflow.getTasks()) {
      if (!task.hasPotentialWorker()) {
        throw new NotAllowedException(locale,""String_Node_Str"");
      }
    }
    Collection<Task> runningTasks=workflow.getRunningTasks();
    for (    Task runningTask : runningTasks) {
      runningTask.start();
    }
    em.flush();
    mailer.sendApproval(runningTasks,partR);
  }
  partR.setDescription(pDescription);
  if ((pACLUserEntries != null && pACLUserEntries.length > 0) || (pACLUserGroupEntries != null && pACLUserGroupEntries.length > 0)) {
    ACL acl=new ACL();
    if (pACLUserEntries != null) {
      for (      ACLUserEntry entry : pACLUserEntries) {
        acl.addEntry(em.getReference(User.class,new UserKey(user.getWorkspaceId(),entry.getPrincipalLogin())),entry.getPermission());
      }
    }
    if (pACLUserGroupEntries != null) {
      for (      ACLUserGroupEntry entry : pACLUserGroupEntries) {
        acl.addEntry(em.getReference(UserGroup.class,new UserGroupKey(user.getWorkspaceId(),entry.getPrincipalId())),entry.getPermission());
      }
    }
    partR.setACL(acl);
  }
  Date now=new Date();
  partR.setCreationDate(now);
  partR.setCheckOutUser(user);
  partR.setCheckOutDate(now);
  firstPartI.setCreationDate(now);
  firstPartI.setModificationDate(now);
  partRevisionDAO.createPartR(partR);
  return partR;
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public PartRevision createPartRevision(PartRevisionKey revisionKey,String pDescription,String pWorkflowModelId,ACLUserEntry[] pACLUserEntries,ACLUserGroupEntry[] pACLUserGroupEntries,Map<String,Collection<String>> userRoleMapping,Map<String,Collection<String>> groupRoleMapping) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, PartRevisionNotFoundException, NotAllowedException, FileAlreadyExistsException, CreationException, RoleNotFoundException, WorkflowModelNotFoundException, PartRevisionAlreadyExistsException, UserGroupNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(revisionKey.getPartMaster().getWorkspace());
  Locale locale=new Locale(user.getLanguage());
  PartRevisionDAO partRevisionDAO=new PartRevisionDAO(locale,em);
  PartRevision originalPartR=partRevisionDAO.loadPartR(revisionKey);
  if (originalPartR.isCheckedOut()) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  if (originalPartR.getNumberOfIterations() == 0) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  PartRevision partR=originalPartR.getPartMaster().createNextRevision(user);
  PartIteration lastPartI=originalPartR.getLastIteration();
  PartIteration firstPartI=partR.createNextIteration(user);
  if (lastPartI != null) {
    BinaryResourceDAO binDAO=new BinaryResourceDAO(locale,em);
    for (    BinaryResource sourceFile : lastPartI.getAttachedFiles()) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      Date lastModified=sourceFile.getLastModified();
      String fullName=partR.getWorkspaceId() + ""String_Node_Str"" + partR.getPartNumber()+ ""String_Node_Str""+ partR.getVersion()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstPartI.addAttachedFile(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    List<PartUsageLink> newComponents=new LinkedList<>();
    List<PartUsageLink> oldComponents=lastPartI.getComponents();
    for (    PartUsageLink usage : lastPartI.getComponents()) {
      PartUsageLink newUsage=usage.clone();
      em.persist(newUsage);
      newComponents.add(newUsage);
    }
    firstPartI.setComponents(newComponents);
    em.flush();
    PathToPathLinkDAO pathToPathLinkDAO=new PathToPathLinkDAO(locale,em);
    pathToPathLinkDAO.cloneAndUpgradePathToPathLinks(oldComponents,newComponents);
    for (    Geometry sourceFile : lastPartI.getGeometries()) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      int quality=sourceFile.getQuality();
      Date lastModified=sourceFile.getLastModified();
      String fullName=partR.getWorkspaceId() + ""String_Node_Str"" + partR.getPartNumber()+ ""String_Node_Str""+ partR.getVersion()+ ""String_Node_Str""+ fileName;
      Geometry targetFile=new Geometry(quality,fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstPartI.addGeometry(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    BinaryResource nativeCADFile=lastPartI.getNativeCADFile();
    if (nativeCADFile != null) {
      String fileName=nativeCADFile.getName();
      long length=nativeCADFile.getContentLength();
      Date lastModified=nativeCADFile.getLastModified();
      String fullName=partR.getWorkspaceId() + ""String_Node_Str"" + partR.getPartNumber()+ ""String_Node_Str""+ partR.getVersion()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstPartI.setNativeCADFile(targetFile);
      try {
        dataManager.copyData(nativeCADFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    Set<DocumentLink> links=new HashSet<>();
    for (    DocumentLink link : lastPartI.getLinkedDocuments()) {
      DocumentLink newLink=link.clone();
      links.add(newLink);
    }
    firstPartI.setLinkedDocuments(links);
    List<InstanceAttribute> attrs=new ArrayList<>();
    for (    InstanceAttribute attr : lastPartI.getInstanceAttributes()) {
      InstanceAttribute clonedAttribute=attr.clone();
      attrs.add(clonedAttribute);
    }
    firstPartI.setInstanceAttributes(attrs);
  }
  Collection<Task> runningTasks=null;
  if (pWorkflowModelId != null) {
    UserDAO userDAO=new UserDAO(locale,em);
    UserGroupDAO groupDAO=new UserGroupDAO(locale,em);
    RoleDAO roleDAO=new RoleDAO(locale,em);
    Map<Role,Collection<User>> roleUserMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : userRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> userLogins=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(originalPartR.getWorkspaceId(),roleName));
      Set<User> users=new HashSet<>();
      roleUserMap.put(role,users);
      for (      String login : userLogins) {
        User u=userDAO.loadUser(new UserKey(originalPartR.getWorkspaceId(),login));
        users.add(u);
      }
    }
    Map<Role,Collection<UserGroup>> roleGroupMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : groupRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> groupIds=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(originalPartR.getWorkspaceId(),roleName));
      Set<UserGroup> groups=new HashSet<>();
      roleGroupMap.put(role,groups);
      for (      String groupId : groupIds) {
        UserGroup g=groupDAO.loadUserGroup(new UserGroupKey(originalPartR.getWorkspaceId(),groupId));
        groups.add(g);
      }
    }
    WorkflowModel workflowModel=new WorkflowModelDAO(locale,em).loadWorkflowModel(new WorkflowModelKey(user.getWorkspaceId(),pWorkflowModelId));
    Workflow workflow=workflowModel.createWorkflow(roleUserMap,roleGroupMap);
    partR.setWorkflow(workflow);
    for (    Task task : workflow.getTasks()) {
      if (!task.hasPotentialWorker()) {
        throw new NotAllowedException(locale,""String_Node_Str"");
      }
    }
    runningTasks=workflow.getRunningTasks();
    for (    Task runningTask : runningTasks) {
      runningTask.start();
    }
    mailer.sendApproval(runningTasks,partR);
  }
  partR.setDescription(pDescription);
  if ((pACLUserEntries != null && pACLUserEntries.length > 0) || (pACLUserGroupEntries != null && pACLUserGroupEntries.length > 0)) {
    ACL acl=new ACL();
    if (pACLUserEntries != null) {
      for (      ACLUserEntry entry : pACLUserEntries) {
        acl.addEntry(em.getReference(User.class,new UserKey(user.getWorkspaceId(),entry.getPrincipalLogin())),entry.getPermission());
      }
    }
    if (pACLUserGroupEntries != null) {
      for (      ACLUserGroupEntry entry : pACLUserGroupEntries) {
        acl.addEntry(em.getReference(UserGroup.class,new UserGroupKey(user.getWorkspaceId(),entry.getPrincipalId())),entry.getPermission());
      }
    }
    partR.setACL(acl);
  }
  Date now=new Date();
  partR.setCreationDate(now);
  partR.setCheckOutUser(user);
  partR.setCheckOutDate(now);
  firstPartI.setCreationDate(now);
  firstPartI.setModificationDate(now);
  partRevisionDAO.createPartR(partR);
  if (runningTasks != null) {
    mailer.sendApproval(runningTasks,partR);
  }
  return partR;
}"
85920,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public PartMaster createPartMaster(String pWorkspaceId,String pNumber,String pName,boolean pStandardPart,String pWorkflowModelId,String pPartRevisionDescription,String templateId,ACLUserEntry[] pACLUserEntries,ACLUserGroupEntry[] pACLUserGroupEntries,Map<String,Collection<String>> userRoleMapping,Map<String,Collection<String>> groupRoleMapping) throws NotAllowedException, UserNotFoundException, WorkspaceNotFoundException, AccessRightException, WorkflowModelNotFoundException, PartMasterAlreadyExistsException, CreationException, PartMasterTemplateNotFoundException, FileAlreadyExistsException, RoleNotFoundException, UserGroupNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pWorkspaceId);
  Locale locale=new Locale(user.getLanguage());
  checkNameValidity(pNumber,locale);
  PartMaster pm=new PartMaster(user.getWorkspace(),pNumber,user);
  pm.setName(pName);
  pm.setStandardPart(pStandardPart);
  Date now=new Date();
  pm.setCreationDate(now);
  PartRevision newRevision=pm.createNextRevision(user);
  if (pWorkflowModelId != null) {
    UserDAO userDAO=new UserDAO(locale,em);
    UserGroupDAO groupDAO=new UserGroupDAO(locale,em);
    RoleDAO roleDAO=new RoleDAO(locale,em);
    Map<Role,Collection<User>> roleUserMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : userRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> userLogins=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(pWorkspaceId,roleName));
      Set<User> users=new HashSet<>();
      roleUserMap.put(role,users);
      for (      String login : userLogins) {
        User u=userDAO.loadUser(new UserKey(pWorkspaceId,login));
        users.add(u);
      }
    }
    Map<Role,Collection<UserGroup>> roleGroupMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : groupRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> groupIds=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(pWorkspaceId,roleName));
      Set<UserGroup> groups=new HashSet<>();
      roleGroupMap.put(role,groups);
      for (      String groupId : groupIds) {
        UserGroup g=groupDAO.loadUserGroup(new UserGroupKey(pWorkspaceId,groupId));
        groups.add(g);
      }
    }
    WorkflowModel workflowModel=new WorkflowModelDAO(locale,em).loadWorkflowModel(new WorkflowModelKey(user.getWorkspaceId(),pWorkflowModelId));
    Workflow workflow=workflowModel.createWorkflow(roleUserMap,roleGroupMap);
    newRevision.setWorkflow(workflow);
    for (    Task task : workflow.getTasks()) {
      if (!task.hasPotentialWorker()) {
        throw new NotAllowedException(locale,""String_Node_Str"");
      }
    }
    Collection<Task> runningTasks=workflow.getRunningTasks();
    for (    Task runningTask : runningTasks) {
      runningTask.start();
    }
    em.flush();
    mailer.sendApproval(runningTasks,newRevision);
  }
  newRevision.setCheckOutUser(user);
  newRevision.setCheckOutDate(now);
  newRevision.setCreationDate(now);
  newRevision.setDescription(pPartRevisionDescription);
  PartIteration ite=newRevision.createNextIteration(user);
  ite.setCreationDate(now);
  if (templateId != null) {
    PartMasterTemplate partMasterTemplate=new PartMasterTemplateDAO(locale,em).loadPartMTemplate(new PartMasterTemplateKey(pWorkspaceId,templateId));
    if (!Tools.validateMask(partMasterTemplate.getMask(),pNumber)) {
      throw new NotAllowedException(locale,""String_Node_Str"");
    }
    pm.setType(partMasterTemplate.getPartType());
    pm.setAttributesLocked(partMasterTemplate.isAttributesLocked());
    List<InstanceAttribute> attrs=new ArrayList<>();
    for (    InstanceAttributeTemplate attrTemplate : partMasterTemplate.getAttributeTemplates()) {
      InstanceAttribute attr=attrTemplate.createInstanceAttribute();
      attrs.add(attr);
    }
    ite.setInstanceAttributes(attrs);
    BinaryResourceDAO binDAO=new BinaryResourceDAO(locale,em);
    BinaryResource sourceFile=partMasterTemplate.getAttachedFile();
    if (sourceFile != null) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      Date lastModified=sourceFile.getLastModified();
      String fullName=pWorkspaceId + ""String_Node_Str"" + pm.getNumber()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      ite.setNativeCADFile(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
  }
  if ((pACLUserEntries != null && pACLUserEntries.length > 0) || (pACLUserGroupEntries != null && pACLUserGroupEntries.length > 0)) {
    ACL acl=new ACL();
    if (pACLUserEntries != null) {
      for (      ACLUserEntry entry : pACLUserEntries) {
        acl.addEntry(em.getReference(User.class,new UserKey(user.getWorkspaceId(),entry.getPrincipalLogin())),entry.getPermission());
      }
    }
    if (pACLUserGroupEntries != null) {
      for (      ACLUserGroupEntry entry : pACLUserGroupEntries) {
        acl.addEntry(em.getReference(UserGroup.class,new UserGroupKey(user.getWorkspaceId(),entry.getPrincipalId())),entry.getPermission());
      }
    }
    newRevision.setACL(acl);
    new ACLDAO(em).createACL(acl);
  }
  new PartMasterDAO(locale,em).createPartM(pm);
  return pm;
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public PartMaster createPartMaster(String pWorkspaceId,String pNumber,String pName,boolean pStandardPart,String pWorkflowModelId,String pPartRevisionDescription,String templateId,ACLUserEntry[] pACLUserEntries,ACLUserGroupEntry[] pACLUserGroupEntries,Map<String,Collection<String>> userRoleMapping,Map<String,Collection<String>> groupRoleMapping) throws NotAllowedException, UserNotFoundException, WorkspaceNotFoundException, AccessRightException, WorkflowModelNotFoundException, PartMasterAlreadyExistsException, CreationException, PartMasterTemplateNotFoundException, FileAlreadyExistsException, RoleNotFoundException, UserGroupNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pWorkspaceId);
  Locale locale=new Locale(user.getLanguage());
  checkNameValidity(pNumber,locale);
  PartMaster pm=new PartMaster(user.getWorkspace(),pNumber,user);
  pm.setName(pName);
  pm.setStandardPart(pStandardPart);
  Date now=new Date();
  pm.setCreationDate(now);
  PartRevision newRevision=pm.createNextRevision(user);
  Collection<Task> runningTasks=null;
  if (pWorkflowModelId != null) {
    UserDAO userDAO=new UserDAO(locale,em);
    UserGroupDAO groupDAO=new UserGroupDAO(locale,em);
    RoleDAO roleDAO=new RoleDAO(locale,em);
    Map<Role,Collection<User>> roleUserMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : userRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> userLogins=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(pWorkspaceId,roleName));
      Set<User> users=new HashSet<>();
      roleUserMap.put(role,users);
      for (      String login : userLogins) {
        User u=userDAO.loadUser(new UserKey(pWorkspaceId,login));
        users.add(u);
      }
    }
    Map<Role,Collection<UserGroup>> roleGroupMap=new HashMap<>();
    for (    Map.Entry<String,Collection<String>> pair : groupRoleMapping.entrySet()) {
      String roleName=pair.getKey();
      Collection<String> groupIds=pair.getValue();
      Role role=roleDAO.loadRole(new RoleKey(pWorkspaceId,roleName));
      Set<UserGroup> groups=new HashSet<>();
      roleGroupMap.put(role,groups);
      for (      String groupId : groupIds) {
        UserGroup g=groupDAO.loadUserGroup(new UserGroupKey(pWorkspaceId,groupId));
        groups.add(g);
      }
    }
    WorkflowModel workflowModel=new WorkflowModelDAO(locale,em).loadWorkflowModel(new WorkflowModelKey(user.getWorkspaceId(),pWorkflowModelId));
    Workflow workflow=workflowModel.createWorkflow(roleUserMap,roleGroupMap);
    newRevision.setWorkflow(workflow);
    for (    Task task : workflow.getTasks()) {
      if (!task.hasPotentialWorker()) {
        throw new NotAllowedException(locale,""String_Node_Str"");
      }
    }
    runningTasks=workflow.getRunningTasks();
    for (    Task runningTask : runningTasks) {
      runningTask.start();
    }
  }
  newRevision.setCheckOutUser(user);
  newRevision.setCheckOutDate(now);
  newRevision.setCreationDate(now);
  newRevision.setDescription(pPartRevisionDescription);
  PartIteration ite=newRevision.createNextIteration(user);
  ite.setCreationDate(now);
  if (templateId != null) {
    PartMasterTemplate partMasterTemplate=new PartMasterTemplateDAO(locale,em).loadPartMTemplate(new PartMasterTemplateKey(pWorkspaceId,templateId));
    if (!Tools.validateMask(partMasterTemplate.getMask(),pNumber)) {
      throw new NotAllowedException(locale,""String_Node_Str"");
    }
    pm.setType(partMasterTemplate.getPartType());
    pm.setAttributesLocked(partMasterTemplate.isAttributesLocked());
    List<InstanceAttribute> attrs=new ArrayList<>();
    for (    InstanceAttributeTemplate attrTemplate : partMasterTemplate.getAttributeTemplates()) {
      InstanceAttribute attr=attrTemplate.createInstanceAttribute();
      attrs.add(attr);
    }
    ite.setInstanceAttributes(attrs);
    BinaryResourceDAO binDAO=new BinaryResourceDAO(locale,em);
    BinaryResource sourceFile=partMasterTemplate.getAttachedFile();
    if (sourceFile != null) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      Date lastModified=sourceFile.getLastModified();
      String fullName=pWorkspaceId + ""String_Node_Str"" + pm.getNumber()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      ite.setNativeCADFile(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
  }
  if ((pACLUserEntries != null && pACLUserEntries.length > 0) || (pACLUserGroupEntries != null && pACLUserGroupEntries.length > 0)) {
    ACL acl=new ACL();
    if (pACLUserEntries != null) {
      for (      ACLUserEntry entry : pACLUserEntries) {
        acl.addEntry(em.getReference(User.class,new UserKey(user.getWorkspaceId(),entry.getPrincipalLogin())),entry.getPermission());
      }
    }
    if (pACLUserGroupEntries != null) {
      for (      ACLUserGroupEntry entry : pACLUserGroupEntries) {
        acl.addEntry(em.getReference(UserGroup.class,new UserGroupKey(user.getWorkspaceId(),entry.getPrincipalId())),entry.getPermission());
      }
    }
    newRevision.setACL(acl);
    new ACLDAO(em).createACL(acl);
  }
  new PartMasterDAO(locale,em).createPartM(pm);
  if (runningTasks != null) {
    mailer.sendApproval(runningTasks,newRevision);
  }
  return pm;
}"
85921,"/** 
 * test the add of new tags to a part that doesn't have any tag
 * @throws UserNotFoundException
 * @throws WorkspaceNotFoundException
 * @throws UserNotActiveException
 * @throws PartRevisionNotFoundException
 * @throws AccessRightException
 */
@Test public void addTagToPartWithNoTags() throws UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, PartRevisionNotFoundException, AccessRightException {
  PartRevisionKey partRevisionKey=partRevision.getKey();
  String[] tags=new String[3];
  tags[0]=""String_Node_Str"";
  tags[1]=""String_Node_Str"";
  tags[2]=""String_Node_Str"";
  Mockito.when(userManager.checkWorkspaceReadAccess(ProductUtil.WORKSPACE_ID)).thenReturn(user);
  Mockito.when(userManager.checkWorkspaceWriteAccess(ProductUtil.WORKSPACE_ID)).thenReturn(user);
  Mockito.when(em.find(PartRevision.class,partRevisionKey)).thenReturn(partRevision);
  Mockito.when(em.createQuery(""String_Node_Str"",Tag.class)).thenReturn(tagsQuery);
  Mockito.when(tagsQuery.setParameter(""String_Node_Str"",ProductUtil.WORKSPACE_ID)).thenReturn(tagsQuery);
  Mockito.when(tagsQuery.getResultList()).thenReturn(new ArrayList<Tag>());
  PartRevision partRevisionResult=productManagerBean.saveTags(partRevisionKey,(String[])tags);
  Assert.assertEquals(partRevisionResult.getTags().size(),3);
  int i=0;
  for (Iterator<Tag> it=partRevisionResult.getTags().iterator(); it.hasNext(); ) {
    Tag tag=it.next();
    Assert.assertEquals(tag.getLabel(),tags[i++]);
  }
  Mockito.verify(esIndexer,Mockito.times(1)).index(Mockito.any(PartIteration.class));
}","/** 
 * test the add of new tags to a part that doesn't have any tag
 * @throws UserNotFoundException
 * @throws WorkspaceNotFoundException
 * @throws UserNotActiveException
 * @throws PartRevisionNotFoundException
 * @throws AccessRightException
 */
@Test public void addTagToPartWithNoTags() throws UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, PartRevisionNotFoundException, AccessRightException {
  PartRevisionKey partRevisionKey=partRevision.getKey();
  String[] tags=new String[3];
  tags[0]=""String_Node_Str"";
  tags[1]=""String_Node_Str"";
  tags[2]=""String_Node_Str"";
  Mockito.when(userManager.checkWorkspaceReadAccess(ProductUtil.WORKSPACE_ID)).thenReturn(user);
  Mockito.when(userManager.checkWorkspaceWriteAccess(ProductUtil.WORKSPACE_ID)).thenReturn(user);
  Mockito.when(em.find(PartRevision.class,partRevisionKey)).thenReturn(partRevision);
  Mockito.when(em.createQuery(""String_Node_Str"",Tag.class)).thenReturn(tagsQuery);
  Mockito.when(tagsQuery.setParameter(""String_Node_Str"",ProductUtil.WORKSPACE_ID)).thenReturn(tagsQuery);
  Mockito.when(tagsQuery.getResultList()).thenReturn(new ArrayList<>());
  PartRevision partRevisionResult=productManagerBean.saveTags(partRevisionKey,tags);
  Assert.assertEquals(partRevisionResult.getTags().size(),3);
  int i=0;
  for (Iterator<Tag> it=partRevisionResult.getTags().iterator(); it.hasNext(); ) {
    Tag tag=it.next();
    Assert.assertEquals(tag.getLabel(),tags[i++]);
  }
  Mockito.verify(esIndexer,Mockito.times(1)).index(Mockito.any(PartIteration.class));
}"
85922,"@Before public void setup() throws Exception {
  initMocks(this);
  account=new Account(ProductUtil.USER_2_LOGIN,ProductUtil.USER_2_NAME,ProductUtil.USER_1_MAIL,ProductUtil.USER_1_LANGUAGE,new Date(),null);
  workspace=new Workspace(ProductUtil.WORKSPACE_ID,account,""String_Node_Str"",false);
  user=new User(workspace,new Account(ProductUtil.USER_1_LOGIN,ProductUtil.USER_1_LOGIN,ProductUtil.USER_1_MAIL,ProductUtil.USER_1_LANGUAGE,new Date(),null));
  user2=new User(workspace,new Account(ProductUtil.USER_2_LOGIN,ProductUtil.USER_2_LOGIN,ProductUtil.USER_2_MAIL,ProductUtil.USER_2_LANGUAGE,new Date(),null));
  partMaster=new PartMaster(workspace,ProductUtil.PART_ID,user);
  partMasterTemplate=new PartMasterTemplate(workspace,ProductUtil.PART_MASTER_TEMPLATE_ID,user,ProductUtil.PART_TYPE,""String_Node_Str"",true);
  partRevision=new PartRevision(partMaster,ProductUtil.VERSION,user);
  partIteration=new PartIteration(partRevision,ProductUtil.ITERATION,user);
  ArrayList<PartIteration> iterations=new ArrayList<PartIteration>();
  iterations.add(partIteration);
  partRevision.setPartIterations(iterations);
  partRevision.setCheckOutUser(user);
  partRevision.setCheckOutDate(new Date());
  partIteration.setPartRevision(partRevision);
}","@Before public void setup() throws Exception {
  initMocks(this);
  Mockito.when(tagEvent.select(any())).thenReturn(tagEvent);
  account=new Account(ProductUtil.USER_2_LOGIN,ProductUtil.USER_2_NAME,ProductUtil.USER_1_MAIL,ProductUtil.USER_1_LANGUAGE,new Date(),null);
  workspace=new Workspace(ProductUtil.WORKSPACE_ID,account,""String_Node_Str"",false);
  user=new User(workspace,new Account(ProductUtil.USER_1_LOGIN,ProductUtil.USER_1_LOGIN,ProductUtil.USER_1_MAIL,ProductUtil.USER_1_LANGUAGE,new Date(),null));
  user2=new User(workspace,new Account(ProductUtil.USER_2_LOGIN,ProductUtil.USER_2_LOGIN,ProductUtil.USER_2_MAIL,ProductUtil.USER_2_LANGUAGE,new Date(),null));
  partMaster=new PartMaster(workspace,ProductUtil.PART_ID,user);
  partMasterTemplate=new PartMasterTemplate(workspace,ProductUtil.PART_MASTER_TEMPLATE_ID,user,ProductUtil.PART_TYPE,""String_Node_Str"",true);
  partRevision=new PartRevision(partMaster,ProductUtil.VERSION,user);
  partIteration=new PartIteration(partRevision,ProductUtil.ITERATION,user);
  ArrayList<PartIteration> iterations=new ArrayList<PartIteration>();
  iterations.add(partIteration);
  partRevision.setPartIterations(iterations);
  partRevision.setCheckOutUser(user);
  partRevision.setCheckOutDate(new Date());
  partIteration.setPartRevision(partRevision);
}"
85923,"public PathDataIteration(int iteration,PathDataMaster pathDataMaster,Date date){
  this.iteration=iteration;
  this.pathDataMaster=pathDataMaster;
  this.dateIteration=date;
}","public PathDataIteration(int iteration,PathDataMaster pathDataMaster,Date date){
  setIteration(iteration);
  setPathDataMaster(pathDataMaster);
  setDateIteration(date);
}"
85924,"@Override public String getLocalizedMessage(){
  String message=getBundleDefaultMessage();
  return MessageFormat.format(message,mPathDataMasterId);
}","@Override public String getLocalizedMessage(){
  String message=getBundleDefaultMessage();
  if (mPathDataMasterPath != null)   return MessageFormat.format(message,mPathDataMasterPath);
 else   return MessageFormat.format(message,mPathDataMasterId);
}"
85925,"public PathDataMasterNotFoundException(Locale pLocale,Integer pPathDataMasterId,Throwable pCause){
  super(pLocale,pCause);
  mPathDataMasterId=pPathDataMasterId;
}","public PathDataMasterNotFoundException(Locale pLocale,Integer pPathDataMasterId,Throwable pCause){
  super(pLocale,pCause);
  mPathDataMasterId=pPathDataMasterId;
  mPathDataMasterPath=null;
}"
85926,"public PathDataMaster addNewPathDataIteration(String workspaceId,String configurationItemId,String serialNumber,int pathDataId,String path,List<InstanceAttribute> attributes,String description,DocumentRevisionKey[] links,String[] documentLinkComments) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, ProductInstanceMasterNotFoundException, UserNotActiveException, NotAllowedException, PathDataAlreadyExistsException, FileAlreadyExistsException, CreationException ;","public PathDataMaster addNewPathDataIteration(String workspaceId,String configurationItemId,String serialNumber,int pathDataId,List<InstanceAttribute> attributes,String note,DocumentRevisionKey[] links,String[] documentLinkComments) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, ProductInstanceMasterNotFoundException, UserNotActiveException, NotAllowedException, PathDataAlreadyExistsException, FileAlreadyExistsException, CreationException, PathDataMasterNotFoundException ;"
85927,"BinaryResource saveFileInPathDataIteration(String workspaceId,String configurationItemId,String serialNumber,int pathDataId,int iteration,String fileName,int i) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, NotAllowedException, AccessRightException, ProductInstanceMasterNotFoundException, FileAlreadyExistsException, CreationException ;","BinaryResource saveFileInPathDataIteration(String workspaceId,String configurationItemId,String serialNumber,int pathDataId,int iteration,String fileName,int i) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, NotAllowedException, AccessRightException, ProductInstanceMasterNotFoundException, FileAlreadyExistsException, CreationException, PathDataMasterNotFoundException ;"
85928,"public PathDataMaster findByPathAndProductInstanceIteration(String pathAsString,ProductInstanceIteration productInstanceIteration){
  try {
    return em.createNamedQuery(""String_Node_Str"",PathDataMaster.class).setParameter(""String_Node_Str"",pathAsString).setParameter(""String_Node_Str"",productInstanceIteration).getSingleResult();
  }
 catch (  NoResultException e) {
    return null;
  }
}","public PathDataMaster findByPathAndProductInstanceIteration(String pathAsString,ProductInstanceIteration productInstanceIteration) throws PathDataMasterNotFoundException {
  try {
    return em.createNamedQuery(""String_Node_Str"",PathDataMaster.class).setParameter(""String_Node_Str"",pathAsString).setParameter(""String_Node_Str"",productInstanceIteration).getSingleResult();
  }
 catch (  NoResultException e) {
    throw new PathDataMasterNotFoundException(mLocale,pathAsString);
  }
}"
85929,"public PathDataMaster findByPathIdAndProductInstanceIteration(int pathId,ProductInstanceIteration productInstanceIteration){
  try {
    return em.createNamedQuery(""String_Node_Str"",PathDataMaster.class).setParameter(""String_Node_Str"",pathId).setParameter(""String_Node_Str"",productInstanceIteration).getSingleResult();
  }
 catch (  NoResultException e) {
    return null;
  }
}","public PathDataMaster findByPathIdAndProductInstanceIteration(int pathId,ProductInstanceIteration productInstanceIteration) throws PathDataMasterNotFoundException {
  try {
    return em.createNamedQuery(""String_Node_Str"",PathDataMaster.class).setParameter(""String_Node_Str"",pathId).setParameter(""String_Node_Str"",productInstanceIteration).getSingleResult();
  }
 catch (  NoResultException e) {
    throw new PathDataMasterNotFoundException(mLocale,pathId);
  }
}"
85930,"@RolesAllowed({UserGroupMapping.REGULAR_USER_ROLE_ID}) @Override public PathDataMaster addNewPathDataIteration(String workspaceId,String configurationItemId,String serialNumber,int pathDataId,String path,List<InstanceAttribute> attributes,String note,DocumentRevisionKey[] links,String[] documentLinkComments) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, ProductInstanceMasterNotFoundException, UserNotActiveException, NotAllowedException, PathDataAlreadyExistsException, FileAlreadyExistsException, CreationException {
  User user=userManager.checkWorkspaceReadAccess(workspaceId);
  Locale locale=new Locale(user.getLanguage());
  ProductInstanceMasterDAO productInstanceMasterDAO=new ProductInstanceMasterDAO(locale,em);
  ProductInstanceMaster prodInstM=productInstanceMasterDAO.loadProductInstanceMaster(new ProductInstanceMasterKey(serialNumber,workspaceId,configurationItemId));
  checkProductInstanceWriteAccess(workspaceId,prodInstM,user);
  PathDataMasterDAO pathDataMasterDAO=new PathDataMasterDAO(locale,em);
  ProductInstanceIteration prodInstI=prodInstM.getLastIteration();
  for (  PathDataMaster pathDataMaster : prodInstI.getPathDataMasterList()) {
    if (pathDataMaster.getPath() != null && pathDataMaster.getPath().equals(path)) {
      pathDataMaster=pathDataMasterDAO.findByPathIdAndProductInstanceIteration(pathDataId,prodInstI);
      BinaryResourceDAO binDAO=new BinaryResourceDAO(locale,em);
      Set<BinaryResource> sourceFiles=pathDataMaster.getLastIteration().getAttachedFiles();
      Set<BinaryResource> targetFiles=new HashSet<>();
      if (pathDataMaster.getLastIteration() != null) {
        int iteration=pathDataMaster.getLastIteration().getIteration() + 1;
        if (!sourceFiles.isEmpty()) {
          for (          BinaryResource sourceFile : sourceFiles) {
            String fileName=sourceFile.getName();
            long length=sourceFile.getContentLength();
            Date lastModified=sourceFile.getLastModified();
            String fullName=workspaceId + ""String_Node_Str"" + serialNumber+ ""String_Node_Str""+ pathDataId+ ""String_Node_Str""+ iteration+ '/'+ fileName;
            BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
            binDAO.createBinaryResource(targetFile);
            targetFiles.add(targetFile);
            try {
              dataManager.copyData(sourceFile,targetFile);
            }
 catch (            StorageException e) {
              LOGGER.log(Level.INFO,null,e);
            }
          }
        }
      }
      PathDataIteration pathDataIteration=pathDataMaster.createNextIteration();
      pathDataIteration.setInstanceAttributes(attributes);
      pathDataIteration.setIterationNote(note);
      pathDataIteration=createDocumentLink(locale,pathDataIteration,links,documentLinkComments);
      pathDataIteration.setAttachedFiles(targetFiles);
      PathDataIterationDAO pathDataIterationDAO=new PathDataIterationDAO(em);
      pathDataIterationDAO.createPathDataIteration(pathDataIteration);
      return pathDataMaster;
    }
  }
  PathDataMaster pathDataMaster=new PathDataMaster();
  pathDataMaster.setPath(path);
  PathDataIteration pathDataIteration=pathDataMaster.createNextIteration();
  pathDataIteration.setInstanceAttributes(attributes);
  pathDataIteration.setIterationNote(note);
  pathDataMasterDAO.createPathData(pathDataMaster);
  PathDataIterationDAO pathDataIterationDAO=new PathDataIterationDAO(em);
  pathDataIteration=this.createDocumentLink(locale,pathDataIteration,links,documentLinkComments);
  pathDataIterationDAO.createPathDataIteration(pathDataIteration);
  prodInstI.getPathDataMasterList().add(pathDataMaster);
  return pathDataMaster;
}","@RolesAllowed({UserGroupMapping.REGULAR_USER_ROLE_ID}) @Override public PathDataMaster addNewPathDataIteration(String workspaceId,String configurationItemId,String serialNumber,int pathDataId,List<InstanceAttribute> attributes,String note,DocumentRevisionKey[] links,String[] documentLinkComments) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, ProductInstanceMasterNotFoundException, UserNotActiveException, NotAllowedException, PathDataAlreadyExistsException, FileAlreadyExistsException, CreationException, PathDataMasterNotFoundException {
  User user=userManager.checkWorkspaceReadAccess(workspaceId);
  Locale locale=new Locale(user.getLanguage());
  ProductInstanceMasterDAO productInstanceMasterDAO=new ProductInstanceMasterDAO(locale,em);
  ProductInstanceMaster prodInstM=productInstanceMasterDAO.loadProductInstanceMaster(new ProductInstanceMasterKey(serialNumber,workspaceId,configurationItemId));
  checkProductInstanceWriteAccess(workspaceId,prodInstM,user);
  PathDataMasterDAO pathDataMasterDAO=new PathDataMasterDAO(locale,em);
  ProductInstanceIteration prodInstI=prodInstM.getLastIteration();
  PathDataMaster pathDataMaster=pathDataMasterDAO.findByPathIdAndProductInstanceIteration(pathDataId,prodInstI);
  BinaryResourceDAO binDAO=new BinaryResourceDAO(locale,em);
  Set<BinaryResource> sourceFiles=pathDataMaster.getLastIteration().getAttachedFiles();
  Set<BinaryResource> targetFiles=new HashSet<>();
  if (pathDataMaster.getLastIteration() != null) {
    int iteration=pathDataMaster.getLastIteration().getIteration() + 1;
    if (!sourceFiles.isEmpty()) {
      for (      BinaryResource sourceFile : sourceFiles) {
        String fileName=sourceFile.getName();
        long length=sourceFile.getContentLength();
        Date lastModified=sourceFile.getLastModified();
        String fullName=workspaceId + ""String_Node_Str"" + serialNumber+ ""String_Node_Str""+ pathDataId+ ""String_Node_Str""+ iteration+ '/'+ fileName;
        BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
        binDAO.createBinaryResource(targetFile);
        targetFiles.add(targetFile);
        try {
          dataManager.copyData(sourceFile,targetFile);
        }
 catch (        StorageException e) {
          LOGGER.log(Level.INFO,null,e);
        }
      }
    }
  }
  PathDataIteration pathDataIteration=pathDataMaster.createNextIteration();
  pathDataIteration.setInstanceAttributes(attributes);
  pathDataIteration.setIterationNote(note);
  createDocumentLink(locale,pathDataIteration,links,documentLinkComments);
  pathDataIteration.setAttachedFiles(targetFiles);
  PathDataIterationDAO pathDataIterationDAO=new PathDataIterationDAO(em);
  pathDataIterationDAO.createPathDataIteration(pathDataIteration);
  return pathDataMaster;
}"
85931,"@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW) @RolesAllowed({UserGroupMapping.REGULAR_USER_ROLE_ID}) @Override public boolean canWrite(String workspaceId,String configurationItemId,String serialNumber){
  try {
    User user=userManager.checkWorkspaceReadAccess(workspaceId);
    Locale locale=new Locale(user.getLanguage());
    ProductInstanceMasterDAO productInstanceMasterDAO=new ProductInstanceMasterDAO(locale,em);
    ProductInstanceMaster prodInstM=productInstanceMasterDAO.loadProductInstanceMaster(new ProductInstanceMasterKey(serialNumber,workspaceId,configurationItemId));
    checkProductInstanceWriteAccess(workspaceId,prodInstM,user);
    return true;
  }
 catch (  ProductInstanceMasterNotFoundException|AccessRightException|UserNotActiveException|WorkspaceNotFoundException|UserNotFoundException e) {
    return false;
  }
}","@RolesAllowed({UserGroupMapping.REGULAR_USER_ROLE_ID}) @Override public boolean canWrite(String workspaceId,String configurationItemId,String serialNumber){
  try {
    User user=userManager.checkWorkspaceReadAccess(workspaceId);
    Locale locale=new Locale(user.getLanguage());
    ProductInstanceMasterDAO productInstanceMasterDAO=new ProductInstanceMasterDAO(locale,em);
    ProductInstanceMaster prodInstM=productInstanceMasterDAO.loadProductInstanceMaster(new ProductInstanceMasterKey(serialNumber,workspaceId,configurationItemId));
    checkProductInstanceWriteAccess(workspaceId,prodInstM,user);
    return true;
  }
 catch (  ProductInstanceMasterNotFoundException|AccessRightException|UserNotActiveException|WorkspaceNotFoundException|UserNotFoundException e) {
    return false;
  }
}"
85932,"@RolesAllowed({UserGroupMapping.REGULAR_USER_ROLE_ID}) @Override public BinaryResource saveFileInPathDataIteration(String workspaceId,String configurationItemId,String serialNumber,int path,int iteration,String fileName,int pSize) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, NotAllowedException, AccessRightException, ProductInstanceMasterNotFoundException, FileAlreadyExistsException, CreationException {
  User user=userManager.checkWorkspaceReadAccess(workspaceId);
  Locale locale=new Locale(user.getLanguage());
  checkNameFileValidity(fileName,locale);
  ProductInstanceMasterDAO productInstanceMasterDAO=new ProductInstanceMasterDAO(locale,em);
  ProductInstanceMaster prodInstM=productInstanceMasterDAO.loadProductInstanceMaster(new ProductInstanceMasterKey(serialNumber,workspaceId,configurationItemId));
  checkProductInstanceWriteAccess(workspaceId,prodInstM,user);
  ProductInstanceIteration prodInstI=prodInstM.getLastIteration();
  PathDataMasterDAO pathDataMasterDAO=new PathDataMasterDAO(locale,em);
  PathDataMaster pathDataMaster=pathDataMasterDAO.findByPathIdAndProductInstanceIteration(path,prodInstI);
  PathDataIteration pathDataIteration=pathDataMaster.getPathDataIterations().get(iteration - 1);
  if (!prodInstI.getPathDataMasterList().contains(pathDataMaster)) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  BinaryResource binaryResource=null;
  String fullName=workspaceId + ""String_Node_Str"" + prodInstM.getSerialNumber()+ ""String_Node_Str""+ pathDataMaster.getId()+ ""String_Node_Str""+ iteration+ '/'+ fileName;
  for (  BinaryResource bin : pathDataIteration.getAttachedFiles()) {
    if (bin.getFullName().equals(fullName)) {
      binaryResource=bin;
      break;
    }
  }
  if (binaryResource == null) {
    binaryResource=new BinaryResource(fullName,pSize,new Date());
    new BinaryResourceDAO(locale,em).createBinaryResource(binaryResource);
    pathDataIteration.addFile(binaryResource);
  }
 else {
    binaryResource.setContentLength(pSize);
    binaryResource.setLastModified(new Date());
  }
  return binaryResource;
}","@RolesAllowed({UserGroupMapping.REGULAR_USER_ROLE_ID}) @Override public BinaryResource saveFileInPathDataIteration(String workspaceId,String configurationItemId,String serialNumber,int path,int iteration,String fileName,int pSize) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, NotAllowedException, AccessRightException, ProductInstanceMasterNotFoundException, FileAlreadyExistsException, CreationException, PathDataMasterNotFoundException {
  User user=userManager.checkWorkspaceReadAccess(workspaceId);
  Locale locale=new Locale(user.getLanguage());
  checkNameFileValidity(fileName,locale);
  ProductInstanceMasterDAO productInstanceMasterDAO=new ProductInstanceMasterDAO(locale,em);
  ProductInstanceMaster prodInstM=productInstanceMasterDAO.loadProductInstanceMaster(new ProductInstanceMasterKey(serialNumber,workspaceId,configurationItemId));
  checkProductInstanceWriteAccess(workspaceId,prodInstM,user);
  ProductInstanceIteration prodInstI=prodInstM.getLastIteration();
  PathDataMasterDAO pathDataMasterDAO=new PathDataMasterDAO(locale,em);
  PathDataMaster pathDataMaster=pathDataMasterDAO.findByPathIdAndProductInstanceIteration(path,prodInstI);
  PathDataIteration pathDataIteration=pathDataMaster.getPathDataIterations().get(iteration - 1);
  if (!prodInstI.getPathDataMasterList().contains(pathDataMaster)) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  BinaryResource binaryResource=null;
  String fullName=workspaceId + ""String_Node_Str"" + prodInstM.getSerialNumber()+ ""String_Node_Str""+ pathDataMaster.getId()+ ""String_Node_Str""+ iteration+ '/'+ fileName;
  for (  BinaryResource bin : pathDataIteration.getAttachedFiles()) {
    if (bin.getFullName().equals(fullName)) {
      binaryResource=bin;
      break;
    }
  }
  if (binaryResource == null) {
    binaryResource=new BinaryResource(fullName,pSize,new Date());
    new BinaryResourceDAO(locale,em).createBinaryResource(binaryResource);
    pathDataIteration.addFile(binaryResource);
  }
 else {
    binaryResource.setContentLength(pSize);
    binaryResource.setLastModified(new Date());
  }
  return binaryResource;
}"
85933,"@RolesAllowed({UserGroupMapping.REGULAR_USER_ROLE_ID}) @Override public PathDataMaster getPathDataByPath(String workspaceId,String configurationItemId,String serialNumber,String pathAsString) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, AccessRightException, ProductInstanceMasterNotFoundException {
  User user=userManager.checkWorkspaceReadAccess(workspaceId);
  Locale locale=new Locale(user.getLanguage());
  ProductInstanceMasterDAO productInstanceMasterDAO=new ProductInstanceMasterDAO(locale,em);
  ProductInstanceMaster prodInstM=productInstanceMasterDAO.loadProductInstanceMaster(new ProductInstanceMasterKey(serialNumber,workspaceId,configurationItemId));
  checkProductInstanceReadAccess(workspaceId,prodInstM,user);
  ProductInstanceIteration prodInstI=prodInstM.getLastIteration();
  PathDataMasterDAO pathDataMasterDAO=new PathDataMasterDAO(locale,em);
  return pathDataMasterDAO.findByPathAndProductInstanceIteration(pathAsString,prodInstI);
}","@RolesAllowed({UserGroupMapping.REGULAR_USER_ROLE_ID}) @Override public PathDataMaster getPathDataByPath(String workspaceId,String configurationItemId,String serialNumber,String pathAsString) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, AccessRightException, ProductInstanceMasterNotFoundException {
  User user=userManager.checkWorkspaceReadAccess(workspaceId);
  Locale locale=new Locale(user.getLanguage());
  ProductInstanceMasterDAO productInstanceMasterDAO=new ProductInstanceMasterDAO(locale,em);
  ProductInstanceMaster prodInstM=productInstanceMasterDAO.loadProductInstanceMaster(new ProductInstanceMasterKey(serialNumber,workspaceId,configurationItemId));
  checkProductInstanceReadAccess(workspaceId,prodInstM,user);
  ProductInstanceIteration prodInstI=prodInstM.getLastIteration();
  PathDataMasterDAO pathDataMasterDAO=new PathDataMasterDAO(locale,em);
  PathDataMaster pathDataMaster=null;
  try {
    pathDataMaster=pathDataMasterDAO.findByPathAndProductInstanceIteration(pathAsString,prodInstI);
  }
 catch (  PathDataMasterNotFoundException pEx) {
  }
  return pathDataMaster;
}"
85934,"public Task[] findInProgressTasks(String workspaceId,String userLogin){
  Task[] tasks;
  TypedQuery<Task> query=em.createNamedQuery(""String_Node_Str"",Task.class);
  query.setParameter(""String_Node_Str"",em.getReference(User.class,new UserKey(workspaceId,userLogin)));
  List<Task> listTasks=query.getResultList();
  tasks=new Task[listTasks.size()];
  for (int i=0; i < listTasks.size(); i++) {
    tasks[i]=listTasks.get(i);
  }
  return tasks;
}","public Task[] findInProgressTasks(String workspaceId,String userLogin){
  Task[] tasks;
  TypedQuery<Task> query=em.createNamedQuery(""String_Node_Str"",Task.class);
  query.setParameter(""String_Node_Str"",em.getReference(User.class,new UserKey(workspaceId,userLogin)));
  query.setParameter(""String_Node_Str"",userLogin);
  query.setParameter(""String_Node_Str"",workspaceId);
  List<Task> listTasks=query.getResultList();
  tasks=new Task[listTasks.size()];
  for (int i=0; i < listTasks.size(); i++) {
    tasks[i]=listTasks.get(i);
  }
  return tasks;
}"
85935,"public Task[] findAssignedTasks(String workspaceId,String userLogin){
  Task[] tasks;
  TypedQuery<Task> query=em.createNamedQuery(""String_Node_Str"",Task.class);
  query.setParameter(""String_Node_Str"",em.getReference(User.class,new UserKey(workspaceId,userLogin)));
  List<Task> listTasks=query.getResultList();
  tasks=new Task[listTasks.size()];
  for (int i=0; i < listTasks.size(); i++) {
    tasks[i]=listTasks.get(i);
  }
  return tasks;
}","public Task[] findAssignedTasks(String workspaceId,String userLogin){
  Task[] tasks;
  TypedQuery<Task> query=em.createNamedQuery(""String_Node_Str"",Task.class);
  query.setParameter(""String_Node_Str"",em.getReference(User.class,new UserKey(workspaceId,userLogin)));
  query.setParameter(""String_Node_Str"",userLogin);
  query.setParameter(""String_Node_Str"",workspaceId);
  List<Task> listTasks=query.getResultList();
  tasks=new Task[listTasks.size()];
  for (int i=0; i < listTasks.size(); i++) {
    tasks[i]=listTasks.get(i);
  }
  return tasks;
}"
85936,"@AroundInvoke public Object createImport(InvocationContext ctx) throws Exception {
  Object[] parameters=ctx.getParameters();
  String workspaceId=(String)parameters[0];
  File file=(File)parameters[1];
  String originalFileName=(String)parameters[2];
  Import newImport=productService.createImport(workspaceId,originalFileName);
  String id=newImport.getId();
  ImportResult importResult=null;
  try {
    Object proceed=ctx.proceed();
    Future<ImportResult> result=(Future<ImportResult>)proceed;
    importResult=result.get();
    return proceed;
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
    List<String> errors=new ArrayList<>();
    List<String> warnings=new ArrayList<>();
    errors.add(e.getMessage());
    importResult=new ImportResult(file,originalFileName,warnings,errors);
    return null;
  }
 finally {
    productService.endImport(workspaceId,id,importResult);
  }
}","@AroundInvoke public Object createImport(InvocationContext ctx) throws Exception {
  Object[] parameters=ctx.getParameters();
  String workspaceId=(String)parameters[0];
  File file=(File)parameters[1];
  String originalFileName=(String)parameters[2];
  Import newImport=productService.createImport(workspaceId,originalFileName);
  String id=newImport.getId();
  ImportResult importResult=null;
  try {
    Object proceed=ctx.proceed();
    Future<ImportResult> result=(Future<ImportResult>)proceed;
    importResult=result.get();
    return proceed;
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
    List<String> errors=new ArrayList<>();
    List<String> warnings=new ArrayList<>();
    errors.add(""String_Node_Str"");
    importResult=new ImportResult(file,originalFileName,warnings,errors);
    return null;
  }
 finally {
    productService.endImport(workspaceId,id,importResult);
  }
}"
85937,"@Override @Asynchronous @FileImport public Future<ImportResult> importIntoParts(String workspaceId,File file,String originalFileName,String revisionNote,boolean autoCheckout,boolean autoCheckin,boolean permissiveUpdate) throws Exception {
  PartImporter selectedImporter=null;
  for (  PartImporter importer : partImporters) {
    if (importer.canImportFile(file.getName())) {
      selectedImporter=importer;
      break;
    }
  }
  ImportResult result;
  if (selectedImporter != null) {
    result=selectedImporter.importFile(workspaceId,file,revisionNote,autoCheckout,autoCheckin,permissiveUpdate);
  }
 else {
    result=getNoImporterAvailableError(file,originalFileName);
  }
  file.delete();
  return new AsyncResult<>(result);
}","@Override @Asynchronous @FileImport public Future<ImportResult> importIntoParts(String workspaceId,File file,String originalFileName,String revisionNote,boolean autoCheckout,boolean autoCheckin,boolean permissiveUpdate) throws Exception {
  PartImporter selectedImporter=null;
  for (  PartImporter importer : partImporters) {
    if (importer.canImportFile(file.getName())) {
      selectedImporter=importer;
      break;
    }
  }
  ImportResult result;
  if (selectedImporter != null) {
    result=selectedImporter.importFile(workspaceId,file,revisionNote,autoCheckout,autoCheckin,permissiveUpdate);
  }
 else {
    result=getNoImporterAvailableError(file,originalFileName);
  }
  return new AsyncResult<>(result);
}"
85938,"@POST @Path(""String_Node_Str"") @Consumes(MediaType.MULTIPART_FORM_DATA) @Produces(MediaType.APPLICATION_JSON) public Response importAttributes(@Context HttpServletRequest request,@PathParam(""String_Node_Str"") String workspaceId,@QueryParam(""String_Node_Str"") boolean autoCheckout,@QueryParam(""String_Node_Str"") boolean autoCheckin,@QueryParam(""String_Node_Str"") boolean permissiveUpdate,@QueryParam(""String_Node_Str"") String revisionNote) throws Exception {
  Collection<Part> parts=request.getParts();
  if (parts.isEmpty() || parts.size() > 1) {
    return Response.status(Response.Status.BAD_REQUEST).build();
  }
  Part part=parts.iterator().next();
  String name=FileIO.getFileNameWithoutExtension(part.getSubmittedFileName());
  String extension=FileIO.getExtension(part.getSubmittedFileName());
  File importFile=Files.createTempFile(""String_Node_Str"" + name,""String_Node_Str"" + (extension == null ? ""String_Node_Str"" : ""String_Node_Str"" + extension)).toFile();
  long length=BinaryResourceUpload.uploadBinary(new BufferedOutputStream(new FileOutputStream(importFile)),part);
  importerService.importIntoParts(workspaceId,importFile,name + ""String_Node_Str"" + extension,revisionNote,autoCheckout,autoCheckin,permissiveUpdate);
  return Response.noContent().build();
}","@POST @Path(""String_Node_Str"") @Consumes(MediaType.MULTIPART_FORM_DATA) @Produces(MediaType.APPLICATION_JSON) public Response importAttributes(@Context HttpServletRequest request,@PathParam(""String_Node_Str"") String workspaceId,@QueryParam(""String_Node_Str"") boolean autoCheckout,@QueryParam(""String_Node_Str"") boolean autoCheckin,@QueryParam(""String_Node_Str"") boolean permissiveUpdate,@QueryParam(""String_Node_Str"") String revisionNote) throws Exception {
  Collection<Part> parts=request.getParts();
  if (parts.isEmpty() || parts.size() > 1) {
    return Response.status(Response.Status.BAD_REQUEST).build();
  }
  Part part=parts.iterator().next();
  String name=FileIO.getFileNameWithoutExtension(part.getSubmittedFileName());
  String extension=FileIO.getExtension(part.getSubmittedFileName());
  File importFile=Files.createTempFile(""String_Node_Str"" + name,""String_Node_Str"" + (extension == null ? ""String_Node_Str"" : ""String_Node_Str"" + extension)).toFile();
  long length=BinaryResourceUpload.uploadBinary(new BufferedOutputStream(new FileOutputStream(importFile)),part);
  importerService.importIntoParts(workspaceId,importFile,name + ""String_Node_Str"" + extension,revisionNote,autoCheckout,autoCheckin,permissiveUpdate);
  importFile.deleteOnExit();
  return Response.noContent().build();
}"
85939,"@POST @Path(""String_Node_Str"") @Consumes(MediaType.MULTIPART_FORM_DATA) @Produces(MediaType.APPLICATION_JSON) public Response importAttributes(@Context HttpServletRequest request,@PathParam(""String_Node_Str"") String workspaceId,@QueryParam(""String_Node_Str"") boolean autoFreezeAfterUpdate,@QueryParam(""String_Node_Str"") boolean permissiveUpdate,@QueryParam(""String_Node_Str"") String revisionNote) throws Exception {
  Collection<Part> parts=request.getParts();
  if (parts.isEmpty() || parts.size() > 1) {
    return Response.status(Response.Status.BAD_REQUEST).build();
  }
  Part part=parts.iterator().next();
  String name=FileIO.getFileNameWithoutExtension(part.getSubmittedFileName());
  String extension=FileIO.getExtension(part.getSubmittedFileName());
  File importFile=Files.createTempFile(""String_Node_Str"" + name,""String_Node_Str"" + (extension == null ? ""String_Node_Str"" : ""String_Node_Str"" + extension)).toFile();
  long length=BinaryResourceUpload.uploadBinary(new BufferedOutputStream(new FileOutputStream(importFile)),part);
  importerService.importIntoPathData(workspaceId,importFile,name + ""String_Node_Str"" + extension,revisionNote,autoFreezeAfterUpdate,permissiveUpdate);
  importFile.delete();
  return Response.noContent().build();
}","@POST @Path(""String_Node_Str"") @Consumes(MediaType.MULTIPART_FORM_DATA) @Produces(MediaType.APPLICATION_JSON) public Response importAttributes(@Context HttpServletRequest request,@PathParam(""String_Node_Str"") String workspaceId,@QueryParam(""String_Node_Str"") boolean autoFreezeAfterUpdate,@QueryParam(""String_Node_Str"") boolean permissiveUpdate,@QueryParam(""String_Node_Str"") String revisionNote) throws Exception {
  Collection<Part> parts=request.getParts();
  if (parts.isEmpty() || parts.size() > 1) {
    return Response.status(Response.Status.BAD_REQUEST).build();
  }
  Part part=parts.iterator().next();
  String name=FileIO.getFileNameWithoutExtension(part.getSubmittedFileName());
  String extension=FileIO.getExtension(part.getSubmittedFileName());
  File importFile=Files.createTempFile(""String_Node_Str"" + name,""String_Node_Str"" + (extension == null ? ""String_Node_Str"" : ""String_Node_Str"" + extension)).toFile();
  long length=BinaryResourceUpload.uploadBinary(new BufferedOutputStream(new FileOutputStream(importFile)),part);
  importerService.importIntoPathData(workspaceId,importFile,name + ""String_Node_Str"" + extension,revisionNote,autoFreezeAfterUpdate,permissiveUpdate);
  importFile.deleteOnExit();
  return Response.noContent().build();
}"
85940,"@Override public void execImpl() throws Exception {
  if (id == null || revision == null) {
    loadMetadata();
  }
  IDocumentManagerWS documentS=ScriptingTools.createDocumentService(getServerURL(),user,password);
  DocumentRevisionKey docRPK=new DocumentRevisionKey(workspace,id,revision.toString());
  DocumentRevision dr=documentS.getDocumentRevision(docRPK);
  DocumentIteration di=dr.getLastIteration();
  DocumentIterationKey docIPK=new DocumentIterationKey(docRPK,di.getIteration());
  if (!noUpload && !di.getAttachedFiles().isEmpty()) {
    for (    BinaryResource bin : di.getAttachedFiles()) {
      String fileName=bin.getName();
      File localFile=new File(path,fileName);
      if (localFile.exists()) {
        FileHelper fh=new FileHelper(user,password,output,new AccountsManager().getUserLocale(user));
        fh.uploadDocumentFile(getServerURL(),localFile,docIPK);
        localFile.setWritable(false);
      }
    }
  }
  if (message != null && !message.isEmpty()) {
    documentS.updateDocument(docIPK,message,null,null,null);
  }
  dr=documentS.checkInDocument(docRPK);
  output.printInfo(LangHelper.getLocalizedMessage(""String_Node_Str"",user) + ""String_Node_Str"" + id+ ""String_Node_Str""+ dr.getVersion()+ ""String_Node_Str""+ di.getIteration()+ ""String_Node_Str""+ workspace+ ""String_Node_Str"");
}","@Override public void execImpl() throws Exception {
  if (id == null || revision == null) {
    loadMetadata();
  }
  IDocumentManagerWS documentS=ScriptingTools.createDocumentService(getServerURL(),user,password);
  DocumentRevisionKey docRPK=new DocumentRevisionKey(workspace,id,revision.toString());
  DocumentRevision dr=documentS.getDocumentRevision(docRPK);
  DocumentIteration di=dr.getLastIteration();
  DocumentIterationKey docIPK=new DocumentIterationKey(docRPK,di.getIteration());
  if (!noUpload && !di.getAttachedFiles().isEmpty()) {
    for (    BinaryResource bin : di.getAttachedFiles()) {
      String fileName=bin.getName();
      File localFile=new File(path,fileName);
      if (localFile.exists()) {
        FileHelper fh=new FileHelper(user,password,output,new AccountsManager().getUserLocale(user));
        fh.uploadDocumentFile(getServerURL(),localFile,docIPK);
        localFile.setWritable(false);
      }
    }
  }
  if (message != null && !message.isEmpty()) {
    documentS.updateDocument(docIPK,message,null,null,null);
  }
  output.printInfo(LangHelper.getLocalizedMessage(""String_Node_Str"",user) + ""String_Node_Str"" + id+ ""String_Node_Str""+ dr.getVersion()+ ""String_Node_Str""+ di.getIteration()+ ""String_Node_Str""+ workspace+ ""String_Node_Str"");
  documentS.checkInDocument(docRPK);
}"
85941,"private void checkoutDocument(String id,String pRevision) throws IOException, UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, LoginException, NoSuchAlgorithmException, NotAllowedException, FileAlreadyExistsException, AccessRightException, CreationException, DocumentRevisionNotFoundException {
  DocumentRevisionKey documentRevisionKey=new DocumentRevisionKey(workspace,id,pRevision);
  DocumentRevision dr=documentS.getDocumentRevision(documentRevisionKey);
  DocumentIteration di=dr.getLastIteration();
  if (!dr.isCheckedOut()) {
    try {
      dr=documentS.checkOutDocument(documentRevisionKey);
      di=dr.getLastIteration();
    }
 catch (    Exception e) {
      output.printException(e);
    }
  }
  if (!noDownload && !di.getAttachedFiles().isEmpty()) {
    FileHelper fh=new FileHelper(user,password,output,new AccountsManager().getUserLocale(user));
    fh.downloadDocumentFiles(getServerURL(),path,workspace,id,dr,di,force);
  }
}","private void checkoutDocument(String id,String pRevision) throws IOException, UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, LoginException, NoSuchAlgorithmException, NotAllowedException, FileAlreadyExistsException, AccessRightException, CreationException, DocumentRevisionNotFoundException {
  Locale locale=new AccountsManager().getUserLocale(user);
  DocumentRevisionKey documentRevisionKey=new DocumentRevisionKey(workspace,id,pRevision);
  DocumentRevision dr=documentS.getDocumentRevision(documentRevisionKey);
  DocumentIteration di=dr.getLastIteration();
  output.printInfo(LangHelper.getLocalizedMessage(""String_Node_Str"",locale) + ""String_Node_Str"" + id+ ""String_Node_Str""+ dr.getVersion()+ ""String_Node_Str""+ di.getIteration()+ ""String_Node_Str""+ workspace+ ""String_Node_Str"");
  if (!dr.isCheckedOut()) {
    try {
      dr=documentS.checkOutDocument(documentRevisionKey);
      di=dr.getLastIteration();
    }
 catch (    Exception e) {
      output.printException(e);
    }
  }
  if (!noDownload && !di.getAttachedFiles().isEmpty()) {
    FileHelper fh=new FileHelper(user,password,output,locale);
    fh.downloadDocumentFiles(getServerURL(),path,workspace,id,dr,di,force);
  }
}"
85942,"private void checkoutPart(String pPartNumber,String pRevision,PSFilter filter) throws IOException, UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, PartMasterNotFoundException, PartRevisionNotFoundException, LoginException, NoSuchAlgorithmException, PartIterationNotFoundException, NotAllowedException, FileAlreadyExistsException, AccessRightException, CreationException {
  PartMaster pm=productS.getPartMaster(new PartMasterKey(workspace,pPartNumber));
  PartRevision pr;
  PartIteration pi;
  if (filter != null) {
    pi=filter.filter(pm).get(0);
    if (pi == null) {
      throw new IllegalArgumentException(LangHelper.getLocalizedMessage(""String_Node_Str"",user));
    }
    pr=pi.getPartRevision();
    if (null != pRevision && !pr.getVersion().equals(pRevision)) {
      throw new IllegalArgumentException(LangHelper.getLocalizedMessage(""String_Node_Str"",user));
    }
  }
 else {
    if (pRevision != null) {
      pr=productS.getPartRevision(new PartRevisionKey(workspace,pPartNumber,pRevision));
    }
 else {
      pr=pm.getLastRevision();
    }
    pi=pr.getLastIteration();
  }
  if (!pr.isCheckedOut()) {
    try {
      pr=productS.checkOutPart(new PartRevisionKey(workspace,pPartNumber,pr.getVersion()));
      pi=pr.getLastIteration();
    }
 catch (    Exception e) {
      output.printException(e);
    }
  }
  BinaryResource bin=pi.getNativeCADFile();
  if (bin != null && !noDownload) {
    FileHelper fh=new FileHelper(user,password,output,new AccountsManager().getUserLocale(user));
    fh.downloadNativeCADFile(getServerURL(),path,workspace,pPartNumber,pr,pi,force);
  }
  if (recursive) {
    PartIterationKey partIPK=new PartIterationKey(workspace,pPartNumber,pr.getVersion(),pi.getIteration());
    List<PartUsageLink> usageLinks=productS.getComponents(partIPK);
    for (    PartUsageLink link : usageLinks) {
      PartMaster subPM=link.getComponent();
      checkoutPart(subPM.getNumber(),null,filter);
    }
  }
}","private void checkoutPart(String pPartNumber,String pRevision,PSFilter filter) throws IOException, UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, PartMasterNotFoundException, PartRevisionNotFoundException, LoginException, NoSuchAlgorithmException, PartIterationNotFoundException, NotAllowedException, FileAlreadyExistsException, AccessRightException, CreationException {
  Locale locale=new AccountsManager().getUserLocale(user);
  PartMaster pm=productS.getPartMaster(new PartMasterKey(workspace,pPartNumber));
  PartRevision pr;
  PartIteration pi;
  output.printInfo(LangHelper.getLocalizedMessage(""String_Node_Str"",locale) + ""String_Node_Str"" + pm.getNumber());
  if (filter != null) {
    pi=filter.filter(pm).get(0);
    if (pi == null) {
      throw new IllegalArgumentException(LangHelper.getLocalizedMessage(""String_Node_Str"",user));
    }
    pr=pi.getPartRevision();
    if (null != pRevision && !pr.getVersion().equals(pRevision)) {
      throw new IllegalArgumentException(LangHelper.getLocalizedMessage(""String_Node_Str"",user));
    }
  }
 else {
    if (pRevision != null) {
      pr=productS.getPartRevision(new PartRevisionKey(workspace,pPartNumber,pRevision));
    }
 else {
      pr=pm.getLastRevision();
    }
    pi=pr.getLastIteration();
  }
  if (!pr.isCheckedOut()) {
    try {
      pr=productS.checkOutPart(new PartRevisionKey(workspace,pPartNumber,pr.getVersion()));
      pi=pr.getLastIteration();
    }
 catch (    Exception e) {
      output.printException(e);
    }
  }
  BinaryResource bin=pi.getNativeCADFile();
  if (bin != null && !noDownload) {
    FileHelper fh=new FileHelper(user,password,output,locale);
    fh.downloadNativeCADFile(getServerURL(),path,workspace,pPartNumber,pr,pi,force);
  }
  if (recursive) {
    PartIterationKey partIPK=new PartIterationKey(workspace,pPartNumber,pr.getVersion(),pi.getIteration());
    List<PartUsageLink> usageLinks=productS.getComponents(partIPK);
    for (    PartUsageLink link : usageLinks) {
      PartMaster subPM=link.getComponent();
      checkoutPart(subPM.getNumber(),null,filter);
    }
  }
}"
85943,"private String downloadFile(File pLocalFile,String pURL) throws IOException, LoginException, NoSuchAlgorithmException {
  FilterInputStream in=null;
  OutputStream out=null;
  HttpURLConnection conn=null;
  try {
    URL url=new URL(pURL);
    output.printInfo(LangHelper.getLocalizedMessage(""String_Node_Str"",locale) + ""String_Node_Str"" + pLocalFile.getName()+ ""String_Node_Str""+ LangHelper.getLocalizedMessage(""String_Node_Str"",locale)+ ""String_Node_Str""+ url.getHost());
    performHeadHTTPMethod(url);
    out=new BufferedOutputStream(new FileOutputStream(pLocalFile),BUFFER_CAPACITY);
    conn=(HttpURLConnection)url.openConnection();
    conn.setUseCaches(false);
    conn.setAllowUserInteraction(true);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestMethod(""String_Node_Str"");
    byte[] encoded=Base64.encodeBase64((login + ""String_Node_Str"" + password).getBytes(""String_Node_Str""));
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + new String(encoded,""String_Node_Str""));
    conn.connect();
    manageHTTPCode(conn);
    MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
    in=output.getMonitor(conn.getContentLength(),new DigestInputStream(new BufferedInputStream(conn.getInputStream(),BUFFER_CAPACITY),md));
    byte[] data=new byte[CHUNK_SIZE];
    int length;
    while ((length=in.read(data)) != -1) {
      out.write(data,0,length);
    }
    out.flush();
    byte[] digest=md.digest();
    return Base64.encodeBase64String(digest);
  }
  finally {
    if (out != null) {
      out.close();
    }
    if (in != null) {
      in.close();
    }
    if (conn != null) {
      conn.disconnect();
    }
  }
}","private String downloadFile(File pLocalFile,String pURL) throws IOException, LoginException, NoSuchAlgorithmException {
  FilterInputStream in=null;
  OutputStream out=null;
  HttpURLConnection conn=null;
  try {
    URL url=new URL(pURL.replace(""String_Node_Str"",""String_Node_Str""));
    output.printInfo(LangHelper.getLocalizedMessage(""String_Node_Str"",locale) + ""String_Node_Str"" + pLocalFile.getName()+ ""String_Node_Str""+ LangHelper.getLocalizedMessage(""String_Node_Str"",locale)+ ""String_Node_Str""+ url.getHost());
    performHeadHTTPMethod(url);
    out=new BufferedOutputStream(new FileOutputStream(pLocalFile),BUFFER_CAPACITY);
    conn=(HttpURLConnection)url.openConnection();
    conn.setUseCaches(false);
    conn.setAllowUserInteraction(true);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestMethod(""String_Node_Str"");
    byte[] encoded=Base64.encodeBase64((login + ""String_Node_Str"" + password).getBytes(""String_Node_Str""));
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + new String(encoded,""String_Node_Str""));
    conn.connect();
    manageHTTPCode(conn);
    MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
    in=output.getMonitor(conn.getContentLength(),new DigestInputStream(new BufferedInputStream(conn.getInputStream(),BUFFER_CAPACITY),md));
    byte[] data=new byte[CHUNK_SIZE];
    int length;
    while ((length=in.read(data)) != -1) {
      out.write(data,0,length);
    }
    out.flush();
    byte[] digest=md.digest();
    return Base64.encodeBase64String(digest);
  }
  finally {
    if (out != null) {
      out.close();
    }
    if (in != null) {
      in.close();
    }
    if (conn != null) {
      conn.disconnect();
    }
  }
}"
85944,"private void removeObsoletePathToPathLinks(User user,String workspaceId) throws UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, PartRevisionNotFoundException, AccessRightException {
  Locale locale=new Locale(user.getLanguage());
  ConfigurationItemDAO configurationItemDAO=new ConfigurationItemDAO(locale,em);
  List<ConfigurationItem> configurationItems=configurationItemDAO.findAllConfigurationItems(workspaceId);
  PathToPathLinkDAO pathToPathLinkDAO=new PathToPathLinkDAO(locale,em);
  for (  ConfigurationItem configurationItem : configurationItems) {
    List<PathToPathLink> pathToPathLinks=configurationItem.getPathToPathLinks();
    for (    PathToPathLink pathToPathLink : pathToPathLinks) {
      try {
        decodePath(configurationItem.getKey(),pathToPathLink.getSourcePath());
        decodePath(configurationItem.getKey(),pathToPathLink.getTargetPath());
      }
 catch (      PartUsageLinkNotFoundException e) {
        pathToPathLinkDAO.removePathToPathLink(pathToPathLink);
      }
catch (      ConfigurationItemNotFoundException e) {
        LOGGER.log(Level.SEVERE,null,e);
      }
    }
  }
}","private void removeObsoletePathToPathLinks(User user,String workspaceId) throws UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, PartRevisionNotFoundException, AccessRightException {
  Locale locale=new Locale(user.getLanguage());
  ConfigurationItemDAO configurationItemDAO=new ConfigurationItemDAO(locale,em);
  List<ConfigurationItem> configurationItems=configurationItemDAO.findAllConfigurationItems(workspaceId);
  for (  ConfigurationItem configurationItem : configurationItems) {
    List<PathToPathLink> pathToPathLinks=new ArrayList<>(configurationItem.getPathToPathLinks());
    for (    PathToPathLink pathToPathLink : pathToPathLinks) {
      try {
        decodePath(configurationItem.getKey(),pathToPathLink.getSourcePath());
        decodePath(configurationItem.getKey(),pathToPathLink.getTargetPath());
      }
 catch (      PartUsageLinkNotFoundException e) {
        configurationItem.removePathToPathLink(pathToPathLink);
      }
catch (      ConfigurationItemNotFoundException e) {
        LOGGER.log(Level.SEVERE,null,e);
      }
    }
  }
}"
85945,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public PartRevision createPartRevision(PartRevisionKey revisionKey,String pDescription,String pWorkflowModelId,ACLUserEntry[] pACLUserEntries,ACLUserGroupEntry[] pACLUserGroupEntries,Map<String,String> roleMappings) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, PartRevisionNotFoundException, NotAllowedException, FileAlreadyExistsException, CreationException, RoleNotFoundException, WorkflowModelNotFoundException, PartRevisionAlreadyExistsException {
  User user=userManager.checkWorkspaceWriteAccess(revisionKey.getPartMaster().getWorkspace());
  Locale locale=new Locale(user.getLanguage());
  PartRevisionDAO partRevisionDAO=new PartRevisionDAO(locale,em);
  PartRevision originalPartR=partRevisionDAO.loadPartR(revisionKey);
  if (originalPartR.isCheckedOut()) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  if (originalPartR.getNumberOfIterations() == 0) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  PartRevision partR=originalPartR.getPartMaster().createNextRevision(user);
  PartIteration lastPartI=originalPartR.getLastIteration();
  PartIteration firstPartI=partR.createNextIteration(user);
  if (lastPartI != null) {
    BinaryResourceDAO binDAO=new BinaryResourceDAO(locale,em);
    for (    BinaryResource sourceFile : lastPartI.getAttachedFiles()) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      Date lastModified=sourceFile.getLastModified();
      String fullName=partR.getWorkspaceId() + ""String_Node_Str"" + partR.getPartNumber()+ ""String_Node_Str""+ partR.getVersion()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstPartI.addAttachedFile(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    List<PartUsageLink> newComponents=new LinkedList<>();
    List<PartUsageLink> oldComponents=lastPartI.getComponents();
    for (    PartUsageLink usage : lastPartI.getComponents()) {
      PartUsageLink newUsage=usage.clone();
      newComponents.add(newUsage);
    }
    firstPartI.setComponents(newComponents);
    PathToPathLinkDAO pathToPathLinkDAO=new PathToPathLinkDAO(locale,em);
    pathToPathLinkDAO.cloneAndUpgradePathToPathLinks(oldComponents,newComponents);
    for (    Geometry sourceFile : lastPartI.getGeometries()) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      int quality=sourceFile.getQuality();
      Date lastModified=sourceFile.getLastModified();
      String fullName=partR.getWorkspaceId() + ""String_Node_Str"" + partR.getPartNumber()+ ""String_Node_Str""+ partR.getVersion()+ ""String_Node_Str""+ fileName;
      Geometry targetFile=new Geometry(quality,fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstPartI.addGeometry(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    BinaryResource nativeCADFile=lastPartI.getNativeCADFile();
    if (nativeCADFile != null) {
      String fileName=nativeCADFile.getName();
      long length=nativeCADFile.getContentLength();
      Date lastModified=nativeCADFile.getLastModified();
      String fullName=partR.getWorkspaceId() + ""String_Node_Str"" + partR.getPartNumber()+ ""String_Node_Str""+ partR.getVersion()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstPartI.setNativeCADFile(targetFile);
      try {
        dataManager.copyData(nativeCADFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    Set<DocumentLink> links=new HashSet<>();
    for (    DocumentLink link : lastPartI.getLinkedDocuments()) {
      DocumentLink newLink=link.clone();
      links.add(newLink);
    }
    firstPartI.setLinkedDocuments(links);
    List<InstanceAttribute> attrs=new ArrayList<>();
    for (    InstanceAttribute attr : lastPartI.getInstanceAttributes()) {
      InstanceAttribute clonedAttribute=attr.clone();
      attrs.add(clonedAttribute);
    }
    firstPartI.setInstanceAttributes(attrs);
  }
  if (pWorkflowModelId != null) {
    UserDAO userDAO=new UserDAO(locale,em);
    RoleDAO roleDAO=new RoleDAO(locale,em);
    Map<Role,User> roleUserMap=new HashMap<>();
    for (    Object o : roleMappings.entrySet()) {
      Map.Entry pairs=(Map.Entry)o;
      String roleName=(String)pairs.getKey();
      String userLogin=(String)pairs.getValue();
      User worker=userDAO.loadUser(new UserKey(originalPartR.getWorkspaceId(),userLogin));
      Role role=roleDAO.loadRole(new RoleKey(originalPartR.getWorkspaceId(),roleName));
      roleUserMap.put(role,worker);
    }
    WorkflowModel workflowModel=new WorkflowModelDAO(locale,em).loadWorkflowModel(new WorkflowModelKey(user.getWorkspaceId(),pWorkflowModelId));
    Workflow workflow=workflowModel.createWorkflow(roleUserMap);
    partR.setWorkflow(workflow);
    for (    Task task : workflow.getTasks()) {
      if (null == task.getWorker()) {
        throw new NotAllowedException(locale,""String_Node_Str"");
      }
    }
    Collection<Task> runningTasks=workflow.getRunningTasks();
    for (    Task runningTask : runningTasks) {
      runningTask.start();
    }
    mailer.sendApproval(runningTasks,partR);
  }
  partR.setDescription(pDescription);
  if ((pACLUserEntries != null && pACLUserEntries.length > 0) || (pACLUserGroupEntries != null && pACLUserGroupEntries.length > 0)) {
    ACL acl=new ACL();
    if (pACLUserEntries != null) {
      for (      ACLUserEntry entry : pACLUserEntries) {
        acl.addEntry(em.getReference(User.class,new UserKey(user.getWorkspaceId(),entry.getPrincipalLogin())),entry.getPermission());
      }
    }
    if (pACLUserGroupEntries != null) {
      for (      ACLUserGroupEntry entry : pACLUserGroupEntries) {
        acl.addEntry(em.getReference(UserGroup.class,new UserGroupKey(user.getWorkspaceId(),entry.getPrincipalId())),entry.getPermission());
      }
    }
    partR.setACL(acl);
  }
  Date now=new Date();
  partR.setCreationDate(now);
  partR.setCheckOutUser(user);
  partR.setCheckOutDate(now);
  firstPartI.setCreationDate(now);
  firstPartI.setModificationDate(now);
  partRevisionDAO.createPartR(partR);
  return partR;
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public PartRevision createPartRevision(PartRevisionKey revisionKey,String pDescription,String pWorkflowModelId,ACLUserEntry[] pACLUserEntries,ACLUserGroupEntry[] pACLUserGroupEntries,Map<String,String> roleMappings) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, PartRevisionNotFoundException, NotAllowedException, FileAlreadyExistsException, CreationException, RoleNotFoundException, WorkflowModelNotFoundException, PartRevisionAlreadyExistsException {
  User user=userManager.checkWorkspaceWriteAccess(revisionKey.getPartMaster().getWorkspace());
  Locale locale=new Locale(user.getLanguage());
  PartRevisionDAO partRevisionDAO=new PartRevisionDAO(locale,em);
  PartRevision originalPartR=partRevisionDAO.loadPartR(revisionKey);
  if (originalPartR.isCheckedOut()) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  if (originalPartR.getNumberOfIterations() == 0) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  PartRevision partR=originalPartR.getPartMaster().createNextRevision(user);
  PartIteration lastPartI=originalPartR.getLastIteration();
  PartIteration firstPartI=partR.createNextIteration(user);
  if (lastPartI != null) {
    BinaryResourceDAO binDAO=new BinaryResourceDAO(locale,em);
    for (    BinaryResource sourceFile : lastPartI.getAttachedFiles()) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      Date lastModified=sourceFile.getLastModified();
      String fullName=partR.getWorkspaceId() + ""String_Node_Str"" + partR.getPartNumber()+ ""String_Node_Str""+ partR.getVersion()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstPartI.addAttachedFile(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    List<PartUsageLink> newComponents=new LinkedList<>();
    List<PartUsageLink> oldComponents=lastPartI.getComponents();
    for (    PartUsageLink usage : lastPartI.getComponents()) {
      PartUsageLink newUsage=usage.clone();
      em.persist(newUsage);
      newComponents.add(newUsage);
    }
    firstPartI.setComponents(newComponents);
    em.flush();
    PathToPathLinkDAO pathToPathLinkDAO=new PathToPathLinkDAO(locale,em);
    pathToPathLinkDAO.cloneAndUpgradePathToPathLinks(oldComponents,newComponents);
    for (    Geometry sourceFile : lastPartI.getGeometries()) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      int quality=sourceFile.getQuality();
      Date lastModified=sourceFile.getLastModified();
      String fullName=partR.getWorkspaceId() + ""String_Node_Str"" + partR.getPartNumber()+ ""String_Node_Str""+ partR.getVersion()+ ""String_Node_Str""+ fileName;
      Geometry targetFile=new Geometry(quality,fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstPartI.addGeometry(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    BinaryResource nativeCADFile=lastPartI.getNativeCADFile();
    if (nativeCADFile != null) {
      String fileName=nativeCADFile.getName();
      long length=nativeCADFile.getContentLength();
      Date lastModified=nativeCADFile.getLastModified();
      String fullName=partR.getWorkspaceId() + ""String_Node_Str"" + partR.getPartNumber()+ ""String_Node_Str""+ partR.getVersion()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstPartI.setNativeCADFile(targetFile);
      try {
        dataManager.copyData(nativeCADFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    Set<DocumentLink> links=new HashSet<>();
    for (    DocumentLink link : lastPartI.getLinkedDocuments()) {
      DocumentLink newLink=link.clone();
      links.add(newLink);
    }
    firstPartI.setLinkedDocuments(links);
    List<InstanceAttribute> attrs=new ArrayList<>();
    for (    InstanceAttribute attr : lastPartI.getInstanceAttributes()) {
      InstanceAttribute clonedAttribute=attr.clone();
      attrs.add(clonedAttribute);
    }
    firstPartI.setInstanceAttributes(attrs);
  }
  if (pWorkflowModelId != null) {
    UserDAO userDAO=new UserDAO(locale,em);
    RoleDAO roleDAO=new RoleDAO(locale,em);
    Map<Role,User> roleUserMap=new HashMap<>();
    for (    Object o : roleMappings.entrySet()) {
      Map.Entry pairs=(Map.Entry)o;
      String roleName=(String)pairs.getKey();
      String userLogin=(String)pairs.getValue();
      User worker=userDAO.loadUser(new UserKey(originalPartR.getWorkspaceId(),userLogin));
      Role role=roleDAO.loadRole(new RoleKey(originalPartR.getWorkspaceId(),roleName));
      roleUserMap.put(role,worker);
    }
    WorkflowModel workflowModel=new WorkflowModelDAO(locale,em).loadWorkflowModel(new WorkflowModelKey(user.getWorkspaceId(),pWorkflowModelId));
    Workflow workflow=workflowModel.createWorkflow(roleUserMap);
    partR.setWorkflow(workflow);
    for (    Task task : workflow.getTasks()) {
      if (null == task.getWorker()) {
        throw new NotAllowedException(locale,""String_Node_Str"");
      }
    }
    Collection<Task> runningTasks=workflow.getRunningTasks();
    for (    Task runningTask : runningTasks) {
      runningTask.start();
    }
    mailer.sendApproval(runningTasks,partR);
  }
  partR.setDescription(pDescription);
  if ((pACLUserEntries != null && pACLUserEntries.length > 0) || (pACLUserGroupEntries != null && pACLUserGroupEntries.length > 0)) {
    ACL acl=new ACL();
    if (pACLUserEntries != null) {
      for (      ACLUserEntry entry : pACLUserEntries) {
        acl.addEntry(em.getReference(User.class,new UserKey(user.getWorkspaceId(),entry.getPrincipalLogin())),entry.getPermission());
      }
    }
    if (pACLUserGroupEntries != null) {
      for (      ACLUserGroupEntry entry : pACLUserGroupEntries) {
        acl.addEntry(em.getReference(UserGroup.class,new UserGroupKey(user.getWorkspaceId(),entry.getPrincipalId())),entry.getPermission());
      }
    }
    partR.setACL(acl);
  }
  Date now=new Date();
  partR.setCreationDate(now);
  partR.setCheckOutUser(user);
  partR.setCheckOutDate(now);
  firstPartI.setCreationDate(now);
  firstPartI.setModificationDate(now);
  partRevisionDAO.createPartR(partR);
  return partR;
}"
85946,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public PartRevision checkInPart(PartRevisionKey pPartRPK) throws PartRevisionNotFoundException, UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, ESServerException, EntityConstraintException, UserNotActiveException, PartMasterNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pPartRPK.getPartMaster().getWorkspace());
  Locale locale=new Locale(user.getLanguage());
  PartRevisionDAO partRDAO=new PartRevisionDAO(locale,em);
  PartRevision partR=partRDAO.loadPartR(pPartRPK);
  if (!hasPartRevisionWriteAccess(user,partR)) {
    throw new AccessRightException(locale,user);
  }
  if (isCheckoutByUser(user,partR)) {
    PartIteration lastCheckedInIteration=partR.getLastCheckedInIteration();
    checkCyclicAssemblyForPartIteration(partR.getLastIteration());
    partR.setCheckOutDate(null);
    partR.setCheckOutUser(null);
    PartIteration lastIteration=partR.getLastIteration();
    lastIteration.setCheckInDate(new Date());
    esIndexer.index(lastIteration);
    if (lastCheckedInIteration != null) {
      removeObsoletePathToPathLinks(user,pPartRPK.getWorkspaceId());
    }
    partIterationEvent.select(new AnnotationLiteral<CheckedIn>(){
    }
).fire(new PartIterationChangeEvent(lastIteration));
    return partR;
  }
 else {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public PartRevision checkInPart(PartRevisionKey pPartRPK) throws PartRevisionNotFoundException, UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, ESServerException, EntityConstraintException, UserNotActiveException, PartMasterNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pPartRPK.getPartMaster().getWorkspace());
  Locale locale=new Locale(user.getLanguage());
  PartRevisionDAO partRDAO=new PartRevisionDAO(locale,em);
  PartRevision partR=partRDAO.loadPartR(pPartRPK);
  if (!hasPartRevisionWriteAccess(user,partR)) {
    throw new AccessRightException(locale,user);
  }
  if (isCheckoutByUser(user,partR)) {
    checkCyclicAssemblyForPartIteration(partR.getLastIteration());
    partR.setCheckOutDate(null);
    partR.setCheckOutUser(null);
    PartIteration lastIteration=partR.getLastIteration();
    lastIteration.setCheckInDate(new Date());
    esIndexer.index(lastIteration);
    partIterationEvent.select(new AnnotationLiteral<CheckedIn>(){
    }
).fire(new PartIterationChangeEvent(lastIteration));
    return partR;
  }
 else {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
}"
85947,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public PartRevision updatePartIteration(PartIterationKey pKey,String pIterationNote,Source source,List<PartUsageLink> pUsageLinks,List<InstanceAttribute> pAttributes,List<InstanceAttributeTemplate> pAttributeTemplates,DocumentRevisionKey[] pLinkKeys,String[] documentLinkComments,String[] lovNames) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, PartRevisionNotFoundException, PartMasterNotFoundException, EntityConstraintException, UserNotActiveException, ListOfValuesNotFoundException, PartUsageLinkNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pKey.getWorkspaceId());
  Locale locale=new Locale(user.getLanguage());
  PartRevisionDAO partRDAO=new PartRevisionDAO(locale,em);
  PartRevision partRev=partRDAO.loadPartR(pKey.getPartRevision());
  if (!hasPartRevisionWriteAccess(user,partRev)) {
    throw new AccessRightException(locale,user);
  }
  DocumentLinkDAO linkDAO=new DocumentLinkDAO(locale,em);
  PartIteration partIte=partRev.getLastIteration();
  if (isCheckoutByUser(user,partRev) && partIte.getKey().equals(pKey)) {
    if (pLinkKeys != null) {
      Set<DocumentLink> currentLinks=new HashSet<>(partIte.getLinkedDocuments());
      for (      DocumentLink link : currentLinks) {
        partIte.getLinkedDocuments().remove(link);
      }
      int counter=0;
      for (      DocumentRevisionKey link : pLinkKeys) {
        DocumentLink newLink=new DocumentLink(em.getReference(DocumentRevision.class,link));
        newLink.setComment(documentLinkComments[counter]);
        linkDAO.createLink(newLink);
        partIte.getLinkedDocuments().add(newLink);
        counter++;
      }
    }
    if (pAttributes != null) {
      List<InstanceAttribute> currentAttrs=partRev.getLastIteration().getInstanceAttributes();
      boolean valid=AttributesConsistencyUtils.hasValidChange(pAttributes,partRev.isAttributesLocked(),currentAttrs);
      if (!valid) {
        throw new NotAllowedException(locale,""String_Node_Str"");
      }
      partRev.getLastIteration().setInstanceAttributes(pAttributes);
    }
    if (pAttributeTemplates != null) {
      LOVDAO lovDAO=new LOVDAO(locale,em);
      List<InstanceAttributeTemplate> templateAttrs=new ArrayList<>();
      for (int i=0; i < pAttributeTemplates.size(); i++) {
        templateAttrs.add(pAttributeTemplates.get(i));
        if (pAttributeTemplates.get(i) instanceof ListOfValuesAttributeTemplate) {
          ListOfValuesAttributeTemplate lovAttr=(ListOfValuesAttributeTemplate)pAttributeTemplates.get(i);
          ListOfValuesKey lovKey=new ListOfValuesKey(user.getWorkspaceId(),lovNames[i]);
          lovAttr.setLov(lovDAO.loadLOV(lovKey));
        }
      }
      partIte.setInstanceAttributeTemplates(pAttributeTemplates);
    }
    if (pUsageLinks != null) {
      List<PartUsageLink> links=new ArrayList<>();
      for (      PartUsageLink usageLink : pUsageLinks) {
        PartUsageLink partUsageLink=findOrCreatePartLink(user,usageLink,partIte);
        links.add(partUsageLink);
      }
      partIte.setComponents(links);
      PartUsageLinkDAO partUsageLinkDAO=new PartUsageLinkDAO(new Locale(user.getLanguage()),em);
      partUsageLinkDAO.removeOrphanPartLinks();
      checkCyclicAssemblyForPartIteration(partIte);
    }
    partIte.setIterationNote(pIterationNote);
    partIte.setModificationDate(new Date());
    partIte.setSource(source);
  }
 else {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  return partRev;
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public PartRevision updatePartIteration(PartIterationKey pKey,String pIterationNote,Source source,List<PartUsageLink> pUsageLinks,List<InstanceAttribute> pAttributes,List<InstanceAttributeTemplate> pAttributeTemplates,DocumentRevisionKey[] pLinkKeys,String[] documentLinkComments,String[] lovNames) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, PartRevisionNotFoundException, PartMasterNotFoundException, EntityConstraintException, UserNotActiveException, ListOfValuesNotFoundException, PartUsageLinkNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pKey.getWorkspaceId());
  Locale locale=new Locale(user.getLanguage());
  PartRevisionDAO partRDAO=new PartRevisionDAO(locale,em);
  PartRevision partRev=partRDAO.loadPartR(pKey.getPartRevision());
  if (!hasPartRevisionWriteAccess(user,partRev)) {
    throw new AccessRightException(locale,user);
  }
  DocumentLinkDAO linkDAO=new DocumentLinkDAO(locale,em);
  PartIteration partIte=partRev.getLastIteration();
  if (isCheckoutByUser(user,partRev) && partIte.getKey().equals(pKey)) {
    if (pLinkKeys != null) {
      Set<DocumentLink> currentLinks=new HashSet<>(partIte.getLinkedDocuments());
      for (      DocumentLink link : currentLinks) {
        partIte.getLinkedDocuments().remove(link);
      }
      int counter=0;
      for (      DocumentRevisionKey link : pLinkKeys) {
        DocumentLink newLink=new DocumentLink(em.getReference(DocumentRevision.class,link));
        newLink.setComment(documentLinkComments[counter]);
        linkDAO.createLink(newLink);
        partIte.getLinkedDocuments().add(newLink);
        counter++;
      }
    }
    if (pAttributes != null) {
      List<InstanceAttribute> currentAttrs=partRev.getLastIteration().getInstanceAttributes();
      boolean valid=AttributesConsistencyUtils.hasValidChange(pAttributes,partRev.isAttributesLocked(),currentAttrs);
      if (!valid) {
        throw new NotAllowedException(locale,""String_Node_Str"");
      }
      partRev.getLastIteration().setInstanceAttributes(pAttributes);
    }
    if (pAttributeTemplates != null) {
      LOVDAO lovDAO=new LOVDAO(locale,em);
      List<InstanceAttributeTemplate> templateAttrs=new ArrayList<>();
      for (int i=0; i < pAttributeTemplates.size(); i++) {
        templateAttrs.add(pAttributeTemplates.get(i));
        if (pAttributeTemplates.get(i) instanceof ListOfValuesAttributeTemplate) {
          ListOfValuesAttributeTemplate lovAttr=(ListOfValuesAttributeTemplate)pAttributeTemplates.get(i);
          ListOfValuesKey lovKey=new ListOfValuesKey(user.getWorkspaceId(),lovNames[i]);
          lovAttr.setLov(lovDAO.loadLOV(lovKey));
        }
      }
      partIte.setInstanceAttributeTemplates(pAttributeTemplates);
    }
    if (pUsageLinks != null) {
      List<PartUsageLink> links=new ArrayList<>();
      for (      PartUsageLink usageLink : pUsageLinks) {
        PartUsageLink partUsageLink=findOrCreatePartLink(user,usageLink,partIte);
        links.add(partUsageLink);
      }
      partIte.setComponents(links);
      PartUsageLinkDAO partUsageLinkDAO=new PartUsageLinkDAO(new Locale(user.getLanguage()),em);
      partUsageLinkDAO.removeOrphanPartLinks();
      removeObsoletePathToPathLinks(user,pKey.getWorkspaceId());
      checkCyclicAssemblyForPartIteration(partIte);
    }
    partIte.setIterationNote(pIterationNote);
    partIte.setModificationDate(new Date());
    partIte.setSource(source);
  }
 else {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  return partRev;
}"
85948,"public ParallelActivityModel(WorkflowModel pWorkflowModel,String pLifeCycleState,int pTasksToComplete){
  this(pWorkflowModel,0,new ArrayList<TaskModel>(),pLifeCycleState,pTasksToComplete);
}","public ParallelActivityModel(WorkflowModel pWorkflowModel,String pLifeCycleState,int pTasksToComplete){
  this(pWorkflowModel,0,new LinkedList<>(),pLifeCycleState,pTasksToComplete);
}"
85949,"public SerialActivityModel(WorkflowModel pWorkflowModel,String pLifeCycleState){
  this(pWorkflowModel,0,new ArrayList<TaskModel>(),pLifeCycleState);
}","public SerialActivityModel(WorkflowModel pWorkflowModel,String pLifeCycleState){
  this(pWorkflowModel,0,new LinkedList<>(),pLifeCycleState);
}"
85950,"public void setActivityModel(ActivityModel activityModel){
  this.activityModel=activityModel;
  activityModelId=activityModel.getId();
}","public void setActivityModel(ActivityModel activityModel){
  this.activityModel=activityModel;
}"
85951,"@Override public int hashCode(){
  int hash=1;
  hash=31 * hash + activityModelId;
  hash=31 * hash + num;
  return hash;
}","@Override public int hashCode(){
  int hash=1;
  hash=31 * hash + getActivityModelId();
  hash=31 * hash + num;
  return hash;
}"
85952,"@Override public boolean equals(Object pObj){
  if (this == pObj) {
    return true;
  }
  if (!(pObj instanceof TaskModel)) {
    return false;
  }
  TaskModel model=(TaskModel)pObj;
  return model.activityModelId == activityModelId && model.num == num;
}","@Override public boolean equals(Object pObj){
  if (this == pObj) {
    return true;
  }
  if (!(pObj instanceof TaskModel)) {
    return false;
  }
  TaskModel model=(TaskModel)pObj;
  return model.getActivityModelId() == getActivityModelId() && model.num == num;
}"
85953,"@Override public String toString(){
  return activityModelId + ""String_Node_Str"" + num;
}","@Override public String toString(){
  return getActivityModelId() + ""String_Node_Str"" + num;
}"
85954,"public TaskModelKey(int pActivityModelId,int pNum){
  activityModelId=pActivityModelId;
  num=pNum;
}","public TaskModelKey(int pActivityModelId,int pNum){
  activityModel=pActivityModelId;
  num=pNum;
}"
85955,"@Override public int hashCode(){
  int hash=1;
  hash=31 * hash + activityModelId;
  hash=31 * hash + num;
  return hash;
}","@Override public int hashCode(){
  int hash=1;
  hash=31 * hash + activityModel;
  hash=31 * hash + num;
  return hash;
}"
85956,"@Override public boolean equals(Object pObj){
  if (this == pObj) {
    return true;
  }
  if (!(pObj instanceof TaskModelKey)) {
    return false;
  }
  TaskModelKey key=(TaskModelKey)pObj;
  return key.activityModelId == activityModelId && key.num == num;
}","@Override public boolean equals(Object pObj){
  if (this == pObj) {
    return true;
  }
  if (!(pObj instanceof TaskModelKey)) {
    return false;
  }
  TaskModelKey key=(TaskModelKey)pObj;
  return key.activityModel == activityModel && key.num == num;
}"
85957,"@Override public String toString(){
  return activityModelId + ""String_Node_Str"" + num;
}","@Override public String toString(){
  return activityModel + ""String_Node_Str"" + num;
}"
85958,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public WorkflowModel updateWorkflowModel(WorkflowModelKey workflowModelKey,String pFinalLifeCycleState,ActivityModel[] pActivityModels) throws UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, AccessRightException, WorkflowModelNotFoundException, NotAllowedException, WorkflowModelAlreadyExistsException, CreationException {
  User user=userManager.checkWorkspaceReadAccess(workflowModelKey.getWorkspaceId());
  Locale userLocale=new Locale(user.getLanguage());
  WorkflowModelDAO workflowModelDAO=new WorkflowModelDAO(userLocale,em);
  workflowModelDAO.removeAllActivityModels(workflowModelKey);
  WorkflowModel workflowModel=workflowModelDAO.loadWorkflowModel(workflowModelKey);
  checkWorkflowWriteAccess(workflowModel,user);
  checkWorkflowValidity(workflowModelKey.getWorkspaceId(),workflowModelKey.getId(),userLocale,pActivityModels);
  workflowModel.setFinalLifeCycleState(pFinalLifeCycleState);
  List<ActivityModel> activityModels=new ArrayList<>();
  Collections.addAll(activityModels,pActivityModels);
  workflowModel.setActivityModels(activityModels);
  Tools.resetParentReferences(workflowModel);
  for (  ActivityModel activityModel : activityModels) {
    em.persist(activityModel);
  }
  return workflowModel;
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public WorkflowModel updateWorkflowModel(WorkflowModelKey workflowModelKey,String pFinalLifeCycleState,ActivityModel[] pActivityModels) throws UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, AccessRightException, WorkflowModelNotFoundException, NotAllowedException, WorkflowModelAlreadyExistsException, CreationException {
  User user=userManager.checkWorkspaceReadAccess(workflowModelKey.getWorkspaceId());
  Locale userLocale=new Locale(user.getLanguage());
  WorkflowModelDAO workflowModelDAO=new WorkflowModelDAO(userLocale,em);
  workflowModelDAO.removeAllActivityModels(workflowModelKey);
  WorkflowModel workflowModel=workflowModelDAO.loadWorkflowModel(workflowModelKey);
  checkWorkflowWriteAccess(workflowModel,user);
  checkWorkflowValidity(workflowModelKey.getWorkspaceId(),workflowModelKey.getId(),userLocale,pActivityModels);
  workflowModel.setFinalLifeCycleState(pFinalLifeCycleState);
  List<ActivityModel> activityModels=new LinkedList<>();
  Collections.addAll(activityModels,pActivityModels);
  workflowModel.setActivityModels(activityModels);
  Tools.resetParentReferences(workflowModel);
  return workflowModel;
}"
85959,"public void removeWorkflowModel(WorkflowModelKey pKey) throws WorkflowModelNotFoundException {
  WorkflowModel model=loadWorkflowModel(pKey);
  removeAllActivityModels(pKey);
  em.remove(model);
}","public void removeWorkflowModel(WorkflowModelKey pKey) throws WorkflowModelNotFoundException {
  WorkflowModel model=loadWorkflowModel(pKey);
  for (  ActivityModel activity : model.getActivityModels()) {
    activity.setRelaunchActivity(null);
  }
  em.flush();
  em.remove(model);
}"
85960,"public List<WorkflowModel> findAllWorkflowModels(String pWorkspaceId){
  Query query=em.createQuery(""String_Node_Str"");
  return query.setParameter(""String_Node_Str"",pWorkspaceId).getResultList();
}","public List<WorkflowModel> findAllWorkflowModels(String pWorkspaceId){
  TypedQuery<WorkflowModel> query=em.createQuery(""String_Node_Str"",WorkflowModel.class);
  return query.setParameter(""String_Node_Str"",pWorkspaceId).getResultList();
}"
85961,"public void createWorkflowModel(WorkflowModel pModel) throws WorkflowModelAlreadyExistsException, CreationException {
  try {
    em.persist(pModel);
    em.flush();
  }
 catch (  EntityExistsException pEEEx) {
    LOGGER.log(Level.FINEST,null,pEEEx);
    throw new WorkflowModelAlreadyExistsException(mLocale,pModel);
  }
catch (  PersistenceException pPEx) {
    LOGGER.log(Level.FINEST,null,pPEx);
    throw new CreationException(mLocale);
  }
}","public void createWorkflowModel(WorkflowModel pModel) throws WorkflowModelAlreadyExistsException, CreationException {
  try {
    List<ActivityModel> activityModels=pModel.getActivityModels();
    List<List<TaskModel>> taskModels=new LinkedList<>();
    for (    ActivityModel activityModel : activityModels) {
      taskModels.add(activityModel.getTaskModels());
      activityModel.setTaskModels(new ArrayList<>());
    }
    em.persist(pModel);
    em.flush();
    int i=0;
    for (    ActivityModel activityModel : activityModels) {
      activityModel.setTaskModels(taskModels.get(i++));
    }
  }
 catch (  EntityExistsException pEEEx) {
    LOGGER.log(Level.FINEST,null,pEEEx);
    throw new WorkflowModelAlreadyExistsException(mLocale,pModel);
  }
catch (  PersistenceException pPEx) {
    LOGGER.log(Level.FINEST,null,pPEx);
    throw new CreationException(mLocale);
  }
}"
85962,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public List<PathDTO> searchPaths(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,@QueryParam(""String_Node_Str"") String partNumber,@QueryParam(""String_Node_Str"") String configSpecType,@QueryParam(""String_Node_Str"") boolean diverge) throws EntityNotFoundException, UserNotActiveException, EntityConstraintException, NotAllowedException {
  ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
  PSFilter filter=productService.getPSFilter(ciKey,configSpecType,diverge);
  List<PartLink[]> usagePaths=productService.findPartUsages(ciKey,filter,partNumber);
  List<PathDTO> pathsDTO=new ArrayList<>();
  for (  PartLink[] usagePath : usagePaths) {
    String pathAsString=com.docdoku.core.util.Tools.getPathAsString(Arrays.asList(usagePath));
    pathsDTO.add(new PathDTO(pathAsString));
  }
  return pathsDTO;
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public List<PathDTO> searchPaths(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,@QueryParam(""String_Node_Str"") String search,@QueryParam(""String_Node_Str"") String configSpecType,@QueryParam(""String_Node_Str"") boolean diverge) throws EntityNotFoundException, UserNotActiveException, EntityConstraintException, NotAllowedException {
  ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
  PSFilter filter=productService.getPSFilter(ciKey,configSpecType,diverge);
  List<PartLink[]> usagePaths=productService.findPartUsages(ciKey,filter,search);
  List<PathDTO> pathsDTO=new ArrayList<>();
  for (  PartLink[] usagePath : usagePaths) {
    String pathAsString=com.docdoku.core.util.Tools.getPathAsString(Arrays.asList(usagePath));
    pathsDTO.add(new PathDTO(pathAsString));
  }
  return pathsDTO;
}"
85963,"public void removeWorkflowModel(WorkflowModelKey pKey) throws WorkflowModelNotFoundException {
  WorkflowModel model=loadWorkflowModel(pKey);
  for (  ActivityModel activity : model.getActivityModels()) {
    activity.setRelaunchActivity(null);
  }
  em.flush();
  em.remove(model);
}","public void removeWorkflowModel(WorkflowModelKey pKey) throws WorkflowModelNotFoundException {
  WorkflowModel model=loadWorkflowModel(pKey);
  removeAllActivityModels(pKey);
  em.remove(model);
}"
85964,"public static void updateAttributes(List<InstanceAttribute> pAttributes,List<InstanceAttribute> currentAttrs){
  for (int i=0; i < currentAttrs.size(); i++) {
    InstanceAttribute currentAttr=currentAttrs.get(i);
    if (i < pAttributes.size()) {
      InstanceAttribute newAttr=pAttributes.get(i);
      if (currentAttr.getClass() != newAttr.getClass() || newAttr.getClass() == InstanceListOfValuesAttribute.class) {
        currentAttrs.set(i,newAttr);
      }
 else {
        currentAttrs.get(i).setName(newAttr.getName());
        currentAttrs.get(i).setValue(newAttr.getValue());
        currentAttrs.get(i).setMandatory(newAttr.isMandatory());
        currentAttrs.get(i).setLocked(newAttr.isLocked());
      }
    }
 else {
      currentAttrs.remove(currentAttrs.size() - 1);
    }
  }
  for (int i=currentAttrs.size(); i < pAttributes.size(); i++) {
    InstanceAttribute newAttr=pAttributes.get(i);
    currentAttrs.add(newAttr);
  }
}","public static void updateAttributes(List<InstanceAttribute> pAttributes,List<InstanceAttribute> currentAttrs){
  for (int i=0; i < currentAttrs.size(); i++) {
    InstanceAttribute currentAttr=currentAttrs.get(i);
    if (i < pAttributes.size()) {
      InstanceAttribute newAttr=pAttributes.get(i);
      if (currentAttr.getClass() != newAttr.getClass() || newAttr.getClass() == InstanceListOfValuesAttribute.class) {
        currentAttrs.set(i,newAttr);
      }
 else {
        currentAttrs.get(i).setName(newAttr.getName());
        currentAttrs.get(i).setValue(newAttr.getValue());
        currentAttrs.get(i).setMandatory(newAttr.isMandatory());
        currentAttrs.get(i).setLocked(newAttr.isLocked());
      }
    }
 else {
      currentAttrs.remove(pAttributes.size() - 1);
    }
  }
  for (int i=currentAttrs.size(); i < pAttributes.size(); i++) {
    InstanceAttribute newAttr=pAttributes.get(i);
    currentAttrs.add(newAttr);
  }
}"
85965,"/** 
 * Get the part revision key matching a hit line.
 * @param source The source of a SearchHit
 * @return The part revision key
 */
protected static PartRevisionKey getPartRevisionKey(Map<String,Object> source){
  return new PartRevisionKey(extractValue(source,WORKSPACEID_KEY),extractValue(source,""String_Node_Str""),extractValue(source,VERSION_KEY));
}","/** 
 * Get the part revision key matching a hit line.
 * @param source The source of a SearchHit
 * @return The part revision key
 */
protected static PartRevisionKey getPartRevisionKey(Map<String,Object> source){
  return new PartRevisionKey(extractValue(source,WORKSPACE_ID_KEY),extractValue(source,PART_NUMBER_KEY),extractValue(source,VERSION_KEY));
}"
85966,"/** 
 * Create the Json for a new Part. This will be used if and only if the PartRevision has not been indexed in elastic search.
 * @param part the PartIteration which was checkin.
 * @return The Json produced contains the PartRevision information and the information of all the iteration.
 */
protected static XContentBuilder partRevisionToJson(PartIteration part){
  try {
    XContentBuilder tmp=XContentFactory.jsonBuilder().startObject();
    setField(tmp,WORKSPACEID_KEY,part.getWorkspaceId(),0.6f);
    setField(tmp,""String_Node_Str"",part.getPartNumber(),4.75f);
    setField(tmp,""String_Node_Str"",part.getPartRevision().getPartMaster().getName(),5f);
    setField(tmp,TYPE_KEY,part.getPartRevision().getPartMaster().getType(),2f);
    setField(tmp,VERSION_KEY,part.getPartVersion(),0.10f);
    tmp.startArray(ITERATIONS_KEY);
    for (    PartIteration iteration : part.getPartRevision().getPartIterations()) {
      tmp.startObject();
      setField(tmp,""String_Node_Str"",iteration.getIteration(),0.10f);
      setField(tmp,""String_Node_Str"",iteration.getPartRevision().getPartMaster().isStandardPart(),0.05f);
      if (iteration.getAuthor() != null) {
        tmp.startObject(AUTHOR_KEY);
        setField(tmp,AUTHOR_LOGIN_KEY,iteration.getAuthor().getLogin(),0.6f);
        setField(tmp,AUTHOR_NAME_KEY,iteration.getAuthor().getName(),0.6f);
        tmp.endObject();
      }
      setField(tmp,CREATION_DATE_KEY,iteration.getCreationDate(),0.4f);
      setField(tmp,MODIFICATION_DATE_KEY,iteration.getModificationDate(),0.4f);
      setField(tmp,""String_Node_Str"",iteration.getPartRevision().getDescription(),2f);
      setField(tmp,""String_Node_Str"",iteration.getIterationNote(),0.5f);
      setField(tmp,""String_Node_Str"",iteration.getPartRevision().getWorkflow(),0.5f);
      if (!iteration.getInstanceAttributes().isEmpty()) {
        tmp.startObject(""String_Node_Str"");
        Collection<InstanceAttribute> listAttr=iteration.getInstanceAttributes();
        for (        InstanceAttribute attr : listAttr) {
          setField(tmp,attr.getNameWithoutWhiteSpace(),""String_Node_Str"" + attr.getValue(),0.6f);
        }
        tmp.endObject();
      }
      tmp.endObject();
    }
    tmp.endArray();
    tmp.endObject();
    return tmp;
  }
 catch (  IOException e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + part + ""String_Node_Str"",e);
    return null;
  }
}","/** 
 * Create the Json for a new Part. This will be used if and only if the PartRevision has not been indexed in elastic search.
 * @param part the PartIteration which was checkin.
 * @return The Json produced contains the PartRevision information and the information of all the iteration.
 */
protected static XContentBuilder partRevisionToJson(PartIteration part){
  try {
    XContentBuilder tmp=XContentFactory.jsonBuilder().startObject();
    setField(tmp,WORKSPACE_ID_KEY,part.getWorkspaceId(),0.6f);
    setField(tmp,PART_NUMBER_KEY,part.getPartNumber(),4.75f);
    setField(tmp,PART_NAME_KEY,part.getPartRevision().getPartMaster().getName(),5f);
    setField(tmp,TYPE_KEY,part.getPartRevision().getPartMaster().getType(),2f);
    setField(tmp,VERSION_KEY,part.getPartVersion(),0.10f);
    tmp.startArray(ITERATIONS_KEY);
    for (    PartIteration iteration : part.getPartRevision().getPartIterations()) {
      tmp.startObject();
      setField(tmp,ITERATION_KEY,iteration.getIteration(),0.10f);
      setField(tmp,STANDARD_PART_KEY,iteration.getPartRevision().getPartMaster().isStandardPart(),0.05f);
      if (iteration.getAuthor() != null) {
        tmp.startObject(AUTHOR_KEY);
        setField(tmp,AUTHOR_LOGIN_KEY,iteration.getAuthor().getLogin(),0.6f);
        setField(tmp,AUTHOR_NAME_KEY,iteration.getAuthor().getName(),0.6f);
        tmp.endObject();
      }
      setField(tmp,CREATION_DATE_KEY,iteration.getCreationDate(),0.4f);
      setField(tmp,MODIFICATION_DATE_KEY,iteration.getModificationDate(),0.4f);
      setField(tmp,DESCRIPTION_KEY,iteration.getPartRevision().getDescription(),2f);
      setField(tmp,REVISION_NOTE_KEY,iteration.getIterationNote(),0.5f);
      setField(tmp,WORKFLOW_KEY,iteration.getPartRevision().getWorkflow(),0.5f);
      if (!iteration.getInstanceAttributes().isEmpty()) {
        tmp.startObject(ATTRIBUTES_KEY);
        Collection<InstanceAttribute> listAttr=iteration.getInstanceAttributes();
        for (        InstanceAttribute attr : listAttr) {
          setField(tmp,attr.getNameWithoutWhiteSpace(),""String_Node_Str"" + attr.getValue(),0.6f);
        }
        tmp.endObject();
      }
      tmp.endObject();
    }
    tmp.endArray();
    tmp.endObject();
    return tmp;
  }
 catch (  IOException e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + part + ""String_Node_Str"",e);
    return null;
  }
}"
85967,"/** 
 * Create a Map of all the data of an iteration.
 * @param part PartIteration to be Mapped.
 * @return The Map is well formatted to be used by an elasticsearch Script
 */
protected static Map<String,Object> partIterationMap(PartIteration part){
  Map<String,Object> params=new HashMap<>();
  setParam(params,WORKSPACEID_KEY,part.getWorkspaceId(),0.6f);
  setParam(params,VERSION_KEY,part.getPartVersion(),0.10f);
  setParam(params,""String_Node_Str"",part.getIteration(),0.10f);
  setParam(params,""String_Node_Str"",part.getPartRevision().getPartMaster().isStandardPart(),0.05f);
  if (part.getAuthor() != null) {
    Map<String,Object> authorParams=new HashMap<>();
    params.put(AUTHOR_KEY,authorParams);
    setParam(authorParams,AUTHOR_LOGIN_KEY,part.getAuthor().getLogin(),0.6f);
    setParam(authorParams,AUTHOR_NAME_KEY,part.getAuthor().getName(),0.6f);
  }
  setParam(params,CREATION_DATE_KEY,part.getCreationDate(),0.4f);
  setParam(params,MODIFICATION_DATE_KEY,part.getModificationDate(),0.4f);
  setParam(params,""String_Node_Str"",part.getPartRevision().getDescription(),2f);
  setParam(params,""String_Node_Str"",part.getIterationNote(),0.5f);
  setParam(params,""String_Node_Str"",part.getPartRevision().getWorkflow(),0.5f);
  if (!part.getInstanceAttributes().isEmpty()) {
    Collection<InstanceAttribute> listAttr=part.getInstanceAttributes();
    Map<String,Object> attributesParams=new HashMap<>();
    params.put(""String_Node_Str"",attributesParams);
    for (    InstanceAttribute attr : listAttr) {
      setParam(attributesParams,attr.getNameWithoutWhiteSpace(),""String_Node_Str"" + attr.getValue(),0.6f);
    }
  }
  return params;
}","/** 
 * Create a Map of all the data of an iteration.
 * @param part PartIteration to be Mapped.
 * @return The Map is well formatted to be used by an elasticsearch Script
 */
protected static Map<String,Object> partIterationMap(PartIteration part){
  Map<String,Object> params=new HashMap<>();
  setParam(params,WORKSPACE_ID_KEY,part.getWorkspaceId(),0.6f);
  setParam(params,VERSION_KEY,part.getPartVersion(),0.10f);
  setParam(params,ITERATION_KEY,part.getIteration(),0.10f);
  setParam(params,STANDARD_PART_KEY,part.getPartRevision().getPartMaster().isStandardPart(),0.05f);
  if (part.getAuthor() != null) {
    Map<String,Object> authorParams=new HashMap<>();
    params.put(AUTHOR_KEY,authorParams);
    setParam(authorParams,AUTHOR_LOGIN_KEY,part.getAuthor().getLogin(),0.6f);
    setParam(authorParams,AUTHOR_NAME_KEY,part.getAuthor().getName(),0.6f);
  }
  setParam(params,CREATION_DATE_KEY,part.getCreationDate(),0.4f);
  setParam(params,MODIFICATION_DATE_KEY,part.getModificationDate(),0.4f);
  setParam(params,DESCRIPTION_KEY,part.getPartRevision().getDescription(),2f);
  setParam(params,REVISION_NOTE_KEY,part.getIterationNote(),0.5f);
  setParam(params,WORKFLOW_KEY,part.getPartRevision().getWorkflow(),0.5f);
  if (!part.getInstanceAttributes().isEmpty()) {
    Collection<InstanceAttribute> listAttr=part.getInstanceAttributes();
    Map<String,Object> attributesParams=new HashMap<>();
    params.put(ATTRIBUTES_KEY,attributesParams);
    for (    InstanceAttribute attr : listAttr) {
      setParam(attributesParams,attr.getNameWithoutWhiteSpace(),""String_Node_Str"" + attr.getValue(),0.6f);
    }
  }
  return params;
}"
85968,"private static void setParam(Map<String,Object> params,String name,Object value,float coef){
  if (value != null) {
    Object array[]=new Object[2];
    array[0]=value;
    array[1]=coef;
    params.put(name,array);
  }
}","private static void setParam(Map<String,Object> params,String name,Workflow value,float coef){
  if (value != null) {
    Object array[]=new Object[2];
    String finalLifeCycleState=value.getFinalLifeCycleState();
    finalLifeCycleState=(finalLifeCycleState != null && !finalLifeCycleState.isEmpty()) ? finalLifeCycleState : ""String_Node_Str"";
    array[0]=finalLifeCycleState;
    array[1]=coef;
    params.put(name,array);
  }
}"
85969,"/** 
 * Convert a Document Revision to a JSON Builder.
 * @param doc           Document to pass to JSON
 * @param contentInputs Map of binary resources content
 * @return A JSON Builder to index
 */
protected static XContentBuilder documentRevisionToJSON(DocumentIteration doc,Map<String,String> contentInputs){
  try {
    XContentBuilder tmp=XContentFactory.jsonBuilder().startObject();
    setField(tmp,WORKSPACEID_KEY,doc.getWorkspaceId(),0.6f);
    setField(tmp,""String_Node_Str"",doc.getDocumentRevision().getDocumentMasterId(),4.75f);
    setField(tmp,""String_Node_Str"",doc.getDocumentRevision().getTitle(),5f);
    setField(tmp,VERSION_KEY,doc.getDocumentVersion(),0.10f);
    tmp.startArray(ITERATIONS_KEY);
    for (    DocumentIteration iteration : doc.getDocumentRevision().getDocumentIterations()) {
      tmp.startObject();
      setField(tmp,""String_Node_Str"",""String_Node_Str"" + iteration.getIteration(),0.10f);
      if (doc.getAuthor() != null) {
        tmp.startObject(AUTHOR_KEY);
        setField(tmp,AUTHOR_LOGIN_KEY,iteration.getAuthor().getLogin(),0.6f);
        setField(tmp,AUTHOR_NAME_KEY,iteration.getAuthor().getName(),0.6f);
        tmp.endObject();
      }
      setField(tmp,TYPE_KEY,iteration.getDocumentRevision().getDocumentMaster().getType(),2f);
      setField(tmp,CREATION_DATE_KEY,iteration.getDocumentRevision().getCreationDate(),0.4f);
      setField(tmp,MODIFICATION_DATE_KEY,iteration.getModificationDate(),0.4f);
      setField(tmp,""String_Node_Str"",iteration.getDocumentRevision().getDescription(),2f);
      setField(tmp,""String_Node_Str"",iteration.getRevisionNote(),0.5f);
      setField(tmp,""String_Node_Str"",iteration.getDocumentRevision().getWorkflow(),0.5f);
      setField(tmp,""String_Node_Str"",iteration.getDocumentRevision().getLocation().getShortName(),0.5f);
      if (!iteration.getDocumentRevision().getTags().isEmpty()) {
        tmp.startArray(""String_Node_Str"");
        for (        Tag tag : doc.getDocumentRevision().getTags()) {
          tmp.value(tag.getLabel());
        }
        tmp.endArray();
      }
      if (!iteration.getInstanceAttributes().isEmpty()) {
        tmp.startObject(""String_Node_Str"");
        Collection<InstanceAttribute> listAttr=iteration.getInstanceAttributes();
        for (        InstanceAttribute attr : listAttr) {
          setField(tmp,attr.getNameWithoutWhiteSpace(),""String_Node_Str"" + attr.getValue(),0.6f);
        }
        tmp.endObject();
      }
      if (!iteration.getAttachedFiles().isEmpty()) {
        tmp.startObject(""String_Node_Str"");
        for (        Map.Entry<String,String> contentInput : contentInputs.entrySet()) {
          tmp.startObject(contentInput.getKey());
          setField(tmp,AUTHOR_NAME_KEY,contentInput.getKey(),0.8f);
          setField(tmp,""String_Node_Str"",contentInput.getValue(),0.6f);
          tmp.endObject();
        }
        tmp.endObject();
      }
      tmp.endObject();
    }
    tmp.endArray();
    tmp.endObject();
    return tmp;
  }
 catch (  IOException e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + doc + ""String_Node_Str"",e);
    return null;
  }
}","/** 
 * Convert a Document Revision to a JSON Builder.
 * @param doc           Document to pass to JSON
 * @param contentInputs Map of binary resources content
 * @return A JSON Builder to index
 */
protected static XContentBuilder documentRevisionToJSON(DocumentIteration doc,Map<String,String> contentInputs){
  try {
    XContentBuilder tmp=XContentFactory.jsonBuilder().startObject();
    setField(tmp,WORKSPACE_ID_KEY,doc.getWorkspaceId(),0.6f);
    setField(tmp,DOCUMENT_ID_KEY,doc.getDocumentRevision().getDocumentMasterId(),4.75f);
    setField(tmp,TITLE_KEY,doc.getDocumentRevision().getTitle(),5f);
    setField(tmp,VERSION_KEY,doc.getDocumentVersion(),0.10f);
    tmp.startArray(ITERATIONS_KEY);
    for (    DocumentIteration iteration : doc.getDocumentRevision().getDocumentIterations()) {
      tmp.startObject();
      setField(tmp,ITERATION_KEY,""String_Node_Str"" + iteration.getIteration(),0.10f);
      if (doc.getAuthor() != null) {
        tmp.startObject(AUTHOR_KEY);
        setField(tmp,AUTHOR_LOGIN_KEY,iteration.getAuthor().getLogin(),0.6f);
        setField(tmp,AUTHOR_NAME_KEY,iteration.getAuthor().getName(),0.6f);
        tmp.endObject();
      }
      setField(tmp,TYPE_KEY,iteration.getDocumentRevision().getDocumentMaster().getType(),2f);
      setField(tmp,CREATION_DATE_KEY,iteration.getDocumentRevision().getCreationDate(),0.4f);
      setField(tmp,MODIFICATION_DATE_KEY,iteration.getModificationDate(),0.4f);
      setField(tmp,DESCRIPTION_KEY,iteration.getDocumentRevision().getDescription(),2f);
      setField(tmp,REVISION_NOTE_KEY,iteration.getRevisionNote(),0.5f);
      setField(tmp,WORKFLOW_KEY,iteration.getDocumentRevision().getWorkflow(),0.5f);
      setField(tmp,FOLDER_KEY,iteration.getDocumentRevision().getLocation().getShortName(),0.5f);
      if (!iteration.getDocumentRevision().getTags().isEmpty()) {
        tmp.startArray(TAGS_KEY);
        for (        Tag tag : doc.getDocumentRevision().getTags()) {
          tmp.value(tag.getLabel());
        }
        tmp.endArray();
      }
      if (!iteration.getInstanceAttributes().isEmpty()) {
        tmp.startObject(ATTRIBUTES_KEY);
        Collection<InstanceAttribute> listAttr=iteration.getInstanceAttributes();
        for (        InstanceAttribute attr : listAttr) {
          setField(tmp,attr.getNameWithoutWhiteSpace(),""String_Node_Str"" + attr.getValue(),0.6f);
        }
        tmp.endObject();
      }
      if (!iteration.getAttachedFiles().isEmpty()) {
        tmp.startObject(FILES_KEY);
        for (        Map.Entry<String,String> contentInput : contentInputs.entrySet()) {
          tmp.startObject(contentInput.getKey());
          setField(tmp,AUTHOR_NAME_KEY,contentInput.getKey(),0.8f);
          setField(tmp,CONTENT_KEY,contentInput.getValue(),0.6f);
          tmp.endObject();
        }
        tmp.endObject();
      }
      tmp.endObject();
    }
    tmp.endArray();
    tmp.endObject();
    return tmp;
  }
 catch (  IOException e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + doc + ""String_Node_Str"",e);
    return null;
  }
}"
85970,"/** 
 * Get the document revision key matching a hit line.
 * @param source The source of a SearchHit
 * @return The document revision key
 */
protected static DocumentRevisionKey getDocumentRevisionKey(Map<String,Object> source){
  return new DocumentRevisionKey(extractValue(source,WORKSPACEID_KEY),extractValue(source,""String_Node_Str""),extractValue(source,VERSION_KEY));
}","/** 
 * Get the document revision key matching a hit line.
 * @param source The source of a SearchHit
 * @return The document revision key
 */
protected static DocumentRevisionKey getDocumentRevisionKey(Map<String,Object> source){
  return new DocumentRevisionKey(extractValue(source,WORKSPACE_ID_KEY),extractValue(source,DOCUMENT_ID_KEY),extractValue(source,VERSION_KEY));
}"
85971,"/** 
 * Convert a Document Revision to a JSON Builder. This will be used if and only if the DocumentRevision has not been indexed in elastic search.
 * @param doc           Document to pass to JSON
 * @param contentInputs Map of binary resources content
 * @return A JSON Builder to index
 */
protected static Map<String,Object> docIterationMap(DocumentIteration doc,Map<String,String> contentInputs){
  Map<String,Object> params=new HashMap<>();
  setParam(params,WORKSPACEID_KEY,doc.getWorkspaceId(),0.6f);
  setParam(params,""String_Node_Str"",doc.getDocumentRevision().getDocumentMasterId(),4.75f);
  setParam(params,""String_Node_Str"",doc.getDocumentRevision().getTitle(),5f);
  setParam(params,VERSION_KEY,doc.getDocumentVersion(),0.10f);
  setParam(params,""String_Node_Str"",""String_Node_Str"" + doc.getIteration(),0.10f);
  if (doc.getAuthor() != null) {
    Map<String,Object> authorParams=new HashMap<>();
    params.put(AUTHOR_KEY,authorParams);
    setParam(authorParams,AUTHOR_LOGIN_KEY,doc.getAuthor().getLogin(),0.6f);
    setParam(authorParams,AUTHOR_NAME_KEY,doc.getAuthor().getName(),0.6f);
  }
  setParam(params,TYPE_KEY,doc.getDocumentRevision().getDocumentMaster().getType(),2f);
  setParam(params,CREATION_DATE_KEY,doc.getDocumentRevision().getCreationDate(),0.4f);
  setParam(params,MODIFICATION_DATE_KEY,doc.getModificationDate(),0.4f);
  setParam(params,""String_Node_Str"",doc.getDocumentRevision().getDescription(),2f);
  setParam(params,""String_Node_Str"",doc.getRevisionNote(),0.5f);
  setParam(params,""String_Node_Str"",doc.getDocumentRevision().getWorkflow(),0.5f);
  setParam(params,""String_Node_Str"",doc.getDocumentRevision().getLocation().getShortName(),0.5f);
  if (!doc.getDocumentRevision().getTags().isEmpty()) {
    params.put(""String_Node_Str"",doc.getDocumentRevision().getTags().toArray());
  }
  if (!doc.getInstanceAttributes().isEmpty()) {
    Map<String,Object> attrParams=new HashMap<>();
    params.put(""String_Node_Str"",attrParams);
    Collection<InstanceAttribute> listAttr=doc.getInstanceAttributes();
    for (    InstanceAttribute attr : listAttr) {
      setParam(attrParams,attr.getNameWithoutWhiteSpace(),""String_Node_Str"" + attr.getValue(),0.6f);
    }
  }
  if (!doc.getAttachedFiles().isEmpty()) {
    Map<String,Object> filesParams=new HashMap<>();
    params.put(""String_Node_Str"",filesParams);
    for (    Map.Entry<String,String> contentInput : contentInputs.entrySet()) {
      Map<String,Object> map=new HashMap<>();
      filesParams.put(contentInput.getKey(),map);
      setParam(map,AUTHOR_NAME_KEY,contentInput.getKey(),0.8f);
      setParam(map,""String_Node_Str"",contentInput.getValue(),0.6f);
    }
  }
  return params;
}","/** 
 * Convert a Document Revision to a JSON Builder. This will be used if and only if the DocumentRevision has not been indexed in elastic search.
 * @param doc           Document to pass to JSON
 * @param contentInputs Map of binary resources content
 * @return A JSON Builder to index
 */
protected static Map<String,Object> docIterationMap(DocumentIteration doc,Map<String,String> contentInputs){
  Map<String,Object> params=new HashMap<>();
  setParam(params,WORKSPACE_ID_KEY,doc.getWorkspaceId(),0.6f);
  setParam(params,DOCUMENT_ID_KEY,doc.getDocumentRevision().getDocumentMasterId(),4.75f);
  setParam(params,TITLE_KEY,doc.getDocumentRevision().getTitle(),5f);
  setParam(params,VERSION_KEY,doc.getDocumentVersion(),0.10f);
  setParam(params,ITERATION_KEY,""String_Node_Str"" + doc.getIteration(),0.10f);
  if (doc.getAuthor() != null) {
    Map<String,Object> authorParams=new HashMap<>();
    params.put(AUTHOR_KEY,authorParams);
    setParam(authorParams,AUTHOR_LOGIN_KEY,doc.getAuthor().getLogin(),0.6f);
    setParam(authorParams,AUTHOR_NAME_KEY,doc.getAuthor().getName(),0.6f);
  }
  setParam(params,TYPE_KEY,doc.getDocumentRevision().getDocumentMaster().getType(),2f);
  setParam(params,CREATION_DATE_KEY,doc.getDocumentRevision().getCreationDate(),0.4f);
  setParam(params,MODIFICATION_DATE_KEY,doc.getModificationDate(),0.4f);
  setParam(params,DESCRIPTION_KEY,doc.getDocumentRevision().getDescription(),2f);
  setParam(params,REVISION_NOTE_KEY,doc.getRevisionNote(),0.5f);
  setParam(params,WORKFLOW_KEY,doc.getDocumentRevision().getWorkflow(),0.5f);
  setParam(params,FOLDER_KEY,doc.getDocumentRevision().getLocation().getShortName(),0.5f);
  if (!doc.getDocumentRevision().getTags().isEmpty()) {
    List<String> labels=new ArrayList<>();
    for (    Tag tag : doc.getDocumentRevision().getTags()) {
      labels.add(tag.getLabel());
    }
    params.put(TAGS_KEY,labels);
  }
  if (!doc.getInstanceAttributes().isEmpty()) {
    Map<String,Object> attrParams=new HashMap<>();
    params.put(ATTRIBUTES_KEY,attrParams);
    Collection<InstanceAttribute> listAttr=doc.getInstanceAttributes();
    for (    InstanceAttribute attr : listAttr) {
      setParam(attrParams,attr.getNameWithoutWhiteSpace(),""String_Node_Str"" + attr.getValue(),0.6f);
    }
  }
  if (!doc.getAttachedFiles().isEmpty()) {
    Map<String,Object> filesParams=new HashMap<>();
    params.put(FILES_KEY,filesParams);
    for (    Map.Entry<String,String> contentInput : contentInputs.entrySet()) {
      Map<String,Object> map=new HashMap<>();
      filesParams.put(contentInput.getKey(),map);
      setParam(map,AUTHOR_NAME_KEY,contentInput.getKey(),0.8f);
      setParam(map,CONTENT_KEY,contentInput.getValue(),0.6f);
    }
  }
  return params;
}"
85972,"public String marshal(Date date) throws Exception {
  if (date == null) {
    return ""String_Node_Str"";
  }
  SimpleDateFormat df=new SimpleDateFormat(pattern);
  df.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  return df.format(date);
}","public String marshal(Date date) throws Exception {
  if (date == null) {
    return null;
  }
  SimpleDateFormat df=new SimpleDateFormat(pattern);
  df.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  return df.format(date);
}"
85973,"@Override public void writeTo(FileExportEntity fileExportEntity,Class<?> aClass,Type type,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> multivaluedMap,OutputStream outputStream) throws IOException, WebApplicationException {
  ZipOutputStream zs=new ZipOutputStream(outputStream);
  try {
    Map<String,Set<BinaryResource>> binariesInTree=productService.getBinariesInTree(fileExportEntity.getBaselineId(),fileExportEntity.getConfigurationItemKey().getWorkspace(),fileExportEntity.getConfigurationItemKey(),fileExportEntity.getPsFilter(),fileExportEntity.isExportNativeCADFile(),fileExportEntity.isExportDocumentLinks());
    Set<Map.Entry<String,Set<BinaryResource>>> entries=binariesInTree.entrySet();
    List<String> baselinedSourcesName=new ArrayList<>();
    if (fileExportEntity.isExportDocumentLinks() && fileExportEntity.getBaselineId() != null) {
      List<BinaryResource> baselinedSources=productService.getBinaryResourceFromBaseline(fileExportEntity.getBaselineId());
      for (      BinaryResource binary : baselinedSources) {
        baselinedSourcesName.add(binary.getName());
      }
      for (      BinaryResource binaryResource : baselinedSources) {
        addToZipFile(binaryResource,""String_Node_Str"" + BinaryResource.getFolderName(binaryResource.getFullName()),zs);
      }
    }
    for (    Map.Entry<String,Set<BinaryResource>> entry : entries) {
      String partNumberFolderName=entry.getKey();
      String folderName;
      Set<BinaryResource> files=entry.getValue();
      for (      BinaryResource binaryResource : files) {
        if (!baselinedSourcesName.contains(binaryResource.getName())) {
          try {
            if (binaryResource.isNativeCADFile()) {
              folderName=partNumberFolderName + ""String_Node_Str"";
            }
 else             if (binaryResource.isAttachedFile()) {
              folderName=partNumberFolderName + ""String_Node_Str"";
            }
 else {
              folderName=partNumberFolderName;
            }
            addToZipFile(binaryResource,folderName,zs);
          }
 catch (          StorageException e) {
            e.printStackTrace();
          }
        }
      }
    }
    if (fileExportEntity.getSerialNumber() != null) {
      addProductInstanceDataToZip(zs,fileExportEntity.getConfigurationItemKey(),fileExportEntity.getSerialNumber());
    }
  }
 catch (  UserNotFoundException e) {
    e.printStackTrace();
  }
catch (  UserNotActiveException e) {
    e.printStackTrace();
  }
catch (  WorkspaceNotFoundException e) {
    e.printStackTrace();
  }
catch (  ConfigurationItemNotFoundException e) {
    e.printStackTrace();
  }
catch (  NotAllowedException e) {
    e.printStackTrace();
  }
catch (  EntityConstraintException e) {
    e.printStackTrace();
  }
catch (  PartMasterNotFoundException e) {
    e.printStackTrace();
  }
catch (  ProductInstanceMasterNotFoundException e) {
    e.printStackTrace();
  }
catch (  StorageException e) {
    e.printStackTrace();
  }
  zs.close();
}","@Override public void writeTo(FileExportEntity fileExportEntity,Class<?> aClass,Type type,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> multivaluedMap,OutputStream outputStream) throws IOException, WebApplicationException {
  ZipOutputStream zs=new ZipOutputStream(outputStream);
  try {
    Map<String,Set<BinaryResource>> binariesInTree=productService.getBinariesInTree(fileExportEntity.getBaselineId(),fileExportEntity.getConfigurationItemKey().getWorkspace(),fileExportEntity.getConfigurationItemKey(),fileExportEntity.getPsFilter(),fileExportEntity.isExportNativeCADFile(),fileExportEntity.isExportDocumentLinks());
    Set<Map.Entry<String,Set<BinaryResource>>> entries=binariesInTree.entrySet();
    List<String> baselinedSourcesName=new ArrayList<>();
    if (fileExportEntity.isExportDocumentLinks() && fileExportEntity.getBaselineId() != null) {
      List<BinaryResource> baselinedSources=productService.getBinaryResourceFromBaseline(fileExportEntity.getBaselineId());
      for (      BinaryResource binaryResource : baselinedSources) {
        String folderName=BinaryResource.getFolderName(binaryResource.getFullName());
        baselinedSourcesName.add(folderName);
        addToZipFile(binaryResource,""String_Node_Str"" + folderName,zs);
      }
    }
    for (    Map.Entry<String,Set<BinaryResource>> entry : entries) {
      String partNumberFolderName=entry.getKey();
      String folderName;
      Set<BinaryResource> files=entry.getValue();
      for (      BinaryResource binaryResource : files) {
        try {
          if (binaryResource.isNativeCADFile()) {
            folderName=partNumberFolderName + ""String_Node_Str"";
          }
 else           if (binaryResource.isAttachedFile()) {
            folderName=partNumberFolderName + ""String_Node_Str"";
          }
 else {
            folderName=partNumberFolderName;
          }
          addToZipFile(binaryResource,folderName,zs);
        }
 catch (        StorageException e) {
          e.printStackTrace();
        }
      }
    }
    if (fileExportEntity.getSerialNumber() != null) {
      addProductInstanceDataToZip(zs,fileExportEntity.getConfigurationItemKey(),fileExportEntity.getSerialNumber(),baselinedSourcesName);
    }
  }
 catch (  UserNotFoundException e) {
    e.printStackTrace();
  }
catch (  UserNotActiveException e) {
    e.printStackTrace();
  }
catch (  WorkspaceNotFoundException e) {
    e.printStackTrace();
  }
catch (  ConfigurationItemNotFoundException e) {
    e.printStackTrace();
  }
catch (  NotAllowedException e) {
    e.printStackTrace();
  }
catch (  EntityConstraintException e) {
    e.printStackTrace();
  }
catch (  PartMasterNotFoundException e) {
    e.printStackTrace();
  }
catch (  ProductInstanceMasterNotFoundException e) {
    e.printStackTrace();
  }
catch (  StorageException e) {
    e.printStackTrace();
  }
  zs.close();
}"
85974,"private void addProductInstanceDataToZip(ZipOutputStream zs,ConfigurationItemKey configurationItemKey,String serialNumber) throws UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, ProductInstanceMasterNotFoundException, IOException, StorageException {
  ProductInstanceMaster productInstanceMaster=productInstanceService.getProductInstanceMaster(new ProductInstanceMasterKey(serialNumber,configurationItemKey));
  ProductInstanceIteration lastIteration=productInstanceMaster.getLastIteration();
  for (  BinaryResource attachedFile : lastIteration.getAttachedFiles()) {
    addToZipFile(attachedFile,""String_Node_Str"",zs);
  }
  for (  DocumentLink docLink : lastIteration.getLinkedDocuments()) {
    for (    BinaryResource linkedFile : docLink.getTargetDocument().getLastIteration().getAttachedFiles()) {
      addToZipFile(linkedFile,""String_Node_Str"" + docLink.getTargetDocument().getLastIteration().toString(),zs);
    }
  }
}","private void addProductInstanceDataToZip(ZipOutputStream zs,ConfigurationItemKey configurationItemKey,String serialNumber,List<String> baselinedSourcesName) throws UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, ProductInstanceMasterNotFoundException, IOException, StorageException {
  ProductInstanceMaster productInstanceMaster=productInstanceService.getProductInstanceMaster(new ProductInstanceMasterKey(serialNumber,configurationItemKey));
  ProductInstanceIteration lastIteration=productInstanceMaster.getLastIteration();
  for (  BinaryResource attachedFile : lastIteration.getAttachedFiles()) {
    addToZipFile(attachedFile,""String_Node_Str"",zs);
  }
  for (  DocumentLink docLink : lastIteration.getLinkedDocuments()) {
    for (    BinaryResource linkedFile : docLink.getTargetDocument().getLastIteration().getAttachedFiles()) {
      String folderName=docLink.getTargetDocument().getLastIteration().toString();
      if (!baselinedSourcesName.contains(folderName)) {
        addToZipFile(linkedFile,""String_Node_Str"" + folderName,zs);
      }
    }
  }
}"
85975,"private void addProductInstanceDataToZip(ZipOutputStream zs,ConfigurationItemKey configurationItemKey,String serialNumber) throws UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, ProductInstanceMasterNotFoundException, IOException, StorageException {
  ProductInstanceMaster productInstanceMaster=productInstanceService.getProductInstanceMaster(new ProductInstanceMasterKey(serialNumber,configurationItemKey));
  ProductInstanceIteration lastIteration=productInstanceMaster.getLastIteration();
  Set<BinaryResource> attachedFiles=lastIteration.getAttachedFiles();
  for (  Map.Entry<BaselinedDocumentKey,BaselinedDocument> doc : lastIteration.getBaselinedDocuments().entrySet()) {
    for (    BinaryResource binaryResource : doc.getValue().getTargetDocument().getAttachedFiles()) {
      attachedFiles.add(binaryResource);
    }
  }
  for (  BinaryResource attachedFile : attachedFiles) {
    addToZipFile(attachedFile,productInstanceMaster.getSerialNumber(),zs);
  }
}","private void addProductInstanceDataToZip(ZipOutputStream zs,ConfigurationItemKey configurationItemKey,String serialNumber) throws UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, ProductInstanceMasterNotFoundException, IOException, StorageException {
  ProductInstanceMaster productInstanceMaster=productInstanceService.getProductInstanceMaster(new ProductInstanceMasterKey(serialNumber,configurationItemKey));
  ProductInstanceIteration lastIteration=productInstanceMaster.getLastIteration();
  Set<BinaryResource> attachedFiles=lastIteration.getAttachedFiles();
  for (  BinaryResource attachedFile : attachedFiles) {
    addToZipFile(attachedFile,productInstanceMaster.getSerialNumber(),zs);
  }
}"
85976,"@Override public void writeTo(FileExportEntity fileExportEntity,Class<?> aClass,Type type,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> multivaluedMap,OutputStream outputStream) throws IOException, WebApplicationException {
  ZipOutputStream zs=new ZipOutputStream(outputStream);
  try {
    Map<String,Set<BinaryResource>> binariesInTree=productService.getBinariesInTree(fileExportEntity.getBaselineId(),fileExportEntity.getConfigurationItemKey().getWorkspace(),fileExportEntity.getConfigurationItemKey(),fileExportEntity.getPsFilter(),fileExportEntity.isExportNativeCADFile(),fileExportEntity.isExportDocumentLinks());
    Set<Map.Entry<String,Set<BinaryResource>>> entries=binariesInTree.entrySet();
    for (    Map.Entry<String,Set<BinaryResource>> entry : entries) {
      String folderName=entry.getKey();
      Set<BinaryResource> files=entry.getValue();
      for (      BinaryResource binaryResource : files) {
        try {
          addToZipFile(binaryResource,folderName,zs);
        }
 catch (        StorageException e) {
          e.printStackTrace();
        }
      }
    }
    if (fileExportEntity.getBaselineId() != 0) {
      for (      BinaryResource binaryResource : productService.getBinaryResourceFromBaseline(fileExportEntity.getBaselineId())) {
        addToZipFile(binaryResource,fileExportEntity.getSerialNumber(),zs);
      }
    }
    if (fileExportEntity.getSerialNumber() != null) {
      addProductInstanceDataToZip(zs,fileExportEntity.getConfigurationItemKey(),fileExportEntity.getSerialNumber());
    }
  }
 catch (  UserNotFoundException e) {
    e.printStackTrace();
  }
catch (  UserNotActiveException e) {
    e.printStackTrace();
  }
catch (  WorkspaceNotFoundException e) {
    e.printStackTrace();
  }
catch (  ConfigurationItemNotFoundException e) {
    e.printStackTrace();
  }
catch (  NotAllowedException e) {
    e.printStackTrace();
  }
catch (  EntityConstraintException e) {
    e.printStackTrace();
  }
catch (  PartMasterNotFoundException e) {
    e.printStackTrace();
  }
catch (  ProductInstanceMasterNotFoundException e) {
    e.printStackTrace();
  }
catch (  StorageException e) {
    e.printStackTrace();
  }
  zs.close();
}","@Override public void writeTo(FileExportEntity fileExportEntity,Class<?> aClass,Type type,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> multivaluedMap,OutputStream outputStream) throws IOException, WebApplicationException {
  ZipOutputStream zs=new ZipOutputStream(outputStream);
  try {
    Map<String,Set<BinaryResource>> binariesInTree=productService.getBinariesInTree(fileExportEntity.getBaselineId(),fileExportEntity.getConfigurationItemKey().getWorkspace(),fileExportEntity.getConfigurationItemKey(),fileExportEntity.getPsFilter(),fileExportEntity.isExportNativeCADFile(),fileExportEntity.isExportDocumentLinks());
    Set<Map.Entry<String,Set<BinaryResource>>> entries=binariesInTree.entrySet();
    for (    Map.Entry<String,Set<BinaryResource>> entry : entries) {
      String folderName=entry.getKey();
      Set<BinaryResource> files=entry.getValue();
      for (      BinaryResource binaryResource : files) {
        try {
          addToZipFile(binaryResource,folderName,zs);
        }
 catch (        StorageException e) {
          e.printStackTrace();
        }
      }
    }
    if (fileExportEntity.getBaselineId() != null) {
      String baselineName=productBaselineService.getBaseline(fileExportEntity.getBaselineId()).getName();
      for (      BinaryResource binaryResource : productService.getBinaryResourceFromBaseline(fileExportEntity.getBaselineId())) {
        addToZipFile(binaryResource,baselineName,zs);
      }
    }
    if (fileExportEntity.getSerialNumber() != null) {
      addProductInstanceDataToZip(zs,fileExportEntity.getConfigurationItemKey(),fileExportEntity.getSerialNumber());
    }
  }
 catch (  UserNotFoundException e) {
    e.printStackTrace();
  }
catch (  UserNotActiveException e) {
    e.printStackTrace();
  }
catch (  WorkspaceNotFoundException e) {
    e.printStackTrace();
  }
catch (  ConfigurationItemNotFoundException e) {
    e.printStackTrace();
  }
catch (  NotAllowedException e) {
    e.printStackTrace();
  }
catch (  EntityConstraintException e) {
    e.printStackTrace();
  }
catch (  PartMasterNotFoundException e) {
    e.printStackTrace();
  }
catch (  ProductInstanceMasterNotFoundException e) {
    e.printStackTrace();
  }
catch (  StorageException e) {
    e.printStackTrace();
  }
catch (  BaselineNotFoundException e) {
    e.printStackTrace();
  }
  zs.close();
}"
85977,"@Override public void writeTo(FileExportEntity fileExportEntity,Class<?> aClass,Type type,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> multivaluedMap,OutputStream outputStream) throws IOException, WebApplicationException {
  ZipOutputStream zs=new ZipOutputStream(outputStream);
  try {
    Map<String,Set<BinaryResource>> binariesInTree=productService.getBinariesInTree(fileExportEntity.getBaselineId(),fileExportEntity.getConfigurationItemKey().getWorkspace(),fileExportEntity.getConfigurationItemKey(),fileExportEntity.getPsFilter(),fileExportEntity.isExportNativeCADFile(),fileExportEntity.isExportDocumentLinks());
    Set<Map.Entry<String,Set<BinaryResource>>> entries=binariesInTree.entrySet();
    List<BinaryResource> baselinedSources=new ArrayList<>();
    if (fileExportEntity.isExportDocumentLinks() && fileExportEntity.getBaselineId() != null) {
      baselinedSources=productService.getBinaryResourceFromBaseline(fileExportEntity.getBaselineId());
      String baselineName=productBaselineService.getBaseline(fileExportEntity.getBaselineId()).getName();
      for (      BinaryResource binaryResource : baselinedSources) {
        addToZipFile(binaryResource,baselineName,zs);
      }
    }
    for (    Map.Entry<String,Set<BinaryResource>> entry : entries) {
      String folderName=entry.getKey();
      Set<BinaryResource> files=entry.getValue();
      for (      BinaryResource binaryResource : files) {
        if (!baselinedSources.contains(binaryResource)) {
          try {
            if (binaryResource.isNativeCADFile()) {
              folderName=""String_Node_Str"" + folderName;
            }
            addToZipFile(binaryResource,folderName,zs);
          }
 catch (          StorageException e) {
            e.printStackTrace();
          }
        }
      }
    }
    if (fileExportEntity.getSerialNumber() != null) {
      addProductInstanceDataToZip(zs,fileExportEntity.getConfigurationItemKey(),fileExportEntity.getSerialNumber());
    }
  }
 catch (  UserNotFoundException e) {
    e.printStackTrace();
  }
catch (  UserNotActiveException e) {
    e.printStackTrace();
  }
catch (  WorkspaceNotFoundException e) {
    e.printStackTrace();
  }
catch (  ConfigurationItemNotFoundException e) {
    e.printStackTrace();
  }
catch (  NotAllowedException e) {
    e.printStackTrace();
  }
catch (  EntityConstraintException e) {
    e.printStackTrace();
  }
catch (  PartMasterNotFoundException e) {
    e.printStackTrace();
  }
catch (  ProductInstanceMasterNotFoundException e) {
    e.printStackTrace();
  }
catch (  StorageException e) {
    e.printStackTrace();
  }
catch (  BaselineNotFoundException e) {
    e.printStackTrace();
  }
  zs.close();
}","@Override public void writeTo(FileExportEntity fileExportEntity,Class<?> aClass,Type type,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> multivaluedMap,OutputStream outputStream) throws IOException, WebApplicationException {
  ZipOutputStream zs=new ZipOutputStream(outputStream);
  try {
    Map<String,Set<BinaryResource>> binariesInTree=productService.getBinariesInTree(fileExportEntity.getBaselineId(),fileExportEntity.getConfigurationItemKey().getWorkspace(),fileExportEntity.getConfigurationItemKey(),fileExportEntity.getPsFilter(),fileExportEntity.isExportNativeCADFile(),fileExportEntity.isExportDocumentLinks());
    Set<Map.Entry<String,Set<BinaryResource>>> entries=binariesInTree.entrySet();
    List<BinaryResource> baselinedSources=new ArrayList<>();
    List<String> baselinedSourcesName=new ArrayList<>();
    if (fileExportEntity.isExportDocumentLinks() && fileExportEntity.getBaselineId() != null) {
      baselinedSources=productService.getBinaryResourceFromBaseline(fileExportEntity.getBaselineId());
      for (      BinaryResource binary : baselinedSources) {
        baselinedSourcesName.add(binary.getName());
      }
      String baselineName=productBaselineService.getBaseline(fileExportEntity.getBaselineId()).getName();
      for (      BinaryResource binaryResource : baselinedSources) {
        addToZipFile(binaryResource,baselineName,zs);
      }
    }
    for (    Map.Entry<String,Set<BinaryResource>> entry : entries) {
      String folderName=entry.getKey();
      Set<BinaryResource> files=entry.getValue();
      for (      BinaryResource binaryResource : files) {
        if (!baselinedSourcesName.contains(binaryResource.getName())) {
          try {
            if (binaryResource.isNativeCADFile()) {
              folderName=""String_Node_Str"" + folderName;
            }
            addToZipFile(binaryResource,folderName,zs);
          }
 catch (          StorageException e) {
            e.printStackTrace();
          }
        }
      }
    }
    if (fileExportEntity.getSerialNumber() != null) {
      addProductInstanceDataToZip(zs,fileExportEntity.getConfigurationItemKey(),fileExportEntity.getSerialNumber());
    }
  }
 catch (  UserNotFoundException e) {
    e.printStackTrace();
  }
catch (  UserNotActiveException e) {
    e.printStackTrace();
  }
catch (  WorkspaceNotFoundException e) {
    e.printStackTrace();
  }
catch (  ConfigurationItemNotFoundException e) {
    e.printStackTrace();
  }
catch (  NotAllowedException e) {
    e.printStackTrace();
  }
catch (  EntityConstraintException e) {
    e.printStackTrace();
  }
catch (  PartMasterNotFoundException e) {
    e.printStackTrace();
  }
catch (  ProductInstanceMasterNotFoundException e) {
    e.printStackTrace();
  }
catch (  StorageException e) {
    e.printStackTrace();
  }
catch (  BaselineNotFoundException e) {
    e.printStackTrace();
  }
  zs.close();
}"
85978,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public ComponentDTO filterProductStructure(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,@QueryParam(""String_Node_Str"") String configSpecType,@QueryParam(""String_Node_Str"") String path,@QueryParam(""String_Node_Str"") Integer depth,@QueryParam(""String_Node_Str"") String linkType) throws EntityNotFoundException, UserNotActiveException, AccessRightException, NotAllowedException, EntityConstraintException {
  ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
  PSFilter filter=productService.getPSFilter(ciKey,configSpecType);
  Component component;
  String serialNumber=null;
  if (configSpecType.startsWith(""String_Node_Str"")) {
    serialNumber=configSpecType.substring(3);
  }
  if (linkType == null) {
    List<PartLink> decodedPath=productService.decodePath(ciKey,path);
    component=productService.filterProductStructure(ciKey,filter,decodedPath,depth);
  }
 else {
    component=productService.filterProductStructureOnLinkType(ciKey,filter,serialNumber,path,linkType);
  }
  if (component == null) {
    throw new IllegalArgumentException();
  }
  return createComponentDTO(component,workspaceId,ciId,serialNumber);
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public ComponentDTO filterProductStructure(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,@QueryParam(""String_Node_Str"") String configSpecType,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") String path,@QueryParam(""String_Node_Str"") Integer depth,@QueryParam(""String_Node_Str"") String linkType) throws EntityNotFoundException, UserNotActiveException, AccessRightException, NotAllowedException, EntityConstraintException {
  ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
  PSFilter filter=productService.getPSFilter(ciKey,configSpecType);
  Component component;
  String serialNumber=null;
  if (configSpecType.startsWith(""String_Node_Str"")) {
    serialNumber=configSpecType.substring(3);
  }
  if (linkType == null) {
    List<PartLink> decodedPath=productService.decodePath(ciKey,path);
    component=productService.filterProductStructure(ciKey,filter,decodedPath,depth);
  }
 else {
    component=productService.filterProductStructureOnLinkType(ciKey,filter,serialNumber,path,linkType);
  }
  if (component == null) {
    throw new IllegalArgumentException();
  }
  return createComponentDTO(component,workspaceId,ciId,serialNumber);
}"
85979,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public DocumentMasterTemplate createDocumentMasterTemplate(String pWorkspaceId,String pId,String pDocumentType,String pWorkflowModelId,String pMask,InstanceAttributeTemplate[] pAttributeTemplates,String[] lovNames,boolean idGenerated,boolean attributesLocked) throws WorkspaceNotFoundException, AccessRightException, DocumentMasterTemplateAlreadyExistsException, UserNotFoundException, NotAllowedException, CreationException, WorkflowModelNotFoundException, ListOfValuesNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pWorkspaceId);
  Locale locale=new Locale(user.getLanguage());
  checkNameValidity(pId,locale);
  if (!NamingConvention.correctNameMask(pMask)) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  DocumentMasterTemplate template=new DocumentMasterTemplate(user.getWorkspace(),pId,user,pDocumentType,pMask);
  Date now=new Date();
  template.setCreationDate(now);
  template.setIdGenerated(idGenerated);
  template.setAttributesLocked(attributesLocked);
  LOVDAO lovDAO=new LOVDAO(locale,em);
  List<InstanceAttributeTemplate> attrs=new ArrayList<>();
  for (int i=0; i < pAttributeTemplates.length; i++) {
    attrs.add(pAttributeTemplates[i]);
    if (pAttributeTemplates[i] instanceof ListOfValuesAttributeTemplate) {
      ListOfValuesAttributeTemplate lovAttr=(ListOfValuesAttributeTemplate)pAttributeTemplates[i];
      ListOfValuesKey lovKey=new ListOfValuesKey(user.getWorkspaceId(),lovNames[i]);
      lovAttr.setLov(lovDAO.loadLOV(lovKey));
    }
  }
  template.setAttributeTemplates(attrs);
  if (pWorkflowModelId != null) {
    WorkflowModel workflowModel=new WorkflowModelDAO(locale,em).loadWorkflowModel(new WorkflowModelKey(user.getWorkspaceId(),pWorkflowModelId));
    template.setWorkflowModel(workflowModel);
  }
  new DocumentMasterTemplateDAO(locale,em).createDocMTemplate(template);
  return template;
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public DocumentMasterTemplate createDocumentMasterTemplate(String pWorkspaceId,String pId,String pDocumentType,String pWorkflowModelId,String pMask,InstanceAttributeTemplate[] pAttributeTemplates,String[] lovNames,boolean idGenerated,boolean attributesLocked) throws WorkspaceNotFoundException, AccessRightException, DocumentMasterTemplateAlreadyExistsException, UserNotFoundException, NotAllowedException, CreationException, WorkflowModelNotFoundException, ListOfValuesNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pWorkspaceId);
  Locale locale=new Locale(user.getLanguage());
  checkNameValidity(pId,locale);
  if (pMask != null && !pMask.isEmpty() && !NamingConvention.correctNameMask(pMask)) {
    throw new NotAllowedException(locale,""String_Node_Str"");
  }
  DocumentMasterTemplate template=new DocumentMasterTemplate(user.getWorkspace(),pId,user,pDocumentType,pMask);
  Date now=new Date();
  template.setCreationDate(now);
  template.setIdGenerated(idGenerated);
  template.setAttributesLocked(attributesLocked);
  LOVDAO lovDAO=new LOVDAO(locale,em);
  List<InstanceAttributeTemplate> attrs=new ArrayList<>();
  for (int i=0; i < pAttributeTemplates.length; i++) {
    attrs.add(pAttributeTemplates[i]);
    if (pAttributeTemplates[i] instanceof ListOfValuesAttributeTemplate) {
      ListOfValuesAttributeTemplate lovAttr=(ListOfValuesAttributeTemplate)pAttributeTemplates[i];
      ListOfValuesKey lovKey=new ListOfValuesKey(user.getWorkspaceId(),lovNames[i]);
      lovAttr.setLov(lovDAO.loadLOV(lovKey));
    }
  }
  template.setAttributeTemplates(attrs);
  if (pWorkflowModelId != null) {
    WorkflowModel workflowModel=new WorkflowModelDAO(locale,em).loadWorkflowModel(new WorkflowModelKey(user.getWorkspaceId(),pWorkflowModelId));
    template.setWorkflowModel(workflowModel);
  }
  new DocumentMasterTemplateDAO(locale,em).createDocMTemplate(template);
  return template;
}"
85980,"private Predicate getPredicate(Expression fieldExp,String operator,Object value,String type){
  Object o;
switch (type) {
case ""String_Node_Str"":
    o=value;
  break;
case ""String_Node_Str"":
try {
  o=new SimpleDateFormat(""String_Node_Str"").parse((String)value);
}
 catch (ParseException e) {
  throw new IllegalArgumentException();
}
break;
case ""String_Node_Str"":
try {
o=Double.parseDouble((String)value);
}
 catch (NumberFormatException e) {
throw new IllegalArgumentException();
}
break;
default :
o=value;
break;
}
switch (operator) {
case ""String_Node_Str"":
return cb.equal(fieldExp,o);
case ""String_Node_Str"":
return cb.equal(fieldExp,o).not();
case ""String_Node_Str"":
return cb.like(fieldExp,""String_Node_Str"" + o + ""String_Node_Str"");
case ""String_Node_Str"":
return cb.like(fieldExp,""String_Node_Str"" + o + ""String_Node_Str"").not();
case ""String_Node_Str"":
return cb.like(fieldExp,o + ""String_Node_Str"");
case ""String_Node_Str"":
return cb.like(fieldExp,o + ""String_Node_Str"").not();
case ""String_Node_Str"":
return cb.like(fieldExp,""String_Node_Str"" + o);
case ""String_Node_Str"":
return cb.like(fieldExp,""String_Node_Str"" + o).not();
case ""String_Node_Str"":
if (type.equals(""String_Node_Str"")) {
return cb.lessThan(fieldExp,(Date)o);
}
 else if (type.equals(""String_Node_Str"")) {
return cb.lessThan(fieldExp,(Double)o);
}
break;
case ""String_Node_Str"":
if (type.equals(""String_Node_Str"")) {
return cb.lessThanOrEqualTo(fieldExp,(Date)o);
}
 else if (type.equals(""String_Node_Str"")) {
return cb.lessThanOrEqualTo(fieldExp,(Double)o);
}
break;
case ""String_Node_Str"":
if (type.equals(""String_Node_Str"")) {
return cb.greaterThan(fieldExp,(Date)o);
}
 else if (type.equals(""String_Node_Str"")) {
return cb.greaterThan(fieldExp,(Double)o);
}
break;
case ""String_Node_Str"":
if (type.equals(""String_Node_Str"")) {
return cb.greaterThanOrEqualTo(fieldExp,(Date)o);
}
 else if (type.equals(""String_Node_Str"")) {
return cb.greaterThanOrEqualTo(fieldExp,(Double)o);
}
break;
default :
break;
}
throw new IllegalArgumentException();
}","private Predicate getPredicate(Expression fieldExp,String operator,Object value,String type){
  Object o;
switch (type) {
case ""String_Node_Str"":
    o=value;
  break;
case ""String_Node_Str"":
try {
  o=new SimpleDateFormat(""String_Node_Str"").parse((String)value);
}
 catch (ParseException e) {
  throw new IllegalArgumentException();
}
break;
case ""String_Node_Str"":
try {
if (value != null) {
o=Double.parseDouble((String)value);
}
 else {
o=""String_Node_Str"";
}
}
 catch (NumberFormatException e) {
throw new IllegalArgumentException();
}
break;
default :
o=value;
break;
}
switch (operator) {
case ""String_Node_Str"":
return cb.equal(fieldExp,o);
case ""String_Node_Str"":
return cb.equal(fieldExp,o).not();
case ""String_Node_Str"":
return cb.like(fieldExp,""String_Node_Str"" + o + ""String_Node_Str"");
case ""String_Node_Str"":
return cb.like(fieldExp,""String_Node_Str"" + o + ""String_Node_Str"").not();
case ""String_Node_Str"":
return cb.like(fieldExp,o + ""String_Node_Str"");
case ""String_Node_Str"":
return cb.like(fieldExp,o + ""String_Node_Str"").not();
case ""String_Node_Str"":
return cb.like(fieldExp,""String_Node_Str"" + o);
case ""String_Node_Str"":
return cb.like(fieldExp,""String_Node_Str"" + o).not();
case ""String_Node_Str"":
if (type.equals(""String_Node_Str"")) {
return cb.lessThan(fieldExp,(Date)o);
}
 else if (type.equals(""String_Node_Str"")) {
return cb.lessThan(fieldExp,(Double)o);
}
break;
case ""String_Node_Str"":
if (type.equals(""String_Node_Str"")) {
return cb.lessThanOrEqualTo(fieldExp,(Date)o);
}
 else if (type.equals(""String_Node_Str"")) {
return cb.lessThanOrEqualTo(fieldExp,(Double)o);
}
break;
case ""String_Node_Str"":
if (type.equals(""String_Node_Str"")) {
return cb.greaterThan(fieldExp,(Date)o);
}
 else if (type.equals(""String_Node_Str"")) {
return cb.greaterThan(fieldExp,(Double)o);
}
break;
case ""String_Node_Str"":
if (type.equals(""String_Node_Str"")) {
return cb.greaterThanOrEqualTo(fieldExp,(Date)o);
}
 else if (type.equals(""String_Node_Str"")) {
return cb.greaterThanOrEqualTo(fieldExp,(Double)o);
}
break;
default :
break;
}
throw new IllegalArgumentException();
}"
85981,"private Predicate getInstanceBooleanAttributePredicate(String field,String operator,String value,String type){
  Root<InstanceBooleanAttribute> iba=cq.from(InstanceBooleanAttribute.class);
  Predicate memberPredicate=iba.in(pi.get(""String_Node_Str""));
  return cb.and(cb.equal(iba.get(""String_Node_Str""),field),cb.equal(iba.get(""String_Node_Str""),Boolean.getBoolean(value)),memberPredicate);
}","private Predicate getInstanceBooleanAttributePredicate(String field,String operator,String value,String type){
  Root<InstanceBooleanAttribute> iba=cq.from(InstanceBooleanAttribute.class);
  Predicate memberPredicate=iba.in(pi.get(""String_Node_Str""));
  return cb.and(cb.equal(iba.get(""String_Node_Str""),field),cb.equal(iba.get(""String_Node_Str""),Boolean.parseBoolean(value)),memberPredicate);
}"
85982,"@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response getInstancesByMultiplePath(@Context Request request,@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,@QueryParam(""String_Node_Str"") String configSpecType,PathListDTO pathsDTO) throws EntityNotFoundException, UserNotActiveException, AccessRightException, NotAllowedException {
  Response.ResponseBuilder rb=fakeSimilarBehavior(request);
  if (rb != null) {
    return rb.build();
  }
 else {
    CacheControl cc=new CacheControl();
    cc.setMaxAge(60 * 15);
    ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
    PSFilter filter=productService.getPSFilter(ciKey,configSpecType);
    List<List<PartLink>> paths=new ArrayList<>();
    for (    String path : pathsDTO.getPaths()) {
      List<PartLink> decodedPath=productService.decodePath(ciKey,path);
      if (decodedPath != null) {
        paths.add(decodedPath);
      }
    }
    InstanceCollection instanceCollection=new InstanceCollection(ciKey,filter,paths);
    return Response.ok().lastModified(new Date()).cacheControl(cc).entity(instanceCollection).build();
  }
}","@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response getInstancesByMultiplePath(@Context Request request,@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,PathListDTO pathsDTO) throws EntityNotFoundException, UserNotActiveException, AccessRightException, NotAllowedException {
  Response.ResponseBuilder rb=fakeSimilarBehavior(request);
  if (rb != null) {
    return rb.build();
  }
 else {
    CacheControl cc=new CacheControl();
    cc.setMaxAge(60 * 15);
    ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
    PSFilter filter=productService.getPSFilter(ciKey,pathsDTO.getConfigSpec());
    List<List<PartLink>> paths=new ArrayList<>();
    for (    String path : pathsDTO.getPaths()) {
      List<PartLink> decodedPath=productService.decodePath(ciKey,path);
      if (decodedPath != null) {
        paths.add(decodedPath);
      }
    }
    InstanceCollection instanceCollection=new InstanceCollection(ciKey,filter,paths);
    return Response.ok().lastModified(new Date()).cacheControl(cc).entity(instanceCollection).build();
  }
}"
85983,"public int getIndexValue(){
  return indexValue;
}","@XmlTransient public int getIndexValue(){
  return indexValue;
}"
85984,"public List<ModificationNotification> getModificationNotifications(PartIteration pPart){
  List<ModificationNotification> notifications=em.createNamedQuery(""String_Node_Str"",ModificationNotification.class).setParameter(""String_Node_Str"",pPart).getResultList();
  return notifications;
}","public List<ModificationNotification> getModificationNotifications(PartIterationKey pPartIPK){
  List<ModificationNotification> notifications=em.createNamedQuery(""String_Node_Str"",ModificationNotification.class).setParameter(""String_Node_Str"",pPartIPK.getWorkspaceId()).setParameter(""String_Node_Str"",pPartIPK.getPartMasterNumber()).setParameter(""String_Node_Str"",pPartIPK.getPartRevisionVersion()).setParameter(""String_Node_Str"",pPartIPK.getIteration()).getResultList();
  return notifications;
}"
85985,"private void updateACLForChangeItem(String pWorkspaceId,ChangeItem changeItem,Map<String,String> pUserEntries,Map<String,String> pGroupEntries){
  ACLFactory aclFactory=new ACLFactory(em);
  if (changeItem.getACL() == null) {
    ACL acl=aclFactory.createACL(pWorkspaceId,pUserEntries,pGroupEntries);
    changeItem.setACL(acl);
  }
 else {
    aclFactory.updateACL(changeItem.getACL(),pUserEntries,pGroupEntries);
  }
}","private void updateACLForChangeItem(String pWorkspaceId,ChangeItem changeItem,Map<String,String> pUserEntries,Map<String,String> pGroupEntries){
  ACLFactory aclFactory=new ACLFactory(em);
  if (changeItem.getACL() == null) {
    ACL acl=aclFactory.createACL(pWorkspaceId,pUserEntries,pGroupEntries);
    changeItem.setACL(acl);
  }
 else {
    aclFactory.updateACL(pWorkspaceId,changeItem.getACL(),pUserEntries,pGroupEntries);
  }
}"
85986,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public void updateACLForMilestone(String pWorkspaceId,int pId,Map<String,String> pUserEntries,Map<String,String> pGroupEntries) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, MilestoneNotFoundException, AccessRightException {
  User user=userManager.checkWorkspaceReadAccess(pWorkspaceId);
  Milestone milestone=new MilestoneDAO(new Locale(user.getLanguage()),em).loadMilestone(pId);
  checkMilestoneWriteAccess(milestone,user);
  ACLFactory aclFactory=new ACLFactory(em);
  if (milestone.getACL() == null) {
    ACL acl=aclFactory.createACL(pWorkspaceId,pUserEntries,pGroupEntries);
    milestone.setACL(acl);
  }
 else {
    ACL acl=milestone.getACL();
    aclFactory.updateACL(acl,pUserEntries,pGroupEntries);
  }
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public void updateACLForMilestone(String pWorkspaceId,int pId,Map<String,String> pUserEntries,Map<String,String> pGroupEntries) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, MilestoneNotFoundException, AccessRightException {
  User user=userManager.checkWorkspaceReadAccess(pWorkspaceId);
  Milestone milestone=new MilestoneDAO(new Locale(user.getLanguage()),em).loadMilestone(pId);
  checkMilestoneWriteAccess(milestone,user);
  ACLFactory aclFactory=new ACLFactory(em);
  if (milestone.getACL() == null) {
    ACL acl=aclFactory.createACL(pWorkspaceId,pUserEntries,pGroupEntries);
    milestone.setACL(acl);
  }
 else {
    ACL acl=milestone.getACL();
    aclFactory.updateACL(pWorkspaceId,acl,pUserEntries,pGroupEntries);
  }
}"
85987,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public void updateDocumentACL(String pWorkspaceId,DocumentRevisionKey docKey,Map<String,String> pACLUserEntries,Map<String,String> pACLUserGroupEntries) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, DocumentRevisionNotFoundException, AccessRightException, NotAllowedException {
  User user=checkDocumentRevisionWriteAccess(docKey);
  Locale userLocale=new Locale(user.getLanguage());
  ACLFactory aclFactory=new ACLFactory(em);
  DocumentRevisionDAO documentRevisionDAO=new DocumentRevisionDAO(userLocale,em);
  DocumentRevision docR=documentRevisionDAO.loadDocR(docKey);
  if (user.isAdministrator() || isAuthor(user,docR)) {
    if (docR.getACL() == null) {
      ACL acl=aclFactory.createACL(pWorkspaceId,pACLUserEntries,pACLUserGroupEntries);
      docR.setACL(acl);
    }
 else {
      aclFactory.updateACL(docR.getACL(),pACLUserEntries,pACLUserGroupEntries);
    }
  }
 else {
    throw new AccessRightException(userLocale,user);
  }
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public void updateDocumentACL(String pWorkspaceId,DocumentRevisionKey docKey,Map<String,String> pACLUserEntries,Map<String,String> pACLUserGroupEntries) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, DocumentRevisionNotFoundException, AccessRightException, NotAllowedException {
  User user=checkDocumentRevisionWriteAccess(docKey);
  Locale userLocale=new Locale(user.getLanguage());
  ACLFactory aclFactory=new ACLFactory(em);
  DocumentRevisionDAO documentRevisionDAO=new DocumentRevisionDAO(userLocale,em);
  DocumentRevision docR=documentRevisionDAO.loadDocR(docKey);
  if (user.isAdministrator() || isAuthor(user,docR)) {
    if (docR.getACL() == null) {
      ACL acl=aclFactory.createACL(pWorkspaceId,pACLUserEntries,pACLUserGroupEntries);
      docR.setACL(acl);
    }
 else {
      aclFactory.updateACL(pWorkspaceId,docR.getACL(),pACLUserEntries,pACLUserGroupEntries);
    }
  }
 else {
    throw new AccessRightException(userLocale,user);
  }
}"
85988,"@Override public void updateACLForDocumentMasterTemplate(String pWorkspaceId,String pDocMTemplateId,Map<String,String> userEntries,Map<String,String> userGroupEntries) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, DocumentMasterTemplateNotFoundException {
  ACLFactory aclFactory=new ACLFactory(em);
  User user=userManager.checkWorkspaceReadAccess(pWorkspaceId);
  Locale locale=new Locale(user.getLanguage());
  DocumentMasterTemplate docTemplate=new DocumentMasterTemplateDAO(locale,em).loadDocMTemplate(new DocumentMasterTemplateKey(user.getWorkspaceId(),pDocMTemplateId));
  checkDocumentTemplateWriteAccess(docTemplate,user);
  if (docTemplate.getAcl() == null) {
    ACL acl=aclFactory.createACL(pWorkspaceId,userEntries,userGroupEntries);
    docTemplate.setAcl(acl);
  }
 else {
    aclFactory.updateACL(docTemplate.getAcl(),userEntries,userGroupEntries);
  }
}","@Override public void updateACLForDocumentMasterTemplate(String pWorkspaceId,String pDocMTemplateId,Map<String,String> userEntries,Map<String,String> userGroupEntries) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, DocumentMasterTemplateNotFoundException {
  ACLFactory aclFactory=new ACLFactory(em);
  User user=userManager.checkWorkspaceReadAccess(pWorkspaceId);
  Locale locale=new Locale(user.getLanguage());
  DocumentMasterTemplate docTemplate=new DocumentMasterTemplateDAO(locale,em).loadDocMTemplate(new DocumentMasterTemplateKey(user.getWorkspaceId(),pDocMTemplateId));
  checkDocumentTemplateWriteAccess(docTemplate,user);
  if (docTemplate.getAcl() == null) {
    ACL acl=aclFactory.createACL(pWorkspaceId,userEntries,userGroupEntries);
    docTemplate.setAcl(acl);
  }
 else {
    aclFactory.updateACL(pWorkspaceId,docTemplate.getAcl(),userEntries,userGroupEntries);
  }
}"
85989,"@Override public void updateACLForPartMasterTemplate(String pWorkspaceId,String templateId,Map<String,String> userEntries,Map<String,String> groupEntries) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, AccessRightException, PartMasterTemplateNotFoundException {
  ACLFactory aclFactory=new ACLFactory(em);
  User user=userManager.checkWorkspaceReadAccess(pWorkspaceId);
  PartMasterTemplateKey pKey=new PartMasterTemplateKey(pWorkspaceId,templateId);
  PartMasterTemplate partMasterTemplate=new PartMasterTemplateDAO(new Locale(user.getLanguage()),em).loadPartMTemplate(pKey);
  checkPartTemplateWriteAccess(partMasterTemplate,user);
  if (partMasterTemplate.getAcl() == null) {
    ACL acl=aclFactory.createACL(pWorkspaceId,userEntries,groupEntries);
    partMasterTemplate.setAcl(acl);
  }
 else {
    aclFactory.updateACL(partMasterTemplate.getAcl(),userEntries,groupEntries);
  }
}","@Override public void updateACLForPartMasterTemplate(String pWorkspaceId,String templateId,Map<String,String> userEntries,Map<String,String> groupEntries) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, AccessRightException, PartMasterTemplateNotFoundException {
  ACLFactory aclFactory=new ACLFactory(em);
  User user=userManager.checkWorkspaceReadAccess(pWorkspaceId);
  PartMasterTemplateKey pKey=new PartMasterTemplateKey(pWorkspaceId,templateId);
  PartMasterTemplate partMasterTemplate=new PartMasterTemplateDAO(new Locale(user.getLanguage()),em).loadPartMTemplate(pKey);
  checkPartTemplateWriteAccess(partMasterTemplate,user);
  if (partMasterTemplate.getAcl() == null) {
    ACL acl=aclFactory.createACL(pWorkspaceId,userEntries,groupEntries);
    partMasterTemplate.setAcl(acl);
  }
 else {
    aclFactory.updateACL(pWorkspaceId,partMasterTemplate.getAcl(),userEntries,groupEntries);
  }
}"
85990,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public void updatePartRevisionACL(String workspaceId,PartRevisionKey revisionKey,Map<String,String> pACLUserEntries,Map<String,String> pACLUserGroupEntries) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, PartRevisionNotFoundException, AccessRightException, DocumentRevisionNotFoundException {
  User user=userManager.checkWorkspaceReadAccess(workspaceId);
  Locale locale=new Locale(user.getLanguage());
  ACLFactory aclFactory=new ACLFactory(em);
  PartRevisionDAO partRevisionDAO=new PartRevisionDAO(locale,em);
  PartRevision partRevision=partRevisionDAO.loadPartR(revisionKey);
  if (isAuthor(user,partRevision) || user.isAdministrator()) {
    if (partRevision.getACL() == null) {
      ACL acl=aclFactory.createACL(workspaceId,pACLUserEntries,pACLUserGroupEntries);
      partRevision.setACL(acl);
    }
 else {
      aclFactory.updateACL(partRevision.getACL(),pACLUserEntries,pACLUserGroupEntries);
    }
  }
 else {
    throw new AccessRightException(locale,user);
  }
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public void updatePartRevisionACL(String workspaceId,PartRevisionKey revisionKey,Map<String,String> pACLUserEntries,Map<String,String> pACLUserGroupEntries) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, PartRevisionNotFoundException, AccessRightException, DocumentRevisionNotFoundException {
  User user=userManager.checkWorkspaceReadAccess(workspaceId);
  Locale locale=new Locale(user.getLanguage());
  ACLFactory aclFactory=new ACLFactory(em);
  PartRevisionDAO partRevisionDAO=new PartRevisionDAO(locale,em);
  PartRevision partRevision=partRevisionDAO.loadPartR(revisionKey);
  if (isAuthor(user,partRevision) || user.isAdministrator()) {
    if (partRevision.getACL() == null) {
      ACL acl=aclFactory.createACL(workspaceId,pACLUserEntries,pACLUserGroupEntries);
      partRevision.setACL(acl);
    }
 else {
      aclFactory.updateACL(workspaceId,partRevision.getACL(),pACLUserEntries,pACLUserGroupEntries);
    }
  }
 else {
    throw new AccessRightException(locale,user);
  }
}"
85991,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public WorkflowModel updateACLForWorkflow(String pWorkspaceId,String workflowModelId,Map<String,String> userEntries,Map<String,String> groupEntries) throws WorkflowNotFoundException, UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, WorkflowModelNotFoundException, AccessRightException {
  User user=userManager.checkWorkspaceReadAccess(pWorkspaceId);
  WorkflowModelKey workflowModelKey=new WorkflowModelKey(pWorkspaceId,workflowModelId);
  WorkflowModel workflowModel=new WorkflowModelDAO(new Locale(user.getLanguage()),em).loadWorkflowModel(workflowModelKey);
  checkWorkflowWriteAccess(workflowModel,user);
  ACLFactory aclFactory=new ACLFactory(em);
  if (workflowModel.getAcl() == null) {
    ACL acl=aclFactory.createACL(pWorkspaceId,userEntries,groupEntries);
    workflowModel.setAcl(acl);
  }
 else {
    aclFactory.updateACL(workflowModel.getAcl(),userEntries,groupEntries);
  }
  return workflowModel;
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public WorkflowModel updateACLForWorkflow(String pWorkspaceId,String workflowModelId,Map<String,String> userEntries,Map<String,String> groupEntries) throws WorkflowNotFoundException, UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, WorkflowModelNotFoundException, AccessRightException {
  User user=userManager.checkWorkspaceReadAccess(pWorkspaceId);
  WorkflowModelKey workflowModelKey=new WorkflowModelKey(pWorkspaceId,workflowModelId);
  WorkflowModel workflowModel=new WorkflowModelDAO(new Locale(user.getLanguage()),em).loadWorkflowModel(workflowModelKey);
  checkWorkflowWriteAccess(workflowModel,user);
  ACLFactory aclFactory=new ACLFactory(em);
  if (workflowModel.getAcl() == null) {
    ACL acl=aclFactory.createACL(pWorkspaceId,userEntries,groupEntries);
    workflowModel.setAcl(acl);
  }
 else {
    aclFactory.updateACL(pWorkspaceId,workflowModel.getAcl(),userEntries,groupEntries);
  }
  return workflowModel;
}"
85992,"public ACL updateACL(ACL acl,Map<String,String> pUserEntries,Map<String,String> pGroupEntries){
  if (pUserEntries != null) {
    for (    ACLUserEntry entry : acl.getUserEntries().values()) {
      ACL.Permission newPermission=ACL.Permission.valueOf(pUserEntries.get(entry.getPrincipalLogin()));
      if (newPermission != null) {
        entry.setPermission(newPermission);
      }
    }
  }
  if (pGroupEntries != null) {
    for (    ACLUserGroupEntry entry : acl.getGroupEntries().values()) {
      ACL.Permission newPermission=ACL.Permission.valueOf(pGroupEntries.get(entry.getPrincipalId()));
      if (newPermission != null) {
        entry.setPermission(newPermission);
      }
    }
  }
  return acl;
}","public ACL updateACL(String workspaceId,ACL acl,Map<String,String> pUserEntries,Map<String,String> pGroupEntries){
  if (acl != null) {
    new ACLDAO(em).removeACLEntries(acl);
    acl.setUserEntries(new HashMap<User,ACLUserEntry>());
    acl.setGroupEntries(new HashMap<UserGroup,ACLUserGroupEntry>());
    for (    Map.Entry<String,String> entry : pUserEntries.entrySet()) {
      acl.addEntry(em.getReference(User.class,new UserKey(workspaceId,entry.getKey())),ACL.Permission.valueOf(entry.getValue()));
    }
    for (    Map.Entry<String,String> entry : pGroupEntries.entrySet()) {
      acl.addEntry(em.getReference(UserGroup.class,new UserGroupKey(workspaceId,entry.getKey())),ACL.Permission.valueOf(entry.getValue()));
    }
  }
  return acl;
}"
85993,"@Test public void testUpdateACLForWorkflowWithAnExistingACL() throws Exception {
  Map<String,String> userEntries=new HashMap<>();
  Map<String,String> grpEntries=new HashMap<>();
  User user2=new User(workspace,WorkflowUtil.USER2_LOGIN,WorkflowUtil.USER2_NAME,WorkflowUtil.USER2_MAIL,""String_Node_Str"");
  User user3=new User(workspace,WorkflowUtil.USER3_LOGIN,WorkflowUtil.USER3_NAME,WorkflowUtil.USER3_MAIL,""String_Node_Str"");
  UserGroup group1=new UserGroup(workspace,WorkflowUtil.GRP1_ID);
  WorkflowModel workflowModel=new WorkflowModel(workspace,WorkflowUtil.WORKSPACE_ID,user,""String_Node_Str"");
  ACL acl=new ACL();
  acl.addEntry(user2,ACL.Permission.READ_ONLY);
  acl.addEntry(group1,ACL.Permission.FULL_ACCESS);
  workflowModel.setAcl(acl);
  userEntries.put(user.getLogin(),ACL.Permission.FORBIDDEN.name());
  userEntries.put(user2.getLogin(),ACL.Permission.FORBIDDEN.name());
  userEntries.put(user3.getLogin(),ACL.Permission.FULL_ACCESS.name());
  group1.addUser(user2);
  group1.addUser(user);
  grpEntries.put(group1.getId(),ACL.Permission.FULL_ACCESS.name());
  Mockito.when(userManager.checkWorkspaceReadAccess(WorkflowUtil.WORKSPACE_ID)).thenReturn(user);
  Mockito.when(em.find(WorkflowModel.class,new WorkflowModelKey(WorkflowUtil.WORKSPACE_ID,WorkflowUtil.WORKFLOW_MODEL_ID))).thenReturn(workflowModel);
  Mockito.when(em.find(User.class,new UserKey(WorkflowUtil.WORKSPACE_ID,WorkflowUtil.USER_LOGIN))).thenReturn(user);
  Mockito.when(em.find(User.class,new UserKey(WorkflowUtil.WORKSPACE_ID,WorkflowUtil.USER2_LOGIN))).thenReturn(user2);
  Mockito.when(em.find(User.class,new UserKey(WorkflowUtil.WORKSPACE_ID,WorkflowUtil.USER3_LOGIN))).thenReturn(user3);
  WorkflowModel workflow=workflowManagerBean.updateACLForWorkflow(WorkflowUtil.WORKSPACE_ID,WorkflowUtil.WORKFLOW_MODEL_ID,userEntries,grpEntries);
  Assert.assertEquals(workflow.getAcl().getGroupEntries().size(),1);
  Assert.assertEquals(workflow.getAcl().getUserEntries().size(),3);
  Assert.assertEquals(workflow.getAcl().getUserEntries().get(user).getPermission(),ACL.Permission.FORBIDDEN);
  Assert.assertEquals(workflow.getAcl().getUserEntries().get(user2).getPermission(),ACL.Permission.FORBIDDEN);
  Assert.assertEquals(workflow.getAcl().getUserEntries().get(user3).getPermission(),ACL.Permission.FULL_ACCESS);
}","@Test public void testUpdateACLForWorkflowWithAnExistingACL() throws Exception {
  Map<String,String> userEntries=new HashMap<>();
  Map<String,String> grpEntries=new HashMap<>();
  User user2=new User(workspace,WorkflowUtil.USER2_LOGIN,WorkflowUtil.USER2_NAME,WorkflowUtil.USER2_MAIL,""String_Node_Str"");
  User user3=new User(workspace,WorkflowUtil.USER3_LOGIN,WorkflowUtil.USER3_NAME,WorkflowUtil.USER3_MAIL,""String_Node_Str"");
  UserGroup group1=new UserGroup(workspace,WorkflowUtil.GRP1_ID);
  WorkflowModel workflowModel=new WorkflowModel(workspace,WorkflowUtil.WORKSPACE_ID,user,""String_Node_Str"");
  ACL acl=new ACL();
  acl.addEntry(user2,ACL.Permission.READ_ONLY);
  acl.addEntry(group1,ACL.Permission.FULL_ACCESS);
  workflowModel.setAcl(acl);
  userEntries.put(user.getLogin(),ACL.Permission.FORBIDDEN.name());
  userEntries.put(user2.getLogin(),ACL.Permission.FORBIDDEN.name());
  userEntries.put(user3.getLogin(),ACL.Permission.FULL_ACCESS.name());
  group1.addUser(user2);
  group1.addUser(user);
  grpEntries.put(group1.getId(),ACL.Permission.FULL_ACCESS.name());
  Mockito.when(userManager.checkWorkspaceReadAccess(WorkflowUtil.WORKSPACE_ID)).thenReturn(user);
  Mockito.when(em.find(WorkflowModel.class,new WorkflowModelKey(WorkflowUtil.WORKSPACE_ID,WorkflowUtil.WORKFLOW_MODEL_ID))).thenReturn(workflowModel);
  Mockito.when(em.find(User.class,new UserKey(WorkflowUtil.WORKSPACE_ID,WorkflowUtil.USER_LOGIN))).thenReturn(user);
  Mockito.when(em.find(User.class,new UserKey(WorkflowUtil.WORKSPACE_ID,WorkflowUtil.USER2_LOGIN))).thenReturn(user2);
  Mockito.when(em.find(User.class,new UserKey(WorkflowUtil.WORKSPACE_ID,WorkflowUtil.USER3_LOGIN))).thenReturn(user3);
  Mockito.when(em.getReference(UserGroup.class,new UserGroupKey(WorkflowUtil.WORKSPACE_ID,group1.getId()))).thenReturn(group1);
  Mockito.when(em.getReference(User.class,user.getKey())).thenReturn(user);
  Mockito.when(em.getReference(User.class,user2.getKey())).thenReturn(user2);
  Mockito.when(em.getReference(User.class,user3.getKey())).thenReturn(user3);
  WorkflowModel workflow=workflowManagerBean.updateACLForWorkflow(WorkflowUtil.WORKSPACE_ID,WorkflowUtil.WORKFLOW_MODEL_ID,userEntries,grpEntries);
  Assert.assertEquals(workflow.getAcl().getGroupEntries().size(),1);
  Assert.assertEquals(workflow.getAcl().getUserEntries().size(),3);
  Assert.assertEquals(workflow.getAcl().getUserEntries().get(user).getPermission(),ACL.Permission.FORBIDDEN);
  Assert.assertEquals(workflow.getAcl().getUserEntries().get(user2).getPermission(),ACL.Permission.FORBIDDEN);
  Assert.assertEquals(workflow.getAcl().getUserEntries().get(user3).getPermission(),ACL.Permission.FULL_ACCESS);
}"
85994,"@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public DocumentRevision[] createDocumentRevision(DocumentRevisionKey pOriginalDocRPK,String pTitle,String pDescription,String pWorkflowModelId,ACLUserEntry[] pACLUserEntries,ACLUserGroupEntry[] pACLUserGroupEntries,Map<String,String> roleMappings) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, NotAllowedException, DocumentRevisionAlreadyExistsException, CreationException, WorkflowModelNotFoundException, RoleNotFoundException, DocumentRevisionNotFoundException, FileAlreadyExistsException {
}","@RolesAllowed(UserGroupMapping.REGULAR_USER_ROLE_ID) @Override public DocumentRevision[] createDocumentRevision(DocumentRevisionKey pOriginalDocRPK,String pTitle,String pDescription,String pWorkflowModelId,ACLUserEntry[] pACLUserEntries,ACLUserGroupEntry[] pACLUserGroupEntries,Map<String,String> roleMappings) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, NotAllowedException, DocumentRevisionAlreadyExistsException, CreationException, WorkflowModelNotFoundException, RoleNotFoundException, DocumentRevisionNotFoundException, FileAlreadyExistsException {
  User user=userManager.checkWorkspaceWriteAccess(pOriginalDocRPK.getDocumentMaster().getWorkspace());
  Locale userLocale=new Locale(user.getLanguage());
  DocumentRevisionDAO docRDAO=new DocumentRevisionDAO(userLocale,em);
  DocumentRevision originalDocR=docRDAO.loadDocR(pOriginalDocRPK);
  DocumentMaster docM=originalDocR.getDocumentMaster();
  Folder folder=originalDocR.getLocation();
  checkFolderWritingRight(user,folder);
  if (originalDocR.isCheckedOut()) {
    throw new NotAllowedException(userLocale,""String_Node_Str"");
  }
  if (originalDocR.getNumberOfIterations() == 0) {
    throw new NotAllowedException(userLocale,""String_Node_Str"");
  }
  DocumentRevision docR=docM.createNextRevision(user);
  DocumentIteration lastDoc=originalDocR.getLastIteration();
  DocumentIteration firstIte=docR.createNextIteration(user);
  if (lastDoc != null) {
    BinaryResourceDAO binDAO=new BinaryResourceDAO(userLocale,em);
    for (    BinaryResource sourceFile : lastDoc.getAttachedFiles()) {
      String fileName=sourceFile.getName();
      long length=sourceFile.getContentLength();
      Date lastModified=sourceFile.getLastModified();
      String fullName=docR.getWorkspaceId() + ""String_Node_Str"" + docR.getId()+ ""String_Node_Str""+ docR.getVersion()+ ""String_Node_Str""+ fileName;
      BinaryResource targetFile=new BinaryResource(fullName,length,lastModified);
      binDAO.createBinaryResource(targetFile);
      firstIte.addFile(targetFile);
      try {
        dataManager.copyData(sourceFile,targetFile);
      }
 catch (      StorageException e) {
        LOGGER.log(Level.INFO,null,e);
      }
    }
    Set<DocumentLink> links=new HashSet<>();
    for (    DocumentLink link : lastDoc.getLinkedDocuments()) {
      DocumentLink newLink=link.clone();
      links.add(newLink);
    }
    firstIte.setLinkedDocuments(links);
    List<InstanceAttribute> attrs=new ArrayList<>();
    for (    InstanceAttribute attr : lastDoc.getInstanceAttributes()) {
      InstanceAttribute clonedAttribute=attr.clone();
      attrs.add(clonedAttribute);
    }
    firstIte.setInstanceAttributes(attrs);
  }
  if (pWorkflowModelId != null) {
    UserDAO userDAO=new UserDAO(userLocale,em);
    RoleDAO roleDAO=new RoleDAO(userLocale,em);
    Map<Role,User> roleUserMap=new HashMap<>();
    for (    Object o : roleMappings.entrySet()) {
      Map.Entry pairs=(Map.Entry)o;
      String roleName=(String)pairs.getKey();
      String userLogin=(String)pairs.getValue();
      User worker=userDAO.loadUser(new UserKey(pOriginalDocRPK.getDocumentMaster().getWorkspace(),userLogin));
      Role role=roleDAO.loadRole(new RoleKey(pOriginalDocRPK.getDocumentMaster().getWorkspace(),roleName));
      roleUserMap.put(role,worker);
    }
    WorkflowModel workflowModel=new WorkflowModelDAO(userLocale,em).loadWorkflowModel(new WorkflowModelKey(user.getWorkspaceId(),pWorkflowModelId));
    Workflow workflow=workflowModel.createWorkflow(roleUserMap);
    docR.setWorkflow(workflow);
    Collection<Task> runningTasks=workflow.getRunningTasks();
    for (    Task runningTask : runningTasks) {
      runningTask.start();
    }
    mailer.sendApproval(runningTasks,docR);
  }
  docR.setTitle(pTitle);
  docR.setDescription(pDescription);
  Map<String,String> userEntries=new HashMap<>();
  Map<String,String> groupEntries=new HashMap<>();
  for (  ACLUserEntry entry : pACLUserEntries) {
    userEntries.put(entry.getPrincipalLogin(),entry.getPermission().name());
  }
  for (  ACLUserGroupEntry entry : pACLUserGroupEntries) {
    groupEntries.put(entry.getPrincipal().getId(),entry.getPermission().name());
  }
  ACLFactory aclFactory=new ACLFactory(em);
  ACL acl=aclFactory.createACL(docR.getWorkspaceId(),userEntries,groupEntries);
  docR.setACL(acl);
  Date now=new Date();
  docR.setCreationDate(now);
  docR.setLocation(folder);
  docR.setCheckOutUser(user);
  docR.setCheckOutDate(now);
  firstIte.setCreationDate(now);
  docRDAO.createDocR(docR);
  return new DocumentRevision[]{originalDocR,docR};
}"
85995,"@Test public void createComponents(){
  PartIterationDTO data=new PartIterationDTO(ResourceUtil.WORKSPACE_ID,""String_Node_Str"",""String_Node_Str"",1);
  List partUsageLinkDTOs=new ArrayList<PartUsageLinkDTO>();
  PartUsageLinkDTO partUsageLinkDTO=new PartUsageLinkDTO();
  partUsageLinkDTO.setAmount(2);
  partUsageLinkDTO.setUnit(""String_Node_Str"");
  partUsageLinkDTO.setOptional(true);
  partUsageLinkDTO.setComment(""String_Node_Str"");
  ComponentDTO componentDTO=new ComponentDTO(""String_Node_Str"");
  componentDTO.setStandardPart(false);
  partUsageLinkDTO.setComponent(componentDTO);
  List<PartSubstituteLinkDTO> substituteDTOs=new ArrayList<>();
  PartSubstituteLinkDTO substituteLinkDTO=new PartSubstituteLinkDTO();
  substituteLinkDTO.setAmount(3);
  substituteLinkDTO.setUnit(""String_Node_Str"");
  ComponentDTO subComponentDTO=new ComponentDTO(""String_Node_Str"");
  substituteLinkDTO.setSubstitute(subComponentDTO);
  List<CADInstanceDTO> cadInstanceDTOs=new ArrayList<CADInstanceDTO>();
  List<CADInstanceDTO> subCadInstanceDTOs=new ArrayList<CADInstanceDTO>();
  cadInstanceDTOs.add(new CADInstanceDTO((Double)12.0,(Double)12.0,(Double)12.0,(Double)62.0,(Double)24.0,(Double)95.0));
  cadInstanceDTOs.add(new CADInstanceDTO((Double)22.0,(Double)12.0,(Double)72.0,(Double)52.0,(Double)14.0,(Double)45.0));
  subCadInstanceDTOs.add(new CADInstanceDTO((Double)10.0,(Double)11.0,(Double)12.0,(Double)13.0,(Double)14.0,(Double)15.0));
  subCadInstanceDTOs.add(new CADInstanceDTO((Double)110.0,(Double)10.0,(Double)10.0,(Double)52.0,(Double)14.0,(Double)45.0));
  subCadInstanceDTOs.add(new CADInstanceDTO((Double)120.0,(Double)10.0,(Double)10.0,(Double)52.0,(Double)14.0,(Double)45.0));
  substituteLinkDTO.setCadInstances(subCadInstanceDTOs);
  substituteDTOs.add(substituteLinkDTO);
  partUsageLinkDTO.setSubstitutes(substituteDTOs);
  partUsageLinkDTO.setCadInstances(cadInstanceDTOs);
  partUsageLinkDTOs.add(partUsageLinkDTO);
  data.setComponents(partUsageLinkDTOs);
  List<PartUsageLink> newComponents=new ArrayList<>();
  try {
    Mockito.when(productService.partMasterExists(Matchers.any(PartMasterKey.class))).thenReturn(false);
    Mockito.when(userManager.checkWorkspaceWriteAccess(ResourceUtil.WORKSPACE_ID)).thenReturn(user);
    Mockito.when(partResource.findOrCreatePartMaster(ResourceUtil.WORKSPACE_ID,componentDTO)).thenReturn(partMaster);
    Mockito.when(partResource.findOrCreatePartMaster(ResourceUtil.WORKSPACE_ID,subComponentDTO)).thenReturn(subPartMaster);
    newComponents=partResource.createComponents(ResourceUtil.WORKSPACE_ID,partUsageLinkDTOs);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  assertNotNull(newComponents);
  assertTrue(newComponents.size() == 1);
  assertTrue(newComponents.get(0).getCadInstances().size() == 2);
  assertTrue(newComponents.get(0).isOptional());
  assertTrue(newComponents.get(0).getCadInstances().get(0).getRx() == (Double)12.0);
  assertTrue(newComponents.get(0).getCadInstances().get(0).getRy() == (Double)12.0);
  assertTrue(newComponents.get(0).getCadInstances().get(0).getRz() == (Double)12.0);
  assertTrue(newComponents.get(0).getCadInstances().get(0).getTx() == (Double)62.0);
  assertTrue(newComponents.get(0).getCadInstances().get(0).getTy() == (Double)24.0);
  assertTrue(newComponents.get(0).getCadInstances().get(0).getTz() == (Double)95.0);
  assertTrue(newComponents.get(0).getCadInstances().get(1).getRx() == (Double)22.0);
  assertTrue(newComponents.get(0).getCadInstances().get(1).getRy() == (Double)12.0);
  assertTrue(newComponents.get(0).getCadInstances().get(1).getRz() == (Double)72.0);
  assertTrue(newComponents.get(0).getCadInstances().get(1).getTx() == (Double)52.0);
  assertTrue(newComponents.get(0).getCadInstances().get(1).getTy() == (Double)14.0);
  assertTrue(newComponents.get(0).getCadInstances().get(1).getTz() == (Double)45.0);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().size() == 3);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().get(0).getRx() == 10);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().get(0).getRy() == 11);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().get(0).getRz() == 12);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().get(0).getTx() == 13.0);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().get(0).getTy() == 14.0);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().get(0).getTz() == 15.0);
}","@Test public void createComponents(){
  PartIterationDTO data=new PartIterationDTO(ResourceUtil.WORKSPACE_ID,""String_Node_Str"",""String_Node_Str"",1);
  List partUsageLinkDTOs=new ArrayList<PartUsageLinkDTO>();
  PartUsageLinkDTO partUsageLinkDTO=new PartUsageLinkDTO();
  partUsageLinkDTO.setAmount(2);
  partUsageLinkDTO.setUnit(""String_Node_Str"");
  partUsageLinkDTO.setOptional(true);
  partUsageLinkDTO.setComment(""String_Node_Str"");
  partUsageLinkDTO.setReferenceDescription(""String_Node_Str"");
  ComponentDTO componentDTO=new ComponentDTO(""String_Node_Str"");
  componentDTO.setStandardPart(false);
  partUsageLinkDTO.setComponent(componentDTO);
  List<PartSubstituteLinkDTO> substituteDTOs=new ArrayList<>();
  PartSubstituteLinkDTO substituteLinkDTO=new PartSubstituteLinkDTO();
  substituteLinkDTO.setAmount(3);
  substituteLinkDTO.setUnit(""String_Node_Str"");
  ComponentDTO subComponentDTO=new ComponentDTO(""String_Node_Str"");
  substituteLinkDTO.setSubstitute(subComponentDTO);
  List<CADInstanceDTO> cadInstanceDTOs=new ArrayList<CADInstanceDTO>();
  List<CADInstanceDTO> subCadInstanceDTOs=new ArrayList<CADInstanceDTO>();
  cadInstanceDTOs.add(new CADInstanceDTO((Double)12.0,(Double)12.0,(Double)12.0,(Double)62.0,(Double)24.0,(Double)95.0));
  cadInstanceDTOs.add(new CADInstanceDTO((Double)22.0,(Double)12.0,(Double)72.0,(Double)52.0,(Double)14.0,(Double)45.0));
  subCadInstanceDTOs.add(new CADInstanceDTO((Double)10.0,(Double)11.0,(Double)12.0,(Double)13.0,(Double)14.0,(Double)15.0));
  subCadInstanceDTOs.add(new CADInstanceDTO((Double)110.0,(Double)10.0,(Double)10.0,(Double)52.0,(Double)14.0,(Double)45.0));
  subCadInstanceDTOs.add(new CADInstanceDTO((Double)120.0,(Double)10.0,(Double)10.0,(Double)52.0,(Double)14.0,(Double)45.0));
  substituteLinkDTO.setCadInstances(subCadInstanceDTOs);
  substituteDTOs.add(substituteLinkDTO);
  partUsageLinkDTO.setSubstitutes(substituteDTOs);
  partUsageLinkDTO.setCadInstances(cadInstanceDTOs);
  partUsageLinkDTOs.add(partUsageLinkDTO);
  data.setComponents(partUsageLinkDTOs);
  List<PartUsageLink> newComponents=new ArrayList<>();
  try {
    Mockito.when(productService.partMasterExists(Matchers.any(PartMasterKey.class))).thenReturn(false);
    Mockito.when(userManager.checkWorkspaceWriteAccess(ResourceUtil.WORKSPACE_ID)).thenReturn(user);
    Mockito.when(partResource.findOrCreatePartMaster(ResourceUtil.WORKSPACE_ID,componentDTO)).thenReturn(partMaster);
    Mockito.when(partResource.findOrCreatePartMaster(ResourceUtil.WORKSPACE_ID,subComponentDTO)).thenReturn(subPartMaster);
    newComponents=partResource.createComponents(ResourceUtil.WORKSPACE_ID,partUsageLinkDTOs);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  assertNotNull(newComponents);
  assertTrue(newComponents.size() == 1);
  assertTrue(newComponents.get(0).getReferenceDescription().equals(""String_Node_Str""));
  assertTrue(newComponents.get(0).getComponent().getNumber().equals(componentDTO.getNumber()));
  assertTrue(newComponents.get(0).getAmount() == 2);
  assertTrue(newComponents.get(0).getUnit().isEmpty());
  assertTrue(newComponents.get(0).isOptional());
  assertTrue(newComponents.get(0).getCadInstances().size() == 2);
  assertTrue(newComponents.get(0).getCadInstances().get(0).getRx() == (Double)12.0);
  assertTrue(newComponents.get(0).getCadInstances().get(0).getRy() == (Double)12.0);
  assertTrue(newComponents.get(0).getCadInstances().get(0).getRz() == (Double)12.0);
  assertTrue(newComponents.get(0).getCadInstances().get(0).getTx() == (Double)62.0);
  assertTrue(newComponents.get(0).getCadInstances().get(0).getTy() == (Double)24.0);
  assertTrue(newComponents.get(0).getCadInstances().get(0).getTz() == (Double)95.0);
  assertTrue(newComponents.get(0).getCadInstances().get(1).getRx() == (Double)22.0);
  assertTrue(newComponents.get(0).getCadInstances().get(1).getRy() == (Double)12.0);
  assertTrue(newComponents.get(0).getCadInstances().get(1).getRz() == (Double)72.0);
  assertTrue(newComponents.get(0).getCadInstances().get(1).getTx() == (Double)52.0);
  assertTrue(newComponents.get(0).getCadInstances().get(1).getTy() == (Double)14.0);
  assertTrue(newComponents.get(0).getCadInstances().get(1).getTz() == (Double)45.0);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().size() == 3);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().get(0).getRx() == 10);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().get(0).getRy() == 11);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().get(0).getRz() == 12);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().get(0).getTx() == 13.0);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().get(0).getTy() == 14.0);
  assertTrue(newComponents.get(0).getSubstitutes().get(0).getCadInstances().get(0).getTz() == 15.0);
}"
85996,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public List<LightPartMasterDTO> searchPartNumbers(@PathParam(""String_Node_Str"") String workspaceId,@QueryParam(""String_Node_Str"") String q) throws EntityNotFoundException, AccessRightException {
  List<PartMaster> partMasters=productService.findPartMasters(Tools.stripTrailingSlash(workspaceId),""String_Node_Str"" + q + ""String_Node_Str"",8);
  List<LightPartMasterDTO> partsMastersDTO=new ArrayList<>();
  for (  PartMaster p : partMasters) {
    partsMastersDTO.add(new LightPartMasterDTO(p.getNumber()));
  }
  return partsMastersDTO;
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public List<LightPartMasterDTO> searchPartNumbers(@PathParam(""String_Node_Str"") String workspaceId,@QueryParam(""String_Node_Str"") String q) throws EntityNotFoundException, AccessRightException {
  List<PartMaster> partMasters=productService.findPartMasters(Tools.stripTrailingSlash(workspaceId),""String_Node_Str"" + q + ""String_Node_Str"",8);
  List<LightPartMasterDTO> partsMastersDTO=new ArrayList<>();
  for (  PartMaster p : partMasters) {
    LightPartMasterDTO lightPartMasterDTO=new LightPartMasterDTO(p.getNumber(),p.getName());
    partsMastersDTO.add(lightPartMasterDTO);
  }
  return partsMastersDTO;
}"
85997,"public LightPartMasterDTO(String partNumber){
  this.partNumber=partNumber;
}","public LightPartMasterDTO(String partNumber,String partName){
  this.partNumber=partNumber;
  this.partName=partName;
}"
85998,"/** 
 * Returns the BinaryResource object given his Id. WARNING: You have to check access right before use it.
 * @param fullName Id of the <a href=""BinaryResource.html"">BinaryResource</a> of which the data file will be returned
 * @return The binary resource, a BinaryResource instance, that now needs to be created
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 * @throws FileNotFoundException
 * @throws NotAllowedException
 */
BinaryResource getBinaryResource(String fullName) throws WorkspaceNotFoundException, NotAllowedException, FileNotFoundException, UserNotFoundException, UserNotActiveException, AccessRightException ;","/** 
 * Returns the BinaryResource object given his Id. WARNING: You have to check access right before use it.
 * @param fullName Id of the <a href=""BinaryResource.html"">BinaryResource</a> of which the data file will be returned
 * @return The binary resource, a BinaryResource instance, that now needs to be created
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 * @throws FileNotFoundException
 * @throws NotAllowedException
 * @throws AccessRightException
 */
BinaryResource getBinaryResource(String fullName) throws WorkspaceNotFoundException, NotAllowedException, FileNotFoundException, UserNotFoundException, UserNotActiveException, AccessRightException ;"
85999,"/** 
 * Returns the BinaryResource object given his Id. WARNING: You have to check access right before use it.
 * @param fullName Id of the <a href=""BinaryResource.html"">BinaryResource</a> of which the data file will be returned
 * @return The binary resource, a BinaryResource instance, that now needs to be created
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 * @throws FileNotFoundException
 * @throws NotAllowedException
 */
BinaryResource getTemplateBinaryResource(String fullName) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, FileNotFoundException ;","/** 
 * Returns the BinaryResource object given his Id. WARNING: You have to check access right before use it.
 * @param fullName Id of the <a href=""BinaryResource.html"">BinaryResource</a> of which the data file will be returned
 * @return The binary resource, a BinaryResource instance, that now needs to be created
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 * @throws FileNotFoundException
 */
BinaryResource getTemplateBinaryResource(String fullName) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, FileNotFoundException ;"
86000,"/** 
 * Undoes checkout the given part revision. As a consequence its current working copy, represented by its latest <a href=""PartIteration.html"">PartIteration</a> will be deleted. Thus, some modifications may be lost.
 * @param partRPK The id of the part revision to undo check out
 * @return The part revision which is now in the checkin state
 * @throws NotAllowedException
 * @throws PartRevisionNotFoundException
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 */
PartRevision undoCheckOutPart(PartRevisionKey partRPK) throws NotAllowedException, PartRevisionNotFoundException, UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, AccessRightException ;","/** 
 * Undoes checkout the given part revision. As a consequence its current working copy, represented by its latest <a href=""PartIteration.html"">PartIteration</a> will be deleted. Thus, some modifications may be lost.
 * @param partRPK The id of the part revision to undo check out
 * @return The part revision which is now in the checkin state
 * @throws NotAllowedException
 * @throws PartRevisionNotFoundException
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 * @throws AccessRightException
 */
PartRevision undoCheckOutPart(PartRevisionKey partRPK) throws NotAllowedException, PartRevisionNotFoundException, UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, AccessRightException ;"
